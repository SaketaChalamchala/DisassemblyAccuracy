.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 7556A6639E78AA36ADC056F0C2463820
.text:00000000 ; Input CRC32 : 11D29115
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NCompress::NZ::CDecoder::Free(NCompress::NZ::CDecoder *__hidden this)
.text:00000000                 public ?Free@CDecoder@NZ@NCompress@@QAEXXZ
.text:00000000 ?Free@CDecoder@NZ@NCompress@@QAEXXZ proc near
.text:00000000                                         ; CODE XREF: NCompress::NZ::CDecoder::~CDecoder(void)+1Ap
.text:00000000                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+28Ep
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 mov     ecx, [eax+8]
.text:00000014                 push    ecx
.text:00000015                 call    _MyFree@4       ; MyFree(x)
.text:0000001A                 mov     edx, [ebp+var_4]
.text:0000001D                 mov     dword ptr [edx+8], 0
.text:00000024                 mov     eax, [ebp+var_4]
.text:00000027
.text:00000027 loc_27:                                 ; DATA XREF: .text:00000928o
.text:00000027                 mov     ecx, [eax+0Ch]
.text:0000002A                 push    ecx
.text:0000002B                 call    _MyFree@4       ; MyFree(x)
.text:00000030                 mov     edx, [ebp+var_4]
.text:00000033                 mov     dword ptr [edx+0Ch], 0
.text:0000003A                 mov     eax, [ebp+var_4]
.text:0000003D                 mov     ecx, [eax+10h]
.text:00000040
.text:00000040 loc_40:                                 ; DATA XREF: .xdata$x:00001130o
.text:00000040                 push    ecx
.text:00000041                 call    _MyFree@4       ; MyFree(x)
.text:00000046                 mov     edx, [ebp+var_4]
.text:00000049                 mov     dword ptr [edx+10h], 0
.text:00000050                 add     esp, 4
.text:00000053                 cmp     ebp, esp
.text:00000055                 call    __RTC_CheckEsp
.text:0000005A                 mov     esp, ebp
.text:0000005C                 pop     ebp
.text:0000005D                 retn
.text:0000005D ?Free@CDecoder@NZ@NCompress@@QAEXXZ endp
.text:0000005D
.text:0000005D ; ---------------------------------------------------------------------------
.text:0000005E                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; _DWORD __thiscall NCompress::NZ::CDecoder::~CDecoder(NCompress::NZ::CDecoder *__hidden this)
.text:00000060                 public ??1CDecoder@NZ@NCompress@@QAE@XZ
.text:00000060 ??1CDecoder@NZ@NCompress@@QAE@XZ proc near
.text:00000060                                         ; CODE XREF: NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00000060
.text:00000060 var_4           = dword ptr -4
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 push    ecx
.text:00000064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000006B                 mov     [ebp+var_4], ecx
.text:0000006E                 mov     eax, [ebp+var_4]
.text:00000071                 mov     dword ptr [eax], offset ??_7CDecoder@NZ@NCompress@@6B@ ; const NCompress::NZ::CDecoder::`vftable'
.text:00000077                 mov     ecx, [ebp+var_4] ; this
.text:0000007A                 call    ?Free@CDecoder@NZ@NCompress@@QAEXXZ ; NCompress::NZ::CDecoder::Free(void)
.text:0000007F                 add     esp, 4
.text:00000082                 cmp     ebp, esp
.text:00000084                 call    __RTC_CheckEsp
.text:00000089                 mov     esp, ebp
.text:0000008B                 pop     ebp
.text:0000008C                 retn
.text:0000008C ??1CDecoder@NZ@NCompress@@QAE@XZ endp
.text:0000008C
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008D                 align 10h
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; __int32 __thiscall NCompress::NZ::CDecoder::CodeReal(NCompress::NZ::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000090                 public ?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000090 ?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000090                                         ; CODE XREF: NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+59p
.text:00000090
.text:00000090 var_130         = dword ptr -130h
.text:00000090 var_12C         = dword ptr -12Ch
.text:00000090 var_128         = dword ptr -128h
.text:00000090 var_124         = dword ptr -124h
.text:00000090 var_120         = dword ptr -120h
.text:00000090 var_11C         = dword ptr -11Ch
.text:00000090 var_118         = dword ptr -118h
.text:00000090 var_114         = dword ptr -114h
.text:00000090 var_110         = dword ptr -110h
.text:00000090 var_10C         = dword ptr -10Ch
.text:00000090 var_108         = dword ptr -108h
.text:00000090 var_104         = dword ptr -104h
.text:00000090 var_100         = dword ptr -100h
.text:00000090 var_FC          = dword ptr -0FCh
.text:00000090 var_F8          = dword ptr -0F8h
.text:00000090 var_F4          = dword ptr -0F4h
.text:00000090 var_F0          = dword ptr -0F0h
.text:00000090 var_EC          = dword ptr -0ECh
.text:00000090 var_E8          = dword ptr -0E8h
.text:00000090 var_E4          = dword ptr -0E4h
.text:00000090 var_DC          = dword ptr -0DCh
.text:00000090 var_D8          = dword ptr -0D8h
.text:00000090 var_CC          = dword ptr -0CCh
.text:00000090 var_C8          = dword ptr -0C8h
.text:00000090 var_C0          = dword ptr -0C0h
.text:00000090 var_BC          = dword ptr -0BCh
.text:00000090 var_B8          = dword ptr -0B8h
.text:00000090 var_B1          = byte ptr -0B1h
.text:00000090 var_B0          = dword ptr -0B0h
.text:00000090 var_AC          = dword ptr -0ACh
.text:00000090 var_A8          = dword ptr -0A8h
.text:00000090 var_A4          = dword ptr -0A4h
.text:00000090 var_A0          = dword ptr -0A0h
.text:00000090 var_9C          = dword ptr -9Ch
.text:00000090 var_98          = dword ptr -98h
.text:00000090 var_91          = byte ptr -91h
.text:00000090 var_8C          = byte ptr -8Ch
.text:00000090 var_8B          = byte ptr -8Bh
.text:00000090 var_8A          = byte ptr -8Ah
.text:00000090 var_70          = byte ptr -70h
.text:00000090 var_40          = byte ptr -40h
.text:00000090 var_14          = dword ptr -14h
.text:00000090 var_10          = dword ptr -10h
.text:00000090 var_C           = dword ptr -0Ch
.text:00000090 var_4           = dword ptr -4
.text:00000090 arg_0           = dword ptr  8
.text:00000090 arg_4           = dword ptr  0Ch
.text:00000090 arg_10          = dword ptr  18h
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 push    0FFFFFFFFh
.text:00000095                 push    offset __ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:0000009A                 mov     eax, large fs:0
.text:000000A0                 push    eax
.text:000000A1                 sub     esp, 124h
.text:000000A7                 push    esi
.text:000000A8                 push    edi
.text:000000A9                 push    ecx
.text:000000AA                 lea     edi, [ebp+var_130]
.text:000000B0                 mov     ecx, 49h ; 'I'
.text:000000B5                 mov     eax, 0CCCCCCCCh
.text:000000BA                 rep stosd
.text:000000BC                 pop     ecx
.text:000000BD                 mov     eax, dword ptr ds:___security_cookie
.text:000000C2                 xor     eax, ebp
.text:000000C4                 mov     [ebp+var_10], eax
.text:000000C7                 push    eax
.text:000000C8                 lea     eax, [ebp+var_C]
.text:000000CB                 mov     large fs:0, eax
.text:000000D1                 mov     [ebp+var_14], ecx
.text:000000D4                 lea     ecx, [ebp+var_40]
.text:000000D7                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:000000DC                 mov     [ebp+var_4], 0
.text:000000E3                 lea     ecx, [ebp+var_70] ; this
.text:000000E6                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:000000EB                 mov     byte ptr [ebp+var_4], 1
.text:000000EF                 mov     eax, [ebp+var_14]
.text:000000F2                 mov     dword ptr [eax+18h], 0
.text:000000F9                 mov     dword ptr [eax+1Ch], 0
.text:00000100                 push    100000h         ; unsigned int
.text:00000105                 lea     ecx, [ebp+var_40] ; this
.text:00000108                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:0000010D                 movzx   ecx, al
.text:00000110                 test    ecx, ecx
.text:00000112                 jnz     short loc_144
.text:00000114                 mov     [ebp+var_FC], 8007000Eh
.text:0000011E                 mov     byte ptr [ebp+var_4], 0
.text:00000122                 lea     ecx, [ebp+var_70] ; this
.text:00000125                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:0000012A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000131                 lea     ecx, [ebp+var_40] ; this
.text:00000134                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000139                 mov     eax, [ebp+var_FC]
.text:0000013F                 jmp     loc_8D4
.text:00000144 ; ---------------------------------------------------------------------------
.text:00000144
.text:00000144 loc_144:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+82j
.text:00000144                 mov     edx, [ebp+arg_0]
.text:00000147                 push    edx             ; struct ISequentialInStream *
.text:00000148                 lea     ecx, [ebp+var_40] ; this
.text:0000014B                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00000150                 lea     ecx, [ebp+var_40] ; this
.text:00000153                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00000158                 push    100000h         ; unsigned int
.text:0000015D                 lea     ecx, [ebp+var_70] ; this
.text:00000160                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00000165                 movzx   eax, al
.text:00000168                 test    eax, eax
.text:0000016A                 jnz     short loc_19C
.text:0000016C                 mov     [ebp+var_100], 8007000Eh
.text:00000176                 mov     byte ptr [ebp+var_4], 0
.text:0000017A                 lea     ecx, [ebp+var_70] ; this
.text:0000017D                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000182                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000189                 lea     ecx, [ebp+var_40] ; this
.text:0000018C                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000191                 mov     eax, [ebp+var_100]
.text:00000197                 jmp     loc_8D4
.text:0000019C ; ---------------------------------------------------------------------------
.text:0000019C
.text:0000019C loc_19C:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DAj
.text:0000019C                 mov     ecx, [ebp+arg_4]
.text:0000019F                 push    ecx             ; struct ISequentialOutStream *
.text:000001A0                 lea     ecx, [ebp+var_70] ; this
.text:000001A3                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:000001A8                 lea     ecx, [ebp+var_70] ; this
.text:000001AB                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:000001B0                 push    3               ; unsigned int
.text:000001B2                 lea     edx, [ebp+var_8C]
.text:000001B8                 push    edx             ; unsigned __int8 *
.text:000001B9                 lea     ecx, [ebp+var_40] ; this
.text:000001BC                 call    ?ReadBytes@CInBufferBase@@QAEIPAEI@Z ; CInBufferBase::ReadBytes(uchar *,uint)
.text:000001C1                 cmp     eax, 3
.text:000001C4                 jnb     short loc_1F6
.text:000001C6                 mov     [ebp+var_104], 1
.text:000001D0                 mov     byte ptr [ebp+var_4], 0
.text:000001D4                 lea     ecx, [ebp+var_70] ; this
.text:000001D7                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000001DC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001E3                 lea     ecx, [ebp+var_40] ; this
.text:000001E6                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000001EB                 mov     eax, [ebp+var_104]
.text:000001F1                 jmp     loc_8D4
.text:000001F6 ; ---------------------------------------------------------------------------
.text:000001F6
.text:000001F6 loc_1F6:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+134j
.text:000001F6                 movzx   eax, [ebp+var_8C]
.text:000001FD                 cmp     eax, 1Fh
.text:00000200                 jnz     short loc_211
.text:00000202                 movzx   ecx, [ebp+var_8B]
.text:00000209                 cmp     ecx, 9Dh ; '¥'
.text:0000020F                 jz      short loc_241
.text:00000211
.text:00000211 loc_211:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+170j
.text:00000211                 mov     [ebp+var_108], 1
.text:0000021B                 mov     byte ptr [ebp+var_4], 0
.text:0000021F                 lea     ecx, [ebp+var_70] ; this
.text:00000222                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000227                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000022E                 lea     ecx, [ebp+var_40] ; this
.text:00000231                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000236                 mov     eax, [ebp+var_108]
.text:0000023C                 jmp     loc_8D4
.text:00000241 ; ---------------------------------------------------------------------------
.text:00000241
.text:00000241 loc_241:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+17Fj
.text:00000241                 mov     dl, [ebp+var_8A]
.text:00000247                 mov     [ebp+var_91], dl
.text:0000024D                 movzx   eax, [ebp+var_91]
.text:00000254                 and     eax, 60h
.text:00000257                 jz      short loc_289
.text:00000259                 mov     [ebp+var_10C], 1
.text:00000263                 mov     byte ptr [ebp+var_4], 0
.text:00000267                 lea     ecx, [ebp+var_70] ; this
.text:0000026A                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:0000026F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000276                 lea     ecx, [ebp+var_40] ; this
.text:00000279                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:0000027E                 mov     eax, [ebp+var_10C]
.text:00000284                 jmp     loc_8D4
.text:00000289 ; ---------------------------------------------------------------------------
.text:00000289
.text:00000289 loc_289:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C7j
.text:00000289                 movzx   ecx, [ebp+var_91]
.text:00000290                 and     ecx, 1Fh
.text:00000293                 mov     [ebp+var_98], ecx
.text:00000299                 cmp     [ebp+var_98], 9
.text:000002A0                 jb      short loc_2AB
.text:000002A2                 cmp     [ebp+var_98], 10h
.text:000002A9                 jbe     short loc_2DB
.text:000002AB
.text:000002AB loc_2AB:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+210j
.text:000002AB                 mov     [ebp+var_110], 1
.text:000002B5                 mov     byte ptr [ebp+var_4], 0
.text:000002B9                 lea     ecx, [ebp+var_70] ; this
.text:000002BC                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000002C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002C8                 lea     ecx, [ebp+var_40] ; this
.text:000002CB                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000002D0                 mov     eax, [ebp+var_110]
.text:000002D6                 jmp     loc_8D4
.text:000002DB ; ---------------------------------------------------------------------------
.text:000002DB
.text:000002DB loc_2DB:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+219j
.text:000002DB                 mov     edx, 1
.text:000002E0                 mov     ecx, [ebp+var_98]
.text:000002E6                 shl     edx, cl
.text:000002E8                 mov     [ebp+var_9C], edx
.text:000002EE                 mov     eax, [ebp+var_14]
.text:000002F1                 mov     ecx, [ebp+var_98]
.text:000002F7                 cmp     ecx, [eax+14h]
.text:000002FA                 jnz     short loc_31B
.text:000002FC                 mov     edx, [ebp+var_14]
.text:000002FF                 cmp     dword ptr [edx+8], 0
.text:00000303                 jz      short loc_31B
.text:00000305                 mov     eax, [ebp+var_14]
.text:00000308                 cmp     dword ptr [eax+0Ch], 0
.text:0000030C                 jz      short loc_31B
.text:0000030E                 mov     ecx, [ebp+var_14]
.text:00000311                 cmp     dword ptr [ecx+10h], 0
.text:00000315                 jnz     loc_412
.text:0000031B
.text:0000031B loc_31B:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+26Aj
.text:0000031B                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+273j ...
.text:0000031B                 mov     ecx, [ebp+var_14] ; this
.text:0000031E                 call    ?Free@CDecoder@NZ@NCompress@@QAEXXZ ; NCompress::NZ::CDecoder::Free(void)
.text:00000323                 mov     edx, [ebp+var_9C]
.text:00000329                 shl     edx, 1
.text:0000032B                 push    edx
.text:0000032C                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00000331                 mov     ecx, [ebp+var_14]
.text:00000334                 mov     [ecx+8], eax
.text:00000337                 mov     edx, [ebp+var_14]
.text:0000033A                 cmp     dword ptr [edx+8], 0
.text:0000033E                 jnz     short loc_370
.text:00000340                 mov     [ebp+var_114], 8007000Eh
.text:0000034A                 mov     byte ptr [ebp+var_4], 0
.text:0000034E                 lea     ecx, [ebp+var_70] ; this
.text:00000351                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000356                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000035D                 lea     ecx, [ebp+var_40] ; this
.text:00000360                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000365                 mov     eax, [ebp+var_114]
.text:0000036B                 jmp     loc_8D4
.text:00000370 ; ---------------------------------------------------------------------------
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2AEj
.text:00000370                 mov     eax, [ebp+var_9C]
.text:00000376                 push    eax
.text:00000377                 call    _MyAlloc@4      ; MyAlloc(x)
.text:0000037C                 mov     ecx, [ebp+var_14]
.text:0000037F                 mov     [ecx+0Ch], eax
.text:00000382                 mov     edx, [ebp+var_14]
.text:00000385                 cmp     dword ptr [edx+0Ch], 0
.text:00000389                 jnz     short loc_3BB
.text:0000038B                 mov     [ebp+var_118], 8007000Eh
.text:00000395                 mov     byte ptr [ebp+var_4], 0
.text:00000399                 lea     ecx, [ebp+var_70] ; this
.text:0000039C                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000003A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003A8                 lea     ecx, [ebp+var_40] ; this
.text:000003AB                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000003B0                 mov     eax, [ebp+var_118]
.text:000003B6                 jmp     loc_8D4
.text:000003BB ; ---------------------------------------------------------------------------
.text:000003BB
.text:000003BB loc_3BB:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2F9j
.text:000003BB                 mov     eax, [ebp+var_9C]
.text:000003C1                 push    eax
.text:000003C2                 call    _MyAlloc@4      ; MyAlloc(x)
.text:000003C7                 mov     ecx, [ebp+var_14]
.text:000003CA                 mov     [ecx+10h], eax
.text:000003CD                 mov     edx, [ebp+var_14]
.text:000003D0                 cmp     dword ptr [edx+10h], 0
.text:000003D4                 jnz     short loc_406
.text:000003D6                 mov     [ebp+var_11C], 8007000Eh
.text:000003E0                 mov     byte ptr [ebp+var_4], 0
.text:000003E4                 lea     ecx, [ebp+var_70] ; this
.text:000003E7                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000003EC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003F3                 lea     ecx, [ebp+var_40] ; this
.text:000003F6                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000003FB                 mov     eax, [ebp+var_11C]
.text:00000401                 jmp     loc_8D4
.text:00000406 ; ---------------------------------------------------------------------------
.text:00000406
.text:00000406 loc_406:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+344j
.text:00000406                 mov     eax, [ebp+var_14]
.text:00000409                 mov     ecx, [ebp+var_98]
.text:0000040F                 mov     [eax+14h], ecx
.text:00000412
.text:00000412 loc_412:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+285j
.text:00000412                 mov     [ebp+var_A4], 0
.text:0000041C                 mov     [ebp+var_A0], 0
.text:00000426                 movzx   edx, [ebp+var_91]
.text:0000042D                 and     edx, 80h
.text:00000433                 neg     edx
.text:00000435                 sbb     edx, edx
.text:00000437                 and     edx, 0FFFF0100h
.text:0000043D                 add     edx, 10000h
.text:00000443                 mov     [ebp+var_A8], edx
.text:00000449                 mov     [ebp+var_AC], 9
.text:00000453                 xor     eax, eax
.text:00000455                 cmp     [ebp+var_A8], 100h
.text:0000045F                 setz    al
.text:00000462                 add     eax, 100h
.text:00000467                 mov     [ebp+var_B0], eax
.text:0000046D                 mov     [ebp+var_B1], 0
.text:00000474                 mov     [ebp+var_B8], 0
.text:0000047E                 mov     [ebp+var_BC], 0
.text:00000488                 mov     ecx, [ebp+var_14]
.text:0000048B                 mov     edx, [ecx+8]
.text:0000048E                 xor     eax, eax
.text:00000490                 mov     [edx+200h], ax
.text:00000497                 mov     ecx, [ebp+var_14]
.text:0000049A                 mov     edx, [ecx+0Ch]
.text:0000049D                 mov     byte ptr [edx+100h], 0
.text:000004A4                 mov     [ebp+var_C0], 0
.text:000004AE
.text:000004AE loc_4AE:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+643j
.text:000004AE                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_860j
.text:000004AE                 mov     eax, [ebp+var_BC]
.text:000004B4                 cmp     eax, [ebp+var_B8]
.text:000004BA                 jnz     loc_5D6
.text:000004C0                 mov     ecx, [ebp+var_AC]
.text:000004C6                 push    ecx             ; unsigned int
.text:000004C7                 lea     edx, [ebp+var_8C]
.text:000004CD                 push    edx             ; unsigned __int8 *
.text:000004CE                 lea     ecx, [ebp+var_40] ; this
.text:000004D1                 call    ?ReadBytes@CInBufferBase@@QAEIPAEI@Z ; CInBufferBase::ReadBytes(uchar *,uint)
.text:000004D6                 shl     eax, 3
.text:000004D9                 mov     [ebp+var_BC], eax
.text:000004DF                 mov     [ebp+var_B8], 0
.text:000004E9                 lea     ecx, [ebp+var_70] ; this
.text:000004EC                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:000004F1                 mov     [ebp+var_CC], eax
.text:000004F7                 mov     [ebp+var_C8], edx
.text:000004FD                 cmp     [ebp+arg_10], 0
.text:00000501                 jz      loc_5D6
.text:00000507                 mov     eax, [ebp+var_CC]
.text:0000050D                 sub     eax, [ebp+var_A4]
.text:00000513                 mov     ecx, [ebp+var_C8]
.text:00000519                 sbb     ecx, [ebp+var_A0]
.text:0000051F                 mov     [ebp+var_12C], eax
.text:00000525                 mov     [ebp+var_128], ecx
.text:0000052B                 cmp     [ebp+var_128], 0
.text:00000532                 ja      short loc_544
.text:00000534                 cmp     [ebp+var_12C], 2000h
.text:0000053E                 jb      loc_5D6
.text:00000544
.text:00000544 loc_544:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4A2j
.text:00000544                 mov     edx, [ebp+var_CC]
.text:0000054A                 mov     [ebp+var_A4], edx
.text:00000550                 mov     eax, [ebp+var_C8]
.text:00000556                 mov     [ebp+var_A0], eax
.text:0000055C                 lea     ecx, [ebp+var_40] ; this
.text:0000055F                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00000564                 mov     [ebp+var_DC], eax
.text:0000056A                 mov     [ebp+var_D8], edx
.text:00000570                 mov     esi, esp
.text:00000572                 lea     ecx, [ebp+var_CC]
.text:00000578                 push    ecx
.text:00000579                 lea     edx, [ebp+var_DC]
.text:0000057F                 push    edx
.text:00000580                 mov     eax, [ebp+arg_10]
.text:00000583                 mov     ecx, [eax]
.text:00000585                 mov     edx, [ebp+arg_10]
.text:00000588                 push    edx
.text:00000589                 mov     eax, [ecx+0Ch]
.text:0000058C                 call    eax
.text:0000058E                 cmp     esi, esp
.text:00000590                 call    __RTC_CheckEsp
.text:00000595                 mov     [ebp+var_E4], eax
.text:0000059B                 cmp     [ebp+var_E4], 0
.text:000005A2                 jz      short loc_5D6
.text:000005A4                 mov     ecx, [ebp+var_E4]
.text:000005AA                 mov     [ebp+var_120], ecx
.text:000005B0                 mov     byte ptr [ebp+var_4], 0
.text:000005B4                 lea     ecx, [ebp+var_70] ; this
.text:000005B7                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000005BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005C3                 lea     ecx, [ebp+var_40] ; this
.text:000005C6                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000005CB                 mov     eax, [ebp+var_120]
.text:000005D1                 jmp     loc_8D4
.text:000005D6 ; ---------------------------------------------------------------------------
.text:000005D6
.text:000005D6 loc_5D6:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+42Aj
.text:000005D6                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+471j ...
.text:000005D6                 mov     edx, [ebp+var_B8]
.text:000005DC                 shr     edx, 3
.text:000005DF                 mov     [ebp+var_E8], edx
.text:000005E5                 mov     eax, [ebp+var_E8]
.text:000005EB                 movzx   ecx, [ebp+eax+var_8C]
.text:000005F3                 mov     edx, [ebp+var_E8]
.text:000005F9                 movzx   eax, [ebp+edx+var_8B]
.text:00000601                 shl     eax, 8
.text:00000604                 or      ecx, eax
.text:00000606                 mov     edx, [ebp+var_E8]
.text:0000060C                 movzx   eax, [ebp+edx+var_8A]
.text:00000614                 shl     eax, 10h
.text:00000617                 or      ecx, eax
.text:00000619                 mov     [ebp+var_EC], ecx
.text:0000061F                 mov     ecx, [ebp+var_B8]
.text:00000625                 and     ecx, 7
.text:00000628                 mov     edx, [ebp+var_EC]
.text:0000062E                 shr     edx, cl
.text:00000630                 mov     [ebp+var_EC], edx
.text:00000636                 mov     eax, 1
.text:0000063B                 mov     ecx, [ebp+var_AC]
.text:00000641                 shl     eax, cl
.text:00000643                 sub     eax, 1
.text:00000646                 and     eax, [ebp+var_EC]
.text:0000064C                 mov     [ebp+var_EC], eax
.text:00000652                 mov     ecx, [ebp+var_B8]
.text:00000658                 add     ecx, [ebp+var_AC]
.text:0000065E                 mov     [ebp+var_B8], ecx
.text:00000664                 mov     edx, [ebp+var_B8]
.text:0000066A                 cmp     edx, [ebp+var_BC]
.text:00000670                 jbe     short loc_677
.text:00000672                 jmp     loc_865
.text:00000677 ; ---------------------------------------------------------------------------
.text:00000677
.text:00000677 loc_677:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5E0j
.text:00000677                 mov     eax, [ebp+var_EC]
.text:0000067D                 cmp     eax, [ebp+var_B0]
.text:00000683                 jb      short loc_694
.text:00000685                 mov     [ebp+var_C0], 1
.text:0000068F                 jmp     loc_865
.text:00000694 ; ---------------------------------------------------------------------------
.text:00000694
.text:00000694 loc_694:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5F3j
.text:00000694                 mov     ecx, [ebp+var_EC]
.text:0000069A                 cmp     ecx, [ebp+var_A8]
.text:000006A0                 jnz     short loc_6D8
.text:000006A2                 mov     [ebp+var_B8], 0
.text:000006AC                 mov     edx, [ebp+var_B8]
.text:000006B2                 mov     [ebp+var_BC], edx
.text:000006B8                 mov     [ebp+var_AC], 9
.text:000006C2                 mov     [ebp+var_B0], 101h
.text:000006CC                 mov     [ebp+var_B1], 0
.text:000006D3                 jmp     loc_4AE
.text:000006D8 ; ---------------------------------------------------------------------------
.text:000006D8
.text:000006D8 loc_6D8:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+610j
.text:000006D8                 mov     eax, [ebp+var_EC]
.text:000006DE                 mov     [ebp+var_F0], eax
.text:000006E4                 mov     [ebp+var_F4], 0
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6ADj
.text:000006EE                 cmp     [ebp+var_F0], 100h
.text:000006F8                 jb      short loc_73F
.text:000006FA                 mov     ecx, [ebp+var_14]
.text:000006FD                 mov     edx, [ecx+0Ch]
.text:00000700                 mov     eax, [ebp+var_14]
.text:00000703                 mov     ecx, [eax+10h]
.text:00000706                 mov     eax, [ebp+var_F4]
.text:0000070C                 mov     esi, [ebp+var_F0]
.text:00000712                 mov     dl, [edx+esi]
.text:00000715                 mov     [ecx+eax], dl
.text:00000718                 mov     eax, [ebp+var_F4]
.text:0000071E                 add     eax, 1
.text:00000721                 mov     [ebp+var_F4], eax
.text:00000727                 mov     ecx, [ebp+var_14]
.text:0000072A                 mov     edx, [ecx+8]
.text:0000072D                 mov     eax, [ebp+var_F0]
.text:00000733                 movzx   ecx, word ptr [edx+eax*2]
.text:00000737                 mov     [ebp+var_F0], ecx
.text:0000073D                 jmp     short loc_6EE
.text:0000073F ; ---------------------------------------------------------------------------
.text:0000073F
.text:0000073F loc_73F:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+668j
.text:0000073F                 mov     edx, [ebp+var_14]
.text:00000742                 mov     eax, [edx+10h]
.text:00000745                 mov     ecx, [ebp+var_F4]
.text:0000074B                 mov     dl, byte ptr [ebp+var_F0]
.text:00000751                 mov     [eax+ecx], dl
.text:00000754                 mov     eax, [ebp+var_F4]
.text:0000075A                 add     eax, 1
.text:0000075D                 mov     [ebp+var_F4], eax
.text:00000763                 movzx   ecx, [ebp+var_B1]
.text:0000076A                 test    ecx, ecx
.text:0000076C                 jz      short loc_7A3
.text:0000076E                 mov     edx, [ebp+var_14]
.text:00000771                 mov     eax, [edx+0Ch]
.text:00000774                 mov     ecx, [ebp+var_B0]
.text:0000077A                 mov     dl, byte ptr [ebp+var_F0]
.text:00000780                 mov     [ecx+eax-1], dl
.text:00000784                 mov     eax, [ebp+var_B0]
.text:0000078A                 sub     eax, 1
.text:0000078D                 cmp     [ebp+var_EC], eax
.text:00000793                 jnz     short loc_7A3
.text:00000795                 mov     ecx, [ebp+var_14]
.text:00000798                 mov     edx, [ecx+10h]
.text:0000079B                 mov     al, byte ptr [ebp+var_F0]
.text:000007A1                 mov     [edx], al
.text:000007A3
.text:000007A3 loc_7A3:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6DCj
.text:000007A3                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+703j ...
.text:000007A3                 mov     ecx, [ebp+var_F4]
.text:000007A9                 sub     ecx, 1
.text:000007AC                 mov     [ebp+var_F4], ecx
.text:000007B2                 mov     edx, [ebp+var_14]
.text:000007B5                 mov     eax, [edx+10h]
.text:000007B8                 mov     ecx, [ebp+var_F4]
.text:000007BE                 movzx   edx, byte ptr [eax+ecx]
.text:000007C2                 push    edx             ; unsigned __int8
.text:000007C3                 lea     ecx, [ebp+var_70] ; this
.text:000007C6                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:000007CB                 cmp     [ebp+var_F4], 0
.text:000007D2                 ja      short loc_7A3
.text:000007D4                 mov     eax, [ebp+var_B0]
.text:000007DA                 cmp     eax, [ebp+var_9C]
.text:000007E0                 jnb     short loc_859
.text:000007E2                 mov     [ebp+var_B1], 1
.text:000007E9                 mov     ecx, [ebp+var_14]
.text:000007EC                 mov     edx, [ecx+8]
.text:000007EF                 mov     eax, [ebp+var_B0]
.text:000007F5                 mov     cx, word ptr [ebp+var_EC]
.text:000007FC                 mov     [edx+eax*2], cx
.text:00000800                 mov     edx, [ebp+var_B0]
.text:00000806                 add     edx, 1
.text:00000809                 mov     [ebp+var_B0], edx
.text:0000080F                 mov     eax, 1
.text:00000814                 mov     ecx, [ebp+var_AC]
.text:0000081A                 shl     eax, cl
.text:0000081C                 cmp     [ebp+var_B0], eax
.text:00000822                 jbe     short loc_857
.text:00000824                 mov     ecx, [ebp+var_AC]
.text:0000082A                 cmp     ecx, [ebp+var_98]
.text:00000830                 jnb     short loc_857
.text:00000832                 mov     [ebp+var_B8], 0
.text:0000083C                 mov     edx, [ebp+var_B8]
.text:00000842                 mov     [ebp+var_BC], edx
.text:00000848                 mov     eax, [ebp+var_AC]
.text:0000084E                 add     eax, 1
.text:00000851                 mov     [ebp+var_AC], eax
.text:00000857
.text:00000857 loc_857:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+792j
.text:00000857                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7A0j
.text:00000857                 jmp     short loc_860
.text:00000859 ; ---------------------------------------------------------------------------
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+750j
.text:00000859                 mov     [ebp+var_B1], 0
.text:00000860
.text:00000860 loc_860:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_857j
.text:00000860                 jmp     loc_4AE
.text:00000865 ; ---------------------------------------------------------------------------
.text:00000865
.text:00000865 loc_865:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5E2j
.text:00000865                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5FFj
.text:00000865                 lea     ecx, [ebp+var_40] ; this
.text:00000868                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:0000086D                 mov     ecx, [ebp+var_14]
.text:00000870                 mov     [ecx+18h], eax
.text:00000873                 mov     [ecx+1Ch], edx
.text:00000876                 lea     ecx, [ebp+var_70] ; this
.text:00000879                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:0000087E                 mov     [ebp+var_F8], eax
.text:00000884                 cmp     [ebp+var_C0], 0
.text:0000088B                 jnz     short loc_89B
.text:0000088D                 mov     edx, [ebp+var_F8]
.text:00000893                 mov     [ebp+var_130], edx
.text:00000899                 jmp     short loc_8A7
.text:0000089B ; ---------------------------------------------------------------------------
.text:0000089B
.text:0000089B loc_89B:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7FBj
.text:0000089B                 mov     eax, [ebp+var_C0]
.text:000008A1                 mov     [ebp+var_130], eax
.text:000008A7
.text:000008A7 loc_8A7:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+809j
.text:000008A7                 mov     ecx, [ebp+var_130]
.text:000008AD                 mov     [ebp+var_124], ecx
.text:000008B3                 mov     byte ptr [ebp+var_4], 0
.text:000008B7                 lea     ecx, [ebp+var_70] ; this
.text:000008BA                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000008BF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008C6                 lea     ecx, [ebp+var_40] ; this
.text:000008C9                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000008CE                 mov     eax, [ebp+var_124]
.text:000008D4
.text:000008D4 loc_8D4:                                ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+AFj
.text:000008D4                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+107j ...
.text:000008D4                 push    edx
.text:000008D5                 mov     ecx, ebp
.text:000008D7                 push    eax
.text:000008D8                 lea     edx, $LN48
.text:000008DE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008E3                 pop     eax
.text:000008E4                 pop     edx
.text:000008E5                 mov     ecx, [ebp+var_C]
.text:000008E8                 mov     large fs:0, ecx
.text:000008EF                 pop     ecx
.text:000008F0                 pop     edi
.text:000008F1                 pop     esi
.text:000008F2                 mov     ecx, [ebp+var_10]
.text:000008F5                 xor     ecx, ebp
.text:000008F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000008FC                 add     esp, 130h
.text:00000902                 cmp     ebp, esp
.text:00000904                 call    __RTC_CheckEsp
.text:00000909                 mov     esp, ebp
.text:0000090B                 pop     ebp
.text:0000090C                 retn    14h
.text:0000090C ?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:0000090C
.text:0000090C ; ---------------------------------------------------------------------------
.text:0000090F                 align 10h
.text:00000910 $LN48           dd 5                    ; DATA XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+848o
.text:00000914                 dd offset $LN47
.text:00000918 ; ---------------------------------------------------------------------------
.text:00000918
.text:00000918 $LN47:                                  ; DATA XREF: .text:00000914o
.text:00000918                 sar     bh, 0FFh
.text:0000091B                 jmp     fword ptr [eax]
.text:0000091B ; ---------------------------------------------------------------------------
.text:0000091D                 align 10h
.text:00000920                 dd offset $LN41         ; "inBuffer"
.text:00000924                 db 90h
.text:00000925                 db 3 dup(0FFh)
.text:00000928                 dd offset loc_27+1
.text:0000092C                 dd offset $LN42         ; "outBuffer"
.text:00000930                 dd 0FFFFFF74h, 14h
.text:00000938                 dd offset $LN43         ; "buf"
.text:0000093C                 dd 0FFFFFF34h, 8
.text:00000944                 dd offset $LN44         ; "nowPos"
.text:00000948                 dd 0FFFFFF24h, 8
.text:00000950                 dd offset $LN45         ; "packSize"
.text:00000954 $LN45           db 'packSize',0         ; DATA XREF: .text:00000950o
.text:0000095D $LN44           db 'nowPos',0           ; DATA XREF: .text:00000944o
.text:00000964 $LN43           db 'buf',0              ; DATA XREF: .text:00000938o
.text:00000968 $LN42           db 'outBuffer',0        ; DATA XREF: .text:0000092Co
.text:00000972 $LN41           db 'inBuffer',0         ; DATA XREF: .text:00000920o
.text:0000097B                 align 10h
.text:00000980
.text:00000980 ; =============== S U B R O U T I N E =======================================
.text:00000980
.text:00000980 ; Attributes: bp-based frame
.text:00000980
.text:00000980 ; __int32 __cdecl NCompress::NZ::CDecoder::Code(NCompress::NZ::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000980                 public ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000980 ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000980                                         ; DATA XREF: .rdata:00000D28o
.text:00000980
.text:00000980 var_38          = dword ptr -38h
.text:00000980 var_10          = dword ptr -10h
.text:00000980 var_C           = dword ptr -0Ch
.text:00000980 var_4           = dword ptr -4
.text:00000980 this            = dword ptr  8
.text:00000980 arg_4           = dword ptr  0Ch
.text:00000980 arg_8           = dword ptr  10h
.text:00000980 arg_C           = dword ptr  14h
.text:00000980 arg_10          = dword ptr  18h
.text:00000980 arg_14          = dword ptr  1Ch
.text:00000980
.text:00000980 ; FUNCTION CHUNK AT .text:00000A50 SIZE 0000002F BYTES
.text:00000980
.text:00000980                 push    ebp
.text:00000981                 mov     ebp, esp
.text:00000983                 push    0FFFFFFFFh
.text:00000985                 push    offset __ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:0000098A                 mov     eax, large fs:0
.text:00000990                 push    eax
.text:00000991                 push    ecx
.text:00000992                 sub     esp, 28h
.text:00000995                 push    ebx
.text:00000996                 push    esi
.text:00000997                 push    edi
.text:00000998                 lea     edi, [ebp+var_38]
.text:0000099B                 mov     ecx, 0Ah
.text:000009A0                 mov     eax, 0CCCCCCCCh
.text:000009A5                 rep stosd
.text:000009A7                 mov     eax, dword ptr ds:___security_cookie
.text:000009AC                 xor     eax, ebp
.text:000009AE                 push    eax
.text:000009AF                 lea     eax, [ebp+var_C]
.text:000009B2                 mov     large fs:0, eax
.text:000009B8                 mov     [ebp+var_10], esp
.text:000009BB                 mov     [ebp+var_4], 0
.text:000009C2                 mov     eax, [ebp+arg_14]
.text:000009C5                 push    eax             ; struct ICompressProgressInfo *
.text:000009C6                 mov     ecx, [ebp+arg_10]
.text:000009C9                 push    ecx             ; unsigned __int64 *
.text:000009CA                 mov     edx, [ebp+arg_C]
.text:000009CD                 push    edx             ; unsigned __int64 *
.text:000009CE                 mov     eax, [ebp+arg_8]
.text:000009D1                 push    eax             ; struct ISequentialOutStream *
.text:000009D2                 mov     ecx, [ebp+arg_4]
.text:000009D5                 push    ecx             ; struct ISequentialInStream *
.text:000009D6                 mov     ecx, [ebp+this] ; this
.text:000009D9                 call    ?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:000009DE                 mov     [ebp+var_38], eax
.text:000009E1                 mov     eax, [ebp+var_38]
.text:000009E4                 jmp     short loc_A50
.text:000009E4 ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000009E4
.text:000009E6
.text:000009E6 ; =============== S U B R O U T I N E =======================================
.text:000009E6
.text:000009E6
.text:000009E6 __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:000009E6                                         ; DATA XREF: .xdata$x:0000111Co
.text:000009E6                 mov     edx, [ebp-18h]
.text:000009E9                 mov     eax, [edx]
.text:000009EB                 mov     [ebp-2Ch], eax
.text:000009EE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000009F5                 mov     eax, offset $LN9
.text:000009FA                 retn
.text:000009FA __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:000009FA
.text:000009FB ; ---------------------------------------------------------------------------
.text:000009FB                 mov     eax, offset __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00000A00                 retn
.text:00000A01
.text:00000A01 ; =============== S U B R O U T I N E =======================================
.text:00000A01
.text:00000A01
.text:00000A01 __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00000A01                                         ; DATA XREF: .xdata$x:0000112Co
.text:00000A01                 mov     ecx, [ebp-24h]
.text:00000A04                 mov     edx, [ecx]
.text:00000A06                 mov     [ebp-30h], edx
.text:00000A09                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000A10                 mov     eax, offset $LN11
.text:00000A15                 retn
.text:00000A15 __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:00000A15
.text:00000A16 ; ---------------------------------------------------------------------------
.text:00000A16                 mov     eax, offset __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00000A1B                 retn
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C
.text:00000A1C __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 proc near
.text:00000A1C                                         ; DATA XREF: .xdata$x:0000113Co
.text:00000A1C                 mov     dword ptr [ebp-34h], 1
.text:00000A23                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000A2A                 mov     eax, offset $LN13
.text:00000A2F                 retn
.text:00000A2F __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 endp
.text:00000A2F
.text:00000A30 ; ---------------------------------------------------------------------------
.text:00000A30                 mov     eax, offset __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00000A35                 retn
.text:00000A36 ; ---------------------------------------------------------------------------
.text:00000A36
.text:00000A36 __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
.text:00000A36                                         ; DATA XREF: .text:000009FBo
.text:00000A36                                         ; .text:00000A16o ...
.text:00000A36                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000A3D                 jmp     short loc_A44
.text:00000A3F ; ---------------------------------------------------------------------------
.text:00000A3F
.text:00000A3F $LN13:                                  ; DATA XREF: __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2+Eo
.text:00000A3F                 mov     eax, [ebp-34h]
.text:00000A42                 jmp     short loc_A50
.text:00000A44 ; ---------------------------------------------------------------------------
.text:00000A44
.text:00000A44 loc_A44:                                ; CODE XREF: .text:00000A3Dj
.text:00000A44                 jmp     short loc_A4B
.text:00000A46 ; ---------------------------------------------------------------------------
.text:00000A46
.text:00000A46 $LN11:                                  ; DATA XREF: __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Fo
.text:00000A46                 mov     eax, [ebp-30h]
.text:00000A49                 jmp     short loc_A50
.text:00000A4B ; ---------------------------------------------------------------------------
.text:00000A4B
.text:00000A4B loc_A4B:                                ; CODE XREF: .text:loc_A44j
.text:00000A4B                 jmp     short loc_A50
.text:00000A4D ; ---------------------------------------------------------------------------
.text:00000A4D
.text:00000A4D $LN9:                                   ; DATA XREF: __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:00000A4D                 mov     eax, [ebp-2Ch]
.text:00000A50 ; START OF FUNCTION CHUNK FOR ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000A50
.text:00000A50 loc_A50:                                ; CODE XREF: NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:00000A50                                         ; .text:00000A42j ...
.text:00000A50                 push    edx
.text:00000A51                 mov     ecx, ebp
.text:00000A53                 push    eax
.text:00000A54                 lea     edx, $LN21
.text:00000A5A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A5F                 pop     eax
.text:00000A60                 pop     edx
.text:00000A61                 mov     ecx, [ebp+var_C]
.text:00000A64                 mov     large fs:0, ecx
.text:00000A6B                 pop     ecx
.text:00000A6C                 pop     edi
.text:00000A6D                 pop     esi
.text:00000A6E                 pop     ebx
.text:00000A6F                 add     esp, 38h
.text:00000A72                 cmp     ebp, esp
.text:00000A74                 call    __RTC_CheckEsp
.text:00000A79                 mov     esp, ebp
.text:00000A7B                 pop     ebp
.text:00000A7C                 retn    18h
.text:00000A7C ; END OF FUNCTION CHUNK FOR ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000A7C ; ---------------------------------------------------------------------------
.text:00000A7F                 align 10h
.text:00000A80 $LN21           dd 2                    ; DATA XREF: NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D4o
.text:00000A84                 dd offset $LN20
.text:00000A88 $LN20           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000A84o
.text:00000A90                 dd offset $LN17
.text:00000A94                 dd 0FFFFFFDCh, 4
.text:00000A9C                 dd offset $LN18
.text:00000AA0 $LN18           db 65h, 0               ; DATA XREF: .text:00000A9Co
.text:00000AA2 $LN17           dw 65h                  ; DATA XREF: .text:00000A90o
.text:00000AA4                 align 10h
.text:00000AB0
.text:00000AB0 ; =============== S U B R O U T I N E =======================================
.text:00000AB0
.text:00000AB0 ; Attributes: bp-based frame
.text:00000AB0
.text:00000AB0 ; bool __stdcall NCompress::NZ::CheckStream(NCompress::NZ *this, const unsigned __int8 *, unsigned int)
.text:00000AB0                 public ?CheckStream@NZ@NCompress@@YG_NPBEI@Z
.text:00000AB0 ?CheckStream@NZ@NCompress@@YG_NPBEI@Z proc near
.text:00000AB0
.text:00000AB0 var_50          = dword ptr -50h
.text:00000AB0 var_4C          = dword ptr -4Ch
.text:00000AB0 var_48          = dword ptr -48h
.text:00000AB0 Size            = dword ptr -44h
.text:00000AB0 Dst             = byte ptr -3Ch
.text:00000AB0 var_3B          = byte ptr -3Bh
.text:00000AB0 var_3A          = byte ptr -3Ah
.text:00000AB0 var_24          = dword ptr -24h
.text:00000AB0 var_20          = dword ptr -20h
.text:00000AB0 var_1C          = dword ptr -1Ch
.text:00000AB0 var_18          = dword ptr -18h
.text:00000AB0 var_14          = dword ptr -14h
.text:00000AB0 var_10          = dword ptr -10h
.text:00000AB0 var_C           = dword ptr -0Ch
.text:00000AB0 var_5           = byte ptr -5
.text:00000AB0 var_4           = dword ptr -4
.text:00000AB0 Src             = dword ptr  8
.text:00000AB0 arg_4           = dword ptr  0Ch
.text:00000AB0
.text:00000AB0                 push    ebp
.text:00000AB1                 mov     ebp, esp
.text:00000AB3                 sub     esp, 50h
.text:00000AB6                 push    edi
.text:00000AB7                 lea     edi, [ebp+var_50]
.text:00000ABA                 mov     ecx, 14h
.text:00000ABF                 mov     eax, 0CCCCCCCCh
.text:00000AC4                 rep stosd
.text:00000AC6                 mov     eax, dword ptr ds:___security_cookie
.text:00000ACB                 xor     eax, ebp
.text:00000ACD                 mov     [ebp+var_4], eax
.text:00000AD0                 cmp     [ebp+arg_4], 3
.text:00000AD4                 jnb     short loc_ADD
.text:00000AD6                 xor     al, al
.text:00000AD8                 jmp     loc_CCB
.text:00000ADD ; ---------------------------------------------------------------------------
.text:00000ADD
.text:00000ADD loc_ADD:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+24j
.text:00000ADD                 mov     eax, [ebp+Src]
.text:00000AE0                 movzx   ecx, byte ptr [eax]
.text:00000AE3                 cmp     ecx, 1Fh
.text:00000AE6                 jnz     short loc_AF6
.text:00000AE8                 mov     edx, [ebp+Src]
.text:00000AEB                 movzx   eax, byte ptr [edx+1]
.text:00000AEF                 cmp     eax, 9Dh ; '¥'
.text:00000AF4                 jz      short loc_AFD
.text:00000AF6
.text:00000AF6 loc_AF6:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+36j
.text:00000AF6                 xor     al, al
.text:00000AF8                 jmp     loc_CCB
.text:00000AFD ; ---------------------------------------------------------------------------
.text:00000AFD
.text:00000AFD loc_AFD:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+44j
.text:00000AFD                 mov     ecx, [ebp+Src]
.text:00000B00                 mov     dl, [ecx+2]
.text:00000B03                 mov     [ebp+var_5], dl
.text:00000B06                 movzx   eax, [ebp+var_5]
.text:00000B0A                 and     eax, 60h
.text:00000B0D                 jz      short loc_B16
.text:00000B0F                 xor     al, al
.text:00000B11                 jmp     loc_CCB
.text:00000B16 ; ---------------------------------------------------------------------------
.text:00000B16
.text:00000B16 loc_B16:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+5Dj
.text:00000B16                 movzx   ecx, [ebp+var_5]
.text:00000B1A                 and     ecx, 1Fh
.text:00000B1D                 mov     [ebp+var_C], ecx
.text:00000B20                 cmp     [ebp+var_C], 9
.text:00000B24                 jb      short loc_B2C
.text:00000B26                 cmp     [ebp+var_C], 10h
.text:00000B2A                 jbe     short loc_B33
.text:00000B2C
.text:00000B2C loc_B2C:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+74j
.text:00000B2C                 xor     al, al
.text:00000B2E                 jmp     loc_CCB
.text:00000B33 ; ---------------------------------------------------------------------------
.text:00000B33
.text:00000B33 loc_B33:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+7Aj
.text:00000B33                 mov     edx, 1
.text:00000B38                 mov     ecx, [ebp+var_C]
.text:00000B3B                 shl     edx, cl
.text:00000B3D                 mov     [ebp+var_10], edx
.text:00000B40                 movzx   eax, [ebp+var_5]
.text:00000B44                 and     eax, 80h
.text:00000B49                 neg     eax
.text:00000B4B                 sbb     eax, eax
.text:00000B4D                 and     eax, 0FFFF0100h
.text:00000B52                 add     eax, 10000h
.text:00000B57                 mov     [ebp+var_14], eax
.text:00000B5A                 mov     [ebp+var_18], 9
.text:00000B61                 xor     ecx, ecx
.text:00000B63                 cmp     [ebp+var_14], 100h
.text:00000B6A                 setz    cl
.text:00000B6D                 add     ecx, 100h
.text:00000B73                 mov     [ebp+var_1C], ecx
.text:00000B76                 mov     [ebp+var_20], 0
.text:00000B7D                 mov     [ebp+var_24], 0
.text:00000B84                 mov     edx, [ebp+Src]
.text:00000B87                 add     edx, 3
.text:00000B8A                 mov     [ebp+Src], edx
.text:00000B8D                 mov     eax, [ebp+arg_4]
.text:00000B90                 sub     eax, 3
.text:00000B93                 mov     [ebp+arg_4], eax
.text:00000B96
.text:00000B96 loc_B96:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+1D3j
.text:00000B96                                         ; NCompress::NZ::CheckStream(uchar const *,uint):loc_CC6j
.text:00000B96                 mov     ecx, [ebp+var_24]
.text:00000B99                 cmp     ecx, [ebp+var_20]
.text:00000B9C                 jnz     short loc_BF0
.text:00000B9E                 mov     edx, [ebp+var_18]
.text:00000BA1                 cmp     edx, [ebp+arg_4]
.text:00000BA4                 jnb     short loc_BAE
.text:00000BA6                 mov     eax, [ebp+var_18]
.text:00000BA9                 mov     [ebp+var_50], eax
.text:00000BAC                 jmp     short loc_BB4
.text:00000BAE ; ---------------------------------------------------------------------------
.text:00000BAE
.text:00000BAE loc_BAE:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+F4j
.text:00000BAE                 mov     ecx, [ebp+arg_4]
.text:00000BB1                 mov     [ebp+var_50], ecx
.text:00000BB4
.text:00000BB4 loc_BB4:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+FCj
.text:00000BB4                 mov     edx, [ebp+var_50]
.text:00000BB7                 mov     [ebp+Size], edx
.text:00000BBA                 mov     eax, [ebp+Size]
.text:00000BBD                 push    eax             ; Size
.text:00000BBE                 mov     ecx, [ebp+Src]
.text:00000BC1                 push    ecx             ; Src
.text:00000BC2                 lea     edx, [ebp+Dst]
.text:00000BC5                 push    edx             ; Dst
.text:00000BC6                 call    _memcpy
.text:00000BCB                 add     esp, 0Ch
.text:00000BCE                 mov     eax, [ebp+Src]
.text:00000BD1                 add     eax, [ebp+Size]
.text:00000BD4                 mov     [ebp+Src], eax
.text:00000BD7                 mov     ecx, [ebp+arg_4]
.text:00000BDA                 sub     ecx, [ebp+Size]
.text:00000BDD                 mov     [ebp+arg_4], ecx
.text:00000BE0                 mov     edx, [ebp+Size]
.text:00000BE3                 shl     edx, 3
.text:00000BE6                 mov     [ebp+var_24], edx
.text:00000BE9                 mov     [ebp+var_20], 0
.text:00000BF0
.text:00000BF0 loc_BF0:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+ECj
.text:00000BF0                 mov     eax, [ebp+var_20]
.text:00000BF3                 shr     eax, 3
.text:00000BF6                 mov     [ebp+var_48], eax
.text:00000BF9                 mov     ecx, [ebp+var_48]
.text:00000BFC                 movzx   edx, [ebp+ecx+Dst]
.text:00000C01                 mov     eax, [ebp+var_48]
.text:00000C04                 movzx   ecx, [ebp+eax+var_3B]
.text:00000C09                 shl     ecx, 8
.text:00000C0C                 or      edx, ecx
.text:00000C0E                 mov     eax, [ebp+var_48]
.text:00000C11                 movzx   ecx, [ebp+eax+var_3A]
.text:00000C16                 shl     ecx, 10h
.text:00000C19                 or      edx, ecx
.text:00000C1B                 mov     [ebp+var_4C], edx
.text:00000C1E                 mov     ecx, [ebp+var_20]
.text:00000C21                 and     ecx, 7
.text:00000C24                 mov     edx, [ebp+var_4C]
.text:00000C27                 shr     edx, cl
.text:00000C29                 mov     [ebp+var_4C], edx
.text:00000C2C                 mov     eax, 1
.text:00000C31                 mov     ecx, [ebp+var_18]
.text:00000C34                 shl     eax, cl
.text:00000C36                 sub     eax, 1
.text:00000C39                 and     eax, [ebp+var_4C]
.text:00000C3C                 mov     [ebp+var_4C], eax
.text:00000C3F                 mov     ecx, [ebp+var_20]
.text:00000C42                 add     ecx, [ebp+var_18]
.text:00000C45                 mov     [ebp+var_20], ecx
.text:00000C48                 mov     edx, [ebp+var_20]
.text:00000C4B                 cmp     edx, [ebp+var_24]
.text:00000C4E                 jbe     short loc_C54
.text:00000C50                 mov     al, 1
.text:00000C52                 jmp     short loc_CCB
.text:00000C54 ; ---------------------------------------------------------------------------
.text:00000C54
.text:00000C54 loc_C54:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+19Ej
.text:00000C54                 mov     eax, [ebp+var_4C]
.text:00000C57                 cmp     eax, [ebp+var_1C]
.text:00000C5A                 jb      short loc_C60
.text:00000C5C                 xor     al, al
.text:00000C5E                 jmp     short loc_CCB
.text:00000C60 ; ---------------------------------------------------------------------------
.text:00000C60
.text:00000C60 loc_C60:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+1AAj
.text:00000C60                 mov     ecx, [ebp+var_4C]
.text:00000C63                 cmp     ecx, [ebp+var_14]
.text:00000C66                 jnz     short loc_C88
.text:00000C68                 mov     [ebp+var_20], 0
.text:00000C6F                 mov     edx, [ebp+var_20]
.text:00000C72                 mov     [ebp+var_24], edx
.text:00000C75                 mov     [ebp+var_18], 9
.text:00000C7C                 mov     [ebp+var_1C], 101h
.text:00000C83                 jmp     loc_B96
.text:00000C88 ; ---------------------------------------------------------------------------
.text:00000C88
.text:00000C88 loc_C88:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+1B6j
.text:00000C88                 mov     eax, [ebp+var_1C]
.text:00000C8B                 cmp     eax, [ebp+var_10]
.text:00000C8E                 jnb     short loc_CC6
.text:00000C90                 mov     ecx, [ebp+var_1C]
.text:00000C93                 add     ecx, 1
.text:00000C96                 mov     [ebp+var_1C], ecx
.text:00000C99                 mov     edx, 1
.text:00000C9E                 mov     ecx, [ebp+var_18]
.text:00000CA1                 shl     edx, cl
.text:00000CA3                 cmp     [ebp+var_1C], edx
.text:00000CA6                 jbe     short loc_CC6
.text:00000CA8                 mov     eax, [ebp+var_18]
.text:00000CAB                 cmp     eax, [ebp+var_C]
.text:00000CAE                 jnb     short loc_CC6
.text:00000CB0                 mov     [ebp+var_20], 0
.text:00000CB7                 mov     ecx, [ebp+var_20]
.text:00000CBA                 mov     [ebp+var_24], ecx
.text:00000CBD                 mov     edx, [ebp+var_18]
.text:00000CC0                 add     edx, 1
.text:00000CC3                 mov     [ebp+var_18], edx
.text:00000CC6
.text:00000CC6 loc_CC6:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+1DEj
.text:00000CC6                                         ; NCompress::NZ::CheckStream(uchar const *,uint)+1F6j ...
.text:00000CC6                 jmp     loc_B96
.text:00000CCB ; ---------------------------------------------------------------------------
.text:00000CCB
.text:00000CCB loc_CCB:                                ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+28j
.text:00000CCB                                         ; NCompress::NZ::CheckStream(uchar const *,uint)+48j ...
.text:00000CCB                 push    edx
.text:00000CCC                 mov     ecx, ebp
.text:00000CCE                 push    eax
.text:00000CCF                 lea     edx, $LN23
.text:00000CD5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000CDA                 pop     eax
.text:00000CDB                 pop     edx
.text:00000CDC                 pop     edi
.text:00000CDD                 mov     ecx, [ebp+var_4]
.text:00000CE0                 xor     ecx, ebp
.text:00000CE2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000CE7                 add     esp, 50h
.text:00000CEA                 cmp     ebp, esp
.text:00000CEC                 call    __RTC_CheckEsp
.text:00000CF1                 mov     esp, ebp
.text:00000CF3                 pop     ebp
.text:00000CF4                 retn    8
.text:00000CF4 ?CheckStream@NZ@NCompress@@YG_NPBEI@Z endp
.text:00000CF4
.text:00000CF4 ; ---------------------------------------------------------------------------
.text:00000CF7                 align 4
.text:00000CF8 $LN23           dd 1                    ; DATA XREF: NCompress::NZ::CheckStream(uchar const *,uint)+21Fo
.text:00000CFC                 dd offset $LN22
.text:00000D00 $LN22           dd 0FFFFFFC4h, 14h      ; DATA XREF: .text:00000CFCo
.text:00000D08                 dd offset $LN21_0
.text:00000D0C $LN21_0         dd 667562h              ; DATA XREF: .text:00000D08o
.text:00000D0C _text           ends
.text:00000D0C
.rtc$TMZ:00000D10 ; ===========================================================================
.rtc$TMZ:00000D10
.rtc$TMZ:00000D10 ; Segment type: Pure data
.rtc$TMZ:00000D10 ; Segment permissions: Read
.rtc$TMZ:00000D10 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000D10                 assume cs:_rtc$TMZ
.rtc$TMZ:00000D10                 ;org 0D10h
.rtc$TMZ:00000D10 ; COMDAT (pick any)
.rtc$TMZ:00000D10 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000D10 _rtc$TMZ        ends
.rtc$TMZ:00000D10
.rtc$IMZ:00000D14 ; ===========================================================================
.rtc$IMZ:00000D14
.rtc$IMZ:00000D14 ; Segment type: Pure data
.rtc$IMZ:00000D14 ; Segment permissions: Read
.rtc$IMZ:00000D14 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000D14                 assume cs:_rtc$IMZ
.rtc$IMZ:00000D14                 ;org 0D14h
.rtc$IMZ:00000D14 ; COMDAT (pick any)
.rtc$IMZ:00000D14 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000D14 _rtc$IMZ        ends
.rtc$IMZ:00000D14
.rdata:00000D18 ; ===========================================================================
.rdata:00000D18
.rdata:00000D18 ; Segment type: Pure data
.rdata:00000D18 ; Segment permissions: Read
.rdata:00000D18 _rdata          segment dword public 'DATA' use32
.rdata:00000D18                 assume cs:_rdata
.rdata:00000D18                 ;org 0D18h
.rdata:00000D18 ; COMDAT (pick largest)
.rdata:00000D18                 dd offset ??_R4CDecoder@NZ@NCompress@@6B@ ; const NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
.rdata:00000D1C                 public ??_7CDecoder@NZ@NCompress@@6B@
.rdata:00000D1C ; const NCompress::NZ::CDecoder::`vftable'
.rdata:00000D1C ??_7CDecoder@NZ@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000D1C                                         ; DATA XREF: NCompress::NZ::CDecoder::~CDecoder(void)+11o
.rdata:00000D1C                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00000D20                 dd offset ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ ; NCompress::NZ::CDecoder::AddRef(void)
.rdata:00000D24                 dd offset ?Release@CDecoder@NZ@NCompress@@UAGKXZ ; NCompress::NZ::CDecoder::Release(void)
.rdata:00000D28                 dd offset ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000D28 _rdata          ends
.rdata:00000D28
.rdata$r:00000D2C ; ===========================================================================
.rdata$r:00000D2C
.rdata$r:00000D2C ; Segment type: Pure data
.rdata$r:00000D2C ; Segment permissions: Read
.rdata$r:00000D2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D2C                 assume cs:_rdata$r
.rdata$r:00000D2C                 ;org 0D2Ch
.rdata$r:00000D2C ; COMDAT (pick any)
.rdata$r:00000D2C                 public ??_R4CDecoder@NZ@NCompress@@6B@
.rdata$r:00000D2C ; const NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00000D2C ??_R4CDecoder@NZ@NCompress@@6B@ db    0 ; DATA XREF: .rdata:00000D18o
.rdata$r:00000D2D                 db    0
.rdata$r:00000D2E                 db    0
.rdata$r:00000D2F                 db    0
.rdata$r:00000D30                 db    0
.rdata$r:00000D31                 db    0
.rdata$r:00000D32                 db    0
.rdata$r:00000D33                 db    0
.rdata$r:00000D34                 db    0
.rdata$r:00000D35                 db    0
.rdata$r:00000D36                 db    0
.rdata$r:00000D37                 db    0
.rdata$r:00000D38                 dd offset ??_R0?AVCDecoder@NZ@NCompress@@@8 ; NCompress::NZ::CDecoder `RTTI Type Descriptor'
.rdata$r:00000D3C                 dd offset ??_R3CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D3C _rdata$r        ends
.rdata$r:00000D3C
.data:00000D40 ; ===========================================================================
.data:00000D40
.data:00000D40 ; Segment type: Pure data
.data:00000D40 ; Segment permissions: Read/Write
.data:00000D40 _data           segment dword public 'DATA' use32
.data:00000D40                 assume cs:_data
.data:00000D40                 ;org 0D40h
.data:00000D40 ; COMDAT (pick any)
.data:00000D40                 public ??_R0?AVCDecoder@NZ@NCompress@@@8
.data:00000D40 ; class NCompress::NZ::CDecoder `RTTI Type Descriptor'
.data:00000D40 ??_R0?AVCDecoder@NZ@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000D40                                         ; DATA XREF: .rdata$r:00000D38o
.data:00000D40                                         ; .rdata$r:NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000D40                                         ; const type_info::`vftable'
.data:00000D44                 align 8
.data:00000D48 a_?avcdecoder@n db '.?AVCDecoder@NZ@NCompress@@',0
.data:00000D48 _data           ends
.data:00000D48
.rdata$r:00000D64 ; ===========================================================================
.rdata$r:00000D64
.rdata$r:00000D64 ; Segment type: Pure data
.rdata$r:00000D64 ; Segment permissions: Read
.rdata$r:00000D64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D64                 assume cs:_rdata$r
.rdata$r:00000D64                 ;org 0D64h
.rdata$r:00000D64 ; COMDAT (pick any)
.rdata$r:00000D64                 public ??_R3CDecoder@NZ@NCompress@@8
.rdata$r:00000D64 ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D64 ??_R3CDecoder@NZ@NCompress@@8 db    0   ; DATA XREF: .rdata$r:00000D3Co
.rdata$r:00000D64                                         ; .rdata$r:00000DA0o
.rdata$r:00000D65                 db    0
.rdata$r:00000D66                 db    0
.rdata$r:00000D67                 db    0
.rdata$r:00000D68                 db    1
.rdata$r:00000D69                 db    0
.rdata$r:00000D6A                 db    0
.rdata$r:00000D6B                 db    0
.rdata$r:00000D6C                 db    4
.rdata$r:00000D6D                 db    0
.rdata$r:00000D6E                 db    0
.rdata$r:00000D6F                 db    0
.rdata$r:00000D70                 dd offset ??_R2CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Base Class Array'
.rdata$r:00000D70 _rdata$r        ends
.rdata$r:00000D70
.rdata$r:00000D74 ; ===========================================================================
.rdata$r:00000D74
.rdata$r:00000D74 ; Segment type: Pure data
.rdata$r:00000D74 ; Segment permissions: Read
.rdata$r:00000D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D74                 assume cs:_rdata$r
.rdata$r:00000D74                 ;org 0D74h
.rdata$r:00000D74 ; COMDAT (pick any)
.rdata$r:00000D74                 public ??_R2CDecoder@NZ@NCompress@@8
.rdata$r:00000D74 ; NCompress::NZ::CDecoder::`RTTI Base Class Array'
.rdata$r:00000D74 ??_R2CDecoder@NZ@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8
.rdata$r:00000D74                                         ; DATA XREF: .rdata$r:00000D70o
.rdata$r:00000D74                                         ; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000D78                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000D7C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000D80                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000D84                 db    0
.rdata$r:00000D85                 align 4
.rdata$r:00000D85 _rdata$r        ends
.rdata$r:00000D85
.rdata$r:00000D88 ; ===========================================================================
.rdata$r:00000D88
.rdata$r:00000D88 ; Segment type: Pure data
.rdata$r:00000D88 ; Segment permissions: Read
.rdata$r:00000D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D88                 assume cs:_rdata$r
.rdata$r:00000D88                 ;org 0D88h
.rdata$r:00000D88 ; COMDAT (pick any)
.rdata$r:00000D88                 public ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8
.rdata$r:00000D88 ; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000D88 ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8 dd offset ??_R0?AVCDecoder@NZ@NCompress@@@8
.rdata$r:00000D88                                         ; DATA XREF: .rdata$r:NCompress::NZ::CDecoder::`RTTI Base Class Array'o
.rdata$r:00000D88                                         ; NCompress::NZ::CDecoder `RTTI Type Descriptor'
.rdata$r:00000D8C                 db    3
.rdata$r:00000D8D                 db    0
.rdata$r:00000D8E                 db    0
.rdata$r:00000D8F                 db    0
.rdata$r:00000D90                 db    0
.rdata$r:00000D91                 db    0
.rdata$r:00000D92                 db    0
.rdata$r:00000D93                 db    0
.rdata$r:00000D94                 db 0FFh
.rdata$r:00000D95                 db 0FFh
.rdata$r:00000D96                 db 0FFh
.rdata$r:00000D97                 db 0FFh
.rdata$r:00000D98                 db    0
.rdata$r:00000D99                 db    0
.rdata$r:00000D9A                 db    0
.rdata$r:00000D9B                 db    0
.rdata$r:00000D9C                 db  40h ; @
.rdata$r:00000D9D                 db    0
.rdata$r:00000D9E                 db    0
.rdata$r:00000D9F                 db    0
.rdata$r:00000DA0                 dd offset ??_R3CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DA0 _rdata$r        ends
.rdata$r:00000DA0
.rdata$r:00000DA4 ; ===========================================================================
.rdata$r:00000DA4
.rdata$r:00000DA4 ; Segment type: Pure data
.rdata$r:00000DA4 ; Segment permissions: Read
.rdata$r:00000DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DA4                 assume cs:_rdata$r
.rdata$r:00000DA4                 ;org 0DA4h
.rdata$r:00000DA4 ; COMDAT (pick any)
.rdata$r:00000DA4                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000DA4 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000DA4 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000DA4                                         ; DATA XREF: .rdata$r:00000D78o
.rdata$r:00000DA4                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000DA4                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000DA8                 db    1
.rdata$r:00000DA9                 db    0
.rdata$r:00000DAA                 db    0
.rdata$r:00000DAB                 db    0
.rdata$r:00000DAC                 db    0
.rdata$r:00000DAD                 db    0
.rdata$r:00000DAE                 db    0
.rdata$r:00000DAF                 db    0
.rdata$r:00000DB0                 db 0FFh
.rdata$r:00000DB1                 db 0FFh
.rdata$r:00000DB2                 db 0FFh
.rdata$r:00000DB3                 db 0FFh
.rdata$r:00000DB4                 db    0
.rdata$r:00000DB5                 db    0
.rdata$r:00000DB6                 db    0
.rdata$r:00000DB7                 db    0
.rdata$r:00000DB8                 db  40h ; @
.rdata$r:00000DB9                 db    0
.rdata$r:00000DBA                 db    0
.rdata$r:00000DBB                 db    0
.rdata$r:00000DBC                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DBC _rdata$r        ends
.rdata$r:00000DBC
.data:00000DC0 ; ===========================================================================
.data:00000DC0
.data:00000DC0 ; Segment type: Pure data
.data:00000DC0 ; Segment permissions: Read/Write
.data:00000DC0 _data           segment dword public 'DATA' use32
.data:00000DC0                 assume cs:_data
.data:00000DC0                 ;org 0DC0h
.data:00000DC0 ; COMDAT (pick any)
.data:00000DC0                 public ??_R0?AUICompressCoder@@@8
.data:00000DC0 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000DC0 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000DC0                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000DC0                                         ; const type_info::`vftable'
.data:00000DC4                 align 8
.data:00000DC8 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00000DDD                 align 10h
.data:00000DDD _data           ends
.data:00000DDD
.rdata$r:00000DE0 ; ===========================================================================
.rdata$r:00000DE0
.rdata$r:00000DE0 ; Segment type: Pure data
.rdata$r:00000DE0 ; Segment permissions: Read
.rdata$r:00000DE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DE0                 assume cs:_rdata$r
.rdata$r:00000DE0                 ;org 0DE0h
.rdata$r:00000DE0 ; COMDAT (pick any)
.rdata$r:00000DE0                 public ??_R3ICompressCoder@@8
.rdata$r:00000DE0 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DE0 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000DBCo
.rdata$r:00000DE1                 db    0
.rdata$r:00000DE2                 db    0
.rdata$r:00000DE3                 db    0
.rdata$r:00000DE4                 db    0
.rdata$r:00000DE5                 db    0
.rdata$r:00000DE6                 db    0
.rdata$r:00000DE7                 db    0
.rdata$r:00000DE8                 db    2
.rdata$r:00000DE9                 db    0
.rdata$r:00000DEA                 db    0
.rdata$r:00000DEB                 db    0
.rdata$r:00000DEC                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000DEC _rdata$r        ends
.rdata$r:00000DEC
.rdata$r:00000DF0 ; ===========================================================================
.rdata$r:00000DF0
.rdata$r:00000DF0 ; Segment type: Pure data
.rdata$r:00000DF0 ; Segment permissions: Read
.rdata$r:00000DF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DF0                 assume cs:_rdata$r
.rdata$r:00000DF0                 ;org 0DF0h
.rdata$r:00000DF0 ; COMDAT (pick any)
.rdata$r:00000DF0                 public ??_R2ICompressCoder@@8
.rdata$r:00000DF0 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000DF0 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000DF0                                         ; DATA XREF: .rdata$r:00000DECo
.rdata$r:00000DF0                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000DF4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000DF8                 db    0
.rdata$r:00000DF9                 align 4
.rdata$r:00000DF9 _rdata$r        ends
.rdata$r:00000DF9
.rdata$r:00000DFC ; ===========================================================================
.rdata$r:00000DFC
.rdata$r:00000DFC ; Segment type: Pure data
.rdata$r:00000DFC ; Segment permissions: Read
.rdata$r:00000DFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DFC                 assume cs:_rdata$r
.rdata$r:00000DFC                 ;org 0DFCh
.rdata$r:00000DFC ; COMDAT (pick any)
.rdata$r:00000DFC                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000DFC ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000DFC ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000DFC                                         ; DATA XREF: .rdata$r:00000D7Co
.rdata$r:00000DFC                                         ; .rdata$r:00000DF4o ...
.rdata$r:00000DFC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000E00                 db    0
.rdata$r:00000E01                 db    0
.rdata$r:00000E02                 db    0
.rdata$r:00000E03                 db    0
.rdata$r:00000E04                 db    0
.rdata$r:00000E05                 db    0
.rdata$r:00000E06                 db    0
.rdata$r:00000E07                 db    0
.rdata$r:00000E08                 db 0FFh
.rdata$r:00000E09                 db 0FFh
.rdata$r:00000E0A                 db 0FFh
.rdata$r:00000E0B                 db 0FFh
.rdata$r:00000E0C                 db    0
.rdata$r:00000E0D                 db    0
.rdata$r:00000E0E                 db    0
.rdata$r:00000E0F                 db    0
.rdata$r:00000E10                 db  40h ; @
.rdata$r:00000E11                 db    0
.rdata$r:00000E12                 db    0
.rdata$r:00000E13                 db    0
.rdata$r:00000E14                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E14 _rdata$r        ends
.rdata$r:00000E14
.data:00000E18 ; ===========================================================================
.data:00000E18
.data:00000E18 ; Segment type: Pure data
.data:00000E18 ; Segment permissions: Read/Write
.data:00000E18 _data           segment dword public 'DATA' use32
.data:00000E18                 assume cs:_data
.data:00000E18                 ;org 0E18h
.data:00000E18 ; COMDAT (pick any)
.data:00000E18                 public ??_R0?AUIUnknown@@@8
.data:00000E18 ; struct IUnknown `RTTI Type Descriptor'
.data:00000E18 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000E18                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000E18                                         ; const type_info::`vftable'
.data:00000E1C                 align 10h
.data:00000E20 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000E2F                 align 10h
.data:00000E2F _data           ends
.data:00000E2F
.rdata$r:00000E30 ; ===========================================================================
.rdata$r:00000E30
.rdata$r:00000E30 ; Segment type: Pure data
.rdata$r:00000E30 ; Segment permissions: Read
.rdata$r:00000E30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E30                 assume cs:_rdata$r
.rdata$r:00000E30                 ;org 0E30h
.rdata$r:00000E30 ; COMDAT (pick any)
.rdata$r:00000E30                 public ??_R3IUnknown@@8
.rdata$r:00000E30 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E30 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000E14o
.rdata$r:00000E31                 db    0
.rdata$r:00000E32                 db    0
.rdata$r:00000E33                 db    0
.rdata$r:00000E34                 db    0
.rdata$r:00000E35                 db    0
.rdata$r:00000E36                 db    0
.rdata$r:00000E37                 db    0
.rdata$r:00000E38                 db    1
.rdata$r:00000E39                 db    0
.rdata$r:00000E3A                 db    0
.rdata$r:00000E3B                 db    0
.rdata$r:00000E3C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000E3C _rdata$r        ends
.rdata$r:00000E3C
.rdata$r:00000E40 ; ===========================================================================
.rdata$r:00000E40
.rdata$r:00000E40 ; Segment type: Pure data
.rdata$r:00000E40 ; Segment permissions: Read
.rdata$r:00000E40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E40                 assume cs:_rdata$r
.rdata$r:00000E40                 ;org 0E40h
.rdata$r:00000E40 ; COMDAT (pick any)
.rdata$r:00000E40                 public ??_R2IUnknown@@8
.rdata$r:00000E40 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000E40 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000E40                                         ; DATA XREF: .rdata$r:00000E3Co
.rdata$r:00000E40                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E44                 db    0
.rdata$r:00000E45                 align 4
.rdata$r:00000E45 _rdata$r        ends
.rdata$r:00000E45
.rdata$r:00000E48 ; ===========================================================================
.rdata$r:00000E48
.rdata$r:00000E48 ; Segment type: Pure data
.rdata$r:00000E48 ; Segment permissions: Read
.rdata$r:00000E48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E48                 assume cs:_rdata$r
.rdata$r:00000E48                 ;org 0E48h
.rdata$r:00000E48 ; COMDAT (pick any)
.rdata$r:00000E48                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000E48 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000E48 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000E48                                         ; DATA XREF: .rdata$r:00000D80o
.rdata$r:00000E48                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000E4C                 align 10h
.rdata$r:00000E50                 db    4
.rdata$r:00000E51                 db    0
.rdata$r:00000E52                 db    0
.rdata$r:00000E53                 db    0
.rdata$r:00000E54                 db 0FFh
.rdata$r:00000E55                 db 0FFh
.rdata$r:00000E56                 db 0FFh
.rdata$r:00000E57                 db 0FFh
.rdata$r:00000E58                 db    0
.rdata$r:00000E59                 db    0
.rdata$r:00000E5A                 db    0
.rdata$r:00000E5B                 db    0
.rdata$r:00000E5C                 db  40h ; @
.rdata$r:00000E5D                 db    0
.rdata$r:00000E5E                 db    0
.rdata$r:00000E5F                 db    0
.rdata$r:00000E60                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E60 _rdata$r        ends
.rdata$r:00000E60
.data:00000E64 ; ===========================================================================
.data:00000E64
.data:00000E64 ; Segment type: Pure data
.data:00000E64 ; Segment permissions: Read/Write
.data:00000E64 _data           segment dword public 'DATA' use32
.data:00000E64                 assume cs:_data
.data:00000E64                 ;org 0E64h
.data:00000E64 ; COMDAT (pick any)
.data:00000E64                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000E64 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000E64 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000E64                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000E64                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000E64                                         ; const type_info::`vftable'
.data:00000E68                 db    0
.data:00000E69                 db    0
.data:00000E6A                 db    0
.data:00000E6B                 db    0
.data:00000E6C                 db  2Eh ; .
.data:00000E6D                 db  3Fh ; ?
.data:00000E6E                 db  41h ; A
.data:00000E6F                 db  56h ; V
.data:00000E70                 db  43h ; C
.data:00000E71                 db  4Dh ; M
.data:00000E72                 db  79h ; y
.data:00000E73                 db  55h ; U
.data:00000E74                 db  6Eh ; n
.data:00000E75                 db  6Bh ; k
.data:00000E76                 db  6Eh ; n
.data:00000E77                 db  6Fh ; o
.data:00000E78                 db  77h ; w
.data:00000E79                 db  6Eh ; n
.data:00000E7A                 db  49h ; I
.data:00000E7B                 db  6Dh ; m
.data:00000E7C                 db  70h ; p
.data:00000E7D                 db  40h ; @
.data:00000E7E                 db  40h ; @
.data:00000E7F                 db    0
.data:00000E7F _data           ends
.data:00000E7F
.rdata$r:00000E80 ; ===========================================================================
.rdata$r:00000E80
.rdata$r:00000E80 ; Segment type: Pure data
.rdata$r:00000E80 ; Segment permissions: Read
.rdata$r:00000E80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E80                 assume cs:_rdata$r
.rdata$r:00000E80                 ;org 0E80h
.rdata$r:00000E80 ; COMDAT (pick any)
.rdata$r:00000E80                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000E80 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E80 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000E60o
.rdata$r:00000E80                                         ; .rdata$r:00000EB0o
.rdata$r:00000E81                 db    0
.rdata$r:00000E82                 db    0
.rdata$r:00000E83                 db    0
.rdata$r:00000E84                 db    0
.rdata$r:00000E85                 db    0
.rdata$r:00000E86                 db    0
.rdata$r:00000E87                 db    0
.rdata$r:00000E88                 db    1
.rdata$r:00000E89                 db    0
.rdata$r:00000E8A                 db    0
.rdata$r:00000E8B                 db    0
.rdata$r:00000E8C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000E8C _rdata$r        ends
.rdata$r:00000E8C
.rdata$r:00000E90 ; ===========================================================================
.rdata$r:00000E90
.rdata$r:00000E90 ; Segment type: Pure data
.rdata$r:00000E90 ; Segment permissions: Read
.rdata$r:00000E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E90                 assume cs:_rdata$r
.rdata$r:00000E90                 ;org 0E90h
.rdata$r:00000E90 ; COMDAT (pick any)
.rdata$r:00000E90                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000E90 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000E90 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000E90                                         ; DATA XREF: .rdata$r:00000E8Co
.rdata$r:00000E90                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E94                 db    0
.rdata$r:00000E95                 align 4
.rdata$r:00000E95 _rdata$r        ends
.rdata$r:00000E95
.rdata$r:00000E98 ; ===========================================================================
.rdata$r:00000E98
.rdata$r:00000E98 ; Segment type: Pure data
.rdata$r:00000E98 ; Segment permissions: Read
.rdata$r:00000E98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E98                 assume cs:_rdata$r
.rdata$r:00000E98                 ;org 0E98h
.rdata$r:00000E98 ; COMDAT (pick any)
.rdata$r:00000E98                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000E98 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E98 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000E98                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000E98                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000E9C                 db    0
.rdata$r:00000E9D                 db    0
.rdata$r:00000E9E                 db    0
.rdata$r:00000E9F                 db    0
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 db 0FFh
.rdata$r:00000EA5                 db 0FFh
.rdata$r:00000EA6                 db 0FFh
.rdata$r:00000EA7                 db 0FFh
.rdata$r:00000EA8                 db    0
.rdata$r:00000EA9                 db    0
.rdata$r:00000EAA                 db    0
.rdata$r:00000EAB                 db    0
.rdata$r:00000EAC                 db  40h ; @
.rdata$r:00000EAD                 db    0
.rdata$r:00000EAE                 db    0
.rdata$r:00000EAF                 db    0
.rdata$r:00000EB0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EB0 _rdata$r        ends
.rdata$r:00000EB0
.text:00000EB4 ; ===========================================================================
.text:00000EB4
.text:00000EB4 ; Segment type: Pure code
.text:00000EB4 ; Segment permissions: Read/Execute
.text:00000EB4 _text           segment para public 'CODE' use32
.text:00000EB4                 assume cs:_text
.text:00000EB4                 ;org 0EB4h
.text:00000EB4 ; COMDAT (pick any)
.text:00000EB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EB4
.text:00000EB4 ; =============== S U B R O U T I N E =======================================
.text:00000EB4
.text:00000EB4 ; Attributes: bp-based frame
.text:00000EB4
.text:00000EB4 ; __int32 __stdcall NCompress::NZ::CDecoder::QueryInterface(NCompress::NZ::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00000EB4                 public ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000EB4 ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000EB4                                         ; DATA XREF: .rdata:const NCompress::NZ::CDecoder::`vftable'o
.text:00000EB4
.text:00000EB4 this            = dword ptr  8
.text:00000EB4 Buf1            = dword ptr  0Ch
.text:00000EB4 arg_8           = dword ptr  10h
.text:00000EB4
.text:00000EB4                 push    ebp
.text:00000EB5                 mov     ebp, esp
.text:00000EB7                 mov     eax, [ebp+arg_8]
.text:00000EBA                 mov     dword ptr [eax], 0
.text:00000EC0                 push    offset _IID_IUnknown ; Buf2
.text:00000EC5                 mov     ecx, [ebp+Buf1]
.text:00000EC8                 push    ecx             ; Buf1
.text:00000EC9                 call    ___@8           ; __(x,x)
.text:00000ECE                 test    eax, eax
.text:00000ED0                 jz      short loc_EDC
.text:00000ED2                 mov     edx, [ebp+arg_8]
.text:00000ED5                 mov     eax, [ebp+this]
.text:00000ED8                 mov     [edx], eax
.text:00000EDA                 jmp     short loc_EFF
.text:00000EDC ; ---------------------------------------------------------------------------
.text:00000EDC
.text:00000EDC loc_EDC:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000EDC                 push    offset _IID_ICompressCoder ; Buf2
.text:00000EE1                 mov     ecx, [ebp+Buf1]
.text:00000EE4                 push    ecx             ; Buf1
.text:00000EE5                 call    ___@8           ; __(x,x)
.text:00000EEA                 test    eax, eax
.text:00000EEC                 jz      short loc_EF8
.text:00000EEE                 mov     edx, [ebp+arg_8]
.text:00000EF1                 mov     eax, [ebp+this]
.text:00000EF4                 mov     [edx], eax
.text:00000EF6                 jmp     short loc_EFF
.text:00000EF8 ; ---------------------------------------------------------------------------
.text:00000EF8
.text:00000EF8 loc_EF8:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+38j
.text:00000EF8                 mov     eax, 80004002h
.text:00000EFD                 jmp     short loc_F10
.text:00000EFF ; ---------------------------------------------------------------------------
.text:00000EFF
.text:00000EFF loc_EFF:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00000EFF                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+42j
.text:00000EFF                 mov     ecx, [ebp+this]
.text:00000F02                 mov     edx, [ecx+4]
.text:00000F05                 add     edx, 1
.text:00000F08                 mov     eax, [ebp+this]
.text:00000F0B                 mov     [eax+4], edx
.text:00000F0E                 xor     eax, eax
.text:00000F10
.text:00000F10 loc_F10:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+49j
.text:00000F10                 cmp     ebp, esp
.text:00000F12                 call    __RTC_CheckEsp
.text:00000F17                 pop     ebp
.text:00000F18                 retn    0Ch
.text:00000F18 ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000F18
.text:00000F18 ; ---------------------------------------------------------------------------
.text:00000F1B                 align 4
.text:00000F1B _text           ends
.text:00000F1B
.text:00000F1C ; ===========================================================================
.text:00000F1C
.text:00000F1C ; Segment type: Pure code
.text:00000F1C ; Segment permissions: Read/Execute
.text:00000F1C _text           segment para public 'CODE' use32
.text:00000F1C                 assume cs:_text
.text:00000F1C                 ;org 0F1Ch
.text:00000F1C ; COMDAT (pick any)
.text:00000F1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F1C
.text:00000F1C ; =============== S U B R O U T I N E =======================================
.text:00000F1C
.text:00000F1C ; Attributes: bp-based frame
.text:00000F1C
.text:00000F1C ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000F1C                 public ___@8
.text:00000F1C ___@8           proc near               ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+15p
.text:00000F1C                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+31p
.text:00000F1C
.text:00000F1C Buf1            = dword ptr  8
.text:00000F1C Buf2            = dword ptr  0Ch
.text:00000F1C
.text:00000F1C                 push    ebp
.text:00000F1D                 mov     ebp, esp
.text:00000F1F                 mov     eax, [ebp+Buf2]
.text:00000F22                 push    eax             ; Buf2
.text:00000F23                 mov     ecx, [ebp+Buf1]
.text:00000F26                 push    ecx             ; Buf1
.text:00000F27                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000F2C                 cmp     ebp, esp
.text:00000F2E                 call    __RTC_CheckEsp
.text:00000F33                 pop     ebp
.text:00000F34                 retn    8
.text:00000F34 ___@8           endp
.text:00000F34
.text:00000F34 ; ---------------------------------------------------------------------------
.text:00000F37                 align 4
.text:00000F37 _text           ends
.text:00000F37
.text:00000F38 ; ===========================================================================
.text:00000F38
.text:00000F38 ; Segment type: Pure code
.text:00000F38 ; Segment permissions: Read/Execute
.text:00000F38 _text           segment para public 'CODE' use32
.text:00000F38                 assume cs:_text
.text:00000F38                 ;org 0F38h
.text:00000F38 ; COMDAT (pick any)
.text:00000F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F38
.text:00000F38 ; =============== S U B R O U T I N E =======================================
.text:00000F38
.text:00000F38 ; Attributes: bp-based frame
.text:00000F38
.text:00000F38 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000F38                 public _IsEqualGUID@8
.text:00000F38 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000F38
.text:00000F38 Buf1            = dword ptr  8
.text:00000F38 Buf2            = dword ptr  0Ch
.text:00000F38
.text:00000F38                 push    ebp
.text:00000F39                 mov     ebp, esp
.text:00000F3B                 push    10h             ; Size
.text:00000F3D                 mov     eax, [ebp+Buf2]
.text:00000F40                 push    eax             ; Buf2
.text:00000F41                 mov     ecx, [ebp+Buf1]
.text:00000F44                 push    ecx             ; Buf1
.text:00000F45                 call    _memcmp
.text:00000F4A                 add     esp, 0Ch
.text:00000F4D                 neg     eax
.text:00000F4F                 sbb     eax, eax
.text:00000F51                 add     eax, 1
.text:00000F54                 cmp     ebp, esp
.text:00000F56                 call    __RTC_CheckEsp
.text:00000F5B                 pop     ebp
.text:00000F5C                 retn    8
.text:00000F5C _IsEqualGUID@8  endp
.text:00000F5C
.text:00000F5C ; ---------------------------------------------------------------------------
.text:00000F5F                 align 10h
.text:00000F5F _text           ends
.text:00000F5F
.text:00000F60 ; ===========================================================================
.text:00000F60
.text:00000F60 ; Segment type: Pure code
.text:00000F60 ; Segment permissions: Read/Execute
.text:00000F60 _text           segment para public 'CODE' use32
.text:00000F60                 assume cs:_text
.text:00000F60                 ;org 0F60h
.text:00000F60 ; COMDAT (pick any)
.text:00000F60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F60
.text:00000F60 ; =============== S U B R O U T I N E =======================================
.text:00000F60
.text:00000F60 ; Attributes: bp-based frame
.text:00000F60
.text:00000F60 ; unsigned __int32 __stdcall NCompress::NZ::CDecoder::AddRef(NCompress::NZ::CDecoder *this)
.text:00000F60                 public ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ
.text:00000F60 ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ proc near ; DATA XREF: .rdata:00000D20o
.text:00000F60
.text:00000F60 var_4           = dword ptr -4
.text:00000F60 this            = dword ptr  8
.text:00000F60
.text:00000F60                 push    ebp
.text:00000F61                 mov     ebp, esp
.text:00000F63                 push    ecx
.text:00000F64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F6B                 mov     eax, [ebp+this]
.text:00000F6E                 mov     ecx, [eax+4]
.text:00000F71                 add     ecx, 1
.text:00000F74                 mov     [ebp+var_4], ecx
.text:00000F77                 mov     edx, [ebp+this]
.text:00000F7A                 mov     eax, [ebp+var_4]
.text:00000F7D                 mov     [edx+4], eax
.text:00000F80                 mov     eax, [ebp+var_4]
.text:00000F83                 mov     esp, ebp
.text:00000F85                 pop     ebp
.text:00000F86                 retn    4
.text:00000F86 ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ endp
.text:00000F86
.text:00000F86 ; ---------------------------------------------------------------------------
.text:00000F89                 align 4
.text:00000F89 _text           ends
.text:00000F89
.text:00000F8C ; ===========================================================================
.text:00000F8C
.text:00000F8C ; Segment type: Pure code
.text:00000F8C ; Segment permissions: Read/Execute
.text:00000F8C _text           segment para public 'CODE' use32
.text:00000F8C                 assume cs:_text
.text:00000F8C                 ;org 0F8Ch
.text:00000F8C ; COMDAT (pick any)
.text:00000F8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F8C
.text:00000F8C ; =============== S U B R O U T I N E =======================================
.text:00000F8C
.text:00000F8C ; Attributes: bp-based frame
.text:00000F8C
.text:00000F8C ; unsigned __int32 __stdcall NCompress::NZ::CDecoder::Release(NCompress::NZ::CDecoder *this)
.text:00000F8C                 public ?Release@CDecoder@NZ@NCompress@@UAGKXZ
.text:00000F8C ?Release@CDecoder@NZ@NCompress@@UAGKXZ proc near
.text:00000F8C                                         ; DATA XREF: .rdata:00000D24o
.text:00000F8C
.text:00000F8C var_10          = dword ptr -10h
.text:00000F8C var_C           = dword ptr -0Ch
.text:00000F8C var_8           = dword ptr -8
.text:00000F8C var_4           = dword ptr -4
.text:00000F8C this            = dword ptr  8
.text:00000F8C
.text:00000F8C                 push    ebp
.text:00000F8D                 mov     ebp, esp
.text:00000F8F                 sub     esp, 10h
.text:00000F92                 mov     eax, 0CCCCCCCCh
.text:00000F97                 mov     [ebp+var_10], eax
.text:00000F9A                 mov     [ebp+var_C], eax
.text:00000F9D                 mov     [ebp+var_8], eax
.text:00000FA0                 mov     [ebp+var_4], eax
.text:00000FA3                 mov     eax, [ebp+this]
.text:00000FA6                 mov     ecx, [eax+4]
.text:00000FA9                 sub     ecx, 1
.text:00000FAC                 mov     [ebp+var_C], ecx
.text:00000FAF                 mov     edx, [ebp+this]
.text:00000FB2                 mov     eax, [ebp+var_C]
.text:00000FB5                 mov     [edx+4], eax
.text:00000FB8                 cmp     [ebp+var_C], 0
.text:00000FBC                 jz      short loc_FC6
.text:00000FBE                 mov     ecx, [ebp+this]
.text:00000FC1                 mov     eax, [ecx+4]
.text:00000FC4                 jmp     short loc_FF0
.text:00000FC6 ; ---------------------------------------------------------------------------
.text:00000FC6
.text:00000FC6 loc_FC6:                                ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+30j
.text:00000FC6                 mov     edx, [ebp+this]
.text:00000FC9                 mov     [ebp+var_8], edx
.text:00000FCC                 mov     eax, [ebp+var_8]
.text:00000FCF                 mov     [ebp+var_4], eax
.text:00000FD2                 cmp     [ebp+var_4], 0
.text:00000FD6                 jz      short loc_FE7
.text:00000FD8                 push    1
.text:00000FDA                 mov     ecx, [ebp+var_4]
.text:00000FDD                 call    ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z ; NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)
.text:00000FE2                 mov     [ebp+var_10], eax
.text:00000FE5                 jmp     short loc_FEE
.text:00000FE7 ; ---------------------------------------------------------------------------
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+4Aj
.text:00000FE7                 mov     [ebp+var_10], 0
.text:00000FEE
.text:00000FEE loc_FEE:                                ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+59j
.text:00000FEE                 xor     eax, eax
.text:00000FF0
.text:00000FF0 loc_FF0:                                ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+38j
.text:00000FF0                 add     esp, 10h
.text:00000FF3                 cmp     ebp, esp
.text:00000FF5                 call    __RTC_CheckEsp
.text:00000FFA                 mov     esp, ebp
.text:00000FFC                 pop     ebp
.text:00000FFD                 retn    4
.text:00000FFD ?Release@CDecoder@NZ@NCompress@@UAGKXZ endp
.text:00000FFD
.text:00000FFD _text           ends
.text:00000FFD
.text:00001000 ; ===========================================================================
.text:00001000
.text:00001000 ; Segment type: Pure code
.text:00001000 ; Segment permissions: Read/Execute
.text:00001000 _text           segment para public 'CODE' use32
.text:00001000                 assume cs:_text
.text:00001000                 ;org 1000h
.text:00001000 ; COMDAT (pick any)
.text:00001000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000 ; Attributes: bp-based frame
.text:00001000
.text:00001000 ; public: void * __thiscall NCompress::NZ::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00001000                 public ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z
.text:00001000 ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z proc near
.text:00001000                                         ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+51p
.text:00001000
.text:00001000 var_4           = dword ptr -4
.text:00001000 arg_0           = dword ptr  8
.text:00001000
.text:00001000                 push    ebp
.text:00001001                 mov     ebp, esp
.text:00001003                 push    ecx
.text:00001004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000100B                 mov     [ebp+var_4], ecx
.text:0000100E                 mov     ecx, [ebp+var_4] ; this
.text:00001011                 call    ??1CDecoder@NZ@NCompress@@QAE@XZ ; NCompress::NZ::CDecoder::~CDecoder(void)
.text:00001016                 mov     eax, [ebp+arg_0]
.text:00001019                 and     eax, 1
.text:0000101C                 jz      short loc_102A
.text:0000101E                 mov     ecx, [ebp+var_4]
.text:00001021                 push    ecx             ; void *
.text:00001022                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001027                 add     esp, 4
.text:0000102A
.text:0000102A loc_102A:                               ; CODE XREF: NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000102A                 mov     eax, [ebp+var_4]
.text:0000102D                 add     esp, 4
.text:00001030                 cmp     ebp, esp
.text:00001032                 call    __RTC_CheckEsp
.text:00001037                 mov     esp, ebp
.text:00001039                 pop     ebp
.text:0000103A                 retn    4
.text:0000103A ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z endp
.text:0000103A
.text:0000103A ; ---------------------------------------------------------------------------
.text:0000103D                 align 10h
.text:0000103D _text           ends
.text:0000103D
.text$x:00001040 ; ===========================================================================
.text$x:00001040
.text$x:00001040 ; Segment type: Pure code
.text$x:00001040 ; Segment permissions: Read/Execute
.text$x:00001040 _text$x         segment para public 'CODE' use32
.text$x:00001040                 assume cs:_text$x
.text$x:00001040                 ;org 1040h
.text$x:00001040                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001040
.text$x:00001040 ; =============== S U B R O U T I N E =======================================
.text$x:00001040
.text$x:00001040
.text$x:00001040 __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00001040                                         ; DATA XREF: .xdata$x:00001098o
.text$x:00001040                 lea     ecx, [ebp-40h]  ; this
.text$x:00001043                 jmp     ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text$x:00001043 __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text$x:00001043
.text$x:00001048
.text$x:00001048 ; =============== S U B R O U T I N E =======================================
.text$x:00001048
.text$x:00001048
.text$x:00001048 __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text$x:00001048                                         ; DATA XREF: .xdata$x:000010A0o
.text$x:00001048                 lea     ecx, [ebp-70h]  ; this
.text$x:0000104B                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:0000104B __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text$x:0000104B
.text$x:00001050
.text$x:00001050 ; =============== S U B R O U T I N E =======================================
.text$x:00001050
.text$x:00001050
.text$x:00001050 __ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00001050                                         ; DATA XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00001050
.text$x:00001050 arg_4           = dword ptr  8
.text$x:00001050
.text$x:00001050                 mov     edx, [esp+arg_4]
.text$x:00001054                 lea     eax, [edx+0Ch]
.text$x:00001057                 mov     ecx, [edx-130h]
.text$x:0000105D                 xor     ecx, eax
.text$x:0000105F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001064                 mov     ecx, [edx-4]
.text$x:00001067                 xor     ecx, eax
.text$x:00001069                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000106E                 mov     eax, offset __ehfuncinfo$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00001073                 jmp     ___CxxFrameHandler3
.text$x:00001073 __ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00001073
.text$x:00001078
.text$x:00001078 ; =============== S U B R O U T I N E =======================================
.text$x:00001078
.text$x:00001078
.text$x:00001078 __ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00001078                                         ; DATA XREF: NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00001078
.text$x:00001078 arg_4           = dword ptr  8
.text$x:00001078
.text$x:00001078                 mov     edx, [esp+arg_4]
.text$x:0000107C                 lea     eax, [edx+0Ch]
.text$x:0000107F                 mov     ecx, [edx-3Ch]
.text$x:00001082                 xor     ecx, eax
.text$x:00001084                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001089                 mov     eax, offset __ehfuncinfo$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:0000108E                 jmp     ___CxxFrameHandler3
.text$x:0000108E __ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:0000108E
.text$x:0000108E ; ---------------------------------------------------------------------------
.text$x:00001093                 align 4
.text$x:00001093 _text$x         ends
.text$x:00001093
.xdata$x:00001094 ; ===========================================================================
.xdata$x:00001094
.xdata$x:00001094 ; Segment type: Pure data
.xdata$x:00001094 ; Segment permissions: Read
.xdata$x:00001094 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001094                 assume cs:_xdata$x
.xdata$x:00001094                 ;org 1094h
.xdata$x:00001094 __unwindtable$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00001094                                         ; DATA XREF: .xdata$x:000010ACo
.xdata$x:00001095                 db 0FFh
.xdata$x:00001096                 db 0FFh
.xdata$x:00001097                 db 0FFh
.xdata$x:00001098                 dd offset __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:0000109C                 align 10h
.xdata$x:000010A0                 dd offset __unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:000010A4 __ehfuncinfo$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000010A4                                         ; DATA XREF: __ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+1Eo
.xdata$x:000010A5                 db    5
.xdata$x:000010A6                 db  93h ; ô
.xdata$x:000010A7                 db  19h
.xdata$x:000010A8                 db    2
.xdata$x:000010A9                 db    0
.xdata$x:000010AA                 db    0
.xdata$x:000010AB                 db    0
.xdata$x:000010AC                 dd offset __unwindtable$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000010B0                 db    0
.xdata$x:000010B1                 db    0
.xdata$x:000010B2                 db    0
.xdata$x:000010B3                 db    0
.xdata$x:000010B4                 db    0
.xdata$x:000010B5                 db    0
.xdata$x:000010B6                 db    0
.xdata$x:000010B7                 db    0
.xdata$x:000010B8                 db    0
.xdata$x:000010B9                 db    0
.xdata$x:000010BA                 db    0
.xdata$x:000010BB                 db    0
.xdata$x:000010BC                 db    0
.xdata$x:000010BD                 db    0
.xdata$x:000010BE                 db    0
.xdata$x:000010BF                 db    0
.xdata$x:000010C0                 db    0
.xdata$x:000010C1                 db    0
.xdata$x:000010C2                 db    0
.xdata$x:000010C3                 db    0
.xdata$x:000010C4                 db    1
.xdata$x:000010C5                 db    0
.xdata$x:000010C6                 db    0
.xdata$x:000010C7                 db    0
.xdata$x:000010C8 __unwindtable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000010C8                                         ; DATA XREF: .xdata$x:000010F4o
.xdata$x:000010C9                 db 0FFh
.xdata$x:000010CA                 db 0FFh
.xdata$x:000010CB                 db 0FFh
.xdata$x:000010CC                 db    0
.xdata$x:000010CD                 db    0
.xdata$x:000010CE                 db    0
.xdata$x:000010CF                 db    0
.xdata$x:000010D0                 db 0FFh
.xdata$x:000010D1                 db 0FFh
.xdata$x:000010D2                 db 0FFh
.xdata$x:000010D3                 db 0FFh
.xdata$x:000010D4                 db    0
.xdata$x:000010D5                 db    0
.xdata$x:000010D6                 db    0
.xdata$x:000010D7                 db    0
.xdata$x:000010D8 __tryblocktable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:000010D8                                         ; DATA XREF: .xdata$x:000010FCo
.xdata$x:000010D9                 db    0
.xdata$x:000010DA                 db    0
.xdata$x:000010DB                 db    0
.xdata$x:000010DC                 db    0
.xdata$x:000010DD                 db    0
.xdata$x:000010DE                 db    0
.xdata$x:000010DF                 db    0
.xdata$x:000010E0                 db    1
.xdata$x:000010E1                 db    0
.xdata$x:000010E2                 db    0
.xdata$x:000010E3                 db    0
.xdata$x:000010E4                 db    3
.xdata$x:000010E5                 db    0
.xdata$x:000010E6                 db    0
.xdata$x:000010E7                 db    0
.xdata$x:000010E8                 dd offset __catchsym$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
.xdata$x:000010EC __ehfuncinfo$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000010EC                                         ; DATA XREF: __ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:000010ED                 db    5
.xdata$x:000010EE                 db  93h ; ô
.xdata$x:000010EF                 db  19h
.xdata$x:000010F0                 db    2
.xdata$x:000010F1                 db    0
.xdata$x:000010F2                 db    0
.xdata$x:000010F3                 db    0
.xdata$x:000010F4                 dd offset __unwindtable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000010F8                 db    1
.xdata$x:000010F9                 db    0
.xdata$x:000010FA                 db    0
.xdata$x:000010FB                 db    0
.xdata$x:000010FC                 dd offset __tryblocktable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00001100                 db    0
.xdata$x:00001101                 db    0
.xdata$x:00001102                 db    0
.xdata$x:00001103                 db    0
.xdata$x:00001104                 db    0
.xdata$x:00001105                 db    0
.xdata$x:00001106                 db    0
.xdata$x:00001107                 db    0
.xdata$x:00001108                 db    0
.xdata$x:00001109                 db    0
.xdata$x:0000110A                 db    0
.xdata$x:0000110B                 db    0
.xdata$x:0000110C                 db    1
.xdata$x:0000110D                 db    0
.xdata$x:0000110E                 db    0
.xdata$x:0000110F                 db    0
.xdata$x:00001110 __catchsym$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 db    9
.xdata$x:00001110                                         ; DATA XREF: .xdata$x:000010E8o
.xdata$x:00001111                 db    0
.xdata$x:00001112                 db    0
.xdata$x:00001113                 db    0
.xdata$x:00001114                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00001118                 db 0E8h ; F
.xdata$x:00001119                 db 0FFh
.xdata$x:0000111A                 db 0FFh
.xdata$x:0000111B                 db 0FFh
.xdata$x:0000111C                 dd offset __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00001120                 db    9
.xdata$x:00001121                 db    0
.xdata$x:00001122                 db    0
.xdata$x:00001123                 db    0
.xdata$x:00001124                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00001128                 db 0DCh ; _
.xdata$x:00001129                 db 0FFh
.xdata$x:0000112A                 db 0FFh
.xdata$x:0000112B                 db 0FFh
.xdata$x:0000112C                 dd offset __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00001130                 dd offset loc_40
.xdata$x:00001134                 db    0
.xdata$x:00001135                 db    0
.xdata$x:00001136                 db    0
.xdata$x:00001137                 db    0
.xdata$x:00001138                 db    0
.xdata$x:00001139                 db    0
.xdata$x:0000113A                 db    0
.xdata$x:0000113B                 db    0
.xdata$x:0000113C                 dd offset __catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.xdata$x:0000113C _xdata$x        ends
.xdata$x:0000113C
.text:00001140 ; ===========================================================================
.text:00001140
.text:00001140 ; Segment type: Pure code
.text:00001140 ; Segment permissions: Read/Execute
.text:00001140 _text           segment para public 'CODE' use32
.text:00001140                 assume cs:_text
.text:00001140                 ;org 1140h
.text:00001140 ; COMDAT (pick any)
.text:00001140                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001140
.text:00001140 ; =============== S U B R O U T I N E =======================================
.text:00001140
.text:00001140 ; Attributes: bp-based frame
.text:00001140
.text:00001140 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00001140                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00001140 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00001140                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4CFp
.text:00001140                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7D8p
.text:00001140
.text:00001140 var_4           = dword ptr -4
.text:00001140
.text:00001140                 push    ebp
.text:00001141                 mov     ebp, esp
.text:00001143                 push    ecx
.text:00001144                 push    esi
.text:00001145                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000114C                 mov     [ebp+var_4], ecx
.text:0000114F                 mov     eax, [ebp+var_4]
.text:00001152                 mov     ecx, [eax+20h]
.text:00001155                 xor     esi, esi
.text:00001157                 mov     edx, [ebp+var_4]
.text:0000115A                 add     ecx, [edx+10h]
.text:0000115D                 adc     esi, [edx+14h]
.text:00001160                 mov     eax, [ebp+var_4]
.text:00001163                 mov     edx, [ebp+var_4]
.text:00001166                 mov     eax, [eax]
.text:00001168                 sub     eax, [edx+8]
.text:0000116B                 cdq
.text:0000116C                 add     ecx, eax
.text:0000116E                 adc     esi, edx
.text:00001170                 mov     eax, ecx
.text:00001172                 mov     edx, esi
.text:00001174                 pop     esi
.text:00001175                 mov     esp, ebp
.text:00001177                 pop     ebp
.text:00001178                 retn
.text:00001178 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00001178
.text:00001178 ; ---------------------------------------------------------------------------
.text:00001179                 align 4
.text:00001179 _text           ends
.text:00001179
.text:0000117C ; ===========================================================================
.text:0000117C
.text:0000117C ; Segment type: Pure code
.text:0000117C ; Segment permissions: Read/Execute
.text:0000117C _text           segment para public 'CODE' use32
.text:0000117C                 assume cs:_text
.text:0000117C                 ;org 117Ch
.text:0000117C ; COMDAT (pick any)
.text:0000117C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000117C
.text:0000117C ; =============== S U B R O U T I N E =======================================
.text:0000117C
.text:0000117C ; Attributes: bp-based frame
.text:0000117C
.text:0000117C ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:0000117C                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:0000117C ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000117C                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BBp
.text:0000117C
.text:0000117C var_4           = dword ptr -4
.text:0000117C arg_0           = dword ptr  8
.text:0000117C
.text:0000117C                 push    ebp
.text:0000117D                 mov     ebp, esp
.text:0000117F                 push    ecx
.text:00001180                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001187                 mov     [ebp+var_4], ecx
.text:0000118A                 mov     eax, [ebp+var_4]
.text:0000118D                 mov     ecx, [ebp+arg_0]
.text:00001190                 mov     [eax+0Ch], ecx
.text:00001193                 mov     esp, ebp
.text:00001195                 pop     ebp
.text:00001196                 retn    4
.text:00001196 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00001196
.text:00001196 ; ---------------------------------------------------------------------------
.text:00001199                 align 4
.text:00001199 _text           ends
.text:00001199
.text:0000119C ; ===========================================================================
.text:0000119C
.text:0000119C ; Segment type: Pure code
.text:0000119C ; Segment permissions: Read/Execute
.text:0000119C _text           segment para public 'CODE' use32
.text:0000119C                 assume cs:_text
.text:0000119C                 ;org 119Ch
.text:0000119C ; COMDAT (pick any)
.text:0000119C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000119C
.text:0000119C ; =============== S U B R O U T I N E =======================================
.text:0000119C
.text:0000119C ; Attributes: bp-based frame
.text:0000119C
.text:0000119C ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:0000119C                 public ??1CInBuffer@@QAE@XZ
.text:0000119C ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A4p
.text:0000119C                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+FCp ...
.text:0000119C
.text:0000119C var_4           = dword ptr -4
.text:0000119C
.text:0000119C                 push    ebp
.text:0000119D                 mov     ebp, esp
.text:0000119F                 push    ecx
.text:000011A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011A7                 mov     [ebp+var_4], ecx
.text:000011AA                 mov     ecx, [ebp+var_4] ; this
.text:000011AD                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:000011B2                 add     esp, 4
.text:000011B5                 cmp     ebp, esp
.text:000011B7                 call    __RTC_CheckEsp
.text:000011BC                 mov     esp, ebp
.text:000011BE                 pop     ebp
.text:000011BF                 retn
.text:000011BF ??1CInBuffer@@QAE@XZ endp
.text:000011BF
.text:000011BF _text           ends
.text:000011BF
.text:000011C0 ; ===========================================================================
.text:000011C0
.text:000011C0 ; Segment type: Pure code
.text:000011C0 ; Segment permissions: Read/Execute
.text:000011C0 _text           segment para public 'CODE' use32
.text:000011C0                 assume cs:_text
.text:000011C0                 ;org 11C0h
.text:000011C0 ; COMDAT (pick any)
.text:000011C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011C0
.text:000011C0 ; =============== S U B R O U T I N E =======================================
.text:000011C0
.text:000011C0 ; Attributes: bp-based frame
.text:000011C0
.text:000011C0 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:000011C0                 public ??0COutBuffer@@QAE@XZ
.text:000011C0 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+56p
.text:000011C0
.text:000011C0 var_4           = dword ptr -4
.text:000011C0
.text:000011C0                 push    ebp
.text:000011C1                 mov     ebp, esp
.text:000011C3                 push    ecx
.text:000011C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011CB                 mov     [ebp+var_4], ecx
.text:000011CE                 mov     eax, [ebp+var_4]
.text:000011D1                 mov     dword ptr [eax], 0
.text:000011D7                 mov     ecx, [ebp+var_4]
.text:000011DA                 mov     dword ptr [ecx+4], 0
.text:000011E1                 mov     edx, [ebp+var_4]
.text:000011E4                 mov     dword ptr [edx+14h], 0
.text:000011EB                 mov     eax, [ebp+var_4]
.text:000011EE                 mov     dword ptr [eax+20h], 0
.text:000011F5                 mov     eax, [ebp+var_4]
.text:000011F8                 mov     esp, ebp
.text:000011FA                 pop     ebp
.text:000011FB                 retn
.text:000011FB ??0COutBuffer@@QAE@XZ endp
.text:000011FB
.text:000011FB _text           ends
.text:000011FB
.text:000011FC ; ===========================================================================
.text:000011FC
.text:000011FC ; Segment type: Pure code
.text:000011FC ; Segment permissions: Read/Execute
.text:000011FC _text           segment para public 'CODE' use32
.text:000011FC                 assume cs:_text
.text:000011FC                 ;org 11FCh
.text:000011FC ; COMDAT (pick any)
.text:000011FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011FC
.text:000011FC ; =============== S U B R O U T I N E =======================================
.text:000011FC
.text:000011FC ; Attributes: bp-based frame
.text:000011FC
.text:000011FC ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:000011FC                 public ??1COutBuffer@@QAE@XZ
.text:000011FC ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+95p
.text:000011FC                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+EDp ...
.text:000011FC
.text:000011FC var_4           = dword ptr -4
.text:000011FC
.text:000011FC                 push    ebp
.text:000011FD                 mov     ebp, esp
.text:000011FF                 push    ecx
.text:00001200                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001207                 mov     [ebp+var_4], ecx
.text:0000120A                 mov     ecx, [ebp+var_4] ; this
.text:0000120D                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00001212                 add     esp, 4
.text:00001215                 cmp     ebp, esp
.text:00001217                 call    __RTC_CheckEsp
.text:0000121C                 mov     esp, ebp
.text:0000121E                 pop     ebp
.text:0000121F                 retn
.text:0000121F ??1COutBuffer@@QAE@XZ endp
.text:0000121F
.text:0000121F _text           ends
.text:0000121F
.text:00001220 ; ===========================================================================
.text:00001220
.text:00001220 ; Segment type: Pure code
.text:00001220 ; Segment permissions: Read/Execute
.text:00001220 _text           segment para public 'CODE' use32
.text:00001220                 assume cs:_text
.text:00001220                 ;org 1220h
.text:00001220 ; COMDAT (pick any)
.text:00001220                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001220
.text:00001220 ; =============== S U B R O U T I N E =======================================
.text:00001220
.text:00001220 ; Attributes: bp-based frame
.text:00001220
.text:00001220 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00001220                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00001220 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00001220                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+113p
.text:00001220
.text:00001220 var_4           = dword ptr -4
.text:00001220 arg_0           = dword ptr  8
.text:00001220
.text:00001220                 push    ebp
.text:00001221                 mov     ebp, esp
.text:00001223                 push    ecx
.text:00001224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000122B                 mov     [ebp+var_4], ecx
.text:0000122E                 mov     eax, [ebp+var_4]
.text:00001231                 mov     ecx, [ebp+arg_0]
.text:00001234                 mov     [eax+14h], ecx
.text:00001237                 mov     esp, ebp
.text:00001239                 pop     ebp
.text:0000123A                 retn    4
.text:0000123A ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000123A
.text:0000123A ; ---------------------------------------------------------------------------
.text:0000123D                 align 10h
.text:0000123D _text           ends
.text:0000123D
.text:00001240 ; ===========================================================================
.text:00001240
.text:00001240 ; Segment type: Pure code
.text:00001240 ; Segment permissions: Read/Execute
.text:00001240 _text           segment para public 'CODE' use32
.text:00001240                 assume cs:_text
.text:00001240                 ;org 1240h
.text:00001240 ; COMDAT (pick any)
.text:00001240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001240
.text:00001240 ; =============== S U B R O U T I N E =======================================
.text:00001240
.text:00001240 ; Attributes: bp-based frame
.text:00001240
.text:00001240 ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00001240                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00001240 ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00001240                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+736p
.text:00001240
.text:00001240 var_4           = dword ptr -4
.text:00001240 arg_0           = byte ptr  8
.text:00001240
.text:00001240                 push    ebp
.text:00001241                 mov     ebp, esp
.text:00001243                 push    ecx
.text:00001244                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000124B                 mov     [ebp+var_4], ecx
.text:0000124E                 mov     eax, [ebp+var_4]
.text:00001251                 mov     ecx, [eax]
.text:00001253                 mov     edx, [ebp+var_4]
.text:00001256                 mov     eax, [edx+4]
.text:00001259                 mov     dl, [ebp+arg_0]
.text:0000125C                 mov     [ecx+eax], dl
.text:0000125F                 mov     eax, [ebp+var_4]
.text:00001262                 mov     ecx, [eax+4]
.text:00001265                 add     ecx, 1
.text:00001268                 mov     edx, [ebp+var_4]
.text:0000126B                 mov     [edx+4], ecx
.text:0000126E                 mov     eax, [ebp+var_4]
.text:00001271                 mov     ecx, [ebp+var_4]
.text:00001274                 mov     edx, [eax+4]
.text:00001277                 cmp     edx, [ecx+8]
.text:0000127A                 jnz     short loc_1284
.text:0000127C                 mov     ecx, [ebp+var_4] ; this
.text:0000127F                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00001284
.text:00001284 loc_1284:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:00001284                 add     esp, 4
.text:00001287                 cmp     ebp, esp
.text:00001289                 call    __RTC_CheckEsp
.text:0000128E                 mov     esp, ebp
.text:00001290                 pop     ebp
.text:00001291                 retn    4
.text:00001291 ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:00001291
.text:00001291 _text           ends
.text:00001291
.text:00001294 ; ===========================================================================
.text:00001294
.text:00001294 ; Segment type: Pure code
.text:00001294 ; Segment permissions: Read/Execute
.text:00001294 _text           segment para public 'CODE' use32
.text:00001294                 assume cs:_text
.text:00001294                 ;org 1294h
.text:00001294 ; COMDAT (pick any)
.text:00001294                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001294
.text:00001294 ; =============== S U B R O U T I N E =======================================
.text:00001294
.text:00001294 ; Attributes: bp-based frame
.text:00001294
.text:00001294 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00001294                 public ??0CInBuffer@@QAE@XZ
.text:00001294 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+47p
.text:00001294
.text:00001294 var_4           = dword ptr -4
.text:00001294
.text:00001294                 push    ebp
.text:00001295                 mov     ebp, esp
.text:00001297                 push    ecx
.text:00001298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000129F                 mov     [ebp+var_4], ecx
.text:000012A2                 mov     ecx, [ebp+var_4]
.text:000012A5                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:000012AA                 mov     eax, [ebp+var_4]
.text:000012AD                 add     esp, 4
.text:000012B0                 cmp     ebp, esp
.text:000012B2                 call    __RTC_CheckEsp
.text:000012B7                 mov     esp, ebp
.text:000012B9                 pop     ebp
.text:000012BA                 retn
.text:000012BA ??0CInBuffer@@QAE@XZ endp
.text:000012BA
.text:000012BA ; ---------------------------------------------------------------------------
.text:000012BB                 align 4
.text:000012BB _text           ends
.text:000012BB
.data:000012BC ; ===========================================================================
.data:000012BC
.data:000012BC ; Segment type: Pure data
.data:000012BC ; Segment permissions: Read/Write
.data:000012BC _data           segment dword public 'DATA' use32
.data:000012BC                 assume cs:_data
.data:000012BC                 ;org 12BCh
.data:000012BC ; COMDAT (pick any)
.data:000012BC                 public ??_R0?AUCInBufferException@@@8
.data:000012BC ; struct CInBufferException `RTTI Type Descriptor'
.data:000012BC ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:000012BC                                         ; DATA XREF: .xdata$x:00001114o
.data:000012BC                                         ; const type_info::`vftable'
.data:000012C0                 db    0
.data:000012C1                 db    0
.data:000012C2                 db    0
.data:000012C3                 db    0
.data:000012C4                 db  2Eh ; .
.data:000012C5                 db  3Fh ; ?
.data:000012C6                 db  41h ; A
.data:000012C7                 db  55h ; U
.data:000012C8                 db  43h ; C
.data:000012C9                 db  49h ; I
.data:000012CA                 db  6Eh ; n
.data:000012CB                 db  42h ; B
.data:000012CC                 db  75h ; u
.data:000012CD                 db  66h ; f
.data:000012CE                 db  66h ; f
.data:000012CF                 db  65h ; e
.data:000012D0                 db  72h ; r
.data:000012D1                 db  45h ; E
.data:000012D2                 db  78h ; x
.data:000012D3                 db  63h ; c
.data:000012D4                 db  65h ; e
.data:000012D5                 db  70h ; p
.data:000012D6                 db  74h ; t
.data:000012D7                 db  69h ; i
.data:000012D8                 db  6Fh ; o
.data:000012D9                 db  6Eh ; n
.data:000012DA                 db  40h ; @
.data:000012DB                 db  40h ; @
.data:000012DC                 db    0
.data:000012DD                 align 10h
.data:000012DD _data           ends
.data:000012DD
.data:000012E0 ; ===========================================================================
.data:000012E0
.data:000012E0 ; Segment type: Pure data
.data:000012E0 ; Segment permissions: Read/Write
.data:000012E0 _data           segment dword public 'DATA' use32
.data:000012E0                 assume cs:_data
.data:000012E0                 ;org 12E0h
.data:000012E0 ; COMDAT (pick any)
.data:000012E0                 public ??_R0?AUCOutBufferException@@@8
.data:000012E0 ; struct COutBufferException `RTTI Type Descriptor'
.data:000012E0 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:000012E0                                         ; DATA XREF: .xdata$x:00001124o
.data:000012E0                                         ; const type_info::`vftable'
.data:000012E4                 align 8
.data:000012E8 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:000012E8 _data           ends
.data:000012E8
UNDEF:00001310 ; ===========================================================================
UNDEF:00001310
UNDEF:00001310 ; Segment type: Externs
UNDEF:00001310 ; UNDEF
UNDEF:00001310 ; __stdcall MyFree(x)
UNDEF:00001310                 extrn _MyFree@4:near    ; CODE XREF: NCompress::NZ::CDecoder::Free(void)+15p
UNDEF:00001310                                         ; NCompress::NZ::CDecoder::Free(void)+2Bp ...
UNDEF:00001314                 extrn __RTC_CheckEsp:near
UNDEF:00001314                                         ; CODE XREF: NCompress::NZ::CDecoder::Free(void)+55p
UNDEF:00001314                                         ; NCompress::NZ::CDecoder::~CDecoder(void)+24p ...
UNDEF:00001318                 extrn __RTC_Shutdown:near
UNDEF:00001318                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000131C                 extrn __RTC_InitBase:near
UNDEF:0000131C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001320 ; const type_info::`vftable'
UNDEF:00001320                 extrn ??_7type_info@@6B@:near
UNDEF:00001320                                         ; DATA XREF: .data:NCompress::NZ::CDecoder `RTTI Type Descriptor'o
UNDEF:00001320                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001324                 extrn _IID_ICompressCoder:near
UNDEF:00001324                                         ; DATA XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *):loc_EDCo
UNDEF:00001328 ; const IID IID_IUnknown
UNDEF:00001328                 extrn _IID_IUnknown:near
UNDEF:00001328                                         ; DATA XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:0000132C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000132C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001330 ; void __cdecl operator delete(void *)
UNDEF:00001330                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:00001334 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00001334                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00001334                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7E9p
UNDEF:00001338 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:00001338                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:00001338                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+45Cp
UNDEF:0000133C ; __stdcall MyAlloc(x)
UNDEF:0000133C                 extrn _MyAlloc@4:near   ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+29Cp
UNDEF:0000133C                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E7p ...
UNDEF:00001340 ; unsigned int __thiscall CInBufferBase::ReadBytes(CInBufferBase *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00001340                 extrn ?ReadBytes@CInBufferBase@@QAEIPAEI@Z:near
UNDEF:00001340                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+12Cp
UNDEF:00001340                                         ; NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+441p
UNDEF:00001344 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00001344                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00001344                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Bp
UNDEF:00001348 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00001348                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00001348                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D0p
UNDEF:0000134C ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:0000134C                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:0000134C                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C3p
UNDEF:00001350 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00001350                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00001350                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+78p
UNDEF:00001354                 extrn ___security_cookie:near
UNDEF:00001354                                         ; DATA XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Dr
UNDEF:00001354                                         ; NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27r ...
UNDEF:00001358                 extrn ___CxxFrameHandler3:near
UNDEF:00001358                                         ; CODE XREF: __ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+23j
UNDEF:00001358                                         ; __ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j
UNDEF:0000135C ; __fastcall __security_check_cookie(x)
UNDEF:0000135C                 extrn @__security_check_cookie@4:near
UNDEF:0000135C                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+867p
UNDEF:0000135C                                         ; NCompress::NZ::CheckStream(uchar const *,uint)+232p ...
UNDEF:00001360 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001360                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001360                                         ; CODE XREF: NCompress::NZ::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+84Ep
UNDEF:00001360                                         ; NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DAp ...
UNDEF:00001364 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00001364                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00001364                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00001368 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00001368                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00001368                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:0000136C ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:0000136C                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:0000136C                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:00001370 ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:00001370                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:00001370                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:00001374 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001374                 extrn _memcpy:near      ; CODE XREF: NCompress::NZ::CheckStream(uchar const *,uint)+116p
UNDEF:00001374
UNDEF:00001374
UNDEF:00001374                 end