.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 34CB47ABA39AA016180BB928CF14C23D
.text:00000000 ; Input CRC32 : B52B2345
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\OffsetStream.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall COffsetOutStream::Init(COffsetOutStream *this, struct IOutStream *, unsigned __int64)
.text:00000000                 public ?Init@COffsetOutStream@@QAEJPAUIOutStream@@_K@Z
.text:00000000 ?Init@COffsetOutStream@@QAEJPAUIOutStream@@_K@Z proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = qword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_4], ecx
.text:00000018                 mov     eax, [ebp+var_4]
.text:0000001B                 mov     ecx, dword ptr [ebp+arg_4]
.text:0000001E                 mov     [eax+8], ecx
.text:00000021                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000024                 mov     [eax+0Ch], edx
.text:00000027                 mov     eax, [ebp+arg_0]
.text:0000002A                 push    eax
.text:0000002B                 mov     ecx, [ebp+var_4]
.text:0000002E                 add     ecx, 10h
.text:00000031                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:00000036                 mov     ecx, [ebp+var_4]
.text:00000039                 add     ecx, 10h
.text:0000003C                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000041                 mov     [ebp+var_8], eax
.text:00000044                 mov     esi, esp
.text:00000046                 push    0
.text:00000048                 push    0
.text:0000004A                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:0000004D                 push    ecx
.text:0000004E                 mov     edx, dword ptr [ebp+arg_4]
.text:00000051                 push    edx
.text:00000052                 mov     eax, [ebp+var_8]
.text:00000055                 push    eax
.text:00000056                 mov     ecx, [ebp+var_8]
.text:00000059                 mov     edx, [ecx]
.text:0000005B                 mov     eax, [edx+10h]
.text:0000005E                 call    eax
.text:00000060                 cmp     esi, esp
.text:00000062                 call    __RTC_CheckEsp
.text:00000067                 pop     esi
.text:00000068                 add     esp, 8
.text:0000006B                 cmp     ebp, esp
.text:0000006D                 call    __RTC_CheckEsp
.text:00000072                 mov     esp, ebp
.text:00000074                 pop     ebp
.text:00000075                 retn    0Ch
.text:00000075 ?Init@COffsetOutStream@@QAEJPAUIOutStream@@_K@Z endp
.text:00000075
.text:00000075 ; ---------------------------------------------------------------------------
.text:00000078                 align 10h
.text:00000080
.text:00000080 ; =============== S U B R O U T I N E =======================================
.text:00000080
.text:00000080 ; Attributes: bp-based frame
.text:00000080
.text:00000080 ; __int32 __stdcall COffsetOutStream::Write(COffsetOutStream *this, const void *, unsigned int, unsigned int *)
.text:00000080                 public ?Write@COffsetOutStream@@UAGJPBXIPAI@Z
.text:00000080 ?Write@COffsetOutStream@@UAGJPBXIPAI@Z proc near
.text:00000080
.text:00000080 var_4           = dword ptr -4
.text:00000080 this            = dword ptr  8
.text:00000080 arg_4           = dword ptr  0Ch
.text:00000080 arg_8           = dword ptr  10h
.text:00000080 arg_C           = dword ptr  14h
.text:00000080
.text:00000080                 push    ebp
.text:00000081                 mov     ebp, esp
.text:00000083                 push    ecx
.text:00000084                 push    esi
.text:00000085                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000008C                 mov     ecx, [ebp+this]
.text:0000008F                 add     ecx, 10h
.text:00000092                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000097                 mov     [ebp+var_4], eax
.text:0000009A                 mov     esi, esp
.text:0000009C                 mov     eax, [ebp+arg_C]
.text:0000009F                 push    eax
.text:000000A0                 mov     ecx, [ebp+arg_8]
.text:000000A3                 push    ecx
.text:000000A4                 mov     edx, [ebp+arg_4]
.text:000000A7                 push    edx
.text:000000A8                 mov     eax, [ebp+var_4]
.text:000000AB                 push    eax
.text:000000AC                 mov     ecx, [ebp+var_4]
.text:000000AF                 mov     edx, [ecx]
.text:000000B1                 mov     eax, [edx+0Ch]
.text:000000B4                 call    eax
.text:000000B6                 cmp     esi, esp
.text:000000B8                 call    __RTC_CheckEsp
.text:000000BD                 pop     esi
.text:000000BE                 add     esp, 4
.text:000000C1                 cmp     ebp, esp
.text:000000C3                 call    __RTC_CheckEsp
.text:000000C8                 mov     esp, ebp
.text:000000CA                 pop     ebp
.text:000000CB                 retn    10h
.text:000000CB ?Write@COffsetOutStream@@UAGJPBXIPAI@Z endp
.text:000000CB
.text:000000CB ; ---------------------------------------------------------------------------
.text:000000CE                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __int32 __stdcall COffsetOutStream::Seek(COffsetOutStream *this, __int64, unsigned int, unsigned __int64 *)
.text:000000D0                 public ?Seek@COffsetOutStream@@UAGJ_JIPA_K@Z
.text:000000D0 ?Seek@COffsetOutStream@@UAGJ_JIPA_K@Z proc near
.text:000000D0
.text:000000D0 var_18          = dword ptr -18h
.text:000000D0 var_14          = dword ptr -14h
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_C           = dword ptr -0Ch
.text:000000D0 var_8           = dword ptr -8
.text:000000D0 var_4           = dword ptr -4
.text:000000D0 this            = dword ptr  8
.text:000000D0 arg_4           = qword ptr  0Ch
.text:000000D0 arg_C           = dword ptr  14h
.text:000000D0 arg_10          = dword ptr  18h
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 sub     esp, 18h
.text:000000D6                 push    esi
.text:000000D7                 mov     eax, 0CCCCCCCCh
.text:000000DC                 mov     [ebp+var_18], eax
.text:000000DF                 mov     [ebp+var_14], eax
.text:000000E2                 mov     [ebp+var_10], eax
.text:000000E5                 mov     [ebp+var_C], eax
.text:000000E8                 mov     [ebp+var_8], eax
.text:000000EB                 mov     [ebp+var_4], eax
.text:000000EE                 cmp     [ebp+arg_C], 0
.text:000000F2                 jnz     short loc_11E
.text:000000F4                 cmp     dword ptr [ebp+arg_4+4], 0
.text:000000F8                 jg      short loc_109
.text:000000FA                 jl      short loc_102
.text:000000FC                 cmp     dword ptr [ebp+arg_4], 0
.text:00000100                 jnb     short loc_109
.text:00000102
.text:00000102 loc_102:                                ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+2Aj
.text:00000102                 mov     eax, 80070083h
.text:00000107                 jmp     short loc_176
.text:00000109 ; ---------------------------------------------------------------------------
.text:00000109
.text:00000109 loc_109:                                ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+28j
.text:00000109                                         ; COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+30j
.text:00000109                 mov     eax, [ebp+this]
.text:0000010C                 mov     ecx, dword ptr [ebp+arg_4]
.text:0000010F                 add     ecx, [eax+8]
.text:00000112                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000115                 adc     edx, [eax+0Ch]
.text:00000118                 mov     dword ptr [ebp+arg_4], ecx
.text:0000011B                 mov     dword ptr [ebp+arg_4+4], edx
.text:0000011E
.text:0000011E loc_11E:                                ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+22j
.text:0000011E                 mov     ecx, [ebp+this]
.text:00000121                 add     ecx, 10h
.text:00000124                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000129                 mov     [ebp+var_18], eax
.text:0000012C                 mov     esi, esp
.text:0000012E                 lea     eax, [ebp+var_C]
.text:00000131                 push    eax
.text:00000132                 mov     ecx, [ebp+arg_C]
.text:00000135                 push    ecx
.text:00000136                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000139                 push    edx
.text:0000013A                 mov     eax, dword ptr [ebp+arg_4]
.text:0000013D                 push    eax
.text:0000013E                 mov     ecx, [ebp+var_18]
.text:00000141                 push    ecx
.text:00000142                 mov     edx, [ebp+var_18]
.text:00000145                 mov     eax, [edx]
.text:00000147                 mov     ecx, [eax+10h]
.text:0000014A                 call    ecx
.text:0000014C                 cmp     esi, esp
.text:0000014E                 call    __RTC_CheckEsp
.text:00000153                 mov     [ebp+var_14], eax
.text:00000156                 cmp     [ebp+arg_10], 0
.text:0000015A                 jz      short loc_173
.text:0000015C                 mov     edx, [ebp+this]
.text:0000015F                 mov     eax, [ebp+var_C]
.text:00000162                 sub     eax, [edx+8]
.text:00000165                 mov     ecx, [ebp+var_8]
.text:00000168                 sbb     ecx, [edx+0Ch]
.text:0000016B                 mov     edx, [ebp+arg_10]
.text:0000016E                 mov     [edx], eax
.text:00000170                 mov     [edx+4], ecx
.text:00000173
.text:00000173 loc_173:                                ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+8Aj
.text:00000173                 mov     eax, [ebp+var_14]
.text:00000176
.text:00000176 loc_176:                                ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+37j
.text:00000176                 push    edx
.text:00000177                 mov     ecx, ebp
.text:00000179                 push    eax
.text:0000017A                 lea     edx, $LN9
.text:00000180                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000185                 pop     eax
.text:00000186                 pop     edx
.text:00000187                 pop     esi
.text:00000188                 add     esp, 18h
.text:0000018B                 cmp     ebp, esp
.text:0000018D                 call    __RTC_CheckEsp
.text:00000192                 mov     esp, ebp
.text:00000194                 pop     ebp
.text:00000195                 retn    14h
.text:00000195 ?Seek@COffsetOutStream@@UAGJ_JIPA_K@Z endp
.text:00000195
.text:00000195 ; ---------------------------------------------------------------------------
.text:00000198 $LN9            dd 1                    ; DATA XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+AAo
.text:0000019C                 dd offset $LN8
.text:000001A0 $LN8            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:0000019Co
.text:000001A8                 dd offset $LN7          ; "absoluteNewPosition"
.text:000001AC $LN7            db 'absoluteNewPosition',0 ; DATA XREF: .text:000001A8o
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; __int32 __stdcall COffsetOutStream::SetSize(COffsetOutStream *this, unsigned __int64)
.text:000001C0                 public ?SetSize@COffsetOutStream@@UAGJ_K@Z
.text:000001C0 ?SetSize@COffsetOutStream@@UAGJ_K@Z proc near
.text:000001C0
.text:000001C0 var_4           = dword ptr -4
.text:000001C0 this            = dword ptr  8
.text:000001C0 arg_4           = qword ptr  0Ch
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 push    ecx
.text:000001C4                 push    esi
.text:000001C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001CC                 mov     ecx, [ebp+this]
.text:000001CF                 add     ecx, 10h
.text:000001D2                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:000001D7                 mov     [ebp+var_4], eax
.text:000001DA                 mov     eax, [ebp+this]
.text:000001DD                 mov     ecx, [eax+8]
.text:000001E0                 add     ecx, dword ptr [ebp+arg_4]
.text:000001E3                 mov     edx, [eax+0Ch]
.text:000001E6                 adc     edx, dword ptr [ebp+arg_4+4]
.text:000001E9                 mov     esi, esp
.text:000001EB                 push    edx
.text:000001EC                 push    ecx
.text:000001ED                 mov     eax, [ebp+var_4]
.text:000001F0                 push    eax
.text:000001F1                 mov     ecx, [ebp+var_4]
.text:000001F4                 mov     edx, [ecx]
.text:000001F6                 mov     eax, [edx+14h]
.text:000001F9                 call    eax
.text:000001FB                 cmp     esi, esp
.text:000001FD                 call    __RTC_CheckEsp
.text:00000202                 pop     esi
.text:00000203                 add     esp, 4
.text:00000206                 cmp     ebp, esp
.text:00000208                 call    __RTC_CheckEsp
.text:0000020D                 mov     esp, ebp
.text:0000020F                 pop     ebp
.text:00000210                 retn    0Ch
.text:00000210 ?SetSize@COffsetOutStream@@UAGJ_K@Z endp
.text:00000210
.text:00000210 ; ---------------------------------------------------------------------------
.text:00000213                 align 4
.text:00000213 _text           ends
.text:00000213
.rtc$TMZ:00000214 ; ===========================================================================
.rtc$TMZ:00000214
.rtc$TMZ:00000214 ; Segment type: Pure data
.rtc$TMZ:00000214 ; Segment permissions: Read
.rtc$TMZ:00000214 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000214                 assume cs:_rtc$TMZ
.rtc$TMZ:00000214                 ;org 214h
.rtc$TMZ:00000214 ; COMDAT (pick any)
.rtc$TMZ:00000214 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000214 _rtc$TMZ        ends
.rtc$TMZ:00000214
.rtc$IMZ:00000218 ; ===========================================================================
.rtc$IMZ:00000218
.rtc$IMZ:00000218 ; Segment type: Pure data
.rtc$IMZ:00000218 ; Segment permissions: Read
.rtc$IMZ:00000218 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000218                 assume cs:_rtc$IMZ
.rtc$IMZ:00000218                 ;org 218h
.rtc$IMZ:00000218 ; COMDAT (pick any)
.rtc$IMZ:00000218 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000218 _rtc$IMZ        ends
.rtc$IMZ:00000218
.text:0000021C ; ===========================================================================
.text:0000021C
.text:0000021C ; Segment type: Pure code
.text:0000021C ; Segment permissions: Read/Execute
.text:0000021C _text           segment para public 'CODE' use32
.text:0000021C                 assume cs:_text
.text:0000021C                 ;org 21Ch
.text:0000021C ; COMDAT (pick any)
.text:0000021C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000021C
.text:0000021C ; =============== S U B R O U T I N E =======================================
.text:0000021C
.text:0000021C ; Attributes: bp-based frame
.text:0000021C
.text:0000021C ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator->(void)const
.text:0000021C                 public ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:0000021C ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:0000021C                                         ; CODE XREF: COffsetOutStream::Init(IOutStream *,unsigned __int64)+3Cp
.text:0000021C                                         ; COffsetOutStream::Write(void const *,uint,uint *)+12p ...
.text:0000021C
.text:0000021C var_4           = dword ptr -4
.text:0000021C
.text:0000021C                 push    ebp
.text:0000021D                 mov     ebp, esp
.text:0000021F                 push    ecx
.text:00000220                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000227                 mov     [ebp+var_4], ecx
.text:0000022A                 mov     eax, [ebp+var_4]
.text:0000022D                 mov     eax, [eax]
.text:0000022F                 mov     esp, ebp
.text:00000231                 pop     ebp
.text:00000232                 retn
.text:00000232 ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:00000232
.text:00000232 ; ---------------------------------------------------------------------------
.text:00000233                 align 4
.text:00000233 _text           ends
.text:00000233
.text:00000234 ; ===========================================================================
.text:00000234
.text:00000234 ; Segment type: Pure code
.text:00000234 ; Segment permissions: Read/Execute
.text:00000234 _text           segment para public 'CODE' use32
.text:00000234                 assume cs:_text
.text:00000234                 ;org 234h
.text:00000234 ; COMDAT (pick any)
.text:00000234                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000234
.text:00000234 ; =============== S U B R O U T I N E =======================================
.text:00000234
.text:00000234 ; Attributes: bp-based frame
.text:00000234
.text:00000234 ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator=(struct IOutStream *)
.text:00000234                 public ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z
.text:00000234 ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z proc near
.text:00000234                                         ; CODE XREF: COffsetOutStream::Init(IOutStream *,unsigned __int64)+31p
.text:00000234
.text:00000234 var_4           = dword ptr -4
.text:00000234 arg_0           = dword ptr  8
.text:00000234
.text:00000234                 push    ebp
.text:00000235                 mov     ebp, esp
.text:00000237                 push    ecx
.text:00000238                 push    esi
.text:00000239                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000240                 mov     [ebp+var_4], ecx
.text:00000243                 cmp     [ebp+arg_0], 0
.text:00000247                 jz      short loc_260
.text:00000249                 mov     eax, [ebp+arg_0]
.text:0000024C                 mov     ecx, [eax]
.text:0000024E                 mov     esi, esp
.text:00000250                 mov     edx, [ebp+arg_0]
.text:00000253                 push    edx
.text:00000254                 mov     eax, [ecx+4]
.text:00000257                 call    eax
.text:00000259                 cmp     esi, esp
.text:0000025B                 call    __RTC_CheckEsp
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+13j
.text:00000260                 mov     ecx, [ebp+var_4]
.text:00000263                 cmp     dword ptr [ecx], 0
.text:00000266                 jz      short loc_283
.text:00000268                 mov     edx, [ebp+var_4]
.text:0000026B                 mov     eax, [edx]
.text:0000026D                 mov     ecx, [ebp+var_4]
.text:00000270                 mov     edx, [ecx]
.text:00000272                 mov     eax, [eax]
.text:00000274                 mov     esi, esp
.text:00000276                 push    edx
.text:00000277                 mov     ecx, [eax+8]
.text:0000027A                 call    ecx
.text:0000027C                 cmp     esi, esp
.text:0000027E                 call    __RTC_CheckEsp
.text:00000283
.text:00000283 loc_283:                                ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+32j
.text:00000283                 mov     edx, [ebp+var_4]
.text:00000286                 mov     eax, [ebp+arg_0]
.text:00000289                 mov     [edx], eax
.text:0000028B                 mov     eax, [ebp+arg_0]
.text:0000028E                 pop     esi
.text:0000028F                 add     esp, 4
.text:00000292                 cmp     ebp, esp
.text:00000294                 call    __RTC_CheckEsp
.text:00000299                 mov     esp, ebp
.text:0000029B                 pop     ebp
.text:0000029C                 retn    4
.text:0000029C ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z endp
.text:0000029C
.text:0000029C _text           ends
.text:0000029C
UNDEF:000002A0 ; ===========================================================================
UNDEF:000002A0
UNDEF:000002A0 ; Segment type: Externs
UNDEF:000002A0 ; UNDEF
UNDEF:000002A0                 extrn __RTC_CheckEsp:near
UNDEF:000002A0                                         ; CODE XREF: COffsetOutStream::Init(IOutStream *,unsigned __int64)+62p
UNDEF:000002A0                                         ; COffsetOutStream::Init(IOutStream *,unsigned __int64)+6Dp ...
UNDEF:000002A4                 extrn __RTC_Shutdown:near
UNDEF:000002A4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000002A8                 extrn __RTC_InitBase:near
UNDEF:000002A8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002AC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000002AC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000002AC                                         ; CODE XREF: COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)+B0p
UNDEF:000002AC
UNDEF:000002AC
UNDEF:000002AC                 end