.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : F13A3C8CFA7832050A19BCB2CDBA80E2
.bss:00000000 ; Input CRC32 : 14F1A891
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ConsoleClose.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "MSVCRTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000000                 public ?g_BreakCounter@NConsoleClose@@3IA
.bss:00000000 ; unsigned int NConsoleClose::g_BreakCounter
.bss:00000000 ?g_BreakCounter@NConsoleClose@@3IA dd ? ; DATA XREF: NConsoleClose::HandlerRoutine(ulong):loc_BCr
.bss:00000000                                         ; NConsoleClose::HandlerRoutine(ulong)+18w ...
.bss:00000000 _bss            ends
.bss:00000000
.rdata:00000004 ; ===========================================================================
.rdata:00000004
.rdata:00000004 ; Segment type: Pure data
.rdata:00000004 ; Segment permissions: Read
.rdata:00000004 _rdata          segment dword public 'DATA' use32
.rdata:00000004                 assume cs:_rdata
.rdata:00000004                 ;org 4
.rdata:00000004 $SG65597        db 'SetConsoleCtrlHandler fails',0
.rdata:00000004                                         ; DATA XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+3Bo
.rdata:00000020 $SG65608        db 'SetConsoleCtrlHandler fails',0
.rdata:00000020                                         ; DATA XREF: NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+3Bo
.rdata:00000020 _rdata          ends
.rdata:00000020
.text:0000003C ; ===========================================================================
.text:0000003C
.text:0000003C ; Segment type: Pure code
.text:0000003C ; Segment permissions: Read/Execute
.text:0000003C _text           segment para public 'CODE' use32
.text:0000003C                 assume cs:_text
.text:0000003C                 ;org 3Ch
.text:0000003C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000003C
.text:0000003C ; =============== S U B R O U T I N E =======================================
.text:0000003C
.text:0000003C ; Attributes: bp-based frame
.text:0000003C
.text:0000003C ; _DWORD __thiscall NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(NConsoleClose::CCtrlHandlerSetter *__hidden this)
.text:0000003C                 public ??0CCtrlHandlerSetter@NConsoleClose@@QAE@XZ
.text:0000003C ??0CCtrlHandlerSetter@NConsoleClose@@QAE@XZ proc near
.text:0000003C
.text:0000003C var_8           = dword ptr -8
.text:0000003C var_4           = dword ptr -4
.text:0000003C
.text:0000003C                 push    ebp
.text:0000003D                 mov     ebp, esp
.text:0000003F                 sub     esp, 8
.text:00000042                 push    esi
.text:00000043                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000051                 mov     [ebp+var_4], ecx
.text:00000054                 mov     eax, [ebp+var_4]
.text:00000057                 mov     dword ptr [eax], offset ??_7CCtrlHandlerSetter@NConsoleClose@@6B@ ; const NConsoleClose::CCtrlHandlerSetter::`vftable'
.text:0000005D                 mov     esi, esp
.text:0000005F                 push    1               ; Add
.text:00000061                 push    offset ?HandlerRoutine@NConsoleClose@@YGHK@Z ; HandlerRoutine
.text:00000066                 call    dword ptr ds:__imp__SetConsoleCtrlHandler@8 ; SetConsoleCtrlHandler(x,x)
.text:0000006C                 cmp     esi, esp
.text:0000006E                 call    __RTC_CheckEsp
.text:00000073                 test    eax, eax
.text:00000075                 jnz     short loc_8C
.text:00000077                 mov     [ebp+var_8], offset $SG65597 ; "SetConsoleCtrlHandler fails"
.text:0000007E                 push    offset __TI2PAD
.text:00000083                 lea     ecx, [ebp+var_8]
.text:00000086                 push    ecx
.text:00000087                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+39j
.text:0000008C                 mov     eax, [ebp+var_4]
.text:0000008F                 pop     esi
.text:00000090                 add     esp, 8
.text:00000093                 cmp     ebp, esp
.text:00000095                 call    __RTC_CheckEsp
.text:0000009A                 mov     esp, ebp
.text:0000009C                 pop     ebp
.text:0000009D                 retn
.text:0000009D ??0CCtrlHandlerSetter@NConsoleClose@@QAE@XZ endp
.text:0000009D
.text:0000009D ; ---------------------------------------------------------------------------
.text:0000009E                 db 0Eh dup(0CCh)
.text:000000AC
.text:000000AC ; =============== S U B R O U T I N E =======================================
.text:000000AC
.text:000000AC ; Attributes: bp-based frame
.text:000000AC
.text:000000AC ; BOOL __stdcall NConsoleClose::HandlerRoutine(DWORD CtrlType)
.text:000000AC ?HandlerRoutine@NConsoleClose@@YGHK@Z proc near
.text:000000AC                                         ; DATA XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+25o
.text:000000AC                                         ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+25o
.text:000000AC
.text:000000AC CtrlType        = dword ptr  8
.text:000000AC
.text:000000AC                 push    ebp
.text:000000AD                 mov     ebp, esp
.text:000000AF                 cmp     [ebp+CtrlType], 5
.text:000000B3                 jnz     short loc_BC
.text:000000B5                 mov     eax, 1
.text:000000BA                 jmp     short loc_DB
.text:000000BC ; ---------------------------------------------------------------------------
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: NConsoleClose::HandlerRoutine(ulong)+7j
.text:000000BC                 mov     eax, ds:?g_BreakCounter@NConsoleClose@@3IA ; uint NConsoleClose::g_BreakCounter
.text:000000C1                 add     eax, 1
.text:000000C4                 mov     ds:?g_BreakCounter@NConsoleClose@@3IA, eax ; uint NConsoleClose::g_BreakCounter
.text:000000C9                 cmp     ds:?g_BreakCounter@NConsoleClose@@3IA, 2 ; uint NConsoleClose::g_BreakCounter
.text:000000D0                 jnb     short loc_D9
.text:000000D2                 mov     eax, 1
.text:000000D7                 jmp     short loc_DB
.text:000000D9 ; ---------------------------------------------------------------------------
.text:000000D9
.text:000000D9 loc_D9:                                 ; CODE XREF: NConsoleClose::HandlerRoutine(ulong)+24j
.text:000000D9                 xor     eax, eax
.text:000000DB
.text:000000DB loc_DB:                                 ; CODE XREF: NConsoleClose::HandlerRoutine(ulong)+Ej
.text:000000DB                                         ; NConsoleClose::HandlerRoutine(ulong)+2Bj
.text:000000DB                 pop     ebp
.text:000000DC                 retn    4
.text:000000DC ?HandlerRoutine@NConsoleClose@@YGHK@Z endp
.text:000000DC
.text:000000DC ; ---------------------------------------------------------------------------
.text:000000DF                 db 0Dh dup(0CCh)
.text:000000EC
.text:000000EC ; =============== S U B R O U T I N E =======================================
.text:000000EC
.text:000000EC ; Attributes: bp-based frame
.text:000000EC
.text:000000EC ; _DWORD __thiscall NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(NConsoleClose::CCtrlHandlerSetter *__hidden this)
.text:000000EC                 public ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ
.text:000000EC ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ proc near
.text:000000EC                                         ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::`scalar deleting destructor'(uint)+11p
.text:000000EC
.text:000000EC var_8           = dword ptr -8
.text:000000EC var_4           = dword ptr -4
.text:000000EC
.text:000000EC                 push    ebp
.text:000000ED                 mov     ebp, esp
.text:000000EF                 sub     esp, 8
.text:000000F2                 push    esi
.text:000000F3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000FA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000101                 mov     [ebp+var_4], ecx
.text:00000104                 mov     eax, [ebp+var_4]
.text:00000107                 mov     dword ptr [eax], offset ??_7CCtrlHandlerSetter@NConsoleClose@@6B@ ; const NConsoleClose::CCtrlHandlerSetter::`vftable'
.text:0000010D                 mov     esi, esp
.text:0000010F                 push    0               ; Add
.text:00000111                 push    offset ?HandlerRoutine@NConsoleClose@@YGHK@Z ; HandlerRoutine
.text:00000116                 call    dword ptr ds:__imp__SetConsoleCtrlHandler@8 ; SetConsoleCtrlHandler(x,x)
.text:0000011C                 cmp     esi, esp
.text:0000011E                 call    __RTC_CheckEsp
.text:00000123                 test    eax, eax
.text:00000125                 jnz     short loc_13C
.text:00000127                 mov     [ebp+var_8], offset $SG65608 ; "SetConsoleCtrlHandler fails"
.text:0000012E                 push    offset __TI2PAD
.text:00000133                 lea     ecx, [ebp+var_8]
.text:00000136                 push    ecx
.text:00000137                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000013C ; ---------------------------------------------------------------------------
.text:0000013C
.text:0000013C loc_13C:                                ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+39j
.text:0000013C                 pop     esi
.text:0000013D                 add     esp, 8
.text:00000140                 cmp     ebp, esp
.text:00000142                 call    __RTC_CheckEsp
.text:00000147                 mov     esp, ebp
.text:00000149                 pop     ebp
.text:0000014A                 retn
.text:0000014A ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ endp
.text:0000014A
.text:0000014A ; ---------------------------------------------------------------------------
.text:0000014B                 align 4
.text:0000014B _text           ends
.text:0000014B
.xdata$x:0000014C ; ===========================================================================
.xdata$x:0000014C
.xdata$x:0000014C ; Segment type: Pure data
.xdata$x:0000014C ; Segment permissions: Read
.xdata$x:0000014C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000014C                 assume cs:_xdata$x
.xdata$x:0000014C                 ;org 14Ch
.xdata$x:0000014C ; COMDAT (pick any)
.xdata$x:0000014C                 public __TI2PAD
.xdata$x:0000014C __TI2PAD        db    0                 ; DATA XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+42o
.xdata$x:0000014C                                         ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+42o
.xdata$x:0000014D                 db    0
.xdata$x:0000014E                 db    0
.xdata$x:0000014F                 db    0
.xdata$x:00000150                 db    0
.xdata$x:00000151                 db    0
.xdata$x:00000152                 db    0
.xdata$x:00000153                 db    0
.xdata$x:00000154                 db    0
.xdata$x:00000155                 db    0
.xdata$x:00000156                 db    0
.xdata$x:00000157                 db    0
.xdata$x:00000158                 dd offset __CTA2PAD
.xdata$x:00000158 _xdata$x        ends
.xdata$x:00000158
.rdata:0000015C ; ===========================================================================
.rdata:0000015C
.rdata:0000015C ; Segment type: Pure data
.rdata:0000015C ; Segment permissions: Read
.rdata:0000015C _rdata          segment dword public 'DATA' use32
.rdata:0000015C                 assume cs:_rdata
.rdata:0000015C                 ;org 15Ch
.rdata:0000015C ; COMDAT (pick largest)
.rdata:0000015C                 dd offset ??_R4CCtrlHandlerSetter@NConsoleClose@@6B@ ; const NConsoleClose::CCtrlHandlerSetter::`RTTI Complete Object Locator'
.rdata:00000160                 public ??_7CCtrlHandlerSetter@NConsoleClose@@6B@
.rdata:00000160 ; const NConsoleClose::CCtrlHandlerSetter::`vftable'
.rdata:00000160 ??_7CCtrlHandlerSetter@NConsoleClose@@6B@ dd offset ??_ECCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z
.rdata:00000160                                         ; DATA XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+1Bo
.rdata:00000160                                         ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+1Bo
.rdata:00000160 _rdata          ends                    ; NConsoleClose::CCtrlHandlerSetter::`vector deleting destructor'(uint)
.rdata:00000160
.rtc$TMZ:00000164 ; ===========================================================================
.rtc$TMZ:00000164
.rtc$TMZ:00000164 ; Segment type: Pure data
.rtc$TMZ:00000164 ; Segment permissions: Read
.rtc$TMZ:00000164 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000164                 assume cs:_rtc$TMZ
.rtc$TMZ:00000164                 ;org 164h
.rtc$TMZ:00000164 ; COMDAT (pick any)
.rtc$TMZ:00000164 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000164 _rtc$TMZ        ends
.rtc$TMZ:00000164
.rtc$IMZ:00000168 ; ===========================================================================
.rtc$IMZ:00000168
.rtc$IMZ:00000168 ; Segment type: Pure data
.rtc$IMZ:00000168 ; Segment permissions: Read
.rtc$IMZ:00000168 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000168                 assume cs:_rtc$IMZ
.rtc$IMZ:00000168                 ;org 168h
.rtc$IMZ:00000168 ; COMDAT (pick any)
.rtc$IMZ:00000168 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000168 _rtc$IMZ        ends
.rtc$IMZ:00000168
.rdata$r:0000016C ; ===========================================================================
.rdata$r:0000016C
.rdata$r:0000016C ; Segment type: Pure data
.rdata$r:0000016C ; Segment permissions: Read
.rdata$r:0000016C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000016C                 assume cs:_rdata$r
.rdata$r:0000016C                 ;org 16Ch
.rdata$r:0000016C ; COMDAT (pick any)
.rdata$r:0000016C                 public ??_R4CCtrlHandlerSetter@NConsoleClose@@6B@
.rdata$r:0000016C ; const NConsoleClose::CCtrlHandlerSetter::`RTTI Complete Object Locator'
.rdata$r:0000016C ??_R4CCtrlHandlerSetter@NConsoleClose@@6B@ db    0
.rdata$r:0000016C                                         ; DATA XREF: .rdata:0000015Co
.rdata$r:0000016D                 db    0
.rdata$r:0000016E                 db    0
.rdata$r:0000016F                 db    0
.rdata$r:00000170                 db    0
.rdata$r:00000171                 db    0
.rdata$r:00000172                 db    0
.rdata$r:00000173                 db    0
.rdata$r:00000174                 db    0
.rdata$r:00000175                 db    0
.rdata$r:00000176                 db    0
.rdata$r:00000177                 db    0
.rdata$r:00000178                 dd offset ??_R0?AVCCtrlHandlerSetter@NConsoleClose@@@8 ; NConsoleClose::CCtrlHandlerSetter `RTTI Type Descriptor'
.rdata$r:0000017C                 dd offset ??_R3CCtrlHandlerSetter@NConsoleClose@@8 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000017C _rdata$r        ends
.rdata$r:0000017C
.data:00000180 ; ===========================================================================
.data:00000180
.data:00000180 ; Segment type: Pure data
.data:00000180 ; Segment permissions: Read/Write
.data:00000180 _data           segment dword public 'DATA' use32
.data:00000180                 assume cs:_data
.data:00000180                 ;org 180h
.data:00000180 ; COMDAT (pick any)
.data:00000180                 public ??_R0?AVCCtrlHandlerSetter@NConsoleClose@@@8
.data:00000180 ; class NConsoleClose::CCtrlHandlerSetter `RTTI Type Descriptor'
.data:00000180 ??_R0?AVCCtrlHandlerSetter@NConsoleClose@@@8 dd offset ??_7type_info@@6B@
.data:00000180                                         ; DATA XREF: .rdata$r:00000178o
.data:00000180                                         ; .rdata$r:NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000180                                         ; const type_info::`vftable'
.data:00000184                 align 8
.data:00000188 a_?avcctrlhandl db '.?AVCCtrlHandlerSetter@NConsoleClose@@',0
.data:000001AF                 align 10h
.data:000001AF _data           ends
.data:000001AF
.rdata$r:000001B0 ; ===========================================================================
.rdata$r:000001B0
.rdata$r:000001B0 ; Segment type: Pure data
.rdata$r:000001B0 ; Segment permissions: Read
.rdata$r:000001B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001B0                 assume cs:_rdata$r
.rdata$r:000001B0                 ;org 1B0h
.rdata$r:000001B0 ; COMDAT (pick any)
.rdata$r:000001B0                 public ??_R3CCtrlHandlerSetter@NConsoleClose@@8
.rdata$r:000001B0 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000001B0 ??_R3CCtrlHandlerSetter@NConsoleClose@@8 db    0
.rdata$r:000001B0                                         ; DATA XREF: .rdata$r:0000017Co
.rdata$r:000001B0                                         ; .rdata$r:000001E0o
.rdata$r:000001B1                 db    0
.rdata$r:000001B2                 db    0
.rdata$r:000001B3                 db    0
.rdata$r:000001B4                 db    0
.rdata$r:000001B5                 db    0
.rdata$r:000001B6                 db    0
.rdata$r:000001B7                 db    0
.rdata$r:000001B8                 db    1
.rdata$r:000001B9                 db    0
.rdata$r:000001BA                 db    0
.rdata$r:000001BB                 db    0
.rdata$r:000001BC                 dd offset ??_R2CCtrlHandlerSetter@NConsoleClose@@8 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Array'
.rdata$r:000001BC _rdata$r        ends
.rdata$r:000001BC
.rdata$r:000001C0 ; ===========================================================================
.rdata$r:000001C0
.rdata$r:000001C0 ; Segment type: Pure data
.rdata$r:000001C0 ; Segment permissions: Read
.rdata$r:000001C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001C0                 assume cs:_rdata$r
.rdata$r:000001C0                 ;org 1C0h
.rdata$r:000001C0 ; COMDAT (pick any)
.rdata$r:000001C0                 public ??_R2CCtrlHandlerSetter@NConsoleClose@@8
.rdata$r:000001C0 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Array'
.rdata$r:000001C0 ??_R2CCtrlHandlerSetter@NConsoleClose@@8 dd offset ??_R1A@?0A@EA@CCtrlHandlerSetter@NConsoleClose@@8
.rdata$r:000001C0                                         ; DATA XREF: .rdata$r:000001BCo
.rdata$r:000001C0                                         ; NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000001C4                 db    0
.rdata$r:000001C5                 align 4
.rdata$r:000001C5 _rdata$r        ends
.rdata$r:000001C5
.rdata$r:000001C8 ; ===========================================================================
.rdata$r:000001C8
.rdata$r:000001C8 ; Segment type: Pure data
.rdata$r:000001C8 ; Segment permissions: Read
.rdata$r:000001C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001C8                 assume cs:_rdata$r
.rdata$r:000001C8                 ;org 1C8h
.rdata$r:000001C8 ; COMDAT (pick any)
.rdata$r:000001C8                 public ??_R1A@?0A@EA@CCtrlHandlerSetter@NConsoleClose@@8
.rdata$r:000001C8 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000001C8 ??_R1A@?0A@EA@CCtrlHandlerSetter@NConsoleClose@@8 dd offset ??_R0?AVCCtrlHandlerSetter@NConsoleClose@@@8
.rdata$r:000001C8                                         ; DATA XREF: .rdata$r:NConsoleClose::CCtrlHandlerSetter::`RTTI Base Class Array'o
.rdata$r:000001C8                                         ; NConsoleClose::CCtrlHandlerSetter `RTTI Type Descriptor'
.rdata$r:000001CC                 db    0
.rdata$r:000001CD                 db    0
.rdata$r:000001CE                 db    0
.rdata$r:000001CF                 db    0
.rdata$r:000001D0                 db    0
.rdata$r:000001D1                 db    0
.rdata$r:000001D2                 db    0
.rdata$r:000001D3                 db    0
.rdata$r:000001D4                 db 0FFh
.rdata$r:000001D5                 db 0FFh
.rdata$r:000001D6                 db 0FFh
.rdata$r:000001D7                 db 0FFh
.rdata$r:000001D8                 db    0
.rdata$r:000001D9                 db    0
.rdata$r:000001DA                 db    0
.rdata$r:000001DB                 db    0
.rdata$r:000001DC                 db  40h ; @
.rdata$r:000001DD                 db    0
.rdata$r:000001DE                 db    0
.rdata$r:000001DF                 db    0
.rdata$r:000001E0                 dd offset ??_R3CCtrlHandlerSetter@NConsoleClose@@8 ; NConsoleClose::CCtrlHandlerSetter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000001E0 _rdata$r        ends
.rdata$r:000001E0
.xdata$x:000001E4 ; ===========================================================================
.xdata$x:000001E4
.xdata$x:000001E4 ; Segment type: Pure data
.xdata$x:000001E4 ; Segment permissions: Read
.xdata$x:000001E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001E4                 assume cs:_xdata$x
.xdata$x:000001E4                 ;org 1E4h
.xdata$x:000001E4 ; COMDAT (pick any)
.xdata$x:000001E4                 public __CTA2PAD
.xdata$x:000001E4 __CTA2PAD       db    2                 ; DATA XREF: .xdata$x:00000158o
.xdata$x:000001E5                 db    0
.xdata$x:000001E6                 db    0
.xdata$x:000001E7                 db    0
.xdata$x:000001E8                 dd offset __CT??_R0PAD@84
.xdata$x:000001EC                 dd offset __CT??_R0PAX@84
.xdata$x:000001EC _xdata$x        ends
.xdata$x:000001EC
.xdata$x:000001F0 ; ===========================================================================
.xdata$x:000001F0
.xdata$x:000001F0 ; Segment type: Pure data
.xdata$x:000001F0 ; Segment permissions: Read
.xdata$x:000001F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001F0                 assume cs:_xdata$x
.xdata$x:000001F0                 ;org 1F0h
.xdata$x:000001F0 ; COMDAT (pick any)
.xdata$x:000001F0                 public __CT??_R0PAD@84
.xdata$x:000001F0 __CT??_R0PAD@84 db    1                 ; DATA XREF: .xdata$x:000001E8o
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 dd offset ??_R0PAD@8    ; char * `RTTI Type Descriptor'
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db 0FFh
.xdata$x:000001FD                 db 0FFh
.xdata$x:000001FE                 db 0FFh
.xdata$x:000001FF                 db 0FFh
.xdata$x:00000200                 db    0
.xdata$x:00000201                 db    0
.xdata$x:00000202                 db    0
.xdata$x:00000203                 db    0
.xdata$x:00000204                 db    4
.xdata$x:00000205                 db    0
.xdata$x:00000206                 db    0
.xdata$x:00000207                 db    0
.xdata$x:00000208                 db    0
.xdata$x:00000209                 db    0
.xdata$x:0000020A                 db    0
.xdata$x:0000020B                 db    0
.xdata$x:0000020B _xdata$x        ends
.xdata$x:0000020B
.data:0000020C ; ===========================================================================
.data:0000020C
.data:0000020C ; Segment type: Pure data
.data:0000020C ; Segment permissions: Read/Write
.data:0000020C _data           segment dword public 'DATA' use32
.data:0000020C                 assume cs:_data
.data:0000020C                 ;org 20Ch
.data:0000020C ; COMDAT (pick any)
.data:0000020C                 public ??_R0PAD@8
.data:0000020C ; char * `RTTI Type Descriptor'
.data:0000020C ??_R0PAD@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:000001F4o
.data:0000020C                                         ; const type_info::`vftable'
.data:00000210                 db    0
.data:00000211                 db    0
.data:00000212                 db    0
.data:00000213                 db    0
.data:00000214                 db  2Eh ; .
.data:00000215                 db  50h ; P
.data:00000216                 db  41h ; A
.data:00000217                 db  44h ; D
.data:00000218                 db    0
.data:00000219                 align 4
.data:00000219 _data           ends
.data:00000219
.xdata$x:0000021C ; ===========================================================================
.xdata$x:0000021C
.xdata$x:0000021C ; Segment type: Pure data
.xdata$x:0000021C ; Segment permissions: Read
.xdata$x:0000021C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000021C                 assume cs:_xdata$x
.xdata$x:0000021C                 ;org 21Ch
.xdata$x:0000021C ; COMDAT (pick any)
.xdata$x:0000021C                 public __CT??_R0PAX@84
.xdata$x:0000021C __CT??_R0PAX@84 db    1                 ; DATA XREF: .xdata$x:000001ECo
.xdata$x:0000021D                 db    0
.xdata$x:0000021E                 db    0
.xdata$x:0000021F                 db    0
.xdata$x:00000220                 dd offset ??_R0PAX@8    ; void * `RTTI Type Descriptor'
.xdata$x:00000224                 align 8
.xdata$x:00000228                 db 0FFh
.xdata$x:00000229                 db 0FFh
.xdata$x:0000022A                 db 0FFh
.xdata$x:0000022B                 db 0FFh
.xdata$x:0000022C                 db    0
.xdata$x:0000022D                 db    0
.xdata$x:0000022E                 db    0
.xdata$x:0000022F                 db    0
.xdata$x:00000230                 db    4
.xdata$x:00000231                 db    0
.xdata$x:00000232                 db    0
.xdata$x:00000233                 db    0
.xdata$x:00000234                 db    0
.xdata$x:00000235                 db    0
.xdata$x:00000236                 db    0
.xdata$x:00000237                 db    0
.xdata$x:00000237 _xdata$x        ends
.xdata$x:00000237
.data:00000238 ; ===========================================================================
.data:00000238
.data:00000238 ; Segment type: Pure data
.data:00000238 ; Segment permissions: Read/Write
.data:00000238 _data           segment dword public 'DATA' use32
.data:00000238                 assume cs:_data
.data:00000238                 ;org 238h
.data:00000238 ; COMDAT (pick any)
.data:00000238                 public ??_R0PAX@8
.data:00000238 ; void * `RTTI Type Descriptor'
.data:00000238 ??_R0PAX@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000220o
.data:00000238                                         ; const type_info::`vftable'
.data:0000023C                 align 10h
.data:00000240 a_pax           db '.PAX',0
.data:00000245                 align 4
.data:00000245 _data           ends
.data:00000245
.text:00000248 ; ===========================================================================
.text:00000248
.text:00000248 ; Segment type: Pure code
.text:00000248 ; Segment permissions: Read/Execute
.text:00000248 _text           segment para public 'CODE' use32
.text:00000248                 assume cs:_text
.text:00000248                 ;org 248h
.text:00000248 ; COMDAT (pick any)
.text:00000248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000248
.text:00000248 ; =============== S U B R O U T I N E =======================================
.text:00000248
.text:00000248 ; Attributes: bp-based frame
.text:00000248
.text:00000248 ; public: virtual void * __thiscall NConsoleClose::CCtrlHandlerSetter::`scalar deleting destructor'(unsigned int)
.text:00000248                 public ??_GCCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z
.text:00000248 ??_GCCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z proc near
.text:00000248
.text:00000248 var_4           = dword ptr -4
.text:00000248 arg_0           = dword ptr  8
.text:00000248
.text:00000248                 push    ebp
.text:00000249                 mov     ebp, esp
.text:0000024B                 push    ecx
.text:0000024C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000253                 mov     [ebp+var_4], ecx
.text:00000256                 mov     ecx, [ebp+var_4] ; this
.text:00000259                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:0000025E                 mov     eax, [ebp+arg_0]
.text:00000261                 and     eax, 1
.text:00000264                 jz      short loc_272
.text:00000266                 mov     ecx, [ebp+var_4]
.text:00000269                 push    ecx             ; void *
.text:0000026A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000026F                 add     esp, 4
.text:00000272
.text:00000272 loc_272:                                ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::`scalar deleting destructor'(uint)+1Cj
.text:00000272                 mov     eax, [ebp+var_4]
.text:00000275                 add     esp, 4
.text:00000278                 cmp     ebp, esp
.text:0000027A                 call    __RTC_CheckEsp
.text:0000027F                 mov     esp, ebp
.text:00000281                 pop     ebp
.text:00000282                 retn    4
.text:00000282 ??_GCCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z endp
.text:00000282
.text:00000282 _text           ends
.text:00000282
UNDEF:00000290 ; ===========================================================================
UNDEF:00000290
UNDEF:00000290 ; Segment type: Externs
UNDEF:00000290 ; UNDEF
UNDEF:00000290 ; BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add)
UNDEF:00000290                 extrn __imp__SetConsoleCtrlHandler@8:near
UNDEF:00000290                                         ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+2Ap
UNDEF:00000290                                         ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+2Ap
UNDEF:00000290                                         ; DATA XREF: ...
UNDEF:00000294                 extrn __RTC_CheckEsp:near
UNDEF:00000294                                         ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+32p
UNDEF:00000294                                         ; NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+59p ...
UNDEF:00000298                 extrn __RTC_Shutdown:near
UNDEF:00000298                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000029C                 extrn __RTC_InitBase:near
UNDEF:0000029C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002A0 ; __stdcall _CxxThrowException(x, x)
UNDEF:000002A0                 extrn __CxxThrowException@8:near
UNDEF:000002A0                                         ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)+4Bp
UNDEF:000002A0                                         ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)+4Bp
UNDEF:000002A4 ; const type_info::`vftable'
UNDEF:000002A4                 extrn ??_7type_info@@6B@:near
UNDEF:000002A4                                         ; DATA XREF: .data:NConsoleClose::CCtrlHandlerSetter `RTTI Type Descriptor'o
UNDEF:000002A4                                         ; .data:char * `RTTI Type Descriptor'o ...
UNDEF:000002A8 ; public: virtual void * __thiscall NConsoleClose::CCtrlHandlerSetter::`scalar deleting destructor'(unsigned int)
UNDEF:000002A8                 extrn ??_GCCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z_0:near
UNDEF:000002AC ; public: virtual void * __thiscall NConsoleClose::CCtrlHandlerSetter::`vector deleting destructor'(unsigned int)
UNDEF:000002AC                 extrn ??_ECCtrlHandlerSetter@NConsoleClose@@UAEPAXI@Z:near ; weak
UNDEF:000002AC                                         ; DATA XREF: .rdata:const NConsoleClose::CCtrlHandlerSetter::`vftable'o
UNDEF:000002B0 ; void __cdecl operator delete(void *)
UNDEF:000002B0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NConsoleClose::CCtrlHandlerSetter::`scalar deleting destructor'(uint)+22p
UNDEF:000002B0
UNDEF:000002B0
UNDEF:000002B0                 end