.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : BE71903A7285A095BF879A578896A59A
.text:00000000 ; Input CRC32 : 666E1751
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipUpdate.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NArchive::NZip::CThreadInfo::WaitAndCode(NArchive::NZip::CThreadInfo *__hidden this)
.text:00000000                 public ?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ
.text:00000000 ?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ proc near
.text:00000000                                         ; CODE XREF: NArchive::NZip::CoderThread(void *)+6p
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_4], ecx
.text:00000018
.text:00000018 loc_18:                                 ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+E7j
.text:00000018                 mov     ecx, [ebp+var_4]
.text:0000001B                 add     ecx, 4          ; this
.text:0000001E                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00000023                 mov     eax, [ebp+var_4]
.text:00000026                 movzx   ecx, byte ptr [eax+0Ch]
.text:0000002A                 test    ecx, ecx
.text:0000002C                 jz      short loc_33
.text:0000002E                 jmp     loc_EC
.text:00000033 ; ---------------------------------------------------------------------------
.text:00000033
.text:00000033 loc_33:                                 ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+2Cj
.text:00000033                 mov     edx, [ebp+var_4]
.text:00000036                 add     edx, 0A0h ; 'á'
.text:0000003C                 push    edx             ; struct NArchive::NZip::CCompressingResult *
.text:0000003D                 mov     ecx, [ebp+var_4]
.text:00000040                 add     ecx, 14h
.text:00000043                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000048
.text:00000048 loc_48:                                 ; DATA XREF: .text:00003838o
.text:00000048                 push    eax             ; struct ICompressProgressInfo *
.text:00000049                 mov     eax, [ebp+var_4]
.text:0000004C                 mov     ecx, [eax+0C0h]
.text:00000052                 push    ecx             ; unsigned int
.text:00000053                 mov     ecx, [ebp+var_4]
.text:00000056                 add     ecx, 1Ch
.text:00000059                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:0000005E                 push    eax             ; struct IOutStream *
.text:0000005F                 mov     ecx, [ebp+var_4]
.text:00000062                 add     ecx, 20h ; ' '
.text:00000065
.text:00000065 loc_65:                                 ; DATA XREF: .text:00004C28o
.text:00000065                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000006A                 push    eax             ; struct ISequentialInStream *
.text:0000006B                 mov     ecx, [ebp+var_4]
.text:0000006E                 add     ecx, 28h ; '('  ; this
.text:00000071                 call    ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)
.text:00000076                 mov     edx, [ebp+var_4]
.text:00000079                 mov     [edx+98h], eax
.text:0000007F                 mov     eax, [ebp+var_4]
.text:00000082                 cmp     dword ptr [eax+98h], 0
.text:00000089                 jnz     short loc_DC
.text:0000008B                 mov     ecx, [ebp+var_4]
.text:0000008E                 add     ecx, 14h
.text:00000091                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000096                 test    eax, eax
.text:00000098                 jz      short loc_DC
.text:0000009A                 mov     ecx, [ebp+var_4]
.text:0000009D                 add     ecx, 14h
.text:000000A0                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:000000A5                 mov     [ebp+var_8], eax
.text:000000A8                 mov     ecx, [ebp+var_4]
.text:000000AB                 add     ecx, 0A8h ; '¿'
.text:000000B1                 mov     esi, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     edx, [ebp+var_4]
.text:000000B7                 add     edx, 0A0h ; 'á'
.text:000000BD                 push    edx
.text:000000BE                 mov     eax, [ebp+var_8]
.text:000000C1                 push    eax
.text:000000C2                 mov     ecx, [ebp+var_8]
.text:000000C5                 mov     edx, [ecx]
.text:000000C7                 mov     eax, [edx+0Ch]
.text:000000CA                 call    eax
.text:000000CC                 cmp     esi, esp
.text:000000CE                 call    __RTC_CheckEsp
.text:000000D3                 mov     ecx, [ebp+var_4]
.text:000000D6                 mov     [ecx+98h], eax
.text:000000DC
.text:000000DC loc_DC:                                 ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+89j
.text:000000DC                                         ; NArchive::NZip::CThreadInfo::WaitAndCode(void)+98j
.text:000000DC                 mov     ecx, [ebp+var_4]
.text:000000DF                 add     ecx, 8          ; this
.text:000000E2                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000000E7                 jmp     loc_18
.text:000000EC ; ---------------------------------------------------------------------------
.text:000000EC
.text:000000EC loc_EC:                                 ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+2Ej
.text:000000EC                 pop     esi
.text:000000ED                 add     esp, 8
.text:000000F0                 cmp     ebp, esp
.text:000000F2                 call    __RTC_CheckEsp
.text:000000F7                 mov     esp, ebp
.text:000000F9                 pop     ebp
.text:000000FA                 retn
.text:000000FA ?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ endp
.text:000000FA
.text:000000FA ; ---------------------------------------------------------------------------
.text:000000FB                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; void __thiscall NArchive::NZip::CMtProgressMixer2::Create(NArchive::NZip::CMtProgressMixer2 *this, struct IProgress *, bool)
.text:00000100                 public ?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
.text:00000100 ?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z proc near
.text:00000100                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+9Ep
.text:00000100
.text:00000100 var_4           = dword ptr -4
.text:00000100 arg_0           = dword ptr  8
.text:00000100 arg_4           = byte ptr  0Ch
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 push    ecx
.text:00000104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010B                 mov     [ebp+var_4], ecx
.text:0000010E                 mov     eax, [ebp+arg_0]
.text:00000111                 push    eax
.text:00000112                 mov     ecx, [ebp+var_4]
.text:00000115                 add     ecx, 30h ; '0'
.text:00000118                 call    ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z ; CMyComPtr<IProgress>::operator=(IProgress *)
.text:0000011D                 mov     ecx, [ebp+var_4]
.text:00000120                 add     ecx, 34h ; '4'
.text:00000123                 call    ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&(void)
.text:00000128                 push    eax
.text:00000129                 push    offset _IID_ICompressProgressInfo
.text:0000012E                 mov     ecx, [ebp+var_4]
.text:00000131                 add     ecx, 30h ; '0'
.text:00000134                 call    ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>(_GUID const &,ICompressProgressInfo * *)
.text:00000139                 mov     ecx, [ebp+var_4]
.text:0000013C                 mov     dl, [ebp+arg_4]
.text:0000013F                 mov     [ecx+38h], dl
.text:00000142                 mov     eax, [ebp+var_4]
.text:00000145                 mov     dword ptr [eax+28h], 0
.text:0000014C                 mov     dword ptr [eax+2Ch], 0
.text:00000153                 mov     ecx, [ebp+var_4]
.text:00000156                 mov     dword ptr [ecx+20h], 0
.text:0000015D                 mov     dword ptr [ecx+24h], 0
.text:00000164                 mov     edx, [ebp+var_4]
.text:00000167                 mov     dword ptr [edx+18h], 0
.text:0000016E                 mov     dword ptr [edx+1Ch], 0
.text:00000175                 mov     eax, [ebp+var_4]
.text:00000178                 mov     dword ptr [eax+10h], 0
.text:0000017F                 mov     dword ptr [eax+14h], 0
.text:00000186                 mov     ecx, [ebp+var_4]
.text:00000189                 mov     dword ptr [ecx+8], 0
.text:00000190                 mov     dword ptr [ecx+0Ch], 0
.text:00000197                 add     esp, 4
.text:0000019A                 cmp     ebp, esp
.text:0000019C                 call    __RTC_CheckEsp
.text:000001A1                 mov     esp, ebp
.text:000001A3                 pop     ebp
.text:000001A4                 retn    8
.text:000001A4 ?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z endp
.text:000001A4
.text:000001A4 ; ---------------------------------------------------------------------------
.text:000001A7                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; void __thiscall NArchive::NZip::CMtProgressMixer2::SetProgressOffset(NArchive::NZip::CMtProgressMixer2 *this, unsigned __int64)
.text:000001B0                 public ?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z
.text:000001B0 ?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z proc near
.text:000001B0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+F43p
.text:000001B0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2045p
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = qword ptr  8
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_4], ecx
.text:000001BE                 mov     ecx, [ebp+var_4]
.text:000001C1                 add     ecx, 3Ch ; '<'  ; this
.text:000001C4                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:000001C9                 mov     eax, [ebp+var_4]
.text:000001CC                 mov     dword ptr [eax+28h], 0
.text:000001D3                 mov     dword ptr [eax+2Ch], 0
.text:000001DA                 mov     ecx, [ebp+var_4]
.text:000001DD                 mov     dword ptr [ecx+18h], 0
.text:000001E4                 mov     dword ptr [ecx+1Ch], 0
.text:000001EB                 mov     edx, [ebp+var_4]
.text:000001EE                 mov     eax, dword ptr [ebp+arg_0]
.text:000001F1                 mov     [edx+8], eax
.text:000001F4                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:000001F7                 mov     [edx+0Ch], ecx
.text:000001FA                 mov     ecx, [ebp+var_4]
.text:000001FD                 add     ecx, 3Ch ; '<'  ; this
.text:00000200                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00000205                 add     esp, 4
.text:00000208                 cmp     ebp, esp
.text:0000020A                 call    __RTC_CheckEsp
.text:0000020F                 mov     esp, ebp
.text:00000211                 pop     ebp
.text:00000212                 retn    8
.text:00000212 ?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z endp
.text:00000212
.text:00000212 ; ---------------------------------------------------------------------------
.text:00000215                 align 10h
.text:00000220
.text:00000220 ; =============== S U B R O U T I N E =======================================
.text:00000220
.text:00000220 ; Attributes: bp-based frame
.text:00000220
.text:00000220 ; __int32 __thiscall NArchive::NZip::CMtProgressMixer2::SetRatioInfo(NArchive::NZip::CMtProgressMixer2 *this, unsigned int, const unsigned __int64 *, const unsigned __int64 *)
.text:00000220                 public ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
.text:00000220 ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z proc near
.text:00000220                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+10p
.text:00000220                                         ; NArchive::NZip::CMtProgressMixer::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+13p
.text:00000220
.text:00000220 var_48          = dword ptr -48h
.text:00000220 var_44          = dword ptr -44h
.text:00000220 var_40          = dword ptr -40h
.text:00000220 var_3C          = dword ptr -3Ch
.text:00000220 var_38          = dword ptr -38h
.text:00000220 var_34          = dword ptr -34h
.text:00000220 var_2C          = dword ptr -2Ch
.text:00000220 var_28          = dword ptr -28h
.text:00000220 var_20          = dword ptr -20h
.text:00000220 var_18          = byte ptr -18h
.text:00000220 var_10          = dword ptr -10h
.text:00000220 var_C           = dword ptr -0Ch
.text:00000220 var_4           = dword ptr -4
.text:00000220 arg_0           = dword ptr  8
.text:00000220 arg_4           = dword ptr  0Ch
.text:00000220 arg_8           = dword ptr  10h
.text:00000220
.text:00000220                 push    ebp
.text:00000221                 mov     ebp, esp
.text:00000223                 push    0FFFFFFFFh
.text:00000225                 push    offset __ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
.text:0000022A                 mov     eax, large fs:0
.text:00000230                 push    eax
.text:00000231                 sub     esp, 3Ch
.text:00000234                 push    esi
.text:00000235                 push    edi
.text:00000236                 push    ecx
.text:00000237                 lea     edi, [ebp+var_48]
.text:0000023A                 mov     ecx, 0Fh
.text:0000023F                 mov     eax, 0CCCCCCCCh
.text:00000244                 rep stosd
.text:00000246                 pop     ecx
.text:00000247                 mov     eax, dword ptr ds:___security_cookie
.text:0000024C                 xor     eax, ebp
.text:0000024E                 push    eax
.text:0000024F                 lea     eax, [ebp+var_C]
.text:00000252                 mov     large fs:0, eax
.text:00000258                 mov     [ebp+var_10], ecx
.text:0000025B                 mov     eax, [ebp+var_10]
.text:0000025E                 add     eax, 3Ch ; '<'
.text:00000261                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000262                 lea     ecx, [ebp+var_18] ; this
.text:00000265                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:0000026A                 mov     [ebp+var_4], 0
.text:00000271                 cmp     [ebp+arg_0], 0
.text:00000275                 jnz     short loc_2D9
.text:00000277                 mov     ecx, [ebp+var_10]
.text:0000027A                 add     ecx, 34h ; '4'
.text:0000027D                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000282                 test    eax, eax
.text:00000284                 jz      short loc_2D9
.text:00000286                 mov     ecx, [ebp+var_10]
.text:00000289                 add     ecx, 34h ; '4'
.text:0000028C                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:00000291                 mov     [ebp+var_3C], eax
.text:00000294                 mov     esi, esp
.text:00000296                 mov     ecx, [ebp+arg_8]
.text:00000299                 push    ecx
.text:0000029A                 mov     edx, [ebp+arg_4]
.text:0000029D                 push    edx
.text:0000029E                 mov     eax, [ebp+var_3C]
.text:000002A1                 push    eax
.text:000002A2                 mov     ecx, [ebp+var_3C]
.text:000002A5                 mov     edx, [ecx]
.text:000002A7                 mov     eax, [edx+0Ch]
.text:000002AA                 call    eax
.text:000002AC                 cmp     esi, esp
.text:000002AE                 call    __RTC_CheckEsp
.text:000002B3                 mov     [ebp+var_20], eax
.text:000002B6                 cmp     [ebp+var_20], 0
.text:000002BA                 jz      short loc_2D9
.text:000002BC                 mov     ecx, [ebp+var_20]
.text:000002BF                 mov     [ebp+var_34], ecx
.text:000002C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002C9                 lea     ecx, [ebp+var_18] ; this
.text:000002CC                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000002D1                 mov     eax, [ebp+var_34]
.text:000002D4                 jmp     loc_3A1
.text:000002D9 ; ---------------------------------------------------------------------------
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+55j
.text:000002D9                                         ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+64j ...
.text:000002D9                 cmp     [ebp+arg_4], 0
.text:000002DD                 jz      short loc_2F5
.text:000002DF                 mov     edx, [ebp+arg_0]
.text:000002E2                 mov     eax, [ebp+var_10]
.text:000002E5                 mov     ecx, [ebp+arg_4]
.text:000002E8                 mov     esi, [ecx]
.text:000002EA                 mov     [eax+edx*8+10h], esi
.text:000002EE                 mov     ecx, [ecx+4]
.text:000002F1                 mov     [eax+edx*8+14h], ecx
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+BDj
.text:000002F5                 cmp     [ebp+arg_8], 0
.text:000002F9                 jz      short loc_311
.text:000002FB                 mov     edx, [ebp+arg_0]
.text:000002FE                 mov     eax, [ebp+var_10]
.text:00000301                 mov     ecx, [ebp+arg_8]
.text:00000304                 mov     esi, [ecx]
.text:00000306                 mov     [eax+edx*8+20h], esi
.text:0000030A                 mov     ecx, [ecx+4]
.text:0000030D                 mov     [eax+edx*8+24h], ecx
.text:00000311
.text:00000311 loc_311:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+D9j
.text:00000311                 mov     edx, [ebp+var_10]
.text:00000314                 movzx   eax, byte ptr [edx+38h]
.text:00000318                 test    eax, eax
.text:0000031A                 jz      short loc_336
.text:0000031C                 mov     ecx, [ebp+var_10]
.text:0000031F                 mov     edx, [ebp+var_10]
.text:00000322                 mov     eax, [ecx+10h]
.text:00000325                 add     eax, [edx+18h]
.text:00000328                 mov     ecx, [ecx+14h]
.text:0000032B                 adc     ecx, [edx+1Ch]
.text:0000032E                 mov     [ebp+var_44], eax
.text:00000331                 mov     [ebp+var_40], ecx
.text:00000334                 jmp     short loc_34E
.text:00000336 ; ---------------------------------------------------------------------------
.text:00000336
.text:00000336 loc_336:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+FAj
.text:00000336                 mov     edx, [ebp+var_10]
.text:00000339                 mov     eax, [ebp+var_10]
.text:0000033C                 mov     ecx, [edx+20h]
.text:0000033F                 add     ecx, [eax+28h]
.text:00000342                 mov     edx, [edx+24h]
.text:00000345                 adc     edx, [eax+2Ch]
.text:00000348                 mov     [ebp+var_44], ecx
.text:0000034B                 mov     [ebp+var_40], edx
.text:0000034E
.text:0000034E loc_34E:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+114j
.text:0000034E                 mov     eax, [ebp+var_10]
.text:00000351                 mov     ecx, [eax+8]
.text:00000354                 add     ecx, [ebp+var_44]
.text:00000357                 mov     edx, [eax+0Ch]
.text:0000035A                 adc     edx, [ebp+var_40]
.text:0000035D                 mov     [ebp+var_2C], ecx
.text:00000360                 mov     [ebp+var_28], edx
.text:00000363                 mov     ecx, [ebp+var_10]
.text:00000366                 add     ecx, 30h ; '0'
.text:00000369                 call    ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ ; CMyComPtr<IProgress>::operator->(void)
.text:0000036E                 mov     [ebp+var_48], eax
.text:00000371                 mov     esi, esp
.text:00000373                 lea     eax, [ebp+var_2C]
.text:00000376                 push    eax
.text:00000377                 mov     ecx, [ebp+var_48]
.text:0000037A                 push    ecx
.text:0000037B                 mov     edx, [ebp+var_48]
.text:0000037E                 mov     eax, [edx]
.text:00000380                 mov     ecx, [eax+10h]
.text:00000383                 call    ecx
.text:00000385                 cmp     esi, esp
.text:00000387                 call    __RTC_CheckEsp
.text:0000038C                 mov     [ebp+var_38], eax
.text:0000038F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000396                 lea     ecx, [ebp+var_18] ; this
.text:00000399                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000039E                 mov     eax, [ebp+var_38]
.text:000003A1
.text:000003A1 loc_3A1:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+B4j
.text:000003A1                 push    edx
.text:000003A2                 mov     ecx, ebp
.text:000003A4                 push    eax
.text:000003A5                 lea     edx, $LN14
.text:000003AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003B0                 pop     eax
.text:000003B1                 pop     edx
.text:000003B2                 mov     ecx, [ebp+var_C]
.text:000003B5                 mov     large fs:0, ecx
.text:000003BC                 pop     ecx
.text:000003BD                 pop     edi
.text:000003BE                 pop     esi
.text:000003BF                 add     esp, 48h
.text:000003C2                 cmp     ebp, esp
.text:000003C4                 call    __RTC_CheckEsp
.text:000003C9                 mov     esp, ebp
.text:000003CB                 pop     ebp
.text:000003CC                 retn    0Ch
.text:000003CC ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z endp
.text:000003CC
.text:000003CC ; ---------------------------------------------------------------------------
.text:000003CF                 align 10h
.text:000003D0 $LN14           dd 2                    ; DATA XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+185o
.text:000003D4                 dd offset $LN13
.text:000003D8 $LN13           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000003D4o
.text:000003E0                 dd offset $LN10         ; "lock"
.text:000003E4                 dd 0FFFFFFD4h, 8
.text:000003EC                 dd offset $LN11
.text:000003F0 $LN11           db 76h, 0               ; DATA XREF: .text:000003ECo
.text:000003F2 $LN10           db 'lock',0             ; DATA XREF: .text:000003E0o
.text:000003F7                 align 10h
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; __int32 __stdcall NArchive::NZip::CMtProgressMixer2::SetRatioInfo(NArchive::NZip::CMtProgressMixer2 *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00000400                 public ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z
.text:00000400 ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z proc near
.text:00000400                                         ; DATA XREF: .rdata:00005414o
.text:00000400
.text:00000400 this            = dword ptr  8
.text:00000400 arg_4           = dword ptr  0Ch
.text:00000400 arg_8           = dword ptr  10h
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 mov     eax, [ebp+arg_8]
.text:00000406                 push    eax             ; unsigned __int64 *
.text:00000407                 mov     ecx, [ebp+arg_4]
.text:0000040A                 push    ecx             ; unsigned __int64 *
.text:0000040B                 push    0               ; unsigned int
.text:0000040D                 mov     ecx, [ebp+this] ; this
.text:00000410                 call    ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)
.text:00000415                 cmp     ebp, esp
.text:00000417                 call    __RTC_CheckEsp
.text:0000041C                 pop     ebp
.text:0000041D                 retn    0Ch
.text:0000041D ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z endp
.text:0000041D
.text:00000420
.text:00000420 ; =============== S U B R O U T I N E =======================================
.text:00000420
.text:00000420 ; Attributes: bp-based frame
.text:00000420
.text:00000420 ; void __thiscall NArchive::NZip::CMtProgressMixer::Create(NArchive::NZip::CMtProgressMixer *this, struct IProgress *, bool)
.text:00000420                 public ?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
.text:00000420 ?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z proc near
.text:00000420                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+605p
.text:00000420
.text:00000420 var_1C          = dword ptr -1Ch
.text:00000420 var_18          = dword ptr -18h
.text:00000420 var_14          = dword ptr -14h
.text:00000420 var_10          = dword ptr -10h
.text:00000420 var_C           = dword ptr -0Ch
.text:00000420 var_4           = dword ptr -4
.text:00000420 arg_0           = dword ptr  8
.text:00000420 arg_4           = byte ptr  0Ch
.text:00000420
.text:00000420                 push    ebp
.text:00000421                 mov     ebp, esp
.text:00000423                 push    0FFFFFFFFh
.text:00000425                 push    offset __ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
.text:0000042A                 mov     eax, large fs:0
.text:00000430                 push    eax
.text:00000431                 sub     esp, 10h
.text:00000434                 mov     eax, 0CCCCCCCCh
.text:00000439                 mov     [ebp+var_1C], eax
.text:0000043C                 mov     [ebp+var_18], eax
.text:0000043F                 mov     [ebp+var_14], eax
.text:00000442                 mov     [ebp+var_10], eax
.text:00000445                 mov     eax, dword ptr ds:___security_cookie
.text:0000044A                 xor     eax, ebp
.text:0000044C                 push    eax
.text:0000044D                 lea     eax, [ebp+var_C]
.text:00000450                 mov     large fs:0, eax
.text:00000456                 mov     [ebp+var_10], ecx
.text:00000459                 push    58h ; 'X'       ; unsigned int
.text:0000045B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000460                 add     esp, 4
.text:00000463                 mov     [ebp+var_18], eax
.text:00000466                 mov     [ebp+var_4], 0
.text:0000046D                 cmp     [ebp+var_18], 0
.text:00000471                 jz      short loc_480
.text:00000473                 mov     ecx, [ebp+var_18] ; this
.text:00000476                 call    ??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)
.text:0000047B                 mov     [ebp+var_1C], eax
.text:0000047E                 jmp     short loc_487
.text:00000480 ; ---------------------------------------------------------------------------
.text:00000480
.text:00000480 loc_480:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+51j
.text:00000480                 mov     [ebp+var_1C], 0
.text:00000487
.text:00000487 loc_487:                                ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+5Ej
.text:00000487                 mov     eax, [ebp+var_1C]
.text:0000048A                 mov     [ebp+var_14], eax
.text:0000048D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000494                 mov     ecx, [ebp+var_10]
.text:00000497                 mov     edx, [ebp+var_14]
.text:0000049A                 mov     [ecx+8], edx
.text:0000049D                 mov     eax, [ebp+var_10]
.text:000004A0                 mov     ecx, [eax+8]
.text:000004A3                 push    ecx
.text:000004A4                 mov     ecx, [ebp+var_10]
.text:000004A7                 add     ecx, 0Ch
.text:000004AA                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:000004AF                 movzx   edx, [ebp+arg_4]
.text:000004B3                 push    edx             ; bool
.text:000004B4                 mov     eax, [ebp+arg_0]
.text:000004B7                 push    eax             ; struct IProgress *
.text:000004B8                 mov     ecx, [ebp+var_10]
.text:000004BB                 mov     ecx, [ecx+8]    ; this
.text:000004BE                 call    ?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer2::Create(IProgress *,bool)
.text:000004C3                 mov     ecx, [ebp+var_C]
.text:000004C6                 mov     large fs:0, ecx
.text:000004CD                 pop     ecx
.text:000004CE                 add     esp, 1Ch
.text:000004D1                 cmp     ebp, esp
.text:000004D3                 call    __RTC_CheckEsp
.text:000004D8                 mov     esp, ebp
.text:000004DA                 pop     ebp
.text:000004DB                 retn    8
.text:000004DB ?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z endp
.text:000004DB
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DE                 align 10h
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 ; __int32 __stdcall NArchive::NZip::CMtProgressMixer::SetRatioInfo(NArchive::NZip::CMtProgressMixer *this, const unsigned __int64 *, const unsigned __int64 *)
.text:000004E0                 public ?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z
.text:000004E0 ?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z proc near
.text:000004E0                                         ; DATA XREF: .rdata:000080C8o
.text:000004E0
.text:000004E0 this            = dword ptr  8
.text:000004E0 arg_4           = dword ptr  0Ch
.text:000004E0 arg_8           = dword ptr  10h
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 mov     eax, [ebp+arg_8]
.text:000004E6                 push    eax             ; unsigned __int64 *
.text:000004E7                 mov     ecx, [ebp+arg_4]
.text:000004EA                 push    ecx             ; unsigned __int64 *
.text:000004EB                 push    1               ; unsigned int
.text:000004ED                 mov     edx, [ebp+this]
.text:000004F0                 mov     ecx, [edx+8]    ; this
.text:000004F3                 call    ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)
.text:000004F8                 cmp     ebp, esp
.text:000004FA                 call    __RTC_CheckEsp
.text:000004FF                 pop     ebp
.text:00000500                 retn    0Ch
.text:00000500 ?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z endp
.text:00000500
.text:00000500 ; ---------------------------------------------------------------------------
.text:00000503                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; bool __thiscall NArchive::NZip::CCacheOutStream::Allocate(NArchive::NZip::CCacheOutStream *__hidden this)
.text:00000510                 public ?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ
.text:00000510 ?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ proc near
.text:00000510                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+24Fp
.text:00000510
.text:00000510 var_4           = dword ptr -4
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    ecx
.text:00000514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000051B                 mov     [ebp+var_4], ecx
.text:0000051E                 mov     eax, [ebp+var_4]
.text:00000521                 cmp     dword ptr [eax+0Ch], 0
.text:00000525                 jnz     short loc_537
.text:00000527                 push    400000h
.text:0000052C                 call    _MidAlloc@4     ; MidAlloc(x)
.text:00000531                 mov     ecx, [ebp+var_4]
.text:00000534                 mov     [ecx+0Ch], eax
.text:00000537
.text:00000537 loc_537:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Allocate(void)+15j
.text:00000537                 mov     edx, [ebp+var_4]
.text:0000053A                 xor     eax, eax
.text:0000053C                 cmp     dword ptr [edx+0Ch], 0
.text:00000540                 setnz   al
.text:00000543                 add     esp, 4
.text:00000546                 cmp     ebp, esp
.text:00000548                 call    __RTC_CheckEsp
.text:0000054D                 mov     esp, ebp
.text:0000054F                 pop     ebp
.text:00000550                 retn
.text:00000550 ?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ endp
.text:00000550
.text:00000550 ; ---------------------------------------------------------------------------
.text:00000551                 align 10h
.text:00000560
.text:00000560 ; =============== S U B R O U T I N E =======================================
.text:00000560
.text:00000560 ; Attributes: bp-based frame
.text:00000560
.text:00000560 ; __int32 __thiscall NArchive::NZip::CCacheOutStream::Init(NArchive::NZip::CCacheOutStream *this, struct IOutStream *)
.text:00000560                 public ?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z
.text:00000560 ?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z proc near
.text:00000560                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+297p
.text:00000560
.text:00000560 var_1C          = dword ptr -1Ch
.text:00000560 var_18          = dword ptr -18h
.text:00000560 var_14          = dword ptr -14h
.text:00000560 var_10          = dword ptr -10h
.text:00000560 var_C           = dword ptr -0Ch
.text:00000560 var_8           = dword ptr -8
.text:00000560 var_4           = dword ptr -4
.text:00000560 arg_0           = dword ptr  8
.text:00000560
.text:00000560                 push    ebp
.text:00000561                 mov     ebp, esp
.text:00000563                 sub     esp, 1Ch
.text:00000566                 push    esi
.text:00000567                 mov     eax, 0CCCCCCCCh
.text:0000056C                 mov     [ebp+var_1C], eax
.text:0000056F                 mov     [ebp+var_18], eax
.text:00000572                 mov     [ebp+var_14], eax
.text:00000575                 mov     [ebp+var_10], eax
.text:00000578                 mov     [ebp+var_C], eax
.text:0000057B                 mov     [ebp+var_8], eax
.text:0000057E                 mov     [ebp+var_4], eax
.text:00000581                 mov     [ebp+var_4], ecx
.text:00000584                 mov     eax, [ebp+var_4]
.text:00000587                 mov     dword ptr [eax+20h], 0
.text:0000058E                 mov     dword ptr [eax+24h], 0
.text:00000595                 mov     ecx, [ebp+var_4]
.text:00000598                 mov     dword ptr [ecx+10h], 0
.text:0000059F                 mov     dword ptr [ecx+14h], 0
.text:000005A6                 mov     edx, [ebp+arg_0]
.text:000005A9                 push    edx
.text:000005AA                 mov     ecx, [ebp+var_4]
.text:000005AD                 add     ecx, 8
.text:000005B0                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:000005B5                 mov     ecx, [ebp+var_4]
.text:000005B8                 add     ecx, 8
.text:000005BB                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:000005C0                 mov     [ebp+var_14], eax
.text:000005C3                 mov     eax, [ebp+var_4]
.text:000005C6                 add     eax, 10h
.text:000005C9                 mov     esi, esp
.text:000005CB                 push    eax
.text:000005CC                 push    1
.text:000005CE                 push    0
.text:000005D0                 push    0
.text:000005D2                 mov     ecx, [ebp+var_14]
.text:000005D5                 push    ecx
.text:000005D6                 mov     edx, [ebp+var_14]
.text:000005D9                 mov     eax, [edx]
.text:000005DB                 mov     ecx, [eax+10h]
.text:000005DE                 call    ecx
.text:000005E0                 cmp     esi, esp
.text:000005E2                 call    __RTC_CheckEsp
.text:000005E7                 mov     [ebp+var_8], eax
.text:000005EA                 cmp     [ebp+var_8], 0
.text:000005EE                 jz      short loc_5F8
.text:000005F0                 mov     eax, [ebp+var_8]
.text:000005F3                 jmp     loc_6C3
.text:000005F8 ; ---------------------------------------------------------------------------
.text:000005F8
.text:000005F8 loc_5F8:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+8Ej
.text:000005F8                 mov     ecx, [ebp+var_4]
.text:000005FB                 add     ecx, 8
.text:000005FE                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000603                 mov     [ebp+var_18], eax
.text:00000606                 mov     edx, [ebp+var_4]
.text:00000609                 add     edx, 18h
.text:0000060C                 mov     esi, esp
.text:0000060E                 push    edx
.text:0000060F                 push    2
.text:00000611                 push    0
.text:00000613                 push    0
.text:00000615                 mov     eax, [ebp+var_18]
.text:00000618                 push    eax
.text:00000619                 mov     ecx, [ebp+var_18]
.text:0000061C                 mov     edx, [ecx]
.text:0000061E                 mov     eax, [edx+10h]
.text:00000621                 call    eax
.text:00000623                 cmp     esi, esp
.text:00000625                 call    __RTC_CheckEsp
.text:0000062A                 mov     [ebp+var_C], eax
.text:0000062D                 cmp     [ebp+var_C], 0
.text:00000631                 jz      short loc_63B
.text:00000633                 mov     eax, [ebp+var_C]
.text:00000636                 jmp     loc_6C3
.text:0000063B ; ---------------------------------------------------------------------------
.text:0000063B
.text:0000063B loc_63B:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+D1j
.text:0000063B                 mov     ecx, [ebp+var_4]
.text:0000063E                 add     ecx, 8
.text:00000641                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000646                 mov     [ebp+var_1C], eax
.text:00000649                 mov     ecx, [ebp+var_4]
.text:0000064C                 add     ecx, 10h
.text:0000064F                 mov     esi, esp
.text:00000651                 push    ecx
.text:00000652                 push    0
.text:00000654                 mov     edx, [ebp+var_4]
.text:00000657                 mov     eax, [edx+14h]
.text:0000065A                 push    eax
.text:0000065B                 mov     ecx, [edx+10h]
.text:0000065E                 push    ecx
.text:0000065F                 mov     edx, [ebp+var_1C]
.text:00000662                 push    edx
.text:00000663                 mov     eax, [ebp+var_1C]
.text:00000666                 mov     ecx, [eax]
.text:00000668                 mov     edx, [ecx+10h]
.text:0000066B                 call    edx
.text:0000066D                 cmp     esi, esp
.text:0000066F                 call    __RTC_CheckEsp
.text:00000674                 mov     [ebp+var_10], eax
.text:00000677                 cmp     [ebp+var_10], 0
.text:0000067B                 jz      short loc_682
.text:0000067D                 mov     eax, [ebp+var_10]
.text:00000680                 jmp     short loc_6C3
.text:00000682 ; ---------------------------------------------------------------------------
.text:00000682
.text:00000682 loc_682:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+11Bj
.text:00000682                 mov     eax, [ebp+var_4]
.text:00000685                 mov     ecx, [ebp+var_4]
.text:00000688                 mov     edx, [ecx+10h]
.text:0000068B                 mov     [eax+20h], edx
.text:0000068E                 mov     ecx, [ecx+14h]
.text:00000691                 mov     [eax+24h], ecx
.text:00000694                 mov     edx, [ebp+var_4]
.text:00000697                 mov     eax, [ebp+var_4]
.text:0000069A                 mov     ecx, [eax+18h]
.text:0000069D                 mov     [edx+28h], ecx
.text:000006A0                 mov     eax, [eax+1Ch]
.text:000006A3                 mov     [edx+2Ch], eax
.text:000006A6                 mov     ecx, [ebp+var_4]
.text:000006A9                 mov     dword ptr [ecx+30h], 0
.text:000006B0                 mov     dword ptr [ecx+34h], 0
.text:000006B7                 mov     edx, [ebp+var_4]
.text:000006BA                 mov     dword ptr [edx+38h], 0
.text:000006C1                 xor     eax, eax
.text:000006C3
.text:000006C3 loc_6C3:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+93j
.text:000006C3                                         ; NArchive::NZip::CCacheOutStream::Init(IOutStream *)+D6j ...
.text:000006C3                 pop     esi
.text:000006C4                 add     esp, 1Ch
.text:000006C7                 cmp     ebp, esp
.text:000006C9                 call    __RTC_CheckEsp
.text:000006CE                 mov     esp, ebp
.text:000006D0                 pop     ebp
.text:000006D1                 retn    4
.text:000006D1 ?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z endp
.text:000006D1
.text:000006D1 ; ---------------------------------------------------------------------------
.text:000006D4                 align 10h
.text:000006E0
.text:000006E0 ; =============== S U B R O U T I N E =======================================
.text:000006E0
.text:000006E0 ; Attributes: bp-based frame
.text:000006E0
.text:000006E0 ; __int32 __thiscall NArchive::NZip::CCacheOutStream::MyWrite(NArchive::NZip::CCacheOutStream *this, unsigned int)
.text:000006E0                 public ?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z
.text:000006E0 ?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z proc near
.text:000006E0                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::FlushCache(void)+18p
.text:000006E0                                         ; NArchive::NZip::CCacheOutStream::MyWriteBlock(void)+25p
.text:000006E0
.text:000006E0 var_28          = dword ptr -28h
.text:000006E0 var_24          = dword ptr -24h
.text:000006E0 var_20          = dword ptr -20h
.text:000006E0 var_1C          = dword ptr -1Ch
.text:000006E0 var_18          = dword ptr -18h
.text:000006E0 var_14          = dword ptr -14h
.text:000006E0 var_10          = dword ptr -10h
.text:000006E0 var_C           = dword ptr -0Ch
.text:000006E0 var_8           = dword ptr -8
.text:000006E0 var_4           = dword ptr -4
.text:000006E0 arg_0           = dword ptr  8
.text:000006E0
.text:000006E0                 push    ebp
.text:000006E1                 mov     ebp, esp
.text:000006E3                 sub     esp, 28h
.text:000006E6                 push    esi
.text:000006E7                 push    edi
.text:000006E8                 push    ecx
.text:000006E9                 lea     edi, [ebp+var_28]
.text:000006EC                 mov     ecx, 0Ah
.text:000006F1                 mov     eax, 0CCCCCCCCh
.text:000006F6                 rep stosd
.text:000006F8                 pop     ecx
.text:000006F9                 mov     [ebp+var_4], ecx
.text:000006FC
.text:000006FC loc_6FC:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+18Dj
.text:000006FC                 cmp     [ebp+arg_0], 0
.text:00000700                 jz      loc_872
.text:00000706                 mov     eax, [ebp+var_4]
.text:00000709                 cmp     dword ptr [eax+38h], 0
.text:0000070D                 jz      loc_872
.text:00000713                 mov     ecx, [ebp+var_4]
.text:00000716                 mov     edx, [ebp+var_4]
.text:00000719                 mov     [ebp+var_18], ecx
.text:0000071C                 mov     [ebp+var_1C], edx
.text:0000071F                 mov     eax, [ebp+var_18]
.text:00000722                 mov     ecx, [ebp+var_1C]
.text:00000725                 mov     edx, [eax+20h]
.text:00000728                 cmp     edx, [ecx+30h]
.text:0000072B                 jnz     short loc_73B
.text:0000072D                 mov     eax, [ebp+var_18]
.text:00000730                 mov     ecx, [ebp+var_1C]
.text:00000733                 mov     edx, [eax+24h]
.text:00000736                 cmp     edx, [ecx+34h]
.text:00000739                 jz      short loc_785
.text:0000073B
.text:0000073B loc_73B:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+4Bj
.text:0000073B                 mov     ecx, [ebp+var_4]
.text:0000073E                 add     ecx, 8
.text:00000741                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000746                 mov     [ebp+var_20], eax
.text:00000749                 mov     eax, [ebp+var_4]
.text:0000074C                 add     eax, 20h ; ' '
.text:0000074F                 mov     esi, esp
.text:00000751                 push    eax
.text:00000752                 push    0
.text:00000754                 mov     ecx, [ebp+var_4]
.text:00000757                 mov     edx, [ecx+34h]
.text:0000075A                 push    edx
.text:0000075B                 mov     eax, [ecx+30h]
.text:0000075E                 push    eax
.text:0000075F                 mov     ecx, [ebp+var_20]
.text:00000762                 push    ecx
.text:00000763                 mov     edx, [ebp+var_20]
.text:00000766                 mov     eax, [edx]
.text:00000768                 mov     ecx, [eax+10h]
.text:0000076B                 call    ecx
.text:0000076D                 cmp     esi, esp
.text:0000076F                 call    __RTC_CheckEsp
.text:00000774                 mov     [ebp+var_8], eax
.text:00000777                 cmp     [ebp+var_8], 0
.text:0000077B                 jz      short loc_785
.text:0000077D                 mov     eax, [ebp+var_8]
.text:00000780                 jmp     loc_874
.text:00000785 ; ---------------------------------------------------------------------------
.text:00000785
.text:00000785 loc_785:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+59j
.text:00000785                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+9Bj
.text:00000785                 mov     edx, [ebp+var_4]
.text:00000788                 mov     eax, [edx+30h]
.text:0000078B                 and     eax, 3FFFFFh
.text:00000790                 mov     [ebp+var_C], eax
.text:00000793                 mov     ecx, [ebp+var_4]
.text:00000796                 mov     edx, [ecx+38h]
.text:00000799                 push    edx
.text:0000079A                 mov     eax, 400000h
.text:0000079F                 sub     eax, [ebp+var_C]
.text:000007A2                 push    eax
.text:000007A3                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000007A8                 mov     [ebp+var_10], eax
.text:000007AB                 mov     ecx, [ebp+arg_0]
.text:000007AE                 push    ecx
.text:000007AF                 mov     edx, [ebp+var_10]
.text:000007B2                 push    edx
.text:000007B3                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000007B8                 mov     [ebp+var_10], eax
.text:000007BB                 mov     eax, [ebp+var_10]
.text:000007BE                 push    eax             ; unsigned int
.text:000007BF                 mov     ecx, [ebp+var_4]
.text:000007C2                 mov     edx, [ecx+0Ch]
.text:000007C5                 add     edx, [ebp+var_C]
.text:000007C8                 push    edx             ; void *
.text:000007C9                 mov     ecx, [ebp+var_4]
.text:000007CC                 add     ecx, 8
.text:000007CF                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:000007D4                 push    eax             ; struct ISequentialOutStream *
.text:000007D5                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000007DA                 mov     [ebp+var_14], eax
.text:000007DD                 cmp     [ebp+var_14], 0
.text:000007E1                 jz      short loc_7EB
.text:000007E3                 mov     eax, [ebp+var_14]
.text:000007E6                 jmp     loc_874
.text:000007EB ; ---------------------------------------------------------------------------
.text:000007EB
.text:000007EB loc_7EB:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+101j
.text:000007EB                 mov     eax, [ebp+var_10]
.text:000007EE                 xor     ecx, ecx
.text:000007F0                 mov     edx, [ebp+var_4]
.text:000007F3                 add     eax, [edx+20h]
.text:000007F6                 adc     ecx, [edx+24h]
.text:000007F9                 mov     edx, [ebp+var_4]
.text:000007FC                 mov     [edx+20h], eax
.text:000007FF                 mov     [edx+24h], ecx
.text:00000802                 mov     eax, [ebp+var_4]
.text:00000805                 mov     ecx, [ebp+var_4]
.text:00000808                 mov     [ebp+var_24], eax
.text:0000080B                 mov     [ebp+var_28], ecx
.text:0000080E                 mov     edx, [ebp+var_24]
.text:00000811                 mov     eax, [ebp+var_28]
.text:00000814                 mov     ecx, [edx+2Ch]
.text:00000817                 cmp     ecx, [eax+24h]
.text:0000081A                 ja      short loc_83E
.text:0000081C                 jb      short loc_82C
.text:0000081E                 mov     edx, [ebp+var_24]
.text:00000821                 mov     eax, [ebp+var_28]
.text:00000824                 mov     ecx, [edx+28h]
.text:00000827                 cmp     ecx, [eax+20h]
.text:0000082A                 jnb     short loc_83E
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+13Cj
.text:0000082C                 mov     edx, [ebp+var_4]
.text:0000082F                 mov     eax, [ebp+var_4]
.text:00000832                 mov     ecx, [eax+20h]
.text:00000835                 mov     [edx+28h], ecx
.text:00000838                 mov     eax, [eax+24h]
.text:0000083B                 mov     [edx+2Ch], eax
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+13Aj
.text:0000083E                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+14Aj
.text:0000083E                 mov     ecx, [ebp+var_10]
.text:00000841                 xor     edx, edx
.text:00000843                 mov     eax, [ebp+var_4]
.text:00000846                 add     ecx, [eax+30h]
.text:00000849                 adc     edx, [eax+34h]
.text:0000084C                 mov     eax, [ebp+var_4]
.text:0000084F                 mov     [eax+30h], ecx
.text:00000852                 mov     [eax+34h], edx
.text:00000855                 mov     ecx, [ebp+var_4]
.text:00000858                 mov     edx, [ecx+38h]
.text:0000085B                 sub     edx, [ebp+var_10]
.text:0000085E                 mov     eax, [ebp+var_4]
.text:00000861                 mov     [eax+38h], edx
.text:00000864                 mov     ecx, [ebp+arg_0]
.text:00000867                 sub     ecx, [ebp+var_10]
.text:0000086A                 mov     [ebp+arg_0], ecx
.text:0000086D                 jmp     loc_6FC
.text:00000872 ; ---------------------------------------------------------------------------
.text:00000872
.text:00000872 loc_872:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+20j
.text:00000872                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+2Dj
.text:00000872                 xor     eax, eax
.text:00000874
.text:00000874 loc_874:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+A0j
.text:00000874                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+106j
.text:00000874                 pop     edi
.text:00000875                 pop     esi
.text:00000876                 add     esp, 28h
.text:00000879                 cmp     ebp, esp
.text:0000087B                 call    __RTC_CheckEsp
.text:00000880                 mov     esp, ebp
.text:00000882                 pop     ebp
.text:00000883                 retn    4
.text:00000883 ?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z endp
.text:00000883
.text:00000883 ; ---------------------------------------------------------------------------
.text:00000886                 align 10h
.text:00000890
.text:00000890 ; =============== S U B R O U T I N E =======================================
.text:00000890
.text:00000890 ; Attributes: bp-based frame
.text:00000890
.text:00000890 ; __int32 __thiscall NArchive::NZip::CCacheOutStream::FlushCache(NArchive::NZip::CCacheOutStream *__hidden this)
.text:00000890                 public ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ
.text:00000890 ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ proc near
.text:00000890                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+56p
.text:00000890                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+7Cp ...
.text:00000890
.text:00000890 var_4           = dword ptr -4
.text:00000890
.text:00000890                 push    ebp
.text:00000891                 mov     ebp, esp
.text:00000893                 push    ecx
.text:00000894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000089B                 mov     [ebp+var_4], ecx
.text:0000089E                 mov     eax, [ebp+var_4]
.text:000008A1                 mov     ecx, [eax+38h]
.text:000008A4                 push    ecx             ; unsigned int
.text:000008A5                 mov     ecx, [ebp+var_4] ; this
.text:000008A8                 call    ?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z ; NArchive::NZip::CCacheOutStream::MyWrite(uint)
.text:000008AD                 add     esp, 4
.text:000008B0                 cmp     ebp, esp
.text:000008B2                 call    __RTC_CheckEsp
.text:000008B7                 mov     esp, ebp
.text:000008B9                 pop     ebp
.text:000008BA                 retn
.text:000008BA ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ endp
.text:000008BA
.text:000008BA ; ---------------------------------------------------------------------------
.text:000008BB                 align 10h
.text:000008C0
.text:000008C0 ; =============== S U B R O U T I N E =======================================
.text:000008C0
.text:000008C0 ; Attributes: bp-based frame
.text:000008C0
.text:000008C0 ; _DWORD __thiscall NArchive::NZip::CCacheOutStream::~CCacheOutStream(NArchive::NZip::CCacheOutStream *__hidden this)
.text:000008C0                 public ??1CCacheOutStream@NZip@NArchive@@QAE@XZ
.text:000008C0 ??1CCacheOutStream@NZip@NArchive@@QAE@XZ proc near
.text:000008C0                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::`scalar deleting destructor'(uint)+11p
.text:000008C0
.text:000008C0 var_28          = dword ptr -28h
.text:000008C0 var_24          = dword ptr -24h
.text:000008C0 var_20          = dword ptr -20h
.text:000008C0 var_1C          = dword ptr -1Ch
.text:000008C0 var_18          = dword ptr -18h
.text:000008C0 var_14          = dword ptr -14h
.text:000008C0 var_10          = dword ptr -10h
.text:000008C0 var_C           = dword ptr -0Ch
.text:000008C0 var_4           = dword ptr -4
.text:000008C0
.text:000008C0                 push    ebp
.text:000008C1                 mov     ebp, esp
.text:000008C3                 push    0FFFFFFFFh
.text:000008C5                 push    offset __ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
.text:000008CA                 mov     eax, large fs:0
.text:000008D0                 push    eax
.text:000008D1                 sub     esp, 1Ch
.text:000008D4                 push    esi
.text:000008D5                 mov     eax, 0CCCCCCCCh
.text:000008DA                 mov     [ebp+var_28], eax
.text:000008DD                 mov     [ebp+var_24], eax
.text:000008E0                 mov     [ebp+var_20], eax
.text:000008E3                 mov     [ebp+var_1C], eax
.text:000008E6                 mov     [ebp+var_18], eax
.text:000008E9                 mov     [ebp+var_14], eax
.text:000008EC                 mov     [ebp+var_10], eax
.text:000008EF                 mov     eax, dword ptr ds:___security_cookie
.text:000008F4                 xor     eax, ebp
.text:000008F6                 push    eax
.text:000008F7                 lea     eax, [ebp+var_C]
.text:000008FA                 mov     large fs:0, eax
.text:00000900                 mov     [ebp+var_10], ecx
.text:00000903                 mov     eax, [ebp+var_10]
.text:00000906                 mov     dword ptr [eax], offset ??_7CCacheOutStream@NZip@NArchive@@6B@ ; const NArchive::NZip::CCacheOutStream::`vftable'
.text:0000090C                 mov     [ebp+var_4], 0
.text:00000913                 mov     ecx, [ebp+var_10] ; this
.text:00000916                 call    ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache(void)
.text:0000091B                 mov     ecx, [ebp+var_10]
.text:0000091E                 mov     edx, [ebp+var_10]
.text:00000921                 mov     [ebp+var_14], ecx
.text:00000924                 mov     [ebp+var_18], edx
.text:00000927                 mov     eax, [ebp+var_14]
.text:0000092A                 mov     ecx, [ebp+var_18]
.text:0000092D                 mov     edx, [eax+18h]
.text:00000930                 cmp     edx, [ecx+28h]
.text:00000933                 jnz     short loc_943
.text:00000935                 mov     eax, [ebp+var_14]
.text:00000938                 mov     ecx, [ebp+var_18]
.text:0000093B                 mov     edx, [eax+1Ch]
.text:0000093E                 cmp     edx, [ecx+2Ch]
.text:00000941                 jz      short loc_973
.text:00000943
.text:00000943 loc_943:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+73j
.text:00000943                 mov     ecx, [ebp+var_10]
.text:00000946                 add     ecx, 8
.text:00000949                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:0000094E                 mov     [ebp+var_1C], eax
.text:00000951                 mov     esi, esp
.text:00000953                 mov     eax, [ebp+var_10]
.text:00000956                 mov     ecx, [eax+1Ch]
.text:00000959                 push    ecx
.text:0000095A                 mov     edx, [eax+18h]
.text:0000095D                 push    edx
.text:0000095E                 mov     eax, [ebp+var_1C]
.text:00000961                 push    eax
.text:00000962                 mov     ecx, [ebp+var_1C]
.text:00000965                 mov     edx, [ecx]
.text:00000967                 mov     eax, [edx+14h]
.text:0000096A                 call    eax
.text:0000096C                 cmp     esi, esp
.text:0000096E                 call    __RTC_CheckEsp
.text:00000973
.text:00000973 loc_973:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+81j
.text:00000973                 mov     ecx, [ebp+var_10]
.text:00000976                 mov     edx, [ebp+var_10]
.text:00000979                 mov     [ebp+var_20], ecx
.text:0000097C                 mov     [ebp+var_24], edx
.text:0000097F                 mov     eax, [ebp+var_20]
.text:00000982                 mov     ecx, [ebp+var_24]
.text:00000985                 mov     edx, [eax+10h]
.text:00000988                 cmp     edx, [ecx+20h]
.text:0000098B                 jnz     short loc_99B
.text:0000098D                 mov     eax, [ebp+var_20]
.text:00000990                 mov     ecx, [ebp+var_24]
.text:00000993                 mov     edx, [eax+14h]
.text:00000996                 cmp     edx, [ecx+24h]
.text:00000999                 jz      short loc_9CF
.text:0000099B
.text:0000099B loc_99B:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+CBj
.text:0000099B                 mov     ecx, [ebp+var_10]
.text:0000099E                 add     ecx, 8
.text:000009A1                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:000009A6                 mov     [ebp+var_28], eax
.text:000009A9                 mov     esi, esp
.text:000009AB                 push    0
.text:000009AD                 push    0
.text:000009AF                 mov     eax, [ebp+var_10]
.text:000009B2                 mov     ecx, [eax+14h]
.text:000009B5                 push    ecx
.text:000009B6                 mov     edx, [eax+10h]
.text:000009B9                 push    edx
.text:000009BA                 mov     eax, [ebp+var_28]
.text:000009BD                 push    eax
.text:000009BE                 mov     ecx, [ebp+var_28]
.text:000009C1                 mov     edx, [ecx]
.text:000009C3                 mov     eax, [edx+10h]
.text:000009C6                 call    eax
.text:000009C8                 cmp     esi, esp
.text:000009CA                 call    __RTC_CheckEsp
.text:000009CF
.text:000009CF loc_9CF:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+D9j
.text:000009CF                 mov     ecx, [ebp+var_10]
.text:000009D2                 mov     edx, [ecx+0Ch]
.text:000009D5                 push    edx
.text:000009D6                 call    _MidFree@4      ; MidFree(x)
.text:000009DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009E2                 mov     ecx, [ebp+var_10]
.text:000009E5                 add     ecx, 8
.text:000009E8                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000009ED                 mov     ecx, [ebp+var_C]
.text:000009F0                 mov     large fs:0, ecx
.text:000009F7                 pop     ecx
.text:000009F8                 pop     esi
.text:000009F9                 add     esp, 28h
.text:000009FC                 cmp     ebp, esp
.text:000009FE                 call    __RTC_CheckEsp
.text:00000A03                 mov     esp, ebp
.text:00000A05                 pop     ebp
.text:00000A06                 retn
.text:00000A06 ??1CCacheOutStream@NZip@NArchive@@QAE@XZ endp
.text:00000A06
.text:00000A06 ; ---------------------------------------------------------------------------
.text:00000A07                 align 10h
.text:00000A10
.text:00000A10 ; =============== S U B R O U T I N E =======================================
.text:00000A10
.text:00000A10 ; Attributes: bp-based frame
.text:00000A10
.text:00000A10 ; __int32 __stdcall NArchive::NZip::CCacheOutStream::Write(NArchive::NZip::CCacheOutStream *this, const void *Src, size_t, unsigned int *)
.text:00000A10                 public ?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z
.text:00000A10 ?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z proc near
.text:00000A10                                         ; DATA XREF: .rdata:00005934o
.text:00000A10
.text:00000A10 var_78          = dword ptr -78h
.text:00000A10 var_74          = dword ptr -74h
.text:00000A10 var_70          = dword ptr -70h
.text:00000A10 var_6C          = dword ptr -6Ch
.text:00000A10 var_68          = dword ptr -68h
.text:00000A10 var_64          = dword ptr -64h
.text:00000A10 var_60          = dword ptr -60h
.text:00000A10 var_5C          = dword ptr -5Ch
.text:00000A10 var_58          = dword ptr -58h
.text:00000A10 var_54          = dword ptr -54h
.text:00000A10 var_50          = dword ptr -50h
.text:00000A10 var_4C          = dword ptr -4Ch
.text:00000A10 var_48          = dword ptr -48h
.text:00000A10 var_44          = dword ptr -44h
.text:00000A10 var_40          = dword ptr -40h
.text:00000A10 var_3C          = dword ptr -3Ch
.text:00000A10 var_38          = dword ptr -38h
.text:00000A10 var_34          = dword ptr -34h
.text:00000A10 var_30          = dword ptr -30h
.text:00000A10 var_2C          = dword ptr -2Ch
.text:00000A10 Size            = dword ptr -28h
.text:00000A10 var_24          = dword ptr -24h
.text:00000A10 var_20          = dword ptr -20h
.text:00000A10 var_1C          = dword ptr -1Ch
.text:00000A10 var_18          = dword ptr -18h
.text:00000A10 var_14          = dword ptr -14h
.text:00000A10 var_10          = dword ptr -10h
.text:00000A10 var_C           = dword ptr -0Ch
.text:00000A10 var_8           = dword ptr -8
.text:00000A10 var_4           = dword ptr -4
.text:00000A10 this            = dword ptr  8
.text:00000A10 Src             = dword ptr  0Ch
.text:00000A10 arg_8           = dword ptr  10h
.text:00000A10 arg_C           = dword ptr  14h
.text:00000A10
.text:00000A10                 push    ebp
.text:00000A11                 mov     ebp, esp
.text:00000A13                 sub     esp, 78h
.text:00000A16                 push    esi
.text:00000A17                 push    edi
.text:00000A18                 lea     edi, [ebp+var_78]
.text:00000A1B                 mov     ecx, 1Eh
.text:00000A20                 mov     eax, 0CCCCCCCCh
.text:00000A25                 rep stosd
.text:00000A27                 cmp     [ebp+arg_C], 0
.text:00000A2B                 jz      short loc_A36
.text:00000A2D                 mov     eax, [ebp+arg_C]
.text:00000A30                 mov     dword ptr [eax], 0
.text:00000A36
.text:00000A36 loc_A36:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1Bj
.text:00000A36                 cmp     [ebp+arg_8], 0
.text:00000A3A                 jnz     short loc_A43
.text:00000A3C                 xor     eax, eax
.text:00000A3E                 jmp     loc_DC9
.text:00000A43 ; ---------------------------------------------------------------------------
.text:00000A43
.text:00000A43 loc_A43:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2Aj
.text:00000A43                 mov     ecx, [ebp+this]
.text:00000A46                 mov     edx, [ecx+10h]
.text:00000A49                 mov     [ebp+var_8], edx
.text:00000A4C                 mov     eax, [ecx+14h]
.text:00000A4F                 mov     [ebp+var_4], eax
.text:00000A52                 mov     ecx, [ebp+this]
.text:00000A55                 cmp     dword ptr [ecx+38h], 0
.text:00000A59                 jz      loc_B1E
.text:00000A5F                 mov     edx, [ebp+this]
.text:00000A62                 mov     eax, [ebp+this]
.text:00000A65                 mov     [ebp+var_44], edx
.text:00000A68                 mov     [ebp+var_48], eax
.text:00000A6B                 mov     ecx, [ebp+var_44]
.text:00000A6E                 mov     edx, [ebp+var_48]
.text:00000A71                 mov     eax, [ecx+14h]
.text:00000A74                 cmp     eax, [edx+34h]
.text:00000A77                 ja      short loc_AA4
.text:00000A79                 jb      short loc_A89
.text:00000A7B                 mov     ecx, [ebp+var_44]
.text:00000A7E                 mov     edx, [ebp+var_48]
.text:00000A81                 mov     eax, [ecx+10h]
.text:00000A84                 cmp     eax, [edx+30h]
.text:00000A87                 jnb     short loc_AA4
.text:00000A89
.text:00000A89 loc_A89:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+69j
.text:00000A89                 mov     ecx, [ebp+this] ; this
.text:00000A8C                 call    ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache(void)
.text:00000A91                 mov     [ebp+var_C], eax
.text:00000A94                 cmp     [ebp+var_C], 0
.text:00000A98                 jz      short loc_AA2
.text:00000A9A                 mov     eax, [ebp+var_C]
.text:00000A9D                 jmp     loc_DC9
.text:00000AA2 ; ---------------------------------------------------------------------------
.text:00000AA2
.text:00000AA2 loc_AA2:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+88j
.text:00000AA2                 jmp     short loc_B1E
.text:00000AA4 ; ---------------------------------------------------------------------------
.text:00000AA4
.text:00000AA4 loc_AA4:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+67j
.text:00000AA4                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+77j
.text:00000AA4                 mov     ecx, [ebp+this]
.text:00000AA7                 mov     edx, [ecx+38h]
.text:00000AAA                 xor     eax, eax
.text:00000AAC                 mov     ecx, [ebp+this]
.text:00000AAF                 add     edx, [ecx+30h]
.text:00000AB2                 adc     eax, [ecx+34h]
.text:00000AB5                 mov     [ebp+var_14], edx
.text:00000AB8                 mov     [ebp+var_10], eax
.text:00000ABB                 mov     edx, [ebp+this]
.text:00000ABE                 mov     [ebp+var_4C], edx
.text:00000AC1                 mov     eax, [ebp+var_4C]
.text:00000AC4                 mov     ecx, [ebp+var_10]
.text:00000AC7                 cmp     ecx, [eax+14h]
.text:00000ACA                 ja      short loc_B1E
.text:00000ACC                 jb      short loc_AD9
.text:00000ACE                 mov     edx, [ebp+var_4C]
.text:00000AD1                 mov     eax, [ebp+var_14]
.text:00000AD4                 cmp     eax, [edx+10h]
.text:00000AD7                 jnb     short loc_B1E
.text:00000AD9
.text:00000AD9 loc_AD9:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+BCj
.text:00000AD9                 mov     ecx, [ebp+this]
.text:00000ADC                 mov     [ebp+var_50], ecx
.text:00000ADF                 mov     edx, [ebp+var_50]
.text:00000AE2                 mov     eax, [ebp+var_10]
.text:00000AE5                 cmp     eax, [edx+2Ch]
.text:00000AE8                 ja      short loc_B12
.text:00000AEA                 jb      short loc_AF7
.text:00000AEC                 mov     ecx, [ebp+var_50]
.text:00000AEF                 mov     edx, [ebp+var_14]
.text:00000AF2                 cmp     edx, [ecx+28h]
.text:00000AF5                 jnb     short loc_B12
.text:00000AF7
.text:00000AF7 loc_AF7:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+DAj
.text:00000AF7                 mov     ecx, [ebp+this] ; this
.text:00000AFA                 call    ?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache(void)
.text:00000AFF                 mov     [ebp+var_18], eax
.text:00000B02                 cmp     [ebp+var_18], 0
.text:00000B06                 jz      short loc_B10
.text:00000B08                 mov     eax, [ebp+var_18]
.text:00000B0B                 jmp     loc_DC9
.text:00000B10 ; ---------------------------------------------------------------------------
.text:00000B10
.text:00000B10 loc_B10:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+F6j
.text:00000B10                 jmp     short loc_B1E
.text:00000B12 ; ---------------------------------------------------------------------------
.text:00000B12
.text:00000B12 loc_B12:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+D8j
.text:00000B12                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+E5j
.text:00000B12                 mov     eax, [ebp+var_14]
.text:00000B15                 mov     [ebp+var_8], eax
.text:00000B18                 mov     ecx, [ebp+var_10]
.text:00000B1B                 mov     [ebp+var_4], ecx
.text:00000B1E
.text:00000B1E loc_B1E:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+49j
.text:00000B1E                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *):loc_AA2j ...
.text:00000B1E                 mov     edx, [ebp+this]
.text:00000B21                 cmp     dword ptr [edx+38h], 0
.text:00000B25                 jnz     short loc_B6F
.text:00000B27                 mov     eax, [ebp+this]
.text:00000B2A                 mov     ecx, [ebp+this]
.text:00000B2D                 mov     [ebp+var_54], eax
.text:00000B30                 mov     [ebp+var_58], ecx
.text:00000B33                 mov     edx, [ebp+var_54]
.text:00000B36                 mov     eax, [ebp+var_58]
.text:00000B39                 mov     ecx, [edx+2Ch]
.text:00000B3C                 cmp     ecx, [eax+14h]
.text:00000B3F                 ja      short loc_B6F
.text:00000B41                 jb      short loc_B51
.text:00000B43                 mov     edx, [ebp+var_54]
.text:00000B46                 mov     eax, [ebp+var_58]
.text:00000B49                 mov     ecx, [edx+28h]
.text:00000B4C                 cmp     ecx, [eax+10h]
.text:00000B4F                 jnb     short loc_B6F
.text:00000B51
.text:00000B51 loc_B51:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+131j
.text:00000B51                 mov     edx, [ebp+this]
.text:00000B54                 mov     eax, [edx+28h]
.text:00000B57                 mov     [ebp+var_8], eax
.text:00000B5A                 mov     ecx, [edx+2Ch]
.text:00000B5D                 mov     [ebp+var_4], ecx
.text:00000B60                 mov     edx, [ebp+this]
.text:00000B63                 mov     eax, [ebp+var_8]
.text:00000B66                 mov     [edx+30h], eax
.text:00000B69                 mov     ecx, [ebp+var_4]
.text:00000B6C                 mov     [edx+34h], ecx
.text:00000B6F
.text:00000B6F loc_B6F:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+115j
.text:00000B6F                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+12Fj ...
.text:00000B6F                 mov     edx, [ebp+this]
.text:00000B72                 mov     [ebp+var_5C], edx
.text:00000B75                 mov     eax, [ebp+var_5C]
.text:00000B78                 mov     ecx, [ebp+var_8]
.text:00000B7B                 cmp     ecx, [eax+10h]
.text:00000B7E                 jnz     short loc_B8F
.text:00000B80                 mov     edx, [ebp+var_5C]
.text:00000B83                 mov     eax, [ebp+var_4]
.text:00000B86                 cmp     eax, [edx+14h]
.text:00000B89                 jz      loc_C60
.text:00000B8F
.text:00000B8F loc_B8F:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+16Ej
.text:00000B8F                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+24Bj
.text:00000B8F                 mov     ecx, [ebp+this]
.text:00000B92                 mov     edx, [ecx+38h]
.text:00000B95                 xor     eax, eax
.text:00000B97                 mov     ecx, [ebp+this]
.text:00000B9A                 add     edx, [ecx+30h]
.text:00000B9D                 adc     eax, [ecx+34h]
.text:00000BA0                 mov     [ebp+var_20], edx
.text:00000BA3                 mov     [ebp+var_1C], eax
.text:00000BA6                 mov     edx, [ebp+var_20]
.text:00000BA9                 and     edx, 3FFFFFh
.text:00000BAF                 mov     [ebp+var_24], edx
.text:00000BB2                 mov     eax, 400000h
.text:00000BB7                 sub     eax, [ebp+var_24]
.text:00000BBA                 mov     [ebp+Size], eax
.text:00000BBD                 mov     ecx, [ebp+Size]
.text:00000BC0                 xor     edx, edx
.text:00000BC2                 mov     eax, [ebp+this]
.text:00000BC5                 mov     esi, [eax+10h]
.text:00000BC8                 sub     esi, [ebp+var_20]
.text:00000BCB                 mov     eax, [eax+14h]
.text:00000BCE                 sbb     eax, [ebp+var_1C]
.text:00000BD1                 mov     [ebp+var_64], ecx
.text:00000BD4                 mov     [ebp+var_60], edx
.text:00000BD7                 mov     [ebp+var_6C], esi
.text:00000BDA                 mov     [ebp+var_68], eax
.text:00000BDD                 mov     ecx, [ebp+var_60]
.text:00000BE0                 cmp     ecx, [ebp+var_68]
.text:00000BE3                 jb      short loc_C01
.text:00000BE5                 ja      short loc_BEF
.text:00000BE7                 mov     edx, [ebp+var_64]
.text:00000BEA                 cmp     edx, [ebp+var_6C]
.text:00000BED                 jbe     short loc_C01
.text:00000BEF
.text:00000BEF loc_BEF:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1D5j
.text:00000BEF                 mov     eax, [ebp+this]
.text:00000BF2                 mov     ecx, [eax+10h]
.text:00000BF5                 sub     ecx, [ebp+var_20]
.text:00000BF8                 mov     edx, [eax+14h]
.text:00000BFB                 sbb     edx, [ebp+var_1C]
.text:00000BFE                 mov     [ebp+Size], ecx
.text:00000C01
.text:00000C01 loc_C01:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1D3j
.text:00000C01                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1DDj
.text:00000C01                 cmp     [ebp+Size], 0
.text:00000C05                 jnz     short loc_C09
.text:00000C07                 jmp     short loc_C60
.text:00000C09 ; ---------------------------------------------------------------------------
.text:00000C09
.text:00000C09 loc_C09:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1F5j
.text:00000C09                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *):loc_C32j
.text:00000C09                 mov     eax, [ebp+this]
.text:00000C0C                 mov     ecx, 400000h
.text:00000C11                 sub     ecx, [eax+38h]
.text:00000C14                 cmp     [ebp+Size], ecx
.text:00000C17                 jbe     short loc_C34
.text:00000C19                 mov     ecx, [ebp+this] ; this
.text:00000C1C                 call    ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::MyWriteBlock(void)
.text:00000C21                 mov     [ebp+var_2C], eax
.text:00000C24                 cmp     [ebp+var_2C], 0
.text:00000C28                 jz      short loc_C32
.text:00000C2A                 mov     eax, [ebp+var_2C]
.text:00000C2D                 jmp     loc_DC9
.text:00000C32 ; ---------------------------------------------------------------------------
.text:00000C32
.text:00000C32 loc_C32:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+218j
.text:00000C32                 jmp     short loc_C09
.text:00000C34 ; ---------------------------------------------------------------------------
.text:00000C34
.text:00000C34 loc_C34:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+207j
.text:00000C34                 mov     edx, [ebp+Size]
.text:00000C37                 push    edx             ; Size
.text:00000C38                 push    0               ; Val
.text:00000C3A                 mov     eax, [ebp+this]
.text:00000C3D                 mov     ecx, [eax+0Ch]
.text:00000C40                 add     ecx, [ebp+var_24]
.text:00000C43                 push    ecx             ; Dst
.text:00000C44                 call    _memset
.text:00000C49                 add     esp, 0Ch
.text:00000C4C                 mov     edx, [ebp+this]
.text:00000C4F                 mov     eax, [edx+38h]
.text:00000C52                 add     eax, [ebp+Size]
.text:00000C55                 mov     ecx, [ebp+this]
.text:00000C58                 mov     [ecx+38h], eax
.text:00000C5B                 jmp     loc_B8F
.text:00000C60 ; ---------------------------------------------------------------------------
.text:00000C60
.text:00000C60 loc_C60:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+179j
.text:00000C60                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+1F7j
.text:00000C60                 mov     edx, [ebp+this]
.text:00000C63                 cmp     dword ptr [edx+38h], 0
.text:00000C67                 jnz     short loc_C7B
.text:00000C69                 mov     eax, [ebp+this]
.text:00000C6C                 mov     ecx, [ebp+this]
.text:00000C6F                 mov     edx, [ecx+10h]
.text:00000C72                 mov     [eax+30h], edx
.text:00000C75                 mov     ecx, [ecx+14h]
.text:00000C78                 mov     [eax+34h], ecx
.text:00000C7B
.text:00000C7B loc_C7B:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+257j
.text:00000C7B                 mov     edx, [ebp+this]
.text:00000C7E                 mov     eax, [edx+10h]
.text:00000C81                 and     eax, 3FFFFFh
.text:00000C86                 mov     [ebp+var_30], eax
.text:00000C89                 mov     ecx, 400000h
.text:00000C8E                 sub     ecx, [ebp+var_30]
.text:00000C91                 push    ecx
.text:00000C92                 mov     edx, [ebp+arg_8]
.text:00000C95                 push    edx
.text:00000C96                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000C9B                 mov     [ebp+arg_8], eax
.text:00000C9E                 mov     eax, [ebp+this]
.text:00000CA1                 mov     ecx, [eax+38h]
.text:00000CA4                 xor     edx, edx
.text:00000CA6                 mov     eax, [ebp+this]
.text:00000CA9                 add     ecx, [eax+30h]
.text:00000CAC                 adc     edx, [eax+34h]
.text:00000CAF                 mov     [ebp+var_38], ecx
.text:00000CB2                 mov     [ebp+var_34], edx
.text:00000CB5                 mov     ecx, [ebp+this]
.text:00000CB8                 mov     [ebp+var_70], ecx
.text:00000CBB                 mov     edx, [ebp+var_70]
.text:00000CBE                 mov     eax, [edx+10h]
.text:00000CC1                 cmp     eax, [ebp+var_38]
.text:00000CC4                 jnz     short loc_CD1
.text:00000CC6                 mov     ecx, [ebp+var_70]
.text:00000CC9                 mov     edx, [ecx+14h]
.text:00000CCC                 cmp     edx, [ebp+var_34]
.text:00000CCF                 jz      short loc_CEF
.text:00000CD1
.text:00000CD1 loc_CD1:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2B4j
.text:00000CD1                 mov     eax, [ebp+this]
.text:00000CD4                 mov     ecx, [ebp+var_38]
.text:00000CD7                 sub     ecx, [eax+10h]
.text:00000CDA                 mov     edx, [ebp+var_34]
.text:00000CDD                 sbb     edx, [eax+14h]
.text:00000CE0                 push    ecx
.text:00000CE1                 mov     eax, [ebp+arg_8]
.text:00000CE4                 push    eax
.text:00000CE5                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000CEA                 mov     [ebp+arg_8], eax
.text:00000CED                 jmp     short loc_D4C
.text:00000CEF ; ---------------------------------------------------------------------------
.text:00000CEF
.text:00000CEF loc_CEF:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2BFj
.text:00000CEF                 mov     ecx, [ebp+this]
.text:00000CF2                 cmp     dword ptr [ecx+38h], 400000h
.text:00000CF9                 jnz     short loc_D14
.text:00000CFB                 mov     ecx, [ebp+this] ; this
.text:00000CFE                 call    ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::MyWriteBlock(void)
.text:00000D03                 mov     [ebp+var_3C], eax
.text:00000D06                 cmp     [ebp+var_3C], 0
.text:00000D0A                 jz      short loc_D14
.text:00000D0C                 mov     eax, [ebp+var_3C]
.text:00000D0F                 jmp     loc_DC9
.text:00000D14 ; ---------------------------------------------------------------------------
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2E9j
.text:00000D14                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2FAj
.text:00000D14                 mov     edx, [ebp+this]
.text:00000D17                 mov     eax, [edx+30h]
.text:00000D1A                 and     eax, 3FFFFFh
.text:00000D1F                 mov     [ebp+var_40], eax
.text:00000D22                 mov     ecx, [ebp+var_40]
.text:00000D25                 cmp     ecx, [ebp+var_30]
.text:00000D28                 jbe     short loc_D3D
.text:00000D2A                 mov     edx, [ebp+var_40]
.text:00000D2D                 sub     edx, [ebp+var_30]
.text:00000D30                 push    edx
.text:00000D31                 mov     eax, [ebp+arg_8]
.text:00000D34                 push    eax
.text:00000D35                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000D3A                 mov     [ebp+arg_8], eax
.text:00000D3D
.text:00000D3D loc_D3D:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+318j
.text:00000D3D                 mov     ecx, [ebp+this]
.text:00000D40                 mov     edx, [ecx+38h]
.text:00000D43                 add     edx, [ebp+arg_8]
.text:00000D46                 mov     eax, [ebp+this]
.text:00000D49                 mov     [eax+38h], edx
.text:00000D4C
.text:00000D4C loc_D4C:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2DDj
.text:00000D4C                 mov     ecx, [ebp+arg_8]
.text:00000D4F                 push    ecx             ; Size
.text:00000D50                 mov     edx, [ebp+Src]
.text:00000D53                 push    edx             ; Src
.text:00000D54                 mov     eax, [ebp+this]
.text:00000D57                 mov     ecx, [eax+0Ch]
.text:00000D5A                 add     ecx, [ebp+var_30]
.text:00000D5D                 push    ecx             ; Dst
.text:00000D5E                 call    _memcpy
.text:00000D63                 add     esp, 0Ch
.text:00000D66                 cmp     [ebp+arg_C], 0
.text:00000D6A                 jz      short loc_D74
.text:00000D6C                 mov     edx, [ebp+arg_C]
.text:00000D6F                 mov     eax, [ebp+arg_8]
.text:00000D72                 mov     [edx], eax
.text:00000D74
.text:00000D74 loc_D74:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+35Aj
.text:00000D74                 mov     ecx, [ebp+arg_8]
.text:00000D77                 xor     edx, edx
.text:00000D79                 mov     eax, [ebp+this]
.text:00000D7C                 add     ecx, [eax+10h]
.text:00000D7F                 adc     edx, [eax+14h]
.text:00000D82                 mov     eax, [ebp+this]
.text:00000D85                 mov     [eax+10h], ecx
.text:00000D88                 mov     [eax+14h], edx
.text:00000D8B                 mov     ecx, [ebp+this]
.text:00000D8E                 mov     edx, [ebp+this]
.text:00000D91                 mov     [ebp+var_74], ecx
.text:00000D94                 mov     [ebp+var_78], edx
.text:00000D97                 mov     eax, [ebp+var_74]
.text:00000D9A                 mov     ecx, [ebp+var_78]
.text:00000D9D                 mov     edx, [eax+1Ch]
.text:00000DA0                 cmp     edx, [ecx+14h]
.text:00000DA3                 ja      short loc_DC7
.text:00000DA5                 jb      short loc_DB5
.text:00000DA7                 mov     eax, [ebp+var_74]
.text:00000DAA                 mov     ecx, [ebp+var_78]
.text:00000DAD                 mov     edx, [eax+18h]
.text:00000DB0                 cmp     edx, [ecx+10h]
.text:00000DB3                 jnb     short loc_DC7
.text:00000DB5
.text:00000DB5 loc_DB5:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+395j
.text:00000DB5                 mov     eax, [ebp+this]
.text:00000DB8                 mov     ecx, [ebp+this]
.text:00000DBB                 mov     edx, [ecx+10h]
.text:00000DBE                 mov     [eax+18h], edx
.text:00000DC1                 mov     ecx, [ecx+14h]
.text:00000DC4                 mov     [eax+1Ch], ecx
.text:00000DC7
.text:00000DC7 loc_DC7:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+393j
.text:00000DC7                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+3A3j
.text:00000DC7                 xor     eax, eax
.text:00000DC9
.text:00000DC9 loc_DC9:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2Ej
.text:00000DC9                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+8Dj ...
.text:00000DC9                 pop     edi
.text:00000DCA                 pop     esi
.text:00000DCB                 add     esp, 78h
.text:00000DCE                 cmp     ebp, esp
.text:00000DD0                 call    __RTC_CheckEsp
.text:00000DD5                 mov     esp, ebp
.text:00000DD7                 pop     ebp
.text:00000DD8                 retn    10h
.text:00000DD8 ?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z endp
.text:00000DD8
.text:00000DD8 ; ---------------------------------------------------------------------------
.text:00000DDB                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; __int32 __stdcall NArchive::NZip::CCacheOutStream::Seek(NArchive::NZip::CCacheOutStream *this, __int64, unsigned int, unsigned __int64 *)
.text:00000DE0                 public ?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z
.text:00000DE0 ?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z proc near
.text:00000DE0                                         ; DATA XREF: .rdata:00005938o
.text:00000DE0
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0 this            = dword ptr  8
.text:00000DE0 arg_4           = qword ptr  0Ch
.text:00000DE0 arg_C           = dword ptr  14h
.text:00000DE0 arg_10          = dword ptr  18h
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 push    ecx
.text:00000DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEB                 mov     eax, [ebp+arg_C]
.text:00000DEE                 mov     [ebp+var_4], eax
.text:00000DF1                 cmp     [ebp+var_4], 0
.text:00000DF5                 jz      short loc_E05
.text:00000DF7                 cmp     [ebp+var_4], 1
.text:00000DFB                 jz      short loc_E07
.text:00000DFD                 cmp     [ebp+var_4], 2
.text:00000E01                 jz      short loc_E1E
.text:00000E03                 jmp     short loc_E35
.text:00000E05 ; ---------------------------------------------------------------------------
.text:00000E05
.text:00000E05 loc_E05:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+15j
.text:00000E05                 jmp     short loc_E3C
.text:00000E07 ; ---------------------------------------------------------------------------
.text:00000E07
.text:00000E07 loc_E07:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+1Bj
.text:00000E07                 mov     ecx, [ebp+this]
.text:00000E0A                 mov     edx, dword ptr [ebp+arg_4]
.text:00000E0D                 add     edx, [ecx+10h]
.text:00000E10                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000E13                 adc     eax, [ecx+14h]
.text:00000E16                 mov     dword ptr [ebp+arg_4], edx
.text:00000E19                 mov     dword ptr [ebp+arg_4+4], eax
.text:00000E1C                 jmp     short loc_E3C
.text:00000E1E ; ---------------------------------------------------------------------------
.text:00000E1E
.text:00000E1E loc_E1E:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+21j
.text:00000E1E                 mov     ecx, [ebp+this]
.text:00000E21                 mov     edx, dword ptr [ebp+arg_4]
.text:00000E24                 add     edx, [ecx+18h]
.text:00000E27                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000E2A                 adc     eax, [ecx+1Ch]
.text:00000E2D                 mov     dword ptr [ebp+arg_4], edx
.text:00000E30                 mov     dword ptr [ebp+arg_4+4], eax
.text:00000E33                 jmp     short loc_E3C
.text:00000E35 ; ---------------------------------------------------------------------------
.text:00000E35
.text:00000E35 loc_E35:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+23j
.text:00000E35                 mov     eax, 80030001h
.text:00000E3A                 jmp     short loc_E76
.text:00000E3C ; ---------------------------------------------------------------------------
.text:00000E3C
.text:00000E3C loc_E3C:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *):loc_E05j
.text:00000E3C                                         ; NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+3Cj ...
.text:00000E3C                 cmp     dword ptr [ebp+arg_4+4], 0
.text:00000E40                 jg      short loc_E51
.text:00000E42                 jl      short loc_E4A
.text:00000E44                 cmp     dword ptr [ebp+arg_4], 0
.text:00000E48                 jnb     short loc_E51
.text:00000E4A
.text:00000E4A loc_E4A:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+62j
.text:00000E4A                 mov     eax, 80070083h
.text:00000E4F                 jmp     short loc_E76
.text:00000E51 ; ---------------------------------------------------------------------------
.text:00000E51
.text:00000E51 loc_E51:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+60j
.text:00000E51                                         ; NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+68j
.text:00000E51                 mov     ecx, [ebp+this]
.text:00000E54                 mov     edx, dword ptr [ebp+arg_4]
.text:00000E57                 mov     [ecx+10h], edx
.text:00000E5A                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000E5D                 mov     [ecx+14h], eax
.text:00000E60                 cmp     [ebp+arg_10], 0
.text:00000E64                 jz      short loc_E74
.text:00000E66                 mov     ecx, [ebp+arg_10]
.text:00000E69                 mov     edx, dword ptr [ebp+arg_4]
.text:00000E6C                 mov     [ecx], edx
.text:00000E6E                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000E71                 mov     [ecx+4], eax
.text:00000E74
.text:00000E74 loc_E74:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+84j
.text:00000E74                 xor     eax, eax
.text:00000E76
.text:00000E76 loc_E76:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+5Aj
.text:00000E76                                         ; NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)+6Fj
.text:00000E76                 mov     esp, ebp
.text:00000E78                 pop     ebp
.text:00000E79                 retn    14h
.text:00000E79 ?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z endp
.text:00000E79
.text:00000E79 ; ---------------------------------------------------------------------------
.text:00000E7C                 align 10h
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; __int32 __stdcall NArchive::NZip::CCacheOutStream::SetSize(NArchive::NZip::CCacheOutStream *this, unsigned __int64)
.text:00000E80                 public ?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z
.text:00000E80 ?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z proc near
.text:00000E80                                         ; DATA XREF: .rdata:0000593Co
.text:00000E80
.text:00000E80 var_18          = dword ptr -18h
.text:00000E80 var_14          = dword ptr -14h
.text:00000E80 var_10          = dword ptr -10h
.text:00000E80 var_C           = dword ptr -0Ch
.text:00000E80 var_8           = dword ptr -8
.text:00000E80 var_4           = dword ptr -4
.text:00000E80 this            = dword ptr  8
.text:00000E80 arg_4           = qword ptr  0Ch
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 sub     esp, 18h
.text:00000E86                 push    esi
.text:00000E87                 mov     eax, 0CCCCCCCCh
.text:00000E8C                 mov     [ebp+var_18], eax
.text:00000E8F                 mov     [ebp+var_14], eax
.text:00000E92                 mov     [ebp+var_10], eax
.text:00000E95                 mov     [ebp+var_C], eax
.text:00000E98                 mov     [ebp+var_8], eax
.text:00000E9B                 mov     [ebp+var_4], eax
.text:00000E9E                 mov     eax, [ebp+this]
.text:00000EA1                 mov     ecx, dword ptr [ebp+arg_4]
.text:00000EA4                 mov     [eax+18h], ecx
.text:00000EA7                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000EAA                 mov     [eax+1Ch], edx
.text:00000EAD                 mov     eax, [ebp+this]
.text:00000EB0                 mov     [ebp+var_8], eax
.text:00000EB3                 mov     ecx, [ebp+var_8]
.text:00000EB6                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000EB9                 cmp     edx, [ecx+2Ch]
.text:00000EBC                 ja      short loc_F18
.text:00000EBE                 jb      short loc_ECB
.text:00000EC0                 mov     eax, [ebp+var_8]
.text:00000EC3                 mov     ecx, dword ptr [ebp+arg_4]
.text:00000EC6                 cmp     ecx, [eax+28h]
.text:00000EC9                 jnb     short loc_F18
.text:00000ECB
.text:00000ECB loc_ECB:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+3Ej
.text:00000ECB                 mov     ecx, [ebp+this]
.text:00000ECE                 add     ecx, 8
.text:00000ED1                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000ED6                 mov     [ebp+var_C], eax
.text:00000ED9                 mov     esi, esp
.text:00000EDB                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000EDE                 push    edx
.text:00000EDF                 mov     eax, dword ptr [ebp+arg_4]
.text:00000EE2                 push    eax
.text:00000EE3                 mov     ecx, [ebp+var_C]
.text:00000EE6                 push    ecx
.text:00000EE7                 mov     edx, [ebp+var_C]
.text:00000EEA                 mov     eax, [edx]
.text:00000EEC                 mov     ecx, [eax+14h]
.text:00000EEF                 call    ecx
.text:00000EF1                 cmp     esi, esp
.text:00000EF3                 call    __RTC_CheckEsp
.text:00000EF8                 mov     [ebp+var_4], eax
.text:00000EFB                 cmp     [ebp+var_4], 0
.text:00000EFF                 jz      short loc_F09
.text:00000F01                 mov     eax, [ebp+var_4]
.text:00000F04                 jmp     loc_F8F
.text:00000F09 ; ---------------------------------------------------------------------------
.text:00000F09
.text:00000F09 loc_F09:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+7Fj
.text:00000F09                 mov     edx, [ebp+this]
.text:00000F0C                 mov     eax, dword ptr [ebp+arg_4]
.text:00000F0F                 mov     [edx+28h], eax
.text:00000F12                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000F15                 mov     [edx+2Ch], ecx
.text:00000F18
.text:00000F18 loc_F18:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+3Cj
.text:00000F18                                         ; NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+49j
.text:00000F18                 mov     edx, [ebp+this]
.text:00000F1B                 mov     [ebp+var_10], edx
.text:00000F1E                 mov     eax, [ebp+var_10]
.text:00000F21                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000F24                 cmp     ecx, [eax+34h]
.text:00000F27                 ja      short loc_F4F
.text:00000F29                 jb      short loc_F36
.text:00000F2B                 mov     edx, [ebp+var_10]
.text:00000F2E                 mov     eax, dword ptr [ebp+arg_4]
.text:00000F31                 cmp     eax, [edx+30h]
.text:00000F34                 ja      short loc_F4F
.text:00000F36
.text:00000F36 loc_F36:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+A9j
.text:00000F36                 mov     ecx, [ebp+this]
.text:00000F39                 mov     dword ptr [ecx+38h], 0
.text:00000F40                 mov     edx, [ebp+this]
.text:00000F43                 mov     eax, dword ptr [ebp+arg_4]
.text:00000F46                 mov     [edx+30h], eax
.text:00000F49                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000F4C                 mov     [edx+34h], ecx
.text:00000F4F
.text:00000F4F loc_F4F:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+A7j
.text:00000F4F                                         ; NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+B4j
.text:00000F4F                 mov     edx, [ebp+this]
.text:00000F52                 mov     eax, [edx+38h]
.text:00000F55                 xor     ecx, ecx
.text:00000F57                 mov     edx, [ebp+this]
.text:00000F5A                 add     eax, [edx+30h]
.text:00000F5D                 adc     ecx, [edx+34h]
.text:00000F60                 mov     [ebp+var_18], eax
.text:00000F63                 mov     [ebp+var_14], ecx
.text:00000F66                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000F69                 cmp     eax, [ebp+var_14]
.text:00000F6C                 ja      short loc_F8D
.text:00000F6E                 jb      short loc_F78
.text:00000F70                 mov     ecx, dword ptr [ebp+arg_4]
.text:00000F73                 cmp     ecx, [ebp+var_18]
.text:00000F76                 jnb     short loc_F8D
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+EEj
.text:00000F78                 mov     edx, [ebp+this]
.text:00000F7B                 mov     eax, dword ptr [ebp+arg_4]
.text:00000F7E                 sub     eax, [edx+30h]
.text:00000F81                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000F84                 sbb     ecx, [edx+34h]
.text:00000F87                 mov     edx, [ebp+this]
.text:00000F8A                 mov     [edx+38h], eax
.text:00000F8D
.text:00000F8D loc_F8D:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+ECj
.text:00000F8D                                         ; NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+F6j
.text:00000F8D                 xor     eax, eax
.text:00000F8F
.text:00000F8F loc_F8F:                                ; CODE XREF: NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)+84j
.text:00000F8F                 pop     esi
.text:00000F90                 add     esp, 18h
.text:00000F93                 cmp     ebp, esp
.text:00000F95                 call    __RTC_CheckEsp
.text:00000F9A                 mov     esp, ebp
.text:00000F9C                 pop     ebp
.text:00000F9D                 retn    0Ch
.text:00000F9D ?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z endp
.text:00000F9D
.text:00000FA0
.text:00000FA0 ; =============== S U B R O U T I N E =======================================
.text:00000FA0
.text:00000FA0 ; Attributes: bp-based frame
.text:00000FA0
.text:00000FA0 ; int __stdcall NArchive::NZip::Update(int, int, int, NArchive::NZip::CInArchive *, char, NArchive::NZip::CCompressionMethodMode *, struct IProgress *)
.text:00000FA0                 public ?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
.text:00000FA0 ?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z proc near
.text:00000FA0
.text:00000FA0 var_E8          = dword ptr -0E8h
.text:00000FA0 var_E4          = dword ptr -0E4h
.text:00000FA0 var_E0          = dword ptr -0E0h
.text:00000FA0 var_DC          = dword ptr -0DCh
.text:00000FA0 var_D8          = dword ptr -0D8h
.text:00000FA0 var_D4          = dword ptr -0D4h
.text:00000FA0 var_D0          = dword ptr -0D0h
.text:00000FA0 var_CC          = dword ptr -0CCh
.text:00000FA0 var_C8          = dword ptr -0C8h
.text:00000FA0 var_C4          = dword ptr -0C4h
.text:00000FA0 var_C0          = dword ptr -0C0h
.text:00000FA0 var_BC          = dword ptr -0BCh
.text:00000FA0 var_B8          = dword ptr -0B8h
.text:00000FA0 var_B4          = dword ptr -0B4h
.text:00000FA0 var_B0          = dword ptr -0B0h
.text:00000FA0 var_AC          = dword ptr -0ACh
.text:00000FA0 var_A8          = dword ptr -0A8h
.text:00000FA0 var_A4          = dword ptr -0A4h
.text:00000FA0 var_A0          = dword ptr -0A0h
.text:00000FA0 var_9C          = dword ptr -9Ch
.text:00000FA0 var_94          = dword ptr -94h
.text:00000FA0 var_90          = dword ptr -90h
.text:00000FA0 var_88          = byte ptr -88h
.text:00000FA0 var_34          = dword ptr -34h
.text:00000FA0 var_30          = dword ptr -30h
.text:00000FA0 var_2C          = dword ptr -2Ch
.text:00000FA0 var_28          = dword ptr -28h
.text:00000FA0 var_20          = byte ptr -20h
.text:00000FA0 var_14          = byte ptr -14h
.text:00000FA0 var_C           = dword ptr -0Ch
.text:00000FA0 var_4           = dword ptr -4
.text:00000FA0 arg_0           = dword ptr  8
.text:00000FA0 arg_4           = dword ptr  0Ch
.text:00000FA0 arg_8           = dword ptr  10h
.text:00000FA0 arg_C           = dword ptr  14h
.text:00000FA0 arg_10          = byte ptr  18h
.text:00000FA0 arg_14          = dword ptr  1Ch
.text:00000FA0 arg_18          = dword ptr  20h
.text:00000FA0
.text:00000FA0                 push    ebp
.text:00000FA1                 mov     ebp, esp
.text:00000FA3                 push    0FFFFFFFFh
.text:00000FA5                 push    offset __ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
.text:00000FAA                 mov     eax, large fs:0
.text:00000FB0                 push    eax
.text:00000FB1                 sub     esp, 0DCh
.text:00000FB7                 push    esi
.text:00000FB8                 push    edi
.text:00000FB9                 lea     edi, [ebp+var_E8]
.text:00000FBF                 mov     ecx, 37h ; '7'
.text:00000FC4                 mov     eax, 0CCCCCCCCh
.text:00000FC9                 rep stosd
.text:00000FCB                 mov     eax, dword ptr ds:___security_cookie
.text:00000FD0                 xor     eax, ebp
.text:00000FD2                 push    eax             ; struct ICompressProgressInfo *
.text:00000FD3                 lea     eax, [ebp+var_C]
.text:00000FD6                 mov     large fs:0, eax
.text:00000FDC                 cmp     [ebp+arg_C], 0
.text:00000FE0                 jz      short loc_FFB
.text:00000FE2                 mov     ecx, [ebp+arg_C] ; this
.text:00000FE5                 call    ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate(void)
.text:00000FEA                 movzx   eax, al
.text:00000FED                 test    eax, eax
.text:00000FEF                 jnz     short loc_FFB
.text:00000FF1                 mov     eax, 80004001h
.text:00000FF6                 jmp     loc_14D0
.text:00000FFB ; ---------------------------------------------------------------------------
.text:00000FFB
.text:00000FFB loc_FFB:                                ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+40j
.text:00000FFB                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+4Fj
.text:00000FFB                 lea     ecx, [ebp+var_14]
.text:00000FFE                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00001003                 mov     [ebp+var_4], 0
.text:0000100A                 lea     ecx, [ebp+var_20]
.text:0000100D                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00001012                 mov     byte ptr [ebp+var_4], 1
.text:00001016                 lea     ecx, [ebp+var_20]
.text:00001019                 call    ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&(void)
.text:0000101E                 mov     esi, esp
.text:00001020                 push    eax
.text:00001021                 push    offset _IID_IOutStream
.text:00001026                 mov     ecx, [ebp+arg_8]
.text:00001029                 mov     edx, [ecx]
.text:0000102B                 mov     eax, [ebp+arg_8]
.text:0000102E                 push    eax
.text:0000102F                 mov     ecx, [edx]
.text:00001031                 call    ecx
.text:00001033                 cmp     esi, esp
.text:00001035                 call    __RTC_CheckEsp
.text:0000103A                 lea     ecx, [ebp+var_20]
.text:0000103D                 call    ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ; CMyComPtr<IOutStream>::operator!(void)
.text:00001042                 movzx   edx, al
.text:00001045                 test    edx, edx
.text:00001047                 jz      short loc_1079
.text:00001049                 mov     [ebp+var_A4], 80004001h
.text:00001053                 mov     byte ptr [ebp+var_4], 0
.text:00001057                 lea     ecx, [ebp+var_20]
.text:0000105A                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:0000105F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001066                 lea     ecx, [ebp+var_14]
.text:00001069                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:0000106E                 mov     eax, [ebp+var_A4]
.text:00001074                 jmp     loc_14D0
.text:00001079 ; ---------------------------------------------------------------------------
.text:00001079
.text:00001079 loc_1079:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+A7j
.text:00001079                 cmp     [ebp+arg_C], 0
.text:0000107D                 jz      loc_118D
.text:00001083                 mov     eax, [ebp+arg_C]
.text:00001086                 mov     [ebp+var_D0], eax
.text:0000108C                 mov     ecx, [ebp+var_D0]
.text:00001092                 cmp     dword ptr [ecx+3Ch], 0
.text:00001096                 jl      loc_118D
.text:0000109C                 jg      short loc_10AE
.text:0000109E                 mov     edx, [ebp+var_D0]
.text:000010A4                 cmp     dword ptr [edx+38h], 0
.text:000010A8                 jbe     loc_118D
.text:000010AE
.text:000010AE loc_10AE:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+FCj
.text:000010AE                 movzx   eax, [ebp+arg_10]
.text:000010B2                 test    eax, eax
.text:000010B4                 jnz     loc_118D
.text:000010BA                 mov     ecx, [ebp+arg_C]
.text:000010BD                 add     ecx, 80h ; 'Ç'
.text:000010C3                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000010C8                 mov     [ebp+var_D4], eax
.text:000010CE                 mov     esi, esp
.text:000010D0                 push    0
.text:000010D2                 push    0
.text:000010D4                 push    0
.text:000010D6                 push    0
.text:000010D8                 mov     ecx, [ebp+var_D4]
.text:000010DE                 push    ecx
.text:000010DF                 mov     edx, [ebp+var_D4]
.text:000010E5                 mov     eax, [edx]
.text:000010E7                 mov     ecx, [eax+10h]
.text:000010EA                 call    ecx
.text:000010EC                 cmp     esi, esp
.text:000010EE                 call    __RTC_CheckEsp
.text:000010F3                 mov     [ebp+var_28], eax
.text:000010F6                 cmp     [ebp+var_28], 0
.text:000010FA                 jz      short loc_112B
.text:000010FC                 mov     edx, [ebp+var_28]
.text:000010FF                 mov     [ebp+var_A8], edx
.text:00001105                 mov     byte ptr [ebp+var_4], 0
.text:00001109                 lea     ecx, [ebp+var_20]
.text:0000110C                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001111                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001118                 lea     ecx, [ebp+var_14]
.text:0000111B                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001120                 mov     eax, [ebp+var_A8]
.text:00001126                 jmp     loc_14D0
.text:0000112B ; ---------------------------------------------------------------------------
.text:0000112B
.text:0000112B loc_112B:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+15Aj
.text:0000112B                 push    0
.text:0000112D                 mov     eax, [ebp+arg_C]
.text:00001130                 mov     ecx, [eax+3Ch]
.text:00001133                 push    ecx             ; unsigned __int64
.text:00001134                 mov     edx, [eax+38h]
.text:00001137                 push    edx             ; struct ISequentialOutStream *
.text:00001138                 lea     ecx, [ebp+var_20]
.text:0000113B                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00001140                 push    eax             ; struct ISequentialInStream *
.text:00001141                 mov     ecx, [ebp+arg_C]
.text:00001144                 add     ecx, 80h ; 'Ç'
.text:0000114A                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000114F                 push    eax             ; this
.text:00001150                 call    ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)
.text:00001155                 mov     [ebp+var_2C], eax
.text:00001158                 cmp     [ebp+var_2C], 0
.text:0000115C                 jz      short loc_118D
.text:0000115E                 mov     eax, [ebp+var_2C]
.text:00001161                 mov     [ebp+var_AC], eax
.text:00001167                 mov     byte ptr [ebp+var_4], 0
.text:0000116B                 lea     ecx, [ebp+var_20]
.text:0000116E                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001173                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000117A                 lea     ecx, [ebp+var_14]
.text:0000117D                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001182                 mov     eax, [ebp+var_AC]
.text:00001188                 jmp     loc_14D0
.text:0000118D ; ---------------------------------------------------------------------------
.text:0000118D
.text:0000118D loc_118D:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+DDj
.text:0000118D                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+F6j ...
.text:0000118D                 push    40h ; '@'       ; unsigned int
.text:0000118F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001194                 add     esp, 4
.text:00001197                 mov     [ebp+var_B4], eax
.text:0000119D                 mov     byte ptr [ebp+var_4], 2
.text:000011A1                 cmp     [ebp+var_B4], 0
.text:000011A8                 jz      short loc_11BD
.text:000011AA                 mov     ecx, [ebp+var_B4] ; this
.text:000011B0                 call    ??0CCacheOutStream@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCacheOutStream::CCacheOutStream(void)
.text:000011B5                 mov     [ebp+var_D8], eax
.text:000011BB                 jmp     short loc_11C7
.text:000011BD ; ---------------------------------------------------------------------------
.text:000011BD
.text:000011BD loc_11BD:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+208j
.text:000011BD                 mov     [ebp+var_D8], 0
.text:000011C7
.text:000011C7 loc_11C7:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+21Bj
.text:000011C7                 mov     ecx, [ebp+var_D8]
.text:000011CD                 mov     [ebp+var_B0], ecx
.text:000011D3                 mov     byte ptr [ebp+var_4], 1
.text:000011D7                 mov     edx, [ebp+var_B0]
.text:000011DD                 mov     [ebp+var_30], edx
.text:000011E0                 mov     eax, [ebp+var_30]
.text:000011E3                 push    eax
.text:000011E4                 lea     ecx, [ebp+var_14]
.text:000011E7                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:000011EC                 mov     ecx, [ebp+var_30] ; this
.text:000011EF                 call    ?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ ; NArchive::NZip::CCacheOutStream::Allocate(void)
.text:000011F4                 movzx   ecx, al
.text:000011F7                 test    ecx, ecx
.text:000011F9                 jnz     short loc_122B
.text:000011FB                 mov     [ebp+var_B8], 8007000Eh
.text:00001205                 mov     byte ptr [ebp+var_4], 0
.text:00001209                 lea     ecx, [ebp+var_20]
.text:0000120C                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001211                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001218                 lea     ecx, [ebp+var_14]
.text:0000121B                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001220                 mov     eax, [ebp+var_B8]
.text:00001226                 jmp     loc_14D0
.text:0000122B ; ---------------------------------------------------------------------------
.text:0000122B
.text:0000122B loc_122B:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+259j
.text:0000122B                 lea     ecx, [ebp+var_20]
.text:0000122E                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00001233                 push    eax             ; struct IOutStream *
.text:00001234                 mov     ecx, [ebp+var_30] ; this
.text:00001237                 call    ?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z ; NArchive::NZip::CCacheOutStream::Init(IOutStream *)
.text:0000123C                 mov     [ebp+var_34], eax
.text:0000123F                 cmp     [ebp+var_34], 0
.text:00001243                 jz      short loc_1274
.text:00001245                 mov     edx, [ebp+var_34]
.text:00001248                 mov     [ebp+var_BC], edx
.text:0000124E                 mov     byte ptr [ebp+var_4], 0
.text:00001252                 lea     ecx, [ebp+var_20]
.text:00001255                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:0000125A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001261                 lea     ecx, [ebp+var_14]
.text:00001264                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001269                 mov     eax, [ebp+var_BC]
.text:0000126F                 jmp     loc_14D0
.text:00001274 ; ---------------------------------------------------------------------------
.text:00001274
.text:00001274 loc_1274:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+2A3j
.text:00001274                 mov     byte ptr [ebp+var_4], 0
.text:00001278                 lea     ecx, [ebp+var_20]
.text:0000127B                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001280                 lea     ecx, [ebp+var_88] ; this
.text:00001286                 call    ??0COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::COutArchive(void)
.text:0000128B                 mov     byte ptr [ebp+var_4], 3
.text:0000128F                 lea     ecx, [ebp+var_14]
.text:00001292                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00001297                 push    eax             ; struct IOutStream *
.text:00001298                 lea     ecx, [ebp+var_88] ; this
.text:0000129E                 call    ?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::Create(IOutStream *)
.text:000012A3                 mov     [ebp+var_90], eax
.text:000012A9                 cmp     [ebp+var_90], 0
.text:000012B0                 jz      short loc_12E7
.text:000012B2                 mov     eax, [ebp+var_90]
.text:000012B8                 mov     [ebp+var_C0], eax
.text:000012BE                 mov     byte ptr [ebp+var_4], 0
.text:000012C2                 lea     ecx, [ebp+var_88] ; this
.text:000012C8                 call    ??1COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::~COutArchive(void)
.text:000012CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000012D4                 lea     ecx, [ebp+var_14]
.text:000012D7                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000012DC                 mov     eax, [ebp+var_C0]
.text:000012E2                 jmp     loc_14D0
.text:000012E7 ; ---------------------------------------------------------------------------
.text:000012E7
.text:000012E7 loc_12E7:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+310j
.text:000012E7                 cmp     [ebp+arg_C], 0
.text:000012EB                 jz      loc_1461
.text:000012F1                 mov     ecx, [ebp+arg_C]
.text:000012F4                 mov     edx, [ebp+arg_C]
.text:000012F7                 mov     [ebp+var_DC], ecx
.text:000012FD                 mov     [ebp+var_E0], edx
.text:00001303                 mov     eax, [ebp+var_DC]
.text:00001309                 mov     ecx, [ebp+var_E0]
.text:0000130F                 mov     edx, [eax+4Ch]
.text:00001312                 cmp     edx, [ecx+3Ch]
.text:00001315                 jl      loc_1461
.text:0000131B                 jg      short loc_1335
.text:0000131D                 mov     eax, [ebp+var_DC]
.text:00001323                 mov     ecx, [ebp+var_E0]
.text:00001329                 mov     edx, [eax+48h]
.text:0000132C                 cmp     edx, [ecx+38h]
.text:0000132F                 jbe     loc_1461
.text:00001335
.text:00001335 loc_1335:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+37Bj
.text:00001335                 mov     ecx, [ebp+arg_C]
.text:00001338                 add     ecx, 80h ; 'Ç'
.text:0000133E                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00001343                 mov     [ebp+var_E4], eax
.text:00001349                 mov     esi, esp
.text:0000134B                 push    0
.text:0000134D                 push    0
.text:0000134F                 mov     eax, [ebp+arg_C]
.text:00001352                 mov     ecx, [eax+3Ch]
.text:00001355                 push    ecx
.text:00001356                 mov     edx, [eax+38h]
.text:00001359                 push    edx
.text:0000135A                 mov     eax, [ebp+var_E4]
.text:00001360                 push    eax
.text:00001361                 mov     ecx, [ebp+var_E4]
.text:00001367                 mov     edx, [ecx]
.text:00001369                 mov     eax, [edx+10h]
.text:0000136C                 call    eax
.text:0000136E                 cmp     esi, esp
.text:00001370                 call    __RTC_CheckEsp
.text:00001375                 mov     [ebp+var_94], eax
.text:0000137B                 cmp     [ebp+var_94], 0
.text:00001382                 jz      short loc_13B9
.text:00001384                 mov     ecx, [ebp+var_94]
.text:0000138A                 mov     [ebp+var_C4], ecx
.text:00001390                 mov     byte ptr [ebp+var_4], 0
.text:00001394                 lea     ecx, [ebp+var_88] ; this
.text:0000139A                 call    ??1COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::~COutArchive(void)
.text:0000139F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000013A6                 lea     ecx, [ebp+var_14]
.text:000013A9                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000013AE                 mov     eax, [ebp+var_C4]
.text:000013B4                 jmp     loc_14D0
.text:000013B9 ; ---------------------------------------------------------------------------
.text:000013B9
.text:000013B9 loc_13B9:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+3E2j
.text:000013B9                 mov     edx, [ebp+arg_C]
.text:000013BC                 mov     eax, [ebp+arg_C]
.text:000013BF                 mov     ecx, [edx+48h]
.text:000013C2                 sub     ecx, [eax+38h]
.text:000013C5                 mov     edx, [edx+4Ch]
.text:000013C8                 sbb     edx, [eax+3Ch]
.text:000013CB                 mov     [ebp+var_9C], ecx
.text:000013D1                 mov     [ebp+var_9C+4], edx
.text:000013D7                 push    0
.text:000013D9                 mov     eax, [ebp+var_9C+4]
.text:000013DF                 push    eax             ; unsigned __int64
.text:000013E0                 mov     ecx, [ebp+var_9C]
.text:000013E6                 push    ecx             ; struct ISequentialOutStream *
.text:000013E7                 lea     ecx, [ebp+var_14]
.text:000013EA                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:000013EF                 push    eax             ; struct ISequentialInStream *
.text:000013F0                 mov     ecx, [ebp+arg_C]
.text:000013F3                 add     ecx, 80h ; 'Ç'
.text:000013F9                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000013FE                 push    eax             ; this
.text:000013FF                 call    ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)
.text:00001404                 mov     [ebp+var_A0], eax
.text:0000140A                 cmp     [ebp+var_A0], 0
.text:00001411                 jz      short loc_1448
.text:00001413                 mov     edx, [ebp+var_A0]
.text:00001419                 mov     [ebp+var_C8], edx
.text:0000141F                 mov     byte ptr [ebp+var_4], 0
.text:00001423                 lea     ecx, [ebp+var_88] ; this
.text:00001429                 call    ??1COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::~COutArchive(void)
.text:0000142E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001435                 lea     ecx, [ebp+var_14]
.text:00001438                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:0000143D                 mov     eax, [ebp+var_C8]
.text:00001443                 jmp     loc_14D0
.text:00001448 ; ---------------------------------------------------------------------------
.text:00001448
.text:00001448 loc_1448:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+471j
.text:00001448                 mov     eax, [ebp+var_9C+4]
.text:0000144E                 push    eax
.text:0000144F                 mov     ecx, [ebp+var_9C]
.text:00001455                 push    ecx             ; unsigned __int64
.text:00001456                 lea     ecx, [ebp+var_88] ; this
.text:0000145C                 call    ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::COutArchive::MoveCurPos(unsigned __int64)
.text:00001461
.text:00001461 loc_1461:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+34Bj
.text:00001461                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+375j ...
.text:00001461                 cmp     [ebp+arg_C], 0
.text:00001465                 jz      short loc_1475
.text:00001467                 mov     edx, [ebp+arg_C]
.text:0000146A                 add     edx, 6Ch ; 'l'
.text:0000146D                 mov     [ebp+var_E8], edx
.text:00001473                 jmp     short loc_147F
.text:00001475 ; ---------------------------------------------------------------------------
.text:00001475
.text:00001475 loc_1475:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+4C5j
.text:00001475                 mov     [ebp+var_E8], 0
.text:0000147F
.text:0000147F loc_147F:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+4D3j
.text:0000147F                 mov     eax, [ebp+arg_18]
.text:00001482                 push    eax             ; struct IProgress *
.text:00001483                 mov     ecx, [ebp+var_E8]
.text:00001489                 push    ecx             ; int
.text:0000148A                 mov     edx, [ebp+arg_14]
.text:0000148D                 push    edx             ; NArchive::NZip::CCompressionMethodMode *
.text:0000148E                 mov     eax, [ebp+arg_4]
.text:00001491                 push    eax             ; int
.text:00001492                 mov     ecx, [ebp+arg_0]
.text:00001495                 push    ecx             ; int
.text:00001496                 mov     edx, [ebp+arg_C]
.text:00001499                 push    edx             ; NArchive::NZip::CInArchive *
.text:0000149A                 lea     eax, [ebp+var_88]
.text:000014A0                 push    eax             ; NArchive::NZip::COutArchive *
.text:000014A1                 call    ?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)
.text:000014A6                 mov     [ebp+var_CC], eax
.text:000014AC                 mov     byte ptr [ebp+var_4], 0
.text:000014B0                 lea     ecx, [ebp+var_88] ; this
.text:000014B6                 call    ??1COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::~COutArchive(void)
.text:000014BB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000014C2                 lea     ecx, [ebp+var_14]
.text:000014C5                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000014CA                 mov     eax, [ebp+var_CC]
.text:000014D0
.text:000014D0 loc_14D0:                               ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+56j
.text:000014D0                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+D4j ...
.text:000014D0                 push    edx
.text:000014D1                 mov     ecx, ebp
.text:000014D3                 push    eax
.text:000014D4                 lea     edx, $LN32
.text:000014DA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000014DF                 pop     eax
.text:000014E0                 pop     edx
.text:000014E1                 mov     ecx, [ebp+var_C]
.text:000014E4                 mov     large fs:0, ecx
.text:000014EB                 pop     ecx
.text:000014EC                 pop     edi
.text:000014ED                 pop     esi
.text:000014EE                 add     esp, 0E8h
.text:000014F4                 cmp     ebp, esp
.text:000014F6                 call    __RTC_CheckEsp
.text:000014FB                 mov     esp, ebp
.text:000014FD                 pop     ebp
.text:000014FE                 retn    1Ch
.text:000014FE ?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z endp ; sp-analysis failed
.text:000014FE
.text:000014FE ; ---------------------------------------------------------------------------
.text:00001501                 align 4
.text:00001504 $LN32           dd 3                    ; DATA XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+534o
.text:00001508                 dd offset $LN31
.text:0000150C $LN31           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00001508o
.text:00001514                 dd offset $LN27         ; "outStream"
.text:00001518                 dd 0FFFFFFE0h, 4
.text:00001520                 dd offset $LN28         ; "outStreamReal"
.text:00001524                 dd 0FFFFFF78h, 50h
.text:0000152C                 dd offset $LN29         ; "outArchive"
.text:00001530 $LN29           db 'outArchive',0       ; DATA XREF: .text:0000152Co
.text:0000153B $LN28           db 'outStreamReal',0    ; DATA XREF: .text:00001520o
.text:00001549 $LN27           db 'outStream',0        ; DATA XREF: .text:00001514o
.text:00001553                 align 10h
.text:00001560
.text:00001560 ; =============== S U B R O U T I N E =======================================
.text:00001560
.text:00001560 ; Attributes: bp-based frame
.text:00001560
.text:00001560 ; int __stdcall NArchive::NZip::Update2(NArchive::NZip::COutArchive *, NArchive::NZip::CInArchive *, int, int, NArchive::NZip::CCompressionMethodMode *, int, struct IProgress *)
.text:00001560 ?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z proc near
.text:00001560                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+501p
.text:00001560
.text:00001560 var_6F8         = dword ptr -6F8h
.text:00001560 var_6F1         = byte ptr -6F1h
.text:00001560 var_6F0         = dword ptr -6F0h
.text:00001560 var_6EC         = dword ptr -6ECh
.text:00001560 var_6E8         = dword ptr -6E8h
.text:00001560 var_6E4         = dword ptr -6E4h
.text:00001560 var_6E0         = dword ptr -6E0h
.text:00001560 var_6DC         = dword ptr -6DCh
.text:00001560 var_6D8         = dword ptr -6D8h
.text:00001560 var_6D4         = dword ptr -6D4h
.text:00001560 var_6D0         = dword ptr -6D0h
.text:00001560 var_6CC         = dword ptr -6CCh
.text:00001560 var_6C8         = dword ptr -6C8h
.text:00001560 var_6C4         = dword ptr -6C4h
.text:00001560 var_6C0         = dword ptr -6C0h
.text:00001560 var_6BC         = dword ptr -6BCh
.text:00001560 var_6B8         = dword ptr -6B8h
.text:00001560 var_6B4         = dword ptr -6B4h
.text:00001560 var_6B0         = dword ptr -6B0h
.text:00001560 var_6AC         = dword ptr -6ACh
.text:00001560 var_6A8         = dword ptr -6A8h
.text:00001560 var_6A4         = dword ptr -6A4h
.text:00001560 var_6A0         = dword ptr -6A0h
.text:00001560 var_69C         = dword ptr -69Ch
.text:00001560 var_698         = dword ptr -698h
.text:00001560 var_694         = dword ptr -694h
.text:00001560 var_690         = dword ptr -690h
.text:00001560 var_68C         = dword ptr -68Ch
.text:00001560 var_688         = dword ptr -688h
.text:00001560 var_684         = dword ptr -684h
.text:00001560 var_680         = dword ptr -680h
.text:00001560 var_67C         = dword ptr -67Ch
.text:00001560 var_678         = dword ptr -678h
.text:00001560 var_674         = dword ptr -674h
.text:00001560 var_670         = dword ptr -670h
.text:00001560 var_66C         = dword ptr -66Ch
.text:00001560 var_668         = dword ptr -668h
.text:00001560 var_664         = dword ptr -664h
.text:00001560 var_660         = dword ptr -660h
.text:00001560 var_65C         = dword ptr -65Ch
.text:00001560 var_658         = dword ptr -658h
.text:00001560 var_654         = dword ptr -654h
.text:00001560 var_650         = dword ptr -650h
.text:00001560 var_64C         = dword ptr -64Ch
.text:00001560 var_648         = dword ptr -648h
.text:00001560 var_644         = dword ptr -644h
.text:00001560 var_640         = dword ptr -640h
.text:00001560 var_63C         = dword ptr -63Ch
.text:00001560 var_638         = dword ptr -638h
.text:00001560 var_630         = byte ptr -630h
.text:00001560 var_628         = dword ptr -628h
.text:00001560 var_620         = byte ptr -620h
.text:00001560 var_618         = dword ptr -618h
.text:00001560 var_611         = byte ptr -611h
.text:00001560 var_60C         = byte ptr -60Ch
.text:00001560 var_5EC         = byte ptr -5ECh
.text:00001560 var_584         = byte ptr -584h
.text:00001560 var_518         = dword ptr -518h
.text:00001560 var_514         = dword ptr -514h
.text:00001560 var_510         = dword ptr -510h
.text:00001560 var_50C         = dword ptr -50Ch
.text:00001560 var_508         = dword ptr -508h
.text:00001560 var_504         = dword ptr -504h
.text:00001560 var_500         = dword ptr -500h
.text:00001560 var_4F8         = byte ptr -4F8h
.text:00001560 var_4EC         = byte ptr -4ECh
.text:00001560 var_4E0         = byte ptr -4E0h
.text:00001560 var_458         = byte ptr -458h
.text:00001560 var_3EC         = dword ptr -3ECh
.text:00001560 var_3E8         = dword ptr -3E8h
.text:00001560 var_3E4         = dword ptr -3E4h
.text:00001560 var_3E0         = dword ptr -3E0h
.text:00001560 var_3DC         = dword ptr -3DCh
.text:00001560 var_3D8         = dword ptr -3D8h
.text:00001560 var_3D4         = dword ptr -3D4h
.text:00001560 var_3D0         = dword ptr -3D0h
.text:00001560 var_3CC         = byte ptr -3CCh
.text:00001560 var_304         = dword ptr -304h
.text:00001560 var_300         = byte ptr -300h
.text:00001560 var_2C0         = dword ptr -2C0h
.text:00001560 var_2B8         = byte ptr -2B8h
.text:00001560 var_2A4         = byte ptr -2A4h
.text:00001560 var_290         = byte ptr -290h
.text:00001560 var_27C         = byte ptr -27Ch
.text:00001560 var_278         = byte ptr -278h
.text:00001560 var_264         = byte ptr -264h
.text:00001560 var_234         = byte ptr -234h
.text:00001560 var_1E4         = byte ptr -1E4h
.text:00001560 var_1DC         = dword ptr -1DCh
.text:00001560 var_1D4         = byte ptr -1D4h
.text:00001560 var_1C4         = dword ptr -1C4h
.text:00001560 var_1B9         = byte ptr -1B9h
.text:00001560 var_1B4         = dword ptr -1B4h
.text:00001560 var_1B0         = dword ptr -1B0h
.text:00001560 var_1AC         = dword ptr -1ACh
.text:00001560 var_1A8         = dword ptr -1A8h
.text:00001560 var_1A4         = dword ptr -1A4h
.text:00001560 var_1A0         = dword ptr -1A0h
.text:00001560 var_195         = byte ptr -195h
.text:00001560 var_18E         = byte ptr -18Eh
.text:00001560 var_18D         = byte ptr -18Dh
.text:00001560 var_18C         = dword ptr -18Ch
.text:00001560 var_188         = dword ptr -188h
.text:00001560 var_184         = dword ptr -184h
.text:00001560 var_180         = dword ptr -180h
.text:00001560 var_178         = byte ptr -178h
.text:00001560 var_164         = byte ptr -164h
.text:00001560 var_128         = byte ptr -128h
.text:00001560 var_B0          = byte ptr -0B0h
.text:00001560 var_44          = dword ptr -44h
.text:00001560 var_40          = dword ptr -40h
.text:00001560 var_3C          = dword ptr -3Ch
.text:00001560 var_38          = dword ptr -38h
.text:00001560 var_34          = dword ptr -34h
.text:00001560 var_30          = dword ptr -30h
.text:00001560 var_28          = qword ptr -28h
.text:00001560 var_18          = byte ptr -18h
.text:00001560 var_10          = dword ptr -10h
.text:00001560 var_C           = dword ptr -0Ch
.text:00001560 var_4           = dword ptr -4
.text:00001560 arg_0           = dword ptr  8
.text:00001560 arg_4           = dword ptr  0Ch
.text:00001560 arg_8           = dword ptr  10h
.text:00001560 arg_C           = dword ptr  14h
.text:00001560 arg_10          = dword ptr  18h
.text:00001560 arg_14          = dword ptr  1Ch
.text:00001560 arg_18          = dword ptr  20h
.text:00001560
.text:00001560                 push    ebp
.text:00001561                 mov     ebp, esp
.text:00001563                 push    0FFFFFFFFh
.text:00001565                 push    offset __ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
.text:0000156A                 mov     eax, large fs:0
.text:00001570                 push    eax
.text:00001571                 sub     esp, 6ECh
.text:00001577                 push    esi
.text:00001578                 push    edi
.text:00001579                 lea     edi, [ebp+var_6F8]
.text:0000157F                 mov     ecx, 1BBh
.text:00001584                 mov     eax, 0CCCCCCCCh
.text:00001589                 rep stosd
.text:0000158B                 mov     eax, dword ptr ds:___security_cookie
.text:00001590                 xor     eax, ebp
.text:00001592                 mov     [ebp+var_10], eax
.text:00001595                 push    eax
.text:00001596                 lea     eax, [ebp+var_C]
.text:00001599                 mov     large fs:0, eax
.text:0000159F                 lea     ecx, [ebp+var_18]
.text:000015A2                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000015A7                 mov     [ebp+var_4], 0
.text:000015AE                 lea     ecx, [ebp+var_18]
.text:000015B1                 call    ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&(void)
.text:000015B6                 mov     esi, esp
.text:000015B8                 push    eax
.text:000015B9                 push    offset _IID_IArchiveUpdateCallbackFile
.text:000015BE                 mov     eax, [ebp+arg_18]
.text:000015C1                 mov     ecx, [eax]
.text:000015C3                 mov     edx, [ebp+arg_18]
.text:000015C6                 push    edx
.text:000015C7                 mov     eax, [ecx]
.text:000015C9                 call    eax
.text:000015CB                 cmp     esi, esp
.text:000015CD                 call    __RTC_CheckEsp
.text:000015D2                 mov     dword ptr [ebp+var_28], 0
.text:000015D9                 mov     dword ptr [ebp+var_28+4], 0
.text:000015E0                 mov     [ebp+var_34], 0
.text:000015E7                 mov     [ebp+var_30], 0
.text:000015EE                 mov     [ebp+var_3C], 0
.text:000015F5                 mov     [ebp+var_38], 0
.text:000015FC                 mov     [ebp+var_40], 0
.text:00001603                 jmp     short loc_160E
.text:00001605 ; ---------------------------------------------------------------------------
.text:00001605
.text:00001605 loc_1605:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1C8j
.text:00001605                 mov     ecx, [ebp+var_40]
.text:00001608                 add     ecx, 1
.text:0000160B                 mov     [ebp+var_40], ecx
.text:0000160E
.text:0000160E loc_160E:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+A3j
.text:0000160E                 mov     ecx, [ebp+arg_C]
.text:00001611                 call    ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size(void)
.text:00001616                 cmp     [ebp+var_40], eax
.text:00001619                 jnb     loc_172D
.text:0000161F                 mov     edx, [ebp+var_40]
.text:00001622                 push    edx
.text:00001623                 mov     ecx, [ebp+arg_C]
.text:00001626                 call    ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[](uint)
.text:0000162B                 mov     [ebp+var_44], eax
.text:0000162E                 mov     eax, [ebp+var_44]
.text:00001631                 movzx   ecx, byte ptr [eax]
.text:00001634                 test    ecx, ecx
.text:00001636                 jz      short loc_1679
.text:00001638                 mov     edx, [ebp+var_44]
.text:0000163B                 mov     eax, dword ptr [ebp+var_28]
.text:0000163E                 add     eax, [edx+18h]
.text:00001641                 mov     ecx, dword ptr [ebp+var_28+4]
.text:00001644                 adc     ecx, [edx+1Ch]
.text:00001647                 mov     dword ptr [ebp+var_28], eax
.text:0000164A                 mov     dword ptr [ebp+var_28+4], ecx
.text:0000164D                 mov     edx, [ebp+var_44]
.text:00001650                 mov     eax, [ebp+var_3C]
.text:00001653                 add     eax, [edx+18h]
.text:00001656                 mov     ecx, [ebp+var_38]
.text:00001659                 adc     ecx, [edx+1Ch]
.text:0000165C                 mov     [ebp+var_3C], eax
.text:0000165F                 mov     [ebp+var_38], ecx
.text:00001662                 mov     edx, [ebp+var_34]
.text:00001665                 add     edx, 1
.text:00001668                 mov     eax, [ebp+var_30]
.text:0000166B                 adc     eax, 0
.text:0000166E                 mov     [ebp+var_34], edx
.text:00001671                 mov     [ebp+var_30], eax
.text:00001674                 jmp     loc_1704
.text:00001679 ; ---------------------------------------------------------------------------
.text:00001679
.text:00001679 loc_1679:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D6j
.text:00001679                 mov     ecx, [ebp+var_44]
.text:0000167C                 mov     edx, [ecx+8]
.text:0000167F                 push    edx
.text:00001680                 mov     ecx, [ebp+arg_8]
.text:00001683                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00001688                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00001689                 lea     ecx, [ebp+var_B0] ; this
.text:0000168F                 call    ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)
.text:00001694                 mov     byte ptr [ebp+var_4], 1
.text:00001698                 lea     eax, [ebp+var_B0]
.text:0000169E                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:0000169F                 mov     ecx, [ebp+arg_4] ; this
.text:000016A2                 call    ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)
.text:000016A7                 test    eax, eax
.text:000016A9                 jz      short loc_16DE
.text:000016AB                 mov     [ebp+var_65C], 80004001h
.text:000016B5                 mov     byte ptr [ebp+var_4], 0
.text:000016B9                 lea     ecx, [ebp+var_B0] ; this
.text:000016BF                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000016C4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000016CB                 lea     ecx, [ebp+var_18]
.text:000016CE                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000016D3                 mov     eax, [ebp+var_65C]
.text:000016D9                 jmp     loc_3784
.text:000016DE ; ---------------------------------------------------------------------------
.text:000016DE
.text:000016DE loc_16DE:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+149j
.text:000016DE                 lea     ecx, [ebp+var_B0] ; this
.text:000016E4                 call    ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetLocalFullSize(void)
.text:000016E9                 add     eax, dword ptr [ebp+var_28]
.text:000016EC                 adc     edx, dword ptr [ebp+var_28+4]
.text:000016EF                 mov     dword ptr [ebp+var_28], eax
.text:000016F2                 mov     dword ptr [ebp+var_28+4], edx
.text:000016F5                 mov     byte ptr [ebp+var_4], 0
.text:000016F9                 lea     ecx, [ebp+var_B0] ; this
.text:000016FF                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00001704
.text:00001704 loc_1704:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+114j
.text:00001704                 mov     ecx, dword ptr [ebp+var_28]
.text:00001707                 add     ecx, 1Eh
.text:0000170A                 mov     edx, dword ptr [ebp+var_28+4]
.text:0000170D                 adc     edx, 0
.text:00001710                 mov     dword ptr [ebp+var_28], ecx
.text:00001713                 mov     dword ptr [ebp+var_28+4], edx
.text:00001716                 mov     eax, dword ptr [ebp+var_28]
.text:00001719                 add     eax, 2Eh ; '.'
.text:0000171C                 mov     ecx, dword ptr [ebp+var_28+4]
.text:0000171F                 adc     ecx, 0
.text:00001722                 mov     dword ptr [ebp+var_28], eax
.text:00001725                 mov     dword ptr [ebp+var_28+4], ecx
.text:00001728                 jmp     loc_1605
.text:0000172D ; ---------------------------------------------------------------------------
.text:0000172D
.text:0000172D loc_172D:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B9j
.text:0000172D                 cmp     [ebp+arg_14], 0
.text:00001731                 jz      short loc_1749
.text:00001733                 mov     ecx, [ebp+arg_14]
.text:00001736                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000173B                 xor     edx, edx
.text:0000173D                 add     eax, dword ptr [ebp+var_28]
.text:00001740                 adc     edx, dword ptr [ebp+var_28+4]
.text:00001743                 mov     dword ptr [ebp+var_28], eax
.text:00001746                 mov     dword ptr [ebp+var_28+4], edx
.text:00001749
.text:00001749 loc_1749:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1D1j
.text:00001749                 mov     eax, dword ptr [ebp+var_28]
.text:0000174C                 add     eax, 1
.text:0000174F                 mov     ecx, dword ptr [ebp+var_28+4]
.text:00001752                 adc     ecx, 0
.text:00001755                 mov     dword ptr [ebp+var_28], eax
.text:00001758                 mov     dword ptr [ebp+var_28+4], ecx
.text:0000175B                 mov     esi, esp
.text:0000175D                 mov     edx, dword ptr [ebp+var_28+4]
.text:00001760                 push    edx
.text:00001761                 mov     eax, dword ptr [ebp+var_28]
.text:00001764                 push    eax
.text:00001765                 mov     ecx, [ebp+arg_18]
.text:00001768                 mov     edx, [ecx]
.text:0000176A                 mov     eax, [ebp+arg_18]
.text:0000176D                 push    eax
.text:0000176E                 mov     ecx, [edx+0Ch]
.text:00001771                 call    ecx
.text:00001773                 cmp     esi, esp
.text:00001775                 call    __RTC_CheckEsp
.text:0000177A                 mov     edx, [ebp+arg_10]
.text:0000177D                 push    edx             ; struct NArchive::NZip::CCompressionMethodMode *
.text:0000177E                 lea     ecx, [ebp+var_128] ; this
.text:00001784                 call    ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)
.text:00001789                 mov     byte ptr [ebp+var_4], 2
.text:0000178D                 mov     dword ptr [ebp+var_28], 0
.text:00001794                 mov     dword ptr [ebp+var_28+4], 0
.text:0000179B                 lea     ecx, [ebp+var_178] ; this
.text:000017A1                 call    ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)
.text:000017A6                 mov     byte ptr [ebp+var_4], 3
.text:000017AA                 cmp     [ebp+arg_10], 0
.text:000017AE                 jz      short loc_17BF
.text:000017B0                 mov     eax, [ebp+arg_10]
.text:000017B3                 push    eax
.text:000017B4                 lea     ecx, [ebp+var_178]
.text:000017BA                 call    ??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::operator=(NArchive::NZip::CCompressionMethodMode const &)
.text:000017BF
.text:000017BF loc_17BF:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+24Ej
.text:000017BF                 mov     ecx, [ebp+arg_10]
.text:000017C2                 mov     edx, [ecx+10h]
.text:000017C5                 mov     [ebp+var_180], edx
.text:000017CB                 mov     [ebp+var_184], 40h ; '@'
.text:000017D5                 cmp     [ebp+var_180], 40h ; '@'
.text:000017DC                 jbe     short loc_17E8
.text:000017DE                 mov     [ebp+var_180], 40h ; '@'
.text:000017E8
.text:000017E8 loc_17E8:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+27Cj
.text:000017E8                 cmp     [ebp+var_180], 40h ; '@'
.text:000017EF                 jbe     short loc_17FB
.text:000017F1                 mov     [ebp+var_180], 40h ; '@'
.text:000017FB
.text:000017FB loc_17FB:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+28Fj
.text:000017FB                 cmp     [ebp+var_180], 1
.text:00001802                 jnb     short loc_180E
.text:00001804                 mov     [ebp+var_180], 1
.text:0000180E
.text:0000180E loc_180E:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2A2j
.text:0000180E                 mov     [ebp+var_188], 2000000h
.text:00001818                 mov     [ebp+var_18C], 10000h
.text:00001822                 cmp     [ebp+arg_10], 0
.text:00001826                 jz      short loc_183D
.text:00001828                 cmp     [ebp+var_180], 1
.text:0000182F                 jbe     short loc_183D
.text:00001831                 mov     [ebp+var_6C0], 1
.text:0000183B                 jmp     short loc_1847
.text:0000183D ; ---------------------------------------------------------------------------
.text:0000183D
.text:0000183D loc_183D:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2C6j
.text:0000183D                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2CFj
.text:0000183D                 mov     [ebp+var_6C0], 0
.text:00001847
.text:00001847 loc_1847:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2DBj
.text:00001847                 mov     al, byte ptr [ebp+var_6C0]
.text:0000184D                 mov     [ebp+var_18D], al
.text:00001853                 cmp     [ebp+var_30], 0
.text:00001857                 ja      short loc_1868
.text:00001859                 jb      short loc_1861
.text:0000185B                 cmp     [ebp+var_34], 1
.text:0000185F                 ja      short loc_1868
.text:00001861
.text:00001861 loc_1861:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2F9j
.text:00001861                 mov     [ebp+var_18D], 0
.text:00001868
.text:00001868 loc_1868:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2F7j
.text:00001868                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2FFj
.text:00001868                 mov     ecx, [ebp+arg_10]
.text:0000186B                 add     ecx, 18h
.text:0000186E                 call    ?Front@?$CRecordVector@E@@QBEABEXZ ; CRecordVector<uchar>::Front(void)
.text:00001873                 mov     cl, [eax]
.text:00001875                 mov     [ebp+var_18E], cl
.text:0000187B                 movzx   edx, [ebp+var_18D]
.text:00001882                 test    edx, edx
.text:00001884                 jnz     short loc_18C5
.text:00001886                 push    0Dh             ; unsigned __int32
.text:00001888                 lea     ecx, [ebp+var_178] ; this
.text:0000188E                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00001893                 test    eax, eax
.text:00001895                 jge     short loc_18C0
.text:00001897                 movzx   eax, [ebp+var_164]
.text:0000189E                 test    eax, eax
.text:000018A0                 jnz     short loc_18AE
.text:000018A2                 movzx   ecx, [ebp+var_18E]
.text:000018A9                 cmp     ecx, 0Ch
.text:000018AC                 jnz     short loc_18C0
.text:000018AE
.text:000018AE loc_18AE:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+340j
.text:000018AE                 mov     edx, [ebp+var_180]
.text:000018B4                 push    edx             ; unsigned int
.text:000018B5                 lea     ecx, [ebp+var_178] ; this
.text:000018BB                 call    ?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads(uint)
.text:000018C0
.text:000018C0 loc_18C0:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+335j
.text:000018C0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+34Cj
.text:000018C0                 jmp     loc_1A68
.text:000018C5 ; ---------------------------------------------------------------------------
.text:000018C5
.text:000018C5 loc_18C5:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+324j
.text:000018C5                 movzx   eax, [ebp+var_18E]
.text:000018CC                 test    eax, eax
.text:000018CE                 jnz     short loc_18E5
.text:000018D0                 mov     ecx, [ebp+arg_10]
.text:000018D3                 movzx   edx, byte ptr [ecx+24h]
.text:000018D7                 test    edx, edx
.text:000018D9                 jnz     short loc_18E5
.text:000018DB                 mov     [ebp+var_180], 1
.text:000018E5
.text:000018E5 loc_18E5:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+36Ej
.text:000018E5                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+379j
.text:000018E5                 movzx   eax, [ebp+var_18E]
.text:000018EC                 cmp     eax, 0Ch
.text:000018EF                 jnz     loc_19EB
.text:000018F5                 lea     ecx, [ebp+var_195]
.text:000018FB                 push    ecx             ; bool *
.text:000018FC                 lea     ecx, [ebp+var_178] ; this
.text:00001902                 call    ?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z ; CMethodProps::Get_BZip2_NumThreads(bool &)
.text:00001907                 mov     [ebp+var_1A0], eax
.text:0000190D                 movzx   edx, [ebp+var_195]
.text:00001914                 test    edx, edx
.text:00001916                 jnz     loc_19D7
.text:0000191C                 mov     eax, [ebp+var_30]
.text:0000191F                 push    eax
.text:00001920                 mov     ecx, [ebp+var_34]
.text:00001923                 push    ecx
.text:00001924                 mov     edx, [ebp+var_38]
.text:00001927                 push    edx
.text:00001928                 mov     eax, [ebp+var_3C]
.text:0000192B                 push    eax
.text:0000192C                 call    __aulldiv
.text:00001931                 mov     [ebp+var_1A8], eax
.text:00001937                 mov     [ebp+var_1A4], edx
.text:0000193D                 lea     ecx, [ebp+var_178] ; this
.text:00001943                 call    ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_BZip2_BlockSize(void)
.text:00001948                 mov     [ebp+var_1AC], eax
.text:0000194E                 mov     ecx, [ebp+var_1AC]
.text:00001954                 xor     edx, edx
.text:00001956                 push    edx
.text:00001957                 push    ecx
.text:00001958                 mov     eax, [ebp+var_1A4]
.text:0000195E                 push    eax
.text:0000195F                 mov     ecx, [ebp+var_1A8]
.text:00001965                 push    ecx
.text:00001966                 call    __aulldiv
.text:0000196B                 add     eax, 1
.text:0000196E                 adc     edx, 0
.text:00001971                 mov     [ebp+var_1B4], eax
.text:00001977                 mov     [ebp+var_1B0], edx
.text:0000197D                 mov     [ebp+var_1A0], 20h ; ' '
.text:00001987                 mov     edx, [ebp+var_1A0]
.text:0000198D                 xor     eax, eax
.text:0000198F                 mov     [ebp+var_6C8], edx
.text:00001995                 mov     [ebp+var_6C4], eax
.text:0000199B                 mov     ecx, [ebp+var_1B0]
.text:000019A1                 cmp     ecx, [ebp+var_6C4]
.text:000019A7                 ja      short loc_19C5
.text:000019A9                 jb      short loc_19B9
.text:000019AB                 mov     edx, [ebp+var_1B4]
.text:000019B1                 cmp     edx, [ebp+var_6C8]
.text:000019B7                 jnb     short loc_19C5
.text:000019B9
.text:000019B9 loc_19B9:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+449j
.text:000019B9                 mov     eax, [ebp+var_1B4]
.text:000019BF                 mov     [ebp+var_1A0], eax
.text:000019C5
.text:000019C5 loc_19C5:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+447j
.text:000019C5                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+457j
.text:000019C5                 mov     ecx, [ebp+var_1A0]
.text:000019CB                 push    ecx             ; unsigned int
.text:000019CC                 lea     ecx, [ebp+var_178] ; this
.text:000019D2                 call    ?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads(uint)
.text:000019D7
.text:000019D7 loc_19D7:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+3B6j
.text:000019D7                 mov     eax, [ebp+var_180]
.text:000019DD                 xor     edx, edx
.text:000019DF                 div     [ebp+var_1A0]
.text:000019E5                 mov     [ebp+var_180], eax
.text:000019EB
.text:000019EB loc_19EB:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+38Fj
.text:000019EB                 movzx   edx, [ebp+var_18E]
.text:000019F2                 cmp     edx, 0Eh
.text:000019F5                 jnz     short loc_1A23
.text:000019F7                 lea     eax, [ebp+var_1B9]
.text:000019FD                 push    eax             ; bool *
.text:000019FE                 lea     ecx, [ebp+var_178] ; this
.text:00001A04                 call    ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z ; CMethodProps::Get_Lzma_NumThreads(bool &)
.text:00001A09                 mov     [ebp+var_1C4], eax
.text:00001A0F                 mov     eax, [ebp+var_180]
.text:00001A15                 xor     edx, edx
.text:00001A17                 div     [ebp+var_1C4]
.text:00001A1D                 mov     [ebp+var_180], eax
.text:00001A23
.text:00001A23 loc_1A23:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+495j
.text:00001A23                 mov     ecx, [ebp+var_180]
.text:00001A29                 xor     edx, edx
.text:00001A2B                 mov     [ebp+var_6D0], ecx
.text:00001A31                 mov     [ebp+var_6CC], edx
.text:00001A37                 mov     eax, [ebp+var_6CC]
.text:00001A3D                 cmp     eax, [ebp+var_30]
.text:00001A40                 jb      short loc_1A58
.text:00001A42                 ja      short loc_1A4F
.text:00001A44                 mov     ecx, [ebp+var_6D0]
.text:00001A4A                 cmp     ecx, [ebp+var_34]
.text:00001A4D                 jbe     short loc_1A58
.text:00001A4F
.text:00001A4F loc_1A4F:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+4E2j
.text:00001A4F                 mov     edx, [ebp+var_34]
.text:00001A52                 mov     [ebp+var_180], edx
.text:00001A58
.text:00001A58 loc_1A58:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+4E0j
.text:00001A58                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+4EDj
.text:00001A58                 cmp     [ebp+var_180], 1
.text:00001A5F                 ja      short loc_1A68
.text:00001A61                 mov     [ebp+var_18D], 0
.text:00001A68
.text:00001A68 loc_1A68:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *):loc_18C0j
.text:00001A68                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+4FFj
.text:00001A68                 movzx   eax, [ebp+var_18D]
.text:00001A6F                 test    eax, eax
.text:00001A71                 jnz     short loc_1ADE
.text:00001A73                 lea     ecx, [ebp+var_18]
.text:00001A76                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:00001A7B                 push    eax             ; int
.text:00001A7C                 mov     ecx, [ebp+arg_18]
.text:00001A7F                 push    ecx             ; struct IProgress *
.text:00001A80                 mov     edx, [ebp+arg_14]
.text:00001A83                 push    edx             ; int
.text:00001A84                 lea     eax, [ebp+var_178]
.text:00001A8A                 push    eax             ; NArchive::NZip::CCompressionMethodMode *
.text:00001A8B                 mov     ecx, [ebp+arg_C]
.text:00001A8E                 push    ecx             ; int
.text:00001A8F                 mov     edx, [ebp+arg_8]
.text:00001A92                 push    edx             ; int
.text:00001A93                 mov     eax, [ebp+arg_4]
.text:00001A96                 push    eax             ; NArchive::NZip::CInArchive *
.text:00001A97                 mov     ecx, [ebp+arg_0]
.text:00001A9A                 push    ecx             ; NArchive::NZip::COutArchive *
.text:00001A9B                 call    ?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)
.text:00001AA0                 mov     [ebp+var_660], eax
.text:00001AA6                 mov     byte ptr [ebp+var_4], 2
.text:00001AAA                 lea     ecx, [ebp+var_178] ; this
.text:00001AB0                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001AB5                 mov     byte ptr [ebp+var_4], 0
.text:00001AB9                 lea     ecx, [ebp+var_128] ; this
.text:00001ABF                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00001AC4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001ACB                 lea     ecx, [ebp+var_18]
.text:00001ACE                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00001AD3                 mov     eax, [ebp+var_660]
.text:00001AD9                 jmp     loc_3784
.text:00001ADE ; ---------------------------------------------------------------------------
.text:00001ADE
.text:00001ADE loc_1ADE:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+511j
.text:00001ADE                 lea     ecx, [ebp+var_1D4]
.text:00001AE4                 call    ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00001AE9                 mov     byte ptr [ebp+var_4], 4
.text:00001AED                 push    10h             ; unsigned int
.text:00001AEF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001AF4                 add     esp, 4
.text:00001AF7                 mov     [ebp+var_668], eax
.text:00001AFD                 mov     byte ptr [ebp+var_4], 5
.text:00001B01                 cmp     [ebp+var_668], 0
.text:00001B08                 jz      short loc_1B1D
.text:00001B0A                 mov     ecx, [ebp+var_668] ; this
.text:00001B10                 call    ??0CMtProgressMixer@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMtProgressMixer::CMtProgressMixer(void)
.text:00001B15                 mov     [ebp+var_6D4], eax
.text:00001B1B                 jmp     short loc_1B27
.text:00001B1D ; ---------------------------------------------------------------------------
.text:00001B1D
.text:00001B1D loc_1B1D:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+5A8j
.text:00001B1D                 mov     [ebp+var_6D4], 0
.text:00001B27
.text:00001B27 loc_1B27:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+5BBj
.text:00001B27                 mov     edx, [ebp+var_6D4]
.text:00001B2D                 mov     [ebp+var_664], edx
.text:00001B33                 mov     byte ptr [ebp+var_4], 4
.text:00001B37                 mov     eax, [ebp+var_664]
.text:00001B3D                 mov     [ebp+var_1DC], eax
.text:00001B43                 mov     ecx, [ebp+var_1DC]
.text:00001B49                 push    ecx
.text:00001B4A                 lea     ecx, [ebp+var_1E4]
.text:00001B50                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00001B55                 mov     byte ptr [ebp+var_4], 6
.text:00001B59                 push    1               ; bool
.text:00001B5B                 mov     edx, [ebp+arg_18]
.text:00001B5E                 push    edx             ; struct IProgress *
.text:00001B5F                 mov     ecx, [ebp+var_1DC] ; this
.text:00001B65                 call    ?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)
.text:00001B6A                 lea     ecx, [ebp+var_234]
.text:00001B70                 call    ??0CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::CMtCompressProgressMixer(void)
.text:00001B75                 mov     byte ptr [ebp+var_4], 7
.text:00001B79                 mov     ecx, [ebp+var_1DC]
.text:00001B7F                 add     ecx, 0Ch
.text:00001B82                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001B87                 push    eax             ; struct ICompressProgressInfo *
.text:00001B88                 mov     eax, [ebp+var_180]
.text:00001B8E                 push    eax             ; int
.text:00001B8F                 lea     ecx, [ebp+var_234] ; this
.text:00001B95                 call    ?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z ; CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)
.text:00001B9A                 push    10000h
.text:00001B9F                 lea     ecx, [ebp+var_264]
.text:00001BA5                 call    ??0CMemBlockManagerMt@@QAE@I@Z ; CMemBlockManagerMt::CMemBlockManagerMt(uint)
.text:00001BAA                 mov     byte ptr [ebp+var_4], 8
.text:00001BAE                 lea     ecx, [ebp+var_264]
.text:00001BB4                 push    ecx             ; struct CMemBlockManagerMt *
.text:00001BB5                 lea     ecx, [ebp+var_27C] ; this
.text:00001BBB                 call    ??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z ; NArchive::NZip::CMemRefs::CMemRefs(CMemBlockManagerMt *)
.text:00001BC0                 mov     byte ptr [ebp+var_4], 9
.text:00001BC4                 lea     ecx, [ebp+var_290] ; this
.text:00001BCA                 call    ??0CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::CThreads(void)
.text:00001BCF                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001BD3                 lea     ecx, [ebp+var_2A4]
.text:00001BD9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00001BDE                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001BE2                 lea     ecx, [ebp+var_2B8]
.text:00001BE8                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:00001BED                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001BF1                 push    0               ; unsigned int
.text:00001BF3                 mov     edx, [ebp+var_180]
.text:00001BF9                 shl     edx, 9
.text:00001BFC                 push    edx             ; unsigned int
.text:00001BFD                 lea     ecx, [ebp+var_264] ; this
.text:00001C03                 call    ?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z ; CMemBlockManagerMt::AllocateSpaceAlways(uint,uint)
.text:00001C08                 mov     [ebp+var_2C0], eax
.text:00001C0E                 cmp     [ebp+var_2C0], 0
.text:00001C15                 jz      loc_1CD7
.text:00001C1B                 mov     eax, [ebp+var_2C0]
.text:00001C21                 mov     [ebp+var_66C], eax
.text:00001C27                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001C2B                 lea     ecx, [ebp+var_2B8]
.text:00001C31                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00001C36                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001C3A                 lea     ecx, [ebp+var_2A4]
.text:00001C40                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00001C45                 mov     byte ptr [ebp+var_4], 9
.text:00001C49                 lea     ecx, [ebp+var_290] ; this
.text:00001C4F                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00001C54                 mov     byte ptr [ebp+var_4], 8
.text:00001C58                 lea     ecx, [ebp+var_27C] ; this
.text:00001C5E                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00001C63                 mov     byte ptr [ebp+var_4], 7
.text:00001C67                 lea     ecx, [ebp+var_264] ; this
.text:00001C6D                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00001C72                 mov     byte ptr [ebp+var_4], 6
.text:00001C76                 lea     ecx, [ebp+var_234] ; this
.text:00001C7C                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00001C81                 mov     byte ptr [ebp+var_4], 4
.text:00001C85                 lea     ecx, [ebp+var_1E4]
.text:00001C8B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001C90                 mov     byte ptr [ebp+var_4], 3
.text:00001C94                 lea     ecx, [ebp+var_1D4]
.text:00001C9A                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00001C9F                 mov     byte ptr [ebp+var_4], 2
.text:00001CA3                 lea     ecx, [ebp+var_178] ; this
.text:00001CA9                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001CAE                 mov     byte ptr [ebp+var_4], 0
.text:00001CB2                 lea     ecx, [ebp+var_128] ; this
.text:00001CB8                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00001CBD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CC4                 lea     ecx, [ebp+var_18]
.text:00001CC7                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00001CCC                 mov     eax, [ebp+var_66C]
.text:00001CD2                 jmp     loc_3784
.text:00001CD7 ; ---------------------------------------------------------------------------
.text:00001CD7
.text:00001CD7 loc_1CD7:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6B5j
.text:00001CD7                 mov     [ebp+var_40], 0
.text:00001CDE                 jmp     short loc_1CE9
.text:00001CE0 ; ---------------------------------------------------------------------------
.text:00001CE0
.text:00001CE0 loc_1CE0:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+7D8j
.text:00001CE0                 mov     ecx, [ebp+var_40]
.text:00001CE3                 add     ecx, 1
.text:00001CE6                 mov     [ebp+var_40], ecx
.text:00001CE9
.text:00001CE9 loc_1CE9:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+77Ej
.text:00001CE9                 mov     ecx, [ebp+arg_C]
.text:00001CEC                 call    ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size(void)
.text:00001CF1                 cmp     [ebp+var_40], eax
.text:00001CF4                 jnb     short loc_1D3A
.text:00001CF6                 lea     ecx, [ebp+var_300] ; this
.text:00001CFC                 call    ??0CMemBlocks2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemBlocks2::CMemBlocks2(void)
.text:00001D01                 mov     [ebp+var_6D8], eax
.text:00001D07                 mov     edx, [ebp+var_6D8]
.text:00001D0D                 mov     [ebp+var_6DC], edx
.text:00001D13                 mov     byte ptr [ebp+var_4], 0Dh
.text:00001D17                 mov     eax, [ebp+var_6DC]
.text:00001D1D                 push    eax             ; struct NArchive::NZip::CMemBlocks2 *
.text:00001D1E                 lea     ecx, [ebp+var_278]
.text:00001D24                 call    ?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::Add(NArchive::NZip::CMemBlocks2 const &)
.text:00001D29                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001D2D                 lea     ecx, [ebp+var_300] ; this
.text:00001D33                 call    ??1CMemBlocks2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemBlocks2::~CMemBlocks2(void)
.text:00001D38                 jmp     short loc_1CE0
.text:00001D3A ; ---------------------------------------------------------------------------
.text:00001D3A
.text:00001D3A loc_1D3A:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+794j
.text:00001D3A                 mov     [ebp+var_304], 0
.text:00001D44                 jmp     short loc_1D55
.text:00001D46 ; ---------------------------------------------------------------------------
.text:00001D46
.text:00001D46 loc_1D46:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+84Cj
.text:00001D46                 mov     ecx, [ebp+var_304]
.text:00001D4C                 add     ecx, 1
.text:00001D4F                 mov     [ebp+var_304], ecx
.text:00001D55
.text:00001D55 loc_1D55:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+7E4j
.text:00001D55                 mov     edx, [ebp+var_304]
.text:00001D5B                 cmp     edx, [ebp+var_180]
.text:00001D61                 jnb     short loc_1DAE
.text:00001D63                 lea     eax, [ebp+var_178]
.text:00001D69                 push    eax             ; struct NArchive::NZip::CCompressionMethodMode *
.text:00001D6A                 lea     ecx, [ebp+var_3CC] ; this
.text:00001D70                 call    ??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CCompressionMethodMode const &)
.text:00001D75                 mov     [ebp+var_6E0], eax
.text:00001D7B                 mov     ecx, [ebp+var_6E0]
.text:00001D81                 mov     [ebp+var_6E4], ecx
.text:00001D87                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001D8B                 mov     edx, [ebp+var_6E4]
.text:00001D91                 push    edx             ; struct NArchive::NZip::CThreadInfo *
.text:00001D92                 lea     ecx, [ebp+var_290]
.text:00001D98                 call    ?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::Add(NArchive::NZip::CThreadInfo const &)
.text:00001D9D                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001DA1                 lea     ecx, [ebp+var_3CC] ; this
.text:00001DA7                 call    ??1CThreadInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreadInfo::~CThreadInfo(void)
.text:00001DAC                 jmp     short loc_1D46
.text:00001DAE ; ---------------------------------------------------------------------------
.text:00001DAE
.text:00001DAE loc_1DAE:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+801j
.text:00001DAE                 mov     [ebp+var_304], 0
.text:00001DB8                 jmp     short loc_1DC9
.text:00001DBA ; ---------------------------------------------------------------------------
.text:00001DBA
.text:00001DBA loc_1DBA:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *):loc_21A6j
.text:00001DBA                 mov     eax, [ebp+var_304]
.text:00001DC0                 add     eax, 1
.text:00001DC3                 mov     [ebp+var_304], eax
.text:00001DC9
.text:00001DC9 loc_1DC9:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+858j
.text:00001DC9                 mov     ecx, [ebp+var_304]
.text:00001DCF                 cmp     ecx, [ebp+var_180]
.text:00001DD5                 jnb     loc_21AB
.text:00001DDB                 mov     edx, [ebp+var_304]
.text:00001DE1                 push    edx
.text:00001DE2                 lea     ecx, [ebp+var_290]
.text:00001DE8                 call    ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[](uint)
.text:00001DED                 mov     [ebp+var_3D0], eax
.text:00001DF3                 mov     ecx, [ebp+var_3D0] ; this
.text:00001DF9                 call    ?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ ; NArchive::NZip::CThreadInfo::CreateEvents(void)
.text:00001DFE                 mov     [ebp+var_3D4], eax
.text:00001E04                 cmp     [ebp+var_3D4], 0
.text:00001E0B                 jz      loc_1ECD
.text:00001E11                 mov     eax, [ebp+var_3D4]
.text:00001E17                 mov     [ebp+var_670], eax
.text:00001E1D                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001E21                 lea     ecx, [ebp+var_2B8]
.text:00001E27                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00001E2C                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001E30                 lea     ecx, [ebp+var_2A4]
.text:00001E36                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00001E3B                 mov     byte ptr [ebp+var_4], 9
.text:00001E3F                 lea     ecx, [ebp+var_290] ; this
.text:00001E45                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00001E4A                 mov     byte ptr [ebp+var_4], 8
.text:00001E4E                 lea     ecx, [ebp+var_27C] ; this
.text:00001E54                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00001E59                 mov     byte ptr [ebp+var_4], 7
.text:00001E5D                 lea     ecx, [ebp+var_264] ; this
.text:00001E63                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00001E68                 mov     byte ptr [ebp+var_4], 6
.text:00001E6C                 lea     ecx, [ebp+var_234] ; this
.text:00001E72                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00001E77                 mov     byte ptr [ebp+var_4], 4
.text:00001E7B                 lea     ecx, [ebp+var_1E4]
.text:00001E81                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001E86                 mov     byte ptr [ebp+var_4], 3
.text:00001E8A                 lea     ecx, [ebp+var_1D4]
.text:00001E90                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00001E95                 mov     byte ptr [ebp+var_4], 2
.text:00001E99                 lea     ecx, [ebp+var_178] ; this
.text:00001E9F                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001EA4                 mov     byte ptr [ebp+var_4], 0
.text:00001EA8                 lea     ecx, [ebp+var_128] ; this
.text:00001EAE                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00001EB3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EBA                 lea     ecx, [ebp+var_18]
.text:00001EBD                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00001EC2                 mov     eax, [ebp+var_670]
.text:00001EC8                 jmp     loc_3784
.text:00001ECD ; ---------------------------------------------------------------------------
.text:00001ECD
.text:00001ECD loc_1ECD:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+8ABj
.text:00001ECD                 push    50h ; 'P'       ; unsigned int
.text:00001ECF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001ED4                 add     esp, 4
.text:00001ED7                 mov     [ebp+var_678], eax
.text:00001EDD                 mov     byte ptr [ebp+var_4], 0Fh
.text:00001EE1                 cmp     [ebp+var_678], 0
.text:00001EE8                 jz      short loc_1F04
.text:00001EEA                 lea     ecx, [ebp+var_264]
.text:00001EF0                 push    ecx
.text:00001EF1                 mov     ecx, [ebp+var_678]
.text:00001EF7                 call    ??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z ; COutMemStream::COutMemStream(CMemBlockManagerMt *)
.text:00001EFC                 mov     [ebp+var_6E8], eax
.text:00001F02                 jmp     short loc_1F0E
.text:00001F04 ; ---------------------------------------------------------------------------
.text:00001F04
.text:00001F04 loc_1F04:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+988j
.text:00001F04                 mov     [ebp+var_6E8], 0
.text:00001F0E
.text:00001F0E loc_1F0E:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+9A2j
.text:00001F0E                 mov     edx, [ebp+var_6E8]
.text:00001F14                 mov     [ebp+var_674], edx
.text:00001F1A                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001F1E                 mov     eax, [ebp+var_3D0]
.text:00001F24                 mov     ecx, [ebp+var_674]
.text:00001F2A                 mov     [eax+18h], ecx
.text:00001F2D                 mov     edx, [ebp+var_3D0]
.text:00001F33                 mov     ecx, [edx+18h]  ; this
.text:00001F36                 call    ?CreateEvents@COutMemStream@@QAEHXZ ; COutMemStream::CreateEvents(void)
.text:00001F3B                 mov     [ebp+var_3D8], eax
.text:00001F41                 cmp     [ebp+var_3D8], 0
.text:00001F48                 jz      loc_200A
.text:00001F4E                 mov     eax, [ebp+var_3D8]
.text:00001F54                 mov     [ebp+var_67C], eax
.text:00001F5A                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001F5E                 lea     ecx, [ebp+var_2B8]
.text:00001F64                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00001F69                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001F6D                 lea     ecx, [ebp+var_2A4]
.text:00001F73                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00001F78                 mov     byte ptr [ebp+var_4], 9
.text:00001F7C                 lea     ecx, [ebp+var_290] ; this
.text:00001F82                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00001F87                 mov     byte ptr [ebp+var_4], 8
.text:00001F8B                 lea     ecx, [ebp+var_27C] ; this
.text:00001F91                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00001F96                 mov     byte ptr [ebp+var_4], 7
.text:00001F9A                 lea     ecx, [ebp+var_264] ; this
.text:00001FA0                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00001FA5                 mov     byte ptr [ebp+var_4], 6
.text:00001FA9                 lea     ecx, [ebp+var_234] ; this
.text:00001FAF                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00001FB4                 mov     byte ptr [ebp+var_4], 4
.text:00001FB8                 lea     ecx, [ebp+var_1E4]
.text:00001FBE                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001FC3                 mov     byte ptr [ebp+var_4], 3
.text:00001FC7                 lea     ecx, [ebp+var_1D4]
.text:00001FCD                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00001FD2                 mov     byte ptr [ebp+var_4], 2
.text:00001FD6                 lea     ecx, [ebp+var_178] ; this
.text:00001FDC                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00001FE1                 mov     byte ptr [ebp+var_4], 0
.text:00001FE5                 lea     ecx, [ebp+var_128] ; this
.text:00001FEB                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00001FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001FF7                 lea     ecx, [ebp+var_18]
.text:00001FFA                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00001FFF                 mov     eax, [ebp+var_67C]
.text:00002005                 jmp     loc_3784
.text:0000200A ; ---------------------------------------------------------------------------
.text:0000200A
.text:0000200A loc_200A:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+9E8j
.text:0000200A                 mov     ecx, [ebp+var_3D0]
.text:00002010                 mov     edx, [ecx+18h]
.text:00002013                 push    edx
.text:00002014                 mov     ecx, [ebp+var_3D0]
.text:0000201A                 add     ecx, 1Ch
.text:0000201D                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:00002022                 mov     eax, [ebp+var_3D0]
.text:00002028                 mov     byte ptr [eax+0B8h], 1
.text:0000202F                 push    10h             ; unsigned int
.text:00002031                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002036                 add     esp, 4
.text:00002039                 mov     [ebp+var_684], eax
.text:0000203F                 mov     byte ptr [ebp+var_4], 10h
.text:00002043                 cmp     [ebp+var_684], 0
.text:0000204A                 jz      short loc_205F
.text:0000204C                 mov     ecx, [ebp+var_684]
.text:00002052                 call    ??0CMtCompressProgress@@QAE@XZ ; CMtCompressProgress::CMtCompressProgress(void)
.text:00002057                 mov     [ebp+var_6EC], eax
.text:0000205D                 jmp     short loc_2069
.text:0000205F ; ---------------------------------------------------------------------------
.text:0000205F
.text:0000205F loc_205F:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+AEAj
.text:0000205F                 mov     [ebp+var_6EC], 0
.text:00002069
.text:00002069 loc_2069:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+AFDj
.text:00002069                 mov     ecx, [ebp+var_6EC]
.text:0000206F                 mov     [ebp+var_680], ecx
.text:00002075                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002079                 mov     edx, [ebp+var_3D0]
.text:0000207F                 mov     eax, [ebp+var_680]
.text:00002085                 mov     [edx+10h], eax
.text:00002088                 mov     ecx, [ebp+var_3D0]
.text:0000208E                 mov     edx, [ecx+10h]
.text:00002091                 push    edx
.text:00002092                 mov     ecx, [ebp+var_3D0]
.text:00002098                 add     ecx, 14h
.text:0000209B                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:000020A0                 mov     eax, [ebp+var_304]
.text:000020A6                 push    eax             ; int
.text:000020A7                 lea     ecx, [ebp+var_234]
.text:000020AD                 push    ecx             ; struct CMtCompressProgressMixer *
.text:000020AE                 mov     edx, [ebp+var_3D0]
.text:000020B4                 mov     ecx, [edx+10h]  ; this
.text:000020B7                 call    ?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z ; CMtCompressProgress::Init(CMtCompressProgressMixer *,int)
.text:000020BC                 mov     eax, [ebp+var_3D0]
.text:000020C2                 mov     dword ptr [eax+0C0h], 0
.text:000020CC                 mov     ecx, [ebp+var_3D0] ; this
.text:000020D2                 call    ?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ ; NArchive::NZip::CThreadInfo::CreateThread(void)
.text:000020D7                 mov     [ebp+var_3DC], eax
.text:000020DD                 cmp     [ebp+var_3DC], 0
.text:000020E4                 jz      loc_21A6
.text:000020EA                 mov     ecx, [ebp+var_3DC]
.text:000020F0                 mov     [ebp+var_688], ecx
.text:000020F6                 mov     byte ptr [ebp+var_4], 0Bh
.text:000020FA                 lea     ecx, [ebp+var_2B8]
.text:00002100                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002105                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002109                 lea     ecx, [ebp+var_2A4]
.text:0000210F                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002114                 mov     byte ptr [ebp+var_4], 9
.text:00002118                 lea     ecx, [ebp+var_290] ; this
.text:0000211E                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00002123                 mov     byte ptr [ebp+var_4], 8
.text:00002127                 lea     ecx, [ebp+var_27C] ; this
.text:0000212D                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00002132                 mov     byte ptr [ebp+var_4], 7
.text:00002136                 lea     ecx, [ebp+var_264] ; this
.text:0000213C                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002141                 mov     byte ptr [ebp+var_4], 6
.text:00002145                 lea     ecx, [ebp+var_234] ; this
.text:0000214B                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002150                 mov     byte ptr [ebp+var_4], 4
.text:00002154                 lea     ecx, [ebp+var_1E4]
.text:0000215A                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000215F                 mov     byte ptr [ebp+var_4], 3
.text:00002163                 lea     ecx, [ebp+var_1D4]
.text:00002169                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000216E                 mov     byte ptr [ebp+var_4], 2
.text:00002172                 lea     ecx, [ebp+var_178] ; this
.text:00002178                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000217D                 mov     byte ptr [ebp+var_4], 0
.text:00002181                 lea     ecx, [ebp+var_128] ; this
.text:00002187                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000218C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002193                 lea     ecx, [ebp+var_18]
.text:00002196                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000219B                 mov     eax, [ebp+var_688]
.text:000021A1                 jmp     loc_3784
.text:000021A6 ; ---------------------------------------------------------------------------
.text:000021A6
.text:000021A6 loc_21A6:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B84j
.text:000021A6                 jmp     loc_1DBA
.text:000021AB ; ---------------------------------------------------------------------------
.text:000021AB
.text:000021AB loc_21AB:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+875j
.text:000021AB                 mov     [ebp+var_3E0], 0
.text:000021B5                 mov     [ebp+var_3E4], 0
.text:000021BF                 mov     [ebp+var_3E8], 0FFFFFFFFh
.text:000021C9
.text:000021C9 loc_21C9:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CE5j
.text:000021C9                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D3Fj ...
.text:000021C9                 mov     ecx, [ebp+arg_C]
.text:000021CC                 call    ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size(void)
.text:000021D1                 cmp     [ebp+var_3E4], eax
.text:000021D7                 jnb     loc_35DC
.text:000021DD                 lea     ecx, [ebp+var_2B8]
.text:000021E3                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:000021E8                 cmp     eax, [ebp+var_180]
.text:000021EE                 jnb     loc_2AA1
.text:000021F4                 mov     ecx, [ebp+arg_C]
.text:000021F7                 call    ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size(void)
.text:000021FC                 cmp     [ebp+var_3E0], eax
.text:00002202                 jnb     loc_2AA1
.text:00002208                 mov     edx, [ebp+var_3E0]
.text:0000220E                 mov     [ebp+var_6F0], edx
.text:00002214                 mov     eax, [ebp+var_3E0]
.text:0000221A                 add     eax, 1
.text:0000221D                 mov     [ebp+var_3E0], eax
.text:00002223                 mov     ecx, [ebp+var_6F0]
.text:00002229                 push    ecx
.text:0000222A                 mov     ecx, [ebp+arg_C]
.text:0000222D                 call    ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[](uint)
.text:00002232                 mov     [ebp+var_3EC], eax
.text:00002238                 mov     edx, [ebp+var_3EC]
.text:0000223E                 movzx   eax, byte ptr [edx]
.text:00002241                 test    eax, eax
.text:00002243                 jnz     short loc_2247
.text:00002245                 jmp     short loc_21C9
.text:00002247 ; ---------------------------------------------------------------------------
.text:00002247
.text:00002247 loc_2247:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CE3j
.text:00002247                 lea     ecx, [ebp+var_458] ; this
.text:0000224D                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00002252                 mov     byte ptr [ebp+var_4], 11h
.text:00002256                 lea     ecx, [ebp+var_4E0] ; this
.text:0000225C                 call    ??0CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::CItemOut(void)
.text:00002261                 mov     byte ptr [ebp+var_4], 12h
.text:00002265                 mov     ecx, [ebp+var_3EC]
.text:0000226B                 movzx   edx, byte ptr [ecx+1]
.text:0000226F                 test    edx, edx
.text:00002271                 jz      short loc_22A9
.text:00002273                 mov     eax, [ebp+var_3EC]
.text:00002279                 movzx   ecx, byte ptr [eax+2]
.text:0000227D                 test    ecx, ecx
.text:0000227F                 jz      short loc_22A4
.text:00002281                 mov     byte ptr [ebp+var_4], 11h
.text:00002285                 lea     ecx, [ebp+var_4E0] ; this
.text:0000228B                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002290                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002294                 lea     ecx, [ebp+var_458] ; this
.text:0000229A                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000229F                 jmp     loc_21C9
.text:000022A4 ; ---------------------------------------------------------------------------
.text:000022A4
.text:000022A4 loc_22A4:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D1Fj
.text:000022A4                 jmp     loc_23FD
.text:000022A9 ; ---------------------------------------------------------------------------
.text:000022A9
.text:000022A9 loc_22A9:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D11j
.text:000022A9                 mov     edx, [ebp+var_3EC]
.text:000022AF                 mov     eax, [edx+8]
.text:000022B2                 push    eax
.text:000022B3                 mov     ecx, [ebp+arg_8]
.text:000022B6                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:000022BB                 push    eax
.text:000022BC                 lea     ecx, [ebp+var_458]
.text:000022C2                 call    ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItemEx::operator=(NArchive::NZip::CItemEx const &)
.text:000022C7                 lea     ecx, [ebp+var_458]
.text:000022CD                 push    ecx             ; struct NArchive::NZip::CItemEx *
.text:000022CE                 mov     ecx, [ebp+arg_4] ; this
.text:000022D1                 call    ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)
.text:000022D6                 test    eax, eax
.text:000022D8                 jz      loc_23B6
.text:000022DE                 mov     [ebp+var_68C], 80004001h
.text:000022E8                 mov     byte ptr [ebp+var_4], 11h
.text:000022EC                 lea     ecx, [ebp+var_4E0] ; this
.text:000022F2                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000022F7                 mov     byte ptr [ebp+var_4], 0Ch
.text:000022FB                 lea     ecx, [ebp+var_458] ; this
.text:00002301                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002306                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000230A                 lea     ecx, [ebp+var_2B8]
.text:00002310                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002315                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002319                 lea     ecx, [ebp+var_2A4]
.text:0000231F                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002324                 mov     byte ptr [ebp+var_4], 9
.text:00002328                 lea     ecx, [ebp+var_290] ; this
.text:0000232E                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00002333                 mov     byte ptr [ebp+var_4], 8
.text:00002337                 lea     ecx, [ebp+var_27C] ; this
.text:0000233D                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00002342                 mov     byte ptr [ebp+var_4], 7
.text:00002346                 lea     ecx, [ebp+var_264] ; this
.text:0000234C                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002351                 mov     byte ptr [ebp+var_4], 6
.text:00002355                 lea     ecx, [ebp+var_234] ; this
.text:0000235B                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002360                 mov     byte ptr [ebp+var_4], 4
.text:00002364                 lea     ecx, [ebp+var_1E4]
.text:0000236A                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000236F                 mov     byte ptr [ebp+var_4], 3
.text:00002373                 lea     ecx, [ebp+var_1D4]
.text:00002379                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000237E                 mov     byte ptr [ebp+var_4], 2
.text:00002382                 lea     ecx, [ebp+var_178] ; this
.text:00002388                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000238D                 mov     byte ptr [ebp+var_4], 0
.text:00002391                 lea     ecx, [ebp+var_128] ; this
.text:00002397                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000239C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023A3                 lea     ecx, [ebp+var_18]
.text:000023A6                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000023AB                 mov     eax, [ebp+var_68C]
.text:000023B1                 jmp     loc_3784
.text:000023B6 ; ---------------------------------------------------------------------------
.text:000023B6
.text:000023B6 loc_23B6:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D78j
.text:000023B6                 lea     edx, [ebp+var_458]
.text:000023BC                 push    edx
.text:000023BD                 lea     ecx, [ebp+var_4E0]
.text:000023C3                 call    ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)
.text:000023C8                 lea     ecx, [ebp+var_4E0] ; this
.text:000023CE                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:000023D3                 movzx   eax, al
.text:000023D6                 test    eax, eax
.text:000023D8                 jz      short loc_23FD
.text:000023DA                 mov     byte ptr [ebp+var_4], 11h
.text:000023DE                 lea     ecx, [ebp+var_4E0] ; this
.text:000023E4                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000023E9                 mov     byte ptr [ebp+var_4], 0Ch
.text:000023ED                 lea     ecx, [ebp+var_458] ; this
.text:000023F3                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000023F8                 jmp     loc_21C9
.text:000023FD ; ---------------------------------------------------------------------------
.text:000023FD
.text:000023FD loc_23FD:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *):loc_22A4j
.text:000023FD                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+E78j
.text:000023FD                 lea     ecx, [ebp+var_4EC]
.text:00002403                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00002408                 mov     byte ptr [ebp+var_4], 13h
.text:0000240C                 mov     ecx, [ebp+var_1DC]
.text:00002412                 mov     edx, [ecx+8]
.text:00002415                 add     edx, 3Ch ; '<'
.text:00002418                 push    edx             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00002419                 lea     ecx, [ebp+var_4F8] ; this
.text:0000241F                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00002424                 mov     byte ptr [ebp+var_4], 14h
.text:00002428                 lea     ecx, [ebp+var_4EC]
.text:0000242E                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00002433                 mov     esi, esp
.text:00002435                 push    eax
.text:00002436                 mov     eax, [ebp+var_3EC]
.text:0000243C                 mov     ecx, [eax+0Ch]
.text:0000243F                 push    ecx
.text:00002440                 mov     edx, [ebp+arg_18]
.text:00002443                 mov     eax, [edx]
.text:00002445                 mov     ecx, [ebp+arg_18]
.text:00002448                 push    ecx
.text:00002449                 mov     edx, [eax+1Ch]
.text:0000244C                 call    edx
.text:0000244E                 cmp     esi, esp
.text:00002450                 call    __RTC_CheckEsp
.text:00002455                 mov     [ebp+var_500], eax
.text:0000245B                 cmp     [ebp+var_500], 1
.text:00002462                 jnz     loc_2626
.text:00002468                 mov     eax, [ebp+var_3EC]
.text:0000246E                 mov     ecx, dword ptr [ebp+var_28]
.text:00002471                 add     ecx, [eax+18h]
.text:00002474                 mov     edx, dword ptr [ebp+var_28+4]
.text:00002477                 adc     edx, [eax+1Ch]
.text:0000247A                 mov     dword ptr [ebp+var_28], ecx
.text:0000247D                 mov     dword ptr [ebp+var_28+4], edx
.text:00002480                 mov     eax, dword ptr [ebp+var_28]
.text:00002483                 add     eax, 1Eh
.text:00002486                 mov     ecx, dword ptr [ebp+var_28+4]
.text:00002489                 adc     ecx, 0
.text:0000248C                 mov     dword ptr [ebp+var_28], eax
.text:0000248F                 mov     dword ptr [ebp+var_28+4], ecx
.text:00002492                 mov     edx, dword ptr [ebp+var_28+4]
.text:00002495                 push    edx
.text:00002496                 mov     eax, dword ptr [ebp+var_28]
.text:00002499                 push    eax             ; unsigned __int64
.text:0000249A                 mov     ecx, [ebp+var_1DC]
.text:000024A0                 mov     ecx, [ecx+8]    ; this
.text:000024A3                 call    ?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset(unsigned __int64)
.text:000024A8                 mov     esi, esp
.text:000024AA                 push    0
.text:000024AC                 mov     edx, [ebp+arg_18]
.text:000024AF                 mov     eax, [edx]
.text:000024B1                 mov     ecx, [ebp+arg_18]
.text:000024B4                 push    ecx
.text:000024B5                 mov     edx, [eax+20h]
.text:000024B8                 call    edx
.text:000024BA                 cmp     esi, esp
.text:000024BC                 call    __RTC_CheckEsp
.text:000024C1                 mov     [ebp+var_504], eax
.text:000024C7                 cmp     [ebp+var_504], 0
.text:000024CE                 jz      loc_25CC
.text:000024D4                 mov     eax, [ebp+var_504]
.text:000024DA                 mov     [ebp+var_690], eax
.text:000024E0                 mov     byte ptr [ebp+var_4], 13h
.text:000024E4                 lea     ecx, [ebp+var_4F8] ; this
.text:000024EA                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000024EF                 mov     byte ptr [ebp+var_4], 12h
.text:000024F3                 lea     ecx, [ebp+var_4EC]
.text:000024F9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000024FE                 mov     byte ptr [ebp+var_4], 11h
.text:00002502                 lea     ecx, [ebp+var_4E0] ; this
.text:00002508                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:0000250D                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002511                 lea     ecx, [ebp+var_458] ; this
.text:00002517                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000251C                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002520                 lea     ecx, [ebp+var_2B8]
.text:00002526                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000252B                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000252F                 lea     ecx, [ebp+var_2A4]
.text:00002535                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000253A                 mov     byte ptr [ebp+var_4], 9
.text:0000253E                 lea     ecx, [ebp+var_290] ; this
.text:00002544                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00002549                 mov     byte ptr [ebp+var_4], 8
.text:0000254D                 lea     ecx, [ebp+var_27C] ; this
.text:00002553                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00002558                 mov     byte ptr [ebp+var_4], 7
.text:0000255C                 lea     ecx, [ebp+var_264] ; this
.text:00002562                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002567                 mov     byte ptr [ebp+var_4], 6
.text:0000256B                 lea     ecx, [ebp+var_234] ; this
.text:00002571                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002576                 mov     byte ptr [ebp+var_4], 4
.text:0000257A                 lea     ecx, [ebp+var_1E4]
.text:00002580                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002585                 mov     byte ptr [ebp+var_4], 3
.text:00002589                 lea     ecx, [ebp+var_1D4]
.text:0000258F                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00002594                 mov     byte ptr [ebp+var_4], 2
.text:00002598                 lea     ecx, [ebp+var_178] ; this
.text:0000259E                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000025A3                 mov     byte ptr [ebp+var_4], 0
.text:000025A7                 lea     ecx, [ebp+var_128] ; this
.text:000025AD                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000025B2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025B9                 lea     ecx, [ebp+var_18]
.text:000025BC                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000025C1                 mov     eax, [ebp+var_690]
.text:000025C7                 jmp     loc_3784
.text:000025CC ; ---------------------------------------------------------------------------
.text:000025CC
.text:000025CC loc_25CC:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+F6Ej
.text:000025CC                 mov     ecx, [ebp+var_3E0]
.text:000025D2                 sub     ecx, 1
.text:000025D5                 push    ecx
.text:000025D6                 lea     ecx, [ebp+var_278]
.text:000025DC                 call    ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[](uint)
.text:000025E1                 mov     byte ptr [eax+39h], 1
.text:000025E5                 mov     byte ptr [ebp+var_4], 13h
.text:000025E9                 lea     ecx, [ebp+var_4F8] ; this
.text:000025EF                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000025F4                 mov     byte ptr [ebp+var_4], 12h
.text:000025F8                 lea     ecx, [ebp+var_4EC]
.text:000025FE                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002603                 mov     byte ptr [ebp+var_4], 11h
.text:00002607                 lea     ecx, [ebp+var_4E0] ; this
.text:0000260D                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002612                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002616                 lea     ecx, [ebp+var_458] ; this
.text:0000261C                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002621                 jmp     loc_21C9
.text:00002626 ; ---------------------------------------------------------------------------
.text:00002626
.text:00002626 loc_2626:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+F02j
.text:00002626                 mov     edx, [ebp+var_500]
.text:0000262C                 mov     [ebp+var_508], edx
.text:00002632                 cmp     [ebp+var_508], 0
.text:00002639                 jz      loc_2737
.text:0000263F                 mov     eax, [ebp+var_508]
.text:00002645                 mov     [ebp+var_694], eax
.text:0000264B                 mov     byte ptr [ebp+var_4], 13h
.text:0000264F                 lea     ecx, [ebp+var_4F8] ; this
.text:00002655                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000265A                 mov     byte ptr [ebp+var_4], 12h
.text:0000265E                 lea     ecx, [ebp+var_4EC]
.text:00002664                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002669                 mov     byte ptr [ebp+var_4], 11h
.text:0000266D                 lea     ecx, [ebp+var_4E0] ; this
.text:00002673                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002678                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000267C                 lea     ecx, [ebp+var_458] ; this
.text:00002682                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002687                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000268B                 lea     ecx, [ebp+var_2B8]
.text:00002691                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002696                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000269A                 lea     ecx, [ebp+var_2A4]
.text:000026A0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000026A5                 mov     byte ptr [ebp+var_4], 9
.text:000026A9                 lea     ecx, [ebp+var_290] ; this
.text:000026AF                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:000026B4                 mov     byte ptr [ebp+var_4], 8
.text:000026B8                 lea     ecx, [ebp+var_27C] ; this
.text:000026BE                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000026C3                 mov     byte ptr [ebp+var_4], 7
.text:000026C7                 lea     ecx, [ebp+var_264] ; this
.text:000026CD                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:000026D2                 mov     byte ptr [ebp+var_4], 6
.text:000026D6                 lea     ecx, [ebp+var_234] ; this
.text:000026DC                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:000026E1                 mov     byte ptr [ebp+var_4], 4
.text:000026E5                 lea     ecx, [ebp+var_1E4]
.text:000026EB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000026F0                 mov     byte ptr [ebp+var_4], 3
.text:000026F4                 lea     ecx, [ebp+var_1D4]
.text:000026FA                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:000026FF                 mov     byte ptr [ebp+var_4], 2
.text:00002703                 lea     ecx, [ebp+var_178] ; this
.text:00002709                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000270E                 mov     byte ptr [ebp+var_4], 0
.text:00002712                 lea     ecx, [ebp+var_128] ; this
.text:00002718                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000271D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002724                 lea     ecx, [ebp+var_18]
.text:00002727                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000272C                 mov     eax, [ebp+var_694]
.text:00002732                 jmp     loc_3784
.text:00002737 ; ---------------------------------------------------------------------------
.text:00002737
.text:00002737 loc_2737:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+10D9j
.text:00002737                 lea     ecx, [ebp+var_4EC]
.text:0000273D                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:00002742                 movzx   ecx, al
.text:00002745                 test    ecx, ecx
.text:00002747                 jz      loc_2843
.text:0000274D                 mov     [ebp+var_698], 80070057h
.text:00002757                 mov     byte ptr [ebp+var_4], 13h
.text:0000275B                 lea     ecx, [ebp+var_4F8] ; this
.text:00002761                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002766                 mov     byte ptr [ebp+var_4], 12h
.text:0000276A                 lea     ecx, [ebp+var_4EC]
.text:00002770                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002775                 mov     byte ptr [ebp+var_4], 11h
.text:00002779                 lea     ecx, [ebp+var_4E0] ; this
.text:0000277F                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002784                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002788                 lea     ecx, [ebp+var_458] ; this
.text:0000278E                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002793                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002797                 lea     ecx, [ebp+var_2B8]
.text:0000279D                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000027A2                 mov     byte ptr [ebp+var_4], 0Ah
.text:000027A6                 lea     ecx, [ebp+var_2A4]
.text:000027AC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000027B1                 mov     byte ptr [ebp+var_4], 9
.text:000027B5                 lea     ecx, [ebp+var_290] ; this
.text:000027BB                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:000027C0                 mov     byte ptr [ebp+var_4], 8
.text:000027C4                 lea     ecx, [ebp+var_27C] ; this
.text:000027CA                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000027CF                 mov     byte ptr [ebp+var_4], 7
.text:000027D3                 lea     ecx, [ebp+var_264] ; this
.text:000027D9                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:000027DE                 mov     byte ptr [ebp+var_4], 6
.text:000027E2                 lea     ecx, [ebp+var_234] ; this
.text:000027E8                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:000027ED                 mov     byte ptr [ebp+var_4], 4
.text:000027F1                 lea     ecx, [ebp+var_1E4]
.text:000027F7                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000027FC                 mov     byte ptr [ebp+var_4], 3
.text:00002800                 lea     ecx, [ebp+var_1D4]
.text:00002806                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000280B                 mov     byte ptr [ebp+var_4], 2
.text:0000280F                 lea     ecx, [ebp+var_178] ; this
.text:00002815                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000281A                 mov     byte ptr [ebp+var_4], 0
.text:0000281E                 lea     ecx, [ebp+var_128] ; this
.text:00002824                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00002829                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002830                 lea     ecx, [ebp+var_18]
.text:00002833                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002838                 mov     eax, [ebp+var_698]
.text:0000283E                 jmp     loc_3784
.text:00002843 ; ---------------------------------------------------------------------------
.text:00002843
.text:00002843 loc_2843:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+11E7j
.text:00002843                 mov     esi, esp
.text:00002845                 push    0
.text:00002847                 mov     edx, [ebp+arg_18]
.text:0000284A                 mov     eax, [edx]
.text:0000284C                 mov     ecx, [ebp+arg_18]
.text:0000284F                 push    ecx
.text:00002850                 mov     edx, [eax+20h]
.text:00002853                 call    edx
.text:00002855                 cmp     esi, esp
.text:00002857                 call    __RTC_CheckEsp
.text:0000285C                 mov     [ebp+var_50C], eax
.text:00002862                 cmp     [ebp+var_50C], 0
.text:00002869                 jz      loc_2967
.text:0000286F                 mov     eax, [ebp+var_50C]
.text:00002875                 mov     [ebp+var_69C], eax
.text:0000287B                 mov     byte ptr [ebp+var_4], 13h
.text:0000287F                 lea     ecx, [ebp+var_4F8] ; this
.text:00002885                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000288A                 mov     byte ptr [ebp+var_4], 12h
.text:0000288E                 lea     ecx, [ebp+var_4EC]
.text:00002894                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002899                 mov     byte ptr [ebp+var_4], 11h
.text:0000289D                 lea     ecx, [ebp+var_4E0] ; this
.text:000028A3                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000028A8                 mov     byte ptr [ebp+var_4], 0Ch
.text:000028AC                 lea     ecx, [ebp+var_458] ; this
.text:000028B2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000028B7                 mov     byte ptr [ebp+var_4], 0Bh
.text:000028BB                 lea     ecx, [ebp+var_2B8]
.text:000028C1                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000028C6                 mov     byte ptr [ebp+var_4], 0Ah
.text:000028CA                 lea     ecx, [ebp+var_2A4]
.text:000028D0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000028D5                 mov     byte ptr [ebp+var_4], 9
.text:000028D9                 lea     ecx, [ebp+var_290] ; this
.text:000028DF                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:000028E4                 mov     byte ptr [ebp+var_4], 8
.text:000028E8                 lea     ecx, [ebp+var_27C] ; this
.text:000028EE                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000028F3                 mov     byte ptr [ebp+var_4], 7
.text:000028F7                 lea     ecx, [ebp+var_264] ; this
.text:000028FD                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002902                 mov     byte ptr [ebp+var_4], 6
.text:00002906                 lea     ecx, [ebp+var_234] ; this
.text:0000290C                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002911                 mov     byte ptr [ebp+var_4], 4
.text:00002915                 lea     ecx, [ebp+var_1E4]
.text:0000291B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002920                 mov     byte ptr [ebp+var_4], 3
.text:00002924                 lea     ecx, [ebp+var_1D4]
.text:0000292A                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000292F                 mov     byte ptr [ebp+var_4], 2
.text:00002933                 lea     ecx, [ebp+var_178] ; this
.text:00002939                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000293E                 mov     byte ptr [ebp+var_4], 0
.text:00002942                 lea     ecx, [ebp+var_128] ; this
.text:00002948                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000294D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002954                 lea     ecx, [ebp+var_18]
.text:00002957                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000295C                 mov     eax, [ebp+var_69C]
.text:00002962                 jmp     loc_3784
.text:00002967 ; ---------------------------------------------------------------------------
.text:00002967
.text:00002967 loc_2967:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1309j
.text:00002967                 mov     byte ptr [ebp+var_4], 13h
.text:0000296B                 lea     ecx, [ebp+var_4F8] ; this
.text:00002971                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002976                 mov     [ebp+var_510], 0
.text:00002980                 jmp     short loc_2991
.text:00002982 ; ---------------------------------------------------------------------------
.text:00002982
.text:00002982 loc_2982:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *):loc_2A6Aj
.text:00002982                 mov     ecx, [ebp+var_510]
.text:00002988                 add     ecx, 1
.text:0000298B                 mov     [ebp+var_510], ecx
.text:00002991
.text:00002991 loc_2991:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1420j
.text:00002991                 mov     edx, [ebp+var_510]
.text:00002997                 cmp     edx, [ebp+var_180]
.text:0000299D                 jnb     loc_2A6F
.text:000029A3                 mov     eax, [ebp+var_510]
.text:000029A9                 push    eax
.text:000029AA                 lea     ecx, [ebp+var_290]
.text:000029B0                 call    ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[](uint)
.text:000029B5                 mov     [ebp+var_514], eax
.text:000029BB                 mov     ecx, [ebp+var_514]
.text:000029C1                 movzx   edx, byte ptr [ecx+0B8h]
.text:000029C8                 test    edx, edx
.text:000029CA                 jz      loc_2A6A
.text:000029D0                 mov     eax, [ebp+var_514]
.text:000029D6                 mov     byte ptr [eax+0B8h], 0
.text:000029DD                 lea     ecx, [ebp+var_4EC]
.text:000029E3                 push    ecx
.text:000029E4                 mov     ecx, [ebp+var_514]
.text:000029EA                 add     ecx, 20h ; ' '
.text:000029ED                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)
.text:000029F2                 lea     ecx, [ebp+var_4EC]
.text:000029F8                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000029FD                 mov     edx, [ebp+var_514]
.text:00002A03                 mov     ecx, [edx+18h]  ; this
.text:00002A06                 call    ?Init@COutMemStream@@QAEXXZ ; COutMemStream::Init(void)
.text:00002A0B                 mov     eax, [ebp+var_514]
.text:00002A11                 mov     ecx, [eax+10h]  ; this
.text:00002A14                 call    ?Reinit@CMtCompressProgress@@QAEXXZ ; CMtCompressProgress::Reinit(void)
.text:00002A19                 mov     ecx, [ebp+var_514]
.text:00002A1F                 add     ecx, 4          ; this
.text:00002A22                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00002A27                 mov     ecx, [ebp+var_3E0]
.text:00002A2D                 sub     ecx, 1
.text:00002A30                 mov     edx, [ebp+var_514]
.text:00002A36                 mov     [edx+0BCh], ecx
.text:00002A3C                 mov     ecx, [ebp+var_514]
.text:00002A42                 add     ecx, 8
.text:00002A45                 call    ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *(void)
.text:00002A4A                 push    eax
.text:00002A4B                 lea     ecx, [ebp+var_2A4]
.text:00002A51                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00002A56                 mov     eax, [ebp+var_510]
.text:00002A5C                 push    eax
.text:00002A5D                 lea     ecx, [ebp+var_2B8]
.text:00002A63                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00002A68                 jmp     short loc_2A6F
.text:00002A6A ; ---------------------------------------------------------------------------
.text:00002A6A
.text:00002A6A loc_2A6A:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+146Aj
.text:00002A6A                 jmp     loc_2982
.text:00002A6F ; ---------------------------------------------------------------------------
.text:00002A6F
.text:00002A6F loc_2A6F:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+143Dj
.text:00002A6F                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1508j
.text:00002A6F                 mov     byte ptr [ebp+var_4], 12h
.text:00002A73                 lea     ecx, [ebp+var_4EC]
.text:00002A79                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002A7E                 mov     byte ptr [ebp+var_4], 11h
.text:00002A82                 lea     ecx, [ebp+var_4E0] ; this
.text:00002A88                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002A8D                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002A91                 lea     ecx, [ebp+var_458] ; this
.text:00002A97                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002A9C                 jmp     loc_21C9
.text:00002AA1 ; ---------------------------------------------------------------------------
.text:00002AA1
.text:00002AA1 loc_2AA1:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+C8Ej
.text:00002AA1                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CA2j
.text:00002AA1                 mov     ecx, [ebp+var_3E4]
.text:00002AA7                 push    ecx
.text:00002AA8                 lea     ecx, [ebp+var_278]
.text:00002AAE                 call    ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[](uint)
.text:00002AB3                 movzx   edx, byte ptr [eax+39h]
.text:00002AB7                 test    edx, edx
.text:00002AB9                 jz      short loc_2ACF
.text:00002ABB                 mov     eax, [ebp+var_3E4]
.text:00002AC1                 add     eax, 1
.text:00002AC4                 mov     [ebp+var_3E4], eax
.text:00002ACA                 jmp     loc_21C9
.text:00002ACF ; ---------------------------------------------------------------------------
.text:00002ACF
.text:00002ACF loc_2ACF:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1559j
.text:00002ACF                 mov     ecx, [ebp+var_3E4]
.text:00002AD5                 push    ecx
.text:00002AD6                 mov     ecx, [ebp+arg_C]
.text:00002AD9                 call    ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[](uint)
.text:00002ADE                 mov     [ebp+var_518], eax
.text:00002AE4                 lea     ecx, [ebp+var_584] ; this
.text:00002AEA                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00002AEF                 mov     byte ptr [ebp+var_4], 15h
.text:00002AF3                 lea     ecx, [ebp+var_60C] ; this
.text:00002AF9                 call    ??0CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::CItemOut(void)
.text:00002AFE                 mov     byte ptr [ebp+var_4], 16h
.text:00002B02                 mov     edx, [ebp+var_518]
.text:00002B08                 movzx   eax, byte ptr [edx+1]
.text:00002B0C                 test    eax, eax
.text:00002B0E                 jz      short loc_2B21
.text:00002B10                 mov     ecx, [ebp+var_518]
.text:00002B16                 movzx   edx, byte ptr [ecx]
.text:00002B19                 test    edx, edx
.text:00002B1B                 jnz     loc_2C40
.text:00002B21
.text:00002B21 loc_2B21:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+15AEj
.text:00002B21                 mov     eax, [ebp+var_518]
.text:00002B27                 mov     ecx, [eax+8]
.text:00002B2A                 push    ecx
.text:00002B2B                 mov     ecx, [ebp+arg_8]
.text:00002B2E                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00002B33                 push    eax
.text:00002B34                 lea     ecx, [ebp+var_584]
.text:00002B3A                 call    ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItemEx::operator=(NArchive::NZip::CItemEx const &)
.text:00002B3F                 lea     edx, [ebp+var_584]
.text:00002B45                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:00002B46                 mov     ecx, [ebp+arg_4] ; this
.text:00002B49                 call    ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)
.text:00002B4E                 test    eax, eax
.text:00002B50                 jz      loc_2C2E
.text:00002B56                 mov     [ebp+var_6A0], 80004001h
.text:00002B60                 mov     byte ptr [ebp+var_4], 15h
.text:00002B64                 lea     ecx, [ebp+var_60C] ; this
.text:00002B6A                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002B6F                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002B73                 lea     ecx, [ebp+var_584] ; this
.text:00002B79                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002B7E                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002B82                 lea     ecx, [ebp+var_2B8]
.text:00002B88                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002B8D                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002B91                 lea     ecx, [ebp+var_2A4]
.text:00002B97                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002B9C                 mov     byte ptr [ebp+var_4], 9
.text:00002BA0                 lea     ecx, [ebp+var_290] ; this
.text:00002BA6                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00002BAB                 mov     byte ptr [ebp+var_4], 8
.text:00002BAF                 lea     ecx, [ebp+var_27C] ; this
.text:00002BB5                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00002BBA                 mov     byte ptr [ebp+var_4], 7
.text:00002BBE                 lea     ecx, [ebp+var_264] ; this
.text:00002BC4                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002BC9                 mov     byte ptr [ebp+var_4], 6
.text:00002BCD                 lea     ecx, [ebp+var_234] ; this
.text:00002BD3                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002BD8                 mov     byte ptr [ebp+var_4], 4
.text:00002BDC                 lea     ecx, [ebp+var_1E4]
.text:00002BE2                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002BE7                 mov     byte ptr [ebp+var_4], 3
.text:00002BEB                 lea     ecx, [ebp+var_1D4]
.text:00002BF1                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00002BF6                 mov     byte ptr [ebp+var_4], 2
.text:00002BFA                 lea     ecx, [ebp+var_178] ; this
.text:00002C00                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002C05                 mov     byte ptr [ebp+var_4], 0
.text:00002C09                 lea     ecx, [ebp+var_128] ; this
.text:00002C0F                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00002C14                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C1B                 lea     ecx, [ebp+var_18]
.text:00002C1E                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002C23                 mov     eax, [ebp+var_6A0]
.text:00002C29                 jmp     loc_3784
.text:00002C2E ; ---------------------------------------------------------------------------
.text:00002C2E
.text:00002C2E loc_2C2E:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+15F0j
.text:00002C2E                 lea     eax, [ebp+var_584]
.text:00002C34                 push    eax
.text:00002C35                 lea     ecx, [ebp+var_60C]
.text:00002C3B                 call    ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)
.text:00002C40
.text:00002C40 loc_2C40:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+15BBj
.text:00002C40                 mov     ecx, [ebp+var_518]
.text:00002C46                 movzx   edx, byte ptr [ecx]
.text:00002C49                 test    edx, edx
.text:00002C4B                 jz      loc_3448
.text:00002C51                 mov     eax, [ebp+var_518]
.text:00002C57                 movzx   ecx, byte ptr [eax+1]
.text:00002C5B                 test    ecx, ecx
.text:00002C5D                 jz      short loc_2C70
.text:00002C5F                 mov     edx, [ebp+var_518]
.text:00002C65                 mov     al, [edx+2]
.text:00002C68                 mov     [ebp+var_6F1], al
.text:00002C6E                 jmp     short loc_2C81
.text:00002C70 ; ---------------------------------------------------------------------------
.text:00002C70
.text:00002C70 loc_2C70:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+16FDj
.text:00002C70                 lea     ecx, [ebp+var_60C] ; this
.text:00002C76                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00002C7B                 mov     [ebp+var_6F1], al
.text:00002C81
.text:00002C81 loc_2C81:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+170Ej
.text:00002C81                 mov     cl, [ebp+var_6F1]
.text:00002C87                 mov     [ebp+var_611], cl
.text:00002C8D                 movzx   edx, [ebp+var_611]
.text:00002C94                 test    edx, edx
.text:00002C96                 jz      short loc_2CB8
.text:00002C98                 lea     eax, [ebp+var_60C]
.text:00002C9E                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:00002C9F                 mov     ecx, [ebp+var_518]
.text:00002CA5                 push    ecx             ; int
.text:00002CA6                 mov     edx, [ebp+arg_10]
.text:00002CA9                 push    edx             ; int
.text:00002CAA                 mov     eax, [ebp+arg_0]
.text:00002CAD                 push    eax             ; NArchive::NZip::COutArchive *
.text:00002CAE                 call    ?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::WriteDirHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const *,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:00002CB3                 jmp     loc_3443
.text:00002CB8 ; ---------------------------------------------------------------------------
.text:00002CB8
.text:00002CB8 loc_2CB8:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1736j
.text:00002CB8                 mov     ecx, [ebp+var_3E8]
.text:00002CBE                 cmp     ecx, [ebp+var_3E4]
.text:00002CC4                 jge     short loc_2D1B
.text:00002CC6                 mov     edx, [ebp+var_3E4]
.text:00002CCC                 mov     [ebp+var_3E8], edx
.text:00002CD2                 lea     eax, [ebp+var_60C]
.text:00002CD8                 push    eax             ; NArchive::NZip::CLocalItem *
.text:00002CD9                 mov     ecx, [ebp+var_518]
.text:00002CDF                 push    ecx             ; int
.text:00002CE0                 mov     edx, [ebp+arg_10]
.text:00002CE3                 push    edx             ; int
.text:00002CE4                 mov     eax, [ebp+arg_0]
.text:00002CE7                 push    eax             ; NArchive::NZip::COutArchive *
.text:00002CE8                 call    ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:00002CED                 mov     ecx, [ebp+arg_10] ; this
.text:00002CF0                 call    ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)
.text:00002CF5                 movzx   ecx, al
.text:00002CF8                 push    ecx             ; bool
.text:00002CF9                 mov     edx, [ebp+var_518]
.text:00002CFF                 mov     eax, [edx+1Ch]
.text:00002D02                 push    eax
.text:00002D03                 mov     ecx, [edx+18h]
.text:00002D06                 push    ecx             ; unsigned __int64
.text:00002D07                 lea     ecx, [ebp+var_5EC] ; this
.text:00002D0D                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00002D12                 push    eax             ; unsigned int
.text:00002D13                 mov     ecx, [ebp+arg_0] ; this
.text:00002D16                 call    ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)
.text:00002D1B
.text:00002D1B loc_2D1B:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1764j
.text:00002D1B                 mov     edx, [ebp+var_3E4]
.text:00002D21                 push    edx
.text:00002D22                 lea     ecx, [ebp+var_278]
.text:00002D28                 call    ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[](uint)
.text:00002D2D                 mov     [ebp+var_618], eax
.text:00002D33                 mov     eax, [ebp+var_618]
.text:00002D39                 movzx   ecx, byte ptr [eax+38h]
.text:00002D3D                 test    ecx, ecx
.text:00002D3F                 jz      loc_2E05
.text:00002D45                 lea     ecx, [ebp+var_620]
.text:00002D4B                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00002D50                 mov     byte ptr [ebp+var_4], 17h
.text:00002D54                 lea     ecx, [ebp+var_620]
.text:00002D5A                 call    ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&(void)
.text:00002D5F                 push    eax             ; struct IOutStream **
.text:00002D60                 mov     ecx, [ebp+arg_0] ; this
.text:00002D63                 call    ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)
.text:00002D68                 lea     ecx, [ebp+var_620]
.text:00002D6E                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00002D73                 push    eax             ; struct ISequentialOutStream *
.text:00002D74                 lea     ecx, [ebp+var_264] ; this
.text:00002D7A                 call    ?GetBlockSize@CMemBlockManager@@QBEIXZ ; CMemBlockManager::GetBlockSize(void)
.text:00002D7F                 push    eax             ; unsigned int
.text:00002D80                 mov     ecx, [ebp+var_618] ; this
.text:00002D86                 call    ?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z ; CMemBlocks::WriteToStream(uint,ISequentialOutStream *)
.text:00002D8B                 lea     edx, [ebp+var_60C]
.text:00002D91                 push    edx             ; NArchive::NZip::CLocalItem *
.text:00002D92                 mov     eax, [ebp+var_518]
.text:00002D98                 push    eax             ; int
.text:00002D99                 mov     ecx, [ebp+arg_10]
.text:00002D9C                 push    ecx             ; int
.text:00002D9D                 mov     edx, [ebp+arg_0]
.text:00002DA0                 push    edx             ; NArchive::NZip::COutArchive *
.text:00002DA1                 call    ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:00002DA6                 lea     eax, [ebp+var_60C]
.text:00002DAC                 push    eax
.text:00002DAD                 mov     ecx, [ebp+arg_10]
.text:00002DB0                 movzx   edx, byte ptr [ecx+16h]
.text:00002DB4                 push    edx
.text:00002DB5                 mov     ecx, [ebp+arg_10] ; this
.text:00002DB8                 call    ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)
.text:00002DBD                 movzx   eax, al
.text:00002DC0                 push    eax
.text:00002DC1                 mov     ecx, [ebp+var_618]
.text:00002DC7                 add     ecx, 20h ; ' '
.text:00002DCA                 push    ecx
.text:00002DCB                 call    ?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)
.text:00002DD0                 lea     edx, [ebp+var_60C]
.text:00002DD6                 push    edx             ; struct NArchive::NZip::CLocalItem *
.text:00002DD7                 mov     ecx, [ebp+arg_0] ; this
.text:00002DDA                 call    ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)
.text:00002DDF                 lea     eax, [ebp+var_264]
.text:00002DE5                 push    eax             ; struct CMemBlockManagerMt *
.text:00002DE6                 mov     ecx, [ebp+var_618] ; this
.text:00002DEC                 call    ?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::FreeOpt(CMemBlockManagerMt *)
.text:00002DF1                 mov     byte ptr [ebp+var_4], 16h
.text:00002DF5                 lea     ecx, [ebp+var_620]
.text:00002DFB                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00002E00                 jmp     loc_3443
.text:00002E05 ; ---------------------------------------------------------------------------
.text:00002E05
.text:00002E05 loc_2E05:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+17DFj
.text:00002E05                 lea     ecx, [ebp+var_2B8]
.text:00002E0B                 call    ?Front@?$CRecordVector@H@@QAEAAHXZ ; CRecordVector<int>::Front(void)
.text:00002E10                 mov     ecx, [eax]
.text:00002E12                 push    ecx
.text:00002E13                 lea     ecx, [ebp+var_290]
.text:00002E19                 call    ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[](uint)
.text:00002E1E                 mov     [ebp+var_628], eax
.text:00002E24                 mov     edx, [ebp+var_628]
.text:00002E2A                 mov     ecx, [edx+18h]  ; this
.text:00002E2D                 call    ?WasUnlockEventSent@COutMemStream@@QBE_NXZ ; COutMemStream::WasUnlockEventSent(void)
.text:00002E32                 movzx   eax, al
.text:00002E35                 test    eax, eax
.text:00002E37                 jnz     short loc_2E93
.text:00002E39                 lea     ecx, [ebp+var_630]
.text:00002E3F                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00002E44                 mov     byte ptr [ebp+var_4], 18h
.text:00002E48                 lea     ecx, [ebp+var_630]
.text:00002E4E                 call    ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&(void)
.text:00002E53                 push    eax             ; struct IOutStream **
.text:00002E54                 mov     ecx, [ebp+arg_0] ; this
.text:00002E57                 call    ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)
.text:00002E5C                 lea     ecx, [ebp+var_630]
.text:00002E62                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00002E67                 push    eax             ; struct IOutStream *
.text:00002E68                 mov     ecx, [ebp+var_628]
.text:00002E6E                 mov     ecx, [ecx+18h]  ; this
.text:00002E71                 call    ?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z ; COutMemStream::SetOutStream(IOutStream *)
.text:00002E76                 mov     edx, [ebp+var_628]
.text:00002E7C                 mov     ecx, [edx+18h]  ; this
.text:00002E7F                 call    ?SetRealStreamMode@COutMemStream@@QAEXXZ ; COutMemStream::SetRealStreamMode(void)
.text:00002E84                 mov     byte ptr [ebp+var_4], 16h
.text:00002E88                 lea     ecx, [ebp+var_630]
.text:00002E8E                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00002E93
.text:00002E93 loc_2E93:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+18D7j
.text:00002E93                 mov     esi, esp
.text:00002E95                 push    0FFFFFFFFh      ; dwMilliseconds
.text:00002E97                 push    0               ; bWaitAll
.text:00002E99                 lea     ecx, [ebp+var_2A4]
.text:00002E9F                 call    ?Front@?$CRecordVector@PAX@@QAEAAPAXXZ ; CRecordVector<void *>::Front(void)
.text:00002EA4                 push    eax             ; lpHandles
.text:00002EA5                 lea     ecx, [ebp+var_2A4]
.text:00002EAB                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002EB0                 push    eax             ; nCount
.text:00002EB1                 call    dword ptr ds:__imp__WaitForMultipleObjects@16 ; WaitForMultipleObjects(x,x,x,x)
.text:00002EB7                 cmp     esi, esp
.text:00002EB9                 call    __RTC_CheckEsp
.text:00002EBE                 mov     [ebp+var_638], eax
.text:00002EC4                 cmp     [ebp+var_638], 0FFFFFFFFh
.text:00002ECB                 jnz     loc_2FE1
.text:00002ED1                 mov     esi, esp
.text:00002ED3                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00002ED9                 cmp     esi, esp
.text:00002EDB                 call    __RTC_CheckEsp
.text:00002EE0                 mov     [ebp+var_63C], eax
.text:00002EE6                 cmp     [ebp+var_63C], 0
.text:00002EED                 jz      short loc_2EFD
.text:00002EEF                 mov     eax, [ebp+var_63C]
.text:00002EF5                 mov     [ebp+var_6F8], eax
.text:00002EFB                 jmp     short loc_2F07
.text:00002EFD ; ---------------------------------------------------------------------------
.text:00002EFD
.text:00002EFD loc_2EFD:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+198Dj
.text:00002EFD                 mov     [ebp+var_6F8], 80004005h
.text:00002F07
.text:00002F07 loc_2F07:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+199Bj
.text:00002F07                 mov     ecx, [ebp+var_6F8]
.text:00002F0D                 mov     [ebp+var_6A4], ecx
.text:00002F13                 mov     byte ptr [ebp+var_4], 15h
.text:00002F17                 lea     ecx, [ebp+var_60C] ; this
.text:00002F1D                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00002F22                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002F26                 lea     ecx, [ebp+var_584] ; this
.text:00002F2C                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002F31                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002F35                 lea     ecx, [ebp+var_2B8]
.text:00002F3B                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002F40                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002F44                 lea     ecx, [ebp+var_2A4]
.text:00002F4A                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002F4F                 mov     byte ptr [ebp+var_4], 9
.text:00002F53                 lea     ecx, [ebp+var_290] ; this
.text:00002F59                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00002F5E                 mov     byte ptr [ebp+var_4], 8
.text:00002F62                 lea     ecx, [ebp+var_27C] ; this
.text:00002F68                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00002F6D                 mov     byte ptr [ebp+var_4], 7
.text:00002F71                 lea     ecx, [ebp+var_264] ; this
.text:00002F77                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00002F7C                 mov     byte ptr [ebp+var_4], 6
.text:00002F80                 lea     ecx, [ebp+var_234] ; this
.text:00002F86                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00002F8B                 mov     byte ptr [ebp+var_4], 4
.text:00002F8F                 lea     ecx, [ebp+var_1E4]
.text:00002F95                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002F9A                 mov     byte ptr [ebp+var_4], 3
.text:00002F9E                 lea     ecx, [ebp+var_1D4]
.text:00002FA4                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00002FA9                 mov     byte ptr [ebp+var_4], 2
.text:00002FAD                 lea     ecx, [ebp+var_178] ; this
.text:00002FB3                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002FB8                 mov     byte ptr [ebp+var_4], 0
.text:00002FBC                 lea     ecx, [ebp+var_128] ; this
.text:00002FC2                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00002FC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FCE                 lea     ecx, [ebp+var_18]
.text:00002FD1                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002FD6                 mov     eax, [ebp+var_6A4]
.text:00002FDC                 jmp     loc_3784
.text:00002FE1 ; ---------------------------------------------------------------------------
.text:00002FE1
.text:00002FE1 loc_2FE1:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+196Bj
.text:00002FE1                 mov     edx, [ebp+var_638]
.text:00002FE7                 mov     [ebp+var_640], edx
.text:00002FED                 lea     ecx, [ebp+var_2A4]
.text:00002FF3                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002FF8                 cmp     [ebp+var_640], eax
.text:00002FFE                 jb      loc_30DC
.text:00003004                 mov     [ebp+var_6A8], 80004005h
.text:0000300E                 mov     byte ptr [ebp+var_4], 15h
.text:00003012                 lea     ecx, [ebp+var_60C] ; this
.text:00003018                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:0000301D                 mov     byte ptr [ebp+var_4], 0Ch
.text:00003021                 lea     ecx, [ebp+var_584] ; this
.text:00003027                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000302C                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003030                 lea     ecx, [ebp+var_2B8]
.text:00003036                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000303B                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000303F                 lea     ecx, [ebp+var_2A4]
.text:00003045                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000304A                 mov     byte ptr [ebp+var_4], 9
.text:0000304E                 lea     ecx, [ebp+var_290] ; this
.text:00003054                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00003059                 mov     byte ptr [ebp+var_4], 8
.text:0000305D                 lea     ecx, [ebp+var_27C] ; this
.text:00003063                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00003068                 mov     byte ptr [ebp+var_4], 7
.text:0000306C                 lea     ecx, [ebp+var_264] ; this
.text:00003072                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00003077                 mov     byte ptr [ebp+var_4], 6
.text:0000307B                 lea     ecx, [ebp+var_234] ; this
.text:00003081                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00003086                 mov     byte ptr [ebp+var_4], 4
.text:0000308A                 lea     ecx, [ebp+var_1E4]
.text:00003090                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003095                 mov     byte ptr [ebp+var_4], 3
.text:00003099                 lea     ecx, [ebp+var_1D4]
.text:0000309F                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:000030A4                 mov     byte ptr [ebp+var_4], 2
.text:000030A8                 lea     ecx, [ebp+var_178] ; this
.text:000030AE                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000030B3                 mov     byte ptr [ebp+var_4], 0
.text:000030B7                 lea     ecx, [ebp+var_128] ; this
.text:000030BD                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000030C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030C9                 lea     ecx, [ebp+var_18]
.text:000030CC                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000030D1                 mov     eax, [ebp+var_6A8]
.text:000030D7                 jmp     loc_3784
.text:000030DC ; ---------------------------------------------------------------------------
.text:000030DC
.text:000030DC loc_30DC:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1A9Ej
.text:000030DC                 mov     eax, [ebp+var_640]
.text:000030E2                 push    eax
.text:000030E3                 lea     ecx, [ebp+var_2B8]
.text:000030E9                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:000030EE                 mov     ecx, [eax]
.text:000030F0                 push    ecx
.text:000030F1                 lea     ecx, [ebp+var_290]
.text:000030F7                 call    ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[](uint)
.text:000030FC                 mov     [ebp+var_644], eax
.text:00003102                 mov     ecx, [ebp+var_644]
.text:00003108                 add     ecx, 20h ; ' '
.text:0000310B                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00003110                 mov     edx, [ebp+var_644]
.text:00003116                 mov     byte ptr [edx+0B8h], 1
.text:0000311D                 mov     eax, [ebp+var_644]
.text:00003123                 mov     ecx, [eax+98h]
.text:00003129                 mov     [ebp+var_648], ecx
.text:0000312F                 cmp     [ebp+var_648], 0
.text:00003136                 jz      loc_3216
.text:0000313C                 mov     edx, [ebp+var_648]
.text:00003142                 mov     [ebp+var_6AC], edx
.text:00003148                 mov     byte ptr [ebp+var_4], 15h
.text:0000314C                 lea     ecx, [ebp+var_60C] ; this
.text:00003152                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00003157                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000315B                 lea     ecx, [ebp+var_584] ; this
.text:00003161                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003166                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000316A                 lea     ecx, [ebp+var_2B8]
.text:00003170                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00003175                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003179                 lea     ecx, [ebp+var_2A4]
.text:0000317F                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00003184                 mov     byte ptr [ebp+var_4], 9
.text:00003188                 lea     ecx, [ebp+var_290] ; this
.text:0000318E                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00003193                 mov     byte ptr [ebp+var_4], 8
.text:00003197                 lea     ecx, [ebp+var_27C] ; this
.text:0000319D                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000031A2                 mov     byte ptr [ebp+var_4], 7
.text:000031A6                 lea     ecx, [ebp+var_264] ; this
.text:000031AC                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:000031B1                 mov     byte ptr [ebp+var_4], 6
.text:000031B5                 lea     ecx, [ebp+var_234] ; this
.text:000031BB                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:000031C0                 mov     byte ptr [ebp+var_4], 4
.text:000031C4                 lea     ecx, [ebp+var_1E4]
.text:000031CA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000031CF                 mov     byte ptr [ebp+var_4], 3
.text:000031D3                 lea     ecx, [ebp+var_1D4]
.text:000031D9                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:000031DE                 mov     byte ptr [ebp+var_4], 2
.text:000031E2                 lea     ecx, [ebp+var_178] ; this
.text:000031E8                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000031ED                 mov     byte ptr [ebp+var_4], 0
.text:000031F1                 lea     ecx, [ebp+var_128] ; this
.text:000031F7                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000031FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003203                 lea     ecx, [ebp+var_18]
.text:00003206                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000320B                 mov     eax, [ebp+var_6AC]
.text:00003211                 jmp     loc_3784
.text:00003216 ; ---------------------------------------------------------------------------
.text:00003216
.text:00003216 loc_3216:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1BD6j
.text:00003216                 mov     eax, [ebp+var_640]
.text:0000321C                 push    eax
.text:0000321D                 lea     ecx, [ebp+var_2B8]
.text:00003223                 call    ?Delete@?$CRecordVector@H@@QAEXI@Z ; CRecordVector<int>::Delete(uint)
.text:00003228                 mov     ecx, [ebp+var_640]
.text:0000322E                 push    ecx
.text:0000322F                 lea     ecx, [ebp+var_2A4]
.text:00003235                 call    ?Delete@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Delete(uint)
.text:0000323A                 cmp     [ebp+var_640], 0
.text:00003241                 jnz     loc_33AC
.text:00003247                 mov     edx, [ebp+var_644]
.text:0000324D                 mov     ecx, [edx+18h]  ; this
.text:00003250                 call    ?WriteToRealStream@COutMemStream@@QAEJXZ ; COutMemStream::WriteToRealStream(void)
.text:00003255                 mov     [ebp+var_64C], eax
.text:0000325B                 cmp     [ebp+var_64C], 0
.text:00003262                 jz      loc_3342
.text:00003268                 mov     eax, [ebp+var_64C]
.text:0000326E                 mov     [ebp+var_6B0], eax
.text:00003274                 mov     byte ptr [ebp+var_4], 15h
.text:00003278                 lea     ecx, [ebp+var_60C] ; this
.text:0000327E                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00003283                 mov     byte ptr [ebp+var_4], 0Ch
.text:00003287                 lea     ecx, [ebp+var_584] ; this
.text:0000328D                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003292                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003296                 lea     ecx, [ebp+var_2B8]
.text:0000329C                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000032A1                 mov     byte ptr [ebp+var_4], 0Ah
.text:000032A5                 lea     ecx, [ebp+var_2A4]
.text:000032AB                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000032B0                 mov     byte ptr [ebp+var_4], 9
.text:000032B4                 lea     ecx, [ebp+var_290] ; this
.text:000032BA                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:000032BF                 mov     byte ptr [ebp+var_4], 8
.text:000032C3                 lea     ecx, [ebp+var_27C] ; this
.text:000032C9                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000032CE                 mov     byte ptr [ebp+var_4], 7
.text:000032D2                 lea     ecx, [ebp+var_264] ; this
.text:000032D8                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:000032DD                 mov     byte ptr [ebp+var_4], 6
.text:000032E1                 lea     ecx, [ebp+var_234] ; this
.text:000032E7                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:000032EC                 mov     byte ptr [ebp+var_4], 4
.text:000032F0                 lea     ecx, [ebp+var_1E4]
.text:000032F6                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000032FB                 mov     byte ptr [ebp+var_4], 3
.text:000032FF                 lea     ecx, [ebp+var_1D4]
.text:00003305                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000330A                 mov     byte ptr [ebp+var_4], 2
.text:0000330E                 lea     ecx, [ebp+var_178] ; this
.text:00003314                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003319                 mov     byte ptr [ebp+var_4], 0
.text:0000331D                 lea     ecx, [ebp+var_128] ; this
.text:00003323                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00003328                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000332F                 lea     ecx, [ebp+var_18]
.text:00003332                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003337                 mov     eax, [ebp+var_6B0]
.text:0000333D                 jmp     loc_3784
.text:00003342 ; ---------------------------------------------------------------------------
.text:00003342
.text:00003342 loc_3342:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1D02j
.text:00003342                 mov     ecx, [ebp+var_644]
.text:00003348                 mov     ecx, [ecx+18h]  ; this
.text:0000334B                 call    ?ReleaseOutStream@COutMemStream@@QAEXXZ ; COutMemStream::ReleaseOutStream(void)
.text:00003350                 lea     edx, [ebp+var_60C]
.text:00003356                 push    edx             ; NArchive::NZip::CLocalItem *
.text:00003357                 mov     eax, [ebp+var_518]
.text:0000335D                 push    eax             ; int
.text:0000335E                 mov     ecx, [ebp+arg_10]
.text:00003361                 push    ecx             ; int
.text:00003362                 mov     edx, [ebp+arg_0]
.text:00003365                 push    edx             ; NArchive::NZip::COutArchive *
.text:00003366                 call    ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:0000336B                 lea     eax, [ebp+var_60C]
.text:00003371                 push    eax
.text:00003372                 mov     ecx, [ebp+arg_10]
.text:00003375                 movzx   edx, byte ptr [ecx+16h]
.text:00003379                 push    edx
.text:0000337A                 mov     ecx, [ebp+arg_10] ; this
.text:0000337D                 call    ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)
.text:00003382                 movzx   eax, al
.text:00003385                 push    eax
.text:00003386                 mov     ecx, [ebp+var_644]
.text:0000338C                 add     ecx, 0A0h ; 'á'
.text:00003392                 push    ecx
.text:00003393                 call    ?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)
.text:00003398                 lea     edx, [ebp+var_60C]
.text:0000339E                 push    edx             ; struct NArchive::NZip::CLocalItem *
.text:0000339F                 mov     ecx, [ebp+arg_0] ; this
.text:000033A2                 call    ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)
.text:000033A7                 jmp     loc_3443
.text:000033AC ; ---------------------------------------------------------------------------
.text:000033AC
.text:000033AC loc_33AC:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1CE1j
.text:000033AC                 mov     eax, [ebp+var_644]
.text:000033B2                 mov     ecx, [eax+0BCh]
.text:000033B8                 push    ecx
.text:000033B9                 lea     ecx, [ebp+var_278]
.text:000033BF                 call    ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[](uint)
.text:000033C4                 mov     [ebp+var_650], eax
.text:000033CA                 mov     edx, [ebp+var_650]
.text:000033D0                 push    edx             ; struct CMemLockBlocks *
.text:000033D1                 mov     eax, [ebp+var_644]
.text:000033D7                 mov     ecx, [eax+18h]  ; this
.text:000033DA                 call    ?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z ; COutMemStream::DetachData(CMemLockBlocks &)
.text:000033DF                 mov     ecx, [ebp+var_644]
.text:000033E5                 add     ecx, 0A0h ; 'á'
.text:000033EB                 mov     edx, [ebp+var_650]
.text:000033F1                 add     edx, 20h ; ' '
.text:000033F4                 mov     eax, [ecx]
.text:000033F6                 mov     [edx], eax
.text:000033F8                 mov     eax, [ecx+4]
.text:000033FB                 mov     [edx+4], eax
.text:000033FE                 mov     eax, [ecx+8]
.text:00003401                 mov     [edx+8], eax
.text:00003404                 mov     eax, [ecx+0Ch]
.text:00003407                 mov     [edx+0Ch], eax
.text:0000340A                 mov     eax, [ecx+10h]
.text:0000340D                 mov     [edx+10h], eax
.text:00003410                 mov     ecx, [ecx+14h]
.text:00003413                 mov     [edx+14h], ecx
.text:00003416                 mov     edx, [ebp+var_650]
.text:0000341C                 mov     byte ptr [edx+38h], 1
.text:00003420                 mov     byte ptr [ebp+var_4], 15h
.text:00003424                 lea     ecx, [ebp+var_60C] ; this
.text:0000342A                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:0000342F                 mov     byte ptr [ebp+var_4], 0Ch
.text:00003433                 lea     ecx, [ebp+var_584] ; this
.text:00003439                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000343E                 jmp     loc_21C9
.text:00003443 ; ---------------------------------------------------------------------------
.text:00003443
.text:00003443 loc_3443:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1753j
.text:00003443                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+18A0j ...
.text:00003443                 jmp     loc_3570
.text:00003448 ; ---------------------------------------------------------------------------
.text:00003448
.text:00003448 loc_3448:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+16EBj
.text:00003448                 lea     eax, [ebp+var_28]
.text:0000344B                 push    eax             ; int
.text:0000344C                 lea     ecx, [ebp+var_18]
.text:0000344F                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:00003454                 push    eax             ; int
.text:00003455                 lea     ecx, [ebp+var_1E4]
.text:0000345B                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00003460                 push    eax             ; int
.text:00003461                 lea     ecx, [ebp+var_60C]
.text:00003467                 push    ecx             ; NArchive::NZip::CLocalItem *
.text:00003468                 mov     edx, [ebp+var_518]
.text:0000346E                 push    edx             ; int
.text:0000346F                 lea     eax, [ebp+var_584]
.text:00003475                 push    eax             ; NArchive::NZip::CItemEx *
.text:00003476                 mov     ecx, [ebp+arg_4]
.text:00003479                 push    ecx             ; NArchive::NZip::CInArchive *
.text:0000347A                 mov     edx, [ebp+arg_0]
.text:0000347D                 push    edx             ; NArchive::NZip::COutArchive *
.text:0000347E                 call    ?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)
.text:00003483                 mov     [ebp+var_654], eax
.text:00003489                 cmp     [ebp+var_654], 0
.text:00003490                 jz      loc_3570
.text:00003496                 mov     eax, [ebp+var_654]
.text:0000349C                 mov     [ebp+var_6B4], eax
.text:000034A2                 mov     byte ptr [ebp+var_4], 15h
.text:000034A6                 lea     ecx, [ebp+var_60C] ; this
.text:000034AC                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000034B1                 mov     byte ptr [ebp+var_4], 0Ch
.text:000034B5                 lea     ecx, [ebp+var_584] ; this
.text:000034BB                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000034C0                 mov     byte ptr [ebp+var_4], 0Bh
.text:000034C4                 lea     ecx, [ebp+var_2B8]
.text:000034CA                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000034CF                 mov     byte ptr [ebp+var_4], 0Ah
.text:000034D3                 lea     ecx, [ebp+var_2A4]
.text:000034D9                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000034DE                 mov     byte ptr [ebp+var_4], 9
.text:000034E2                 lea     ecx, [ebp+var_290] ; this
.text:000034E8                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:000034ED                 mov     byte ptr [ebp+var_4], 8
.text:000034F1                 lea     ecx, [ebp+var_27C] ; this
.text:000034F7                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:000034FC                 mov     byte ptr [ebp+var_4], 7
.text:00003500                 lea     ecx, [ebp+var_264] ; this
.text:00003506                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:0000350B                 mov     byte ptr [ebp+var_4], 6
.text:0000350F                 lea     ecx, [ebp+var_234] ; this
.text:00003515                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:0000351A                 mov     byte ptr [ebp+var_4], 4
.text:0000351E                 lea     ecx, [ebp+var_1E4]
.text:00003524                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003529                 mov     byte ptr [ebp+var_4], 3
.text:0000352D                 lea     ecx, [ebp+var_1D4]
.text:00003533                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00003538                 mov     byte ptr [ebp+var_4], 2
.text:0000353C                 lea     ecx, [ebp+var_178] ; this
.text:00003542                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003547                 mov     byte ptr [ebp+var_4], 0
.text:0000354B                 lea     ecx, [ebp+var_128] ; this
.text:00003551                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00003556                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000355D                 lea     ecx, [ebp+var_18]
.text:00003560                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003565                 mov     eax, [ebp+var_6B4]
.text:0000356B                 jmp     loc_3784
.text:00003570 ; ---------------------------------------------------------------------------
.text:00003570
.text:00003570 loc_3570:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *):loc_3443j
.text:00003570                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1F30j
.text:00003570                 lea     ecx, [ebp+var_60C]
.text:00003576                 push    ecx             ; struct NArchive::NZip::CItemOut *
.text:00003577                 lea     ecx, [ebp+var_1D4]
.text:0000357D                 call    ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)
.text:00003582                 mov     edx, dword ptr [ebp+var_28]
.text:00003585                 add     edx, 1Eh
.text:00003588                 mov     eax, dword ptr [ebp+var_28+4]
.text:0000358B                 adc     eax, 0
.text:0000358E                 mov     dword ptr [ebp+var_28], edx
.text:00003591                 mov     dword ptr [ebp+var_28+4], eax
.text:00003594                 mov     ecx, dword ptr [ebp+var_28+4]
.text:00003597                 push    ecx
.text:00003598                 mov     edx, dword ptr [ebp+var_28]
.text:0000359B                 push    edx             ; unsigned __int64
.text:0000359C                 mov     eax, [ebp+var_1DC]
.text:000035A2                 mov     ecx, [eax+8]    ; this
.text:000035A5                 call    ?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset(unsigned __int64)
.text:000035AA                 mov     ecx, [ebp+var_3E4]
.text:000035B0                 add     ecx, 1
.text:000035B3                 mov     [ebp+var_3E4], ecx
.text:000035B9                 mov     byte ptr [ebp+var_4], 15h
.text:000035BD                 lea     ecx, [ebp+var_60C] ; this
.text:000035C3                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000035C8                 mov     byte ptr [ebp+var_4], 0Ch
.text:000035CC                 lea     ecx, [ebp+var_584] ; this
.text:000035D2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000035D7                 jmp     loc_21C9
.text:000035DC ; ---------------------------------------------------------------------------
.text:000035DC
.text:000035DC loc_35DC:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+C77j
.text:000035DC                 push    0               ; unsigned __int64 *
.text:000035DE                 push    0               ; unsigned __int64 *
.text:000035E0                 push    0               ; int
.text:000035E2                 lea     ecx, [ebp+var_234] ; this
.text:000035E8                 call    ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ; CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)
.text:000035ED                 mov     [ebp+var_658], eax
.text:000035F3                 cmp     [ebp+var_658], 0
.text:000035FA                 jz      loc_36BC
.text:00003600                 mov     edx, [ebp+var_658]
.text:00003606                 mov     [ebp+var_6B8], edx
.text:0000360C                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003610                 lea     ecx, [ebp+var_2B8]
.text:00003616                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000361B                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000361F                 lea     ecx, [ebp+var_2A4]
.text:00003625                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000362A                 mov     byte ptr [ebp+var_4], 9
.text:0000362E                 lea     ecx, [ebp+var_290] ; this
.text:00003634                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00003639                 mov     byte ptr [ebp+var_4], 8
.text:0000363D                 lea     ecx, [ebp+var_27C] ; this
.text:00003643                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00003648                 mov     byte ptr [ebp+var_4], 7
.text:0000364C                 lea     ecx, [ebp+var_264] ; this
.text:00003652                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00003657                 mov     byte ptr [ebp+var_4], 6
.text:0000365B                 lea     ecx, [ebp+var_234] ; this
.text:00003661                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00003666                 mov     byte ptr [ebp+var_4], 4
.text:0000366A                 lea     ecx, [ebp+var_1E4]
.text:00003670                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003675                 mov     byte ptr [ebp+var_4], 3
.text:00003679                 lea     ecx, [ebp+var_1D4]
.text:0000367F                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00003684                 mov     byte ptr [ebp+var_4], 2
.text:00003688                 lea     ecx, [ebp+var_178] ; this
.text:0000368E                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003693                 mov     byte ptr [ebp+var_4], 0
.text:00003697                 lea     ecx, [ebp+var_128] ; this
.text:0000369D                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000036A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000036A9                 lea     ecx, [ebp+var_18]
.text:000036AC                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000036B1                 mov     eax, [ebp+var_6B8]
.text:000036B7                 jmp     loc_3784
.text:000036BC ; ---------------------------------------------------------------------------
.text:000036BC
.text:000036BC loc_36BC:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+209Aj
.text:000036BC                 mov     eax, [ebp+arg_14]
.text:000036BF                 push    eax
.text:000036C0                 lea     ecx, [ebp+var_1D4]
.text:000036C6                 push    ecx
.text:000036C7                 mov     ecx, [ebp+arg_0]
.text:000036CA                 call    ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)
.text:000036CF                 mov     [ebp+var_6BC], 0
.text:000036D9                 mov     byte ptr [ebp+var_4], 0Bh
.text:000036DD                 lea     ecx, [ebp+var_2B8]
.text:000036E3                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000036E8                 mov     byte ptr [ebp+var_4], 0Ah
.text:000036EC                 lea     ecx, [ebp+var_2A4]
.text:000036F2                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000036F7                 mov     byte ptr [ebp+var_4], 9
.text:000036FB                 lea     ecx, [ebp+var_290] ; this
.text:00003701                 call    ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text:00003706                 mov     byte ptr [ebp+var_4], 8
.text:0000370A                 lea     ecx, [ebp+var_27C] ; this
.text:00003710                 call    ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text:00003715                 mov     byte ptr [ebp+var_4], 7
.text:00003719                 lea     ecx, [ebp+var_264] ; this
.text:0000371F                 call    ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text:00003724                 mov     byte ptr [ebp+var_4], 6
.text:00003728                 lea     ecx, [ebp+var_234] ; this
.text:0000372E                 call    ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text:00003733                 mov     byte ptr [ebp+var_4], 4
.text:00003737                 lea     ecx, [ebp+var_1E4]
.text:0000373D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003742                 mov     byte ptr [ebp+var_4], 3
.text:00003746                 lea     ecx, [ebp+var_1D4]
.text:0000374C                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00003751                 mov     byte ptr [ebp+var_4], 2
.text:00003755                 lea     ecx, [ebp+var_178] ; this
.text:0000375B                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003760                 mov     byte ptr [ebp+var_4], 0
.text:00003764                 lea     ecx, [ebp+var_128] ; this
.text:0000376A                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000376F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003776                 lea     ecx, [ebp+var_18]
.text:00003779                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000377E                 mov     eax, [ebp+var_6BC]
.text:00003784
.text:00003784 loc_3784:                               ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+179j
.text:00003784                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+579j ...
.text:00003784                 push    edx
.text:00003785                 mov     ecx, ebp
.text:00003787                 push    eax
.text:00003788                 lea     edx, $LN151
.text:0000378E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003793                 pop     eax
.text:00003794                 pop     edx
.text:00003795                 mov     ecx, [ebp+var_C]
.text:00003798                 mov     large fs:0, ecx
.text:0000379F                 pop     ecx
.text:000037A0                 pop     edi
.text:000037A1                 pop     esi
.text:000037A2                 mov     ecx, [ebp+var_10]
.text:000037A5                 xor     ecx, ebp
.text:000037A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000037AC                 add     esp, 6F8h
.text:000037B2                 cmp     ebp, esp
.text:000037B4                 call    __RTC_CheckEsp
.text:000037B9                 mov     esp, ebp
.text:000037BB                 pop     ebp
.text:000037BC                 retn    1Ch
.text:000037BC ?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z endp
.text:000037BC
.text:000037BC ; ---------------------------------------------------------------------------
.text:000037BF                 align 10h
.text:000037C0 $LN151          dd 17h                  ; DATA XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2228o
.text:000037C4                 dd offset $LN150
.text:000037C8 $LN150          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000037C4o
.text:000037D0                 dd offset $LN126        ; "opCallback"
.text:000037D4                 dd 0FFFFFFD8h, 8
.text:000037DC                 dd offset $LN127        ; "complexity"
.text:000037E0                 dd 0FFFFFF50h, 68h
.text:000037E8                 dd offset $LN128        ; "inputItem"
.text:000037EC                 dd 0FFFFFED8h, 70h
.text:000037F4                 dd offset $LN129        ; "compressor"
.text:000037F8                 dd 0FFFFFE88h, 48h
.text:00003800                 dd offset $LN130        ; "options2"
.text:00003804                 dd 0FFFFFE6Bh, 1
.text:0000380C                 dd offset $LN131        ; "fixedNumber"
.text:00003810                 dd 0FFFFFE47h, 1
.text:00003818                 dd offset $LN132        ; "fixedNumber"
.text:0000381C                 dd 0FFFFFE2Ch, 0Ch
.text:00003824                 dd offset $LN133        ; "items"
.text:00003828                 dd 0FFFFFE1Ch, 4
.text:00003830                 dd offset $LN134        ; "progress"
.text:00003834                 db 0CCh
.text:00003835                 db 0FDh, 2 dup(0FFh)
.text:00003838                 dd offset loc_48
.text:0000383C                 dd offset $LN135        ; "mtCompressProgressMixer"
.text:00003840                 dd 0FFFFFD9Ch, 28h
.text:00003848                 dd offset $LN136        ; "memManager"
.text:0000384C                 dd 0FFFFFD84h, 10h
.text:00003854                 dd offset $LN137        ; "refs"
.text:00003858                 dd 0FFFFFD70h, 0Ch
.text:00003860                 dd offset $LN138        ; "threads"
.text:00003864                 dd 0FFFFFD5Ch, 0Ch
.text:0000386C                 dd offset $LN139        ; "compressingCompletedEvents"
.text:00003870                 dd 0FFFFFD48h, 0Ch
.text:00003878                 dd offset $LN140        ; "threadIndices"
.text:0000387C                 dd 0FFFFFBA8h, 68h
.text:00003884                 dd offset $LN141        ; "itemEx"
.text:00003888                 dd 0FFFFFB20h, 80h
.text:00003890                 dd offset $LN142        ; "item"
.text:00003894                 dd 0FFFFFB14h, 4
.text:0000389C                 dd offset $LN143        ; "fileInStream"
.text:000038A0                 dd 0FFFFFB08h, 4
.text:000038A8                 dd offset $LN144        ; "lock"
.text:000038AC                 dd 0FFFFFA7Ch, 68h
.text:000038B4                 dd offset $LN145        ; "itemEx"
.text:000038B8                 dd 0FFFFF9F4h, 80h
.text:000038C0                 db 0F0h ; = OFF32 SEGDEF [_text,38F0]
.text:000038C1                 db  38h ; 8
.text:000038C2                 db    0
.text:000038C3                 db    0
.text:000038C4                 dd 0FFFFF9E0h, 4
.text:000038CC                 dd offset $LN147        ; "outStream"
.text:000038D0                 dd 0FFFFF9D0h, 4
.text:000038D8                 dd offset $LN148        ; "outStream"
.text:000038DC $LN148          db 'outStream',0        ; DATA XREF: .text:000038D8o
.text:000038E6 $LN147          db 'outStream',0        ; DATA XREF: .text:000038CCo
.text:000038F0 $LN146          db 'item',0
.text:000038F5 $LN145          db 'itemEx',0           ; DATA XREF: .text:000038B4o
.text:000038FC $LN144          db 'lock',0             ; DATA XREF: .text:000038A8o
.text:00003901 $LN143          db 'fileInStream',0     ; DATA XREF: .text:0000389Co
.text:0000390E $LN142          db 'item',0             ; DATA XREF: .text:00003890o
.text:00003913 $LN141          db 'itemEx',0           ; DATA XREF: .text:00003884o
.text:0000391A $LN140          db 'threadIndices',0    ; DATA XREF: .text:00003878o
.text:00003928 $LN139          db 'compressingCompletedEvents',0
.text:00003928                                         ; DATA XREF: .text:0000386Co
.text:00003943 $LN138          db 'threads',0          ; DATA XREF: .text:00003860o
.text:0000394B $LN137          db 'refs',0             ; DATA XREF: .text:00003854o
.text:00003950 $LN136          db 'memManager',0       ; DATA XREF: .text:00003848o
.text:0000395B $LN135          db 'mtCompressProgressMixer',0 ; DATA XREF: .text:0000383Co
.text:00003973 $LN134          db 'progress',0         ; DATA XREF: .text:00003830o
.text:0000397C $LN133          db 'items',0            ; DATA XREF: .text:00003824o
.text:00003982 $LN132          db 'fixedNumber',0      ; DATA XREF: .text:00003818o
.text:0000398E $LN131          db 'fixedNumber',0      ; DATA XREF: .text:0000380Co
.text:0000399A $LN130          db 'options2',0         ; DATA XREF: .text:00003800o
.text:000039A3 $LN129          db 'compressor',0       ; DATA XREF: .text:000037F4o
.text:000039AE $LN128          db 'inputItem',0        ; DATA XREF: .text:000037E8o
.text:000039B8 $LN127          db 'complexity',0       ; DATA XREF: .text:000037DCo
.text:000039C3 $LN126          db 'opCallback',0       ; DATA XREF: .text:000037D0o
.text:000039CE                 align 10h
.text:000039D0
.text:000039D0 ; =============== S U B R O U T I N E =======================================
.text:000039D0
.text:000039D0 ; Attributes: bp-based frame
.text:000039D0
.text:000039D0 ; int __stdcall NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive *, int, int, NArchive::NZip::CLocalItem *)
.text:000039D0 ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z proc near
.text:000039D0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1788p
.text:000039D0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1841p ...
.text:000039D0
.text:000039D0 var_4           = dword ptr -4
.text:000039D0 arg_0           = dword ptr  8
.text:000039D0 arg_4           = dword ptr  0Ch
.text:000039D0 arg_8           = dword ptr  10h
.text:000039D0 arg_C           = dword ptr  14h
.text:000039D0
.text:000039D0                 push    ebp
.text:000039D1                 mov     ebp, esp
.text:000039D3                 push    ecx
.text:000039D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039DB                 mov     eax, [ebp+arg_C]
.text:000039DE                 mov     ecx, [ebp+arg_8]
.text:000039E1                 mov     edx, [ecx+18h]
.text:000039E4                 mov     [eax+8], edx
.text:000039E7                 mov     ecx, [ecx+1Ch]
.text:000039EA                 mov     [eax+0Ch], ecx
.text:000039ED                 mov     ecx, [ebp+arg_C] ; this
.text:000039F0                 call    ?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CLocalItem::ClearFlags(void)
.text:000039F5                 mov     edx, [ebp+arg_8]
.text:000039F8                 movzx   eax, byte ptr [edx+1]
.text:000039FC                 test    eax, eax
.text:000039FE                 jz      loc_3A8B
.text:00003A04                 mov     ecx, [ebp+arg_8]
.text:00003A07                 mov     dl, [ecx+2]
.text:00003A0A                 mov     byte ptr [ebp+var_4+3], dl
.text:00003A0D                 mov     eax, [ebp+arg_8]
.text:00003A10                 add     eax, 20h ; ' '
.text:00003A13                 push    eax
.text:00003A14                 mov     ecx, [ebp+arg_C]
.text:00003A17                 add     ecx, 20h ; ' '
.text:00003A1A                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00003A1F                 mov     ecx, [ebp+arg_8]
.text:00003A22                 movzx   edx, byte ptr [ecx+4]
.text:00003A26                 push    edx             ; bool
.text:00003A27                 mov     ecx, [ebp+arg_C] ; this
.text:00003A2A                 call    ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetUtf8(bool)
.text:00003A2F                 mov     eax, [ebp+arg_C]
.text:00003A32                 mov     ecx, [ebp+arg_8]
.text:00003A35                 mov     edx, [ecx+10h]
.text:00003A38                 mov     [eax+3Ch], edx
.text:00003A3B                 mov     eax, [ebp+arg_C]
.text:00003A3E                 mov     ecx, [ebp+arg_8]
.text:00003A41                 mov     edx, [ecx+14h]
.text:00003A44                 mov     [eax+18h], edx
.text:00003A47                 mov     eax, [ebp+arg_8]
.text:00003A4A                 mov     ecx, [eax+2Ch]
.text:00003A4D                 mov     edx, [eax+30h]
.text:00003A50                 mov     eax, [ebp+arg_C]
.text:00003A53                 mov     [eax+60h], ecx
.text:00003A56                 mov     [eax+64h], edx
.text:00003A59                 mov     ecx, [ebp+arg_8]
.text:00003A5C                 mov     edx, [ecx+34h]
.text:00003A5F                 mov     eax, [ecx+38h]
.text:00003A62                 mov     ecx, [ebp+arg_C]
.text:00003A65                 mov     [ecx+68h], edx
.text:00003A68                 mov     [ecx+6Ch], eax
.text:00003A6B                 mov     edx, [ebp+arg_8]
.text:00003A6E                 mov     eax, [edx+3Ch]
.text:00003A71                 mov     ecx, [edx+40h]
.text:00003A74                 mov     edx, [ebp+arg_C]
.text:00003A77                 mov     [edx+70h], eax
.text:00003A7A                 mov     [edx+74h], ecx
.text:00003A7D                 mov     eax, [ebp+arg_C]
.text:00003A80                 mov     ecx, [ebp+arg_8]
.text:00003A83                 mov     dl, [ecx+3]
.text:00003A86                 mov     [eax+78h], dl
.text:00003A89                 jmp     short loc_3A96
.text:00003A8B ; ---------------------------------------------------------------------------
.text:00003A8B
.text:00003A8B loc_3A8B:                               ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+2Ej
.text:00003A8B                 mov     ecx, [ebp+arg_C] ; this
.text:00003A8E                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00003A93                 mov     byte ptr [ebp+var_4+3], al
.text:00003A96
.text:00003A96 loc_3A96:                               ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+B9j
.text:00003A96                 mov     ecx, [ebp+arg_0] ; this
.text:00003A99                 call    ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos(void)
.text:00003A9E                 mov     ecx, [ebp+arg_C]
.text:00003AA1                 mov     [ecx+40h], eax
.text:00003AA4                 mov     [ecx+44h], edx
.text:00003AA7                 mov     edx, [ebp+arg_C]
.text:00003AAA                 mov     byte ptr [edx+39h], 0
.text:00003AAE                 mov     eax, [ebp+arg_C]
.text:00003AB1                 mov     byte ptr [eax+38h], 3Fh ; '?'
.text:00003AB5                 mov     ecx, [ebp+arg_C]
.text:00003AB8                 mov     byte ptr [ecx+5], 0
.text:00003ABC                 xor     edx, edx
.text:00003ABE                 mov     eax, [ebp+arg_C]
.text:00003AC1                 mov     [eax+3Ah], dx
.text:00003AC5                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:00003AC9                 test    ecx, ecx
.text:00003ACB                 jnz     short loc_3ADE
.text:00003ACD                 mov     edx, [ebp+arg_4]
.text:00003AD0                 movzx   eax, byte ptr [edx+24h]
.text:00003AD4                 test    eax, eax
.text:00003AD6                 jz      short loc_3ADE
.text:00003AD8                 mov     byte ptr [ebp+var_4+2], 1
.text:00003ADC                 jmp     short loc_3AE2
.text:00003ADE ; ---------------------------------------------------------------------------
.text:00003ADE
.text:00003ADE loc_3ADE:                               ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+FBj
.text:00003ADE                                         ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+106j
.text:00003ADE                 mov     byte ptr [ebp+var_4+2], 0
.text:00003AE2
.text:00003AE2 loc_3AE2:                               ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+10Cj
.text:00003AE2                 movzx   ecx, byte ptr [ebp+var_4+2]
.text:00003AE6                 push    ecx             ; bool
.text:00003AE7                 mov     ecx, [ebp+arg_C] ; this
.text:00003AEA                 call    ?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetEncrypted(bool)
.text:00003AEF                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00003AF3                 test    edx, edx
.text:00003AF5                 jz      short loc_3B22
.text:00003AF7                 mov     eax, [ebp+arg_C]
.text:00003AFA                 mov     byte ptr [eax+4], 14h
.text:00003AFE                 xor     ecx, ecx
.text:00003B00                 mov     edx, [ebp+arg_C]
.text:00003B03                 mov     [edx+2], cx
.text:00003B07                 mov     eax, [ebp+arg_C]
.text:00003B0A                 mov     dword ptr [eax+10h], 0
.text:00003B11                 mov     dword ptr [eax+14h], 0
.text:00003B18                 mov     ecx, [ebp+arg_C]
.text:00003B1B                 mov     dword ptr [ecx+1Ch], 0
.text:00003B22
.text:00003B22 loc_3B22:                               ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+125j
.text:00003B22                 add     esp, 4
.text:00003B25                 cmp     ebp, esp
.text:00003B27                 call    __RTC_CheckEsp
.text:00003B2C                 mov     esp, ebp
.text:00003B2E                 pop     ebp
.text:00003B2F                 retn    10h
.text:00003B2F ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z endp
.text:00003B2F
.text:00003B2F ; ---------------------------------------------------------------------------
.text:00003B32                 align 10h
.text:00003B40
.text:00003B40 ; =============== S U B R O U T I N E =======================================
.text:00003B40
.text:00003B40 ; Attributes: bp-based frame
.text:00003B40
.text:00003B40 ; void __stdcall NArchive::NZip::SetItemInfoFromCompressingResult(struct NArchive::NZip::CCompressingResult const &, bool, unsigned char, class NArchive::NZip::CItem &)
.text:00003B40 ?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z proc near
.text:00003B40                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+186Bp
.text:00003B40                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1E33p ...
.text:00003B40
.text:00003B40 var_30          = dword ptr -30h
.text:00003B40 var_2C          = dword ptr -2Ch
.text:00003B40 var_28          = dword ptr -28h
.text:00003B40 var_24          = dword ptr -24h
.text:00003B40 var_20          = dword ptr -20h
.text:00003B40 var_1C          = dword ptr -1Ch
.text:00003B40 var_18          = dword ptr -18h
.text:00003B40 var_14          = dword ptr -14h
.text:00003B40 var_10          = dword ptr -10h
.text:00003B40 var_C           = dword ptr -0Ch
.text:00003B40 var_4           = dword ptr -4
.text:00003B40 arg_0           = dword ptr  8
.text:00003B40 arg_4           = byte ptr  0Ch
.text:00003B40 arg_8           = byte ptr  10h
.text:00003B40 arg_C           = dword ptr  14h
.text:00003B40
.text:00003B40                 push    ebp
.text:00003B41                 mov     ebp, esp
.text:00003B43                 push    0FFFFFFFFh
.text:00003B45                 push    offset __ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
.text:00003B4A                 mov     eax, large fs:0
.text:00003B50                 push    eax
.text:00003B51                 sub     esp, 24h
.text:00003B54                 mov     eax, 0CCCCCCCCh
.text:00003B59                 mov     [ebp+var_30], eax
.text:00003B5C                 mov     [ebp+var_2C], eax
.text:00003B5F                 mov     [ebp+var_28], eax
.text:00003B62                 mov     [ebp+var_24], eax
.text:00003B65                 mov     [ebp+var_20], eax
.text:00003B68                 mov     [ebp+var_1C], eax
.text:00003B6B                 mov     [ebp+var_18], eax
.text:00003B6E                 mov     [ebp+var_14], eax
.text:00003B71                 mov     [ebp+var_10], eax
.text:00003B74                 mov     eax, dword ptr ds:___security_cookie
.text:00003B79                 xor     eax, ebp
.text:00003B7B                 push    eax
.text:00003B7C                 lea     eax, [ebp+var_C]
.text:00003B7F                 mov     large fs:0, eax
.text:00003B85                 mov     eax, [ebp+arg_C]
.text:00003B88                 mov     ecx, [ebp+arg_0]
.text:00003B8B                 mov     dl, [ecx+16h]
.text:00003B8E                 mov     [eax+4], dl
.text:00003B91                 mov     eax, [ebp+arg_C]
.text:00003B94                 mov     ecx, [ebp+arg_0]
.text:00003B97                 mov     dx, [ecx+14h]
.text:00003B9B                 mov     [eax+2], dx
.text:00003B9F                 mov     eax, [ebp+arg_C]
.text:00003BA2                 mov     ecx, [ebp+arg_0]
.text:00003BA5                 mov     edx, [ecx+10h]
.text:00003BA8                 mov     [eax+1Ch], edx
.text:00003BAB                 mov     eax, [ebp+arg_C]
.text:00003BAE                 mov     ecx, [ebp+arg_0]
.text:00003BB1                 mov     edx, [ecx]
.text:00003BB3                 mov     [eax+8], edx
.text:00003BB6                 mov     ecx, [ecx+4]
.text:00003BB9                 mov     [eax+0Ch], ecx
.text:00003BBC                 mov     edx, [ebp+arg_C]
.text:00003BBF                 mov     eax, [ebp+arg_0]
.text:00003BC2                 mov     ecx, [eax+8]
.text:00003BC5                 mov     [edx+10h], ecx
.text:00003BC8                 mov     eax, [eax+0Ch]
.text:00003BCB                 mov     [edx+14h], eax
.text:00003BCE                 mov     ecx, [ebp+arg_C]
.text:00003BD1                 add     ecx, 2Ch ; ','  ; this
.text:00003BD4                 call    ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear(void)
.text:00003BD9                 mov     ecx, [ebp+arg_C]
.text:00003BDC                 add     ecx, 48h ; 'H'  ; this
.text:00003BDF                 call    ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear(void)
.text:00003BE4                 movzx   ecx, [ebp+arg_4]
.text:00003BE8                 test    ecx, ecx
.text:00003BEA                 jz      short loc_3C63
.text:00003BEC                 lea     ecx, [ebp+var_18] ; this
.text:00003BEF                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00003BF4                 mov     dl, [ebp+arg_8]
.text:00003BF7                 mov     byte ptr [ebp+var_18+2], dl
.text:00003BFA                 mov     eax, [ebp+arg_0]
.text:00003BFD                 mov     cx, [eax+14h]
.text:00003C01                 mov     word ptr [ebp+var_14], cx
.text:00003C05                 mov     edx, 63h ; 'c'
.text:00003C0A                 mov     eax, [ebp+arg_C]
.text:00003C0D                 mov     [eax+2], dx
.text:00003C11                 mov     ecx, [ebp+arg_C]
.text:00003C14                 mov     dword ptr [ecx+1Ch], 0
.text:00003C1B                 lea     ecx, [ebp+var_2C] ; this
.text:00003C1E                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(void)
.text:00003C23                 mov     [ebp+var_4], 0
.text:00003C2A                 lea     edx, [ebp+var_2C]
.text:00003C2D                 push    edx             ; struct NArchive::NZip::CExtraSubBlock *
.text:00003C2E                 lea     ecx, [ebp+var_18] ; this
.text:00003C31                 call    ?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::SetSubBlock(NArchive::NZip::CExtraSubBlock &)
.text:00003C36                 lea     eax, [ebp+var_2C]
.text:00003C39                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00003C3A                 mov     ecx, [ebp+arg_C]
.text:00003C3D                 add     ecx, 2Ch ; ','
.text:00003C40                 call    ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)
.text:00003C45                 lea     ecx, [ebp+var_2C]
.text:00003C48                 push    ecx             ; struct NArchive::NZip::CExtraSubBlock *
.text:00003C49                 mov     ecx, [ebp+arg_C]
.text:00003C4C                 add     ecx, 48h ; 'H'
.text:00003C4F                 call    ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)
.text:00003C54                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C5B                 lea     ecx, [ebp+var_2C] ; this
.text:00003C5E                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:00003C63
.text:00003C63 loc_3C63:                               ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+AAj
.text:00003C63                 push    edx
.text:00003C64                 mov     ecx, ebp
.text:00003C66                 push    eax
.text:00003C67                 lea     edx, $LN9
.text:00003C6D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003C72                 pop     eax
.text:00003C73                 pop     edx
.text:00003C74                 mov     ecx, [ebp+var_C]
.text:00003C77                 mov     large fs:0, ecx
.text:00003C7E                 pop     ecx
.text:00003C7F                 add     esp, 30h
.text:00003C82                 cmp     ebp, esp
.text:00003C84                 call    __RTC_CheckEsp
.text:00003C89                 mov     esp, ebp
.text:00003C8B                 pop     ebp
.text:00003C8C                 retn    10h
.text:00003C8C ?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z endp
.text:00003C8C
.text:00003C8C ; ---------------------------------------------------------------------------
.text:00003C8F                 align 10h
.text:00003C90 $LN9            dd 2                    ; DATA XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+127o
.text:00003C94                 dd offset $LN8
.text:00003C98 $LN8            dd 0FFFFFFE8h, 6        ; DATA XREF: .text:00003C94o
.text:00003CA0                 dd offset $LN5          ; "wzAesField"
.text:00003CA4                 dd 0FFFFFFD4h, 0Ch
.text:00003CAC                 dd offset $LN6
.text:00003CB0 $LN6            db 73h, 62h, 0          ; DATA XREF: .text:00003CACo
.text:00003CB3 $LN5            db 'wzAesField',0       ; DATA XREF: .text:00003CA0o
.text:00003CBE                 align 10h
.text:00003CC0
.text:00003CC0 ; =============== S U B R O U T I N E =======================================
.text:00003CC0
.text:00003CC0 ; Attributes: bp-based frame
.text:00003CC0
.text:00003CC0 ; int __stdcall NArchive::NZip::CoderThread(NArchive::NZip::CThreadInfo *)
.text:00003CC0 ?CoderThread@NZip@NArchive@@YGIPAX@Z proc near
.text:00003CC0                                         ; DATA XREF: NArchive::NZip::CThreadInfo::CreateThread(void)+12o
.text:00003CC0
.text:00003CC0 arg_0           = dword ptr  8
.text:00003CC0
.text:00003CC0                 push    ebp
.text:00003CC1                 mov     ebp, esp
.text:00003CC3                 mov     ecx, [ebp+arg_0] ; this
.text:00003CC6                 call    ?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CThreadInfo::WaitAndCode(void)
.text:00003CCB                 xor     eax, eax
.text:00003CCD                 cmp     ebp, esp
.text:00003CCF                 call    __RTC_CheckEsp
.text:00003CD4                 pop     ebp
.text:00003CD5                 retn    4
.text:00003CD5 ?CoderThread@NZip@NArchive@@YGIPAX@Z endp
.text:00003CD5
.text:00003CD5 ; ---------------------------------------------------------------------------
.text:00003CD8                 align 10h
.text:00003CE0
.text:00003CE0 ; =============== S U B R O U T I N E =======================================
.text:00003CE0
.text:00003CE0 ; Attributes: bp-based frame
.text:00003CE0
.text:00003CE0 ; int __stdcall NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive *, NArchive::NZip::CInArchive *, NArchive::NZip::CItemEx *, int, NArchive::NZip::CLocalItem *, int, int, int)
.text:00003CE0 ?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z proc near
.text:00003CE0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1F1Ep
.text:00003CE0                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+850p
.text:00003CE0
.text:00003CE0 var_3C          = dword ptr -3Ch
.text:00003CE0 var_34          = dword ptr -34h
.text:00003CE0 var_2C          = qword ptr -2Ch
.text:00003CE0 var_20          = dword ptr -20h
.text:00003CE0 var_18          = dword ptr -18h
.text:00003CE0 var_10          = dword ptr -10h
.text:00003CE0 var_C           = dword ptr -0Ch
.text:00003CE0 var_4           = dword ptr -4
.text:00003CE0 arg_0           = dword ptr  8
.text:00003CE0 arg_4           = dword ptr  0Ch
.text:00003CE0 arg_8           = dword ptr  10h
.text:00003CE0 arg_C           = dword ptr  14h
.text:00003CE0 arg_10          = dword ptr  18h
.text:00003CE0 arg_14          = dword ptr  1Ch
.text:00003CE0 arg_18          = dword ptr  20h
.text:00003CE0 arg_1C          = dword ptr  24h
.text:00003CE0
.text:00003CE0                 push    ebp
.text:00003CE1                 mov     ebp, esp
.text:00003CE3                 sub     esp, 3Ch
.text:00003CE6                 push    esi
.text:00003CE7                 push    edi
.text:00003CE8                 lea     edi, [ebp+var_3C]
.text:00003CEB                 mov     ecx, 0Fh
.text:00003CF0                 mov     eax, 0CCCCCCCCh
.text:00003CF5                 rep stosd
.text:00003CF7                 cmp     [ebp+arg_18], 0
.text:00003CFB                 jz      short loc_3D30
.text:00003CFD                 mov     esi, esp
.text:00003CFF                 push    3
.text:00003D01                 mov     eax, [ebp+arg_C]
.text:00003D04                 mov     ecx, [eax+8]
.text:00003D07                 push    ecx
.text:00003D08                 push    1
.text:00003D0A                 mov     edx, [ebp+arg_18]
.text:00003D0D                 mov     eax, [edx]
.text:00003D0F                 mov     ecx, [ebp+arg_18]
.text:00003D12                 push    ecx
.text:00003D13                 mov     edx, [eax+10h]
.text:00003D16                 call    edx
.text:00003D18                 cmp     esi, esp
.text:00003D1A                 call    __RTC_CheckEsp
.text:00003D1F                 mov     [ebp+var_4], eax
.text:00003D22                 cmp     [ebp+var_4], 0
.text:00003D26                 jz      short loc_3D30
.text:00003D28                 mov     eax, [ebp+var_4]
.text:00003D2B                 jmp     loc_3F35
.text:00003D30 ; ---------------------------------------------------------------------------
.text:00003D30
.text:00003D30 loc_3D30:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1Bj
.text:00003D30                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+46j
.text:00003D30                 mov     eax, [ebp+arg_C]
.text:00003D33                 movzx   ecx, byte ptr [eax+1]
.text:00003D37                 test    ecx, ecx
.text:00003D39                 jz      loc_3EA7
.text:00003D3F                 mov     ecx, [ebp+arg_10] ; this
.text:00003D42                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:00003D47                 movzx   edx, al
.text:00003D4A                 test    edx, edx
.text:00003D4C                 jz      short loc_3D58
.text:00003D4E                 mov     eax, 80004001h
.text:00003D53                 jmp     loc_3F35
.text:00003D58 ; ---------------------------------------------------------------------------
.text:00003D58
.text:00003D58 loc_3D58:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+6Cj
.text:00003D58                 mov     eax, [ebp+arg_8]
.text:00003D5B                 mov     ecx, [eax+14h]
.text:00003D5E                 push    ecx
.text:00003D5F                 mov     edx, [eax+10h]
.text:00003D62                 push    edx             ; unsigned __int64
.text:00003D63                 mov     ecx, [ebp+arg_8] ; this
.text:00003D66                 call    ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition(void)
.text:00003D6B                 push    edx
.text:00003D6C                 push    eax             ; unsigned __int64
.text:00003D6D                 mov     ecx, [ebp+arg_4] ; this
.text:00003D70                 call    ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ; NArchive::NZip::CInArchive::GetOffsetInStream(unsigned __int64)
.text:00003D75                 push    edx
.text:00003D76                 push    eax             ; unsigned __int64
.text:00003D77                 lea     ecx, [ebp+var_18] ; this
.text:00003D7A                 call    ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z ; NArchive::NZip::CUpdateRange::CUpdateRange(unsigned __int64,unsigned __int64)
.text:00003D7F                 mov     eax, [ebp+arg_C]
.text:00003D82                 add     eax, 20h ; ' '
.text:00003D85                 push    eax
.text:00003D86                 mov     ecx, [ebp+arg_10]
.text:00003D89                 add     ecx, 20h ; ' '
.text:00003D8C                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00003D91                 mov     ecx, [ebp+arg_C]
.text:00003D94                 movzx   edx, byte ptr [ecx+4]
.text:00003D98                 push    edx             ; bool
.text:00003D99                 mov     ecx, [ebp+arg_10] ; this
.text:00003D9C                 call    ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetUtf8(bool)
.text:00003DA1                 mov     eax, [ebp+arg_10]
.text:00003DA4                 mov     ecx, [ebp+arg_C]
.text:00003DA7                 mov     edx, [ecx+14h]
.text:00003DAA                 mov     [eax+18h], edx
.text:00003DAD                 mov     eax, [ebp+arg_C]
.text:00003DB0                 mov     ecx, [eax+2Ch]
.text:00003DB3                 mov     edx, [eax+30h]
.text:00003DB6                 mov     eax, [ebp+arg_10]
.text:00003DB9                 mov     [eax+60h], ecx
.text:00003DBC                 mov     [eax+64h], edx
.text:00003DBF                 mov     ecx, [ebp+arg_C]
.text:00003DC2                 mov     edx, [ecx+34h]
.text:00003DC5                 mov     eax, [ecx+38h]
.text:00003DC8                 mov     ecx, [ebp+arg_10]
.text:00003DCB                 mov     [ecx+68h], edx
.text:00003DCE                 mov     [ecx+6Ch], eax
.text:00003DD1                 mov     edx, [ebp+arg_C]
.text:00003DD4                 mov     eax, [edx+3Ch]
.text:00003DD7                 mov     ecx, [edx+40h]
.text:00003DDA                 mov     edx, [ebp+arg_10]
.text:00003DDD                 mov     [edx+70h], eax
.text:00003DE0                 mov     [edx+74h], ecx
.text:00003DE3                 mov     eax, [ebp+arg_10]
.text:00003DE6                 mov     ecx, [ebp+arg_C]
.text:00003DE9                 mov     dl, [ecx+3]
.text:00003DEC                 mov     [eax+78h], dl
.text:00003DEF                 mov     ecx, [ebp+arg_10]
.text:00003DF2                 add     ecx, 48h ; 'H'  ; this
.text:00003DF5                 call    ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)
.text:00003DFA                 mov     ecx, [ebp+arg_10]
.text:00003DFD                 add     ecx, 2Ch ; ','  ; this
.text:00003E00                 call    ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)
.text:00003E05                 mov     ecx, [ebp+arg_0] ; this
.text:00003E08                 call    ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos(void)
.text:00003E0D                 mov     ecx, [ebp+arg_10]
.text:00003E10                 mov     [ecx+40h], eax
.text:00003E13                 mov     [ecx+44h], edx
.text:00003E16                 mov     ecx, [ebp+arg_10]
.text:00003E19                 add     ecx, 2Ch ; ','  ; this
.text:00003E1C                 call    ?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CExtraBlock::HasWzAes(void)
.text:00003E21                 movzx   edx, al
.text:00003E24                 push    edx             ; bool
.text:00003E25                 mov     eax, [ebp+arg_10]
.text:00003E28                 mov     ecx, [eax+14h]
.text:00003E2B                 push    ecx
.text:00003E2C                 mov     edx, [eax+10h]
.text:00003E2F                 push    edx             ; unsigned __int64
.text:00003E30                 mov     eax, [ebp+arg_10]
.text:00003E33                 mov     ecx, [eax+0Ch]
.text:00003E36                 push    ecx
.text:00003E37                 mov     edx, [eax+8]
.text:00003E3A                 push    edx             ; unsigned __int64
.text:00003E3B                 mov     ecx, [ebp+arg_10]
.text:00003E3E                 add     ecx, 20h ; ' '  ; this
.text:00003E41                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00003E46                 push    eax             ; unsigned int
.text:00003E47                 mov     ecx, [ebp+arg_0] ; this
.text:00003E4A                 call    ?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)
.text:00003E4F                 mov     eax, [ebp+arg_10]
.text:00003E52                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:00003E53                 mov     ecx, [ebp+arg_0] ; this
.text:00003E56                 call    ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)
.text:00003E5B                 mov     ecx, [ebp+arg_14]
.text:00003E5E                 push    ecx             ; int
.text:00003E5F                 lea     edx, [ebp+var_18]
.text:00003E62                 push    edx             ; int
.text:00003E63                 mov     eax, [ebp+arg_0]
.text:00003E66                 push    eax             ; int
.text:00003E67                 mov     ecx, [ebp+arg_4]
.text:00003E6A                 add     ecx, 80h ; 'Ç'
.text:00003E70                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00003E75                 push    eax             ; NCompress *
.text:00003E76                 call    ?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)
.text:00003E7B                 mov     [ebp+var_20], eax
.text:00003E7E                 cmp     [ebp+var_20], 0
.text:00003E82                 jz      short loc_3E8C
.text:00003E84                 mov     eax, [ebp+var_20]
.text:00003E87                 jmp     loc_3F35
.text:00003E8C ; ---------------------------------------------------------------------------
.text:00003E8C
.text:00003E8C loc_3E8C:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1A2j
.text:00003E8C                 mov     ecx, [ebp+arg_1C]
.text:00003E8F                 mov     edx, [ecx]
.text:00003E91                 add     edx, [ebp+var_10]
.text:00003E94                 mov     eax, [ecx+4]
.text:00003E97                 adc     eax, [ebp+var_C]
.text:00003E9A                 mov     ecx, [ebp+arg_1C]
.text:00003E9D                 mov     [ecx], edx
.text:00003E9F                 mov     [ecx+4], eax
.text:00003EA2                 jmp     loc_3F33
.text:00003EA7 ; ---------------------------------------------------------------------------
.text:00003EA7
.text:00003EA7 loc_3EA7:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+59j
.text:00003EA7                 mov     ecx, [ebp+arg_8] ; this
.text:00003EAA                 call    ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetLocalFullSize(void)
.text:00003EAF                 push    edx
.text:00003EB0                 push    eax             ; unsigned __int64
.text:00003EB1                 mov     edx, [ebp+arg_8]
.text:00003EB4                 mov     eax, [edx+44h]
.text:00003EB7                 push    eax
.text:00003EB8                 mov     ecx, [edx+40h]
.text:00003EBB                 push    ecx             ; unsigned __int64
.text:00003EBC                 mov     ecx, [ebp+arg_4] ; this
.text:00003EBF                 call    ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ; NArchive::NZip::CInArchive::GetOffsetInStream(unsigned __int64)
.text:00003EC4                 push    edx
.text:00003EC5                 push    eax             ; unsigned __int64
.text:00003EC6                 lea     ecx, [ebp+var_34] ; this
.text:00003EC9                 call    ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z ; NArchive::NZip::CUpdateRange::CUpdateRange(unsigned __int64,unsigned __int64)
.text:00003ECE                 mov     ecx, [ebp+arg_0] ; this
.text:00003ED1                 call    ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos(void)
.text:00003ED6                 mov     ecx, [ebp+arg_10]
.text:00003ED9                 mov     [ecx+40h], eax
.text:00003EDC                 mov     [ecx+44h], edx
.text:00003EDF                 mov     edx, [ebp+arg_14]
.text:00003EE2                 push    edx             ; int
.text:00003EE3                 lea     eax, [ebp+var_34]
.text:00003EE6                 push    eax             ; int
.text:00003EE7                 mov     ecx, [ebp+arg_0]
.text:00003EEA                 push    ecx             ; int
.text:00003EEB                 mov     ecx, [ebp+arg_4]
.text:00003EEE                 add     ecx, 80h ; 'Ç'
.text:00003EF4                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00003EF9                 push    eax             ; NCompress *
.text:00003EFA                 call    ?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)
.text:00003EFF                 mov     [ebp+var_3C], eax
.text:00003F02                 cmp     [ebp+var_3C], 0
.text:00003F06                 jz      short loc_3F0D
.text:00003F08                 mov     eax, [ebp+var_3C]
.text:00003F0B                 jmp     short loc_3F35
.text:00003F0D ; ---------------------------------------------------------------------------
.text:00003F0D
.text:00003F0D loc_3F0D:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+226j
.text:00003F0D                 mov     edx, [ebp+arg_1C]
.text:00003F10                 mov     eax, [edx]
.text:00003F12                 add     eax, dword ptr [ebp+var_2C]
.text:00003F15                 mov     ecx, [edx+4]
.text:00003F18                 adc     ecx, dword ptr [ebp+var_2C+4]
.text:00003F1B                 mov     edx, [ebp+arg_1C]
.text:00003F1E                 mov     [edx], eax
.text:00003F20                 mov     [edx+4], ecx
.text:00003F23                 mov     eax, dword ptr [ebp+var_2C+4]
.text:00003F26                 push    eax
.text:00003F27                 mov     ecx, dword ptr [ebp+var_2C]
.text:00003F2A                 push    ecx             ; unsigned __int64
.text:00003F2B                 mov     ecx, [ebp+arg_0] ; this
.text:00003F2E                 call    ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::COutArchive::MoveCurPos(unsigned __int64)
.text:00003F33
.text:00003F33 loc_3F33:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1C2j
.text:00003F33                 xor     eax, eax
.text:00003F35
.text:00003F35 loc_3F35:                               ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+4Bj
.text:00003F35                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+73j ...
.text:00003F35                 push    edx
.text:00003F36                 mov     ecx, ebp
.text:00003F38                 push    eax
.text:00003F39                 lea     edx, $LN13_0
.text:00003F3F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003F44                 pop     eax
.text:00003F45                 pop     edx
.text:00003F46                 pop     edi
.text:00003F47                 pop     esi
.text:00003F48                 add     esp, 3Ch
.text:00003F4B                 cmp     ebp, esp
.text:00003F4D                 call    __RTC_CheckEsp
.text:00003F52                 mov     esp, ebp
.text:00003F54                 pop     ebp
.text:00003F55                 retn    20h
.text:00003F55 ?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z endp
.text:00003F55
.text:00003F55 ; ---------------------------------------------------------------------------
.text:00003F58 $LN13_0         dd 2                    ; DATA XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+259o
.text:00003F5C                 dd offset $LN12
.text:00003F60 $LN12           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00003F5Co
.text:00003F68                 dd offset $LN10_0       ; "range"
.text:00003F6C                 db 0CCh
.text:00003F6D                 db 3 dup(0FFh)
.text:00003F70                 dd 10h
.text:00003F74                 dd offset $LN11_0       ; "range"
.text:00003F78 $LN11_0         db 'range',0            ; DATA XREF: .text:00003F74o
.text:00003F7E $LN10_0         db 'range',0            ; DATA XREF: .text:00003F68o
.text:00003F84                 align 10h
.text:00003F90
.text:00003F90 ; =============== S U B R O U T I N E =======================================
.text:00003F90
.text:00003F90 ; Attributes: bp-based frame
.text:00003F90
.text:00003F90 ; int __stdcall NArchive::NZip::WriteRange(NCompress *, int, int, int)
.text:00003F90 ?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z proc near
.text:00003F90                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+196p
.text:00003F90                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+21Ap
.text:00003F90
.text:00003F90 var_18          = dword ptr -18h
.text:00003F90 var_14          = dword ptr -14h
.text:00003F90 var_10          = dword ptr -10h
.text:00003F90 var_C           = dword ptr -0Ch
.text:00003F90 var_8           = dword ptr -8
.text:00003F90 var_4           = dword ptr -4
.text:00003F90 arg_0           = dword ptr  8
.text:00003F90 arg_4           = dword ptr  0Ch
.text:00003F90 arg_8           = dword ptr  10h
.text:00003F90 arg_C           = dword ptr  14h
.text:00003F90
.text:00003F90                 push    ebp
.text:00003F91                 mov     ebp, esp
.text:00003F93                 sub     esp, 18h
.text:00003F96                 push    esi
.text:00003F97                 mov     eax, 0CCCCCCCCh
.text:00003F9C                 mov     [ebp+var_18], eax
.text:00003F9F                 mov     [ebp+var_14], eax
.text:00003FA2                 mov     [ebp+var_10], eax
.text:00003FA5                 mov     [ebp+var_C], eax
.text:00003FA8                 mov     [ebp+var_8], eax
.text:00003FAB                 mov     [ebp+var_4], eax
.text:00003FAE                 mov     esi, esp
.text:00003FB0                 lea     eax, [ebp+var_C]
.text:00003FB3                 push    eax
.text:00003FB4                 push    0
.text:00003FB6                 mov     ecx, [ebp+arg_8]
.text:00003FB9                 mov     edx, [ecx+4]
.text:00003FBC                 push    edx
.text:00003FBD                 mov     eax, [ecx]
.text:00003FBF                 push    eax
.text:00003FC0                 mov     ecx, [ebp+arg_0]
.text:00003FC3                 mov     edx, [ecx]
.text:00003FC5                 mov     eax, [ebp+arg_0]
.text:00003FC8                 push    eax
.text:00003FC9                 mov     ecx, [edx+10h]
.text:00003FCC                 call    ecx
.text:00003FCE                 cmp     esi, esp
.text:00003FD0                 call    __RTC_CheckEsp
.text:00003FD5                 mov     [ebp+var_14], eax
.text:00003FD8                 cmp     [ebp+var_14], 0
.text:00003FDC                 jz      short loc_3FE3
.text:00003FDE                 mov     eax, [ebp+var_14]
.text:00003FE1                 jmp     short loc_4032
.text:00003FE3 ; ---------------------------------------------------------------------------
.text:00003FE3
.text:00003FE3 loc_3FE3:                               ; CODE XREF: NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+4Cj
.text:00003FE3                 mov     edx, [ebp+arg_C]
.text:00003FE6                 push    edx             ; int
.text:00003FE7                 mov     eax, [ebp+arg_4]
.text:00003FEA                 push    eax             ; int
.text:00003FEB                 mov     ecx, [ebp+arg_8]
.text:00003FEE                 mov     edx, [ecx+0Ch]
.text:00003FF1                 push    edx             ; NArchive::NZip::COutArchive *
.text:00003FF2                 mov     eax, [ecx+8]
.text:00003FF5                 push    eax             ; struct ISequentialOutStream *
.text:00003FF6                 mov     ecx, [ebp+arg_0]
.text:00003FF9                 push    ecx             ; NCompress *
.text:00003FFA                 call    ?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)
.text:00003FFF                 mov     [ebp+var_18], eax
.text:00004002                 cmp     [ebp+var_18], 0
.text:00004006                 jz      short loc_400D
.text:00004008                 mov     eax, [ebp+var_18]
.text:0000400B                 jmp     short loc_4032
.text:0000400D ; ---------------------------------------------------------------------------
.text:0000400D
.text:0000400D loc_400D:                               ; CODE XREF: NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+76j
.text:0000400D                 mov     edx, [ebp+arg_8]
.text:00004010                 add     edx, 8
.text:00004013                 mov     esi, esp
.text:00004015                 push    edx
.text:00004016                 mov     eax, [ebp+arg_8]
.text:00004019                 add     eax, 8
.text:0000401C                 push    eax
.text:0000401D                 mov     ecx, [ebp+arg_C]
.text:00004020                 mov     edx, [ecx]
.text:00004022                 mov     eax, [ebp+arg_C]
.text:00004025                 push    eax
.text:00004026                 mov     ecx, [edx+0Ch]
.text:00004029                 call    ecx
.text:0000402B                 cmp     esi, esp
.text:0000402D                 call    __RTC_CheckEsp
.text:00004032
.text:00004032 loc_4032:                               ; CODE XREF: NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+51j
.text:00004032                                         ; NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+7Bj
.text:00004032                 push    edx
.text:00004033                 mov     ecx, ebp
.text:00004035                 push    eax
.text:00004036                 lea     edx, $LN7
.text:0000403C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004041                 pop     eax
.text:00004042                 pop     edx
.text:00004043                 pop     esi
.text:00004044                 add     esp, 18h
.text:00004047                 cmp     ebp, esp
.text:00004049                 call    __RTC_CheckEsp
.text:0000404E                 mov     esp, ebp
.text:00004050                 pop     ebp
.text:00004051                 retn    10h
.text:00004051 ?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z endp
.text:00004051
.text:00004051 ; ---------------------------------------------------------------------------
.text:00004054 $LN7            dd 1                    ; DATA XREF: NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+A6o
.text:00004058                 dd offset $LN6_0
.text:0000405C $LN6_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00004058o
.text:00004064                 dd offset $LN5_1        ; "position"
.text:00004068 $LN5_1          db 'position',0         ; DATA XREF: .text:00004064o
.text:00004071                 align 10h
.text:00004080
.text:00004080 ; =============== S U B R O U T I N E =======================================
.text:00004080
.text:00004080 ; Attributes: bp-based frame
.text:00004080
.text:00004080 ; int __stdcall NArchive::NZip::CopyBlockToArchive(NCompress *, struct ISequentialOutStream *, NArchive::NZip::COutArchive *, int, int)
.text:00004080 ?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z proc near
.text:00004080                                         ; CODE XREF: NArchive::NZip::WriteRange(IInStream *,NArchive::NZip::COutArchive &,NArchive::NZip::CUpdateRange const &,ICompressProgressInfo *)+6Ap
.text:00004080
.text:00004080 var_1C          = dword ptr -1Ch
.text:00004080 var_18          = dword ptr -18h
.text:00004080 var_14          = dword ptr -14h
.text:00004080 var_10          = dword ptr -10h
.text:00004080 var_C           = dword ptr -0Ch
.text:00004080 var_4           = dword ptr -4
.text:00004080 arg_0           = dword ptr  8
.text:00004080 arg_4           = dword ptr  0Ch
.text:00004080 arg_8           = dword ptr  10h
.text:00004080 arg_C           = dword ptr  14h
.text:00004080 arg_10          = dword ptr  18h
.text:00004080
.text:00004080                 push    ebp
.text:00004081                 mov     ebp, esp
.text:00004083                 push    0FFFFFFFFh
.text:00004085                 push    offset __ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
.text:0000408A                 mov     eax, large fs:0
.text:00004090                 push    eax
.text:00004091                 sub     esp, 10h
.text:00004094                 mov     eax, 0CCCCCCCCh
.text:00004099                 mov     [ebp+var_1C], eax
.text:0000409C                 mov     [ebp+var_18], eax
.text:0000409F                 mov     [ebp+var_14], eax
.text:000040A2                 mov     [ebp+var_10], eax
.text:000040A5                 mov     eax, dword ptr ds:___security_cookie
.text:000040AA                 xor     eax, ebp
.text:000040AC                 push    eax             ; struct ICompressProgressInfo *
.text:000040AD                 lea     eax, [ebp+var_C]
.text:000040B0                 mov     large fs:0, eax
.text:000040B6                 lea     ecx, [ebp+var_14]
.text:000040B9                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000040BE                 mov     [ebp+var_4], 0
.text:000040C5                 lea     ecx, [ebp+var_14]
.text:000040C8                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:000040CD                 push    eax             ; struct ISequentialOutStream **
.text:000040CE                 mov     ecx, [ebp+arg_C] ; this
.text:000040D1                 call    ?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)
.text:000040D6                 mov     eax, [ebp+arg_10]
.text:000040D9                 push    eax
.text:000040DA                 mov     ecx, [ebp+arg_8]
.text:000040DD                 push    ecx             ; unsigned __int64
.text:000040DE                 mov     edx, [ebp+arg_4]
.text:000040E1                 push    edx             ; struct ISequentialOutStream *
.text:000040E2                 lea     ecx, [ebp+var_14]
.text:000040E5                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000040EA                 push    eax             ; struct ISequentialInStream *
.text:000040EB                 mov     eax, [ebp+arg_0]
.text:000040EE                 push    eax             ; this
.text:000040EF                 call    ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)
.text:000040F4                 mov     [ebp+var_1C], eax
.text:000040F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000040FE                 lea     ecx, [ebp+var_14]
.text:00004101                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00004106                 mov     eax, [ebp+var_1C]
.text:00004109                 push    edx
.text:0000410A                 mov     ecx, ebp
.text:0000410C                 push    eax
.text:0000410D                 lea     edx, $LN7_0
.text:00004113                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004118                 pop     eax
.text:00004119                 pop     edx
.text:0000411A                 mov     ecx, [ebp+var_C]
.text:0000411D                 mov     large fs:0, ecx
.text:00004124                 pop     ecx
.text:00004125                 add     esp, 1Ch
.text:00004128                 cmp     ebp, esp
.text:0000412A                 call    __RTC_CheckEsp
.text:0000412F                 mov     esp, ebp
.text:00004131                 pop     ebp
.text:00004132                 retn    14h
.text:00004132 ?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z endp
.text:00004132
.text:00004132 ; ---------------------------------------------------------------------------
.text:00004135                 align 4
.text:00004138 $LN7_0          dd 1                    ; DATA XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+8Do
.text:0000413C                 dd offset $LN6_1
.text:00004140 $LN6_1          dd 0FFFFFFECh, 4        ; DATA XREF: .text:0000413Co
.text:00004148                 dd offset $LN4_0        ; "outStream"
.text:0000414C $LN4_0          db 'outStream',0        ; DATA XREF: .text:00004148o
.text:00004156                 align 10h
.text:00004160
.text:00004160 ; =============== S U B R O U T I N E =======================================
.text:00004160
.text:00004160 ; Attributes: bp-based frame
.text:00004160
.text:00004160 ; int __stdcall NArchive::NZip::WriteDirHeader(NArchive::NZip::COutArchive *, int, int, struct NArchive::NZip::CLocalItem *)
.text:00004160 ?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z proc near
.text:00004160                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+174Ep
.text:00004160                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+31Ap
.text:00004160
.text:00004160 arg_0           = dword ptr  8
.text:00004160 arg_4           = dword ptr  0Ch
.text:00004160 arg_8           = dword ptr  10h
.text:00004160 arg_C           = dword ptr  14h
.text:00004160
.text:00004160                 push    ebp
.text:00004161                 mov     ebp, esp
.text:00004163                 mov     eax, [ebp+arg_C]
.text:00004166                 push    eax             ; NArchive::NZip::CLocalItem *
.text:00004167                 mov     ecx, [ebp+arg_8]
.text:0000416A                 push    ecx             ; int
.text:0000416B                 mov     edx, [ebp+arg_4]
.text:0000416E                 push    edx             ; int
.text:0000416F                 mov     eax, [ebp+arg_0]
.text:00004172                 push    eax             ; NArchive::NZip::COutArchive *
.text:00004173                 call    ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:00004178                 push    0               ; bool
.text:0000417A                 mov     ecx, [ebp+arg_8]
.text:0000417D                 mov     edx, [ecx+1Ch]
.text:00004180                 push    edx
.text:00004181                 mov     eax, [ecx+18h]
.text:00004184                 push    eax             ; unsigned __int64
.text:00004185                 mov     ecx, [ebp+arg_C]
.text:00004188                 add     ecx, 20h ; ' '  ; this
.text:0000418B                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00004190                 push    eax             ; unsigned int
.text:00004191                 mov     ecx, [ebp+arg_0] ; this
.text:00004194                 call    ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)
.text:00004199                 mov     ecx, [ebp+arg_C]
.text:0000419C                 push    ecx             ; struct NArchive::NZip::CLocalItem *
.text:0000419D                 mov     ecx, [ebp+arg_0] ; this
.text:000041A0                 call    ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)
.text:000041A5                 cmp     ebp, esp
.text:000041A7                 call    __RTC_CheckEsp
.text:000041AC                 pop     ebp
.text:000041AD                 retn    10h
.text:000041AD ?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z endp
.text:000041AD
.text:000041B0
.text:000041B0 ; =============== S U B R O U T I N E =======================================
.text:000041B0
.text:000041B0 ; Attributes: bp-based frame
.text:000041B0
.text:000041B0 ; int __stdcall NArchive::NZip::Update2St(NArchive::NZip::COutArchive *, NArchive::NZip::CInArchive *, int, int, NArchive::NZip::CCompressionMethodMode *, int, struct IProgress *, int)
.text:000041B0 ?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z proc near
.text:000041B0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+53Bp
.text:000041B0
.text:000041B0 var_260         = byte ptr -260h
.text:000041B0 var_25D         = byte ptr -25Dh
.text:000041B0 var_25C         = dword ptr -25Ch
.text:000041B0 var_258         = dword ptr -258h
.text:000041B0 var_254         = dword ptr -254h
.text:000041B0 var_250         = dword ptr -250h
.text:000041B0 var_24C         = dword ptr -24Ch
.text:000041B0 var_248         = dword ptr -248h
.text:000041B0 var_244         = dword ptr -244h
.text:000041B0 var_240         = dword ptr -240h
.text:000041B0 var_23C         = dword ptr -23Ch
.text:000041B0 var_238         = dword ptr -238h
.text:000041B0 var_234         = dword ptr -234h
.text:000041B0 var_230         = dword ptr -230h
.text:000041B0 var_22C         = dword ptr -22Ch
.text:000041B0 var_228         = dword ptr -228h
.text:000041B0 var_224         = dword ptr -224h
.text:000041B0 var_21C         = dword ptr -21Ch
.text:000041B0 var_218         = dword ptr -218h
.text:000041B0 var_210         = dword ptr -210h
.text:000041B0 var_20C         = dword ptr -20Ch
.text:000041B0 var_204         = byte ptr -204h
.text:000041B0 var_1F8         = byte ptr -1F8h
.text:000041B0 var_1E1         = byte ptr -1E1h
.text:000041B0 var_1DC         = dword ptr -1DCh
.text:000041B0 var_1D8         = dword ptr -1D8h
.text:000041B0 var_1D4         = dword ptr -1D4h
.text:000041B0 var_1CC         = byte ptr -1CCh
.text:000041B0 var_1C1         = byte ptr -1C1h
.text:000041B0 var_1BC         = byte ptr -1BCh
.text:000041B0 var_1B4         = dword ptr -1B4h
.text:000041B0 var_1B0         = dword ptr -1B0h
.text:000041B0 var_1AC         = dword ptr -1ACh
.text:000041B0 var_1A8         = dword ptr -1A8h
.text:000041B0 var_19C         = byte ptr -19Ch
.text:000041B0 var_134         = byte ptr -134h
.text:000041B0 var_C8          = dword ptr -0C8h
.text:000041B0 var_C4          = dword ptr -0C4h
.text:000041B0 var_C0          = dword ptr -0C0h
.text:000041B0 var_BC          = dword ptr -0BCh
.text:000041B0 var_B8          = dword ptr -0B8h
.text:000041B0 var_B4          = dword ptr -0B4h
.text:000041B0 var_B0          = dword ptr -0B0h
.text:000041B0 var_A8          = byte ptr -0A8h
.text:000041B0 var_94          = byte ptr -94h
.text:000041B0 var_1C          = byte ptr -1Ch
.text:000041B0 var_14          = dword ptr -14h
.text:000041B0 var_10          = dword ptr -10h
.text:000041B0 var_C           = dword ptr -0Ch
.text:000041B0 var_4           = dword ptr -4
.text:000041B0 arg_0           = dword ptr  8
.text:000041B0 arg_4           = dword ptr  0Ch
.text:000041B0 arg_8           = dword ptr  10h
.text:000041B0 arg_C           = dword ptr  14h
.text:000041B0 arg_10          = dword ptr  18h
.text:000041B0 arg_14          = dword ptr  1Ch
.text:000041B0 arg_18          = dword ptr  20h
.text:000041B0 arg_1C          = dword ptr  24h
.text:000041B0
.text:000041B0                 push    ebp
.text:000041B1                 mov     ebp, esp
.text:000041B3                 push    0FFFFFFFFh
.text:000041B5                 push    offset __ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
.text:000041BA                 mov     eax, large fs:0
.text:000041C0                 push    eax
.text:000041C1                 sub     esp, 254h
.text:000041C7                 push    esi
.text:000041C8                 push    edi
.text:000041C9                 lea     edi, [ebp+var_260]
.text:000041CF                 mov     ecx, 95h ; 'ò'
.text:000041D4                 mov     eax, 0CCCCCCCCh
.text:000041D9                 rep stosd
.text:000041DB                 mov     eax, dword ptr ds:___security_cookie
.text:000041E0                 xor     eax, ebp
.text:000041E2                 mov     [ebp+var_10], eax
.text:000041E5                 push    eax
.text:000041E6                 lea     eax, [ebp+var_C]
.text:000041E9                 mov     large fs:0, eax
.text:000041EF                 push    38h ; '8'       ; unsigned int
.text:000041F1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000041F6                 add     esp, 4
.text:000041F9                 mov     [ebp+var_230], eax
.text:000041FF                 mov     [ebp+var_4], 0
.text:00004206                 cmp     [ebp+var_230], 0
.text:0000420D                 jz      short loc_4222
.text:0000420F                 mov     ecx, [ebp+var_230]
.text:00004215                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:0000421A                 mov     [ebp+var_25C], eax
.text:00004220                 jmp     short loc_422C
.text:00004222 ; ---------------------------------------------------------------------------
.text:00004222
.text:00004222 loc_4222:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+5Dj
.text:00004222                 mov     [ebp+var_25C], 0
.text:0000422C
.text:0000422C loc_422C:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+70j
.text:0000422C                 mov     eax, [ebp+var_25C]
.text:00004232                 mov     [ebp+var_22C], eax
.text:00004238                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000423F                 mov     ecx, [ebp+var_22C]
.text:00004245                 mov     [ebp+var_14], ecx
.text:00004248                 mov     edx, [ebp+var_14]
.text:0000424B                 push    edx
.text:0000424C                 lea     ecx, [ebp+var_1C]
.text:0000424F                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00004254                 mov     [ebp+var_4], 1
.text:0000425B                 push    1               ; bool
.text:0000425D                 mov     eax, [ebp+arg_18]
.text:00004260                 push    eax             ; struct IProgress *
.text:00004261                 mov     ecx, [ebp+var_14] ; this
.text:00004264                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00004269                 mov     ecx, [ebp+arg_10]
.text:0000426C                 push    ecx             ; struct NArchive::NZip::CCompressionMethodMode *
.text:0000426D                 lea     ecx, [ebp+var_94] ; this
.text:00004273                 call    ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)
.text:00004278                 mov     byte ptr [ebp+var_4], 2
.text:0000427C                 lea     ecx, [ebp+var_A8]
.text:00004282                 call    ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004287                 mov     byte ptr [ebp+var_4], 3
.text:0000428B                 mov     [ebp+var_B4], 0
.text:00004295                 mov     [ebp+var_B0], 0
.text:0000429F                 mov     [ebp+var_BC], 0
.text:000042A9                 mov     [ebp+var_B8], 0
.text:000042B3                 mov     [ebp+var_C0], 0
.text:000042BD                 jmp     short loc_42CE
.text:000042BF ; ---------------------------------------------------------------------------
.text:000042BF
.text:000042BF loc_42BF:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+457j
.text:000042BF                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+933j
.text:000042BF                 mov     edx, [ebp+var_C0]
.text:000042C5                 add     edx, 1
.text:000042C8                 mov     [ebp+var_C0], edx
.text:000042CE
.text:000042CE loc_42CE:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+10Dj
.text:000042CE                 mov     ecx, [ebp+arg_C]
.text:000042D1                 call    ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size(void)
.text:000042D6                 cmp     [ebp+var_C0], eax
.text:000042DC                 jnb     loc_4AE8
.text:000042E2                 mov     eax, [ebp+var_14]
.text:000042E5                 mov     ecx, [ebp+var_B4]
.text:000042EB                 mov     [eax+20h], ecx
.text:000042EE                 mov     edx, [ebp+var_B0]
.text:000042F4                 mov     [eax+24h], edx
.text:000042F7                 mov     eax, [ebp+var_14]
.text:000042FA                 mov     ecx, [ebp+var_BC]
.text:00004300                 mov     [eax+28h], ecx
.text:00004303                 mov     edx, [ebp+var_B8]
.text:00004309                 mov     [eax+2Ch], edx
.text:0000430C                 mov     ecx, [ebp+var_14] ; this
.text:0000430F                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00004314                 mov     [ebp+var_C4], eax
.text:0000431A                 cmp     [ebp+var_C4], 0
.text:00004321                 jz      short loc_4367
.text:00004323                 mov     eax, [ebp+var_C4]
.text:00004329                 mov     [ebp+var_234], eax
.text:0000432F                 mov     byte ptr [ebp+var_4], 2
.text:00004333                 lea     ecx, [ebp+var_A8]
.text:00004339                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:0000433E                 mov     byte ptr [ebp+var_4], 1
.text:00004342                 lea     ecx, [ebp+var_94] ; this
.text:00004348                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000434D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004354                 lea     ecx, [ebp+var_1C]
.text:00004357                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000435C                 mov     eax, [ebp+var_234]
.text:00004362                 jmp     loc_4BBA
.text:00004367 ; ---------------------------------------------------------------------------
.text:00004367
.text:00004367 loc_4367:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+171j
.text:00004367                 mov     ecx, [ebp+var_C0]
.text:0000436D                 push    ecx
.text:0000436E                 mov     ecx, [ebp+arg_C]
.text:00004371                 call    ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[](uint)
.text:00004376                 mov     [ebp+var_C8], eax
.text:0000437C                 lea     ecx, [ebp+var_134] ; this
.text:00004382                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00004387                 mov     byte ptr [ebp+var_4], 4
.text:0000438B                 lea     ecx, [ebp+var_1BC] ; this
.text:00004391                 call    ??0CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::CItemOut(void)
.text:00004396                 mov     byte ptr [ebp+var_4], 5
.text:0000439A                 mov     edx, [ebp+var_C8]
.text:000043A0                 movzx   eax, byte ptr [edx+1]
.text:000043A4                 test    eax, eax
.text:000043A6                 jz      short loc_43B9
.text:000043A8                 mov     ecx, [ebp+var_C8]
.text:000043AE                 movzx   edx, byte ptr [ecx]
.text:000043B1                 test    edx, edx
.text:000043B3                 jnz     loc_445C
.text:000043B9
.text:000043B9 loc_43B9:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+1F6j
.text:000043B9                 mov     eax, [ebp+var_C8]
.text:000043BF                 mov     ecx, [eax+8]
.text:000043C2                 push    ecx
.text:000043C3                 mov     ecx, [ebp+arg_8]
.text:000043C6                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:000043CB                 push    eax
.text:000043CC                 lea     ecx, [ebp+var_134]
.text:000043D2                 call    ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItemEx::operator=(NArchive::NZip::CItemEx const &)
.text:000043D7                 lea     edx, [ebp+var_134]
.text:000043DD                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:000043DE                 mov     ecx, [ebp+arg_4] ; this
.text:000043E1                 call    ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)
.text:000043E6                 test    eax, eax
.text:000043E8                 jz      short loc_444A
.text:000043EA                 mov     [ebp+var_238], 80004001h
.text:000043F4                 mov     byte ptr [ebp+var_4], 4
.text:000043F8                 lea     ecx, [ebp+var_1BC] ; this
.text:000043FE                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004403                 mov     byte ptr [ebp+var_4], 3
.text:00004407                 lea     ecx, [ebp+var_134] ; this
.text:0000440D                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004412                 mov     byte ptr [ebp+var_4], 2
.text:00004416                 lea     ecx, [ebp+var_A8]
.text:0000441C                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004421                 mov     byte ptr [ebp+var_4], 1
.text:00004425                 lea     ecx, [ebp+var_94] ; this
.text:0000442B                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004430                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004437                 lea     ecx, [ebp+var_1C]
.text:0000443A                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000443F                 mov     eax, [ebp+var_238]
.text:00004445                 jmp     loc_4BBA
.text:0000444A ; ---------------------------------------------------------------------------
.text:0000444A
.text:0000444A loc_444A:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+238j
.text:0000444A                 lea     eax, [ebp+var_134]
.text:00004450                 push    eax
.text:00004451                 lea     ecx, [ebp+var_1BC]
.text:00004457                 call    ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)
.text:0000445C
.text:0000445C loc_445C:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+203j
.text:0000445C                 mov     ecx, [ebp+var_C8]
.text:00004462                 movzx   edx, byte ptr [ecx]
.text:00004465                 test    edx, edx
.text:00004467                 jz      loc_49B4
.text:0000446D                 mov     eax, [ebp+var_C8]
.text:00004473                 movzx   ecx, byte ptr [eax+1]
.text:00004477                 test    ecx, ecx
.text:00004479                 jz      short loc_448C
.text:0000447B                 mov     edx, [ebp+var_C8]
.text:00004481                 mov     al, [edx+2]
.text:00004484                 mov     [ebp+var_25D], al
.text:0000448A                 jmp     short loc_449D
.text:0000448C ; ---------------------------------------------------------------------------
.text:0000448C
.text:0000448C loc_448C:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+2C9j
.text:0000448C                 lea     ecx, [ebp+var_1BC] ; this
.text:00004492                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00004497                 mov     [ebp+var_25D], al
.text:0000449D
.text:0000449D loc_449D:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+2DAj
.text:0000449D                 mov     cl, [ebp+var_25D]
.text:000044A3                 mov     [ebp+var_1C1], cl
.text:000044A9                 movzx   edx, [ebp+var_1C1]
.text:000044B0                 test    edx, edx
.text:000044B2                 jz      short loc_44D4
.text:000044B4                 lea     eax, [ebp+var_1BC]
.text:000044BA                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:000044BB                 mov     ecx, [ebp+var_C8]
.text:000044C1                 push    ecx             ; int
.text:000044C2                 mov     edx, [ebp+arg_10]
.text:000044C5                 push    edx             ; int
.text:000044C6                 mov     eax, [ebp+arg_0]
.text:000044C9                 push    eax             ; NArchive::NZip::COutArchive *
.text:000044CA                 call    ?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::WriteDirHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const *,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:000044CF                 jmp     loc_49AF
.text:000044D4 ; ---------------------------------------------------------------------------
.text:000044D4
.text:000044D4 loc_44D4:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+302j
.text:000044D4                 lea     ecx, [ebp+var_1CC]
.text:000044DA                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000044DF                 mov     byte ptr [ebp+var_4], 6
.text:000044E3                 lea     ecx, [ebp+var_1CC]
.text:000044E9                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:000044EE                 mov     esi, esp
.text:000044F0                 push    eax
.text:000044F1                 mov     ecx, [ebp+var_C8]
.text:000044F7                 mov     edx, [ecx+0Ch]
.text:000044FA                 push    edx
.text:000044FB                 mov     eax, [ebp+arg_18]
.text:000044FE                 mov     ecx, [eax]
.text:00004500                 mov     edx, [ebp+arg_18]
.text:00004503                 push    edx
.text:00004504                 mov     eax, [ecx+1Ch]
.text:00004507                 call    eax
.text:00004509                 cmp     esi, esp
.text:0000450B                 call    __RTC_CheckEsp
.text:00004510                 mov     [ebp+var_1D4], eax
.text:00004516                 cmp     [ebp+var_1D4], 1
.text:0000451D                 jnz     loc_460C
.text:00004523                 mov     ecx, [ebp+var_14]
.text:00004526                 mov     edx, [ebp+var_C8]
.text:0000452C                 mov     eax, [ecx+18h]
.text:0000452F                 add     eax, [edx+18h]
.text:00004532                 mov     ecx, [ecx+1Ch]
.text:00004535                 adc     ecx, [edx+1Ch]
.text:00004538                 mov     edx, [ebp+var_14]
.text:0000453B                 mov     [edx+18h], eax
.text:0000453E                 mov     [edx+1Ch], ecx
.text:00004541                 mov     esi, esp
.text:00004543                 push    0
.text:00004545                 mov     eax, [ebp+arg_18]
.text:00004548                 mov     ecx, [eax]
.text:0000454A                 mov     edx, [ebp+arg_18]
.text:0000454D                 push    edx
.text:0000454E                 mov     eax, [ecx+20h]
.text:00004551                 call    eax
.text:00004553                 cmp     esi, esp
.text:00004555                 call    __RTC_CheckEsp
.text:0000455A                 mov     [ebp+var_1D8], eax
.text:00004560                 cmp     [ebp+var_1D8], 0
.text:00004567                 jz      short loc_45DA
.text:00004569                 mov     ecx, [ebp+var_1D8]
.text:0000456F                 mov     [ebp+var_23C], ecx
.text:00004575                 mov     byte ptr [ebp+var_4], 5
.text:00004579                 lea     ecx, [ebp+var_1CC]
.text:0000457F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004584                 mov     byte ptr [ebp+var_4], 4
.text:00004588                 lea     ecx, [ebp+var_1BC] ; this
.text:0000458E                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004593                 mov     byte ptr [ebp+var_4], 3
.text:00004597                 lea     ecx, [ebp+var_134] ; this
.text:0000459D                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000045A2                 mov     byte ptr [ebp+var_4], 2
.text:000045A6                 lea     ecx, [ebp+var_A8]
.text:000045AC                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:000045B1                 mov     byte ptr [ebp+var_4], 1
.text:000045B5                 lea     ecx, [ebp+var_94] ; this
.text:000045BB                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000045C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000045C7                 lea     ecx, [ebp+var_1C]
.text:000045CA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000045CF                 mov     eax, [ebp+var_23C]
.text:000045D5                 jmp     loc_4BBA
.text:000045DA ; ---------------------------------------------------------------------------
.text:000045DA
.text:000045DA loc_45DA:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+3B7j
.text:000045DA                 mov     byte ptr [ebp+var_4], 5
.text:000045DE                 lea     ecx, [ebp+var_1CC]
.text:000045E4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000045E9                 mov     byte ptr [ebp+var_4], 4
.text:000045ED                 lea     ecx, [ebp+var_1BC] ; this
.text:000045F3                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000045F8                 mov     byte ptr [ebp+var_4], 3
.text:000045FC                 lea     ecx, [ebp+var_134] ; this
.text:00004602                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004607                 jmp     loc_42BF
.text:0000460C ; ---------------------------------------------------------------------------
.text:0000460C
.text:0000460C loc_460C:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+36Dj
.text:0000460C                 mov     edx, [ebp+var_1D4]
.text:00004612                 mov     [ebp+var_1DC], edx
.text:00004618                 cmp     [ebp+var_1DC], 0
.text:0000461F                 jz      short loc_4692
.text:00004621                 mov     eax, [ebp+var_1DC]
.text:00004627                 mov     [ebp+var_240], eax
.text:0000462D                 mov     byte ptr [ebp+var_4], 5
.text:00004631                 lea     ecx, [ebp+var_1CC]
.text:00004637                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000463C                 mov     byte ptr [ebp+var_4], 4
.text:00004640                 lea     ecx, [ebp+var_1BC] ; this
.text:00004646                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:0000464B                 mov     byte ptr [ebp+var_4], 3
.text:0000464F                 lea     ecx, [ebp+var_134] ; this
.text:00004655                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000465A                 mov     byte ptr [ebp+var_4], 2
.text:0000465E                 lea     ecx, [ebp+var_A8]
.text:00004664                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004669                 mov     byte ptr [ebp+var_4], 1
.text:0000466D                 lea     ecx, [ebp+var_94] ; this
.text:00004673                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004678                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000467F                 lea     ecx, [ebp+var_1C]
.text:00004682                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004687                 mov     eax, [ebp+var_240]
.text:0000468D                 jmp     loc_4BBA
.text:00004692 ; ---------------------------------------------------------------------------
.text:00004692
.text:00004692 loc_4692:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+46Fj
.text:00004692                 lea     ecx, [ebp+var_1CC]
.text:00004698                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:0000469D                 movzx   ecx, al
.text:000046A0                 test    ecx, ecx
.text:000046A2                 jz      short loc_4713
.text:000046A4                 mov     [ebp+var_244], 80070057h
.text:000046AE                 mov     byte ptr [ebp+var_4], 5
.text:000046B2                 lea     ecx, [ebp+var_1CC]
.text:000046B8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000046BD                 mov     byte ptr [ebp+var_4], 4
.text:000046C1                 lea     ecx, [ebp+var_1BC] ; this
.text:000046C7                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:000046CC                 mov     byte ptr [ebp+var_4], 3
.text:000046D0                 lea     ecx, [ebp+var_134] ; this
.text:000046D6                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000046DB                 mov     byte ptr [ebp+var_4], 2
.text:000046DF                 lea     ecx, [ebp+var_A8]
.text:000046E5                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:000046EA                 mov     byte ptr [ebp+var_4], 1
.text:000046EE                 lea     ecx, [ebp+var_94] ; this
.text:000046F4                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:000046F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004700                 lea     ecx, [ebp+var_1C]
.text:00004703                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004708                 mov     eax, [ebp+var_244]
.text:0000470E                 jmp     loc_4BBA
.text:00004713 ; ---------------------------------------------------------------------------
.text:00004713
.text:00004713 loc_4713:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+4F2j
.text:00004713                 lea     edx, [ebp+var_1BC]
.text:00004719                 push    edx             ; NArchive::NZip::CLocalItem *
.text:0000471A                 mov     eax, [ebp+var_C8]
.text:00004720                 push    eax             ; int
.text:00004721                 mov     ecx, [ebp+arg_10]
.text:00004724                 push    ecx             ; int
.text:00004725                 mov     edx, [ebp+arg_0]
.text:00004728                 push    edx             ; NArchive::NZip::COutArchive *
.text:00004729                 call    ?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)
.text:0000472E                 mov     ecx, [ebp+arg_10] ; this
.text:00004731                 call    ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)
.text:00004736                 movzx   eax, al
.text:00004739                 push    eax             ; bool
.text:0000473A                 mov     ecx, [ebp+var_C8]
.text:00004740                 mov     edx, [ecx+1Ch]
.text:00004743                 push    edx
.text:00004744                 mov     eax, [ecx+18h]
.text:00004747                 push    eax             ; unsigned __int64
.text:00004748                 lea     ecx, [ebp+var_19C] ; this
.text:0000474E                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00004753                 push    eax             ; unsigned int
.text:00004754                 mov     ecx, [ebp+arg_0] ; this
.text:00004757                 call    ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)
.text:0000475C                 lea     ecx, [ebp+var_204]
.text:00004762                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00004767                 mov     byte ptr [ebp+var_4], 7
.text:0000476B                 lea     ecx, [ebp+var_204]
.text:00004771                 call    ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&(void)
.text:00004776                 push    eax             ; struct IOutStream **
.text:00004777                 mov     ecx, [ebp+arg_0] ; this
.text:0000477A                 call    ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)
.text:0000477F                 lea     ecx, [ebp+var_1F8]
.text:00004785                 push    ecx             ; struct NArchive::NZip::CCompressingResult *
.text:00004786                 lea     ecx, [ebp+var_1C]
.text:00004789                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000478E                 push    eax             ; struct ICompressProgressInfo *
.text:0000478F                 mov     edx, [ebp+var_C8]
.text:00004795                 mov     eax, [edx+14h]
.text:00004798                 push    eax             ; unsigned int
.text:00004799                 lea     ecx, [ebp+var_204]
.text:0000479F                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:000047A4                 push    eax             ; struct IOutStream *
.text:000047A5                 lea     ecx, [ebp+var_1CC]
.text:000047AB                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:000047B0                 push    eax             ; struct ISequentialInStream *
.text:000047B1                 lea     ecx, [ebp+var_94] ; this
.text:000047B7                 call    ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)
.text:000047BC                 mov     [ebp+var_20C], eax
.text:000047C2                 cmp     [ebp+var_20C], 0
.text:000047C9                 jz      loc_484F
.text:000047CF                 mov     ecx, [ebp+var_20C]
.text:000047D5                 mov     [ebp+var_248], ecx
.text:000047DB                 mov     byte ptr [ebp+var_4], 6
.text:000047DF                 lea     ecx, [ebp+var_204]
.text:000047E5                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000047EA                 mov     byte ptr [ebp+var_4], 5
.text:000047EE                 lea     ecx, [ebp+var_1CC]
.text:000047F4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000047F9                 mov     byte ptr [ebp+var_4], 4
.text:000047FD                 lea     ecx, [ebp+var_1BC] ; this
.text:00004803                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004808                 mov     byte ptr [ebp+var_4], 3
.text:0000480C                 lea     ecx, [ebp+var_134] ; this
.text:00004812                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004817                 mov     byte ptr [ebp+var_4], 2
.text:0000481B                 lea     ecx, [ebp+var_A8]
.text:00004821                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004826                 mov     byte ptr [ebp+var_4], 1
.text:0000482A                 lea     ecx, [ebp+var_94] ; this
.text:00004830                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004835                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000483C                 lea     ecx, [ebp+var_1C]
.text:0000483F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004844                 mov     eax, [ebp+var_248]
.text:0000484A                 jmp     loc_4BBA
.text:0000484F ; ---------------------------------------------------------------------------
.text:0000484F
.text:0000484F loc_484F:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+619j
.text:0000484F                 movzx   edx, [ebp+var_1E1]
.text:00004856                 test    edx, edx
.text:00004858                 jz      short loc_4867
.text:0000485A                 push    1               ; bool
.text:0000485C                 lea     ecx, [ebp+var_1BC] ; this
.text:00004862                 call    ?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetDescriptorMode(bool)
.text:00004867
.text:00004867 loc_4867:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+6A8j
.text:00004867                 lea     eax, [ebp+var_1BC]
.text:0000486D                 push    eax
.text:0000486E                 mov     ecx, [ebp+arg_10]
.text:00004871                 movzx   edx, byte ptr [ecx+16h]
.text:00004875                 push    edx
.text:00004876                 mov     ecx, [ebp+arg_10] ; this
.text:00004879                 call    ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)
.text:0000487E                 movzx   eax, al
.text:00004881                 push    eax
.text:00004882                 lea     ecx, [ebp+var_1F8]
.text:00004888                 push    ecx
.text:00004889                 call    ?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)
.text:0000488E                 lea     edx, [ebp+var_1BC]
.text:00004894                 push    edx             ; struct NArchive::NZip::CLocalItem *
.text:00004895                 mov     ecx, [ebp+arg_0] ; this
.text:00004898                 call    ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)
.text:0000489D                 mov     esi, esp
.text:0000489F                 push    0
.text:000048A1                 mov     eax, [ebp+arg_18]
.text:000048A4                 mov     ecx, [eax]
.text:000048A6                 mov     edx, [ebp+arg_18]
.text:000048A9                 push    edx
.text:000048AA                 mov     eax, [ecx+20h]
.text:000048AD                 call    eax
.text:000048AF                 cmp     esi, esp
.text:000048B1                 call    __RTC_CheckEsp
.text:000048B6                 mov     [ebp+var_210], eax
.text:000048BC                 cmp     [ebp+var_210], 0
.text:000048C3                 jz      loc_4949
.text:000048C9                 mov     ecx, [ebp+var_210]
.text:000048CF                 mov     [ebp+var_24C], ecx
.text:000048D5                 mov     byte ptr [ebp+var_4], 6
.text:000048D9                 lea     ecx, [ebp+var_204]
.text:000048DF                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000048E4                 mov     byte ptr [ebp+var_4], 5
.text:000048E8                 lea     ecx, [ebp+var_1CC]
.text:000048EE                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000048F3                 mov     byte ptr [ebp+var_4], 4
.text:000048F7                 lea     ecx, [ebp+var_1BC] ; this
.text:000048FD                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004902                 mov     byte ptr [ebp+var_4], 3
.text:00004906                 lea     ecx, [ebp+var_134] ; this
.text:0000490C                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004911                 mov     byte ptr [ebp+var_4], 2
.text:00004915                 lea     ecx, [ebp+var_A8]
.text:0000491B                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004920                 mov     byte ptr [ebp+var_4], 1
.text:00004924                 lea     ecx, [ebp+var_94] ; this
.text:0000492A                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000492F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004936                 lea     ecx, [ebp+var_1C]
.text:00004939                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000493E                 mov     eax, [ebp+var_24C]
.text:00004944                 jmp     loc_4BBA
.text:00004949 ; ---------------------------------------------------------------------------
.text:00004949
.text:00004949 loc_4949:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+713j
.text:00004949                 mov     edx, [ebp+var_B4]
.text:0000494F                 add     edx, [ebp+var_1B4]
.text:00004955                 mov     eax, [ebp+var_B0]
.text:0000495B                 adc     eax, [ebp+var_1B0]
.text:00004961                 mov     [ebp+var_B4], edx
.text:00004967                 mov     [ebp+var_B0], eax
.text:0000496D                 mov     ecx, [ebp+var_BC]
.text:00004973                 add     ecx, [ebp+var_1AC]
.text:00004979                 mov     edx, [ebp+var_B8]
.text:0000497F                 adc     edx, [ebp+var_1A8]
.text:00004985                 mov     [ebp+var_BC], ecx
.text:0000498B                 mov     [ebp+var_B8], edx
.text:00004991                 mov     byte ptr [ebp+var_4], 6
.text:00004995                 lea     ecx, [ebp+var_204]
.text:0000499B                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000049A0                 mov     byte ptr [ebp+var_4], 5
.text:000049A4                 lea     ecx, [ebp+var_1CC]
.text:000049AA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000049AF
.text:000049AF loc_49AF:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+31Fj
.text:000049AF                 jmp     loc_4A9B
.text:000049B4 ; ---------------------------------------------------------------------------
.text:000049B4
.text:000049B4 loc_49B4:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+2B7j
.text:000049B4                 mov     [ebp+var_21C], 0
.text:000049BE                 mov     [ebp+var_218], 0
.text:000049C8                 mov     eax, [ebp+var_14]
.text:000049CB                 mov     byte ptr [eax+30h], 0
.text:000049CF                 lea     ecx, [ebp+var_21C]
.text:000049D5                 push    ecx             ; int
.text:000049D6                 mov     edx, [ebp+arg_1C]
.text:000049D9                 push    edx             ; int
.text:000049DA                 lea     ecx, [ebp+var_1C]
.text:000049DD                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000049E2                 push    eax             ; int
.text:000049E3                 lea     eax, [ebp+var_1BC]
.text:000049E9                 push    eax             ; NArchive::NZip::CLocalItem *
.text:000049EA                 mov     ecx, [ebp+var_C8]
.text:000049F0                 push    ecx             ; int
.text:000049F1                 lea     edx, [ebp+var_134]
.text:000049F7                 push    edx             ; NArchive::NZip::CItemEx *
.text:000049F8                 mov     eax, [ebp+arg_4]
.text:000049FB                 push    eax             ; NArchive::NZip::CInArchive *
.text:000049FC                 mov     ecx, [ebp+arg_0]
.text:000049FF                 push    ecx             ; NArchive::NZip::COutArchive *
.text:00004A00                 call    ?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)
.text:00004A05                 mov     [ebp+var_224], eax
.text:00004A0B                 cmp     [ebp+var_224], 0
.text:00004A12                 jz      short loc_4A76
.text:00004A14                 mov     edx, [ebp+var_224]
.text:00004A1A                 mov     [ebp+var_250], edx
.text:00004A20                 mov     byte ptr [ebp+var_4], 4
.text:00004A24                 lea     ecx, [ebp+var_1BC] ; this
.text:00004A2A                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004A2F                 mov     byte ptr [ebp+var_4], 3
.text:00004A33                 lea     ecx, [ebp+var_134] ; this
.text:00004A39                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004A3E                 mov     byte ptr [ebp+var_4], 2
.text:00004A42                 lea     ecx, [ebp+var_A8]
.text:00004A48                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004A4D                 mov     byte ptr [ebp+var_4], 1
.text:00004A51                 lea     ecx, [ebp+var_94] ; this
.text:00004A57                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004A5C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004A63                 lea     ecx, [ebp+var_1C]
.text:00004A66                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004A6B                 mov     eax, [ebp+var_250]
.text:00004A71                 jmp     loc_4BBA
.text:00004A76 ; ---------------------------------------------------------------------------
.text:00004A76
.text:00004A76 loc_4A76:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+862j
.text:00004A76                 mov     eax, [ebp+var_14]
.text:00004A79                 mov     byte ptr [eax+30h], 1
.text:00004A7D                 mov     ecx, [ebp+var_14]
.text:00004A80                 mov     edx, [ecx+18h]
.text:00004A83                 add     edx, [ebp+var_21C]
.text:00004A89                 mov     eax, [ecx+1Ch]
.text:00004A8C                 adc     eax, [ebp+var_218]
.text:00004A92                 mov     ecx, [ebp+var_14]
.text:00004A95                 mov     [ecx+18h], edx
.text:00004A98                 mov     [ecx+1Ch], eax
.text:00004A9B
.text:00004A9B loc_4A9B:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *):loc_49AFj
.text:00004A9B                 lea     edx, [ebp+var_1BC]
.text:00004AA1                 push    edx             ; struct NArchive::NZip::CItemOut *
.text:00004AA2                 lea     ecx, [ebp+var_A8]
.text:00004AA8                 call    ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)
.text:00004AAD                 mov     eax, [ebp+var_14]
.text:00004AB0                 mov     ecx, [eax+18h]
.text:00004AB3                 add     ecx, 1Eh
.text:00004AB6                 mov     edx, [eax+1Ch]
.text:00004AB9                 adc     edx, 0
.text:00004ABC                 mov     eax, [ebp+var_14]
.text:00004ABF                 mov     [eax+18h], ecx
.text:00004AC2                 mov     [eax+1Ch], edx
.text:00004AC5                 mov     byte ptr [ebp+var_4], 4
.text:00004AC9                 lea     ecx, [ebp+var_1BC] ; this
.text:00004ACF                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:00004AD4                 mov     byte ptr [ebp+var_4], 3
.text:00004AD8                 lea     ecx, [ebp+var_134] ; this
.text:00004ADE                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00004AE3                 jmp     loc_42BF
.text:00004AE8 ; ---------------------------------------------------------------------------
.text:00004AE8
.text:00004AE8 loc_4AE8:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+12Cj
.text:00004AE8                 mov     ecx, [ebp+var_14]
.text:00004AEB                 mov     edx, [ebp+var_B4]
.text:00004AF1                 mov     [ecx+20h], edx
.text:00004AF4                 mov     eax, [ebp+var_B0]
.text:00004AFA                 mov     [ecx+24h], eax
.text:00004AFD                 mov     ecx, [ebp+var_14]
.text:00004B00                 mov     edx, [ebp+var_BC]
.text:00004B06                 mov     [ecx+28h], edx
.text:00004B09                 mov     eax, [ebp+var_B8]
.text:00004B0F                 mov     [ecx+2Ch], eax
.text:00004B12                 mov     ecx, [ebp+var_14] ; this
.text:00004B15                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00004B1A                 mov     [ebp+var_228], eax
.text:00004B20                 cmp     [ebp+var_228], 0
.text:00004B27                 jz      short loc_4B6A
.text:00004B29                 mov     ecx, [ebp+var_228]
.text:00004B2F                 mov     [ebp+var_254], ecx
.text:00004B35                 mov     byte ptr [ebp+var_4], 2
.text:00004B39                 lea     ecx, [ebp+var_A8]
.text:00004B3F                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004B44                 mov     byte ptr [ebp+var_4], 1
.text:00004B48                 lea     ecx, [ebp+var_94] ; this
.text:00004B4E                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004B53                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004B5A                 lea     ecx, [ebp+var_1C]
.text:00004B5D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004B62                 mov     eax, [ebp+var_254]
.text:00004B68                 jmp     short loc_4BBA
.text:00004B6A ; ---------------------------------------------------------------------------
.text:00004B6A
.text:00004B6A loc_4B6A:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+977j
.text:00004B6A                 mov     edx, [ebp+arg_14]
.text:00004B6D                 push    edx
.text:00004B6E                 lea     eax, [ebp+var_A8]
.text:00004B74                 push    eax
.text:00004B75                 mov     ecx, [ebp+arg_0]
.text:00004B78                 call    ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)
.text:00004B7D                 mov     [ebp+var_258], 0
.text:00004B87                 mov     byte ptr [ebp+var_4], 2
.text:00004B8B                 lea     ecx, [ebp+var_A8]
.text:00004B91                 call    ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text:00004B96                 mov     byte ptr [ebp+var_4], 1
.text:00004B9A                 lea     ecx, [ebp+var_94] ; this
.text:00004BA0                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:00004BA5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004BAC                 lea     ecx, [ebp+var_1C]
.text:00004BAF                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004BB4                 mov     eax, [ebp+var_258]
.text:00004BBA
.text:00004BBA loc_4BBA:                               ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+1B2j
.text:00004BBA                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+295j ...
.text:00004BBA                 push    edx
.text:00004BBB                 mov     ecx, ebp
.text:00004BBD                 push    eax
.text:00004BBE                 lea     edx, $LN46
.text:00004BC4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004BC9                 pop     eax
.text:00004BCA                 pop     edx
.text:00004BCB                 mov     ecx, [ebp+var_C]
.text:00004BCE                 mov     large fs:0, ecx
.text:00004BD5                 pop     ecx
.text:00004BD6                 pop     edi
.text:00004BD7                 pop     esi
.text:00004BD8                 mov     ecx, [ebp+var_10]
.text:00004BDB                 xor     ecx, ebp
.text:00004BDD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004BE2                 add     esp, 260h
.text:00004BE8                 cmp     ebp, esp
.text:00004BEA                 call    __RTC_CheckEsp
.text:00004BEF                 mov     esp, ebp
.text:00004BF1                 pop     ebp
.text:00004BF2                 retn    20h
.text:00004BF2 ?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z endp
.text:00004BF2
.text:00004BF2 ; ---------------------------------------------------------------------------
.text:00004BF5                 align 4
.text:00004BF8 $LN46           dd 9                    ; DATA XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+A0Eo
.text:00004BFC                 dd offset $LN45
.text:00004C00 $LN45           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00004BFCo
.text:00004C08                 dd offset $LN35         ; "progress"
.text:00004C0C                 dd 0FFFFFF6Ch, 70h
.text:00004C14                 dd offset $LN36         ; "compressor"
.text:00004C18                 dd 0FFFFFF58h, 0Ch
.text:00004C20                 dd offset $LN37         ; "items"
.text:00004C24                 db 0CCh
.text:00004C25                 db 0FEh, 2 dup(0FFh)
.text:00004C28                 dd offset loc_65+3
.text:00004C2C                 dd offset $LN38         ; "itemEx"
.text:00004C30                 dd 0FFFFFE44h, 80h
.text:00004C38                 dd offset $LN39         ; "item"
.text:00004C3C                 dd 0FFFFFE34h, 4
.text:00004C44                 dd offset $LN40         ; "fileInStream"
.text:00004C48                 dd 0FFFFFE08h, 18h
.text:00004C50                 dd offset $LN41         ; "compressingResult"
.text:00004C54                 dd 0FFFFFDFCh, 4
.text:00004C5C                 dd offset $LN42         ; "outStream"
.text:00004C60                 dd 0FFFFFDE4h, 8
.text:00004C68                 dd offset $LN43         ; "complexity"
.text:00004C6C $LN43           db 'complexity',0       ; DATA XREF: .text:00004C68o
.text:00004C77 $LN42           db 'outStream',0        ; DATA XREF: .text:00004C5Co
.text:00004C81 $LN41           db 'compressingResult',0 ; DATA XREF: .text:00004C50o
.text:00004C93 $LN40           db 'fileInStream',0     ; DATA XREF: .text:00004C44o
.text:00004CA0 $LN39           db 'item',0             ; DATA XREF: .text:00004C38o
.text:00004CA5 $LN38           db 'itemEx',0           ; DATA XREF: .text:00004C2Co
.text:00004CAC $LN37           db 'items',0            ; DATA XREF: .text:00004C20o
.text:00004CB2 $LN36           db 'compressor',0       ; DATA XREF: .text:00004C14o
.text:00004CBD $LN35           db 'progress',0         ; DATA XREF: .text:00004C08o
.text:00004CC6                 align 4
.text:00004CC6 _text           ends
.text:00004CC6
.rtc$TMZ:00004CC8 ; ===========================================================================
.rtc$TMZ:00004CC8
.rtc$TMZ:00004CC8 ; Segment type: Pure data
.rtc$TMZ:00004CC8 ; Segment permissions: Read
.rtc$TMZ:00004CC8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00004CC8                 assume cs:_rtc$TMZ
.rtc$TMZ:00004CC8                 ;org 4CC8h
.rtc$TMZ:00004CC8 ; COMDAT (pick any)
.rtc$TMZ:00004CC8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00004CC8 _rtc$TMZ        ends
.rtc$TMZ:00004CC8
.rtc$IMZ:00004CCC ; ===========================================================================
.rtc$IMZ:00004CCC
.rtc$IMZ:00004CCC ; Segment type: Pure data
.rtc$IMZ:00004CCC ; Segment permissions: Read
.rtc$IMZ:00004CCC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00004CCC                 assume cs:_rtc$IMZ
.rtc$IMZ:00004CCC                 ;org 4CCCh
.rtc$IMZ:00004CCC ; COMDAT (pick any)
.rtc$IMZ:00004CCC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00004CCC _rtc$IMZ        ends
.rtc$IMZ:00004CCC
.text:00004CD0 ; ===========================================================================
.text:00004CD0
.text:00004CD0 ; Segment type: Pure code
.text:00004CD0 ; Segment permissions: Read/Execute
.text:00004CD0 _text           segment para public 'CODE' use32
.text:00004CD0                 assume cs:_text
.text:00004CD0                 ;org 4CD0h
.text:00004CD0 ; COMDAT (pick any)
.text:00004CD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CD0
.text:00004CD0 ; =============== S U B R O U T I N E =======================================
.text:00004CD0
.text:00004CD0 ; Attributes: bp-based frame
.text:00004CD0
.text:00004CD0 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Set(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00004CD0                 public ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00004CD0 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00004CD0                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+E2p
.text:00004CD0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+14C2p ...
.text:00004CD0
.text:00004CD0 var_4           = dword ptr -4
.text:00004CD0
.text:00004CD0                 push    ebp
.text:00004CD1                 mov     ebp, esp
.text:00004CD3                 push    ecx
.text:00004CD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CDB                 mov     [ebp+var_4], ecx
.text:00004CDE                 mov     eax, [ebp+var_4]
.text:00004CE1                 push    eax
.text:00004CE2                 call    _Event_Set@4    ; Event_Set(x)
.text:00004CE7                 add     esp, 4
.text:00004CEA                 cmp     ebp, esp
.text:00004CEC                 call    __RTC_CheckEsp
.text:00004CF1                 mov     esp, ebp
.text:00004CF3                 pop     ebp
.text:00004CF4                 retn
.text:00004CF4 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00004CF4
.text:00004CF4 ; ---------------------------------------------------------------------------
.text:00004CF5                 align 4
.text:00004CF5 _text           ends
.text:00004CF5
.text:00004CF8 ; ===========================================================================
.text:00004CF8
.text:00004CF8 ; Segment type: Pure code
.text:00004CF8 ; Segment permissions: Read/Execute
.text:00004CF8 _text           segment para public 'CODE' use32
.text:00004CF8                 assume cs:_text
.text:00004CF8                 ;org 4CF8h
.text:00004CF8 ; COMDAT (pick any)
.text:00004CF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CF8
.text:00004CF8 ; =============== S U B R O U T I N E =======================================
.text:00004CF8
.text:00004CF8 ; Attributes: bp-based frame
.text:00004CF8
.text:00004CF8 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00004CF8                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00004CF8 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00004CF8                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+1Ep
.text:00004CF8
.text:00004CF8 var_4           = dword ptr -4
.text:00004CF8
.text:00004CF8                 push    ebp
.text:00004CF9                 mov     ebp, esp
.text:00004CFB                 push    ecx
.text:00004CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D03                 mov     [ebp+var_4], ecx
.text:00004D06                 mov     eax, [ebp+var_4]
.text:00004D09                 mov     ecx, [eax]
.text:00004D0B                 push    ecx
.text:00004D0C                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00004D11                 add     esp, 4
.text:00004D14                 cmp     ebp, esp
.text:00004D16                 call    __RTC_CheckEsp
.text:00004D1B                 mov     esp, ebp
.text:00004D1D                 pop     ebp
.text:00004D1E                 retn
.text:00004D1E ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00004D1E
.text:00004D1E ; ---------------------------------------------------------------------------
.text:00004D1F                 align 10h
.text:00004D1F _text           ends
.text:00004D1F
.text:00004D20 ; ===========================================================================
.text:00004D20
.text:00004D20 ; Segment type: Pure code
.text:00004D20 ; Segment permissions: Read/Execute
.text:00004D20 _text           segment para public 'CODE' use32
.text:00004D20                 assume cs:_text
.text:00004D20                 ;org 4D20h
.text:00004D20 ; COMDAT (pick any)
.text:00004D20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D20
.text:00004D20 ; =============== S U B R O U T I N E =======================================
.text:00004D20
.text:00004D20 ; Attributes: bp-based frame
.text:00004D20
.text:00004D20 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004D20                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004D20 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004D20                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetProgressOffset(unsigned __int64)+14p
.text:00004D20                                         ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00004D20
.text:00004D20 lpCriticalSection= dword ptr -4
.text:00004D20
.text:00004D20                 push    ebp
.text:00004D21                 mov     ebp, esp
.text:00004D23                 push    ecx
.text:00004D24                 push    esi
.text:00004D25                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004D2C                 mov     [ebp+lpCriticalSection], ecx
.text:00004D2F                 mov     esi, esp
.text:00004D31                 mov     eax, [ebp+lpCriticalSection]
.text:00004D34                 push    eax             ; lpCriticalSection
.text:00004D35                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00004D3B                 cmp     esi, esp
.text:00004D3D                 call    __RTC_CheckEsp
.text:00004D42                 pop     esi
.text:00004D43                 add     esp, 4
.text:00004D46                 cmp     ebp, esp
.text:00004D48                 call    __RTC_CheckEsp
.text:00004D4D                 mov     esp, ebp
.text:00004D4F                 pop     ebp
.text:00004D50                 retn
.text:00004D50 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004D50
.text:00004D50 ; ---------------------------------------------------------------------------
.text:00004D51                 align 4
.text:00004D51 _text           ends
.text:00004D51
.text:00004D54 ; ===========================================================================
.text:00004D54
.text:00004D54 ; Segment type: Pure code
.text:00004D54 ; Segment permissions: Read/Execute
.text:00004D54 _text           segment para public 'CODE' use32
.text:00004D54                 assume cs:_text
.text:00004D54                 ;org 4D54h
.text:00004D54 ; COMDAT (pick any)
.text:00004D54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D54
.text:00004D54 ; =============== S U B R O U T I N E =======================================
.text:00004D54
.text:00004D54 ; Attributes: bp-based frame
.text:00004D54
.text:00004D54 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004D54                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004D54 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004D54                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetProgressOffset(unsigned __int64)+50p
.text:00004D54                                         ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:00004D54
.text:00004D54 lpCriticalSection= dword ptr -4
.text:00004D54
.text:00004D54                 push    ebp
.text:00004D55                 mov     ebp, esp
.text:00004D57                 push    ecx
.text:00004D58                 push    esi
.text:00004D59                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004D60                 mov     [ebp+lpCriticalSection], ecx
.text:00004D63                 mov     esi, esp
.text:00004D65                 mov     eax, [ebp+lpCriticalSection]
.text:00004D68                 push    eax             ; lpCriticalSection
.text:00004D69                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00004D6F                 cmp     esi, esp
.text:00004D71                 call    __RTC_CheckEsp
.text:00004D76                 pop     esi
.text:00004D77                 add     esp, 4
.text:00004D7A                 cmp     ebp, esp
.text:00004D7C                 call    __RTC_CheckEsp
.text:00004D81                 mov     esp, ebp
.text:00004D83                 pop     ebp
.text:00004D84                 retn
.text:00004D84 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004D84
.text:00004D84 ; ---------------------------------------------------------------------------
.text:00004D85                 align 4
.text:00004D85 _text           ends
.text:00004D85
.text$x:00004D88 ; ===========================================================================
.text$x:00004D88
.text$x:00004D88 ; Segment type: Pure code
.text$x:00004D88 ; Segment permissions: Read/Execute
.text$x:00004D88 _text$x         segment para public 'CODE' use32
.text$x:00004D88                 assume cs:_text$x
.text$x:00004D88                 ;org 4D88h
.text$x:00004D88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004D88
.text$x:00004D88 ; =============== S U B R O U T I N E =======================================
.text$x:00004D88
.text$x:00004D88
.text$x:00004D88 __unwindfunclet$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z$0 proc near
.text$x:00004D88                                         ; DATA XREF: .xdata$x:0000504Co
.text$x:00004D88                 lea     ecx, [ebp-18h]  ; this
.text$x:00004D8B                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:00004D8B __unwindfunclet$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z$0 endp
.text$x:00004D8B
.text$x:00004D90
.text$x:00004D90 ; =============== S U B R O U T I N E =======================================
.text$x:00004D90
.text$x:00004D90
.text$x:00004D90 __ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z proc near
.text$x:00004D90                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+5o
.text$x:00004D90
.text$x:00004D90 arg_4           = dword ptr  8
.text$x:00004D90
.text$x:00004D90                 mov     edx, [esp+arg_4]
.text$x:00004D94                 lea     eax, [edx+0Ch]
.text$x:00004D97                 mov     ecx, [edx-48h]
.text$x:00004D9A                 xor     ecx, eax
.text$x:00004D9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DA1                 mov     eax, offset __ehfuncinfo$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
.text$x:00004DA6                 jmp     ___CxxFrameHandler3
.text$x:00004DA6 __ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z endp
.text$x:00004DA6
.text$x:00004DAB
.text$x:00004DAB ; =============== S U B R O U T I N E =======================================
.text$x:00004DAB
.text$x:00004DAB
.text$x:00004DAB __unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0 proc near
.text$x:00004DAB                                         ; DATA XREF: .xdata$x:00005078o
.text$x:00004DAB                 mov     eax, [ebp-18h]
.text$x:00004DAE                 push    eax             ; void *
.text$x:00004DAF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004DB4                 pop     ecx
.text$x:00004DB5                 retn
.text$x:00004DB5 __unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0 endp
.text$x:00004DB5
.text$x:00004DB6
.text$x:00004DB6 ; =============== S U B R O U T I N E =======================================
.text$x:00004DB6
.text$x:00004DB6
.text$x:00004DB6 __ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z proc near
.text$x:00004DB6                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+5o
.text$x:00004DB6
.text$x:00004DB6 arg_4           = dword ptr  8
.text$x:00004DB6
.text$x:00004DB6                 mov     edx, [esp+arg_4]
.text$x:00004DBA                 lea     eax, [edx+0Ch]
.text$x:00004DBD                 mov     ecx, [edx-14h]
.text$x:00004DC0                 xor     ecx, eax
.text$x:00004DC2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DC7                 mov     eax, offset __ehfuncinfo$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
.text$x:00004DCC                 jmp     ___CxxFrameHandler3
.text$x:00004DCC __ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z endp
.text$x:00004DCC
.text$x:00004DD1
.text$x:00004DD1 ; =============== S U B R O U T I N E =======================================
.text$x:00004DD1
.text$x:00004DD1
.text$x:00004DD1 __unwindfunclet$??1CCacheOutStream@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004DD1                                         ; DATA XREF: .xdata$x:000050A4o
.text$x:00004DD1                 mov     ecx, [ebp-10h]
.text$x:00004DD4                 add     ecx, 8
.text$x:00004DD7                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00004DD7 __unwindfunclet$??1CCacheOutStream@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004DD7
.text$x:00004DDC
.text$x:00004DDC ; =============== S U B R O U T I N E =======================================
.text$x:00004DDC
.text$x:00004DDC
.text$x:00004DDC __ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ proc near
.text$x:00004DDC                                         ; DATA XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+5o
.text$x:00004DDC
.text$x:00004DDC arg_4           = dword ptr  8
.text$x:00004DDC
.text$x:00004DDC                 mov     edx, [esp+arg_4]
.text$x:00004DE0                 lea     eax, [edx+0Ch]
.text$x:00004DE3                 mov     ecx, [edx-24h]
.text$x:00004DE6                 xor     ecx, eax
.text$x:00004DE8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DED                 mov     eax, offset __ehfuncinfo$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
.text$x:00004DF2                 jmp     ___CxxFrameHandler3
.text$x:00004DF2 __ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ endp
.text$x:00004DF2
.text$x:00004DF7
.text$x:00004DF7 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF7
.text$x:00004DF7
.text$x:00004DF7 __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$0 proc near
.text$x:00004DF7                                         ; DATA XREF: .xdata$x:000050D0o
.text$x:00004DF7                 lea     ecx, [ebp-14h]
.text$x:00004DFA                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00004DFA __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$0 endp
.text$x:00004DFA
.text$x:00004DFF
.text$x:00004DFF ; =============== S U B R O U T I N E =======================================
.text$x:00004DFF
.text$x:00004DFF
.text$x:00004DFF __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$1 proc near
.text$x:00004DFF                                         ; DATA XREF: .xdata$x:000050D8o
.text$x:00004DFF                 lea     ecx, [ebp-20h]
.text$x:00004E02                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00004E02 __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$1 endp
.text$x:00004E02
.text$x:00004E07
.text$x:00004E07 ; =============== S U B R O U T I N E =======================================
.text$x:00004E07
.text$x:00004E07
.text$x:00004E07 __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00004E07                                         ; DATA XREF: .xdata$x:000050E0o
.text$x:00004E07                 mov     eax, [ebp-0B4h]
.text$x:00004E0D                 push    eax             ; void *
.text$x:00004E0E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004E13                 pop     ecx
.text$x:00004E14                 retn
.text$x:00004E14 __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00004E14
.text$x:00004E15
.text$x:00004E15 ; =============== S U B R O U T I N E =======================================
.text$x:00004E15
.text$x:00004E15
.text$x:00004E15 __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00004E15                                         ; DATA XREF: .xdata$x:000050E8o
.text$x:00004E15                 lea     ecx, [ebp-88h]  ; this
.text$x:00004E1B                 jmp     ??1COutArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::COutArchive::~COutArchive(void)
.text$x:00004E1B __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00004E1B
.text$x:00004E20
.text$x:00004E20 ; =============== S U B R O U T I N E =======================================
.text$x:00004E20
.text$x:00004E20
.text$x:00004E20 __ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z proc near
.text$x:00004E20                                         ; DATA XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+5o
.text$x:00004E20
.text$x:00004E20 arg_4           = dword ptr  8
.text$x:00004E20
.text$x:00004E20                 mov     edx, [esp+arg_4]
.text$x:00004E24                 lea     eax, [edx+0Ch]
.text$x:00004E27                 mov     ecx, [edx-0E8h]
.text$x:00004E2D                 xor     ecx, eax
.text$x:00004E2F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E34                 mov     eax, offset __ehfuncinfo$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
.text$x:00004E39                 jmp     ___CxxFrameHandler3
.text$x:00004E39 __ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z endp
.text$x:00004E39
.text$x:00004E3E
.text$x:00004E3E ; =============== S U B R O U T I N E =======================================
.text$x:00004E3E
.text$x:00004E3E
.text$x:00004E3E __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$0 proc near
.text$x:00004E3E                                         ; DATA XREF: .xdata$x:00005138o
.text$x:00004E3E                 lea     ecx, [ebp-18h]
.text$x:00004E41                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00004E41 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$0 endp
.text$x:00004E41
.text$x:00004E46
.text$x:00004E46 ; =============== S U B R O U T I N E =======================================
.text$x:00004E46
.text$x:00004E46
.text$x:00004E46 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$1 proc near
.text$x:00004E46                                         ; DATA XREF: .xdata$x:00005140o
.text$x:00004E46                 lea     ecx, [ebp-0B0h] ; this
.text$x:00004E4C                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004E4C __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$1 endp
.text$x:00004E4C
.text$x:00004E51
.text$x:00004E51 ; =============== S U B R O U T I N E =======================================
.text$x:00004E51
.text$x:00004E51
.text$x:00004E51 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00004E51                                         ; DATA XREF: .xdata$x:00005148o
.text$x:00004E51                 lea     ecx, [ebp-128h] ; this
.text$x:00004E57                 jmp     ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text$x:00004E57 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00004E57
.text$x:00004E5C
.text$x:00004E5C ; =============== S U B R O U T I N E =======================================
.text$x:00004E5C
.text$x:00004E5C
.text$x:00004E5C __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00004E5C                                         ; DATA XREF: .xdata$x:00005150o
.text$x:00004E5C                 lea     ecx, [ebp-178h] ; this
.text$x:00004E62                 jmp     ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00004E62 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00004E62
.text$x:00004E67
.text$x:00004E67 ; =============== S U B R O U T I N E =======================================
.text$x:00004E67
.text$x:00004E67
.text$x:00004E67 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:00004E67                                         ; DATA XREF: .xdata$x:00005158o
.text$x:00004E67                 lea     ecx, [ebp-1D4h]
.text$x:00004E6D                 jmp     ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text$x:00004E6D __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00004E6D
.text$x:00004E72
.text$x:00004E72 ; =============== S U B R O U T I N E =======================================
.text$x:00004E72
.text$x:00004E72
.text$x:00004E72 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00004E72                                         ; DATA XREF: .xdata$x:00005160o
.text$x:00004E72                 mov     eax, [ebp-668h]
.text$x:00004E78                 push    eax             ; void *
.text$x:00004E79                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004E7E                 pop     ecx
.text$x:00004E7F                 retn
.text$x:00004E7F __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:00004E7F
.text$x:00004E80
.text$x:00004E80 ; =============== S U B R O U T I N E =======================================
.text$x:00004E80
.text$x:00004E80
.text$x:00004E80 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:00004E80                                         ; DATA XREF: .xdata$x:00005168o
.text$x:00004E80                 lea     ecx, [ebp-1E4h]
.text$x:00004E86                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00004E86 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:00004E86
.text$x:00004E8B
.text$x:00004E8B ; =============== S U B R O U T I N E =======================================
.text$x:00004E8B
.text$x:00004E8B
.text$x:00004E8B __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$7 proc near
.text$x:00004E8B                                         ; DATA XREF: .xdata$x:00005170o
.text$x:00004E8B                 lea     ecx, [ebp-234h] ; this
.text$x:00004E91                 jmp     ??1CMtCompressProgressMixer@@QAE@XZ ; CMtCompressProgressMixer::~CMtCompressProgressMixer(void)
.text$x:00004E91 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$7 endp
.text$x:00004E91
.text$x:00004E96
.text$x:00004E96 ; =============== S U B R O U T I N E =======================================
.text$x:00004E96
.text$x:00004E96
.text$x:00004E96 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$8 proc near
.text$x:00004E96                                         ; DATA XREF: .xdata$x:00005178o
.text$x:00004E96                 lea     ecx, [ebp-264h] ; this
.text$x:00004E9C                 jmp     ??1CMemBlockManagerMt@@QAE@XZ ; CMemBlockManagerMt::~CMemBlockManagerMt(void)
.text$x:00004E9C __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$8 endp
.text$x:00004E9C
.text$x:00004EA1
.text$x:00004EA1 ; =============== S U B R O U T I N E =======================================
.text$x:00004EA1
.text$x:00004EA1
.text$x:00004EA1 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$9 proc near
.text$x:00004EA1                                         ; DATA XREF: .xdata$x:00005180o
.text$x:00004EA1                 lea     ecx, [ebp-27Ch] ; this
.text$x:00004EA7                 jmp     ??1CMemRefs@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemRefs::~CMemRefs(void)
.text$x:00004EA7 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$9 endp
.text$x:00004EA7
.text$x:00004EAC
.text$x:00004EAC ; =============== S U B R O U T I N E =======================================
.text$x:00004EAC
.text$x:00004EAC
.text$x:00004EAC __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$10 proc near
.text$x:00004EAC                                         ; DATA XREF: .xdata$x:00005188o
.text$x:00004EAC                 lea     ecx, [ebp-290h] ; this
.text$x:00004EB2                 jmp     ??1CThreads@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreads::~CThreads(void)
.text$x:00004EB2 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$10 endp
.text$x:00004EB2
.text$x:00004EB7
.text$x:00004EB7 ; =============== S U B R O U T I N E =======================================
.text$x:00004EB7
.text$x:00004EB7
.text$x:00004EB7 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$11 proc near
.text$x:00004EB7                                         ; DATA XREF: .xdata$x:00005190o
.text$x:00004EB7                 lea     ecx, [ebp-2A4h]
.text$x:00004EBD                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00004EBD __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$11 endp
.text$x:00004EBD
.text$x:00004EC2
.text$x:00004EC2 ; =============== S U B R O U T I N E =======================================
.text$x:00004EC2
.text$x:00004EC2
.text$x:00004EC2 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$12 proc near
.text$x:00004EC2                                         ; DATA XREF: .xdata$x:00005198o
.text$x:00004EC2                 lea     ecx, [ebp-2B8h]
.text$x:00004EC8                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00004EC8 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$12 endp
.text$x:00004EC8
.text$x:00004ECD
.text$x:00004ECD ; =============== S U B R O U T I N E =======================================
.text$x:00004ECD
.text$x:00004ECD
.text$x:00004ECD __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13 proc near
.text$x:00004ECD                                         ; DATA XREF: .xdata$x:000051A0o
.text$x:00004ECD                 lea     ecx, [ebp-300h] ; this
.text$x:00004ED3                 jmp     ??1CMemBlocks2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemBlocks2::~CMemBlocks2(void)
.text$x:00004ED3 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13 endp
.text$x:00004ED3
.text$x:00004ED8
.text$x:00004ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00004ED8
.text$x:00004ED8
.text$x:00004ED8 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14 proc near
.text$x:00004ED8                                         ; DATA XREF: .xdata$x:000051A8o
.text$x:00004ED8                 lea     ecx, [ebp-3CCh] ; this
.text$x:00004EDE                 jmp     ??1CThreadInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreadInfo::~CThreadInfo(void)
.text$x:00004EDE __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14 endp
.text$x:00004EDE
.text$x:00004EE3
.text$x:00004EE3 ; =============== S U B R O U T I N E =======================================
.text$x:00004EE3
.text$x:00004EE3
.text$x:00004EE3 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$15 proc near
.text$x:00004EE3                                         ; DATA XREF: .xdata$x:000051B0o
.text$x:00004EE3                 mov     eax, [ebp-678h]
.text$x:00004EE9                 push    eax             ; void *
.text$x:00004EEA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004EEF                 pop     ecx
.text$x:00004EF0                 retn
.text$x:00004EF0 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$15 endp
.text$x:00004EF0
.text$x:00004EF1
.text$x:00004EF1 ; =============== S U B R O U T I N E =======================================
.text$x:00004EF1
.text$x:00004EF1
.text$x:00004EF1 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$16 proc near
.text$x:00004EF1                                         ; DATA XREF: .xdata$x:000051B8o
.text$x:00004EF1                 mov     eax, [ebp-684h]
.text$x:00004EF7                 push    eax             ; void *
.text$x:00004EF8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004EFD                 pop     ecx
.text$x:00004EFE                 retn
.text$x:00004EFE __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$16 endp
.text$x:00004EFE
.text$x:00004EFF
.text$x:00004EFF ; =============== S U B R O U T I N E =======================================
.text$x:00004EFF
.text$x:00004EFF
.text$x:00004EFF __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$17 proc near
.text$x:00004EFF                                         ; DATA XREF: .xdata$x:000051C0o
.text$x:00004EFF                 lea     ecx, [ebp-458h] ; this
.text$x:00004F05                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004F05 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$17 endp
.text$x:00004F05
.text$x:00004F0A
.text$x:00004F0A ; =============== S U B R O U T I N E =======================================
.text$x:00004F0A
.text$x:00004F0A
.text$x:00004F0A __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$18 proc near
.text$x:00004F0A                                         ; DATA XREF: .xdata$x:000051C8o
.text$x:00004F0A                 lea     ecx, [ebp-4E0h] ; this
.text$x:00004F10                 jmp     ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text$x:00004F10 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$18 endp
.text$x:00004F10
.text$x:00004F15
.text$x:00004F15 ; =============== S U B R O U T I N E =======================================
.text$x:00004F15
.text$x:00004F15
.text$x:00004F15 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$19 proc near
.text$x:00004F15                                         ; DATA XREF: .xdata$x:000051D0o
.text$x:00004F15                 lea     ecx, [ebp-4ECh]
.text$x:00004F1B                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00004F1B __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$19 endp
.text$x:00004F1B
.text$x:00004F20
.text$x:00004F20 ; =============== S U B R O U T I N E =======================================
.text$x:00004F20
.text$x:00004F20
.text$x:00004F20 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$20 proc near
.text$x:00004F20                                         ; DATA XREF: .xdata$x:000051D8o
.text$x:00004F20                 lea     ecx, [ebp-4F8h] ; this
.text$x:00004F26                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:00004F26 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$20 endp
.text$x:00004F26
.text$x:00004F2B
.text$x:00004F2B ; =============== S U B R O U T I N E =======================================
.text$x:00004F2B
.text$x:00004F2B
.text$x:00004F2B __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$21 proc near
.text$x:00004F2B                                         ; DATA XREF: .xdata$x:000051E0o
.text$x:00004F2B                 lea     ecx, [ebp-584h] ; this
.text$x:00004F31                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004F31 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$21 endp
.text$x:00004F31
.text$x:00004F36
.text$x:00004F36 ; =============== S U B R O U T I N E =======================================
.text$x:00004F36
.text$x:00004F36
.text$x:00004F36 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$22 proc near
.text$x:00004F36                                         ; DATA XREF: .xdata$x:000051E8o
.text$x:00004F36                 lea     ecx, [ebp-60Ch] ; this
.text$x:00004F3C                 jmp     ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text$x:00004F3C __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$22 endp
.text$x:00004F3C
.text$x:00004F41
.text$x:00004F41 ; =============== S U B R O U T I N E =======================================
.text$x:00004F41
.text$x:00004F41
.text$x:00004F41 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$23 proc near
.text$x:00004F41                                         ; DATA XREF: .xdata$x:000051F0o
.text$x:00004F41                 lea     ecx, [ebp-620h]
.text$x:00004F47                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00004F47 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$23 endp
.text$x:00004F47
.text$x:00004F4C
.text$x:00004F4C ; =============== S U B R O U T I N E =======================================
.text$x:00004F4C
.text$x:00004F4C
.text$x:00004F4C __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$24 proc near
.text$x:00004F4C                                         ; DATA XREF: .xdata$x:000051F8o
.text$x:00004F4C                 lea     ecx, [ebp-630h]
.text$x:00004F52                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00004F52 __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$24 endp
.text$x:00004F52
.text$x:00004F57
.text$x:00004F57 ; =============== S U B R O U T I N E =======================================
.text$x:00004F57
.text$x:00004F57
.text$x:00004F57 __ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z proc near
.text$x:00004F57                                         ; DATA XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+5o
.text$x:00004F57
.text$x:00004F57 arg_4           = dword ptr  8
.text$x:00004F57
.text$x:00004F57                 mov     edx, [esp+arg_4]
.text$x:00004F5B                 lea     eax, [edx+0Ch]
.text$x:00004F5E                 mov     ecx, [edx-6F8h]
.text$x:00004F64                 xor     ecx, eax
.text$x:00004F66                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F6B                 mov     ecx, [edx-4]
.text$x:00004F6E                 xor     ecx, eax
.text$x:00004F70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F75                 mov     eax, offset __ehfuncinfo$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
.text$x:00004F7A                 jmp     ___CxxFrameHandler3
.text$x:00004F7A __ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z endp
.text$x:00004F7A
.text$x:00004F7F
.text$x:00004F7F ; =============== S U B R O U T I N E =======================================
.text$x:00004F7F
.text$x:00004F7F
.text$x:00004F7F __unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0 proc near
.text$x:00004F7F                                         ; DATA XREF: .xdata$x:00005200o
.text$x:00004F7F                 lea     ecx, [ebp-2Ch]  ; this
.text$x:00004F82                 jmp     ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text$x:00004F82 __unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0 endp
.text$x:00004F82
.text$x:00004F87
.text$x:00004F87 ; =============== S U B R O U T I N E =======================================
.text$x:00004F87
.text$x:00004F87
.text$x:00004F87 __ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z proc near
.text$x:00004F87                                         ; DATA XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+5o
.text$x:00004F87
.text$x:00004F87 arg_4           = dword ptr  8
.text$x:00004F87
.text$x:00004F87                 mov     edx, [esp+arg_4]
.text$x:00004F8B                 lea     eax, [edx+0Ch]
.text$x:00004F8E                 mov     ecx, [edx-28h]
.text$x:00004F91                 xor     ecx, eax
.text$x:00004F93                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F98                 mov     eax, offset __ehfuncinfo$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
.text$x:00004F9D                 jmp     ___CxxFrameHandler3
.text$x:00004F9D __ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z endp
.text$x:00004F9D
.text$x:00004FA2
.text$x:00004FA2 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA2
.text$x:00004FA2
.text$x:00004FA2 __unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00004FA2                                         ; DATA XREF: .xdata$x:0000522Co
.text$x:00004FA2                 lea     ecx, [ebp-14h]
.text$x:00004FA5                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00004FA5 __unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0 endp
.text$x:00004FA5
.text$x:00004FAA
.text$x:00004FAA ; =============== S U B R O U T I N E =======================================
.text$x:00004FAA
.text$x:00004FAA
.text$x:00004FAA __ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z proc near
.text$x:00004FAA                                         ; DATA XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+5o
.text$x:00004FAA
.text$x:00004FAA arg_4           = dword ptr  8
.text$x:00004FAA
.text$x:00004FAA                 mov     edx, [esp+arg_4]
.text$x:00004FAE                 lea     eax, [edx+0Ch]
.text$x:00004FB1                 mov     ecx, [edx-14h]
.text$x:00004FB4                 xor     ecx, eax
.text$x:00004FB6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FBB                 mov     eax, offset __ehfuncinfo$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
.text$x:00004FC0                 jmp     ___CxxFrameHandler3
.text$x:00004FC0 __ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z endp
.text$x:00004FC0
.text$x:00004FC5
.text$x:00004FC5 ; =============== S U B R O U T I N E =======================================
.text$x:00004FC5
.text$x:00004FC5
.text$x:00004FC5 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$0 proc near
.text$x:00004FC5                                         ; DATA XREF: .xdata$x:0000527Co
.text$x:00004FC5                 mov     eax, [ebp-230h]
.text$x:00004FCB                 push    eax             ; void *
.text$x:00004FCC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004FD1                 pop     ecx
.text$x:00004FD2                 retn
.text$x:00004FD2 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$0 endp
.text$x:00004FD2
.text$x:00004FD3
.text$x:00004FD3 ; =============== S U B R O U T I N E =======================================
.text$x:00004FD3
.text$x:00004FD3
.text$x:00004FD3 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$1 proc near
.text$x:00004FD3                                         ; DATA XREF: .xdata$x:00005284o
.text$x:00004FD3                 lea     ecx, [ebp-1Ch]
.text$x:00004FD6                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00004FD6 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$1 endp
.text$x:00004FD6
.text$x:00004FDB
.text$x:00004FDB ; =============== S U B R O U T I N E =======================================
.text$x:00004FDB
.text$x:00004FDB
.text$x:00004FDB __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$2 proc near
.text$x:00004FDB                                         ; DATA XREF: .xdata$x:0000528Co
.text$x:00004FDB                 lea     ecx, [ebp-94h]  ; this
.text$x:00004FE1                 jmp     ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text$x:00004FE1 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$2 endp
.text$x:00004FE1
.text$x:00004FE6
.text$x:00004FE6 ; =============== S U B R O U T I N E =======================================
.text$x:00004FE6
.text$x:00004FE6
.text$x:00004FE6 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$3 proc near
.text$x:00004FE6                                         ; DATA XREF: .xdata$x:00005294o
.text$x:00004FE6                 lea     ecx, [ebp-0A8h]
.text$x:00004FEC                 jmp     ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)
.text$x:00004FEC __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$3 endp
.text$x:00004FEC
.text$x:00004FF1
.text$x:00004FF1 ; =============== S U B R O U T I N E =======================================
.text$x:00004FF1
.text$x:00004FF1
.text$x:00004FF1 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$4 proc near
.text$x:00004FF1                                         ; DATA XREF: .xdata$x:0000529Co
.text$x:00004FF1                 lea     ecx, [ebp-134h] ; this
.text$x:00004FF7                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004FF7 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$4 endp
.text$x:00004FF7
.text$x:00004FFC
.text$x:00004FFC ; =============== S U B R O U T I N E =======================================
.text$x:00004FFC
.text$x:00004FFC
.text$x:00004FFC __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$5 proc near
.text$x:00004FFC                                         ; DATA XREF: .xdata$x:000052A4o
.text$x:00004FFC                 lea     ecx, [ebp-1BCh] ; this
.text$x:00005002                 jmp     ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text$x:00005002 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$5 endp
.text$x:00005002
.text$x:00005007
.text$x:00005007 ; =============== S U B R O U T I N E =======================================
.text$x:00005007
.text$x:00005007
.text$x:00005007 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$6 proc near
.text$x:00005007                                         ; DATA XREF: .xdata$x:000052ACo
.text$x:00005007                 lea     ecx, [ebp-1CCh]
.text$x:0000500D                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000500D __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$6 endp
.text$x:0000500D
.text$x:00005012
.text$x:00005012 ; =============== S U B R O U T I N E =======================================
.text$x:00005012
.text$x:00005012
.text$x:00005012 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$7 proc near
.text$x:00005012                                         ; DATA XREF: .xdata$x:000052B4o
.text$x:00005012                 lea     ecx, [ebp-204h]
.text$x:00005018                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00005018 __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$7 endp
.text$x:00005018
.text$x:0000501D
.text$x:0000501D ; =============== S U B R O U T I N E =======================================
.text$x:0000501D
.text$x:0000501D
.text$x:0000501D __ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z proc near
.text$x:0000501D                                         ; DATA XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+5o
.text$x:0000501D
.text$x:0000501D arg_4           = dword ptr  8
.text$x:0000501D
.text$x:0000501D                 mov     edx, [esp+arg_4]
.text$x:00005021                 lea     eax, [edx+0Ch]
.text$x:00005024                 mov     ecx, [edx-260h]
.text$x:0000502A                 xor     ecx, eax
.text$x:0000502C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005031                 mov     ecx, [edx-4]
.text$x:00005034                 xor     ecx, eax
.text$x:00005036                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000503B                 mov     eax, offset __ehfuncinfo$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
.text$x:00005040                 jmp     ___CxxFrameHandler3
.text$x:00005040 __ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z endp
.text$x:00005040
.text$x:00005040 ; ---------------------------------------------------------------------------
.text$x:00005045                 align 4
.text$x:00005045 _text$x         ends
.text$x:00005045
.xdata$x:00005048 ; ===========================================================================
.xdata$x:00005048
.xdata$x:00005048 ; Segment type: Pure data
.xdata$x:00005048 ; Segment permissions: Read
.xdata$x:00005048 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005048                 assume cs:_xdata$x
.xdata$x:00005048                 ;org 5048h
.xdata$x:00005048 __unwindtable$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z db 0FFh
.xdata$x:00005048                                         ; DATA XREF: .xdata$x:00005058o
.xdata$x:00005049                 db 0FFh
.xdata$x:0000504A                 db 0FFh
.xdata$x:0000504B                 db 0FFh
.xdata$x:0000504C                 dd offset __unwindfunclet$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z$0
.xdata$x:00005050 __ehfuncinfo$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z db  22h ; "
.xdata$x:00005050                                         ; DATA XREF: __ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z+11o
.xdata$x:00005051                 db    5
.xdata$x:00005052                 db  93h ; ô
.xdata$x:00005053                 db  19h
.xdata$x:00005054                 db    1
.xdata$x:00005055                 db    0
.xdata$x:00005056                 db    0
.xdata$x:00005057                 db    0
.xdata$x:00005058                 dd offset __unwindtable$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
.xdata$x:0000505C                 db    0
.xdata$x:0000505D                 db    0
.xdata$x:0000505E                 db    0
.xdata$x:0000505F                 db    0
.xdata$x:00005060                 db    0
.xdata$x:00005061                 db    0
.xdata$x:00005062                 db    0
.xdata$x:00005063                 db    0
.xdata$x:00005064                 db    0
.xdata$x:00005065                 db    0
.xdata$x:00005066                 db    0
.xdata$x:00005067                 db    0
.xdata$x:00005068                 db    0
.xdata$x:00005069                 db    0
.xdata$x:0000506A                 db    0
.xdata$x:0000506B                 db    0
.xdata$x:0000506C                 db    0
.xdata$x:0000506D                 db    0
.xdata$x:0000506E                 db    0
.xdata$x:0000506F                 db    0
.xdata$x:00005070                 db    1
.xdata$x:00005071                 db    0
.xdata$x:00005072                 db    0
.xdata$x:00005073                 db    0
.xdata$x:00005074 __unwindtable$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z db 0FFh
.xdata$x:00005074                                         ; DATA XREF: .xdata$x:00005084o
.xdata$x:00005075                 db 0FFh
.xdata$x:00005076                 db 0FFh
.xdata$x:00005077                 db 0FFh
.xdata$x:00005078                 dd offset __unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0
.xdata$x:0000507C __ehfuncinfo$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z db  22h ; "
.xdata$x:0000507C                                         ; DATA XREF: __ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z+11o
.xdata$x:0000507D                 db    5
.xdata$x:0000507E                 db  93h ; ô
.xdata$x:0000507F                 db  19h
.xdata$x:00005080                 db    1
.xdata$x:00005081                 db    0
.xdata$x:00005082                 db    0
.xdata$x:00005083                 db    0
.xdata$x:00005084                 dd offset __unwindtable$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
.xdata$x:00005088                 db    0
.xdata$x:00005089                 db    0
.xdata$x:0000508A                 db    0
.xdata$x:0000508B                 db    0
.xdata$x:0000508C                 db    0
.xdata$x:0000508D                 db    0
.xdata$x:0000508E                 db    0
.xdata$x:0000508F                 db    0
.xdata$x:00005090                 db    0
.xdata$x:00005091                 db    0
.xdata$x:00005092                 db    0
.xdata$x:00005093                 db    0
.xdata$x:00005094                 db    0
.xdata$x:00005095                 db    0
.xdata$x:00005096                 db    0
.xdata$x:00005097                 db    0
.xdata$x:00005098                 db    0
.xdata$x:00005099                 db    0
.xdata$x:0000509A                 db    0
.xdata$x:0000509B                 db    0
.xdata$x:0000509C                 db    1
.xdata$x:0000509D                 db    0
.xdata$x:0000509E                 db    0
.xdata$x:0000509F                 db    0
.xdata$x:000050A0 __unwindtable$??1CCacheOutStream@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:000050A0                                         ; DATA XREF: .xdata$x:000050B0o
.xdata$x:000050A1                 db 0FFh
.xdata$x:000050A2                 db 0FFh
.xdata$x:000050A3                 db 0FFh
.xdata$x:000050A4                 dd offset __unwindfunclet$??1CCacheOutStream@NZip@NArchive@@QAE@XZ$0
.xdata$x:000050A8 __ehfuncinfo$??1CCacheOutStream@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000050A8                                         ; DATA XREF: __ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000050A9                 db    5
.xdata$x:000050AA                 db  93h ; ô
.xdata$x:000050AB                 db  19h
.xdata$x:000050AC                 db    1
.xdata$x:000050AD                 db    0
.xdata$x:000050AE                 db    0
.xdata$x:000050AF                 db    0
.xdata$x:000050B0                 dd offset __unwindtable$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
.xdata$x:000050B4                 db    0
.xdata$x:000050B5                 db    0
.xdata$x:000050B6                 db    0
.xdata$x:000050B7                 db    0
.xdata$x:000050B8                 db    0
.xdata$x:000050B9                 db    0
.xdata$x:000050BA                 db    0
.xdata$x:000050BB                 db    0
.xdata$x:000050BC                 db    0
.xdata$x:000050BD                 db    0
.xdata$x:000050BE                 db    0
.xdata$x:000050BF                 db    0
.xdata$x:000050C0                 db    0
.xdata$x:000050C1                 db    0
.xdata$x:000050C2                 db    0
.xdata$x:000050C3                 db    0
.xdata$x:000050C4                 db    0
.xdata$x:000050C5                 db    0
.xdata$x:000050C6                 db    0
.xdata$x:000050C7                 db    0
.xdata$x:000050C8                 db    1
.xdata$x:000050C9                 db    0
.xdata$x:000050CA                 db    0
.xdata$x:000050CB                 db    0
.xdata$x:000050CC __unwindtable$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:000050CC                                         ; DATA XREF: .xdata$x:000050F4o
.xdata$x:000050CD                 db 0FFh
.xdata$x:000050CE                 db 0FFh
.xdata$x:000050CF                 db 0FFh
.xdata$x:000050D0                 dd offset __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$0
.xdata$x:000050D4                 align 8
.xdata$x:000050D8                 dd offset __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$1
.xdata$x:000050DC                 db    1
.xdata$x:000050DD                 db    0
.xdata$x:000050DE                 db    0
.xdata$x:000050DF                 db    0
.xdata$x:000050E0                 dd offset __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2
.xdata$x:000050E4                 align 8
.xdata$x:000050E8                 dd offset __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$3
.xdata$x:000050EC __ehfuncinfo$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:000050EC                                         ; DATA XREF: __ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:000050ED                 db    5
.xdata$x:000050EE                 db  93h ; ô
.xdata$x:000050EF                 db  19h
.xdata$x:000050F0                 db    4
.xdata$x:000050F1                 db    0
.xdata$x:000050F2                 db    0
.xdata$x:000050F3                 db    0
.xdata$x:000050F4                 dd offset __unwindtable$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
.xdata$x:000050F8                 db    0
.xdata$x:000050F9                 db    0
.xdata$x:000050FA                 db    0
.xdata$x:000050FB                 db    0
.xdata$x:000050FC                 db    0
.xdata$x:000050FD                 db    0
.xdata$x:000050FE                 db    0
.xdata$x:000050FF                 db    0
.xdata$x:00005100                 db    0
.xdata$x:00005101                 db    0
.xdata$x:00005102                 db    0
.xdata$x:00005103                 db    0
.xdata$x:00005104                 db    0
.xdata$x:00005105                 db    0
.xdata$x:00005106                 db    0
.xdata$x:00005107                 db    0
.xdata$x:00005108                 db    0
.xdata$x:00005109                 db    0
.xdata$x:0000510A                 db    0
.xdata$x:0000510B                 db    0
.xdata$x:0000510C                 db    1
.xdata$x:0000510D                 db    0
.xdata$x:0000510E                 db    0
.xdata$x:0000510F                 db    0
.xdata$x:00005110 __ehfuncinfo$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00005110                                         ; DATA XREF: __ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z+1Eo
.xdata$x:00005111                 db    5
.xdata$x:00005112                 db  93h ; ô
.xdata$x:00005113                 db  19h
.xdata$x:00005114                 db  19h
.xdata$x:00005115                 db    0
.xdata$x:00005116                 db    0
.xdata$x:00005117                 db    0
.xdata$x:00005118                 dd offset __unwindtable$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
.xdata$x:0000511C                 db    0
.xdata$x:0000511D                 db    0
.xdata$x:0000511E                 db    0
.xdata$x:0000511F                 db    0
.xdata$x:00005120                 db    0
.xdata$x:00005121                 db    0
.xdata$x:00005122                 db    0
.xdata$x:00005123                 db    0
.xdata$x:00005124                 db    0
.xdata$x:00005125                 db    0
.xdata$x:00005126                 db    0
.xdata$x:00005127                 db    0
.xdata$x:00005128                 db    0
.xdata$x:00005129                 db    0
.xdata$x:0000512A                 db    0
.xdata$x:0000512B                 db    0
.xdata$x:0000512C                 db    0
.xdata$x:0000512D                 db    0
.xdata$x:0000512E                 db    0
.xdata$x:0000512F                 db    0
.xdata$x:00005130                 db    1
.xdata$x:00005131                 db    0
.xdata$x:00005132                 db    0
.xdata$x:00005133                 db    0
.xdata$x:00005134 __unwindtable$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00005134                                         ; DATA XREF: .xdata$x:00005118o
.xdata$x:00005135                 db 0FFh
.xdata$x:00005136                 db 0FFh
.xdata$x:00005137                 db 0FFh
.xdata$x:00005138                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$0
.xdata$x:0000513C                 align 10h
.xdata$x:00005140                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$1
.xdata$x:00005144                 align 8
.xdata$x:00005148                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$2
.xdata$x:0000514C                 db    2
.xdata$x:0000514D                 db    0
.xdata$x:0000514E                 db    0
.xdata$x:0000514F                 db    0
.xdata$x:00005150                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00005154                 db    3
.xdata$x:00005155                 db    0
.xdata$x:00005156                 db    0
.xdata$x:00005157                 db    0
.xdata$x:00005158                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$4
.xdata$x:0000515C                 db    4
.xdata$x:0000515D                 db    0
.xdata$x:0000515E                 db    0
.xdata$x:0000515F                 db    0
.xdata$x:00005160                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00005164                 db    4
.xdata$x:00005165                 db    0
.xdata$x:00005166                 db    0
.xdata$x:00005167                 db    0
.xdata$x:00005168                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$6
.xdata$x:0000516C                 db    6
.xdata$x:0000516D                 db    0
.xdata$x:0000516E                 db    0
.xdata$x:0000516F                 db    0
.xdata$x:00005170                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$7
.xdata$x:00005174                 db    7
.xdata$x:00005175                 db    0
.xdata$x:00005176                 db    0
.xdata$x:00005177                 db    0
.xdata$x:00005178                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$8
.xdata$x:0000517C                 db    8
.xdata$x:0000517D                 db    0
.xdata$x:0000517E                 db    0
.xdata$x:0000517F                 db    0
.xdata$x:00005180                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$9
.xdata$x:00005184                 db    9
.xdata$x:00005185                 db    0
.xdata$x:00005186                 db    0
.xdata$x:00005187                 db    0
.xdata$x:00005188                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$10
.xdata$x:0000518C                 db  0Ah
.xdata$x:0000518D                 db    0
.xdata$x:0000518E                 db    0
.xdata$x:0000518F                 db    0
.xdata$x:00005190                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$11
.xdata$x:00005194                 db  0Bh
.xdata$x:00005195                 db    0
.xdata$x:00005196                 db    0
.xdata$x:00005197                 db    0
.xdata$x:00005198                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$12
.xdata$x:0000519C                 db  0Ch
.xdata$x:0000519D                 db    0
.xdata$x:0000519E                 db    0
.xdata$x:0000519F                 db    0
.xdata$x:000051A0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13
.xdata$x:000051A4                 db  0Ch
.xdata$x:000051A5                 db    0
.xdata$x:000051A6                 db    0
.xdata$x:000051A7                 db    0
.xdata$x:000051A8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14
.xdata$x:000051AC                 db  0Ch
.xdata$x:000051AD                 db    0
.xdata$x:000051AE                 db    0
.xdata$x:000051AF                 db    0
.xdata$x:000051B0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$15
.xdata$x:000051B4                 db  0Ch
.xdata$x:000051B5                 db    0
.xdata$x:000051B6                 db    0
.xdata$x:000051B7                 db    0
.xdata$x:000051B8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$16
.xdata$x:000051BC                 db  0Ch
.xdata$x:000051BD                 db    0
.xdata$x:000051BE                 db    0
.xdata$x:000051BF                 db    0
.xdata$x:000051C0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$17
.xdata$x:000051C4                 db  11h
.xdata$x:000051C5                 db    0
.xdata$x:000051C6                 db    0
.xdata$x:000051C7                 db    0
.xdata$x:000051C8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$18
.xdata$x:000051CC                 db  12h
.xdata$x:000051CD                 db    0
.xdata$x:000051CE                 db    0
.xdata$x:000051CF                 db    0
.xdata$x:000051D0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$19
.xdata$x:000051D4                 db  13h
.xdata$x:000051D5                 db    0
.xdata$x:000051D6                 db    0
.xdata$x:000051D7                 db    0
.xdata$x:000051D8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$20
.xdata$x:000051DC                 db  0Ch
.xdata$x:000051DD                 db    0
.xdata$x:000051DE                 db    0
.xdata$x:000051DF                 db    0
.xdata$x:000051E0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$21
.xdata$x:000051E4                 db  15h
.xdata$x:000051E5                 db    0
.xdata$x:000051E6                 db    0
.xdata$x:000051E7                 db    0
.xdata$x:000051E8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$22
.xdata$x:000051EC                 db  16h
.xdata$x:000051ED                 db    0
.xdata$x:000051EE                 db    0
.xdata$x:000051EF                 db    0
.xdata$x:000051F0                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$23
.xdata$x:000051F4                 db  16h
.xdata$x:000051F5                 db    0
.xdata$x:000051F6                 db    0
.xdata$x:000051F7                 db    0
.xdata$x:000051F8                 dd offset __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$24
.xdata$x:000051FC __unwindtable$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z db 0FFh
.xdata$x:000051FC                                         ; DATA XREF: .xdata$x:0000520Co
.xdata$x:000051FD                 db 0FFh
.xdata$x:000051FE                 db 0FFh
.xdata$x:000051FF                 db 0FFh
.xdata$x:00005200                 dd offset __unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0
.xdata$x:00005204 __ehfuncinfo$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z db  22h ; "
.xdata$x:00005204                                         ; DATA XREF: __ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z+11o
.xdata$x:00005205                 db    5
.xdata$x:00005206                 db  93h ; ô
.xdata$x:00005207                 db  19h
.xdata$x:00005208                 db    1
.xdata$x:00005209                 db    0
.xdata$x:0000520A                 db    0
.xdata$x:0000520B                 db    0
.xdata$x:0000520C                 dd offset __unwindtable$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
.xdata$x:00005210                 db    0
.xdata$x:00005211                 db    0
.xdata$x:00005212                 db    0
.xdata$x:00005213                 db    0
.xdata$x:00005214                 db    0
.xdata$x:00005215                 db    0
.xdata$x:00005216                 db    0
.xdata$x:00005217                 db    0
.xdata$x:00005218                 db    0
.xdata$x:00005219                 db    0
.xdata$x:0000521A                 db    0
.xdata$x:0000521B                 db    0
.xdata$x:0000521C                 db    0
.xdata$x:0000521D                 db    0
.xdata$x:0000521E                 db    0
.xdata$x:0000521F                 db    0
.xdata$x:00005220                 db    0
.xdata$x:00005221                 db    0
.xdata$x:00005222                 db    0
.xdata$x:00005223                 db    0
.xdata$x:00005224                 db    1
.xdata$x:00005225                 db    0
.xdata$x:00005226                 db    0
.xdata$x:00005227                 db    0
.xdata$x:00005228 __unwindtable$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00005228                                         ; DATA XREF: .xdata$x:00005238o
.xdata$x:00005229                 db 0FFh
.xdata$x:0000522A                 db 0FFh
.xdata$x:0000522B                 db 0FFh
.xdata$x:0000522C                 dd offset __unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0
.xdata$x:00005230 __ehfuncinfo$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00005230                                         ; DATA XREF: __ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z+11o
.xdata$x:00005231                 db    5
.xdata$x:00005232                 db  93h ; ô
.xdata$x:00005233                 db  19h
.xdata$x:00005234                 db    1
.xdata$x:00005235                 db    0
.xdata$x:00005236                 db    0
.xdata$x:00005237                 db    0
.xdata$x:00005238                 dd offset __unwindtable$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
.xdata$x:0000523C                 db    0
.xdata$x:0000523D                 db    0
.xdata$x:0000523E                 db    0
.xdata$x:0000523F                 db    0
.xdata$x:00005240                 db    0
.xdata$x:00005241                 db    0
.xdata$x:00005242                 db    0
.xdata$x:00005243                 db    0
.xdata$x:00005244                 db    0
.xdata$x:00005245                 db    0
.xdata$x:00005246                 db    0
.xdata$x:00005247                 db    0
.xdata$x:00005248                 db    0
.xdata$x:00005249                 db    0
.xdata$x:0000524A                 db    0
.xdata$x:0000524B                 db    0
.xdata$x:0000524C                 db    0
.xdata$x:0000524D                 db    0
.xdata$x:0000524E                 db    0
.xdata$x:0000524F                 db    0
.xdata$x:00005250                 db    1
.xdata$x:00005251                 db    0
.xdata$x:00005252                 db    0
.xdata$x:00005253                 db    0
.xdata$x:00005254 __ehfuncinfo$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z db  22h ; "
.xdata$x:00005254                                         ; DATA XREF: __ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z+1Eo
.xdata$x:00005255                 db    5
.xdata$x:00005256                 db  93h ; ô
.xdata$x:00005257                 db  19h
.xdata$x:00005258                 db    8
.xdata$x:00005259                 db    0
.xdata$x:0000525A                 db    0
.xdata$x:0000525B                 db    0
.xdata$x:0000525C                 dd offset __unwindtable$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
.xdata$x:00005260                 db    0
.xdata$x:00005261                 db    0
.xdata$x:00005262                 db    0
.xdata$x:00005263                 db    0
.xdata$x:00005264                 db    0
.xdata$x:00005265                 db    0
.xdata$x:00005266                 db    0
.xdata$x:00005267                 db    0
.xdata$x:00005268                 db    0
.xdata$x:00005269                 db    0
.xdata$x:0000526A                 db    0
.xdata$x:0000526B                 db    0
.xdata$x:0000526C                 db    0
.xdata$x:0000526D                 db    0
.xdata$x:0000526E                 db    0
.xdata$x:0000526F                 db    0
.xdata$x:00005270                 db    0
.xdata$x:00005271                 db    0
.xdata$x:00005272                 db    0
.xdata$x:00005273                 db    0
.xdata$x:00005274                 db    1
.xdata$x:00005275                 db    0
.xdata$x:00005276                 db    0
.xdata$x:00005277                 db    0
.xdata$x:00005278 __unwindtable$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z db 0FFh
.xdata$x:00005278                                         ; DATA XREF: .xdata$x:0000525Co
.xdata$x:00005279                 db 0FFh
.xdata$x:0000527A                 db 0FFh
.xdata$x:0000527B                 db 0FFh
.xdata$x:0000527C                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$0
.xdata$x:00005280                 db 0FFh
.xdata$x:00005281                 db 0FFh
.xdata$x:00005282                 db 0FFh
.xdata$x:00005283                 db 0FFh
.xdata$x:00005284                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$1
.xdata$x:00005288                 db    1
.xdata$x:00005289                 db    0
.xdata$x:0000528A                 db    0
.xdata$x:0000528B                 db    0
.xdata$x:0000528C                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$2
.xdata$x:00005290                 db    2
.xdata$x:00005291                 db    0
.xdata$x:00005292                 db    0
.xdata$x:00005293                 db    0
.xdata$x:00005294                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$3
.xdata$x:00005298                 db    3
.xdata$x:00005299                 db    0
.xdata$x:0000529A                 db    0
.xdata$x:0000529B                 db    0
.xdata$x:0000529C                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$4
.xdata$x:000052A0                 db    4
.xdata$x:000052A1                 db    0
.xdata$x:000052A2                 db    0
.xdata$x:000052A3                 db    0
.xdata$x:000052A4                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$5
.xdata$x:000052A8                 db    5
.xdata$x:000052A9                 db    0
.xdata$x:000052AA                 db    0
.xdata$x:000052AB                 db    0
.xdata$x:000052AC                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$6
.xdata$x:000052B0                 db    6
.xdata$x:000052B1                 db    0
.xdata$x:000052B2                 db    0
.xdata$x:000052B3                 db    0
.xdata$x:000052B4                 dd offset __unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$7
.xdata$x:000052B4 _xdata$x        ends
.xdata$x:000052B4
.text:000052B8 ; ===========================================================================
.text:000052B8
.text:000052B8 ; Segment type: Pure code
.text:000052B8 ; Segment permissions: Read/Execute
.text:000052B8 _text           segment para public 'CODE' use32
.text:000052B8                 assume cs:_text
.text:000052B8                 ;org 52B8h
.text:000052B8 ; COMDAT (pick any)
.text:000052B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052B8
.text:000052B8 ; =============== S U B R O U T I N E =======================================
.text:000052B8
.text:000052B8 ; Attributes: bp-based frame
.text:000052B8
.text:000052B8 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:000052B8                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:000052B8 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:000052B8                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+45p
.text:000052B8                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+EBFp
.text:000052B8
.text:000052B8 var_4           = dword ptr -4
.text:000052B8 arg_0           = dword ptr  8
.text:000052B8
.text:000052B8                 push    ebp
.text:000052B9                 mov     ebp, esp
.text:000052BB                 push    ecx
.text:000052BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052C3                 mov     [ebp+var_4], ecx
.text:000052C6                 mov     eax, [ebp+var_4]
.text:000052C9                 mov     ecx, [ebp+arg_0]
.text:000052CC                 mov     [eax], ecx
.text:000052CE                 mov     edx, [ebp+var_4]
.text:000052D1                 mov     ecx, [edx]      ; this
.text:000052D3                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:000052D8                 mov     eax, [ebp+var_4]
.text:000052DB                 add     esp, 4
.text:000052DE                 cmp     ebp, esp
.text:000052E0                 call    __RTC_CheckEsp
.text:000052E5                 mov     esp, ebp
.text:000052E7                 pop     ebp
.text:000052E8                 retn    4
.text:000052E8 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:000052E8
.text:000052E8 ; ---------------------------------------------------------------------------
.text:000052EB                 align 4
.text:000052EB _text           ends
.text:000052EB
.text:000052EC ; ===========================================================================
.text:000052EC
.text:000052EC ; Segment type: Pure code
.text:000052EC ; Segment permissions: Read/Execute
.text:000052EC _text           segment para public 'CODE' use32
.text:000052EC                 assume cs:_text
.text:000052EC                 ;org 52ECh
.text:000052EC ; COMDAT (pick any)
.text:000052EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052EC
.text:000052EC ; =============== S U B R O U T I N E =======================================
.text:000052EC
.text:000052EC ; Attributes: bp-based frame
.text:000052EC
.text:000052EC ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:000052EC                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:000052EC ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:000052EC                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+ACp
.text:000052EC                                         ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+179p ...
.text:000052EC
.text:000052EC var_4           = dword ptr -4
.text:000052EC
.text:000052EC                 push    ebp
.text:000052ED                 mov     ebp, esp
.text:000052EF                 push    ecx
.text:000052F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052F7                 mov     [ebp+var_4], ecx
.text:000052FA                 mov     ecx, [ebp+var_4] ; this
.text:000052FD                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00005302                 add     esp, 4
.text:00005305                 cmp     ebp, esp
.text:00005307                 call    __RTC_CheckEsp
.text:0000530C                 mov     esp, ebp
.text:0000530E                 pop     ebp
.text:0000530F                 retn
.text:0000530F ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:0000530F
.text:0000530F _text           ends
.text:0000530F
.text:00005310 ; ===========================================================================
.text:00005310
.text:00005310 ; Segment type: Pure code
.text:00005310 ; Segment permissions: Read/Execute
.text:00005310 _text           segment para public 'CODE' use32
.text:00005310                 assume cs:_text
.text:00005310                 ;org 5310h
.text:00005310 ; COMDAT (pick any)
.text:00005310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005310
.text:00005310 ; =============== S U B R O U T I N E =======================================
.text:00005310
.text:00005310 ; Attributes: bp-based frame
.text:00005310
.text:00005310 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00005310                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00005310 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00005310                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00005310
.text:00005310 var_4           = dword ptr -4
.text:00005310
.text:00005310                 push    ebp
.text:00005311                 mov     ebp, esp
.text:00005313                 push    ecx
.text:00005314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000531B                 mov     [ebp+var_4], ecx
.text:0000531E                 mov     eax, [ebp+var_4]
.text:00005321                 mov     ecx, [eax]      ; this
.text:00005323                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00005328                 add     esp, 4
.text:0000532B                 cmp     ebp, esp
.text:0000532D                 call    __RTC_CheckEsp
.text:00005332                 mov     esp, ebp
.text:00005334                 pop     ebp
.text:00005335                 retn
.text:00005335 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00005335
.text:00005335 ; ---------------------------------------------------------------------------
.text:00005336                 align 4
.text:00005336 _text           ends
.text:00005336
.text:00005338 ; ===========================================================================
.text:00005338
.text:00005338 ; Segment type: Pure code
.text:00005338 ; Segment permissions: Read/Execute
.text:00005338 _text           segment para public 'CODE' use32
.text:00005338                 assume cs:_text
.text:00005338                 ;org 5338h
.text:00005338 ; COMDAT (pick any)
.text:00005338                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005338
.text:00005338 ; =============== S U B R O U T I N E =======================================
.text:00005338
.text:00005338 ; Attributes: bp-based frame
.text:00005338
.text:00005338 ; _DWORD __thiscall NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(NArchive::NZip::CMtProgressMixer2 *__hidden this)
.text:00005338                 public ??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text:00005338 ??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ proc near
.text:00005338                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+56p
.text:00005338
.text:00005338 var_10          = dword ptr -10h
.text:00005338 var_C           = dword ptr -0Ch
.text:00005338 var_4           = dword ptr -4
.text:00005338
.text:00005338                 push    ebp
.text:00005339                 mov     ebp, esp
.text:0000533B                 push    0FFFFFFFFh
.text:0000533D                 push    offset __ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text:00005342                 mov     eax, large fs:0
.text:00005348                 push    eax
.text:00005349                 push    ecx
.text:0000534A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005351                 mov     eax, dword ptr ds:___security_cookie
.text:00005356                 xor     eax, ebp
.text:00005358                 push    eax
.text:00005359                 lea     eax, [ebp+var_C]
.text:0000535C                 mov     large fs:0, eax
.text:00005362                 mov     [ebp+var_10], ecx
.text:00005365                 mov     ecx, [ebp+var_10] ; this
.text:00005368                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:0000536D                 mov     ecx, [ebp+var_10]
.text:00005370                 add     ecx, 4          ; this
.text:00005373                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00005378                 mov     eax, [ebp+var_10]
.text:0000537B                 mov     dword ptr [eax], offset ??_7CMtProgressMixer2@NZip@NArchive@@6B@ ; const NArchive::NZip::CMtProgressMixer2::`vftable'
.text:00005381                 mov     ecx, [ebp+var_10]
.text:00005384                 add     ecx, 30h ; '0'
.text:00005387                 call    ??0?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::CMyComPtr<IProgress>(void)
.text:0000538C                 mov     [ebp+var_4], 0
.text:00005393                 mov     ecx, [ebp+var_10]
.text:00005396                 add     ecx, 34h ; '4'
.text:00005399                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:0000539E                 mov     byte ptr [ebp+var_4], 1
.text:000053A2                 mov     ecx, [ebp+var_10]
.text:000053A5                 add     ecx, 3Ch ; '<'  ; this
.text:000053A8                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:000053AD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053B4                 mov     eax, [ebp+var_10]
.text:000053B7                 mov     ecx, [ebp+var_C]
.text:000053BA                 mov     large fs:0, ecx
.text:000053C1                 pop     ecx
.text:000053C2                 add     esp, 10h
.text:000053C5                 cmp     ebp, esp
.text:000053C7                 call    __RTC_CheckEsp
.text:000053CC                 mov     esp, ebp
.text:000053CE                 pop     ebp
.text:000053CF                 retn
.text:000053CF ??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ endp
.text:000053CF
.text:000053CF _text           ends
.text:000053CF
.text$x:000053D0 ; ===========================================================================
.text$x:000053D0
.text$x:000053D0 ; Segment type: Pure code
.text$x:000053D0 ; Segment permissions: Read/Execute
.text$x:000053D0 _text$x         segment para public 'CODE' use32
.text$x:000053D0                 assume cs:_text$x
.text$x:000053D0                 ;org 53D0h
.text$x:000053D0 ; COMDAT (pick associative to section at 5338)
.text$x:000053D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000053D0
.text$x:000053D0 ; =============== S U B R O U T I N E =======================================
.text$x:000053D0
.text$x:000053D0
.text$x:000053D0 __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000053D0                                         ; DATA XREF: .xdata$x:0000541Co
.text$x:000053D0                 mov     ecx, [ebp-10h]
.text$x:000053D3                 add     ecx, 30h ; '0'
.text$x:000053D6                 jmp     ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text$x:000053D6 __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000053D6
.text$x:000053DB
.text$x:000053DB ; =============== S U B R O U T I N E =======================================
.text$x:000053DB
.text$x:000053DB
.text$x:000053DB __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:000053DB                                         ; DATA XREF: .xdata$x:00005424o
.text$x:000053DB                 mov     ecx, [ebp-10h]
.text$x:000053DE                 add     ecx, 34h ; '4'
.text$x:000053E1                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:000053E1 __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1 endp
.text$x:000053E1
.text$x:000053E6
.text$x:000053E6 ; =============== S U B R O U T I N E =======================================
.text$x:000053E6
.text$x:000053E6
.text$x:000053E6 __ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ proc near
.text$x:000053E6                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+5o
.text$x:000053E6
.text$x:000053E6 arg_4           = dword ptr  8
.text$x:000053E6
.text$x:000053E6                 mov     edx, [esp+arg_4]
.text$x:000053EA                 lea     eax, [edx+0Ch]
.text$x:000053ED                 mov     ecx, [edx-8]
.text$x:000053F0                 xor     ecx, eax
.text$x:000053F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053F7                 mov     eax, offset __ehfuncinfo$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text$x:000053FC                 jmp     ___CxxFrameHandler3
.text$x:000053FC __ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ endp
.text$x:000053FC
.text$x:000053FC ; ---------------------------------------------------------------------------
.text$x:00005401                 align 4
.text$x:00005401 _text$x         ends
.text$x:00005401
.rdata:00005404 ; ===========================================================================
.rdata:00005404
.rdata:00005404 ; Segment type: Pure data
.rdata:00005404 ; Segment permissions: Read
.rdata:00005404 _rdata          segment dword public 'DATA' use32
.rdata:00005404                 assume cs:_rdata
.rdata:00005404                 ;org 5404h
.rdata:00005404 ; COMDAT (pick largest)
.rdata:00005404                 dd offset ??_R4CMtProgressMixer2@NZip@NArchive@@6B@ ; const NArchive::NZip::CMtProgressMixer2::`RTTI Complete Object Locator'
.rdata:00005408                 public ??_7CMtProgressMixer2@NZip@NArchive@@6B@
.rdata:00005408 ; const NArchive::NZip::CMtProgressMixer2::`vftable'
.rdata:00005408 ??_7CMtProgressMixer2@NZip@NArchive@@6B@ dd offset ?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005408                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+43o
.rdata:00005408                                         ; NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)
.rdata:0000540C                 dd offset ?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CMtProgressMixer2::AddRef(void)
.rdata:00005410                 dd offset ?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CMtProgressMixer2::Release(void)
.rdata:00005414                 dd offset ?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005414 _rdata          ends
.rdata:00005414
.xdata$x:00005418 ; ===========================================================================
.xdata$x:00005418
.xdata$x:00005418 ; Segment type: Pure data
.xdata$x:00005418 ; Segment permissions: Read
.xdata$x:00005418 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005418                 assume cs:_xdata$x
.xdata$x:00005418                 ;org 5418h
.xdata$x:00005418 ; COMDAT (pick associative to section at 5338)
.xdata$x:00005418 __unwindtable$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005418                                         ; DATA XREF: .xdata$x:00005430o
.xdata$x:00005419                 db 0FFh
.xdata$x:0000541A                 db 0FFh
.xdata$x:0000541B                 db 0FFh
.xdata$x:0000541C                 dd offset __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0
.xdata$x:00005420                 db    0
.xdata$x:00005421                 db    0
.xdata$x:00005422                 db    0
.xdata$x:00005423                 db    0
.xdata$x:00005424                 dd offset __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1
.xdata$x:00005428 __ehfuncinfo$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005428                                         ; DATA XREF: __ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00005429                 db    5
.xdata$x:0000542A                 db  93h ; ô
.xdata$x:0000542B                 db  19h
.xdata$x:0000542C                 db    2
.xdata$x:0000542D                 db    0
.xdata$x:0000542E                 db    0
.xdata$x:0000542F                 db    0
.xdata$x:00005430                 dd offset __unwindtable$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.xdata$x:00005434                 db    0
.xdata$x:00005435                 db    0
.xdata$x:00005436                 db    0
.xdata$x:00005437                 db    0
.xdata$x:00005438                 db    0
.xdata$x:00005439                 db    0
.xdata$x:0000543A                 db    0
.xdata$x:0000543B                 db    0
.xdata$x:0000543C                 db    0
.xdata$x:0000543D                 db    0
.xdata$x:0000543E                 db    0
.xdata$x:0000543F                 db    0
.xdata$x:00005440                 db    0
.xdata$x:00005441                 db    0
.xdata$x:00005442                 db    0
.xdata$x:00005443                 db    0
.xdata$x:00005444                 db    0
.xdata$x:00005445                 db    0
.xdata$x:00005446                 db    0
.xdata$x:00005447                 db    0
.xdata$x:00005448                 db    1
.xdata$x:00005449                 db    0
.xdata$x:0000544A                 db    0
.xdata$x:0000544B                 db    0
.xdata$x:0000544B _xdata$x        ends
.xdata$x:0000544B
.rdata$r:0000544C ; ===========================================================================
.rdata$r:0000544C
.rdata$r:0000544C ; Segment type: Pure data
.rdata$r:0000544C ; Segment permissions: Read
.rdata$r:0000544C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000544C                 assume cs:_rdata$r
.rdata$r:0000544C                 ;org 544Ch
.rdata$r:0000544C ; COMDAT (pick any)
.rdata$r:0000544C                 public ??_R4CMtProgressMixer2@NZip@NArchive@@6B@
.rdata$r:0000544C ; const NArchive::NZip::CMtProgressMixer2::`RTTI Complete Object Locator'
.rdata$r:0000544C ??_R4CMtProgressMixer2@NZip@NArchive@@6B@ db    0
.rdata$r:0000544C                                         ; DATA XREF: .rdata:00005404o
.rdata$r:0000544D                 db    0
.rdata$r:0000544E                 db    0
.rdata$r:0000544F                 db    0
.rdata$r:00005450                 db    0
.rdata$r:00005451                 db    0
.rdata$r:00005452                 db    0
.rdata$r:00005453                 db    0
.rdata$r:00005454                 db    0
.rdata$r:00005455                 db    0
.rdata$r:00005456                 db    0
.rdata$r:00005457                 db    0
.rdata$r:00005458                 dd offset ??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8 ; NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'
.rdata$r:0000545C                 dd offset ??_R3CMtProgressMixer2@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000545C _rdata$r        ends
.rdata$r:0000545C
.data:00005460 ; ===========================================================================
.data:00005460
.data:00005460 ; Segment type: Pure data
.data:00005460 ; Segment permissions: Read/Write
.data:00005460 _data           segment dword public 'DATA' use32
.data:00005460                 assume cs:_data
.data:00005460                 ;org 5460h
.data:00005460 ; COMDAT (pick any)
.data:00005460                 public ??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8
.data:00005460 ; class NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'
.data:00005460 ??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005460                                         ; DATA XREF: .rdata$r:00005458o
.data:00005460                                         ; .rdata$r:NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005460                                         ; const type_info::`vftable'
.data:00005464                 align 8
.data:00005468 a_?avcmtprogres db '.?AVCMtProgressMixer2@NZip@NArchive@@',0
.data:0000548E                 align 10h
.data:0000548E _data           ends
.data:0000548E
.rdata$r:00005490 ; ===========================================================================
.rdata$r:00005490
.rdata$r:00005490 ; Segment type: Pure data
.rdata$r:00005490 ; Segment permissions: Read
.rdata$r:00005490 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005490                 assume cs:_rdata$r
.rdata$r:00005490                 ;org 5490h
.rdata$r:00005490 ; COMDAT (pick any)
.rdata$r:00005490                 public ??_R3CMtProgressMixer2@NZip@NArchive@@8
.rdata$r:00005490 ; NArchive::NZip::CMtProgressMixer2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005490 ??_R3CMtProgressMixer2@NZip@NArchive@@8 db    0
.rdata$r:00005490                                         ; DATA XREF: .rdata$r:0000545Co
.rdata$r:00005490                                         ; .rdata$r:000054CCo
.rdata$r:00005491                 db    0
.rdata$r:00005492                 db    0
.rdata$r:00005493                 db    0
.rdata$r:00005494                 db    1
.rdata$r:00005495                 db    0
.rdata$r:00005496                 db    0
.rdata$r:00005497                 db    0
.rdata$r:00005498                 db    4
.rdata$r:00005499                 db    0
.rdata$r:0000549A                 db    0
.rdata$r:0000549B                 db    0
.rdata$r:0000549C                 dd offset ??_R2CMtProgressMixer2@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Array'
.rdata$r:0000549C _rdata$r        ends
.rdata$r:0000549C
.rdata$r:000054A0 ; ===========================================================================
.rdata$r:000054A0
.rdata$r:000054A0 ; Segment type: Pure data
.rdata$r:000054A0 ; Segment permissions: Read
.rdata$r:000054A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054A0                 assume cs:_rdata$r
.rdata$r:000054A0                 ;org 54A0h
.rdata$r:000054A0 ; COMDAT (pick any)
.rdata$r:000054A0                 public ??_R2CMtProgressMixer2@NZip@NArchive@@8
.rdata$r:000054A0 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Array'
.rdata$r:000054A0 ??_R2CMtProgressMixer2@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8
.rdata$r:000054A0                                         ; DATA XREF: .rdata$r:0000549Co
.rdata$r:000054A0                                         ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000054A4                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000054A8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000054AC                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000054B0                 db    0
.rdata$r:000054B1                 align 4
.rdata$r:000054B1 _rdata$r        ends
.rdata$r:000054B1
.rdata$r:000054B4 ; ===========================================================================
.rdata$r:000054B4
.rdata$r:000054B4 ; Segment type: Pure data
.rdata$r:000054B4 ; Segment permissions: Read
.rdata$r:000054B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054B4                 assume cs:_rdata$r
.rdata$r:000054B4                 ;org 54B4h
.rdata$r:000054B4 ; COMDAT (pick any)
.rdata$r:000054B4                 public ??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8
.rdata$r:000054B4 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000054B4 ??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8 dd offset ??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8
.rdata$r:000054B4                                         ; DATA XREF: .rdata$r:NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Array'o
.rdata$r:000054B4                                         ; NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'
.rdata$r:000054B8                 db    3
.rdata$r:000054B9                 db    0
.rdata$r:000054BA                 db    0
.rdata$r:000054BB                 db    0
.rdata$r:000054BC                 db    0
.rdata$r:000054BD                 db    0
.rdata$r:000054BE                 db    0
.rdata$r:000054BF                 db    0
.rdata$r:000054C0                 db 0FFh
.rdata$r:000054C1                 db 0FFh
.rdata$r:000054C2                 db 0FFh
.rdata$r:000054C3                 db 0FFh
.rdata$r:000054C4                 db    0
.rdata$r:000054C5                 db    0
.rdata$r:000054C6                 db    0
.rdata$r:000054C7                 db    0
.rdata$r:000054C8                 db  40h ; @
.rdata$r:000054C9                 db    0
.rdata$r:000054CA                 db    0
.rdata$r:000054CB                 db    0
.rdata$r:000054CC                 dd offset ??_R3CMtProgressMixer2@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000054CC _rdata$r        ends
.rdata$r:000054CC
.rdata$r:000054D0 ; ===========================================================================
.rdata$r:000054D0
.rdata$r:000054D0 ; Segment type: Pure data
.rdata$r:000054D0 ; Segment permissions: Read
.rdata$r:000054D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054D0                 assume cs:_rdata$r
.rdata$r:000054D0                 ;org 54D0h
.rdata$r:000054D0 ; COMDAT (pick any)
.rdata$r:000054D0                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:000054D0 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000054D0 ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:000054D0                                         ; DATA XREF: .rdata$r:000054A4o
.rdata$r:000054D0                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o ...
.rdata$r:000054D0                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:000054D4                 db    1
.rdata$r:000054D5                 db    0
.rdata$r:000054D6                 db    0
.rdata$r:000054D7                 db    0
.rdata$r:000054D8                 db    0
.rdata$r:000054D9                 db    0
.rdata$r:000054DA                 db    0
.rdata$r:000054DB                 db    0
.rdata$r:000054DC                 db 0FFh
.rdata$r:000054DD                 db 0FFh
.rdata$r:000054DE                 db 0FFh
.rdata$r:000054DF                 db 0FFh
.rdata$r:000054E0                 db    0
.rdata$r:000054E1                 db    0
.rdata$r:000054E2                 db    0
.rdata$r:000054E3                 db    0
.rdata$r:000054E4                 db  40h ; @
.rdata$r:000054E5                 db    0
.rdata$r:000054E6                 db    0
.rdata$r:000054E7                 db    0
.rdata$r:000054E8                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:000054E8 _rdata$r        ends
.rdata$r:000054E8
.data:000054EC ; ===========================================================================
.data:000054EC
.data:000054EC ; Segment type: Pure data
.data:000054EC ; Segment permissions: Read/Write
.data:000054EC _data           segment dword public 'DATA' use32
.data:000054EC                 assume cs:_data
.data:000054EC                 ;org 54ECh
.data:000054EC ; COMDAT (pick any)
.data:000054EC                 public ??_R0?AUICompressProgressInfo@@@8
.data:000054EC ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:000054EC ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:000054EC                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000054EC                                         ; .rdata$r:00005904o
.data:000054EC                                         ; const type_info::`vftable'
.data:000054F0                 db    0
.data:000054F1                 db    0
.data:000054F2                 db    0
.data:000054F3                 db    0
.data:000054F4                 db  2Eh ; .
.data:000054F5                 db  3Fh ; ?
.data:000054F6                 db  41h ; A
.data:000054F7                 db  55h ; U
.data:000054F8                 db  49h ; I
.data:000054F9                 db  43h ; C
.data:000054FA                 db  6Fh ; o
.data:000054FB                 db  6Dh ; m
.data:000054FC                 db  70h ; p
.data:000054FD                 db  72h ; r
.data:000054FE                 db  65h ; e
.data:000054FF                 db  73h ; s
.data:00005500                 db  73h ; s
.data:00005501                 db  50h ; P
.data:00005502                 db  72h ; r
.data:00005503                 db  6Fh ; o
.data:00005504                 db  67h ; g
.data:00005505                 db  72h ; r
.data:00005506                 db  65h ; e
.data:00005507                 db  73h ; s
.data:00005508                 db  73h ; s
.data:00005509                 db  49h ; I
.data:0000550A                 db  6Eh ; n
.data:0000550B                 db  66h ; f
.data:0000550C                 db  6Fh ; o
.data:0000550D                 db  40h ; @
.data:0000550E                 db  40h ; @
.data:0000550F                 db    0
.data:0000550F _data           ends
.data:0000550F
.rdata$r:00005510 ; ===========================================================================
.rdata$r:00005510
.rdata$r:00005510 ; Segment type: Pure data
.rdata$r:00005510 ; Segment permissions: Read
.rdata$r:00005510 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005510                 assume cs:_rdata$r
.rdata$r:00005510                 ;org 5510h
.rdata$r:00005510 ; COMDAT (pick any)
.rdata$r:00005510                 public ??_R3ICompressProgressInfo@@8
.rdata$r:00005510 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005510 ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:000054E8o
.rdata$r:00005510                                         ; .rdata$r:00005908o
.rdata$r:00005511                 db    0
.rdata$r:00005512                 db    0
.rdata$r:00005513                 db    0
.rdata$r:00005514                 db    0
.rdata$r:00005515                 db    0
.rdata$r:00005516                 db    0
.rdata$r:00005517                 db    0
.rdata$r:00005518                 db    2
.rdata$r:00005519                 db    0
.rdata$r:0000551A                 db    0
.rdata$r:0000551B                 db    0
.rdata$r:0000551C                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:0000551C _rdata$r        ends
.rdata$r:0000551C
.rdata$r:00005520 ; ===========================================================================
.rdata$r:00005520
.rdata$r:00005520 ; Segment type: Pure data
.rdata$r:00005520 ; Segment permissions: Read
.rdata$r:00005520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005520                 assume cs:_rdata$r
.rdata$r:00005520                 ;org 5520h
.rdata$r:00005520 ; COMDAT (pick any)
.rdata$r:00005520                 public ??_R2ICompressProgressInfo@@8
.rdata$r:00005520 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00005520 ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00005520                                         ; DATA XREF: .rdata$r:0000551Co
.rdata$r:00005520                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005524                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005528                 db    0
.rdata$r:00005529                 align 4
.rdata$r:00005529 _rdata$r        ends
.rdata$r:00005529
.rdata$r:0000552C ; ===========================================================================
.rdata$r:0000552C
.rdata$r:0000552C ; Segment type: Pure data
.rdata$r:0000552C ; Segment permissions: Read
.rdata$r:0000552C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000552C                 assume cs:_rdata$r
.rdata$r:0000552C                 ;org 552Ch
.rdata$r:0000552C ; COMDAT (pick any)
.rdata$r:0000552C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000552C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000552C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000552C                                         ; DATA XREF: .rdata$r:000054A8o
.rdata$r:0000552C                                         ; .rdata$r:00005524o ...
.rdata$r:0000552C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005530                 db    0
.rdata$r:00005531                 db    0
.rdata$r:00005532                 db    0
.rdata$r:00005533                 db    0
.rdata$r:00005534                 db    0
.rdata$r:00005535                 db    0
.rdata$r:00005536                 db    0
.rdata$r:00005537                 db    0
.rdata$r:00005538                 db 0FFh
.rdata$r:00005539                 db 0FFh
.rdata$r:0000553A                 db 0FFh
.rdata$r:0000553B                 db 0FFh
.rdata$r:0000553C                 db    0
.rdata$r:0000553D                 db    0
.rdata$r:0000553E                 db    0
.rdata$r:0000553F                 db    0
.rdata$r:00005540                 db  40h ; @
.rdata$r:00005541                 db    0
.rdata$r:00005542                 db    0
.rdata$r:00005543                 db    0
.rdata$r:00005544                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005544 _rdata$r        ends
.rdata$r:00005544
.data:00005548 ; ===========================================================================
.data:00005548
.data:00005548 ; Segment type: Pure data
.data:00005548 ; Segment permissions: Read/Write
.data:00005548 _data           segment dword public 'DATA' use32
.data:00005548                 assume cs:_data
.data:00005548                 ;org 5548h
.data:00005548 ; COMDAT (pick any)
.data:00005548                 public ??_R0?AUIUnknown@@@8
.data:00005548 ; struct IUnknown `RTTI Type Descriptor'
.data:00005548 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00005548                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005548                                         ; const type_info::`vftable'
.data:0000554C                 align 10h
.data:00005550 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000555F                 align 10h
.data:0000555F _data           ends
.data:0000555F
.rdata$r:00005560 ; ===========================================================================
.rdata$r:00005560
.rdata$r:00005560 ; Segment type: Pure data
.rdata$r:00005560 ; Segment permissions: Read
.rdata$r:00005560 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005560                 assume cs:_rdata$r
.rdata$r:00005560                 ;org 5560h
.rdata$r:00005560 ; COMDAT (pick any)
.rdata$r:00005560                 public ??_R3IUnknown@@8
.rdata$r:00005560 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005560 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00005544o
.rdata$r:00005561                 db    0
.rdata$r:00005562                 db    0
.rdata$r:00005563                 db    0
.rdata$r:00005564                 db    0
.rdata$r:00005565                 db    0
.rdata$r:00005566                 db    0
.rdata$r:00005567                 db    0
.rdata$r:00005568                 db    1
.rdata$r:00005569                 db    0
.rdata$r:0000556A                 db    0
.rdata$r:0000556B                 db    0
.rdata$r:0000556C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000556C _rdata$r        ends
.rdata$r:0000556C
.rdata$r:00005570 ; ===========================================================================
.rdata$r:00005570
.rdata$r:00005570 ; Segment type: Pure data
.rdata$r:00005570 ; Segment permissions: Read
.rdata$r:00005570 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005570                 assume cs:_rdata$r
.rdata$r:00005570                 ;org 5570h
.rdata$r:00005570 ; COMDAT (pick any)
.rdata$r:00005570                 public ??_R2IUnknown@@8
.rdata$r:00005570 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005570 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00005570                                         ; DATA XREF: .rdata$r:0000556Co
.rdata$r:00005570                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005574                 db    0
.rdata$r:00005575                 align 4
.rdata$r:00005575 _rdata$r        ends
.rdata$r:00005575
.rdata$r:00005578 ; ===========================================================================
.rdata$r:00005578
.rdata$r:00005578 ; Segment type: Pure data
.rdata$r:00005578 ; Segment permissions: Read
.rdata$r:00005578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005578                 assume cs:_rdata$r
.rdata$r:00005578                 ;org 5578h
.rdata$r:00005578 ; COMDAT (pick any)
.rdata$r:00005578                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00005578 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005578 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005578                                         ; DATA XREF: .rdata$r:000054ACo
.rdata$r:00005578                                         ; .rdata$r:000059A0o ...
.rdata$r:00005578                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000557C                 align 10h
.rdata$r:00005580                 db    4
.rdata$r:00005581                 db    0
.rdata$r:00005582                 db    0
.rdata$r:00005583                 db    0
.rdata$r:00005584                 db 0FFh
.rdata$r:00005585                 db 0FFh
.rdata$r:00005586                 db 0FFh
.rdata$r:00005587                 db 0FFh
.rdata$r:00005588                 db    0
.rdata$r:00005589                 db    0
.rdata$r:0000558A                 db    0
.rdata$r:0000558B                 db    0
.rdata$r:0000558C                 db  40h ; @
.rdata$r:0000558D                 db    0
.rdata$r:0000558E                 db    0
.rdata$r:0000558F                 db    0
.rdata$r:00005590                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005590 _rdata$r        ends
.rdata$r:00005590
.data:00005594 ; ===========================================================================
.data:00005594
.data:00005594 ; Segment type: Pure data
.data:00005594 ; Segment permissions: Read/Write
.data:00005594 _data           segment dword public 'DATA' use32
.data:00005594                 assume cs:_data
.data:00005594                 ;org 5594h
.data:00005594 ; COMDAT (pick any)
.data:00005594                 public ??_R0?AVCMyUnknownImp@@@8
.data:00005594 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00005594 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00005594                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005594                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005594                                         ; const type_info::`vftable'
.data:00005598                 db    0
.data:00005599                 db    0
.data:0000559A                 db    0
.data:0000559B                 db    0
.data:0000559C                 db  2Eh ; .
.data:0000559D                 db  3Fh ; ?
.data:0000559E                 db  41h ; A
.data:0000559F                 db  56h ; V
.data:000055A0                 db  43h ; C
.data:000055A1                 db  4Dh ; M
.data:000055A2                 db  79h ; y
.data:000055A3                 db  55h ; U
.data:000055A4                 db  6Eh ; n
.data:000055A5                 db  6Bh ; k
.data:000055A6                 db  6Eh ; n
.data:000055A7                 db  6Fh ; o
.data:000055A8                 db  77h ; w
.data:000055A9                 db  6Eh ; n
.data:000055AA                 db  49h ; I
.data:000055AB                 db  6Dh ; m
.data:000055AC                 db  70h ; p
.data:000055AD                 db  40h ; @
.data:000055AE                 db  40h ; @
.data:000055AF                 db    0
.data:000055AF _data           ends
.data:000055AF
.rdata$r:000055B0 ; ===========================================================================
.rdata$r:000055B0
.rdata$r:000055B0 ; Segment type: Pure data
.rdata$r:000055B0 ; Segment permissions: Read
.rdata$r:000055B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000055B0                 assume cs:_rdata$r
.rdata$r:000055B0                 ;org 55B0h
.rdata$r:000055B0 ; COMDAT (pick any)
.rdata$r:000055B0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000055B0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000055B0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00005590o
.rdata$r:000055B0                                         ; .rdata$r:000055E0o
.rdata$r:000055B1                 db    0
.rdata$r:000055B2                 db    0
.rdata$r:000055B3                 db    0
.rdata$r:000055B4                 db    0
.rdata$r:000055B5                 db    0
.rdata$r:000055B6                 db    0
.rdata$r:000055B7                 db    0
.rdata$r:000055B8                 db    1
.rdata$r:000055B9                 db    0
.rdata$r:000055BA                 db    0
.rdata$r:000055BB                 db    0
.rdata$r:000055BC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000055BC _rdata$r        ends
.rdata$r:000055BC
.rdata$r:000055C0 ; ===========================================================================
.rdata$r:000055C0
.rdata$r:000055C0 ; Segment type: Pure data
.rdata$r:000055C0 ; Segment permissions: Read
.rdata$r:000055C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000055C0                 assume cs:_rdata$r
.rdata$r:000055C0                 ;org 55C0h
.rdata$r:000055C0 ; COMDAT (pick any)
.rdata$r:000055C0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000055C0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000055C0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000055C0                                         ; DATA XREF: .rdata$r:000055BCo
.rdata$r:000055C0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000055C4                 db    0
.rdata$r:000055C5                 align 4
.rdata$r:000055C5 _rdata$r        ends
.rdata$r:000055C5
.rdata$r:000055C8 ; ===========================================================================
.rdata$r:000055C8
.rdata$r:000055C8 ; Segment type: Pure data
.rdata$r:000055C8 ; Segment permissions: Read
.rdata$r:000055C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000055C8                 assume cs:_rdata$r
.rdata$r:000055C8                 ;org 55C8h
.rdata$r:000055C8 ; COMDAT (pick any)
.rdata$r:000055C8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000055C8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000055C8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000055C8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000055C8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000055CC                 db    0
.rdata$r:000055CD                 db    0
.rdata$r:000055CE                 db    0
.rdata$r:000055CF                 db    0
.rdata$r:000055D0                 db    0
.rdata$r:000055D1                 db    0
.rdata$r:000055D2                 db    0
.rdata$r:000055D3                 db    0
.rdata$r:000055D4                 db 0FFh
.rdata$r:000055D5                 db 0FFh
.rdata$r:000055D6                 db 0FFh
.rdata$r:000055D7                 db 0FFh
.rdata$r:000055D8                 db    0
.rdata$r:000055D9                 db    0
.rdata$r:000055DA                 db    0
.rdata$r:000055DB                 db    0
.rdata$r:000055DC                 db  40h ; @
.rdata$r:000055DD                 db    0
.rdata$r:000055DE                 db    0
.rdata$r:000055DF                 db    0
.rdata$r:000055E0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000055E0 _rdata$r        ends
.rdata$r:000055E0
.text:000055E4 ; ===========================================================================
.text:000055E4
.text:000055E4 ; Segment type: Pure code
.text:000055E4 ; Segment permissions: Read/Execute
.text:000055E4 _text           segment para public 'CODE' use32
.text:000055E4                 assume cs:_text
.text:000055E4                 ;org 55E4h
.text:000055E4 ; COMDAT (pick any)
.text:000055E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055E4
.text:000055E4 ; =============== S U B R O U T I N E =======================================
.text:000055E4
.text:000055E4 ; Attributes: bp-based frame
.text:000055E4
.text:000055E4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000055E4                 public ??0CMyUnknownImp@@QAE@XZ
.text:000055E4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+3Bp
.text:000055E4                                         ; COutMemStream::COutMemStream(CMemBlockManagerMt *)+3Bp ...
.text:000055E4
.text:000055E4 var_4           = dword ptr -4
.text:000055E4
.text:000055E4                 push    ebp
.text:000055E5                 mov     ebp, esp
.text:000055E7                 push    ecx
.text:000055E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055EF                 mov     [ebp+var_4], ecx
.text:000055F2                 mov     eax, [ebp+var_4]
.text:000055F5                 mov     dword ptr [eax], 0
.text:000055FB                 mov     eax, [ebp+var_4]
.text:000055FE                 mov     esp, ebp
.text:00005600                 pop     ebp
.text:00005601                 retn
.text:00005601 ??0CMyUnknownImp@@QAE@XZ endp
.text:00005601
.text:00005601 ; ---------------------------------------------------------------------------
.text:00005602                 align 4
.text:00005602 _text           ends
.text:00005602
.text:00005604 ; ===========================================================================
.text:00005604
.text:00005604 ; Segment type: Pure code
.text:00005604 ; Segment permissions: Read/Execute
.text:00005604 _text           segment para public 'CODE' use32
.text:00005604                 assume cs:_text
.text:00005604                 ;org 5604h
.text:00005604 ; COMDAT (pick any)
.text:00005604                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005604
.text:00005604 ; =============== S U B R O U T I N E =======================================
.text:00005604
.text:00005604 ; Attributes: bp-based frame
.text:00005604
.text:00005604 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00005604                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00005604 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00005604                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+70p
.text:00005604                                         ; CMemBlockManagerMt::CMemBlockManagerMt(uint)+46p ...
.text:00005604
.text:00005604 var_4           = dword ptr -4
.text:00005604
.text:00005604                 push    ebp
.text:00005605                 mov     ebp, esp
.text:00005607                 push    ecx
.text:00005608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000560F                 mov     [ebp+var_4], ecx
.text:00005612                 mov     eax, [ebp+var_4]
.text:00005615                 push    eax
.text:00005616                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:0000561B                 mov     eax, [ebp+var_4]
.text:0000561E                 add     esp, 4
.text:00005621                 cmp     ebp, esp
.text:00005623                 call    __RTC_CheckEsp
.text:00005628                 mov     esp, ebp
.text:0000562A                 pop     ebp
.text:0000562B                 retn
.text:0000562B ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:0000562B
.text:0000562B _text           ends
.text:0000562B
.text:0000562C ; ===========================================================================
.text:0000562C
.text:0000562C ; Segment type: Pure code
.text:0000562C ; Segment permissions: Read/Execute
.text:0000562C _text           segment para public 'CODE' use32
.text:0000562C                 assume cs:_text
.text:0000562C                 ;org 562Ch
.text:0000562C ; COMDAT (pick any)
.text:0000562C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000562C
.text:0000562C ; =============== S U B R O U T I N E =======================================
.text:0000562C
.text:0000562C ; Attributes: bp-based frame
.text:0000562C
.text:0000562C ; __int32 __stdcall NArchive::NZip::CMtProgressMixer2::QueryInterface(NArchive::NZip::CMtProgressMixer2 *this, const struct _GUID *Buf1, void **)
.text:0000562C                 public ?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:0000562C ?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000562C                                         ; DATA XREF: .rdata:const NArchive::NZip::CMtProgressMixer2::`vftable'o
.text:0000562C
.text:0000562C this            = dword ptr  8
.text:0000562C Buf1            = dword ptr  0Ch
.text:0000562C arg_8           = dword ptr  10h
.text:0000562C
.text:0000562C                 push    ebp
.text:0000562D                 mov     ebp, esp
.text:0000562F                 mov     eax, [ebp+arg_8]
.text:00005632                 mov     dword ptr [eax], 0
.text:00005638                 push    offset _IID_IUnknown ; Buf2
.text:0000563D                 mov     ecx, [ebp+Buf1]
.text:00005640                 push    ecx             ; Buf1
.text:00005641                 call    ___@8           ; __(x,x)
.text:00005646                 test    eax, eax
.text:00005648                 jz      short loc_5654
.text:0000564A                 mov     edx, [ebp+arg_8]
.text:0000564D                 mov     eax, [ebp+this]
.text:00005650                 mov     [edx], eax
.text:00005652                 jmp     short loc_565B
.text:00005654 ; ---------------------------------------------------------------------------
.text:00005654
.text:00005654 loc_5654:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)+1Cj
.text:00005654                 mov     eax, 80004002h
.text:00005659                 jmp     short loc_566C
.text:0000565B ; ---------------------------------------------------------------------------
.text:0000565B
.text:0000565B loc_565B:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)+26j
.text:0000565B                 mov     ecx, [ebp+this]
.text:0000565E                 mov     edx, [ecx+4]
.text:00005661                 add     edx, 1
.text:00005664                 mov     eax, [ebp+this]
.text:00005667                 mov     [eax+4], edx
.text:0000566A                 xor     eax, eax
.text:0000566C
.text:0000566C loc_566C:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000566C                 cmp     ebp, esp
.text:0000566E                 call    __RTC_CheckEsp
.text:00005673                 pop     ebp
.text:00005674                 retn    0Ch
.text:00005674 ?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005674
.text:00005674 ; ---------------------------------------------------------------------------
.text:00005677                 align 4
.text:00005677 _text           ends
.text:00005677
.text:00005678 ; ===========================================================================
.text:00005678
.text:00005678 ; Segment type: Pure code
.text:00005678 ; Segment permissions: Read/Execute
.text:00005678 _text           segment para public 'CODE' use32
.text:00005678                 assume cs:_text
.text:00005678                 ;org 5678h
.text:00005678 ; COMDAT (pick any)
.text:00005678                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005678
.text:00005678 ; =============== S U B R O U T I N E =======================================
.text:00005678
.text:00005678 ; Attributes: bp-based frame
.text:00005678
.text:00005678 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00005678                 public ___@8
.text:00005678 ___@8           proc near               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)+15p
.text:00005678                                         ; NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)+15p ...
.text:00005678
.text:00005678 Buf1            = dword ptr  8
.text:00005678 Buf2            = dword ptr  0Ch
.text:00005678
.text:00005678                 push    ebp
.text:00005679                 mov     ebp, esp
.text:0000567B                 mov     eax, [ebp+Buf2]
.text:0000567E                 push    eax             ; Buf2
.text:0000567F                 mov     ecx, [ebp+Buf1]
.text:00005682                 push    ecx             ; Buf1
.text:00005683                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00005688                 cmp     ebp, esp
.text:0000568A                 call    __RTC_CheckEsp
.text:0000568F                 pop     ebp
.text:00005690                 retn    8
.text:00005690 ___@8           endp
.text:00005690
.text:00005690 ; ---------------------------------------------------------------------------
.text:00005693                 align 4
.text:00005693 _text           ends
.text:00005693
.text:00005694 ; ===========================================================================
.text:00005694
.text:00005694 ; Segment type: Pure code
.text:00005694 ; Segment permissions: Read/Execute
.text:00005694 _text           segment para public 'CODE' use32
.text:00005694                 assume cs:_text
.text:00005694                 ;org 5694h
.text:00005694 ; COMDAT (pick any)
.text:00005694                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005694
.text:00005694 ; =============== S U B R O U T I N E =======================================
.text:00005694
.text:00005694 ; Attributes: bp-based frame
.text:00005694
.text:00005694 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00005694                 public _IsEqualGUID@8
.text:00005694 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00005694
.text:00005694 Buf1            = dword ptr  8
.text:00005694 Buf2            = dword ptr  0Ch
.text:00005694
.text:00005694                 push    ebp
.text:00005695                 mov     ebp, esp
.text:00005697                 push    10h             ; Size
.text:00005699                 mov     eax, [ebp+Buf2]
.text:0000569C                 push    eax             ; Buf2
.text:0000569D                 mov     ecx, [ebp+Buf1]
.text:000056A0                 push    ecx             ; Buf1
.text:000056A1                 call    _memcmp
.text:000056A6                 add     esp, 0Ch
.text:000056A9                 neg     eax
.text:000056AB                 sbb     eax, eax
.text:000056AD                 add     eax, 1
.text:000056B0                 cmp     ebp, esp
.text:000056B2                 call    __RTC_CheckEsp
.text:000056B7                 pop     ebp
.text:000056B8                 retn    8
.text:000056B8 _IsEqualGUID@8  endp
.text:000056B8
.text:000056B8 ; ---------------------------------------------------------------------------
.text:000056BB                 align 4
.text:000056BB _text           ends
.text:000056BB
.text:000056BC ; ===========================================================================
.text:000056BC
.text:000056BC ; Segment type: Pure code
.text:000056BC ; Segment permissions: Read/Execute
.text:000056BC _text           segment para public 'CODE' use32
.text:000056BC                 assume cs:_text
.text:000056BC                 ;org 56BCh
.text:000056BC ; COMDAT (pick any)
.text:000056BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056BC
.text:000056BC ; =============== S U B R O U T I N E =======================================
.text:000056BC
.text:000056BC ; Attributes: bp-based frame
.text:000056BC
.text:000056BC ; unsigned __int32 __stdcall NArchive::NZip::CMtProgressMixer2::AddRef(NArchive::NZip::CMtProgressMixer2 *this)
.text:000056BC                 public ?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
.text:000056BC ?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ proc near
.text:000056BC                                         ; DATA XREF: .rdata:0000540Co
.text:000056BC
.text:000056BC var_4           = dword ptr -4
.text:000056BC this            = dword ptr  8
.text:000056BC
.text:000056BC                 push    ebp
.text:000056BD                 mov     ebp, esp
.text:000056BF                 push    ecx
.text:000056C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056C7                 mov     eax, [ebp+this]
.text:000056CA                 mov     ecx, [eax+4]
.text:000056CD                 add     ecx, 1
.text:000056D0                 mov     [ebp+var_4], ecx
.text:000056D3                 mov     edx, [ebp+this]
.text:000056D6                 mov     eax, [ebp+var_4]
.text:000056D9                 mov     [edx+4], eax
.text:000056DC                 mov     eax, [ebp+var_4]
.text:000056DF                 mov     esp, ebp
.text:000056E1                 pop     ebp
.text:000056E2                 retn    4
.text:000056E2 ?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ endp
.text:000056E2
.text:000056E2 ; ---------------------------------------------------------------------------
.text:000056E5                 align 4
.text:000056E5 _text           ends
.text:000056E5
.text:000056E8 ; ===========================================================================
.text:000056E8
.text:000056E8 ; Segment type: Pure code
.text:000056E8 ; Segment permissions: Read/Execute
.text:000056E8 _text           segment para public 'CODE' use32
.text:000056E8                 assume cs:_text
.text:000056E8                 ;org 56E8h
.text:000056E8 ; COMDAT (pick any)
.text:000056E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056E8
.text:000056E8 ; =============== S U B R O U T I N E =======================================
.text:000056E8
.text:000056E8 ; Attributes: bp-based frame
.text:000056E8
.text:000056E8 ; unsigned __int32 __stdcall NArchive::NZip::CMtProgressMixer2::Release(NArchive::NZip::CMtProgressMixer2 *this)
.text:000056E8                 public ?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
.text:000056E8 ?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ proc near
.text:000056E8                                         ; DATA XREF: .rdata:00005410o
.text:000056E8
.text:000056E8 var_10          = dword ptr -10h
.text:000056E8 var_C           = dword ptr -0Ch
.text:000056E8 var_8           = dword ptr -8
.text:000056E8 var_4           = dword ptr -4
.text:000056E8 this            = dword ptr  8
.text:000056E8
.text:000056E8                 push    ebp
.text:000056E9                 mov     ebp, esp
.text:000056EB                 sub     esp, 10h
.text:000056EE                 mov     eax, 0CCCCCCCCh
.text:000056F3                 mov     [ebp+var_10], eax
.text:000056F6                 mov     [ebp+var_C], eax
.text:000056F9                 mov     [ebp+var_8], eax
.text:000056FC                 mov     [ebp+var_4], eax
.text:000056FF                 mov     eax, [ebp+this]
.text:00005702                 mov     ecx, [eax+4]
.text:00005705                 sub     ecx, 1
.text:00005708                 mov     [ebp+var_C], ecx
.text:0000570B                 mov     edx, [ebp+this]
.text:0000570E                 mov     eax, [ebp+var_C]
.text:00005711                 mov     [edx+4], eax
.text:00005714                 cmp     [ebp+var_C], 0
.text:00005718                 jz      short loc_5722
.text:0000571A                 mov     ecx, [ebp+this]
.text:0000571D                 mov     eax, [ecx+4]
.text:00005720                 jmp     short loc_574C
.text:00005722 ; ---------------------------------------------------------------------------
.text:00005722
.text:00005722 loc_5722:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Release(void)+30j
.text:00005722                 mov     edx, [ebp+this]
.text:00005725                 mov     [ebp+var_8], edx
.text:00005728                 mov     eax, [ebp+var_8]
.text:0000572B                 mov     [ebp+var_4], eax
.text:0000572E                 cmp     [ebp+var_4], 0
.text:00005732                 jz      short loc_5743
.text:00005734                 push    1
.text:00005736                 mov     ecx, [ebp+var_4]
.text:00005739                 call    ??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'(uint)
.text:0000573E                 mov     [ebp+var_10], eax
.text:00005741                 jmp     short loc_574A
.text:00005743 ; ---------------------------------------------------------------------------
.text:00005743
.text:00005743 loc_5743:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Release(void)+4Aj
.text:00005743                 mov     [ebp+var_10], 0
.text:0000574A
.text:0000574A loc_574A:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Release(void)+59j
.text:0000574A                 xor     eax, eax
.text:0000574C
.text:0000574C loc_574C:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Release(void)+38j
.text:0000574C                 add     esp, 10h
.text:0000574F                 cmp     ebp, esp
.text:00005751                 call    __RTC_CheckEsp
.text:00005756                 mov     esp, ebp
.text:00005758                 pop     ebp
.text:00005759                 retn    4
.text:00005759 ?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ endp
.text:00005759
.text:00005759 _text           ends
.text:00005759
.text:0000575C ; ===========================================================================
.text:0000575C
.text:0000575C ; Segment type: Pure code
.text:0000575C ; Segment permissions: Read/Execute
.text:0000575C _text           segment para public 'CODE' use32
.text:0000575C                 assume cs:_text
.text:0000575C                 ;org 575Ch
.text:0000575C ; COMDAT (pick any)
.text:0000575C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000575C
.text:0000575C ; =============== S U B R O U T I N E =======================================
.text:0000575C
.text:0000575C ; Attributes: bp-based frame
.text:0000575C
.text:0000575C ; public: void * __thiscall NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'(unsigned int)
.text:0000575C                 public ??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z
.text:0000575C ??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000575C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Release(void)+51p
.text:0000575C
.text:0000575C var_4           = dword ptr -4
.text:0000575C arg_0           = dword ptr  8
.text:0000575C
.text:0000575C                 push    ebp
.text:0000575D                 mov     ebp, esp
.text:0000575F                 push    ecx
.text:00005760                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005767                 mov     [ebp+var_4], ecx
.text:0000576A                 mov     ecx, [ebp+var_4] ; this
.text:0000576D                 call    ??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2(void)
.text:00005772                 mov     eax, [ebp+arg_0]
.text:00005775                 and     eax, 1
.text:00005778                 jz      short loc_5786
.text:0000577A                 mov     ecx, [ebp+var_4]
.text:0000577D                 push    ecx             ; void *
.text:0000577E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005783                 add     esp, 4
.text:00005786
.text:00005786 loc_5786:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'(uint)+1Cj
.text:00005786                 mov     eax, [ebp+var_4]
.text:00005789                 add     esp, 4
.text:0000578C                 cmp     ebp, esp
.text:0000578E                 call    __RTC_CheckEsp
.text:00005793                 mov     esp, ebp
.text:00005795                 pop     ebp
.text:00005796                 retn    4
.text:00005796 ??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z endp
.text:00005796
.text:00005796 ; ---------------------------------------------------------------------------
.text:00005799                 align 4
.text:00005799 _text           ends
.text:00005799
.text:0000579C ; ===========================================================================
.text:0000579C
.text:0000579C ; Segment type: Pure code
.text:0000579C ; Segment permissions: Read/Execute
.text:0000579C _text           segment para public 'CODE' use32
.text:0000579C                 assume cs:_text
.text:0000579C                 ;org 579Ch
.text:0000579C ; COMDAT (pick any)
.text:0000579C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000579C
.text:0000579C ; =============== S U B R O U T I N E =======================================
.text:0000579C
.text:0000579C ; Attributes: bp-based frame
.text:0000579C
.text:0000579C ; _DWORD __thiscall NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2(NArchive::NZip::CMtProgressMixer2 *__hidden this)
.text:0000579C                 public ??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text:0000579C ??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ proc near
.text:0000579C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'(uint)+11p
.text:0000579C
.text:0000579C var_10          = dword ptr -10h
.text:0000579C var_C           = dword ptr -0Ch
.text:0000579C var_4           = dword ptr -4
.text:0000579C
.text:0000579C                 push    ebp
.text:0000579D                 mov     ebp, esp
.text:0000579F                 push    0FFFFFFFFh
.text:000057A1                 push    offset __ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text:000057A6                 mov     eax, large fs:0
.text:000057AC                 push    eax
.text:000057AD                 push    ecx
.text:000057AE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000057B5                 mov     eax, dword ptr ds:___security_cookie
.text:000057BA                 xor     eax, ebp
.text:000057BC                 push    eax
.text:000057BD                 lea     eax, [ebp+var_C]
.text:000057C0                 mov     large fs:0, eax
.text:000057C6                 mov     [ebp+var_10], ecx
.text:000057C9                 mov     [ebp+var_4], 1
.text:000057D0                 mov     ecx, [ebp+var_10]
.text:000057D3                 add     ecx, 3Ch ; '<'  ; this
.text:000057D6                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:000057DB                 mov     byte ptr [ebp+var_4], 0
.text:000057DF                 mov     ecx, [ebp+var_10]
.text:000057E2                 add     ecx, 34h ; '4'
.text:000057E5                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000057EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000057F1                 mov     ecx, [ebp+var_10]
.text:000057F4                 add     ecx, 30h ; '0'
.text:000057F7                 call    ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text:000057FC                 mov     ecx, [ebp+var_C]
.text:000057FF                 mov     large fs:0, ecx
.text:00005806                 pop     ecx
.text:00005807                 add     esp, 10h
.text:0000580A                 cmp     ebp, esp
.text:0000580C                 call    __RTC_CheckEsp
.text:00005811                 mov     esp, ebp
.text:00005813                 pop     ebp
.text:00005814                 retn
.text:00005814 ??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ endp
.text:00005814
.text:00005814 ; ---------------------------------------------------------------------------
.text:00005815                 align 4
.text:00005815 _text           ends
.text:00005815
.text$x:00005818 ; ===========================================================================
.text$x:00005818
.text$x:00005818 ; Segment type: Pure code
.text$x:00005818 ; Segment permissions: Read/Execute
.text$x:00005818 _text$x         segment para public 'CODE' use32
.text$x:00005818                 assume cs:_text$x
.text$x:00005818                 ;org 5818h
.text$x:00005818 ; COMDAT (pick associative to section at 579C)
.text$x:00005818                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005818
.text$x:00005818 ; =============== S U B R O U T I N E =======================================
.text$x:00005818
.text$x:00005818
.text$x:00005818 __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00005818                                         ; DATA XREF: .xdata$x:00005850o
.text$x:00005818                 mov     ecx, [ebp-10h]
.text$x:0000581B                 add     ecx, 30h ; '0'
.text$x:0000581E                 jmp     ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text$x:0000581E __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0 endp
.text$x:0000581E
.text$x:00005823
.text$x:00005823 ; =============== S U B R O U T I N E =======================================
.text$x:00005823
.text$x:00005823
.text$x:00005823 __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00005823                                         ; DATA XREF: .xdata$x:00005858o
.text$x:00005823                 mov     ecx, [ebp-10h]
.text$x:00005826                 add     ecx, 34h ; '4'
.text$x:00005829                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00005829 __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00005829
.text$x:0000582E
.text$x:0000582E ; =============== S U B R O U T I N E =======================================
.text$x:0000582E
.text$x:0000582E
.text$x:0000582E __ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ proc near
.text$x:0000582E                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2(void)+5o
.text$x:0000582E
.text$x:0000582E arg_4           = dword ptr  8
.text$x:0000582E
.text$x:0000582E                 mov     edx, [esp+arg_4]
.text$x:00005832                 lea     eax, [edx+0Ch]
.text$x:00005835                 mov     ecx, [edx-8]
.text$x:00005838                 xor     ecx, eax
.text$x:0000583A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000583F                 mov     eax, offset __ehfuncinfo$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.text$x:00005844                 jmp     ___CxxFrameHandler3
.text$x:00005844 __ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ endp
.text$x:00005844
.text$x:00005844 ; ---------------------------------------------------------------------------
.text$x:00005849                 align 4
.text$x:00005849 _text$x         ends
.text$x:00005849
.xdata$x:0000584C ; ===========================================================================
.xdata$x:0000584C
.xdata$x:0000584C ; Segment type: Pure data
.xdata$x:0000584C ; Segment permissions: Read
.xdata$x:0000584C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000584C                 assume cs:_xdata$x
.xdata$x:0000584C                 ;org 584Ch
.xdata$x:0000584C ; COMDAT (pick associative to section at 579C)
.xdata$x:0000584C __unwindtable$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000584C                                         ; DATA XREF: .xdata$x:00005864o
.xdata$x:0000584D                 db 0FFh
.xdata$x:0000584E                 db 0FFh
.xdata$x:0000584F                 db 0FFh
.xdata$x:00005850                 dd offset __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0
.xdata$x:00005854                 align 8
.xdata$x:00005858                 dd offset __unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1
.xdata$x:0000585C __ehfuncinfo$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000585C                                         ; DATA XREF: __ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ+11o
.xdata$x:0000585D                 db    5
.xdata$x:0000585E                 db  93h ; ô
.xdata$x:0000585F                 db  19h
.xdata$x:00005860                 db    2
.xdata$x:00005861                 db    0
.xdata$x:00005862                 db    0
.xdata$x:00005863                 db    0
.xdata$x:00005864                 dd offset __unwindtable$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
.xdata$x:00005868                 db    0
.xdata$x:00005869                 db    0
.xdata$x:0000586A                 db    0
.xdata$x:0000586B                 db    0
.xdata$x:0000586C                 db    0
.xdata$x:0000586D                 db    0
.xdata$x:0000586E                 db    0
.xdata$x:0000586F                 db    0
.xdata$x:00005870                 db    0
.xdata$x:00005871                 db    0
.xdata$x:00005872                 db    0
.xdata$x:00005873                 db    0
.xdata$x:00005874                 db    0
.xdata$x:00005875                 db    0
.xdata$x:00005876                 db    0
.xdata$x:00005877                 db    0
.xdata$x:00005878                 db    0
.xdata$x:00005879                 db    0
.xdata$x:0000587A                 db    0
.xdata$x:0000587B                 db    0
.xdata$x:0000587C                 db    1
.xdata$x:0000587D                 db    0
.xdata$x:0000587E                 db    0
.xdata$x:0000587F                 db    0
.xdata$x:0000587F _xdata$x        ends
.xdata$x:0000587F
.text:00005880 ; ===========================================================================
.text:00005880
.text:00005880 ; Segment type: Pure code
.text:00005880 ; Segment permissions: Read/Execute
.text:00005880 _text           segment para public 'CODE' use32
.text:00005880                 assume cs:_text
.text:00005880                 ;org 5880h
.text:00005880 ; COMDAT (pick any)
.text:00005880                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005880
.text:00005880 ; =============== S U B R O U T I N E =======================================
.text:00005880
.text:00005880 ; Attributes: bp-based frame
.text:00005880
.text:00005880 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00005880                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00005880 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00005880                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2(void)+3Ap
.text:00005880                                         ; __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1+6j ...
.text:00005880
.text:00005880 lpCriticalSection= dword ptr -4
.text:00005880
.text:00005880                 push    ebp
.text:00005881                 mov     ebp, esp
.text:00005883                 push    ecx
.text:00005884                 push    esi
.text:00005885                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000588C                 mov     [ebp+lpCriticalSection], ecx
.text:0000588F                 mov     esi, esp
.text:00005891                 mov     eax, [ebp+lpCriticalSection]
.text:00005894                 push    eax             ; lpCriticalSection
.text:00005895                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0000589B                 cmp     esi, esp
.text:0000589D                 call    __RTC_CheckEsp
.text:000058A2                 pop     esi
.text:000058A3                 add     esp, 4
.text:000058A6                 cmp     ebp, esp
.text:000058A8                 call    __RTC_CheckEsp
.text:000058AD                 mov     esp, ebp
.text:000058AF                 pop     ebp
.text:000058B0                 retn
.text:000058B0 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:000058B0
.text:000058B0 ; ---------------------------------------------------------------------------
.text:000058B1                 align 4
.text:000058B1 _text           ends
.text:000058B1
.text:000058B4 ; ===========================================================================
.text:000058B4
.text:000058B4 ; Segment type: Pure code
.text:000058B4 ; Segment permissions: Read/Execute
.text:000058B4 _text           segment para public 'CODE' use32
.text:000058B4                 assume cs:_text
.text:000058B4                 ;org 58B4h
.text:000058B4 ; COMDAT (pick any)
.text:000058B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058B4
.text:000058B4 ; =============== S U B R O U T I N E =======================================
.text:000058B4
.text:000058B4 ; Attributes: bp-based frame
.text:000058B4
.text:000058B4 ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:000058B4                 public ??0ICompressProgressInfo@@QAE@XZ
.text:000058B4 ??0ICompressProgressInfo@@QAE@XZ proc near
.text:000058B4                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+30p
.text:000058B4                                         ; NArchive::NZip::CMtProgressMixer::CMtProgressMixer(void)+11p ...
.text:000058B4
.text:000058B4 var_4           = dword ptr -4
.text:000058B4
.text:000058B4                 push    ebp
.text:000058B5                 mov     ebp, esp
.text:000058B7                 push    ecx
.text:000058B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058BF                 mov     [ebp+var_4], ecx
.text:000058C2                 mov     ecx, [ebp+var_4]
.text:000058C5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000058CA                 mov     eax, [ebp+var_4]
.text:000058CD                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:000058D3                 mov     eax, [ebp+var_4]
.text:000058D6                 add     esp, 4
.text:000058D9                 cmp     ebp, esp
.text:000058DB                 call    __RTC_CheckEsp
.text:000058E0                 mov     esp, ebp
.text:000058E2                 pop     ebp
.text:000058E3                 retn
.text:000058E3 ??0ICompressProgressInfo@@QAE@XZ endp
.text:000058E3
.text:000058E3 _text           ends
.text:000058E3
.rdata:000058E4 ; ===========================================================================
.rdata:000058E4
.rdata:000058E4 ; Segment type: Pure data
.rdata:000058E4 ; Segment permissions: Read
.rdata:000058E4 _rdata          segment dword public 'DATA' use32
.rdata:000058E4                 assume cs:_rdata
.rdata:000058E4                 ;org 58E4h
.rdata:000058E4 ; COMDAT (pick largest)
.rdata:000058E4                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:000058E8                 public ??_7ICompressProgressInfo@@6B@
.rdata:000058E8 ; const ICompressProgressInfo::`vftable'
.rdata:000058E8 ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:000058E8                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:000058EC                 dd offset __purecall
.rdata:000058F0                 dd offset __purecall
.rdata:000058F4                 dd offset __purecall
.rdata:000058F4 _rdata          ends
.rdata:000058F4
.rdata$r:000058F8 ; ===========================================================================
.rdata$r:000058F8
.rdata$r:000058F8 ; Segment type: Pure data
.rdata$r:000058F8 ; Segment permissions: Read
.rdata$r:000058F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058F8                 assume cs:_rdata$r
.rdata$r:000058F8                 ;org 58F8h
.rdata$r:000058F8 ; COMDAT (pick any)
.rdata$r:000058F8                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:000058F8 ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:000058F8 ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:000058E4o
.rdata$r:000058F9                 db    0
.rdata$r:000058FA                 db    0
.rdata$r:000058FB                 db    0
.rdata$r:000058FC                 db    0
.rdata$r:000058FD                 db    0
.rdata$r:000058FE                 db    0
.rdata$r:000058FF                 db    0
.rdata$r:00005900                 db    0
.rdata$r:00005901                 db    0
.rdata$r:00005902                 db    0
.rdata$r:00005903                 db    0
.rdata$r:00005904                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00005908                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005908 _rdata$r        ends
.rdata$r:00005908
.text:0000590C ; ===========================================================================
.text:0000590C
.text:0000590C ; Segment type: Pure code
.text:0000590C ; Segment permissions: Read/Execute
.text:0000590C _text           segment para public 'CODE' use32
.text:0000590C                 assume cs:_text
.text:0000590C                 ;org 590Ch
.text:0000590C ; COMDAT (pick any)
.text:0000590C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000590C
.text:0000590C ; =============== S U B R O U T I N E =======================================
.text:0000590C
.text:0000590C ; Attributes: bp-based frame
.text:0000590C
.text:0000590C ; public: __thiscall IUnknown::IUnknown(void)
.text:0000590C                 public ??0IUnknown@@QAE@XZ
.text:0000590C ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressProgressInfo::ICompressProgressInfo(void)+11p
.text:0000590C                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p
.text:0000590C
.text:0000590C var_4           = dword ptr -4
.text:0000590C
.text:0000590C                 push    ebp
.text:0000590D                 mov     ebp, esp
.text:0000590F                 push    ecx
.text:00005910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005917                 mov     [ebp+var_4], ecx
.text:0000591A                 mov     eax, [ebp+var_4]
.text:0000591D                 mov     esp, ebp
.text:0000591F                 pop     ebp
.text:00005920                 retn
.text:00005920 ??0IUnknown@@QAE@XZ endp
.text:00005920
.text:00005920 ; ---------------------------------------------------------------------------
.text:00005921                 align 4
.text:00005921 _text           ends
.text:00005921
.rdata:00005924 ; ===========================================================================
.rdata:00005924
.rdata:00005924 ; Segment type: Pure data
.rdata:00005924 ; Segment permissions: Read
.rdata:00005924 _rdata          segment dword public 'DATA' use32
.rdata:00005924                 assume cs:_rdata
.rdata:00005924                 ;org 5924h
.rdata:00005924 ; COMDAT (pick largest)
.rdata:00005924                 dd offset ??_R4CCacheOutStream@NZip@NArchive@@6B@ ; const NArchive::NZip::CCacheOutStream::`RTTI Complete Object Locator'
.rdata:00005928                 public ??_7CCacheOutStream@NZip@NArchive@@6B@
.rdata:00005928 ; const NArchive::NZip::CCacheOutStream::`vftable'
.rdata:00005928 ??_7CCacheOutStream@NZip@NArchive@@6B@ dd offset ?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005928                                         ; DATA XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+46o
.rdata:00005928                                         ; NArchive::NZip::CCacheOutStream::CCacheOutStream(void)+24o
.rdata:00005928                                         ; NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)
.rdata:0000592C                 dd offset ?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CCacheOutStream::AddRef(void)
.rdata:00005930                 dd offset ?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CCacheOutStream::Release(void)
.rdata:00005934                 dd offset ?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)
.rdata:00005938                 dd offset ?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z ; NArchive::NZip::CCacheOutStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:0000593C                 dd offset ?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z ; NArchive::NZip::CCacheOutStream::SetSize(unsigned __int64)
.rdata:0000593C _rdata          ends
.rdata:0000593C
.rdata$r:00005940 ; ===========================================================================
.rdata$r:00005940
.rdata$r:00005940 ; Segment type: Pure data
.rdata$r:00005940 ; Segment permissions: Read
.rdata$r:00005940 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005940                 assume cs:_rdata$r
.rdata$r:00005940                 ;org 5940h
.rdata$r:00005940 ; COMDAT (pick any)
.rdata$r:00005940                 public ??_R4CCacheOutStream@NZip@NArchive@@6B@
.rdata$r:00005940 ; const NArchive::NZip::CCacheOutStream::`RTTI Complete Object Locator'
.rdata$r:00005940 ??_R4CCacheOutStream@NZip@NArchive@@6B@ db    0
.rdata$r:00005940                                         ; DATA XREF: .rdata:00005924o
.rdata$r:00005941                 db    0
.rdata$r:00005942                 db    0
.rdata$r:00005943                 db    0
.rdata$r:00005944                 db    0
.rdata$r:00005945                 db    0
.rdata$r:00005946                 db    0
.rdata$r:00005947                 db    0
.rdata$r:00005948                 db    0
.rdata$r:00005949                 db    0
.rdata$r:0000594A                 db    0
.rdata$r:0000594B                 db    0
.rdata$r:0000594C                 dd offset ??_R0?AVCCacheOutStream@NZip@NArchive@@@8 ; NArchive::NZip::CCacheOutStream `RTTI Type Descriptor'
.rdata$r:00005950                 dd offset ??_R3CCacheOutStream@NZip@NArchive@@8 ; NArchive::NZip::CCacheOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005950 _rdata$r        ends
.rdata$r:00005950
.data:00005954 ; ===========================================================================
.data:00005954
.data:00005954 ; Segment type: Pure data
.data:00005954 ; Segment permissions: Read/Write
.data:00005954 _data           segment dword public 'DATA' use32
.data:00005954                 assume cs:_data
.data:00005954                 ;org 5954h
.data:00005954 ; COMDAT (pick any)
.data:00005954                 public ??_R0?AVCCacheOutStream@NZip@NArchive@@@8
.data:00005954 ; class NArchive::NZip::CCacheOutStream `RTTI Type Descriptor'
.data:00005954 ??_R0?AVCCacheOutStream@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005954                                         ; DATA XREF: .rdata$r:0000594Co
.data:00005954                                         ; .rdata$r:NArchive::NZip::CCacheOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005954                                         ; const type_info::`vftable'
.data:00005958                 db    0
.data:00005959                 db    0
.data:0000595A                 db    0
.data:0000595B                 db    0
.data:0000595C                 db  2Eh ; .
.data:0000595D                 db  3Fh ; ?
.data:0000595E                 db  41h ; A
.data:0000595F                 db  56h ; V
.data:00005960                 db  43h ; C
.data:00005961                 db  43h ; C
.data:00005962                 db  61h ; a
.data:00005963                 db  63h ; c
.data:00005964                 db  68h ; h
.data:00005965                 db  65h ; e
.data:00005966                 db  4Fh ; O
.data:00005967                 db  75h ; u
.data:00005968                 db  74h ; t
.data:00005969                 db  53h ; S
.data:0000596A                 db  74h ; t
.data:0000596B                 db  72h ; r
.data:0000596C                 db  65h ; e
.data:0000596D                 db  61h ; a
.data:0000596E                 db  6Dh ; m
.data:0000596F                 db  40h ; @
.data:00005970                 db  4Eh ; N
.data:00005971                 db  5Ah ; Z
.data:00005972                 db  69h ; i
.data:00005973                 db  70h ; p
.data:00005974                 db  40h ; @
.data:00005975                 db  4Eh ; N
.data:00005976                 db  41h ; A
.data:00005977                 db  72h ; r
.data:00005978                 db  63h ; c
.data:00005979                 db  68h ; h
.data:0000597A                 db  69h ; i
.data:0000597B                 db  76h ; v
.data:0000597C                 db  65h ; e
.data:0000597D                 db  40h ; @
.data:0000597E                 db  40h ; @
.data:0000597F                 db    0
.data:0000597F _data           ends
.data:0000597F
.rdata$r:00005980 ; ===========================================================================
.rdata$r:00005980
.rdata$r:00005980 ; Segment type: Pure data
.rdata$r:00005980 ; Segment permissions: Read
.rdata$r:00005980 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005980                 assume cs:_rdata$r
.rdata$r:00005980                 ;org 5980h
.rdata$r:00005980 ; COMDAT (pick any)
.rdata$r:00005980                 public ??_R3CCacheOutStream@NZip@NArchive@@8
.rdata$r:00005980 ; NArchive::NZip::CCacheOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005980 ??_R3CCacheOutStream@NZip@NArchive@@8 db    0
.rdata$r:00005980                                         ; DATA XREF: .rdata$r:00005950o
.rdata$r:00005980                                         ; .rdata$r:000059C0o
.rdata$r:00005981                 db    0
.rdata$r:00005982                 db    0
.rdata$r:00005983                 db    0
.rdata$r:00005984                 db    1
.rdata$r:00005985                 db    0
.rdata$r:00005986                 db    0
.rdata$r:00005987                 db    0
.rdata$r:00005988                 db    5
.rdata$r:00005989                 db    0
.rdata$r:0000598A                 db    0
.rdata$r:0000598B                 db    0
.rdata$r:0000598C                 dd offset ??_R2CCacheOutStream@NZip@NArchive@@8 ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Array'
.rdata$r:0000598C _rdata$r        ends
.rdata$r:0000598C
.rdata$r:00005990 ; ===========================================================================
.rdata$r:00005990
.rdata$r:00005990 ; Segment type: Pure data
.rdata$r:00005990 ; Segment permissions: Read
.rdata$r:00005990 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005990                 assume cs:_rdata$r
.rdata$r:00005990                 ;org 5990h
.rdata$r:00005990 ; COMDAT (pick any)
.rdata$r:00005990                 public ??_R2CCacheOutStream@NZip@NArchive@@8
.rdata$r:00005990 ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Array'
.rdata$r:00005990 ??_R2CCacheOutStream@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8
.rdata$r:00005990                                         ; DATA XREF: .rdata$r:0000598Co
.rdata$r:00005990                                         ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005994                 dd offset ??_R1A@?0A@EA@IOutStream@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005998                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000599C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000059A0                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000059A4                 db    0
.rdata$r:000059A5                 align 4
.rdata$r:000059A5 _rdata$r        ends
.rdata$r:000059A5
.rdata$r:000059A8 ; ===========================================================================
.rdata$r:000059A8
.rdata$r:000059A8 ; Segment type: Pure data
.rdata$r:000059A8 ; Segment permissions: Read
.rdata$r:000059A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059A8                 assume cs:_rdata$r
.rdata$r:000059A8                 ;org 59A8h
.rdata$r:000059A8 ; COMDAT (pick any)
.rdata$r:000059A8                 public ??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8
.rdata$r:000059A8 ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000059A8 ??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8 dd offset ??_R0?AVCCacheOutStream@NZip@NArchive@@@8
.rdata$r:000059A8                                         ; DATA XREF: .rdata$r:NArchive::NZip::CCacheOutStream::`RTTI Base Class Array'o
.rdata$r:000059A8                                         ; NArchive::NZip::CCacheOutStream `RTTI Type Descriptor'
.rdata$r:000059AC                 db    4
.rdata$r:000059AD                 db    0
.rdata$r:000059AE                 db    0
.rdata$r:000059AF                 db    0
.rdata$r:000059B0                 db    0
.rdata$r:000059B1                 db    0
.rdata$r:000059B2                 db    0
.rdata$r:000059B3                 db    0
.rdata$r:000059B4                 db 0FFh
.rdata$r:000059B5                 db 0FFh
.rdata$r:000059B6                 db 0FFh
.rdata$r:000059B7                 db 0FFh
.rdata$r:000059B8                 db    0
.rdata$r:000059B9                 db    0
.rdata$r:000059BA                 db    0
.rdata$r:000059BB                 db    0
.rdata$r:000059BC                 db  40h ; @
.rdata$r:000059BD                 db    0
.rdata$r:000059BE                 db    0
.rdata$r:000059BF                 db    0
.rdata$r:000059C0                 dd offset ??_R3CCacheOutStream@NZip@NArchive@@8 ; NArchive::NZip::CCacheOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000059C0 _rdata$r        ends
.rdata$r:000059C0
.rdata$r:000059C4 ; ===========================================================================
.rdata$r:000059C4
.rdata$r:000059C4 ; Segment type: Pure data
.rdata$r:000059C4 ; Segment permissions: Read
.rdata$r:000059C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059C4                 assume cs:_rdata$r
.rdata$r:000059C4                 ;org 59C4h
.rdata$r:000059C4 ; COMDAT (pick any)
.rdata$r:000059C4                 public ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:000059C4 ; IOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000059C4 ??_R1A@?0A@EA@IOutStream@@8 dd offset ??_R0?AUIOutStream@@@8
.rdata$r:000059C4                                         ; DATA XREF: .rdata$r:00005994o
.rdata$r:000059C4                                         ; .rdata$r:IOutStream::`RTTI Base Class Array'o ...
.rdata$r:000059C4                                         ; IOutStream `RTTI Type Descriptor'
.rdata$r:000059C8                 db    2
.rdata$r:000059C9                 db    0
.rdata$r:000059CA                 db    0
.rdata$r:000059CB                 db    0
.rdata$r:000059CC                 db    0
.rdata$r:000059CD                 db    0
.rdata$r:000059CE                 db    0
.rdata$r:000059CF                 db    0
.rdata$r:000059D0                 db 0FFh
.rdata$r:000059D1                 db 0FFh
.rdata$r:000059D2                 db 0FFh
.rdata$r:000059D3                 db 0FFh
.rdata$r:000059D4                 db    0
.rdata$r:000059D5                 db    0
.rdata$r:000059D6                 db    0
.rdata$r:000059D7                 db    0
.rdata$r:000059D8                 db  40h ; @
.rdata$r:000059D9                 db    0
.rdata$r:000059DA                 db    0
.rdata$r:000059DB                 db    0
.rdata$r:000059DC                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000059DC _rdata$r        ends
.rdata$r:000059DC
.data:000059E0 ; ===========================================================================
.data:000059E0
.data:000059E0 ; Segment type: Pure data
.data:000059E0 ; Segment permissions: Read/Write
.data:000059E0 _data           segment dword public 'DATA' use32
.data:000059E0                 assume cs:_data
.data:000059E0                 ;org 59E0h
.data:000059E0 ; COMDAT (pick any)
.data:000059E0                 public ??_R0?AUIOutStream@@@8
.data:000059E0 ; struct IOutStream `RTTI Type Descriptor'
.data:000059E0 ??_R0?AUIOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000059E0                                         ; DATA XREF: .rdata$r:IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000059E0                                         ; .rdata$r:00006560o
.data:000059E0                                         ; const type_info::`vftable'
.data:000059E4                 align 8
.data:000059E8 a_?auioutstream db '.?AUIOutStream@@',0
.data:000059F9                 align 4
.data:000059F9 _data           ends
.data:000059F9
.rdata$r:000059FC ; ===========================================================================
.rdata$r:000059FC
.rdata$r:000059FC ; Segment type: Pure data
.rdata$r:000059FC ; Segment permissions: Read
.rdata$r:000059FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059FC                 assume cs:_rdata$r
.rdata$r:000059FC                 ;org 59FCh
.rdata$r:000059FC ; COMDAT (pick any)
.rdata$r:000059FC                 public ??_R3IOutStream@@8
.rdata$r:000059FC ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000059FC ??_R3IOutStream@@8 db    0              ; DATA XREF: .rdata$r:000059DCo
.rdata$r:000059FC                                         ; .rdata$r:00006564o
.rdata$r:000059FD                 db    0
.rdata$r:000059FE                 db    0
.rdata$r:000059FF                 db    0
.rdata$r:00005A00                 db    0
.rdata$r:00005A01                 db    0
.rdata$r:00005A02                 db    0
.rdata$r:00005A03                 db    0
.rdata$r:00005A04                 db    3
.rdata$r:00005A05                 db    0
.rdata$r:00005A06                 db    0
.rdata$r:00005A07                 db    0
.rdata$r:00005A08                 dd offset ??_R2IOutStream@@8 ; IOutStream::`RTTI Base Class Array'
.rdata$r:00005A08 _rdata$r        ends
.rdata$r:00005A08
.rdata$r:00005A0C ; ===========================================================================
.rdata$r:00005A0C
.rdata$r:00005A0C ; Segment type: Pure data
.rdata$r:00005A0C ; Segment permissions: Read
.rdata$r:00005A0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A0C                 assume cs:_rdata$r
.rdata$r:00005A0C                 ;org 5A0Ch
.rdata$r:00005A0C ; COMDAT (pick any)
.rdata$r:00005A0C                 public ??_R2IOutStream@@8
.rdata$r:00005A0C ; IOutStream::`RTTI Base Class Array'
.rdata$r:00005A0C ??_R2IOutStream@@8 dd offset ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:00005A0C                                         ; DATA XREF: .rdata$r:00005A08o
.rdata$r:00005A0C                                         ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A10                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A14                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A18                 db    0
.rdata$r:00005A19                 align 4
.rdata$r:00005A19 _rdata$r        ends
.rdata$r:00005A19
.rdata$r:00005A1C ; ===========================================================================
.rdata$r:00005A1C
.rdata$r:00005A1C ; Segment type: Pure data
.rdata$r:00005A1C ; Segment permissions: Read
.rdata$r:00005A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A1C                 assume cs:_rdata$r
.rdata$r:00005A1C                 ;org 5A1Ch
.rdata$r:00005A1C ; COMDAT (pick any)
.rdata$r:00005A1C                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00005A1C ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005A1C ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00005A1C                                         ; DATA XREF: .rdata$r:00005998o
.rdata$r:00005A1C                                         ; .rdata$r:00005A10o ...
.rdata$r:00005A1C                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00005A20                 db    1
.rdata$r:00005A21                 db    0
.rdata$r:00005A22                 db    0
.rdata$r:00005A23                 db    0
.rdata$r:00005A24                 db    0
.rdata$r:00005A25                 db    0
.rdata$r:00005A26                 db    0
.rdata$r:00005A27                 db    0
.rdata$r:00005A28                 db 0FFh
.rdata$r:00005A29                 db 0FFh
.rdata$r:00005A2A                 db 0FFh
.rdata$r:00005A2B                 db 0FFh
.rdata$r:00005A2C                 db    0
.rdata$r:00005A2D                 db    0
.rdata$r:00005A2E                 db    0
.rdata$r:00005A2F                 db    0
.rdata$r:00005A30                 db  40h ; @
.rdata$r:00005A31                 db    0
.rdata$r:00005A32                 db    0
.rdata$r:00005A33                 db    0
.rdata$r:00005A34                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005A34 _rdata$r        ends
.rdata$r:00005A34
.data:00005A38 ; ===========================================================================
.data:00005A38
.data:00005A38 ; Segment type: Pure data
.data:00005A38 ; Segment permissions: Read/Write
.data:00005A38 _data           segment dword public 'DATA' use32
.data:00005A38                 assume cs:_data
.data:00005A38                 ;org 5A38h
.data:00005A38 ; COMDAT (pick any)
.data:00005A38                 public ??_R0?AUISequentialOutStream@@@8
.data:00005A38 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00005A38 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00005A38                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005A38                                         ; .rdata$r:00006844o
.data:00005A38                                         ; const type_info::`vftable'
.data:00005A3C                 align 10h
.data:00005A40 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:00005A5B                 align 4
.data:00005A5B _data           ends
.data:00005A5B
.rdata$r:00005A5C ; ===========================================================================
.rdata$r:00005A5C
.rdata$r:00005A5C ; Segment type: Pure data
.rdata$r:00005A5C ; Segment permissions: Read
.rdata$r:00005A5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A5C                 assume cs:_rdata$r
.rdata$r:00005A5C                 ;org 5A5Ch
.rdata$r:00005A5C ; COMDAT (pick any)
.rdata$r:00005A5C                 public ??_R3ISequentialOutStream@@8
.rdata$r:00005A5C ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005A5C ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00005A34o
.rdata$r:00005A5C                                         ; .rdata$r:00006848o
.rdata$r:00005A5D                 db    0
.rdata$r:00005A5E                 db    0
.rdata$r:00005A5F                 db    0
.rdata$r:00005A60                 db    0
.rdata$r:00005A61                 db    0
.rdata$r:00005A62                 db    0
.rdata$r:00005A63                 db    0
.rdata$r:00005A64                 db    2
.rdata$r:00005A65                 db    0
.rdata$r:00005A66                 db    0
.rdata$r:00005A67                 db    0
.rdata$r:00005A68                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00005A68 _rdata$r        ends
.rdata$r:00005A68
.rdata$r:00005A6C ; ===========================================================================
.rdata$r:00005A6C
.rdata$r:00005A6C ; Segment type: Pure data
.rdata$r:00005A6C ; Segment permissions: Read
.rdata$r:00005A6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A6C                 assume cs:_rdata$r
.rdata$r:00005A6C                 ;org 5A6Ch
.rdata$r:00005A6C ; COMDAT (pick any)
.rdata$r:00005A6C                 public ??_R2ISequentialOutStream@@8
.rdata$r:00005A6C ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00005A6C ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00005A6C                                         ; DATA XREF: .rdata$r:00005A68o
.rdata$r:00005A6C                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A70                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A74                 db    0
.rdata$r:00005A75                 align 4
.rdata$r:00005A75 _rdata$r        ends
.rdata$r:00005A75
.text:00005A78 ; ===========================================================================
.text:00005A78
.text:00005A78 ; Segment type: Pure code
.text:00005A78 ; Segment permissions: Read/Execute
.text:00005A78 _text           segment para public 'CODE' use32
.text:00005A78                 assume cs:_text
.text:00005A78                 ;org 5A78h
.text:00005A78 ; COMDAT (pick any)
.text:00005A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A78
.text:00005A78 ; =============== S U B R O U T I N E =======================================
.text:00005A78
.text:00005A78 ; Attributes: bp-based frame
.text:00005A78
.text:00005A78 ; __int32 __stdcall NArchive::NZip::CCacheOutStream::QueryInterface(NArchive::NZip::CCacheOutStream *this, const struct _GUID *Buf1, void **)
.text:00005A78                 public ?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00005A78 ?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005A78                                         ; DATA XREF: .rdata:const NArchive::NZip::CCacheOutStream::`vftable'o
.text:00005A78
.text:00005A78 this            = dword ptr  8
.text:00005A78 Buf1            = dword ptr  0Ch
.text:00005A78 arg_8           = dword ptr  10h
.text:00005A78
.text:00005A78                 push    ebp
.text:00005A79                 mov     ebp, esp
.text:00005A7B                 mov     eax, [ebp+arg_8]
.text:00005A7E                 mov     dword ptr [eax], 0
.text:00005A84                 push    offset _IID_IUnknown ; Buf2
.text:00005A89                 mov     ecx, [ebp+Buf1]
.text:00005A8C                 push    ecx             ; Buf1
.text:00005A8D                 call    ___@8           ; __(x,x)
.text:00005A92                 test    eax, eax
.text:00005A94                 jz      short loc_5AA0
.text:00005A96                 mov     edx, [ebp+arg_8]
.text:00005A99                 mov     eax, [ebp+this]
.text:00005A9C                 mov     [edx], eax
.text:00005A9E                 jmp     short loc_5AA7
.text:00005AA0 ; ---------------------------------------------------------------------------
.text:00005AA0
.text:00005AA0 loc_5AA0:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00005AA0                 mov     eax, 80004002h
.text:00005AA5                 jmp     short loc_5AB8
.text:00005AA7 ; ---------------------------------------------------------------------------
.text:00005AA7
.text:00005AA7 loc_5AA7:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00005AA7                 mov     ecx, [ebp+this]
.text:00005AAA                 mov     edx, [ecx+4]
.text:00005AAD                 add     edx, 1
.text:00005AB0                 mov     eax, [ebp+this]
.text:00005AB3                 mov     [eax+4], edx
.text:00005AB6                 xor     eax, eax
.text:00005AB8
.text:00005AB8 loc_5AB8:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00005AB8                 cmp     ebp, esp
.text:00005ABA                 call    __RTC_CheckEsp
.text:00005ABF                 pop     ebp
.text:00005AC0                 retn    0Ch
.text:00005AC0 ?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005AC0
.text:00005AC0 ; ---------------------------------------------------------------------------
.text:00005AC3                 align 4
.text:00005AC3 _text           ends
.text:00005AC3
.text:00005AC4 ; ===========================================================================
.text:00005AC4
.text:00005AC4 ; Segment type: Pure code
.text:00005AC4 ; Segment permissions: Read/Execute
.text:00005AC4 _text           segment para public 'CODE' use32
.text:00005AC4                 assume cs:_text
.text:00005AC4                 ;org 5AC4h
.text:00005AC4 ; COMDAT (pick any)
.text:00005AC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005AC4
.text:00005AC4 ; =============== S U B R O U T I N E =======================================
.text:00005AC4
.text:00005AC4 ; Attributes: bp-based frame
.text:00005AC4
.text:00005AC4 ; unsigned __int32 __stdcall NArchive::NZip::CCacheOutStream::AddRef(NArchive::NZip::CCacheOutStream *this)
.text:00005AC4                 public ?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ
.text:00005AC4 ?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ proc near
.text:00005AC4                                         ; DATA XREF: .rdata:0000592Co
.text:00005AC4
.text:00005AC4 var_4           = dword ptr -4
.text:00005AC4 this            = dword ptr  8
.text:00005AC4
.text:00005AC4                 push    ebp
.text:00005AC5                 mov     ebp, esp
.text:00005AC7                 push    ecx
.text:00005AC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005ACF                 mov     eax, [ebp+this]
.text:00005AD2                 mov     ecx, [eax+4]
.text:00005AD5                 add     ecx, 1
.text:00005AD8                 mov     [ebp+var_4], ecx
.text:00005ADB                 mov     edx, [ebp+this]
.text:00005ADE                 mov     eax, [ebp+var_4]
.text:00005AE1                 mov     [edx+4], eax
.text:00005AE4                 mov     eax, [ebp+var_4]
.text:00005AE7                 mov     esp, ebp
.text:00005AE9                 pop     ebp
.text:00005AEA                 retn    4
.text:00005AEA ?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ endp
.text:00005AEA
.text:00005AEA ; ---------------------------------------------------------------------------
.text:00005AED                 align 10h
.text:00005AED _text           ends
.text:00005AED
.text:00005AF0 ; ===========================================================================
.text:00005AF0
.text:00005AF0 ; Segment type: Pure code
.text:00005AF0 ; Segment permissions: Read/Execute
.text:00005AF0 _text           segment para public 'CODE' use32
.text:00005AF0                 assume cs:_text
.text:00005AF0                 ;org 5AF0h
.text:00005AF0 ; COMDAT (pick any)
.text:00005AF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005AF0
.text:00005AF0 ; =============== S U B R O U T I N E =======================================
.text:00005AF0
.text:00005AF0 ; Attributes: bp-based frame
.text:00005AF0
.text:00005AF0 ; unsigned __int32 __stdcall NArchive::NZip::CCacheOutStream::Release(NArchive::NZip::CCacheOutStream *this)
.text:00005AF0                 public ?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ
.text:00005AF0 ?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ proc near
.text:00005AF0                                         ; DATA XREF: .rdata:00005930o
.text:00005AF0
.text:00005AF0 var_10          = dword ptr -10h
.text:00005AF0 var_C           = dword ptr -0Ch
.text:00005AF0 var_8           = dword ptr -8
.text:00005AF0 var_4           = dword ptr -4
.text:00005AF0 this            = dword ptr  8
.text:00005AF0
.text:00005AF0                 push    ebp
.text:00005AF1                 mov     ebp, esp
.text:00005AF3                 sub     esp, 10h
.text:00005AF6                 mov     eax, 0CCCCCCCCh
.text:00005AFB                 mov     [ebp+var_10], eax
.text:00005AFE                 mov     [ebp+var_C], eax
.text:00005B01                 mov     [ebp+var_8], eax
.text:00005B04                 mov     [ebp+var_4], eax
.text:00005B07                 mov     eax, [ebp+this]
.text:00005B0A                 mov     ecx, [eax+4]
.text:00005B0D                 sub     ecx, 1
.text:00005B10                 mov     [ebp+var_C], ecx
.text:00005B13                 mov     edx, [ebp+this]
.text:00005B16                 mov     eax, [ebp+var_C]
.text:00005B19                 mov     [edx+4], eax
.text:00005B1C                 cmp     [ebp+var_C], 0
.text:00005B20                 jz      short loc_5B2A
.text:00005B22                 mov     ecx, [ebp+this]
.text:00005B25                 mov     eax, [ecx+4]
.text:00005B28                 jmp     short loc_5B54
.text:00005B2A ; ---------------------------------------------------------------------------
.text:00005B2A
.text:00005B2A loc_5B2A:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::Release(void)+30j
.text:00005B2A                 mov     edx, [ebp+this]
.text:00005B2D                 mov     [ebp+var_8], edx
.text:00005B30                 mov     eax, [ebp+var_8]
.text:00005B33                 mov     [ebp+var_4], eax
.text:00005B36                 cmp     [ebp+var_4], 0
.text:00005B3A                 jz      short loc_5B4B
.text:00005B3C                 push    1
.text:00005B3E                 mov     ecx, [ebp+var_4]
.text:00005B41                 call    ??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CCacheOutStream::`scalar deleting destructor'(uint)
.text:00005B46                 mov     [ebp+var_10], eax
.text:00005B49                 jmp     short loc_5B52
.text:00005B4B ; ---------------------------------------------------------------------------
.text:00005B4B
.text:00005B4B loc_5B4B:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::Release(void)+4Aj
.text:00005B4B                 mov     [ebp+var_10], 0
.text:00005B52
.text:00005B52 loc_5B52:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::Release(void)+59j
.text:00005B52                 xor     eax, eax
.text:00005B54
.text:00005B54 loc_5B54:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::Release(void)+38j
.text:00005B54                 add     esp, 10h
.text:00005B57                 cmp     ebp, esp
.text:00005B59                 call    __RTC_CheckEsp
.text:00005B5E                 mov     esp, ebp
.text:00005B60                 pop     ebp
.text:00005B61                 retn    4
.text:00005B61 ?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ endp
.text:00005B61
.text:00005B61 _text           ends
.text:00005B61
.text:00005B64 ; ===========================================================================
.text:00005B64
.text:00005B64 ; Segment type: Pure code
.text:00005B64 ; Segment permissions: Read/Execute
.text:00005B64 _text           segment para public 'CODE' use32
.text:00005B64                 assume cs:_text
.text:00005B64                 ;org 5B64h
.text:00005B64 ; COMDAT (pick any)
.text:00005B64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B64
.text:00005B64 ; =============== S U B R O U T I N E =======================================
.text:00005B64
.text:00005B64 ; Attributes: bp-based frame
.text:00005B64
.text:00005B64 ; public: void * __thiscall NArchive::NZip::CCacheOutStream::`scalar deleting destructor'(unsigned int)
.text:00005B64                 public ??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z
.text:00005B64 ??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z proc near
.text:00005B64                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::Release(void)+51p
.text:00005B64
.text:00005B64 var_4           = dword ptr -4
.text:00005B64 arg_0           = dword ptr  8
.text:00005B64
.text:00005B64                 push    ebp
.text:00005B65                 mov     ebp, esp
.text:00005B67                 push    ecx
.text:00005B68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B6F                 mov     [ebp+var_4], ecx
.text:00005B72                 mov     ecx, [ebp+var_4] ; this
.text:00005B75                 call    ??1CCacheOutStream@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)
.text:00005B7A                 mov     eax, [ebp+arg_0]
.text:00005B7D                 and     eax, 1
.text:00005B80                 jz      short loc_5B8E
.text:00005B82                 mov     ecx, [ebp+var_4]
.text:00005B85                 push    ecx             ; void *
.text:00005B86                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005B8B                 add     esp, 4
.text:00005B8E
.text:00005B8E loc_5B8E:                               ; CODE XREF: NArchive::NZip::CCacheOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00005B8E                 mov     eax, [ebp+var_4]
.text:00005B91                 add     esp, 4
.text:00005B94                 cmp     ebp, esp
.text:00005B96                 call    __RTC_CheckEsp
.text:00005B9B                 mov     esp, ebp
.text:00005B9D                 pop     ebp
.text:00005B9E                 retn    4
.text:00005B9E ??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z endp
.text:00005B9E
.text:00005B9E ; ---------------------------------------------------------------------------
.text:00005BA1                 align 4
.text:00005BA1 _text           ends
.text:00005BA1
.text:00005BA4 ; ===========================================================================
.text:00005BA4
.text:00005BA4 ; Segment type: Pure code
.text:00005BA4 ; Segment permissions: Read/Execute
.text:00005BA4 _text           segment para public 'CODE' use32
.text:00005BA4                 assume cs:_text
.text:00005BA4                 ;org 5BA4h
.text:00005BA4 ; COMDAT (pick any)
.text:00005BA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BA4
.text:00005BA4 ; =============== S U B R O U T I N E =======================================
.text:00005BA4
.text:00005BA4 ; Attributes: bp-based frame
.text:00005BA4
.text:00005BA4 ; __int32 __thiscall NArchive::NZip::CCacheOutStream::MyWriteBlock(NArchive::NZip::CCacheOutStream *__hidden this)
.text:00005BA4                 public ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ
.text:00005BA4 ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ proc near
.text:00005BA4                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+20Cp
.text:00005BA4                                         ; NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+2EEp
.text:00005BA4
.text:00005BA4 var_4           = dword ptr -4
.text:00005BA4
.text:00005BA4                 push    ebp
.text:00005BA5                 mov     ebp, esp
.text:00005BA7                 push    ecx
.text:00005BA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BAF                 mov     [ebp+var_4], ecx
.text:00005BB2                 mov     eax, [ebp+var_4]
.text:00005BB5                 mov     ecx, [eax+30h]
.text:00005BB8                 and     ecx, 0FFFFFh
.text:00005BBE                 mov     edx, 100000h
.text:00005BC3                 sub     edx, ecx
.text:00005BC5                 push    edx             ; unsigned int
.text:00005BC6                 mov     ecx, [ebp+var_4] ; this
.text:00005BC9                 call    ?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z ; NArchive::NZip::CCacheOutStream::MyWrite(uint)
.text:00005BCE                 add     esp, 4
.text:00005BD1                 cmp     ebp, esp
.text:00005BD3                 call    __RTC_CheckEsp
.text:00005BD8                 mov     esp, ebp
.text:00005BDA                 pop     ebp
.text:00005BDB                 retn
.text:00005BDB ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ endp
.text:00005BDB
.text:00005BDB _text           ends
.text:00005BDB
.text:00005BDC ; ===========================================================================
.text:00005BDC
.text:00005BDC ; Segment type: Pure code
.text:00005BDC ; Segment permissions: Read/Execute
.text:00005BDC _text           segment para public 'CODE' use32
.text:00005BDC                 assume cs:_text
.text:00005BDC                 ;org 5BDCh
.text:00005BDC ; COMDAT (pick any)
.text:00005BDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BDC
.text:00005BDC ; =============== S U B R O U T I N E =======================================
.text:00005BDC
.text:00005BDC ; Attributes: bp-based frame
.text:00005BDC
.text:00005BDC ; bool __thiscall NArchive::NZip::CInArchive::CanUpdate(NArchive::NZip::CInArchive *__hidden this)
.text:00005BDC                 public ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00005BDC ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00005BDC                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+45p
.text:00005BDC
.text:00005BDC var_18          = dword ptr -18h
.text:00005BDC var_14          = dword ptr -14h
.text:00005BDC var_10          = dword ptr -10h
.text:00005BDC var_C           = dword ptr -0Ch
.text:00005BDC var_8           = dword ptr -8
.text:00005BDC var_4           = dword ptr -4
.text:00005BDC
.text:00005BDC                 push    ebp
.text:00005BDD                 mov     ebp, esp
.text:00005BDF                 sub     esp, 18h
.text:00005BE2                 mov     eax, 0CCCCCCCCh
.text:00005BE7                 mov     [ebp+var_18], eax
.text:00005BEA                 mov     [ebp+var_14], eax
.text:00005BED                 mov     [ebp+var_10], eax
.text:00005BF0                 mov     [ebp+var_C], eax
.text:00005BF3                 mov     [ebp+var_8], eax
.text:00005BF6                 mov     [ebp+var_4], eax
.text:00005BF9                 mov     [ebp+var_4], ecx
.text:00005BFC                 mov     ecx, [ebp+var_4] ; this
.text:00005BFF                 call    ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors(void)
.text:00005C04                 movzx   eax, al
.text:00005C07                 test    eax, eax
.text:00005C09                 jz      short loc_5C12
.text:00005C0B                 xor     al, al
.text:00005C0D                 jmp     loc_5C93
.text:00005C12 ; ---------------------------------------------------------------------------
.text:00005C12
.text:00005C12 loc_5C12:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+2Dj
.text:00005C12                 mov     ecx, [ebp+var_4]
.text:00005C15                 mov     [ebp+var_8], ecx
.text:00005C18                 mov     edx, [ebp+var_8]
.text:00005C1B                 cmp     dword ptr [edx+3Ch], 0
.text:00005C1F                 jg      short loc_5C30
.text:00005C21                 jl      short loc_5C2C
.text:00005C23                 mov     eax, [ebp+var_8]
.text:00005C26                 cmp     dword ptr [eax+38h], 0
.text:00005C2A                 jnb     short loc_5C30
.text:00005C2C
.text:00005C2C loc_5C2C:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+45j
.text:00005C2C                 xor     al, al
.text:00005C2E                 jmp     short loc_5C93
.text:00005C30 ; ---------------------------------------------------------------------------
.text:00005C30
.text:00005C30 loc_5C30:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+43j
.text:00005C30                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+4Ej
.text:00005C30                 mov     ecx, [ebp+var_4]
.text:00005C33                 mov     edx, [ebp+var_4]
.text:00005C36                 mov     [ebp+var_C], ecx
.text:00005C39                 mov     [ebp+var_10], edx
.text:00005C3C                 mov     eax, [ebp+var_C]
.text:00005C3F                 mov     ecx, [ebp+var_10]
.text:00005C42                 mov     edx, [eax+4Ch]
.text:00005C45                 cmp     edx, [ecx+3Ch]
.text:00005C48                 jg      short loc_5C5E
.text:00005C4A                 jl      short loc_5C5A
.text:00005C4C                 mov     eax, [ebp+var_C]
.text:00005C4F                 mov     ecx, [ebp+var_10]
.text:00005C52                 mov     edx, [eax+48h]
.text:00005C55                 cmp     edx, [ecx+38h]
.text:00005C58                 jnb     short loc_5C5E
.text:00005C5A
.text:00005C5A loc_5C5A:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Ej
.text:00005C5A                 xor     al, al
.text:00005C5C                 jmp     short loc_5C93
.text:00005C5E ; ---------------------------------------------------------------------------
.text:00005C5E
.text:00005C5E loc_5C5E:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Cj
.text:00005C5E                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+7Cj
.text:00005C5E                 mov     ecx, [ebp+var_4]
.text:00005C61                 add     ecx, 38h ; '8'  ; this
.text:00005C64                 call    ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)
.text:00005C69                 mov     [ebp+var_18], eax
.text:00005C6C                 mov     [ebp+var_14], edx
.text:00005C6F                 mov     eax, [ebp+var_18]
.text:00005C72                 or      eax, [ebp+var_14]
.text:00005C75                 jz      short loc_5C7B
.text:00005C77                 xor     al, al
.text:00005C79                 jmp     short loc_5C93
.text:00005C7B ; ---------------------------------------------------------------------------
.text:00005C7B
.text:00005C7B loc_5C7B:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+99j
.text:00005C7B                 mov     ecx, [ebp+var_4]
.text:00005C7E                 add     ecx, 38h ; '8'  ; this
.text:00005C81                 call    ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)
.text:00005C86                 movzx   ecx, al
.text:00005C89                 test    ecx, ecx
.text:00005C8B                 jz      short loc_5C91
.text:00005C8D                 xor     al, al
.text:00005C8F                 jmp     short loc_5C93
.text:00005C91 ; ---------------------------------------------------------------------------
.text:00005C91
.text:00005C91 loc_5C91:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+AFj
.text:00005C91                 mov     al, 1
.text:00005C93
.text:00005C93 loc_5C93:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+31j
.text:00005C93                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+52j ...
.text:00005C93                 add     esp, 18h
.text:00005C96                 cmp     ebp, esp
.text:00005C98                 call    __RTC_CheckEsp
.text:00005C9D                 mov     esp, ebp
.text:00005C9F                 pop     ebp
.text:00005CA0                 retn
.text:00005CA0 ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:00005CA0
.text:00005CA0 ; ---------------------------------------------------------------------------
.text:00005CA1                 align 4
.text:00005CA1 _text           ends
.text:00005CA1
.text:00005CA4 ; ===========================================================================
.text:00005CA4
.text:00005CA4 ; Segment type: Pure code
.text:00005CA4 ; Segment permissions: Read/Execute
.text:00005CA4 _text           segment para public 'CODE' use32
.text:00005CA4                 assume cs:_text
.text:00005CA4                 ;org 5CA4h
.text:00005CA4 ; COMDAT (pick any)
.text:00005CA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CA4
.text:00005CA4 ; =============== S U B R O U T I N E =======================================
.text:00005CA4
.text:00005CA4 ; Attributes: bp-based frame
.text:00005CA4
.text:00005CA4 ; unsigned __int64 __thiscall NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005CA4                 public ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
.text:00005CA4 ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ proc near
.text:00005CA4                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+88p
.text:00005CA4
.text:00005CA4 var_4           = dword ptr -4
.text:00005CA4
.text:00005CA4                 push    ebp
.text:00005CA5                 mov     ebp, esp
.text:00005CA7                 push    ecx
.text:00005CA8                 push    esi
.text:00005CA9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CB0                 mov     [ebp+var_4], ecx
.text:00005CB3                 mov     eax, [ebp+var_4]
.text:00005CB6                 movzx   ecx, byte ptr [eax+30h]
.text:00005CBA                 test    ecx, ecx
.text:00005CBC                 jz      short loc_5CC9
.text:00005CBE                 mov     edx, [ebp+var_4]
.text:00005CC1                 mov     eax, [edx+28h]
.text:00005CC4                 mov     edx, [edx+2Ch]
.text:00005CC7                 jmp     short loc_5CDE
.text:00005CC9 ; ---------------------------------------------------------------------------
.text:00005CC9
.text:00005CC9 loc_5CC9:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+18j
.text:00005CC9                 mov     eax, [ebp+var_4]
.text:00005CCC                 mov     ecx, [ebp+var_4]
.text:00005CCF                 mov     edx, [eax+10h]
.text:00005CD2                 sub     edx, [ecx]
.text:00005CD4                 mov     esi, [eax+14h]
.text:00005CD7                 sbb     esi, [ecx+4]
.text:00005CDA                 mov     eax, edx
.text:00005CDC                 mov     edx, esi
.text:00005CDE
.text:00005CDE loc_5CDE:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+23j
.text:00005CDE                 pop     esi
.text:00005CDF                 mov     esp, ebp
.text:00005CE1                 pop     ebp
.text:00005CE2                 retn
.text:00005CE2 ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ endp
.text:00005CE2
.text:00005CE2 ; ---------------------------------------------------------------------------
.text:00005CE3                 align 4
.text:00005CE3 _text           ends
.text:00005CE3
.text:00005CE4 ; ===========================================================================
.text:00005CE4
.text:00005CE4 ; Segment type: Pure code
.text:00005CE4 ; Segment permissions: Read/Execute
.text:00005CE4 _text           segment para public 'CODE' use32
.text:00005CE4                 assume cs:_text
.text:00005CE4                 ;org 5CE4h
.text:00005CE4 ; COMDAT (pick any)
.text:00005CE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CE4
.text:00005CE4 ; =============== S U B R O U T I N E =======================================
.text:00005CE4
.text:00005CE4 ; Attributes: bp-based frame
.text:00005CE4
.text:00005CE4 ; bool __thiscall NArchive::NZip::CInArchiveInfo::ThereIsTail(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005CE4                 public ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
.text:00005CE4 ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ proc near
.text:00005CE4                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+A5p
.text:00005CE4
.text:00005CE4 var_10          = dword ptr -10h
.text:00005CE4 var_C           = dword ptr -0Ch
.text:00005CE4 var_8           = dword ptr -8
.text:00005CE4 var_4           = dword ptr -4
.text:00005CE4
.text:00005CE4                 push    ebp
.text:00005CE5                 mov     ebp, esp
.text:00005CE7                 sub     esp, 10h
.text:00005CEA                 mov     eax, 0CCCCCCCCh
.text:00005CEF                 mov     [ebp+var_10], eax
.text:00005CF2                 mov     [ebp+var_C], eax
.text:00005CF5                 mov     [ebp+var_8], eax
.text:00005CF8                 mov     [ebp+var_4], eax
.text:00005CFB                 mov     [ebp+var_4], ecx
.text:00005CFE                 mov     eax, [ebp+var_4]
.text:00005D01                 mov     ecx, [ebp+var_4]
.text:00005D04                 mov     [ebp+var_8], eax
.text:00005D07                 mov     [ebp+var_C], ecx
.text:00005D0A                 mov     edx, [ebp+var_8]
.text:00005D0D                 mov     eax, [ebp+var_C]
.text:00005D10                 mov     ecx, [edx+24h]
.text:00005D13                 cmp     ecx, [eax+1Ch]
.text:00005D16                 jb      short loc_5D31
.text:00005D18                 ja      short loc_5D28
.text:00005D1A                 mov     edx, [ebp+var_8]
.text:00005D1D                 mov     eax, [ebp+var_C]
.text:00005D20                 mov     ecx, [edx+20h]
.text:00005D23                 cmp     ecx, [eax+18h]
.text:00005D26                 jbe     short loc_5D31
.text:00005D28
.text:00005D28 loc_5D28:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+34j
.text:00005D28                 mov     [ebp+var_10], 1
.text:00005D2F                 jmp     short loc_5D38
.text:00005D31 ; ---------------------------------------------------------------------------
.text:00005D31
.text:00005D31 loc_5D31:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+32j
.text:00005D31                                         ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+42j
.text:00005D31                 mov     [ebp+var_10], 0
.text:00005D38
.text:00005D38 loc_5D38:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+4Bj
.text:00005D38                 mov     al, byte ptr [ebp+var_10]
.text:00005D3B                 mov     esp, ebp
.text:00005D3D                 pop     ebp
.text:00005D3E                 retn
.text:00005D3E ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ endp
.text:00005D3E
.text:00005D3E ; ---------------------------------------------------------------------------
.text:00005D3F                 align 10h
.text:00005D3F _text           ends
.text:00005D3F
.text:00005D40 ; ===========================================================================
.text:00005D40
.text:00005D40 ; Segment type: Pure code
.text:00005D40 ; Segment permissions: Read/Execute
.text:00005D40 _text           segment para public 'CODE' use32
.text:00005D40                 assume cs:_text
.text:00005D40                 ;org 5D40h
.text:00005D40 ; COMDAT (pick any)
.text:00005D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D40
.text:00005D40 ; =============== S U B R O U T I N E =======================================
.text:00005D40
.text:00005D40 ; Attributes: bp-based frame
.text:00005D40
.text:00005D40 ; bool __thiscall NArchive::NZip::CInArchive::AreThereErrors(NArchive::NZip::CInArchive *__hidden this)
.text:00005D40                 public ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00005D40 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00005D40                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+23p
.text:00005D40
.text:00005D40 var_8           = dword ptr -8
.text:00005D40 var_4           = dword ptr -4
.text:00005D40
.text:00005D40                 push    ebp
.text:00005D41                 mov     ebp, esp
.text:00005D43                 sub     esp, 8
.text:00005D46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D54                 mov     [ebp+var_4], ecx
.text:00005D57                 mov     eax, [ebp+var_4]
.text:00005D5A                 movzx   ecx, byte ptr [eax+7Ah]
.text:00005D5E                 test    ecx, ecx
.text:00005D60                 jnz     short loc_5D76
.text:00005D62                 mov     edx, [ebp+var_4]
.text:00005D65                 movzx   eax, byte ptr [edx+7Dh]
.text:00005D69                 test    eax, eax
.text:00005D6B                 jnz     short loc_5D76
.text:00005D6D                 mov     [ebp+var_8], 0
.text:00005D74                 jmp     short loc_5D7D
.text:00005D76 ; ---------------------------------------------------------------------------
.text:00005D76
.text:00005D76 loc_5D76:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+20j
.text:00005D76                                         ; NArchive::NZip::CInArchive::AreThereErrors(void)+2Bj
.text:00005D76                 mov     [ebp+var_8], 1
.text:00005D7D
.text:00005D7D loc_5D7D:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+34j
.text:00005D7D                 mov     al, byte ptr [ebp+var_8]
.text:00005D80                 mov     esp, ebp
.text:00005D82                 pop     ebp
.text:00005D83                 retn
.text:00005D83 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:00005D83
.text:00005D83 _text           ends
.text:00005D83
.text:00005D84 ; ===========================================================================
.text:00005D84
.text:00005D84 ; Segment type: Pure code
.text:00005D84 ; Segment permissions: Read/Execute
.text:00005D84 _text           segment para public 'CODE' use32
.text:00005D84                 assume cs:_text
.text:00005D84                 ;org 5D84h
.text:00005D84 ; COMDAT (pick any)
.text:00005D84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D84
.text:00005D84 ; =============== S U B R O U T I N E =======================================
.text:00005D84
.text:00005D84 ; Attributes: bp-based frame
.text:00005D84
.text:00005D84 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00005D84                 public ?Len@AString@@QBEIXZ
.text:00005D84 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+17ADp
.text:00005D84                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+161p ...
.text:00005D84
.text:00005D84 var_4           = dword ptr -4
.text:00005D84
.text:00005D84                 push    ebp
.text:00005D85                 mov     ebp, esp
.text:00005D87                 push    ecx
.text:00005D88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D8F                 mov     [ebp+var_4], ecx
.text:00005D92                 mov     eax, [ebp+var_4]
.text:00005D95                 mov     eax, [eax+4]
.text:00005D98                 mov     esp, ebp
.text:00005D9A                 pop     ebp
.text:00005D9B                 retn
.text:00005D9B ?Len@AString@@QBEIXZ endp
.text:00005D9B
.text:00005D9B _text           ends
.text:00005D9B
.text:00005D9C ; ===========================================================================
.text:00005D9C
.text:00005D9C ; Segment type: Pure code
.text:00005D9C ; Segment permissions: Read/Execute
.text:00005D9C _text           segment para public 'CODE' use32
.text:00005D9C                 assume cs:_text
.text:00005D9C                 ;org 5D9Ch
.text:00005D9C ; COMDAT (pick any)
.text:00005D9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D9C
.text:00005D9C ; =============== S U B R O U T I N E =======================================
.text:00005D9C
.text:00005D9C ; Attributes: bp-based frame
.text:00005D9C
.text:00005D9C ; public: __thiscall NWindows::NSynchronization::CBaseEvent::operator void *(void)
.text:00005D9C                 public ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ
.text:00005D9C ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ proc near
.text:00005D9C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+14E5p
.text:00005D9C
.text:00005D9C var_4           = dword ptr -4
.text:00005D9C
.text:00005D9C                 push    ebp
.text:00005D9D                 mov     ebp, esp
.text:00005D9F                 push    ecx
.text:00005DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DA7                 mov     [ebp+var_4], ecx
.text:00005DAA                 mov     eax, [ebp+var_4]
.text:00005DAD                 mov     eax, [eax]
.text:00005DAF                 mov     esp, ebp
.text:00005DB1                 pop     ebp
.text:00005DB2                 retn
.text:00005DB2 ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ endp
.text:00005DB2
.text:00005DB2 ; ---------------------------------------------------------------------------
.text:00005DB3                 align 4
.text:00005DB3 _text           ends
.text:00005DB3
.text:00005DB4 ; ===========================================================================
.text:00005DB4
.text:00005DB4 ; Segment type: Pure code
.text:00005DB4 ; Segment permissions: Read/Execute
.text:00005DB4 _text           segment para public 'CODE' use32
.text:00005DB4                 assume cs:_text
.text:00005DB4                 ;org 5DB4h
.text:00005DB4 ; COMDAT (pick any)
.text:00005DB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DB4
.text:00005DB4 ; =============== S U B R O U T I N E =======================================
.text:00005DB4
.text:00005DB4 ; Attributes: bp-based frame
.text:00005DB4
.text:00005DB4 ; unsigned int __thiscall CMemBlockManager::GetBlockSize(CMemBlockManager *__hidden this)
.text:00005DB4                 public ?GetBlockSize@CMemBlockManager@@QBEIXZ
.text:00005DB4 ?GetBlockSize@CMemBlockManager@@QBEIXZ proc near
.text:00005DB4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+181Ap
.text:00005DB4
.text:00005DB4 var_4           = dword ptr -4
.text:00005DB4
.text:00005DB4                 push    ebp
.text:00005DB5                 mov     ebp, esp
.text:00005DB7                 push    ecx
.text:00005DB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DBF                 mov     [ebp+var_4], ecx
.text:00005DC2                 mov     eax, [ebp+var_4]
.text:00005DC5                 mov     eax, [eax+4]
.text:00005DC8                 mov     esp, ebp
.text:00005DCA                 pop     ebp
.text:00005DCB                 retn
.text:00005DCB ?GetBlockSize@CMemBlockManager@@QBEIXZ endp
.text:00005DCB
.text:00005DCB _text           ends
.text:00005DCB
.text:00005DCC ; ===========================================================================
.text:00005DCC
.text:00005DCC ; Segment type: Pure code
.text:00005DCC ; Segment permissions: Read/Execute
.text:00005DCC _text           segment para public 'CODE' use32
.text:00005DCC                 assume cs:_text
.text:00005DCC                 ;org 5DCCh
.text:00005DCC ; COMDAT (pick any)
.text:00005DCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DCC
.text:00005DCC ; =============== S U B R O U T I N E =======================================
.text:00005DCC
.text:00005DCC ; Attributes: bp-based frame
.text:00005DCC
.text:00005DCC ; public: __thiscall CMemBlockManagerMt::CMemBlockManagerMt(unsigned int)
.text:00005DCC                 public ??0CMemBlockManagerMt@@QAE@I@Z
.text:00005DCC ??0CMemBlockManagerMt@@QAE@I@Z proc near
.text:00005DCC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+645p
.text:00005DCC
.text:00005DCC var_10          = dword ptr -10h
.text:00005DCC var_C           = dword ptr -0Ch
.text:00005DCC var_4           = dword ptr -4
.text:00005DCC arg_0           = dword ptr  8
.text:00005DCC
.text:00005DCC                 push    ebp
.text:00005DCD                 mov     ebp, esp
.text:00005DCF                 push    0FFFFFFFFh
.text:00005DD1                 push    offset __ehhandler$??0CMemBlockManagerMt@@QAE@I@Z
.text:00005DD6                 mov     eax, large fs:0
.text:00005DDC                 push    eax
.text:00005DDD                 push    ecx
.text:00005DDE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005DE5                 mov     eax, dword ptr ds:___security_cookie
.text:00005DEA                 xor     eax, ebp
.text:00005DEC                 push    eax
.text:00005DED                 lea     eax, [ebp+var_C]
.text:00005DF0                 mov     large fs:0, eax
.text:00005DF6                 mov     [ebp+var_10], ecx
.text:00005DF9                 mov     eax, [ebp+arg_0]
.text:00005DFC                 push    eax
.text:00005DFD                 mov     ecx, [ebp+var_10]
.text:00005E00                 call    ??0CMemBlockManager@@QAE@I@Z ; CMemBlockManager::CMemBlockManager(uint)
.text:00005E05                 mov     [ebp+var_4], 0
.text:00005E0C                 mov     ecx, [ebp+var_10]
.text:00005E0F                 add     ecx, 0Ch        ; this
.text:00005E12                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00005E17                 mov     byte ptr [ebp+var_4], 1
.text:00005E1B                 mov     ecx, [ebp+var_10]
.text:00005E1E                 add     ecx, 24h ; '$'  ; this
.text:00005E21                 call    ??0CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::CSemaphore(void)
.text:00005E26                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005E2D                 mov     eax, [ebp+var_10]
.text:00005E30                 mov     ecx, [ebp+var_C]
.text:00005E33                 mov     large fs:0, ecx
.text:00005E3A                 pop     ecx
.text:00005E3B                 add     esp, 10h
.text:00005E3E                 cmp     ebp, esp
.text:00005E40                 call    __RTC_CheckEsp
.text:00005E45                 mov     esp, ebp
.text:00005E47                 pop     ebp
.text:00005E48                 retn    4
.text:00005E48 ??0CMemBlockManagerMt@@QAE@I@Z endp
.text:00005E48
.text:00005E48 ; ---------------------------------------------------------------------------
.text:00005E4B                 align 4
.text:00005E4B _text           ends
.text:00005E4B
.text$x:00005E4C ; ===========================================================================
.text$x:00005E4C
.text$x:00005E4C ; Segment type: Pure code
.text$x:00005E4C ; Segment permissions: Read/Execute
.text$x:00005E4C _text$x         segment para public 'CODE' use32
.text$x:00005E4C                 assume cs:_text$x
.text$x:00005E4C                 ;org 5E4Ch
.text$x:00005E4C ; COMDAT (pick associative to section at 5DCC)
.text$x:00005E4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005E4C
.text$x:00005E4C ; =============== S U B R O U T I N E =======================================
.text$x:00005E4C
.text$x:00005E4C
.text$x:00005E4C __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0 proc near
.text$x:00005E4C                                         ; DATA XREF: .xdata$x:00005E80o
.text$x:00005E4C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005E4F                 jmp     ??1CMemBlockManager@@QAE@XZ ; CMemBlockManager::~CMemBlockManager(void)
.text$x:00005E4F __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0 endp
.text$x:00005E4F
.text$x:00005E54
.text$x:00005E54 ; =============== S U B R O U T I N E =======================================
.text$x:00005E54
.text$x:00005E54
.text$x:00005E54 __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1 proc near
.text$x:00005E54                                         ; DATA XREF: .xdata$x:00005E88o
.text$x:00005E54                 mov     ecx, [ebp-10h]
.text$x:00005E57                 add     ecx, 0Ch        ; this
.text$x:00005E5A                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00005E5A __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1 endp
.text$x:00005E5A
.text$x:00005E5F
.text$x:00005E5F ; =============== S U B R O U T I N E =======================================
.text$x:00005E5F
.text$x:00005E5F
.text$x:00005E5F __ehhandler$??0CMemBlockManagerMt@@QAE@I@Z proc near
.text$x:00005E5F                                         ; DATA XREF: CMemBlockManagerMt::CMemBlockManagerMt(uint)+5o
.text$x:00005E5F
.text$x:00005E5F arg_4           = dword ptr  8
.text$x:00005E5F
.text$x:00005E5F                 mov     edx, [esp+arg_4]
.text$x:00005E63                 lea     eax, [edx+0Ch]
.text$x:00005E66                 mov     ecx, [edx-8]
.text$x:00005E69                 xor     ecx, eax
.text$x:00005E6B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E70                 mov     eax, offset __ehfuncinfo$??0CMemBlockManagerMt@@QAE@I@Z
.text$x:00005E75                 jmp     ___CxxFrameHandler3
.text$x:00005E75 __ehhandler$??0CMemBlockManagerMt@@QAE@I@Z endp
.text$x:00005E75
.text$x:00005E75 ; ---------------------------------------------------------------------------
.text$x:00005E7A                 align 4
.text$x:00005E7A _text$x         ends
.text$x:00005E7A
.xdata$x:00005E7C ; ===========================================================================
.xdata$x:00005E7C
.xdata$x:00005E7C ; Segment type: Pure data
.xdata$x:00005E7C ; Segment permissions: Read
.xdata$x:00005E7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005E7C                 assume cs:_xdata$x
.xdata$x:00005E7C                 ;org 5E7Ch
.xdata$x:00005E7C ; COMDAT (pick associative to section at 5DCC)
.xdata$x:00005E7C __unwindtable$??0CMemBlockManagerMt@@QAE@I@Z db 0FFh
.xdata$x:00005E7C                                         ; DATA XREF: .xdata$x:00005E94o
.xdata$x:00005E7D                 db 0FFh
.xdata$x:00005E7E                 db 0FFh
.xdata$x:00005E7F                 db 0FFh
.xdata$x:00005E80                 dd offset __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0
.xdata$x:00005E84                 align 8
.xdata$x:00005E88                 dd offset __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1
.xdata$x:00005E8C __ehfuncinfo$??0CMemBlockManagerMt@@QAE@I@Z db  22h ; "
.xdata$x:00005E8C                                         ; DATA XREF: __ehhandler$??0CMemBlockManagerMt@@QAE@I@Z+11o
.xdata$x:00005E8D                 db    5
.xdata$x:00005E8E                 db  93h ; ô
.xdata$x:00005E8F                 db  19h
.xdata$x:00005E90                 db    2
.xdata$x:00005E91                 db    0
.xdata$x:00005E92                 db    0
.xdata$x:00005E93                 db    0
.xdata$x:00005E94                 dd offset __unwindtable$??0CMemBlockManagerMt@@QAE@I@Z
.xdata$x:00005E98                 db    0
.xdata$x:00005E99                 db    0
.xdata$x:00005E9A                 db    0
.xdata$x:00005E9B                 db    0
.xdata$x:00005E9C                 db    0
.xdata$x:00005E9D                 db    0
.xdata$x:00005E9E                 db    0
.xdata$x:00005E9F                 db    0
.xdata$x:00005EA0                 db    0
.xdata$x:00005EA1                 db    0
.xdata$x:00005EA2                 db    0
.xdata$x:00005EA3                 db    0
.xdata$x:00005EA4                 db    0
.xdata$x:00005EA5                 db    0
.xdata$x:00005EA6                 db    0
.xdata$x:00005EA7                 db    0
.xdata$x:00005EA8                 db    0
.xdata$x:00005EA9                 db    0
.xdata$x:00005EAA                 db    0
.xdata$x:00005EAB                 db    0
.xdata$x:00005EAC                 db    1
.xdata$x:00005EAD                 db    0
.xdata$x:00005EAE                 db    0
.xdata$x:00005EAF                 db    0
.xdata$x:00005EAF _xdata$x        ends
.xdata$x:00005EAF
.text:00005EB0 ; ===========================================================================
.text:00005EB0
.text:00005EB0 ; Segment type: Pure code
.text:00005EB0 ; Segment permissions: Read/Execute
.text:00005EB0 _text           segment para public 'CODE' use32
.text:00005EB0                 assume cs:_text
.text:00005EB0                 ;org 5EB0h
.text:00005EB0 ; COMDAT (pick any)
.text:00005EB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EB0
.text:00005EB0 ; =============== S U B R O U T I N E =======================================
.text:00005EB0
.text:00005EB0 ; Attributes: bp-based frame
.text:00005EB0
.text:00005EB0 ; _DWORD __thiscall NWindows::NSynchronization::CSemaphore::CSemaphore(NWindows::NSynchronization::CSemaphore *__hidden this)
.text:00005EB0                 public ??0CSemaphore@NSynchronization@NWindows@@QAE@XZ
.text:00005EB0 ??0CSemaphore@NSynchronization@NWindows@@QAE@XZ proc near
.text:00005EB0                                         ; CODE XREF: CMemBlockManagerMt::CMemBlockManagerMt(uint)+55p
.text:00005EB0
.text:00005EB0 var_4           = dword ptr -4
.text:00005EB0
.text:00005EB0                 push    ebp
.text:00005EB1                 mov     ebp, esp
.text:00005EB3                 push    ecx
.text:00005EB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EBB                 mov     [ebp+var_4], ecx
.text:00005EBE                 mov     eax, [ebp+var_4]
.text:00005EC1                 mov     dword ptr [eax], 0
.text:00005EC7                 mov     eax, [ebp+var_4]
.text:00005ECA                 mov     esp, ebp
.text:00005ECC                 pop     ebp
.text:00005ECD                 retn
.text:00005ECD ??0CSemaphore@NSynchronization@NWindows@@QAE@XZ endp
.text:00005ECD
.text:00005ECD ; ---------------------------------------------------------------------------
.text:00005ECE                 align 10h
.text:00005ECE _text           ends
.text:00005ECE
.text:00005ED0 ; ===========================================================================
.text:00005ED0
.text:00005ED0 ; Segment type: Pure code
.text:00005ED0 ; Segment permissions: Read/Execute
.text:00005ED0 _text           segment para public 'CODE' use32
.text:00005ED0                 assume cs:_text
.text:00005ED0                 ;org 5ED0h
.text:00005ED0 ; COMDAT (pick any)
.text:00005ED0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005ED0
.text:00005ED0 ; =============== S U B R O U T I N E =======================================
.text:00005ED0
.text:00005ED0 ; Attributes: bp-based frame
.text:00005ED0
.text:00005ED0 ; public: __thiscall CMemBlockManager::CMemBlockManager(unsigned int)
.text:00005ED0                 public ??0CMemBlockManager@@QAE@I@Z
.text:00005ED0 ??0CMemBlockManager@@QAE@I@Z proc near  ; CODE XREF: CMemBlockManagerMt::CMemBlockManagerMt(uint)+34p
.text:00005ED0
.text:00005ED0 var_4           = dword ptr -4
.text:00005ED0 arg_0           = dword ptr  8
.text:00005ED0
.text:00005ED0                 push    ebp
.text:00005ED1                 mov     ebp, esp
.text:00005ED3                 push    ecx
.text:00005ED4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EDB                 mov     [ebp+var_4], ecx
.text:00005EDE                 mov     eax, [ebp+var_4]
.text:00005EE1                 mov     dword ptr [eax], 0
.text:00005EE7                 mov     ecx, [ebp+var_4]
.text:00005EEA                 mov     edx, [ebp+arg_0]
.text:00005EED                 mov     [ecx+4], edx
.text:00005EF0                 mov     eax, [ebp+var_4]
.text:00005EF3                 mov     dword ptr [eax+8], 0
.text:00005EFA                 mov     eax, [ebp+var_4]
.text:00005EFD                 mov     esp, ebp
.text:00005EFF                 pop     ebp
.text:00005F00                 retn    4
.text:00005F00 ??0CMemBlockManager@@QAE@I@Z endp
.text:00005F00
.text:00005F00 ; ---------------------------------------------------------------------------
.text:00005F03                 align 4
.text:00005F03 _text           ends
.text:00005F03
.text:00005F04 ; ===========================================================================
.text:00005F04
.text:00005F04 ; Segment type: Pure code
.text:00005F04 ; Segment permissions: Read/Execute
.text:00005F04 _text           segment para public 'CODE' use32
.text:00005F04                 assume cs:_text
.text:00005F04                 ;org 5F04h
.text:00005F04 ; COMDAT (pick any)
.text:00005F04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F04
.text:00005F04 ; =============== S U B R O U T I N E =======================================
.text:00005F04
.text:00005F04 ; Attributes: bp-based frame
.text:00005F04
.text:00005F04 ; _DWORD __thiscall CMemBlockManager::~CMemBlockManager(CMemBlockManager *__hidden this)
.text:00005F04                 public ??1CMemBlockManager@@QAE@XZ
.text:00005F04 ??1CMemBlockManager@@QAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0+3j
.text:00005F04                                         ; CMemBlockManagerMt::~CMemBlockManagerMt(void)+64p ...
.text:00005F04
.text:00005F04 var_4           = dword ptr -4
.text:00005F04
.text:00005F04                 push    ebp
.text:00005F05                 mov     ebp, esp
.text:00005F07                 push    ecx
.text:00005F08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F0F                 mov     [ebp+var_4], ecx
.text:00005F12                 mov     ecx, [ebp+var_4] ; this
.text:00005F15                 call    ?FreeSpace@CMemBlockManager@@QAEXXZ ; CMemBlockManager::FreeSpace(void)
.text:00005F1A                 add     esp, 4
.text:00005F1D                 cmp     ebp, esp
.text:00005F1F                 call    __RTC_CheckEsp
.text:00005F24                 mov     esp, ebp
.text:00005F26                 pop     ebp
.text:00005F27                 retn
.text:00005F27 ??1CMemBlockManager@@QAE@XZ endp
.text:00005F27
.text:00005F27 _text           ends
.text:00005F27
.text:00005F28 ; ===========================================================================
.text:00005F28
.text:00005F28 ; Segment type: Pure code
.text:00005F28 ; Segment permissions: Read/Execute
.text:00005F28 _text           segment para public 'CODE' use32
.text:00005F28                 assume cs:_text
.text:00005F28                 ;org 5F28h
.text:00005F28 ; COMDAT (pick any)
.text:00005F28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F28
.text:00005F28 ; =============== S U B R O U T I N E =======================================
.text:00005F28
.text:00005F28 ; Attributes: bp-based frame
.text:00005F28
.text:00005F28 ; _DWORD __thiscall CMemBlockManagerMt::~CMemBlockManagerMt(CMemBlockManagerMt *__hidden this)
.text:00005F28                 public ??1CMemBlockManagerMt@@QAE@XZ
.text:00005F28 ??1CMemBlockManagerMt@@QAE@XZ proc near ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+70Dp
.text:00005F28                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+903p ...
.text:00005F28
.text:00005F28 var_10          = dword ptr -10h
.text:00005F28 var_C           = dword ptr -0Ch
.text:00005F28 var_4           = dword ptr -4
.text:00005F28
.text:00005F28                 push    ebp
.text:00005F29                 mov     ebp, esp
.text:00005F2B                 push    0FFFFFFFFh
.text:00005F2D                 push    offset __ehhandler$??1CMemBlockManagerMt@@QAE@XZ
.text:00005F32                 mov     eax, large fs:0
.text:00005F38                 push    eax
.text:00005F39                 push    ecx
.text:00005F3A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005F41                 mov     eax, dword ptr ds:___security_cookie
.text:00005F46                 xor     eax, ebp
.text:00005F48                 push    eax
.text:00005F49                 lea     eax, [ebp+var_C]
.text:00005F4C                 mov     large fs:0, eax
.text:00005F52                 mov     [ebp+var_10], ecx
.text:00005F55                 mov     [ebp+var_4], 2
.text:00005F5C                 mov     ecx, [ebp+var_10] ; this
.text:00005F5F                 call    ?FreeSpace@CMemBlockManagerMt@@QAEXXZ ; CMemBlockManagerMt::FreeSpace(void)
.text:00005F64                 mov     byte ptr [ebp+var_4], 1
.text:00005F68                 mov     ecx, [ebp+var_10]
.text:00005F6B                 add     ecx, 24h ; '$'  ; this
.text:00005F6E                 call    ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::~CSemaphore(void)
.text:00005F73                 mov     byte ptr [ebp+var_4], 0
.text:00005F77                 mov     ecx, [ebp+var_10]
.text:00005F7A                 add     ecx, 0Ch        ; this
.text:00005F7D                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:00005F82                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005F89                 mov     ecx, [ebp+var_10] ; this
.text:00005F8C                 call    ??1CMemBlockManager@@QAE@XZ ; CMemBlockManager::~CMemBlockManager(void)
.text:00005F91                 mov     ecx, [ebp+var_C]
.text:00005F94                 mov     large fs:0, ecx
.text:00005F9B                 pop     ecx
.text:00005F9C                 add     esp, 10h
.text:00005F9F                 cmp     ebp, esp
.text:00005FA1                 call    __RTC_CheckEsp
.text:00005FA6                 mov     esp, ebp
.text:00005FA8                 pop     ebp
.text:00005FA9                 retn
.text:00005FA9 ??1CMemBlockManagerMt@@QAE@XZ endp
.text:00005FA9
.text:00005FA9 ; ---------------------------------------------------------------------------
.text:00005FAA                 align 4
.text:00005FAA _text           ends
.text:00005FAA
.text$x:00005FAC ; ===========================================================================
.text$x:00005FAC
.text$x:00005FAC ; Segment type: Pure code
.text$x:00005FAC ; Segment permissions: Read/Execute
.text$x:00005FAC _text$x         segment para public 'CODE' use32
.text$x:00005FAC                 assume cs:_text$x
.text$x:00005FAC                 ;org 5FACh
.text$x:00005FAC ; COMDAT (pick associative to section at 5F28)
.text$x:00005FAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005FAC
.text$x:00005FAC ; =============== S U B R O U T I N E =======================================
.text$x:00005FAC
.text$x:00005FAC
.text$x:00005FAC __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$0 proc near
.text$x:00005FAC                                         ; DATA XREF: .xdata$x:00005FECo
.text$x:00005FAC                 mov     ecx, [ebp-10h]  ; this
.text$x:00005FAF                 jmp     ??1CMemBlockManager@@QAE@XZ ; CMemBlockManager::~CMemBlockManager(void)
.text$x:00005FAF __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$0 endp
.text$x:00005FAF
.text$x:00005FB4
.text$x:00005FB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005FB4
.text$x:00005FB4
.text$x:00005FB4 __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$1 proc near
.text$x:00005FB4                                         ; DATA XREF: .xdata$x:00005FF4o
.text$x:00005FB4                 mov     ecx, [ebp-10h]
.text$x:00005FB7                 add     ecx, 0Ch        ; this
.text$x:00005FBA                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00005FBA __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$1 endp
.text$x:00005FBA
.text$x:00005FBF
.text$x:00005FBF ; =============== S U B R O U T I N E =======================================
.text$x:00005FBF
.text$x:00005FBF
.text$x:00005FBF __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2 proc near
.text$x:00005FBF                                         ; DATA XREF: .xdata$x:00005FFCo
.text$x:00005FBF                 mov     ecx, [ebp-10h]
.text$x:00005FC2                 add     ecx, 24h ; '$'  ; this
.text$x:00005FC5                 jmp     ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::~CSemaphore(void)
.text$x:00005FC5 __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2 endp
.text$x:00005FC5
.text$x:00005FCA
.text$x:00005FCA ; =============== S U B R O U T I N E =======================================
.text$x:00005FCA
.text$x:00005FCA
.text$x:00005FCA __ehhandler$??1CMemBlockManagerMt@@QAE@XZ proc near
.text$x:00005FCA                                         ; DATA XREF: CMemBlockManagerMt::~CMemBlockManagerMt(void)+5o
.text$x:00005FCA
.text$x:00005FCA arg_4           = dword ptr  8
.text$x:00005FCA
.text$x:00005FCA                 mov     edx, [esp+arg_4]
.text$x:00005FCE                 lea     eax, [edx+0Ch]
.text$x:00005FD1                 mov     ecx, [edx-8]
.text$x:00005FD4                 xor     ecx, eax
.text$x:00005FD6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005FDB                 mov     eax, offset __ehfuncinfo$??1CMemBlockManagerMt@@QAE@XZ
.text$x:00005FE0                 jmp     ___CxxFrameHandler3
.text$x:00005FE0 __ehhandler$??1CMemBlockManagerMt@@QAE@XZ endp
.text$x:00005FE0
.text$x:00005FE0 ; ---------------------------------------------------------------------------
.text$x:00005FE5                 align 4
.text$x:00005FE5 _text$x         ends
.text$x:00005FE5
.xdata$x:00005FE8 ; ===========================================================================
.xdata$x:00005FE8
.xdata$x:00005FE8 ; Segment type: Pure data
.xdata$x:00005FE8 ; Segment permissions: Read
.xdata$x:00005FE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005FE8                 assume cs:_xdata$x
.xdata$x:00005FE8                 ;org 5FE8h
.xdata$x:00005FE8 ; COMDAT (pick associative to section at 5F28)
.xdata$x:00005FE8 __unwindtable$??1CMemBlockManagerMt@@QAE@XZ db 0FFh
.xdata$x:00005FE8                                         ; DATA XREF: .xdata$x:00006008o
.xdata$x:00005FE9                 db 0FFh
.xdata$x:00005FEA                 db 0FFh
.xdata$x:00005FEB                 db 0FFh
.xdata$x:00005FEC                 dd offset __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$0
.xdata$x:00005FF0                 db    0
.xdata$x:00005FF1                 db    0
.xdata$x:00005FF2                 db    0
.xdata$x:00005FF3                 db    0
.xdata$x:00005FF4                 dd offset __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$1
.xdata$x:00005FF8                 db    1
.xdata$x:00005FF9                 db    0
.xdata$x:00005FFA                 db    0
.xdata$x:00005FFB                 db    0
.xdata$x:00005FFC                 dd offset __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2
.xdata$x:00006000 __ehfuncinfo$??1CMemBlockManagerMt@@QAE@XZ db  22h ; "
.xdata$x:00006000                                         ; DATA XREF: __ehhandler$??1CMemBlockManagerMt@@QAE@XZ+11o
.xdata$x:00006001                 db    5
.xdata$x:00006002                 db  93h ; ô
.xdata$x:00006003                 db  19h
.xdata$x:00006004                 db    3
.xdata$x:00006005                 db    0
.xdata$x:00006006                 db    0
.xdata$x:00006007                 db    0
.xdata$x:00006008                 dd offset __unwindtable$??1CMemBlockManagerMt@@QAE@XZ
.xdata$x:0000600C                 align 20h
.xdata$x:00006020                 db    1
.xdata$x:00006021                 db    0
.xdata$x:00006022                 db    0
.xdata$x:00006023                 db    0
.xdata$x:00006023 _xdata$x        ends
.xdata$x:00006023
.text:00006024 ; ===========================================================================
.text:00006024
.text:00006024 ; Segment type: Pure code
.text:00006024 ; Segment permissions: Read/Execute
.text:00006024 _text           segment para public 'CODE' use32
.text:00006024                 assume cs:_text
.text:00006024                 ;org 6024h
.text:00006024 ; COMDAT (pick any)
.text:00006024                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006024
.text:00006024 ; =============== S U B R O U T I N E =======================================
.text:00006024
.text:00006024 ; Attributes: bp-based frame
.text:00006024
.text:00006024 ; _DWORD __thiscall NWindows::NSynchronization::CSemaphore::~CSemaphore(NWindows::NSynchronization::CSemaphore *__hidden this)
.text:00006024                 public ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ
.text:00006024 ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006024                                         ; CODE XREF: CMemBlockManagerMt::~CMemBlockManagerMt(void)+46p
.text:00006024                                         ; __unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2+6j
.text:00006024
.text:00006024 var_4           = dword ptr -4
.text:00006024
.text:00006024                 push    ebp
.text:00006025                 mov     ebp, esp
.text:00006027                 push    ecx
.text:00006028                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000602F                 mov     [ebp+var_4], ecx
.text:00006032                 mov     ecx, [ebp+var_4] ; this
.text:00006035                 call    ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close(void)
.text:0000603A                 add     esp, 4
.text:0000603D                 cmp     ebp, esp
.text:0000603F                 call    __RTC_CheckEsp
.text:00006044                 mov     esp, ebp
.text:00006046                 pop     ebp
.text:00006047                 retn
.text:00006047 ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ endp
.text:00006047
.text:00006047 _text           ends
.text:00006047
.text:00006048 ; ===========================================================================
.text:00006048
.text:00006048 ; Segment type: Pure code
.text:00006048 ; Segment permissions: Read/Execute
.text:00006048 _text           segment para public 'CODE' use32
.text:00006048                 assume cs:_text
.text:00006048                 ;org 6048h
.text:00006048 ; COMDAT (pick any)
.text:00006048                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006048
.text:00006048 ; =============== S U B R O U T I N E =======================================
.text:00006048
.text:00006048 ; Attributes: bp-based frame
.text:00006048
.text:00006048 ; unsigned int __thiscall NWindows::NSynchronization::CSemaphore::Close(NWindows::NSynchronization::CSemaphore *__hidden this)
.text:00006048                 public ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ
.text:00006048 ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ proc near
.text:00006048                                         ; CODE XREF: NWindows::NSynchronization::CSemaphore::~CSemaphore(void)+11p
.text:00006048
.text:00006048 var_4           = dword ptr -4
.text:00006048
.text:00006048                 push    ebp
.text:00006049                 mov     ebp, esp
.text:0000604B                 push    ecx
.text:0000604C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006053                 mov     [ebp+var_4], ecx
.text:00006056                 mov     eax, [ebp+var_4]
.text:00006059                 push    eax
.text:0000605A                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000605F                 add     esp, 4
.text:00006062                 cmp     ebp, esp
.text:00006064                 call    __RTC_CheckEsp
.text:00006069                 mov     esp, ebp
.text:0000606B                 pop     ebp
.text:0000606C                 retn
.text:0000606C ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ endp
.text:0000606C
.text:0000606C ; ---------------------------------------------------------------------------
.text:0000606D                 align 10h
.text:0000606D _text           ends
.text:0000606D
.text:00006070 ; ===========================================================================
.text:00006070
.text:00006070 ; Segment type: Pure code
.text:00006070 ; Segment permissions: Read/Execute
.text:00006070 _text           segment para public 'CODE' use32
.text:00006070                 assume cs:_text
.text:00006070                 ;org 6070h
.text:00006070 ; COMDAT (pick any)
.text:00006070                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006070
.text:00006070 ; =============== S U B R O U T I N E =======================================
.text:00006070
.text:00006070 ; Attributes: bp-based frame
.text:00006070
.text:00006070 ; int __thiscall COutMemStream::CreateEvents(COutMemStream *__hidden this)
.text:00006070                 public ?CreateEvents@COutMemStream@@QAEHXZ
.text:00006070 ?CreateEvents@COutMemStream@@QAEHXZ proc near
.text:00006070                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+9D6p
.text:00006070
.text:00006070 var_8           = dword ptr -8
.text:00006070 var_4           = dword ptr -4
.text:00006070
.text:00006070                 push    ebp
.text:00006071                 mov     ebp, esp
.text:00006073                 sub     esp, 8
.text:00006076                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000607D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006084                 mov     [ebp+var_4], ecx
.text:00006087                 mov     ecx, [ebp+var_4]
.text:0000608A                 add     ecx, 18h        ; this
.text:0000608D                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:00006092                 mov     [ebp+var_8], eax
.text:00006095                 cmp     [ebp+var_8], 0
.text:00006099                 jz      short loc_60A0
.text:0000609B                 mov     eax, [ebp+var_8]
.text:0000609E                 jmp     short loc_60AB
.text:000060A0 ; ---------------------------------------------------------------------------
.text:000060A0
.text:000060A0 loc_60A0:                               ; CODE XREF: COutMemStream::CreateEvents(void)+29j
.text:000060A0                 mov     ecx, [ebp+var_4]
.text:000060A3                 add     ecx, 1Ch        ; this
.text:000060A6                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:000060AB
.text:000060AB loc_60AB:                               ; CODE XREF: COutMemStream::CreateEvents(void)+2Ej
.text:000060AB                 add     esp, 8
.text:000060AE                 cmp     ebp, esp
.text:000060B0                 call    __RTC_CheckEsp
.text:000060B5                 mov     esp, ebp
.text:000060B7                 pop     ebp
.text:000060B8                 retn
.text:000060B8 ?CreateEvents@COutMemStream@@QAEHXZ endp
.text:000060B8
.text:000060B8 ; ---------------------------------------------------------------------------
.text:000060B9                 align 4
.text:000060B9 _text           ends
.text:000060B9
.text:000060BC ; ===========================================================================
.text:000060BC
.text:000060BC ; Segment type: Pure code
.text:000060BC ; Segment permissions: Read/Execute
.text:000060BC _text           segment para public 'CODE' use32
.text:000060BC                 assume cs:_text
.text:000060BC                 ;org 60BCh
.text:000060BC ; COMDAT (pick any)
.text:000060BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060BC
.text:000060BC ; =============== S U B R O U T I N E =======================================
.text:000060BC
.text:000060BC ; Attributes: bp-based frame
.text:000060BC
.text:000060BC ; unsigned int __thiscall NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:000060BC                 public ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:000060BC ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000060BC                                         ; CODE XREF: COutMemStream::CreateEvents(void)+1Dp
.text:000060BC                                         ; COutMemStream::CreateEvents(void)+36p ...
.text:000060BC
.text:000060BC var_4           = dword ptr -4
.text:000060BC
.text:000060BC                 push    ebp
.text:000060BD                 mov     ebp, esp
.text:000060BF                 push    ecx
.text:000060C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060C7                 mov     [ebp+var_4], ecx
.text:000060CA                 mov     ecx, [ebp+var_4] ; this
.text:000060CD                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:000060D2                 movzx   eax, al
.text:000060D5                 test    eax, eax
.text:000060D7                 jz      short loc_60DD
.text:000060D9                 xor     eax, eax
.text:000060DB                 jmp     short loc_60E6
.text:000060DD ; ---------------------------------------------------------------------------
.text:000060DD
.text:000060DD loc_60DD:                               ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Bj
.text:000060DD                 mov     ecx, [ebp+var_4]
.text:000060E0                 push    ecx
.text:000060E1                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:000060E6
.text:000060E6 loc_60E6:                               ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Fj
.text:000060E6                 add     esp, 4
.text:000060E9                 cmp     ebp, esp
.text:000060EB                 call    __RTC_CheckEsp
.text:000060F0                 mov     esp, ebp
.text:000060F2                 pop     ebp
.text:000060F3                 retn
.text:000060F3 ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000060F3
.text:000060F3 _text           ends
.text:000060F3
.text:000060F4 ; ===========================================================================
.text:000060F4
.text:000060F4 ; Segment type: Pure code
.text:000060F4 ; Segment permissions: Read/Execute
.text:000060F4 _text           segment para public 'CODE' use32
.text:000060F4                 assume cs:_text
.text:000060F4                 ;org 60F4h
.text:000060F4 ; COMDAT (pick any)
.text:000060F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060F4
.text:000060F4 ; =============== S U B R O U T I N E =======================================
.text:000060F4
.text:000060F4 ; Attributes: bp-based frame
.text:000060F4
.text:000060F4 ; bool __thiscall NWindows::NSynchronization::CBaseEvent::IsCreated(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000060F4                 public ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ
.text:000060F4 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ proc near
.text:000060F4                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+11p
.text:000060F4                                         ; NArchive::NZip::CThreadInfo::StopWaitClose(void)+34p
.text:000060F4
.text:000060F4 var_4           = dword ptr -4
.text:000060F4
.text:000060F4                 push    ebp
.text:000060F5                 mov     ebp, esp
.text:000060F7                 push    ecx
.text:000060F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060FF                 mov     [ebp+var_4], ecx
.text:00006102                 mov     eax, [ebp+var_4]
.text:00006105                 xor     ecx, ecx
.text:00006107                 cmp     dword ptr [eax], 0
.text:0000610A                 setnz   cl
.text:0000610D                 neg     ecx
.text:0000610F                 sbb     ecx, ecx
.text:00006111                 neg     ecx
.text:00006113                 mov     al, cl
.text:00006115                 mov     esp, ebp
.text:00006117                 pop     ebp
.text:00006118                 retn
.text:00006118 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ endp
.text:00006118
.text:00006118 ; ---------------------------------------------------------------------------
.text:00006119                 align 4
.text:00006119 _text           ends
.text:00006119
.text:0000611C ; ===========================================================================
.text:0000611C
.text:0000611C ; Segment type: Pure code
.text:0000611C ; Segment permissions: Read/Execute
.text:0000611C _text           segment para public 'CODE' use32
.text:0000611C                 assume cs:_text
.text:0000611C                 ;org 611Ch
.text:0000611C ; COMDAT (pick any)
.text:0000611C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000611C
.text:0000611C ; =============== S U B R O U T I N E =======================================
.text:0000611C
.text:0000611C ; Attributes: bp-based frame
.text:0000611C
.text:0000611C ; void __thiscall COutMemStream::SetOutStream(COutMemStream *this, struct IOutStream *)
.text:0000611C                 public ?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z
.text:0000611C ?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z proc near
.text:0000611C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1911p
.text:0000611C
.text:0000611C var_4           = dword ptr -4
.text:0000611C arg_0           = dword ptr  8
.text:0000611C
.text:0000611C                 push    ebp
.text:0000611D                 mov     ebp, esp
.text:0000611F                 push    ecx
.text:00006120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006127                 mov     [ebp+var_4], ecx
.text:0000612A                 mov     eax, [ebp+arg_0]
.text:0000612D                 push    eax
.text:0000612E                 mov     ecx, [ebp+var_4]
.text:00006131                 add     ecx, 4Ch ; 'L'
.text:00006134                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:00006139                 mov     ecx, [ebp+arg_0]
.text:0000613C                 push    ecx
.text:0000613D                 mov     ecx, [ebp+var_4]
.text:00006140                 add     ecx, 48h ; 'H'
.text:00006143                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00006148                 add     esp, 4
.text:0000614B                 cmp     ebp, esp
.text:0000614D                 call    __RTC_CheckEsp
.text:00006152                 mov     esp, ebp
.text:00006154                 pop     ebp
.text:00006155                 retn    4
.text:00006155 ?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z endp
.text:00006155
.text:00006155 _text           ends
.text:00006155
.text:00006158 ; ===========================================================================
.text:00006158
.text:00006158 ; Segment type: Pure code
.text:00006158 ; Segment permissions: Read/Execute
.text:00006158 _text           segment para public 'CODE' use32
.text:00006158                 assume cs:_text
.text:00006158                 ;org 6158h
.text:00006158 ; COMDAT (pick any)
.text:00006158                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006158
.text:00006158 ; =============== S U B R O U T I N E =======================================
.text:00006158
.text:00006158 ; Attributes: bp-based frame
.text:00006158
.text:00006158 ; void __thiscall COutMemStream::ReleaseOutStream(COutMemStream *__hidden this)
.text:00006158                 public ?ReleaseOutStream@COutMemStream@@QAEXXZ
.text:00006158 ?ReleaseOutStream@COutMemStream@@QAEXXZ proc near
.text:00006158                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1DEBp
.text:00006158
.text:00006158 var_4           = dword ptr -4
.text:00006158
.text:00006158                 push    ebp
.text:00006159                 mov     ebp, esp
.text:0000615B                 push    ecx
.text:0000615C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006163                 mov     [ebp+var_4], ecx
.text:00006166                 mov     ecx, [ebp+var_4]
.text:00006169                 add     ecx, 4Ch ; 'L'
.text:0000616C                 call    ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ; CMyComPtr<IOutStream>::Release(void)
.text:00006171                 mov     ecx, [ebp+var_4]
.text:00006174                 add     ecx, 48h ; 'H'
.text:00006177                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000617C                 add     esp, 4
.text:0000617F                 cmp     ebp, esp
.text:00006181                 call    __RTC_CheckEsp
.text:00006186                 mov     esp, ebp
.text:00006188                 pop     ebp
.text:00006189                 retn
.text:00006189 ?ReleaseOutStream@COutMemStream@@QAEXXZ endp
.text:00006189
.text:00006189 ; ---------------------------------------------------------------------------
.text:0000618A                 align 4
.text:0000618A _text           ends
.text:0000618A
.text:0000618C ; ===========================================================================
.text:0000618C
.text:0000618C ; Segment type: Pure code
.text:0000618C ; Segment permissions: Read/Execute
.text:0000618C _text           segment para public 'CODE' use32
.text:0000618C                 assume cs:_text
.text:0000618C                 ;org 618Ch
.text:0000618C ; COMDAT (pick any)
.text:0000618C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000618C
.text:0000618C ; =============== S U B R O U T I N E =======================================
.text:0000618C
.text:0000618C ; Attributes: bp-based frame
.text:0000618C
.text:0000618C ; public: __thiscall COutMemStream::COutMemStream(class CMemBlockManagerMt *)
.text:0000618C                 public ??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
.text:0000618C ??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z proc near
.text:0000618C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+997p
.text:0000618C
.text:0000618C var_10          = dword ptr -10h
.text:0000618C var_C           = dword ptr -0Ch
.text:0000618C var_4           = dword ptr -4
.text:0000618C arg_0           = dword ptr  8
.text:0000618C
.text:0000618C                 push    ebp
.text:0000618D                 mov     ebp, esp
.text:0000618F                 push    0FFFFFFFFh
.text:00006191                 push    offset __ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
.text:00006196                 mov     eax, large fs:0
.text:0000619C                 push    eax
.text:0000619D                 push    ecx
.text:0000619E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000061A5                 mov     eax, dword ptr ds:___security_cookie
.text:000061AA                 xor     eax, ebp
.text:000061AC                 push    eax
.text:000061AD                 lea     eax, [ebp+var_C]
.text:000061B0                 mov     large fs:0, eax
.text:000061B6                 mov     [ebp+var_10], ecx
.text:000061B9                 mov     ecx, [ebp+var_10] ; this
.text:000061BC                 call    ??0IOutStream@@QAE@XZ ; IOutStream::IOutStream(void)
.text:000061C1                 mov     ecx, [ebp+var_10]
.text:000061C4                 add     ecx, 4          ; this
.text:000061C7                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000061CC                 mov     eax, [ebp+var_10]
.text:000061CF                 mov     dword ptr [eax], offset ??_7COutMemStream@@6B@ ; const COutMemStream::`vftable'
.text:000061D5                 mov     ecx, [ebp+var_10]
.text:000061D8                 mov     edx, [ebp+arg_0]
.text:000061DB                 mov     [ecx+8], edx
.text:000061DE                 mov     ecx, [ebp+var_10]
.text:000061E1                 add     ecx, 18h        ; this
.text:000061E4                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000061E9                 mov     [ebp+var_4], 0
.text:000061F0                 mov     ecx, [ebp+var_10]
.text:000061F3                 add     ecx, 1Ch        ; this
.text:000061F6                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000061FB                 mov     byte ptr [ebp+var_4], 1
.text:000061FF                 mov     ecx, [ebp+var_10]
.text:00006202                 add     ecx, 28h ; '('  ; this
.text:00006205                 call    ??0CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::CMemLockBlocks(void)
.text:0000620A                 mov     byte ptr [ebp+var_4], 2
.text:0000620E                 mov     ecx, [ebp+var_10]
.text:00006211                 add     ecx, 48h ; 'H'
.text:00006214                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00006219                 mov     byte ptr [ebp+var_4], 3
.text:0000621D                 mov     ecx, [ebp+var_10]
.text:00006220                 add     ecx, 4Ch ; 'L'
.text:00006223                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00006228                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000622F                 mov     eax, [ebp+var_10]
.text:00006232                 mov     ecx, [ebp+var_C]
.text:00006235                 mov     large fs:0, ecx
.text:0000623C                 pop     ecx
.text:0000623D                 add     esp, 10h
.text:00006240                 cmp     ebp, esp
.text:00006242                 call    __RTC_CheckEsp
.text:00006247                 mov     esp, ebp
.text:00006249                 pop     ebp
.text:0000624A                 retn    4
.text:0000624A ??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z endp
.text:0000624A
.text:0000624A ; ---------------------------------------------------------------------------
.text:0000624D                 align 10h
.text:0000624D _text           ends
.text:0000624D
.text$x:00006250 ; ===========================================================================
.text$x:00006250
.text$x:00006250 ; Segment type: Pure code
.text$x:00006250 ; Segment permissions: Read/Execute
.text$x:00006250 _text$x         segment para public 'CODE' use32
.text$x:00006250                 assume cs:_text$x
.text$x:00006250                 ;org 6250h
.text$x:00006250 ; COMDAT (pick associative to section at 618C)
.text$x:00006250                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006250
.text$x:00006250 ; =============== S U B R O U T I N E =======================================
.text$x:00006250
.text$x:00006250
.text$x:00006250 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0 proc near
.text$x:00006250                                         ; DATA XREF: .xdata$x:000062B8o
.text$x:00006250                 mov     ecx, [ebp-10h]
.text$x:00006253                 add     ecx, 18h        ; this
.text$x:00006256                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00006256 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0 endp
.text$x:00006256
.text$x:0000625B
.text$x:0000625B ; =============== S U B R O U T I N E =======================================
.text$x:0000625B
.text$x:0000625B
.text$x:0000625B __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1 proc near
.text$x:0000625B                                         ; DATA XREF: .xdata$x:000062C0o
.text$x:0000625B                 mov     ecx, [ebp-10h]
.text$x:0000625E                 add     ecx, 1Ch        ; this
.text$x:00006261                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00006261 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1 endp
.text$x:00006261
.text$x:00006266
.text$x:00006266 ; =============== S U B R O U T I N E =======================================
.text$x:00006266
.text$x:00006266
.text$x:00006266 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2 proc near
.text$x:00006266                                         ; DATA XREF: .xdata$x:000062C8o
.text$x:00006266                 mov     ecx, [ebp-10h]
.text$x:00006269                 add     ecx, 28h ; '('  ; this
.text$x:0000626C                 jmp     ??1CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::~CMemLockBlocks(void)
.text$x:0000626C __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2 endp
.text$x:0000626C
.text$x:00006271
.text$x:00006271 ; =============== S U B R O U T I N E =======================================
.text$x:00006271
.text$x:00006271
.text$x:00006271 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$3 proc near
.text$x:00006271                                         ; DATA XREF: .xdata$x:000062D0o
.text$x:00006271                 mov     ecx, [ebp-10h]
.text$x:00006274                 add     ecx, 48h ; 'H'
.text$x:00006277                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00006277 __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$3 endp
.text$x:00006277
.text$x:0000627C
.text$x:0000627C ; =============== S U B R O U T I N E =======================================
.text$x:0000627C
.text$x:0000627C
.text$x:0000627C __ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z proc near
.text$x:0000627C                                         ; DATA XREF: COutMemStream::COutMemStream(CMemBlockManagerMt *)+5o
.text$x:0000627C
.text$x:0000627C arg_4           = dword ptr  8
.text$x:0000627C
.text$x:0000627C                 mov     edx, [esp+arg_4]
.text$x:00006280                 lea     eax, [edx+0Ch]
.text$x:00006283                 mov     ecx, [edx-8]
.text$x:00006286                 xor     ecx, eax
.text$x:00006288                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000628D                 mov     eax, offset __ehfuncinfo$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
.text$x:00006292                 jmp     ___CxxFrameHandler3
.text$x:00006292 __ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z endp
.text$x:00006292
.text$x:00006292 ; ---------------------------------------------------------------------------
.text$x:00006297                 align 4
.text$x:00006297 _text$x         ends
.text$x:00006297
.rdata:00006298 ; ===========================================================================
.rdata:00006298
.rdata:00006298 ; Segment type: Pure data
.rdata:00006298 ; Segment permissions: Read
.rdata:00006298 _rdata          segment dword public 'DATA' use32
.rdata:00006298                 assume cs:_rdata
.rdata:00006298                 ;org 6298h
.rdata:00006298 ; COMDAT (pick largest)
.rdata:00006298                 dd offset ??_R4COutMemStream@@6B@ ; const COutMemStream::`RTTI Complete Object Locator'
.rdata:0000629C                 public ??_7COutMemStream@@6B@
.rdata:0000629C ; const COutMemStream::`vftable'
.rdata:0000629C ??_7COutMemStream@@6B@ dd offset ?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000629C                                         ; DATA XREF: COutMemStream::COutMemStream(CMemBlockManagerMt *)+43o
.rdata:0000629C                                         ; COutMemStream::~COutMemStream(void)+30o
.rdata:0000629C                                         ; COutMemStream::QueryInterface(_GUID const &,void * *)
.rdata:000062A0                 dd offset ?AddRef@COutMemStream@@UAGKXZ ; COutMemStream::AddRef(void)
.rdata:000062A4                 dd offset ?Release@COutMemStream@@UAGKXZ ; COutMemStream::Release(void)
.rdata:000062A8                 dd offset ?Write@COutMemStream@@UAGJPBXIPAI@Z ; COutMemStream::Write(void const *,uint,uint *)
.rdata:000062AC                 dd offset ?Seek@COutMemStream@@UAGJ_JIPA_K@Z ; COutMemStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:000062B0                 dd offset ?SetSize@COutMemStream@@UAGJ_K@Z ; COutMemStream::SetSize(unsigned __int64)
.rdata:000062B0 _rdata          ends
.rdata:000062B0
.xdata$x:000062B4 ; ===========================================================================
.xdata$x:000062B4
.xdata$x:000062B4 ; Segment type: Pure data
.xdata$x:000062B4 ; Segment permissions: Read
.xdata$x:000062B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000062B4                 assume cs:_xdata$x
.xdata$x:000062B4                 ;org 62B4h
.xdata$x:000062B4 ; COMDAT (pick associative to section at 618C)
.xdata$x:000062B4 __unwindtable$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z db 0FFh
.xdata$x:000062B4                                         ; DATA XREF: .xdata$x:000062DCo
.xdata$x:000062B5                 db 0FFh
.xdata$x:000062B6                 db 0FFh
.xdata$x:000062B7                 db 0FFh
.xdata$x:000062B8                 dd offset __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0
.xdata$x:000062BC                 align 10h
.xdata$x:000062C0                 dd offset __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1
.xdata$x:000062C4                 db    1
.xdata$x:000062C5                 db    0
.xdata$x:000062C6                 db    0
.xdata$x:000062C7                 db    0
.xdata$x:000062C8                 dd offset __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2
.xdata$x:000062CC                 db    2
.xdata$x:000062CD                 db    0
.xdata$x:000062CE                 db    0
.xdata$x:000062CF                 db    0
.xdata$x:000062D0                 dd offset __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$3
.xdata$x:000062D4 __ehfuncinfo$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z db  22h ; "
.xdata$x:000062D4                                         ; DATA XREF: __ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z+11o
.xdata$x:000062D5                 db    5
.xdata$x:000062D6                 db  93h ; ô
.xdata$x:000062D7                 db  19h
.xdata$x:000062D8                 db    4
.xdata$x:000062D9                 db    0
.xdata$x:000062DA                 db    0
.xdata$x:000062DB                 db    0
.xdata$x:000062DC                 dd offset __unwindtable$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
.xdata$x:000062E0                 db    0
.xdata$x:000062E1                 db    0
.xdata$x:000062E2                 db    0
.xdata$x:000062E3                 db    0
.xdata$x:000062E4                 db    0
.xdata$x:000062E5                 db    0
.xdata$x:000062E6                 db    0
.xdata$x:000062E7                 db    0
.xdata$x:000062E8                 db    0
.xdata$x:000062E9                 db    0
.xdata$x:000062EA                 db    0
.xdata$x:000062EB                 db    0
.xdata$x:000062EC                 db    0
.xdata$x:000062ED                 db    0
.xdata$x:000062EE                 db    0
.xdata$x:000062EF                 db    0
.xdata$x:000062F0                 db    0
.xdata$x:000062F1                 db    0
.xdata$x:000062F2                 db    0
.xdata$x:000062F3                 db    0
.xdata$x:000062F4                 db    1
.xdata$x:000062F5                 db    0
.xdata$x:000062F6                 db    0
.xdata$x:000062F7                 db    0
.xdata$x:000062F7 _xdata$x        ends
.xdata$x:000062F7
.rdata$r:000062F8 ; ===========================================================================
.rdata$r:000062F8
.rdata$r:000062F8 ; Segment type: Pure data
.rdata$r:000062F8 ; Segment permissions: Read
.rdata$r:000062F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062F8                 assume cs:_rdata$r
.rdata$r:000062F8                 ;org 62F8h
.rdata$r:000062F8 ; COMDAT (pick any)
.rdata$r:000062F8                 public ??_R4COutMemStream@@6B@
.rdata$r:000062F8 ; const COutMemStream::`RTTI Complete Object Locator'
.rdata$r:000062F8 ??_R4COutMemStream@@6B@ db    0         ; DATA XREF: .rdata:00006298o
.rdata$r:000062F9                 db    0
.rdata$r:000062FA                 db    0
.rdata$r:000062FB                 db    0
.rdata$r:000062FC                 db    0
.rdata$r:000062FD                 db    0
.rdata$r:000062FE                 db    0
.rdata$r:000062FF                 db    0
.rdata$r:00006300                 db    0
.rdata$r:00006301                 db    0
.rdata$r:00006302                 db    0
.rdata$r:00006303                 db    0
.rdata$r:00006304                 dd offset ??_R0?AVCOutMemStream@@@8 ; COutMemStream `RTTI Type Descriptor'
.rdata$r:00006308                 dd offset ??_R3COutMemStream@@8 ; COutMemStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006308 _rdata$r        ends
.rdata$r:00006308
.data:0000630C ; ===========================================================================
.data:0000630C
.data:0000630C ; Segment type: Pure data
.data:0000630C ; Segment permissions: Read/Write
.data:0000630C _data           segment dword public 'DATA' use32
.data:0000630C                 assume cs:_data
.data:0000630C                 ;org 630Ch
.data:0000630C ; COMDAT (pick any)
.data:0000630C                 public ??_R0?AVCOutMemStream@@@8
.data:0000630C ; class COutMemStream `RTTI Type Descriptor'
.data:0000630C ??_R0?AVCOutMemStream@@@8 dd offset ??_7type_info@@6B@
.data:0000630C                                         ; DATA XREF: .rdata$r:00006304o
.data:0000630C                                         ; .rdata$r:COutMemStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000630C                                         ; const type_info::`vftable'
.data:00006310                 db    0
.data:00006311                 db    0
.data:00006312                 db    0
.data:00006313                 db    0
.data:00006314                 db  2Eh ; .
.data:00006315                 db  3Fh ; ?
.data:00006316                 db  41h ; A
.data:00006317                 db  56h ; V
.data:00006318                 db  43h ; C
.data:00006319                 db  4Fh ; O
.data:0000631A                 db  75h ; u
.data:0000631B                 db  74h ; t
.data:0000631C                 db  4Dh ; M
.data:0000631D                 db  65h ; e
.data:0000631E                 db  6Dh ; m
.data:0000631F                 db  53h ; S
.data:00006320                 db  74h ; t
.data:00006321                 db  72h ; r
.data:00006322                 db  65h ; e
.data:00006323                 db  61h ; a
.data:00006324                 db  6Dh ; m
.data:00006325                 db  40h ; @
.data:00006326                 db  40h ; @
.data:00006327                 db    0
.data:00006327 _data           ends
.data:00006327
.rdata$r:00006328 ; ===========================================================================
.rdata$r:00006328
.rdata$r:00006328 ; Segment type: Pure data
.rdata$r:00006328 ; Segment permissions: Read
.rdata$r:00006328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006328                 assume cs:_rdata$r
.rdata$r:00006328                 ;org 6328h
.rdata$r:00006328 ; COMDAT (pick any)
.rdata$r:00006328                 public ??_R3COutMemStream@@8
.rdata$r:00006328 ; COutMemStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006328 ??_R3COutMemStream@@8 db    0           ; DATA XREF: .rdata$r:00006308o
.rdata$r:00006328                                         ; .rdata$r:00006368o
.rdata$r:00006329                 db    0
.rdata$r:0000632A                 db    0
.rdata$r:0000632B                 db    0
.rdata$r:0000632C                 db    1
.rdata$r:0000632D                 db    0
.rdata$r:0000632E                 db    0
.rdata$r:0000632F                 db    0
.rdata$r:00006330                 db    5
.rdata$r:00006331                 db    0
.rdata$r:00006332                 db    0
.rdata$r:00006333                 db    0
.rdata$r:00006334                 dd offset ??_R2COutMemStream@@8 ; COutMemStream::`RTTI Base Class Array'
.rdata$r:00006334 _rdata$r        ends
.rdata$r:00006334
.rdata$r:00006338 ; ===========================================================================
.rdata$r:00006338
.rdata$r:00006338 ; Segment type: Pure data
.rdata$r:00006338 ; Segment permissions: Read
.rdata$r:00006338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006338                 assume cs:_rdata$r
.rdata$r:00006338                 ;org 6338h
.rdata$r:00006338 ; COMDAT (pick any)
.rdata$r:00006338                 public ??_R2COutMemStream@@8
.rdata$r:00006338 ; COutMemStream::`RTTI Base Class Array'
.rdata$r:00006338 ??_R2COutMemStream@@8 dd offset ??_R1A@?0A@EA@COutMemStream@@8
.rdata$r:00006338                                         ; DATA XREF: .rdata$r:00006334o
.rdata$r:00006338                                         ; COutMemStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000633C                 dd offset ??_R1A@?0A@EA@IOutStream@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006340                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006344                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006348                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000634C                 db    0
.rdata$r:0000634D                 align 10h
.rdata$r:0000634D _rdata$r        ends
.rdata$r:0000634D
.rdata$r:00006350 ; ===========================================================================
.rdata$r:00006350
.rdata$r:00006350 ; Segment type: Pure data
.rdata$r:00006350 ; Segment permissions: Read
.rdata$r:00006350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006350                 assume cs:_rdata$r
.rdata$r:00006350                 ;org 6350h
.rdata$r:00006350 ; COMDAT (pick any)
.rdata$r:00006350                 public ??_R1A@?0A@EA@COutMemStream@@8
.rdata$r:00006350 ; COutMemStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006350 ??_R1A@?0A@EA@COutMemStream@@8 dd offset ??_R0?AVCOutMemStream@@@8
.rdata$r:00006350                                         ; DATA XREF: .rdata$r:COutMemStream::`RTTI Base Class Array'o
.rdata$r:00006350                                         ; COutMemStream `RTTI Type Descriptor'
.rdata$r:00006354                 db    4
.rdata$r:00006355                 db    0
.rdata$r:00006356                 db    0
.rdata$r:00006357                 db    0
.rdata$r:00006358                 db    0
.rdata$r:00006359                 db    0
.rdata$r:0000635A                 db    0
.rdata$r:0000635B                 db    0
.rdata$r:0000635C                 db 0FFh
.rdata$r:0000635D                 db 0FFh
.rdata$r:0000635E                 db 0FFh
.rdata$r:0000635F                 db 0FFh
.rdata$r:00006360                 db    0
.rdata$r:00006361                 db    0
.rdata$r:00006362                 db    0
.rdata$r:00006363                 db    0
.rdata$r:00006364                 db  40h ; @
.rdata$r:00006365                 db    0
.rdata$r:00006366                 db    0
.rdata$r:00006367                 db    0
.rdata$r:00006368                 dd offset ??_R3COutMemStream@@8 ; COutMemStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006368 _rdata$r        ends
.rdata$r:00006368
.text:0000636C ; ===========================================================================
.text:0000636C
.text:0000636C ; Segment type: Pure code
.text:0000636C ; Segment permissions: Read/Execute
.text:0000636C _text           segment para public 'CODE' use32
.text:0000636C                 assume cs:_text
.text:0000636C                 ;org 636Ch
.text:0000636C ; COMDAT (pick any)
.text:0000636C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000636C
.text:0000636C ; =============== S U B R O U T I N E =======================================
.text:0000636C
.text:0000636C ; Attributes: bp-based frame
.text:0000636C
.text:0000636C ; _DWORD __thiscall CMemLockBlocks::CMemLockBlocks(CMemLockBlocks *__hidden this)
.text:0000636C                 public ??0CMemLockBlocks@@QAE@XZ
.text:0000636C ??0CMemLockBlocks@@QAE@XZ proc near     ; CODE XREF: COutMemStream::COutMemStream(CMemBlockManagerMt *)+79p
.text:0000636C                                         ; NArchive::NZip::CMemBlocks2::CMemBlocks2(void)+11p
.text:0000636C
.text:0000636C var_4           = dword ptr -4
.text:0000636C
.text:0000636C                 push    ebp
.text:0000636D                 mov     ebp, esp
.text:0000636F                 push    ecx
.text:00006370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006377                 mov     [ebp+var_4], ecx
.text:0000637A                 mov     ecx, [ebp+var_4]
.text:0000637D                 call    ??0CMemBlocks@@QAE@XZ ; CMemBlocks::CMemBlocks(void)
.text:00006382                 mov     eax, [ebp+var_4]
.text:00006385                 mov     byte ptr [eax+18h], 1
.text:00006389                 mov     eax, [ebp+var_4]
.text:0000638C                 add     esp, 4
.text:0000638F                 cmp     ebp, esp
.text:00006391                 call    __RTC_CheckEsp
.text:00006396                 mov     esp, ebp
.text:00006398                 pop     ebp
.text:00006399                 retn
.text:00006399 ??0CMemLockBlocks@@QAE@XZ endp
.text:00006399
.text:00006399 ; ---------------------------------------------------------------------------
.text:0000639A                 align 4
.text:0000639A _text           ends
.text:0000639A
.text:0000639C ; ===========================================================================
.text:0000639C
.text:0000639C ; Segment type: Pure code
.text:0000639C ; Segment permissions: Read/Execute
.text:0000639C _text           segment para public 'CODE' use32
.text:0000639C                 assume cs:_text
.text:0000639C                 ;org 639Ch
.text:0000639C ; COMDAT (pick any)
.text:0000639C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000639C
.text:0000639C ; =============== S U B R O U T I N E =======================================
.text:0000639C
.text:0000639C ; Attributes: bp-based frame
.text:0000639C
.text:0000639C ; public: __thiscall CMemBlocks::CMemBlocks(void)
.text:0000639C                 public ??0CMemBlocks@@QAE@XZ
.text:0000639C ??0CMemBlocks@@QAE@XZ proc near         ; CODE XREF: CMemLockBlocks::CMemLockBlocks(void)+11p
.text:0000639C
.text:0000639C var_4           = dword ptr -4
.text:0000639C
.text:0000639C                 push    ebp
.text:0000639D                 mov     ebp, esp
.text:0000639F                 push    ecx
.text:000063A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063A7                 mov     [ebp+var_4], ecx
.text:000063AA                 mov     ecx, [ebp+var_4]
.text:000063AD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000063B2                 mov     eax, [ebp+var_4]
.text:000063B5                 mov     dword ptr [eax+10h], 0
.text:000063BC                 mov     dword ptr [eax+14h], 0
.text:000063C3                 mov     eax, [ebp+var_4]
.text:000063C6                 add     esp, 4
.text:000063C9                 cmp     ebp, esp
.text:000063CB                 call    __RTC_CheckEsp
.text:000063D0                 mov     esp, ebp
.text:000063D2                 pop     ebp
.text:000063D3                 retn
.text:000063D3 ??0CMemBlocks@@QAE@XZ endp
.text:000063D3
.text:000063D3 _text           ends
.text:000063D3
.text:000063D4 ; ===========================================================================
.text:000063D4
.text:000063D4 ; Segment type: Pure code
.text:000063D4 ; Segment permissions: Read/Execute
.text:000063D4 _text           segment para public 'CODE' use32
.text:000063D4                 assume cs:_text
.text:000063D4                 ;org 63D4h
.text:000063D4 ; COMDAT (pick any)
.text:000063D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063D4
.text:000063D4 ; =============== S U B R O U T I N E =======================================
.text:000063D4
.text:000063D4 ; Attributes: bp-based frame
.text:000063D4
.text:000063D4 ; bool __thiscall COutMemStream::WasUnlockEventSent(COutMemStream *__hidden this)
.text:000063D4                 public ?WasUnlockEventSent@COutMemStream@@QBE_NXZ
.text:000063D4 ?WasUnlockEventSent@COutMemStream@@QBE_NXZ proc near
.text:000063D4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+18CDp
.text:000063D4
.text:000063D4 var_4           = dword ptr -4
.text:000063D4
.text:000063D4                 push    ebp
.text:000063D5                 mov     ebp, esp
.text:000063D7                 push    ecx
.text:000063D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063DF                 mov     [ebp+var_4], ecx
.text:000063E2                 mov     eax, [ebp+var_4]
.text:000063E5                 mov     al, [eax+15h]
.text:000063E8                 mov     esp, ebp
.text:000063EA                 pop     ebp
.text:000063EB                 retn
.text:000063EB ?WasUnlockEventSent@COutMemStream@@QBE_NXZ endp
.text:000063EB
.text:000063EB _text           ends
.text:000063EB
.text:000063EC ; ===========================================================================
.text:000063EC
.text:000063EC ; Segment type: Pure code
.text:000063EC ; Segment permissions: Read/Execute
.text:000063EC _text           segment para public 'CODE' use32
.text:000063EC                 assume cs:_text
.text:000063EC                 ;org 63ECh
.text:000063EC ; COMDAT (pick any)
.text:000063EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063EC
.text:000063EC ; =============== S U B R O U T I N E =======================================
.text:000063EC
.text:000063EC ; Attributes: bp-based frame
.text:000063EC
.text:000063EC ; void __thiscall COutMemStream::SetRealStreamMode(COutMemStream *__hidden this)
.text:000063EC                 public ?SetRealStreamMode@COutMemStream@@QAEXXZ
.text:000063EC ?SetRealStreamMode@COutMemStream@@QAEXXZ proc near
.text:000063EC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+191Fp
.text:000063EC
.text:000063EC var_4           = dword ptr -4
.text:000063EC
.text:000063EC                 push    ebp
.text:000063ED                 mov     ebp, esp
.text:000063EF                 push    ecx
.text:000063F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063F7                 mov     [ebp+var_4], ecx
.text:000063FA                 mov     eax, [ebp+var_4]
.text:000063FD                 mov     byte ptr [eax+15h], 1
.text:00006401                 mov     ecx, [ebp+var_4]
.text:00006404                 add     ecx, 1Ch        ; this
.text:00006407                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:0000640C                 add     esp, 4
.text:0000640F                 cmp     ebp, esp
.text:00006411                 call    __RTC_CheckEsp
.text:00006416                 mov     esp, ebp
.text:00006418                 pop     ebp
.text:00006419                 retn
.text:00006419 ?SetRealStreamMode@COutMemStream@@QAEXXZ endp
.text:00006419
.text:00006419 ; ---------------------------------------------------------------------------
.text:0000641A                 align 4
.text:0000641A _text           ends
.text:0000641A
.text:0000641C ; ===========================================================================
.text:0000641C
.text:0000641C ; Segment type: Pure code
.text:0000641C ; Segment permissions: Read/Execute
.text:0000641C _text           segment para public 'CODE' use32
.text:0000641C                 assume cs:_text
.text:0000641C                 ;org 641Ch
.text:0000641C ; COMDAT (pick any)
.text:0000641C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000641C
.text:0000641C ; =============== S U B R O U T I N E =======================================
.text:0000641C
.text:0000641C ; Attributes: bp-based frame
.text:0000641C
.text:0000641C ; __int32 __stdcall COutMemStream::QueryInterface(COutMemStream *this, const struct _GUID *Buf1, void **)
.text:0000641C                 public ?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z
.text:0000641C ?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000641C                                         ; DATA XREF: .rdata:const COutMemStream::`vftable'o
.text:0000641C
.text:0000641C this            = dword ptr  8
.text:0000641C Buf1            = dword ptr  0Ch
.text:0000641C arg_8           = dword ptr  10h
.text:0000641C
.text:0000641C                 push    ebp
.text:0000641D                 mov     ebp, esp
.text:0000641F                 mov     eax, [ebp+arg_8]
.text:00006422                 mov     dword ptr [eax], 0
.text:00006428                 push    offset _IID_IUnknown ; Buf2
.text:0000642D                 mov     ecx, [ebp+Buf1]
.text:00006430                 push    ecx             ; Buf1
.text:00006431                 call    ___@8           ; __(x,x)
.text:00006436                 test    eax, eax
.text:00006438                 jz      short loc_6444
.text:0000643A                 mov     edx, [ebp+arg_8]
.text:0000643D                 mov     eax, [ebp+this]
.text:00006440                 mov     [edx], eax
.text:00006442                 jmp     short loc_644B
.text:00006444 ; ---------------------------------------------------------------------------
.text:00006444
.text:00006444 loc_6444:                               ; CODE XREF: COutMemStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00006444                 mov     eax, 80004002h
.text:00006449                 jmp     short loc_645C
.text:0000644B ; ---------------------------------------------------------------------------
.text:0000644B
.text:0000644B loc_644B:                               ; CODE XREF: COutMemStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000644B                 mov     ecx, [ebp+this]
.text:0000644E                 mov     edx, [ecx+4]
.text:00006451                 add     edx, 1
.text:00006454                 mov     eax, [ebp+this]
.text:00006457                 mov     [eax+4], edx
.text:0000645A                 xor     eax, eax
.text:0000645C
.text:0000645C loc_645C:                               ; CODE XREF: COutMemStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000645C                 cmp     ebp, esp
.text:0000645E                 call    __RTC_CheckEsp
.text:00006463                 pop     ebp
.text:00006464                 retn    0Ch
.text:00006464 ?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00006464
.text:00006464 ; ---------------------------------------------------------------------------
.text:00006467                 align 4
.text:00006467 _text           ends
.text:00006467
.text:00006468 ; ===========================================================================
.text:00006468
.text:00006468 ; Segment type: Pure code
.text:00006468 ; Segment permissions: Read/Execute
.text:00006468 _text           segment para public 'CODE' use32
.text:00006468                 assume cs:_text
.text:00006468                 ;org 6468h
.text:00006468 ; COMDAT (pick any)
.text:00006468                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006468
.text:00006468 ; =============== S U B R O U T I N E =======================================
.text:00006468
.text:00006468 ; Attributes: bp-based frame
.text:00006468
.text:00006468 ; unsigned __int32 __stdcall COutMemStream::AddRef(COutMemStream *this)
.text:00006468                 public ?AddRef@COutMemStream@@UAGKXZ
.text:00006468 ?AddRef@COutMemStream@@UAGKXZ proc near ; DATA XREF: .rdata:000062A0o
.text:00006468
.text:00006468 var_4           = dword ptr -4
.text:00006468 this            = dword ptr  8
.text:00006468
.text:00006468                 push    ebp
.text:00006469                 mov     ebp, esp
.text:0000646B                 push    ecx
.text:0000646C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006473                 mov     eax, [ebp+this]
.text:00006476                 mov     ecx, [eax+4]
.text:00006479                 add     ecx, 1
.text:0000647C                 mov     [ebp+var_4], ecx
.text:0000647F                 mov     edx, [ebp+this]
.text:00006482                 mov     eax, [ebp+var_4]
.text:00006485                 mov     [edx+4], eax
.text:00006488                 mov     eax, [ebp+var_4]
.text:0000648B                 mov     esp, ebp
.text:0000648D                 pop     ebp
.text:0000648E                 retn    4
.text:0000648E ?AddRef@COutMemStream@@UAGKXZ endp
.text:0000648E
.text:0000648E ; ---------------------------------------------------------------------------
.text:00006491                 align 4
.text:00006491 _text           ends
.text:00006491
.text:00006494 ; ===========================================================================
.text:00006494
.text:00006494 ; Segment type: Pure code
.text:00006494 ; Segment permissions: Read/Execute
.text:00006494 _text           segment para public 'CODE' use32
.text:00006494                 assume cs:_text
.text:00006494                 ;org 6494h
.text:00006494 ; COMDAT (pick any)
.text:00006494                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006494
.text:00006494 ; =============== S U B R O U T I N E =======================================
.text:00006494
.text:00006494 ; Attributes: bp-based frame
.text:00006494
.text:00006494 ; unsigned __int32 __stdcall COutMemStream::Release(COutMemStream *this)
.text:00006494                 public ?Release@COutMemStream@@UAGKXZ
.text:00006494 ?Release@COutMemStream@@UAGKXZ proc near ; DATA XREF: .rdata:000062A4o
.text:00006494
.text:00006494 var_10          = dword ptr -10h
.text:00006494 var_C           = dword ptr -0Ch
.text:00006494 var_8           = dword ptr -8
.text:00006494 var_4           = dword ptr -4
.text:00006494 this            = dword ptr  8
.text:00006494
.text:00006494                 push    ebp
.text:00006495                 mov     ebp, esp
.text:00006497                 sub     esp, 10h
.text:0000649A                 mov     eax, 0CCCCCCCCh
.text:0000649F                 mov     [ebp+var_10], eax
.text:000064A2                 mov     [ebp+var_C], eax
.text:000064A5                 mov     [ebp+var_8], eax
.text:000064A8                 mov     [ebp+var_4], eax
.text:000064AB                 mov     eax, [ebp+this]
.text:000064AE                 mov     ecx, [eax+4]
.text:000064B1                 sub     ecx, 1
.text:000064B4                 mov     [ebp+var_C], ecx
.text:000064B7                 mov     edx, [ebp+this]
.text:000064BA                 mov     eax, [ebp+var_C]
.text:000064BD                 mov     [edx+4], eax
.text:000064C0                 cmp     [ebp+var_C], 0
.text:000064C4                 jz      short loc_64CE
.text:000064C6                 mov     ecx, [ebp+this]
.text:000064C9                 mov     eax, [ecx+4]
.text:000064CC                 jmp     short loc_64F8
.text:000064CE ; ---------------------------------------------------------------------------
.text:000064CE
.text:000064CE loc_64CE:                               ; CODE XREF: COutMemStream::Release(void)+30j
.text:000064CE                 mov     edx, [ebp+this]
.text:000064D1                 mov     [ebp+var_8], edx
.text:000064D4                 mov     eax, [ebp+var_8]
.text:000064D7                 mov     [ebp+var_4], eax
.text:000064DA                 cmp     [ebp+var_4], 0
.text:000064DE                 jz      short loc_64EF
.text:000064E0                 push    1
.text:000064E2                 mov     ecx, [ebp+var_4]
.text:000064E5                 call    ??_GCOutMemStream@@QAEPAXI@Z ; COutMemStream::`scalar deleting destructor'(uint)
.text:000064EA                 mov     [ebp+var_10], eax
.text:000064ED                 jmp     short loc_64F6
.text:000064EF ; ---------------------------------------------------------------------------
.text:000064EF
.text:000064EF loc_64EF:                               ; CODE XREF: COutMemStream::Release(void)+4Aj
.text:000064EF                 mov     [ebp+var_10], 0
.text:000064F6
.text:000064F6 loc_64F6:                               ; CODE XREF: COutMemStream::Release(void)+59j
.text:000064F6                 xor     eax, eax
.text:000064F8
.text:000064F8 loc_64F8:                               ; CODE XREF: COutMemStream::Release(void)+38j
.text:000064F8                 add     esp, 10h
.text:000064FB                 cmp     ebp, esp
.text:000064FD                 call    __RTC_CheckEsp
.text:00006502                 mov     esp, ebp
.text:00006504                 pop     ebp
.text:00006505                 retn    4
.text:00006505 ?Release@COutMemStream@@UAGKXZ endp
.text:00006505
.text:00006505 _text           ends
.text:00006505
.text:00006508 ; ===========================================================================
.text:00006508
.text:00006508 ; Segment type: Pure code
.text:00006508 ; Segment permissions: Read/Execute
.text:00006508 _text           segment para public 'CODE' use32
.text:00006508                 assume cs:_text
.text:00006508                 ;org 6508h
.text:00006508 ; COMDAT (pick any)
.text:00006508                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006508
.text:00006508 ; =============== S U B R O U T I N E =======================================
.text:00006508
.text:00006508 ; Attributes: bp-based frame
.text:00006508
.text:00006508 ; _DWORD __thiscall IOutStream::IOutStream(IOutStream *__hidden this)
.text:00006508                 public ??0IOutStream@@QAE@XZ
.text:00006508 ??0IOutStream@@QAE@XZ proc near         ; CODE XREF: COutMemStream::COutMemStream(CMemBlockManagerMt *)+30p
.text:00006508                                         ; NArchive::NZip::CCacheOutStream::CCacheOutStream(void)+11p
.text:00006508
.text:00006508 var_4           = dword ptr -4
.text:00006508
.text:00006508                 push    ebp
.text:00006509                 mov     ebp, esp
.text:0000650B                 push    ecx
.text:0000650C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006513                 mov     [ebp+var_4], ecx
.text:00006516                 mov     ecx, [ebp+var_4] ; this
.text:00006519                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:0000651E                 mov     eax, [ebp+var_4]
.text:00006521                 mov     dword ptr [eax], offset ??_7IOutStream@@6B@ ; const IOutStream::`vftable'
.text:00006527                 mov     eax, [ebp+var_4]
.text:0000652A                 add     esp, 4
.text:0000652D                 cmp     ebp, esp
.text:0000652F                 call    __RTC_CheckEsp
.text:00006534                 mov     esp, ebp
.text:00006536                 pop     ebp
.text:00006537                 retn
.text:00006537 ??0IOutStream@@QAE@XZ endp
.text:00006537
.text:00006537 _text           ends
.text:00006537
.rdata:00006538 ; ===========================================================================
.rdata:00006538
.rdata:00006538 ; Segment type: Pure data
.rdata:00006538 ; Segment permissions: Read
.rdata:00006538 _rdata          segment dword public 'DATA' use32
.rdata:00006538                 assume cs:_rdata
.rdata:00006538                 ;org 6538h
.rdata:00006538 ; COMDAT (pick largest)
.rdata:00006538                 dd offset ??_R4IOutStream@@6B@ ; const IOutStream::`RTTI Complete Object Locator'
.rdata:0000653C                 public ??_7IOutStream@@6B@
.rdata:0000653C ; const IOutStream::`vftable'
.rdata:0000653C ??_7IOutStream@@6B@ dd offset __purecall
.rdata:0000653C                                         ; DATA XREF: IOutStream::IOutStream(void)+19o
.rdata:00006540                 dd offset __purecall
.rdata:00006544                 dd offset __purecall
.rdata:00006548                 dd offset __purecall
.rdata:0000654C                 dd offset __purecall
.rdata:00006550                 dd offset __purecall
.rdata:00006550 _rdata          ends
.rdata:00006550
.rdata$r:00006554 ; ===========================================================================
.rdata$r:00006554
.rdata$r:00006554 ; Segment type: Pure data
.rdata$r:00006554 ; Segment permissions: Read
.rdata$r:00006554 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006554                 assume cs:_rdata$r
.rdata$r:00006554                 ;org 6554h
.rdata$r:00006554 ; COMDAT (pick any)
.rdata$r:00006554                 public ??_R4IOutStream@@6B@
.rdata$r:00006554 ; const IOutStream::`RTTI Complete Object Locator'
.rdata$r:00006554 ??_R4IOutStream@@6B@ db    0            ; DATA XREF: .rdata:00006538o
.rdata$r:00006555                 db    0
.rdata$r:00006556                 db    0
.rdata$r:00006557                 db    0
.rdata$r:00006558                 db    0
.rdata$r:00006559                 db    0
.rdata$r:0000655A                 db    0
.rdata$r:0000655B                 db    0
.rdata$r:0000655C                 db    0
.rdata$r:0000655D                 db    0
.rdata$r:0000655E                 db    0
.rdata$r:0000655F                 db    0
.rdata$r:00006560                 dd offset ??_R0?AUIOutStream@@@8 ; IOutStream `RTTI Type Descriptor'
.rdata$r:00006564                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006564 _rdata$r        ends
.rdata$r:00006564
.text:00006568 ; ===========================================================================
.text:00006568
.text:00006568 ; Segment type: Pure code
.text:00006568 ; Segment permissions: Read/Execute
.text:00006568 _text           segment para public 'CODE' use32
.text:00006568                 assume cs:_text
.text:00006568                 ;org 6568h
.text:00006568 ; COMDAT (pick any)
.text:00006568                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006568
.text:00006568 ; =============== S U B R O U T I N E =======================================
.text:00006568
.text:00006568 ; Attributes: bp-based frame
.text:00006568
.text:00006568 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00006568                 public ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00006568 ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006568                                         ; CODE XREF: COutMemStream::COutMemStream(CMemBlockManagerMt *)+58p
.text:00006568                                         ; COutMemStream::COutMemStream(CMemBlockManagerMt *)+6Ap ...
.text:00006568
.text:00006568 var_4           = dword ptr -4
.text:00006568
.text:00006568                 push    ebp
.text:00006569                 mov     ebp, esp
.text:0000656B                 push    ecx
.text:0000656C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006573                 mov     [ebp+var_4], ecx
.text:00006576                 mov     ecx, [ebp+var_4] ; this
.text:00006579                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:0000657E                 mov     eax, [ebp+var_4]
.text:00006581                 add     esp, 4
.text:00006584                 cmp     ebp, esp
.text:00006586                 call    __RTC_CheckEsp
.text:0000658B                 mov     esp, ebp
.text:0000658D                 pop     ebp
.text:0000658E                 retn
.text:0000658E ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000658E
.text:0000658E ; ---------------------------------------------------------------------------
.text:0000658F                 align 10h
.text:0000658F _text           ends
.text:0000658F
.text:00006590 ; ===========================================================================
.text:00006590
.text:00006590 ; Segment type: Pure code
.text:00006590 ; Segment permissions: Read/Execute
.text:00006590 _text           segment para public 'CODE' use32
.text:00006590                 assume cs:_text
.text:00006590                 ;org 6590h
.text:00006590 ; COMDAT (pick any)
.text:00006590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006590
.text:00006590 ; =============== S U B R O U T I N E =======================================
.text:00006590
.text:00006590 ; Attributes: bp-based frame
.text:00006590
.text:00006590 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00006590                 public ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00006590 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006590                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)+11p
.text:00006590
.text:00006590 var_4           = dword ptr -4
.text:00006590
.text:00006590                 push    ebp
.text:00006591                 mov     ebp, esp
.text:00006593                 push    ecx
.text:00006594                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000659B                 mov     [ebp+var_4], ecx
.text:0000659E                 mov     eax, [ebp+var_4]
.text:000065A1                 mov     dword ptr [eax], 0
.text:000065A7                 mov     eax, [ebp+var_4]
.text:000065AA                 mov     esp, ebp
.text:000065AC                 pop     ebp
.text:000065AD                 retn
.text:000065AD ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000065AD
.text:000065AD ; ---------------------------------------------------------------------------
.text:000065AE                 align 10h
.text:000065AE _text           ends
.text:000065AE
.text:000065B0 ; ===========================================================================
.text:000065B0
.text:000065B0 ; Segment type: Pure code
.text:000065B0 ; Segment permissions: Read/Execute
.text:000065B0 _text           segment para public 'CODE' use32
.text:000065B0                 assume cs:_text
.text:000065B0                 ;org 65B0h
.text:000065B0 ; COMDAT (pick any)
.text:000065B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065B0
.text:000065B0 ; =============== S U B R O U T I N E =======================================
.text:000065B0
.text:000065B0 ; Attributes: bp-based frame
.text:000065B0
.text:000065B0 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:000065B0                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000065B0 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000065B0                                         ; CODE XREF: __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0+6j
.text:000065B0                                         ; __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1+6j ...
.text:000065B0
.text:000065B0 var_4           = dword ptr -4
.text:000065B0
.text:000065B0                 push    ebp
.text:000065B1                 mov     ebp, esp
.text:000065B3                 push    ecx
.text:000065B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065BB                 mov     [ebp+var_4], ecx
.text:000065BE                 mov     ecx, [ebp+var_4] ; this
.text:000065C1                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:000065C6                 add     esp, 4
.text:000065C9                 cmp     ebp, esp
.text:000065CB                 call    __RTC_CheckEsp
.text:000065D0                 mov     esp, ebp
.text:000065D2                 pop     ebp
.text:000065D3                 retn
.text:000065D3 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000065D3
.text:000065D3 _text           ends
.text:000065D3
.text:000065D4 ; ===========================================================================
.text:000065D4
.text:000065D4 ; Segment type: Pure code
.text:000065D4 ; Segment permissions: Read/Execute
.text:000065D4 _text           segment para public 'CODE' use32
.text:000065D4                 assume cs:_text
.text:000065D4                 ;org 65D4h
.text:000065D4 ; COMDAT (pick any)
.text:000065D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065D4
.text:000065D4 ; =============== S U B R O U T I N E =======================================
.text:000065D4
.text:000065D4 ; Attributes: bp-based frame
.text:000065D4
.text:000065D4 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000065D4                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:000065D4 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000065D4                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:000065D4
.text:000065D4 var_4           = dword ptr -4
.text:000065D4
.text:000065D4                 push    ebp
.text:000065D5                 mov     ebp, esp
.text:000065D7                 push    ecx
.text:000065D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065DF                 mov     [ebp+var_4], ecx
.text:000065E2                 mov     ecx, [ebp+var_4] ; this
.text:000065E5                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:000065EA                 add     esp, 4
.text:000065ED                 cmp     ebp, esp
.text:000065EF                 call    __RTC_CheckEsp
.text:000065F4                 mov     esp, ebp
.text:000065F6                 pop     ebp
.text:000065F7                 retn
.text:000065F7 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000065F7
.text:000065F7 _text           ends
.text:000065F7
.text:000065F8 ; ===========================================================================
.text:000065F8
.text:000065F8 ; Segment type: Pure code
.text:000065F8 ; Segment permissions: Read/Execute
.text:000065F8 _text           segment para public 'CODE' use32
.text:000065F8                 assume cs:_text
.text:000065F8                 ;org 65F8h
.text:000065F8 ; COMDAT (pick any)
.text:000065F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065F8
.text:000065F8 ; =============== S U B R O U T I N E =======================================
.text:000065F8
.text:000065F8 ; Attributes: bp-based frame
.text:000065F8
.text:000065F8 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000065F8                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000065F8 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000065F8                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:000065F8
.text:000065F8 var_4           = dword ptr -4
.text:000065F8
.text:000065F8                 push    ebp
.text:000065F9                 mov     ebp, esp
.text:000065FB                 push    ecx
.text:000065FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006603                 mov     [ebp+var_4], ecx
.text:00006606                 mov     eax, [ebp+var_4]
.text:00006609                 push    eax
.text:0000660A                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000660F                 add     esp, 4
.text:00006612                 cmp     ebp, esp
.text:00006614                 call    __RTC_CheckEsp
.text:00006619                 mov     esp, ebp
.text:0000661B                 pop     ebp
.text:0000661C                 retn
.text:0000661C ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:0000661C
.text:0000661C ; ---------------------------------------------------------------------------
.text:0000661D                 align 10h
.text:0000661D _text           ends
.text:0000661D
.text:00006620 ; ===========================================================================
.text:00006620
.text:00006620 ; Segment type: Pure code
.text:00006620 ; Segment permissions: Read/Execute
.text:00006620 _text           segment para public 'CODE' use32
.text:00006620                 assume cs:_text
.text:00006620                 ;org 6620h
.text:00006620 ; COMDAT (pick any)
.text:00006620                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006620
.text:00006620 ; =============== S U B R O U T I N E =======================================
.text:00006620
.text:00006620 ; Attributes: bp-based frame
.text:00006620
.text:00006620 ; _DWORD __thiscall CMemLockBlocks::~CMemLockBlocks(CMemLockBlocks *__hidden this)
.text:00006620                 public ??1CMemLockBlocks@@QAE@XZ
.text:00006620 ??1CMemLockBlocks@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2+6j
.text:00006620                                         ; COutMemStream::~COutMemStream(void)+6Dp ...
.text:00006620
.text:00006620 var_4           = dword ptr -4
.text:00006620
.text:00006620                 push    ebp
.text:00006621                 mov     ebp, esp
.text:00006623                 push    ecx
.text:00006624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000662B                 mov     [ebp+var_4], ecx
.text:0000662E                 mov     ecx, [ebp+var_4] ; this
.text:00006631                 call    ??1CMemBlocks@@QAE@XZ ; CMemBlocks::~CMemBlocks(void)
.text:00006636                 add     esp, 4
.text:00006639                 cmp     ebp, esp
.text:0000663B                 call    __RTC_CheckEsp
.text:00006640                 mov     esp, ebp
.text:00006642                 pop     ebp
.text:00006643                 retn
.text:00006643 ??1CMemLockBlocks@@QAE@XZ endp
.text:00006643
.text:00006643 _text           ends
.text:00006643
.text:00006644 ; ===========================================================================
.text:00006644
.text:00006644 ; Segment type: Pure code
.text:00006644 ; Segment permissions: Read/Execute
.text:00006644 _text           segment para public 'CODE' use32
.text:00006644                 assume cs:_text
.text:00006644                 ;org 6644h
.text:00006644 ; COMDAT (pick any)
.text:00006644                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006644
.text:00006644 ; =============== S U B R O U T I N E =======================================
.text:00006644
.text:00006644 ; Attributes: bp-based frame
.text:00006644
.text:00006644 ; _DWORD __thiscall CMemBlocks::~CMemBlocks(CMemBlocks *__hidden this)
.text:00006644                 public ??1CMemBlocks@@QAE@XZ
.text:00006644 ??1CMemBlocks@@QAE@XZ proc near         ; CODE XREF: CMemLockBlocks::~CMemLockBlocks(void)+11p
.text:00006644
.text:00006644 var_4           = dword ptr -4
.text:00006644
.text:00006644                 push    ebp
.text:00006645                 mov     ebp, esp
.text:00006647                 push    ecx
.text:00006648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000664F                 mov     [ebp+var_4], ecx
.text:00006652                 mov     ecx, [ebp+var_4]
.text:00006655                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000665A                 add     esp, 4
.text:0000665D                 cmp     ebp, esp
.text:0000665F                 call    __RTC_CheckEsp
.text:00006664                 mov     esp, ebp
.text:00006666                 pop     ebp
.text:00006667                 retn
.text:00006667 ??1CMemBlocks@@QAE@XZ endp
.text:00006667
.text:00006667 _text           ends
.text:00006667
.text:00006668 ; ===========================================================================
.text:00006668
.text:00006668 ; Segment type: Pure code
.text:00006668 ; Segment permissions: Read/Execute
.text:00006668 _text           segment para public 'CODE' use32
.text:00006668                 assume cs:_text
.text:00006668                 ;org 6668h
.text:00006668 ; COMDAT (pick any)
.text:00006668                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006668
.text:00006668 ; =============== S U B R O U T I N E =======================================
.text:00006668
.text:00006668 ; Attributes: bp-based frame
.text:00006668
.text:00006668 ; public: void * __thiscall COutMemStream::`scalar deleting destructor'(unsigned int)
.text:00006668                 public ??_GCOutMemStream@@QAEPAXI@Z
.text:00006668 ??_GCOutMemStream@@QAEPAXI@Z proc near  ; CODE XREF: COutMemStream::Release(void)+51p
.text:00006668
.text:00006668 var_4           = dword ptr -4
.text:00006668 arg_0           = dword ptr  8
.text:00006668
.text:00006668                 push    ebp
.text:00006669                 mov     ebp, esp
.text:0000666B                 push    ecx
.text:0000666C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006673                 mov     [ebp+var_4], ecx
.text:00006676                 mov     ecx, [ebp+var_4] ; this
.text:00006679                 call    ??1COutMemStream@@QAE@XZ ; COutMemStream::~COutMemStream(void)
.text:0000667E                 mov     eax, [ebp+arg_0]
.text:00006681                 and     eax, 1
.text:00006684                 jz      short loc_6692
.text:00006686                 mov     ecx, [ebp+var_4]
.text:00006689                 push    ecx             ; void *
.text:0000668A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000668F                 add     esp, 4
.text:00006692
.text:00006692 loc_6692:                               ; CODE XREF: COutMemStream::`scalar deleting destructor'(uint)+1Cj
.text:00006692                 mov     eax, [ebp+var_4]
.text:00006695                 add     esp, 4
.text:00006698                 cmp     ebp, esp
.text:0000669A                 call    __RTC_CheckEsp
.text:0000669F                 mov     esp, ebp
.text:000066A1                 pop     ebp
.text:000066A2                 retn    4
.text:000066A2 ??_GCOutMemStream@@QAEPAXI@Z endp
.text:000066A2
.text:000066A2 ; ---------------------------------------------------------------------------
.text:000066A5                 align 4
.text:000066A5 _text           ends
.text:000066A5
.text:000066A8 ; ===========================================================================
.text:000066A8
.text:000066A8 ; Segment type: Pure code
.text:000066A8 ; Segment permissions: Read/Execute
.text:000066A8 _text           segment para public 'CODE' use32
.text:000066A8                 assume cs:_text
.text:000066A8                 ;org 66A8h
.text:000066A8 ; COMDAT (pick any)
.text:000066A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066A8
.text:000066A8 ; =============== S U B R O U T I N E =======================================
.text:000066A8
.text:000066A8 ; Attributes: bp-based frame
.text:000066A8
.text:000066A8 ; _DWORD __thiscall COutMemStream::~COutMemStream(COutMemStream *__hidden this)
.text:000066A8                 public ??1COutMemStream@@QAE@XZ
.text:000066A8 ??1COutMemStream@@QAE@XZ proc near      ; CODE XREF: COutMemStream::`scalar deleting destructor'(uint)+11p
.text:000066A8
.text:000066A8 var_10          = dword ptr -10h
.text:000066A8 var_C           = dword ptr -0Ch
.text:000066A8 var_4           = dword ptr -4
.text:000066A8
.text:000066A8                 push    ebp
.text:000066A9                 mov     ebp, esp
.text:000066AB                 push    0FFFFFFFFh
.text:000066AD                 push    offset __ehhandler$??1COutMemStream@@QAE@XZ
.text:000066B2                 mov     eax, large fs:0
.text:000066B8                 push    eax
.text:000066B9                 push    ecx
.text:000066BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000066C1                 mov     eax, dword ptr ds:___security_cookie
.text:000066C6                 xor     eax, ebp
.text:000066C8                 push    eax
.text:000066C9                 lea     eax, [ebp+var_C]
.text:000066CC                 mov     large fs:0, eax
.text:000066D2                 mov     [ebp+var_10], ecx
.text:000066D5                 mov     eax, [ebp+var_10]
.text:000066D8                 mov     dword ptr [eax], offset ??_7COutMemStream@@6B@ ; const COutMemStream::`vftable'
.text:000066DE                 mov     [ebp+var_4], 4
.text:000066E5                 mov     ecx, [ebp+var_10] ; this
.text:000066E8                 call    ?Free@COutMemStream@@QAEXXZ ; COutMemStream::Free(void)
.text:000066ED                 mov     byte ptr [ebp+var_4], 3
.text:000066F1                 mov     ecx, [ebp+var_10]
.text:000066F4                 add     ecx, 4Ch ; 'L'
.text:000066F7                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:000066FC                 mov     byte ptr [ebp+var_4], 2
.text:00006700                 mov     ecx, [ebp+var_10]
.text:00006703                 add     ecx, 48h ; 'H'
.text:00006706                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000670B                 mov     byte ptr [ebp+var_4], 1
.text:0000670F                 mov     ecx, [ebp+var_10]
.text:00006712                 add     ecx, 28h ; '('  ; this
.text:00006715                 call    ??1CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::~CMemLockBlocks(void)
.text:0000671A                 mov     byte ptr [ebp+var_4], 0
.text:0000671E                 mov     ecx, [ebp+var_10]
.text:00006721                 add     ecx, 1Ch        ; this
.text:00006724                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00006729                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006730                 mov     ecx, [ebp+var_10]
.text:00006733                 add     ecx, 18h        ; this
.text:00006736                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000673B                 mov     ecx, [ebp+var_C]
.text:0000673E                 mov     large fs:0, ecx
.text:00006745                 pop     ecx
.text:00006746                 add     esp, 10h
.text:00006749                 cmp     ebp, esp
.text:0000674B                 call    __RTC_CheckEsp
.text:00006750                 mov     esp, ebp
.text:00006752                 pop     ebp
.text:00006753                 retn
.text:00006753 ??1COutMemStream@@QAE@XZ endp
.text:00006753
.text:00006753 _text           ends
.text:00006753
.text$x:00006754 ; ===========================================================================
.text$x:00006754
.text$x:00006754 ; Segment type: Pure code
.text$x:00006754 ; Segment permissions: Read/Execute
.text$x:00006754 _text$x         segment para public 'CODE' use32
.text$x:00006754                 assume cs:_text$x
.text$x:00006754                 ;org 6754h
.text$x:00006754 ; COMDAT (pick associative to section at 66A8)
.text$x:00006754                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006754
.text$x:00006754 ; =============== S U B R O U T I N E =======================================
.text$x:00006754
.text$x:00006754
.text$x:00006754 __unwindfunclet$??1COutMemStream@@QAE@XZ$0 proc near
.text$x:00006754                                         ; DATA XREF: .xdata$x:000067D0o
.text$x:00006754                 mov     ecx, [ebp-10h]
.text$x:00006757                 add     ecx, 18h        ; this
.text$x:0000675A                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000675A __unwindfunclet$??1COutMemStream@@QAE@XZ$0 endp
.text$x:0000675A
.text$x:0000675F
.text$x:0000675F ; =============== S U B R O U T I N E =======================================
.text$x:0000675F
.text$x:0000675F
.text$x:0000675F __unwindfunclet$??1COutMemStream@@QAE@XZ$1 proc near
.text$x:0000675F                                         ; DATA XREF: .xdata$x:000067D8o
.text$x:0000675F                 mov     ecx, [ebp-10h]
.text$x:00006762                 add     ecx, 1Ch        ; this
.text$x:00006765                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00006765 __unwindfunclet$??1COutMemStream@@QAE@XZ$1 endp
.text$x:00006765
.text$x:0000676A
.text$x:0000676A ; =============== S U B R O U T I N E =======================================
.text$x:0000676A
.text$x:0000676A
.text$x:0000676A __unwindfunclet$??1COutMemStream@@QAE@XZ$2 proc near
.text$x:0000676A                                         ; DATA XREF: .xdata$x:000067E0o
.text$x:0000676A                 mov     ecx, [ebp-10h]
.text$x:0000676D                 add     ecx, 28h ; '('  ; this
.text$x:00006770                 jmp     ??1CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::~CMemLockBlocks(void)
.text$x:00006770 __unwindfunclet$??1COutMemStream@@QAE@XZ$2 endp
.text$x:00006770
.text$x:00006775
.text$x:00006775 ; =============== S U B R O U T I N E =======================================
.text$x:00006775
.text$x:00006775
.text$x:00006775 __unwindfunclet$??1COutMemStream@@QAE@XZ$3 proc near
.text$x:00006775                                         ; DATA XREF: .xdata$x:000067E8o
.text$x:00006775                 mov     ecx, [ebp-10h]
.text$x:00006778                 add     ecx, 48h ; 'H'
.text$x:0000677B                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000677B __unwindfunclet$??1COutMemStream@@QAE@XZ$3 endp
.text$x:0000677B
.text$x:00006780
.text$x:00006780 ; =============== S U B R O U T I N E =======================================
.text$x:00006780
.text$x:00006780
.text$x:00006780 __unwindfunclet$??1COutMemStream@@QAE@XZ$4 proc near
.text$x:00006780                                         ; DATA XREF: .xdata$x:000067F0o
.text$x:00006780                 mov     ecx, [ebp-10h]
.text$x:00006783                 add     ecx, 4Ch ; 'L'
.text$x:00006786                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00006786 __unwindfunclet$??1COutMemStream@@QAE@XZ$4 endp
.text$x:00006786
.text$x:0000678B
.text$x:0000678B ; =============== S U B R O U T I N E =======================================
.text$x:0000678B
.text$x:0000678B
.text$x:0000678B __ehhandler$??1COutMemStream@@QAE@XZ proc near
.text$x:0000678B                                         ; DATA XREF: COutMemStream::~COutMemStream(void)+5o
.text$x:0000678B
.text$x:0000678B arg_4           = dword ptr  8
.text$x:0000678B
.text$x:0000678B                 mov     edx, [esp+arg_4]
.text$x:0000678F                 lea     eax, [edx+0Ch]
.text$x:00006792                 mov     ecx, [edx-8]
.text$x:00006795                 xor     ecx, eax
.text$x:00006797                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000679C                 mov     eax, offset __ehfuncinfo$??1COutMemStream@@QAE@XZ
.text$x:000067A1                 jmp     ___CxxFrameHandler3
.text$x:000067A1 __ehhandler$??1COutMemStream@@QAE@XZ endp
.text$x:000067A1
.text$x:000067A1 ; ---------------------------------------------------------------------------
.text$x:000067A6                 align 4
.text$x:000067A6 _text$x         ends
.text$x:000067A6
.xdata$x:000067A8 ; ===========================================================================
.xdata$x:000067A8
.xdata$x:000067A8 ; Segment type: Pure data
.xdata$x:000067A8 ; Segment permissions: Read
.xdata$x:000067A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000067A8                 assume cs:_xdata$x
.xdata$x:000067A8                 ;org 67A8h
.xdata$x:000067A8 ; COMDAT (pick associative to section at 66A8)
.xdata$x:000067A8 __ehfuncinfo$??1COutMemStream@@QAE@XZ db  22h ; "
.xdata$x:000067A8                                         ; DATA XREF: __ehhandler$??1COutMemStream@@QAE@XZ+11o
.xdata$x:000067A9                 db    5
.xdata$x:000067AA                 db  93h ; ô
.xdata$x:000067AB                 db  19h
.xdata$x:000067AC                 db    5
.xdata$x:000067AD                 db    0
.xdata$x:000067AE                 db    0
.xdata$x:000067AF                 db    0
.xdata$x:000067B0                 dd offset __unwindtable$??1COutMemStream@@QAE@XZ
.xdata$x:000067B4                 db    0
.xdata$x:000067B5                 db    0
.xdata$x:000067B6                 db    0
.xdata$x:000067B7                 db    0
.xdata$x:000067B8                 db    0
.xdata$x:000067B9                 db    0
.xdata$x:000067BA                 db    0
.xdata$x:000067BB                 db    0
.xdata$x:000067BC                 db    0
.xdata$x:000067BD                 db    0
.xdata$x:000067BE                 db    0
.xdata$x:000067BF                 db    0
.xdata$x:000067C0                 db    0
.xdata$x:000067C1                 db    0
.xdata$x:000067C2                 db    0
.xdata$x:000067C3                 db    0
.xdata$x:000067C4                 db    0
.xdata$x:000067C5                 db    0
.xdata$x:000067C6                 db    0
.xdata$x:000067C7                 db    0
.xdata$x:000067C8                 db    1
.xdata$x:000067C9                 db    0
.xdata$x:000067CA                 db    0
.xdata$x:000067CB                 db    0
.xdata$x:000067CC __unwindtable$??1COutMemStream@@QAE@XZ db 0FFh
.xdata$x:000067CC                                         ; DATA XREF: .xdata$x:000067B0o
.xdata$x:000067CD                 db 0FFh
.xdata$x:000067CE                 db 0FFh
.xdata$x:000067CF                 db 0FFh
.xdata$x:000067D0                 dd offset __unwindfunclet$??1COutMemStream@@QAE@XZ$0
.xdata$x:000067D4                 align 8
.xdata$x:000067D8                 dd offset __unwindfunclet$??1COutMemStream@@QAE@XZ$1
.xdata$x:000067DC                 db    1
.xdata$x:000067DD                 db    0
.xdata$x:000067DE                 db    0
.xdata$x:000067DF                 db    0
.xdata$x:000067E0                 dd offset __unwindfunclet$??1COutMemStream@@QAE@XZ$2
.xdata$x:000067E4                 db    2
.xdata$x:000067E5                 db    0
.xdata$x:000067E6                 db    0
.xdata$x:000067E7                 db    0
.xdata$x:000067E8                 dd offset __unwindfunclet$??1COutMemStream@@QAE@XZ$3
.xdata$x:000067EC                 db    3
.xdata$x:000067ED                 db    0
.xdata$x:000067EE                 db    0
.xdata$x:000067EF                 db    0
.xdata$x:000067F0                 dd offset __unwindfunclet$??1COutMemStream@@QAE@XZ$4
.xdata$x:000067F0 _xdata$x        ends
.xdata$x:000067F0
.text:000067F4 ; ===========================================================================
.text:000067F4
.text:000067F4 ; Segment type: Pure code
.text:000067F4 ; Segment permissions: Read/Execute
.text:000067F4 _text           segment para public 'CODE' use32
.text:000067F4                 assume cs:_text
.text:000067F4                 ;org 67F4h
.text:000067F4 ; COMDAT (pick any)
.text:000067F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067F4
.text:000067F4 ; =============== S U B R O U T I N E =======================================
.text:000067F4
.text:000067F4 ; Attributes: bp-based frame
.text:000067F4
.text:000067F4 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000067F4                 public ??0ISequentialOutStream@@QAE@XZ
.text:000067F4 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000067F4                                         ; CODE XREF: IOutStream::IOutStream(void)+11p
.text:000067F4
.text:000067F4 var_4           = dword ptr -4
.text:000067F4
.text:000067F4                 push    ebp
.text:000067F5                 mov     ebp, esp
.text:000067F7                 push    ecx
.text:000067F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067FF                 mov     [ebp+var_4], ecx
.text:00006802                 mov     ecx, [ebp+var_4]
.text:00006805                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000680A                 mov     eax, [ebp+var_4]
.text:0000680D                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00006813                 mov     eax, [ebp+var_4]
.text:00006816                 add     esp, 4
.text:00006819                 cmp     ebp, esp
.text:0000681B                 call    __RTC_CheckEsp
.text:00006820                 mov     esp, ebp
.text:00006822                 pop     ebp
.text:00006823                 retn
.text:00006823 ??0ISequentialOutStream@@QAE@XZ endp
.text:00006823
.text:00006823 _text           ends
.text:00006823
.rdata:00006824 ; ===========================================================================
.rdata:00006824
.rdata:00006824 ; Segment type: Pure data
.rdata:00006824 ; Segment permissions: Read
.rdata:00006824 _rdata          segment dword public 'DATA' use32
.rdata:00006824                 assume cs:_rdata
.rdata:00006824                 ;org 6824h
.rdata:00006824 ; COMDAT (pick largest)
.rdata:00006824                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00006828                 public ??_7ISequentialOutStream@@6B@
.rdata:00006828 ; const ISequentialOutStream::`vftable'
.rdata:00006828 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00006828                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:0000682C                 dd offset __purecall
.rdata:00006830                 dd offset __purecall
.rdata:00006834                 dd offset __purecall
.rdata:00006834 _rdata          ends
.rdata:00006834
.rdata$r:00006838 ; ===========================================================================
.rdata$r:00006838
.rdata$r:00006838 ; Segment type: Pure data
.rdata$r:00006838 ; Segment permissions: Read
.rdata$r:00006838 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006838                 assume cs:_rdata$r
.rdata$r:00006838                 ;org 6838h
.rdata$r:00006838 ; COMDAT (pick any)
.rdata$r:00006838                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00006838 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00006838 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00006824o
.rdata$r:00006839                 db    0
.rdata$r:0000683A                 db    0
.rdata$r:0000683B                 db    0
.rdata$r:0000683C                 db    0
.rdata$r:0000683D                 db    0
.rdata$r:0000683E                 db    0
.rdata$r:0000683F                 db    0
.rdata$r:00006840                 db    0
.rdata$r:00006841                 db    0
.rdata$r:00006842                 db    0
.rdata$r:00006843                 db    0
.rdata$r:00006844                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00006848                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006848 _rdata$r        ends
.rdata$r:00006848
.text:0000684C ; ===========================================================================
.text:0000684C
.text:0000684C ; Segment type: Pure code
.text:0000684C ; Segment permissions: Read/Execute
.text:0000684C _text           segment para public 'CODE' use32
.text:0000684C                 assume cs:_text
.text:0000684C                 ;org 684Ch
.text:0000684C ; COMDAT (pick any)
.text:0000684C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000684C
.text:0000684C ; =============== S U B R O U T I N E =======================================
.text:0000684C
.text:0000684C ; Attributes: bp-based frame
.text:0000684C
.text:0000684C ; void __thiscall CMtCompressProgress::Init(CMtCompressProgress *this, struct CMtCompressProgressMixer *, int)
.text:0000684C                 public ?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z
.text:0000684C ?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z proc near
.text:0000684C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B57p
.text:0000684C
.text:0000684C var_4           = dword ptr -4
.text:0000684C arg_0           = dword ptr  8
.text:0000684C arg_4           = dword ptr  0Ch
.text:0000684C
.text:0000684C                 push    ebp
.text:0000684D                 mov     ebp, esp
.text:0000684F                 push    ecx
.text:00006850                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006857                 mov     [ebp+var_4], ecx
.text:0000685A                 mov     eax, [ebp+var_4]
.text:0000685D                 mov     ecx, [ebp+arg_0]
.text:00006860                 mov     [eax+8], ecx
.text:00006863                 mov     edx, [ebp+var_4]
.text:00006866                 mov     eax, [ebp+arg_4]
.text:00006869                 mov     [edx+0Ch], eax
.text:0000686C                 mov     esp, ebp
.text:0000686E                 pop     ebp
.text:0000686F                 retn    8
.text:0000686F ?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z endp
.text:0000686F
.text:0000686F ; ---------------------------------------------------------------------------
.text:00006872                 align 4
.text:00006872 _text           ends
.text:00006872
.text:00006874 ; ===========================================================================
.text:00006874
.text:00006874 ; Segment type: Pure code
.text:00006874 ; Segment permissions: Read/Execute
.text:00006874 _text           segment para public 'CODE' use32
.text:00006874                 assume cs:_text
.text:00006874                 ;org 6874h
.text:00006874 ; COMDAT (pick any)
.text:00006874                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006874
.text:00006874 ; =============== S U B R O U T I N E =======================================
.text:00006874
.text:00006874 ; Attributes: bp-based frame
.text:00006874
.text:00006874 ; void __thiscall CMtCompressProgress::Reinit(CMtCompressProgress *__hidden this)
.text:00006874                 public ?Reinit@CMtCompressProgress@@QAEXXZ
.text:00006874 ?Reinit@CMtCompressProgress@@QAEXXZ proc near
.text:00006874                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+14B4p
.text:00006874
.text:00006874 var_4           = dword ptr -4
.text:00006874
.text:00006874                 push    ebp
.text:00006875                 mov     ebp, esp
.text:00006877                 push    ecx
.text:00006878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000687F                 mov     [ebp+var_4], ecx
.text:00006882                 mov     eax, [ebp+var_4]
.text:00006885                 mov     ecx, [eax+0Ch]
.text:00006888                 push    ecx             ; int
.text:00006889                 mov     edx, [ebp+var_4]
.text:0000688C                 mov     ecx, [edx+8]    ; this
.text:0000688F                 call    ?Reinit@CMtCompressProgressMixer@@QAEXH@Z ; CMtCompressProgressMixer::Reinit(int)
.text:00006894                 add     esp, 4
.text:00006897                 cmp     ebp, esp
.text:00006899                 call    __RTC_CheckEsp
.text:0000689E                 mov     esp, ebp
.text:000068A0                 pop     ebp
.text:000068A1                 retn
.text:000068A1 ?Reinit@CMtCompressProgress@@QAEXXZ endp
.text:000068A1
.text:000068A1 ; ---------------------------------------------------------------------------
.text:000068A2                 align 4
.text:000068A2 _text           ends
.text:000068A2
.text:000068A4 ; ===========================================================================
.text:000068A4
.text:000068A4 ; Segment type: Pure code
.text:000068A4 ; Segment permissions: Read/Execute
.text:000068A4 _text           segment para public 'CODE' use32
.text:000068A4                 assume cs:_text
.text:000068A4                 ;org 68A4h
.text:000068A4 ; COMDAT (pick any)
.text:000068A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068A4
.text:000068A4 ; =============== S U B R O U T I N E =======================================
.text:000068A4
.text:000068A4 ; Attributes: bp-based frame
.text:000068A4
.text:000068A4 ; unsigned int __thiscall CMethodProps::Get_Lzma_NumThreads(CMethodProps *this, bool *)
.text:000068A4                 public ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z
.text:000068A4 ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z proc near
.text:000068A4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+4A4p
.text:000068A4
.text:000068A4 var_8           = dword ptr -8
.text:000068A4 var_4           = dword ptr -4
.text:000068A4 arg_0           = dword ptr  8
.text:000068A4
.text:000068A4                 push    ebp
.text:000068A5                 mov     ebp, esp
.text:000068A7                 sub     esp, 8
.text:000068AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000068B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068B8                 mov     [ebp+var_4], ecx
.text:000068BB                 mov     eax, [ebp+arg_0]
.text:000068BE                 mov     byte ptr [eax], 0
.text:000068C1                 mov     ecx, [ebp+var_4] ; this
.text:000068C4                 call    ?Get_NumThreads@CMethodProps@@QBEHXZ ; CMethodProps::Get_NumThreads(void)
.text:000068C9                 mov     [ebp+var_8], eax
.text:000068CC                 cmp     [ebp+var_8], 0
.text:000068D0                 jl      short loc_68E6
.text:000068D2                 mov     ecx, [ebp+arg_0]
.text:000068D5                 mov     byte ptr [ecx], 1
.text:000068D8                 xor     eax, eax
.text:000068DA                 cmp     [ebp+var_8], 2
.text:000068DE                 setnl   al
.text:000068E1                 add     eax, 1
.text:000068E4                 jmp     short loc_68F7
.text:000068E6 ; ---------------------------------------------------------------------------
.text:000068E6
.text:000068E6 loc_68E6:                               ; CODE XREF: CMethodProps::Get_Lzma_NumThreads(bool &)+2Cj
.text:000068E6                 mov     ecx, [ebp+var_4] ; this
.text:000068E9                 call    ?Get_Lzma_Algo@CMethodProps@@QBEIXZ ; CMethodProps::Get_Lzma_Algo(void)
.text:000068EE                 neg     eax
.text:000068F0                 sbb     eax, eax
.text:000068F2                 neg     eax
.text:000068F4                 add     eax, 1
.text:000068F7
.text:000068F7 loc_68F7:                               ; CODE XREF: CMethodProps::Get_Lzma_NumThreads(bool &)+40j
.text:000068F7                 add     esp, 8
.text:000068FA                 cmp     ebp, esp
.text:000068FC                 call    __RTC_CheckEsp
.text:00006901                 mov     esp, ebp
.text:00006903                 pop     ebp
.text:00006904                 retn    4
.text:00006904 ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z endp
.text:00006904
.text:00006904 ; ---------------------------------------------------------------------------
.text:00006907                 align 4
.text:00006907 _text           ends
.text:00006907
.text:00006908 ; ===========================================================================
.text:00006908
.text:00006908 ; Segment type: Pure code
.text:00006908 ; Segment permissions: Read/Execute
.text:00006908 _text           segment para public 'CODE' use32
.text:00006908                 assume cs:_text
.text:00006908                 ;org 6908h
.text:00006908 ; COMDAT (pick any)
.text:00006908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006908
.text:00006908 ; =============== S U B R O U T I N E =======================================
.text:00006908
.text:00006908 ; Attributes: bp-based frame
.text:00006908
.text:00006908 ; int __thiscall CMethodProps::Get_NumThreads(CMethodProps *__hidden this)
.text:00006908                 public ?Get_NumThreads@CMethodProps@@QBEHXZ
.text:00006908 ?Get_NumThreads@CMethodProps@@QBEHXZ proc near
.text:00006908                                         ; CODE XREF: CMethodProps::Get_Lzma_NumThreads(bool &)+20p
.text:00006908                                         ; CMethodProps::Get_BZip2_NumThreads(bool &)+20p
.text:00006908
.text:00006908 var_8           = dword ptr -8
.text:00006908 var_4           = dword ptr -4
.text:00006908
.text:00006908                 push    ebp
.text:00006909                 mov     ebp, esp
.text:0000690B                 sub     esp, 8
.text:0000690E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006915                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000691C                 mov     [ebp+var_4], ecx
.text:0000691F                 push    0Dh             ; unsigned __int32
.text:00006921                 mov     ecx, [ebp+var_4] ; this
.text:00006924                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00006929                 mov     [ebp+var_8], eax
.text:0000692C                 cmp     [ebp+var_8], 0
.text:00006930                 jl      short loc_6958
.text:00006932                 mov     eax, [ebp+var_8]
.text:00006935                 push    eax
.text:00006936                 mov     ecx, [ebp+var_4]
.text:00006939                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000693E                 movzx   ecx, word ptr [eax+8]
.text:00006942                 cmp     ecx, 13h
.text:00006945                 jnz     short loc_6958
.text:00006947                 mov     edx, [ebp+var_8]
.text:0000694A                 push    edx
.text:0000694B                 mov     ecx, [ebp+var_4]
.text:0000694E                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00006953                 mov     eax, [eax+10h]
.text:00006956                 jmp     short loc_695B
.text:00006958 ; ---------------------------------------------------------------------------
.text:00006958
.text:00006958 loc_6958:                               ; CODE XREF: CMethodProps::Get_NumThreads(void)+28j
.text:00006958                                         ; CMethodProps::Get_NumThreads(void)+3Dj
.text:00006958                 or      eax, 0FFFFFFFFh
.text:0000695B
.text:0000695B loc_695B:                               ; CODE XREF: CMethodProps::Get_NumThreads(void)+4Ej
.text:0000695B                 add     esp, 8
.text:0000695E                 cmp     ebp, esp
.text:00006960                 call    __RTC_CheckEsp
.text:00006965                 mov     esp, ebp
.text:00006967                 pop     ebp
.text:00006968                 retn
.text:00006968 ?Get_NumThreads@CMethodProps@@QBEHXZ endp
.text:00006968
.text:00006968 ; ---------------------------------------------------------------------------
.text:00006969                 align 4
.text:00006969 _text           ends
.text:00006969
.text:0000696C ; ===========================================================================
.text:0000696C
.text:0000696C ; Segment type: Pure code
.text:0000696C ; Segment permissions: Read/Execute
.text:0000696C _text           segment para public 'CODE' use32
.text:0000696C                 assume cs:_text
.text:0000696C                 ;org 696Ch
.text:0000696C ; COMDAT (pick any)
.text:0000696C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000696C
.text:0000696C ; =============== S U B R O U T I N E =======================================
.text:0000696C
.text:0000696C ; Attributes: bp-based frame
.text:0000696C
.text:0000696C ; unsigned int __thiscall CMethodProps::Get_Lzma_Algo(CMethodProps *__hidden this)
.text:0000696C                 public ?Get_Lzma_Algo@CMethodProps@@QBEIXZ
.text:0000696C ?Get_Lzma_Algo@CMethodProps@@QBEIXZ proc near
.text:0000696C                                         ; CODE XREF: CMethodProps::Get_Lzma_NumThreads(bool &)+45p
.text:0000696C
.text:0000696C var_8           = dword ptr -8
.text:0000696C var_4           = dword ptr -4
.text:0000696C
.text:0000696C                 push    ebp
.text:0000696D                 mov     ebp, esp
.text:0000696F                 sub     esp, 8
.text:00006972                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006979                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006980                 mov     [ebp+var_4], ecx
.text:00006983                 push    0Ch             ; unsigned __int32
.text:00006985                 mov     ecx, [ebp+var_4] ; this
.text:00006988                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:0000698D                 mov     [ebp+var_8], eax
.text:00006990                 cmp     [ebp+var_8], 0
.text:00006994                 jl      short loc_69BC
.text:00006996                 mov     eax, [ebp+var_8]
.text:00006999                 push    eax
.text:0000699A                 mov     ecx, [ebp+var_4]
.text:0000699D                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000069A2                 movzx   ecx, word ptr [eax+8]
.text:000069A6                 cmp     ecx, 13h
.text:000069A9                 jnz     short loc_69BC
.text:000069AB                 mov     edx, [ebp+var_8]
.text:000069AE                 push    edx
.text:000069AF                 mov     ecx, [ebp+var_4]
.text:000069B2                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000069B7                 mov     eax, [eax+10h]
.text:000069BA                 jmp     short loc_69CE
.text:000069BC ; ---------------------------------------------------------------------------
.text:000069BC
.text:000069BC loc_69BC:                               ; CODE XREF: CMethodProps::Get_Lzma_Algo(void)+28j
.text:000069BC                                         ; CMethodProps::Get_Lzma_Algo(void)+3Dj
.text:000069BC                 mov     ecx, [ebp+var_4] ; this
.text:000069BF                 call    ?GetLevel@CMethodProps@@QBEHXZ ; CMethodProps::GetLevel(void)
.text:000069C4                 xor     ecx, ecx
.text:000069C6                 cmp     eax, 5
.text:000069C9                 setnl   cl
.text:000069CC                 mov     eax, ecx
.text:000069CE
.text:000069CE loc_69CE:                               ; CODE XREF: CMethodProps::Get_Lzma_Algo(void)+4Ej
.text:000069CE                 add     esp, 8
.text:000069D1                 cmp     ebp, esp
.text:000069D3                 call    __RTC_CheckEsp
.text:000069D8                 mov     esp, ebp
.text:000069DA                 pop     ebp
.text:000069DB                 retn
.text:000069DB ?Get_Lzma_Algo@CMethodProps@@QBEIXZ endp
.text:000069DB
.text:000069DB _text           ends
.text:000069DB
.text:000069DC ; ===========================================================================
.text:000069DC
.text:000069DC ; Segment type: Pure code
.text:000069DC ; Segment permissions: Read/Execute
.text:000069DC _text           segment para public 'CODE' use32
.text:000069DC                 assume cs:_text
.text:000069DC                 ;org 69DCh
.text:000069DC ; COMDAT (pick any)
.text:000069DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000069DC
.text:000069DC ; =============== S U B R O U T I N E =======================================
.text:000069DC
.text:000069DC ; Attributes: bp-based frame
.text:000069DC
.text:000069DC ; unsigned int __thiscall CMethodProps::Get_BZip2_NumThreads(CMethodProps *this, bool *)
.text:000069DC                 public ?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z
.text:000069DC ?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z proc near
.text:000069DC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+3A2p
.text:000069DC
.text:000069DC var_8           = dword ptr -8
.text:000069DC var_4           = dword ptr -4
.text:000069DC arg_0           = dword ptr  8
.text:000069DC
.text:000069DC                 push    ebp
.text:000069DD                 mov     ebp, esp
.text:000069DF                 sub     esp, 8
.text:000069E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000069E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069F0                 mov     [ebp+var_4], ecx
.text:000069F3                 mov     eax, [ebp+arg_0]
.text:000069F6                 mov     byte ptr [eax], 0
.text:000069F9                 mov     ecx, [ebp+var_4] ; this
.text:000069FC                 call    ?Get_NumThreads@CMethodProps@@QBEHXZ ; CMethodProps::Get_NumThreads(void)
.text:00006A01                 mov     [ebp+var_8], eax
.text:00006A04                 cmp     [ebp+var_8], 0
.text:00006A08                 jl      short loc_6A2F
.text:00006A0A                 mov     ecx, [ebp+arg_0]
.text:00006A0D                 mov     byte ptr [ecx], 1
.text:00006A10                 cmp     [ebp+var_8], 1
.text:00006A14                 jge     short loc_6A1D
.text:00006A16                 mov     eax, 1
.text:00006A1B                 jmp     short loc_6A34
.text:00006A1D ; ---------------------------------------------------------------------------
.text:00006A1D
.text:00006A1D loc_6A1D:                               ; CODE XREF: CMethodProps::Get_BZip2_NumThreads(bool &)+38j
.text:00006A1D                 cmp     [ebp+var_8], 40h ; '@'
.text:00006A21                 jle     short loc_6A2A
.text:00006A23                 mov     eax, 40h ; '@'
.text:00006A28                 jmp     short loc_6A34
.text:00006A2A ; ---------------------------------------------------------------------------
.text:00006A2A
.text:00006A2A loc_6A2A:                               ; CODE XREF: CMethodProps::Get_BZip2_NumThreads(bool &)+45j
.text:00006A2A                 mov     eax, [ebp+var_8]
.text:00006A2D                 jmp     short loc_6A34
.text:00006A2F ; ---------------------------------------------------------------------------
.text:00006A2F
.text:00006A2F loc_6A2F:                               ; CODE XREF: CMethodProps::Get_BZip2_NumThreads(bool &)+2Cj
.text:00006A2F                 mov     eax, 1
.text:00006A34
.text:00006A34 loc_6A34:                               ; CODE XREF: CMethodProps::Get_BZip2_NumThreads(bool &)+3Fj
.text:00006A34                                         ; CMethodProps::Get_BZip2_NumThreads(bool &)+4Cj ...
.text:00006A34                 add     esp, 8
.text:00006A37                 cmp     ebp, esp
.text:00006A39                 call    __RTC_CheckEsp
.text:00006A3E                 mov     esp, ebp
.text:00006A40                 pop     ebp
.text:00006A41                 retn    4
.text:00006A41 ?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z endp
.text:00006A41
.text:00006A41 _text           ends
.text:00006A41
.text:00006A44 ; ===========================================================================
.text:00006A44
.text:00006A44 ; Segment type: Pure code
.text:00006A44 ; Segment permissions: Read/Execute
.text:00006A44 _text           segment para public 'CODE' use32
.text:00006A44                 assume cs:_text
.text:00006A44                 ;org 6A44h
.text:00006A44 ; COMDAT (pick any)
.text:00006A44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A44
.text:00006A44 ; =============== S U B R O U T I N E =======================================
.text:00006A44
.text:00006A44 ; Attributes: bp-based frame
.text:00006A44
.text:00006A44 ; unsigned int __thiscall CMethodProps::Get_BZip2_BlockSize(CMethodProps *__hidden this)
.text:00006A44                 public ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ
.text:00006A44 ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ proc near
.text:00006A44                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+3E3p
.text:00006A44
.text:00006A44 var_20          = dword ptr -20h
.text:00006A44 var_1C          = dword ptr -1Ch
.text:00006A44 var_18          = dword ptr -18h
.text:00006A44 var_14          = dword ptr -14h
.text:00006A44 var_10          = dword ptr -10h
.text:00006A44 var_C           = dword ptr -0Ch
.text:00006A44 var_8           = dword ptr -8
.text:00006A44 var_4           = dword ptr -4
.text:00006A44
.text:00006A44                 push    ebp
.text:00006A45                 mov     ebp, esp
.text:00006A47                 sub     esp, 20h
.text:00006A4A                 mov     eax, 0CCCCCCCCh
.text:00006A4F                 mov     [ebp+var_20], eax
.text:00006A52                 mov     [ebp+var_1C], eax
.text:00006A55                 mov     [ebp+var_18], eax
.text:00006A58                 mov     [ebp+var_14], eax
.text:00006A5B                 mov     [ebp+var_10], eax
.text:00006A5E                 mov     [ebp+var_C], eax
.text:00006A61                 mov     [ebp+var_8], eax
.text:00006A64                 mov     [ebp+var_4], eax
.text:00006A67                 mov     [ebp+var_4], ecx
.text:00006A6A                 push    1               ; unsigned __int32
.text:00006A6C                 mov     ecx, [ebp+var_4] ; this
.text:00006A6F                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00006A74                 mov     [ebp+var_8], eax
.text:00006A77                 cmp     [ebp+var_8], 0
.text:00006A7B                 jl      short loc_6AD7
.text:00006A7D                 mov     eax, [ebp+var_8]
.text:00006A80                 push    eax
.text:00006A81                 mov     ecx, [ebp+var_4]
.text:00006A84                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00006A89                 movzx   ecx, word ptr [eax+8]
.text:00006A8D                 cmp     ecx, 13h
.text:00006A90                 jnz     short loc_6AD7
.text:00006A92                 mov     edx, [ebp+var_8]
.text:00006A95                 push    edx
.text:00006A96                 mov     ecx, [ebp+var_4]
.text:00006A99                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00006A9E                 mov     eax, [eax+10h]
.text:00006AA1                 mov     [ebp+var_C], eax
.text:00006AA4                 mov     [ebp+var_10], 186A0h
.text:00006AAB                 mov     [ebp+var_14], 0DBBA0h
.text:00006AB2                 cmp     [ebp+var_C], 186A0h
.text:00006AB9                 jnb     short loc_6AC2
.text:00006ABB                 mov     [ebp+var_C], 186A0h
.text:00006AC2
.text:00006AC2 loc_6AC2:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+75j
.text:00006AC2                 cmp     [ebp+var_C], 0DBBA0h
.text:00006AC9                 jbe     short loc_6AD2
.text:00006ACB                 mov     [ebp+var_C], 0DBBA0h
.text:00006AD2
.text:00006AD2 loc_6AD2:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+85j
.text:00006AD2                 mov     eax, [ebp+var_C]
.text:00006AD5                 jmp     short loc_6B19
.text:00006AD7 ; ---------------------------------------------------------------------------
.text:00006AD7
.text:00006AD7 loc_6AD7:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+37j
.text:00006AD7                                         ; CMethodProps::Get_BZip2_BlockSize(void)+4Cj
.text:00006AD7                 mov     ecx, [ebp+var_4] ; this
.text:00006ADA                 call    ?GetLevel@CMethodProps@@QBEHXZ ; CMethodProps::GetLevel(void)
.text:00006ADF                 mov     [ebp+var_18], eax
.text:00006AE2                 cmp     [ebp+var_18], 5
.text:00006AE6                 jl      short loc_6AF1
.text:00006AE8                 mov     [ebp+var_1C], 9
.text:00006AEF                 jmp     short loc_6B10
.text:00006AF1 ; ---------------------------------------------------------------------------
.text:00006AF1
.text:00006AF1 loc_6AF1:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+A2j
.text:00006AF1                 cmp     [ebp+var_18], 1
.text:00006AF5                 jl      short loc_6B03
.text:00006AF7                 mov     ecx, [ebp+var_18]
.text:00006AFA                 lea     edx, [ecx+ecx-1]
.text:00006AFE                 mov     [ebp+var_20], edx
.text:00006B01                 jmp     short loc_6B0A
.text:00006B03 ; ---------------------------------------------------------------------------
.text:00006B03
.text:00006B03 loc_6B03:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+B1j
.text:00006B03                 mov     [ebp+var_20], 1
.text:00006B0A
.text:00006B0A loc_6B0A:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+BDj
.text:00006B0A                 mov     eax, [ebp+var_20]
.text:00006B0D                 mov     [ebp+var_1C], eax
.text:00006B10
.text:00006B10 loc_6B10:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+ABj
.text:00006B10                 mov     eax, [ebp+var_1C]
.text:00006B13                 imul    eax, 186A0h
.text:00006B19
.text:00006B19 loc_6B19:                               ; CODE XREF: CMethodProps::Get_BZip2_BlockSize(void)+91j
.text:00006B19                 add     esp, 20h
.text:00006B1C                 cmp     ebp, esp
.text:00006B1E                 call    __RTC_CheckEsp
.text:00006B23                 mov     esp, ebp
.text:00006B25                 pop     ebp
.text:00006B26                 retn
.text:00006B26 ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ endp
.text:00006B26
.text:00006B26 ; ---------------------------------------------------------------------------
.text:00006B27                 align 4
.text:00006B27 _text           ends
.text:00006B27
.text:00006B28 ; ===========================================================================
.text:00006B28
.text:00006B28 ; Segment type: Pure code
.text:00006B28 ; Segment permissions: Read/Execute
.text:00006B28 _text           segment para public 'CODE' use32
.text:00006B28                 assume cs:_text
.text:00006B28                 ;org 6B28h
.text:00006B28 ; COMDAT (pick any)
.text:00006B28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B28
.text:00006B28 ; =============== S U B R O U T I N E =======================================
.text:00006B28
.text:00006B28 ; Attributes: bp-based frame
.text:00006B28
.text:00006B28 ; void __thiscall CMethodProps::AddProp_NumThreads(CMethodProps *this, unsigned int)
.text:00006B28                 public ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
.text:00006B28 ?AddProp_NumThreads@CMethodProps@@QAEXI@Z proc near
.text:00006B28                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+35Bp
.text:00006B28                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+472p
.text:00006B28
.text:00006B28 var_4           = dword ptr -4
.text:00006B28 arg_0           = dword ptr  8
.text:00006B28
.text:00006B28                 push    ebp
.text:00006B29                 mov     ebp, esp
.text:00006B2B                 push    ecx
.text:00006B2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B33                 mov     [ebp+var_4], ecx
.text:00006B36                 mov     eax, [ebp+arg_0]
.text:00006B39                 push    eax             ; unsigned int
.text:00006B3A                 push    0Dh             ; unsigned __int32
.text:00006B3C                 mov     ecx, [ebp+var_4] ; this
.text:00006B3F                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006B44                 add     esp, 4
.text:00006B47                 cmp     ebp, esp
.text:00006B49                 call    __RTC_CheckEsp
.text:00006B4E                 mov     esp, ebp
.text:00006B50                 pop     ebp
.text:00006B51                 retn    4
.text:00006B51 ?AddProp_NumThreads@CMethodProps@@QAEXI@Z endp
.text:00006B51
.text:00006B51 _text           ends
.text:00006B51
.text:00006B54 ; ===========================================================================
.text:00006B54
.text:00006B54 ; Segment type: Pure code
.text:00006B54 ; Segment permissions: Read/Execute
.text:00006B54 _text           segment para public 'CODE' use32
.text:00006B54                 assume cs:_text
.text:00006B54                 ;org 6B54h
.text:00006B54 ; COMDAT (pick any)
.text:00006B54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B54
.text:00006B54 ; =============== S U B R O U T I N E =======================================
.text:00006B54
.text:00006B54 ; Attributes: bp-based frame
.text:00006B54
.text:00006B54 ; bool __thiscall NArchive::NZip::CCompressionMethodMode::IsRealAesMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:00006B54                 public ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ
.text:00006B54 ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ proc near
.text:00006B54                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1790p
.text:00006B54                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1858p ...
.text:00006B54
.text:00006B54 var_8           = dword ptr -8
.text:00006B54 var_4           = dword ptr -4
.text:00006B54
.text:00006B54                 push    ebp
.text:00006B55                 mov     ebp, esp
.text:00006B57                 sub     esp, 8
.text:00006B5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006B61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B68                 mov     [ebp+var_4], ecx
.text:00006B6B                 mov     eax, [ebp+var_4]
.text:00006B6E                 movzx   ecx, byte ptr [eax+24h]
.text:00006B72                 test    ecx, ecx
.text:00006B74                 jz      short loc_6B8A
.text:00006B76                 mov     edx, [ebp+var_4]
.text:00006B79                 movzx   eax, byte ptr [edx+15h]
.text:00006B7D                 test    eax, eax
.text:00006B7F                 jz      short loc_6B8A
.text:00006B81                 mov     [ebp+var_8], 1
.text:00006B88                 jmp     short loc_6B91
.text:00006B8A ; ---------------------------------------------------------------------------
.text:00006B8A
.text:00006B8A loc_6B8A:                               ; CODE XREF: NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)+20j
.text:00006B8A                                         ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)+2Bj
.text:00006B8A                 mov     [ebp+var_8], 0
.text:00006B91
.text:00006B91 loc_6B91:                               ; CODE XREF: NArchive::NZip::CCompressionMethodMode::IsRealAesMode(void)+34j
.text:00006B91                 mov     al, byte ptr [ebp+var_8]
.text:00006B94                 mov     esp, ebp
.text:00006B96                 pop     ebp
.text:00006B97                 retn
.text:00006B97 ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ endp
.text:00006B97
.text:00006B97 _text           ends
.text:00006B97
.text:00006B98 ; ===========================================================================
.text:00006B98
.text:00006B98 ; Segment type: Pure code
.text:00006B98 ; Segment permissions: Read/Execute
.text:00006B98 _text           segment para public 'CODE' use32
.text:00006B98                 assume cs:_text
.text:00006B98                 ;org 6B98h
.text:00006B98 ; COMDAT (pick any)
.text:00006B98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B98
.text:00006B98 ; =============== S U B R O U T I N E =======================================
.text:00006B98
.text:00006B98 ; Attributes: bp-based frame
.text:00006B98
.text:00006B98 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:00006B98                 public ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00006B98 ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text:00006B98                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+241p
.text:00006B98
.text:00006B98 var_10          = dword ptr -10h
.text:00006B98 var_C           = dword ptr -0Ch
.text:00006B98 var_4           = dword ptr -4
.text:00006B98
.text:00006B98                 push    ebp
.text:00006B99                 mov     ebp, esp
.text:00006B9B                 push    0FFFFFFFFh
.text:00006B9D                 push    offset __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00006BA2                 mov     eax, large fs:0
.text:00006BA8                 push    eax
.text:00006BA9                 push    ecx
.text:00006BAA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006BB1                 mov     eax, dword ptr ds:___security_cookie
.text:00006BB6                 xor     eax, ebp
.text:00006BB8                 push    eax
.text:00006BB9                 lea     eax, [ebp+var_C]
.text:00006BBC                 mov     large fs:0, eax
.text:00006BC2                 mov     [ebp+var_10], ecx
.text:00006BC5                 mov     ecx, [ebp+var_10] ; this
.text:00006BC8                 call    ??0CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::CBaseProps(void)
.text:00006BCD                 mov     [ebp+var_4], 0
.text:00006BD4                 mov     ecx, [ebp+var_10]
.text:00006BD7                 add     ecx, 18h
.text:00006BDA                 call    ??0?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::CRecordVector<uchar>(void)
.text:00006BDF                 mov     byte ptr [ebp+var_4], 1
.text:00006BE3                 mov     eax, [ebp+var_10]
.text:00006BE6                 mov     byte ptr [eax+24h], 0
.text:00006BEA                 mov     ecx, [ebp+var_10]
.text:00006BED                 add     ecx, 28h ; '('
.text:00006BF0                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00006BF5                 mov     ecx, [ebp+var_10]
.text:00006BF8                 mov     byte ptr [ecx+40h], 0
.text:00006BFC                 mov     edx, [ebp+var_10]
.text:00006BFF                 mov     dword ptr [edx+38h], 0
.text:00006C06                 mov     dword ptr [edx+3Ch], 0
.text:00006C0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006C14                 mov     eax, [ebp+var_10]
.text:00006C17                 mov     ecx, [ebp+var_C]
.text:00006C1A                 mov     large fs:0, ecx
.text:00006C21                 pop     ecx
.text:00006C22                 add     esp, 10h
.text:00006C25                 cmp     ebp, esp
.text:00006C27                 call    __RTC_CheckEsp
.text:00006C2C                 mov     esp, ebp
.text:00006C2E                 pop     ebp
.text:00006C2F                 retn
.text:00006C2F ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text:00006C2F
.text:00006C2F _text           ends
.text:00006C2F
.text$x:00006C30 ; ===========================================================================
.text$x:00006C30
.text$x:00006C30 ; Segment type: Pure code
.text$x:00006C30 ; Segment permissions: Read/Execute
.text$x:00006C30 _text$x         segment para public 'CODE' use32
.text$x:00006C30                 assume cs:_text$x
.text$x:00006C30                 ;org 6C30h
.text$x:00006C30 ; COMDAT (pick associative to section at 6B98)
.text$x:00006C30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006C30
.text$x:00006C30 ; =============== S U B R O U T I N E =======================================
.text$x:00006C30
.text$x:00006C30
.text$x:00006C30 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00006C30                                         ; DATA XREF: .xdata$x:00006C64o
.text$x:00006C30                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C33                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00006C33 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00006C33
.text$x:00006C38
.text$x:00006C38 ; =============== S U B R O U T I N E =======================================
.text$x:00006C38
.text$x:00006C38
.text$x:00006C38 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00006C38                                         ; DATA XREF: .xdata$x:00006C6Co
.text$x:00006C38                 mov     ecx, [ebp-10h]
.text$x:00006C3B                 add     ecx, 18h
.text$x:00006C3E                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:00006C3E __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00006C3E
.text$x:00006C43
.text$x:00006C43 ; =============== S U B R O U T I N E =======================================
.text$x:00006C43
.text$x:00006C43
.text$x:00006C43 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text$x:00006C43                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+5o
.text$x:00006C43
.text$x:00006C43 arg_4           = dword ptr  8
.text$x:00006C43
.text$x:00006C43                 mov     edx, [esp+arg_4]
.text$x:00006C47                 lea     eax, [edx+0Ch]
.text$x:00006C4A                 mov     ecx, [edx-8]
.text$x:00006C4D                 xor     ecx, eax
.text$x:00006C4F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C54                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text$x:00006C59                 jmp     ___CxxFrameHandler3
.text$x:00006C59 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text$x:00006C59
.text$x:00006C59 ; ---------------------------------------------------------------------------
.text$x:00006C5E                 align 10h
.text$x:00006C5E _text$x         ends
.text$x:00006C5E
.xdata$x:00006C60 ; ===========================================================================
.xdata$x:00006C60
.xdata$x:00006C60 ; Segment type: Pure data
.xdata$x:00006C60 ; Segment permissions: Read
.xdata$x:00006C60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006C60                 assume cs:_xdata$x
.xdata$x:00006C60                 ;org 6C60h
.xdata$x:00006C60 ; COMDAT (pick associative to section at 6B98)
.xdata$x:00006C60 __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00006C60                                         ; DATA XREF: .xdata$x:00006C78o
.xdata$x:00006C61                 db 0FFh
.xdata$x:00006C62                 db 0FFh
.xdata$x:00006C63                 db 0FFh
.xdata$x:00006C64                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
.xdata$x:00006C68                 db    0
.xdata$x:00006C69                 db    0
.xdata$x:00006C6A                 db    0
.xdata$x:00006C6B                 db    0
.xdata$x:00006C6C                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
.xdata$x:00006C70 __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00006C70                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00006C71                 db    5
.xdata$x:00006C72                 db  93h ; ô
.xdata$x:00006C73                 db  19h
.xdata$x:00006C74                 db    2
.xdata$x:00006C75                 db    0
.xdata$x:00006C76                 db    0
.xdata$x:00006C77                 db    0
.xdata$x:00006C78                 dd offset __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.xdata$x:00006C7C                 db    0
.xdata$x:00006C7D                 db    0
.xdata$x:00006C7E                 db    0
.xdata$x:00006C7F                 db    0
.xdata$x:00006C80                 db    0
.xdata$x:00006C81                 db    0
.xdata$x:00006C82                 db    0
.xdata$x:00006C83                 db    0
.xdata$x:00006C84                 db    0
.xdata$x:00006C85                 db    0
.xdata$x:00006C86                 db    0
.xdata$x:00006C87                 db    0
.xdata$x:00006C88                 db    0
.xdata$x:00006C89                 db    0
.xdata$x:00006C8A                 db    0
.xdata$x:00006C8B                 db    0
.xdata$x:00006C8C                 db    0
.xdata$x:00006C8D                 db    0
.xdata$x:00006C8E                 db    0
.xdata$x:00006C8F                 db    0
.xdata$x:00006C90                 db    1
.xdata$x:00006C91                 db    0
.xdata$x:00006C92                 db    0
.xdata$x:00006C93                 db    0
.xdata$x:00006C93 _xdata$x        ends
.xdata$x:00006C93
.text:00006C94 ; ===========================================================================
.text:00006C94
.text:00006C94 ; Segment type: Pure code
.text:00006C94 ; Segment permissions: Read/Execute
.text:00006C94 _text           segment para public 'CODE' use32
.text:00006C94                 assume cs:_text
.text:00006C94                 ;org 6C94h
.text:00006C94 ; COMDAT (pick any)
.text:00006C94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C94
.text:00006C94 ; =============== S U B R O U T I N E =======================================
.text:00006C94
.text:00006C94 ; Attributes: bp-based frame
.text:00006C94
.text:00006C94 ; _DWORD __thiscall NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:00006C94                 public ??0CBaseProps@NZip@NArchive@@QAE@XZ
.text:00006C94 ??0CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:00006C94                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+30p
.text:00006C94
.text:00006C94 var_4           = dword ptr -4
.text:00006C94
.text:00006C94                 push    ebp
.text:00006C95                 mov     ebp, esp
.text:00006C97                 push    ecx
.text:00006C98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C9F                 mov     [ebp+var_4], ecx
.text:00006CA2                 mov     ecx, [ebp+var_4]
.text:00006CA5                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00006CAA                 mov     eax, [ebp+var_4]
.text:00006CAD                 add     esp, 4
.text:00006CB0                 cmp     ebp, esp
.text:00006CB2                 call    __RTC_CheckEsp
.text:00006CB7                 mov     esp, ebp
.text:00006CB9                 pop     ebp
.text:00006CBA                 retn
.text:00006CBA ??0CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:00006CBA
.text:00006CBA ; ---------------------------------------------------------------------------
.text:00006CBB                 align 4
.text:00006CBB _text           ends
.text:00006CBB
.text:00006CBC ; ===========================================================================
.text:00006CBC
.text:00006CBC ; Segment type: Pure code
.text:00006CBC ; Segment permissions: Read/Execute
.text:00006CBC _text           segment para public 'CODE' use32
.text:00006CBC                 assume cs:_text
.text:00006CBC                 ;org 6CBCh
.text:00006CBC ; COMDAT (pick any)
.text:00006CBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CBC
.text:00006CBC ; =============== S U B R O U T I N E =======================================
.text:00006CBC
.text:00006CBC ; Attributes: bp-based frame
.text:00006CBC
.text:00006CBC ; public: __thiscall CMethodProps::CMethodProps(void)
.text:00006CBC                 public ??0CMethodProps@@QAE@XZ
.text:00006CBC ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::CBaseProps(void)+11p
.text:00006CBC
.text:00006CBC var_4           = dword ptr -4
.text:00006CBC
.text:00006CBC                 push    ebp
.text:00006CBD                 mov     ebp, esp
.text:00006CBF                 push    ecx
.text:00006CC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CC7                 mov     [ebp+var_4], ecx
.text:00006CCA                 mov     ecx, [ebp+var_4]
.text:00006CCD                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00006CD2                 mov     eax, [ebp+var_4]
.text:00006CD5                 add     esp, 4
.text:00006CD8                 cmp     ebp, esp
.text:00006CDA                 call    __RTC_CheckEsp
.text:00006CDF                 mov     esp, ebp
.text:00006CE1                 pop     ebp
.text:00006CE2                 retn
.text:00006CE2 ??0CMethodProps@@QAE@XZ endp
.text:00006CE2
.text:00006CE2 ; ---------------------------------------------------------------------------
.text:00006CE3                 align 4
.text:00006CE3 _text           ends
.text:00006CE3
.text:00006CE4 ; ===========================================================================
.text:00006CE4
.text:00006CE4 ; Segment type: Pure code
.text:00006CE4 ; Segment permissions: Read/Execute
.text:00006CE4 _text           segment para public 'CODE' use32
.text:00006CE4                 assume cs:_text
.text:00006CE4                 ;org 6CE4h
.text:00006CE4 ; COMDAT (pick any)
.text:00006CE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CE4
.text:00006CE4 ; =============== S U B R O U T I N E =======================================
.text:00006CE4
.text:00006CE4 ; Attributes: bp-based frame
.text:00006CE4
.text:00006CE4 ; public: __thiscall CProps::CProps(void)
.text:00006CE4                 public ??0CProps@@QAE@XZ
.text:00006CE4 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00006CE4
.text:00006CE4 var_4           = dword ptr -4
.text:00006CE4
.text:00006CE4                 push    ebp
.text:00006CE5                 mov     ebp, esp
.text:00006CE7                 push    ecx
.text:00006CE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CEF                 mov     [ebp+var_4], ecx
.text:00006CF2                 mov     ecx, [ebp+var_4]
.text:00006CF5                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00006CFA                 mov     eax, [ebp+var_4]
.text:00006CFD                 add     esp, 4
.text:00006D00                 cmp     ebp, esp
.text:00006D02                 call    __RTC_CheckEsp
.text:00006D07                 mov     esp, ebp
.text:00006D09                 pop     ebp
.text:00006D0A                 retn
.text:00006D0A ??0CProps@@QAE@XZ endp
.text:00006D0A
.text:00006D0A ; ---------------------------------------------------------------------------
.text:00006D0B                 align 4
.text:00006D0B _text           ends
.text:00006D0B
.text:00006D0C ; ===========================================================================
.text:00006D0C
.text:00006D0C ; Segment type: Pure code
.text:00006D0C ; Segment permissions: Read/Execute
.text:00006D0C _text           segment para public 'CODE' use32
.text:00006D0C                 assume cs:_text
.text:00006D0C                 ;org 6D0Ch
.text:00006D0C ; COMDAT (pick any)
.text:00006D0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D0C
.text:00006D0C ; =============== S U B R O U T I N E =======================================
.text:00006D0C
.text:00006D0C ; Attributes: bp-based frame
.text:00006D0C
.text:00006D0C ; _DWORD __thiscall NArchive::NZip::CBaseProps::~CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:00006D0C                 public ??1CBaseProps@NZip@NArchive@@QAE@XZ
.text:00006D0C ??1CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:00006D0C                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0+3j
.text:00006D0C                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:00006D0C
.text:00006D0C var_4           = dword ptr -4
.text:00006D0C
.text:00006D0C                 push    ebp
.text:00006D0D                 mov     ebp, esp
.text:00006D0F                 push    ecx
.text:00006D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D17                 mov     [ebp+var_4], ecx
.text:00006D1A                 mov     ecx, [ebp+var_4] ; this
.text:00006D1D                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00006D22                 add     esp, 4
.text:00006D25                 cmp     ebp, esp
.text:00006D27                 call    __RTC_CheckEsp
.text:00006D2C                 mov     esp, ebp
.text:00006D2E                 pop     ebp
.text:00006D2F                 retn
.text:00006D2F ??1CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:00006D2F
.text:00006D2F _text           ends
.text:00006D2F
.text:00006D30 ; ===========================================================================
.text:00006D30
.text:00006D30 ; Segment type: Pure code
.text:00006D30 ; Segment permissions: Read/Execute
.text:00006D30 _text           segment para public 'CODE' use32
.text:00006D30                 assume cs:_text
.text:00006D30                 ;org 6D30h
.text:00006D30 ; COMDAT (pick any)
.text:00006D30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D30
.text:00006D30 ; =============== S U B R O U T I N E =======================================
.text:00006D30
.text:00006D30 ; Attributes: bp-based frame
.text:00006D30
.text:00006D30 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00006D30                 public ??1CMethodProps@@QAE@XZ
.text:00006D30 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::~CBaseProps(void)+11p
.text:00006D30
.text:00006D30 var_4           = dword ptr -4
.text:00006D30
.text:00006D30                 push    ebp
.text:00006D31                 mov     ebp, esp
.text:00006D33                 push    ecx
.text:00006D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D3B                 mov     [ebp+var_4], ecx
.text:00006D3E                 mov     ecx, [ebp+var_4] ; this
.text:00006D41                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00006D46                 add     esp, 4
.text:00006D49                 cmp     ebp, esp
.text:00006D4B                 call    __RTC_CheckEsp
.text:00006D50                 mov     esp, ebp
.text:00006D52                 pop     ebp
.text:00006D53                 retn
.text:00006D53 ??1CMethodProps@@QAE@XZ endp
.text:00006D53
.text:00006D53 _text           ends
.text:00006D53
.text:00006D54 ; ===========================================================================
.text:00006D54
.text:00006D54 ; Segment type: Pure code
.text:00006D54 ; Segment permissions: Read/Execute
.text:00006D54 _text           segment para public 'CODE' use32
.text:00006D54                 assume cs:_text
.text:00006D54                 ;org 6D54h
.text:00006D54 ; COMDAT (pick any)
.text:00006D54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D54
.text:00006D54 ; =============== S U B R O U T I N E =======================================
.text:00006D54
.text:00006D54 ; Attributes: bp-based frame
.text:00006D54
.text:00006D54 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00006D54                 public ??1CProps@@QAE@XZ
.text:00006D54 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00006D54
.text:00006D54 var_4           = dword ptr -4
.text:00006D54
.text:00006D54                 push    ebp
.text:00006D55                 mov     ebp, esp
.text:00006D57                 push    ecx
.text:00006D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D5F                 mov     [ebp+var_4], ecx
.text:00006D62                 mov     ecx, [ebp+var_4]
.text:00006D65                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00006D6A                 add     esp, 4
.text:00006D6D                 cmp     ebp, esp
.text:00006D6F                 call    __RTC_CheckEsp
.text:00006D74                 mov     esp, ebp
.text:00006D76                 pop     ebp
.text:00006D77                 retn
.text:00006D77 ??1CProps@@QAE@XZ endp
.text:00006D77
.text:00006D77 _text           ends
.text:00006D77
.text:00006D78 ; ===========================================================================
.text:00006D78
.text:00006D78 ; Segment type: Pure code
.text:00006D78 ; Segment permissions: Read/Execute
.text:00006D78 _text           segment para public 'CODE' use32
.text:00006D78                 assume cs:_text
.text:00006D78                 ;org 6D78h
.text:00006D78 ; COMDAT (pick any)
.text:00006D78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D78
.text:00006D78 ; =============== S U B R O U T I N E =======================================
.text:00006D78
.text:00006D78 ; Attributes: bp-based frame
.text:00006D78
.text:00006D78 ; _DWORD __thiscall NArchive::NZip::CItemOut::CItemOut(NArchive::NZip::CItemOut *__hidden this)
.text:00006D78                 public ??0CItemOut@NZip@NArchive@@QAE@XZ
.text:00006D78 ??0CItemOut@NZip@NArchive@@QAE@XZ proc near
.text:00006D78                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CFCp
.text:00006D78                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1599p ...
.text:00006D78
.text:00006D78 var_4           = dword ptr -4
.text:00006D78
.text:00006D78                 push    ebp
.text:00006D79                 mov     ebp, esp
.text:00006D7B                 push    ecx
.text:00006D7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D83                 mov     [ebp+var_4], ecx
.text:00006D86                 mov     ecx, [ebp+var_4] ; this
.text:00006D89                 call    ??0CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::CItem(void)
.text:00006D8E                 mov     eax, [ebp+var_4]
.text:00006D91                 mov     byte ptr [eax+78h], 0
.text:00006D95                 mov     eax, [ebp+var_4]
.text:00006D98                 add     esp, 4
.text:00006D9B                 cmp     ebp, esp
.text:00006D9D                 call    __RTC_CheckEsp
.text:00006DA2                 mov     esp, ebp
.text:00006DA4                 pop     ebp
.text:00006DA5                 retn
.text:00006DA5 ??0CItemOut@NZip@NArchive@@QAE@XZ endp
.text:00006DA5
.text:00006DA5 ; ---------------------------------------------------------------------------
.text:00006DA6                 align 4
.text:00006DA6 _text           ends
.text:00006DA6
.text:00006DA8 ; ===========================================================================
.text:00006DA8
.text:00006DA8 ; Segment type: Pure code
.text:00006DA8 ; Segment permissions: Read/Execute
.text:00006DA8 _text           segment para public 'CODE' use32
.text:00006DA8                 assume cs:_text
.text:00006DA8                 ;org 6DA8h
.text:00006DA8 ; COMDAT (pick any)
.text:00006DA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DA8
.text:00006DA8 ; =============== S U B R O U T I N E =======================================
.text:00006DA8
.text:00006DA8 ; Attributes: bp-based frame
.text:00006DA8
.text:00006DA8 ; _DWORD __thiscall NArchive::NZip::CItem::CItem(NArchive::NZip::CItem *__hidden this)
.text:00006DA8                 public ??0CItem@NZip@NArchive@@QAE@XZ
.text:00006DA8 ??0CItem@NZip@NArchive@@QAE@XZ proc near
.text:00006DA8                                         ; CODE XREF: NArchive::NZip::CItemOut::CItemOut(void)+11p
.text:00006DA8                                         ; NArchive::NZip::CItemEx::CItemEx(void)+11p
.text:00006DA8
.text:00006DA8 var_10          = dword ptr -10h
.text:00006DA8 var_C           = dword ptr -0Ch
.text:00006DA8 var_4           = dword ptr -4
.text:00006DA8
.text:00006DA8                 push    ebp
.text:00006DA9                 mov     ebp, esp
.text:00006DAB                 push    0FFFFFFFFh
.text:00006DAD                 push    offset __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ
.text:00006DB2                 mov     eax, large fs:0
.text:00006DB8                 push    eax
.text:00006DB9                 push    ecx
.text:00006DBA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006DC1                 mov     eax, dword ptr ds:___security_cookie
.text:00006DC6                 xor     eax, ebp
.text:00006DC8                 push    eax
.text:00006DC9                 lea     eax, [ebp+var_C]
.text:00006DCC                 mov     large fs:0, eax
.text:00006DD2                 mov     [ebp+var_10], ecx
.text:00006DD5                 mov     ecx, [ebp+var_10] ; this
.text:00006DD8                 call    ??0CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::CLocalItem(void)
.text:00006DDD                 mov     [ebp+var_4], 0
.text:00006DE4                 xor     eax, eax
.text:00006DE6                 mov     ecx, [ebp+var_10]
.text:00006DE9                 mov     [ecx+3Ah], ax
.text:00006DED                 mov     edx, [ebp+var_10]
.text:00006DF0                 mov     dword ptr [edx+3Ch], 0
.text:00006DF7                 mov     ecx, [ebp+var_10]
.text:00006DFA                 add     ecx, 48h ; 'H'  ; this
.text:00006DFD                 call    ??0CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::CExtraBlock(void)
.text:00006E02                 mov     byte ptr [ebp+var_4], 1
.text:00006E06                 mov     ecx, [ebp+var_10]
.text:00006E09                 add     ecx, 54h ; 'T'
.text:00006E0C                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00006E11                 mov     eax, [ebp+var_10]
.text:00006E14                 mov     byte ptr [eax+5Ch], 0
.text:00006E18                 mov     ecx, [ebp+var_10]
.text:00006E1B                 mov     byte ptr [ecx+5Dh], 0
.text:00006E1F                 mov     edx, [ebp+var_10]
.text:00006E22                 mov     byte ptr [edx+38h], 0
.text:00006E26                 mov     eax, [ebp+var_10]
.text:00006E29                 mov     byte ptr [eax+39h], 0
.text:00006E2D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006E34                 mov     eax, [ebp+var_10]
.text:00006E37                 mov     ecx, [ebp+var_C]
.text:00006E3A                 mov     large fs:0, ecx
.text:00006E41                 pop     ecx
.text:00006E42                 add     esp, 10h
.text:00006E45                 cmp     ebp, esp
.text:00006E47                 call    __RTC_CheckEsp
.text:00006E4C                 mov     esp, ebp
.text:00006E4E                 pop     ebp
.text:00006E4F                 retn
.text:00006E4F ??0CItem@NZip@NArchive@@QAE@XZ endp
.text:00006E4F
.text:00006E4F _text           ends
.text:00006E4F
.text$x:00006E50 ; ===========================================================================
.text$x:00006E50
.text$x:00006E50 ; Segment type: Pure code
.text$x:00006E50 ; Segment permissions: Read/Execute
.text$x:00006E50 _text$x         segment para public 'CODE' use32
.text$x:00006E50                 assume cs:_text$x
.text$x:00006E50                 ;org 6E50h
.text$x:00006E50 ; COMDAT (pick associative to section at 6DA8)
.text$x:00006E50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006E50
.text$x:00006E50 ; =============== S U B R O U T I N E =======================================
.text$x:00006E50
.text$x:00006E50
.text$x:00006E50 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00006E50                                         ; DATA XREF: .xdata$x:00006E84o
.text$x:00006E50                 mov     ecx, [ebp-10h]  ; this
.text$x:00006E53                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:00006E53 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00006E53
.text$x:00006E58
.text$x:00006E58 ; =============== S U B R O U T I N E =======================================
.text$x:00006E58
.text$x:00006E58
.text$x:00006E58 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00006E58                                         ; DATA XREF: .xdata$x:00006E8Co
.text$x:00006E58                 mov     ecx, [ebp-10h]
.text$x:00006E5B                 add     ecx, 48h ; 'H'  ; this
.text$x:00006E5E                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:00006E5E __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00006E5E
.text$x:00006E63
.text$x:00006E63 ; =============== S U B R O U T I N E =======================================
.text$x:00006E63
.text$x:00006E63
.text$x:00006E63 __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00006E63                                         ; DATA XREF: NArchive::NZip::CItem::CItem(void)+5o
.text$x:00006E63
.text$x:00006E63 arg_4           = dword ptr  8
.text$x:00006E63
.text$x:00006E63                 mov     edx, [esp+arg_4]
.text$x:00006E67                 lea     eax, [edx+0Ch]
.text$x:00006E6A                 mov     ecx, [edx-8]
.text$x:00006E6D                 xor     ecx, eax
.text$x:00006E6F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E74                 mov     eax, offset __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ
.text$x:00006E79                 jmp     ___CxxFrameHandler3
.text$x:00006E79 __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ endp
.text$x:00006E79
.text$x:00006E79 ; ---------------------------------------------------------------------------
.text$x:00006E7E                 align 10h
.text$x:00006E7E _text$x         ends
.text$x:00006E7E
.xdata$x:00006E80 ; ===========================================================================
.xdata$x:00006E80
.xdata$x:00006E80 ; Segment type: Pure data
.xdata$x:00006E80 ; Segment permissions: Read
.xdata$x:00006E80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006E80                 assume cs:_xdata$x
.xdata$x:00006E80                 ;org 6E80h
.xdata$x:00006E80 ; COMDAT (pick associative to section at 6DA8)
.xdata$x:00006E80 __unwindtable$??0CItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00006E80                                         ; DATA XREF: .xdata$x:00006E98o
.xdata$x:00006E81                 db 0FFh
.xdata$x:00006E82                 db 0FFh
.xdata$x:00006E83                 db 0FFh
.xdata$x:00006E84                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00006E88                 db    0
.xdata$x:00006E89                 db    0
.xdata$x:00006E8A                 db    0
.xdata$x:00006E8B                 db    0
.xdata$x:00006E8C                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1
.xdata$x:00006E90 __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00006E90                                         ; DATA XREF: __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00006E91                 db    5
.xdata$x:00006E92                 db  93h ; ô
.xdata$x:00006E93                 db  19h
.xdata$x:00006E94                 db    2
.xdata$x:00006E95                 db    0
.xdata$x:00006E96                 db    0
.xdata$x:00006E97                 db    0
.xdata$x:00006E98                 dd offset __unwindtable$??0CItem@NZip@NArchive@@QAE@XZ
.xdata$x:00006E9C                 db    0
.xdata$x:00006E9D                 db    0
.xdata$x:00006E9E                 db    0
.xdata$x:00006E9F                 db    0
.xdata$x:00006EA0                 db    0
.xdata$x:00006EA1                 db    0
.xdata$x:00006EA2                 db    0
.xdata$x:00006EA3                 db    0
.xdata$x:00006EA4                 db    0
.xdata$x:00006EA5                 db    0
.xdata$x:00006EA6                 db    0
.xdata$x:00006EA7                 db    0
.xdata$x:00006EA8                 db    0
.xdata$x:00006EA9                 db    0
.xdata$x:00006EAA                 db    0
.xdata$x:00006EAB                 db    0
.xdata$x:00006EAC                 db    0
.xdata$x:00006EAD                 db    0
.xdata$x:00006EAE                 db    0
.xdata$x:00006EAF                 db    0
.xdata$x:00006EB0                 db    1
.xdata$x:00006EB1                 db    0
.xdata$x:00006EB2                 db    0
.xdata$x:00006EB3                 db    0
.xdata$x:00006EB3 _xdata$x        ends
.xdata$x:00006EB3
.text:00006EB4 ; ===========================================================================
.text:00006EB4
.text:00006EB4 ; Segment type: Pure code
.text:00006EB4 ; Segment permissions: Read/Execute
.text:00006EB4 _text           segment para public 'CODE' use32
.text:00006EB4                 assume cs:_text
.text:00006EB4                 ;org 6EB4h
.text:00006EB4 ; COMDAT (pick any)
.text:00006EB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006EB4
.text:00006EB4 ; =============== S U B R O U T I N E =======================================
.text:00006EB4
.text:00006EB4 ; Attributes: bp-based frame
.text:00006EB4
.text:00006EB4 ; _DWORD __thiscall NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem *__hidden this)
.text:00006EB4                 public ??0CLocalItem@NZip@NArchive@@QAE@XZ
.text:00006EB4 ??0CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text:00006EB4                                         ; CODE XREF: NArchive::NZip::CItem::CItem(void)+30p
.text:00006EB4
.text:00006EB4 var_10          = dword ptr -10h
.text:00006EB4 var_C           = dword ptr -0Ch
.text:00006EB4 var_4           = dword ptr -4
.text:00006EB4
.text:00006EB4                 push    ebp
.text:00006EB5                 mov     ebp, esp
.text:00006EB7                 push    0FFFFFFFFh
.text:00006EB9                 push    offset __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ
.text:00006EBE                 mov     eax, large fs:0
.text:00006EC4                 push    eax
.text:00006EC5                 push    ecx
.text:00006EC6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006ECD                 mov     eax, dword ptr ds:___security_cookie
.text:00006ED2                 xor     eax, ebp
.text:00006ED4                 push    eax
.text:00006ED5                 lea     eax, [ebp+var_C]
.text:00006ED8                 mov     large fs:0, eax
.text:00006EDE                 mov     [ebp+var_10], ecx
.text:00006EE1                 mov     ecx, [ebp+var_10]
.text:00006EE4                 add     ecx, 20h ; ' '
.text:00006EE7                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00006EEC                 mov     [ebp+var_4], 0
.text:00006EF3                 mov     ecx, [ebp+var_10]
.text:00006EF6                 add     ecx, 2Ch ; ','  ; this
.text:00006EF9                 call    ??0CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::CExtraBlock(void)
.text:00006EFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006F05                 mov     eax, [ebp+var_10]
.text:00006F08                 mov     ecx, [ebp+var_C]
.text:00006F0B                 mov     large fs:0, ecx
.text:00006F12                 pop     ecx
.text:00006F13                 add     esp, 10h
.text:00006F16                 cmp     ebp, esp
.text:00006F18                 call    __RTC_CheckEsp
.text:00006F1D                 mov     esp, ebp
.text:00006F1F                 pop     ebp
.text:00006F20                 retn
.text:00006F20 ??0CLocalItem@NZip@NArchive@@QAE@XZ endp
.text:00006F20
.text:00006F20 ; ---------------------------------------------------------------------------
.text:00006F21                 align 4
.text:00006F21 _text           ends
.text:00006F21
.text$x:00006F24 ; ===========================================================================
.text$x:00006F24
.text$x:00006F24 ; Segment type: Pure code
.text$x:00006F24 ; Segment permissions: Read/Execute
.text$x:00006F24 _text$x         segment para public 'CODE' use32
.text$x:00006F24                 assume cs:_text$x
.text$x:00006F24                 ;org 6F24h
.text$x:00006F24 ; COMDAT (pick associative to section at 6EB4)
.text$x:00006F24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006F24
.text$x:00006F24 ; =============== S U B R O U T I N E =======================================
.text$x:00006F24
.text$x:00006F24
.text$x:00006F24 __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00006F24                                         ; DATA XREF: .xdata$x:00006F50o
.text$x:00006F24                 mov     ecx, [ebp-10h]
.text$x:00006F27                 add     ecx, 20h ; ' '  ; this
.text$x:00006F2A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00006F2A __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00006F2A
.text$x:00006F2F
.text$x:00006F2F ; =============== S U B R O U T I N E =======================================
.text$x:00006F2F
.text$x:00006F2F
.text$x:00006F2F __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00006F2F                                         ; DATA XREF: NArchive::NZip::CLocalItem::CLocalItem(void)+5o
.text$x:00006F2F
.text$x:00006F2F arg_4           = dword ptr  8
.text$x:00006F2F
.text$x:00006F2F                 mov     edx, [esp+arg_4]
.text$x:00006F33                 lea     eax, [edx+0Ch]
.text$x:00006F36                 mov     ecx, [edx-8]
.text$x:00006F39                 xor     ecx, eax
.text$x:00006F3B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F40                 mov     eax, offset __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ
.text$x:00006F45                 jmp     ___CxxFrameHandler3
.text$x:00006F45 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ endp
.text$x:00006F45
.text$x:00006F45 ; ---------------------------------------------------------------------------
.text$x:00006F4A                 align 4
.text$x:00006F4A _text$x         ends
.text$x:00006F4A
.xdata$x:00006F4C ; ===========================================================================
.xdata$x:00006F4C
.xdata$x:00006F4C ; Segment type: Pure data
.xdata$x:00006F4C ; Segment permissions: Read
.xdata$x:00006F4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006F4C                 assume cs:_xdata$x
.xdata$x:00006F4C                 ;org 6F4Ch
.xdata$x:00006F4C ; COMDAT (pick associative to section at 6EB4)
.xdata$x:00006F4C __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00006F4C                                         ; DATA XREF: .xdata$x:00006F5Co
.xdata$x:00006F4D                 db 0FFh
.xdata$x:00006F4E                 db 0FFh
.xdata$x:00006F4F                 db 0FFh
.xdata$x:00006F50                 dd offset __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00006F54 __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00006F54                                         ; DATA XREF: __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00006F55                 db    5
.xdata$x:00006F56                 db  93h ; ô
.xdata$x:00006F57                 db  19h
.xdata$x:00006F58                 db    1
.xdata$x:00006F59                 db    0
.xdata$x:00006F5A                 db    0
.xdata$x:00006F5B                 db    0
.xdata$x:00006F5C                 dd offset __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ
.xdata$x:00006F60                 db    0
.xdata$x:00006F61                 db    0
.xdata$x:00006F62                 db    0
.xdata$x:00006F63                 db    0
.xdata$x:00006F64                 db    0
.xdata$x:00006F65                 db    0
.xdata$x:00006F66                 db    0
.xdata$x:00006F67                 db    0
.xdata$x:00006F68                 db    0
.xdata$x:00006F69                 db    0
.xdata$x:00006F6A                 db    0
.xdata$x:00006F6B                 db    0
.xdata$x:00006F6C                 db    0
.xdata$x:00006F6D                 db    0
.xdata$x:00006F6E                 db    0
.xdata$x:00006F6F                 db    0
.xdata$x:00006F70                 db    0
.xdata$x:00006F71                 db    0
.xdata$x:00006F72                 db    0
.xdata$x:00006F73                 db    0
.xdata$x:00006F74                 db    1
.xdata$x:00006F75                 db    0
.xdata$x:00006F76                 db    0
.xdata$x:00006F77                 db    0
.xdata$x:00006F77 _xdata$x        ends
.xdata$x:00006F77
.text:00006F78 ; ===========================================================================
.text:00006F78
.text:00006F78 ; Segment type: Pure code
.text:00006F78 ; Segment permissions: Read/Execute
.text:00006F78 _text           segment para public 'CODE' use32
.text:00006F78                 assume cs:_text
.text:00006F78                 ;org 6F78h
.text:00006F78 ; COMDAT (pick any)
.text:00006F78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F78
.text:00006F78 ; =============== S U B R O U T I N E =======================================
.text:00006F78
.text:00006F78 ; Attributes: bp-based frame
.text:00006F78
.text:00006F78 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00006F78                 public ??1AString@@QAE@XZ
.text:00006F78 ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0+6j
.text:00006F78                                         ; NArchive::NZip::CLocalItem::~CLocalItem(void)+4Cp ...
.text:00006F78
.text:00006F78 var_8           = dword ptr -8
.text:00006F78 var_4           = dword ptr -4
.text:00006F78
.text:00006F78                 push    ebp
.text:00006F79                 mov     ebp, esp
.text:00006F7B                 sub     esp, 8
.text:00006F7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F8C                 mov     [ebp+var_4], ecx
.text:00006F8F                 mov     eax, [ebp+var_4]
.text:00006F92                 mov     ecx, [eax]
.text:00006F94                 mov     [ebp+var_8], ecx
.text:00006F97                 mov     edx, [ebp+var_8]
.text:00006F9A                 push    edx             ; void *
.text:00006F9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006FA0                 add     esp, 4
.text:00006FA3                 add     esp, 8
.text:00006FA6                 cmp     ebp, esp
.text:00006FA8                 call    __RTC_CheckEsp
.text:00006FAD                 mov     esp, ebp
.text:00006FAF                 pop     ebp
.text:00006FB0                 retn
.text:00006FB0 ??1AString@@QAE@XZ endp
.text:00006FB0
.text:00006FB0 ; ---------------------------------------------------------------------------
.text:00006FB1                 align 4
.text:00006FB1 _text           ends
.text:00006FB1
.text:00006FB4 ; ===========================================================================
.text:00006FB4
.text:00006FB4 ; Segment type: Pure code
.text:00006FB4 ; Segment permissions: Read/Execute
.text:00006FB4 _text           segment para public 'CODE' use32
.text:00006FB4                 assume cs:_text
.text:00006FB4                 ;org 6FB4h
.text:00006FB4 ; COMDAT (pick any)
.text:00006FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006FB4
.text:00006FB4 ; =============== S U B R O U T I N E =======================================
.text:00006FB4
.text:00006FB4 ; Attributes: bp-based frame
.text:00006FB4
.text:00006FB4 ; _DWORD __thiscall NArchive::NZip::CLocalItem::~CLocalItem(NArchive::NZip::CLocalItem *__hidden this)
.text:00006FB4                 public ??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00006FB4 ??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text:00006FB4                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0+3j
.text:00006FB4                                         ; NArchive::NZip::CItem::~CItem(void)+58p ...
.text:00006FB4
.text:00006FB4 var_10          = dword ptr -10h
.text:00006FB4 var_C           = dword ptr -0Ch
.text:00006FB4 var_4           = dword ptr -4
.text:00006FB4
.text:00006FB4                 push    ebp
.text:00006FB5                 mov     ebp, esp
.text:00006FB7                 push    0FFFFFFFFh
.text:00006FB9                 push    offset __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00006FBE                 mov     eax, large fs:0
.text:00006FC4                 push    eax
.text:00006FC5                 push    ecx
.text:00006FC6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006FCD                 mov     eax, dword ptr ds:___security_cookie
.text:00006FD2                 xor     eax, ebp
.text:00006FD4                 push    eax
.text:00006FD5                 lea     eax, [ebp+var_C]
.text:00006FD8                 mov     large fs:0, eax
.text:00006FDE                 mov     [ebp+var_10], ecx
.text:00006FE1                 mov     [ebp+var_4], 0
.text:00006FE8                 mov     ecx, [ebp+var_10]
.text:00006FEB                 add     ecx, 2Ch ; ','  ; this
.text:00006FEE                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00006FF3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006FFA                 mov     ecx, [ebp+var_10]
.text:00006FFD                 add     ecx, 20h ; ' '  ; this
.text:00007000                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00007005                 mov     ecx, [ebp+var_C]
.text:00007008                 mov     large fs:0, ecx
.text:0000700F                 pop     ecx
.text:00007010                 add     esp, 10h
.text:00007013                 cmp     ebp, esp
.text:00007015                 call    __RTC_CheckEsp
.text:0000701A                 mov     esp, ebp
.text:0000701C                 pop     ebp
.text:0000701D                 retn
.text:0000701D ??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text:0000701D
.text:0000701D ; ---------------------------------------------------------------------------
.text:0000701E                 align 10h
.text:0000701E _text           ends
.text:0000701E
.text$x:00007020 ; ===========================================================================
.text$x:00007020
.text$x:00007020 ; Segment type: Pure code
.text$x:00007020 ; Segment permissions: Read/Execute
.text$x:00007020 _text$x         segment para public 'CODE' use32
.text$x:00007020                 assume cs:_text$x
.text$x:00007020                 ;org 7020h
.text$x:00007020 ; COMDAT (pick associative to section at 6FB4)
.text$x:00007020                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007020
.text$x:00007020 ; =============== S U B R O U T I N E =======================================
.text$x:00007020
.text$x:00007020
.text$x:00007020 __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00007020                                         ; DATA XREF: .xdata$x:0000704Co
.text$x:00007020                 mov     ecx, [ebp-10h]
.text$x:00007023                 add     ecx, 20h ; ' '  ; this
.text$x:00007026                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00007026 __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00007026
.text$x:0000702B
.text$x:0000702B ; =============== S U B R O U T I N E =======================================
.text$x:0000702B
.text$x:0000702B
.text$x:0000702B __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text$x:0000702B                                         ; DATA XREF: NArchive::NZip::CLocalItem::~CLocalItem(void)+5o
.text$x:0000702B
.text$x:0000702B arg_4           = dword ptr  8
.text$x:0000702B
.text$x:0000702B                 mov     edx, [esp+arg_4]
.text$x:0000702F                 lea     eax, [edx+0Ch]
.text$x:00007032                 mov     ecx, [edx-8]
.text$x:00007035                 xor     ecx, eax
.text$x:00007037                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000703C                 mov     eax, offset __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text$x:00007041                 jmp     ___CxxFrameHandler3
.text$x:00007041 __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text$x:00007041
.text$x:00007041 ; ---------------------------------------------------------------------------
.text$x:00007046                 align 4
.text$x:00007046 _text$x         ends
.text$x:00007046
.xdata$x:00007048 ; ===========================================================================
.xdata$x:00007048
.xdata$x:00007048 ; Segment type: Pure data
.xdata$x:00007048 ; Segment permissions: Read
.xdata$x:00007048 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007048                 assume cs:_xdata$x
.xdata$x:00007048                 ;org 7048h
.xdata$x:00007048 ; COMDAT (pick associative to section at 6FB4)
.xdata$x:00007048 __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00007048                                         ; DATA XREF: .xdata$x:00007058o
.xdata$x:00007049                 db 0FFh
.xdata$x:0000704A                 db 0FFh
.xdata$x:0000704B                 db 0FFh
.xdata$x:0000704C                 dd offset __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00007050 __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00007050                                         ; DATA XREF: __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00007051                 db    5
.xdata$x:00007052                 db  93h ; ô
.xdata$x:00007053                 db  19h
.xdata$x:00007054                 db    1
.xdata$x:00007055                 db    0
.xdata$x:00007056                 db    0
.xdata$x:00007057                 db    0
.xdata$x:00007058                 dd offset __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
.xdata$x:0000705C                 db    0
.xdata$x:0000705D                 db    0
.xdata$x:0000705E                 db    0
.xdata$x:0000705F                 db    0
.xdata$x:00007060                 db    0
.xdata$x:00007061                 db    0
.xdata$x:00007062                 db    0
.xdata$x:00007063                 db    0
.xdata$x:00007064                 db    0
.xdata$x:00007065                 db    0
.xdata$x:00007066                 db    0
.xdata$x:00007067                 db    0
.xdata$x:00007068                 db    0
.xdata$x:00007069                 db    0
.xdata$x:0000706A                 db    0
.xdata$x:0000706B                 db    0
.xdata$x:0000706C                 db    0
.xdata$x:0000706D                 db    0
.xdata$x:0000706E                 db    0
.xdata$x:0000706F                 db    0
.xdata$x:00007070                 db    1
.xdata$x:00007071                 db    0
.xdata$x:00007072                 db    0
.xdata$x:00007073                 db    0
.xdata$x:00007073 _xdata$x        ends
.xdata$x:00007073
.text:00007074 ; ===========================================================================
.text:00007074
.text:00007074 ; Segment type: Pure code
.text:00007074 ; Segment permissions: Read/Execute
.text:00007074 _text           segment para public 'CODE' use32
.text:00007074                 assume cs:_text
.text:00007074                 ;org 7074h
.text:00007074 ; COMDAT (pick any)
.text:00007074                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007074
.text:00007074 ; =============== S U B R O U T I N E =======================================
.text:00007074
.text:00007074 ; Attributes: bp-based frame
.text:00007074
.text:00007074 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock *__hidden this)
.text:00007074                 public ??0CExtraBlock@NZip@NArchive@@QAE@XZ
.text:00007074 ??0CExtraBlock@NZip@NArchive@@QAE@XZ proc near
.text:00007074                                         ; CODE XREF: NArchive::NZip::CItem::CItem(void)+55p
.text:00007074                                         ; NArchive::NZip::CLocalItem::CLocalItem(void)+45p
.text:00007074
.text:00007074 var_4           = dword ptr -4
.text:00007074
.text:00007074                 push    ebp
.text:00007075                 mov     ebp, esp
.text:00007077                 push    ecx
.text:00007078                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000707F                 mov     [ebp+var_4], ecx
.text:00007082                 mov     ecx, [ebp+var_4]
.text:00007085                 call    ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(void)
.text:0000708A                 mov     eax, [ebp+var_4]
.text:0000708D                 add     esp, 4
.text:00007090                 cmp     ebp, esp
.text:00007092                 call    __RTC_CheckEsp
.text:00007097                 mov     esp, ebp
.text:00007099                 pop     ebp
.text:0000709A                 retn
.text:0000709A ??0CExtraBlock@NZip@NArchive@@QAE@XZ endp
.text:0000709A
.text:0000709A ; ---------------------------------------------------------------------------
.text:0000709B                 align 4
.text:0000709B _text           ends
.text:0000709B
.text:0000709C ; ===========================================================================
.text:0000709C
.text:0000709C ; Segment type: Pure code
.text:0000709C ; Segment permissions: Read/Execute
.text:0000709C _text           segment para public 'CODE' use32
.text:0000709C                 assume cs:_text
.text:0000709C                 ;org 709Ch
.text:0000709C ; COMDAT (pick any)
.text:0000709C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000709C
.text:0000709C ; =============== S U B R O U T I N E =======================================
.text:0000709C
.text:0000709C ; Attributes: bp-based frame
.text:0000709C
.text:0000709C ; _DWORD __thiscall NArchive::NZip::CExtraBlock::~CExtraBlock(NArchive::NZip::CExtraBlock *__hidden this)
.text:0000709C                 public ??1CExtraBlock@NZip@NArchive@@QAE@XZ
.text:0000709C ??1CExtraBlock@NZip@NArchive@@QAE@XZ proc near
.text:0000709C                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1+6j
.text:0000709C                                         ; NArchive::NZip::CLocalItem::~CLocalItem(void)+3Ap ...
.text:0000709C
.text:0000709C var_4           = dword ptr -4
.text:0000709C
.text:0000709C                 push    ebp
.text:0000709D                 mov     ebp, esp
.text:0000709F                 push    ecx
.text:000070A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070A7                 mov     [ebp+var_4], ecx
.text:000070AA                 mov     ecx, [ebp+var_4]
.text:000070AD                 call    ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)
.text:000070B2                 add     esp, 4
.text:000070B5                 cmp     ebp, esp
.text:000070B7                 call    __RTC_CheckEsp
.text:000070BC                 mov     esp, ebp
.text:000070BE                 pop     ebp
.text:000070BF                 retn
.text:000070BF ??1CExtraBlock@NZip@NArchive@@QAE@XZ endp
.text:000070BF
.text:000070BF _text           ends
.text:000070BF
.text:000070C0 ; ===========================================================================
.text:000070C0
.text:000070C0 ; Segment type: Pure code
.text:000070C0 ; Segment permissions: Read/Execute
.text:000070C0 _text           segment para public 'CODE' use32
.text:000070C0                 assume cs:_text
.text:000070C0                 ;org 70C0h
.text:000070C0 ; COMDAT (pick any)
.text:000070C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000070C0
.text:000070C0 ; =============== S U B R O U T I N E =======================================
.text:000070C0
.text:000070C0 ; Attributes: bp-based frame
.text:000070C0
.text:000070C0 ; void __thiscall NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::COutArchive *this, const struct NArchive::NZip::CLocalItem *)
.text:000070C0                 public ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z
.text:000070C0 ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z proc near
.text:000070C0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+187Ap
.text:000070C0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1E42p ...
.text:000070C0
.text:000070C0 var_4           = dword ptr -4
.text:000070C0 arg_0           = dword ptr  8
.text:000070C0
.text:000070C0                 push    ebp
.text:000070C1                 mov     ebp, esp
.text:000070C3                 push    ecx
.text:000070C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070CB                 mov     [ebp+var_4], ecx
.text:000070CE                 mov     eax, [ebp+arg_0]
.text:000070D1                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:000070D2                 mov     ecx, [ebp+var_4] ; this
.text:000070D5                 call    ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)
.text:000070DA                 mov     ecx, [ebp+var_4] ; this
.text:000070DD                 call    ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::COutArchive::SeekToCurPos(void)
.text:000070E2                 add     esp, 4
.text:000070E5                 cmp     ebp, esp
.text:000070E7                 call    __RTC_CheckEsp
.text:000070EC                 mov     esp, ebp
.text:000070EE                 pop     ebp
.text:000070EF                 retn    4
.text:000070EF ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z endp
.text:000070EF
.text:000070EF ; ---------------------------------------------------------------------------
.text:000070F2                 align 4
.text:000070F2 _text           ends
.text:000070F2
.text:000070F4 ; ===========================================================================
.text:000070F4
.text:000070F4 ; Segment type: Pure code
.text:000070F4 ; Segment permissions: Read/Execute
.text:000070F4 _text           segment para public 'CODE' use32
.text:000070F4                 assume cs:_text
.text:000070F4                 ;org 70F4h
.text:000070F4 ; COMDAT (pick any)
.text:000070F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000070F4
.text:000070F4 ; =============== S U B R O U T I N E =======================================
.text:000070F4
.text:000070F4 ; Attributes: bp-based frame
.text:000070F4
.text:000070F4 ; unsigned __int64 __thiscall NArchive::NZip::CItemEx::GetLocalFullSize(NArchive::NZip::CItemEx *__hidden this)
.text:000070F4                 public ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ
.text:000070F4 ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ proc near
.text:000070F4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+184p
.text:000070F4                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1CAp
.text:000070F4
.text:000070F4 var_4           = dword ptr -4
.text:000070F4
.text:000070F4                 push    ebp
.text:000070F5                 mov     ebp, esp
.text:000070F7                 push    ecx
.text:000070F8                 push    esi
.text:000070F9                 push    edi
.text:000070FA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007101                 mov     [ebp+var_4], ecx
.text:00007104                 mov     eax, [ebp+var_4]
.text:00007107                 mov     esi, [eax+60h]
.text:0000710A                 xor     edi, edi
.text:0000710C                 mov     ecx, [ebp+var_4]
.text:0000710F                 add     esi, [ecx+10h]
.text:00007112                 adc     edi, [ecx+14h]
.text:00007115                 mov     ecx, [ebp+var_4] ; this
.text:00007118                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:0000711D                 movzx   edx, al
.text:00007120                 neg     edx
.text:00007122                 sbb     edx, edx
.text:00007124                 and     edx, 10h
.text:00007127                 xor     eax, eax
.text:00007129                 add     esi, edx
.text:0000712B                 adc     edi, eax
.text:0000712D                 mov     eax, esi
.text:0000712F                 mov     edx, edi
.text:00007131                 pop     edi
.text:00007132                 pop     esi
.text:00007133                 add     esp, 4
.text:00007136                 cmp     ebp, esp
.text:00007138                 call    __RTC_CheckEsp
.text:0000713D                 mov     esp, ebp
.text:0000713F                 pop     ebp
.text:00007140                 retn
.text:00007140 ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ endp
.text:00007140
.text:00007140 ; ---------------------------------------------------------------------------
.text:00007141                 align 4
.text:00007141 _text           ends
.text:00007141
.text:00007144 ; ===========================================================================
.text:00007144
.text:00007144 ; Segment type: Pure code
.text:00007144 ; Segment permissions: Read/Execute
.text:00007144 _text           segment para public 'CODE' use32
.text:00007144                 assume cs:_text
.text:00007144                 ;org 7144h
.text:00007144 ; COMDAT (pick any)
.text:00007144                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007144
.text:00007144 ; =============== S U B R O U T I N E =======================================
.text:00007144
.text:00007144 ; Attributes: bp-based frame
.text:00007144
.text:00007144 ; bool __thiscall NArchive::NZip::CLocalItem::HasDescriptor(NArchive::NZip::CLocalItem *__hidden this)
.text:00007144                 public ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00007144 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00007144                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+62p
.text:00007144                                         ; NArchive::NZip::CItemEx::GetLocalFullSize(void)+24p
.text:00007144
.text:00007144 var_4           = dword ptr -4
.text:00007144
.text:00007144                 push    ebp
.text:00007145                 mov     ebp, esp
.text:00007147                 push    ecx
.text:00007148                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000714F                 mov     [ebp+var_4], ecx
.text:00007152                 mov     eax, [ebp+var_4]
.text:00007155                 movzx   eax, word ptr [eax]
.text:00007158                 and     eax, 8
.text:0000715B                 neg     eax
.text:0000715D                 sbb     eax, eax
.text:0000715F                 neg     eax
.text:00007161                 mov     esp, ebp
.text:00007163                 pop     ebp
.text:00007164                 retn
.text:00007164 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00007164
.text:00007164 ; ---------------------------------------------------------------------------
.text:00007165                 align 4
.text:00007165 _text           ends
.text:00007165
.text:00007168 ; ===========================================================================
.text:00007168
.text:00007168 ; Segment type: Pure code
.text:00007168 ; Segment permissions: Read/Execute
.text:00007168 _text           segment para public 'CODE' use32
.text:00007168                 assume cs:_text
.text:00007168                 ;org 7168h
.text:00007168 ; COMDAT (pick any)
.text:00007168                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007168
.text:00007168 ; =============== S U B R O U T I N E =======================================
.text:00007168
.text:00007168 ; Attributes: bp-based frame
.text:00007168
.text:00007168 ; void __thiscall NArchive::NZip::CLocalItem::ClearFlags(NArchive::NZip::CLocalItem *__hidden this)
.text:00007168                 public ?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ
.text:00007168 ?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ proc near
.text:00007168                                         ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+20p
.text:00007168
.text:00007168 var_4           = dword ptr -4
.text:00007168
.text:00007168                 push    ebp
.text:00007169                 mov     ebp, esp
.text:0000716B                 push    ecx
.text:0000716C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007173                 mov     [ebp+var_4], ecx
.text:00007176                 xor     eax, eax
.text:00007178                 mov     ecx, [ebp+var_4]
.text:0000717B                 mov     [ecx], ax
.text:0000717E                 mov     esp, ebp
.text:00007180                 pop     ebp
.text:00007181                 retn
.text:00007181 ?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ endp
.text:00007181
.text:00007181 ; ---------------------------------------------------------------------------
.text:00007182                 align 4
.text:00007182 _text           ends
.text:00007182
.text:00007184 ; ===========================================================================
.text:00007184
.text:00007184 ; Segment type: Pure code
.text:00007184 ; Segment permissions: Read/Execute
.text:00007184 _text           segment para public 'CODE' use32
.text:00007184                 assume cs:_text
.text:00007184                 ;org 7184h
.text:00007184 ; COMDAT (pick any)
.text:00007184                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007184
.text:00007184 ; =============== S U B R O U T I N E =======================================
.text:00007184
.text:00007184 ; Attributes: bp-based frame
.text:00007184
.text:00007184 ; void __thiscall NArchive::NZip::CLocalItem::SetEncrypted(NArchive::NZip::CLocalItem *this, bool)
.text:00007184                 public ?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z
.text:00007184 ?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z proc near
.text:00007184                                         ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+11Ap
.text:00007184
.text:00007184 var_4           = dword ptr -4
.text:00007184 arg_0           = byte ptr  8
.text:00007184
.text:00007184                 push    ebp
.text:00007185                 mov     ebp, esp
.text:00007187                 push    ecx
.text:00007188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000718F                 mov     [ebp+var_4], ecx
.text:00007192                 movzx   eax, [ebp+arg_0]
.text:00007196                 push    eax             ; bool
.text:00007197                 push    1               ; unsigned int
.text:00007199                 mov     ecx, [ebp+var_4] ; this
.text:0000719C                 call    ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag(uint,bool)
.text:000071A1                 add     esp, 4
.text:000071A4                 cmp     ebp, esp
.text:000071A6                 call    __RTC_CheckEsp
.text:000071AB                 mov     esp, ebp
.text:000071AD                 pop     ebp
.text:000071AE                 retn    4
.text:000071AE ?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z endp
.text:000071AE
.text:000071AE ; ---------------------------------------------------------------------------
.text:000071B1                 align 4
.text:000071B1 _text           ends
.text:000071B1
.text:000071B4 ; ===========================================================================
.text:000071B4
.text:000071B4 ; Segment type: Pure code
.text:000071B4 ; Segment permissions: Read/Execute
.text:000071B4 _text           segment para public 'CODE' use32
.text:000071B4                 assume cs:_text
.text:000071B4                 ;org 71B4h
.text:000071B4 ; COMDAT (pick any)
.text:000071B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071B4
.text:000071B4 ; =============== S U B R O U T I N E =======================================
.text:000071B4
.text:000071B4 ; Attributes: bp-based frame
.text:000071B4
.text:000071B4 ; void __thiscall NArchive::NZip::CLocalItem::SetFlag(NArchive::NZip::CLocalItem *this, unsigned int, bool)
.text:000071B4                 public ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z
.text:000071B4 ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z proc near
.text:000071B4                                         ; CODE XREF: NArchive::NZip::CLocalItem::SetEncrypted(bool)+18p
.text:000071B4                                         ; NArchive::NZip::CLocalItem::SetUtf8(bool)+1Bp ...
.text:000071B4
.text:000071B4 var_4           = dword ptr -4
.text:000071B4 arg_0           = dword ptr  8
.text:000071B4 arg_4           = byte ptr  0Ch
.text:000071B4
.text:000071B4                 push    ebp
.text:000071B5                 mov     ebp, esp
.text:000071B7                 push    ecx
.text:000071B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071BF                 mov     [ebp+var_4], ecx
.text:000071C2                 movzx   eax, [ebp+arg_4]
.text:000071C6                 test    eax, eax
.text:000071C8                 jz      short loc_71DB
.text:000071CA                 mov     ecx, [ebp+var_4]
.text:000071CD                 movzx   edx, word ptr [ecx]
.text:000071D0                 or      edx, [ebp+arg_0]
.text:000071D3                 mov     eax, [ebp+var_4]
.text:000071D6                 mov     [eax], dx
.text:000071D9                 jmp     short loc_71EE
.text:000071DB ; ---------------------------------------------------------------------------
.text:000071DB
.text:000071DB loc_71DB:                               ; CODE XREF: NArchive::NZip::CLocalItem::SetFlag(uint,bool)+14j
.text:000071DB                 mov     ecx, [ebp+arg_0]
.text:000071DE                 not     ecx
.text:000071E0                 mov     edx, [ebp+var_4]
.text:000071E3                 movzx   eax, word ptr [edx]
.text:000071E6                 and     eax, ecx
.text:000071E8                 mov     ecx, [ebp+var_4]
.text:000071EB                 mov     [ecx], ax
.text:000071EE
.text:000071EE loc_71EE:                               ; CODE XREF: NArchive::NZip::CLocalItem::SetFlag(uint,bool)+25j
.text:000071EE                 mov     esp, ebp
.text:000071F0                 pop     ebp
.text:000071F1                 retn    8
.text:000071F1 ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z endp
.text:000071F1
.text:000071F1 _text           ends
.text:000071F1
.text:000071F4 ; ===========================================================================
.text:000071F4
.text:000071F4 ; Segment type: Pure code
.text:000071F4 ; Segment permissions: Read/Execute
.text:000071F4 _text           segment para public 'CODE' use32
.text:000071F4                 assume cs:_text
.text:000071F4                 ;org 71F4h
.text:000071F4 ; COMDAT (pick any)
.text:000071F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071F4
.text:000071F4 ; =============== S U B R O U T I N E =======================================
.text:000071F4
.text:000071F4 ; Attributes: bp-based frame
.text:000071F4
.text:000071F4 ; void __thiscall NArchive::NZip::CLocalItem::SetUtf8(NArchive::NZip::CLocalItem *this, bool)
.text:000071F4                 public ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z
.text:000071F4 ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z proc near
.text:000071F4                                         ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+5Ap
.text:000071F4                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+BCp
.text:000071F4
.text:000071F4 var_4           = dword ptr -4
.text:000071F4 arg_0           = byte ptr  8
.text:000071F4
.text:000071F4                 push    ebp
.text:000071F5                 mov     ebp, esp
.text:000071F7                 push    ecx
.text:000071F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071FF                 mov     [ebp+var_4], ecx
.text:00007202                 movzx   eax, [ebp+arg_0]
.text:00007206                 push    eax             ; bool
.text:00007207                 push    800h            ; unsigned int
.text:0000720C                 mov     ecx, [ebp+var_4] ; this
.text:0000720F                 call    ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag(uint,bool)
.text:00007214                 add     esp, 4
.text:00007217                 cmp     ebp, esp
.text:00007219                 call    __RTC_CheckEsp
.text:0000721E                 mov     esp, ebp
.text:00007220                 pop     ebp
.text:00007221                 retn    4
.text:00007221 ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z endp
.text:00007221
.text:00007221 _text           ends
.text:00007221
.text:00007224 ; ===========================================================================
.text:00007224
.text:00007224 ; Segment type: Pure code
.text:00007224 ; Segment permissions: Read/Execute
.text:00007224 _text           segment para public 'CODE' use32
.text:00007224                 assume cs:_text
.text:00007224                 ;org 7224h
.text:00007224 ; COMDAT (pick any)
.text:00007224                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007224
.text:00007224 ; =============== S U B R O U T I N E =======================================
.text:00007224
.text:00007224 ; Attributes: bp-based frame
.text:00007224
.text:00007224 ; unsigned __int64 __thiscall NArchive::NZip::COutArchive::GetCurPos(NArchive::NZip::COutArchive *__hidden this)
.text:00007224                 public ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ
.text:00007224 ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ proc near
.text:00007224                                         ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+C9p
.text:00007224                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+128p ...
.text:00007224
.text:00007224 var_4           = dword ptr -4
.text:00007224
.text:00007224                 push    ebp
.text:00007225                 mov     ebp, esp
.text:00007227                 push    ecx
.text:00007228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000722F                 mov     [ebp+var_4], ecx
.text:00007232                 mov     ecx, [ebp+var_4]
.text:00007235                 mov     eax, [ecx+38h]
.text:00007238                 mov     edx, [ecx+3Ch]
.text:0000723B                 mov     esp, ebp
.text:0000723D                 pop     ebp
.text:0000723E                 retn
.text:0000723E ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ endp
.text:0000723E
.text:0000723E ; ---------------------------------------------------------------------------
.text:0000723F                 align 10h
.text:0000723F _text           ends
.text:0000723F
.text:00007240 ; ===========================================================================
.text:00007240
.text:00007240 ; Segment type: Pure code
.text:00007240 ; Segment permissions: Read/Execute
.text:00007240 _text           segment para public 'CODE' use32
.text:00007240                 assume cs:_text
.text:00007240                 ;org 7240h
.text:00007240 ; COMDAT (pick any)
.text:00007240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007240
.text:00007240 ; =============== S U B R O U T I N E =======================================
.text:00007240
.text:00007240 ; Attributes: bp-based frame
.text:00007240
.text:00007240 ; _DWORD __thiscall NArchive::NZip::CWzAesExtra::CWzAesExtra(NArchive::NZip::CWzAesExtra *__hidden this)
.text:00007240                 public ??0CWzAesExtra@NZip@NArchive@@QAE@XZ
.text:00007240 ??0CWzAesExtra@NZip@NArchive@@QAE@XZ proc near
.text:00007240                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+AFp
.text:00007240                                         ; NArchive::NZip::CExtraBlock::HasWzAes(void)+20p
.text:00007240
.text:00007240 var_4           = dword ptr -4
.text:00007240
.text:00007240                 push    ebp
.text:00007241                 mov     ebp, esp
.text:00007243                 push    ecx
.text:00007244                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000724B                 mov     [ebp+var_4], ecx
.text:0000724E                 mov     eax, 2
.text:00007253                 mov     ecx, [ebp+var_4]
.text:00007256                 mov     [ecx], ax
.text:00007259                 mov     edx, [ebp+var_4]
.text:0000725C                 mov     byte ptr [edx+2], 3
.text:00007260                 xor     eax, eax
.text:00007262                 mov     ecx, [ebp+var_4]
.text:00007265                 mov     [ecx+4], ax
.text:00007269                 mov     eax, [ebp+var_4]
.text:0000726C                 mov     esp, ebp
.text:0000726E                 pop     ebp
.text:0000726F                 retn
.text:0000726F ??0CWzAesExtra@NZip@NArchive@@QAE@XZ endp
.text:0000726F
.text:0000726F _text           ends
.text:0000726F
.text:00007270 ; ===========================================================================
.text:00007270
.text:00007270 ; Segment type: Pure code
.text:00007270 ; Segment permissions: Read/Execute
.text:00007270 _text           segment para public 'CODE' use32
.text:00007270                 assume cs:_text
.text:00007270                 ;org 7270h
.text:00007270 ; COMDAT (pick any)
.text:00007270                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007270
.text:00007270 ; =============== S U B R O U T I N E =======================================
.text:00007270
.text:00007270 ; Attributes: bp-based frame
.text:00007270
.text:00007270 ; void __thiscall NArchive::NZip::CWzAesExtra::SetSubBlock(NArchive::NZip::CWzAesExtra *this, struct NArchive::NZip::CExtraSubBlock *)
.text:00007270                 public ?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z
.text:00007270 ?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z proc near
.text:00007270                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+F1p
.text:00007270
.text:00007270 var_8           = dword ptr -8
.text:00007270 var_4           = dword ptr -4
.text:00007270 arg_0           = dword ptr  8
.text:00007270
.text:00007270                 push    ebp
.text:00007271                 mov     ebp, esp
.text:00007273                 sub     esp, 8
.text:00007276                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000727D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007284                 mov     [ebp+var_4], ecx
.text:00007287                 push    7
.text:00007289                 mov     ecx, [ebp+arg_0]
.text:0000728C                 add     ecx, 4
.text:0000728F                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00007294                 mov     eax, 9901h
.text:00007299                 mov     ecx, [ebp+arg_0]
.text:0000729C                 mov     [ecx], ax
.text:0000729F                 mov     ecx, [ebp+arg_0]
.text:000072A2                 add     ecx, 4
.text:000072A5                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000072AA                 mov     [ebp+var_8], eax
.text:000072AD                 mov     edx, [ebp+var_8]
.text:000072B0                 mov     eax, [ebp+var_4]
.text:000072B3                 mov     cl, [eax]
.text:000072B5                 mov     [edx], cl
.text:000072B7                 mov     edx, [ebp+var_4]
.text:000072BA                 movzx   eax, word ptr [edx]
.text:000072BD                 sar     eax, 8
.text:000072C0                 mov     ecx, [ebp+var_8]
.text:000072C3                 mov     [ecx+1], al
.text:000072C6                 mov     edx, [ebp+var_8]
.text:000072C9                 mov     byte ptr [edx+2], 41h ; 'A'
.text:000072CD                 mov     eax, [ebp+var_8]
.text:000072D0                 mov     byte ptr [eax+3], 45h ; 'E'
.text:000072D4                 mov     ecx, [ebp+var_8]
.text:000072D7                 mov     edx, [ebp+var_4]
.text:000072DA                 mov     al, [edx+2]
.text:000072DD                 mov     [ecx+4], al
.text:000072E0                 mov     ecx, [ebp+var_8]
.text:000072E3                 mov     edx, [ebp+var_4]
.text:000072E6                 mov     al, [edx+4]
.text:000072E9                 mov     [ecx+5], al
.text:000072EC                 mov     ecx, [ebp+var_4]
.text:000072EF                 movzx   edx, word ptr [ecx+4]
.text:000072F3                 sar     edx, 8
.text:000072F6                 mov     eax, [ebp+var_8]
.text:000072F9                 mov     [eax+6], dl
.text:000072FC                 add     esp, 8
.text:000072FF                 cmp     ebp, esp
.text:00007301                 call    __RTC_CheckEsp
.text:00007306                 mov     esp, ebp
.text:00007308                 pop     ebp
.text:00007309                 retn    4
.text:00007309 ?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z endp
.text:00007309
.text:00007309 _text           ends
.text:00007309
.text:0000730C ; ===========================================================================
.text:0000730C
.text:0000730C ; Segment type: Pure code
.text:0000730C ; Segment permissions: Read/Execute
.text:0000730C _text           segment para public 'CODE' use32
.text:0000730C                 assume cs:_text
.text:0000730C                 ;org 730Ch
.text:0000730C ; COMDAT (pick any)
.text:0000730C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000730C
.text:0000730C ; =============== S U B R O U T I N E =======================================
.text:0000730C
.text:0000730C ; Attributes: bp-based frame
.text:0000730C
.text:0000730C ; void __thiscall NArchive::NZip::CExtraBlock::Clear(NArchive::NZip::CExtraBlock *__hidden this)
.text:0000730C                 public ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ
.text:0000730C ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ proc near
.text:0000730C                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+94p
.text:0000730C                                         ; NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+9Fp
.text:0000730C
.text:0000730C var_4           = dword ptr -4
.text:0000730C
.text:0000730C                 push    ebp
.text:0000730D                 mov     ebp, esp
.text:0000730F                 push    ecx
.text:00007310                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007317                 mov     [ebp+var_4], ecx
.text:0000731A                 mov     ecx, [ebp+var_4]
.text:0000731D                 call    ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:00007322                 add     esp, 4
.text:00007325                 cmp     ebp, esp
.text:00007327                 call    __RTC_CheckEsp
.text:0000732C                 mov     esp, ebp
.text:0000732E                 pop     ebp
.text:0000732F                 retn
.text:0000732F ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ endp
.text:0000732F
.text:0000732F _text           ends
.text:0000732F
.text:00007330 ; ===========================================================================
.text:00007330
.text:00007330 ; Segment type: Pure code
.text:00007330 ; Segment permissions: Read/Execute
.text:00007330 _text           segment para public 'CODE' use32
.text:00007330                 assume cs:_text
.text:00007330                 ;org 7330h
.text:00007330 ; COMDAT (pick any)
.text:00007330                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007330
.text:00007330 ; =============== S U B R O U T I N E =======================================
.text:00007330
.text:00007330 ; Attributes: bp-based frame
.text:00007330
.text:00007330 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock *__hidden this)
.text:00007330                 public ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
.text:00007330 ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ proc near
.text:00007330                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+DEp
.text:00007330
.text:00007330 var_4           = dword ptr -4
.text:00007330
.text:00007330                 push    ebp
.text:00007331                 mov     ebp, esp
.text:00007333                 push    ecx
.text:00007334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000733B                 mov     [ebp+var_4], ecx
.text:0000733E                 mov     ecx, [ebp+var_4]
.text:00007341                 add     ecx, 4
.text:00007344                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00007349                 mov     eax, [ebp+var_4]
.text:0000734C                 add     esp, 4
.text:0000734F                 cmp     ebp, esp
.text:00007351                 call    __RTC_CheckEsp
.text:00007356                 mov     esp, ebp
.text:00007358                 pop     ebp
.text:00007359                 retn
.text:00007359 ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ endp
.text:00007359
.text:00007359 ; ---------------------------------------------------------------------------
.text:0000735A                 align 4
.text:0000735A _text           ends
.text:0000735A
.text:0000735C ; ===========================================================================
.text:0000735C
.text:0000735C ; Segment type: Pure code
.text:0000735C ; Segment permissions: Read/Execute
.text:0000735C _text           segment para public 'CODE' use32
.text:0000735C                 assume cs:_text
.text:0000735C                 ;org 735Ch
.text:0000735C ; COMDAT (pick any)
.text:0000735C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000735C
.text:0000735C ; =============== S U B R O U T I N E =======================================
.text:0000735C
.text:0000735C ; Attributes: bp-based frame
.text:0000735C
.text:0000735C ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(NArchive::NZip::CExtraSubBlock *__hidden this)
.text:0000735C                 public ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
.text:0000735C ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ proc near
.text:0000735C                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+11Ep
.text:0000735C                                         ; __unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0+3j ...
.text:0000735C
.text:0000735C var_4           = dword ptr -4
.text:0000735C
.text:0000735C                 push    ebp
.text:0000735D                 mov     ebp, esp
.text:0000735F                 push    ecx
.text:00007360                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007367                 mov     [ebp+var_4], ecx
.text:0000736A                 mov     ecx, [ebp+var_4]
.text:0000736D                 add     ecx, 4
.text:00007370                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00007375                 add     esp, 4
.text:00007378                 cmp     ebp, esp
.text:0000737A                 call    __RTC_CheckEsp
.text:0000737F                 mov     esp, ebp
.text:00007381                 pop     ebp
.text:00007382                 retn
.text:00007382 ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ endp
.text:00007382
.text:00007382 ; ---------------------------------------------------------------------------
.text:00007383                 align 4
.text:00007383 _text           ends
.text:00007383
.text:00007384 ; ===========================================================================
.text:00007384
.text:00007384 ; Segment type: Pure code
.text:00007384 ; Segment permissions: Read/Execute
.text:00007384 _text           segment para public 'CODE' use32
.text:00007384                 assume cs:_text
.text:00007384                 ;org 7384h
.text:00007384 ; COMDAT (pick any)
.text:00007384                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007384
.text:00007384 ; =============== S U B R O U T I N E =======================================
.text:00007384
.text:00007384 ; Attributes: bp-based frame
.text:00007384
.text:00007384 ; _DWORD __thiscall NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo *this, const struct NArchive::NZip::CCompressionMethodMode *)
.text:00007384                 public ??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:00007384 ??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text:00007384                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+810p
.text:00007384
.text:00007384 var_10          = dword ptr -10h
.text:00007384 var_C           = dword ptr -0Ch
.text:00007384 var_4           = dword ptr -4
.text:00007384 arg_0           = dword ptr  8
.text:00007384
.text:00007384                 push    ebp
.text:00007385                 mov     ebp, esp
.text:00007387                 push    0FFFFFFFFh
.text:00007389                 push    offset __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:0000738E                 mov     eax, large fs:0
.text:00007394                 push    eax
.text:00007395                 push    ecx
.text:00007396                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000739D                 mov     eax, dword ptr ds:___security_cookie
.text:000073A2                 xor     eax, ebp
.text:000073A4                 push    eax
.text:000073A5                 lea     eax, [ebp+var_C]
.text:000073A8                 mov     large fs:0, eax
.text:000073AE                 mov     [ebp+var_10], ecx
.text:000073B1                 mov     ecx, [ebp+var_10] ; this
.text:000073B4                 call    ??0CThread@NWindows@@QAE@XZ ; NWindows::CThread::CThread(void)
.text:000073B9                 mov     [ebp+var_4], 0
.text:000073C0                 mov     ecx, [ebp+var_10]
.text:000073C3                 add     ecx, 4          ; this
.text:000073C6                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000073CB                 mov     byte ptr [ebp+var_4], 1
.text:000073CF                 mov     ecx, [ebp+var_10]
.text:000073D2                 add     ecx, 8          ; this
.text:000073D5                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000073DA                 mov     byte ptr [ebp+var_4], 2
.text:000073DE                 mov     eax, [ebp+var_10]
.text:000073E1                 mov     byte ptr [eax+0Ch], 0
.text:000073E5                 mov     ecx, [ebp+var_10]
.text:000073E8                 mov     dword ptr [ecx+10h], 0
.text:000073EF                 mov     ecx, [ebp+var_10]
.text:000073F2                 add     ecx, 14h
.text:000073F5                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:000073FA                 mov     byte ptr [ebp+var_4], 3
.text:000073FE                 mov     edx, [ebp+var_10]
.text:00007401                 mov     dword ptr [edx+18h], 0
.text:00007408                 mov     ecx, [ebp+var_10]
.text:0000740B                 add     ecx, 1Ch
.text:0000740E                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00007413                 mov     byte ptr [ebp+var_4], 4
.text:00007417                 mov     ecx, [ebp+var_10]
.text:0000741A                 add     ecx, 20h ; ' '
.text:0000741D                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00007422                 mov     byte ptr [ebp+var_4], 5
.text:00007426                 mov     eax, [ebp+arg_0]
.text:00007429                 push    eax             ; struct NArchive::NZip::CCompressionMethodMode *
.text:0000742A                 mov     ecx, [ebp+var_10]
.text:0000742D                 add     ecx, 28h ; '('  ; this
.text:00007430                 call    ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)
.text:00007435                 mov     ecx, [ebp+var_10]
.text:00007438                 mov     dword ptr [ecx+0C0h], 0
.text:00007442                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007449                 mov     eax, [ebp+var_10]
.text:0000744C                 mov     ecx, [ebp+var_C]
.text:0000744F                 mov     large fs:0, ecx
.text:00007456                 pop     ecx
.text:00007457                 add     esp, 10h
.text:0000745A                 cmp     ebp, esp
.text:0000745C                 call    __RTC_CheckEsp
.text:00007461                 mov     esp, ebp
.text:00007463                 pop     ebp
.text:00007464                 retn    4
.text:00007464 ??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text:00007464
.text:00007464 ; ---------------------------------------------------------------------------
.text:00007467                 align 4
.text:00007467 _text           ends
.text:00007467
.text$x:00007468 ; ===========================================================================
.text$x:00007468
.text$x:00007468 ; Segment type: Pure code
.text$x:00007468 ; Segment permissions: Read/Execute
.text$x:00007468 _text$x         segment para public 'CODE' use32
.text$x:00007468                 assume cs:_text$x
.text$x:00007468                 ;org 7468h
.text$x:00007468 ; COMDAT (pick associative to section at 7384)
.text$x:00007468                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007468
.text$x:00007468 ; =============== S U B R O U T I N E =======================================
.text$x:00007468
.text$x:00007468
.text$x:00007468 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 proc near
.text$x:00007468                                         ; DATA XREF: .xdata$x:000074ECo
.text$x:00007468                 mov     ecx, [ebp-10h]  ; this
.text$x:0000746B                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:0000746B __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 endp
.text$x:0000746B
.text$x:00007470
.text$x:00007470 ; =============== S U B R O U T I N E =======================================
.text$x:00007470
.text$x:00007470
.text$x:00007470 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 proc near
.text$x:00007470                                         ; DATA XREF: .xdata$x:000074F4o
.text$x:00007470                 mov     ecx, [ebp-10h]
.text$x:00007473                 add     ecx, 4          ; this
.text$x:00007476                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007476 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 endp
.text$x:00007476
.text$x:0000747B
.text$x:0000747B ; =============== S U B R O U T I N E =======================================
.text$x:0000747B
.text$x:0000747B
.text$x:0000747B __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 proc near
.text$x:0000747B                                         ; DATA XREF: .xdata$x:000074FCo
.text$x:0000747B                 mov     ecx, [ebp-10h]
.text$x:0000747E                 add     ecx, 8          ; this
.text$x:00007481                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007481 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 endp
.text$x:00007481
.text$x:00007486
.text$x:00007486 ; =============== S U B R O U T I N E =======================================
.text$x:00007486
.text$x:00007486
.text$x:00007486 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3 proc near
.text$x:00007486                                         ; DATA XREF: .xdata$x:00007504o
.text$x:00007486                 mov     ecx, [ebp-10h]
.text$x:00007489                 add     ecx, 14h
.text$x:0000748C                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000748C __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3 endp
.text$x:0000748C
.text$x:00007491
.text$x:00007491 ; =============== S U B R O U T I N E =======================================
.text$x:00007491
.text$x:00007491
.text$x:00007491 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4 proc near
.text$x:00007491                                         ; DATA XREF: .xdata$x:0000750Co
.text$x:00007491                 mov     ecx, [ebp-10h]
.text$x:00007494                 add     ecx, 1Ch
.text$x:00007497                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00007497 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4 endp
.text$x:00007497
.text$x:0000749C
.text$x:0000749C ; =============== S U B R O U T I N E =======================================
.text$x:0000749C
.text$x:0000749C
.text$x:0000749C __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5 proc near
.text$x:0000749C                                         ; DATA XREF: .xdata$x:00007514o
.text$x:0000749C                 mov     ecx, [ebp-10h]
.text$x:0000749F                 add     ecx, 20h ; ' '
.text$x:000074A2                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000074A2 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5 endp
.text$x:000074A2
.text$x:000074A7
.text$x:000074A7 ; =============== S U B R O U T I N E =======================================
.text$x:000074A7
.text$x:000074A7
.text$x:000074A7 __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text$x:000074A7                                         ; DATA XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CCompressionMethodMode const &)+5o
.text$x:000074A7
.text$x:000074A7 arg_4           = dword ptr  8
.text$x:000074A7
.text$x:000074A7                 mov     edx, [esp+arg_4]
.text$x:000074AB                 lea     eax, [edx+0Ch]
.text$x:000074AE                 mov     ecx, [edx-8]
.text$x:000074B1                 xor     ecx, eax
.text$x:000074B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000074B8                 mov     eax, offset __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text$x:000074BD                 jmp     ___CxxFrameHandler3
.text$x:000074BD __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text$x:000074BD
.text$x:000074BD ; ---------------------------------------------------------------------------
.text$x:000074C2                 align 4
.text$x:000074C2 _text$x         ends
.text$x:000074C2
.xdata$x:000074C4 ; ===========================================================================
.xdata$x:000074C4
.xdata$x:000074C4 ; Segment type: Pure data
.xdata$x:000074C4 ; Segment permissions: Read
.xdata$x:000074C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000074C4                 assume cs:_xdata$x
.xdata$x:000074C4                 ;org 74C4h
.xdata$x:000074C4 ; COMDAT (pick associative to section at 7384)
.xdata$x:000074C4 __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db  22h ; "
.xdata$x:000074C4                                         ; DATA XREF: __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z+11o
.xdata$x:000074C5                 db    5
.xdata$x:000074C6                 db  93h ; ô
.xdata$x:000074C7                 db  19h
.xdata$x:000074C8                 db    6
.xdata$x:000074C9                 db    0
.xdata$x:000074CA                 db    0
.xdata$x:000074CB                 db    0
.xdata$x:000074CC                 dd offset __unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.xdata$x:000074D0                 db    0
.xdata$x:000074D1                 db    0
.xdata$x:000074D2                 db    0
.xdata$x:000074D3                 db    0
.xdata$x:000074D4                 db    0
.xdata$x:000074D5                 db    0
.xdata$x:000074D6                 db    0
.xdata$x:000074D7                 db    0
.xdata$x:000074D8                 db    0
.xdata$x:000074D9                 db    0
.xdata$x:000074DA                 db    0
.xdata$x:000074DB                 db    0
.xdata$x:000074DC                 db    0
.xdata$x:000074DD                 db    0
.xdata$x:000074DE                 db    0
.xdata$x:000074DF                 db    0
.xdata$x:000074E0                 db    0
.xdata$x:000074E1                 db    0
.xdata$x:000074E2                 db    0
.xdata$x:000074E3                 db    0
.xdata$x:000074E4                 db    1
.xdata$x:000074E5                 db    0
.xdata$x:000074E6                 db    0
.xdata$x:000074E7                 db    0
.xdata$x:000074E8 __unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db 0FFh
.xdata$x:000074E8                                         ; DATA XREF: .xdata$x:000074CCo
.xdata$x:000074E9                 db 0FFh
.xdata$x:000074EA                 db 0FFh
.xdata$x:000074EB                 db 0FFh
.xdata$x:000074EC                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
.xdata$x:000074F0                 db    0
.xdata$x:000074F1                 db    0
.xdata$x:000074F2                 db    0
.xdata$x:000074F3                 db    0
.xdata$x:000074F4                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
.xdata$x:000074F8                 db    1
.xdata$x:000074F9                 db    0
.xdata$x:000074FA                 db    0
.xdata$x:000074FB                 db    0
.xdata$x:000074FC                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
.xdata$x:00007500                 db    2
.xdata$x:00007501                 db    0
.xdata$x:00007502                 db    0
.xdata$x:00007503                 db    0
.xdata$x:00007504                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3
.xdata$x:00007508                 db    3
.xdata$x:00007509                 db    0
.xdata$x:0000750A                 db    0
.xdata$x:0000750B                 db    0
.xdata$x:0000750C                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4
.xdata$x:00007510                 db    4
.xdata$x:00007511                 db    0
.xdata$x:00007512                 db    0
.xdata$x:00007513                 db    0
.xdata$x:00007514                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5
.xdata$x:00007514 _xdata$x        ends
.xdata$x:00007514
.text:00007518 ; ===========================================================================
.text:00007518
.text:00007518 ; Segment type: Pure code
.text:00007518 ; Segment permissions: Read/Execute
.text:00007518 _text           segment para public 'CODE' use32
.text:00007518                 assume cs:_text
.text:00007518                 ;org 7518h
.text:00007518 ; COMDAT (pick any)
.text:00007518                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007518
.text:00007518 ; =============== S U B R O U T I N E =======================================
.text:00007518
.text:00007518 ; Attributes: bp-based frame
.text:00007518
.text:00007518 ; _DWORD __thiscall NWindows::CThread::CThread(NWindows::CThread *__hidden this)
.text:00007518                 public ??0CThread@NWindows@@QAE@XZ
.text:00007518 ??0CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CCompressionMethodMode const &)+30p
.text:00007518
.text:00007518 var_4           = dword ptr -4
.text:00007518
.text:00007518                 push    ebp
.text:00007519                 mov     ebp, esp
.text:0000751B                 push    ecx
.text:0000751C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007523                 mov     [ebp+var_4], ecx
.text:00007526                 mov     eax, [ebp+var_4]
.text:00007529                 mov     dword ptr [eax], 0
.text:0000752F                 mov     eax, [ebp+var_4]
.text:00007532                 mov     esp, ebp
.text:00007534                 pop     ebp
.text:00007535                 retn
.text:00007535 ??0CThread@NWindows@@QAE@XZ endp
.text:00007535
.text:00007535 ; ---------------------------------------------------------------------------
.text:00007536                 align 4
.text:00007536 _text           ends
.text:00007536
.text:00007538 ; ===========================================================================
.text:00007538
.text:00007538 ; Segment type: Pure code
.text:00007538 ; Segment permissions: Read/Execute
.text:00007538 _text           segment para public 'CODE' use32
.text:00007538                 assume cs:_text
.text:00007538                 ;org 7538h
.text:00007538 ; COMDAT (pick any)
.text:00007538                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007538
.text:00007538 ; =============== S U B R O U T I N E =======================================
.text:00007538
.text:00007538 ; Attributes: bp-based frame
.text:00007538
.text:00007538 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00007538                 public ??1CThread@NWindows@@QAE@XZ
.text:00007538 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0+3j
.text:00007538                                         ; NArchive::NZip::CThreadInfo::~CThreadInfo(void)+94p ...
.text:00007538
.text:00007538 var_4           = dword ptr -4
.text:00007538
.text:00007538                 push    ebp
.text:00007539                 mov     ebp, esp
.text:0000753B                 push    ecx
.text:0000753C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007543                 mov     [ebp+var_4], ecx
.text:00007546                 mov     ecx, [ebp+var_4] ; this
.text:00007549                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:0000754E                 add     esp, 4
.text:00007551                 cmp     ebp, esp
.text:00007553                 call    __RTC_CheckEsp
.text:00007558                 mov     esp, ebp
.text:0000755A                 pop     ebp
.text:0000755B                 retn
.text:0000755B ??1CThread@NWindows@@QAE@XZ endp
.text:0000755B
.text:0000755B _text           ends
.text:0000755B
.text:0000755C ; ===========================================================================
.text:0000755C
.text:0000755C ; Segment type: Pure code
.text:0000755C ; Segment permissions: Read/Execute
.text:0000755C _text           segment para public 'CODE' use32
.text:0000755C                 assume cs:_text
.text:0000755C                 ;org 755Ch
.text:0000755C ; COMDAT (pick any)
.text:0000755C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000755C
.text:0000755C ; =============== S U B R O U T I N E =======================================
.text:0000755C
.text:0000755C ; Attributes: bp-based frame
.text:0000755C
.text:0000755C ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:0000755C                 public ?Close@CThread@NWindows@@QAEIXZ
.text:0000755C ?Close@CThread@NWindows@@QAEIXZ proc near
.text:0000755C                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:0000755C                                         ; NArchive::NZip::CThreadInfo::StopWaitClose(void)+56p
.text:0000755C
.text:0000755C var_4           = dword ptr -4
.text:0000755C
.text:0000755C                 push    ebp
.text:0000755D                 mov     ebp, esp
.text:0000755F                 push    ecx
.text:00007560                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007567                 mov     [ebp+var_4], ecx
.text:0000756A                 mov     eax, [ebp+var_4]
.text:0000756D                 push    eax
.text:0000756E                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00007573                 add     esp, 4
.text:00007576                 cmp     ebp, esp
.text:00007578                 call    __RTC_CheckEsp
.text:0000757D                 mov     esp, ebp
.text:0000757F                 pop     ebp
.text:00007580                 retn
.text:00007580 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00007580
.text:00007580 ; ---------------------------------------------------------------------------
.text:00007581                 align 4
.text:00007581 _text           ends
.text:00007581
.text:00007584 ; ===========================================================================
.text:00007584
.text:00007584 ; Segment type: Pure code
.text:00007584 ; Segment permissions: Read/Execute
.text:00007584 _text           segment para public 'CODE' use32
.text:00007584                 assume cs:_text
.text:00007584                 ;org 7584h
.text:00007584 ; COMDAT (pick any)
.text:00007584                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007584
.text:00007584 ; =============== S U B R O U T I N E =======================================
.text:00007584
.text:00007584 ; Attributes: bp-based frame
.text:00007584
.text:00007584 ; __int32 __thiscall NArchive::NZip::CThreadInfo::CreateEvents(NArchive::NZip::CThreadInfo *__hidden this)
.text:00007584                 public ?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ
.text:00007584 ?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ proc near
.text:00007584                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+899p
.text:00007584
.text:00007584 var_8           = dword ptr -8
.text:00007584 var_4           = dword ptr -4
.text:00007584
.text:00007584                 push    ebp
.text:00007585                 mov     ebp, esp
.text:00007587                 sub     esp, 8
.text:0000758A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007591                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007598                 mov     [ebp+var_4], ecx
.text:0000759B                 mov     ecx, [ebp+var_4]
.text:0000759E                 add     ecx, 4          ; this
.text:000075A1                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:000075A6                 mov     [ebp+var_8], eax
.text:000075A9                 cmp     [ebp+var_8], 0
.text:000075AD                 jz      short loc_75B4
.text:000075AF                 mov     eax, [ebp+var_8]
.text:000075B2                 jmp     short loc_75BF
.text:000075B4 ; ---------------------------------------------------------------------------
.text:000075B4
.text:000075B4 loc_75B4:                               ; CODE XREF: NArchive::NZip::CThreadInfo::CreateEvents(void)+29j
.text:000075B4                 mov     ecx, [ebp+var_4]
.text:000075B7                 add     ecx, 8          ; this
.text:000075BA                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:000075BF
.text:000075BF loc_75BF:                               ; CODE XREF: NArchive::NZip::CThreadInfo::CreateEvents(void)+2Ej
.text:000075BF                 add     esp, 8
.text:000075C2                 cmp     ebp, esp
.text:000075C4                 call    __RTC_CheckEsp
.text:000075C9                 mov     esp, ebp
.text:000075CB                 pop     ebp
.text:000075CC                 retn
.text:000075CC ?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ endp
.text:000075CC
.text:000075CC ; ---------------------------------------------------------------------------
.text:000075CD                 align 10h
.text:000075CD _text           ends
.text:000075CD
.text:000075D0 ; ===========================================================================
.text:000075D0
.text:000075D0 ; Segment type: Pure code
.text:000075D0 ; Segment permissions: Read/Execute
.text:000075D0 _text           segment para public 'CODE' use32
.text:000075D0                 assume cs:_text
.text:000075D0                 ;org 75D0h
.text:000075D0 ; COMDAT (pick any)
.text:000075D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000075D0
.text:000075D0 ; =============== S U B R O U T I N E =======================================
.text:000075D0
.text:000075D0 ; Attributes: bp-based frame
.text:000075D0
.text:000075D0 ; int __thiscall NArchive::NZip::CThreadInfo::CreateThread(NArchive::NZip::CThreadInfo *__hidden this)
.text:000075D0                 public ?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ
.text:000075D0 ?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ proc near
.text:000075D0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B72p
.text:000075D0
.text:000075D0 var_4           = dword ptr -4
.text:000075D0
.text:000075D0                 push    ebp
.text:000075D1                 mov     ebp, esp
.text:000075D3                 push    ecx
.text:000075D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075DB                 mov     [ebp+var_4], ecx
.text:000075DE                 mov     eax, [ebp+var_4]
.text:000075E1                 push    eax             ; void *
.text:000075E2                 push    offset ?CoderThread@NZip@NArchive@@YGIPAX@Z ; unsigned int (__stdcall *)(void *)
.text:000075E7                 mov     ecx, [ebp+var_4] ; this
.text:000075EA                 call    ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create(uint (*)(void *),void *)
.text:000075EF                 add     esp, 4
.text:000075F2                 cmp     ebp, esp
.text:000075F4                 call    __RTC_CheckEsp
.text:000075F9                 mov     esp, ebp
.text:000075FB                 pop     ebp
.text:000075FC                 retn
.text:000075FC ?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ endp
.text:000075FC
.text:000075FC ; ---------------------------------------------------------------------------
.text:000075FD                 align 10h
.text:000075FD _text           ends
.text:000075FD
.text:00007600 ; ===========================================================================
.text:00007600
.text:00007600 ; Segment type: Pure code
.text:00007600 ; Segment permissions: Read/Execute
.text:00007600 _text           segment para public 'CODE' use32
.text:00007600                 assume cs:_text
.text:00007600                 ;org 7600h
.text:00007600 ; COMDAT (pick any)
.text:00007600                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007600
.text:00007600 ; =============== S U B R O U T I N E =======================================
.text:00007600
.text:00007600 ; Attributes: bp-based frame
.text:00007600
.text:00007600 ; unsigned int __thiscall NWindows::CThread::Create(NWindows::CThread *this, unsigned int (__stdcall *)(void *), void *)
.text:00007600                 public ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
.text:00007600 ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z proc near
.text:00007600                                         ; CODE XREF: NArchive::NZip::CThreadInfo::CreateThread(void)+1Ap
.text:00007600
.text:00007600 var_4           = dword ptr -4
.text:00007600 arg_0           = dword ptr  8
.text:00007600 arg_4           = dword ptr  0Ch
.text:00007600
.text:00007600                 push    ebp
.text:00007601                 mov     ebp, esp
.text:00007603                 push    ecx
.text:00007604                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000760B                 mov     [ebp+var_4], ecx
.text:0000760E                 mov     eax, [ebp+arg_4]
.text:00007611                 push    eax
.text:00007612                 mov     ecx, [ebp+arg_0]
.text:00007615                 push    ecx
.text:00007616                 mov     edx, [ebp+var_4]
.text:00007619                 push    edx
.text:0000761A                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:0000761F                 add     esp, 4
.text:00007622                 cmp     ebp, esp
.text:00007624                 call    __RTC_CheckEsp
.text:00007629                 mov     esp, ebp
.text:0000762B                 pop     ebp
.text:0000762C                 retn    8
.text:0000762C ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z endp
.text:0000762C
.text:0000762C ; ---------------------------------------------------------------------------
.text:0000762F                 align 10h
.text:0000762F _text           ends
.text:0000762F
.text:00007630 ; ===========================================================================
.text:00007630
.text:00007630 ; Segment type: Pure code
.text:00007630 ; Segment permissions: Read/Execute
.text:00007630 _text           segment para public 'CODE' use32
.text:00007630                 assume cs:_text
.text:00007630                 ;org 7630h
.text:00007630 ; COMDAT (pick any)
.text:00007630                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007630
.text:00007630 ; =============== S U B R O U T I N E =======================================
.text:00007630
.text:00007630 ; Attributes: bp-based frame
.text:00007630
.text:00007630 ; _DWORD __thiscall NArchive::NZip::CThreads::~CThreads(NArchive::NZip::CThreads *__hidden this)
.text:00007630                 public ??1CThreads@NZip@NArchive@@QAE@XZ
.text:00007630 ??1CThreads@NZip@NArchive@@QAE@XZ proc near
.text:00007630                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6EFp
.text:00007630                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+8E5p ...
.text:00007630
.text:00007630 var_14          = dword ptr -14h
.text:00007630 var_10          = dword ptr -10h
.text:00007630 var_C           = dword ptr -0Ch
.text:00007630 var_4           = dword ptr -4
.text:00007630
.text:00007630                 push    ebp
.text:00007631                 mov     ebp, esp
.text:00007633                 push    0FFFFFFFFh
.text:00007635                 push    offset __ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ
.text:0000763A                 mov     eax, large fs:0
.text:00007640                 push    eax
.text:00007641                 sub     esp, 8
.text:00007644                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000764B                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007652                 mov     eax, dword ptr ds:___security_cookie
.text:00007657                 xor     eax, ebp
.text:00007659                 push    eax
.text:0000765A                 lea     eax, [ebp+var_C]
.text:0000765D                 mov     large fs:0, eax
.text:00007663                 mov     [ebp+var_10], ecx
.text:00007666                 mov     [ebp+var_4], 0
.text:0000766D                 mov     [ebp+var_14], 0
.text:00007674                 jmp     short loc_767F
.text:00007676 ; ---------------------------------------------------------------------------
.text:00007676
.text:00007676 loc_7676:                               ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+6Fj
.text:00007676                 mov     eax, [ebp+var_14]
.text:00007679                 add     eax, 1
.text:0000767C                 mov     [ebp+var_14], eax
.text:0000767F
.text:0000767F loc_767F:                               ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+44j
.text:0000767F                 mov     ecx, [ebp+var_10]
.text:00007682                 call    ?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CThreadInfo>::Size(void)
.text:00007687                 cmp     [ebp+var_14], eax
.text:0000768A                 jnb     short loc_76A1
.text:0000768C                 mov     ecx, [ebp+var_14]
.text:0000768F                 push    ecx
.text:00007690                 mov     ecx, [ebp+var_10]
.text:00007693                 call    ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[](uint)
.text:00007698                 mov     ecx, eax        ; this
.text:0000769A                 call    ?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CThreadInfo::StopWaitClose(void)
.text:0000769F                 jmp     short loc_7676
.text:000076A1 ; ---------------------------------------------------------------------------
.text:000076A1
.text:000076A1 loc_76A1:                               ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+5Aj
.text:000076A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000076A8                 mov     ecx, [ebp+var_10]
.text:000076AB                 call    ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)
.text:000076B0                 mov     ecx, [ebp+var_C]
.text:000076B3                 mov     large fs:0, ecx
.text:000076BA                 pop     ecx
.text:000076BB                 add     esp, 14h
.text:000076BE                 cmp     ebp, esp
.text:000076C0                 call    __RTC_CheckEsp
.text:000076C5                 mov     esp, ebp
.text:000076C7                 pop     ebp
.text:000076C8                 retn
.text:000076C8 ??1CThreads@NZip@NArchive@@QAE@XZ endp
.text:000076C8
.text:000076C8 ; ---------------------------------------------------------------------------
.text:000076C9                 align 4
.text:000076C9 _text           ends
.text:000076C9
.text$x:000076CC ; ===========================================================================
.text$x:000076CC
.text$x:000076CC ; Segment type: Pure code
.text$x:000076CC ; Segment permissions: Read/Execute
.text$x:000076CC _text$x         segment para public 'CODE' use32
.text$x:000076CC                 assume cs:_text$x
.text$x:000076CC                 ;org 76CCh
.text$x:000076CC ; COMDAT (pick associative to section at 7630)
.text$x:000076CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000076CC
.text$x:000076CC ; =============== S U B R O U T I N E =======================================
.text$x:000076CC
.text$x:000076CC
.text$x:000076CC __unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000076CC                                         ; DATA XREF: .xdata$x:000076F4o
.text$x:000076CC                 mov     ecx, [ebp-10h]
.text$x:000076CF                 jmp     ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)
.text$x:000076CF __unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000076CF
.text$x:000076D4
.text$x:000076D4 ; =============== S U B R O U T I N E =======================================
.text$x:000076D4
.text$x:000076D4
.text$x:000076D4 __ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ proc near
.text$x:000076D4                                         ; DATA XREF: NArchive::NZip::CThreads::~CThreads(void)+5o
.text$x:000076D4
.text$x:000076D4 arg_4           = dword ptr  8
.text$x:000076D4
.text$x:000076D4                 mov     edx, [esp+arg_4]
.text$x:000076D8                 lea     eax, [edx+0Ch]
.text$x:000076DB                 mov     ecx, [edx-0Ch]
.text$x:000076DE                 xor     ecx, eax
.text$x:000076E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000076E5                 mov     eax, offset __ehfuncinfo$??1CThreads@NZip@NArchive@@QAE@XZ
.text$x:000076EA                 jmp     ___CxxFrameHandler3
.text$x:000076EA __ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ endp
.text$x:000076EA
.text$x:000076EA ; ---------------------------------------------------------------------------
.text$x:000076EF                 align 10h
.text$x:000076EF _text$x         ends
.text$x:000076EF
.xdata$x:000076F0 ; ===========================================================================
.xdata$x:000076F0
.xdata$x:000076F0 ; Segment type: Pure data
.xdata$x:000076F0 ; Segment permissions: Read
.xdata$x:000076F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000076F0                 assume cs:_xdata$x
.xdata$x:000076F0                 ;org 76F0h
.xdata$x:000076F0 ; COMDAT (pick associative to section at 7630)
.xdata$x:000076F0 __unwindtable$??1CThreads@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:000076F0                                         ; DATA XREF: .xdata$x:00007700o
.xdata$x:000076F1                 db 0FFh
.xdata$x:000076F2                 db 0FFh
.xdata$x:000076F3                 db 0FFh
.xdata$x:000076F4                 dd offset __unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0
.xdata$x:000076F8 __ehfuncinfo$??1CThreads@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000076F8                                         ; DATA XREF: __ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000076F9                 db    5
.xdata$x:000076FA                 db  93h ; ô
.xdata$x:000076FB                 db  19h
.xdata$x:000076FC                 db    1
.xdata$x:000076FD                 db    0
.xdata$x:000076FE                 db    0
.xdata$x:000076FF                 db    0
.xdata$x:00007700                 dd offset __unwindtable$??1CThreads@NZip@NArchive@@QAE@XZ
.xdata$x:00007704                 db    0
.xdata$x:00007705                 db    0
.xdata$x:00007706                 db    0
.xdata$x:00007707                 db    0
.xdata$x:00007708                 db    0
.xdata$x:00007709                 db    0
.xdata$x:0000770A                 db    0
.xdata$x:0000770B                 db    0
.xdata$x:0000770C                 db    0
.xdata$x:0000770D                 db    0
.xdata$x:0000770E                 db    0
.xdata$x:0000770F                 db    0
.xdata$x:00007710                 db    0
.xdata$x:00007711                 db    0
.xdata$x:00007712                 db    0
.xdata$x:00007713                 db    0
.xdata$x:00007714                 db    0
.xdata$x:00007715                 db    0
.xdata$x:00007716                 db    0
.xdata$x:00007717                 db    0
.xdata$x:00007718                 db    1
.xdata$x:00007719                 db    0
.xdata$x:0000771A                 db    0
.xdata$x:0000771B                 db    0
.xdata$x:0000771B _xdata$x        ends
.xdata$x:0000771B
.text:0000771C ; ===========================================================================
.text:0000771C
.text:0000771C ; Segment type: Pure code
.text:0000771C ; Segment permissions: Read/Execute
.text:0000771C _text           segment para public 'CODE' use32
.text:0000771C                 assume cs:_text
.text:0000771C                 ;org 771Ch
.text:0000771C ; COMDAT (pick any)
.text:0000771C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000771C
.text:0000771C ; =============== S U B R O U T I N E =======================================
.text:0000771C
.text:0000771C ; Attributes: bp-based frame
.text:0000771C
.text:0000771C ; void __thiscall NArchive::NZip::CThreadInfo::StopWaitClose(NArchive::NZip::CThreadInfo *__hidden this)
.text:0000771C                 public ?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ
.text:0000771C ?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ proc near
.text:0000771C                                         ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+6Ap
.text:0000771C
.text:0000771C var_4           = dword ptr -4
.text:0000771C
.text:0000771C                 push    ebp
.text:0000771D                 mov     ebp, esp
.text:0000771F                 push    ecx
.text:00007720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007727                 mov     [ebp+var_4], ecx
.text:0000772A                 mov     eax, [ebp+var_4]
.text:0000772D                 mov     byte ptr [eax+0Ch], 1
.text:00007731                 mov     ecx, [ebp+var_4]
.text:00007734                 cmp     dword ptr [ecx+18h], 0
.text:00007738                 jz      short loc_774A
.text:0000773A                 push    80004004h       ; __int32
.text:0000773F                 mov     edx, [ebp+var_4]
.text:00007742                 mov     ecx, [edx+18h]  ; this
.text:00007745                 call    ?StopWriting@COutMemStream@@QAEXJ@Z ; COutMemStream::StopWriting(long)
.text:0000774A
.text:0000774A loc_774A:                               ; CODE XREF: NArchive::NZip::CThreadInfo::StopWaitClose(void)+1Cj
.text:0000774A                 mov     ecx, [ebp+var_4]
.text:0000774D                 add     ecx, 4          ; this
.text:00007750                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:00007755                 movzx   eax, al
.text:00007758                 test    eax, eax
.text:0000775A                 jz      short loc_7767
.text:0000775C                 mov     ecx, [ebp+var_4]
.text:0000775F                 add     ecx, 4          ; this
.text:00007762                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00007767
.text:00007767 loc_7767:                               ; CODE XREF: NArchive::NZip::CThreadInfo::StopWaitClose(void)+3Ej
.text:00007767                 mov     ecx, [ebp+var_4] ; this
.text:0000776A                 call    ?Wait@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Wait(void)
.text:0000776F                 mov     ecx, [ebp+var_4] ; this
.text:00007772                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00007777                 add     esp, 4
.text:0000777A                 cmp     ebp, esp
.text:0000777C                 call    __RTC_CheckEsp
.text:00007781                 mov     esp, ebp
.text:00007783                 pop     ebp
.text:00007784                 retn
.text:00007784 ?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ endp
.text:00007784
.text:00007784 ; ---------------------------------------------------------------------------
.text:00007785                 align 4
.text:00007785 _text           ends
.text:00007785
.text:00007788 ; ===========================================================================
.text:00007788
.text:00007788 ; Segment type: Pure code
.text:00007788 ; Segment permissions: Read/Execute
.text:00007788 _text           segment para public 'CODE' use32
.text:00007788                 assume cs:_text
.text:00007788                 ;org 7788h
.text:00007788 ; COMDAT (pick any)
.text:00007788                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007788
.text:00007788 ; =============== S U B R O U T I N E =======================================
.text:00007788
.text:00007788 ; Attributes: bp-based frame
.text:00007788
.text:00007788 ; unsigned int __thiscall NWindows::CThread::Wait(NWindows::CThread *__hidden this)
.text:00007788                 public ?Wait@CThread@NWindows@@QAEIXZ
.text:00007788 ?Wait@CThread@NWindows@@QAEIXZ proc near
.text:00007788                                         ; CODE XREF: NArchive::NZip::CThreadInfo::StopWaitClose(void)+4Ep
.text:00007788
.text:00007788 var_4           = dword ptr -4
.text:00007788
.text:00007788                 push    ebp
.text:00007789                 mov     ebp, esp
.text:0000778B                 push    ecx
.text:0000778C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007793                 mov     [ebp+var_4], ecx
.text:00007796                 mov     eax, [ebp+var_4]
.text:00007799                 mov     ecx, [eax]
.text:0000779B                 push    ecx
.text:0000779C                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000077A1                 add     esp, 4
.text:000077A4                 cmp     ebp, esp
.text:000077A6                 call    __RTC_CheckEsp
.text:000077AB                 mov     esp, ebp
.text:000077AD                 pop     ebp
.text:000077AE                 retn
.text:000077AE ?Wait@CThread@NWindows@@QAEIXZ endp
.text:000077AE
.text:000077AE ; ---------------------------------------------------------------------------
.text:000077AF                 align 10h
.text:000077AF _text           ends
.text:000077AF
.text:000077B0 ; ===========================================================================
.text:000077B0
.text:000077B0 ; Segment type: Pure code
.text:000077B0 ; Segment permissions: Read/Execute
.text:000077B0 _text           segment para public 'CODE' use32
.text:000077B0                 assume cs:_text
.text:000077B0                 ;org 77B0h
.text:000077B0 ; COMDAT (pick any)
.text:000077B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000077B0
.text:000077B0 ; =============== S U B R O U T I N E =======================================
.text:000077B0
.text:000077B0 ; Attributes: bp-based frame
.text:000077B0
.text:000077B0 ; void __thiscall COutMemStream::StopWriting(COutMemStream *this, __int32)
.text:000077B0                 public ?StopWriting@COutMemStream@@QAEXJ@Z
.text:000077B0 ?StopWriting@COutMemStream@@QAEXJ@Z proc near
.text:000077B0                                         ; CODE XREF: NArchive::NZip::CThreadInfo::StopWaitClose(void)+29p
.text:000077B0
.text:000077B0 var_4           = dword ptr -4
.text:000077B0 arg_0           = dword ptr  8
.text:000077B0
.text:000077B0                 push    ebp
.text:000077B1                 mov     ebp, esp
.text:000077B3                 push    ecx
.text:000077B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077BB                 mov     [ebp+var_4], ecx
.text:000077BE                 mov     eax, [ebp+var_4]
.text:000077C1                 mov     ecx, [ebp+arg_0]
.text:000077C4                 mov     [eax+20h], ecx
.text:000077C7                 mov     ecx, [ebp+var_4]
.text:000077CA                 add     ecx, 18h        ; this
.text:000077CD                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000077D2                 add     esp, 4
.text:000077D5                 cmp     ebp, esp
.text:000077D7                 call    __RTC_CheckEsp
.text:000077DC                 mov     esp, ebp
.text:000077DE                 pop     ebp
.text:000077DF                 retn    4
.text:000077DF ?StopWriting@COutMemStream@@QAEXJ@Z endp
.text:000077DF
.text:000077DF ; ---------------------------------------------------------------------------
.text:000077E2                 align 4
.text:000077E2 _text           ends
.text:000077E2
.text:000077E4 ; ===========================================================================
.text:000077E4
.text:000077E4 ; Segment type: Pure code
.text:000077E4 ; Segment permissions: Read/Execute
.text:000077E4 _text           segment para public 'CODE' use32
.text:000077E4                 assume cs:_text
.text:000077E4                 ;org 77E4h
.text:000077E4 ; COMDAT (pick any)
.text:000077E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000077E4
.text:000077E4 ; =============== S U B R O U T I N E =======================================
.text:000077E4
.text:000077E4 ; Attributes: bp-based frame
.text:000077E4
.text:000077E4 ; _DWORD __thiscall NArchive::NZip::CMemBlocks2::CMemBlocks2(NArchive::NZip::CMemBlocks2 *__hidden this)
.text:000077E4                 public ??0CMemBlocks2@NZip@NArchive@@QAE@XZ
.text:000077E4 ??0CMemBlocks2@NZip@NArchive@@QAE@XZ proc near
.text:000077E4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+79Cp
.text:000077E4
.text:000077E4 var_4           = dword ptr -4
.text:000077E4
.text:000077E4                 push    ebp
.text:000077E5                 mov     ebp, esp
.text:000077E7                 push    ecx
.text:000077E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077EF                 mov     [ebp+var_4], ecx
.text:000077F2                 mov     ecx, [ebp+var_4] ; this
.text:000077F5                 call    ??0CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::CMemLockBlocks(void)
.text:000077FA                 mov     eax, [ebp+var_4]
.text:000077FD                 mov     byte ptr [eax+38h], 0
.text:00007801                 mov     ecx, [ebp+var_4]
.text:00007804                 mov     byte ptr [ecx+39h], 0
.text:00007808                 mov     eax, [ebp+var_4]
.text:0000780B                 add     esp, 4
.text:0000780E                 cmp     ebp, esp
.text:00007810                 call    __RTC_CheckEsp
.text:00007815                 mov     esp, ebp
.text:00007817                 pop     ebp
.text:00007818                 retn
.text:00007818 ??0CMemBlocks2@NZip@NArchive@@QAE@XZ endp
.text:00007818
.text:00007818 ; ---------------------------------------------------------------------------
.text:00007819                 align 4
.text:00007819 _text           ends
.text:00007819
.text:0000781C ; ===========================================================================
.text:0000781C
.text:0000781C ; Segment type: Pure code
.text:0000781C ; Segment permissions: Read/Execute
.text:0000781C _text           segment para public 'CODE' use32
.text:0000781C                 assume cs:_text
.text:0000781C                 ;org 781Ch
.text:0000781C ; COMDAT (pick any)
.text:0000781C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000781C
.text:0000781C ; =============== S U B R O U T I N E =======================================
.text:0000781C
.text:0000781C ; Attributes: bp-based frame
.text:0000781C
.text:0000781C ; _DWORD __thiscall NArchive::NZip::CMemRefs::CMemRefs(NArchive::NZip::CMemRefs *this, struct CMemBlockManagerMt *)
.text:0000781C                 public ??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z
.text:0000781C ??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z proc near
.text:0000781C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+65Bp
.text:0000781C
.text:0000781C var_4           = dword ptr -4
.text:0000781C arg_0           = dword ptr  8
.text:0000781C
.text:0000781C                 push    ebp
.text:0000781D                 mov     ebp, esp
.text:0000781F                 push    ecx
.text:00007820                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007827                 mov     [ebp+var_4], ecx
.text:0000782A                 mov     eax, [ebp+var_4]
.text:0000782D                 mov     ecx, [ebp+arg_0]
.text:00007830                 mov     [eax], ecx
.text:00007832                 mov     ecx, [ebp+var_4]
.text:00007835                 add     ecx, 4
.text:00007838                 call    ??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::CObjectVector<NArchive::NZip::CMemBlocks2>(void)
.text:0000783D                 mov     eax, [ebp+var_4]
.text:00007840                 add     esp, 4
.text:00007843                 cmp     ebp, esp
.text:00007845                 call    __RTC_CheckEsp
.text:0000784A                 mov     esp, ebp
.text:0000784C                 pop     ebp
.text:0000784D                 retn    4
.text:0000784D ??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z endp
.text:0000784D
.text:0000784D _text           ends
.text:0000784D
.text:00007850 ; ===========================================================================
.text:00007850
.text:00007850 ; Segment type: Pure code
.text:00007850 ; Segment permissions: Read/Execute
.text:00007850 _text           segment para public 'CODE' use32
.text:00007850                 assume cs:_text
.text:00007850                 ;org 7850h
.text:00007850 ; COMDAT (pick any)
.text:00007850                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007850
.text:00007850 ; =============== S U B R O U T I N E =======================================
.text:00007850
.text:00007850 ; Attributes: bp-based frame
.text:00007850
.text:00007850 ; _DWORD __thiscall NArchive::NZip::CMemRefs::~CMemRefs(NArchive::NZip::CMemRefs *__hidden this)
.text:00007850                 public ??1CMemRefs@NZip@NArchive@@QAE@XZ
.text:00007850 ??1CMemRefs@NZip@NArchive@@QAE@XZ proc near
.text:00007850                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6FEp
.text:00007850                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+8F4p ...
.text:00007850
.text:00007850 var_14          = dword ptr -14h
.text:00007850 var_10          = dword ptr -10h
.text:00007850 var_C           = dword ptr -0Ch
.text:00007850 var_4           = dword ptr -4
.text:00007850
.text:00007850                 push    ebp
.text:00007851                 mov     ebp, esp
.text:00007853                 push    0FFFFFFFFh
.text:00007855                 push    offset __ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ
.text:0000785A                 mov     eax, large fs:0
.text:00007860                 push    eax
.text:00007861                 sub     esp, 8
.text:00007864                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000786B                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007872                 mov     eax, dword ptr ds:___security_cookie
.text:00007877                 xor     eax, ebp
.text:00007879                 push    eax
.text:0000787A                 lea     eax, [ebp+var_C]
.text:0000787D                 mov     large fs:0, eax
.text:00007883                 mov     [ebp+var_10], ecx
.text:00007886                 mov     [ebp+var_4], 0
.text:0000788D                 mov     [ebp+var_14], 0
.text:00007894                 jmp     short loc_789F
.text:00007896 ; ---------------------------------------------------------------------------
.text:00007896
.text:00007896 loc_7896:                               ; CODE XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+7Bj
.text:00007896                 mov     eax, [ebp+var_14]
.text:00007899                 add     eax, 1
.text:0000789C                 mov     [ebp+var_14], eax
.text:0000789F
.text:0000789F loc_789F:                               ; CODE XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+44j
.text:0000789F                 mov     ecx, [ebp+var_10]
.text:000078A2                 add     ecx, 4
.text:000078A5                 call    ?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::Size(void)
.text:000078AA                 cmp     [ebp+var_14], eax
.text:000078AD                 jnb     short loc_78CD
.text:000078AF                 mov     ecx, [ebp+var_10]
.text:000078B2                 mov     edx, [ecx]
.text:000078B4                 push    edx             ; struct CMemBlockManagerMt *
.text:000078B5                 mov     eax, [ebp+var_14]
.text:000078B8                 push    eax
.text:000078B9                 mov     ecx, [ebp+var_10]
.text:000078BC                 add     ecx, 4
.text:000078BF                 call    ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[](uint)
.text:000078C4                 mov     ecx, eax        ; this
.text:000078C6                 call    ?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::FreeOpt(CMemBlockManagerMt *)
.text:000078CB                 jmp     short loc_7896
.text:000078CD ; ---------------------------------------------------------------------------
.text:000078CD
.text:000078CD loc_78CD:                               ; CODE XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+5Dj
.text:000078CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000078D4                 mov     ecx, [ebp+var_10]
.text:000078D7                 add     ecx, 4
.text:000078DA                 call    ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)
.text:000078DF                 mov     ecx, [ebp+var_C]
.text:000078E2                 mov     large fs:0, ecx
.text:000078E9                 pop     ecx
.text:000078EA                 add     esp, 14h
.text:000078ED                 cmp     ebp, esp
.text:000078EF                 call    __RTC_CheckEsp
.text:000078F4                 mov     esp, ebp
.text:000078F6                 pop     ebp
.text:000078F7                 retn
.text:000078F7 ??1CMemRefs@NZip@NArchive@@QAE@XZ endp
.text:000078F7
.text:000078F7 _text           ends
.text:000078F7
.text$x:000078F8 ; ===========================================================================
.text$x:000078F8
.text$x:000078F8 ; Segment type: Pure code
.text$x:000078F8 ; Segment permissions: Read/Execute
.text$x:000078F8 _text$x         segment para public 'CODE' use32
.text$x:000078F8                 assume cs:_text$x
.text$x:000078F8                 ;org 78F8h
.text$x:000078F8 ; COMDAT (pick associative to section at 7850)
.text$x:000078F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000078F8
.text$x:000078F8 ; =============== S U B R O U T I N E =======================================
.text$x:000078F8
.text$x:000078F8
.text$x:000078F8 __unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000078F8                                         ; DATA XREF: .xdata$x:00007924o
.text$x:000078F8                 mov     ecx, [ebp-10h]
.text$x:000078FB                 add     ecx, 4
.text$x:000078FE                 jmp     ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)
.text$x:000078FE __unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000078FE
.text$x:00007903
.text$x:00007903 ; =============== S U B R O U T I N E =======================================
.text$x:00007903
.text$x:00007903
.text$x:00007903 __ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ proc near
.text$x:00007903                                         ; DATA XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+5o
.text$x:00007903
.text$x:00007903 arg_4           = dword ptr  8
.text$x:00007903
.text$x:00007903                 mov     edx, [esp+arg_4]
.text$x:00007907                 lea     eax, [edx+0Ch]
.text$x:0000790A                 mov     ecx, [edx-0Ch]
.text$x:0000790D                 xor     ecx, eax
.text$x:0000790F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007914                 mov     eax, offset __ehfuncinfo$??1CMemRefs@NZip@NArchive@@QAE@XZ
.text$x:00007919                 jmp     ___CxxFrameHandler3
.text$x:00007919 __ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ endp
.text$x:00007919
.text$x:00007919 ; ---------------------------------------------------------------------------
.text$x:0000791E                 align 10h
.text$x:0000791E _text$x         ends
.text$x:0000791E
.xdata$x:00007920 ; ===========================================================================
.xdata$x:00007920
.xdata$x:00007920 ; Segment type: Pure data
.xdata$x:00007920 ; Segment permissions: Read
.xdata$x:00007920 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007920                 assume cs:_xdata$x
.xdata$x:00007920                 ;org 7920h
.xdata$x:00007920 ; COMDAT (pick associative to section at 7850)
.xdata$x:00007920 __unwindtable$??1CMemRefs@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00007920                                         ; DATA XREF: .xdata$x:00007930o
.xdata$x:00007921                 db 0FFh
.xdata$x:00007922                 db 0FFh
.xdata$x:00007923                 db 0FFh
.xdata$x:00007924                 dd offset __unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0
.xdata$x:00007928 __ehfuncinfo$??1CMemRefs@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00007928                                         ; DATA XREF: __ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00007929                 db    5
.xdata$x:0000792A                 db  93h ; ô
.xdata$x:0000792B                 db  19h
.xdata$x:0000792C                 db    1
.xdata$x:0000792D                 db    0
.xdata$x:0000792E                 db    0
.xdata$x:0000792F                 db    0
.xdata$x:00007930                 dd offset __unwindtable$??1CMemRefs@NZip@NArchive@@QAE@XZ
.xdata$x:00007934                 db    0
.xdata$x:00007935                 db    0
.xdata$x:00007936                 db    0
.xdata$x:00007937                 db    0
.xdata$x:00007938                 db    0
.xdata$x:00007939                 db    0
.xdata$x:0000793A                 db    0
.xdata$x:0000793B                 db    0
.xdata$x:0000793C                 db    0
.xdata$x:0000793D                 db    0
.xdata$x:0000793E                 db    0
.xdata$x:0000793F                 db    0
.xdata$x:00007940                 db    0
.xdata$x:00007941                 db    0
.xdata$x:00007942                 db    0
.xdata$x:00007943                 db    0
.xdata$x:00007944                 db    0
.xdata$x:00007945                 db    0
.xdata$x:00007946                 db    0
.xdata$x:00007947                 db    0
.xdata$x:00007948                 db    1
.xdata$x:00007949                 db    0
.xdata$x:0000794A                 db    0
.xdata$x:0000794B                 db    0
.xdata$x:0000794B _xdata$x        ends
.xdata$x:0000794B
.text:0000794C ; ===========================================================================
.text:0000794C
.text:0000794C ; Segment type: Pure code
.text:0000794C ; Segment permissions: Read/Execute
.text:0000794C _text           segment para public 'CODE' use32
.text:0000794C                 assume cs:_text
.text:0000794C                 ;org 794Ch
.text:0000794C ; COMDAT (pick any)
.text:0000794C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000794C
.text:0000794C ; =============== S U B R O U T I N E =======================================
.text:0000794C
.text:0000794C ; Attributes: bp-based frame
.text:0000794C
.text:0000794C ; bool __thiscall NArchive::NZip::CExtraBlock::HasWzAes(NArchive::NZip::CExtraBlock *__hidden this)
.text:0000794C                 public ?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ
.text:0000794C ?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ proc near
.text:0000794C                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+13Cp
.text:0000794C
.text:0000794C var_14          = dword ptr -14h
.text:0000794C var_10          = dword ptr -10h
.text:0000794C var_C           = dword ptr -0Ch
.text:0000794C var_8           = dword ptr -8
.text:0000794C var_4           = dword ptr -4
.text:0000794C
.text:0000794C                 push    ebp
.text:0000794D                 mov     ebp, esp
.text:0000794F                 sub     esp, 14h
.text:00007952                 mov     eax, 0CCCCCCCCh
.text:00007957                 mov     [ebp+var_14], eax
.text:0000795A                 mov     [ebp+var_10], eax
.text:0000795D                 mov     [ebp+var_C], eax
.text:00007960                 mov     [ebp+var_8], eax
.text:00007963                 mov     [ebp+var_4], eax
.text:00007966                 mov     [ebp+var_4], ecx
.text:00007969                 lea     ecx, [ebp+var_10] ; this
.text:0000796C                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00007971                 lea     eax, [ebp+var_10]
.text:00007974                 push    eax             ; struct NArchive::NZip::CWzAesExtra *
.text:00007975                 mov     ecx, [ebp+var_4] ; this
.text:00007978                 call    ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)
.text:0000797D                 push    edx
.text:0000797E                 mov     ecx, ebp
.text:00007980                 push    eax
.text:00007981                 lea     edx, $LN5_0
.text:00007987                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000798C                 pop     eax
.text:0000798D                 pop     edx
.text:0000798E                 add     esp, 14h
.text:00007991                 cmp     ebp, esp
.text:00007993                 call    __RTC_CheckEsp
.text:00007998                 mov     esp, ebp
.text:0000799A                 pop     ebp
.text:0000799B                 retn
.text:0000799B ?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ endp
.text:0000799B
.text:0000799B ; ---------------------------------------------------------------------------
.text:0000799C $LN5_0          dd 1                    ; DATA XREF: NArchive::NZip::CExtraBlock::HasWzAes(void)+35o
.text:000079A0                 dd offset $LN4
.text:000079A4 $LN4            dd 0FFFFFFF0h, 6        ; DATA XREF: .text:000079A0o
.text:000079AC                 dd offset $LN3
.text:000079B0 $LN3            db 65h, 0               ; DATA XREF: .text:000079ACo
.text:000079B2                 align 4
.text:000079B2 _text           ends
.text:000079B2
.text:000079B4 ; ===========================================================================
.text:000079B4
.text:000079B4 ; Segment type: Pure code
.text:000079B4 ; Segment permissions: Read/Execute
.text:000079B4 _text           segment para public 'CODE' use32
.text:000079B4                 assume cs:_text
.text:000079B4                 ;org 79B4h
.text:000079B4 ; COMDAT (pick any)
.text:000079B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000079B4
.text:000079B4 ; =============== S U B R O U T I N E =======================================
.text:000079B4
.text:000079B4 ; Attributes: bp-based frame
.text:000079B4
.text:000079B4 ; bool __thiscall NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CExtraBlock *this, struct NArchive::NZip::CWzAesExtra *)
.text:000079B4                 public ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z
.text:000079B4 ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z proc near
.text:000079B4                                         ; CODE XREF: NArchive::NZip::CExtraBlock::HasWzAes(void)+2Cp
.text:000079B4
.text:000079B4 var_8           = dword ptr -8
.text:000079B4 var_4           = dword ptr -4
.text:000079B4 arg_0           = dword ptr  8
.text:000079B4
.text:000079B4                 push    ebp
.text:000079B5                 mov     ebp, esp
.text:000079B7                 sub     esp, 8
.text:000079BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000079C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079C8                 mov     [ebp+var_4], ecx
.text:000079CB                 mov     [ebp+var_8], 0
.text:000079D2                 jmp     short loc_79DD
.text:000079D4 ; ---------------------------------------------------------------------------
.text:000079D4
.text:000079D4 loc_79D4:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &):loc_7A0Aj
.text:000079D4                 mov     eax, [ebp+var_8]
.text:000079D7                 add     eax, 1
.text:000079DA                 mov     [ebp+var_8], eax
.text:000079DD
.text:000079DD loc_79DD:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+1Ej
.text:000079DD                 mov     ecx, [ebp+var_4]
.text:000079E0                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:000079E5                 cmp     [ebp+var_8], eax
.text:000079E8                 jnb     short loc_7A0C
.text:000079EA                 mov     ecx, [ebp+var_8]
.text:000079ED                 push    ecx
.text:000079EE                 mov     ecx, [ebp+var_4]
.text:000079F1                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:000079F6                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:000079F7                 mov     ecx, [ebp+arg_0] ; this
.text:000079FA                 call    ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:000079FF                 movzx   edx, al
.text:00007A02                 test    edx, edx
.text:00007A04                 jz      short loc_7A0A
.text:00007A06                 mov     al, 1
.text:00007A08                 jmp     short loc_7A0E
.text:00007A0A ; ---------------------------------------------------------------------------
.text:00007A0A
.text:00007A0A loc_7A0A:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+50j
.text:00007A0A                 jmp     short loc_79D4
.text:00007A0C ; ---------------------------------------------------------------------------
.text:00007A0C
.text:00007A0C loc_7A0C:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+34j
.text:00007A0C                 xor     al, al
.text:00007A0E
.text:00007A0E loc_7A0E:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+54j
.text:00007A0E                 add     esp, 8
.text:00007A11                 cmp     ebp, esp
.text:00007A13                 call    __RTC_CheckEsp
.text:00007A18                 mov     esp, ebp
.text:00007A1A                 pop     ebp
.text:00007A1B                 retn    4
.text:00007A1B ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z endp
.text:00007A1B
.text:00007A1B ; ---------------------------------------------------------------------------
.text:00007A1E                 align 10h
.text:00007A1E _text           ends
.text:00007A1E
.text:00007A20 ; ===========================================================================
.text:00007A20
.text:00007A20 ; Segment type: Pure code
.text:00007A20 ; Segment permissions: Read/Execute
.text:00007A20 _text           segment para public 'CODE' use32
.text:00007A20                 assume cs:_text
.text:00007A20                 ;org 7A20h
.text:00007A20 ; COMDAT (pick any)
.text:00007A20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007A20
.text:00007A20 ; =============== S U B R O U T I N E =======================================
.text:00007A20
.text:00007A20 ; Attributes: bp-based frame
.text:00007A20
.text:00007A20 ; bool __thiscall NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CWzAesExtra *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:00007A20                 public ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
.text:00007A20 ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z proc near
.text:00007A20                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+46p
.text:00007A20
.text:00007A20 var_8           = dword ptr -8
.text:00007A20 var_4           = dword ptr -4
.text:00007A20 arg_0           = dword ptr  8
.text:00007A20
.text:00007A20                 push    ebp
.text:00007A21                 mov     ebp, esp
.text:00007A23                 sub     esp, 8
.text:00007A26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007A2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A34                 mov     [ebp+var_4], ecx
.text:00007A37                 mov     eax, [ebp+arg_0]
.text:00007A3A                 movzx   ecx, word ptr [eax]
.text:00007A3D                 cmp     ecx, 9901h
.text:00007A43                 jz      short loc_7A49
.text:00007A45                 xor     al, al
.text:00007A47                 jmp     short loc_7AAF
.text:00007A49 ; ---------------------------------------------------------------------------
.text:00007A49
.text:00007A49 loc_7A49:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+23j
.text:00007A49                 mov     ecx, [ebp+arg_0]
.text:00007A4C                 add     ecx, 4
.text:00007A4F                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00007A54                 cmp     eax, 7
.text:00007A57                 jnb     short loc_7A5D
.text:00007A59                 xor     al, al
.text:00007A5B                 jmp     short loc_7AAF
.text:00007A5D ; ---------------------------------------------------------------------------
.text:00007A5D
.text:00007A5D loc_7A5D:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+37j
.text:00007A5D                 mov     ecx, [ebp+arg_0]
.text:00007A60                 add     ecx, 4
.text:00007A63                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00007A68                 mov     [ebp+var_8], eax
.text:00007A6B                 mov     edx, [ebp+var_4]
.text:00007A6E                 mov     eax, [ebp+var_8]
.text:00007A71                 mov     cx, [eax]
.text:00007A74                 mov     [edx], cx
.text:00007A77                 mov     edx, [ebp+var_8]
.text:00007A7A                 movzx   eax, byte ptr [edx+2]
.text:00007A7E                 cmp     eax, 41h ; 'A'
.text:00007A81                 jnz     short loc_7A8F
.text:00007A83                 mov     ecx, [ebp+var_8]
.text:00007A86                 movzx   edx, byte ptr [ecx+3]
.text:00007A8A                 cmp     edx, 45h ; 'E'
.text:00007A8D                 jz      short loc_7A93
.text:00007A8F
.text:00007A8F loc_7A8F:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+61j
.text:00007A8F                 xor     al, al
.text:00007A91                 jmp     short loc_7AAF
.text:00007A93 ; ---------------------------------------------------------------------------
.text:00007A93
.text:00007A93 loc_7A93:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+6Dj
.text:00007A93                 mov     eax, [ebp+var_4]
.text:00007A96                 mov     ecx, [ebp+var_8]
.text:00007A99                 mov     dl, [ecx+4]
.text:00007A9C                 mov     [eax+2], dl
.text:00007A9F                 mov     eax, [ebp+var_4]
.text:00007AA2                 mov     ecx, [ebp+var_8]
.text:00007AA5                 mov     dx, [ecx+5]
.text:00007AA9                 mov     [eax+4], dx
.text:00007AAD                 mov     al, 1
.text:00007AAF
.text:00007AAF loc_7AAF:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+27j
.text:00007AAF                                         ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+3Bj ...
.text:00007AAF                 add     esp, 8
.text:00007AB2                 cmp     ebp, esp
.text:00007AB4                 call    __RTC_CheckEsp
.text:00007AB9                 mov     esp, ebp
.text:00007ABB                 pop     ebp
.text:00007ABC                 retn    4
.text:00007ABC ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z endp
.text:00007ABC
.text:00007ABC ; ---------------------------------------------------------------------------
.text:00007ABF                 align 10h
.text:00007ABF _text           ends
.text:00007ABF
.text:00007AC0 ; ===========================================================================
.text:00007AC0
.text:00007AC0 ; Segment type: Pure code
.text:00007AC0 ; Segment permissions: Read/Execute
.text:00007AC0 _text           segment para public 'CODE' use32
.text:00007AC0                 assume cs:_text
.text:00007AC0                 ;org 7AC0h
.text:00007AC0 ; COMDAT (pick any)
.text:00007AC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007AC0
.text:00007AC0 ; =============== S U B R O U T I N E =======================================
.text:00007AC0
.text:00007AC0 ; Attributes: bp-based frame
.text:00007AC0
.text:00007AC0 ; void __thiscall NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(NArchive::NZip::CExtraBlock *__hidden this)
.text:00007AC0                 public ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ
.text:00007AC0 ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ proc near
.text:00007AC0                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+115p
.text:00007AC0                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+120p
.text:00007AC0
.text:00007AC0 var_8           = dword ptr -8
.text:00007AC0 var_4           = dword ptr -4
.text:00007AC0
.text:00007AC0                 push    ebp
.text:00007AC1                 mov     ebp, esp
.text:00007AC3                 sub     esp, 8
.text:00007AC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007ACD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007AD4                 mov     [ebp+var_4], ecx
.text:00007AD7                 mov     ecx, [ebp+var_4]
.text:00007ADA                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00007ADF                 mov     [ebp+var_8], eax
.text:00007AE2
.text:00007AE2 loc_7AE2:                               ; CODE XREF: NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void):loc_7B14j
.text:00007AE2                 cmp     [ebp+var_8], 0
.text:00007AE6                 jz      short loc_7B16
.text:00007AE8                 mov     eax, [ebp+var_8]
.text:00007AEB                 sub     eax, 1
.text:00007AEE                 mov     [ebp+var_8], eax
.text:00007AF1                 mov     ecx, [ebp+var_8]
.text:00007AF4                 push    ecx
.text:00007AF5                 mov     ecx, [ebp+var_4]
.text:00007AF8                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00007AFD                 movzx   edx, word ptr [eax]
.text:00007B00                 cmp     edx, 9901h
.text:00007B06                 jz      short loc_7B14
.text:00007B08                 mov     eax, [ebp+var_8]
.text:00007B0B                 push    eax
.text:00007B0C                 mov     ecx, [ebp+var_4]
.text:00007B0F                 call    ?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete(uint)
.text:00007B14
.text:00007B14 loc_7B14:                               ; CODE XREF: NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)+46j
.text:00007B14                 jmp     short loc_7AE2
.text:00007B16 ; ---------------------------------------------------------------------------
.text:00007B16
.text:00007B16 loc_7B16:                               ; CODE XREF: NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)+26j
.text:00007B16                 add     esp, 8
.text:00007B19                 cmp     ebp, esp
.text:00007B1B                 call    __RTC_CheckEsp
.text:00007B20                 mov     esp, ebp
.text:00007B22                 pop     ebp
.text:00007B23                 retn
.text:00007B23 ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ endp
.text:00007B23
.text:00007B23 _text           ends
.text:00007B23
.text:00007B24 ; ===========================================================================
.text:00007B24
.text:00007B24 ; Segment type: Pure code
.text:00007B24 ; Segment permissions: Read/Execute
.text:00007B24 _text           segment para public 'CODE' use32
.text:00007B24                 assume cs:_text
.text:00007B24                 ;org 7B24h
.text:00007B24 ; COMDAT (pick any)
.text:00007B24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B24
.text:00007B24 ; =============== S U B R O U T I N E =======================================
.text:00007B24
.text:00007B24 ; Attributes: bp-based frame
.text:00007B24
.text:00007B24 ; unsigned __int64 __thiscall NArchive::NZip::CItemEx::GetDataPosition(NArchive::NZip::CItemEx *__hidden this)
.text:00007B24                 public ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
.text:00007B24 ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ proc near
.text:00007B24                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+86p
.text:00007B24
.text:00007B24 var_4           = dword ptr -4
.text:00007B24
.text:00007B24                 push    ebp
.text:00007B25                 mov     ebp, esp
.text:00007B27                 push    ecx
.text:00007B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B2F                 mov     [ebp+var_4], ecx
.text:00007B32                 mov     eax, [ebp+var_4]
.text:00007B35                 mov     eax, [eax+60h]
.text:00007B38                 xor     edx, edx
.text:00007B3A                 mov     ecx, [ebp+var_4]
.text:00007B3D                 add     eax, [ecx+40h]
.text:00007B40                 adc     edx, [ecx+44h]
.text:00007B43                 mov     esp, ebp
.text:00007B45                 pop     ebp
.text:00007B46                 retn
.text:00007B46 ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ endp
.text:00007B46
.text:00007B46 ; ---------------------------------------------------------------------------
.text:00007B47                 align 4
.text:00007B47 _text           ends
.text:00007B47
.text:00007B48 ; ===========================================================================
.text:00007B48
.text:00007B48 ; Segment type: Pure code
.text:00007B48 ; Segment permissions: Read/Execute
.text:00007B48 _text           segment para public 'CODE' use32
.text:00007B48                 assume cs:_text
.text:00007B48                 ;org 7B48h
.text:00007B48 ; COMDAT (pick any)
.text:00007B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B48
.text:00007B48 ; =============== S U B R O U T I N E =======================================
.text:00007B48
.text:00007B48 ; Attributes: bp-based frame
.text:00007B48
.text:00007B48 ; unsigned __int64 __thiscall NArchive::NZip::CInArchive::GetOffsetInStream(NArchive::NZip::CInArchive *this, unsigned __int64)
.text:00007B48                 public ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z
.text:00007B48 ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z proc near
.text:00007B48                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+90p
.text:00007B48                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1DFp
.text:00007B48
.text:00007B48 var_4           = dword ptr -4
.text:00007B48 arg_0           = qword ptr  8
.text:00007B48
.text:00007B48                 push    ebp
.text:00007B49                 mov     ebp, esp
.text:00007B4B                 push    ecx
.text:00007B4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B53                 mov     [ebp+var_4], ecx
.text:00007B56                 mov     eax, [ebp+var_4]
.text:00007B59                 mov     ecx, [eax+38h]
.text:00007B5C                 add     ecx, dword ptr [ebp+arg_0]
.text:00007B5F                 mov     edx, [eax+3Ch]
.text:00007B62                 adc     edx, dword ptr [ebp+arg_0+4]
.text:00007B65                 mov     eax, ecx
.text:00007B67                 mov     esp, ebp
.text:00007B69                 pop     ebp
.text:00007B6A                 retn    8
.text:00007B6A ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z endp
.text:00007B6A
.text:00007B6A ; ---------------------------------------------------------------------------
.text:00007B6D                 align 10h
.text:00007B6D _text           ends
.text:00007B6D
.text:00007B70 ; ===========================================================================
.text:00007B70
.text:00007B70 ; Segment type: Pure code
.text:00007B70 ; Segment permissions: Read/Execute
.text:00007B70 _text           segment para public 'CODE' use32
.text:00007B70                 assume cs:_text
.text:00007B70                 ;org 7B70h
.text:00007B70 ; COMDAT (pick any)
.text:00007B70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B70
.text:00007B70 ; =============== S U B R O U T I N E =======================================
.text:00007B70
.text:00007B70 ; Attributes: bp-based frame
.text:00007B70
.text:00007B70 ; _DWORD __thiscall NArchive::NZip::CUpdateRange::CUpdateRange(NArchive::NZip::CUpdateRange *this, unsigned __int64, unsigned __int64)
.text:00007B70                 public ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z
.text:00007B70 ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z proc near
.text:00007B70                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+9Ap
.text:00007B70                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+1E9p
.text:00007B70
.text:00007B70 var_4           = dword ptr -4
.text:00007B70 arg_0           = qword ptr  8
.text:00007B70 arg_8           = qword ptr  10h
.text:00007B70
.text:00007B70                 push    ebp
.text:00007B71                 mov     ebp, esp
.text:00007B73                 push    ecx
.text:00007B74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B7B                 mov     [ebp+var_4], ecx
.text:00007B7E                 mov     eax, [ebp+var_4]
.text:00007B81                 mov     ecx, dword ptr [ebp+arg_0]
.text:00007B84                 mov     [eax], ecx
.text:00007B86                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00007B89                 mov     [eax+4], edx
.text:00007B8C                 mov     eax, [ebp+var_4]
.text:00007B8F                 mov     ecx, dword ptr [ebp+arg_8]
.text:00007B92                 mov     [eax+8], ecx
.text:00007B95                 mov     edx, dword ptr [ebp+arg_8+4]
.text:00007B98                 mov     [eax+0Ch], edx
.text:00007B9B                 mov     eax, [ebp+var_4]
.text:00007B9E                 mov     esp, ebp
.text:00007BA0                 pop     ebp
.text:00007BA1                 retn    10h
.text:00007BA1 ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z endp
.text:00007BA1
.text:00007BA1 _text           ends
.text:00007BA1
.text:00007BA4 ; ===========================================================================
.text:00007BA4
.text:00007BA4 ; Segment type: Pure code
.text:00007BA4 ; Segment permissions: Read/Execute
.text:00007BA4 _text           segment para public 'CODE' use32
.text:00007BA4                 assume cs:_text
.text:00007BA4                 ;org 7BA4h
.text:00007BA4 ; COMDAT (pick any)
.text:00007BA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007BA4
.text:00007BA4 ; =============== S U B R O U T I N E =======================================
.text:00007BA4
.text:00007BA4 ; Attributes: bp-based frame
.text:00007BA4
.text:00007BA4 ; void __thiscall NArchive::NZip::CLocalItem::SetDescriptorMode(NArchive::NZip::CLocalItem *this, bool)
.text:00007BA4                 public ?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z
.text:00007BA4 ?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z proc near
.text:00007BA4                                         ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+6B2p
.text:00007BA4
.text:00007BA4 var_4           = dword ptr -4
.text:00007BA4 arg_0           = byte ptr  8
.text:00007BA4
.text:00007BA4                 push    ebp
.text:00007BA5                 mov     ebp, esp
.text:00007BA7                 push    ecx
.text:00007BA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007BAF                 mov     [ebp+var_4], ecx
.text:00007BB2                 movzx   eax, [ebp+arg_0]
.text:00007BB6                 push    eax             ; bool
.text:00007BB7                 push    8               ; unsigned int
.text:00007BB9                 mov     ecx, [ebp+var_4] ; this
.text:00007BBC                 call    ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag(uint,bool)
.text:00007BC1                 add     esp, 4
.text:00007BC4                 cmp     ebp, esp
.text:00007BC6                 call    __RTC_CheckEsp
.text:00007BCB                 mov     esp, ebp
.text:00007BCD                 pop     ebp
.text:00007BCE                 retn    4
.text:00007BCE ?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z endp
.text:00007BCE
.text:00007BCE ; ---------------------------------------------------------------------------
.text:00007BD1                 align 4
.text:00007BD1 _text           ends
.text:00007BD1
.text:00007BD4 ; ===========================================================================
.text:00007BD4
.text:00007BD4 ; Segment type: Pure code
.text:00007BD4 ; Segment permissions: Read/Execute
.text:00007BD4 _text           segment para public 'CODE' use32
.text:00007BD4                 assume cs:_text
.text:00007BD4                 ;org 7BD4h
.text:00007BD4 ; COMDAT (pick any)
.text:00007BD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007BD4
.text:00007BD4 ; =============== S U B R O U T I N E =======================================
.text:00007BD4
.text:00007BD4 ; Attributes: bp-based frame
.text:00007BD4
.text:00007BD4 ; _DWORD __thiscall NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx *__hidden this)
.text:00007BD4                 public ??0CItemEx@NZip@NArchive@@QAE@XZ
.text:00007BD4 ??0CItemEx@NZip@NArchive@@QAE@XZ proc near
.text:00007BD4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CEDp
.text:00007BD4                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+158Ap ...
.text:00007BD4
.text:00007BD4 var_4           = dword ptr -4
.text:00007BD4
.text:00007BD4                 push    ebp
.text:00007BD5                 mov     ebp, esp
.text:00007BD7                 push    ecx
.text:00007BD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007BDF                 mov     [ebp+var_4], ecx
.text:00007BE2                 mov     ecx, [ebp+var_4] ; this
.text:00007BE5                 call    ??0CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::CItem(void)
.text:00007BEA                 mov     eax, [ebp+var_4]
.text:00007BED                 add     esp, 4
.text:00007BF0                 cmp     ebp, esp
.text:00007BF2                 call    __RTC_CheckEsp
.text:00007BF7                 mov     esp, ebp
.text:00007BF9                 pop     ebp
.text:00007BFA                 retn
.text:00007BFA ??0CItemEx@NZip@NArchive@@QAE@XZ endp
.text:00007BFA
.text:00007BFA ; ---------------------------------------------------------------------------
.text:00007BFB                 align 4
.text:00007BFB _text           ends
.text:00007BFB
.text:00007BFC ; ===========================================================================
.text:00007BFC
.text:00007BFC ; Segment type: Pure code
.text:00007BFC ; Segment permissions: Read/Execute
.text:00007BFC _text           segment para public 'CODE' use32
.text:00007BFC                 assume cs:_text
.text:00007BFC                 ;org 7BFCh
.text:00007BFC ; COMDAT (pick any)
.text:00007BFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007BFC
.text:00007BFC ; =============== S U B R O U T I N E =======================================
.text:00007BFC
.text:00007BFC ; Attributes: bp-based frame
.text:00007BFC
.text:00007BFC ; _DWORD __thiscall NArchive::NZip::CItemEx::~CItemEx(NArchive::NZip::CItemEx *__hidden this)
.text:00007BFC                 public ??1CItemEx@NZip@NArchive@@QAE@XZ
.text:00007BFC ??1CItemEx@NZip@NArchive@@QAE@XZ proc near
.text:00007BFC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+15Fp
.text:00007BFC                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+19Fp ...
.text:00007BFC
.text:00007BFC var_4           = dword ptr -4
.text:00007BFC
.text:00007BFC                 push    ebp
.text:00007BFD                 mov     ebp, esp
.text:00007BFF                 push    ecx
.text:00007C00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C07                 mov     [ebp+var_4], ecx
.text:00007C0A                 mov     ecx, [ebp+var_4] ; this
.text:00007C0D                 call    ??1CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::~CItem(void)
.text:00007C12                 add     esp, 4
.text:00007C15                 cmp     ebp, esp
.text:00007C17                 call    __RTC_CheckEsp
.text:00007C1C                 mov     esp, ebp
.text:00007C1E                 pop     ebp
.text:00007C1F                 retn
.text:00007C1F ??1CItemEx@NZip@NArchive@@QAE@XZ endp
.text:00007C1F
.text:00007C1F _text           ends
.text:00007C1F
.text:00007C20 ; ===========================================================================
.text:00007C20
.text:00007C20 ; Segment type: Pure code
.text:00007C20 ; Segment permissions: Read/Execute
.text:00007C20 _text           segment para public 'CODE' use32
.text:00007C20                 assume cs:_text
.text:00007C20                 ;org 7C20h
.text:00007C20 ; COMDAT (pick any)
.text:00007C20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007C20
.text:00007C20 ; =============== S U B R O U T I N E =======================================
.text:00007C20
.text:00007C20 ; Attributes: bp-based frame
.text:00007C20
.text:00007C20 ; _DWORD __thiscall NArchive::NZip::CItem::~CItem(NArchive::NZip::CItem *__hidden this)
.text:00007C20                 public ??1CItem@NZip@NArchive@@QAE@XZ
.text:00007C20 ??1CItem@NZip@NArchive@@QAE@XZ proc near
.text:00007C20                                         ; CODE XREF: NArchive::NZip::CItemEx::~CItemEx(void)+11p
.text:00007C20                                         ; NArchive::NZip::CItemOut::~CItemOut(void)+11p
.text:00007C20
.text:00007C20 var_10          = dword ptr -10h
.text:00007C20 var_C           = dword ptr -0Ch
.text:00007C20 var_4           = dword ptr -4
.text:00007C20
.text:00007C20                 push    ebp
.text:00007C21                 mov     ebp, esp
.text:00007C23                 push    0FFFFFFFFh
.text:00007C25                 push    offset __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
.text:00007C2A                 mov     eax, large fs:0
.text:00007C30                 push    eax
.text:00007C31                 push    ecx
.text:00007C32                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007C39                 mov     eax, dword ptr ds:___security_cookie
.text:00007C3E                 xor     eax, ebp
.text:00007C40                 push    eax
.text:00007C41                 lea     eax, [ebp+var_C]
.text:00007C44                 mov     large fs:0, eax
.text:00007C4A                 mov     [ebp+var_10], ecx
.text:00007C4D                 mov     [ebp+var_4], 1
.text:00007C54                 mov     ecx, [ebp+var_10]
.text:00007C57                 add     ecx, 54h ; 'T'
.text:00007C5A                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00007C5F                 mov     byte ptr [ebp+var_4], 0
.text:00007C63                 mov     ecx, [ebp+var_10]
.text:00007C66                 add     ecx, 48h ; 'H'  ; this
.text:00007C69                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00007C6E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007C75                 mov     ecx, [ebp+var_10] ; this
.text:00007C78                 call    ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text:00007C7D                 mov     ecx, [ebp+var_C]
.text:00007C80                 mov     large fs:0, ecx
.text:00007C87                 pop     ecx
.text:00007C88                 add     esp, 10h
.text:00007C8B                 cmp     ebp, esp
.text:00007C8D                 call    __RTC_CheckEsp
.text:00007C92                 mov     esp, ebp
.text:00007C94                 pop     ebp
.text:00007C95                 retn
.text:00007C95 ??1CItem@NZip@NArchive@@QAE@XZ endp
.text:00007C95
.text:00007C95 ; ---------------------------------------------------------------------------
.text:00007C96                 align 4
.text:00007C96 _text           ends
.text:00007C96
.text$x:00007C98 ; ===========================================================================
.text$x:00007C98
.text$x:00007C98 ; Segment type: Pure code
.text$x:00007C98 ; Segment permissions: Read/Execute
.text$x:00007C98 _text$x         segment para public 'CODE' use32
.text$x:00007C98                 assume cs:_text$x
.text$x:00007C98                 ;org 7C98h
.text$x:00007C98 ; COMDAT (pick associative to section at 7C20)
.text$x:00007C98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007C98
.text$x:00007C98 ; =============== S U B R O U T I N E =======================================
.text$x:00007C98
.text$x:00007C98
.text$x:00007C98 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00007C98                                         ; DATA XREF: .xdata$x:00007CCCo
.text$x:00007C98                 mov     ecx, [ebp-10h]  ; this
.text$x:00007C9B                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:00007C9B __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00007C9B
.text$x:00007CA0
.text$x:00007CA0 ; =============== S U B R O U T I N E =======================================
.text$x:00007CA0
.text$x:00007CA0
.text$x:00007CA0 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00007CA0                                         ; DATA XREF: .xdata$x:00007CD4o
.text$x:00007CA0                 mov     ecx, [ebp-10h]
.text$x:00007CA3                 add     ecx, 48h ; 'H'  ; this
.text$x:00007CA6                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:00007CA6 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00007CA6
.text$x:00007CAB
.text$x:00007CAB ; =============== S U B R O U T I N E =======================================
.text$x:00007CAB
.text$x:00007CAB
.text$x:00007CAB __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00007CAB                                         ; DATA XREF: NArchive::NZip::CItem::~CItem(void)+5o
.text$x:00007CAB
.text$x:00007CAB arg_4           = dword ptr  8
.text$x:00007CAB
.text$x:00007CAB                 mov     edx, [esp+arg_4]
.text$x:00007CAF                 lea     eax, [edx+0Ch]
.text$x:00007CB2                 mov     ecx, [edx-8]
.text$x:00007CB5                 xor     ecx, eax
.text$x:00007CB7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007CBC                 mov     eax, offset __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
.text$x:00007CC1                 jmp     ___CxxFrameHandler3
.text$x:00007CC1 __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ endp
.text$x:00007CC1
.text$x:00007CC1 ; ---------------------------------------------------------------------------
.text$x:00007CC6                 align 4
.text$x:00007CC6 _text$x         ends
.text$x:00007CC6
.xdata$x:00007CC8 ; ===========================================================================
.xdata$x:00007CC8
.xdata$x:00007CC8 ; Segment type: Pure data
.xdata$x:00007CC8 ; Segment permissions: Read
.xdata$x:00007CC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007CC8                 assume cs:_xdata$x
.xdata$x:00007CC8                 ;org 7CC8h
.xdata$x:00007CC8 ; COMDAT (pick associative to section at 7C20)
.xdata$x:00007CC8 __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00007CC8                                         ; DATA XREF: .xdata$x:00007CE0o
.xdata$x:00007CC9                 db 0FFh
.xdata$x:00007CCA                 db 0FFh
.xdata$x:00007CCB                 db 0FFh
.xdata$x:00007CCC                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00007CD0                 db    0
.xdata$x:00007CD1                 db    0
.xdata$x:00007CD2                 db    0
.xdata$x:00007CD3                 db    0
.xdata$x:00007CD4                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
.xdata$x:00007CD8 __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00007CD8                                         ; DATA XREF: __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00007CD9                 db    5
.xdata$x:00007CDA                 db  93h ; ô
.xdata$x:00007CDB                 db  19h
.xdata$x:00007CDC                 db    2
.xdata$x:00007CDD                 db    0
.xdata$x:00007CDE                 db    0
.xdata$x:00007CDF                 db    0
.xdata$x:00007CE0                 dd offset __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
.xdata$x:00007CE4                 db    0
.xdata$x:00007CE5                 db    0
.xdata$x:00007CE6                 db    0
.xdata$x:00007CE7                 db    0
.xdata$x:00007CE8                 db    0
.xdata$x:00007CE9                 db    0
.xdata$x:00007CEA                 db    0
.xdata$x:00007CEB                 db    0
.xdata$x:00007CEC                 db    0
.xdata$x:00007CED                 db    0
.xdata$x:00007CEE                 db    0
.xdata$x:00007CEF                 db    0
.xdata$x:00007CF0                 db    0
.xdata$x:00007CF1                 db    0
.xdata$x:00007CF2                 db    0
.xdata$x:00007CF3                 db    0
.xdata$x:00007CF4                 db    0
.xdata$x:00007CF5                 db    0
.xdata$x:00007CF6                 db    0
.xdata$x:00007CF7                 db    0
.xdata$x:00007CF8                 db    1
.xdata$x:00007CF9                 db    0
.xdata$x:00007CFA                 db    0
.xdata$x:00007CFB                 db    0
.xdata$x:00007CFB _xdata$x        ends
.xdata$x:00007CFB
.text:00007CFC ; ===========================================================================
.text:00007CFC
.text:00007CFC ; Segment type: Pure code
.text:00007CFC ; Segment permissions: Read/Execute
.text:00007CFC _text           segment para public 'CODE' use32
.text:00007CFC                 assume cs:_text
.text:00007CFC                 ;org 7CFCh
.text:00007CFC ; COMDAT (pick any)
.text:00007CFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007CFC
.text:00007CFC ; =============== S U B R O U T I N E =======================================
.text:00007CFC
.text:00007CFC ; Attributes: bp-based frame
.text:00007CFC
.text:00007CFC ; _DWORD __thiscall NArchive::NZip::CItemOut::~CItemOut(NArchive::NZip::CItemOut *__hidden this)
.text:00007CFC                 public ??1CItemOut@NZip@NArchive@@QAE@XZ
.text:00007CFC ??1CItemOut@NZip@NArchive@@QAE@XZ proc near
.text:00007CFC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D2Bp
.text:00007CFC                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D92p ...
.text:00007CFC
.text:00007CFC var_4           = dword ptr -4
.text:00007CFC
.text:00007CFC                 push    ebp
.text:00007CFD                 mov     ebp, esp
.text:00007CFF                 push    ecx
.text:00007D00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D07                 mov     [ebp+var_4], ecx
.text:00007D0A                 mov     ecx, [ebp+var_4] ; this
.text:00007D0D                 call    ??1CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::~CItem(void)
.text:00007D12                 add     esp, 4
.text:00007D15                 cmp     ebp, esp
.text:00007D17                 call    __RTC_CheckEsp
.text:00007D1C                 mov     esp, ebp
.text:00007D1E                 pop     ebp
.text:00007D1F                 retn
.text:00007D1F ??1CItemOut@NZip@NArchive@@QAE@XZ endp
.text:00007D1F
.text:00007D1F _text           ends
.text:00007D1F
.text:00007D20 ; ===========================================================================
.text:00007D20
.text:00007D20 ; Segment type: Pure code
.text:00007D20 ; Segment permissions: Read/Execute
.text:00007D20 _text           segment para public 'CODE' use32
.text:00007D20                 assume cs:_text
.text:00007D20                 ;org 7D20h
.text:00007D20 ; COMDAT (pick any)
.text:00007D20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007D20
.text:00007D20 ; =============== S U B R O U T I N E =======================================
.text:00007D20
.text:00007D20 ; Attributes: bp-based frame
.text:00007D20
.text:00007D20 ; public: class NArchive::NZip::CItemEx & __thiscall NArchive::NZip::CItemEx::operator=(class NArchive::NZip::CItemEx const &)
.text:00007D20                 public ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z
.text:00007D20 ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z proc near
.text:00007D20                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D62p
.text:00007D20                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+15DAp ...
.text:00007D20
.text:00007D20 var_4           = dword ptr -4
.text:00007D20 arg_0           = dword ptr  8
.text:00007D20
.text:00007D20                 push    ebp
.text:00007D21                 mov     ebp, esp
.text:00007D23                 push    ecx
.text:00007D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D2B                 mov     [ebp+var_4], ecx
.text:00007D2E                 mov     eax, [ebp+arg_0]
.text:00007D31                 push    eax
.text:00007D32                 mov     ecx, [ebp+var_4]
.text:00007D35                 call    ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)
.text:00007D3A                 mov     ecx, [ebp+var_4]
.text:00007D3D                 mov     edx, [ebp+arg_0]
.text:00007D40                 mov     eax, [edx+60h]
.text:00007D43                 mov     [ecx+60h], eax
.text:00007D46                 mov     eax, [ebp+var_4]
.text:00007D49                 add     esp, 4
.text:00007D4C                 cmp     ebp, esp
.text:00007D4E                 call    __RTC_CheckEsp
.text:00007D53                 mov     esp, ebp
.text:00007D55                 pop     ebp
.text:00007D56                 retn    4
.text:00007D56 ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z endp
.text:00007D56
.text:00007D56 ; ---------------------------------------------------------------------------
.text:00007D59                 align 4
.text:00007D59 _text           ends
.text:00007D59
.text:00007D5C ; ===========================================================================
.text:00007D5C
.text:00007D5C ; Segment type: Pure code
.text:00007D5C ; Segment permissions: Read/Execute
.text:00007D5C _text           segment para public 'CODE' use32
.text:00007D5C                 assume cs:_text
.text:00007D5C                 ;org 7D5Ch
.text:00007D5C ; COMDAT (pick any)
.text:00007D5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007D5C
.text:00007D5C ; =============== S U B R O U T I N E =======================================
.text:00007D5C
.text:00007D5C ; Attributes: bp-based frame
.text:00007D5C
.text:00007D5C ; public: class NArchive::NZip::CItem & __thiscall NArchive::NZip::CItem::operator=(class NArchive::NZip::CItem const &)
.text:00007D5C                 public ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
.text:00007D5C ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z proc near
.text:00007D5C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+E63p
.text:00007D5C                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+16DBp ...
.text:00007D5C
.text:00007D5C var_4           = dword ptr -4
.text:00007D5C arg_0           = dword ptr  8
.text:00007D5C
.text:00007D5C                 push    ebp
.text:00007D5D                 mov     ebp, esp
.text:00007D5F                 push    ecx
.text:00007D60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D67                 mov     [ebp+var_4], ecx
.text:00007D6A                 mov     eax, [ebp+arg_0]
.text:00007D6D                 push    eax
.text:00007D6E                 mov     ecx, [ebp+var_4]
.text:00007D71                 call    ??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CLocalItem::operator=(NArchive::NZip::CLocalItem const &)
.text:00007D76                 mov     ecx, [ebp+arg_0]
.text:00007D79                 mov     dx, [ecx+38h]
.text:00007D7D                 mov     eax, [ebp+var_4]
.text:00007D80                 mov     [eax+38h], dx
.text:00007D84                 mov     ecx, [ebp+var_4]
.text:00007D87                 mov     edx, [ebp+arg_0]
.text:00007D8A                 mov     ax, [edx+3Ah]
.text:00007D8E                 mov     [ecx+3Ah], ax
.text:00007D92                 mov     ecx, [ebp+var_4]
.text:00007D95                 mov     edx, [ebp+arg_0]
.text:00007D98                 mov     eax, [edx+3Ch]
.text:00007D9B                 mov     [ecx+3Ch], eax
.text:00007D9E                 mov     ecx, [ebp+var_4]
.text:00007DA1                 mov     edx, [ebp+arg_0]
.text:00007DA4                 mov     eax, [edx+40h]
.text:00007DA7                 mov     [ecx+40h], eax
.text:00007DAA                 mov     edx, [edx+44h]
.text:00007DAD                 mov     [ecx+44h], edx
.text:00007DB0                 mov     eax, [ebp+arg_0]
.text:00007DB3                 add     eax, 48h ; 'H'
.text:00007DB6                 push    eax
.text:00007DB7                 mov     ecx, [ebp+var_4]
.text:00007DBA                 add     ecx, 48h ; 'H'
.text:00007DBD                 call    ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)
.text:00007DC2                 mov     ecx, [ebp+arg_0]
.text:00007DC5                 add     ecx, 54h ; 'T'
.text:00007DC8                 push    ecx
.text:00007DC9                 mov     ecx, [ebp+var_4]
.text:00007DCC                 add     ecx, 54h ; 'T'
.text:00007DCF                 call    ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z ; CBuffer<uchar>::operator=(CBuffer<uchar> const &)
.text:00007DD4                 mov     edx, [ebp+var_4]
.text:00007DD7                 mov     eax, [ebp+arg_0]
.text:00007DDA                 mov     cl, [eax+5Ch]
.text:00007DDD                 mov     [edx+5Ch], cl
.text:00007DE0                 mov     edx, [ebp+var_4]
.text:00007DE3                 mov     eax, [ebp+arg_0]
.text:00007DE6                 mov     cl, [eax+5Dh]
.text:00007DE9                 mov     [edx+5Dh], cl
.text:00007DEC                 mov     eax, [ebp+var_4]
.text:00007DEF                 add     esp, 4
.text:00007DF2                 cmp     ebp, esp
.text:00007DF4                 call    __RTC_CheckEsp
.text:00007DF9                 mov     esp, ebp
.text:00007DFB                 pop     ebp
.text:00007DFC                 retn    4
.text:00007DFC ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z endp
.text:00007DFC
.text:00007DFC ; ---------------------------------------------------------------------------
.text:00007DFF                 align 10h
.text:00007DFF _text           ends
.text:00007DFF
.text:00007E00 ; ===========================================================================
.text:00007E00
.text:00007E00 ; Segment type: Pure code
.text:00007E00 ; Segment permissions: Read/Execute
.text:00007E00 _text           segment para public 'CODE' use32
.text:00007E00                 assume cs:_text
.text:00007E00                 ;org 7E00h
.text:00007E00 ; COMDAT (pick any)
.text:00007E00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007E00
.text:00007E00 ; =============== S U B R O U T I N E =======================================
.text:00007E00
.text:00007E00 ; Attributes: bp-based frame
.text:00007E00
.text:00007E00 ; public: class NArchive::NZip::CLocalItem & __thiscall NArchive::NZip::CLocalItem::operator=(class NArchive::NZip::CLocalItem const &)
.text:00007E00                 public ??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
.text:00007E00 ??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z proc near
.text:00007E00                                         ; CODE XREF: NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)+15p
.text:00007E00
.text:00007E00 var_4           = dword ptr -4
.text:00007E00 arg_0           = dword ptr  8
.text:00007E00
.text:00007E00                 push    ebp
.text:00007E01                 mov     ebp, esp
.text:00007E03                 push    ecx
.text:00007E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E0B                 mov     [ebp+var_4], ecx
.text:00007E0E                 mov     eax, [ebp+var_4]
.text:00007E11                 mov     ecx, [ebp+arg_0]
.text:00007E14                 mov     dx, [ecx]
.text:00007E17                 mov     [eax], dx
.text:00007E1A                 mov     eax, [ebp+var_4]
.text:00007E1D                 mov     ecx, [ebp+arg_0]
.text:00007E20                 mov     dx, [ecx+2]
.text:00007E24                 mov     [eax+2], dx
.text:00007E28                 mov     eax, [ebp+arg_0]
.text:00007E2B                 mov     cx, [eax+4]
.text:00007E2F                 mov     edx, [ebp+var_4]
.text:00007E32                 mov     [edx+4], cx
.text:00007E36                 mov     eax, [ebp+var_4]
.text:00007E39                 mov     ecx, [ebp+arg_0]
.text:00007E3C                 mov     edx, [ecx+8]
.text:00007E3F                 mov     [eax+8], edx
.text:00007E42                 mov     ecx, [ecx+0Ch]
.text:00007E45                 mov     [eax+0Ch], ecx
.text:00007E48                 mov     edx, [ebp+var_4]
.text:00007E4B                 mov     eax, [ebp+arg_0]
.text:00007E4E                 mov     ecx, [eax+10h]
.text:00007E51                 mov     [edx+10h], ecx
.text:00007E54                 mov     eax, [eax+14h]
.text:00007E57                 mov     [edx+14h], eax
.text:00007E5A                 mov     ecx, [ebp+var_4]
.text:00007E5D                 mov     edx, [ebp+arg_0]
.text:00007E60                 mov     eax, [edx+18h]
.text:00007E63                 mov     [ecx+18h], eax
.text:00007E66                 mov     ecx, [ebp+var_4]
.text:00007E69                 mov     edx, [ebp+arg_0]
.text:00007E6C                 mov     eax, [edx+1Ch]
.text:00007E6F                 mov     [ecx+1Ch], eax
.text:00007E72                 mov     ecx, [ebp+arg_0]
.text:00007E75                 add     ecx, 20h ; ' '
.text:00007E78                 push    ecx
.text:00007E79                 mov     ecx, [ebp+var_4]
.text:00007E7C                 add     ecx, 20h ; ' '
.text:00007E7F                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00007E84                 mov     edx, [ebp+arg_0]
.text:00007E87                 add     edx, 2Ch ; ','
.text:00007E8A                 push    edx
.text:00007E8B                 mov     ecx, [ebp+var_4]
.text:00007E8E                 add     ecx, 2Ch ; ','
.text:00007E91                 call    ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)
.text:00007E96                 mov     eax, [ebp+var_4]
.text:00007E99                 add     esp, 4
.text:00007E9C                 cmp     ebp, esp
.text:00007E9E                 call    __RTC_CheckEsp
.text:00007EA3                 mov     esp, ebp
.text:00007EA5                 pop     ebp
.text:00007EA6                 retn    4
.text:00007EA6 ??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z endp
.text:00007EA6
.text:00007EA6 ; ---------------------------------------------------------------------------
.text:00007EA9                 align 4
.text:00007EA9 _text           ends
.text:00007EA9
.text:00007EAC ; ===========================================================================
.text:00007EAC
.text:00007EAC ; Segment type: Pure code
.text:00007EAC ; Segment permissions: Read/Execute
.text:00007EAC _text           segment para public 'CODE' use32
.text:00007EAC                 assume cs:_text
.text:00007EAC                 ;org 7EACh
.text:00007EAC ; COMDAT (pick any)
.text:00007EAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007EAC
.text:00007EAC ; =============== S U B R O U T I N E =======================================
.text:00007EAC
.text:00007EAC ; Attributes: bp-based frame
.text:00007EAC
.text:00007EAC ; public: struct NArchive::NZip::CExtraBlock & __thiscall NArchive::NZip::CExtraBlock::operator=(struct NArchive::NZip::CExtraBlock const &)
.text:00007EAC                 public ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
.text:00007EAC ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00007EAC                                         ; CODE XREF: NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)+61p
.text:00007EAC                                         ; NArchive::NZip::CLocalItem::operator=(NArchive::NZip::CLocalItem const &)+91p
.text:00007EAC
.text:00007EAC var_4           = dword ptr -4
.text:00007EAC arg_0           = dword ptr  8
.text:00007EAC
.text:00007EAC                 push    ebp
.text:00007EAD                 mov     ebp, esp
.text:00007EAF                 push    ecx
.text:00007EB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007EB7                 mov     [ebp+var_4], ecx
.text:00007EBA                 mov     eax, [ebp+arg_0]
.text:00007EBD                 push    eax
.text:00007EBE                 mov     ecx, [ebp+var_4]
.text:00007EC1                 call    ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)
.text:00007EC6                 mov     eax, [ebp+var_4]
.text:00007EC9                 add     esp, 4
.text:00007ECC                 cmp     ebp, esp
.text:00007ECE                 call    __RTC_CheckEsp
.text:00007ED3                 mov     esp, ebp
.text:00007ED5                 pop     ebp
.text:00007ED6                 retn    4
.text:00007ED6 ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z endp
.text:00007ED6
.text:00007ED6 ; ---------------------------------------------------------------------------
.text:00007ED9                 align 4
.text:00007ED9 _text           ends
.text:00007ED9
.text:00007EDC ; ===========================================================================
.text:00007EDC
.text:00007EDC ; Segment type: Pure code
.text:00007EDC ; Segment permissions: Read/Execute
.text:00007EDC _text           segment para public 'CODE' use32
.text:00007EDC                 assume cs:_text
.text:00007EDC                 ;org 7EDCh
.text:00007EDC ; COMDAT (pick any)
.text:00007EDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007EDC
.text:00007EDC ; =============== S U B R O U T I N E =======================================
.text:00007EDC
.text:00007EDC ; Attributes: bp-based frame
.text:00007EDC
.text:00007EDC ; _DWORD __thiscall NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx *this, const struct NArchive::NZip::CItemEx *)
.text:00007EDC                 public ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
.text:00007EDC ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:00007EDC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+12Fp
.text:00007EDC
.text:00007EDC var_4           = dword ptr -4
.text:00007EDC arg_0           = dword ptr  8
.text:00007EDC
.text:00007EDC                 push    ebp
.text:00007EDD                 mov     ebp, esp
.text:00007EDF                 push    ecx
.text:00007EE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007EE7                 mov     [ebp+var_4], ecx
.text:00007EEA                 mov     eax, [ebp+arg_0]
.text:00007EED                 push    eax             ; struct NArchive::NZip::CItem *
.text:00007EEE                 mov     ecx, [ebp+var_4] ; this
.text:00007EF1                 call    ??0CItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)
.text:00007EF6                 mov     ecx, [ebp+var_4]
.text:00007EF9                 mov     edx, [ebp+arg_0]
.text:00007EFC                 mov     eax, [edx+60h]
.text:00007EFF                 mov     [ecx+60h], eax
.text:00007F02                 mov     eax, [ebp+var_4]
.text:00007F05                 add     esp, 4
.text:00007F08                 cmp     ebp, esp
.text:00007F0A                 call    __RTC_CheckEsp
.text:00007F0F                 mov     esp, ebp
.text:00007F11                 pop     ebp
.text:00007F12                 retn    4
.text:00007F12 ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z endp
.text:00007F12
.text:00007F12 ; ---------------------------------------------------------------------------
.text:00007F15                 align 4
.text:00007F15 _text           ends
.text:00007F15
.text:00007F18 ; ===========================================================================
.text:00007F18
.text:00007F18 ; Segment type: Pure code
.text:00007F18 ; Segment permissions: Read/Execute
.text:00007F18 _text           segment para public 'CODE' use32
.text:00007F18                 assume cs:_text
.text:00007F18                 ;org 7F18h
.text:00007F18 ; COMDAT (pick any)
.text:00007F18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007F18
.text:00007F18 ; =============== S U B R O U T I N E =======================================
.text:00007F18
.text:00007F18 ; Attributes: bp-based frame
.text:00007F18
.text:00007F18 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:00007F18                 public ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00007F18 ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text:00007F18                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+550p
.text:00007F18                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+749p ...
.text:00007F18
.text:00007F18 var_10          = dword ptr -10h
.text:00007F18 var_C           = dword ptr -0Ch
.text:00007F18 var_4           = dword ptr -4
.text:00007F18
.text:00007F18                 push    ebp
.text:00007F19                 mov     ebp, esp
.text:00007F1B                 push    0FFFFFFFFh
.text:00007F1D                 push    offset __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00007F22                 mov     eax, large fs:0
.text:00007F28                 push    eax
.text:00007F29                 push    ecx
.text:00007F2A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007F31                 mov     eax, dword ptr ds:___security_cookie
.text:00007F36                 xor     eax, ebp
.text:00007F38                 push    eax
.text:00007F39                 lea     eax, [ebp+var_C]
.text:00007F3C                 mov     large fs:0, eax
.text:00007F42                 mov     [ebp+var_10], ecx
.text:00007F45                 mov     [ebp+var_4], 1
.text:00007F4C                 mov     ecx, [ebp+var_10]
.text:00007F4F                 add     ecx, 28h ; '('  ; this
.text:00007F52                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00007F57                 mov     byte ptr [ebp+var_4], 0
.text:00007F5B                 mov     ecx, [ebp+var_10]
.text:00007F5E                 add     ecx, 18h
.text:00007F61                 call    ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text:00007F66                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007F6D                 mov     ecx, [ebp+var_10] ; this
.text:00007F70                 call    ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text:00007F75                 mov     ecx, [ebp+var_C]
.text:00007F78                 mov     large fs:0, ecx
.text:00007F7F                 pop     ecx
.text:00007F80                 add     esp, 10h
.text:00007F83                 cmp     ebp, esp
.text:00007F85                 call    __RTC_CheckEsp
.text:00007F8A                 mov     esp, ebp
.text:00007F8C                 pop     ebp
.text:00007F8D                 retn
.text:00007F8D ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text:00007F8D
.text:00007F8D ; ---------------------------------------------------------------------------
.text:00007F8E                 align 10h
.text:00007F8E _text           ends
.text:00007F8E
.text$x:00007F90 ; ===========================================================================
.text$x:00007F90
.text$x:00007F90 ; Segment type: Pure code
.text$x:00007F90 ; Segment permissions: Read/Execute
.text$x:00007F90 _text$x         segment para public 'CODE' use32
.text$x:00007F90                 assume cs:_text$x
.text$x:00007F90                 ;org 7F90h
.text$x:00007F90 ; COMDAT (pick associative to section at 7F18)
.text$x:00007F90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007F90
.text$x:00007F90 ; =============== S U B R O U T I N E =======================================
.text$x:00007F90
.text$x:00007F90
.text$x:00007F90 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00007F90                                         ; DATA XREF: .xdata$x:00007FC4o
.text$x:00007F90                 mov     ecx, [ebp-10h]  ; this
.text$x:00007F93                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00007F93 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00007F93
.text$x:00007F98
.text$x:00007F98 ; =============== S U B R O U T I N E =======================================
.text$x:00007F98
.text$x:00007F98
.text$x:00007F98 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00007F98                                         ; DATA XREF: .xdata$x:00007FCCo
.text$x:00007F98                 mov     ecx, [ebp-10h]
.text$x:00007F9B                 add     ecx, 18h
.text$x:00007F9E                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:00007F9E __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00007F9E
.text$x:00007FA3
.text$x:00007FA3 ; =============== S U B R O U T I N E =======================================
.text$x:00007FA3
.text$x:00007FA3
.text$x:00007FA3 __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text$x:00007FA3                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:00007FA3
.text$x:00007FA3 arg_4           = dword ptr  8
.text$x:00007FA3
.text$x:00007FA3                 mov     edx, [esp+arg_4]
.text$x:00007FA7                 lea     eax, [edx+0Ch]
.text$x:00007FAA                 mov     ecx, [edx-8]
.text$x:00007FAD                 xor     ecx, eax
.text$x:00007FAF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007FB4                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text$x:00007FB9                 jmp     ___CxxFrameHandler3
.text$x:00007FB9 __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text$x:00007FB9
.text$x:00007FB9 ; ---------------------------------------------------------------------------
.text$x:00007FBE                 align 10h
.text$x:00007FBE _text$x         ends
.text$x:00007FBE
.xdata$x:00007FC0 ; ===========================================================================
.xdata$x:00007FC0
.xdata$x:00007FC0 ; Segment type: Pure data
.xdata$x:00007FC0 ; Segment permissions: Read
.xdata$x:00007FC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FC0                 assume cs:_xdata$x
.xdata$x:00007FC0                 ;org 7FC0h
.xdata$x:00007FC0 ; COMDAT (pick associative to section at 7F18)
.xdata$x:00007FC0 __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00007FC0                                         ; DATA XREF: .xdata$x:00007FD8o
.xdata$x:00007FC1                 db 0FFh
.xdata$x:00007FC2                 db 0FFh
.xdata$x:00007FC3                 db 0FFh
.xdata$x:00007FC4                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
.xdata$x:00007FC8                 db    0
.xdata$x:00007FC9                 db    0
.xdata$x:00007FCA                 db    0
.xdata$x:00007FCB                 db    0
.xdata$x:00007FCC                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
.xdata$x:00007FD0 __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00007FD0                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00007FD1                 db    5
.xdata$x:00007FD2                 db  93h ; ô
.xdata$x:00007FD3                 db  19h
.xdata$x:00007FD4                 db    2
.xdata$x:00007FD5                 db    0
.xdata$x:00007FD6                 db    0
.xdata$x:00007FD7                 db    0
.xdata$x:00007FD8                 dd offset __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.xdata$x:00007FDC                 db    0
.xdata$x:00007FDD                 db    0
.xdata$x:00007FDE                 db    0
.xdata$x:00007FDF                 db    0
.xdata$x:00007FE0                 db    0
.xdata$x:00007FE1                 db    0
.xdata$x:00007FE2                 db    0
.xdata$x:00007FE3                 db    0
.xdata$x:00007FE4                 db    0
.xdata$x:00007FE5                 db    0
.xdata$x:00007FE6                 db    0
.xdata$x:00007FE7                 db    0
.xdata$x:00007FE8                 db    0
.xdata$x:00007FE9                 db    0
.xdata$x:00007FEA                 db    0
.xdata$x:00007FEB                 db    0
.xdata$x:00007FEC                 db    0
.xdata$x:00007FED                 db    0
.xdata$x:00007FEE                 db    0
.xdata$x:00007FEF                 db    0
.xdata$x:00007FF0                 db    1
.xdata$x:00007FF1                 db    0
.xdata$x:00007FF2                 db    0
.xdata$x:00007FF3                 db    0
.xdata$x:00007FF3 _xdata$x        ends
.xdata$x:00007FF3
.text:00007FF4 ; ===========================================================================
.text:00007FF4
.text:00007FF4 ; Segment type: Pure code
.text:00007FF4 ; Segment permissions: Read/Execute
.text:00007FF4 _text           segment para public 'CODE' use32
.text:00007FF4                 assume cs:_text
.text:00007FF4                 ;org 7FF4h
.text:00007FF4 ; COMDAT (pick any)
.text:00007FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007FF4
.text:00007FF4 ; =============== S U B R O U T I N E =======================================
.text:00007FF4
.text:00007FF4 ; Attributes: bp-based frame
.text:00007FF4
.text:00007FF4 ; public: struct NArchive::NZip::CCompressionMethodMode & __thiscall NArchive::NZip::CCompressionMethodMode::operator=(struct NArchive::NZip::CCompressionMethodMode const &)
.text:00007FF4                 public ??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z
.text:00007FF4 ??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00007FF4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+25Ap
.text:00007FF4
.text:00007FF4 var_4           = dword ptr -4
.text:00007FF4 arg_0           = dword ptr  8
.text:00007FF4
.text:00007FF4                 push    ebp
.text:00007FF5                 mov     ebp, esp
.text:00007FF7                 push    ecx
.text:00007FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FFF                 mov     [ebp+var_4], ecx
.text:00008002                 mov     eax, [ebp+arg_0]
.text:00008005                 push    eax
.text:00008006                 mov     ecx, [ebp+var_4]
.text:00008009                 call    ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CBaseProps::operator=(NArchive::NZip::CBaseProps const &)
.text:0000800E                 mov     ecx, [ebp+arg_0]
.text:00008011                 add     ecx, 18h
.text:00008014                 push    ecx
.text:00008015                 mov     ecx, [ebp+var_4]
.text:00008018                 add     ecx, 18h
.text:0000801B                 call    ??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z ; CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)
.text:00008020                 mov     edx, [ebp+var_4]
.text:00008023                 mov     eax, [ebp+arg_0]
.text:00008026                 mov     cl, [eax+24h]
.text:00008029                 mov     [edx+24h], cl
.text:0000802C                 mov     edx, [ebp+arg_0]
.text:0000802F                 add     edx, 28h ; '('
.text:00008032                 push    edx
.text:00008033                 mov     ecx, [ebp+var_4]
.text:00008036                 add     ecx, 28h ; '('
.text:00008039                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:0000803E                 mov     eax, [ebp+var_4]
.text:00008041                 mov     ecx, [ebp+arg_0]
.text:00008044                 mov     edx, [ecx+38h]
.text:00008047                 mov     [eax+38h], edx
.text:0000804A                 mov     ecx, [ecx+3Ch]
.text:0000804D                 mov     [eax+3Ch], ecx
.text:00008050                 mov     edx, [ebp+var_4]
.text:00008053                 mov     eax, [ebp+arg_0]
.text:00008056                 mov     cl, [eax+40h]
.text:00008059                 mov     [edx+40h], cl
.text:0000805C                 mov     eax, [ebp+var_4]
.text:0000805F                 add     esp, 4
.text:00008062                 cmp     ebp, esp
.text:00008064                 call    __RTC_CheckEsp
.text:00008069                 mov     esp, ebp
.text:0000806B                 pop     ebp
.text:0000806C                 retn    4
.text:0000806C ??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z endp
.text:0000806C
.text:0000806C ; ---------------------------------------------------------------------------
.text:0000806F                 align 10h
.text:0000806F _text           ends
.text:0000806F
.text:00008070 ; ===========================================================================
.text:00008070
.text:00008070 ; Segment type: Pure code
.text:00008070 ; Segment permissions: Read/Execute
.text:00008070 _text           segment para public 'CODE' use32
.text:00008070                 assume cs:_text
.text:00008070                 ;org 8070h
.text:00008070 ; COMDAT (pick any)
.text:00008070                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008070
.text:00008070 ; =============== S U B R O U T I N E =======================================
.text:00008070
.text:00008070 ; Attributes: bp-based frame
.text:00008070
.text:00008070 ; _DWORD __thiscall NArchive::NZip::CMtProgressMixer::CMtProgressMixer(NArchive::NZip::CMtProgressMixer *__hidden this)
.text:00008070                 public ??0CMtProgressMixer@NZip@NArchive@@QAE@XZ
.text:00008070 ??0CMtProgressMixer@NZip@NArchive@@QAE@XZ proc near
.text:00008070                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+5B0p
.text:00008070
.text:00008070 var_4           = dword ptr -4
.text:00008070
.text:00008070                 push    ebp
.text:00008071                 mov     ebp, esp
.text:00008073                 push    ecx
.text:00008074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000807B                 mov     [ebp+var_4], ecx
.text:0000807E                 mov     ecx, [ebp+var_4] ; this
.text:00008081                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:00008086                 mov     ecx, [ebp+var_4]
.text:00008089                 add     ecx, 4          ; this
.text:0000808C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00008091                 mov     eax, [ebp+var_4]
.text:00008094                 mov     dword ptr [eax], offset ??_7CMtProgressMixer@NZip@NArchive@@6B@ ; const NArchive::NZip::CMtProgressMixer::`vftable'
.text:0000809A                 mov     ecx, [ebp+var_4]
.text:0000809D                 add     ecx, 0Ch
.text:000080A0                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:000080A5                 mov     eax, [ebp+var_4]
.text:000080A8                 add     esp, 4
.text:000080AB                 cmp     ebp, esp
.text:000080AD                 call    __RTC_CheckEsp
.text:000080B2                 mov     esp, ebp
.text:000080B4                 pop     ebp
.text:000080B5                 retn
.text:000080B5 ??0CMtProgressMixer@NZip@NArchive@@QAE@XZ endp
.text:000080B5
.text:000080B5 ; ---------------------------------------------------------------------------
.text:000080B6                 align 4
.text:000080B6 _text           ends
.text:000080B6
.rdata:000080B8 ; ===========================================================================
.rdata:000080B8
.rdata:000080B8 ; Segment type: Pure data
.rdata:000080B8 ; Segment permissions: Read
.rdata:000080B8 _rdata          segment dword public 'DATA' use32
.rdata:000080B8                 assume cs:_rdata
.rdata:000080B8                 ;org 80B8h
.rdata:000080B8 ; COMDAT (pick largest)
.rdata:000080B8                 dd offset ??_R4CMtProgressMixer@NZip@NArchive@@6B@ ; const NArchive::NZip::CMtProgressMixer::`RTTI Complete Object Locator'
.rdata:000080BC                 public ??_7CMtProgressMixer@NZip@NArchive@@6B@
.rdata:000080BC ; const NArchive::NZip::CMtProgressMixer::`vftable'
.rdata:000080BC ??_7CMtProgressMixer@NZip@NArchive@@6B@ dd offset ?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000080BC                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer::CMtProgressMixer(void)+24o
.rdata:000080BC                                         ; NArchive::NZip::CMtProgressMixer::QueryInterface(_GUID const &,void * *)
.rdata:000080C0                 dd offset ?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CMtProgressMixer::AddRef(void)
.rdata:000080C4                 dd offset ?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CMtProgressMixer::Release(void)
.rdata:000080C8                 dd offset ?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z ; NArchive::NZip::CMtProgressMixer::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:000080C8 _rdata          ends
.rdata:000080C8
.rdata$r:000080CC ; ===========================================================================
.rdata$r:000080CC
.rdata$r:000080CC ; Segment type: Pure data
.rdata$r:000080CC ; Segment permissions: Read
.rdata$r:000080CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000080CC                 assume cs:_rdata$r
.rdata$r:000080CC                 ;org 80CCh
.rdata$r:000080CC ; COMDAT (pick any)
.rdata$r:000080CC                 public ??_R4CMtProgressMixer@NZip@NArchive@@6B@
.rdata$r:000080CC ; const NArchive::NZip::CMtProgressMixer::`RTTI Complete Object Locator'
.rdata$r:000080CC ??_R4CMtProgressMixer@NZip@NArchive@@6B@ db    0
.rdata$r:000080CC                                         ; DATA XREF: .rdata:000080B8o
.rdata$r:000080CD                 db    0
.rdata$r:000080CE                 db    0
.rdata$r:000080CF                 db    0
.rdata$r:000080D0                 db    0
.rdata$r:000080D1                 db    0
.rdata$r:000080D2                 db    0
.rdata$r:000080D3                 db    0
.rdata$r:000080D4                 db    0
.rdata$r:000080D5                 db    0
.rdata$r:000080D6                 db    0
.rdata$r:000080D7                 db    0
.rdata$r:000080D8                 dd offset ??_R0?AVCMtProgressMixer@NZip@NArchive@@@8 ; NArchive::NZip::CMtProgressMixer `RTTI Type Descriptor'
.rdata$r:000080DC                 dd offset ??_R3CMtProgressMixer@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000080DC _rdata$r        ends
.rdata$r:000080DC
.data:000080E0 ; ===========================================================================
.data:000080E0
.data:000080E0 ; Segment type: Pure data
.data:000080E0 ; Segment permissions: Read/Write
.data:000080E0 _data           segment dword public 'DATA' use32
.data:000080E0                 assume cs:_data
.data:000080E0                 ;org 80E0h
.data:000080E0 ; COMDAT (pick any)
.data:000080E0                 public ??_R0?AVCMtProgressMixer@NZip@NArchive@@@8
.data:000080E0 ; class NArchive::NZip::CMtProgressMixer `RTTI Type Descriptor'
.data:000080E0 ??_R0?AVCMtProgressMixer@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000080E0                                         ; DATA XREF: .rdata$r:000080D8o
.data:000080E0                                         ; .rdata$r:NArchive::NZip::CMtProgressMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000080E0                                         ; const type_info::`vftable'
.data:000080E4                 align 8
.data:000080E8 a_?avcmtprogr_0 db '.?AVCMtProgressMixer@NZip@NArchive@@',0
.data:0000810D                 align 10h
.data:0000810D _data           ends
.data:0000810D
.rdata$r:00008110 ; ===========================================================================
.rdata$r:00008110
.rdata$r:00008110 ; Segment type: Pure data
.rdata$r:00008110 ; Segment permissions: Read
.rdata$r:00008110 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008110                 assume cs:_rdata$r
.rdata$r:00008110                 ;org 8110h
.rdata$r:00008110 ; COMDAT (pick any)
.rdata$r:00008110                 public ??_R3CMtProgressMixer@NZip@NArchive@@8
.rdata$r:00008110 ; NArchive::NZip::CMtProgressMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008110 ??_R3CMtProgressMixer@NZip@NArchive@@8 db    0
.rdata$r:00008110                                         ; DATA XREF: .rdata$r:000080DCo
.rdata$r:00008110                                         ; .rdata$r:0000814Co
.rdata$r:00008111                 db    0
.rdata$r:00008112                 db    0
.rdata$r:00008113                 db    0
.rdata$r:00008114                 db    1
.rdata$r:00008115                 db    0
.rdata$r:00008116                 db    0
.rdata$r:00008117                 db    0
.rdata$r:00008118                 db    4
.rdata$r:00008119                 db    0
.rdata$r:0000811A                 db    0
.rdata$r:0000811B                 db    0
.rdata$r:0000811C                 dd offset ??_R2CMtProgressMixer@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Array'
.rdata$r:0000811C _rdata$r        ends
.rdata$r:0000811C
.rdata$r:00008120 ; ===========================================================================
.rdata$r:00008120
.rdata$r:00008120 ; Segment type: Pure data
.rdata$r:00008120 ; Segment permissions: Read
.rdata$r:00008120 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008120                 assume cs:_rdata$r
.rdata$r:00008120                 ;org 8120h
.rdata$r:00008120 ; COMDAT (pick any)
.rdata$r:00008120                 public ??_R2CMtProgressMixer@NZip@NArchive@@8
.rdata$r:00008120 ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Array'
.rdata$r:00008120 ??_R2CMtProgressMixer@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8
.rdata$r:00008120                                         ; DATA XREF: .rdata$r:0000811Co
.rdata$r:00008120                                         ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008124                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008128                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000812C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00008130                 db    0
.rdata$r:00008131                 align 4
.rdata$r:00008131 _rdata$r        ends
.rdata$r:00008131
.rdata$r:00008134 ; ===========================================================================
.rdata$r:00008134
.rdata$r:00008134 ; Segment type: Pure data
.rdata$r:00008134 ; Segment permissions: Read
.rdata$r:00008134 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008134                 assume cs:_rdata$r
.rdata$r:00008134                 ;org 8134h
.rdata$r:00008134 ; COMDAT (pick any)
.rdata$r:00008134                 public ??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8
.rdata$r:00008134 ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008134 ??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8 dd offset ??_R0?AVCMtProgressMixer@NZip@NArchive@@@8
.rdata$r:00008134                                         ; DATA XREF: .rdata$r:NArchive::NZip::CMtProgressMixer::`RTTI Base Class Array'o
.rdata$r:00008134                                         ; NArchive::NZip::CMtProgressMixer `RTTI Type Descriptor'
.rdata$r:00008138                 db    3
.rdata$r:00008139                 db    0
.rdata$r:0000813A                 db    0
.rdata$r:0000813B                 db    0
.rdata$r:0000813C                 db    0
.rdata$r:0000813D                 db    0
.rdata$r:0000813E                 db    0
.rdata$r:0000813F                 db    0
.rdata$r:00008140                 db 0FFh
.rdata$r:00008141                 db 0FFh
.rdata$r:00008142                 db 0FFh
.rdata$r:00008143                 db 0FFh
.rdata$r:00008144                 db    0
.rdata$r:00008145                 db    0
.rdata$r:00008146                 db    0
.rdata$r:00008147                 db    0
.rdata$r:00008148                 db  40h ; @
.rdata$r:00008149                 db    0
.rdata$r:0000814A                 db    0
.rdata$r:0000814B                 db    0
.rdata$r:0000814C                 dd offset ??_R3CMtProgressMixer@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000814C _rdata$r        ends
.rdata$r:0000814C
.text:00008150 ; ===========================================================================
.text:00008150
.text:00008150 ; Segment type: Pure code
.text:00008150 ; Segment permissions: Read/Execute
.text:00008150 _text           segment para public 'CODE' use32
.text:00008150                 assume cs:_text
.text:00008150                 ;org 8150h
.text:00008150 ; COMDAT (pick any)
.text:00008150                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008150
.text:00008150 ; =============== S U B R O U T I N E =======================================
.text:00008150
.text:00008150 ; Attributes: bp-based frame
.text:00008150
.text:00008150 ; __int32 __stdcall NArchive::NZip::CMtProgressMixer::QueryInterface(NArchive::NZip::CMtProgressMixer *this, const struct _GUID *Buf1, void **)
.text:00008150                 public ?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00008150 ?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00008150                                         ; DATA XREF: .rdata:const NArchive::NZip::CMtProgressMixer::`vftable'o
.text:00008150
.text:00008150 this            = dword ptr  8
.text:00008150 Buf1            = dword ptr  0Ch
.text:00008150 arg_8           = dword ptr  10h
.text:00008150
.text:00008150                 push    ebp
.text:00008151                 mov     ebp, esp
.text:00008153                 mov     eax, [ebp+arg_8]
.text:00008156                 mov     dword ptr [eax], 0
.text:0000815C                 push    offset _IID_IUnknown ; Buf2
.text:00008161                 mov     ecx, [ebp+Buf1]
.text:00008164                 push    ecx             ; Buf1
.text:00008165                 call    ___@8           ; __(x,x)
.text:0000816A                 test    eax, eax
.text:0000816C                 jz      short loc_8178
.text:0000816E                 mov     edx, [ebp+arg_8]
.text:00008171                 mov     eax, [ebp+this]
.text:00008174                 mov     [edx], eax
.text:00008176                 jmp     short loc_817F
.text:00008178 ; ---------------------------------------------------------------------------
.text:00008178
.text:00008178 loc_8178:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::QueryInterface(_GUID const &,void * *)+1Cj
.text:00008178                 mov     eax, 80004002h
.text:0000817D                 jmp     short loc_8190
.text:0000817F ; ---------------------------------------------------------------------------
.text:0000817F
.text:0000817F loc_817F:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::QueryInterface(_GUID const &,void * *)+26j
.text:0000817F                 mov     ecx, [ebp+this]
.text:00008182                 mov     edx, [ecx+4]
.text:00008185                 add     edx, 1
.text:00008188                 mov     eax, [ebp+this]
.text:0000818B                 mov     [eax+4], edx
.text:0000818E                 xor     eax, eax
.text:00008190
.text:00008190 loc_8190:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::QueryInterface(_GUID const &,void * *)+2Dj
.text:00008190                 cmp     ebp, esp
.text:00008192                 call    __RTC_CheckEsp
.text:00008197                 pop     ebp
.text:00008198                 retn    0Ch
.text:00008198 ?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00008198
.text:00008198 ; ---------------------------------------------------------------------------
.text:0000819B                 align 4
.text:0000819B _text           ends
.text:0000819B
.text:0000819C ; ===========================================================================
.text:0000819C
.text:0000819C ; Segment type: Pure code
.text:0000819C ; Segment permissions: Read/Execute
.text:0000819C _text           segment para public 'CODE' use32
.text:0000819C                 assume cs:_text
.text:0000819C                 ;org 819Ch
.text:0000819C ; COMDAT (pick any)
.text:0000819C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000819C
.text:0000819C ; =============== S U B R O U T I N E =======================================
.text:0000819C
.text:0000819C ; Attributes: bp-based frame
.text:0000819C
.text:0000819C ; unsigned __int32 __stdcall NArchive::NZip::CMtProgressMixer::AddRef(NArchive::NZip::CMtProgressMixer *this)
.text:0000819C                 public ?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ
.text:0000819C ?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ proc near
.text:0000819C                                         ; DATA XREF: .rdata:000080C0o
.text:0000819C
.text:0000819C var_4           = dword ptr -4
.text:0000819C this            = dword ptr  8
.text:0000819C
.text:0000819C                 push    ebp
.text:0000819D                 mov     ebp, esp
.text:0000819F                 push    ecx
.text:000081A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081A7                 mov     eax, [ebp+this]
.text:000081AA                 mov     ecx, [eax+4]
.text:000081AD                 add     ecx, 1
.text:000081B0                 mov     [ebp+var_4], ecx
.text:000081B3                 mov     edx, [ebp+this]
.text:000081B6                 mov     eax, [ebp+var_4]
.text:000081B9                 mov     [edx+4], eax
.text:000081BC                 mov     eax, [ebp+var_4]
.text:000081BF                 mov     esp, ebp
.text:000081C1                 pop     ebp
.text:000081C2                 retn    4
.text:000081C2 ?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ endp
.text:000081C2
.text:000081C2 ; ---------------------------------------------------------------------------
.text:000081C5                 align 4
.text:000081C5 _text           ends
.text:000081C5
.text:000081C8 ; ===========================================================================
.text:000081C8
.text:000081C8 ; Segment type: Pure code
.text:000081C8 ; Segment permissions: Read/Execute
.text:000081C8 _text           segment para public 'CODE' use32
.text:000081C8                 assume cs:_text
.text:000081C8                 ;org 81C8h
.text:000081C8 ; COMDAT (pick any)
.text:000081C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081C8
.text:000081C8 ; =============== S U B R O U T I N E =======================================
.text:000081C8
.text:000081C8 ; Attributes: bp-based frame
.text:000081C8
.text:000081C8 ; unsigned __int32 __stdcall NArchive::NZip::CMtProgressMixer::Release(NArchive::NZip::CMtProgressMixer *this)
.text:000081C8                 public ?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ
.text:000081C8 ?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ proc near
.text:000081C8                                         ; DATA XREF: .rdata:000080C4o
.text:000081C8
.text:000081C8 var_10          = dword ptr -10h
.text:000081C8 var_C           = dword ptr -0Ch
.text:000081C8 var_8           = dword ptr -8
.text:000081C8 var_4           = dword ptr -4
.text:000081C8 this            = dword ptr  8
.text:000081C8
.text:000081C8                 push    ebp
.text:000081C9                 mov     ebp, esp
.text:000081CB                 sub     esp, 10h
.text:000081CE                 mov     eax, 0CCCCCCCCh
.text:000081D3                 mov     [ebp+var_10], eax
.text:000081D6                 mov     [ebp+var_C], eax
.text:000081D9                 mov     [ebp+var_8], eax
.text:000081DC                 mov     [ebp+var_4], eax
.text:000081DF                 mov     eax, [ebp+this]
.text:000081E2                 mov     ecx, [eax+4]
.text:000081E5                 sub     ecx, 1
.text:000081E8                 mov     [ebp+var_C], ecx
.text:000081EB                 mov     edx, [ebp+this]
.text:000081EE                 mov     eax, [ebp+var_C]
.text:000081F1                 mov     [edx+4], eax
.text:000081F4                 cmp     [ebp+var_C], 0
.text:000081F8                 jz      short loc_8202
.text:000081FA                 mov     ecx, [ebp+this]
.text:000081FD                 mov     eax, [ecx+4]
.text:00008200                 jmp     short loc_822C
.text:00008202 ; ---------------------------------------------------------------------------
.text:00008202
.text:00008202 loc_8202:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::Release(void)+30j
.text:00008202                 mov     edx, [ebp+this]
.text:00008205                 mov     [ebp+var_8], edx
.text:00008208                 mov     eax, [ebp+var_8]
.text:0000820B                 mov     [ebp+var_4], eax
.text:0000820E                 cmp     [ebp+var_4], 0
.text:00008212                 jz      short loc_8223
.text:00008214                 push    1
.text:00008216                 mov     ecx, [ebp+var_4]
.text:00008219                 call    ??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'(uint)
.text:0000821E                 mov     [ebp+var_10], eax
.text:00008221                 jmp     short loc_822A
.text:00008223 ; ---------------------------------------------------------------------------
.text:00008223
.text:00008223 loc_8223:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::Release(void)+4Aj
.text:00008223                 mov     [ebp+var_10], 0
.text:0000822A
.text:0000822A loc_822A:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::Release(void)+59j
.text:0000822A                 xor     eax, eax
.text:0000822C
.text:0000822C loc_822C:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::Release(void)+38j
.text:0000822C                 add     esp, 10h
.text:0000822F                 cmp     ebp, esp
.text:00008231                 call    __RTC_CheckEsp
.text:00008236                 mov     esp, ebp
.text:00008238                 pop     ebp
.text:00008239                 retn    4
.text:00008239 ?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ endp
.text:00008239
.text:00008239 _text           ends
.text:00008239
.text:0000823C ; ===========================================================================
.text:0000823C
.text:0000823C ; Segment type: Pure code
.text:0000823C ; Segment permissions: Read/Execute
.text:0000823C _text           segment para public 'CODE' use32
.text:0000823C                 assume cs:_text
.text:0000823C                 ;org 823Ch
.text:0000823C ; COMDAT (pick any)
.text:0000823C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000823C
.text:0000823C ; =============== S U B R O U T I N E =======================================
.text:0000823C
.text:0000823C ; Attributes: bp-based frame
.text:0000823C
.text:0000823C ; public: void * __thiscall NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'(unsigned int)
.text:0000823C                 public ??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z
.text:0000823C ??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000823C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer::Release(void)+51p
.text:0000823C
.text:0000823C var_4           = dword ptr -4
.text:0000823C arg_0           = dword ptr  8
.text:0000823C
.text:0000823C                 push    ebp
.text:0000823D                 mov     ebp, esp
.text:0000823F                 push    ecx
.text:00008240                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008247                 mov     [ebp+var_4], ecx
.text:0000824A                 mov     ecx, [ebp+var_4] ; this
.text:0000824D                 call    ??1CMtProgressMixer@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMtProgressMixer::~CMtProgressMixer(void)
.text:00008252                 mov     eax, [ebp+arg_0]
.text:00008255                 and     eax, 1
.text:00008258                 jz      short loc_8266
.text:0000825A                 mov     ecx, [ebp+var_4]
.text:0000825D                 push    ecx             ; void *
.text:0000825E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008263                 add     esp, 4
.text:00008266
.text:00008266 loc_8266:                               ; CODE XREF: NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'(uint)+1Cj
.text:00008266                 mov     eax, [ebp+var_4]
.text:00008269                 add     esp, 4
.text:0000826C                 cmp     ebp, esp
.text:0000826E                 call    __RTC_CheckEsp
.text:00008273                 mov     esp, ebp
.text:00008275                 pop     ebp
.text:00008276                 retn    4
.text:00008276 ??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z endp
.text:00008276
.text:00008276 ; ---------------------------------------------------------------------------
.text:00008279                 align 4
.text:00008279 _text           ends
.text:00008279
.text:0000827C ; ===========================================================================
.text:0000827C
.text:0000827C ; Segment type: Pure code
.text:0000827C ; Segment permissions: Read/Execute
.text:0000827C _text           segment para public 'CODE' use32
.text:0000827C                 assume cs:_text
.text:0000827C                 ;org 827Ch
.text:0000827C ; COMDAT (pick any)
.text:0000827C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000827C
.text:0000827C ; =============== S U B R O U T I N E =======================================
.text:0000827C
.text:0000827C ; Attributes: bp-based frame
.text:0000827C
.text:0000827C ; _DWORD __thiscall NArchive::NZip::CMtProgressMixer::~CMtProgressMixer(NArchive::NZip::CMtProgressMixer *__hidden this)
.text:0000827C                 public ??1CMtProgressMixer@NZip@NArchive@@QAE@XZ
.text:0000827C ??1CMtProgressMixer@NZip@NArchive@@QAE@XZ proc near
.text:0000827C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'(uint)+11p
.text:0000827C
.text:0000827C var_4           = dword ptr -4
.text:0000827C
.text:0000827C                 push    ebp
.text:0000827D                 mov     ebp, esp
.text:0000827F                 push    ecx
.text:00008280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008287                 mov     [ebp+var_4], ecx
.text:0000828A                 mov     ecx, [ebp+var_4]
.text:0000828D                 add     ecx, 0Ch
.text:00008290                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00008295                 add     esp, 4
.text:00008298                 cmp     ebp, esp
.text:0000829A                 call    __RTC_CheckEsp
.text:0000829F                 mov     esp, ebp
.text:000082A1                 pop     ebp
.text:000082A2                 retn
.text:000082A2 ??1CMtProgressMixer@NZip@NArchive@@QAE@XZ endp
.text:000082A2
.text:000082A2 ; ---------------------------------------------------------------------------
.text:000082A3                 align 4
.text:000082A3 _text           ends
.text:000082A3
.text:000082A4 ; ===========================================================================
.text:000082A4
.text:000082A4 ; Segment type: Pure code
.text:000082A4 ; Segment permissions: Read/Execute
.text:000082A4 _text           segment para public 'CODE' use32
.text:000082A4                 assume cs:_text
.text:000082A4                 ;org 82A4h
.text:000082A4 ; COMDAT (pick any)
.text:000082A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000082A4
.text:000082A4 ; =============== S U B R O U T I N E =======================================
.text:000082A4
.text:000082A4 ; Attributes: bp-based frame
.text:000082A4
.text:000082A4 ; public: __thiscall CMtCompressProgressMixer::CMtCompressProgressMixer(void)
.text:000082A4                 public ??0CMtCompressProgressMixer@@QAE@XZ
.text:000082A4 ??0CMtCompressProgressMixer@@QAE@XZ proc near
.text:000082A4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+610p
.text:000082A4
.text:000082A4 var_10          = dword ptr -10h
.text:000082A4 var_C           = dword ptr -0Ch
.text:000082A4 var_4           = dword ptr -4
.text:000082A4
.text:000082A4                 push    ebp
.text:000082A5                 mov     ebp, esp
.text:000082A7                 push    0FFFFFFFFh
.text:000082A9                 push    offset __ehhandler$??0CMtCompressProgressMixer@@QAE@XZ
.text:000082AE                 mov     eax, large fs:0
.text:000082B4                 push    eax
.text:000082B5                 push    ecx
.text:000082B6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000082BD                 mov     eax, dword ptr ds:___security_cookie
.text:000082C2                 xor     eax, ebp
.text:000082C4                 push    eax
.text:000082C5                 lea     eax, [ebp+var_C]
.text:000082C8                 mov     large fs:0, eax
.text:000082CE                 mov     [ebp+var_10], ecx
.text:000082D1                 mov     ecx, [ebp+var_10]
.text:000082D4                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:000082D9                 mov     [ebp+var_4], 0
.text:000082E0                 mov     ecx, [ebp+var_10]
.text:000082E3                 add     ecx, 4
.text:000082E6                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000082EB                 mov     byte ptr [ebp+var_4], 1
.text:000082EF                 mov     ecx, [ebp+var_10]
.text:000082F2                 add     ecx, 10h
.text:000082F5                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000082FA                 mov     byte ptr [ebp+var_4], 2
.text:000082FE                 mov     ecx, [ebp+var_10]
.text:00008301                 add     ecx, 30h ; '0'  ; this
.text:00008304                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00008309                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008310                 mov     eax, [ebp+var_10]
.text:00008313                 mov     ecx, [ebp+var_C]
.text:00008316                 mov     large fs:0, ecx
.text:0000831D                 pop     ecx
.text:0000831E                 add     esp, 10h
.text:00008321                 cmp     ebp, esp
.text:00008323                 call    __RTC_CheckEsp
.text:00008328                 mov     esp, ebp
.text:0000832A                 pop     ebp
.text:0000832B                 retn
.text:0000832B ??0CMtCompressProgressMixer@@QAE@XZ endp
.text:0000832B
.text:0000832B _text           ends
.text:0000832B
.text$x:0000832C ; ===========================================================================
.text$x:0000832C
.text$x:0000832C ; Segment type: Pure code
.text$x:0000832C ; Segment permissions: Read/Execute
.text$x:0000832C _text$x         segment para public 'CODE' use32
.text$x:0000832C                 assume cs:_text$x
.text$x:0000832C                 ;org 832Ch
.text$x:0000832C ; COMDAT (pick associative to section at 82A4)
.text$x:0000832C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000832C
.text$x:0000832C ; =============== S U B R O U T I N E =======================================
.text$x:0000832C
.text$x:0000832C
.text$x:0000832C __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$0 proc near
.text$x:0000832C                                         ; DATA XREF: .xdata$x:0000836Co
.text$x:0000832C                 mov     ecx, [ebp-10h]
.text$x:0000832F                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000832F __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$0 endp
.text$x:0000832F
.text$x:00008334
.text$x:00008334 ; =============== S U B R O U T I N E =======================================
.text$x:00008334
.text$x:00008334
.text$x:00008334 __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1 proc near
.text$x:00008334                                         ; DATA XREF: .xdata$x:00008374o
.text$x:00008334                 mov     ecx, [ebp-10h]
.text$x:00008337                 add     ecx, 4
.text$x:0000833A                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:0000833A __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1 endp
.text$x:0000833A
.text$x:0000833F
.text$x:0000833F ; =============== S U B R O U T I N E =======================================
.text$x:0000833F
.text$x:0000833F
.text$x:0000833F __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2 proc near
.text$x:0000833F                                         ; DATA XREF: .xdata$x:0000837Co
.text$x:0000833F                 mov     ecx, [ebp-10h]
.text$x:00008342                 add     ecx, 10h
.text$x:00008345                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00008345 __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2 endp
.text$x:00008345
.text$x:0000834A
.text$x:0000834A ; =============== S U B R O U T I N E =======================================
.text$x:0000834A
.text$x:0000834A
.text$x:0000834A __ehhandler$??0CMtCompressProgressMixer@@QAE@XZ proc near
.text$x:0000834A                                         ; DATA XREF: CMtCompressProgressMixer::CMtCompressProgressMixer(void)+5o
.text$x:0000834A
.text$x:0000834A arg_4           = dword ptr  8
.text$x:0000834A
.text$x:0000834A                 mov     edx, [esp+arg_4]
.text$x:0000834E                 lea     eax, [edx+0Ch]
.text$x:00008351                 mov     ecx, [edx-8]
.text$x:00008354                 xor     ecx, eax
.text$x:00008356                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000835B                 mov     eax, offset __ehfuncinfo$??0CMtCompressProgressMixer@@QAE@XZ
.text$x:00008360                 jmp     ___CxxFrameHandler3
.text$x:00008360 __ehhandler$??0CMtCompressProgressMixer@@QAE@XZ endp
.text$x:00008360
.text$x:00008360 ; ---------------------------------------------------------------------------
.text$x:00008365                 align 4
.text$x:00008365 _text$x         ends
.text$x:00008365
.xdata$x:00008368 ; ===========================================================================
.xdata$x:00008368
.xdata$x:00008368 ; Segment type: Pure data
.xdata$x:00008368 ; Segment permissions: Read
.xdata$x:00008368 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008368                 assume cs:_xdata$x
.xdata$x:00008368                 ;org 8368h
.xdata$x:00008368 ; COMDAT (pick associative to section at 82A4)
.xdata$x:00008368 __unwindtable$??0CMtCompressProgressMixer@@QAE@XZ db 0FFh
.xdata$x:00008368                                         ; DATA XREF: .xdata$x:00008388o
.xdata$x:00008369                 db 0FFh
.xdata$x:0000836A                 db 0FFh
.xdata$x:0000836B                 db 0FFh
.xdata$x:0000836C                 dd offset __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$0
.xdata$x:00008370                 db    0
.xdata$x:00008371                 db    0
.xdata$x:00008372                 db    0
.xdata$x:00008373                 db    0
.xdata$x:00008374                 dd offset __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1
.xdata$x:00008378                 db    1
.xdata$x:00008379                 db    0
.xdata$x:0000837A                 db    0
.xdata$x:0000837B                 db    0
.xdata$x:0000837C                 dd offset __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2
.xdata$x:00008380 __ehfuncinfo$??0CMtCompressProgressMixer@@QAE@XZ db  22h ; "
.xdata$x:00008380                                         ; DATA XREF: __ehhandler$??0CMtCompressProgressMixer@@QAE@XZ+11o
.xdata$x:00008381                 db    5
.xdata$x:00008382                 db  93h ; ô
.xdata$x:00008383                 db  19h
.xdata$x:00008384                 db    3
.xdata$x:00008385                 db    0
.xdata$x:00008386                 db    0
.xdata$x:00008387                 db    0
.xdata$x:00008388                 dd offset __unwindtable$??0CMtCompressProgressMixer@@QAE@XZ
.xdata$x:0000838C                 align 20h
.xdata$x:000083A0                 db    1
.xdata$x:000083A1                 db    0
.xdata$x:000083A2                 db    0
.xdata$x:000083A3                 db    0
.xdata$x:000083A3 _xdata$x        ends
.xdata$x:000083A3
.text:000083A4 ; ===========================================================================
.text:000083A4
.text:000083A4 ; Segment type: Pure code
.text:000083A4 ; Segment permissions: Read/Execute
.text:000083A4 _text           segment para public 'CODE' use32
.text:000083A4                 assume cs:_text
.text:000083A4                 ;org 83A4h
.text:000083A4 ; COMDAT (pick any)
.text:000083A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083A4
.text:000083A4 ; =============== S U B R O U T I N E =======================================
.text:000083A4
.text:000083A4 ; Attributes: bp-based frame
.text:000083A4
.text:000083A4 ; _DWORD __thiscall CMtCompressProgressMixer::~CMtCompressProgressMixer(CMtCompressProgressMixer *__hidden this)
.text:000083A4                 public ??1CMtCompressProgressMixer@@QAE@XZ
.text:000083A4 ??1CMtCompressProgressMixer@@QAE@XZ proc near
.text:000083A4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+71Cp
.text:000083A4                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+912p ...
.text:000083A4
.text:000083A4 var_10          = dword ptr -10h
.text:000083A4 var_C           = dword ptr -0Ch
.text:000083A4 var_4           = dword ptr -4
.text:000083A4
.text:000083A4                 push    ebp
.text:000083A5                 mov     ebp, esp
.text:000083A7                 push    0FFFFFFFFh
.text:000083A9                 push    offset __ehhandler$??1CMtCompressProgressMixer@@QAE@XZ
.text:000083AE                 mov     eax, large fs:0
.text:000083B4                 push    eax
.text:000083B5                 push    ecx
.text:000083B6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000083BD                 mov     eax, dword ptr ds:___security_cookie
.text:000083C2                 xor     eax, ebp
.text:000083C4                 push    eax
.text:000083C5                 lea     eax, [ebp+var_C]
.text:000083C8                 mov     large fs:0, eax
.text:000083CE                 mov     [ebp+var_10], ecx
.text:000083D1                 mov     [ebp+var_4], 2
.text:000083D8                 mov     ecx, [ebp+var_10]
.text:000083DB                 add     ecx, 30h ; '0'  ; this
.text:000083DE                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:000083E3                 mov     byte ptr [ebp+var_4], 1
.text:000083E7                 mov     ecx, [ebp+var_10]
.text:000083EA                 add     ecx, 10h
.text:000083ED                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000083F2                 mov     byte ptr [ebp+var_4], 0
.text:000083F6                 mov     ecx, [ebp+var_10]
.text:000083F9                 add     ecx, 4
.text:000083FC                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00008401                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008408                 mov     ecx, [ebp+var_10]
.text:0000840B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00008410                 mov     ecx, [ebp+var_C]
.text:00008413                 mov     large fs:0, ecx
.text:0000841A                 pop     ecx
.text:0000841B                 add     esp, 10h
.text:0000841E                 cmp     ebp, esp
.text:00008420                 call    __RTC_CheckEsp
.text:00008425                 mov     esp, ebp
.text:00008427                 pop     ebp
.text:00008428                 retn
.text:00008428 ??1CMtCompressProgressMixer@@QAE@XZ endp
.text:00008428
.text:00008428 ; ---------------------------------------------------------------------------
.text:00008429                 align 4
.text:00008429 _text           ends
.text:00008429
.text$x:0000842C ; ===========================================================================
.text$x:0000842C
.text$x:0000842C ; Segment type: Pure code
.text$x:0000842C ; Segment permissions: Read/Execute
.text$x:0000842C _text$x         segment para public 'CODE' use32
.text$x:0000842C                 assume cs:_text$x
.text$x:0000842C                 ;org 842Ch
.text$x:0000842C ; COMDAT (pick associative to section at 83A4)
.text$x:0000842C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000842C
.text$x:0000842C ; =============== S U B R O U T I N E =======================================
.text$x:0000842C
.text$x:0000842C
.text$x:0000842C __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$0 proc near
.text$x:0000842C                                         ; DATA XREF: .xdata$x:0000846Co
.text$x:0000842C                 mov     ecx, [ebp-10h]
.text$x:0000842F                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000842F __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$0 endp
.text$x:0000842F
.text$x:00008434
.text$x:00008434 ; =============== S U B R O U T I N E =======================================
.text$x:00008434
.text$x:00008434
.text$x:00008434 __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$1 proc near
.text$x:00008434                                         ; DATA XREF: .xdata$x:00008474o
.text$x:00008434                 mov     ecx, [ebp-10h]
.text$x:00008437                 add     ecx, 4
.text$x:0000843A                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:0000843A __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$1 endp
.text$x:0000843A
.text$x:0000843F
.text$x:0000843F ; =============== S U B R O U T I N E =======================================
.text$x:0000843F
.text$x:0000843F
.text$x:0000843F __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$2 proc near
.text$x:0000843F                                         ; DATA XREF: .xdata$x:0000847Co
.text$x:0000843F                 mov     ecx, [ebp-10h]
.text$x:00008442                 add     ecx, 10h
.text$x:00008445                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00008445 __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$2 endp
.text$x:00008445
.text$x:0000844A
.text$x:0000844A ; =============== S U B R O U T I N E =======================================
.text$x:0000844A
.text$x:0000844A
.text$x:0000844A __ehhandler$??1CMtCompressProgressMixer@@QAE@XZ proc near
.text$x:0000844A                                         ; DATA XREF: CMtCompressProgressMixer::~CMtCompressProgressMixer(void)+5o
.text$x:0000844A
.text$x:0000844A arg_4           = dword ptr  8
.text$x:0000844A
.text$x:0000844A                 mov     edx, [esp+arg_4]
.text$x:0000844E                 lea     eax, [edx+0Ch]
.text$x:00008451                 mov     ecx, [edx-8]
.text$x:00008454                 xor     ecx, eax
.text$x:00008456                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000845B                 mov     eax, offset __ehfuncinfo$??1CMtCompressProgressMixer@@QAE@XZ
.text$x:00008460                 jmp     ___CxxFrameHandler3
.text$x:00008460 __ehhandler$??1CMtCompressProgressMixer@@QAE@XZ endp
.text$x:00008460
.text$x:00008460 ; ---------------------------------------------------------------------------
.text$x:00008465                 align 4
.text$x:00008465 _text$x         ends
.text$x:00008465
.xdata$x:00008468 ; ===========================================================================
.xdata$x:00008468
.xdata$x:00008468 ; Segment type: Pure data
.xdata$x:00008468 ; Segment permissions: Read
.xdata$x:00008468 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008468                 assume cs:_xdata$x
.xdata$x:00008468                 ;org 8468h
.xdata$x:00008468 ; COMDAT (pick associative to section at 83A4)
.xdata$x:00008468 __unwindtable$??1CMtCompressProgressMixer@@QAE@XZ db 0FFh
.xdata$x:00008468                                         ; DATA XREF: .xdata$x:00008488o
.xdata$x:00008469                 db 0FFh
.xdata$x:0000846A                 db 0FFh
.xdata$x:0000846B                 db 0FFh
.xdata$x:0000846C                 dd offset __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$0
.xdata$x:00008470                 db    0
.xdata$x:00008471                 db    0
.xdata$x:00008472                 db    0
.xdata$x:00008473                 db    0
.xdata$x:00008474                 dd offset __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$1
.xdata$x:00008478                 db    1
.xdata$x:00008479                 db    0
.xdata$x:0000847A                 db    0
.xdata$x:0000847B                 db    0
.xdata$x:0000847C                 dd offset __unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$2
.xdata$x:00008480 __ehfuncinfo$??1CMtCompressProgressMixer@@QAE@XZ db  22h ; "
.xdata$x:00008480                                         ; DATA XREF: __ehhandler$??1CMtCompressProgressMixer@@QAE@XZ+11o
.xdata$x:00008481                 db    5
.xdata$x:00008482                 db  93h ; ô
.xdata$x:00008483                 db  19h
.xdata$x:00008484                 db    3
.xdata$x:00008485                 db    0
.xdata$x:00008486                 db    0
.xdata$x:00008487                 db    0
.xdata$x:00008488                 dd offset __unwindtable$??1CMtCompressProgressMixer@@QAE@XZ
.xdata$x:0000848C                 align 20h
.xdata$x:000084A0                 db    1
.xdata$x:000084A1                 db    0
.xdata$x:000084A2                 db    0
.xdata$x:000084A3                 db    0
.xdata$x:000084A3 _xdata$x        ends
.xdata$x:000084A3
.text:000084A4 ; ===========================================================================
.text:000084A4
.text:000084A4 ; Segment type: Pure code
.text:000084A4 ; Segment permissions: Read/Execute
.text:000084A4 _text           segment para public 'CODE' use32
.text:000084A4                 assume cs:_text
.text:000084A4                 ;org 84A4h
.text:000084A4 ; COMDAT (pick any)
.text:000084A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084A4
.text:000084A4 ; =============== S U B R O U T I N E =======================================
.text:000084A4
.text:000084A4 ; Attributes: bp-based frame
.text:000084A4
.text:000084A4 ; _DWORD __thiscall NArchive::NZip::CThreads::CThreads(NArchive::NZip::CThreads *__hidden this)
.text:000084A4                 public ??0CThreads@NZip@NArchive@@QAE@XZ
.text:000084A4 ??0CThreads@NZip@NArchive@@QAE@XZ proc near
.text:000084A4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+66Ap
.text:000084A4
.text:000084A4 var_4           = dword ptr -4
.text:000084A4
.text:000084A4                 push    ebp
.text:000084A5                 mov     ebp, esp
.text:000084A7                 push    ecx
.text:000084A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084AF                 mov     [ebp+var_4], ecx
.text:000084B2                 mov     ecx, [ebp+var_4]
.text:000084B5                 call    ??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::CObjectVector<NArchive::NZip::CThreadInfo>(void)
.text:000084BA                 mov     eax, [ebp+var_4]
.text:000084BD                 add     esp, 4
.text:000084C0                 cmp     ebp, esp
.text:000084C2                 call    __RTC_CheckEsp
.text:000084C7                 mov     esp, ebp
.text:000084C9                 pop     ebp
.text:000084CA                 retn
.text:000084CA ??0CThreads@NZip@NArchive@@QAE@XZ endp
.text:000084CA
.text:000084CA ; ---------------------------------------------------------------------------
.text:000084CB                 align 4
.text:000084CB _text           ends
.text:000084CB
.text:000084CC ; ===========================================================================
.text:000084CC
.text:000084CC ; Segment type: Pure code
.text:000084CC ; Segment permissions: Read/Execute
.text:000084CC _text           segment para public 'CODE' use32
.text:000084CC                 assume cs:_text
.text:000084CC                 ;org 84CCh
.text:000084CC ; COMDAT (pick any)
.text:000084CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084CC
.text:000084CC ; =============== S U B R O U T I N E =======================================
.text:000084CC
.text:000084CC ; Attributes: bp-based frame
.text:000084CC
.text:000084CC ; _DWORD __thiscall NArchive::NZip::CMemBlocks2::~CMemBlocks2(NArchive::NZip::CMemBlocks2 *__hidden this)
.text:000084CC                 public ??1CMemBlocks2@NZip@NArchive@@QAE@XZ
.text:000084CC ??1CMemBlocks2@NZip@NArchive@@QAE@XZ proc near
.text:000084CC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+7D3p
.text:000084CC                                         ; __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13+6j ...
.text:000084CC
.text:000084CC var_4           = dword ptr -4
.text:000084CC
.text:000084CC                 push    ebp
.text:000084CD                 mov     ebp, esp
.text:000084CF                 push    ecx
.text:000084D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084D7                 mov     [ebp+var_4], ecx
.text:000084DA                 mov     ecx, [ebp+var_4] ; this
.text:000084DD                 call    ??1CMemLockBlocks@@QAE@XZ ; CMemLockBlocks::~CMemLockBlocks(void)
.text:000084E2                 add     esp, 4
.text:000084E5                 cmp     ebp, esp
.text:000084E7                 call    __RTC_CheckEsp
.text:000084EC                 mov     esp, ebp
.text:000084EE                 pop     ebp
.text:000084EF                 retn
.text:000084EF ??1CMemBlocks2@NZip@NArchive@@QAE@XZ endp
.text:000084EF
.text:000084EF _text           ends
.text:000084EF
.text:000084F0 ; ===========================================================================
.text:000084F0
.text:000084F0 ; Segment type: Pure code
.text:000084F0 ; Segment permissions: Read/Execute
.text:000084F0 _text           segment para public 'CODE' use32
.text:000084F0                 assume cs:_text
.text:000084F0                 ;org 84F0h
.text:000084F0 ; COMDAT (pick any)
.text:000084F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084F0
.text:000084F0 ; =============== S U B R O U T I N E =======================================
.text:000084F0
.text:000084F0 ; Attributes: bp-based frame
.text:000084F0
.text:000084F0 ; _DWORD __thiscall NArchive::NZip::CThreadInfo::~CThreadInfo(NArchive::NZip::CThreadInfo *__hidden this)
.text:000084F0                 public ??1CThreadInfo@NZip@NArchive@@QAE@XZ
.text:000084F0 ??1CThreadInfo@NZip@NArchive@@QAE@XZ proc near
.text:000084F0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+847p
.text:000084F0                                         ; __unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14+6j ...
.text:000084F0
.text:000084F0 var_10          = dword ptr -10h
.text:000084F0 var_C           = dword ptr -0Ch
.text:000084F0 var_4           = dword ptr -4
.text:000084F0
.text:000084F0                 push    ebp
.text:000084F1                 mov     ebp, esp
.text:000084F3                 push    0FFFFFFFFh
.text:000084F5                 push    offset __ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ
.text:000084FA                 mov     eax, large fs:0
.text:00008500                 push    eax
.text:00008501                 push    ecx
.text:00008502                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008509                 mov     eax, dword ptr ds:___security_cookie
.text:0000850E                 xor     eax, ebp
.text:00008510                 push    eax
.text:00008511                 lea     eax, [ebp+var_C]
.text:00008514                 mov     large fs:0, eax
.text:0000851A                 mov     [ebp+var_10], ecx
.text:0000851D                 mov     [ebp+var_4], 5
.text:00008524                 mov     ecx, [ebp+var_10]
.text:00008527                 add     ecx, 28h ; '('  ; this
.text:0000852A                 call    ??1CAddCommon@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CAddCommon::~CAddCommon(void)
.text:0000852F                 mov     byte ptr [ebp+var_4], 4
.text:00008533                 mov     ecx, [ebp+var_10]
.text:00008536                 add     ecx, 20h ; ' '
.text:00008539                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000853E                 mov     byte ptr [ebp+var_4], 3
.text:00008542                 mov     ecx, [ebp+var_10]
.text:00008545                 add     ecx, 1Ch
.text:00008548                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:0000854D                 mov     byte ptr [ebp+var_4], 2
.text:00008551                 mov     ecx, [ebp+var_10]
.text:00008554                 add     ecx, 14h
.text:00008557                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000855C                 mov     byte ptr [ebp+var_4], 1
.text:00008560                 mov     ecx, [ebp+var_10]
.text:00008563                 add     ecx, 8          ; this
.text:00008566                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000856B                 mov     byte ptr [ebp+var_4], 0
.text:0000856F                 mov     ecx, [ebp+var_10]
.text:00008572                 add     ecx, 4          ; this
.text:00008575                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000857A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008581                 mov     ecx, [ebp+var_10] ; this
.text:00008584                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00008589                 mov     ecx, [ebp+var_C]
.text:0000858C                 mov     large fs:0, ecx
.text:00008593                 pop     ecx
.text:00008594                 add     esp, 10h
.text:00008597                 cmp     ebp, esp
.text:00008599                 call    __RTC_CheckEsp
.text:0000859E                 mov     esp, ebp
.text:000085A0                 pop     ebp
.text:000085A1                 retn
.text:000085A1 ??1CThreadInfo@NZip@NArchive@@QAE@XZ endp
.text:000085A1
.text:000085A1 ; ---------------------------------------------------------------------------
.text:000085A2                 align 4
.text:000085A2 _text           ends
.text:000085A2
.text$x:000085A4 ; ===========================================================================
.text$x:000085A4
.text$x:000085A4 ; Segment type: Pure code
.text$x:000085A4 ; Segment permissions: Read/Execute
.text$x:000085A4 _text$x         segment para public 'CODE' use32
.text$x:000085A4                 assume cs:_text$x
.text$x:000085A4                 ;org 85A4h
.text$x:000085A4 ; COMDAT (pick associative to section at 84F0)
.text$x:000085A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000085A4
.text$x:000085A4 ; =============== S U B R O U T I N E =======================================
.text$x:000085A4
.text$x:000085A4
.text$x:000085A4 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000085A4                                         ; DATA XREF: .xdata$x:00008628o
.text$x:000085A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000085A7                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:000085A7 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000085A7
.text$x:000085AC
.text$x:000085AC ; =============== S U B R O U T I N E =======================================
.text$x:000085AC
.text$x:000085AC
.text$x:000085AC __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:000085AC                                         ; DATA XREF: .xdata$x:00008630o
.text$x:000085AC                 mov     ecx, [ebp-10h]
.text$x:000085AF                 add     ecx, 4          ; this
.text$x:000085B2                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:000085B2 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$1 endp
.text$x:000085B2
.text$x:000085B7
.text$x:000085B7 ; =============== S U B R O U T I N E =======================================
.text$x:000085B7
.text$x:000085B7
.text$x:000085B7 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$2 proc near
.text$x:000085B7                                         ; DATA XREF: .xdata$x:00008638o
.text$x:000085B7                 mov     ecx, [ebp-10h]
.text$x:000085BA                 add     ecx, 8          ; this
.text$x:000085BD                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:000085BD __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$2 endp
.text$x:000085BD
.text$x:000085C2
.text$x:000085C2 ; =============== S U B R O U T I N E =======================================
.text$x:000085C2
.text$x:000085C2
.text$x:000085C2 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$3 proc near
.text$x:000085C2                                         ; DATA XREF: .xdata$x:00008640o
.text$x:000085C2                 mov     ecx, [ebp-10h]
.text$x:000085C5                 add     ecx, 14h
.text$x:000085C8                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:000085C8 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$3 endp
.text$x:000085C8
.text$x:000085CD
.text$x:000085CD ; =============== S U B R O U T I N E =======================================
.text$x:000085CD
.text$x:000085CD
.text$x:000085CD __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$4 proc near
.text$x:000085CD                                         ; DATA XREF: .xdata$x:00008648o
.text$x:000085CD                 mov     ecx, [ebp-10h]
.text$x:000085D0                 add     ecx, 1Ch
.text$x:000085D3                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:000085D3 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$4 endp
.text$x:000085D3
.text$x:000085D8
.text$x:000085D8 ; =============== S U B R O U T I N E =======================================
.text$x:000085D8
.text$x:000085D8
.text$x:000085D8 __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$5 proc near
.text$x:000085D8                                         ; DATA XREF: .xdata$x:00008650o
.text$x:000085D8                 mov     ecx, [ebp-10h]
.text$x:000085DB                 add     ecx, 20h ; ' '
.text$x:000085DE                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000085DE __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$5 endp
.text$x:000085DE
.text$x:000085E3
.text$x:000085E3 ; =============== S U B R O U T I N E =======================================
.text$x:000085E3
.text$x:000085E3
.text$x:000085E3 __ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ proc near
.text$x:000085E3                                         ; DATA XREF: NArchive::NZip::CThreadInfo::~CThreadInfo(void)+5o
.text$x:000085E3
.text$x:000085E3 arg_4           = dword ptr  8
.text$x:000085E3
.text$x:000085E3                 mov     edx, [esp+arg_4]
.text$x:000085E7                 lea     eax, [edx+0Ch]
.text$x:000085EA                 mov     ecx, [edx-8]
.text$x:000085ED                 xor     ecx, eax
.text$x:000085EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000085F4                 mov     eax, offset __ehfuncinfo$??1CThreadInfo@NZip@NArchive@@QAE@XZ
.text$x:000085F9                 jmp     ___CxxFrameHandler3
.text$x:000085F9 __ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ endp
.text$x:000085F9
.text$x:000085F9 ; ---------------------------------------------------------------------------
.text$x:000085FE                 align 10h
.text$x:000085FE _text$x         ends
.text$x:000085FE
.xdata$x:00008600 ; ===========================================================================
.xdata$x:00008600
.xdata$x:00008600 ; Segment type: Pure data
.xdata$x:00008600 ; Segment permissions: Read
.xdata$x:00008600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008600                 assume cs:_xdata$x
.xdata$x:00008600                 ;org 8600h
.xdata$x:00008600 ; COMDAT (pick associative to section at 84F0)
.xdata$x:00008600 __ehfuncinfo$??1CThreadInfo@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008600                                         ; DATA XREF: __ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008601                 db    5
.xdata$x:00008602                 db  93h ; ô
.xdata$x:00008603                 db  19h
.xdata$x:00008604                 db    6
.xdata$x:00008605                 db    0
.xdata$x:00008606                 db    0
.xdata$x:00008607                 db    0
.xdata$x:00008608                 dd offset __unwindtable$??1CThreadInfo@NZip@NArchive@@QAE@XZ
.xdata$x:0000860C                 align 20h
.xdata$x:00008620                 db    1
.xdata$x:00008621                 db    0
.xdata$x:00008622                 db    0
.xdata$x:00008623                 db    0
.xdata$x:00008624 __unwindtable$??1CThreadInfo@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008624                                         ; DATA XREF: .xdata$x:00008608o
.xdata$x:00008625                 db 0FFh
.xdata$x:00008626                 db 0FFh
.xdata$x:00008627                 db 0FFh
.xdata$x:00008628                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$0
.xdata$x:0000862C                 align 10h
.xdata$x:00008630                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$1
.xdata$x:00008634                 db    1
.xdata$x:00008635                 db    0
.xdata$x:00008636                 db    0
.xdata$x:00008637                 db    0
.xdata$x:00008638                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$2
.xdata$x:0000863C                 db    2
.xdata$x:0000863D                 db    0
.xdata$x:0000863E                 db    0
.xdata$x:0000863F                 db    0
.xdata$x:00008640                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$3
.xdata$x:00008644                 db    3
.xdata$x:00008645                 db    0
.xdata$x:00008646                 db    0
.xdata$x:00008647                 db    0
.xdata$x:00008648                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$4
.xdata$x:0000864C                 db    4
.xdata$x:0000864D                 db    0
.xdata$x:0000864E                 db    0
.xdata$x:0000864F                 db    0
.xdata$x:00008650                 dd offset __unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$5
.xdata$x:00008650 _xdata$x        ends
.xdata$x:00008650
.text:00008654 ; ===========================================================================
.text:00008654
.text:00008654 ; Segment type: Pure code
.text:00008654 ; Segment permissions: Read/Execute
.text:00008654 _text           segment para public 'CODE' use32
.text:00008654                 assume cs:_text
.text:00008654                 ;org 8654h
.text:00008654 ; COMDAT (pick any)
.text:00008654                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008654
.text:00008654 ; =============== S U B R O U T I N E =======================================
.text:00008654
.text:00008654 ; Attributes: bp-based frame
.text:00008654
.text:00008654 ; public: __thiscall CMtCompressProgress::CMtCompressProgress(void)
.text:00008654                 public ??0CMtCompressProgress@@QAE@XZ
.text:00008654 ??0CMtCompressProgress@@QAE@XZ proc near
.text:00008654                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+AF2p
.text:00008654
.text:00008654 var_4           = dword ptr -4
.text:00008654
.text:00008654                 push    ebp
.text:00008655                 mov     ebp, esp
.text:00008657                 push    ecx
.text:00008658                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000865F                 mov     [ebp+var_4], ecx
.text:00008662                 mov     ecx, [ebp+var_4] ; this
.text:00008665                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:0000866A                 mov     ecx, [ebp+var_4]
.text:0000866D                 add     ecx, 4          ; this
.text:00008670                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00008675                 mov     eax, [ebp+var_4]
.text:00008678                 mov     dword ptr [eax], offset ??_7CMtCompressProgress@@6B@ ; const CMtCompressProgress::`vftable'
.text:0000867E                 mov     eax, [ebp+var_4]
.text:00008681                 add     esp, 4
.text:00008684                 cmp     ebp, esp
.text:00008686                 call    __RTC_CheckEsp
.text:0000868B                 mov     esp, ebp
.text:0000868D                 pop     ebp
.text:0000868E                 retn
.text:0000868E ??0CMtCompressProgress@@QAE@XZ endp
.text:0000868E
.text:0000868E ; ---------------------------------------------------------------------------
.text:0000868F                 align 10h
.text:0000868F _text           ends
.text:0000868F
.rdata:00008690 ; ===========================================================================
.rdata:00008690
.rdata:00008690 ; Segment type: Pure data
.rdata:00008690 ; Segment permissions: Read
.rdata:00008690 _rdata          segment dword public 'DATA' use32
.rdata:00008690                 assume cs:_rdata
.rdata:00008690                 ;org 8690h
.rdata:00008690 ; COMDAT (pick largest)
.rdata:00008690                 dd offset ??_R4CMtCompressProgress@@6B@ ; const CMtCompressProgress::`RTTI Complete Object Locator'
.rdata:00008694                 public ??_7CMtCompressProgress@@6B@
.rdata:00008694 ; const CMtCompressProgress::`vftable'
.rdata:00008694 ??_7CMtCompressProgress@@6B@ dd offset ?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00008694                                         ; DATA XREF: CMtCompressProgress::CMtCompressProgress(void)+24o
.rdata:00008694                                         ; CMtCompressProgress::QueryInterface(_GUID const &,void * *)
.rdata:00008698                 dd offset ?AddRef@CMtCompressProgress@@UAGKXZ ; CMtCompressProgress::AddRef(void)
.rdata:0000869C                 dd offset ?Release@CMtCompressProgress@@UAGKXZ ; CMtCompressProgress::Release(void)
.rdata:000086A0                 dd offset ?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z ; CMtCompressProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:000086A0 _rdata          ends
.rdata:000086A0
.rdata$r:000086A4 ; ===========================================================================
.rdata$r:000086A4
.rdata$r:000086A4 ; Segment type: Pure data
.rdata$r:000086A4 ; Segment permissions: Read
.rdata$r:000086A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000086A4                 assume cs:_rdata$r
.rdata$r:000086A4                 ;org 86A4h
.rdata$r:000086A4 ; COMDAT (pick any)
.rdata$r:000086A4                 public ??_R4CMtCompressProgress@@6B@
.rdata$r:000086A4 ; const CMtCompressProgress::`RTTI Complete Object Locator'
.rdata$r:000086A4 ??_R4CMtCompressProgress@@6B@ db    0   ; DATA XREF: .rdata:00008690o
.rdata$r:000086A5                 db    0
.rdata$r:000086A6                 db    0
.rdata$r:000086A7                 db    0
.rdata$r:000086A8                 db    0
.rdata$r:000086A9                 db    0
.rdata$r:000086AA                 db    0
.rdata$r:000086AB                 db    0
.rdata$r:000086AC                 db    0
.rdata$r:000086AD                 db    0
.rdata$r:000086AE                 db    0
.rdata$r:000086AF                 db    0
.rdata$r:000086B0                 dd offset ??_R0?AVCMtCompressProgress@@@8 ; CMtCompressProgress `RTTI Type Descriptor'
.rdata$r:000086B4                 dd offset ??_R3CMtCompressProgress@@8 ; CMtCompressProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000086B4 _rdata$r        ends
.rdata$r:000086B4
.data:000086B8 ; ===========================================================================
.data:000086B8
.data:000086B8 ; Segment type: Pure data
.data:000086B8 ; Segment permissions: Read/Write
.data:000086B8 _data           segment dword public 'DATA' use32
.data:000086B8                 assume cs:_data
.data:000086B8                 ;org 86B8h
.data:000086B8 ; COMDAT (pick any)
.data:000086B8                 public ??_R0?AVCMtCompressProgress@@@8
.data:000086B8 ; class CMtCompressProgress `RTTI Type Descriptor'
.data:000086B8 ??_R0?AVCMtCompressProgress@@@8 dd offset ??_7type_info@@6B@
.data:000086B8                                         ; DATA XREF: .rdata$r:000086B0o
.data:000086B8                                         ; .rdata$r:CMtCompressProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000086B8                                         ; const type_info::`vftable'
.data:000086BC                 align 10h
.data:000086C0 a_?avcmtcompres db '.?AVCMtCompressProgress@@',0
.data:000086DA                 align 4
.data:000086DA _data           ends
.data:000086DA
.rdata$r:000086DC ; ===========================================================================
.rdata$r:000086DC
.rdata$r:000086DC ; Segment type: Pure data
.rdata$r:000086DC ; Segment permissions: Read
.rdata$r:000086DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000086DC                 assume cs:_rdata$r
.rdata$r:000086DC                 ;org 86DCh
.rdata$r:000086DC ; COMDAT (pick any)
.rdata$r:000086DC                 public ??_R3CMtCompressProgress@@8
.rdata$r:000086DC ; CMtCompressProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000086DC ??_R3CMtCompressProgress@@8 db    0     ; DATA XREF: .rdata$r:000086B4o
.rdata$r:000086DC                                         ; .rdata$r:00008718o
.rdata$r:000086DD                 db    0
.rdata$r:000086DE                 db    0
.rdata$r:000086DF                 db    0
.rdata$r:000086E0                 db    1
.rdata$r:000086E1                 db    0
.rdata$r:000086E2                 db    0
.rdata$r:000086E3                 db    0
.rdata$r:000086E4                 db    4
.rdata$r:000086E5                 db    0
.rdata$r:000086E6                 db    0
.rdata$r:000086E7                 db    0
.rdata$r:000086E8                 dd offset ??_R2CMtCompressProgress@@8 ; CMtCompressProgress::`RTTI Base Class Array'
.rdata$r:000086E8 _rdata$r        ends
.rdata$r:000086E8
.rdata$r:000086EC ; ===========================================================================
.rdata$r:000086EC
.rdata$r:000086EC ; Segment type: Pure data
.rdata$r:000086EC ; Segment permissions: Read
.rdata$r:000086EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000086EC                 assume cs:_rdata$r
.rdata$r:000086EC                 ;org 86ECh
.rdata$r:000086EC ; COMDAT (pick any)
.rdata$r:000086EC                 public ??_R2CMtCompressProgress@@8
.rdata$r:000086EC ; CMtCompressProgress::`RTTI Base Class Array'
.rdata$r:000086EC ??_R2CMtCompressProgress@@8 dd offset ??_R1A@?0A@EA@CMtCompressProgress@@8
.rdata$r:000086EC                                         ; DATA XREF: .rdata$r:000086E8o
.rdata$r:000086EC                                         ; CMtCompressProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000086F0                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000086F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000086F8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000086FC                 db    0
.rdata$r:000086FD                 align 10h
.rdata$r:000086FD _rdata$r        ends
.rdata$r:000086FD
.rdata$r:00008700 ; ===========================================================================
.rdata$r:00008700
.rdata$r:00008700 ; Segment type: Pure data
.rdata$r:00008700 ; Segment permissions: Read
.rdata$r:00008700 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008700                 assume cs:_rdata$r
.rdata$r:00008700                 ;org 8700h
.rdata$r:00008700 ; COMDAT (pick any)
.rdata$r:00008700                 public ??_R1A@?0A@EA@CMtCompressProgress@@8
.rdata$r:00008700 ; CMtCompressProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008700 ??_R1A@?0A@EA@CMtCompressProgress@@8 dd offset ??_R0?AVCMtCompressProgress@@@8
.rdata$r:00008700                                         ; DATA XREF: .rdata$r:CMtCompressProgress::`RTTI Base Class Array'o
.rdata$r:00008700                                         ; CMtCompressProgress `RTTI Type Descriptor'
.rdata$r:00008704                 db    3
.rdata$r:00008705                 db    0
.rdata$r:00008706                 db    0
.rdata$r:00008707                 db    0
.rdata$r:00008708                 db    0
.rdata$r:00008709                 db    0
.rdata$r:0000870A                 db    0
.rdata$r:0000870B                 db    0
.rdata$r:0000870C                 db 0FFh
.rdata$r:0000870D                 db 0FFh
.rdata$r:0000870E                 db 0FFh
.rdata$r:0000870F                 db 0FFh
.rdata$r:00008710                 db    0
.rdata$r:00008711                 db    0
.rdata$r:00008712                 db    0
.rdata$r:00008713                 db    0
.rdata$r:00008714                 db  40h ; @
.rdata$r:00008715                 db    0
.rdata$r:00008716                 db    0
.rdata$r:00008717                 db    0
.rdata$r:00008718                 dd offset ??_R3CMtCompressProgress@@8 ; CMtCompressProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008718 _rdata$r        ends
.rdata$r:00008718
.text:0000871C ; ===========================================================================
.text:0000871C
.text:0000871C ; Segment type: Pure code
.text:0000871C ; Segment permissions: Read/Execute
.text:0000871C _text           segment para public 'CODE' use32
.text:0000871C                 assume cs:_text
.text:0000871C                 ;org 871Ch
.text:0000871C ; COMDAT (pick any)
.text:0000871C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000871C
.text:0000871C ; =============== S U B R O U T I N E =======================================
.text:0000871C
.text:0000871C ; Attributes: bp-based frame
.text:0000871C
.text:0000871C ; __int32 __stdcall CMtCompressProgress::QueryInterface(CMtCompressProgress *this, const struct _GUID *Buf1, void **)
.text:0000871C                 public ?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z
.text:0000871C ?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000871C                                         ; DATA XREF: .rdata:const CMtCompressProgress::`vftable'o
.text:0000871C
.text:0000871C this            = dword ptr  8
.text:0000871C Buf1            = dword ptr  0Ch
.text:0000871C arg_8           = dword ptr  10h
.text:0000871C
.text:0000871C                 push    ebp
.text:0000871D                 mov     ebp, esp
.text:0000871F                 mov     eax, [ebp+arg_8]
.text:00008722                 mov     dword ptr [eax], 0
.text:00008728                 push    offset _IID_IUnknown ; Buf2
.text:0000872D                 mov     ecx, [ebp+Buf1]
.text:00008730                 push    ecx             ; Buf1
.text:00008731                 call    ___@8           ; __(x,x)
.text:00008736                 test    eax, eax
.text:00008738                 jz      short loc_8744
.text:0000873A                 mov     edx, [ebp+arg_8]
.text:0000873D                 mov     eax, [ebp+this]
.text:00008740                 mov     [edx], eax
.text:00008742                 jmp     short loc_874B
.text:00008744 ; ---------------------------------------------------------------------------
.text:00008744
.text:00008744 loc_8744:                               ; CODE XREF: CMtCompressProgress::QueryInterface(_GUID const &,void * *)+1Cj
.text:00008744                 mov     eax, 80004002h
.text:00008749                 jmp     short loc_875C
.text:0000874B ; ---------------------------------------------------------------------------
.text:0000874B
.text:0000874B loc_874B:                               ; CODE XREF: CMtCompressProgress::QueryInterface(_GUID const &,void * *)+26j
.text:0000874B                 mov     ecx, [ebp+this]
.text:0000874E                 mov     edx, [ecx+4]
.text:00008751                 add     edx, 1
.text:00008754                 mov     eax, [ebp+this]
.text:00008757                 mov     [eax+4], edx
.text:0000875A                 xor     eax, eax
.text:0000875C
.text:0000875C loc_875C:                               ; CODE XREF: CMtCompressProgress::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000875C                 cmp     ebp, esp
.text:0000875E                 call    __RTC_CheckEsp
.text:00008763                 pop     ebp
.text:00008764                 retn    0Ch
.text:00008764 ?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00008764
.text:00008764 ; ---------------------------------------------------------------------------
.text:00008767                 align 4
.text:00008767 _text           ends
.text:00008767
.text:00008768 ; ===========================================================================
.text:00008768
.text:00008768 ; Segment type: Pure code
.text:00008768 ; Segment permissions: Read/Execute
.text:00008768 _text           segment para public 'CODE' use32
.text:00008768                 assume cs:_text
.text:00008768                 ;org 8768h
.text:00008768 ; COMDAT (pick any)
.text:00008768                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008768
.text:00008768 ; =============== S U B R O U T I N E =======================================
.text:00008768
.text:00008768 ; Attributes: bp-based frame
.text:00008768
.text:00008768 ; unsigned __int32 __stdcall CMtCompressProgress::AddRef(CMtCompressProgress *this)
.text:00008768                 public ?AddRef@CMtCompressProgress@@UAGKXZ
.text:00008768 ?AddRef@CMtCompressProgress@@UAGKXZ proc near ; DATA XREF: .rdata:00008698o
.text:00008768
.text:00008768 var_4           = dword ptr -4
.text:00008768 this            = dword ptr  8
.text:00008768
.text:00008768                 push    ebp
.text:00008769                 mov     ebp, esp
.text:0000876B                 push    ecx
.text:0000876C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008773                 mov     eax, [ebp+this]
.text:00008776                 mov     ecx, [eax+4]
.text:00008779                 add     ecx, 1
.text:0000877C                 mov     [ebp+var_4], ecx
.text:0000877F                 mov     edx, [ebp+this]
.text:00008782                 mov     eax, [ebp+var_4]
.text:00008785                 mov     [edx+4], eax
.text:00008788                 mov     eax, [ebp+var_4]
.text:0000878B                 mov     esp, ebp
.text:0000878D                 pop     ebp
.text:0000878E                 retn    4
.text:0000878E ?AddRef@CMtCompressProgress@@UAGKXZ endp
.text:0000878E
.text:0000878E ; ---------------------------------------------------------------------------
.text:00008791                 align 4
.text:00008791 _text           ends
.text:00008791
.text:00008794 ; ===========================================================================
.text:00008794
.text:00008794 ; Segment type: Pure code
.text:00008794 ; Segment permissions: Read/Execute
.text:00008794 _text           segment para public 'CODE' use32
.text:00008794                 assume cs:_text
.text:00008794                 ;org 8794h
.text:00008794 ; COMDAT (pick any)
.text:00008794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008794
.text:00008794 ; =============== S U B R O U T I N E =======================================
.text:00008794
.text:00008794 ; Attributes: bp-based frame
.text:00008794
.text:00008794 ; unsigned __int32 __stdcall CMtCompressProgress::Release(CMtCompressProgress *this)
.text:00008794                 public ?Release@CMtCompressProgress@@UAGKXZ
.text:00008794 ?Release@CMtCompressProgress@@UAGKXZ proc near ; DATA XREF: .rdata:0000869Co
.text:00008794
.text:00008794 var_8           = dword ptr -8
.text:00008794 var_4           = dword ptr -4
.text:00008794 this            = dword ptr  8
.text:00008794
.text:00008794                 push    ebp
.text:00008795                 mov     ebp, esp
.text:00008797                 sub     esp, 8
.text:0000879A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000087A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087A8                 mov     eax, [ebp+this]
.text:000087AB                 mov     ecx, [eax+4]
.text:000087AE                 sub     ecx, 1
.text:000087B1                 mov     [ebp+var_8], ecx
.text:000087B4                 mov     edx, [ebp+this]
.text:000087B7                 mov     eax, [ebp+var_8]
.text:000087BA                 mov     [edx+4], eax
.text:000087BD                 cmp     [ebp+var_8], 0
.text:000087C1                 jz      short loc_87CB
.text:000087C3                 mov     ecx, [ebp+this]
.text:000087C6                 mov     eax, [ecx+4]
.text:000087C9                 jmp     short loc_87DF
.text:000087CB ; ---------------------------------------------------------------------------
.text:000087CB
.text:000087CB loc_87CB:                               ; CODE XREF: CMtCompressProgress::Release(void)+2Dj
.text:000087CB                 mov     edx, [ebp+this]
.text:000087CE                 mov     [ebp+var_4], edx
.text:000087D1                 mov     eax, [ebp+var_4]
.text:000087D4                 push    eax             ; void *
.text:000087D5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000087DA                 add     esp, 4
.text:000087DD                 xor     eax, eax
.text:000087DF
.text:000087DF loc_87DF:                               ; CODE XREF: CMtCompressProgress::Release(void)+35j
.text:000087DF                 add     esp, 8
.text:000087E2                 cmp     ebp, esp
.text:000087E4                 call    __RTC_CheckEsp
.text:000087E9                 mov     esp, ebp
.text:000087EB                 pop     ebp
.text:000087EC                 retn    4
.text:000087EC ?Release@CMtCompressProgress@@UAGKXZ endp
.text:000087EC
.text:000087EC ; ---------------------------------------------------------------------------
.text:000087EF                 align 10h
.text:000087EF _text           ends
.text:000087EF
.text:000087F0 ; ===========================================================================
.text:000087F0
.text:000087F0 ; Segment type: Pure code
.text:000087F0 ; Segment permissions: Read/Execute
.text:000087F0 _text           segment para public 'CODE' use32
.text:000087F0                 assume cs:_text
.text:000087F0                 ;org 87F0h
.text:000087F0 ; COMDAT (pick any)
.text:000087F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000087F0
.text:000087F0 ; =============== S U B R O U T I N E =======================================
.text:000087F0
.text:000087F0 ; Attributes: bp-based frame
.text:000087F0
.text:000087F0 ; _DWORD __thiscall NArchive::NZip::CItem::CItem(NArchive::NZip::CItem *this, const struct NArchive::NZip::CItem *)
.text:000087F0                 public ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000087F0 ??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:000087F0                                         ; CODE XREF: NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)+15p
.text:000087F0                                         ; NArchive::NZip::CItemOut::CItemOut(NArchive::NZip::CItemOut const &)+15p
.text:000087F0
.text:000087F0 var_10          = dword ptr -10h
.text:000087F0 var_C           = dword ptr -0Ch
.text:000087F0 var_4           = dword ptr -4
.text:000087F0 arg_0           = dword ptr  8
.text:000087F0
.text:000087F0                 push    ebp
.text:000087F1                 mov     ebp, esp
.text:000087F3                 push    0FFFFFFFFh
.text:000087F5                 push    offset __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000087FA                 mov     eax, large fs:0
.text:00008800                 push    eax
.text:00008801                 push    ecx
.text:00008802                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008809                 mov     eax, dword ptr ds:___security_cookie
.text:0000880E                 xor     eax, ebp
.text:00008810                 push    eax
.text:00008811                 lea     eax, [ebp+var_C]
.text:00008814                 mov     large fs:0, eax
.text:0000881A                 mov     [ebp+var_10], ecx
.text:0000881D                 mov     eax, [ebp+arg_0]
.text:00008820                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:00008821                 mov     ecx, [ebp+var_10] ; this
.text:00008824                 call    ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)
.text:00008829                 mov     [ebp+var_4], 0
.text:00008830                 mov     ecx, [ebp+arg_0]
.text:00008833                 mov     dx, [ecx+38h]
.text:00008837                 mov     eax, [ebp+var_10]
.text:0000883A                 mov     [eax+38h], dx
.text:0000883E                 mov     ecx, [ebp+var_10]
.text:00008841                 mov     edx, [ebp+arg_0]
.text:00008844                 mov     ax, [edx+3Ah]
.text:00008848                 mov     [ecx+3Ah], ax
.text:0000884C                 mov     ecx, [ebp+var_10]
.text:0000884F                 mov     edx, [ebp+arg_0]
.text:00008852                 mov     eax, [edx+3Ch]
.text:00008855                 mov     [ecx+3Ch], eax
.text:00008858                 mov     ecx, [ebp+var_10]
.text:0000885B                 mov     edx, [ebp+arg_0]
.text:0000885E                 mov     eax, [edx+40h]
.text:00008861                 mov     [ecx+40h], eax
.text:00008864                 mov     edx, [edx+44h]
.text:00008867                 mov     [ecx+44h], edx
.text:0000886A                 mov     eax, [ebp+arg_0]
.text:0000886D                 add     eax, 48h ; 'H'
.text:00008870                 push    eax             ; struct NArchive::NZip::CExtraBlock *
.text:00008871                 mov     ecx, [ebp+var_10]
.text:00008874                 add     ecx, 48h ; 'H'  ; this
.text:00008877                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:0000887C                 mov     byte ptr [ebp+var_4], 1
.text:00008880                 mov     ecx, [ebp+arg_0]
.text:00008883                 add     ecx, 54h ; 'T'
.text:00008886                 push    ecx
.text:00008887                 mov     ecx, [ebp+var_10]
.text:0000888A                 add     ecx, 54h ; 'T'
.text:0000888D                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:00008892                 mov     edx, [ebp+var_10]
.text:00008895                 mov     eax, [ebp+arg_0]
.text:00008898                 mov     cl, [eax+5Ch]
.text:0000889B                 mov     [edx+5Ch], cl
.text:0000889E                 mov     edx, [ebp+var_10]
.text:000088A1                 mov     eax, [ebp+arg_0]
.text:000088A4                 mov     cl, [eax+5Dh]
.text:000088A7                 mov     [edx+5Dh], cl
.text:000088AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000088B1                 mov     eax, [ebp+var_10]
.text:000088B4                 mov     ecx, [ebp+var_C]
.text:000088B7                 mov     large fs:0, ecx
.text:000088BE                 pop     ecx
.text:000088BF                 add     esp, 10h
.text:000088C2                 cmp     ebp, esp
.text:000088C4                 call    __RTC_CheckEsp
.text:000088C9                 mov     esp, ebp
.text:000088CB                 pop     ebp
.text:000088CC                 retn    4
.text:000088CC ??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:000088CC
.text:000088CC ; ---------------------------------------------------------------------------
.text:000088CF                 align 10h
.text:000088CF _text           ends
.text:000088CF
.text$x:000088D0 ; ===========================================================================
.text$x:000088D0
.text$x:000088D0 ; Segment type: Pure code
.text$x:000088D0 ; Segment permissions: Read/Execute
.text$x:000088D0 _text$x         segment para public 'CODE' use32
.text$x:000088D0                 assume cs:_text$x
.text$x:000088D0                 ;org 88D0h
.text$x:000088D0 ; COMDAT (pick associative to section at 87F0)
.text$x:000088D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000088D0
.text$x:000088D0 ; =============== S U B R O U T I N E =======================================
.text$x:000088D0
.text$x:000088D0
.text$x:000088D0 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:000088D0                                         ; DATA XREF: .xdata$x:00008904o
.text$x:000088D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000088D3                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:000088D3 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:000088D3
.text$x:000088D8
.text$x:000088D8 ; =============== S U B R O U T I N E =======================================
.text$x:000088D8
.text$x:000088D8
.text$x:000088D8 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 proc near
.text$x:000088D8                                         ; DATA XREF: .xdata$x:0000890Co
.text$x:000088D8                 mov     ecx, [ebp-10h]
.text$x:000088DB                 add     ecx, 48h ; 'H'  ; this
.text$x:000088DE                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:000088DE __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 endp
.text$x:000088DE
.text$x:000088E3
.text$x:000088E3 ; =============== S U B R O U T I N E =======================================
.text$x:000088E3
.text$x:000088E3
.text$x:000088E3 __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:000088E3                                         ; DATA XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+5o
.text$x:000088E3
.text$x:000088E3 arg_4           = dword ptr  8
.text$x:000088E3
.text$x:000088E3                 mov     edx, [esp+arg_4]
.text$x:000088E7                 lea     eax, [edx+0Ch]
.text$x:000088EA                 mov     ecx, [edx-8]
.text$x:000088ED                 xor     ecx, eax
.text$x:000088EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000088F4                 mov     eax, offset __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:000088F9                 jmp     ___CxxFrameHandler3
.text$x:000088F9 __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:000088F9
.text$x:000088F9 ; ---------------------------------------------------------------------------
.text$x:000088FE                 align 10h
.text$x:000088FE _text$x         ends
.text$x:000088FE
.xdata$x:00008900 ; ===========================================================================
.xdata$x:00008900
.xdata$x:00008900 ; Segment type: Pure data
.xdata$x:00008900 ; Segment permissions: Read
.xdata$x:00008900 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008900                 assume cs:_xdata$x
.xdata$x:00008900                 ;org 8900h
.xdata$x:00008900 ; COMDAT (pick associative to section at 87F0)
.xdata$x:00008900 __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:00008900                                         ; DATA XREF: .xdata$x:00008918o
.xdata$x:00008901                 db 0FFh
.xdata$x:00008902                 db 0FFh
.xdata$x:00008903                 db 0FFh
.xdata$x:00008904                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:00008908                 db    0
.xdata$x:00008909                 db    0
.xdata$x:0000890A                 db    0
.xdata$x:0000890B                 db    0
.xdata$x:0000890C                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
.xdata$x:00008910 __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00008910                                         ; DATA XREF: __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:00008911                 db    5
.xdata$x:00008912                 db  93h ; ô
.xdata$x:00008913                 db  19h
.xdata$x:00008914                 db    2
.xdata$x:00008915                 db    0
.xdata$x:00008916                 db    0
.xdata$x:00008917                 db    0
.xdata$x:00008918                 dd offset __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:0000891C                 db    0
.xdata$x:0000891D                 db    0
.xdata$x:0000891E                 db    0
.xdata$x:0000891F                 db    0
.xdata$x:00008920                 db    0
.xdata$x:00008921                 db    0
.xdata$x:00008922                 db    0
.xdata$x:00008923                 db    0
.xdata$x:00008924                 db    0
.xdata$x:00008925                 db    0
.xdata$x:00008926                 db    0
.xdata$x:00008927                 db    0
.xdata$x:00008928                 db    0
.xdata$x:00008929                 db    0
.xdata$x:0000892A                 db    0
.xdata$x:0000892B                 db    0
.xdata$x:0000892C                 db    0
.xdata$x:0000892D                 db    0
.xdata$x:0000892E                 db    0
.xdata$x:0000892F                 db    0
.xdata$x:00008930                 db    1
.xdata$x:00008931                 db    0
.xdata$x:00008932                 db    0
.xdata$x:00008933                 db    0
.xdata$x:00008933 _xdata$x        ends
.xdata$x:00008933
.text:00008934 ; ===========================================================================
.text:00008934
.text:00008934 ; Segment type: Pure code
.text:00008934 ; Segment permissions: Read/Execute
.text:00008934 _text           segment para public 'CODE' use32
.text:00008934                 assume cs:_text
.text:00008934                 ;org 8934h
.text:00008934 ; COMDAT (pick any)
.text:00008934                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008934
.text:00008934 ; =============== S U B R O U T I N E =======================================
.text:00008934
.text:00008934 ; Attributes: bp-based frame
.text:00008934
.text:00008934 ; public: struct NArchive::NZip::CBaseProps & __thiscall NArchive::NZip::CBaseProps::operator=(struct NArchive::NZip::CBaseProps const &)
.text:00008934                 public ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
.text:00008934 ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00008934                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::operator=(NArchive::NZip::CCompressionMethodMode const &)+15p
.text:00008934
.text:00008934 var_4           = dword ptr -4
.text:00008934 arg_0           = dword ptr  8
.text:00008934
.text:00008934                 push    ebp
.text:00008935                 mov     ebp, esp
.text:00008937                 push    ecx
.text:00008938                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000893F                 mov     [ebp+var_4], ecx
.text:00008942                 mov     eax, [ebp+arg_0]
.text:00008945                 push    eax
.text:00008946                 mov     ecx, [ebp+var_4]
.text:00008949                 call    ??4CMethodProps@@QAEAAV0@ABV0@@Z ; CMethodProps::operator=(CMethodProps const &)
.text:0000894E                 mov     ecx, [ebp+var_4]
.text:00008951                 mov     edx, [ebp+arg_0]
.text:00008954                 mov     eax, [edx+0Ch]
.text:00008957                 mov     [ecx+0Ch], eax
.text:0000895A                 mov     ecx, [ebp+var_4]
.text:0000895D                 mov     edx, [ebp+arg_0]
.text:00008960                 mov     eax, [edx+10h]
.text:00008963                 mov     [ecx+10h], eax
.text:00008966                 mov     ecx, [ebp+var_4]
.text:00008969                 mov     edx, [ebp+arg_0]
.text:0000896C                 mov     al, [edx+14h]
.text:0000896F                 mov     [ecx+14h], al
.text:00008972                 mov     ecx, [ebp+var_4]
.text:00008975                 mov     edx, [ebp+arg_0]
.text:00008978                 mov     al, [edx+15h]
.text:0000897B                 mov     [ecx+15h], al
.text:0000897E                 mov     ecx, [ebp+var_4]
.text:00008981                 mov     edx, [ebp+arg_0]
.text:00008984                 mov     al, [edx+16h]
.text:00008987                 mov     [ecx+16h], al
.text:0000898A                 mov     eax, [ebp+var_4]
.text:0000898D                 add     esp, 4
.text:00008990                 cmp     ebp, esp
.text:00008992                 call    __RTC_CheckEsp
.text:00008997                 mov     esp, ebp
.text:00008999                 pop     ebp
.text:0000899A                 retn    4
.text:0000899A ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z endp
.text:0000899A
.text:0000899A ; ---------------------------------------------------------------------------
.text:0000899D                 align 10h
.text:0000899D _text           ends
.text:0000899D
.text:000089A0 ; ===========================================================================
.text:000089A0
.text:000089A0 ; Segment type: Pure code
.text:000089A0 ; Segment permissions: Read/Execute
.text:000089A0 _text           segment para public 'CODE' use32
.text:000089A0                 assume cs:_text
.text:000089A0                 ;org 89A0h
.text:000089A0 ; COMDAT (pick any)
.text:000089A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000089A0
.text:000089A0 ; =============== S U B R O U T I N E =======================================
.text:000089A0
.text:000089A0 ; Attributes: bp-based frame
.text:000089A0
.text:000089A0 ; _DWORD __thiscall NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem *this, const struct NArchive::NZip::CLocalItem *)
.text:000089A0                 public ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000089A0 ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:000089A0                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+34p
.text:000089A0
.text:000089A0 var_10          = dword ptr -10h
.text:000089A0 var_C           = dword ptr -0Ch
.text:000089A0 var_4           = dword ptr -4
.text:000089A0 arg_0           = dword ptr  8
.text:000089A0
.text:000089A0                 push    ebp
.text:000089A1                 mov     ebp, esp
.text:000089A3                 push    0FFFFFFFFh
.text:000089A5                 push    offset __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000089AA                 mov     eax, large fs:0
.text:000089B0                 push    eax
.text:000089B1                 push    ecx
.text:000089B2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000089B9                 mov     eax, dword ptr ds:___security_cookie
.text:000089BE                 xor     eax, ebp
.text:000089C0                 push    eax
.text:000089C1                 lea     eax, [ebp+var_C]
.text:000089C4                 mov     large fs:0, eax
.text:000089CA                 mov     [ebp+var_10], ecx
.text:000089CD                 mov     eax, [ebp+var_10]
.text:000089D0                 mov     ecx, [ebp+arg_0]
.text:000089D3                 mov     dx, [ecx]
.text:000089D6                 mov     [eax], dx
.text:000089D9                 mov     eax, [ebp+var_10]
.text:000089DC                 mov     ecx, [ebp+arg_0]
.text:000089DF                 mov     dx, [ecx+2]
.text:000089E3                 mov     [eax+2], dx
.text:000089E7                 mov     eax, [ebp+arg_0]
.text:000089EA                 mov     cx, [eax+4]
.text:000089EE                 mov     edx, [ebp+var_10]
.text:000089F1                 mov     [edx+4], cx
.text:000089F5                 mov     eax, [ebp+var_10]
.text:000089F8                 mov     ecx, [ebp+arg_0]
.text:000089FB                 mov     edx, [ecx+8]
.text:000089FE                 mov     [eax+8], edx
.text:00008A01                 mov     ecx, [ecx+0Ch]
.text:00008A04                 mov     [eax+0Ch], ecx
.text:00008A07                 mov     edx, [ebp+var_10]
.text:00008A0A                 mov     eax, [ebp+arg_0]
.text:00008A0D                 mov     ecx, [eax+10h]
.text:00008A10                 mov     [edx+10h], ecx
.text:00008A13                 mov     eax, [eax+14h]
.text:00008A16                 mov     [edx+14h], eax
.text:00008A19                 mov     ecx, [ebp+var_10]
.text:00008A1C                 mov     edx, [ebp+arg_0]
.text:00008A1F                 mov     eax, [edx+18h]
.text:00008A22                 mov     [ecx+18h], eax
.text:00008A25                 mov     ecx, [ebp+var_10]
.text:00008A28                 mov     edx, [ebp+arg_0]
.text:00008A2B                 mov     eax, [edx+1Ch]
.text:00008A2E                 mov     [ecx+1Ch], eax
.text:00008A31                 mov     ecx, [ebp+arg_0]
.text:00008A34                 add     ecx, 20h ; ' '
.text:00008A37                 push    ecx
.text:00008A38                 mov     ecx, [ebp+var_10]
.text:00008A3B                 add     ecx, 20h ; ' '
.text:00008A3E                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00008A43                 mov     [ebp+var_4], 0
.text:00008A4A                 mov     edx, [ebp+arg_0]
.text:00008A4D                 add     edx, 2Ch ; ','
.text:00008A50                 push    edx             ; struct NArchive::NZip::CExtraBlock *
.text:00008A51                 mov     ecx, [ebp+var_10]
.text:00008A54                 add     ecx, 2Ch ; ','  ; this
.text:00008A57                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:00008A5C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008A63                 mov     eax, [ebp+var_10]
.text:00008A66                 mov     ecx, [ebp+var_C]
.text:00008A69                 mov     large fs:0, ecx
.text:00008A70                 pop     ecx
.text:00008A71                 add     esp, 10h
.text:00008A74                 cmp     ebp, esp
.text:00008A76                 call    __RTC_CheckEsp
.text:00008A7B                 mov     esp, ebp
.text:00008A7D                 pop     ebp
.text:00008A7E                 retn    4
.text:00008A7E ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:00008A7E
.text:00008A7E ; ---------------------------------------------------------------------------
.text:00008A81                 align 4
.text:00008A81 _text           ends
.text:00008A81
.text$x:00008A84 ; ===========================================================================
.text$x:00008A84
.text$x:00008A84 ; Segment type: Pure code
.text$x:00008A84 ; Segment permissions: Read/Execute
.text$x:00008A84 _text$x         segment para public 'CODE' use32
.text$x:00008A84                 assume cs:_text$x
.text$x:00008A84                 ;org 8A84h
.text$x:00008A84 ; COMDAT (pick associative to section at 89A0)
.text$x:00008A84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008A84
.text$x:00008A84 ; =============== S U B R O U T I N E =======================================
.text$x:00008A84
.text$x:00008A84
.text$x:00008A84 __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:00008A84                                         ; DATA XREF: .xdata$x:00008AB0o
.text$x:00008A84                 mov     ecx, [ebp-10h]
.text$x:00008A87                 add     ecx, 20h ; ' '  ; this
.text$x:00008A8A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00008A8A __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:00008A8A
.text$x:00008A8F
.text$x:00008A8F ; =============== S U B R O U T I N E =======================================
.text$x:00008A8F
.text$x:00008A8F
.text$x:00008A8F __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:00008A8F                                         ; DATA XREF: NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+5o
.text$x:00008A8F
.text$x:00008A8F arg_4           = dword ptr  8
.text$x:00008A8F
.text$x:00008A8F                 mov     edx, [esp+arg_4]
.text$x:00008A93                 lea     eax, [edx+0Ch]
.text$x:00008A96                 mov     ecx, [edx-8]
.text$x:00008A99                 xor     ecx, eax
.text$x:00008A9B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008AA0                 mov     eax, offset __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:00008AA5                 jmp     ___CxxFrameHandler3
.text$x:00008AA5 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:00008AA5
.text$x:00008AA5 ; ---------------------------------------------------------------------------
.text$x:00008AAA                 align 4
.text$x:00008AAA _text$x         ends
.text$x:00008AAA
.xdata$x:00008AAC ; ===========================================================================
.xdata$x:00008AAC
.xdata$x:00008AAC ; Segment type: Pure data
.xdata$x:00008AAC ; Segment permissions: Read
.xdata$x:00008AAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008AAC                 assume cs:_xdata$x
.xdata$x:00008AAC                 ;org 8AACh
.xdata$x:00008AAC ; COMDAT (pick associative to section at 89A0)
.xdata$x:00008AAC __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:00008AAC                                         ; DATA XREF: .xdata$x:00008ABCo
.xdata$x:00008AAD                 db 0FFh
.xdata$x:00008AAE                 db 0FFh
.xdata$x:00008AAF                 db 0FFh
.xdata$x:00008AB0                 dd offset __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:00008AB4 __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00008AB4                                         ; DATA XREF: __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:00008AB5                 db    5
.xdata$x:00008AB6                 db  93h ; ô
.xdata$x:00008AB7                 db  19h
.xdata$x:00008AB8                 db    1
.xdata$x:00008AB9                 db    0
.xdata$x:00008ABA                 db    0
.xdata$x:00008ABB                 db    0
.xdata$x:00008ABC                 dd offset __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:00008AC0                 db    0
.xdata$x:00008AC1                 db    0
.xdata$x:00008AC2                 db    0
.xdata$x:00008AC3                 db    0
.xdata$x:00008AC4                 db    0
.xdata$x:00008AC5                 db    0
.xdata$x:00008AC6                 db    0
.xdata$x:00008AC7                 db    0
.xdata$x:00008AC8                 db    0
.xdata$x:00008AC9                 db    0
.xdata$x:00008ACA                 db    0
.xdata$x:00008ACB                 db    0
.xdata$x:00008ACC                 db    0
.xdata$x:00008ACD                 db    0
.xdata$x:00008ACE                 db    0
.xdata$x:00008ACF                 db    0
.xdata$x:00008AD0                 db    0
.xdata$x:00008AD1                 db    0
.xdata$x:00008AD2                 db    0
.xdata$x:00008AD3                 db    0
.xdata$x:00008AD4                 db    1
.xdata$x:00008AD5                 db    0
.xdata$x:00008AD6                 db    0
.xdata$x:00008AD7                 db    0
.xdata$x:00008AD7 _xdata$x        ends
.xdata$x:00008AD7
.text:00008AD8 ; ===========================================================================
.text:00008AD8
.text:00008AD8 ; Segment type: Pure code
.text:00008AD8 ; Segment permissions: Read/Execute
.text:00008AD8 _text           segment para public 'CODE' use32
.text:00008AD8                 assume cs:_text
.text:00008AD8                 ;org 8AD8h
.text:00008AD8 ; COMDAT (pick any)
.text:00008AD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008AD8
.text:00008AD8 ; =============== S U B R O U T I N E =======================================
.text:00008AD8
.text:00008AD8 ; Attributes: bp-based frame
.text:00008AD8
.text:00008AD8 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock *this, const struct NArchive::NZip::CExtraBlock *)
.text:00008AD8                 public ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:00008AD8 ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00008AD8                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+87p
.text:00008AD8                                         ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+B7p
.text:00008AD8
.text:00008AD8 var_4           = dword ptr -4
.text:00008AD8 arg_0           = dword ptr  8
.text:00008AD8
.text:00008AD8                 push    ebp
.text:00008AD9                 mov     ebp, esp
.text:00008ADB                 push    ecx
.text:00008ADC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AE3                 mov     [ebp+var_4], ecx
.text:00008AE6                 mov     eax, [ebp+arg_0]
.text:00008AE9                 push    eax
.text:00008AEA                 mov     ecx, [ebp+var_4]
.text:00008AED                 call    ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)
.text:00008AF2                 mov     eax, [ebp+var_4]
.text:00008AF5                 add     esp, 4
.text:00008AF8                 cmp     ebp, esp
.text:00008AFA                 call    __RTC_CheckEsp
.text:00008AFF                 mov     esp, ebp
.text:00008B01                 pop     ebp
.text:00008B02                 retn    4
.text:00008B02 ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00008B02
.text:00008B02 ; ---------------------------------------------------------------------------
.text:00008B05                 align 4
.text:00008B05 _text           ends
.text:00008B05
.text:00008B08 ; ===========================================================================
.text:00008B08
.text:00008B08 ; Segment type: Pure code
.text:00008B08 ; Segment permissions: Read/Execute
.text:00008B08 _text           segment para public 'CODE' use32
.text:00008B08                 assume cs:_text
.text:00008B08                 ;org 8B08h
.text:00008B08 ; COMDAT (pick any)
.text:00008B08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008B08
.text:00008B08 ; =============== S U B R O U T I N E =======================================
.text:00008B08
.text:00008B08 ; Attributes: bp-based frame
.text:00008B08
.text:00008B08 ; public: class CMethodProps & __thiscall CMethodProps::operator=(class CMethodProps const &)
.text:00008B08                 public ??4CMethodProps@@QAEAAV0@ABV0@@Z
.text:00008B08 ??4CMethodProps@@QAEAAV0@ABV0@@Z proc near
.text:00008B08                                         ; CODE XREF: NArchive::NZip::CBaseProps::operator=(NArchive::NZip::CBaseProps const &)+15p
.text:00008B08
.text:00008B08 var_4           = dword ptr -4
.text:00008B08 arg_0           = dword ptr  8
.text:00008B08
.text:00008B08                 push    ebp
.text:00008B09                 mov     ebp, esp
.text:00008B0B                 push    ecx
.text:00008B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B13                 mov     [ebp+var_4], ecx
.text:00008B16                 mov     eax, [ebp+arg_0]
.text:00008B19                 push    eax
.text:00008B1A                 mov     ecx, [ebp+var_4]
.text:00008B1D                 call    ??4CProps@@QAEAAU0@ABU0@@Z ; CProps::operator=(CProps const &)
.text:00008B22                 mov     eax, [ebp+var_4]
.text:00008B25                 add     esp, 4
.text:00008B28                 cmp     ebp, esp
.text:00008B2A                 call    __RTC_CheckEsp
.text:00008B2F                 mov     esp, ebp
.text:00008B31                 pop     ebp
.text:00008B32                 retn    4
.text:00008B32 ??4CMethodProps@@QAEAAV0@ABV0@@Z endp
.text:00008B32
.text:00008B32 ; ---------------------------------------------------------------------------
.text:00008B35                 align 4
.text:00008B35 _text           ends
.text:00008B35
.text:00008B38 ; ===========================================================================
.text:00008B38
.text:00008B38 ; Segment type: Pure code
.text:00008B38 ; Segment permissions: Read/Execute
.text:00008B38 _text           segment para public 'CODE' use32
.text:00008B38                 assume cs:_text
.text:00008B38                 ;org 8B38h
.text:00008B38 ; COMDAT (pick any)
.text:00008B38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008B38
.text:00008B38 ; =============== S U B R O U T I N E =======================================
.text:00008B38
.text:00008B38 ; Attributes: bp-based frame
.text:00008B38
.text:00008B38 ; public: struct CProps & __thiscall CProps::operator=(struct CProps const &)
.text:00008B38                 public ??4CProps@@QAEAAU0@ABU0@@Z
.text:00008B38 ??4CProps@@QAEAAU0@ABU0@@Z proc near    ; CODE XREF: CMethodProps::operator=(CMethodProps const &)+15p
.text:00008B38
.text:00008B38 var_4           = dword ptr -4
.text:00008B38 arg_0           = dword ptr  8
.text:00008B38
.text:00008B38                 push    ebp
.text:00008B39                 mov     ebp, esp
.text:00008B3B                 push    ecx
.text:00008B3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B43                 mov     [ebp+var_4], ecx
.text:00008B46                 mov     eax, [ebp+arg_0]
.text:00008B49                 push    eax
.text:00008B4A                 mov     ecx, [ebp+var_4]
.text:00008B4D                 call    ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)
.text:00008B52                 mov     eax, [ebp+var_4]
.text:00008B55                 add     esp, 4
.text:00008B58                 cmp     ebp, esp
.text:00008B5A                 call    __RTC_CheckEsp
.text:00008B5F                 mov     esp, ebp
.text:00008B61                 pop     ebp
.text:00008B62                 retn    4
.text:00008B62 ??4CProps@@QAEAAU0@ABU0@@Z endp
.text:00008B62
.text:00008B62 ; ---------------------------------------------------------------------------
.text:00008B65                 align 4
.text:00008B65 _text           ends
.text:00008B65
.text:00008B68 ; ===========================================================================
.text:00008B68
.text:00008B68 ; Segment type: Pure code
.text:00008B68 ; Segment permissions: Read/Execute
.text:00008B68 _text           segment para public 'CODE' use32
.text:00008B68                 assume cs:_text
.text:00008B68                 ;org 8B68h
.text:00008B68 ; COMDAT (pick any)
.text:00008B68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008B68
.text:00008B68 ; =============== S U B R O U T I N E =======================================
.text:00008B68
.text:00008B68 ; Attributes: bp-based frame
.text:00008B68
.text:00008B68 ; _DWORD __thiscall NArchive::NZip::CCacheOutStream::CCacheOutStream(NArchive::NZip::CCacheOutStream *__hidden this)
.text:00008B68                 public ??0CCacheOutStream@NZip@NArchive@@QAE@XZ
.text:00008B68 ??0CCacheOutStream@NZip@NArchive@@QAE@XZ proc near
.text:00008B68                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+210p
.text:00008B68
.text:00008B68 var_4           = dword ptr -4
.text:00008B68
.text:00008B68                 push    ebp
.text:00008B69                 mov     ebp, esp
.text:00008B6B                 push    ecx
.text:00008B6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B73                 mov     [ebp+var_4], ecx
.text:00008B76                 mov     ecx, [ebp+var_4] ; this
.text:00008B79                 call    ??0IOutStream@@QAE@XZ ; IOutStream::IOutStream(void)
.text:00008B7E                 mov     ecx, [ebp+var_4]
.text:00008B81                 add     ecx, 4          ; this
.text:00008B84                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00008B89                 mov     eax, [ebp+var_4]
.text:00008B8C                 mov     dword ptr [eax], offset ??_7CCacheOutStream@NZip@NArchive@@6B@ ; const NArchive::NZip::CCacheOutStream::`vftable'
.text:00008B92                 mov     ecx, [ebp+var_4]
.text:00008B95                 add     ecx, 8
.text:00008B98                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00008B9D                 mov     ecx, [ebp+var_4]
.text:00008BA0                 mov     dword ptr [ecx+0Ch], 0
.text:00008BA7                 mov     eax, [ebp+var_4]
.text:00008BAA                 add     esp, 4
.text:00008BAD                 cmp     ebp, esp
.text:00008BAF                 call    __RTC_CheckEsp
.text:00008BB4                 mov     esp, ebp
.text:00008BB6                 pop     ebp
.text:00008BB7                 retn
.text:00008BB7 ??0CCacheOutStream@NZip@NArchive@@QAE@XZ endp
.text:00008BB7
.text:00008BB7 _text           ends
.text:00008BB7
.text:00008BB8 ; ===========================================================================
.text:00008BB8
.text:00008BB8 ; Segment type: Pure code
.text:00008BB8 ; Segment permissions: Read/Execute
.text:00008BB8 _text           segment para public 'CODE' use32
.text:00008BB8                 assume cs:_text
.text:00008BB8                 ;org 8BB8h
.text:00008BB8 ; COMDAT (pick any)
.text:00008BB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008BB8
.text:00008BB8 ; =============== S U B R O U T I N E =======================================
.text:00008BB8
.text:00008BB8 ; Attributes: bp-based frame
.text:00008BB8
.text:00008BB8 ; _DWORD __thiscall NArchive::NZip::COutArchive::COutArchive(NArchive::NZip::COutArchive *__hidden this)
.text:00008BB8                 public ??0COutArchive@NZip@NArchive@@QAE@XZ
.text:00008BB8 ??0COutArchive@NZip@NArchive@@QAE@XZ proc near
.text:00008BB8                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+2E6p
.text:00008BB8
.text:00008BB8 var_10          = dword ptr -10h
.text:00008BB8 var_C           = dword ptr -0Ch
.text:00008BB8 var_4           = dword ptr -4
.text:00008BB8
.text:00008BB8                 push    ebp
.text:00008BB9                 mov     ebp, esp
.text:00008BBB                 push    0FFFFFFFFh
.text:00008BBD                 push    offset __ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ
.text:00008BC2                 mov     eax, large fs:0
.text:00008BC8                 push    eax
.text:00008BC9                 push    ecx
.text:00008BCA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008BD1                 mov     eax, dword ptr ds:___security_cookie
.text:00008BD6                 xor     eax, ebp
.text:00008BD8                 push    eax
.text:00008BD9                 lea     eax, [ebp+var_C]
.text:00008BDC                 mov     large fs:0, eax
.text:00008BE2                 mov     [ebp+var_10], ecx
.text:00008BE5                 mov     ecx, [ebp+var_10]
.text:00008BE8                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:00008BED                 mov     [ebp+var_4], 0
.text:00008BF4                 mov     ecx, [ebp+var_10]
.text:00008BF7                 add     ecx, 8          ; this
.text:00008BFA                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00008BFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008C06                 mov     eax, [ebp+var_10]
.text:00008C09                 mov     ecx, [ebp+var_C]
.text:00008C0C                 mov     large fs:0, ecx
.text:00008C13                 pop     ecx
.text:00008C14                 add     esp, 10h
.text:00008C17                 cmp     ebp, esp
.text:00008C19                 call    __RTC_CheckEsp
.text:00008C1E                 mov     esp, ebp
.text:00008C20                 pop     ebp
.text:00008C21                 retn
.text:00008C21 ??0COutArchive@NZip@NArchive@@QAE@XZ endp
.text:00008C21
.text:00008C21 ; ---------------------------------------------------------------------------
.text:00008C22                 align 4
.text:00008C22 _text           ends
.text:00008C22
.text$x:00008C24 ; ===========================================================================
.text$x:00008C24
.text$x:00008C24 ; Segment type: Pure code
.text$x:00008C24 ; Segment permissions: Read/Execute
.text$x:00008C24 _text$x         segment para public 'CODE' use32
.text$x:00008C24                 assume cs:_text$x
.text$x:00008C24                 ;org 8C24h
.text$x:00008C24 ; COMDAT (pick associative to section at 8BB8)
.text$x:00008C24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008C24
.text$x:00008C24 ; =============== S U B R O U T I N E =======================================
.text$x:00008C24
.text$x:00008C24
.text$x:00008C24 __unwindfunclet$??0COutArchive@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00008C24                                         ; DATA XREF: .xdata$x:00008C4Co
.text$x:00008C24                 mov     ecx, [ebp-10h]
.text$x:00008C27                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00008C27 __unwindfunclet$??0COutArchive@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00008C27
.text$x:00008C2C
.text$x:00008C2C ; =============== S U B R O U T I N E =======================================
.text$x:00008C2C
.text$x:00008C2C
.text$x:00008C2C __ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ proc near
.text$x:00008C2C                                         ; DATA XREF: NArchive::NZip::COutArchive::COutArchive(void)+5o
.text$x:00008C2C
.text$x:00008C2C arg_4           = dword ptr  8
.text$x:00008C2C
.text$x:00008C2C                 mov     edx, [esp+arg_4]
.text$x:00008C30                 lea     eax, [edx+0Ch]
.text$x:00008C33                 mov     ecx, [edx-8]
.text$x:00008C36                 xor     ecx, eax
.text$x:00008C38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C3D                 mov     eax, offset __ehfuncinfo$??0COutArchive@NZip@NArchive@@QAE@XZ
.text$x:00008C42                 jmp     ___CxxFrameHandler3
.text$x:00008C42 __ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ endp
.text$x:00008C42
.text$x:00008C42 ; ---------------------------------------------------------------------------
.text$x:00008C47                 align 4
.text$x:00008C47 _text$x         ends
.text$x:00008C47
.xdata$x:00008C48 ; ===========================================================================
.xdata$x:00008C48
.xdata$x:00008C48 ; Segment type: Pure data
.xdata$x:00008C48 ; Segment permissions: Read
.xdata$x:00008C48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008C48                 assume cs:_xdata$x
.xdata$x:00008C48                 ;org 8C48h
.xdata$x:00008C48 ; COMDAT (pick associative to section at 8BB8)
.xdata$x:00008C48 __unwindtable$??0COutArchive@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008C48                                         ; DATA XREF: .xdata$x:00008C58o
.xdata$x:00008C49                 db 0FFh
.xdata$x:00008C4A                 db 0FFh
.xdata$x:00008C4B                 db 0FFh
.xdata$x:00008C4C                 dd offset __unwindfunclet$??0COutArchive@NZip@NArchive@@QAE@XZ$0
.xdata$x:00008C50 __ehfuncinfo$??0COutArchive@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008C50                                         ; DATA XREF: __ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008C51                 db    5
.xdata$x:00008C52                 db  93h ; ô
.xdata$x:00008C53                 db  19h
.xdata$x:00008C54                 db    1
.xdata$x:00008C55                 db    0
.xdata$x:00008C56                 db    0
.xdata$x:00008C57                 db    0
.xdata$x:00008C58                 dd offset __unwindtable$??0COutArchive@NZip@NArchive@@QAE@XZ
.xdata$x:00008C5C                 db    0
.xdata$x:00008C5D                 db    0
.xdata$x:00008C5E                 db    0
.xdata$x:00008C5F                 db    0
.xdata$x:00008C60                 db    0
.xdata$x:00008C61                 db    0
.xdata$x:00008C62                 db    0
.xdata$x:00008C63                 db    0
.xdata$x:00008C64                 db    0
.xdata$x:00008C65                 db    0
.xdata$x:00008C66                 db    0
.xdata$x:00008C67                 db    0
.xdata$x:00008C68                 db    0
.xdata$x:00008C69                 db    0
.xdata$x:00008C6A                 db    0
.xdata$x:00008C6B                 db    0
.xdata$x:00008C6C                 db    0
.xdata$x:00008C6D                 db    0
.xdata$x:00008C6E                 db    0
.xdata$x:00008C6F                 db    0
.xdata$x:00008C70                 db    1
.xdata$x:00008C71                 db    0
.xdata$x:00008C72                 db    0
.xdata$x:00008C73                 db    0
.xdata$x:00008C73 _xdata$x        ends
.xdata$x:00008C73
.text:00008C74 ; ===========================================================================
.text:00008C74
.text:00008C74 ; Segment type: Pure code
.text:00008C74 ; Segment permissions: Read/Execute
.text:00008C74 _text           segment para public 'CODE' use32
.text:00008C74                 assume cs:_text
.text:00008C74                 ;org 8C74h
.text:00008C74 ; COMDAT (pick any)
.text:00008C74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008C74
.text:00008C74 ; =============== S U B R O U T I N E =======================================
.text:00008C74
.text:00008C74 ; Attributes: bp-based frame
.text:00008C74
.text:00008C74 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00008C74                 public ??0COutBuffer@@QAE@XZ
.text:00008C74 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::COutArchive::COutArchive(void)+42p
.text:00008C74
.text:00008C74 var_4           = dword ptr -4
.text:00008C74
.text:00008C74                 push    ebp
.text:00008C75                 mov     ebp, esp
.text:00008C77                 push    ecx
.text:00008C78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C7F                 mov     [ebp+var_4], ecx
.text:00008C82                 mov     eax, [ebp+var_4]
.text:00008C85                 mov     dword ptr [eax], 0
.text:00008C8B                 mov     ecx, [ebp+var_4]
.text:00008C8E                 mov     dword ptr [ecx+4], 0
.text:00008C95                 mov     edx, [ebp+var_4]
.text:00008C98                 mov     dword ptr [edx+14h], 0
.text:00008C9F                 mov     eax, [ebp+var_4]
.text:00008CA2                 mov     dword ptr [eax+20h], 0
.text:00008CA9                 mov     eax, [ebp+var_4]
.text:00008CAC                 mov     esp, ebp
.text:00008CAE                 pop     ebp
.text:00008CAF                 retn
.text:00008CAF ??0COutBuffer@@QAE@XZ endp
.text:00008CAF
.text:00008CAF _text           ends
.text:00008CAF
.text:00008CB0 ; ===========================================================================
.text:00008CB0
.text:00008CB0 ; Segment type: Pure code
.text:00008CB0 ; Segment permissions: Read/Execute
.text:00008CB0 _text           segment para public 'CODE' use32
.text:00008CB0                 assume cs:_text
.text:00008CB0                 ;org 8CB0h
.text:00008CB0 ; COMDAT (pick any)
.text:00008CB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008CB0
.text:00008CB0 ; =============== S U B R O U T I N E =======================================
.text:00008CB0
.text:00008CB0 ; Attributes: bp-based frame
.text:00008CB0
.text:00008CB0 ; _DWORD __thiscall NArchive::NZip::COutArchive::~COutArchive(NArchive::NZip::COutArchive *__hidden this)
.text:00008CB0                 public ??1COutArchive@NZip@NArchive@@QAE@XZ
.text:00008CB0 ??1COutArchive@NZip@NArchive@@QAE@XZ proc near
.text:00008CB0                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+328p
.text:00008CB0                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+3FAp ...
.text:00008CB0
.text:00008CB0 var_10          = dword ptr -10h
.text:00008CB0 var_C           = dword ptr -0Ch
.text:00008CB0 var_4           = dword ptr -4
.text:00008CB0
.text:00008CB0                 push    ebp
.text:00008CB1                 mov     ebp, esp
.text:00008CB3                 push    0FFFFFFFFh
.text:00008CB5                 push    offset __ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ
.text:00008CBA                 mov     eax, large fs:0
.text:00008CC0                 push    eax
.text:00008CC1                 push    ecx
.text:00008CC2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008CC9                 mov     eax, dword ptr ds:___security_cookie
.text:00008CCE                 xor     eax, ebp
.text:00008CD0                 push    eax
.text:00008CD1                 lea     eax, [ebp+var_C]
.text:00008CD4                 mov     large fs:0, eax
.text:00008CDA                 mov     [ebp+var_10], ecx
.text:00008CDD                 mov     [ebp+var_4], 0
.text:00008CE4                 mov     ecx, [ebp+var_10]
.text:00008CE7                 add     ecx, 8          ; this
.text:00008CEA                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00008CEF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008CF6                 mov     ecx, [ebp+var_10]
.text:00008CF9                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00008CFE                 mov     ecx, [ebp+var_C]
.text:00008D01                 mov     large fs:0, ecx
.text:00008D08                 pop     ecx
.text:00008D09                 add     esp, 10h
.text:00008D0C                 cmp     ebp, esp
.text:00008D0E                 call    __RTC_CheckEsp
.text:00008D13                 mov     esp, ebp
.text:00008D15                 pop     ebp
.text:00008D16                 retn
.text:00008D16 ??1COutArchive@NZip@NArchive@@QAE@XZ endp
.text:00008D16
.text:00008D16 ; ---------------------------------------------------------------------------
.text:00008D17                 align 4
.text:00008D17 _text           ends
.text:00008D17
.text$x:00008D18 ; ===========================================================================
.text$x:00008D18
.text$x:00008D18 ; Segment type: Pure code
.text$x:00008D18 ; Segment permissions: Read/Execute
.text$x:00008D18 _text$x         segment para public 'CODE' use32
.text$x:00008D18                 assume cs:_text$x
.text$x:00008D18                 ;org 8D18h
.text$x:00008D18 ; COMDAT (pick associative to section at 8CB0)
.text$x:00008D18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008D18
.text$x:00008D18 ; =============== S U B R O U T I N E =======================================
.text$x:00008D18
.text$x:00008D18
.text$x:00008D18 __unwindfunclet$??1COutArchive@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00008D18                                         ; DATA XREF: .xdata$x:00008D40o
.text$x:00008D18                 mov     ecx, [ebp-10h]
.text$x:00008D1B                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:00008D1B __unwindfunclet$??1COutArchive@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00008D1B
.text$x:00008D20
.text$x:00008D20 ; =============== S U B R O U T I N E =======================================
.text$x:00008D20
.text$x:00008D20
.text$x:00008D20 __ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ proc near
.text$x:00008D20                                         ; DATA XREF: NArchive::NZip::COutArchive::~COutArchive(void)+5o
.text$x:00008D20
.text$x:00008D20 arg_4           = dword ptr  8
.text$x:00008D20
.text$x:00008D20                 mov     edx, [esp+arg_4]
.text$x:00008D24                 lea     eax, [edx+0Ch]
.text$x:00008D27                 mov     ecx, [edx-8]
.text$x:00008D2A                 xor     ecx, eax
.text$x:00008D2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008D31                 mov     eax, offset __ehfuncinfo$??1COutArchive@NZip@NArchive@@QAE@XZ
.text$x:00008D36                 jmp     ___CxxFrameHandler3
.text$x:00008D36 __ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ endp
.text$x:00008D36
.text$x:00008D36 ; ---------------------------------------------------------------------------
.text$x:00008D3B                 align 4
.text$x:00008D3B _text$x         ends
.text$x:00008D3B
.xdata$x:00008D3C ; ===========================================================================
.xdata$x:00008D3C
.xdata$x:00008D3C ; Segment type: Pure data
.xdata$x:00008D3C ; Segment permissions: Read
.xdata$x:00008D3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008D3C                 assume cs:_xdata$x
.xdata$x:00008D3C                 ;org 8D3Ch
.xdata$x:00008D3C ; COMDAT (pick associative to section at 8CB0)
.xdata$x:00008D3C __unwindtable$??1COutArchive@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008D3C                                         ; DATA XREF: .xdata$x:00008D4Co
.xdata$x:00008D3D                 db 0FFh
.xdata$x:00008D3E                 db 0FFh
.xdata$x:00008D3F                 db 0FFh
.xdata$x:00008D40                 dd offset __unwindfunclet$??1COutArchive@NZip@NArchive@@QAE@XZ$0
.xdata$x:00008D44 __ehfuncinfo$??1COutArchive@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008D44                                         ; DATA XREF: __ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008D45                 db    5
.xdata$x:00008D46                 db  93h ; ô
.xdata$x:00008D47                 db  19h
.xdata$x:00008D48                 db    1
.xdata$x:00008D49                 db    0
.xdata$x:00008D4A                 db    0
.xdata$x:00008D4B                 db    0
.xdata$x:00008D4C                 dd offset __unwindtable$??1COutArchive@NZip@NArchive@@QAE@XZ
.xdata$x:00008D50                 db    0
.xdata$x:00008D51                 db    0
.xdata$x:00008D52                 db    0
.xdata$x:00008D53                 db    0
.xdata$x:00008D54                 db    0
.xdata$x:00008D55                 db    0
.xdata$x:00008D56                 db    0
.xdata$x:00008D57                 db    0
.xdata$x:00008D58                 db    0
.xdata$x:00008D59                 db    0
.xdata$x:00008D5A                 db    0
.xdata$x:00008D5B                 db    0
.xdata$x:00008D5C                 db    0
.xdata$x:00008D5D                 db    0
.xdata$x:00008D5E                 db    0
.xdata$x:00008D5F                 db    0
.xdata$x:00008D60                 db    0
.xdata$x:00008D61                 db    0
.xdata$x:00008D62                 db    0
.xdata$x:00008D63                 db    0
.xdata$x:00008D64                 db    1
.xdata$x:00008D65                 db    0
.xdata$x:00008D66                 db    0
.xdata$x:00008D67                 db    0
.xdata$x:00008D67 _xdata$x        ends
.xdata$x:00008D67
.text:00008D68 ; ===========================================================================
.text:00008D68
.text:00008D68 ; Segment type: Pure code
.text:00008D68 ; Segment permissions: Read/Execute
.text:00008D68 _text           segment para public 'CODE' use32
.text:00008D68                 assume cs:_text
.text:00008D68                 ;org 8D68h
.text:00008D68 ; COMDAT (pick any)
.text:00008D68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008D68
.text:00008D68 ; =============== S U B R O U T I N E =======================================
.text:00008D68
.text:00008D68 ; Attributes: bp-based frame
.text:00008D68
.text:00008D68 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00008D68                 public ??1COutBuffer@@QAE@XZ
.text:00008D68 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::COutArchive::~COutArchive(void)+3Ap
.text:00008D68
.text:00008D68 var_4           = dword ptr -4
.text:00008D68
.text:00008D68                 push    ebp
.text:00008D69                 mov     ebp, esp
.text:00008D6B                 push    ecx
.text:00008D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D73                 mov     [ebp+var_4], ecx
.text:00008D76                 mov     ecx, [ebp+var_4] ; this
.text:00008D79                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00008D7E                 add     esp, 4
.text:00008D81                 cmp     ebp, esp
.text:00008D83                 call    __RTC_CheckEsp
.text:00008D88                 mov     esp, ebp
.text:00008D8A                 pop     ebp
.text:00008D8B                 retn
.text:00008D8B ??1COutBuffer@@QAE@XZ endp
.text:00008D8B
.text:00008D8B _text           ends
.text:00008D8B
.text:00008D8C ; ===========================================================================
.text:00008D8C
.text:00008D8C ; Segment type: Pure code
.text:00008D8C ; Segment permissions: Read/Execute
.text:00008D8C _text           segment para public 'CODE' use32
.text:00008D8C                 assume cs:_text
.text:00008D8C                 ;org 8D8Ch
.text:00008D8C ; COMDAT (pick any)
.text:00008D8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008D8C
.text:00008D8C ; =============== S U B R O U T I N E =======================================
.text:00008D8C
.text:00008D8C ; Attributes: bp-based frame
.text:00008D8C
.text:00008D8C ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008D8C                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00008D8C ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00008D8C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+679p
.text:00008D8C                                         ; CMemBlocks::CMemBlocks(void)+11p ...
.text:00008D8C
.text:00008D8C var_4           = dword ptr -4
.text:00008D8C
.text:00008D8C                 push    ebp
.text:00008D8D                 mov     ebp, esp
.text:00008D8F                 push    ecx
.text:00008D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D97                 mov     [ebp+var_4], ecx
.text:00008D9A                 mov     eax, [ebp+var_4]
.text:00008D9D                 mov     dword ptr [eax], 0
.text:00008DA3                 mov     ecx, [ebp+var_4]
.text:00008DA6                 mov     dword ptr [ecx+4], 0
.text:00008DAD                 mov     edx, [ebp+var_4]
.text:00008DB0                 mov     dword ptr [edx+8], 0
.text:00008DB7                 mov     eax, [ebp+var_4]
.text:00008DBA                 mov     esp, ebp
.text:00008DBC                 pop     ebp
.text:00008DBD                 retn
.text:00008DBD ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00008DBD
.text:00008DBD ; ---------------------------------------------------------------------------
.text:00008DBE                 align 10h
.text:00008DBE _text           ends
.text:00008DBE
.text:00008DC0 ; ===========================================================================
.text:00008DC0
.text:00008DC0 ; Segment type: Pure code
.text:00008DC0 ; Segment permissions: Read/Execute
.text:00008DC0 _text           segment para public 'CODE' use32
.text:00008DC0                 assume cs:_text
.text:00008DC0                 ;org 8DC0h
.text:00008DC0 ; COMDAT (pick any)
.text:00008DC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008DC0
.text:00008DC0 ; =============== S U B R O U T I N E =======================================
.text:00008DC0
.text:00008DC0 ; Attributes: bp-based frame
.text:00008DC0
.text:00008DC0 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00008DC0                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00008DC0 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00008DC0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+194Bp
.text:00008DC0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1A93p ...
.text:00008DC0
.text:00008DC0 var_4           = dword ptr -4
.text:00008DC0
.text:00008DC0                 push    ebp
.text:00008DC1                 mov     ebp, esp
.text:00008DC3                 push    ecx
.text:00008DC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008DCB                 mov     [ebp+var_4], ecx
.text:00008DCE                 mov     eax, [ebp+var_4]
.text:00008DD1                 mov     eax, [eax+4]
.text:00008DD4                 mov     esp, ebp
.text:00008DD6                 pop     ebp
.text:00008DD7                 retn
.text:00008DD7 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00008DD7
.text:00008DD7 _text           ends
.text:00008DD7
.text:00008DD8 ; ===========================================================================
.text:00008DD8
.text:00008DD8 ; Segment type: Pure code
.text:00008DD8 ; Segment permissions: Read/Execute
.text:00008DD8 _text           segment para public 'CODE' use32
.text:00008DD8                 assume cs:_text
.text:00008DD8                 ;org 8DD8h
.text:00008DD8 ; COMDAT (pick any)
.text:00008DD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008DD8
.text:00008DD8 ; =============== S U B R O U T I N E =======================================
.text:00008DD8
.text:00008DD8 ; Attributes: bp-based frame
.text:00008DD8
.text:00008DD8 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008DD8                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00008DD8 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00008DD8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6E0p
.text:00008DD8                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+8D6p ...
.text:00008DD8
.text:00008DD8 var_8           = dword ptr -8
.text:00008DD8 var_4           = dword ptr -4
.text:00008DD8
.text:00008DD8                 push    ebp
.text:00008DD9                 mov     ebp, esp
.text:00008DDB                 sub     esp, 8
.text:00008DDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008DE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008DEC                 mov     [ebp+var_4], ecx
.text:00008DEF                 mov     eax, [ebp+var_4]
.text:00008DF2                 mov     ecx, [eax]
.text:00008DF4                 mov     [ebp+var_8], ecx
.text:00008DF7                 mov     edx, [ebp+var_8]
.text:00008DFA                 push    edx             ; void *
.text:00008DFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008E00                 add     esp, 4
.text:00008E03                 add     esp, 8
.text:00008E06                 cmp     ebp, esp
.text:00008E08                 call    __RTC_CheckEsp
.text:00008E0D                 mov     esp, ebp
.text:00008E0F                 pop     ebp
.text:00008E10                 retn
.text:00008E10 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00008E10
.text:00008E10 ; ---------------------------------------------------------------------------
.text:00008E11                 align 4
.text:00008E11 _text           ends
.text:00008E11
.text:00008E14 ; ===========================================================================
.text:00008E14
.text:00008E14 ; Segment type: Pure code
.text:00008E14 ; Segment permissions: Read/Execute
.text:00008E14 _text           segment para public 'CODE' use32
.text:00008E14                 assume cs:_text
.text:00008E14                 ;org 8E14h
.text:00008E14 ; COMDAT (pick any)
.text:00008E14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008E14
.text:00008E14 ; =============== S U B R O U T I N E =======================================
.text:00008E14
.text:00008E14 ; Attributes: bp-based frame
.text:00008E14
.text:00008E14 ; public: void __thiscall CRecordVector<void *>::Delete(unsigned int)
.text:00008E14                 public ?Delete@?$CRecordVector@PAX@@QAEXI@Z
.text:00008E14 ?Delete@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00008E14                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1CD5p
.text:00008E14                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete(uint)+54p
.text:00008E14
.text:00008E14 var_4           = dword ptr -4
.text:00008E14 arg_0           = dword ptr  8
.text:00008E14
.text:00008E14                 push    ebp
.text:00008E15                 mov     ebp, esp
.text:00008E17                 push    ecx
.text:00008E18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E1F                 mov     [ebp+var_4], ecx
.text:00008E22                 mov     eax, [ebp+arg_0]
.text:00008E25                 add     eax, 1
.text:00008E28                 push    eax
.text:00008E29                 mov     ecx, [ebp+arg_0]
.text:00008E2C                 push    ecx
.text:00008E2D                 mov     ecx, [ebp+var_4]
.text:00008E30                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00008E35                 mov     edx, [ebp+var_4]
.text:00008E38                 mov     eax, [edx+4]
.text:00008E3B                 sub     eax, 1
.text:00008E3E                 mov     ecx, [ebp+var_4]
.text:00008E41                 mov     [ecx+4], eax
.text:00008E44                 add     esp, 4
.text:00008E47                 cmp     ebp, esp
.text:00008E49                 call    __RTC_CheckEsp
.text:00008E4E                 mov     esp, ebp
.text:00008E50                 pop     ebp
.text:00008E51                 retn    4
.text:00008E51 ?Delete@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00008E51
.text:00008E51 _text           ends
.text:00008E51
.text:00008E54 ; ===========================================================================
.text:00008E54
.text:00008E54 ; Segment type: Pure code
.text:00008E54 ; Segment permissions: Read/Execute
.text:00008E54 _text           segment para public 'CODE' use32
.text:00008E54                 assume cs:_text
.text:00008E54                 ;org 8E54h
.text:00008E54 ; COMDAT (pick any)
.text:00008E54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008E54
.text:00008E54 ; =============== S U B R O U T I N E =======================================
.text:00008E54
.text:00008E54 ; Attributes: bp-based frame
.text:00008E54
.text:00008E54 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00008E54                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00008E54 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00008E54                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+14F1p
.text:00008E54                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+7Fp ...
.text:00008E54
.text:00008E54 var_8           = dword ptr -8
.text:00008E54 var_4           = dword ptr -4
.text:00008E54 arg_0           = dword ptr  8
.text:00008E54
.text:00008E54                 push    ebp
.text:00008E55                 mov     ebp, esp
.text:00008E57                 sub     esp, 8
.text:00008E5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008E61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E68                 mov     [ebp+var_4], ecx
.text:00008E6B                 mov     ecx, [ebp+var_4]
.text:00008E6E                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00008E73                 mov     eax, [ebp+var_4]
.text:00008E76                 mov     ecx, [eax+4]
.text:00008E79                 mov     edx, [ebp+var_4]
.text:00008E7C                 mov     eax, [edx]
.text:00008E7E                 mov     edx, [ebp+arg_0]
.text:00008E81                 mov     [eax+ecx*4], edx
.text:00008E84                 mov     eax, [ebp+var_4]
.text:00008E87                 mov     ecx, [eax+4]
.text:00008E8A                 mov     [ebp+var_8], ecx
.text:00008E8D                 mov     edx, [ebp+var_4]
.text:00008E90                 mov     eax, [edx+4]
.text:00008E93                 add     eax, 1
.text:00008E96                 mov     ecx, [ebp+var_4]
.text:00008E99                 mov     [ecx+4], eax
.text:00008E9C                 mov     eax, [ebp+var_8]
.text:00008E9F                 add     esp, 8
.text:00008EA2                 cmp     ebp, esp
.text:00008EA4                 call    __RTC_CheckEsp
.text:00008EA9                 mov     esp, ebp
.text:00008EAB                 pop     ebp
.text:00008EAC                 retn    4
.text:00008EAC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00008EAC
.text:00008EAC ; ---------------------------------------------------------------------------
.text:00008EAF                 align 10h
.text:00008EAF _text           ends
.text:00008EAF
.text:00008EB0 ; ===========================================================================
.text:00008EB0
.text:00008EB0 ; Segment type: Pure code
.text:00008EB0 ; Segment permissions: Read/Execute
.text:00008EB0 _text           segment para public 'CODE' use32
.text:00008EB0                 assume cs:_text
.text:00008EB0                 ;org 8EB0h
.text:00008EB0 ; COMDAT (pick any)
.text:00008EB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008EB0
.text:00008EB0 ; =============== S U B R O U T I N E =======================================
.text:00008EB0
.text:00008EB0 ; Attributes: bp-based frame
.text:00008EB0
.text:00008EB0 ; public: void * & __thiscall CRecordVector<void *>::Front(void)
.text:00008EB0                 public ?Front@?$CRecordVector@PAX@@QAEAAPAXXZ
.text:00008EB0 ?Front@?$CRecordVector@PAX@@QAEAAPAXXZ proc near
.text:00008EB0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+193Fp
.text:00008EB0
.text:00008EB0 var_4           = dword ptr -4
.text:00008EB0
.text:00008EB0                 push    ebp
.text:00008EB1                 mov     ebp, esp
.text:00008EB3                 push    ecx
.text:00008EB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EBB                 mov     [ebp+var_4], ecx
.text:00008EBE                 mov     eax, [ebp+var_4]
.text:00008EC1                 mov     eax, [eax]
.text:00008EC3                 mov     esp, ebp
.text:00008EC5                 pop     ebp
.text:00008EC6                 retn
.text:00008EC6 ?Front@?$CRecordVector@PAX@@QAEAAPAXXZ endp
.text:00008EC6
.text:00008EC6 ; ---------------------------------------------------------------------------
.text:00008EC7                 align 4
.text:00008EC7 _text           ends
.text:00008EC7
.text:00008EC8 ; ===========================================================================
.text:00008EC8
.text:00008EC8 ; Segment type: Pure code
.text:00008EC8 ; Segment permissions: Read/Execute
.text:00008EC8 _text           segment para public 'CODE' use32
.text:00008EC8                 assume cs:_text
.text:00008EC8                 ;org 8EC8h
.text:00008EC8 ; COMDAT (pick any)
.text:00008EC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008EC8
.text:00008EC8 ; =============== S U B R O U T I N E =======================================
.text:00008EC8
.text:00008EC8 ; Attributes: bp-based frame
.text:00008EC8
.text:00008EC8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00008EC8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00008EC8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00008EC8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+EA3p
.text:00008EC8                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+32Ap ...
.text:00008EC8
.text:00008EC8 var_4           = dword ptr -4
.text:00008EC8
.text:00008EC8                 push    ebp
.text:00008EC9                 mov     ebp, esp
.text:00008ECB                 push    ecx
.text:00008ECC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008ED3                 mov     [ebp+var_4], ecx
.text:00008ED6                 mov     eax, [ebp+var_4]
.text:00008ED9                 mov     dword ptr [eax], 0
.text:00008EDF                 mov     eax, [ebp+var_4]
.text:00008EE2                 mov     esp, ebp
.text:00008EE4                 pop     ebp
.text:00008EE5                 retn
.text:00008EE5 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00008EE5
.text:00008EE5 ; ---------------------------------------------------------------------------
.text:00008EE6                 align 4
.text:00008EE6 _text           ends
.text:00008EE6
.text:00008EE8 ; ===========================================================================
.text:00008EE8
.text:00008EE8 ; Segment type: Pure code
.text:00008EE8 ; Segment permissions: Read/Execute
.text:00008EE8 _text           segment para public 'CODE' use32
.text:00008EE8                 assume cs:_text
.text:00008EE8                 ;org 8EE8h
.text:00008EE8 ; COMDAT (pick any)
.text:00008EE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008EE8
.text:00008EE8 ; =============== S U B R O U T I N E =======================================
.text:00008EE8
.text:00008EE8 ; Attributes: bp-based frame
.text:00008EE8
.text:00008EE8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00008EE8                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00008EE8 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00008EE8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+F99p
.text:00008EE8                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+109Ep ...
.text:00008EE8
.text:00008EE8 var_4           = dword ptr -4
.text:00008EE8
.text:00008EE8                 push    ebp
.text:00008EE9                 mov     ebp, esp
.text:00008EEB                 push    ecx
.text:00008EEC                 push    esi
.text:00008EED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EF4                 mov     [ebp+var_4], ecx
.text:00008EF7                 mov     eax, [ebp+var_4]
.text:00008EFA                 cmp     dword ptr [eax], 0
.text:00008EFD                 jz      short loc_8F1A
.text:00008EFF                 mov     ecx, [ebp+var_4]
.text:00008F02                 mov     edx, [ecx]
.text:00008F04                 mov     eax, [ebp+var_4]
.text:00008F07                 mov     ecx, [eax]
.text:00008F09                 mov     edx, [edx]
.text:00008F0B                 mov     esi, esp
.text:00008F0D                 push    ecx
.text:00008F0E                 mov     eax, [edx+8]
.text:00008F11                 call    eax
.text:00008F13                 cmp     esi, esp
.text:00008F15                 call    __RTC_CheckEsp
.text:00008F1A
.text:00008F1A loc_8F1A:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00008F1A                 pop     esi
.text:00008F1B                 add     esp, 4
.text:00008F1E                 cmp     ebp, esp
.text:00008F20                 call    __RTC_CheckEsp
.text:00008F25                 mov     esp, ebp
.text:00008F27                 pop     ebp
.text:00008F28                 retn
.text:00008F28 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00008F28
.text:00008F28 ; ---------------------------------------------------------------------------
.text:00008F29                 align 4
.text:00008F29 _text           ends
.text:00008F29
.text:00008F2C ; ===========================================================================
.text:00008F2C
.text:00008F2C ; Segment type: Pure code
.text:00008F2C ; Segment permissions: Read/Execute
.text:00008F2C _text           segment para public 'CODE' use32
.text:00008F2C                 assume cs:_text
.text:00008F2C                 ;org 8F2Ch
.text:00008F2C ; COMDAT (pick any)
.text:00008F2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008F2C
.text:00008F2C ; =============== S U B R O U T I N E =======================================
.text:00008F2C
.text:00008F2C ; Attributes: bp-based frame
.text:00008F2C
.text:00008F2C ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00008F2C                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00008F2C ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00008F2C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1498p
.text:00008F2C                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1BABp
.text:00008F2C
.text:00008F2C var_4           = dword ptr -4
.text:00008F2C
.text:00008F2C                 push    ebp
.text:00008F2D                 mov     ebp, esp
.text:00008F2F                 push    ecx
.text:00008F30                 push    esi
.text:00008F31                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F38                 mov     [ebp+var_4], ecx
.text:00008F3B                 mov     eax, [ebp+var_4]
.text:00008F3E                 cmp     dword ptr [eax], 0
.text:00008F41                 jz      short loc_8F67
.text:00008F43                 mov     ecx, [ebp+var_4]
.text:00008F46                 mov     edx, [ecx]
.text:00008F48                 mov     eax, [ebp+var_4]
.text:00008F4B                 mov     ecx, [eax]
.text:00008F4D                 mov     edx, [edx]
.text:00008F4F                 mov     esi, esp
.text:00008F51                 push    ecx
.text:00008F52                 mov     eax, [edx+8]
.text:00008F55                 call    eax
.text:00008F57                 cmp     esi, esp
.text:00008F59                 call    __RTC_CheckEsp
.text:00008F5E                 mov     ecx, [ebp+var_4]
.text:00008F61                 mov     dword ptr [ecx], 0
.text:00008F67
.text:00008F67 loc_8F67:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00008F67                 pop     esi
.text:00008F68                 add     esp, 4
.text:00008F6B                 cmp     ebp, esp
.text:00008F6D                 call    __RTC_CheckEsp
.text:00008F72                 mov     esp, ebp
.text:00008F74                 pop     ebp
.text:00008F75                 retn
.text:00008F75 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00008F75
.text:00008F75 ; ---------------------------------------------------------------------------
.text:00008F76                 align 4
.text:00008F76 _text           ends
.text:00008F76
.text:00008F78 ; ===========================================================================
.text:00008F78
.text:00008F78 ; Segment type: Pure code
.text:00008F78 ; Segment permissions: Read/Execute
.text:00008F78 _text           segment para public 'CODE' use32
.text:00008F78                 assume cs:_text
.text:00008F78                 ;org 8F78h
.text:00008F78 ; COMDAT (pick any)
.text:00008F78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008F78
.text:00008F78 ; =============== S U B R O U T I N E =======================================
.text:00008F78
.text:00008F78 ; Attributes: bp-based frame
.text:00008F78
.text:00008F78 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00008F78                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00008F78 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00008F78                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void):loc_65p
.text:00008F78                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+5FBp
.text:00008F78
.text:00008F78 var_4           = dword ptr -4
.text:00008F78
.text:00008F78                 push    ebp
.text:00008F79                 mov     ebp, esp
.text:00008F7B                 push    ecx
.text:00008F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F83                 mov     [ebp+var_4], ecx
.text:00008F86                 mov     eax, [ebp+var_4]
.text:00008F89                 mov     eax, [eax]
.text:00008F8B                 mov     esp, ebp
.text:00008F8D                 pop     ebp
.text:00008F8E                 retn
.text:00008F8E ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00008F8E
.text:00008F8E ; ---------------------------------------------------------------------------
.text:00008F8F                 align 10h
.text:00008F8F _text           ends
.text:00008F8F
.text:00008F90 ; ===========================================================================
.text:00008F90
.text:00008F90 ; Segment type: Pure code
.text:00008F90 ; Segment permissions: Read/Execute
.text:00008F90 _text           segment para public 'CODE' use32
.text:00008F90                 assume cs:_text
.text:00008F90                 ;org 8F90h
.text:00008F90 ; COMDAT (pick any)
.text:00008F90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008F90
.text:00008F90 ; =============== S U B R O U T I N E =======================================
.text:00008F90
.text:00008F90 ; Attributes: bp-based frame
.text:00008F90
.text:00008F90 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:00008F90                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:00008F90 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:00008F90                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+ECEp
.text:00008F90                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+339p
.text:00008F90
.text:00008F90 var_4           = dword ptr -4
.text:00008F90
.text:00008F90                 push    ebp
.text:00008F91                 mov     ebp, esp
.text:00008F93                 push    ecx
.text:00008F94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F9B                 mov     [ebp+var_4], ecx
.text:00008F9E                 mov     eax, [ebp+var_4]
.text:00008FA1                 mov     esp, ebp
.text:00008FA3                 pop     ebp
.text:00008FA4                 retn
.text:00008FA4 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:00008FA4
.text:00008FA4 ; ---------------------------------------------------------------------------
.text:00008FA5                 align 4
.text:00008FA5 _text           ends
.text:00008FA5
.text:00008FA8 ; ===========================================================================
.text:00008FA8
.text:00008FA8 ; Segment type: Pure code
.text:00008FA8 ; Segment permissions: Read/Execute
.text:00008FA8 _text           segment para public 'CODE' use32
.text:00008FA8                 assume cs:_text
.text:00008FA8                 ;org 8FA8h
.text:00008FA8 ; COMDAT (pick any)
.text:00008FA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008FA8
.text:00008FA8 ; =============== S U B R O U T I N E =======================================
.text:00008FA8
.text:00008FA8 ; Attributes: bp-based frame
.text:00008FA8
.text:00008FA8 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(class CMyComPtr<struct ISequentialInStream> const &)
.text:00008FA8                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
.text:00008FA8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z proc near
.text:00008FA8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+148Dp
.text:00008FA8
.text:00008FA8 var_4           = dword ptr -4
.text:00008FA8 arg_0           = dword ptr  8
.text:00008FA8
.text:00008FA8                 push    ebp
.text:00008FA9                 mov     ebp, esp
.text:00008FAB                 push    ecx
.text:00008FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FB3                 mov     [ebp+var_4], ecx
.text:00008FB6                 mov     eax, [ebp+arg_0]
.text:00008FB9                 mov     ecx, [eax]
.text:00008FBB                 push    ecx
.text:00008FBC                 mov     ecx, [ebp+var_4]
.text:00008FBF                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00008FC4                 add     esp, 4
.text:00008FC7                 cmp     ebp, esp
.text:00008FC9                 call    __RTC_CheckEsp
.text:00008FCE                 mov     esp, ebp
.text:00008FD0                 pop     ebp
.text:00008FD1                 retn    4
.text:00008FD1 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z endp
.text:00008FD1
.text:00008FD1 _text           ends
.text:00008FD1
.text:00008FD4 ; ===========================================================================
.text:00008FD4
.text:00008FD4 ; Segment type: Pure code
.text:00008FD4 ; Segment permissions: Read/Execute
.text:00008FD4 _text           segment para public 'CODE' use32
.text:00008FD4                 assume cs:_text
.text:00008FD4                 ;org 8FD4h
.text:00008FD4 ; COMDAT (pick any)
.text:00008FD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008FD4
.text:00008FD4 ; =============== S U B R O U T I N E =======================================
.text:00008FD4
.text:00008FD4 ; Attributes: bp-based frame
.text:00008FD4
.text:00008FD4 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00008FD4                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00008FD4 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00008FD4                                         ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)+17p
.text:00008FD4
.text:00008FD4 var_4           = dword ptr -4
.text:00008FD4 arg_0           = dword ptr  8
.text:00008FD4
.text:00008FD4                 push    ebp
.text:00008FD5                 mov     ebp, esp
.text:00008FD7                 push    ecx
.text:00008FD8                 push    esi
.text:00008FD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FE0                 mov     [ebp+var_4], ecx
.text:00008FE3                 cmp     [ebp+arg_0], 0
.text:00008FE7                 jz      short loc_9000
.text:00008FE9                 mov     eax, [ebp+arg_0]
.text:00008FEC                 mov     ecx, [eax]
.text:00008FEE                 mov     esi, esp
.text:00008FF0                 mov     edx, [ebp+arg_0]
.text:00008FF3                 push    edx
.text:00008FF4                 mov     eax, [ecx+4]
.text:00008FF7                 call    eax
.text:00008FF9                 cmp     esi, esp
.text:00008FFB                 call    __RTC_CheckEsp
.text:00009000
.text:00009000 loc_9000:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00009000                 mov     ecx, [ebp+var_4]
.text:00009003                 cmp     dword ptr [ecx], 0
.text:00009006                 jz      short loc_9023
.text:00009008                 mov     edx, [ebp+var_4]
.text:0000900B                 mov     eax, [edx]
.text:0000900D                 mov     ecx, [ebp+var_4]
.text:00009010                 mov     edx, [ecx]
.text:00009012                 mov     eax, [eax]
.text:00009014                 mov     esi, esp
.text:00009016                 push    edx
.text:00009017                 mov     ecx, [eax+8]
.text:0000901A                 call    ecx
.text:0000901C                 cmp     esi, esp
.text:0000901E                 call    __RTC_CheckEsp
.text:00009023
.text:00009023 loc_9023:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00009023                 mov     edx, [ebp+var_4]
.text:00009026                 mov     eax, [ebp+arg_0]
.text:00009029                 mov     [edx], eax
.text:0000902B                 mov     eax, [ebp+arg_0]
.text:0000902E                 pop     esi
.text:0000902F                 add     esp, 4
.text:00009032                 cmp     ebp, esp
.text:00009034                 call    __RTC_CheckEsp
.text:00009039                 mov     esp, ebp
.text:0000903B                 pop     ebp
.text:0000903C                 retn    4
.text:0000903C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:0000903C
.text:0000903C ; ---------------------------------------------------------------------------
.text:0000903F                 align 10h
.text:0000903F _text           ends
.text:0000903F
.text:00009040 ; ===========================================================================
.text:00009040
.text:00009040 ; Segment type: Pure code
.text:00009040 ; Segment permissions: Read/Execute
.text:00009040 _text           segment para public 'CODE' use32
.text:00009040                 assume cs:_text
.text:00009040                 ;org 9040h
.text:00009040 ; COMDAT (pick any)
.text:00009040                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009040
.text:00009040 ; =============== S U B R O U T I N E =======================================
.text:00009040
.text:00009040 ; Attributes: bp-based frame
.text:00009040
.text:00009040 ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:00009040                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:00009040 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:00009040                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+11DDp
.text:00009040                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+4E8p
.text:00009040
.text:00009040 var_4           = dword ptr -4
.text:00009040
.text:00009040                 push    ebp
.text:00009041                 mov     ebp, esp
.text:00009043                 push    ecx
.text:00009044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000904B                 mov     [ebp+var_4], ecx
.text:0000904E                 mov     eax, [ebp+var_4]
.text:00009051                 xor     ecx, ecx
.text:00009053                 cmp     dword ptr [eax], 0
.text:00009056                 setz    cl
.text:00009059                 mov     al, cl
.text:0000905B                 mov     esp, ebp
.text:0000905D                 pop     ebp
.text:0000905E                 retn
.text:0000905E ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:0000905E
.text:0000905E ; ---------------------------------------------------------------------------
.text:0000905F                 align 10h
.text:0000905F _text           ends
.text:0000905F
.text:00009060 ; ===========================================================================
.text:00009060
.text:00009060 ; Segment type: Pure code
.text:00009060 ; Segment permissions: Read/Execute
.text:00009060 _text           segment para public 'CODE' use32
.text:00009060                 assume cs:_text
.text:00009060                 ;org 9060h
.text:00009060 ; COMDAT (pick any)
.text:00009060                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009060
.text:00009060 ; =============== S U B R O U T I N E =======================================
.text:00009060
.text:00009060 ; Attributes: bp-based frame
.text:00009060
.text:00009060 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00009060                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00009060 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00009060                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+1AAp
.text:00009060                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+459p ...
.text:00009060
.text:00009060 var_4           = dword ptr -4
.text:00009060
.text:00009060                 push    ebp
.text:00009061                 mov     ebp, esp
.text:00009063                 push    ecx
.text:00009064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000906B                 mov     [ebp+var_4], ecx
.text:0000906E                 mov     eax, [ebp+var_4]
.text:00009071                 mov     eax, [eax]
.text:00009073                 mov     esp, ebp
.text:00009075                 pop     ebp
.text:00009076                 retn
.text:00009076 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00009076
.text:00009076 ; ---------------------------------------------------------------------------
.text:00009077                 align 4
.text:00009077 _text           ends
.text:00009077
.text:00009078 ; ===========================================================================
.text:00009078
.text:00009078 ; Segment type: Pure code
.text:00009078 ; Segment permissions: Read/Execute
.text:00009078 _text           segment para public 'CODE' use32
.text:00009078                 assume cs:_text
.text:00009078                 ;org 9078h
.text:00009078 ; COMDAT (pick any)
.text:00009078                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009078
.text:00009078 ; =============== S U B R O U T I N E =======================================
.text:00009078
.text:00009078 ; Attributes: bp-based frame
.text:00009078
.text:00009078 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00009078                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00009078 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00009078                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+123p
.text:00009078                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+39Ep
.text:00009078
.text:00009078 var_4           = dword ptr -4
.text:00009078
.text:00009078                 push    ebp
.text:00009079                 mov     ebp, esp
.text:0000907B                 push    ecx
.text:0000907C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009083                 mov     [ebp+var_4], ecx
.text:00009086                 mov     eax, [ebp+var_4]
.text:00009089                 mov     eax, [eax]
.text:0000908B                 mov     esp, ebp
.text:0000908D                 pop     ebp
.text:0000908E                 retn
.text:0000908E ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000908E
.text:0000908E ; ---------------------------------------------------------------------------
.text:0000908F                 align 10h
.text:0000908F _text           ends
.text:0000908F
.text:00009090 ; ===========================================================================
.text:00009090
.text:00009090 ; Segment type: Pure code
.text:00009090 ; Segment permissions: Read/Execute
.text:00009090 _text           segment para public 'CODE' use32
.text:00009090                 assume cs:_text
.text:00009090                 ;org 9090h
.text:00009090 ; COMDAT (pick any)
.text:00009090                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009090
.text:00009090 ; =============== S U B R O U T I N E =======================================
.text:00009090
.text:00009090 ; Attributes: bp-based frame
.text:00009090
.text:00009090 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00009090                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00009090 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00009090                                         ; CODE XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+39p
.text:00009090                                         ; COutMemStream::COutMemStream(CMemBlockManagerMt *)+88p
.text:00009090
.text:00009090 var_4           = dword ptr -4
.text:00009090
.text:00009090                 push    ebp
.text:00009091                 mov     ebp, esp
.text:00009093                 push    ecx
.text:00009094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000909B                 mov     [ebp+var_4], ecx
.text:0000909E                 mov     eax, [ebp+var_4]
.text:000090A1                 mov     dword ptr [eax], 0
.text:000090A7                 mov     eax, [ebp+var_4]
.text:000090AA                 mov     esp, ebp
.text:000090AC                 pop     ebp
.text:000090AD                 retn
.text:000090AD ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000090AD
.text:000090AD ; ---------------------------------------------------------------------------
.text:000090AE                 align 10h
.text:000090AE _text           ends
.text:000090AE
.text:000090B0 ; ===========================================================================
.text:000090B0
.text:000090B0 ; Segment type: Pure code
.text:000090B0 ; Segment permissions: Read/Execute
.text:000090B0 _text           segment para public 'CODE' use32
.text:000090B0                 assume cs:_text
.text:000090B0                 ;org 90B0h
.text:000090B0 ; COMDAT (pick any)
.text:000090B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000090B0
.text:000090B0 ; =============== S U B R O U T I N E =======================================
.text:000090B0
.text:000090B0 ; Attributes: bp-based frame
.text:000090B0
.text:000090B0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000090B0                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000090B0 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000090B0                                         ; CODE XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+81p
.text:000090B0                                         ; __unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0+3j ...
.text:000090B0
.text:000090B0 var_4           = dword ptr -4
.text:000090B0
.text:000090B0                 push    ebp
.text:000090B1                 mov     ebp, esp
.text:000090B3                 push    ecx
.text:000090B4                 push    esi
.text:000090B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000090BC                 mov     [ebp+var_4], ecx
.text:000090BF                 mov     eax, [ebp+var_4]
.text:000090C2                 cmp     dword ptr [eax], 0
.text:000090C5                 jz      short loc_90E2
.text:000090C7                 mov     ecx, [ebp+var_4]
.text:000090CA                 mov     edx, [ecx]
.text:000090CC                 mov     eax, [ebp+var_4]
.text:000090CF                 mov     ecx, [eax]
.text:000090D1                 mov     edx, [edx]
.text:000090D3                 mov     esi, esp
.text:000090D5                 push    ecx
.text:000090D6                 mov     eax, [edx+8]
.text:000090D9                 call    eax
.text:000090DB                 cmp     esi, esp
.text:000090DD                 call    __RTC_CheckEsp
.text:000090E2
.text:000090E2 loc_90E2:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000090E2                 pop     esi
.text:000090E3                 add     esp, 4
.text:000090E6                 cmp     ebp, esp
.text:000090E8                 call    __RTC_CheckEsp
.text:000090ED                 mov     esp, ebp
.text:000090EF                 pop     ebp
.text:000090F0                 retn
.text:000090F0 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000090F0
.text:000090F0 ; ---------------------------------------------------------------------------
.text:000090F1                 align 4
.text:000090F1 _text           ends
.text:000090F1
.text:000090F4 ; ===========================================================================
.text:000090F4
.text:000090F4 ; Segment type: Pure code
.text:000090F4 ; Segment permissions: Read/Execute
.text:000090F4 _text           segment para public 'CODE' use32
.text:000090F4                 assume cs:_text
.text:000090F4                 ;org 90F4h
.text:000090F4 ; COMDAT (pick any)
.text:000090F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000090F4
.text:000090F4 ; =============== S U B R O U T I N E =======================================
.text:000090F4
.text:000090F4 ; Attributes: bp-based frame
.text:000090F4
.text:000090F4 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:000090F4                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:000090F4 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:000090F4                                         ; CODE XREF: COutMemStream::ReleaseOutStream(void)+1Fp
.text:000090F4
.text:000090F4 var_4           = dword ptr -4
.text:000090F4
.text:000090F4                 push    ebp
.text:000090F5                 mov     ebp, esp
.text:000090F7                 push    ecx
.text:000090F8                 push    esi
.text:000090F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009100                 mov     [ebp+var_4], ecx
.text:00009103                 mov     eax, [ebp+var_4]
.text:00009106                 cmp     dword ptr [eax], 0
.text:00009109                 jz      short loc_912F
.text:0000910B                 mov     ecx, [ebp+var_4]
.text:0000910E                 mov     edx, [ecx]
.text:00009110                 mov     eax, [ebp+var_4]
.text:00009113                 mov     ecx, [eax]
.text:00009115                 mov     edx, [edx]
.text:00009117                 mov     esi, esp
.text:00009119                 push    ecx
.text:0000911A                 mov     eax, [edx+8]
.text:0000911D                 call    eax
.text:0000911F                 cmp     esi, esp
.text:00009121                 call    __RTC_CheckEsp
.text:00009126                 mov     ecx, [ebp+var_4]
.text:00009129                 mov     dword ptr [ecx], 0
.text:0000912F
.text:0000912F loc_912F:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000912F                 pop     esi
.text:00009130                 add     esp, 4
.text:00009133                 cmp     ebp, esp
.text:00009135                 call    __RTC_CheckEsp
.text:0000913A                 mov     esp, ebp
.text:0000913C                 pop     ebp
.text:0000913D                 retn
.text:0000913D ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:0000913D
.text:0000913D ; ---------------------------------------------------------------------------
.text:0000913E                 align 10h
.text:0000913E _text           ends
.text:0000913E
.text:00009140 ; ===========================================================================
.text:00009140
.text:00009140 ; Segment type: Pure code
.text:00009140 ; Segment permissions: Read/Execute
.text:00009140 _text           segment para public 'CODE' use32
.text:00009140                 assume cs:_text
.text:00009140                 ;org 9140h
.text:00009140 ; COMDAT (pick any)
.text:00009140                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009140
.text:00009140 ; =============== S U B R O U T I N E =======================================
.text:00009140
.text:00009140 ; Attributes: bp-based frame
.text:00009140
.text:00009140 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00009140                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00009140 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00009140                                         ; CODE XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+65p
.text:00009140
.text:00009140 var_4           = dword ptr -4
.text:00009140
.text:00009140                 push    ebp
.text:00009141                 mov     ebp, esp
.text:00009143                 push    ecx
.text:00009144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000914B                 mov     [ebp+var_4], ecx
.text:0000914E                 mov     eax, [ebp+var_4]
.text:00009151                 mov     eax, [eax]
.text:00009153                 mov     esp, ebp
.text:00009155                 pop     ebp
.text:00009156                 retn
.text:00009156 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00009156
.text:00009156 ; ---------------------------------------------------------------------------
.text:00009157                 align 4
.text:00009157 _text           ends
.text:00009157
.text:00009158 ; ===========================================================================
.text:00009158
.text:00009158 ; Segment type: Pure code
.text:00009158 ; Segment permissions: Read/Execute
.text:00009158 _text           segment para public 'CODE' use32
.text:00009158                 assume cs:_text
.text:00009158                 ;org 9158h
.text:00009158 ; COMDAT (pick any)
.text:00009158                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009158
.text:00009158 ; =============== S U B R O U T I N E =======================================
.text:00009158
.text:00009158 ; Attributes: bp-based frame
.text:00009158
.text:00009158 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00009158                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00009158 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00009158                                         ; CODE XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+48p
.text:00009158
.text:00009158 var_4           = dword ptr -4
.text:00009158
.text:00009158                 push    ebp
.text:00009159                 mov     ebp, esp
.text:0000915B                 push    ecx
.text:0000915C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009163                 mov     [ebp+var_4], ecx
.text:00009166                 mov     eax, [ebp+var_4]
.text:00009169                 mov     esp, ebp
.text:0000916B                 pop     ebp
.text:0000916C                 retn
.text:0000916C ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:0000916C
.text:0000916C ; ---------------------------------------------------------------------------
.text:0000916D                 align 10h
.text:0000916D _text           ends
.text:0000916D
.text:00009170 ; ===========================================================================
.text:00009170
.text:00009170 ; Segment type: Pure code
.text:00009170 ; Segment permissions: Read/Execute
.text:00009170 _text           segment para public 'CODE' use32
.text:00009170                 assume cs:_text
.text:00009170                 ;org 9170h
.text:00009170 ; COMDAT (pick any)
.text:00009170                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009170
.text:00009170 ; =============== S U B R O U T I N E =======================================
.text:00009170
.text:00009170 ; Attributes: bp-based frame
.text:00009170
.text:00009170 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00009170                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00009170 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00009170                                         ; CODE XREF: COutMemStream::SetOutStream(IOutStream *)+27p
.text:00009170
.text:00009170 var_4           = dword ptr -4
.text:00009170 arg_0           = dword ptr  8
.text:00009170
.text:00009170                 push    ebp
.text:00009171                 mov     ebp, esp
.text:00009173                 push    ecx
.text:00009174                 push    esi
.text:00009175                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000917C                 mov     [ebp+var_4], ecx
.text:0000917F                 cmp     [ebp+arg_0], 0
.text:00009183                 jz      short loc_919C
.text:00009185                 mov     eax, [ebp+arg_0]
.text:00009188                 mov     ecx, [eax]
.text:0000918A                 mov     esi, esp
.text:0000918C                 mov     edx, [ebp+arg_0]
.text:0000918F                 push    edx
.text:00009190                 mov     eax, [ecx+4]
.text:00009193                 call    eax
.text:00009195                 cmp     esi, esp
.text:00009197                 call    __RTC_CheckEsp
.text:0000919C
.text:0000919C loc_919C:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:0000919C                 mov     ecx, [ebp+var_4]
.text:0000919F                 cmp     dword ptr [ecx], 0
.text:000091A2                 jz      short loc_91BF
.text:000091A4                 mov     edx, [ebp+var_4]
.text:000091A7                 mov     eax, [edx]
.text:000091A9                 mov     ecx, [ebp+var_4]
.text:000091AC                 mov     edx, [ecx]
.text:000091AE                 mov     eax, [eax]
.text:000091B0                 mov     esi, esp
.text:000091B2                 push    edx
.text:000091B3                 mov     ecx, [eax+8]
.text:000091B6                 call    ecx
.text:000091B8                 cmp     esi, esp
.text:000091BA                 call    __RTC_CheckEsp
.text:000091BF
.text:000091BF loc_91BF:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:000091BF                 mov     edx, [ebp+var_4]
.text:000091C2                 mov     eax, [ebp+arg_0]
.text:000091C5                 mov     [edx], eax
.text:000091C7                 mov     eax, [ebp+arg_0]
.text:000091CA                 pop     esi
.text:000091CB                 add     esp, 4
.text:000091CE                 cmp     ebp, esp
.text:000091D0                 call    __RTC_CheckEsp
.text:000091D5                 mov     esp, ebp
.text:000091D7                 pop     ebp
.text:000091D8                 retn    4
.text:000091D8 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:000091D8
.text:000091D8 ; ---------------------------------------------------------------------------
.text:000091DB                 align 4
.text:000091DB _text           ends
.text:000091DB
.text:000091DC ; ===========================================================================
.text:000091DC
.text:000091DC ; Segment type: Pure code
.text:000091DC ; Segment permissions: Read/Execute
.text:000091DC _text           segment para public 'CODE' use32
.text:000091DC                 assume cs:_text
.text:000091DC                 ;org 91DCh
.text:000091DC ; COMDAT (pick any)
.text:000091DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000091DC
.text:000091DC ; =============== S U B R O U T I N E =======================================
.text:000091DC
.text:000091DC ; Attributes: bp-based frame
.text:000091DC
.text:000091DC ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:000091DC                 public ??0?$CBuffer@E@@QAE@XZ
.text:000091DC ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CItem::CItem(void)+64p
.text:000091DC                                         ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(void)+14p
.text:000091DC
.text:000091DC var_4           = dword ptr -4
.text:000091DC
.text:000091DC                 push    ebp
.text:000091DD                 mov     ebp, esp
.text:000091DF                 push    ecx
.text:000091E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000091E7                 mov     [ebp+var_4], ecx
.text:000091EA                 mov     eax, [ebp+var_4]
.text:000091ED                 mov     dword ptr [eax], 0
.text:000091F3                 mov     ecx, [ebp+var_4]
.text:000091F6                 mov     dword ptr [ecx+4], 0
.text:000091FD                 mov     eax, [ebp+var_4]
.text:00009200                 mov     esp, ebp
.text:00009202                 pop     ebp
.text:00009203                 retn
.text:00009203 ??0?$CBuffer@E@@QAE@XZ endp
.text:00009203
.text:00009203 _text           ends
.text:00009203
.text:00009204 ; ===========================================================================
.text:00009204
.text:00009204 ; Segment type: Pure code
.text:00009204 ; Segment permissions: Read/Execute
.text:00009204 _text           segment para public 'CODE' use32
.text:00009204                 assume cs:_text
.text:00009204                 ;org 9204h
.text:00009204 ; COMDAT (pick any)
.text:00009204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009204
.text:00009204 ; =============== S U B R O U T I N E =======================================
.text:00009204
.text:00009204 ; Attributes: bp-based frame
.text:00009204
.text:00009204 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(class CBuffer<unsigned char> const &)
.text:00009204                 public ??0?$CBuffer@E@@QAE@ABV0@@Z
.text:00009204 ??0?$CBuffer@E@@QAE@ABV0@@Z proc near   ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+9Dp
.text:00009204                                         ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)+27p
.text:00009204
.text:00009204 var_C           = dword ptr -0Ch
.text:00009204 Size            = dword ptr -8
.text:00009204 var_4           = dword ptr -4
.text:00009204 arg_0           = dword ptr  8
.text:00009204
.text:00009204                 push    ebp
.text:00009205                 mov     ebp, esp
.text:00009207                 sub     esp, 0Ch
.text:0000920A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00009211                 mov     [ebp+Size], 0CCCCCCCCh
.text:00009218                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000921F                 mov     [ebp+var_4], ecx
.text:00009222                 mov     eax, [ebp+var_4]
.text:00009225                 mov     dword ptr [eax], 0
.text:0000922B                 mov     ecx, [ebp+var_4]
.text:0000922E                 mov     dword ptr [ecx+4], 0
.text:00009235                 mov     edx, [ebp+arg_0]
.text:00009238                 mov     eax, [edx+4]
.text:0000923B                 mov     [ebp+Size], eax
.text:0000923E                 cmp     [ebp+Size], 0
.text:00009242                 jz      short loc_927C
.text:00009244                 mov     ecx, [ebp+Size]
.text:00009247                 push    ecx             ; unsigned int
.text:00009248                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000924D                 add     esp, 4
.text:00009250                 mov     [ebp+var_C], eax
.text:00009253                 mov     edx, [ebp+var_4]
.text:00009256                 mov     eax, [ebp+var_C]
.text:00009259                 mov     [edx], eax
.text:0000925B                 mov     ecx, [ebp+Size]
.text:0000925E                 push    ecx             ; Size
.text:0000925F                 mov     edx, [ebp+arg_0]
.text:00009262                 mov     eax, [edx]
.text:00009264                 push    eax             ; Src
.text:00009265                 mov     ecx, [ebp+var_4]
.text:00009268                 mov     edx, [ecx]
.text:0000926A                 push    edx             ; Dst
.text:0000926B                 call    _memcpy
.text:00009270                 add     esp, 0Ch
.text:00009273                 mov     eax, [ebp+var_4]
.text:00009276                 mov     ecx, [ebp+Size]
.text:00009279                 mov     [eax+4], ecx
.text:0000927C
.text:0000927C loc_927C:                               ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+3Ej
.text:0000927C                 mov     eax, [ebp+var_4]
.text:0000927F                 add     esp, 0Ch
.text:00009282                 cmp     ebp, esp
.text:00009284                 call    __RTC_CheckEsp
.text:00009289                 mov     esp, ebp
.text:0000928B                 pop     ebp
.text:0000928C                 retn    4
.text:0000928C ??0?$CBuffer@E@@QAE@ABV0@@Z endp
.text:0000928C
.text:0000928C ; ---------------------------------------------------------------------------
.text:0000928F                 align 10h
.text:0000928F _text           ends
.text:0000928F
.text:00009290 ; ===========================================================================
.text:00009290
.text:00009290 ; Segment type: Pure code
.text:00009290 ; Segment permissions: Read/Execute
.text:00009290 _text           segment para public 'CODE' use32
.text:00009290                 assume cs:_text
.text:00009290                 ;org 9290h
.text:00009290 ; COMDAT (pick any)
.text:00009290                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009290
.text:00009290 ; =============== S U B R O U T I N E =======================================
.text:00009290
.text:00009290 ; Attributes: bp-based frame
.text:00009290
.text:00009290 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00009290                 public ??1?$CBuffer@E@@QAE@XZ
.text:00009290 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)+14p
.text:00009290                                         ; NArchive::NZip::CItem::~CItem(void)+3Ap
.text:00009290
.text:00009290 var_8           = dword ptr -8
.text:00009290 var_4           = dword ptr -4
.text:00009290
.text:00009290                 push    ebp
.text:00009291                 mov     ebp, esp
.text:00009293                 sub     esp, 8
.text:00009296                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000929D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092A4                 mov     [ebp+var_4], ecx
.text:000092A7                 mov     eax, [ebp+var_4]
.text:000092AA                 mov     ecx, [eax]
.text:000092AC                 mov     [ebp+var_8], ecx
.text:000092AF                 mov     edx, [ebp+var_8]
.text:000092B2                 push    edx             ; void *
.text:000092B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000092B8                 add     esp, 4
.text:000092BB                 add     esp, 8
.text:000092BE                 cmp     ebp, esp
.text:000092C0                 call    __RTC_CheckEsp
.text:000092C5                 mov     esp, ebp
.text:000092C7                 pop     ebp
.text:000092C8                 retn
.text:000092C8 ??1?$CBuffer@E@@QAE@XZ endp
.text:000092C8
.text:000092C8 ; ---------------------------------------------------------------------------
.text:000092C9                 align 4
.text:000092C9 _text           ends
.text:000092C9
.text:000092CC ; ===========================================================================
.text:000092CC
.text:000092CC ; Segment type: Pure code
.text:000092CC ; Segment permissions: Read/Execute
.text:000092CC _text           segment para public 'CODE' use32
.text:000092CC                 assume cs:_text
.text:000092CC                 ;org 92CCh
.text:000092CC ; COMDAT (pick any)
.text:000092CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092CC
.text:000092CC ; =============== S U B R O U T I N E =======================================
.text:000092CC
.text:000092CC ; Attributes: bp-based frame
.text:000092CC
.text:000092CC ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000092CC                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000092CC ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::NZip::CWzAesExtra::SetSubBlock(NArchive::NZip::CExtraSubBlock &)+35p
.text:000092CC
.text:000092CC var_4           = dword ptr -4
.text:000092CC
.text:000092CC                 push    ebp
.text:000092CD                 mov     ebp, esp
.text:000092CF                 push    ecx
.text:000092D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092D7                 mov     [ebp+var_4], ecx
.text:000092DA                 mov     eax, [ebp+var_4]
.text:000092DD                 mov     eax, [eax]
.text:000092DF                 mov     esp, ebp
.text:000092E1                 pop     ebp
.text:000092E2                 retn
.text:000092E2 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:000092E2
.text:000092E2 ; ---------------------------------------------------------------------------
.text:000092E3                 align 4
.text:000092E3 _text           ends
.text:000092E3
.text:000092E4 ; ===========================================================================
.text:000092E4
.text:000092E4 ; Segment type: Pure code
.text:000092E4 ; Segment permissions: Read/Execute
.text:000092E4 _text           segment para public 'CODE' use32
.text:000092E4                 assume cs:_text
.text:000092E4                 ;org 92E4h
.text:000092E4 ; COMDAT (pick any)
.text:000092E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092E4
.text:000092E4 ; =============== S U B R O U T I N E =======================================
.text:000092E4
.text:000092E4 ; Attributes: bp-based frame
.text:000092E4
.text:000092E4 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:000092E4                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:000092E4 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+43p
.text:000092E4                                         ; CBuffer<uchar>::operator=(CBuffer<uchar> const &)+20p
.text:000092E4
.text:000092E4 var_4           = dword ptr -4
.text:000092E4
.text:000092E4                 push    ebp
.text:000092E5                 mov     ebp, esp
.text:000092E7                 push    ecx
.text:000092E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092EF                 mov     [ebp+var_4], ecx
.text:000092F2                 mov     eax, [ebp+var_4]
.text:000092F5                 mov     eax, [eax]
.text:000092F7                 mov     esp, ebp
.text:000092F9                 pop     ebp
.text:000092FA                 retn
.text:000092FA ??B?$CBuffer@E@@QBEPBEXZ endp
.text:000092FA
.text:000092FA ; ---------------------------------------------------------------------------
.text:000092FB                 align 4
.text:000092FB _text           ends
.text:000092FB
.text:000092FC ; ===========================================================================
.text:000092FC
.text:000092FC ; Segment type: Pure code
.text:000092FC ; Segment permissions: Read/Execute
.text:000092FC _text           segment para public 'CODE' use32
.text:000092FC                 assume cs:_text
.text:000092FC                 ;org 92FCh
.text:000092FC ; COMDAT (pick any)
.text:000092FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092FC
.text:000092FC ; =============== S U B R O U T I N E =======================================
.text:000092FC
.text:000092FC ; Attributes: bp-based frame
.text:000092FC
.text:000092FC ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:000092FC                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:000092FC ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1D6p
.text:000092FC                                         ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+2Fp
.text:000092FC
.text:000092FC var_4           = dword ptr -4
.text:000092FC
.text:000092FC                 push    ebp
.text:000092FD                 mov     ebp, esp
.text:000092FF                 push    ecx
.text:00009300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009307                 mov     [ebp+var_4], ecx
.text:0000930A                 mov     eax, [ebp+var_4]
.text:0000930D                 mov     eax, [eax+4]
.text:00009310                 mov     esp, ebp
.text:00009312                 pop     ebp
.text:00009313                 retn
.text:00009313 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00009313
.text:00009313 _text           ends
.text:00009313
.text:00009314 ; ===========================================================================
.text:00009314
.text:00009314 ; Segment type: Pure code
.text:00009314 ; Segment permissions: Read/Execute
.text:00009314 _text           segment para public 'CODE' use32
.text:00009314                 assume cs:_text
.text:00009314                 ;org 9314h
.text:00009314 ; COMDAT (pick any)
.text:00009314                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009314
.text:00009314 ; =============== S U B R O U T I N E =======================================
.text:00009314
.text:00009314 ; Attributes: bp-based frame
.text:00009314
.text:00009314 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00009314                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00009314 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NArchive::NZip::CWzAesExtra::SetSubBlock(NArchive::NZip::CExtraSubBlock &)+1Fp
.text:00009314                                         ; CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:00009314
.text:00009314 var_8           = dword ptr -8
.text:00009314 var_4           = dword ptr -4
.text:00009314 arg_0           = dword ptr  8
.text:00009314
.text:00009314                 push    ebp
.text:00009315                 mov     ebp, esp
.text:00009317                 sub     esp, 8
.text:0000931A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009321                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009328                 mov     [ebp+var_4], ecx
.text:0000932B                 mov     eax, [ebp+var_4]
.text:0000932E                 mov     ecx, [ebp+arg_0]
.text:00009331                 cmp     ecx, [eax+4]
.text:00009334                 jz      short loc_9364
.text:00009336                 mov     ecx, [ebp+var_4]
.text:00009339                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0000933E                 cmp     [ebp+arg_0], 0
.text:00009342                 jz      short loc_9364
.text:00009344                 mov     edx, [ebp+arg_0]
.text:00009347                 push    edx             ; unsigned int
.text:00009348                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000934D                 add     esp, 4
.text:00009350                 mov     [ebp+var_8], eax
.text:00009353                 mov     eax, [ebp+var_4]
.text:00009356                 mov     ecx, [ebp+var_8]
.text:00009359                 mov     [eax], ecx
.text:0000935B                 mov     edx, [ebp+var_4]
.text:0000935E                 mov     eax, [ebp+arg_0]
.text:00009361                 mov     [edx+4], eax
.text:00009364
.text:00009364 loc_9364:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00009364                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00009364                 add     esp, 8
.text:00009367                 cmp     ebp, esp
.text:00009369                 call    __RTC_CheckEsp
.text:0000936E                 mov     esp, ebp
.text:00009370                 pop     ebp
.text:00009371                 retn    4
.text:00009371 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00009371
.text:00009371 _text           ends
.text:00009371
.text:00009374 ; ===========================================================================
.text:00009374
.text:00009374 ; Segment type: Pure code
.text:00009374 ; Segment permissions: Read/Execute
.text:00009374 _text           segment para public 'CODE' use32
.text:00009374                 assume cs:_text
.text:00009374                 ;org 9374h
.text:00009374 ; COMDAT (pick any)
.text:00009374                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009374
.text:00009374 ; =============== S U B R O U T I N E =======================================
.text:00009374
.text:00009374 ; Attributes: bp-based frame
.text:00009374
.text:00009374 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00009374                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00009374 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:00009374
.text:00009374 var_8           = dword ptr -8
.text:00009374 var_4           = dword ptr -4
.text:00009374
.text:00009374                 push    ebp
.text:00009375                 mov     ebp, esp
.text:00009377                 sub     esp, 8
.text:0000937A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009381                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009388                 mov     [ebp+var_4], ecx
.text:0000938B                 mov     eax, [ebp+var_4]
.text:0000938E                 cmp     dword ptr [eax], 0
.text:00009391                 jz      short loc_93B0
.text:00009393                 mov     ecx, [ebp+var_4]
.text:00009396                 mov     edx, [ecx]
.text:00009398                 mov     [ebp+var_8], edx
.text:0000939B                 mov     eax, [ebp+var_8]
.text:0000939E                 push    eax             ; void *
.text:0000939F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000093A4                 add     esp, 4
.text:000093A7                 mov     ecx, [ebp+var_4]
.text:000093AA                 mov     dword ptr [ecx], 0
.text:000093B0
.text:000093B0 loc_93B0:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000093B0                 mov     edx, [ebp+var_4]
.text:000093B3                 mov     dword ptr [edx+4], 0
.text:000093BA                 add     esp, 8
.text:000093BD                 cmp     ebp, esp
.text:000093BF                 call    __RTC_CheckEsp
.text:000093C4                 mov     esp, ebp
.text:000093C6                 pop     ebp
.text:000093C7                 retn
.text:000093C7 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:000093C7
.text:000093C7 _text           ends
.text:000093C7
.text:000093C8 ; ===========================================================================
.text:000093C8
.text:000093C8 ; Segment type: Pure code
.text:000093C8 ; Segment permissions: Read/Execute
.text:000093C8 _text           segment para public 'CODE' use32
.text:000093C8                 assume cs:_text
.text:000093C8                 ;org 93C8h
.text:000093C8 ; COMDAT (pick any)
.text:000093C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000093C8
.text:000093C8 ; =============== S U B R O U T I N E =======================================
.text:000093C8
.text:000093C8 ; Attributes: bp-based frame
.text:000093C8
.text:000093C8 ; public: class CBuffer<unsigned char> & __thiscall CBuffer<unsigned char>::operator=(class CBuffer<unsigned char> const &)
.text:000093C8                 public ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z
.text:000093C8 ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z proc near
.text:000093C8                                         ; CODE XREF: NArchive::NZip::CItem::operator=(NArchive::NZip::CItem const &)+73p
.text:000093C8
.text:000093C8 var_4           = dword ptr -4
.text:000093C8 arg_0           = dword ptr  8
.text:000093C8
.text:000093C8                 push    ebp
.text:000093C9                 mov     ebp, esp
.text:000093CB                 push    ecx
.text:000093CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000093D3                 mov     [ebp+var_4], ecx
.text:000093D6                 mov     eax, [ebp+arg_0]
.text:000093D9                 cmp     eax, [ebp+var_4]
.text:000093DC                 jz      short loc_93F6
.text:000093DE                 mov     ecx, [ebp+arg_0]
.text:000093E1                 mov     edx, [ecx+4]
.text:000093E4                 push    edx             ; Size
.text:000093E5                 mov     ecx, [ebp+arg_0]
.text:000093E8                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000093ED                 push    eax             ; Src
.text:000093EE                 mov     ecx, [ebp+var_4]
.text:000093F1                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:000093F6
.text:000093F6 loc_93F6:                               ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+14j
.text:000093F6                 mov     eax, [ebp+var_4]
.text:000093F9                 add     esp, 4
.text:000093FC                 cmp     ebp, esp
.text:000093FE                 call    __RTC_CheckEsp
.text:00009403                 mov     esp, ebp
.text:00009405                 pop     ebp
.text:00009406                 retn    4
.text:00009406 ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z endp
.text:00009406
.text:00009406 ; ---------------------------------------------------------------------------
.text:00009409                 align 4
.text:00009409 _text           ends
.text:00009409
.text:0000940C ; ===========================================================================
.text:0000940C
.text:0000940C ; Segment type: Pure code
.text:0000940C ; Segment permissions: Read/Execute
.text:0000940C _text           segment para public 'CODE' use32
.text:0000940C                 assume cs:_text
.text:0000940C                 ;org 940Ch
.text:0000940C ; COMDAT (pick any)
.text:0000940C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000940C
.text:0000940C ; =============== S U B R O U T I N E =======================================
.text:0000940C
.text:0000940C ; Attributes: bp-based frame
.text:0000940C
.text:0000940C ; public: __thiscall CMyComPtr<struct IOutStream>::CMyComPtr<struct IOutStream>(void)
.text:0000940C                 public ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:0000940C ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:0000940C                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+5Ep
.text:0000940C                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+6Dp ...
.text:0000940C
.text:0000940C var_4           = dword ptr -4
.text:0000940C
.text:0000940C                 push    ebp
.text:0000940D                 mov     ebp, esp
.text:0000940F                 push    ecx
.text:00009410                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009417                 mov     [ebp+var_4], ecx
.text:0000941A                 mov     eax, [ebp+var_4]
.text:0000941D                 mov     dword ptr [eax], 0
.text:00009423                 mov     eax, [ebp+var_4]
.text:00009426                 mov     esp, ebp
.text:00009428                 pop     ebp
.text:00009429                 retn
.text:00009429 ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:00009429
.text:00009429 ; ---------------------------------------------------------------------------
.text:0000942A                 align 4
.text:0000942A _text           ends
.text:0000942A
.text:0000942C ; ===========================================================================
.text:0000942C
.text:0000942C ; Segment type: Pure code
.text:0000942C ; Segment permissions: Read/Execute
.text:0000942C _text           segment para public 'CODE' use32
.text:0000942C                 assume cs:_text
.text:0000942C                 ;org 942Ch
.text:0000942C ; COMDAT (pick any)
.text:0000942C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000942C
.text:0000942C ; =============== S U B R O U T I N E =======================================
.text:0000942C
.text:0000942C ; Attributes: bp-based frame
.text:0000942C
.text:0000942C ; public: __thiscall CMyComPtr<struct IOutStream>::~CMyComPtr<struct IOutStream>(void)
.text:0000942C                 public ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:0000942C ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:0000942C                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+128p
.text:0000942C                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+BAp ...
.text:0000942C
.text:0000942C var_4           = dword ptr -4
.text:0000942C
.text:0000942C                 push    ebp
.text:0000942D                 mov     ebp, esp
.text:0000942F                 push    ecx
.text:00009430                 push    esi
.text:00009431                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009438                 mov     [ebp+var_4], ecx
.text:0000943B                 mov     eax, [ebp+var_4]
.text:0000943E                 cmp     dword ptr [eax], 0
.text:00009441                 jz      short loc_945E
.text:00009443                 mov     ecx, [ebp+var_4]
.text:00009446                 mov     edx, [ecx]
.text:00009448                 mov     eax, [ebp+var_4]
.text:0000944B                 mov     ecx, [eax]
.text:0000944D                 mov     edx, [edx]
.text:0000944F                 mov     esi, esp
.text:00009451                 push    ecx
.text:00009452                 mov     eax, [edx+8]
.text:00009455                 call    eax
.text:00009457                 cmp     esi, esp
.text:00009459                 call    __RTC_CheckEsp
.text:0000945E
.text:0000945E loc_945E:                               ; CODE XREF: CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)+15j
.text:0000945E                 pop     esi
.text:0000945F                 add     esp, 4
.text:00009462                 cmp     ebp, esp
.text:00009464                 call    __RTC_CheckEsp
.text:00009469                 mov     esp, ebp
.text:0000946B                 pop     ebp
.text:0000946C                 retn
.text:0000946C ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:0000946C
.text:0000946C ; ---------------------------------------------------------------------------
.text:0000946D                 align 10h
.text:0000946D _text           ends
.text:0000946D
.text:00009470 ; ===========================================================================
.text:00009470
.text:00009470 ; Segment type: Pure code
.text:00009470 ; Segment permissions: Read/Execute
.text:00009470 _text           segment para public 'CODE' use32
.text:00009470                 assume cs:_text
.text:00009470                 ;org 9470h
.text:00009470 ; COMDAT (pick any)
.text:00009470                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009470
.text:00009470 ; =============== S U B R O U T I N E =======================================
.text:00009470
.text:00009470 ; Attributes: bp-based frame
.text:00009470
.text:00009470 ; public: void __thiscall CMyComPtr<struct IOutStream>::Release(void)
.text:00009470                 public ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ
.text:00009470 ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ proc near
.text:00009470                                         ; CODE XREF: COutMemStream::ReleaseOutStream(void)+14p
.text:00009470
.text:00009470 var_4           = dword ptr -4
.text:00009470
.text:00009470                 push    ebp
.text:00009471                 mov     ebp, esp
.text:00009473                 push    ecx
.text:00009474                 push    esi
.text:00009475                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000947C                 mov     [ebp+var_4], ecx
.text:0000947F                 mov     eax, [ebp+var_4]
.text:00009482                 cmp     dword ptr [eax], 0
.text:00009485                 jz      short loc_94AB
.text:00009487                 mov     ecx, [ebp+var_4]
.text:0000948A                 mov     edx, [ecx]
.text:0000948C                 mov     eax, [ebp+var_4]
.text:0000948F                 mov     ecx, [eax]
.text:00009491                 mov     edx, [edx]
.text:00009493                 mov     esi, esp
.text:00009495                 push    ecx
.text:00009496                 mov     eax, [edx+8]
.text:00009499                 call    eax
.text:0000949B                 cmp     esi, esp
.text:0000949D                 call    __RTC_CheckEsp
.text:000094A2                 mov     ecx, [ebp+var_4]
.text:000094A5                 mov     dword ptr [ecx], 0
.text:000094AB
.text:000094AB loc_94AB:                               ; CODE XREF: CMyComPtr<IOutStream>::Release(void)+15j
.text:000094AB                 pop     esi
.text:000094AC                 add     esp, 4
.text:000094AF                 cmp     ebp, esp
.text:000094B1                 call    __RTC_CheckEsp
.text:000094B6                 mov     esp, ebp
.text:000094B8                 pop     ebp
.text:000094B9                 retn
.text:000094B9 ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ endp
.text:000094B9
.text:000094B9 ; ---------------------------------------------------------------------------
.text:000094BA                 align 4
.text:000094BA _text           ends
.text:000094BA
.text:000094BC ; ===========================================================================
.text:000094BC
.text:000094BC ; Segment type: Pure code
.text:000094BC ; Segment permissions: Read/Execute
.text:000094BC _text           segment para public 'CODE' use32
.text:000094BC                 assume cs:_text
.text:000094BC                 ;org 94BCh
.text:000094BC ; COMDAT (pick any)
.text:000094BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000094BC
.text:000094BC ; =============== S U B R O U T I N E =======================================
.text:000094BC
.text:000094BC ; Attributes: bp-based frame
.text:000094BC
.text:000094BC ; public: __thiscall CMyComPtr<struct IOutStream>::operator struct IOutStream *(void)const
.text:000094BC                 public ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:000094BC ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:000094BC                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+59p
.text:000094BC                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+EFp ...
.text:000094BC
.text:000094BC var_4           = dword ptr -4
.text:000094BC
.text:000094BC                 push    ebp
.text:000094BD                 mov     ebp, esp
.text:000094BF                 push    ecx
.text:000094C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094C7                 mov     [ebp+var_4], ecx
.text:000094CA                 mov     eax, [ebp+var_4]
.text:000094CD                 mov     eax, [eax]
.text:000094CF                 mov     esp, ebp
.text:000094D1                 pop     ebp
.text:000094D2                 retn
.text:000094D2 ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:000094D2
.text:000094D2 ; ---------------------------------------------------------------------------
.text:000094D3                 align 4
.text:000094D3 _text           ends
.text:000094D3
.text:000094D4 ; ===========================================================================
.text:000094D4
.text:000094D4 ; Segment type: Pure code
.text:000094D4 ; Segment permissions: Read/Execute
.text:000094D4 _text           segment para public 'CODE' use32
.text:000094D4                 assume cs:_text
.text:000094D4                 ;org 94D4h
.text:000094D4 ; COMDAT (pick any)
.text:000094D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000094D4
.text:000094D4 ; =============== S U B R O U T I N E =======================================
.text:000094D4
.text:000094D4 ; Attributes: bp-based frame
.text:000094D4
.text:000094D4 ; public: struct IOutStream * * __thiscall CMyComPtr<struct IOutStream>::operator&(void)
.text:000094D4                 public ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ
.text:000094D4 ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ proc near
.text:000094D4                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+79p
.text:000094D4                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+17FAp ...
.text:000094D4
.text:000094D4 var_4           = dword ptr -4
.text:000094D4
.text:000094D4                 push    ebp
.text:000094D5                 mov     ebp, esp
.text:000094D7                 push    ecx
.text:000094D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094DF                 mov     [ebp+var_4], ecx
.text:000094E2                 mov     eax, [ebp+var_4]
.text:000094E5                 mov     esp, ebp
.text:000094E7                 pop     ebp
.text:000094E8                 retn
.text:000094E8 ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ endp
.text:000094E8
.text:000094E8 ; ---------------------------------------------------------------------------
.text:000094E9                 align 4
.text:000094E9 _text           ends
.text:000094E9
.text:000094EC ; ===========================================================================
.text:000094EC
.text:000094EC ; Segment type: Pure code
.text:000094EC ; Segment permissions: Read/Execute
.text:000094EC _text           segment para public 'CODE' use32
.text:000094EC                 assume cs:_text
.text:000094EC                 ;org 94ECh
.text:000094EC ; COMDAT (pick any)
.text:000094EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000094EC
.text:000094EC ; =============== S U B R O U T I N E =======================================
.text:000094EC
.text:000094EC ; Attributes: bp-based frame
.text:000094EC
.text:000094EC ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator->(void)const
.text:000094EC                 public ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:000094EC ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:000094EC                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+5Bp
.text:000094EC                                         ; NArchive::NZip::CCacheOutStream::Init(IOutStream *)+9Ep ...
.text:000094EC
.text:000094EC var_4           = dword ptr -4
.text:000094EC
.text:000094EC                 push    ebp
.text:000094ED                 mov     ebp, esp
.text:000094EF                 push    ecx
.text:000094F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094F7                 mov     [ebp+var_4], ecx
.text:000094FA                 mov     eax, [ebp+var_4]
.text:000094FD                 mov     eax, [eax]
.text:000094FF                 mov     esp, ebp
.text:00009501                 pop     ebp
.text:00009502                 retn
.text:00009502 ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:00009502
.text:00009502 ; ---------------------------------------------------------------------------
.text:00009503                 align 4
.text:00009503 _text           ends
.text:00009503
.text:00009504 ; ===========================================================================
.text:00009504
.text:00009504 ; Segment type: Pure code
.text:00009504 ; Segment permissions: Read/Execute
.text:00009504 _text           segment para public 'CODE' use32
.text:00009504                 assume cs:_text
.text:00009504                 ;org 9504h
.text:00009504 ; COMDAT (pick any)
.text:00009504                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009504
.text:00009504 ; =============== S U B R O U T I N E =======================================
.text:00009504
.text:00009504 ; Attributes: bp-based frame
.text:00009504
.text:00009504 ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator=(struct IOutStream *)
.text:00009504                 public ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z
.text:00009504 ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z proc near
.text:00009504                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::Init(IOutStream *)+50p
.text:00009504                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+247p ...
.text:00009504
.text:00009504 var_4           = dword ptr -4
.text:00009504 arg_0           = dword ptr  8
.text:00009504
.text:00009504                 push    ebp
.text:00009505                 mov     ebp, esp
.text:00009507                 push    ecx
.text:00009508                 push    esi
.text:00009509                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009510                 mov     [ebp+var_4], ecx
.text:00009513                 cmp     [ebp+arg_0], 0
.text:00009517                 jz      short loc_9530
.text:00009519                 mov     eax, [ebp+arg_0]
.text:0000951C                 mov     ecx, [eax]
.text:0000951E                 mov     esi, esp
.text:00009520                 mov     edx, [ebp+arg_0]
.text:00009523                 push    edx
.text:00009524                 mov     eax, [ecx+4]
.text:00009527                 call    eax
.text:00009529                 cmp     esi, esp
.text:0000952B                 call    __RTC_CheckEsp
.text:00009530
.text:00009530 loc_9530:                               ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+13j
.text:00009530                 mov     ecx, [ebp+var_4]
.text:00009533                 cmp     dword ptr [ecx], 0
.text:00009536                 jz      short loc_9553
.text:00009538                 mov     edx, [ebp+var_4]
.text:0000953B                 mov     eax, [edx]
.text:0000953D                 mov     ecx, [ebp+var_4]
.text:00009540                 mov     edx, [ecx]
.text:00009542                 mov     eax, [eax]
.text:00009544                 mov     esi, esp
.text:00009546                 push    edx
.text:00009547                 mov     ecx, [eax+8]
.text:0000954A                 call    ecx
.text:0000954C                 cmp     esi, esp
.text:0000954E                 call    __RTC_CheckEsp
.text:00009553
.text:00009553 loc_9553:                               ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+32j
.text:00009553                 mov     edx, [ebp+var_4]
.text:00009556                 mov     eax, [ebp+arg_0]
.text:00009559                 mov     [edx], eax
.text:0000955B                 mov     eax, [ebp+arg_0]
.text:0000955E                 pop     esi
.text:0000955F                 add     esp, 4
.text:00009562                 cmp     ebp, esp
.text:00009564                 call    __RTC_CheckEsp
.text:00009569                 mov     esp, ebp
.text:0000956B                 pop     ebp
.text:0000956C                 retn    4
.text:0000956C ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z endp
.text:0000956C
.text:0000956C ; ---------------------------------------------------------------------------
.text:0000956F                 align 10h
.text:0000956F _text           ends
.text:0000956F
.text:00009570 ; ===========================================================================
.text:00009570
.text:00009570 ; Segment type: Pure code
.text:00009570 ; Segment permissions: Read/Execute
.text:00009570 _text           segment para public 'CODE' use32
.text:00009570                 assume cs:_text
.text:00009570                 ;org 9570h
.text:00009570 ; COMDAT (pick any)
.text:00009570                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009570
.text:00009570 ; =============== S U B R O U T I N E =======================================
.text:00009570
.text:00009570 ; Attributes: bp-based frame
.text:00009570
.text:00009570 ; public: bool __thiscall CMyComPtr<struct IOutStream>::operator!(void)const
.text:00009570                 public ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
.text:00009570 ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ proc near
.text:00009570                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+9Dp
.text:00009570
.text:00009570 var_4           = dword ptr -4
.text:00009570
.text:00009570                 push    ebp
.text:00009571                 mov     ebp, esp
.text:00009573                 push    ecx
.text:00009574                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000957B                 mov     [ebp+var_4], ecx
.text:0000957E                 mov     eax, [ebp+var_4]
.text:00009581                 xor     ecx, ecx
.text:00009583                 cmp     dword ptr [eax], 0
.text:00009586                 setz    cl
.text:00009589                 mov     al, cl
.text:0000958B                 mov     esp, ebp
.text:0000958D                 pop     ebp
.text:0000958E                 retn
.text:0000958E ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ endp
.text:0000958E
.text:0000958E ; ---------------------------------------------------------------------------
.text:0000958F                 align 10h
.text:0000958F _text           ends
.text:0000958F
.text:00009590 ; ===========================================================================
.text:00009590
.text:00009590 ; Segment type: Pure code
.text:00009590 ; Segment permissions: Read/Execute
.text:00009590 _text           segment para public 'CODE' use32
.text:00009590                 assume cs:_text
.text:00009590                 ;org 9590h
.text:00009590 ; COMDAT (pick any)
.text:00009590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009590
.text:00009590 ; =============== S U B R O U T I N E =======================================
.text:00009590
.text:00009590 ; Attributes: bp-based frame
.text:00009590
.text:00009590 ; public: __thiscall CMyComPtr<struct IProgress>::CMyComPtr<struct IProgress>(void)
.text:00009590                 public ??0?$CMyComPtr@UIProgress@@@@QAE@XZ
.text:00009590 ??0?$CMyComPtr@UIProgress@@@@QAE@XZ proc near
.text:00009590                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+4Fp
.text:00009590
.text:00009590 var_4           = dword ptr -4
.text:00009590
.text:00009590                 push    ebp
.text:00009591                 mov     ebp, esp
.text:00009593                 push    ecx
.text:00009594                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000959B                 mov     [ebp+var_4], ecx
.text:0000959E                 mov     eax, [ebp+var_4]
.text:000095A1                 mov     dword ptr [eax], 0
.text:000095A7                 mov     eax, [ebp+var_4]
.text:000095AA                 mov     esp, ebp
.text:000095AC                 pop     ebp
.text:000095AD                 retn
.text:000095AD ??0?$CMyComPtr@UIProgress@@@@QAE@XZ endp
.text:000095AD
.text:000095AD ; ---------------------------------------------------------------------------
.text:000095AE                 align 10h
.text:000095AE _text           ends
.text:000095AE
.text:000095B0 ; ===========================================================================
.text:000095B0
.text:000095B0 ; Segment type: Pure code
.text:000095B0 ; Segment permissions: Read/Execute
.text:000095B0 _text           segment para public 'CODE' use32
.text:000095B0                 assume cs:_text
.text:000095B0                 ;org 95B0h
.text:000095B0 ; COMDAT (pick any)
.text:000095B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000095B0
.text:000095B0 ; =============== S U B R O U T I N E =======================================
.text:000095B0
.text:000095B0 ; Attributes: bp-based frame
.text:000095B0
.text:000095B0 ; public: __thiscall CMyComPtr<struct IProgress>::~CMyComPtr<struct IProgress>(void)
.text:000095B0                 public ??1?$CMyComPtr@UIProgress@@@@QAE@XZ
.text:000095B0 ??1?$CMyComPtr@UIProgress@@@@QAE@XZ proc near
.text:000095B0                                         ; CODE XREF: __unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0+6j
.text:000095B0                                         ; NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2(void)+5Bp ...
.text:000095B0
.text:000095B0 var_4           = dword ptr -4
.text:000095B0
.text:000095B0                 push    ebp
.text:000095B1                 mov     ebp, esp
.text:000095B3                 push    ecx
.text:000095B4                 push    esi
.text:000095B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000095BC                 mov     [ebp+var_4], ecx
.text:000095BF                 mov     eax, [ebp+var_4]
.text:000095C2                 cmp     dword ptr [eax], 0
.text:000095C5                 jz      short loc_95E2
.text:000095C7                 mov     ecx, [ebp+var_4]
.text:000095CA                 mov     edx, [ecx]
.text:000095CC                 mov     eax, [ebp+var_4]
.text:000095CF                 mov     ecx, [eax]
.text:000095D1                 mov     edx, [edx]
.text:000095D3                 mov     esi, esp
.text:000095D5                 push    ecx
.text:000095D6                 mov     eax, [edx+8]
.text:000095D9                 call    eax
.text:000095DB                 cmp     esi, esp
.text:000095DD                 call    __RTC_CheckEsp
.text:000095E2
.text:000095E2 loc_95E2:                               ; CODE XREF: CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)+15j
.text:000095E2                 pop     esi
.text:000095E3                 add     esp, 4
.text:000095E6                 cmp     ebp, esp
.text:000095E8                 call    __RTC_CheckEsp
.text:000095ED                 mov     esp, ebp
.text:000095EF                 pop     ebp
.text:000095F0                 retn
.text:000095F0 ??1?$CMyComPtr@UIProgress@@@@QAE@XZ endp
.text:000095F0
.text:000095F0 ; ---------------------------------------------------------------------------
.text:000095F1                 align 4
.text:000095F1 _text           ends
.text:000095F1
.text:000095F4 ; ===========================================================================
.text:000095F4
.text:000095F4 ; Segment type: Pure code
.text:000095F4 ; Segment permissions: Read/Execute
.text:000095F4 _text           segment para public 'CODE' use32
.text:000095F4                 assume cs:_text
.text:000095F4                 ;org 95F4h
.text:000095F4 ; COMDAT (pick any)
.text:000095F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000095F4
.text:000095F4 ; =============== S U B R O U T I N E =======================================
.text:000095F4
.text:000095F4 ; Attributes: bp-based frame
.text:000095F4
.text:000095F4 ; public: struct IProgress * __thiscall CMyComPtr<struct IProgress>::operator->(void)const
.text:000095F4                 public ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ
.text:000095F4 ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ proc near
.text:000095F4                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+149p
.text:000095F4
.text:000095F4 var_4           = dword ptr -4
.text:000095F4
.text:000095F4                 push    ebp
.text:000095F5                 mov     ebp, esp
.text:000095F7                 push    ecx
.text:000095F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000095FF                 mov     [ebp+var_4], ecx
.text:00009602                 mov     eax, [ebp+var_4]
.text:00009605                 mov     eax, [eax]
.text:00009607                 mov     esp, ebp
.text:00009609                 pop     ebp
.text:0000960A                 retn
.text:0000960A ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ endp
.text:0000960A
.text:0000960A ; ---------------------------------------------------------------------------
.text:0000960B                 align 4
.text:0000960B _text           ends
.text:0000960B
.text:0000960C ; ===========================================================================
.text:0000960C
.text:0000960C ; Segment type: Pure code
.text:0000960C ; Segment permissions: Read/Execute
.text:0000960C _text           segment para public 'CODE' use32
.text:0000960C                 assume cs:_text
.text:0000960C                 ;org 960Ch
.text:0000960C ; COMDAT (pick any)
.text:0000960C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000960C
.text:0000960C ; =============== S U B R O U T I N E =======================================
.text:0000960C
.text:0000960C ; Attributes: bp-based frame
.text:0000960C
.text:0000960C ; public: struct IProgress * __thiscall CMyComPtr<struct IProgress>::operator=(struct IProgress *)
.text:0000960C                 public ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z
.text:0000960C ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z proc near
.text:0000960C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Create(IProgress *,bool)+18p
.text:0000960C
.text:0000960C var_4           = dword ptr -4
.text:0000960C arg_0           = dword ptr  8
.text:0000960C
.text:0000960C                 push    ebp
.text:0000960D                 mov     ebp, esp
.text:0000960F                 push    ecx
.text:00009610                 push    esi
.text:00009611                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009618                 mov     [ebp+var_4], ecx
.text:0000961B                 cmp     [ebp+arg_0], 0
.text:0000961F                 jz      short loc_9638
.text:00009621                 mov     eax, [ebp+arg_0]
.text:00009624                 mov     ecx, [eax]
.text:00009626                 mov     esi, esp
.text:00009628                 mov     edx, [ebp+arg_0]
.text:0000962B                 push    edx
.text:0000962C                 mov     eax, [ecx+4]
.text:0000962F                 call    eax
.text:00009631                 cmp     esi, esp
.text:00009633                 call    __RTC_CheckEsp
.text:00009638
.text:00009638 loc_9638:                               ; CODE XREF: CMyComPtr<IProgress>::operator=(IProgress *)+13j
.text:00009638                 mov     ecx, [ebp+var_4]
.text:0000963B                 cmp     dword ptr [ecx], 0
.text:0000963E                 jz      short loc_965B
.text:00009640                 mov     edx, [ebp+var_4]
.text:00009643                 mov     eax, [edx]
.text:00009645                 mov     ecx, [ebp+var_4]
.text:00009648                 mov     edx, [ecx]
.text:0000964A                 mov     eax, [eax]
.text:0000964C                 mov     esi, esp
.text:0000964E                 push    edx
.text:0000964F                 mov     ecx, [eax+8]
.text:00009652                 call    ecx
.text:00009654                 cmp     esi, esp
.text:00009656                 call    __RTC_CheckEsp
.text:0000965B
.text:0000965B loc_965B:                               ; CODE XREF: CMyComPtr<IProgress>::operator=(IProgress *)+32j
.text:0000965B                 mov     edx, [ebp+var_4]
.text:0000965E                 mov     eax, [ebp+arg_0]
.text:00009661                 mov     [edx], eax
.text:00009663                 mov     eax, [ebp+arg_0]
.text:00009666                 pop     esi
.text:00009667                 add     esp, 4
.text:0000966A                 cmp     ebp, esp
.text:0000966C                 call    __RTC_CheckEsp
.text:00009671                 mov     esp, ebp
.text:00009673                 pop     ebp
.text:00009674                 retn    4
.text:00009674 ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z endp
.text:00009674
.text:00009674 ; ---------------------------------------------------------------------------
.text:00009677                 align 4
.text:00009677 _text           ends
.text:00009677
.text:00009678 ; ===========================================================================
.text:00009678
.text:00009678 ; Segment type: Pure code
.text:00009678 ; Segment permissions: Read/Execute
.text:00009678 _text           segment para public 'CODE' use32
.text:00009678                 assume cs:_text
.text:00009678                 ;org 9678h
.text:00009678 ; COMDAT (pick any)
.text:00009678                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009678
.text:00009678 ; =============== S U B R O U T I N E =======================================
.text:00009678
.text:00009678 ; Attributes: bp-based frame
.text:00009678
.text:00009678 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(void)
.text:00009678                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00009678 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00009678                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2(void)+61p
.text:00009678                                         ; NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CCompressionMethodMode const &)+71p ...
.text:00009678
.text:00009678 var_4           = dword ptr -4
.text:00009678
.text:00009678                 push    ebp
.text:00009679                 mov     ebp, esp
.text:0000967B                 push    ecx
.text:0000967C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009683                 mov     [ebp+var_4], ecx
.text:00009686                 mov     eax, [ebp+var_4]
.text:00009689                 mov     dword ptr [eax], 0
.text:0000968F                 mov     eax, [ebp+var_4]
.text:00009692                 mov     esp, ebp
.text:00009694                 pop     ebp
.text:00009695                 retn
.text:00009695 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00009695
.text:00009695 ; ---------------------------------------------------------------------------
.text:00009696                 align 4
.text:00009696 _text           ends
.text:00009696
.text:00009698 ; ===========================================================================
.text:00009698
.text:00009698 ; Segment type: Pure code
.text:00009698 ; Segment permissions: Read/Execute
.text:00009698 _text           segment para public 'CODE' use32
.text:00009698                 assume cs:_text
.text:00009698                 ;org 9698h
.text:00009698 ; COMDAT (pick any)
.text:00009698                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009698
.text:00009698 ; =============== S U B R O U T I N E =======================================
.text:00009698
.text:00009698 ; Attributes: bp-based frame
.text:00009698
.text:00009698 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00009698                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00009698 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00009698                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+5F0p
.text:00009698                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+9Fp
.text:00009698
.text:00009698 var_4           = dword ptr -4
.text:00009698 arg_0           = dword ptr  8
.text:00009698
.text:00009698                 push    ebp
.text:00009699                 mov     ebp, esp
.text:0000969B                 push    ecx
.text:0000969C                 push    esi
.text:0000969D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000096A4                 mov     [ebp+var_4], ecx
.text:000096A7                 mov     eax, [ebp+var_4]
.text:000096AA                 mov     ecx, [ebp+arg_0]
.text:000096AD                 mov     [eax], ecx
.text:000096AF                 cmp     [ebp+arg_0], 0
.text:000096B3                 jz      short loc_96CC
.text:000096B5                 mov     edx, [ebp+arg_0]
.text:000096B8                 mov     eax, [edx]
.text:000096BA                 mov     esi, esp
.text:000096BC                 mov     ecx, [ebp+arg_0]
.text:000096BF                 push    ecx
.text:000096C0                 mov     edx, [eax+4]
.text:000096C3                 call    edx
.text:000096C5                 cmp     esi, esp
.text:000096C7                 call    __RTC_CheckEsp
.text:000096CC
.text:000096CC loc_96CC:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:000096CC                 mov     eax, [ebp+var_4]
.text:000096CF                 pop     esi
.text:000096D0                 add     esp, 4
.text:000096D3                 cmp     ebp, esp
.text:000096D5                 call    __RTC_CheckEsp
.text:000096DA                 mov     esp, ebp
.text:000096DC                 pop     ebp
.text:000096DD                 retn    4
.text:000096DD ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:000096DD
.text:000096DD _text           ends
.text:000096DD
.text:000096E0 ; ===========================================================================
.text:000096E0
.text:000096E0 ; Segment type: Pure code
.text:000096E0 ; Segment permissions: Read/Execute
.text:000096E0 _text           segment para public 'CODE' use32
.text:000096E0                 assume cs:_text
.text:000096E0                 ;org 96E0h
.text:000096E0 ; COMDAT (pick any)
.text:000096E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000096E0
.text:000096E0 ; =============== S U B R O U T I N E =======================================
.text:000096E0
.text:000096E0 ; Attributes: bp-based frame
.text:000096E0
.text:000096E0 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:000096E0                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:000096E0 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:000096E0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+72Bp
.text:000096E0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+921p ...
.text:000096E0
.text:000096E0 var_4           = dword ptr -4
.text:000096E0
.text:000096E0                 push    ebp
.text:000096E1                 mov     ebp, esp
.text:000096E3                 push    ecx
.text:000096E4                 push    esi
.text:000096E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000096EC                 mov     [ebp+var_4], ecx
.text:000096EF                 mov     eax, [ebp+var_4]
.text:000096F2                 cmp     dword ptr [eax], 0
.text:000096F5                 jz      short loc_9712
.text:000096F7                 mov     ecx, [ebp+var_4]
.text:000096FA                 mov     edx, [ecx]
.text:000096FC                 mov     eax, [ebp+var_4]
.text:000096FF                 mov     ecx, [eax]
.text:00009701                 mov     edx, [edx]
.text:00009703                 mov     esi, esp
.text:00009705                 push    ecx
.text:00009706                 mov     eax, [edx+8]
.text:00009709                 call    eax
.text:0000970B                 cmp     esi, esp
.text:0000970D                 call    __RTC_CheckEsp
.text:00009712
.text:00009712 loc_9712:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00009712                 pop     esi
.text:00009713                 add     esp, 4
.text:00009716                 cmp     ebp, esp
.text:00009718                 call    __RTC_CheckEsp
.text:0000971D                 mov     esp, ebp
.text:0000971F                 pop     ebp
.text:00009720                 retn
.text:00009720 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00009720
.text:00009720 ; ---------------------------------------------------------------------------
.text:00009721                 align 4
.text:00009721 _text           ends
.text:00009721
.text:00009724 ; ===========================================================================
.text:00009724
.text:00009724 ; Segment type: Pure code
.text:00009724 ; Segment permissions: Read/Execute
.text:00009724 _text           segment para public 'CODE' use32
.text:00009724                 assume cs:_text
.text:00009724                 ;org 9724h
.text:00009724 ; COMDAT (pick any)
.text:00009724                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009724
.text:00009724 ; =============== S U B R O U T I N E =======================================
.text:00009724
.text:00009724 ; Attributes: bp-based frame
.text:00009724
.text:00009724 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00009724                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00009724 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00009724                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+43p
.text:00009724                                         ; NArchive::NZip::CThreadInfo::WaitAndCode(void)+91p ...
.text:00009724
.text:00009724 var_4           = dword ptr -4
.text:00009724
.text:00009724                 push    ebp
.text:00009725                 mov     ebp, esp
.text:00009727                 push    ecx
.text:00009728                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000972F                 mov     [ebp+var_4], ecx
.text:00009732                 mov     eax, [ebp+var_4]
.text:00009735                 mov     eax, [eax]
.text:00009737                 mov     esp, ebp
.text:00009739                 pop     ebp
.text:0000973A                 retn
.text:0000973A ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000973A
.text:0000973A ; ---------------------------------------------------------------------------
.text:0000973B                 align 4
.text:0000973B _text           ends
.text:0000973B
.text:0000973C ; ===========================================================================
.text:0000973C
.text:0000973C ; Segment type: Pure code
.text:0000973C ; Segment permissions: Read/Execute
.text:0000973C _text           segment para public 'CODE' use32
.text:0000973C                 assume cs:_text
.text:0000973C                 ;org 973Ch
.text:0000973C ; COMDAT (pick any)
.text:0000973C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000973C
.text:0000973C ; =============== S U B R O U T I N E =======================================
.text:0000973C
.text:0000973C ; Attributes: bp-based frame
.text:0000973C
.text:0000973C ; public: struct ICompressProgressInfo * * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator&(void)
.text:0000973C                 public ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ
.text:0000973C ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ proc near
.text:0000973C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Create(IProgress *,bool)+23p
.text:0000973C
.text:0000973C var_4           = dword ptr -4
.text:0000973C
.text:0000973C                 push    ebp
.text:0000973D                 mov     ebp, esp
.text:0000973F                 push    ecx
.text:00009740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009747                 mov     [ebp+var_4], ecx
.text:0000974A                 mov     eax, [ebp+var_4]
.text:0000974D                 mov     esp, ebp
.text:0000974F                 pop     ebp
.text:00009750                 retn
.text:00009750 ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ endp
.text:00009750
.text:00009750 ; ---------------------------------------------------------------------------
.text:00009751                 align 4
.text:00009751 _text           ends
.text:00009751
.text:00009754 ; ===========================================================================
.text:00009754
.text:00009754 ; Segment type: Pure code
.text:00009754 ; Segment permissions: Read/Execute
.text:00009754 _text           segment para public 'CODE' use32
.text:00009754                 assume cs:_text
.text:00009754                 ;org 9754h
.text:00009754 ; COMDAT (pick any)
.text:00009754                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009754
.text:00009754 ; =============== S U B R O U T I N E =======================================
.text:00009754
.text:00009754 ; Attributes: bp-based frame
.text:00009754
.text:00009754 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator->(void)const
.text:00009754                 public ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00009754 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00009754                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+A0p
.text:00009754                                         ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+6Cp
.text:00009754
.text:00009754 var_4           = dword ptr -4
.text:00009754
.text:00009754                 push    ebp
.text:00009755                 mov     ebp, esp
.text:00009757                 push    ecx
.text:00009758                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000975F                 mov     [ebp+var_4], ecx
.text:00009762                 mov     eax, [ebp+var_4]
.text:00009765                 mov     eax, [eax]
.text:00009767                 mov     esp, ebp
.text:00009769                 pop     ebp
.text:0000976A                 retn
.text:0000976A ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000976A
.text:0000976A ; ---------------------------------------------------------------------------
.text:0000976B                 align 4
.text:0000976B _text           ends
.text:0000976B
.text:0000976C ; ===========================================================================
.text:0000976C
.text:0000976C ; Segment type: Pure code
.text:0000976C ; Segment permissions: Read/Execute
.text:0000976C _text           segment para public 'CODE' use32
.text:0000976C                 assume cs:_text
.text:0000976C                 ;org 976Ch
.text:0000976C ; COMDAT (pick any)
.text:0000976C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000976C
.text:0000976C ; =============== S U B R O U T I N E =======================================
.text:0000976C
.text:0000976C ; Attributes: bp-based frame
.text:0000976C
.text:0000976C ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator=(struct ICompressProgressInfo *)
.text:0000976C                 public ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
.text:0000976C ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z proc near
.text:0000976C                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+8Ap
.text:0000976C                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B3Bp
.text:0000976C
.text:0000976C var_4           = dword ptr -4
.text:0000976C arg_0           = dword ptr  8
.text:0000976C
.text:0000976C                 push    ebp
.text:0000976D                 mov     ebp, esp
.text:0000976F                 push    ecx
.text:00009770                 push    esi
.text:00009771                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009778                 mov     [ebp+var_4], ecx
.text:0000977B                 cmp     [ebp+arg_0], 0
.text:0000977F                 jz      short loc_9798
.text:00009781                 mov     eax, [ebp+arg_0]
.text:00009784                 mov     ecx, [eax]
.text:00009786                 mov     esi, esp
.text:00009788                 mov     edx, [ebp+arg_0]
.text:0000978B                 push    edx
.text:0000978C                 mov     eax, [ecx+4]
.text:0000978F                 call    eax
.text:00009791                 cmp     esi, esp
.text:00009793                 call    __RTC_CheckEsp
.text:00009798
.text:00009798 loc_9798:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+13j
.text:00009798                 mov     ecx, [ebp+var_4]
.text:0000979B                 cmp     dword ptr [ecx], 0
.text:0000979E                 jz      short loc_97BB
.text:000097A0                 mov     edx, [ebp+var_4]
.text:000097A3                 mov     eax, [edx]
.text:000097A5                 mov     ecx, [ebp+var_4]
.text:000097A8                 mov     edx, [ecx]
.text:000097AA                 mov     eax, [eax]
.text:000097AC                 mov     esi, esp
.text:000097AE                 push    edx
.text:000097AF                 mov     ecx, [eax+8]
.text:000097B2                 call    ecx
.text:000097B4                 cmp     esi, esp
.text:000097B6                 call    __RTC_CheckEsp
.text:000097BB
.text:000097BB loc_97BB:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+32j
.text:000097BB                 mov     edx, [ebp+var_4]
.text:000097BE                 mov     eax, [ebp+arg_0]
.text:000097C1                 mov     [edx], eax
.text:000097C3                 mov     eax, [ebp+arg_0]
.text:000097C6                 pop     esi
.text:000097C7                 add     esp, 4
.text:000097CA                 cmp     ebp, esp
.text:000097CC                 call    __RTC_CheckEsp
.text:000097D1                 mov     esp, ebp
.text:000097D3                 pop     ebp
.text:000097D4                 retn    4
.text:000097D4 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z endp
.text:000097D4
.text:000097D4 ; ---------------------------------------------------------------------------
.text:000097D7                 align 4
.text:000097D7 _text           ends
.text:000097D7
.text:000097D8 ; ===========================================================================
.text:000097D8
.text:000097D8 ; Segment type: Pure code
.text:000097D8 ; Segment permissions: Read/Execute
.text:000097D8 _text           segment para public 'CODE' use32
.text:000097D8                 assume cs:_text
.text:000097D8                 ;org 97D8h
.text:000097D8 ; COMDAT (pick any)
.text:000097D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000097D8
.text:000097D8 ; =============== S U B R O U T I N E =======================================
.text:000097D8
.text:000097D8 ; Attributes: bp-based frame
.text:000097D8
.text:000097D8 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000097D8                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:000097D8 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: CMtCompressProgressMixer::CMtCompressProgressMixer(void)+42p
.text:000097D8                                         ; CMtCompressProgressMixer::CMtCompressProgressMixer(void)+51p
.text:000097D8
.text:000097D8 var_4           = dword ptr -4
.text:000097D8
.text:000097D8                 push    ebp
.text:000097D9                 mov     ebp, esp
.text:000097DB                 push    ecx
.text:000097DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000097E3                 mov     [ebp+var_4], ecx
.text:000097E6                 mov     eax, [ebp+var_4]
.text:000097E9                 mov     dword ptr [eax], 0
.text:000097EF                 mov     ecx, [ebp+var_4]
.text:000097F2                 mov     dword ptr [ecx+4], 0
.text:000097F9                 mov     edx, [ebp+var_4]
.text:000097FC                 mov     dword ptr [edx+8], 0
.text:00009803                 mov     eax, [ebp+var_4]
.text:00009806                 mov     esp, ebp
.text:00009808                 pop     ebp
.text:00009809                 retn
.text:00009809 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00009809
.text:00009809 ; ---------------------------------------------------------------------------
.text:0000980A                 align 4
.text:0000980A _text           ends
.text:0000980A
.text:0000980C ; ===========================================================================
.text:0000980C
.text:0000980C ; Segment type: Pure code
.text:0000980C ; Segment permissions: Read/Execute
.text:0000980C _text           segment para public 'CODE' use32
.text:0000980C                 assume cs:_text
.text:0000980C                 ;org 980Ch
.text:0000980C ; COMDAT (pick any)
.text:0000980C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000980C
.text:0000980C ; =============== S U B R O U T I N E =======================================
.text:0000980C
.text:0000980C ; Attributes: bp-based frame
.text:0000980C
.text:0000980C ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000980C                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:0000980C ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1+6j
.text:0000980C                                         ; __unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2+6j ...
.text:0000980C
.text:0000980C var_8           = dword ptr -8
.text:0000980C var_4           = dword ptr -4
.text:0000980C
.text:0000980C                 push    ebp
.text:0000980D                 mov     ebp, esp
.text:0000980F                 sub     esp, 8
.text:00009812                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009819                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009820                 mov     [ebp+var_4], ecx
.text:00009823                 mov     eax, [ebp+var_4]
.text:00009826                 mov     ecx, [eax]
.text:00009828                 mov     [ebp+var_8], ecx
.text:0000982B                 mov     edx, [ebp+var_8]
.text:0000982E                 push    edx             ; void *
.text:0000982F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009834                 add     esp, 4
.text:00009837                 add     esp, 8
.text:0000983A                 cmp     ebp, esp
.text:0000983C                 call    __RTC_CheckEsp
.text:00009841                 mov     esp, ebp
.text:00009843                 pop     ebp
.text:00009844                 retn
.text:00009844 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00009844
.text:00009844 ; ---------------------------------------------------------------------------
.text:00009845                 align 4
.text:00009845 _text           ends
.text:00009845
.text:00009848 ; ===========================================================================
.text:00009848
.text:00009848 ; Segment type: Pure code
.text:00009848 ; Segment permissions: Read/Execute
.text:00009848 _text           segment para public 'CODE' use32
.text:00009848                 assume cs:_text
.text:00009848                 ;org 9848h
.text:00009848 ; COMDAT (pick any)
.text:00009848                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009848
.text:00009848 ; =============== S U B R O U T I N E =======================================
.text:00009848
.text:00009848 ; Attributes: bp-based frame
.text:00009848
.text:00009848 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00009848                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00009848 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00009848                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00009848
.text:00009848 var_4           = dword ptr -4
.text:00009848
.text:00009848                 push    ebp
.text:00009849                 mov     ebp, esp
.text:0000984B                 push    ecx
.text:0000984C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009853                 mov     [ebp+var_4], ecx
.text:00009856                 mov     ecx, [ebp+var_4]
.text:00009859                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000985E                 mov     eax, [ebp+var_4]
.text:00009861                 add     esp, 4
.text:00009864                 cmp     ebp, esp
.text:00009866                 call    __RTC_CheckEsp
.text:0000986B                 mov     esp, ebp
.text:0000986D                 pop     ebp
.text:0000986E                 retn
.text:0000986E ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:0000986E
.text:0000986E ; ---------------------------------------------------------------------------
.text:0000986F                 align 10h
.text:0000986F _text           ends
.text:0000986F
.text:00009870 ; ===========================================================================
.text:00009870
.text:00009870 ; Segment type: Pure code
.text:00009870 ; Segment permissions: Read/Execute
.text:00009870 _text           segment para public 'CODE' use32
.text:00009870                 assume cs:_text
.text:00009870                 ;org 9870h
.text:00009870 ; COMDAT (pick any)
.text:00009870                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009870
.text:00009870 ; =============== S U B R O U T I N E =======================================
.text:00009870
.text:00009870 ; Attributes: bp-based frame
.text:00009870
.text:00009870 ; public: class CObjectVector<struct CProp> & __thiscall CObjectVector<struct CProp>::operator=(class CObjectVector<struct CProp> const &)
.text:00009870                 public ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:00009870 ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text:00009870                                         ; CODE XREF: CProps::operator=(CProps const &)+15p
.text:00009870
.text:00009870 var_24          = dword ptr -24h
.text:00009870 var_20          = dword ptr -20h
.text:00009870 var_1C          = dword ptr -1Ch
.text:00009870 var_18          = dword ptr -18h
.text:00009870 var_14          = dword ptr -14h
.text:00009870 var_10          = dword ptr -10h
.text:00009870 var_C           = dword ptr -0Ch
.text:00009870 var_4           = dword ptr -4
.text:00009870 arg_0           = dword ptr  8
.text:00009870
.text:00009870                 push    ebp
.text:00009871                 mov     ebp, esp
.text:00009873                 push    0FFFFFFFFh
.text:00009875                 push    offset __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text:0000987A                 mov     eax, large fs:0
.text:00009880                 push    eax
.text:00009881                 sub     esp, 18h
.text:00009884                 mov     eax, 0CCCCCCCCh
.text:00009889                 mov     [ebp+var_24], eax
.text:0000988C                 mov     [ebp+var_20], eax
.text:0000988F                 mov     [ebp+var_1C], eax
.text:00009892                 mov     [ebp+var_18], eax
.text:00009895                 mov     [ebp+var_14], eax
.text:00009898                 mov     [ebp+var_10], eax
.text:0000989B                 mov     eax, dword ptr ds:___security_cookie
.text:000098A0                 xor     eax, ebp
.text:000098A2                 push    eax
.text:000098A3                 lea     eax, [ebp+var_C]
.text:000098A6                 mov     large fs:0, eax
.text:000098AC                 mov     [ebp+var_10], ecx
.text:000098AF                 mov     eax, [ebp+arg_0]
.text:000098B2                 cmp     eax, [ebp+var_10]
.text:000098B5                 jnz     short loc_98BF
.text:000098B7                 mov     eax, [ebp+var_10]
.text:000098BA                 jmp     loc_9951
.text:000098BF ; ---------------------------------------------------------------------------
.text:000098BF
.text:000098BF loc_98BF:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+45j
.text:000098BF                 mov     ecx, [ebp+var_10]
.text:000098C2                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:000098C7                 mov     ecx, [ebp+arg_0]
.text:000098CA                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:000098CF                 mov     [ebp+var_14], eax
.text:000098D2                 mov     ecx, [ebp+var_14]
.text:000098D5                 push    ecx
.text:000098D6                 mov     ecx, [ebp+var_10]
.text:000098D9                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:000098DE                 mov     [ebp+var_18], 0
.text:000098E5                 jmp     short loc_98F0
.text:000098E7 ; ---------------------------------------------------------------------------
.text:000098E7
.text:000098E7 loc_98E7:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+DCj
.text:000098E7                 mov     edx, [ebp+var_18]
.text:000098EA                 add     edx, 1
.text:000098ED                 mov     [ebp+var_18], edx
.text:000098F0
.text:000098F0 loc_98F0:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+75j
.text:000098F0                 mov     eax, [ebp+var_18]
.text:000098F3                 cmp     eax, [ebp+var_14]
.text:000098F6                 jnb     short loc_994E
.text:000098F8                 push    18h             ; unsigned int
.text:000098FA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000098FF                 add     esp, 4
.text:00009902                 mov     [ebp+var_20], eax
.text:00009905                 mov     [ebp+var_4], 0
.text:0000990C                 cmp     [ebp+var_20], 0
.text:00009910                 jz      short loc_992C
.text:00009912                 mov     ecx, [ebp+var_18]
.text:00009915                 push    ecx
.text:00009916                 mov     ecx, [ebp+arg_0]
.text:00009919                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000991E                 push    eax             ; struct CProp *
.text:0000991F                 mov     ecx, [ebp+var_20] ; this
.text:00009922                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00009927                 mov     [ebp+var_24], eax
.text:0000992A                 jmp     short loc_9933
.text:0000992C ; ---------------------------------------------------------------------------
.text:0000992C
.text:0000992C loc_992C:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+A0j
.text:0000992C                 mov     [ebp+var_24], 0
.text:00009933
.text:00009933 loc_9933:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+BAj
.text:00009933                 mov     edx, [ebp+var_24]
.text:00009936                 mov     [ebp+var_1C], edx
.text:00009939                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009940                 mov     eax, [ebp+var_1C]
.text:00009943                 push    eax
.text:00009944                 mov     ecx, [ebp+var_10]
.text:00009947                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:0000994C                 jmp     short loc_98E7
.text:0000994E ; ---------------------------------------------------------------------------
.text:0000994E
.text:0000994E loc_994E:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+86j
.text:0000994E                 mov     eax, [ebp+var_10]
.text:00009951
.text:00009951 loc_9951:                               ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+4Aj
.text:00009951                 mov     ecx, [ebp+var_C]
.text:00009954                 mov     large fs:0, ecx
.text:0000995B                 pop     ecx
.text:0000995C                 add     esp, 24h
.text:0000995F                 cmp     ebp, esp
.text:00009961                 call    __RTC_CheckEsp
.text:00009966                 mov     esp, ebp
.text:00009968                 pop     ebp
.text:00009969                 retn    4
.text:00009969 ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text:00009969
.text:00009969 _text           ends
.text:00009969
.text$x:0000996C ; ===========================================================================
.text$x:0000996C
.text$x:0000996C ; Segment type: Pure code
.text$x:0000996C ; Segment permissions: Read/Execute
.text$x:0000996C _text$x         segment para public 'CODE' use32
.text$x:0000996C                 assume cs:_text$x
.text$x:0000996C                 ;org 996Ch
.text$x:0000996C ; COMDAT (pick associative to section at 9870)
.text$x:0000996C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000996C
.text$x:0000996C ; =============== S U B R O U T I N E =======================================
.text$x:0000996C
.text$x:0000996C
.text$x:0000996C __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:0000996C                                         ; DATA XREF: .xdata$x:00009998o
.text$x:0000996C                 mov     eax, [ebp-20h]
.text$x:0000996F                 push    eax             ; void *
.text$x:00009970                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00009975                 pop     ecx
.text$x:00009976                 retn
.text$x:00009976 __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00009976
.text$x:00009977
.text$x:00009977 ; =============== S U B R O U T I N E =======================================
.text$x:00009977
.text$x:00009977
.text$x:00009977 __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00009977                                         ; DATA XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5o
.text$x:00009977
.text$x:00009977 arg_4           = dword ptr  8
.text$x:00009977
.text$x:00009977                 mov     edx, [esp+arg_4]
.text$x:0000997B                 lea     eax, [edx+0Ch]
.text$x:0000997E                 mov     ecx, [edx-1Ch]
.text$x:00009981                 xor     ecx, eax
.text$x:00009983                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009988                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.text$x:0000998D                 jmp     ___CxxFrameHandler3
.text$x:0000998D __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z endp
.text$x:0000998D
.text$x:0000998D ; ---------------------------------------------------------------------------
.text$x:00009992                 align 4
.text$x:00009992 _text$x         ends
.text$x:00009992
.xdata$x:00009994 ; ===========================================================================
.xdata$x:00009994
.xdata$x:00009994 ; Segment type: Pure data
.xdata$x:00009994 ; Segment permissions: Read
.xdata$x:00009994 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009994                 assume cs:_xdata$x
.xdata$x:00009994                 ;org 9994h
.xdata$x:00009994 ; COMDAT (pick associative to section at 9870)
.xdata$x:00009994 __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00009994                                         ; DATA XREF: .xdata$x:000099A4o
.xdata$x:00009995                 db 0FFh
.xdata$x:00009996                 db 0FFh
.xdata$x:00009997                 db 0FFh
.xdata$x:00009998                 dd offset __unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:0000999C __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:0000999C                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:0000999D                 db    5
.xdata$x:0000999E                 db  93h ; ô
.xdata$x:0000999F                 db  19h
.xdata$x:000099A0                 db    1
.xdata$x:000099A1                 db    0
.xdata$x:000099A2                 db    0
.xdata$x:000099A3                 db    0
.xdata$x:000099A4                 dd offset __unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
.xdata$x:000099A8                 db    0
.xdata$x:000099A9                 db    0
.xdata$x:000099AA                 db    0
.xdata$x:000099AB                 db    0
.xdata$x:000099AC                 db    0
.xdata$x:000099AD                 db    0
.xdata$x:000099AE                 db    0
.xdata$x:000099AF                 db    0
.xdata$x:000099B0                 db    0
.xdata$x:000099B1                 db    0
.xdata$x:000099B2                 db    0
.xdata$x:000099B3                 db    0
.xdata$x:000099B4                 db    0
.xdata$x:000099B5                 db    0
.xdata$x:000099B6                 db    0
.xdata$x:000099B7                 db    0
.xdata$x:000099B8                 db    0
.xdata$x:000099B9                 db    0
.xdata$x:000099BA                 db    0
.xdata$x:000099BB                 db    0
.xdata$x:000099BC                 db    1
.xdata$x:000099BD                 db    0
.xdata$x:000099BE                 db    0
.xdata$x:000099BF                 db    0
.xdata$x:000099BF _xdata$x        ends
.xdata$x:000099BF
.text:000099C0 ; ===========================================================================
.text:000099C0
.text:000099C0 ; Segment type: Pure code
.text:000099C0 ; Segment permissions: Read/Execute
.text:000099C0 _text           segment para public 'CODE' use32
.text:000099C0                 assume cs:_text
.text:000099C0                 ;org 99C0h
.text:000099C0 ; COMDAT (pick any)
.text:000099C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000099C0
.text:000099C0 ; =============== S U B R O U T I N E =======================================
.text:000099C0
.text:000099C0 ; Attributes: bp-based frame
.text:000099C0
.text:000099C0 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:000099C0                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:000099C0 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:000099C0                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+5Ap
.text:000099C0                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:000099C0
.text:000099C0 var_4           = dword ptr -4
.text:000099C0
.text:000099C0                 push    ebp
.text:000099C1                 mov     ebp, esp
.text:000099C3                 push    ecx
.text:000099C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000099CB                 mov     [ebp+var_4], ecx
.text:000099CE                 mov     ecx, [ebp+var_4]
.text:000099D1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000099D6                 add     esp, 4
.text:000099D9                 cmp     ebp, esp
.text:000099DB                 call    __RTC_CheckEsp
.text:000099E0                 mov     esp, ebp
.text:000099E2                 pop     ebp
.text:000099E3                 retn
.text:000099E3 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:000099E3
.text:000099E3 _text           ends
.text:000099E3
.text:000099E4 ; ===========================================================================
.text:000099E4
.text:000099E4 ; Segment type: Pure code
.text:000099E4 ; Segment permissions: Read/Execute
.text:000099E4 _text           segment para public 'CODE' use32
.text:000099E4                 assume cs:_text
.text:000099E4                 ;org 99E4h
.text:000099E4 ; COMDAT (pick any)
.text:000099E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000099E4
.text:000099E4 ; =============== S U B R O U T I N E =======================================
.text:000099E4
.text:000099E4 ; Attributes: bp-based frame
.text:000099E4
.text:000099E4 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:000099E4                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:000099E4 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:000099E4                                         ; CODE XREF: CMethodProps::Get_NumThreads(void)+31p
.text:000099E4                                         ; CMethodProps::Get_NumThreads(void)+46p ...
.text:000099E4
.text:000099E4 var_4           = dword ptr -4
.text:000099E4 arg_0           = dword ptr  8
.text:000099E4
.text:000099E4                 push    ebp
.text:000099E5                 mov     ebp, esp
.text:000099E7                 push    ecx
.text:000099E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000099EF                 mov     [ebp+var_4], ecx
.text:000099F2                 mov     eax, [ebp+arg_0]
.text:000099F5                 push    eax
.text:000099F6                 mov     ecx, [ebp+var_4]
.text:000099F9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000099FE                 mov     eax, [eax]
.text:00009A00                 add     esp, 4
.text:00009A03                 cmp     ebp, esp
.text:00009A05                 call    __RTC_CheckEsp
.text:00009A0A                 mov     esp, ebp
.text:00009A0C                 pop     ebp
.text:00009A0D                 retn    4
.text:00009A0D ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00009A0D
.text:00009A0D _text           ends
.text:00009A0D
.text:00009A10 ; ===========================================================================
.text:00009A10
.text:00009A10 ; Segment type: Pure code
.text:00009A10 ; Segment permissions: Read/Execute
.text:00009A10 _text           segment para public 'CODE' use32
.text:00009A10                 assume cs:_text
.text:00009A10                 ;org 9A10h
.text:00009A10 ; COMDAT (pick any)
.text:00009A10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009A10
.text:00009A10 ; =============== S U B R O U T I N E =======================================
.text:00009A10
.text:00009A10 ; Attributes: bp-based frame
.text:00009A10
.text:00009A10 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00009A10                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00009A10 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00009A10                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00009A10
.text:00009A10 var_20          = dword ptr -20h
.text:00009A10 var_1C          = dword ptr -1Ch
.text:00009A10 var_18          = dword ptr -18h
.text:00009A10 var_14          = dword ptr -14h
.text:00009A10 var_10          = dword ptr -10h
.text:00009A10 var_C           = dword ptr -0Ch
.text:00009A10 var_4           = dword ptr -4
.text:00009A10
.text:00009A10                 push    ebp
.text:00009A11                 mov     ebp, esp
.text:00009A13                 push    0FFFFFFFFh
.text:00009A15                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00009A1A                 mov     eax, large fs:0
.text:00009A20                 push    eax
.text:00009A21                 sub     esp, 14h
.text:00009A24                 mov     eax, 0CCCCCCCCh
.text:00009A29                 mov     [ebp+var_20], eax
.text:00009A2C                 mov     [ebp+var_1C], eax
.text:00009A2F                 mov     [ebp+var_18], eax
.text:00009A32                 mov     [ebp+var_14], eax
.text:00009A35                 mov     [ebp+var_10], eax
.text:00009A38                 mov     eax, dword ptr ds:___security_cookie
.text:00009A3D                 xor     eax, ebp
.text:00009A3F                 push    eax
.text:00009A40                 lea     eax, [ebp+var_C]
.text:00009A43                 mov     large fs:0, eax
.text:00009A49                 mov     [ebp+var_10], ecx
.text:00009A4C                 mov     [ebp+var_4], 0
.text:00009A53                 mov     ecx, [ebp+var_10]
.text:00009A56                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009A5B                 mov     [ebp+var_14], eax
.text:00009A5E
.text:00009A5E loc_9A5E:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_9AA0j
.text:00009A5E                 cmp     [ebp+var_14], 0
.text:00009A62                 jz      short loc_9AA2
.text:00009A64                 mov     eax, [ebp+var_14]
.text:00009A67                 sub     eax, 1
.text:00009A6A                 mov     [ebp+var_14], eax
.text:00009A6D                 mov     ecx, [ebp+var_14]
.text:00009A70                 push    ecx
.text:00009A71                 mov     ecx, [ebp+var_10]
.text:00009A74                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009A79                 mov     edx, [eax]
.text:00009A7B                 mov     [ebp+var_1C], edx
.text:00009A7E                 mov     eax, [ebp+var_1C]
.text:00009A81                 mov     [ebp+var_18], eax
.text:00009A84                 cmp     [ebp+var_18], 0
.text:00009A88                 jz      short loc_9A99
.text:00009A8A                 push    1
.text:00009A8C                 mov     ecx, [ebp+var_18]
.text:00009A8F                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00009A94                 mov     [ebp+var_20], eax
.text:00009A97                 jmp     short loc_9AA0
.text:00009A99 ; ---------------------------------------------------------------------------
.text:00009A99
.text:00009A99 loc_9A99:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00009A99                 mov     [ebp+var_20], 0
.text:00009AA0
.text:00009AA0 loc_9AA0:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00009AA0                 jmp     short loc_9A5E
.text:00009AA2 ; ---------------------------------------------------------------------------
.text:00009AA2
.text:00009AA2 loc_9AA2:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00009AA2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009AA9                 mov     ecx, [ebp+var_10]
.text:00009AAC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009AB1                 mov     ecx, [ebp+var_C]
.text:00009AB4                 mov     large fs:0, ecx
.text:00009ABB                 pop     ecx
.text:00009ABC                 add     esp, 20h
.text:00009ABF                 cmp     ebp, esp
.text:00009AC1                 call    __RTC_CheckEsp
.text:00009AC6                 mov     esp, ebp
.text:00009AC8                 pop     ebp
.text:00009AC9                 retn
.text:00009AC9 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00009AC9
.text:00009AC9 ; ---------------------------------------------------------------------------
.text:00009ACA                 align 4
.text:00009ACA _text           ends
.text:00009ACA
.text$x:00009ACC ; ===========================================================================
.text$x:00009ACC
.text$x:00009ACC ; Segment type: Pure code
.text$x:00009ACC ; Segment permissions: Read/Execute
.text$x:00009ACC _text$x         segment para public 'CODE' use32
.text$x:00009ACC                 assume cs:_text$x
.text$x:00009ACC                 ;org 9ACCh
.text$x:00009ACC ; COMDAT (pick associative to section at 9A10)
.text$x:00009ACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00009ACC
.text$x:00009ACC ; =============== S U B R O U T I N E =======================================
.text$x:00009ACC
.text$x:00009ACC
.text$x:00009ACC __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00009ACC                                         ; DATA XREF: .xdata$x:00009AF4o
.text$x:00009ACC                 mov     ecx, [ebp-10h]
.text$x:00009ACF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009ACF __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:00009ACF
.text$x:00009AD4
.text$x:00009AD4 ; =============== S U B R O U T I N E =======================================
.text$x:00009AD4
.text$x:00009AD4
.text$x:00009AD4 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00009AD4                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00009AD4
.text$x:00009AD4 arg_4           = dword ptr  8
.text$x:00009AD4
.text$x:00009AD4                 mov     edx, [esp+arg_4]
.text$x:00009AD8                 lea     eax, [edx+0Ch]
.text$x:00009ADB                 mov     ecx, [edx-18h]
.text$x:00009ADE                 xor     ecx, eax
.text$x:00009AE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009AE5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00009AEA                 jmp     ___CxxFrameHandler3
.text$x:00009AEA __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00009AEA
.text$x:00009AEA ; ---------------------------------------------------------------------------
.text$x:00009AEF                 align 10h
.text$x:00009AEF _text$x         ends
.text$x:00009AEF
.xdata$x:00009AF0 ; ===========================================================================
.xdata$x:00009AF0
.xdata$x:00009AF0 ; Segment type: Pure data
.xdata$x:00009AF0 ; Segment permissions: Read
.xdata$x:00009AF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AF0                 assume cs:_xdata$x
.xdata$x:00009AF0                 ;org 9AF0h
.xdata$x:00009AF0 ; COMDAT (pick associative to section at 9A10)
.xdata$x:00009AF0 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00009AF0                                         ; DATA XREF: .xdata$x:00009B00o
.xdata$x:00009AF1                 db 0FFh
.xdata$x:00009AF2                 db 0FFh
.xdata$x:00009AF3                 db 0FFh
.xdata$x:00009AF4                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00009AF8 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00009AF8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00009AF9                 db    5
.xdata$x:00009AFA                 db  93h ; ô
.xdata$x:00009AFB                 db  19h
.xdata$x:00009AFC                 db    1
.xdata$x:00009AFD                 db    0
.xdata$x:00009AFE                 db    0
.xdata$x:00009AFF                 db    0
.xdata$x:00009B00                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00009B04                 db    0
.xdata$x:00009B05                 db    0
.xdata$x:00009B06                 db    0
.xdata$x:00009B07                 db    0
.xdata$x:00009B08                 db    0
.xdata$x:00009B09                 db    0
.xdata$x:00009B0A                 db    0
.xdata$x:00009B0B                 db    0
.xdata$x:00009B0C                 db    0
.xdata$x:00009B0D                 db    0
.xdata$x:00009B0E                 db    0
.xdata$x:00009B0F                 db    0
.xdata$x:00009B10                 db    0
.xdata$x:00009B11                 db    0
.xdata$x:00009B12                 db    0
.xdata$x:00009B13                 db    0
.xdata$x:00009B14                 db    0
.xdata$x:00009B15                 db    0
.xdata$x:00009B16                 db    0
.xdata$x:00009B17                 db    0
.xdata$x:00009B18                 db    1
.xdata$x:00009B19                 db    0
.xdata$x:00009B1A                 db    0
.xdata$x:00009B1B                 db    0
.xdata$x:00009B1B _xdata$x        ends
.xdata$x:00009B1B
.text:00009B1C ; ===========================================================================
.text:00009B1C
.text:00009B1C ; Segment type: Pure code
.text:00009B1C ; Segment permissions: Read/Execute
.text:00009B1C _text           segment para public 'CODE' use32
.text:00009B1C                 assume cs:_text
.text:00009B1C                 ;org 9B1Ch
.text:00009B1C ; COMDAT (pick any)
.text:00009B1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009B1C
.text:00009B1C ; =============== S U B R O U T I N E =======================================
.text:00009B1C
.text:00009B1C ; Attributes: bp-based frame
.text:00009B1C
.text:00009B1C ; public: void __thiscall CObjectVector<struct CProp>::Clear(void)
.text:00009B1C                 public ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
.text:00009B1C ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
.text:00009B1C                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+52p
.text:00009B1C
.text:00009B1C var_14          = dword ptr -14h
.text:00009B1C var_10          = dword ptr -10h
.text:00009B1C var_C           = dword ptr -0Ch
.text:00009B1C var_8           = dword ptr -8
.text:00009B1C var_4           = dword ptr -4
.text:00009B1C
.text:00009B1C                 push    ebp
.text:00009B1D                 mov     ebp, esp
.text:00009B1F                 sub     esp, 14h
.text:00009B22                 mov     eax, 0CCCCCCCCh
.text:00009B27                 mov     [ebp+var_14], eax
.text:00009B2A                 mov     [ebp+var_10], eax
.text:00009B2D                 mov     [ebp+var_C], eax
.text:00009B30                 mov     [ebp+var_8], eax
.text:00009B33                 mov     [ebp+var_4], eax
.text:00009B36                 mov     [ebp+var_4], ecx
.text:00009B39                 mov     ecx, [ebp+var_4]
.text:00009B3C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009B41                 mov     [ebp+var_8], eax
.text:00009B44
.text:00009B44 loc_9B44:                               ; CODE XREF: CObjectVector<CProp>::Clear(void):loc_9B86j
.text:00009B44                 cmp     [ebp+var_8], 0
.text:00009B48                 jz      short loc_9B88
.text:00009B4A                 mov     eax, [ebp+var_8]
.text:00009B4D                 sub     eax, 1
.text:00009B50                 mov     [ebp+var_8], eax
.text:00009B53                 mov     ecx, [ebp+var_8]
.text:00009B56                 push    ecx
.text:00009B57                 mov     ecx, [ebp+var_4]
.text:00009B5A                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009B5F                 mov     edx, [eax]
.text:00009B61                 mov     [ebp+var_10], edx
.text:00009B64                 mov     eax, [ebp+var_10]
.text:00009B67                 mov     [ebp+var_C], eax
.text:00009B6A                 cmp     [ebp+var_C], 0
.text:00009B6E                 jz      short loc_9B7F
.text:00009B70                 push    1
.text:00009B72                 mov     ecx, [ebp+var_C]
.text:00009B75                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00009B7A                 mov     [ebp+var_14], eax
.text:00009B7D                 jmp     short loc_9B86
.text:00009B7F ; ---------------------------------------------------------------------------
.text:00009B7F
.text:00009B7F loc_9B7F:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+52j
.text:00009B7F                 mov     [ebp+var_14], 0
.text:00009B86
.text:00009B86 loc_9B86:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+61j
.text:00009B86                 jmp     short loc_9B44
.text:00009B88 ; ---------------------------------------------------------------------------
.text:00009B88
.text:00009B88 loc_9B88:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+2Cj
.text:00009B88                 mov     ecx, [ebp+var_4]
.text:00009B8B                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00009B90                 add     esp, 14h
.text:00009B93                 cmp     ebp, esp
.text:00009B95                 call    __RTC_CheckEsp
.text:00009B9A                 mov     esp, ebp
.text:00009B9C                 pop     ebp
.text:00009B9D                 retn
.text:00009B9D ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ endp
.text:00009B9D
.text:00009B9D ; ---------------------------------------------------------------------------
.text:00009B9E                 align 10h
.text:00009B9E _text           ends
.text:00009B9E
.text:00009BA0 ; ===========================================================================
.text:00009BA0
.text:00009BA0 ; Segment type: Pure code
.text:00009BA0 ; Segment permissions: Read/Execute
.text:00009BA0 _text           segment para public 'CODE' use32
.text:00009BA0                 assume cs:_text
.text:00009BA0                 ;org 9BA0h
.text:00009BA0 ; COMDAT (pick any)
.text:00009BA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009BA0
.text:00009BA0 ; =============== S U B R O U T I N E =======================================
.text:00009BA0
.text:00009BA0 ; Attributes: bp-based frame
.text:00009BA0
.text:00009BA0 ; public: __thiscall CRecordVector<unsigned char>::CRecordVector<unsigned char>(void)
.text:00009BA0                 public ??0?$CRecordVector@E@@QAE@XZ
.text:00009BA0 ??0?$CRecordVector@E@@QAE@XZ proc near  ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+42p
.text:00009BA0
.text:00009BA0 var_4           = dword ptr -4
.text:00009BA0
.text:00009BA0                 push    ebp
.text:00009BA1                 mov     ebp, esp
.text:00009BA3                 push    ecx
.text:00009BA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009BAB                 mov     [ebp+var_4], ecx
.text:00009BAE                 mov     eax, [ebp+var_4]
.text:00009BB1                 mov     dword ptr [eax], 0
.text:00009BB7                 mov     ecx, [ebp+var_4]
.text:00009BBA                 mov     dword ptr [ecx+4], 0
.text:00009BC1                 mov     edx, [ebp+var_4]
.text:00009BC4                 mov     dword ptr [edx+8], 0
.text:00009BCB                 mov     eax, [ebp+var_4]
.text:00009BCE                 mov     esp, ebp
.text:00009BD0                 pop     ebp
.text:00009BD1                 retn
.text:00009BD1 ??0?$CRecordVector@E@@QAE@XZ endp
.text:00009BD1
.text:00009BD1 ; ---------------------------------------------------------------------------
.text:00009BD2                 align 4
.text:00009BD2 _text           ends
.text:00009BD2
.text:00009BD4 ; ===========================================================================
.text:00009BD4
.text:00009BD4 ; Segment type: Pure code
.text:00009BD4 ; Segment permissions: Read/Execute
.text:00009BD4 _text           segment para public 'CODE' use32
.text:00009BD4                 assume cs:_text
.text:00009BD4                 ;org 9BD4h
.text:00009BD4 ; COMDAT (pick any)
.text:00009BD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009BD4
.text:00009BD4 ; =============== S U B R O U T I N E =======================================
.text:00009BD4
.text:00009BD4 ; Attributes: bp-based frame
.text:00009BD4
.text:00009BD4 ; public: __thiscall CRecordVector<unsigned char>::~CRecordVector<unsigned char>(void)
.text:00009BD4                 public ??1?$CRecordVector@E@@QAE@XZ
.text:00009BD4 ??1?$CRecordVector@E@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1+6j
.text:00009BD4                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:00009BD4
.text:00009BD4 var_8           = dword ptr -8
.text:00009BD4 var_4           = dword ptr -4
.text:00009BD4
.text:00009BD4                 push    ebp
.text:00009BD5                 mov     ebp, esp
.text:00009BD7                 sub     esp, 8
.text:00009BDA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009BE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009BE8                 mov     [ebp+var_4], ecx
.text:00009BEB                 mov     eax, [ebp+var_4]
.text:00009BEE                 mov     ecx, [eax]
.text:00009BF0                 mov     [ebp+var_8], ecx
.text:00009BF3                 mov     edx, [ebp+var_8]
.text:00009BF6                 push    edx             ; void *
.text:00009BF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009BFC                 add     esp, 4
.text:00009BFF                 add     esp, 8
.text:00009C02                 cmp     ebp, esp
.text:00009C04                 call    __RTC_CheckEsp
.text:00009C09                 mov     esp, ebp
.text:00009C0B                 pop     ebp
.text:00009C0C                 retn
.text:00009C0C ??1?$CRecordVector@E@@QAE@XZ endp
.text:00009C0C
.text:00009C0C ; ---------------------------------------------------------------------------
.text:00009C0D                 align 10h
.text:00009C0D _text           ends
.text:00009C0D
.text:00009C10 ; ===========================================================================
.text:00009C10
.text:00009C10 ; Segment type: Pure code
.text:00009C10 ; Segment permissions: Read/Execute
.text:00009C10 _text           segment para public 'CODE' use32
.text:00009C10                 assume cs:_text
.text:00009C10                 ;org 9C10h
.text:00009C10 ; COMDAT (pick any)
.text:00009C10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009C10
.text:00009C10 ; =============== S U B R O U T I N E =======================================
.text:00009C10
.text:00009C10 ; Attributes: bp-based frame
.text:00009C10
.text:00009C10 ; public: class CRecordVector<unsigned char> & __thiscall CRecordVector<unsigned char>::operator=(class CRecordVector<unsigned char> const &)
.text:00009C10                 public ??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z
.text:00009C10 ??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z proc near
.text:00009C10                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::operator=(NArchive::NZip::CCompressionMethodMode const &)+27p
.text:00009C10
.text:00009C10 var_10          = dword ptr -10h
.text:00009C10 var_C           = dword ptr -0Ch
.text:00009C10 Size            = dword ptr -8
.text:00009C10 var_4           = dword ptr -4
.text:00009C10 arg_0           = dword ptr  8
.text:00009C10
.text:00009C10                 push    ebp
.text:00009C11                 mov     ebp, esp
.text:00009C13                 sub     esp, 10h
.text:00009C16                 mov     eax, 0CCCCCCCCh
.text:00009C1B                 mov     [ebp+var_10], eax
.text:00009C1E                 mov     [ebp+var_C], eax
.text:00009C21                 mov     [ebp+Size], eax
.text:00009C24                 mov     [ebp+var_4], eax
.text:00009C27                 mov     [ebp+var_4], ecx
.text:00009C2A                 mov     eax, [ebp+arg_0]
.text:00009C2D                 cmp     eax, [ebp+var_4]
.text:00009C30                 jnz     short loc_9C3A
.text:00009C32                 mov     eax, [ebp+var_4]
.text:00009C35                 jmp     loc_9CCB
.text:00009C3A ; ---------------------------------------------------------------------------
.text:00009C3A
.text:00009C3A loc_9C3A:                               ; CODE XREF: CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)+20j
.text:00009C3A                 mov     ecx, [ebp+arg_0]
.text:00009C3D                 call    ?Size@?$CRecordVector@E@@QBEIXZ ; CRecordVector<uchar>::Size(void)
.text:00009C42                 mov     [ebp+Size], eax
.text:00009C45                 mov     ecx, [ebp+var_4]
.text:00009C48                 mov     edx, [ebp+Size]
.text:00009C4B                 cmp     edx, [ecx+8]
.text:00009C4E                 jbe     short loc_9CA1
.text:00009C50                 mov     eax, [ebp+var_4]
.text:00009C53                 mov     ecx, [eax]
.text:00009C55                 mov     [ebp+var_C], ecx
.text:00009C58                 mov     edx, [ebp+var_C]
.text:00009C5B                 push    edx             ; void *
.text:00009C5C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009C61                 add     esp, 4
.text:00009C64                 mov     eax, [ebp+var_4]
.text:00009C67                 mov     dword ptr [eax+8], 0
.text:00009C6E                 mov     ecx, [ebp+var_4]
.text:00009C71                 mov     dword ptr [ecx+4], 0
.text:00009C78                 mov     edx, [ebp+var_4]
.text:00009C7B                 mov     dword ptr [edx], 0
.text:00009C81                 mov     eax, [ebp+Size]
.text:00009C84                 push    eax             ; unsigned int
.text:00009C85                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009C8A                 add     esp, 4
.text:00009C8D                 mov     [ebp+var_10], eax
.text:00009C90                 mov     ecx, [ebp+var_4]
.text:00009C93                 mov     edx, [ebp+var_10]
.text:00009C96                 mov     [ecx], edx
.text:00009C98                 mov     eax, [ebp+var_4]
.text:00009C9B                 mov     ecx, [ebp+Size]
.text:00009C9E                 mov     [eax+8], ecx
.text:00009CA1
.text:00009CA1 loc_9CA1:                               ; CODE XREF: CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)+3Ej
.text:00009CA1                 mov     edx, [ebp+var_4]
.text:00009CA4                 mov     eax, [ebp+Size]
.text:00009CA7                 mov     [edx+4], eax
.text:00009CAA                 cmp     [ebp+Size], 0
.text:00009CAE                 jz      short loc_9CC8
.text:00009CB0                 mov     ecx, [ebp+Size]
.text:00009CB3                 push    ecx             ; Size
.text:00009CB4                 mov     edx, [ebp+arg_0]
.text:00009CB7                 mov     eax, [edx]
.text:00009CB9                 push    eax             ; Src
.text:00009CBA                 mov     ecx, [ebp+var_4]
.text:00009CBD                 mov     edx, [ecx]
.text:00009CBF                 push    edx             ; Dst
.text:00009CC0                 call    _memcpy
.text:00009CC5                 add     esp, 0Ch
.text:00009CC8
.text:00009CC8 loc_9CC8:                               ; CODE XREF: CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)+9Ej
.text:00009CC8                 mov     eax, [ebp+var_4]
.text:00009CCB
.text:00009CCB loc_9CCB:                               ; CODE XREF: CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)+25j
.text:00009CCB                 add     esp, 10h
.text:00009CCE                 cmp     ebp, esp
.text:00009CD0                 call    __RTC_CheckEsp
.text:00009CD5                 mov     esp, ebp
.text:00009CD7                 pop     ebp
.text:00009CD8                 retn    4
.text:00009CD8 ??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z endp
.text:00009CD8
.text:00009CD8 ; ---------------------------------------------------------------------------
.text:00009CDB                 align 4
.text:00009CDB _text           ends
.text:00009CDB
.text:00009CDC ; ===========================================================================
.text:00009CDC
.text:00009CDC ; Segment type: Pure code
.text:00009CDC ; Segment permissions: Read/Execute
.text:00009CDC _text           segment para public 'CODE' use32
.text:00009CDC                 assume cs:_text
.text:00009CDC                 ;org 9CDCh
.text:00009CDC ; COMDAT (pick any)
.text:00009CDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009CDC
.text:00009CDC ; =============== S U B R O U T I N E =======================================
.text:00009CDC
.text:00009CDC ; Attributes: bp-based frame
.text:00009CDC
.text:00009CDC ; public: unsigned char const & __thiscall CRecordVector<unsigned char>::Front(void)const
.text:00009CDC                 public ?Front@?$CRecordVector@E@@QBEABEXZ
.text:00009CDC ?Front@?$CRecordVector@E@@QBEABEXZ proc near
.text:00009CDC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+30Ep
.text:00009CDC
.text:00009CDC var_4           = dword ptr -4
.text:00009CDC
.text:00009CDC                 push    ebp
.text:00009CDD                 mov     ebp, esp
.text:00009CDF                 push    ecx
.text:00009CE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CE7                 mov     [ebp+var_4], ecx
.text:00009CEA                 mov     eax, [ebp+var_4]
.text:00009CED                 mov     eax, [eax]
.text:00009CEF                 mov     esp, ebp
.text:00009CF1                 pop     ebp
.text:00009CF2                 retn
.text:00009CF2 ?Front@?$CRecordVector@E@@QBEABEXZ endp
.text:00009CF2
.text:00009CF2 ; ---------------------------------------------------------------------------
.text:00009CF3                 align 4
.text:00009CF3 _text           ends
.text:00009CF3
.text:00009CF4 ; ===========================================================================
.text:00009CF4
.text:00009CF4 ; Segment type: Pure code
.text:00009CF4 ; Segment permissions: Read/Execute
.text:00009CF4 _text           segment para public 'CODE' use32
.text:00009CF4                 assume cs:_text
.text:00009CF4                 ;org 9CF4h
.text:00009CF4 ; COMDAT (pick any)
.text:00009CF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009CF4
.text:00009CF4 ; =============== S U B R O U T I N E =======================================
.text:00009CF4
.text:00009CF4 ; Attributes: bp-based frame
.text:00009CF4
.text:00009CF4 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Size(void)const
.text:00009CF4                 public ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
.text:00009CF4 ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ proc near
.text:00009CF4                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+2Cp
.text:00009CF4                                         ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)+1Ap ...
.text:00009CF4
.text:00009CF4 var_4           = dword ptr -4
.text:00009CF4
.text:00009CF4                 push    ebp
.text:00009CF5                 mov     ebp, esp
.text:00009CF7                 push    ecx
.text:00009CF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CFF                 mov     [ebp+var_4], ecx
.text:00009D02                 mov     ecx, [ebp+var_4]
.text:00009D05                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009D0A                 add     esp, 4
.text:00009D0D                 cmp     ebp, esp
.text:00009D0F                 call    __RTC_CheckEsp
.text:00009D14                 mov     esp, ebp
.text:00009D16                 pop     ebp
.text:00009D17                 retn
.text:00009D17 ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ endp
.text:00009D17
.text:00009D17 _text           ends
.text:00009D17
.text:00009D18 ; ===========================================================================
.text:00009D18
.text:00009D18 ; Segment type: Pure code
.text:00009D18 ; Segment permissions: Read/Execute
.text:00009D18 _text           segment para public 'CODE' use32
.text:00009D18                 assume cs:_text
.text:00009D18                 ;org 9D18h
.text:00009D18 ; COMDAT (pick any)
.text:00009D18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009D18
.text:00009D18 ; =============== S U B R O U T I N E =======================================
.text:00009D18
.text:00009D18 ; Attributes: bp-based frame
.text:00009D18
.text:00009D18 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::CObjectVector<struct NArchive::NZip::CExtraSubBlock>(void)
.text:00009D18                 public ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:00009D18 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text:00009D18                                         ; CODE XREF: NArchive::NZip::CExtraBlock::CExtraBlock(void)+11p
.text:00009D18
.text:00009D18 var_4           = dword ptr -4
.text:00009D18
.text:00009D18                 push    ebp
.text:00009D19                 mov     ebp, esp
.text:00009D1B                 push    ecx
.text:00009D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009D23                 mov     [ebp+var_4], ecx
.text:00009D26                 mov     ecx, [ebp+var_4]
.text:00009D29                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00009D2E                 mov     eax, [ebp+var_4]
.text:00009D31                 add     esp, 4
.text:00009D34                 cmp     ebp, esp
.text:00009D36                 call    __RTC_CheckEsp
.text:00009D3B                 mov     esp, ebp
.text:00009D3D                 pop     ebp
.text:00009D3E                 retn
.text:00009D3E ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text:00009D3E
.text:00009D3E ; ---------------------------------------------------------------------------
.text:00009D3F                 align 10h
.text:00009D3F _text           ends
.text:00009D3F
.text:00009D40 ; ===========================================================================
.text:00009D40
.text:00009D40 ; Segment type: Pure code
.text:00009D40 ; Segment permissions: Read/Execute
.text:00009D40 _text           segment para public 'CODE' use32
.text:00009D40                 assume cs:_text
.text:00009D40                 ;org 9D40h
.text:00009D40 ; COMDAT (pick any)
.text:00009D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009D40
.text:00009D40 ; =============== S U B R O U T I N E =======================================
.text:00009D40
.text:00009D40 ; Attributes: bp-based frame
.text:00009D40
.text:00009D40 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::CObjectVector<struct NArchive::NZip::CExtraSubBlock>(class CObjectVector<struct NArchive::NZip::CExtraSubBlock> const &)
.text:00009D40                 public ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:00009D40 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text:00009D40                                         ; CODE XREF: NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)+15p
.text:00009D40
.text:00009D40 var_24          = dword ptr -24h
.text:00009D40 var_20          = dword ptr -20h
.text:00009D40 var_1C          = dword ptr -1Ch
.text:00009D40 var_18          = dword ptr -18h
.text:00009D40 var_14          = dword ptr -14h
.text:00009D40 var_10          = dword ptr -10h
.text:00009D40 var_C           = dword ptr -0Ch
.text:00009D40 var_4           = dword ptr -4
.text:00009D40 arg_0           = dword ptr  8
.text:00009D40
.text:00009D40                 push    ebp
.text:00009D41                 mov     ebp, esp
.text:00009D43                 push    0FFFFFFFFh
.text:00009D45                 push    offset __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:00009D4A                 mov     eax, large fs:0
.text:00009D50                 push    eax
.text:00009D51                 sub     esp, 18h
.text:00009D54                 mov     eax, 0CCCCCCCCh
.text:00009D59                 mov     [ebp+var_24], eax
.text:00009D5C                 mov     [ebp+var_20], eax
.text:00009D5F                 mov     [ebp+var_1C], eax
.text:00009D62                 mov     [ebp+var_18], eax
.text:00009D65                 mov     [ebp+var_14], eax
.text:00009D68                 mov     [ebp+var_10], eax
.text:00009D6B                 mov     eax, dword ptr ds:___security_cookie
.text:00009D70                 xor     eax, ebp
.text:00009D72                 push    eax
.text:00009D73                 lea     eax, [ebp+var_C]
.text:00009D76                 mov     large fs:0, eax
.text:00009D7C                 mov     [ebp+var_10], ecx
.text:00009D7F                 mov     ecx, [ebp+var_10]
.text:00009D82                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00009D87                 mov     [ebp+var_4], 0
.text:00009D8E                 mov     ecx, [ebp+arg_0]
.text:00009D91                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00009D96                 mov     [ebp+var_14], eax
.text:00009D99                 mov     eax, [ebp+var_14]
.text:00009D9C                 push    eax
.text:00009D9D                 mov     ecx, [ebp+var_10]
.text:00009DA0                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00009DA5                 mov     [ebp+var_18], 0
.text:00009DAC                 jmp     short loc_9DB7
.text:00009DAE ; ---------------------------------------------------------------------------
.text:00009DAE
.text:00009DAE loc_9DAE:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+CDj
.text:00009DAE                 mov     ecx, [ebp+var_18]
.text:00009DB1                 add     ecx, 1
.text:00009DB4                 mov     [ebp+var_18], ecx
.text:00009DB7
.text:00009DB7 loc_9DB7:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+6Cj
.text:00009DB7                 mov     edx, [ebp+var_18]
.text:00009DBA                 cmp     edx, [ebp+var_14]
.text:00009DBD                 jnb     short loc_9E0F
.text:00009DBF                 push    0Ch             ; unsigned int
.text:00009DC1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009DC6                 add     esp, 4
.text:00009DC9                 mov     [ebp+var_20], eax
.text:00009DCC                 mov     byte ptr [ebp+var_4], 1
.text:00009DD0                 cmp     [ebp+var_20], 0
.text:00009DD4                 jz      short loc_9DF0
.text:00009DD6                 mov     eax, [ebp+var_18]
.text:00009DD9                 push    eax
.text:00009DDA                 mov     ecx, [ebp+arg_0]
.text:00009DDD                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00009DE2                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00009DE3                 mov     ecx, [ebp+var_20] ; this
.text:00009DE6                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00009DEB                 mov     [ebp+var_24], eax
.text:00009DEE                 jmp     short loc_9DF7
.text:00009DF0 ; ---------------------------------------------------------------------------
.text:00009DF0
.text:00009DF0 loc_9DF0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+94j
.text:00009DF0                 mov     [ebp+var_24], 0
.text:00009DF7
.text:00009DF7 loc_9DF7:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+AEj
.text:00009DF7                 mov     ecx, [ebp+var_24]
.text:00009DFA                 mov     [ebp+var_1C], ecx
.text:00009DFD                 mov     byte ptr [ebp+var_4], 0
.text:00009E01                 mov     edx, [ebp+var_1C]
.text:00009E04                 push    edx
.text:00009E05                 mov     ecx, [ebp+var_10]
.text:00009E08                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00009E0D                 jmp     short loc_9DAE
.text:00009E0F ; ---------------------------------------------------------------------------
.text:00009E0F
.text:00009E0F loc_9E0F:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+7Dj
.text:00009E0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009E16                 mov     eax, [ebp+var_10]
.text:00009E19                 mov     ecx, [ebp+var_C]
.text:00009E1C                 mov     large fs:0, ecx
.text:00009E23                 pop     ecx
.text:00009E24                 add     esp, 24h
.text:00009E27                 cmp     ebp, esp
.text:00009E29                 call    __RTC_CheckEsp
.text:00009E2E                 mov     esp, ebp
.text:00009E30                 pop     ebp
.text:00009E31                 retn    4
.text:00009E31 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text:00009E31
.text:00009E31 _text           ends
.text:00009E31
.text$x:00009E34 ; ===========================================================================
.text$x:00009E34
.text$x:00009E34 ; Segment type: Pure code
.text$x:00009E34 ; Segment permissions: Read/Execute
.text$x:00009E34 _text$x         segment para public 'CODE' use32
.text$x:00009E34                 assume cs:_text$x
.text$x:00009E34                 ;org 9E34h
.text$x:00009E34 ; COMDAT (pick associative to section at 9D40)
.text$x:00009E34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00009E34
.text$x:00009E34 ; =============== S U B R O U T I N E =======================================
.text$x:00009E34
.text$x:00009E34
.text$x:00009E34 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 proc near
.text$x:00009E34                                         ; DATA XREF: .xdata$x:00009E68o
.text$x:00009E34                 mov     ecx, [ebp-10h]
.text$x:00009E37                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009E37 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 endp
.text$x:00009E37
.text$x:00009E3C
.text$x:00009E3C ; =============== S U B R O U T I N E =======================================
.text$x:00009E3C
.text$x:00009E3C
.text$x:00009E3C __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 proc near
.text$x:00009E3C                                         ; DATA XREF: .xdata$x:00009E70o
.text$x:00009E3C                 mov     eax, [ebp-20h]
.text$x:00009E3F                 push    eax             ; void *
.text$x:00009E40                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00009E45                 pop     ecx
.text$x:00009E46                 retn
.text$x:00009E46 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 endp
.text$x:00009E46
.text$x:00009E47
.text$x:00009E47 ; =============== S U B R O U T I N E =======================================
.text$x:00009E47
.text$x:00009E47
.text$x:00009E47 __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text$x:00009E47                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5o
.text$x:00009E47
.text$x:00009E47 arg_4           = dword ptr  8
.text$x:00009E47
.text$x:00009E47                 mov     edx, [esp+arg_4]
.text$x:00009E4B                 lea     eax, [edx+0Ch]
.text$x:00009E4E                 mov     ecx, [edx-1Ch]
.text$x:00009E51                 xor     ecx, eax
.text$x:00009E53                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009E58                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text$x:00009E5D                 jmp     ___CxxFrameHandler3
.text$x:00009E5D __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text$x:00009E5D
.text$x:00009E5D ; ---------------------------------------------------------------------------
.text$x:00009E62                 align 4
.text$x:00009E62 _text$x         ends
.text$x:00009E62
.xdata$x:00009E64 ; ===========================================================================
.xdata$x:00009E64
.xdata$x:00009E64 ; Segment type: Pure data
.xdata$x:00009E64 ; Segment permissions: Read
.xdata$x:00009E64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E64                 assume cs:_xdata$x
.xdata$x:00009E64                 ;org 9E64h
.xdata$x:00009E64 ; COMDAT (pick associative to section at 9D40)
.xdata$x:00009E64 __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00009E64                                         ; DATA XREF: .xdata$x:00009E7Co
.xdata$x:00009E65                 db 0FFh
.xdata$x:00009E66                 db 0FFh
.xdata$x:00009E67                 db 0FFh
.xdata$x:00009E68                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
.xdata$x:00009E6C                 align 10h
.xdata$x:00009E70                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
.xdata$x:00009E74 __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00009E74                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z+11o
.xdata$x:00009E75                 db    5
.xdata$x:00009E76                 db  93h ; ô
.xdata$x:00009E77                 db  19h
.xdata$x:00009E78                 db    2
.xdata$x:00009E79                 db    0
.xdata$x:00009E7A                 db    0
.xdata$x:00009E7B                 db    0
.xdata$x:00009E7C                 dd offset __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.xdata$x:00009E80                 db    0
.xdata$x:00009E81                 db    0
.xdata$x:00009E82                 db    0
.xdata$x:00009E83                 db    0
.xdata$x:00009E84                 db    0
.xdata$x:00009E85                 db    0
.xdata$x:00009E86                 db    0
.xdata$x:00009E87                 db    0
.xdata$x:00009E88                 db    0
.xdata$x:00009E89                 db    0
.xdata$x:00009E8A                 db    0
.xdata$x:00009E8B                 db    0
.xdata$x:00009E8C                 db    0
.xdata$x:00009E8D                 db    0
.xdata$x:00009E8E                 db    0
.xdata$x:00009E8F                 db    0
.xdata$x:00009E90                 db    0
.xdata$x:00009E91                 db    0
.xdata$x:00009E92                 db    0
.xdata$x:00009E93                 db    0
.xdata$x:00009E94                 db    1
.xdata$x:00009E95                 db    0
.xdata$x:00009E96                 db    0
.xdata$x:00009E97                 db    0
.xdata$x:00009E97 _xdata$x        ends
.xdata$x:00009E97
.text:00009E98 ; ===========================================================================
.text:00009E98
.text:00009E98 ; Segment type: Pure code
.text:00009E98 ; Segment permissions: Read/Execute
.text:00009E98 _text           segment para public 'CODE' use32
.text:00009E98                 assume cs:_text
.text:00009E98                 ;org 9E98h
.text:00009E98 ; COMDAT (pick any)
.text:00009E98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009E98
.text:00009E98 ; =============== S U B R O U T I N E =======================================
.text:00009E98
.text:00009E98 ; Attributes: bp-based frame
.text:00009E98
.text:00009E98 ; public: class CObjectVector<struct NArchive::NZip::CExtraSubBlock> & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator=(class CObjectVector<struct NArchive::NZip::CExtraSubBlock> const &)
.text:00009E98                 public ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text:00009E98 ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:00009E98                                         ; CODE XREF: NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)+15p
.text:00009E98
.text:00009E98 var_24          = dword ptr -24h
.text:00009E98 var_20          = dword ptr -20h
.text:00009E98 var_1C          = dword ptr -1Ch
.text:00009E98 var_18          = dword ptr -18h
.text:00009E98 var_14          = dword ptr -14h
.text:00009E98 var_10          = dword ptr -10h
.text:00009E98 var_C           = dword ptr -0Ch
.text:00009E98 var_4           = dword ptr -4
.text:00009E98 arg_0           = dword ptr  8
.text:00009E98
.text:00009E98                 push    ebp
.text:00009E99                 mov     ebp, esp
.text:00009E9B                 push    0FFFFFFFFh
.text:00009E9D                 push    offset __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text:00009EA2                 mov     eax, large fs:0
.text:00009EA8                 push    eax
.text:00009EA9                 sub     esp, 18h
.text:00009EAC                 mov     eax, 0CCCCCCCCh
.text:00009EB1                 mov     [ebp+var_24], eax
.text:00009EB4                 mov     [ebp+var_20], eax
.text:00009EB7                 mov     [ebp+var_1C], eax
.text:00009EBA                 mov     [ebp+var_18], eax
.text:00009EBD                 mov     [ebp+var_14], eax
.text:00009EC0                 mov     [ebp+var_10], eax
.text:00009EC3                 mov     eax, dword ptr ds:___security_cookie
.text:00009EC8                 xor     eax, ebp
.text:00009ECA                 push    eax
.text:00009ECB                 lea     eax, [ebp+var_C]
.text:00009ECE                 mov     large fs:0, eax
.text:00009ED4                 mov     [ebp+var_10], ecx
.text:00009ED7                 mov     eax, [ebp+arg_0]
.text:00009EDA                 cmp     eax, [ebp+var_10]
.text:00009EDD                 jnz     short loc_9EE7
.text:00009EDF                 mov     eax, [ebp+var_10]
.text:00009EE2                 jmp     loc_9F79
.text:00009EE7 ; ---------------------------------------------------------------------------
.text:00009EE7
.text:00009EE7 loc_9EE7:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+45j
.text:00009EE7                 mov     ecx, [ebp+var_10]
.text:00009EEA                 call    ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:00009EEF                 mov     ecx, [ebp+arg_0]
.text:00009EF2                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00009EF7                 mov     [ebp+var_14], eax
.text:00009EFA                 mov     ecx, [ebp+var_14]
.text:00009EFD                 push    ecx
.text:00009EFE                 mov     ecx, [ebp+var_10]
.text:00009F01                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00009F06                 mov     [ebp+var_18], 0
.text:00009F0D                 jmp     short loc_9F18
.text:00009F0F ; ---------------------------------------------------------------------------
.text:00009F0F
.text:00009F0F loc_9F0F:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+DCj
.text:00009F0F                 mov     edx, [ebp+var_18]
.text:00009F12                 add     edx, 1
.text:00009F15                 mov     [ebp+var_18], edx
.text:00009F18
.text:00009F18 loc_9F18:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+75j
.text:00009F18                 mov     eax, [ebp+var_18]
.text:00009F1B                 cmp     eax, [ebp+var_14]
.text:00009F1E                 jnb     short loc_9F76
.text:00009F20                 push    0Ch             ; unsigned int
.text:00009F22                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009F27                 add     esp, 4
.text:00009F2A                 mov     [ebp+var_20], eax
.text:00009F2D                 mov     [ebp+var_4], 0
.text:00009F34                 cmp     [ebp+var_20], 0
.text:00009F38                 jz      short loc_9F54
.text:00009F3A                 mov     ecx, [ebp+var_18]
.text:00009F3D                 push    ecx
.text:00009F3E                 mov     ecx, [ebp+arg_0]
.text:00009F41                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00009F46                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00009F47                 mov     ecx, [ebp+var_20] ; this
.text:00009F4A                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00009F4F                 mov     [ebp+var_24], eax
.text:00009F52                 jmp     short loc_9F5B
.text:00009F54 ; ---------------------------------------------------------------------------
.text:00009F54
.text:00009F54 loc_9F54:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+A0j
.text:00009F54                 mov     [ebp+var_24], 0
.text:00009F5B
.text:00009F5B loc_9F5B:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+BAj
.text:00009F5B                 mov     edx, [ebp+var_24]
.text:00009F5E                 mov     [ebp+var_1C], edx
.text:00009F61                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009F68                 mov     eax, [ebp+var_1C]
.text:00009F6B                 push    eax
.text:00009F6C                 mov     ecx, [ebp+var_10]
.text:00009F6F                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00009F74                 jmp     short loc_9F0F
.text:00009F76 ; ---------------------------------------------------------------------------
.text:00009F76
.text:00009F76 loc_9F76:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+86j
.text:00009F76                 mov     eax, [ebp+var_10]
.text:00009F79
.text:00009F79 loc_9F79:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+4Aj
.text:00009F79                 mov     ecx, [ebp+var_C]
.text:00009F7C                 mov     large fs:0, ecx
.text:00009F83                 pop     ecx
.text:00009F84                 add     esp, 24h
.text:00009F87                 cmp     ebp, esp
.text:00009F89                 call    __RTC_CheckEsp
.text:00009F8E                 mov     esp, ebp
.text:00009F90                 pop     ebp
.text:00009F91                 retn    4
.text:00009F91 ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:00009F91
.text:00009F91 _text           ends
.text:00009F91
.text$x:00009F94 ; ===========================================================================
.text$x:00009F94
.text$x:00009F94 ; Segment type: Pure code
.text$x:00009F94 ; Segment permissions: Read/Execute
.text$x:00009F94 _text$x         segment para public 'CODE' use32
.text$x:00009F94                 assume cs:_text$x
.text$x:00009F94                 ;org 9F94h
.text$x:00009F94 ; COMDAT (pick associative to section at 9E98)
.text$x:00009F94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00009F94
.text$x:00009F94 ; =============== S U B R O U T I N E =======================================
.text$x:00009F94
.text$x:00009F94
.text$x:00009F94 __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00009F94                                         ; DATA XREF: .xdata$x:00009FC0o
.text$x:00009F94                 mov     eax, [ebp-20h]
.text$x:00009F97                 push    eax             ; void *
.text$x:00009F98                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00009F9D                 pop     ecx
.text$x:00009F9E                 retn
.text$x:00009F9E __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00009F9E
.text$x:00009F9F
.text$x:00009F9F ; =============== S U B R O U T I N E =======================================
.text$x:00009F9F
.text$x:00009F9F
.text$x:00009F9F __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00009F9F                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5o
.text$x:00009F9F
.text$x:00009F9F arg_4           = dword ptr  8
.text$x:00009F9F
.text$x:00009F9F                 mov     edx, [esp+arg_4]
.text$x:00009FA3                 lea     eax, [edx+0Ch]
.text$x:00009FA6                 mov     ecx, [edx-1Ch]
.text$x:00009FA9                 xor     ecx, eax
.text$x:00009FAB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009FB0                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text$x:00009FB5                 jmp     ___CxxFrameHandler3
.text$x:00009FB5 __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text$x:00009FB5
.text$x:00009FB5 ; ---------------------------------------------------------------------------
.text$x:00009FBA                 align 4
.text$x:00009FBA _text$x         ends
.text$x:00009FBA
.xdata$x:00009FBC ; ===========================================================================
.xdata$x:00009FBC
.xdata$x:00009FBC ; Segment type: Pure data
.xdata$x:00009FBC ; Segment permissions: Read
.xdata$x:00009FBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FBC                 assume cs:_xdata$x
.xdata$x:00009FBC                 ;org 9FBCh
.xdata$x:00009FBC ; COMDAT (pick associative to section at 9E98)
.xdata$x:00009FBC __unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00009FBC                                         ; DATA XREF: .xdata$x:00009FCCo
.xdata$x:00009FBD                 db 0FFh
.xdata$x:00009FBE                 db 0FFh
.xdata$x:00009FBF                 db 0FFh
.xdata$x:00009FC0                 dd offset __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00009FC4 __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00009FC4                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00009FC5                 db    5
.xdata$x:00009FC6                 db  93h ; ô
.xdata$x:00009FC7                 db  19h
.xdata$x:00009FC8                 db    1
.xdata$x:00009FC9                 db    0
.xdata$x:00009FCA                 db    0
.xdata$x:00009FCB                 db    0
.xdata$x:00009FCC                 dd offset __unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.xdata$x:00009FD0                 db    0
.xdata$x:00009FD1                 db    0
.xdata$x:00009FD2                 db    0
.xdata$x:00009FD3                 db    0
.xdata$x:00009FD4                 db    0
.xdata$x:00009FD5                 db    0
.xdata$x:00009FD6                 db    0
.xdata$x:00009FD7                 db    0
.xdata$x:00009FD8                 db    0
.xdata$x:00009FD9                 db    0
.xdata$x:00009FDA                 db    0
.xdata$x:00009FDB                 db    0
.xdata$x:00009FDC                 db    0
.xdata$x:00009FDD                 db    0
.xdata$x:00009FDE                 db    0
.xdata$x:00009FDF                 db    0
.xdata$x:00009FE0                 db    0
.xdata$x:00009FE1                 db    0
.xdata$x:00009FE2                 db    0
.xdata$x:00009FE3                 db    0
.xdata$x:00009FE4                 db    1
.xdata$x:00009FE5                 db    0
.xdata$x:00009FE6                 db    0
.xdata$x:00009FE7                 db    0
.xdata$x:00009FE7 _xdata$x        ends
.xdata$x:00009FE7
.text:00009FE8 ; ===========================================================================
.text:00009FE8
.text:00009FE8 ; Segment type: Pure code
.text:00009FE8 ; Segment permissions: Read/Execute
.text:00009FE8 _text           segment para public 'CODE' use32
.text:00009FE8                 assume cs:_text
.text:00009FE8                 ;org 9FE8h
.text:00009FE8 ; COMDAT (pick any)
.text:00009FE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009FE8
.text:00009FE8 ; =============== S U B R O U T I N E =======================================
.text:00009FE8
.text:00009FE8 ; Attributes: bp-based frame
.text:00009FE8
.text:00009FE8 ; public: struct NArchive::NZip::CExtraSubBlock const & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator[](unsigned int)const
.text:00009FE8                 public ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
.text:00009FE8 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z proc near
.text:00009FE8                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+3Dp
.text:00009FE8                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+9Dp ...
.text:00009FE8
.text:00009FE8 var_4           = dword ptr -4
.text:00009FE8 arg_0           = dword ptr  8
.text:00009FE8
.text:00009FE8                 push    ebp
.text:00009FE9                 mov     ebp, esp
.text:00009FEB                 push    ecx
.text:00009FEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009FF3                 mov     [ebp+var_4], ecx
.text:00009FF6                 mov     eax, [ebp+arg_0]
.text:00009FF9                 push    eax
.text:00009FFA                 mov     ecx, [ebp+var_4]
.text:00009FFD                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A002                 mov     eax, [eax]
.text:0000A004                 add     esp, 4
.text:0000A007                 cmp     ebp, esp
.text:0000A009                 call    __RTC_CheckEsp
.text:0000A00E                 mov     esp, ebp
.text:0000A010                 pop     ebp
.text:0000A011                 retn    4
.text:0000A011 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z endp
.text:0000A011
.text:0000A011 _text           ends
.text:0000A011
.text:0000A014 ; ===========================================================================
.text:0000A014
.text:0000A014 ; Segment type: Pure code
.text:0000A014 ; Segment permissions: Read/Execute
.text:0000A014 _text           segment para public 'CODE' use32
.text:0000A014                 assume cs:_text
.text:0000A014                 ;org 0A014h
.text:0000A014 ; COMDAT (pick any)
.text:0000A014                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A014
.text:0000A014 ; =============== S U B R O U T I N E =======================================
.text:0000A014
.text:0000A014 ; Attributes: bp-based frame
.text:0000A014
.text:0000A014 ; public: struct NArchive::NZip::CExtraSubBlock & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator[](unsigned int)
.text:0000A014                 public ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z
.text:0000A014 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z proc near
.text:0000A014                                         ; CODE XREF: NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)+38p
.text:0000A014
.text:0000A014 var_4           = dword ptr -4
.text:0000A014 arg_0           = dword ptr  8
.text:0000A014
.text:0000A014                 push    ebp
.text:0000A015                 mov     ebp, esp
.text:0000A017                 push    ecx
.text:0000A018                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A01F                 mov     [ebp+var_4], ecx
.text:0000A022                 mov     eax, [ebp+arg_0]
.text:0000A025                 push    eax
.text:0000A026                 mov     ecx, [ebp+var_4]
.text:0000A029                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A02E                 mov     eax, [eax]
.text:0000A030                 add     esp, 4
.text:0000A033                 cmp     ebp, esp
.text:0000A035                 call    __RTC_CheckEsp
.text:0000A03A                 mov     esp, ebp
.text:0000A03C                 pop     ebp
.text:0000A03D                 retn    4
.text:0000A03D ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z endp
.text:0000A03D
.text:0000A03D _text           ends
.text:0000A03D
.text:0000A040 ; ===========================================================================
.text:0000A040
.text:0000A040 ; Segment type: Pure code
.text:0000A040 ; Segment permissions: Read/Execute
.text:0000A040 _text           segment para public 'CODE' use32
.text:0000A040                 assume cs:_text
.text:0000A040                 ;org 0A040h
.text:0000A040 ; COMDAT (pick any)
.text:0000A040                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A040
.text:0000A040 ; =============== S U B R O U T I N E =======================================
.text:0000A040
.text:0000A040 ; Attributes: bp-based frame
.text:0000A040
.text:0000A040 ; int __stdcall CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(struct NArchive::NZip::CExtraSubBlock *)
.text:0000A040                 public ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text:0000A040 ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z proc near
.text:0000A040                                         ; CODE XREF: NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+100p
.text:0000A040                                         ; NArchive::NZip::SetItemInfoFromCompressingResult(NArchive::NZip::CCompressingResult const &,bool,uchar,NArchive::NZip::CItem &)+10Fp
.text:0000A040
.text:0000A040 var_1C          = dword ptr -1Ch
.text:0000A040 var_18          = dword ptr -18h
.text:0000A040 var_14          = dword ptr -14h
.text:0000A040 var_10          = dword ptr -10h
.text:0000A040 var_C           = dword ptr -0Ch
.text:0000A040 var_4           = dword ptr -4
.text:0000A040 arg_0           = dword ptr  8
.text:0000A040
.text:0000A040                 push    ebp
.text:0000A041                 mov     ebp, esp
.text:0000A043                 push    0FFFFFFFFh
.text:0000A045                 push    offset __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text:0000A04A                 mov     eax, large fs:0
.text:0000A050                 push    eax
.text:0000A051                 sub     esp, 10h
.text:0000A054                 mov     eax, 0CCCCCCCCh
.text:0000A059                 mov     [ebp+var_1C], eax
.text:0000A05C                 mov     [ebp+var_18], eax
.text:0000A05F                 mov     [ebp+var_14], eax
.text:0000A062                 mov     [ebp+var_10], eax
.text:0000A065                 mov     eax, dword ptr ds:___security_cookie
.text:0000A06A                 xor     eax, ebp
.text:0000A06C                 push    eax
.text:0000A06D                 lea     eax, [ebp+var_C]
.text:0000A070                 mov     large fs:0, eax
.text:0000A076                 mov     [ebp+var_10], ecx
.text:0000A079                 push    0Ch             ; unsigned int
.text:0000A07B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A080                 add     esp, 4
.text:0000A083                 mov     [ebp+var_18], eax
.text:0000A086                 mov     [ebp+var_4], 0
.text:0000A08D                 cmp     [ebp+var_18], 0
.text:0000A091                 jz      short loc_A0A4
.text:0000A093                 mov     eax, [ebp+arg_0]
.text:0000A096                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:0000A097                 mov     ecx, [ebp+var_18] ; this
.text:0000A09A                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:0000A09F                 mov     [ebp+var_1C], eax
.text:0000A0A2                 jmp     short loc_A0AB
.text:0000A0A4 ; ---------------------------------------------------------------------------
.text:0000A0A4
.text:0000A0A4 loc_A0A4:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+51j
.text:0000A0A4                 mov     [ebp+var_1C], 0
.text:0000A0AB
.text:0000A0AB loc_A0AB:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+62j
.text:0000A0AB                 mov     ecx, [ebp+var_1C]
.text:0000A0AE                 mov     [ebp+var_14], ecx
.text:0000A0B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A0B8                 mov     edx, [ebp+var_14]
.text:0000A0BB                 push    edx
.text:0000A0BC                 mov     ecx, [ebp+var_10]
.text:0000A0BF                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000A0C4                 mov     ecx, [ebp+var_C]
.text:0000A0C7                 mov     large fs:0, ecx
.text:0000A0CE                 pop     ecx
.text:0000A0CF                 add     esp, 1Ch
.text:0000A0D2                 cmp     ebp, esp
.text:0000A0D4                 call    __RTC_CheckEsp
.text:0000A0D9                 mov     esp, ebp
.text:0000A0DB                 pop     ebp
.text:0000A0DC                 retn    4
.text:0000A0DC ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z endp
.text:0000A0DC
.text:0000A0DC ; ---------------------------------------------------------------------------
.text:0000A0DF                 align 10h
.text:0000A0DF _text           ends
.text:0000A0DF
.text$x:0000A0E0 ; ===========================================================================
.text$x:0000A0E0
.text$x:0000A0E0 ; Segment type: Pure code
.text$x:0000A0E0 ; Segment permissions: Read/Execute
.text$x:0000A0E0 _text$x         segment para public 'CODE' use32
.text$x:0000A0E0                 assume cs:_text$x
.text$x:0000A0E0                 ;org 0A0E0h
.text$x:0000A0E0 ; COMDAT (pick associative to section at A040)
.text$x:0000A0E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A0E0
.text$x:0000A0E0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0E0
.text$x:0000A0E0
.text$x:0000A0E0 __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0 proc near
.text$x:0000A0E0                                         ; DATA XREF: .xdata$x:0000A10Co
.text$x:0000A0E0                 mov     eax, [ebp-18h]
.text$x:0000A0E3                 push    eax             ; void *
.text$x:0000A0E4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000A0E9                 pop     ecx
.text$x:0000A0EA                 retn
.text$x:0000A0EA __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0 endp
.text$x:0000A0EA
.text$x:0000A0EB
.text$x:0000A0EB ; =============== S U B R O U T I N E =======================================
.text$x:0000A0EB
.text$x:0000A0EB
.text$x:0000A0EB __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z proc near
.text$x:0000A0EB                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+5o
.text$x:0000A0EB
.text$x:0000A0EB arg_4           = dword ptr  8
.text$x:0000A0EB
.text$x:0000A0EB                 mov     edx, [esp+arg_4]
.text$x:0000A0EF                 lea     eax, [edx+0Ch]
.text$x:0000A0F2                 mov     ecx, [edx-14h]
.text$x:0000A0F5                 xor     ecx, eax
.text$x:0000A0F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A0FC                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text$x:0000A101                 jmp     ___CxxFrameHandler3
.text$x:0000A101 __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z endp
.text$x:0000A101
.text$x:0000A101 ; ---------------------------------------------------------------------------
.text$x:0000A106                 align 4
.text$x:0000A106 _text$x         ends
.text$x:0000A106
.xdata$x:0000A108 ; ===========================================================================
.xdata$x:0000A108
.xdata$x:0000A108 ; Segment type: Pure data
.xdata$x:0000A108 ; Segment permissions: Read
.xdata$x:0000A108 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A108                 assume cs:_xdata$x
.xdata$x:0000A108                 ;org 0A108h
.xdata$x:0000A108 ; COMDAT (pick associative to section at A040)
.xdata$x:0000A108 __unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z db 0FFh
.xdata$x:0000A108                                         ; DATA XREF: .xdata$x:0000A118o
.xdata$x:0000A109                 db 0FFh
.xdata$x:0000A10A                 db 0FFh
.xdata$x:0000A10B                 db 0FFh
.xdata$x:0000A10C                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0
.xdata$x:0000A110 __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000A110                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z+11o
.xdata$x:0000A111                 db    5
.xdata$x:0000A112                 db  93h ; ô
.xdata$x:0000A113                 db  19h
.xdata$x:0000A114                 db    1
.xdata$x:0000A115                 db    0
.xdata$x:0000A116                 db    0
.xdata$x:0000A117                 db    0
.xdata$x:0000A118                 dd offset __unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.xdata$x:0000A11C                 db    0
.xdata$x:0000A11D                 db    0
.xdata$x:0000A11E                 db    0
.xdata$x:0000A11F                 db    0
.xdata$x:0000A120                 db    0
.xdata$x:0000A121                 db    0
.xdata$x:0000A122                 db    0
.xdata$x:0000A123                 db    0
.xdata$x:0000A124                 db    0
.xdata$x:0000A125                 db    0
.xdata$x:0000A126                 db    0
.xdata$x:0000A127                 db    0
.xdata$x:0000A128                 db    0
.xdata$x:0000A129                 db    0
.xdata$x:0000A12A                 db    0
.xdata$x:0000A12B                 db    0
.xdata$x:0000A12C                 db    0
.xdata$x:0000A12D                 db    0
.xdata$x:0000A12E                 db    0
.xdata$x:0000A12F                 db    0
.xdata$x:0000A130                 db    1
.xdata$x:0000A131                 db    0
.xdata$x:0000A132                 db    0
.xdata$x:0000A133                 db    0
.xdata$x:0000A133 _xdata$x        ends
.xdata$x:0000A133
.text:0000A134 ; ===========================================================================
.text:0000A134
.text:0000A134 ; Segment type: Pure code
.text:0000A134 ; Segment permissions: Read/Execute
.text:0000A134 _text           segment para public 'CODE' use32
.text:0000A134                 assume cs:_text
.text:0000A134                 ;org 0A134h
.text:0000A134 ; COMDAT (pick any)
.text:0000A134                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A134
.text:0000A134 ; =============== S U B R O U T I N E =======================================
.text:0000A134
.text:0000A134 ; Attributes: bp-based frame
.text:0000A134
.text:0000A134 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::~CObjectVector<struct NArchive::NZip::CExtraSubBlock>(void)
.text:0000A134                 public ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:0000A134 ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A134                                         ; CODE XREF: NArchive::NZip::CExtraBlock::~CExtraBlock(void)+11p
.text:0000A134
.text:0000A134 var_20          = dword ptr -20h
.text:0000A134 var_1C          = dword ptr -1Ch
.text:0000A134 var_18          = dword ptr -18h
.text:0000A134 var_14          = dword ptr -14h
.text:0000A134 var_10          = dword ptr -10h
.text:0000A134 var_C           = dword ptr -0Ch
.text:0000A134 var_4           = dword ptr -4
.text:0000A134
.text:0000A134                 push    ebp
.text:0000A135                 mov     ebp, esp
.text:0000A137                 push    0FFFFFFFFh
.text:0000A139                 push    offset __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:0000A13E                 mov     eax, large fs:0
.text:0000A144                 push    eax
.text:0000A145                 sub     esp, 14h
.text:0000A148                 mov     eax, 0CCCCCCCCh
.text:0000A14D                 mov     [ebp+var_20], eax
.text:0000A150                 mov     [ebp+var_1C], eax
.text:0000A153                 mov     [ebp+var_18], eax
.text:0000A156                 mov     [ebp+var_14], eax
.text:0000A159                 mov     [ebp+var_10], eax
.text:0000A15C                 mov     eax, dword ptr ds:___security_cookie
.text:0000A161                 xor     eax, ebp
.text:0000A163                 push    eax
.text:0000A164                 lea     eax, [ebp+var_C]
.text:0000A167                 mov     large fs:0, eax
.text:0000A16D                 mov     [ebp+var_10], ecx
.text:0000A170                 mov     [ebp+var_4], 0
.text:0000A177                 mov     ecx, [ebp+var_10]
.text:0000A17A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A17F                 mov     [ebp+var_14], eax
.text:0000A182
.text:0000A182 loc_A182:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void):loc_A1C4j
.text:0000A182                 cmp     [ebp+var_14], 0
.text:0000A186                 jz      short loc_A1C6
.text:0000A188                 mov     eax, [ebp+var_14]
.text:0000A18B                 sub     eax, 1
.text:0000A18E                 mov     [ebp+var_14], eax
.text:0000A191                 mov     ecx, [ebp+var_14]
.text:0000A194                 push    ecx
.text:0000A195                 mov     ecx, [ebp+var_10]
.text:0000A198                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A19D                 mov     edx, [eax]
.text:0000A19F                 mov     [ebp+var_1C], edx
.text:0000A1A2                 mov     eax, [ebp+var_1C]
.text:0000A1A5                 mov     [ebp+var_18], eax
.text:0000A1A8                 cmp     [ebp+var_18], 0
.text:0000A1AC                 jz      short loc_A1BD
.text:0000A1AE                 push    1
.text:0000A1B0                 mov     ecx, [ebp+var_18]
.text:0000A1B3                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:0000A1B8                 mov     [ebp+var_20], eax
.text:0000A1BB                 jmp     short loc_A1C4
.text:0000A1BD ; ---------------------------------------------------------------------------
.text:0000A1BD
.text:0000A1BD loc_A1BD:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+78j
.text:0000A1BD                 mov     [ebp+var_20], 0
.text:0000A1C4
.text:0000A1C4 loc_A1C4:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+87j
.text:0000A1C4                 jmp     short loc_A182
.text:0000A1C6 ; ---------------------------------------------------------------------------
.text:0000A1C6
.text:0000A1C6 loc_A1C6:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+52j
.text:0000A1C6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A1CD                 mov     ecx, [ebp+var_10]
.text:0000A1D0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A1D5                 mov     ecx, [ebp+var_C]
.text:0000A1D8                 mov     large fs:0, ecx
.text:0000A1DF                 pop     ecx
.text:0000A1E0                 add     esp, 20h
.text:0000A1E3                 cmp     ebp, esp
.text:0000A1E5                 call    __RTC_CheckEsp
.text:0000A1EA                 mov     esp, ebp
.text:0000A1EC                 pop     ebp
.text:0000A1ED                 retn
.text:0000A1ED ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text:0000A1ED
.text:0000A1ED ; ---------------------------------------------------------------------------
.text:0000A1EE                 align 10h
.text:0000A1EE _text           ends
.text:0000A1EE
.text$x:0000A1F0 ; ===========================================================================
.text$x:0000A1F0
.text$x:0000A1F0 ; Segment type: Pure code
.text$x:0000A1F0 ; Segment permissions: Read/Execute
.text$x:0000A1F0 _text$x         segment para public 'CODE' use32
.text$x:0000A1F0                 assume cs:_text$x
.text$x:0000A1F0                 ;org 0A1F0h
.text$x:0000A1F0 ; COMDAT (pick associative to section at A134)
.text$x:0000A1F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A1F0
.text$x:0000A1F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1F0
.text$x:0000A1F0
.text$x:0000A1F0 __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000A1F0                                         ; DATA XREF: .xdata$x:0000A218o
.text$x:0000A1F0                 mov     ecx, [ebp-10h]
.text$x:0000A1F3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000A1F3 __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:0000A1F3
.text$x:0000A1F8
.text$x:0000A1F8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1F8
.text$x:0000A1F8
.text$x:0000A1F8 __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text$x:0000A1F8                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+5o
.text$x:0000A1F8
.text$x:0000A1F8 arg_4           = dword ptr  8
.text$x:0000A1F8
.text$x:0000A1F8                 mov     edx, [esp+arg_4]
.text$x:0000A1FC                 lea     eax, [edx+0Ch]
.text$x:0000A1FF                 mov     ecx, [edx-18h]
.text$x:0000A202                 xor     ecx, eax
.text$x:0000A204                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A209                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text$x:0000A20E                 jmp     ___CxxFrameHandler3
.text$x:0000A20E __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000A20E
.text$x:0000A20E ; ---------------------------------------------------------------------------
.text$x:0000A213                 align 4
.text$x:0000A213 _text$x         ends
.text$x:0000A213
.xdata$x:0000A214 ; ===========================================================================
.xdata$x:0000A214
.xdata$x:0000A214 ; Segment type: Pure data
.xdata$x:0000A214 ; Segment permissions: Read
.xdata$x:0000A214 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A214                 assume cs:_xdata$x
.xdata$x:0000A214                 ;org 0A214h
.xdata$x:0000A214 ; COMDAT (pick associative to section at A134)
.xdata$x:0000A214 __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000A214                                         ; DATA XREF: .xdata$x:0000A224o
.xdata$x:0000A215                 db 0FFh
.xdata$x:0000A216                 db 0FFh
.xdata$x:0000A217                 db 0FFh
.xdata$x:0000A218                 dd offset __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:0000A21C __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000A21C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:0000A21D                 db    5
.xdata$x:0000A21E                 db  93h ; ô
.xdata$x:0000A21F                 db  19h
.xdata$x:0000A220                 db    1
.xdata$x:0000A221                 db    0
.xdata$x:0000A222                 db    0
.xdata$x:0000A223                 db    0
.xdata$x:0000A224                 dd offset __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.xdata$x:0000A228                 db    0
.xdata$x:0000A229                 db    0
.xdata$x:0000A22A                 db    0
.xdata$x:0000A22B                 db    0
.xdata$x:0000A22C                 db    0
.xdata$x:0000A22D                 db    0
.xdata$x:0000A22E                 db    0
.xdata$x:0000A22F                 db    0
.xdata$x:0000A230                 db    0
.xdata$x:0000A231                 db    0
.xdata$x:0000A232                 db    0
.xdata$x:0000A233                 db    0
.xdata$x:0000A234                 db    0
.xdata$x:0000A235                 db    0
.xdata$x:0000A236                 db    0
.xdata$x:0000A237                 db    0
.xdata$x:0000A238                 db    0
.xdata$x:0000A239                 db    0
.xdata$x:0000A23A                 db    0
.xdata$x:0000A23B                 db    0
.xdata$x:0000A23C                 db    1
.xdata$x:0000A23D                 db    0
.xdata$x:0000A23E                 db    0
.xdata$x:0000A23F                 db    0
.xdata$x:0000A23F _xdata$x        ends
.xdata$x:0000A23F
.text:0000A240 ; ===========================================================================
.text:0000A240
.text:0000A240 ; Segment type: Pure code
.text:0000A240 ; Segment permissions: Read/Execute
.text:0000A240 _text           segment para public 'CODE' use32
.text:0000A240                 assume cs:_text
.text:0000A240                 ;org 0A240h
.text:0000A240 ; COMDAT (pick any)
.text:0000A240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A240
.text:0000A240 ; =============== S U B R O U T I N E =======================================
.text:0000A240
.text:0000A240 ; Attributes: bp-based frame
.text:0000A240
.text:0000A240 ; public: void __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:0000A240                 public ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ
.text:0000A240 ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ proc near
.text:0000A240                                         ; CODE XREF: NArchive::NZip::CExtraBlock::Clear(void)+11p
.text:0000A240                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+52p
.text:0000A240
.text:0000A240 var_14          = dword ptr -14h
.text:0000A240 var_10          = dword ptr -10h
.text:0000A240 var_C           = dword ptr -0Ch
.text:0000A240 var_8           = dword ptr -8
.text:0000A240 var_4           = dword ptr -4
.text:0000A240
.text:0000A240                 push    ebp
.text:0000A241                 mov     ebp, esp
.text:0000A243                 sub     esp, 14h
.text:0000A246                 mov     eax, 0CCCCCCCCh
.text:0000A24B                 mov     [ebp+var_14], eax
.text:0000A24E                 mov     [ebp+var_10], eax
.text:0000A251                 mov     [ebp+var_C], eax
.text:0000A254                 mov     [ebp+var_8], eax
.text:0000A257                 mov     [ebp+var_4], eax
.text:0000A25A                 mov     [ebp+var_4], ecx
.text:0000A25D                 mov     ecx, [ebp+var_4]
.text:0000A260                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A265                 mov     [ebp+var_8], eax
.text:0000A268
.text:0000A268 loc_A268:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void):loc_A2AAj
.text:0000A268                 cmp     [ebp+var_8], 0
.text:0000A26C                 jz      short loc_A2AC
.text:0000A26E                 mov     eax, [ebp+var_8]
.text:0000A271                 sub     eax, 1
.text:0000A274                 mov     [ebp+var_8], eax
.text:0000A277                 mov     ecx, [ebp+var_8]
.text:0000A27A                 push    ecx
.text:0000A27B                 mov     ecx, [ebp+var_4]
.text:0000A27E                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A283                 mov     edx, [eax]
.text:0000A285                 mov     [ebp+var_10], edx
.text:0000A288                 mov     eax, [ebp+var_10]
.text:0000A28B                 mov     [ebp+var_C], eax
.text:0000A28E                 cmp     [ebp+var_C], 0
.text:0000A292                 jz      short loc_A2A3
.text:0000A294                 push    1
.text:0000A296                 mov     ecx, [ebp+var_C]
.text:0000A299                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:0000A29E                 mov     [ebp+var_14], eax
.text:0000A2A1                 jmp     short loc_A2AA
.text:0000A2A3 ; ---------------------------------------------------------------------------
.text:0000A2A3
.text:0000A2A3 loc_A2A3:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+52j
.text:0000A2A3                 mov     [ebp+var_14], 0
.text:0000A2AA
.text:0000A2AA loc_A2AA:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+61j
.text:0000A2AA                 jmp     short loc_A268
.text:0000A2AC ; ---------------------------------------------------------------------------
.text:0000A2AC
.text:0000A2AC loc_A2AC:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+2Cj
.text:0000A2AC                 mov     ecx, [ebp+var_4]
.text:0000A2AF                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000A2B4                 add     esp, 14h
.text:0000A2B7                 cmp     ebp, esp
.text:0000A2B9                 call    __RTC_CheckEsp
.text:0000A2BE                 mov     esp, ebp
.text:0000A2C0                 pop     ebp
.text:0000A2C1                 retn
.text:0000A2C1 ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ endp
.text:0000A2C1
.text:0000A2C1 ; ---------------------------------------------------------------------------
.text:0000A2C2                 align 4
.text:0000A2C2 _text           ends
.text:0000A2C2
.text:0000A2C4 ; ===========================================================================
.text:0000A2C4
.text:0000A2C4 ; Segment type: Pure code
.text:0000A2C4 ; Segment permissions: Read/Execute
.text:0000A2C4 _text           segment para public 'CODE' use32
.text:0000A2C4                 assume cs:_text
.text:0000A2C4                 ;org 0A2C4h
.text:0000A2C4 ; COMDAT (pick any)
.text:0000A2C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A2C4
.text:0000A2C4 ; =============== S U B R O U T I N E =======================================
.text:0000A2C4
.text:0000A2C4 ; Attributes: bp-based frame
.text:0000A2C4
.text:0000A2C4 ; public: void __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Delete(unsigned int)
.text:0000A2C4                 public ?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z
.text:0000A2C4 ?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z proc near
.text:0000A2C4                                         ; CODE XREF: NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks(void)+4Fp
.text:0000A2C4
.text:0000A2C4 var_10          = dword ptr -10h
.text:0000A2C4 var_C           = dword ptr -0Ch
.text:0000A2C4 var_8           = dword ptr -8
.text:0000A2C4 var_4           = dword ptr -4
.text:0000A2C4 arg_0           = dword ptr  8
.text:0000A2C4
.text:0000A2C4                 push    ebp
.text:0000A2C5                 mov     ebp, esp
.text:0000A2C7                 sub     esp, 10h
.text:0000A2CA                 mov     eax, 0CCCCCCCCh
.text:0000A2CF                 mov     [ebp+var_10], eax
.text:0000A2D2                 mov     [ebp+var_C], eax
.text:0000A2D5                 mov     [ebp+var_8], eax
.text:0000A2D8                 mov     [ebp+var_4], eax
.text:0000A2DB                 mov     [ebp+var_4], ecx
.text:0000A2DE                 mov     eax, [ebp+arg_0]
.text:0000A2E1                 push    eax
.text:0000A2E2                 mov     ecx, [ebp+var_4]
.text:0000A2E5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A2EA                 mov     ecx, [eax]
.text:0000A2EC                 mov     [ebp+var_C], ecx
.text:0000A2EF                 mov     edx, [ebp+var_C]
.text:0000A2F2                 mov     [ebp+var_8], edx
.text:0000A2F5                 cmp     [ebp+var_8], 0
.text:0000A2F9                 jz      short loc_A30A
.text:0000A2FB                 push    1
.text:0000A2FD                 mov     ecx, [ebp+var_8]
.text:0000A300                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:0000A305                 mov     [ebp+var_10], eax
.text:0000A308                 jmp     short loc_A311
.text:0000A30A ; ---------------------------------------------------------------------------
.text:0000A30A
.text:0000A30A loc_A30A:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete(uint)+35j
.text:0000A30A                 mov     [ebp+var_10], 0
.text:0000A311
.text:0000A311 loc_A311:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete(uint)+44j
.text:0000A311                 mov     eax, [ebp+arg_0]
.text:0000A314                 push    eax
.text:0000A315                 mov     ecx, [ebp+var_4]
.text:0000A318                 call    ?Delete@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Delete(uint)
.text:0000A31D                 add     esp, 10h
.text:0000A320                 cmp     ebp, esp
.text:0000A322                 call    __RTC_CheckEsp
.text:0000A327                 mov     esp, ebp
.text:0000A329                 pop     ebp
.text:0000A32A                 retn    4
.text:0000A32A ?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z endp
.text:0000A32A
.text:0000A32A ; ---------------------------------------------------------------------------
.text:0000A32D                 align 10h
.text:0000A32D _text           ends
.text:0000A32D
.text:0000A330 ; ===========================================================================
.text:0000A330
.text:0000A330 ; Segment type: Pure code
.text:0000A330 ; Segment permissions: Read/Execute
.text:0000A330 _text           segment para public 'CODE' use32
.text:0000A330                 assume cs:_text
.text:0000A330                 ;org 0A330h
.text:0000A330 ; COMDAT (pick any)
.text:0000A330                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A330
.text:0000A330 ; =============== S U B R O U T I N E =======================================
.text:0000A330
.text:0000A330 ; Attributes: bp-based frame
.text:0000A330
.text:0000A330 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CThreadInfo>::Size(void)const
.text:0000A330                 public ?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ
.text:0000A330 ?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ proc near
.text:0000A330                                         ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+52p
.text:0000A330
.text:0000A330 var_4           = dword ptr -4
.text:0000A330
.text:0000A330                 push    ebp
.text:0000A331                 mov     ebp, esp
.text:0000A333                 push    ecx
.text:0000A334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A33B                 mov     [ebp+var_4], ecx
.text:0000A33E                 mov     ecx, [ebp+var_4]
.text:0000A341                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A346                 add     esp, 4
.text:0000A349                 cmp     ebp, esp
.text:0000A34B                 call    __RTC_CheckEsp
.text:0000A350                 mov     esp, ebp
.text:0000A352                 pop     ebp
.text:0000A353                 retn
.text:0000A353 ?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ endp
.text:0000A353
.text:0000A353 _text           ends
.text:0000A353
.text:0000A354 ; ===========================================================================
.text:0000A354
.text:0000A354 ; Segment type: Pure code
.text:0000A354 ; Segment permissions: Read/Execute
.text:0000A354 _text           segment para public 'CODE' use32
.text:0000A354                 assume cs:_text
.text:0000A354                 ;org 0A354h
.text:0000A354 ; COMDAT (pick any)
.text:0000A354                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A354
.text:0000A354 ; =============== S U B R O U T I N E =======================================
.text:0000A354
.text:0000A354 ; Attributes: bp-based frame
.text:0000A354
.text:0000A354 ; public: __thiscall CObjectVector<struct NArchive::NZip::CThreadInfo>::CObjectVector<struct NArchive::NZip::CThreadInfo>(void)
.text:0000A354                 public ??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
.text:0000A354 ??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A354                                         ; CODE XREF: NArchive::NZip::CThreads::CThreads(void)+11p
.text:0000A354
.text:0000A354 var_4           = dword ptr -4
.text:0000A354
.text:0000A354                 push    ebp
.text:0000A355                 mov     ebp, esp
.text:0000A357                 push    ecx
.text:0000A358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A35F                 mov     [ebp+var_4], ecx
.text:0000A362                 mov     ecx, [ebp+var_4]
.text:0000A365                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000A36A                 mov     eax, [ebp+var_4]
.text:0000A36D                 add     esp, 4
.text:0000A370                 cmp     ebp, esp
.text:0000A372                 call    __RTC_CheckEsp
.text:0000A377                 mov     esp, ebp
.text:0000A379                 pop     ebp
.text:0000A37A                 retn
.text:0000A37A ??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ endp
.text:0000A37A
.text:0000A37A ; ---------------------------------------------------------------------------
.text:0000A37B                 align 4
.text:0000A37B _text           ends
.text:0000A37B
.text:0000A37C ; ===========================================================================
.text:0000A37C
.text:0000A37C ; Segment type: Pure code
.text:0000A37C ; Segment permissions: Read/Execute
.text:0000A37C _text           segment para public 'CODE' use32
.text:0000A37C                 assume cs:_text
.text:0000A37C                 ;org 0A37Ch
.text:0000A37C ; COMDAT (pick any)
.text:0000A37C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A37C
.text:0000A37C ; =============== S U B R O U T I N E =======================================
.text:0000A37C
.text:0000A37C ; Attributes: bp-based frame
.text:0000A37C
.text:0000A37C ; public: struct NArchive::NZip::CThreadInfo & __thiscall CObjectVector<struct NArchive::NZip::CThreadInfo>::operator[](unsigned int)
.text:0000A37C                 public ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z
.text:0000A37C ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z proc near
.text:0000A37C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+888p
.text:0000A37C                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1450p ...
.text:0000A37C
.text:0000A37C var_4           = dword ptr -4
.text:0000A37C arg_0           = dword ptr  8
.text:0000A37C
.text:0000A37C                 push    ebp
.text:0000A37D                 mov     ebp, esp
.text:0000A37F                 push    ecx
.text:0000A380                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A387                 mov     [ebp+var_4], ecx
.text:0000A38A                 mov     eax, [ebp+arg_0]
.text:0000A38D                 push    eax
.text:0000A38E                 mov     ecx, [ebp+var_4]
.text:0000A391                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A396                 mov     eax, [eax]
.text:0000A398                 add     esp, 4
.text:0000A39B                 cmp     ebp, esp
.text:0000A39D                 call    __RTC_CheckEsp
.text:0000A3A2                 mov     esp, ebp
.text:0000A3A4                 pop     ebp
.text:0000A3A5                 retn    4
.text:0000A3A5 ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z endp
.text:0000A3A5
.text:0000A3A5 _text           ends
.text:0000A3A5
.text:0000A3A8 ; ===========================================================================
.text:0000A3A8
.text:0000A3A8 ; Segment type: Pure code
.text:0000A3A8 ; Segment permissions: Read/Execute
.text:0000A3A8 _text           segment para public 'CODE' use32
.text:0000A3A8                 assume cs:_text
.text:0000A3A8                 ;org 0A3A8h
.text:0000A3A8 ; COMDAT (pick any)
.text:0000A3A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A3A8
.text:0000A3A8 ; =============== S U B R O U T I N E =======================================
.text:0000A3A8
.text:0000A3A8 ; Attributes: bp-based frame
.text:0000A3A8
.text:0000A3A8 ; int __stdcall CObjectVector<NArchive::NZip::CThreadInfo>::Add(struct NArchive::NZip::CThreadInfo *)
.text:0000A3A8                 public ?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
.text:0000A3A8 ?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z proc near
.text:0000A3A8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+838p
.text:0000A3A8
.text:0000A3A8 var_1C          = dword ptr -1Ch
.text:0000A3A8 var_18          = dword ptr -18h
.text:0000A3A8 var_14          = dword ptr -14h
.text:0000A3A8 var_10          = dword ptr -10h
.text:0000A3A8 var_C           = dword ptr -0Ch
.text:0000A3A8 var_4           = dword ptr -4
.text:0000A3A8 arg_0           = dword ptr  8
.text:0000A3A8
.text:0000A3A8                 push    ebp
.text:0000A3A9                 mov     ebp, esp
.text:0000A3AB                 push    0FFFFFFFFh
.text:0000A3AD                 push    offset __ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
.text:0000A3B2                 mov     eax, large fs:0
.text:0000A3B8                 push    eax
.text:0000A3B9                 sub     esp, 10h
.text:0000A3BC                 mov     eax, 0CCCCCCCCh
.text:0000A3C1                 mov     [ebp+var_1C], eax
.text:0000A3C4                 mov     [ebp+var_18], eax
.text:0000A3C7                 mov     [ebp+var_14], eax
.text:0000A3CA                 mov     [ebp+var_10], eax
.text:0000A3CD                 mov     eax, dword ptr ds:___security_cookie
.text:0000A3D2                 xor     eax, ebp
.text:0000A3D4                 push    eax
.text:0000A3D5                 lea     eax, [ebp+var_C]
.text:0000A3D8                 mov     large fs:0, eax
.text:0000A3DE                 mov     [ebp+var_10], ecx
.text:0000A3E1                 push    0C8h ; '+'      ; unsigned int
.text:0000A3E6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A3EB                 add     esp, 4
.text:0000A3EE                 mov     [ebp+var_18], eax
.text:0000A3F1                 mov     [ebp+var_4], 0
.text:0000A3F8                 cmp     [ebp+var_18], 0
.text:0000A3FC                 jz      short loc_A40F
.text:0000A3FE                 mov     eax, [ebp+arg_0]
.text:0000A401                 push    eax             ; struct NArchive::NZip::CThreadInfo *
.text:0000A402                 mov     ecx, [ebp+var_18] ; this
.text:0000A405                 call    ??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)
.text:0000A40A                 mov     [ebp+var_1C], eax
.text:0000A40D                 jmp     short loc_A416
.text:0000A40F ; ---------------------------------------------------------------------------
.text:0000A40F
.text:0000A40F loc_A40F:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::Add(NArchive::NZip::CThreadInfo const &)+54j
.text:0000A40F                 mov     [ebp+var_1C], 0
.text:0000A416
.text:0000A416 loc_A416:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::Add(NArchive::NZip::CThreadInfo const &)+65j
.text:0000A416                 mov     ecx, [ebp+var_1C]
.text:0000A419                 mov     [ebp+var_14], ecx
.text:0000A41C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A423                 mov     edx, [ebp+var_14]
.text:0000A426                 push    edx
.text:0000A427                 mov     ecx, [ebp+var_10]
.text:0000A42A                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000A42F                 mov     ecx, [ebp+var_C]
.text:0000A432                 mov     large fs:0, ecx
.text:0000A439                 pop     ecx
.text:0000A43A                 add     esp, 1Ch
.text:0000A43D                 cmp     ebp, esp
.text:0000A43F                 call    __RTC_CheckEsp
.text:0000A444                 mov     esp, ebp
.text:0000A446                 pop     ebp
.text:0000A447                 retn    4
.text:0000A447 ?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z endp
.text:0000A447
.text:0000A447 ; ---------------------------------------------------------------------------
.text:0000A44A                 align 4
.text:0000A44A _text           ends
.text:0000A44A
.text$x:0000A44C ; ===========================================================================
.text$x:0000A44C
.text$x:0000A44C ; Segment type: Pure code
.text$x:0000A44C ; Segment permissions: Read/Execute
.text$x:0000A44C _text$x         segment para public 'CODE' use32
.text$x:0000A44C                 assume cs:_text$x
.text$x:0000A44C                 ;org 0A44Ch
.text$x:0000A44C ; COMDAT (pick associative to section at A3A8)
.text$x:0000A44C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A44C
.text$x:0000A44C ; =============== S U B R O U T I N E =======================================
.text$x:0000A44C
.text$x:0000A44C
.text$x:0000A44C __unwindfunclet$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z$0 proc near
.text$x:0000A44C                                         ; DATA XREF: .xdata$x:0000A478o
.text$x:0000A44C                 mov     eax, [ebp-18h]
.text$x:0000A44F                 push    eax             ; void *
.text$x:0000A450                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000A455                 pop     ecx
.text$x:0000A456                 retn
.text$x:0000A456 __unwindfunclet$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z$0 endp
.text$x:0000A456
.text$x:0000A457
.text$x:0000A457 ; =============== S U B R O U T I N E =======================================
.text$x:0000A457
.text$x:0000A457
.text$x:0000A457 __ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z proc near
.text$x:0000A457                                         ; DATA XREF: CObjectVector<NArchive::NZip::CThreadInfo>::Add(NArchive::NZip::CThreadInfo const &)+5o
.text$x:0000A457
.text$x:0000A457 arg_4           = dword ptr  8
.text$x:0000A457
.text$x:0000A457                 mov     edx, [esp+arg_4]
.text$x:0000A45B                 lea     eax, [edx+0Ch]
.text$x:0000A45E                 mov     ecx, [edx-14h]
.text$x:0000A461                 xor     ecx, eax
.text$x:0000A463                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A468                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
.text$x:0000A46D                 jmp     ___CxxFrameHandler3
.text$x:0000A46D __ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z endp
.text$x:0000A46D
.text$x:0000A46D ; ---------------------------------------------------------------------------
.text$x:0000A472                 align 4
.text$x:0000A472 _text$x         ends
.text$x:0000A472
.xdata$x:0000A474 ; ===========================================================================
.xdata$x:0000A474
.xdata$x:0000A474 ; Segment type: Pure data
.xdata$x:0000A474 ; Segment permissions: Read
.xdata$x:0000A474 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A474                 assume cs:_xdata$x
.xdata$x:0000A474                 ;org 0A474h
.xdata$x:0000A474 ; COMDAT (pick associative to section at A3A8)
.xdata$x:0000A474 __unwindtable$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z db 0FFh
.xdata$x:0000A474                                         ; DATA XREF: .xdata$x:0000A484o
.xdata$x:0000A475                 db 0FFh
.xdata$x:0000A476                 db 0FFh
.xdata$x:0000A477                 db 0FFh
.xdata$x:0000A478                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z$0
.xdata$x:0000A47C __ehfuncinfo$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000A47C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z+11o
.xdata$x:0000A47D                 db    5
.xdata$x:0000A47E                 db  93h ; ô
.xdata$x:0000A47F                 db  19h
.xdata$x:0000A480                 db    1
.xdata$x:0000A481                 db    0
.xdata$x:0000A482                 db    0
.xdata$x:0000A483                 db    0
.xdata$x:0000A484                 dd offset __unwindtable$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
.xdata$x:0000A488                 db    0
.xdata$x:0000A489                 db    0
.xdata$x:0000A48A                 db    0
.xdata$x:0000A48B                 db    0
.xdata$x:0000A48C                 db    0
.xdata$x:0000A48D                 db    0
.xdata$x:0000A48E                 db    0
.xdata$x:0000A48F                 db    0
.xdata$x:0000A490                 db    0
.xdata$x:0000A491                 db    0
.xdata$x:0000A492                 db    0
.xdata$x:0000A493                 db    0
.xdata$x:0000A494                 db    0
.xdata$x:0000A495                 db    0
.xdata$x:0000A496                 db    0
.xdata$x:0000A497                 db    0
.xdata$x:0000A498                 db    0
.xdata$x:0000A499                 db    0
.xdata$x:0000A49A                 db    0
.xdata$x:0000A49B                 db    0
.xdata$x:0000A49C                 db    1
.xdata$x:0000A49D                 db    0
.xdata$x:0000A49E                 db    0
.xdata$x:0000A49F                 db    0
.xdata$x:0000A49F _xdata$x        ends
.xdata$x:0000A49F
.text:0000A4A0 ; ===========================================================================
.text:0000A4A0
.text:0000A4A0 ; Segment type: Pure code
.text:0000A4A0 ; Segment permissions: Read/Execute
.text:0000A4A0 _text           segment para public 'CODE' use32
.text:0000A4A0                 assume cs:_text
.text:0000A4A0                 ;org 0A4A0h
.text:0000A4A0 ; COMDAT (pick any)
.text:0000A4A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A4A0
.text:0000A4A0 ; =============== S U B R O U T I N E =======================================
.text:0000A4A0
.text:0000A4A0 ; Attributes: bp-based frame
.text:0000A4A0
.text:0000A4A0 ; public: __thiscall CObjectVector<struct NArchive::NZip::CThreadInfo>::~CObjectVector<struct NArchive::NZip::CThreadInfo>(void)
.text:0000A4A0                 public ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
.text:0000A4A0 ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A4A0                                         ; CODE XREF: NArchive::NZip::CThreads::~CThreads(void)+7Bp
.text:0000A4A0                                         ; __unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0+3j
.text:0000A4A0
.text:0000A4A0 var_20          = dword ptr -20h
.text:0000A4A0 var_1C          = dword ptr -1Ch
.text:0000A4A0 var_18          = dword ptr -18h
.text:0000A4A0 var_14          = dword ptr -14h
.text:0000A4A0 var_10          = dword ptr -10h
.text:0000A4A0 var_C           = dword ptr -0Ch
.text:0000A4A0 var_4           = dword ptr -4
.text:0000A4A0
.text:0000A4A0                 push    ebp
.text:0000A4A1                 mov     ebp, esp
.text:0000A4A3                 push    0FFFFFFFFh
.text:0000A4A5                 push    offset __ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
.text:0000A4AA                 mov     eax, large fs:0
.text:0000A4B0                 push    eax
.text:0000A4B1                 sub     esp, 14h
.text:0000A4B4                 mov     eax, 0CCCCCCCCh
.text:0000A4B9                 mov     [ebp+var_20], eax
.text:0000A4BC                 mov     [ebp+var_1C], eax
.text:0000A4BF                 mov     [ebp+var_18], eax
.text:0000A4C2                 mov     [ebp+var_14], eax
.text:0000A4C5                 mov     [ebp+var_10], eax
.text:0000A4C8                 mov     eax, dword ptr ds:___security_cookie
.text:0000A4CD                 xor     eax, ebp
.text:0000A4CF                 push    eax
.text:0000A4D0                 lea     eax, [ebp+var_C]
.text:0000A4D3                 mov     large fs:0, eax
.text:0000A4D9                 mov     [ebp+var_10], ecx
.text:0000A4DC                 mov     [ebp+var_4], 0
.text:0000A4E3                 mov     ecx, [ebp+var_10]
.text:0000A4E6                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A4EB                 mov     [ebp+var_14], eax
.text:0000A4EE
.text:0000A4EE loc_A4EE:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void):loc_A530j
.text:0000A4EE                 cmp     [ebp+var_14], 0
.text:0000A4F2                 jz      short loc_A532
.text:0000A4F4                 mov     eax, [ebp+var_14]
.text:0000A4F7                 sub     eax, 1
.text:0000A4FA                 mov     [ebp+var_14], eax
.text:0000A4FD                 mov     ecx, [ebp+var_14]
.text:0000A500                 push    ecx
.text:0000A501                 mov     ecx, [ebp+var_10]
.text:0000A504                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A509                 mov     edx, [eax]
.text:0000A50B                 mov     [ebp+var_1C], edx
.text:0000A50E                 mov     eax, [ebp+var_1C]
.text:0000A511                 mov     [ebp+var_18], eax
.text:0000A514                 cmp     [ebp+var_18], 0
.text:0000A518                 jz      short loc_A529
.text:0000A51A                 push    1
.text:0000A51C                 mov     ecx, [ebp+var_18]
.text:0000A51F                 call    ??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CThreadInfo::`scalar deleting destructor'(uint)
.text:0000A524                 mov     [ebp+var_20], eax
.text:0000A527                 jmp     short loc_A530
.text:0000A529 ; ---------------------------------------------------------------------------
.text:0000A529
.text:0000A529 loc_A529:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)+78j
.text:0000A529                 mov     [ebp+var_20], 0
.text:0000A530
.text:0000A530 loc_A530:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)+87j
.text:0000A530                 jmp     short loc_A4EE
.text:0000A532 ; ---------------------------------------------------------------------------
.text:0000A532
.text:0000A532 loc_A532:                               ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)+52j
.text:0000A532                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A539                 mov     ecx, [ebp+var_10]
.text:0000A53C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A541                 mov     ecx, [ebp+var_C]
.text:0000A544                 mov     large fs:0, ecx
.text:0000A54B                 pop     ecx
.text:0000A54C                 add     esp, 20h
.text:0000A54F                 cmp     ebp, esp
.text:0000A551                 call    __RTC_CheckEsp
.text:0000A556                 mov     esp, ebp
.text:0000A558                 pop     ebp
.text:0000A559                 retn
.text:0000A559 ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ endp
.text:0000A559
.text:0000A559 ; ---------------------------------------------------------------------------
.text:0000A55A                 align 4
.text:0000A55A _text           ends
.text:0000A55A
.text$x:0000A55C ; ===========================================================================
.text$x:0000A55C
.text$x:0000A55C ; Segment type: Pure code
.text$x:0000A55C ; Segment permissions: Read/Execute
.text$x:0000A55C _text$x         segment para public 'CODE' use32
.text$x:0000A55C                 assume cs:_text$x
.text$x:0000A55C                 ;org 0A55Ch
.text$x:0000A55C ; COMDAT (pick associative to section at A4A0)
.text$x:0000A55C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A55C
.text$x:0000A55C ; =============== S U B R O U T I N E =======================================
.text$x:0000A55C
.text$x:0000A55C
.text$x:0000A55C __unwindfunclet$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000A55C                                         ; DATA XREF: .xdata$x:0000A584o
.text$x:0000A55C                 mov     ecx, [ebp-10h]
.text$x:0000A55F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000A55F __unwindfunclet$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:0000A55F
.text$x:0000A564
.text$x:0000A564 ; =============== S U B R O U T I N E =======================================
.text$x:0000A564
.text$x:0000A564
.text$x:0000A564 __ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ proc near
.text$x:0000A564                                         ; DATA XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)+5o
.text$x:0000A564
.text$x:0000A564 arg_4           = dword ptr  8
.text$x:0000A564
.text$x:0000A564                 mov     edx, [esp+arg_4]
.text$x:0000A568                 lea     eax, [edx+0Ch]
.text$x:0000A56B                 mov     ecx, [edx-18h]
.text$x:0000A56E                 xor     ecx, eax
.text$x:0000A570                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A575                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
.text$x:0000A57A                 jmp     ___CxxFrameHandler3
.text$x:0000A57A __ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000A57A
.text$x:0000A57A ; ---------------------------------------------------------------------------
.text$x:0000A57F                 align 10h
.text$x:0000A57F _text$x         ends
.text$x:0000A57F
.xdata$x:0000A580 ; ===========================================================================
.xdata$x:0000A580
.xdata$x:0000A580 ; Segment type: Pure data
.xdata$x:0000A580 ; Segment permissions: Read
.xdata$x:0000A580 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A580                 assume cs:_xdata$x
.xdata$x:0000A580                 ;org 0A580h
.xdata$x:0000A580 ; COMDAT (pick associative to section at A4A0)
.xdata$x:0000A580 __unwindtable$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000A580                                         ; DATA XREF: .xdata$x:0000A590o
.xdata$x:0000A581                 db 0FFh
.xdata$x:0000A582                 db 0FFh
.xdata$x:0000A583                 db 0FFh
.xdata$x:0000A584                 dd offset __unwindfunclet$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:0000A588 __ehfuncinfo$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000A588                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:0000A589                 db    5
.xdata$x:0000A58A                 db  93h ; ô
.xdata$x:0000A58B                 db  19h
.xdata$x:0000A58C                 db    1
.xdata$x:0000A58D                 db    0
.xdata$x:0000A58E                 db    0
.xdata$x:0000A58F                 db    0
.xdata$x:0000A590                 dd offset __unwindtable$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
.xdata$x:0000A594                 db    0
.xdata$x:0000A595                 db    0
.xdata$x:0000A596                 db    0
.xdata$x:0000A597                 db    0
.xdata$x:0000A598                 db    0
.xdata$x:0000A599                 db    0
.xdata$x:0000A59A                 db    0
.xdata$x:0000A59B                 db    0
.xdata$x:0000A59C                 db    0
.xdata$x:0000A59D                 db    0
.xdata$x:0000A59E                 db    0
.xdata$x:0000A59F                 db    0
.xdata$x:0000A5A0                 db    0
.xdata$x:0000A5A1                 db    0
.xdata$x:0000A5A2                 db    0
.xdata$x:0000A5A3                 db    0
.xdata$x:0000A5A4                 db    0
.xdata$x:0000A5A5                 db    0
.xdata$x:0000A5A6                 db    0
.xdata$x:0000A5A7                 db    0
.xdata$x:0000A5A8                 db    1
.xdata$x:0000A5A9                 db    0
.xdata$x:0000A5AA                 db    0
.xdata$x:0000A5AB                 db    0
.xdata$x:0000A5AB _xdata$x        ends
.xdata$x:0000A5AB
.text:0000A5AC ; ===========================================================================
.text:0000A5AC
.text:0000A5AC ; Segment type: Pure code
.text:0000A5AC ; Segment permissions: Read/Execute
.text:0000A5AC _text           segment para public 'CODE' use32
.text:0000A5AC                 assume cs:_text
.text:0000A5AC                 ;org 0A5ACh
.text:0000A5AC ; COMDAT (pick any)
.text:0000A5AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A5AC
.text:0000A5AC ; =============== S U B R O U T I N E =======================================
.text:0000A5AC
.text:0000A5AC ; Attributes: bp-based frame
.text:0000A5AC
.text:0000A5AC ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CMemBlocks2>::Size(void)const
.text:0000A5AC                 public ?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ
.text:0000A5AC ?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ proc near
.text:0000A5AC                                         ; CODE XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+55p
.text:0000A5AC
.text:0000A5AC var_4           = dword ptr -4
.text:0000A5AC
.text:0000A5AC                 push    ebp
.text:0000A5AD                 mov     ebp, esp
.text:0000A5AF                 push    ecx
.text:0000A5B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5B7                 mov     [ebp+var_4], ecx
.text:0000A5BA                 mov     ecx, [ebp+var_4]
.text:0000A5BD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A5C2                 add     esp, 4
.text:0000A5C5                 cmp     ebp, esp
.text:0000A5C7                 call    __RTC_CheckEsp
.text:0000A5CC                 mov     esp, ebp
.text:0000A5CE                 pop     ebp
.text:0000A5CF                 retn
.text:0000A5CF ?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ endp
.text:0000A5CF
.text:0000A5CF _text           ends
.text:0000A5CF
.text:0000A5D0 ; ===========================================================================
.text:0000A5D0
.text:0000A5D0 ; Segment type: Pure code
.text:0000A5D0 ; Segment permissions: Read/Execute
.text:0000A5D0 _text           segment para public 'CODE' use32
.text:0000A5D0                 assume cs:_text
.text:0000A5D0                 ;org 0A5D0h
.text:0000A5D0 ; COMDAT (pick any)
.text:0000A5D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A5D0
.text:0000A5D0 ; =============== S U B R O U T I N E =======================================
.text:0000A5D0
.text:0000A5D0 ; Attributes: bp-based frame
.text:0000A5D0
.text:0000A5D0 ; public: __thiscall CObjectVector<struct NArchive::NZip::CMemBlocks2>::CObjectVector<struct NArchive::NZip::CMemBlocks2>(void)
.text:0000A5D0                 public ??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
.text:0000A5D0 ??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A5D0                                         ; CODE XREF: NArchive::NZip::CMemRefs::CMemRefs(CMemBlockManagerMt *)+1Cp
.text:0000A5D0
.text:0000A5D0 var_4           = dword ptr -4
.text:0000A5D0
.text:0000A5D0                 push    ebp
.text:0000A5D1                 mov     ebp, esp
.text:0000A5D3                 push    ecx
.text:0000A5D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5DB                 mov     [ebp+var_4], ecx
.text:0000A5DE                 mov     ecx, [ebp+var_4]
.text:0000A5E1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000A5E6                 mov     eax, [ebp+var_4]
.text:0000A5E9                 add     esp, 4
.text:0000A5EC                 cmp     ebp, esp
.text:0000A5EE                 call    __RTC_CheckEsp
.text:0000A5F3                 mov     esp, ebp
.text:0000A5F5                 pop     ebp
.text:0000A5F6                 retn
.text:0000A5F6 ??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ endp
.text:0000A5F6
.text:0000A5F6 ; ---------------------------------------------------------------------------
.text:0000A5F7                 align 4
.text:0000A5F7 _text           ends
.text:0000A5F7
.text:0000A5F8 ; ===========================================================================
.text:0000A5F8
.text:0000A5F8 ; Segment type: Pure code
.text:0000A5F8 ; Segment permissions: Read/Execute
.text:0000A5F8 _text           segment para public 'CODE' use32
.text:0000A5F8                 assume cs:_text
.text:0000A5F8                 ;org 0A5F8h
.text:0000A5F8 ; COMDAT (pick any)
.text:0000A5F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A5F8
.text:0000A5F8 ; =============== S U B R O U T I N E =======================================
.text:0000A5F8
.text:0000A5F8 ; Attributes: bp-based frame
.text:0000A5F8
.text:0000A5F8 ; public: struct NArchive::NZip::CMemBlocks2 & __thiscall CObjectVector<struct NArchive::NZip::CMemBlocks2>::operator[](unsigned int)
.text:0000A5F8                 public ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z
.text:0000A5F8 ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z proc near
.text:0000A5F8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+107Cp
.text:0000A5F8                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+154Ep ...
.text:0000A5F8
.text:0000A5F8 var_4           = dword ptr -4
.text:0000A5F8 arg_0           = dword ptr  8
.text:0000A5F8
.text:0000A5F8                 push    ebp
.text:0000A5F9                 mov     ebp, esp
.text:0000A5FB                 push    ecx
.text:0000A5FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A603                 mov     [ebp+var_4], ecx
.text:0000A606                 mov     eax, [ebp+arg_0]
.text:0000A609                 push    eax
.text:0000A60A                 mov     ecx, [ebp+var_4]
.text:0000A60D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A612                 mov     eax, [eax]
.text:0000A614                 add     esp, 4
.text:0000A617                 cmp     ebp, esp
.text:0000A619                 call    __RTC_CheckEsp
.text:0000A61E                 mov     esp, ebp
.text:0000A620                 pop     ebp
.text:0000A621                 retn    4
.text:0000A621 ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z endp
.text:0000A621
.text:0000A621 _text           ends
.text:0000A621
.text:0000A624 ; ===========================================================================
.text:0000A624
.text:0000A624 ; Segment type: Pure code
.text:0000A624 ; Segment permissions: Read/Execute
.text:0000A624 _text           segment para public 'CODE' use32
.text:0000A624                 assume cs:_text
.text:0000A624                 ;org 0A624h
.text:0000A624 ; COMDAT (pick any)
.text:0000A624                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A624
.text:0000A624 ; =============== S U B R O U T I N E =======================================
.text:0000A624
.text:0000A624 ; Attributes: bp-based frame
.text:0000A624
.text:0000A624 ; int __stdcall CObjectVector<NArchive::NZip::CMemBlocks2>::Add(struct NArchive::NZip::CMemBlocks2 *)
.text:0000A624                 public ?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
.text:0000A624 ?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z proc near
.text:0000A624                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+7C4p
.text:0000A624
.text:0000A624 var_1C          = dword ptr -1Ch
.text:0000A624 var_18          = dword ptr -18h
.text:0000A624 var_14          = dword ptr -14h
.text:0000A624 var_10          = dword ptr -10h
.text:0000A624 var_C           = dword ptr -0Ch
.text:0000A624 var_4           = dword ptr -4
.text:0000A624 arg_0           = dword ptr  8
.text:0000A624
.text:0000A624                 push    ebp
.text:0000A625                 mov     ebp, esp
.text:0000A627                 push    0FFFFFFFFh
.text:0000A629                 push    offset __ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
.text:0000A62E                 mov     eax, large fs:0
.text:0000A634                 push    eax
.text:0000A635                 sub     esp, 10h
.text:0000A638                 mov     eax, 0CCCCCCCCh
.text:0000A63D                 mov     [ebp+var_1C], eax
.text:0000A640                 mov     [ebp+var_18], eax
.text:0000A643                 mov     [ebp+var_14], eax
.text:0000A646                 mov     [ebp+var_10], eax
.text:0000A649                 mov     eax, dword ptr ds:___security_cookie
.text:0000A64E                 xor     eax, ebp
.text:0000A650                 push    eax
.text:0000A651                 lea     eax, [ebp+var_C]
.text:0000A654                 mov     large fs:0, eax
.text:0000A65A                 mov     [ebp+var_10], ecx
.text:0000A65D                 push    40h ; '@'       ; unsigned int
.text:0000A65F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A664                 add     esp, 4
.text:0000A667                 mov     [ebp+var_18], eax
.text:0000A66A                 mov     [ebp+var_4], 0
.text:0000A671                 cmp     [ebp+var_18], 0
.text:0000A675                 jz      short loc_A688
.text:0000A677                 mov     eax, [ebp+arg_0]
.text:0000A67A                 push    eax             ; struct NArchive::NZip::CMemBlocks2 *
.text:0000A67B                 mov     ecx, [ebp+var_18] ; this
.text:0000A67E                 call    ??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CMemBlocks2::CMemBlocks2(NArchive::NZip::CMemBlocks2 const &)
.text:0000A683                 mov     [ebp+var_1C], eax
.text:0000A686                 jmp     short loc_A68F
.text:0000A688 ; ---------------------------------------------------------------------------
.text:0000A688
.text:0000A688 loc_A688:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::Add(NArchive::NZip::CMemBlocks2 const &)+51j
.text:0000A688                 mov     [ebp+var_1C], 0
.text:0000A68F
.text:0000A68F loc_A68F:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::Add(NArchive::NZip::CMemBlocks2 const &)+62j
.text:0000A68F                 mov     ecx, [ebp+var_1C]
.text:0000A692                 mov     [ebp+var_14], ecx
.text:0000A695                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A69C                 mov     edx, [ebp+var_14]
.text:0000A69F                 push    edx
.text:0000A6A0                 mov     ecx, [ebp+var_10]
.text:0000A6A3                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000A6A8                 mov     ecx, [ebp+var_C]
.text:0000A6AB                 mov     large fs:0, ecx
.text:0000A6B2                 pop     ecx
.text:0000A6B3                 add     esp, 1Ch
.text:0000A6B6                 cmp     ebp, esp
.text:0000A6B8                 call    __RTC_CheckEsp
.text:0000A6BD                 mov     esp, ebp
.text:0000A6BF                 pop     ebp
.text:0000A6C0                 retn    4
.text:0000A6C0 ?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z endp
.text:0000A6C0
.text:0000A6C0 ; ---------------------------------------------------------------------------
.text:0000A6C3                 align 4
.text:0000A6C3 _text           ends
.text:0000A6C3
.text$x:0000A6C4 ; ===========================================================================
.text$x:0000A6C4
.text$x:0000A6C4 ; Segment type: Pure code
.text$x:0000A6C4 ; Segment permissions: Read/Execute
.text$x:0000A6C4 _text$x         segment para public 'CODE' use32
.text$x:0000A6C4                 assume cs:_text$x
.text$x:0000A6C4                 ;org 0A6C4h
.text$x:0000A6C4 ; COMDAT (pick associative to section at A624)
.text$x:0000A6C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A6C4
.text$x:0000A6C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000A6C4
.text$x:0000A6C4
.text$x:0000A6C4 __unwindfunclet$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z$0 proc near
.text$x:0000A6C4                                         ; DATA XREF: .xdata$x:0000A6F0o
.text$x:0000A6C4                 mov     eax, [ebp-18h]
.text$x:0000A6C7                 push    eax             ; void *
.text$x:0000A6C8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000A6CD                 pop     ecx
.text$x:0000A6CE                 retn
.text$x:0000A6CE __unwindfunclet$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z$0 endp
.text$x:0000A6CE
.text$x:0000A6CF
.text$x:0000A6CF ; =============== S U B R O U T I N E =======================================
.text$x:0000A6CF
.text$x:0000A6CF
.text$x:0000A6CF __ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z proc near
.text$x:0000A6CF                                         ; DATA XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::Add(NArchive::NZip::CMemBlocks2 const &)+5o
.text$x:0000A6CF
.text$x:0000A6CF arg_4           = dword ptr  8
.text$x:0000A6CF
.text$x:0000A6CF                 mov     edx, [esp+arg_4]
.text$x:0000A6D3                 lea     eax, [edx+0Ch]
.text$x:0000A6D6                 mov     ecx, [edx-14h]
.text$x:0000A6D9                 xor     ecx, eax
.text$x:0000A6DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A6E0                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
.text$x:0000A6E5                 jmp     ___CxxFrameHandler3
.text$x:0000A6E5 __ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z endp
.text$x:0000A6E5
.text$x:0000A6E5 ; ---------------------------------------------------------------------------
.text$x:0000A6EA                 align 4
.text$x:0000A6EA _text$x         ends
.text$x:0000A6EA
.xdata$x:0000A6EC ; ===========================================================================
.xdata$x:0000A6EC
.xdata$x:0000A6EC ; Segment type: Pure data
.xdata$x:0000A6EC ; Segment permissions: Read
.xdata$x:0000A6EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A6EC                 assume cs:_xdata$x
.xdata$x:0000A6EC                 ;org 0A6ECh
.xdata$x:0000A6EC ; COMDAT (pick associative to section at A624)
.xdata$x:0000A6EC __unwindtable$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z db 0FFh
.xdata$x:0000A6EC                                         ; DATA XREF: .xdata$x:0000A6FCo
.xdata$x:0000A6ED                 db 0FFh
.xdata$x:0000A6EE                 db 0FFh
.xdata$x:0000A6EF                 db 0FFh
.xdata$x:0000A6F0                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z$0
.xdata$x:0000A6F4 __ehfuncinfo$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000A6F4                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z+11o
.xdata$x:0000A6F5                 db    5
.xdata$x:0000A6F6                 db  93h ; ô
.xdata$x:0000A6F7                 db  19h
.xdata$x:0000A6F8                 db    1
.xdata$x:0000A6F9                 db    0
.xdata$x:0000A6FA                 db    0
.xdata$x:0000A6FB                 db    0
.xdata$x:0000A6FC                 dd offset __unwindtable$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
.xdata$x:0000A700                 db    0
.xdata$x:0000A701                 db    0
.xdata$x:0000A702                 db    0
.xdata$x:0000A703                 db    0
.xdata$x:0000A704                 db    0
.xdata$x:0000A705                 db    0
.xdata$x:0000A706                 db    0
.xdata$x:0000A707                 db    0
.xdata$x:0000A708                 db    0
.xdata$x:0000A709                 db    0
.xdata$x:0000A70A                 db    0
.xdata$x:0000A70B                 db    0
.xdata$x:0000A70C                 db    0
.xdata$x:0000A70D                 db    0
.xdata$x:0000A70E                 db    0
.xdata$x:0000A70F                 db    0
.xdata$x:0000A710                 db    0
.xdata$x:0000A711                 db    0
.xdata$x:0000A712                 db    0
.xdata$x:0000A713                 db    0
.xdata$x:0000A714                 db    1
.xdata$x:0000A715                 db    0
.xdata$x:0000A716                 db    0
.xdata$x:0000A717                 db    0
.xdata$x:0000A717 _xdata$x        ends
.xdata$x:0000A717
.text:0000A718 ; ===========================================================================
.text:0000A718
.text:0000A718 ; Segment type: Pure code
.text:0000A718 ; Segment permissions: Read/Execute
.text:0000A718 _text           segment para public 'CODE' use32
.text:0000A718                 assume cs:_text
.text:0000A718                 ;org 0A718h
.text:0000A718 ; COMDAT (pick any)
.text:0000A718                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A718
.text:0000A718 ; =============== S U B R O U T I N E =======================================
.text:0000A718
.text:0000A718 ; Attributes: bp-based frame
.text:0000A718
.text:0000A718 ; public: __thiscall CObjectVector<struct NArchive::NZip::CMemBlocks2>::~CObjectVector<struct NArchive::NZip::CMemBlocks2>(void)
.text:0000A718                 public ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
.text:0000A718 ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A718                                         ; CODE XREF: NArchive::NZip::CMemRefs::~CMemRefs(void)+8Ap
.text:0000A718                                         ; __unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0+6j
.text:0000A718
.text:0000A718 var_20          = dword ptr -20h
.text:0000A718 var_1C          = dword ptr -1Ch
.text:0000A718 var_18          = dword ptr -18h
.text:0000A718 var_14          = dword ptr -14h
.text:0000A718 var_10          = dword ptr -10h
.text:0000A718 var_C           = dword ptr -0Ch
.text:0000A718 var_4           = dword ptr -4
.text:0000A718
.text:0000A718                 push    ebp
.text:0000A719                 mov     ebp, esp
.text:0000A71B                 push    0FFFFFFFFh
.text:0000A71D                 push    offset __ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
.text:0000A722                 mov     eax, large fs:0
.text:0000A728                 push    eax
.text:0000A729                 sub     esp, 14h
.text:0000A72C                 mov     eax, 0CCCCCCCCh
.text:0000A731                 mov     [ebp+var_20], eax
.text:0000A734                 mov     [ebp+var_1C], eax
.text:0000A737                 mov     [ebp+var_18], eax
.text:0000A73A                 mov     [ebp+var_14], eax
.text:0000A73D                 mov     [ebp+var_10], eax
.text:0000A740                 mov     eax, dword ptr ds:___security_cookie
.text:0000A745                 xor     eax, ebp
.text:0000A747                 push    eax
.text:0000A748                 lea     eax, [ebp+var_C]
.text:0000A74B                 mov     large fs:0, eax
.text:0000A751                 mov     [ebp+var_10], ecx
.text:0000A754                 mov     [ebp+var_4], 0
.text:0000A75B                 mov     ecx, [ebp+var_10]
.text:0000A75E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A763                 mov     [ebp+var_14], eax
.text:0000A766
.text:0000A766 loc_A766:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void):loc_A7A8j
.text:0000A766                 cmp     [ebp+var_14], 0
.text:0000A76A                 jz      short loc_A7AA
.text:0000A76C                 mov     eax, [ebp+var_14]
.text:0000A76F                 sub     eax, 1
.text:0000A772                 mov     [ebp+var_14], eax
.text:0000A775                 mov     ecx, [ebp+var_14]
.text:0000A778                 push    ecx
.text:0000A779                 mov     ecx, [ebp+var_10]
.text:0000A77C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A781                 mov     edx, [eax]
.text:0000A783                 mov     [ebp+var_1C], edx
.text:0000A786                 mov     eax, [ebp+var_1C]
.text:0000A789                 mov     [ebp+var_18], eax
.text:0000A78C                 cmp     [ebp+var_18], 0
.text:0000A790                 jz      short loc_A7A1
.text:0000A792                 push    1
.text:0000A794                 mov     ecx, [ebp+var_18]
.text:0000A797                 call    ??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CMemBlocks2::`scalar deleting destructor'(uint)
.text:0000A79C                 mov     [ebp+var_20], eax
.text:0000A79F                 jmp     short loc_A7A8
.text:0000A7A1 ; ---------------------------------------------------------------------------
.text:0000A7A1
.text:0000A7A1 loc_A7A1:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)+78j
.text:0000A7A1                 mov     [ebp+var_20], 0
.text:0000A7A8
.text:0000A7A8 loc_A7A8:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)+87j
.text:0000A7A8                 jmp     short loc_A766
.text:0000A7AA ; ---------------------------------------------------------------------------
.text:0000A7AA
.text:0000A7AA loc_A7AA:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)+52j
.text:0000A7AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A7B1                 mov     ecx, [ebp+var_10]
.text:0000A7B4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A7B9                 mov     ecx, [ebp+var_C]
.text:0000A7BC                 mov     large fs:0, ecx
.text:0000A7C3                 pop     ecx
.text:0000A7C4                 add     esp, 20h
.text:0000A7C7                 cmp     ebp, esp
.text:0000A7C9                 call    __RTC_CheckEsp
.text:0000A7CE                 mov     esp, ebp
.text:0000A7D0                 pop     ebp
.text:0000A7D1                 retn
.text:0000A7D1 ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ endp
.text:0000A7D1
.text:0000A7D1 ; ---------------------------------------------------------------------------
.text:0000A7D2                 align 4
.text:0000A7D2 _text           ends
.text:0000A7D2
.text$x:0000A7D4 ; ===========================================================================
.text$x:0000A7D4
.text$x:0000A7D4 ; Segment type: Pure code
.text$x:0000A7D4 ; Segment permissions: Read/Execute
.text$x:0000A7D4 _text$x         segment para public 'CODE' use32
.text$x:0000A7D4                 assume cs:_text$x
.text$x:0000A7D4                 ;org 0A7D4h
.text$x:0000A7D4 ; COMDAT (pick associative to section at A718)
.text$x:0000A7D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A7D4
.text$x:0000A7D4 ; =============== S U B R O U T I N E =======================================
.text$x:0000A7D4
.text$x:0000A7D4
.text$x:0000A7D4 __unwindfunclet$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000A7D4                                         ; DATA XREF: .xdata$x:0000A7FCo
.text$x:0000A7D4                 mov     ecx, [ebp-10h]
.text$x:0000A7D7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000A7D7 __unwindfunclet$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:0000A7D7
.text$x:0000A7DC
.text$x:0000A7DC ; =============== S U B R O U T I N E =======================================
.text$x:0000A7DC
.text$x:0000A7DC
.text$x:0000A7DC __ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ proc near
.text$x:0000A7DC                                         ; DATA XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)+5o
.text$x:0000A7DC
.text$x:0000A7DC arg_4           = dword ptr  8
.text$x:0000A7DC
.text$x:0000A7DC                 mov     edx, [esp+arg_4]
.text$x:0000A7E0                 lea     eax, [edx+0Ch]
.text$x:0000A7E3                 mov     ecx, [edx-18h]
.text$x:0000A7E6                 xor     ecx, eax
.text$x:0000A7E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A7ED                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
.text$x:0000A7F2                 jmp     ___CxxFrameHandler3
.text$x:0000A7F2 __ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000A7F2
.text$x:0000A7F2 ; ---------------------------------------------------------------------------
.text$x:0000A7F7                 align 4
.text$x:0000A7F7 _text$x         ends
.text$x:0000A7F7
.xdata$x:0000A7F8 ; ===========================================================================
.xdata$x:0000A7F8
.xdata$x:0000A7F8 ; Segment type: Pure data
.xdata$x:0000A7F8 ; Segment permissions: Read
.xdata$x:0000A7F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A7F8                 assume cs:_xdata$x
.xdata$x:0000A7F8                 ;org 0A7F8h
.xdata$x:0000A7F8 ; COMDAT (pick associative to section at A718)
.xdata$x:0000A7F8 __unwindtable$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000A7F8                                         ; DATA XREF: .xdata$x:0000A808o
.xdata$x:0000A7F9                 db 0FFh
.xdata$x:0000A7FA                 db 0FFh
.xdata$x:0000A7FB                 db 0FFh
.xdata$x:0000A7FC                 dd offset __unwindfunclet$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:0000A800 __ehfuncinfo$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000A800                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:0000A801                 db    5
.xdata$x:0000A802                 db  93h ; ô
.xdata$x:0000A803                 db  19h
.xdata$x:0000A804                 db    1
.xdata$x:0000A805                 db    0
.xdata$x:0000A806                 db    0
.xdata$x:0000A807                 db    0
.xdata$x:0000A808                 dd offset __unwindtable$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
.xdata$x:0000A80C                 align 20h
.xdata$x:0000A820                 db    1
.xdata$x:0000A821                 db    0
.xdata$x:0000A822                 db    0
.xdata$x:0000A823                 db    0
.xdata$x:0000A823 _xdata$x        ends
.xdata$x:0000A823
.text:0000A824 ; ===========================================================================
.text:0000A824
.text:0000A824 ; Segment type: Pure code
.text:0000A824 ; Segment permissions: Read/Execute
.text:0000A824 _text           segment para public 'CODE' use32
.text:0000A824                 assume cs:_text
.text:0000A824                 ;org 0A824h
.text:0000A824 ; COMDAT (pick any)
.text:0000A824                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A824
.text:0000A824 ; =============== S U B R O U T I N E =======================================
.text:0000A824
.text:0000A824 ; Attributes: bp-based frame
.text:0000A824
.text:0000A824 ; public: __thiscall CObjectVector<class NArchive::NZip::CItemOut>::CObjectVector<class NArchive::NZip::CItemOut>(void)
.text:0000A824                 public ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
.text:0000A824 ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A824                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+584p
.text:0000A824                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+D2p
.text:0000A824
.text:0000A824 var_4           = dword ptr -4
.text:0000A824
.text:0000A824                 push    ebp
.text:0000A825                 mov     ebp, esp
.text:0000A827                 push    ecx
.text:0000A828                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A82F                 mov     [ebp+var_4], ecx
.text:0000A832                 mov     ecx, [ebp+var_4]
.text:0000A835                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000A83A                 mov     eax, [ebp+var_4]
.text:0000A83D                 add     esp, 4
.text:0000A840                 cmp     ebp, esp
.text:0000A842                 call    __RTC_CheckEsp
.text:0000A847                 mov     esp, ebp
.text:0000A849                 pop     ebp
.text:0000A84A                 retn
.text:0000A84A ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ endp
.text:0000A84A
.text:0000A84A ; ---------------------------------------------------------------------------
.text:0000A84B                 align 4
.text:0000A84B _text           ends
.text:0000A84B
.text:0000A84C ; ===========================================================================
.text:0000A84C
.text:0000A84C ; Segment type: Pure code
.text:0000A84C ; Segment permissions: Read/Execute
.text:0000A84C _text           segment para public 'CODE' use32
.text:0000A84C                 assume cs:_text
.text:0000A84C                 ;org 0A84Ch
.text:0000A84C ; COMDAT (pick any)
.text:0000A84C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A84C
.text:0000A84C ; =============== S U B R O U T I N E =======================================
.text:0000A84C
.text:0000A84C ; Attributes: bp-based frame
.text:0000A84C
.text:0000A84C ; int __stdcall CObjectVector<NArchive::NZip::CItemOut>::Add(struct NArchive::NZip::CItemOut *)
.text:0000A84C                 public ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
.text:0000A84C ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z proc near
.text:0000A84C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+201Dp
.text:0000A84C                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+8F8p
.text:0000A84C
.text:0000A84C var_1C          = dword ptr -1Ch
.text:0000A84C var_18          = dword ptr -18h
.text:0000A84C var_14          = dword ptr -14h
.text:0000A84C var_10          = dword ptr -10h
.text:0000A84C var_C           = dword ptr -0Ch
.text:0000A84C var_4           = dword ptr -4
.text:0000A84C arg_0           = dword ptr  8
.text:0000A84C
.text:0000A84C                 push    ebp
.text:0000A84D                 mov     ebp, esp
.text:0000A84F                 push    0FFFFFFFFh
.text:0000A851                 push    offset __ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
.text:0000A856                 mov     eax, large fs:0
.text:0000A85C                 push    eax
.text:0000A85D                 sub     esp, 10h
.text:0000A860                 mov     eax, 0CCCCCCCCh
.text:0000A865                 mov     [ebp+var_1C], eax
.text:0000A868                 mov     [ebp+var_18], eax
.text:0000A86B                 mov     [ebp+var_14], eax
.text:0000A86E                 mov     [ebp+var_10], eax
.text:0000A871                 mov     eax, dword ptr ds:___security_cookie
.text:0000A876                 xor     eax, ebp
.text:0000A878                 push    eax
.text:0000A879                 lea     eax, [ebp+var_C]
.text:0000A87C                 mov     large fs:0, eax
.text:0000A882                 mov     [ebp+var_10], ecx
.text:0000A885                 push    80h ; 'Ç'       ; unsigned int
.text:0000A88A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A88F                 add     esp, 4
.text:0000A892                 mov     [ebp+var_18], eax
.text:0000A895                 mov     [ebp+var_4], 0
.text:0000A89C                 cmp     [ebp+var_18], 0
.text:0000A8A0                 jz      short loc_A8B3
.text:0000A8A2                 mov     eax, [ebp+arg_0]
.text:0000A8A5                 push    eax             ; struct NArchive::NZip::CItemOut *
.text:0000A8A6                 mov     ecx, [ebp+var_18] ; this
.text:0000A8A9                 call    ??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItemOut::CItemOut(NArchive::NZip::CItemOut const &)
.text:0000A8AE                 mov     [ebp+var_1C], eax
.text:0000A8B1                 jmp     short loc_A8BA
.text:0000A8B3 ; ---------------------------------------------------------------------------
.text:0000A8B3
.text:0000A8B3 loc_A8B3:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)+54j
.text:0000A8B3                 mov     [ebp+var_1C], 0
.text:0000A8BA
.text:0000A8BA loc_A8BA:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)+65j
.text:0000A8BA                 mov     ecx, [ebp+var_1C]
.text:0000A8BD                 mov     [ebp+var_14], ecx
.text:0000A8C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A8C7                 mov     edx, [ebp+var_14]
.text:0000A8CA                 push    edx
.text:0000A8CB                 mov     ecx, [ebp+var_10]
.text:0000A8CE                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000A8D3                 mov     ecx, [ebp+var_C]
.text:0000A8D6                 mov     large fs:0, ecx
.text:0000A8DD                 pop     ecx
.text:0000A8DE                 add     esp, 1Ch
.text:0000A8E1                 cmp     ebp, esp
.text:0000A8E3                 call    __RTC_CheckEsp
.text:0000A8E8                 mov     esp, ebp
.text:0000A8EA                 pop     ebp
.text:0000A8EB                 retn    4
.text:0000A8EB ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z endp
.text:0000A8EB
.text:0000A8EB ; ---------------------------------------------------------------------------
.text:0000A8EE                 align 10h
.text:0000A8EE _text           ends
.text:0000A8EE
.text$x:0000A8F0 ; ===========================================================================
.text$x:0000A8F0
.text$x:0000A8F0 ; Segment type: Pure code
.text$x:0000A8F0 ; Segment permissions: Read/Execute
.text$x:0000A8F0 _text$x         segment para public 'CODE' use32
.text$x:0000A8F0                 assume cs:_text$x
.text$x:0000A8F0                 ;org 0A8F0h
.text$x:0000A8F0 ; COMDAT (pick associative to section at A84C)
.text$x:0000A8F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000A8F0
.text$x:0000A8F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A8F0
.text$x:0000A8F0
.text$x:0000A8F0 __unwindfunclet$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z$0 proc near
.text$x:0000A8F0                                         ; DATA XREF: .xdata$x:0000A91Co
.text$x:0000A8F0                 mov     eax, [ebp-18h]
.text$x:0000A8F3                 push    eax             ; void *
.text$x:0000A8F4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000A8F9                 pop     ecx
.text$x:0000A8FA                 retn
.text$x:0000A8FA __unwindfunclet$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z$0 endp
.text$x:0000A8FA
.text$x:0000A8FB
.text$x:0000A8FB ; =============== S U B R O U T I N E =======================================
.text$x:0000A8FB
.text$x:0000A8FB
.text$x:0000A8FB __ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z proc near
.text$x:0000A8FB                                         ; DATA XREF: CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)+5o
.text$x:0000A8FB
.text$x:0000A8FB arg_4           = dword ptr  8
.text$x:0000A8FB
.text$x:0000A8FB                 mov     edx, [esp+arg_4]
.text$x:0000A8FF                 lea     eax, [edx+0Ch]
.text$x:0000A902                 mov     ecx, [edx-14h]
.text$x:0000A905                 xor     ecx, eax
.text$x:0000A907                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A90C                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
.text$x:0000A911                 jmp     ___CxxFrameHandler3
.text$x:0000A911 __ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z endp
.text$x:0000A911
.text$x:0000A911 ; ---------------------------------------------------------------------------
.text$x:0000A916                 align 4
.text$x:0000A916 _text$x         ends
.text$x:0000A916
.xdata$x:0000A918 ; ===========================================================================
.xdata$x:0000A918
.xdata$x:0000A918 ; Segment type: Pure data
.xdata$x:0000A918 ; Segment permissions: Read
.xdata$x:0000A918 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A918                 assume cs:_xdata$x
.xdata$x:0000A918                 ;org 0A918h
.xdata$x:0000A918 ; COMDAT (pick associative to section at A84C)
.xdata$x:0000A918 __unwindtable$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z db 0FFh
.xdata$x:0000A918                                         ; DATA XREF: .xdata$x:0000A928o
.xdata$x:0000A919                 db 0FFh
.xdata$x:0000A91A                 db 0FFh
.xdata$x:0000A91B                 db 0FFh
.xdata$x:0000A91C                 dd offset __unwindfunclet$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z$0
.xdata$x:0000A920 __ehfuncinfo$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000A920                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z+11o
.xdata$x:0000A921                 db    5
.xdata$x:0000A922                 db  93h ; ô
.xdata$x:0000A923                 db  19h
.xdata$x:0000A924                 db    1
.xdata$x:0000A925                 db    0
.xdata$x:0000A926                 db    0
.xdata$x:0000A927                 db    0
.xdata$x:0000A928                 dd offset __unwindtable$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
.xdata$x:0000A92C                 align 20h
.xdata$x:0000A940                 db    1
.xdata$x:0000A941                 db    0
.xdata$x:0000A942                 db    0
.xdata$x:0000A943                 db    0
.xdata$x:0000A943 _xdata$x        ends
.xdata$x:0000A943
.text:0000A944 ; ===========================================================================
.text:0000A944
.text:0000A944 ; Segment type: Pure code
.text:0000A944 ; Segment permissions: Read/Execute
.text:0000A944 _text           segment para public 'CODE' use32
.text:0000A944                 assume cs:_text
.text:0000A944                 ;org 0A944h
.text:0000A944 ; COMDAT (pick any)
.text:0000A944                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000A944
.text:0000A944 ; =============== S U B R O U T I N E =======================================
.text:0000A944
.text:0000A944 ; Attributes: bp-based frame
.text:0000A944
.text:0000A944 ; public: __thiscall CObjectVector<class NArchive::NZip::CItemOut>::~CObjectVector<class NArchive::NZip::CItemOut>(void)
.text:0000A944                 public ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
.text:0000A944 ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ proc near
.text:0000A944                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+73Ap
.text:0000A944                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+930p ...
.text:0000A944
.text:0000A944 var_20          = dword ptr -20h
.text:0000A944 var_1C          = dword ptr -1Ch
.text:0000A944 var_18          = dword ptr -18h
.text:0000A944 var_14          = dword ptr -14h
.text:0000A944 var_10          = dword ptr -10h
.text:0000A944 var_C           = dword ptr -0Ch
.text:0000A944 var_4           = dword ptr -4
.text:0000A944
.text:0000A944                 push    ebp
.text:0000A945                 mov     ebp, esp
.text:0000A947                 push    0FFFFFFFFh
.text:0000A949                 push    offset __ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
.text:0000A94E                 mov     eax, large fs:0
.text:0000A954                 push    eax
.text:0000A955                 sub     esp, 14h
.text:0000A958                 mov     eax, 0CCCCCCCCh
.text:0000A95D                 mov     [ebp+var_20], eax
.text:0000A960                 mov     [ebp+var_1C], eax
.text:0000A963                 mov     [ebp+var_18], eax
.text:0000A966                 mov     [ebp+var_14], eax
.text:0000A969                 mov     [ebp+var_10], eax
.text:0000A96C                 mov     eax, dword ptr ds:___security_cookie
.text:0000A971                 xor     eax, ebp
.text:0000A973                 push    eax
.text:0000A974                 lea     eax, [ebp+var_C]
.text:0000A977                 mov     large fs:0, eax
.text:0000A97D                 mov     [ebp+var_10], ecx
.text:0000A980                 mov     [ebp+var_4], 0
.text:0000A987                 mov     ecx, [ebp+var_10]
.text:0000A98A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A98F                 mov     [ebp+var_14], eax
.text:0000A992
.text:0000A992 loc_A992:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void):loc_A9D4j
.text:0000A992                 cmp     [ebp+var_14], 0
.text:0000A996                 jz      short loc_A9D6
.text:0000A998                 mov     eax, [ebp+var_14]
.text:0000A99B                 sub     eax, 1
.text:0000A99E                 mov     [ebp+var_14], eax
.text:0000A9A1                 mov     ecx, [ebp+var_14]
.text:0000A9A4                 push    ecx
.text:0000A9A5                 mov     ecx, [ebp+var_10]
.text:0000A9A8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A9AD                 mov     edx, [eax]
.text:0000A9AF                 mov     [ebp+var_1C], edx
.text:0000A9B2                 mov     eax, [ebp+var_1C]
.text:0000A9B5                 mov     [ebp+var_18], eax
.text:0000A9B8                 cmp     [ebp+var_18], 0
.text:0000A9BC                 jz      short loc_A9CD
.text:0000A9BE                 push    1
.text:0000A9C0                 mov     ecx, [ebp+var_18]
.text:0000A9C3                 call    ??_GCItemOut@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CItemOut::`scalar deleting destructor'(uint)
.text:0000A9C8                 mov     [ebp+var_20], eax
.text:0000A9CB                 jmp     short loc_A9D4
.text:0000A9CD ; ---------------------------------------------------------------------------
.text:0000A9CD
.text:0000A9CD loc_A9CD:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)+78j
.text:0000A9CD                 mov     [ebp+var_20], 0
.text:0000A9D4
.text:0000A9D4 loc_A9D4:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)+87j
.text:0000A9D4                 jmp     short loc_A992
.text:0000A9D6 ; ---------------------------------------------------------------------------
.text:0000A9D6
.text:0000A9D6 loc_A9D6:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)+52j
.text:0000A9D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A9DD                 mov     ecx, [ebp+var_10]
.text:0000A9E0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A9E5                 mov     ecx, [ebp+var_C]
.text:0000A9E8                 mov     large fs:0, ecx
.text:0000A9EF                 pop     ecx
.text:0000A9F0                 add     esp, 20h
.text:0000A9F3                 cmp     ebp, esp
.text:0000A9F5                 call    __RTC_CheckEsp
.text:0000A9FA                 mov     esp, ebp
.text:0000A9FC                 pop     ebp
.text:0000A9FD                 retn
.text:0000A9FD ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ endp
.text:0000A9FD
.text:0000A9FD ; ---------------------------------------------------------------------------
.text:0000A9FE                 align 10h
.text:0000A9FE _text           ends
.text:0000A9FE
.text$x:0000AA00 ; ===========================================================================
.text$x:0000AA00
.text$x:0000AA00 ; Segment type: Pure code
.text$x:0000AA00 ; Segment permissions: Read/Execute
.text$x:0000AA00 _text$x         segment para public 'CODE' use32
.text$x:0000AA00                 assume cs:_text$x
.text$x:0000AA00                 ;org 0AA00h
.text$x:0000AA00 ; COMDAT (pick associative to section at A944)
.text$x:0000AA00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000AA00
.text$x:0000AA00 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA00
.text$x:0000AA00
.text$x:0000AA00 __unwindfunclet$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000AA00                                         ; DATA XREF: .xdata$x:0000AA28o
.text$x:0000AA00                 mov     ecx, [ebp-10h]
.text$x:0000AA03                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000AA03 __unwindfunclet$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:0000AA03
.text$x:0000AA08
.text$x:0000AA08 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA08
.text$x:0000AA08
.text$x:0000AA08 __ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ proc near
.text$x:0000AA08                                         ; DATA XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)+5o
.text$x:0000AA08
.text$x:0000AA08 arg_4           = dword ptr  8
.text$x:0000AA08
.text$x:0000AA08                 mov     edx, [esp+arg_4]
.text$x:0000AA0C                 lea     eax, [edx+0Ch]
.text$x:0000AA0F                 mov     ecx, [edx-18h]
.text$x:0000AA12                 xor     ecx, eax
.text$x:0000AA14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AA19                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
.text$x:0000AA1E                 jmp     ___CxxFrameHandler3
.text$x:0000AA1E __ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000AA1E
.text$x:0000AA1E ; ---------------------------------------------------------------------------
.text$x:0000AA23                 align 4
.text$x:0000AA23 _text$x         ends
.text$x:0000AA23
.xdata$x:0000AA24 ; ===========================================================================
.xdata$x:0000AA24
.xdata$x:0000AA24 ; Segment type: Pure data
.xdata$x:0000AA24 ; Segment permissions: Read
.xdata$x:0000AA24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000AA24                 assume cs:_xdata$x
.xdata$x:0000AA24                 ;org 0AA24h
.xdata$x:0000AA24 ; COMDAT (pick associative to section at A944)
.xdata$x:0000AA24 __unwindtable$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000AA24                                         ; DATA XREF: .xdata$x:0000AA34o
.xdata$x:0000AA25                 db 0FFh
.xdata$x:0000AA26                 db 0FFh
.xdata$x:0000AA27                 db 0FFh
.xdata$x:0000AA28                 dd offset __unwindfunclet$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:0000AA2C __ehfuncinfo$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000AA2C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:0000AA2D                 db    5
.xdata$x:0000AA2E                 db  93h ; ô
.xdata$x:0000AA2F                 db  19h
.xdata$x:0000AA30                 db    1
.xdata$x:0000AA31                 db    0
.xdata$x:0000AA32                 db    0
.xdata$x:0000AA33                 db    0
.xdata$x:0000AA34                 dd offset __unwindtable$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
.xdata$x:0000AA38                 db    0
.xdata$x:0000AA39                 db    0
.xdata$x:0000AA3A                 db    0
.xdata$x:0000AA3B                 db    0
.xdata$x:0000AA3C                 db    0
.xdata$x:0000AA3D                 db    0
.xdata$x:0000AA3E                 db    0
.xdata$x:0000AA3F                 db    0
.xdata$x:0000AA40                 db    0
.xdata$x:0000AA41                 db    0
.xdata$x:0000AA42                 db    0
.xdata$x:0000AA43                 db    0
.xdata$x:0000AA44                 db    0
.xdata$x:0000AA45                 db    0
.xdata$x:0000AA46                 db    0
.xdata$x:0000AA47                 db    0
.xdata$x:0000AA48                 db    0
.xdata$x:0000AA49                 db    0
.xdata$x:0000AA4A                 db    0
.xdata$x:0000AA4B                 db    0
.xdata$x:0000AA4C                 db    1
.xdata$x:0000AA4D                 db    0
.xdata$x:0000AA4E                 db    0
.xdata$x:0000AA4F                 db    0
.xdata$x:0000AA4F _xdata$x        ends
.xdata$x:0000AA4F
.text:0000AA50 ; ===========================================================================
.text:0000AA50
.text:0000AA50 ; Segment type: Pure code
.text:0000AA50 ; Segment permissions: Read/Execute
.text:0000AA50 _text           segment para public 'CODE' use32
.text:0000AA50                 assume cs:_text
.text:0000AA50                 ;org 0AA50h
.text:0000AA50 ; COMDAT (pick any)
.text:0000AA50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AA50
.text:0000AA50 ; =============== S U B R O U T I N E =======================================
.text:0000AA50
.text:0000AA50 ; Attributes: bp-based frame
.text:0000AA50
.text:0000AA50 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CUpdateItem>::Size(void)const
.text:0000AA50                 public ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ
.text:0000AA50 ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ proc near
.text:0000AA50                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+B1p
.text:0000AA50                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+78Cp ...
.text:0000AA50
.text:0000AA50 var_4           = dword ptr -4
.text:0000AA50
.text:0000AA50                 push    ebp
.text:0000AA51                 mov     ebp, esp
.text:0000AA53                 push    ecx
.text:0000AA54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AA5B                 mov     [ebp+var_4], ecx
.text:0000AA5E                 mov     ecx, [ebp+var_4]
.text:0000AA61                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000AA66                 add     esp, 4
.text:0000AA69                 cmp     ebp, esp
.text:0000AA6B                 call    __RTC_CheckEsp
.text:0000AA70                 mov     esp, ebp
.text:0000AA72                 pop     ebp
.text:0000AA73                 retn
.text:0000AA73 ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ endp
.text:0000AA73
.text:0000AA73 _text           ends
.text:0000AA73
.text:0000AA74 ; ===========================================================================
.text:0000AA74
.text:0000AA74 ; Segment type: Pure code
.text:0000AA74 ; Segment permissions: Read/Execute
.text:0000AA74 _text           segment para public 'CODE' use32
.text:0000AA74                 assume cs:_text
.text:0000AA74                 ;org 0AA74h
.text:0000AA74 ; COMDAT (pick any)
.text:0000AA74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AA74
.text:0000AA74 ; =============== S U B R O U T I N E =======================================
.text:0000AA74
.text:0000AA74 ; Attributes: bp-based frame
.text:0000AA74
.text:0000AA74 ; public: struct NArchive::NZip::CUpdateItem const & __thiscall CObjectVector<struct NArchive::NZip::CUpdateItem>::operator[](unsigned int)const
.text:0000AA74                 public ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z
.text:0000AA74 ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z proc near
.text:0000AA74                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+C6p
.text:0000AA74                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+CCDp ...
.text:0000AA74
.text:0000AA74 var_4           = dword ptr -4
.text:0000AA74 arg_0           = dword ptr  8
.text:0000AA74
.text:0000AA74                 push    ebp
.text:0000AA75                 mov     ebp, esp
.text:0000AA77                 push    ecx
.text:0000AA78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AA7F                 mov     [ebp+var_4], ecx
.text:0000AA82                 mov     eax, [ebp+arg_0]
.text:0000AA85                 push    eax
.text:0000AA86                 mov     ecx, [ebp+var_4]
.text:0000AA89                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000AA8E                 mov     eax, [eax]
.text:0000AA90                 add     esp, 4
.text:0000AA93                 cmp     ebp, esp
.text:0000AA95                 call    __RTC_CheckEsp
.text:0000AA9A                 mov     esp, ebp
.text:0000AA9C                 pop     ebp
.text:0000AA9D                 retn    4
.text:0000AA9D ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z endp
.text:0000AA9D
.text:0000AA9D _text           ends
.text:0000AA9D
.text:0000AAA0 ; ===========================================================================
.text:0000AAA0
.text:0000AAA0 ; Segment type: Pure code
.text:0000AAA0 ; Segment permissions: Read/Execute
.text:0000AAA0 _text           segment para public 'CODE' use32
.text:0000AAA0                 assume cs:_text
.text:0000AAA0                 ;org 0AAA0h
.text:0000AAA0 ; COMDAT (pick any)
.text:0000AAA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AAA0
.text:0000AAA0 ; =============== S U B R O U T I N E =======================================
.text:0000AAA0
.text:0000AAA0 ; Attributes: bp-based frame
.text:0000AAA0
.text:0000AAA0 ; public: class NArchive::NZip::CItemEx const & __thiscall CObjectVector<class NArchive::NZip::CItemEx>::operator[](unsigned int)const
.text:0000AAA0                 public ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z
.text:0000AAA0 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z proc near
.text:0000AAA0                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+123p
.text:0000AAA0                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D56p ...
.text:0000AAA0
.text:0000AAA0 var_4           = dword ptr -4
.text:0000AAA0 arg_0           = dword ptr  8
.text:0000AAA0
.text:0000AAA0                 push    ebp
.text:0000AAA1                 mov     ebp, esp
.text:0000AAA3                 push    ecx
.text:0000AAA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AAAB                 mov     [ebp+var_4], ecx
.text:0000AAAE                 mov     eax, [ebp+arg_0]
.text:0000AAB1                 push    eax
.text:0000AAB2                 mov     ecx, [ebp+var_4]
.text:0000AAB5                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000AABA                 mov     eax, [eax]
.text:0000AABC                 add     esp, 4
.text:0000AABF                 cmp     ebp, esp
.text:0000AAC1                 call    __RTC_CheckEsp
.text:0000AAC6                 mov     esp, ebp
.text:0000AAC8                 pop     ebp
.text:0000AAC9                 retn    4
.text:0000AAC9 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z endp
.text:0000AAC9
.text:0000AAC9 _text           ends
.text:0000AAC9
.text:0000AACC ; ===========================================================================
.text:0000AACC
.text:0000AACC ; Segment type: Pure code
.text:0000AACC ; Segment permissions: Read/Execute
.text:0000AACC _text           segment para public 'CODE' use32
.text:0000AACC                 assume cs:_text
.text:0000AACC                 ;org 0AACCh
.text:0000AACC ; COMDAT (pick any)
.text:0000AACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AACC
.text:0000AACC ; =============== S U B R O U T I N E =======================================
.text:0000AACC
.text:0000AACC ; Attributes: bp-based frame
.text:0000AACC
.text:0000AACC ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000AACC                 public ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000AACC ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000AACC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+42p
.text:0000AACC
.text:0000AACC var_4           = dword ptr -4
.text:0000AACC
.text:0000AACC                 push    ebp
.text:0000AACD                 mov     ebp, esp
.text:0000AACF                 push    ecx
.text:0000AAD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AAD7                 mov     [ebp+var_4], ecx
.text:0000AADA                 mov     eax, [ebp+var_4]
.text:0000AADD                 mov     dword ptr [eax], 0
.text:0000AAE3                 mov     eax, [ebp+var_4]
.text:0000AAE6                 mov     esp, ebp
.text:0000AAE8                 pop     ebp
.text:0000AAE9                 retn
.text:0000AAE9 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:0000AAE9
.text:0000AAE9 ; ---------------------------------------------------------------------------
.text:0000AAEA                 align 4
.text:0000AAEA _text           ends
.text:0000AAEA
.text:0000AAEC ; ===========================================================================
.text:0000AAEC
.text:0000AAEC ; Segment type: Pure code
.text:0000AAEC ; Segment permissions: Read/Execute
.text:0000AAEC _text           segment para public 'CODE' use32
.text:0000AAEC                 assume cs:_text
.text:0000AAEC                 ;org 0AAECh
.text:0000AAEC ; COMDAT (pick any)
.text:0000AAEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AAEC
.text:0000AAEC ; =============== S U B R O U T I N E =======================================
.text:0000AAEC
.text:0000AAEC ; Attributes: bp-based frame
.text:0000AAEC
.text:0000AAEC ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::~CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000AAEC                 public ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000AAEC ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000AAEC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+16Ep
.text:0000AAEC                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+56Ep ...
.text:0000AAEC
.text:0000AAEC var_4           = dword ptr -4
.text:0000AAEC
.text:0000AAEC                 push    ebp
.text:0000AAED                 mov     ebp, esp
.text:0000AAEF                 push    ecx
.text:0000AAF0                 push    esi
.text:0000AAF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AAF8                 mov     [ebp+var_4], ecx
.text:0000AAFB                 mov     eax, [ebp+var_4]
.text:0000AAFE                 cmp     dword ptr [eax], 0
.text:0000AB01                 jz      short loc_AB1E
.text:0000AB03                 mov     ecx, [ebp+var_4]
.text:0000AB06                 mov     edx, [ecx]
.text:0000AB08                 mov     eax, [ebp+var_4]
.text:0000AB0B                 mov     ecx, [eax]
.text:0000AB0D                 mov     edx, [edx]
.text:0000AB0F                 mov     esi, esp
.text:0000AB11                 push    ecx
.text:0000AB12                 mov     eax, [edx+8]
.text:0000AB15                 call    eax
.text:0000AB17                 cmp     esi, esp
.text:0000AB19                 call    __RTC_CheckEsp
.text:0000AB1E
.text:0000AB1E loc_AB1E:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)+15j
.text:0000AB1E                 pop     esi
.text:0000AB1F                 add     esp, 4
.text:0000AB22                 cmp     ebp, esp
.text:0000AB24                 call    __RTC_CheckEsp
.text:0000AB29                 mov     esp, ebp
.text:0000AB2B                 pop     ebp
.text:0000AB2C                 retn
.text:0000AB2C ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:0000AB2C
.text:0000AB2C ; ---------------------------------------------------------------------------
.text:0000AB2D                 align 10h
.text:0000AB2D _text           ends
.text:0000AB2D
.text:0000AB30 ; ===========================================================================
.text:0000AB30
.text:0000AB30 ; Segment type: Pure code
.text:0000AB30 ; Segment permissions: Read/Execute
.text:0000AB30 _text           segment para public 'CODE' use32
.text:0000AB30                 assume cs:_text
.text:0000AB30                 ;org 0AB30h
.text:0000AB30 ; COMDAT (pick any)
.text:0000AB30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AB30
.text:0000AB30 ; =============== S U B R O U T I N E =======================================
.text:0000AB30
.text:0000AB30 ; Attributes: bp-based frame
.text:0000AB30
.text:0000AB30 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator struct IArchiveUpdateCallbackFile *(void)const
.text:0000AB30                 public ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:0000AB30 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:0000AB30                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+516p
.text:0000AB30                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1EEFp
.text:0000AB30
.text:0000AB30 var_4           = dword ptr -4
.text:0000AB30
.text:0000AB30                 push    ebp
.text:0000AB31                 mov     ebp, esp
.text:0000AB33                 push    ecx
.text:0000AB34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AB3B                 mov     [ebp+var_4], ecx
.text:0000AB3E                 mov     eax, [ebp+var_4]
.text:0000AB41                 mov     eax, [eax]
.text:0000AB43                 mov     esp, ebp
.text:0000AB45                 pop     ebp
.text:0000AB46                 retn
.text:0000AB46 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000AB46
.text:0000AB46 ; ---------------------------------------------------------------------------
.text:0000AB47                 align 4
.text:0000AB47 _text           ends
.text:0000AB47
.text:0000AB48 ; ===========================================================================
.text:0000AB48
.text:0000AB48 ; Segment type: Pure code
.text:0000AB48 ; Segment permissions: Read/Execute
.text:0000AB48 _text           segment para public 'CODE' use32
.text:0000AB48                 assume cs:_text
.text:0000AB48                 ;org 0AB48h
.text:0000AB48 ; COMDAT (pick any)
.text:0000AB48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AB48
.text:0000AB48 ; =============== S U B R O U T I N E =======================================
.text:0000AB48
.text:0000AB48 ; Attributes: bp-based frame
.text:0000AB48
.text:0000AB48 ; public: struct IArchiveUpdateCallbackFile * * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator&(void)
.text:0000AB48                 public ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
.text:0000AB48 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:0000AB48                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+51p
.text:0000AB48
.text:0000AB48 var_4           = dword ptr -4
.text:0000AB48
.text:0000AB48                 push    ebp
.text:0000AB49                 mov     ebp, esp
.text:0000AB4B                 push    ecx
.text:0000AB4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AB53                 mov     [ebp+var_4], ecx
.text:0000AB56                 mov     eax, [ebp+var_4]
.text:0000AB59                 mov     esp, ebp
.text:0000AB5B                 pop     ebp
.text:0000AB5C                 retn
.text:0000AB5C ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000AB5C
.text:0000AB5C ; ---------------------------------------------------------------------------
.text:0000AB5D                 align 10h
.text:0000AB5D _text           ends
.text:0000AB5D
.text:0000AB60 ; ===========================================================================
.text:0000AB60
.text:0000AB60 ; Segment type: Pure code
.text:0000AB60 ; Segment permissions: Read/Execute
.text:0000AB60 _text           segment para public 'CODE' use32
.text:0000AB60                 assume cs:_text
.text:0000AB60                 ;org 0AB60h
.text:0000AB60 ; COMDAT (pick any)
.text:0000AB60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AB60
.text:0000AB60 ; =============== S U B R O U T I N E =======================================
.text:0000AB60
.text:0000AB60 ; Attributes: bp-based frame
.text:0000AB60
.text:0000AB60 ; public: __thiscall CRecordVector<int>::CRecordVector<int>(void)
.text:0000AB60                 public ??0?$CRecordVector@H@@QAE@XZ
.text:0000AB60 ??0?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+688p
.text:0000AB60
.text:0000AB60 var_4           = dword ptr -4
.text:0000AB60
.text:0000AB60                 push    ebp
.text:0000AB61                 mov     ebp, esp
.text:0000AB63                 push    ecx
.text:0000AB64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AB6B                 mov     [ebp+var_4], ecx
.text:0000AB6E                 mov     eax, [ebp+var_4]
.text:0000AB71                 mov     dword ptr [eax], 0
.text:0000AB77                 mov     ecx, [ebp+var_4]
.text:0000AB7A                 mov     dword ptr [ecx+4], 0
.text:0000AB81                 mov     edx, [ebp+var_4]
.text:0000AB84                 mov     dword ptr [edx+8], 0
.text:0000AB8B                 mov     eax, [ebp+var_4]
.text:0000AB8E                 mov     esp, ebp
.text:0000AB90                 pop     ebp
.text:0000AB91                 retn
.text:0000AB91 ??0?$CRecordVector@H@@QAE@XZ endp
.text:0000AB91
.text:0000AB91 ; ---------------------------------------------------------------------------
.text:0000AB92                 align 4
.text:0000AB92 _text           ends
.text:0000AB92
.text:0000AB94 ; ===========================================================================
.text:0000AB94
.text:0000AB94 ; Segment type: Pure code
.text:0000AB94 ; Segment permissions: Read/Execute
.text:0000AB94 _text           segment para public 'CODE' use32
.text:0000AB94                 assume cs:_text
.text:0000AB94                 ;org 0AB94h
.text:0000AB94 ; COMDAT (pick any)
.text:0000AB94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AB94
.text:0000AB94 ; =============== S U B R O U T I N E =======================================
.text:0000AB94
.text:0000AB94 ; Attributes: bp-based frame
.text:0000AB94
.text:0000AB94 ; public: unsigned int __thiscall CRecordVector<int>::Size(void)const
.text:0000AB94                 public ?Size@?$CRecordVector@H@@QBEIXZ
.text:0000AB94 ?Size@?$CRecordVector@H@@QBEIXZ proc near
.text:0000AB94                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+C83p
.text:0000AB94
.text:0000AB94 var_4           = dword ptr -4
.text:0000AB94
.text:0000AB94                 push    ebp
.text:0000AB95                 mov     ebp, esp
.text:0000AB97                 push    ecx
.text:0000AB98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AB9F                 mov     [ebp+var_4], ecx
.text:0000ABA2                 mov     eax, [ebp+var_4]
.text:0000ABA5                 mov     eax, [eax+4]
.text:0000ABA8                 mov     esp, ebp
.text:0000ABAA                 pop     ebp
.text:0000ABAB                 retn
.text:0000ABAB ?Size@?$CRecordVector@H@@QBEIXZ endp
.text:0000ABAB
.text:0000ABAB _text           ends
.text:0000ABAB
.text:0000ABAC ; ===========================================================================
.text:0000ABAC
.text:0000ABAC ; Segment type: Pure code
.text:0000ABAC ; Segment permissions: Read/Execute
.text:0000ABAC _text           segment para public 'CODE' use32
.text:0000ABAC                 assume cs:_text
.text:0000ABAC                 ;org 0ABACh
.text:0000ABAC ; COMDAT (pick any)
.text:0000ABAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000ABAC
.text:0000ABAC ; =============== S U B R O U T I N E =======================================
.text:0000ABAC
.text:0000ABAC ; Attributes: bp-based frame
.text:0000ABAC
.text:0000ABAC ; public: __thiscall CRecordVector<int>::~CRecordVector<int>(void)
.text:0000ABAC                 public ??1?$CRecordVector@H@@QAE@XZ
.text:0000ABAC ??1?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6D1p
.text:0000ABAC                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+8C7p ...
.text:0000ABAC
.text:0000ABAC var_8           = dword ptr -8
.text:0000ABAC var_4           = dword ptr -4
.text:0000ABAC
.text:0000ABAC                 push    ebp
.text:0000ABAD                 mov     ebp, esp
.text:0000ABAF                 sub     esp, 8
.text:0000ABB2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000ABB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ABC0                 mov     [ebp+var_4], ecx
.text:0000ABC3                 mov     eax, [ebp+var_4]
.text:0000ABC6                 mov     ecx, [eax]
.text:0000ABC8                 mov     [ebp+var_8], ecx
.text:0000ABCB                 mov     edx, [ebp+var_8]
.text:0000ABCE                 push    edx             ; void *
.text:0000ABCF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000ABD4                 add     esp, 4
.text:0000ABD7                 add     esp, 8
.text:0000ABDA                 cmp     ebp, esp
.text:0000ABDC                 call    __RTC_CheckEsp
.text:0000ABE1                 mov     esp, ebp
.text:0000ABE3                 pop     ebp
.text:0000ABE4                 retn
.text:0000ABE4 ??1?$CRecordVector@H@@QAE@XZ endp
.text:0000ABE4
.text:0000ABE4 ; ---------------------------------------------------------------------------
.text:0000ABE5                 align 4
.text:0000ABE5 _text           ends
.text:0000ABE5
.text:0000ABE8 ; ===========================================================================
.text:0000ABE8
.text:0000ABE8 ; Segment type: Pure code
.text:0000ABE8 ; Segment permissions: Read/Execute
.text:0000ABE8 _text           segment para public 'CODE' use32
.text:0000ABE8                 assume cs:_text
.text:0000ABE8                 ;org 0ABE8h
.text:0000ABE8 ; COMDAT (pick any)
.text:0000ABE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000ABE8
.text:0000ABE8 ; =============== S U B R O U T I N E =======================================
.text:0000ABE8
.text:0000ABE8 ; Attributes: bp-based frame
.text:0000ABE8
.text:0000ABE8 ; public: void __thiscall CRecordVector<int>::Delete(unsigned int)
.text:0000ABE8                 public ?Delete@?$CRecordVector@H@@QAEXI@Z
.text:0000ABE8 ?Delete@?$CRecordVector@H@@QAEXI@Z proc near
.text:0000ABE8                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1CC3p
.text:0000ABE8
.text:0000ABE8 var_4           = dword ptr -4
.text:0000ABE8 arg_0           = dword ptr  8
.text:0000ABE8
.text:0000ABE8                 push    ebp
.text:0000ABE9                 mov     ebp, esp
.text:0000ABEB                 push    ecx
.text:0000ABEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ABF3                 mov     [ebp+var_4], ecx
.text:0000ABF6                 mov     eax, [ebp+arg_0]
.text:0000ABF9                 add     eax, 1
.text:0000ABFC                 push    eax
.text:0000ABFD                 mov     ecx, [ebp+arg_0]
.text:0000AC00                 push    ecx
.text:0000AC01                 mov     ecx, [ebp+var_4]
.text:0000AC04                 call    ?MoveItems@?$CRecordVector@H@@AAEXII@Z ; CRecordVector<int>::MoveItems(uint,uint)
.text:0000AC09                 mov     edx, [ebp+var_4]
.text:0000AC0C                 mov     eax, [edx+4]
.text:0000AC0F                 sub     eax, 1
.text:0000AC12                 mov     ecx, [ebp+var_4]
.text:0000AC15                 mov     [ecx+4], eax
.text:0000AC18                 add     esp, 4
.text:0000AC1B                 cmp     ebp, esp
.text:0000AC1D                 call    __RTC_CheckEsp
.text:0000AC22                 mov     esp, ebp
.text:0000AC24                 pop     ebp
.text:0000AC25                 retn    4
.text:0000AC25 ?Delete@?$CRecordVector@H@@QAEXI@Z endp
.text:0000AC25
.text:0000AC25 _text           ends
.text:0000AC25
.text:0000AC28 ; ===========================================================================
.text:0000AC28
.text:0000AC28 ; Segment type: Pure code
.text:0000AC28 ; Segment permissions: Read/Execute
.text:0000AC28 _text           segment para public 'CODE' use32
.text:0000AC28                 assume cs:_text
.text:0000AC28                 ;org 0AC28h
.text:0000AC28 ; COMDAT (pick any)
.text:0000AC28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AC28
.text:0000AC28 ; =============== S U B R O U T I N E =======================================
.text:0000AC28
.text:0000AC28 ; Attributes: bp-based frame
.text:0000AC28
.text:0000AC28 ; public: unsigned int __thiscall CRecordVector<int>::Add(int)
.text:0000AC28                 public ?Add@?$CRecordVector@H@@QAEIH@Z
.text:0000AC28 ?Add@?$CRecordVector@H@@QAEIH@Z proc near
.text:0000AC28                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1503p
.text:0000AC28
.text:0000AC28 var_8           = dword ptr -8
.text:0000AC28 var_4           = dword ptr -4
.text:0000AC28 arg_0           = dword ptr  8
.text:0000AC28
.text:0000AC28                 push    ebp
.text:0000AC29                 mov     ebp, esp
.text:0000AC2B                 sub     esp, 8
.text:0000AC2E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000AC35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AC3C                 mov     [ebp+var_4], ecx
.text:0000AC3F                 mov     ecx, [ebp+var_4]
.text:0000AC42                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:0000AC47                 mov     eax, [ebp+var_4]
.text:0000AC4A                 mov     ecx, [eax+4]
.text:0000AC4D                 mov     edx, [ebp+var_4]
.text:0000AC50                 mov     eax, [edx]
.text:0000AC52                 mov     edx, [ebp+arg_0]
.text:0000AC55                 mov     [eax+ecx*4], edx
.text:0000AC58                 mov     eax, [ebp+var_4]
.text:0000AC5B                 mov     ecx, [eax+4]
.text:0000AC5E                 mov     [ebp+var_8], ecx
.text:0000AC61                 mov     edx, [ebp+var_4]
.text:0000AC64                 mov     eax, [edx+4]
.text:0000AC67                 add     eax, 1
.text:0000AC6A                 mov     ecx, [ebp+var_4]
.text:0000AC6D                 mov     [ecx+4], eax
.text:0000AC70                 mov     eax, [ebp+var_8]
.text:0000AC73                 add     esp, 8
.text:0000AC76                 cmp     ebp, esp
.text:0000AC78                 call    __RTC_CheckEsp
.text:0000AC7D                 mov     esp, ebp
.text:0000AC7F                 pop     ebp
.text:0000AC80                 retn    4
.text:0000AC80 ?Add@?$CRecordVector@H@@QAEIH@Z endp
.text:0000AC80
.text:0000AC80 ; ---------------------------------------------------------------------------
.text:0000AC83                 align 4
.text:0000AC83 _text           ends
.text:0000AC83
.text:0000AC84 ; ===========================================================================
.text:0000AC84
.text:0000AC84 ; Segment type: Pure code
.text:0000AC84 ; Segment permissions: Read/Execute
.text:0000AC84 _text           segment para public 'CODE' use32
.text:0000AC84                 assume cs:_text
.text:0000AC84                 ;org 0AC84h
.text:0000AC84 ; COMDAT (pick any)
.text:0000AC84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AC84
.text:0000AC84 ; =============== S U B R O U T I N E =======================================
.text:0000AC84
.text:0000AC84 ; Attributes: bp-based frame
.text:0000AC84
.text:0000AC84 ; public: int & __thiscall CRecordVector<int>::operator[](unsigned int)
.text:0000AC84                 public ??A?$CRecordVector@H@@QAEAAHI@Z
.text:0000AC84 ??A?$CRecordVector@H@@QAEAAHI@Z proc near
.text:0000AC84                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1B89p
.text:0000AC84
.text:0000AC84 var_4           = dword ptr -4
.text:0000AC84 arg_0           = dword ptr  8
.text:0000AC84
.text:0000AC84                 push    ebp
.text:0000AC85                 mov     ebp, esp
.text:0000AC87                 push    ecx
.text:0000AC88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AC8F                 mov     [ebp+var_4], ecx
.text:0000AC92                 mov     eax, [ebp+var_4]
.text:0000AC95                 mov     ecx, [eax]
.text:0000AC97                 mov     edx, [ebp+arg_0]
.text:0000AC9A                 lea     eax, [ecx+edx*4]
.text:0000AC9D                 mov     esp, ebp
.text:0000AC9F                 pop     ebp
.text:0000ACA0                 retn    4
.text:0000ACA0 ??A?$CRecordVector@H@@QAEAAHI@Z endp
.text:0000ACA0
.text:0000ACA0 ; ---------------------------------------------------------------------------
.text:0000ACA3                 align 4
.text:0000ACA3 _text           ends
.text:0000ACA3
.text:0000ACA4 ; ===========================================================================
.text:0000ACA4
.text:0000ACA4 ; Segment type: Pure code
.text:0000ACA4 ; Segment permissions: Read/Execute
.text:0000ACA4 _text           segment para public 'CODE' use32
.text:0000ACA4                 assume cs:_text
.text:0000ACA4                 ;org 0ACA4h
.text:0000ACA4 ; COMDAT (pick any)
.text:0000ACA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000ACA4
.text:0000ACA4 ; =============== S U B R O U T I N E =======================================
.text:0000ACA4
.text:0000ACA4 ; Attributes: bp-based frame
.text:0000ACA4
.text:0000ACA4 ; public: int & __thiscall CRecordVector<int>::Front(void)
.text:0000ACA4                 public ?Front@?$CRecordVector@H@@QAEAAHXZ
.text:0000ACA4 ?Front@?$CRecordVector@H@@QAEAAHXZ proc near
.text:0000ACA4                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+18ABp
.text:0000ACA4
.text:0000ACA4 var_4           = dword ptr -4
.text:0000ACA4
.text:0000ACA4                 push    ebp
.text:0000ACA5                 mov     ebp, esp
.text:0000ACA7                 push    ecx
.text:0000ACA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ACAF                 mov     [ebp+var_4], ecx
.text:0000ACB2                 mov     eax, [ebp+var_4]
.text:0000ACB5                 mov     eax, [eax]
.text:0000ACB7                 mov     esp, ebp
.text:0000ACB9                 pop     ebp
.text:0000ACBA                 retn
.text:0000ACBA ?Front@?$CRecordVector@H@@QAEAAHXZ endp
.text:0000ACBA
.text:0000ACBA ; ---------------------------------------------------------------------------
.text:0000ACBB                 align 4
.text:0000ACBB _text           ends
.text:0000ACBB
.text:0000ACBC ; ===========================================================================
.text:0000ACBC
.text:0000ACBC ; Segment type: Pure code
.text:0000ACBC ; Segment permissions: Read/Execute
.text:0000ACBC _text           segment para public 'CODE' use32
.text:0000ACBC                 assume cs:_text
.text:0000ACBC                 ;org 0ACBCh
.text:0000ACBC ; COMDAT (pick any)
.text:0000ACBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000ACBC
.text:0000ACBC ; =============== S U B R O U T I N E =======================================
.text:0000ACBC
.text:0000ACBC ; Attributes: bp-based frame
.text:0000ACBC
.text:0000ACBC ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:0000ACBC                 public ??0CProp@@QAE@ABU0@@Z
.text:0000ACBC ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+B2p
.text:0000ACBC                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:0000ACBC
.text:0000ACBC var_4           = dword ptr -4
.text:0000ACBC arg_0           = dword ptr  8
.text:0000ACBC
.text:0000ACBC                 push    ebp
.text:0000ACBD                 mov     ebp, esp
.text:0000ACBF                 push    ecx
.text:0000ACC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ACC7                 mov     [ebp+var_4], ecx
.text:0000ACCA                 mov     eax, [ebp+var_4]
.text:0000ACCD                 mov     ecx, [ebp+arg_0]
.text:0000ACD0                 mov     edx, [ecx]
.text:0000ACD2                 mov     [eax], edx
.text:0000ACD4                 mov     eax, [ebp+var_4]
.text:0000ACD7                 mov     ecx, [ebp+arg_0]
.text:0000ACDA                 mov     dl, [ecx+4]
.text:0000ACDD                 mov     [eax+4], dl
.text:0000ACE0                 mov     eax, [ebp+arg_0]
.text:0000ACE3                 add     eax, 8
.text:0000ACE6                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000ACE7                 mov     ecx, [ebp+var_4]
.text:0000ACEA                 add     ecx, 8          ; this
.text:0000ACED                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:0000ACF2                 mov     eax, [ebp+var_4]
.text:0000ACF5                 add     esp, 4
.text:0000ACF8                 cmp     ebp, esp
.text:0000ACFA                 call    __RTC_CheckEsp
.text:0000ACFF                 mov     esp, ebp
.text:0000AD01                 pop     ebp
.text:0000AD02                 retn    4
.text:0000AD02 ??0CProp@@QAE@ABU0@@Z endp
.text:0000AD02
.text:0000AD02 ; ---------------------------------------------------------------------------
.text:0000AD05                 align 4
.text:0000AD05 _text           ends
.text:0000AD05
.text:0000AD08 ; ===========================================================================
.text:0000AD08
.text:0000AD08 ; Segment type: Pure code
.text:0000AD08 ; Segment permissions: Read/Execute
.text:0000AD08 _text           segment para public 'CODE' use32
.text:0000AD08                 assume cs:_text
.text:0000AD08                 ;org 0AD08h
.text:0000AD08 ; COMDAT (pick any)
.text:0000AD08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AD08
.text:0000AD08 ; =============== S U B R O U T I N E =======================================
.text:0000AD08
.text:0000AD08 ; Attributes: bp-based frame
.text:0000AD08
.text:0000AD08 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:0000AD08                 public ??_GCProp@@QAEPAXI@Z
.text:0000AD08 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:0000AD08                                         ; CObjectVector<CProp>::Clear(void)+59p
.text:0000AD08
.text:0000AD08 var_4           = dword ptr -4
.text:0000AD08 arg_0           = dword ptr  8
.text:0000AD08
.text:0000AD08                 push    ebp
.text:0000AD09                 mov     ebp, esp
.text:0000AD0B                 push    ecx
.text:0000AD0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AD13                 mov     [ebp+var_4], ecx
.text:0000AD16                 mov     ecx, [ebp+var_4] ; this
.text:0000AD19                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000AD1E                 mov     eax, [ebp+arg_0]
.text:0000AD21                 and     eax, 1
.text:0000AD24                 jz      short loc_AD32
.text:0000AD26                 mov     ecx, [ebp+var_4]
.text:0000AD29                 push    ecx             ; void *
.text:0000AD2A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000AD2F                 add     esp, 4
.text:0000AD32
.text:0000AD32 loc_AD32:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:0000AD32                 mov     eax, [ebp+var_4]
.text:0000AD35                 add     esp, 4
.text:0000AD38                 cmp     ebp, esp
.text:0000AD3A                 call    __RTC_CheckEsp
.text:0000AD3F                 mov     esp, ebp
.text:0000AD41                 pop     ebp
.text:0000AD42                 retn    4
.text:0000AD42 ??_GCProp@@QAEPAXI@Z endp
.text:0000AD42
.text:0000AD42 ; ---------------------------------------------------------------------------
.text:0000AD45                 align 4
.text:0000AD45 _text           ends
.text:0000AD45
.text:0000AD48 ; ===========================================================================
.text:0000AD48
.text:0000AD48 ; Segment type: Pure code
.text:0000AD48 ; Segment permissions: Read/Execute
.text:0000AD48 _text           segment para public 'CODE' use32
.text:0000AD48                 assume cs:_text
.text:0000AD48                 ;org 0AD48h
.text:0000AD48 ; COMDAT (pick any)
.text:0000AD48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AD48
.text:0000AD48 ; =============== S U B R O U T I N E =======================================
.text:0000AD48
.text:0000AD48 ; Attributes: bp-based frame
.text:0000AD48
.text:0000AD48 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:0000AD48                 public ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:0000AD48 ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000AD48                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+A6p
.text:0000AD48                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+B2p ...
.text:0000AD48
.text:0000AD48 var_4           = dword ptr -4
.text:0000AD48 arg_0           = dword ptr  8
.text:0000AD48
.text:0000AD48                 push    ebp
.text:0000AD49                 mov     ebp, esp
.text:0000AD4B                 push    ecx
.text:0000AD4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AD53                 mov     [ebp+var_4], ecx
.text:0000AD56                 mov     eax, [ebp+var_4]
.text:0000AD59                 mov     ecx, [ebp+arg_0]
.text:0000AD5C                 mov     dx, [ecx]
.text:0000AD5F                 mov     [eax], dx
.text:0000AD62                 mov     eax, [ebp+arg_0]
.text:0000AD65                 add     eax, 4
.text:0000AD68                 push    eax
.text:0000AD69                 mov     ecx, [ebp+var_4]
.text:0000AD6C                 add     ecx, 4
.text:0000AD6F                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:0000AD74                 mov     eax, [ebp+var_4]
.text:0000AD77                 add     esp, 4
.text:0000AD7A                 cmp     ebp, esp
.text:0000AD7C                 call    __RTC_CheckEsp
.text:0000AD81                 mov     esp, ebp
.text:0000AD83                 pop     ebp
.text:0000AD84                 retn    4
.text:0000AD84 ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000AD84
.text:0000AD84 ; ---------------------------------------------------------------------------
.text:0000AD87                 align 4
.text:0000AD87 _text           ends
.text:0000AD87
.text:0000AD88 ; ===========================================================================
.text:0000AD88
.text:0000AD88 ; Segment type: Pure code
.text:0000AD88 ; Segment permissions: Read/Execute
.text:0000AD88 _text           segment para public 'CODE' use32
.text:0000AD88                 assume cs:_text
.text:0000AD88                 ;org 0AD88h
.text:0000AD88 ; COMDAT (pick any)
.text:0000AD88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AD88
.text:0000AD88 ; =============== S U B R O U T I N E =======================================
.text:0000AD88
.text:0000AD88 ; Attributes: bp-based frame
.text:0000AD88
.text:0000AD88 ; public: void * __thiscall NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(unsigned int)
.text:0000AD88                 public ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
.text:0000AD88 ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000AD88                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+7Fp
.text:0000AD88                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+59p ...
.text:0000AD88
.text:0000AD88 var_4           = dword ptr -4
.text:0000AD88 arg_0           = dword ptr  8
.text:0000AD88
.text:0000AD88                 push    ebp
.text:0000AD89                 mov     ebp, esp
.text:0000AD8B                 push    ecx
.text:0000AD8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AD93                 mov     [ebp+var_4], ecx
.text:0000AD96                 mov     ecx, [ebp+var_4] ; this
.text:0000AD99                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:0000AD9E                 mov     eax, [ebp+arg_0]
.text:0000ADA1                 and     eax, 1
.text:0000ADA4                 jz      short loc_ADB2
.text:0000ADA6                 mov     ecx, [ebp+var_4]
.text:0000ADA9                 push    ecx             ; void *
.text:0000ADAA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000ADAF                 add     esp, 4
.text:0000ADB2
.text:0000ADB2 loc_ADB2:                               ; CODE XREF: NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)+1Cj
.text:0000ADB2                 mov     eax, [ebp+var_4]
.text:0000ADB5                 add     esp, 4
.text:0000ADB8                 cmp     ebp, esp
.text:0000ADBA                 call    __RTC_CheckEsp
.text:0000ADBF                 mov     esp, ebp
.text:0000ADC1                 pop     ebp
.text:0000ADC2                 retn    4
.text:0000ADC2 ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z endp
.text:0000ADC2
.text:0000ADC2 ; ---------------------------------------------------------------------------
.text:0000ADC5                 align 4
.text:0000ADC5 _text           ends
.text:0000ADC5
.text:0000ADC8 ; ===========================================================================
.text:0000ADC8
.text:0000ADC8 ; Segment type: Pure code
.text:0000ADC8 ; Segment permissions: Read/Execute
.text:0000ADC8 _text           segment para public 'CODE' use32
.text:0000ADC8                 assume cs:_text
.text:0000ADC8                 ;org 0ADC8h
.text:0000ADC8 ; COMDAT (pick any)
.text:0000ADC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000ADC8
.text:0000ADC8 ; =============== S U B R O U T I N E =======================================
.text:0000ADC8
.text:0000ADC8 ; Attributes: bp-based frame
.text:0000ADC8
.text:0000ADC8 ; _DWORD __thiscall NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo *this, const struct NArchive::NZip::CThreadInfo *)
.text:0000ADC8                 public ??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
.text:0000ADC8 ??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000ADC8                                         ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::Add(NArchive::NZip::CThreadInfo const &)+5Dp
.text:0000ADC8
.text:0000ADC8 var_10          = dword ptr -10h
.text:0000ADC8 var_C           = dword ptr -0Ch
.text:0000ADC8 var_4           = dword ptr -4
.text:0000ADC8 arg_0           = dword ptr  8
.text:0000ADC8
.text:0000ADC8                 push    ebp
.text:0000ADC9                 mov     ebp, esp
.text:0000ADCB                 push    0FFFFFFFFh
.text:0000ADCD                 push    offset __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
.text:0000ADD2                 mov     eax, large fs:0
.text:0000ADD8                 push    eax
.text:0000ADD9                 push    ecx
.text:0000ADDA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000ADE1                 mov     eax, dword ptr ds:___security_cookie
.text:0000ADE6                 xor     eax, ebp
.text:0000ADE8                 push    eax
.text:0000ADE9                 lea     eax, [ebp+var_C]
.text:0000ADEC                 mov     large fs:0, eax
.text:0000ADF2                 mov     [ebp+var_10], ecx
.text:0000ADF5                 mov     eax, [ebp+arg_0]
.text:0000ADF8                 mov     ecx, [eax]
.text:0000ADFA                 mov     edx, [ebp+var_10]
.text:0000ADFD                 mov     [edx], ecx
.text:0000ADFF                 mov     [ebp+var_4], 0
.text:0000AE06                 mov     eax, [ebp+arg_0]
.text:0000AE09                 mov     ecx, [eax+4]
.text:0000AE0C                 mov     edx, [ebp+var_10]
.text:0000AE0F                 mov     [edx+4], ecx
.text:0000AE12                 mov     byte ptr [ebp+var_4], 1
.text:0000AE16                 mov     eax, [ebp+arg_0]
.text:0000AE19                 mov     ecx, [eax+8]
.text:0000AE1C                 mov     edx, [ebp+var_10]
.text:0000AE1F                 mov     [edx+8], ecx
.text:0000AE22                 mov     byte ptr [ebp+var_4], 2
.text:0000AE26                 mov     eax, [ebp+var_10]
.text:0000AE29                 mov     ecx, [ebp+arg_0]
.text:0000AE2C                 mov     dl, [ecx+0Ch]
.text:0000AE2F                 mov     [eax+0Ch], dl
.text:0000AE32                 mov     eax, [ebp+var_10]
.text:0000AE35                 mov     ecx, [ebp+arg_0]
.text:0000AE38                 mov     edx, [ecx+10h]
.text:0000AE3B                 mov     [eax+10h], edx
.text:0000AE3E                 mov     eax, [ebp+arg_0]
.text:0000AE41                 add     eax, 14h
.text:0000AE44                 push    eax
.text:0000AE45                 mov     ecx, [ebp+var_10]
.text:0000AE48                 add     ecx, 14h
.text:0000AE4B                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(CMyComPtr<ICompressProgressInfo> const &)
.text:0000AE50                 mov     byte ptr [ebp+var_4], 3
.text:0000AE54                 mov     ecx, [ebp+var_10]
.text:0000AE57                 mov     edx, [ebp+arg_0]
.text:0000AE5A                 mov     eax, [edx+18h]
.text:0000AE5D                 mov     [ecx+18h], eax
.text:0000AE60                 mov     ecx, [ebp+arg_0]
.text:0000AE63                 add     ecx, 1Ch
.text:0000AE66                 push    ecx
.text:0000AE67                 mov     ecx, [ebp+var_10]
.text:0000AE6A                 add     ecx, 1Ch
.text:0000AE6D                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(CMyComPtr<IOutStream> const &)
.text:0000AE72                 mov     byte ptr [ebp+var_4], 4
.text:0000AE76                 mov     edx, [ebp+arg_0]
.text:0000AE79                 add     edx, 20h ; ' '
.text:0000AE7C                 push    edx
.text:0000AE7D                 mov     ecx, [ebp+var_10]
.text:0000AE80                 add     ecx, 20h ; ' '
.text:0000AE83                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(CMyComPtr<ISequentialInStream> const &)
.text:0000AE88                 mov     byte ptr [ebp+var_4], 5
.text:0000AE8C                 mov     eax, [ebp+arg_0]
.text:0000AE8F                 add     eax, 28h ; '('
.text:0000AE92                 push    eax             ; struct NArchive::NZip::CAddCommon *
.text:0000AE93                 mov     ecx, [ebp+var_10]
.text:0000AE96                 add     ecx, 28h ; '('  ; this
.text:0000AE99                 call    ??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon const &)
.text:0000AE9E                 mov     ecx, [ebp+var_10]
.text:0000AEA1                 mov     edx, [ebp+arg_0]
.text:0000AEA4                 mov     eax, [edx+98h]
.text:0000AEAA                 mov     [ecx+98h], eax
.text:0000AEB0                 mov     ecx, [ebp+arg_0]
.text:0000AEB3                 add     ecx, 0A0h ; 'á'
.text:0000AEB9                 mov     edx, [ebp+var_10]
.text:0000AEBC                 add     edx, 0A0h ; 'á'
.text:0000AEC2                 mov     eax, [ecx]
.text:0000AEC4                 mov     [edx], eax
.text:0000AEC6                 mov     eax, [ecx+4]
.text:0000AEC9                 mov     [edx+4], eax
.text:0000AECC                 mov     eax, [ecx+8]
.text:0000AECF                 mov     [edx+8], eax
.text:0000AED2                 mov     eax, [ecx+0Ch]
.text:0000AED5                 mov     [edx+0Ch], eax
.text:0000AED8                 mov     eax, [ecx+10h]
.text:0000AEDB                 mov     [edx+10h], eax
.text:0000AEDE                 mov     ecx, [ecx+14h]
.text:0000AEE1                 mov     [edx+14h], ecx
.text:0000AEE4                 mov     edx, [ebp+var_10]
.text:0000AEE7                 mov     eax, [ebp+arg_0]
.text:0000AEEA                 mov     cl, [eax+0B8h]
.text:0000AEF0                 mov     [edx+0B8h], cl
.text:0000AEF6                 mov     edx, [ebp+var_10]
.text:0000AEF9                 mov     eax, [ebp+arg_0]
.text:0000AEFC                 mov     ecx, [eax+0BCh]
.text:0000AF02                 mov     [edx+0BCh], ecx
.text:0000AF08                 mov     edx, [ebp+var_10]
.text:0000AF0B                 mov     eax, [ebp+arg_0]
.text:0000AF0E                 mov     ecx, [eax+0C0h]
.text:0000AF14                 mov     [edx+0C0h], ecx
.text:0000AF1A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AF21                 mov     eax, [ebp+var_10]
.text:0000AF24                 mov     ecx, [ebp+var_C]
.text:0000AF27                 mov     large fs:0, ecx
.text:0000AF2E                 pop     ecx
.text:0000AF2F                 add     esp, 10h
.text:0000AF32                 cmp     ebp, esp
.text:0000AF34                 call    __RTC_CheckEsp
.text:0000AF39                 mov     esp, ebp
.text:0000AF3B                 pop     ebp
.text:0000AF3C                 retn    4
.text:0000AF3C ??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000AF3C
.text:0000AF3C ; ---------------------------------------------------------------------------
.text:0000AF3F                 align 10h
.text:0000AF3F _text           ends
.text:0000AF3F
.text$x:0000AF40 ; ===========================================================================
.text$x:0000AF40
.text$x:0000AF40 ; Segment type: Pure code
.text$x:0000AF40 ; Segment permissions: Read/Execute
.text$x:0000AF40 _text$x         segment para public 'CODE' use32
.text$x:0000AF40                 assume cs:_text$x
.text$x:0000AF40                 ;org 0AF40h
.text$x:0000AF40 ; COMDAT (pick associative to section at ADC8)
.text$x:0000AF40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000AF40
.text$x:0000AF40 ; =============== S U B R O U T I N E =======================================
.text$x:0000AF40
.text$x:0000AF40
.text$x:0000AF40 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:0000AF40                                         ; DATA XREF: .xdata$x:0000AFC4o
.text$x:0000AF40                 mov     ecx, [ebp-10h]  ; this
.text$x:0000AF43                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:0000AF43 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:0000AF43
.text$x:0000AF48
.text$x:0000AF48 ; =============== S U B R O U T I N E =======================================
.text$x:0000AF48
.text$x:0000AF48
.text$x:0000AF48 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:0000AF48                                         ; DATA XREF: .xdata$x:0000AFCCo
.text$x:0000AF48                 mov     ecx, [ebp-10h]
.text$x:0000AF4B                 add     ecx, 4          ; this
.text$x:0000AF4E                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000AF4E __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:0000AF4E
.text$x:0000AF53
.text$x:0000AF53 ; =============== S U B R O U T I N E =======================================
.text$x:0000AF53
.text$x:0000AF53
.text$x:0000AF53 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$2 proc near
.text$x:0000AF53                                         ; DATA XREF: .xdata$x:0000AFD4o
.text$x:0000AF53                 mov     ecx, [ebp-10h]
.text$x:0000AF56                 add     ecx, 8          ; this
.text$x:0000AF59                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000AF59 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$2 endp
.text$x:0000AF59
.text$x:0000AF5E
.text$x:0000AF5E ; =============== S U B R O U T I N E =======================================
.text$x:0000AF5E
.text$x:0000AF5E
.text$x:0000AF5E __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$3 proc near
.text$x:0000AF5E                                         ; DATA XREF: .xdata$x:0000AFDCo
.text$x:0000AF5E                 mov     ecx, [ebp-10h]
.text$x:0000AF61                 add     ecx, 14h
.text$x:0000AF64                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000AF64 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$3 endp
.text$x:0000AF64
.text$x:0000AF69
.text$x:0000AF69 ; =============== S U B R O U T I N E =======================================
.text$x:0000AF69
.text$x:0000AF69
.text$x:0000AF69 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$4 proc near
.text$x:0000AF69                                         ; DATA XREF: .xdata$x:0000AFE4o
.text$x:0000AF69                 mov     ecx, [ebp-10h]
.text$x:0000AF6C                 add     ecx, 1Ch
.text$x:0000AF6F                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:0000AF6F __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$4 endp
.text$x:0000AF6F
.text$x:0000AF74
.text$x:0000AF74 ; =============== S U B R O U T I N E =======================================
.text$x:0000AF74
.text$x:0000AF74
.text$x:0000AF74 __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$5 proc near
.text$x:0000AF74                                         ; DATA XREF: .xdata$x:0000AFECo
.text$x:0000AF74                 mov     ecx, [ebp-10h]
.text$x:0000AF77                 add     ecx, 20h ; ' '
.text$x:0000AF7A                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000AF7A __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$5 endp
.text$x:0000AF7A
.text$x:0000AF7F
.text$x:0000AF7F ; =============== S U B R O U T I N E =======================================
.text$x:0000AF7F
.text$x:0000AF7F
.text$x:0000AF7F __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000AF7F                                         ; DATA XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)+5o
.text$x:0000AF7F
.text$x:0000AF7F arg_4           = dword ptr  8
.text$x:0000AF7F
.text$x:0000AF7F                 mov     edx, [esp+arg_4]
.text$x:0000AF83                 lea     eax, [edx+0Ch]
.text$x:0000AF86                 mov     ecx, [edx-8]
.text$x:0000AF89                 xor     ecx, eax
.text$x:0000AF8B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AF90                 mov     eax, offset __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
.text$x:0000AF95                 jmp     ___CxxFrameHandler3
.text$x:0000AF95 __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z endp
.text$x:0000AF95
.text$x:0000AF95 ; ---------------------------------------------------------------------------
.text$x:0000AF9A                 align 4
.text$x:0000AF9A _text$x         ends
.text$x:0000AF9A
.xdata$x:0000AF9C ; ===========================================================================
.xdata$x:0000AF9C
.xdata$x:0000AF9C ; Segment type: Pure data
.xdata$x:0000AF9C ; Segment permissions: Read
.xdata$x:0000AF9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000AF9C                 assume cs:_xdata$x
.xdata$x:0000AF9C                 ;org 0AF9Ch
.xdata$x:0000AF9C ; COMDAT (pick associative to section at ADC8)
.xdata$x:0000AF9C __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:0000AF9C                                         ; DATA XREF: __ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:0000AF9D                 db    5
.xdata$x:0000AF9E                 db  93h ; ô
.xdata$x:0000AF9F                 db  19h
.xdata$x:0000AFA0                 db    6
.xdata$x:0000AFA1                 db    0
.xdata$x:0000AFA2                 db    0
.xdata$x:0000AFA3                 db    0
.xdata$x:0000AFA4                 dd offset __unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
.xdata$x:0000AFA8                 db    0
.xdata$x:0000AFA9                 db    0
.xdata$x:0000AFAA                 db    0
.xdata$x:0000AFAB                 db    0
.xdata$x:0000AFAC                 db    0
.xdata$x:0000AFAD                 db    0
.xdata$x:0000AFAE                 db    0
.xdata$x:0000AFAF                 db    0
.xdata$x:0000AFB0                 db    0
.xdata$x:0000AFB1                 db    0
.xdata$x:0000AFB2                 db    0
.xdata$x:0000AFB3                 db    0
.xdata$x:0000AFB4                 db    0
.xdata$x:0000AFB5                 db    0
.xdata$x:0000AFB6                 db    0
.xdata$x:0000AFB7                 db    0
.xdata$x:0000AFB8                 db    0
.xdata$x:0000AFB9                 db    0
.xdata$x:0000AFBA                 db    0
.xdata$x:0000AFBB                 db    0
.xdata$x:0000AFBC                 db    1
.xdata$x:0000AFBD                 db    0
.xdata$x:0000AFBE                 db    0
.xdata$x:0000AFBF                 db    0
.xdata$x:0000AFC0 __unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:0000AFC0                                         ; DATA XREF: .xdata$x:0000AFA4o
.xdata$x:0000AFC1                 db 0FFh
.xdata$x:0000AFC2                 db 0FFh
.xdata$x:0000AFC3                 db 0FFh
.xdata$x:0000AFC4                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$0
.xdata$x:0000AFC8                 db    0
.xdata$x:0000AFC9                 db    0
.xdata$x:0000AFCA                 db    0
.xdata$x:0000AFCB                 db    0
.xdata$x:0000AFCC                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$1
.xdata$x:0000AFD0                 db    1
.xdata$x:0000AFD1                 db    0
.xdata$x:0000AFD2                 db    0
.xdata$x:0000AFD3                 db    0
.xdata$x:0000AFD4                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$2
.xdata$x:0000AFD8                 db    2
.xdata$x:0000AFD9                 db    0
.xdata$x:0000AFDA                 db    0
.xdata$x:0000AFDB                 db    0
.xdata$x:0000AFDC                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$3
.xdata$x:0000AFE0                 db    3
.xdata$x:0000AFE1                 db    0
.xdata$x:0000AFE2                 db    0
.xdata$x:0000AFE3                 db    0
.xdata$x:0000AFE4                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$4
.xdata$x:0000AFE8                 db    4
.xdata$x:0000AFE9                 db    0
.xdata$x:0000AFEA                 db    0
.xdata$x:0000AFEB                 db    0
.xdata$x:0000AFEC                 dd offset __unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$5
.xdata$x:0000AFEC _xdata$x        ends
.xdata$x:0000AFEC
.text:0000AFF0 ; ===========================================================================
.text:0000AFF0
.text:0000AFF0 ; Segment type: Pure code
.text:0000AFF0 ; Segment permissions: Read/Execute
.text:0000AFF0 _text           segment para public 'CODE' use32
.text:0000AFF0                 assume cs:_text
.text:0000AFF0                 ;org 0AFF0h
.text:0000AFF0 ; COMDAT (pick any)
.text:0000AFF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000AFF0
.text:0000AFF0 ; =============== S U B R O U T I N E =======================================
.text:0000AFF0
.text:0000AFF0 ; Attributes: bp-based frame
.text:0000AFF0
.text:0000AFF0 ; public: void * __thiscall NArchive::NZip::CThreadInfo::`scalar deleting destructor'(unsigned int)
.text:0000AFF0                 public ??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z
.text:0000AFF0 ??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000AFF0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>(void)+7Fp
.text:0000AFF0
.text:0000AFF0 var_4           = dword ptr -4
.text:0000AFF0 arg_0           = dword ptr  8
.text:0000AFF0
.text:0000AFF0                 push    ebp
.text:0000AFF1                 mov     ebp, esp
.text:0000AFF3                 push    ecx
.text:0000AFF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AFFB                 mov     [ebp+var_4], ecx
.text:0000AFFE                 mov     ecx, [ebp+var_4] ; this
.text:0000B001                 call    ??1CThreadInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CThreadInfo::~CThreadInfo(void)
.text:0000B006                 mov     eax, [ebp+arg_0]
.text:0000B009                 and     eax, 1
.text:0000B00C                 jz      short loc_B01A
.text:0000B00E                 mov     ecx, [ebp+var_4]
.text:0000B011                 push    ecx             ; void *
.text:0000B012                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B017                 add     esp, 4
.text:0000B01A
.text:0000B01A loc_B01A:                               ; CODE XREF: NArchive::NZip::CThreadInfo::`scalar deleting destructor'(uint)+1Cj
.text:0000B01A                 mov     eax, [ebp+var_4]
.text:0000B01D                 add     esp, 4
.text:0000B020                 cmp     ebp, esp
.text:0000B022                 call    __RTC_CheckEsp
.text:0000B027                 mov     esp, ebp
.text:0000B029                 pop     ebp
.text:0000B02A                 retn    4
.text:0000B02A ??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z endp
.text:0000B02A
.text:0000B02A ; ---------------------------------------------------------------------------
.text:0000B02D                 align 10h
.text:0000B02D _text           ends
.text:0000B02D
.text:0000B030 ; ===========================================================================
.text:0000B030
.text:0000B030 ; Segment type: Pure code
.text:0000B030 ; Segment permissions: Read/Execute
.text:0000B030 _text           segment para public 'CODE' use32
.text:0000B030                 assume cs:_text
.text:0000B030                 ;org 0B030h
.text:0000B030 ; COMDAT (pick any)
.text:0000B030                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B030
.text:0000B030 ; =============== S U B R O U T I N E =======================================
.text:0000B030
.text:0000B030 ; Attributes: bp-based frame
.text:0000B030
.text:0000B030 ; _DWORD __thiscall NArchive::NZip::CMemBlocks2::CMemBlocks2(NArchive::NZip::CMemBlocks2 *this, const struct NArchive::NZip::CMemBlocks2 *)
.text:0000B030                 public ??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z
.text:0000B030 ??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000B030                                         ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::Add(NArchive::NZip::CMemBlocks2 const &)+5Ap
.text:0000B030
.text:0000B030 var_4           = dword ptr -4
.text:0000B030 arg_0           = dword ptr  8
.text:0000B030
.text:0000B030                 push    ebp
.text:0000B031                 mov     ebp, esp
.text:0000B033                 push    ecx
.text:0000B034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B03B                 mov     [ebp+var_4], ecx
.text:0000B03E                 mov     eax, [ebp+arg_0]
.text:0000B041                 push    eax
.text:0000B042                 mov     ecx, [ebp+var_4]
.text:0000B045                 call    ??0CMemLockBlocks@@QAE@ABU0@@Z ; CMemLockBlocks::CMemLockBlocks(CMemLockBlocks const &)
.text:0000B04A                 mov     ecx, [ebp+arg_0]
.text:0000B04D                 add     ecx, 20h ; ' '
.text:0000B050                 mov     edx, [ebp+var_4]
.text:0000B053                 add     edx, 20h ; ' '
.text:0000B056                 mov     eax, [ecx]
.text:0000B058                 mov     [edx], eax
.text:0000B05A                 mov     eax, [ecx+4]
.text:0000B05D                 mov     [edx+4], eax
.text:0000B060                 mov     eax, [ecx+8]
.text:0000B063                 mov     [edx+8], eax
.text:0000B066                 mov     eax, [ecx+0Ch]
.text:0000B069                 mov     [edx+0Ch], eax
.text:0000B06C                 mov     eax, [ecx+10h]
.text:0000B06F                 mov     [edx+10h], eax
.text:0000B072                 mov     ecx, [ecx+14h]
.text:0000B075                 mov     [edx+14h], ecx
.text:0000B078                 mov     edx, [ebp+var_4]
.text:0000B07B                 mov     eax, [ebp+arg_0]
.text:0000B07E                 mov     cl, [eax+38h]
.text:0000B081                 mov     [edx+38h], cl
.text:0000B084                 mov     edx, [ebp+var_4]
.text:0000B087                 mov     eax, [ebp+arg_0]
.text:0000B08A                 mov     cl, [eax+39h]
.text:0000B08D                 mov     [edx+39h], cl
.text:0000B090                 mov     eax, [ebp+var_4]
.text:0000B093                 add     esp, 4
.text:0000B096                 cmp     ebp, esp
.text:0000B098                 call    __RTC_CheckEsp
.text:0000B09D                 mov     esp, ebp
.text:0000B09F                 pop     ebp
.text:0000B0A0                 retn    4
.text:0000B0A0 ??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000B0A0
.text:0000B0A0 ; ---------------------------------------------------------------------------
.text:0000B0A3                 align 4
.text:0000B0A3 _text           ends
.text:0000B0A3
.text:0000B0A4 ; ===========================================================================
.text:0000B0A4
.text:0000B0A4 ; Segment type: Pure code
.text:0000B0A4 ; Segment permissions: Read/Execute
.text:0000B0A4 _text           segment para public 'CODE' use32
.text:0000B0A4                 assume cs:_text
.text:0000B0A4                 ;org 0B0A4h
.text:0000B0A4 ; COMDAT (pick any)
.text:0000B0A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B0A4
.text:0000B0A4 ; =============== S U B R O U T I N E =======================================
.text:0000B0A4
.text:0000B0A4 ; Attributes: bp-based frame
.text:0000B0A4
.text:0000B0A4 ; public: void * __thiscall NArchive::NZip::CMemBlocks2::`scalar deleting destructor'(unsigned int)
.text:0000B0A4                 public ??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z
.text:0000B0A4 ??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000B0A4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>(void)+7Fp
.text:0000B0A4
.text:0000B0A4 var_4           = dword ptr -4
.text:0000B0A4 arg_0           = dword ptr  8
.text:0000B0A4
.text:0000B0A4                 push    ebp
.text:0000B0A5                 mov     ebp, esp
.text:0000B0A7                 push    ecx
.text:0000B0A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B0AF                 mov     [ebp+var_4], ecx
.text:0000B0B2                 mov     ecx, [ebp+var_4] ; this
.text:0000B0B5                 call    ??1CMemBlocks2@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMemBlocks2::~CMemBlocks2(void)
.text:0000B0BA                 mov     eax, [ebp+arg_0]
.text:0000B0BD                 and     eax, 1
.text:0000B0C0                 jz      short loc_B0CE
.text:0000B0C2                 mov     ecx, [ebp+var_4]
.text:0000B0C5                 push    ecx             ; void *
.text:0000B0C6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B0CB                 add     esp, 4
.text:0000B0CE
.text:0000B0CE loc_B0CE:                               ; CODE XREF: NArchive::NZip::CMemBlocks2::`scalar deleting destructor'(uint)+1Cj
.text:0000B0CE                 mov     eax, [ebp+var_4]
.text:0000B0D1                 add     esp, 4
.text:0000B0D4                 cmp     ebp, esp
.text:0000B0D6                 call    __RTC_CheckEsp
.text:0000B0DB                 mov     esp, ebp
.text:0000B0DD                 pop     ebp
.text:0000B0DE                 retn    4
.text:0000B0DE ??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z endp
.text:0000B0DE
.text:0000B0DE ; ---------------------------------------------------------------------------
.text:0000B0E1                 align 4
.text:0000B0E1 _text           ends
.text:0000B0E1
.text:0000B0E4 ; ===========================================================================
.text:0000B0E4
.text:0000B0E4 ; Segment type: Pure code
.text:0000B0E4 ; Segment permissions: Read/Execute
.text:0000B0E4 _text           segment para public 'CODE' use32
.text:0000B0E4                 assume cs:_text
.text:0000B0E4                 ;org 0B0E4h
.text:0000B0E4 ; COMDAT (pick any)
.text:0000B0E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B0E4
.text:0000B0E4 ; =============== S U B R O U T I N E =======================================
.text:0000B0E4
.text:0000B0E4 ; Attributes: bp-based frame
.text:0000B0E4
.text:0000B0E4 ; _DWORD __thiscall NArchive::NZip::CItemOut::CItemOut(NArchive::NZip::CItemOut *this, const struct NArchive::NZip::CItemOut *)
.text:0000B0E4                 public ??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z
.text:0000B0E4 ??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:0000B0E4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::Add(NArchive::NZip::CItemOut const &)+5Dp
.text:0000B0E4
.text:0000B0E4 var_4           = dword ptr -4
.text:0000B0E4 arg_0           = dword ptr  8
.text:0000B0E4
.text:0000B0E4                 push    ebp
.text:0000B0E5                 mov     ebp, esp
.text:0000B0E7                 push    ecx
.text:0000B0E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B0EF                 mov     [ebp+var_4], ecx
.text:0000B0F2                 mov     eax, [ebp+arg_0]
.text:0000B0F5                 push    eax             ; struct NArchive::NZip::CItem *
.text:0000B0F6                 mov     ecx, [ebp+var_4] ; this
.text:0000B0F9                 call    ??0CItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)
.text:0000B0FE                 mov     ecx, [ebp+arg_0]
.text:0000B101                 mov     edx, [ecx+60h]
.text:0000B104                 mov     eax, [ecx+64h]
.text:0000B107                 mov     ecx, [ebp+var_4]
.text:0000B10A                 mov     [ecx+60h], edx
.text:0000B10D                 mov     [ecx+64h], eax
.text:0000B110                 mov     edx, [ebp+arg_0]
.text:0000B113                 mov     eax, [edx+68h]
.text:0000B116                 mov     ecx, [edx+6Ch]
.text:0000B119                 mov     edx, [ebp+var_4]
.text:0000B11C                 mov     [edx+68h], eax
.text:0000B11F                 mov     [edx+6Ch], ecx
.text:0000B122                 mov     eax, [ebp+arg_0]
.text:0000B125                 mov     ecx, [eax+70h]
.text:0000B128                 mov     edx, [eax+74h]
.text:0000B12B                 mov     eax, [ebp+var_4]
.text:0000B12E                 mov     [eax+70h], ecx
.text:0000B131                 mov     [eax+74h], edx
.text:0000B134                 mov     ecx, [ebp+var_4]
.text:0000B137                 mov     edx, [ebp+arg_0]
.text:0000B13A                 mov     al, [edx+78h]
.text:0000B13D                 mov     [ecx+78h], al
.text:0000B140                 mov     eax, [ebp+var_4]
.text:0000B143                 add     esp, 4
.text:0000B146                 cmp     ebp, esp
.text:0000B148                 call    __RTC_CheckEsp
.text:0000B14D                 mov     esp, ebp
.text:0000B14F                 pop     ebp
.text:0000B150                 retn    4
.text:0000B150 ??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z endp
.text:0000B150
.text:0000B150 ; ---------------------------------------------------------------------------
.text:0000B153                 align 4
.text:0000B153 _text           ends
.text:0000B153
.text:0000B154 ; ===========================================================================
.text:0000B154
.text:0000B154 ; Segment type: Pure code
.text:0000B154 ; Segment permissions: Read/Execute
.text:0000B154 _text           segment para public 'CODE' use32
.text:0000B154                 assume cs:_text
.text:0000B154                 ;org 0B154h
.text:0000B154 ; COMDAT (pick any)
.text:0000B154                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B154
.text:0000B154 ; =============== S U B R O U T I N E =======================================
.text:0000B154
.text:0000B154 ; Attributes: bp-based frame
.text:0000B154
.text:0000B154 ; public: void * __thiscall NArchive::NZip::CItemOut::`scalar deleting destructor'(unsigned int)
.text:0000B154                 public ??_GCItemOut@NZip@NArchive@@QAEPAXI@Z
.text:0000B154 ??_GCItemOut@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000B154                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>(void)+7Fp
.text:0000B154
.text:0000B154 var_4           = dword ptr -4
.text:0000B154 arg_0           = dword ptr  8
.text:0000B154
.text:0000B154                 push    ebp
.text:0000B155                 mov     ebp, esp
.text:0000B157                 push    ecx
.text:0000B158                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B15F                 mov     [ebp+var_4], ecx
.text:0000B162                 mov     ecx, [ebp+var_4] ; this
.text:0000B165                 call    ??1CItemOut@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemOut::~CItemOut(void)
.text:0000B16A                 mov     eax, [ebp+arg_0]
.text:0000B16D                 and     eax, 1
.text:0000B170                 jz      short loc_B17E
.text:0000B172                 mov     ecx, [ebp+var_4]
.text:0000B175                 push    ecx             ; void *
.text:0000B176                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B17B                 add     esp, 4
.text:0000B17E
.text:0000B17E loc_B17E:                               ; CODE XREF: NArchive::NZip::CItemOut::`scalar deleting destructor'(uint)+1Cj
.text:0000B17E                 mov     eax, [ebp+var_4]
.text:0000B181                 add     esp, 4
.text:0000B184                 cmp     ebp, esp
.text:0000B186                 call    __RTC_CheckEsp
.text:0000B18B                 mov     esp, ebp
.text:0000B18D                 pop     ebp
.text:0000B18E                 retn    4
.text:0000B18E ??_GCItemOut@NZip@NArchive@@QAEPAXI@Z endp
.text:0000B18E
.text:0000B18E ; ---------------------------------------------------------------------------
.text:0000B191                 align 4
.text:0000B191 _text           ends
.text:0000B191
.text:0000B194 ; ===========================================================================
.text:0000B194
.text:0000B194 ; Segment type: Pure code
.text:0000B194 ; Segment permissions: Read/Execute
.text:0000B194 _text           segment para public 'CODE' use32
.text:0000B194                 assume cs:_text
.text:0000B194                 ;org 0B194h
.text:0000B194 ; COMDAT (pick any)
.text:0000B194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B194
.text:0000B194 ; =============== S U B R O U T I N E =======================================
.text:0000B194
.text:0000B194 ; Attributes: bp-based frame
.text:0000B194
.text:0000B194 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:0000B194                 public ??1CProp@@QAE@XZ
.text:0000B194 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:0000B194
.text:0000B194 var_4           = dword ptr -4
.text:0000B194
.text:0000B194                 push    ebp
.text:0000B195                 mov     ebp, esp
.text:0000B197                 push    ecx
.text:0000B198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B19F                 mov     [ebp+var_4], ecx
.text:0000B1A2                 mov     ecx, [ebp+var_4]
.text:0000B1A5                 add     ecx, 8          ; this
.text:0000B1A8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000B1AD                 add     esp, 4
.text:0000B1B0                 cmp     ebp, esp
.text:0000B1B2                 call    __RTC_CheckEsp
.text:0000B1B7                 mov     esp, ebp
.text:0000B1B9                 pop     ebp
.text:0000B1BA                 retn
.text:0000B1BA ??1CProp@@QAE@XZ endp
.text:0000B1BA
.text:0000B1BA ; ---------------------------------------------------------------------------
.text:0000B1BB                 align 4
.text:0000B1BB _text           ends
.text:0000B1BB
.text:0000B1BC ; ===========================================================================
.text:0000B1BC
.text:0000B1BC ; Segment type: Pure code
.text:0000B1BC ; Segment permissions: Read/Execute
.text:0000B1BC _text           segment para public 'CODE' use32
.text:0000B1BC                 assume cs:_text
.text:0000B1BC                 ;org 0B1BCh
.text:0000B1BC ; COMDAT (pick any)
.text:0000B1BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B1BC
.text:0000B1BC ; =============== S U B R O U T I N E =======================================
.text:0000B1BC
.text:0000B1BC ; Attributes: bp-based frame
.text:0000B1BC
.text:0000B1BC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000B1BC                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000B1BC ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000B1BC                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:0000B1BC
.text:0000B1BC var_4           = dword ptr -4
.text:0000B1BC
.text:0000B1BC                 push    ebp
.text:0000B1BD                 mov     ebp, esp
.text:0000B1BF                 push    ecx
.text:0000B1C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B1C7                 mov     [ebp+var_4], ecx
.text:0000B1CA                 mov     ecx, [ebp+var_4] ; this
.text:0000B1CD                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:0000B1D2                 add     esp, 4
.text:0000B1D5                 cmp     ebp, esp
.text:0000B1D7                 call    __RTC_CheckEsp
.text:0000B1DC                 mov     esp, ebp
.text:0000B1DE                 pop     ebp
.text:0000B1DF                 retn
.text:0000B1DF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000B1DF
.text:0000B1DF _text           ends
.text:0000B1DF
.text:0000B1E0 ; ===========================================================================
.text:0000B1E0
.text:0000B1E0 ; Segment type: Pure code
.text:0000B1E0 ; Segment permissions: Read/Execute
.text:0000B1E0 _text           segment para public 'CODE' use32
.text:0000B1E0                 assume cs:_text
.text:0000B1E0                 ;org 0B1E0h
.text:0000B1E0 ; COMDAT (pick any)
.text:0000B1E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B1E0
.text:0000B1E0 ; =============== S U B R O U T I N E =======================================
.text:0000B1E0
.text:0000B1E0 ; Attributes: bp-based frame
.text:0000B1E0
.text:0000B1E0 ; _DWORD __thiscall NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon *this, const struct NArchive::NZip::CAddCommon *)
.text:0000B1E0                 public ??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z
.text:0000B1E0 ??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:0000B1E0                                         ; CODE XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)+D1p
.text:0000B1E0
.text:0000B1E0 var_4           = dword ptr -4
.text:0000B1E0 arg_0           = dword ptr  8
.text:0000B1E0
.text:0000B1E0                 push    ebp
.text:0000B1E1                 mov     ebp, esp
.text:0000B1E3                 push    ecx
.text:0000B1E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B1EB                 mov     [ebp+var_4], ecx
.text:0000B1EE                 mov     eax, [ebp+arg_0]
.text:0000B1F1                 push    eax             ; struct NArchive::NZip::CCompressionMethodMode *
.text:0000B1F2                 mov     ecx, [ebp+var_4] ; this
.text:0000B1F5                 call    ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)
.text:0000B1FA                 mov     ecx, [ebp+var_4]
.text:0000B1FD                 mov     edx, [ebp+arg_0]
.text:0000B200                 mov     eax, [edx+48h]
.text:0000B203                 mov     [ecx+48h], eax
.text:0000B206                 mov     ecx, [ebp+arg_0]
.text:0000B209                 add     ecx, 4Ch ; 'L'
.text:0000B20C                 push    ecx
.text:0000B20D                 mov     ecx, [ebp+var_4]
.text:0000B210                 add     ecx, 4Ch ; 'L'
.text:0000B213                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(CMyComPtr<ICompressCoder> const &)
.text:0000B218                 mov     edx, [ebp+arg_0]
.text:0000B21B                 add     edx, 50h ; 'P'
.text:0000B21E                 push    edx
.text:0000B21F                 mov     ecx, [ebp+var_4]
.text:0000B222                 add     ecx, 50h ; 'P'
.text:0000B225                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(CMyComPtr<ICompressCoder> const &)
.text:0000B22A                 mov     eax, [ebp+var_4]
.text:0000B22D                 mov     ecx, [ebp+arg_0]
.text:0000B230                 mov     dl, [ecx+54h]
.text:0000B233                 mov     [eax+54h], dl
.text:0000B236                 mov     eax, [ebp+var_4]
.text:0000B239                 mov     ecx, [ebp+arg_0]
.text:0000B23C                 mov     edx, [ecx+58h]
.text:0000B23F                 mov     [eax+58h], edx
.text:0000B242                 mov     eax, [ebp+arg_0]
.text:0000B245                 add     eax, 5Ch ; '\'
.text:0000B248                 push    eax
.text:0000B249                 mov     ecx, [ebp+var_4]
.text:0000B24C                 add     ecx, 5Ch ; '\'
.text:0000B24F                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)
.text:0000B254                 mov     ecx, [ebp+var_4]
.text:0000B257                 mov     edx, [ebp+arg_0]
.text:0000B25A                 mov     eax, [edx+60h]
.text:0000B25D                 mov     [ecx+60h], eax
.text:0000B260                 mov     ecx, [ebp+var_4]
.text:0000B263                 mov     edx, [ebp+arg_0]
.text:0000B266                 mov     eax, [edx+64h]
.text:0000B269                 mov     [ecx+64h], eax
.text:0000B26C                 mov     ecx, [ebp+var_4]
.text:0000B26F                 mov     edx, [ebp+arg_0]
.text:0000B272                 mov     eax, [edx+68h]
.text:0000B275                 mov     [ecx+68h], eax
.text:0000B278                 mov     eax, [ebp+var_4]
.text:0000B27B                 add     esp, 4
.text:0000B27E                 cmp     ebp, esp
.text:0000B280                 call    __RTC_CheckEsp
.text:0000B285                 mov     esp, ebp
.text:0000B287                 pop     ebp
.text:0000B288                 retn    4
.text:0000B288 ??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z endp
.text:0000B288
.text:0000B288 ; ---------------------------------------------------------------------------
.text:0000B28B                 align 4
.text:0000B28B _text           ends
.text:0000B28B
.text:0000B28C ; ===========================================================================
.text:0000B28C
.text:0000B28C ; Segment type: Pure code
.text:0000B28C ; Segment permissions: Read/Execute
.text:0000B28C _text           segment para public 'CODE' use32
.text:0000B28C                 assume cs:_text
.text:0000B28C                 ;org 0B28Ch
.text:0000B28C ; COMDAT (pick any)
.text:0000B28C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B28C
.text:0000B28C ; =============== S U B R O U T I N E =======================================
.text:0000B28C
.text:0000B28C ; Attributes: bp-based frame
.text:0000B28C
.text:0000B28C ; public: __thiscall CMemLockBlocks::CMemLockBlocks(struct CMemLockBlocks const &)
.text:0000B28C                 public ??0CMemLockBlocks@@QAE@ABU0@@Z
.text:0000B28C ??0CMemLockBlocks@@QAE@ABU0@@Z proc near
.text:0000B28C                                         ; CODE XREF: NArchive::NZip::CMemBlocks2::CMemBlocks2(NArchive::NZip::CMemBlocks2 const &)+15p
.text:0000B28C
.text:0000B28C var_4           = dword ptr -4
.text:0000B28C arg_0           = dword ptr  8
.text:0000B28C
.text:0000B28C                 push    ebp
.text:0000B28D                 mov     ebp, esp
.text:0000B28F                 push    ecx
.text:0000B290                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B297                 mov     [ebp+var_4], ecx
.text:0000B29A                 mov     eax, [ebp+arg_0]
.text:0000B29D                 push    eax
.text:0000B29E                 mov     ecx, [ebp+var_4]
.text:0000B2A1                 call    ??0CMemBlocks@@QAE@ABV0@@Z ; CMemBlocks::CMemBlocks(CMemBlocks const &)
.text:0000B2A6                 mov     ecx, [ebp+var_4]
.text:0000B2A9                 mov     edx, [ebp+arg_0]
.text:0000B2AC                 mov     al, [edx+18h]
.text:0000B2AF                 mov     [ecx+18h], al
.text:0000B2B2                 mov     eax, [ebp+var_4]
.text:0000B2B5                 add     esp, 4
.text:0000B2B8                 cmp     ebp, esp
.text:0000B2BA                 call    __RTC_CheckEsp
.text:0000B2BF                 mov     esp, ebp
.text:0000B2C1                 pop     ebp
.text:0000B2C2                 retn    4
.text:0000B2C2 ??0CMemLockBlocks@@QAE@ABU0@@Z endp
.text:0000B2C2
.text:0000B2C2 ; ---------------------------------------------------------------------------
.text:0000B2C5                 align 4
.text:0000B2C5 _text           ends
.text:0000B2C5
.text:0000B2C8 ; ===========================================================================
.text:0000B2C8
.text:0000B2C8 ; Segment type: Pure code
.text:0000B2C8 ; Segment permissions: Read/Execute
.text:0000B2C8 _text           segment para public 'CODE' use32
.text:0000B2C8                 assume cs:_text
.text:0000B2C8                 ;org 0B2C8h
.text:0000B2C8 ; COMDAT (pick any)
.text:0000B2C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B2C8
.text:0000B2C8 ; =============== S U B R O U T I N E =======================================
.text:0000B2C8
.text:0000B2C8 ; Attributes: bp-based frame
.text:0000B2C8
.text:0000B2C8 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *this, const struct NArchive::NZip::CCompressionMethodMode *)
.text:0000B2C8                 public ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text:0000B2C8 ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000B2C8                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon const &)+15p
.text:0000B2C8
.text:0000B2C8 var_10          = dword ptr -10h
.text:0000B2C8 var_C           = dword ptr -0Ch
.text:0000B2C8 var_4           = dword ptr -4
.text:0000B2C8 arg_0           = dword ptr  8
.text:0000B2C8
.text:0000B2C8                 push    ebp
.text:0000B2C9                 mov     ebp, esp
.text:0000B2CB                 push    0FFFFFFFFh
.text:0000B2CD                 push    offset __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text:0000B2D2                 mov     eax, large fs:0
.text:0000B2D8                 push    eax
.text:0000B2D9                 push    ecx
.text:0000B2DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000B2E1                 mov     eax, dword ptr ds:___security_cookie
.text:0000B2E6                 xor     eax, ebp
.text:0000B2E8                 push    eax
.text:0000B2E9                 lea     eax, [ebp+var_C]
.text:0000B2EC                 mov     large fs:0, eax
.text:0000B2F2                 mov     [ebp+var_10], ecx
.text:0000B2F5                 mov     eax, [ebp+arg_0]
.text:0000B2F8                 push    eax             ; struct NArchive::NZip::CBaseProps *
.text:0000B2F9                 mov     ecx, [ebp+var_10] ; this
.text:0000B2FC                 call    ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps const &)
.text:0000B301                 mov     [ebp+var_4], 0
.text:0000B308                 mov     ecx, [ebp+arg_0]
.text:0000B30B                 add     ecx, 18h
.text:0000B30E                 push    ecx
.text:0000B30F                 mov     ecx, [ebp+var_10]
.text:0000B312                 add     ecx, 18h
.text:0000B315                 call    ??0?$CRecordVector@E@@QAE@ABV0@@Z ; CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)
.text:0000B31A                 mov     byte ptr [ebp+var_4], 1
.text:0000B31E                 mov     edx, [ebp+var_10]
.text:0000B321                 mov     eax, [ebp+arg_0]
.text:0000B324                 mov     cl, [eax+24h]
.text:0000B327                 mov     [edx+24h], cl
.text:0000B32A                 mov     edx, [ebp+arg_0]
.text:0000B32D                 add     edx, 28h ; '('
.text:0000B330                 push    edx
.text:0000B331                 mov     ecx, [ebp+var_10]
.text:0000B334                 add     ecx, 28h ; '('
.text:0000B337                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000B33C                 mov     eax, [ebp+var_10]
.text:0000B33F                 mov     ecx, [ebp+arg_0]
.text:0000B342                 mov     edx, [ecx+38h]
.text:0000B345                 mov     [eax+38h], edx
.text:0000B348                 mov     ecx, [ecx+3Ch]
.text:0000B34B                 mov     [eax+3Ch], ecx
.text:0000B34E                 mov     edx, [ebp+var_10]
.text:0000B351                 mov     eax, [ebp+arg_0]
.text:0000B354                 mov     cl, [eax+40h]
.text:0000B357                 mov     [edx+40h], cl
.text:0000B35A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B361                 mov     eax, [ebp+var_10]
.text:0000B364                 mov     ecx, [ebp+var_C]
.text:0000B367                 mov     large fs:0, ecx
.text:0000B36E                 pop     ecx
.text:0000B36F                 add     esp, 10h
.text:0000B372                 cmp     ebp, esp
.text:0000B374                 call    __RTC_CheckEsp
.text:0000B379                 mov     esp, ebp
.text:0000B37B                 pop     ebp
.text:0000B37C                 retn    4
.text:0000B37C ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000B37C
.text:0000B37C ; ---------------------------------------------------------------------------
.text:0000B37F                 align 10h
.text:0000B37F _text           ends
.text:0000B37F
.text$x:0000B380 ; ===========================================================================
.text$x:0000B380
.text$x:0000B380 ; Segment type: Pure code
.text$x:0000B380 ; Segment permissions: Read/Execute
.text$x:0000B380 _text$x         segment para public 'CODE' use32
.text$x:0000B380                 assume cs:_text$x
.text$x:0000B380                 ;org 0B380h
.text$x:0000B380 ; COMDAT (pick associative to section at B2C8)
.text$x:0000B380                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000B380
.text$x:0000B380 ; =============== S U B R O U T I N E =======================================
.text$x:0000B380
.text$x:0000B380
.text$x:0000B380 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:0000B380                                         ; DATA XREF: .xdata$x:0000B3B4o
.text$x:0000B380                 mov     ecx, [ebp-10h]  ; this
.text$x:0000B383                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:0000B383 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:0000B383
.text$x:0000B388
.text$x:0000B388 ; =============== S U B R O U T I N E =======================================
.text$x:0000B388
.text$x:0000B388
.text$x:0000B388 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:0000B388                                         ; DATA XREF: .xdata$x:0000B3BCo
.text$x:0000B388                 mov     ecx, [ebp-10h]
.text$x:0000B38B                 add     ecx, 18h
.text$x:0000B38E                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:0000B38E __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:0000B38E
.text$x:0000B393
.text$x:0000B393 ; =============== S U B R O U T I N E =======================================
.text$x:0000B393
.text$x:0000B393
.text$x:0000B393 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000B393                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+5o
.text$x:0000B393
.text$x:0000B393 arg_4           = dword ptr  8
.text$x:0000B393
.text$x:0000B393                 mov     edx, [esp+arg_4]
.text$x:0000B397                 lea     eax, [edx+0Ch]
.text$x:0000B39A                 mov     ecx, [edx-8]
.text$x:0000B39D                 xor     ecx, eax
.text$x:0000B39F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B3A4                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text$x:0000B3A9                 jmp     ___CxxFrameHandler3
.text$x:0000B3A9 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z endp
.text$x:0000B3A9
.text$x:0000B3A9 ; ---------------------------------------------------------------------------
.text$x:0000B3AE                 align 10h
.text$x:0000B3AE _text$x         ends
.text$x:0000B3AE
.xdata$x:0000B3B0 ; ===========================================================================
.xdata$x:0000B3B0
.xdata$x:0000B3B0 ; Segment type: Pure data
.xdata$x:0000B3B0 ; Segment permissions: Read
.xdata$x:0000B3B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3B0                 assume cs:_xdata$x
.xdata$x:0000B3B0                 ;org 0B3B0h
.xdata$x:0000B3B0 ; COMDAT (pick associative to section at B2C8)
.xdata$x:0000B3B0 __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:0000B3B0                                         ; DATA XREF: .xdata$x:0000B3C8o
.xdata$x:0000B3B1                 db 0FFh
.xdata$x:0000B3B2                 db 0FFh
.xdata$x:0000B3B3                 db 0FFh
.xdata$x:0000B3B4                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0
.xdata$x:0000B3B8                 db    0
.xdata$x:0000B3B9                 db    0
.xdata$x:0000B3BA                 db    0
.xdata$x:0000B3BB                 db    0
.xdata$x:0000B3BC                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1
.xdata$x:0000B3C0 __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:0000B3C0                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:0000B3C1                 db    5
.xdata$x:0000B3C2                 db  93h ; ô
.xdata$x:0000B3C3                 db  19h
.xdata$x:0000B3C4                 db    2
.xdata$x:0000B3C5                 db    0
.xdata$x:0000B3C6                 db    0
.xdata$x:0000B3C7                 db    0
.xdata$x:0000B3C8                 dd offset __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.xdata$x:0000B3CC                 align 20h
.xdata$x:0000B3E0                 db    1
.xdata$x:0000B3E1                 db    0
.xdata$x:0000B3E2                 db    0
.xdata$x:0000B3E3                 db    0
.xdata$x:0000B3E3 _xdata$x        ends
.xdata$x:0000B3E3
.text:0000B3E4 ; ===========================================================================
.text:0000B3E4
.text:0000B3E4 ; Segment type: Pure code
.text:0000B3E4 ; Segment permissions: Read/Execute
.text:0000B3E4 _text           segment para public 'CODE' use32
.text:0000B3E4                 assume cs:_text
.text:0000B3E4                 ;org 0B3E4h
.text:0000B3E4 ; COMDAT (pick any)
.text:0000B3E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B3E4
.text:0000B3E4 ; =============== S U B R O U T I N E =======================================
.text:0000B3E4
.text:0000B3E4 ; Attributes: bp-based frame
.text:0000B3E4
.text:0000B3E4 ; public: __thiscall CMemBlocks::CMemBlocks(class CMemBlocks const &)
.text:0000B3E4                 public ??0CMemBlocks@@QAE@ABV0@@Z
.text:0000B3E4 ??0CMemBlocks@@QAE@ABV0@@Z proc near    ; CODE XREF: CMemLockBlocks::CMemLockBlocks(CMemLockBlocks const &)+15p
.text:0000B3E4
.text:0000B3E4 var_4           = dword ptr -4
.text:0000B3E4 arg_0           = dword ptr  8
.text:0000B3E4
.text:0000B3E4                 push    ebp
.text:0000B3E5                 mov     ebp, esp
.text:0000B3E7                 push    ecx
.text:0000B3E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B3EF                 mov     [ebp+var_4], ecx
.text:0000B3F2                 mov     eax, [ebp+arg_0]
.text:0000B3F5                 push    eax
.text:0000B3F6                 mov     ecx, [ebp+var_4]
.text:0000B3F9                 call    ??0?$CRecordVector@PAX@@QAE@ABV0@@Z ; CRecordVector<void *>::CRecordVector<void *>(CRecordVector<void *> const &)
.text:0000B3FE                 mov     ecx, [ebp+var_4]
.text:0000B401                 mov     edx, [ebp+arg_0]
.text:0000B404                 mov     eax, [edx+10h]
.text:0000B407                 mov     [ecx+10h], eax
.text:0000B40A                 mov     edx, [edx+14h]
.text:0000B40D                 mov     [ecx+14h], edx
.text:0000B410                 mov     eax, [ebp+var_4]
.text:0000B413                 add     esp, 4
.text:0000B416                 cmp     ebp, esp
.text:0000B418                 call    __RTC_CheckEsp
.text:0000B41D                 mov     esp, ebp
.text:0000B41F                 pop     ebp
.text:0000B420                 retn    4
.text:0000B420 ??0CMemBlocks@@QAE@ABV0@@Z endp
.text:0000B420
.text:0000B420 ; ---------------------------------------------------------------------------
.text:0000B423                 align 4
.text:0000B423 _text           ends
.text:0000B423
.text:0000B424 ; ===========================================================================
.text:0000B424
.text:0000B424 ; Segment type: Pure code
.text:0000B424 ; Segment permissions: Read/Execute
.text:0000B424 _text           segment para public 'CODE' use32
.text:0000B424                 assume cs:_text
.text:0000B424                 ;org 0B424h
.text:0000B424 ; COMDAT (pick any)
.text:0000B424                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B424
.text:0000B424 ; =============== S U B R O U T I N E =======================================
.text:0000B424
.text:0000B424 ; Attributes: bp-based frame
.text:0000B424
.text:0000B424 ; _DWORD __thiscall NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps *this, const struct NArchive::NZip::CBaseProps *)
.text:0000B424                 public ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
.text:0000B424 ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000B424                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+34p
.text:0000B424
.text:0000B424 var_4           = dword ptr -4
.text:0000B424 arg_0           = dword ptr  8
.text:0000B424
.text:0000B424                 push    ebp
.text:0000B425                 mov     ebp, esp
.text:0000B427                 push    ecx
.text:0000B428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B42F                 mov     [ebp+var_4], ecx
.text:0000B432                 mov     eax, [ebp+arg_0]
.text:0000B435                 push    eax
.text:0000B436                 mov     ecx, [ebp+var_4]
.text:0000B439                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:0000B43E                 mov     ecx, [ebp+var_4]
.text:0000B441                 mov     edx, [ebp+arg_0]
.text:0000B444                 mov     eax, [edx+0Ch]
.text:0000B447                 mov     [ecx+0Ch], eax
.text:0000B44A                 mov     ecx, [ebp+var_4]
.text:0000B44D                 mov     edx, [ebp+arg_0]
.text:0000B450                 mov     eax, [edx+10h]
.text:0000B453                 mov     [ecx+10h], eax
.text:0000B456                 mov     ecx, [ebp+var_4]
.text:0000B459                 mov     edx, [ebp+arg_0]
.text:0000B45C                 mov     al, [edx+14h]
.text:0000B45F                 mov     [ecx+14h], al
.text:0000B462                 mov     ecx, [ebp+var_4]
.text:0000B465                 mov     edx, [ebp+arg_0]
.text:0000B468                 mov     al, [edx+15h]
.text:0000B46B                 mov     [ecx+15h], al
.text:0000B46E                 mov     ecx, [ebp+var_4]
.text:0000B471                 mov     edx, [ebp+arg_0]
.text:0000B474                 mov     al, [edx+16h]
.text:0000B477                 mov     [ecx+16h], al
.text:0000B47A                 mov     eax, [ebp+var_4]
.text:0000B47D                 add     esp, 4
.text:0000B480                 cmp     ebp, esp
.text:0000B482                 call    __RTC_CheckEsp
.text:0000B487                 mov     esp, ebp
.text:0000B489                 pop     ebp
.text:0000B48A                 retn    4
.text:0000B48A ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000B48A
.text:0000B48A ; ---------------------------------------------------------------------------
.text:0000B48D                 align 10h
.text:0000B48D _text           ends
.text:0000B48D
.text:0000B490 ; ===========================================================================
.text:0000B490
.text:0000B490 ; Segment type: Pure code
.text:0000B490 ; Segment permissions: Read/Execute
.text:0000B490 _text           segment para public 'CODE' use32
.text:0000B490                 assume cs:_text
.text:0000B490                 ;org 0B490h
.text:0000B490 ; COMDAT (pick any)
.text:0000B490                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B490
.text:0000B490 ; =============== S U B R O U T I N E =======================================
.text:0000B490
.text:0000B490 ; Attributes: bp-based frame
.text:0000B490
.text:0000B490 ; public: __thiscall CMethodProps::CMethodProps(class CMethodProps const &)
.text:0000B490                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:0000B490 ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps const &)+15p
.text:0000B490
.text:0000B490 var_4           = dword ptr -4
.text:0000B490 arg_0           = dword ptr  8
.text:0000B490
.text:0000B490                 push    ebp
.text:0000B491                 mov     ebp, esp
.text:0000B493                 push    ecx
.text:0000B494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B49B                 mov     [ebp+var_4], ecx
.text:0000B49E                 mov     eax, [ebp+arg_0]
.text:0000B4A1                 push    eax
.text:0000B4A2                 mov     ecx, [ebp+var_4]
.text:0000B4A5                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:0000B4AA                 mov     eax, [ebp+var_4]
.text:0000B4AD                 add     esp, 4
.text:0000B4B0                 cmp     ebp, esp
.text:0000B4B2                 call    __RTC_CheckEsp
.text:0000B4B7                 mov     esp, ebp
.text:0000B4B9                 pop     ebp
.text:0000B4BA                 retn    4
.text:0000B4BA ??0CMethodProps@@QAE@ABV0@@Z endp
.text:0000B4BA
.text:0000B4BA ; ---------------------------------------------------------------------------
.text:0000B4BD                 align 10h
.text:0000B4BD _text           ends
.text:0000B4BD
.text:0000B4C0 ; ===========================================================================
.text:0000B4C0
.text:0000B4C0 ; Segment type: Pure code
.text:0000B4C0 ; Segment permissions: Read/Execute
.text:0000B4C0 _text           segment para public 'CODE' use32
.text:0000B4C0                 assume cs:_text
.text:0000B4C0                 ;org 0B4C0h
.text:0000B4C0 ; COMDAT (pick any)
.text:0000B4C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B4C0
.text:0000B4C0 ; =============== S U B R O U T I N E =======================================
.text:0000B4C0
.text:0000B4C0 ; Attributes: bp-based frame
.text:0000B4C0
.text:0000B4C0 ; public: __thiscall CProps::CProps(struct CProps const &)
.text:0000B4C0                 public ??0CProps@@QAE@ABU0@@Z
.text:0000B4C0 ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:0000B4C0
.text:0000B4C0 var_4           = dword ptr -4
.text:0000B4C0 arg_0           = dword ptr  8
.text:0000B4C0
.text:0000B4C0                 push    ebp
.text:0000B4C1                 mov     ebp, esp
.text:0000B4C3                 push    ecx
.text:0000B4C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B4CB                 mov     [ebp+var_4], ecx
.text:0000B4CE                 mov     eax, [ebp+arg_0]
.text:0000B4D1                 push    eax
.text:0000B4D2                 mov     ecx, [ebp+var_4]
.text:0000B4D5                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:0000B4DA                 mov     eax, [ebp+var_4]
.text:0000B4DD                 add     esp, 4
.text:0000B4E0                 cmp     ebp, esp
.text:0000B4E2                 call    __RTC_CheckEsp
.text:0000B4E7                 mov     esp, ebp
.text:0000B4E9                 pop     ebp
.text:0000B4EA                 retn    4
.text:0000B4EA ??0CProps@@QAE@ABU0@@Z endp
.text:0000B4EA
.text:0000B4EA ; ---------------------------------------------------------------------------
.text:0000B4ED                 align 10h
.text:0000B4ED _text           ends
.text:0000B4ED
.text:0000B4F0 ; ===========================================================================
.text:0000B4F0
.text:0000B4F0 ; Segment type: Pure code
.text:0000B4F0 ; Segment permissions: Read/Execute
.text:0000B4F0 _text           segment para public 'CODE' use32
.text:0000B4F0                 assume cs:_text
.text:0000B4F0                 ;org 0B4F0h
.text:0000B4F0 ; COMDAT (pick any)
.text:0000B4F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B4F0
.text:0000B4F0 ; =============== S U B R O U T I N E =======================================
.text:0000B4F0
.text:0000B4F0 ; Attributes: bp-based frame
.text:0000B4F0
.text:0000B4F0 ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:0000B4F0                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:0000B4F0 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:0000B4F0                                         ; CODE XREF: CRecordVector<void *>::Delete(uint)+1Cp
.text:0000B4F0
.text:0000B4F0 var_4           = dword ptr -4
.text:0000B4F0 arg_0           = dword ptr  8
.text:0000B4F0 arg_4           = dword ptr  0Ch
.text:0000B4F0
.text:0000B4F0                 push    ebp
.text:0000B4F1                 mov     ebp, esp
.text:0000B4F3                 push    ecx
.text:0000B4F4                 push    esi
.text:0000B4F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B4FC                 mov     [ebp+var_4], ecx
.text:0000B4FF                 mov     eax, [ebp+var_4]
.text:0000B502                 mov     ecx, [eax+4]
.text:0000B505                 sub     ecx, [ebp+arg_4]
.text:0000B508                 shl     ecx, 2
.text:0000B50B                 mov     esi, esp
.text:0000B50D                 push    ecx             ; Size
.text:0000B50E                 mov     edx, [ebp+var_4]
.text:0000B511                 mov     eax, [edx]
.text:0000B513                 mov     ecx, [ebp+arg_4]
.text:0000B516                 lea     edx, [eax+ecx*4]
.text:0000B519                 push    edx             ; Src
.text:0000B51A                 mov     eax, [ebp+var_4]
.text:0000B51D                 mov     ecx, [eax]
.text:0000B51F                 mov     edx, [ebp+arg_0]
.text:0000B522                 lea     eax, [ecx+edx*4]
.text:0000B525                 push    eax             ; Dst
.text:0000B526                 call    dword ptr ds:__imp__memmove
.text:0000B52C                 add     esp, 0Ch
.text:0000B52F                 cmp     esi, esp
.text:0000B531                 call    __RTC_CheckEsp
.text:0000B536                 pop     esi
.text:0000B537                 add     esp, 4
.text:0000B53A                 cmp     ebp, esp
.text:0000B53C                 call    __RTC_CheckEsp
.text:0000B541                 mov     esp, ebp
.text:0000B543                 pop     ebp
.text:0000B544                 retn    8
.text:0000B544 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:0000B544
.text:0000B544 ; ---------------------------------------------------------------------------
.text:0000B547                 align 4
.text:0000B547 _text           ends
.text:0000B547
.text:0000B548 ; ===========================================================================
.text:0000B548
.text:0000B548 ; Segment type: Pure code
.text:0000B548 ; Segment permissions: Read/Execute
.text:0000B548 _text           segment para public 'CODE' use32
.text:0000B548                 assume cs:_text
.text:0000B548                 ;org 0B548h
.text:0000B548 ; COMDAT (pick any)
.text:0000B548                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B548
.text:0000B548 ; =============== S U B R O U T I N E =======================================
.text:0000B548
.text:0000B548 ; Attributes: bp-based frame
.text:0000B548
.text:0000B548 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:0000B548                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:0000B548 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:0000B548                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:0000B548
.text:0000B548 var_14          = dword ptr -14h
.text:0000B548 var_10          = dword ptr -10h
.text:0000B548 Dst             = dword ptr -0Ch
.text:0000B548 var_8           = dword ptr -8
.text:0000B548 var_4           = dword ptr -4
.text:0000B548
.text:0000B548                 push    ebp
.text:0000B549                 mov     ebp, esp
.text:0000B54B                 sub     esp, 14h
.text:0000B54E                 mov     eax, 0CCCCCCCCh
.text:0000B553                 mov     [ebp+var_14], eax
.text:0000B556                 mov     [ebp+var_10], eax
.text:0000B559                 mov     [ebp+Dst], eax
.text:0000B55C                 mov     [ebp+var_8], eax
.text:0000B55F                 mov     [ebp+var_4], eax
.text:0000B562                 mov     [ebp+var_4], ecx
.text:0000B565                 mov     eax, [ebp+var_4]
.text:0000B568                 mov     ecx, [ebp+var_4]
.text:0000B56B                 mov     edx, [eax+4]
.text:0000B56E                 cmp     edx, [ecx+8]
.text:0000B571                 jnz     loc_B5FC
.text:0000B577                 mov     eax, [ebp+var_4]
.text:0000B57A                 mov     ecx, [eax+8]
.text:0000B57D                 shr     ecx, 2
.text:0000B580                 mov     edx, [ebp+var_4]
.text:0000B583                 mov     eax, [edx+8]
.text:0000B586                 lea     ecx, [eax+ecx+1]
.text:0000B58A                 mov     [ebp+var_8], ecx
.text:0000B58D                 xor     ecx, ecx
.text:0000B58F                 mov     eax, [ebp+var_8]
.text:0000B592                 mov     edx, 4
.text:0000B597                 mul     edx
.text:0000B599                 seto    cl
.text:0000B59C                 neg     ecx
.text:0000B59E                 or      ecx, eax
.text:0000B5A0                 push    ecx             ; unsigned int
.text:0000B5A1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B5A6                 add     esp, 4
.text:0000B5A9                 mov     [ebp+var_10], eax
.text:0000B5AC                 mov     eax, [ebp+var_10]
.text:0000B5AF                 mov     [ebp+Dst], eax
.text:0000B5B2                 mov     ecx, [ebp+var_4]
.text:0000B5B5                 cmp     dword ptr [ecx+4], 0
.text:0000B5B9                 jz      short loc_B5D7
.text:0000B5BB                 mov     edx, [ebp+var_4]
.text:0000B5BE                 mov     eax, [edx+4]
.text:0000B5C1                 shl     eax, 2
.text:0000B5C4                 push    eax             ; Size
.text:0000B5C5                 mov     ecx, [ebp+var_4]
.text:0000B5C8                 mov     edx, [ecx]
.text:0000B5CA                 push    edx             ; Src
.text:0000B5CB                 mov     eax, [ebp+Dst]
.text:0000B5CE                 push    eax             ; Dst
.text:0000B5CF                 call    _memcpy
.text:0000B5D4                 add     esp, 0Ch
.text:0000B5D7
.text:0000B5D7 loc_B5D7:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000B5D7                 mov     ecx, [ebp+var_4]
.text:0000B5DA                 mov     edx, [ecx]
.text:0000B5DC                 mov     [ebp+var_14], edx
.text:0000B5DF                 mov     eax, [ebp+var_14]
.text:0000B5E2                 push    eax             ; void *
.text:0000B5E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B5E8                 add     esp, 4
.text:0000B5EB                 mov     ecx, [ebp+var_4]
.text:0000B5EE                 mov     edx, [ebp+Dst]
.text:0000B5F1                 mov     [ecx], edx
.text:0000B5F3                 mov     eax, [ebp+var_4]
.text:0000B5F6                 mov     ecx, [ebp+var_8]
.text:0000B5F9                 mov     [eax+8], ecx
.text:0000B5FC
.text:0000B5FC loc_B5FC:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:0000B5FC                 add     esp, 14h
.text:0000B5FF                 cmp     ebp, esp
.text:0000B601                 call    __RTC_CheckEsp
.text:0000B606                 mov     esp, ebp
.text:0000B608                 pop     ebp
.text:0000B609                 retn
.text:0000B609 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:0000B609
.text:0000B609 ; ---------------------------------------------------------------------------
.text:0000B60A                 align 4
.text:0000B60A _text           ends
.text:0000B60A
.text:0000B60C ; ===========================================================================
.text:0000B60C
.text:0000B60C ; Segment type: Pure code
.text:0000B60C ; Segment permissions: Read/Execute
.text:0000B60C _text           segment para public 'CODE' use32
.text:0000B60C                 assume cs:_text
.text:0000B60C                 ;org 0B60Ch
.text:0000B60C ; COMDAT (pick any)
.text:0000B60C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B60C
.text:0000B60C ; =============== S U B R O U T I N E =======================================
.text:0000B60C
.text:0000B60C ; Attributes: bp-based frame
.text:0000B60C
.text:0000B60C ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(class CRecordVector<void *> const &)
.text:0000B60C                 public ??0?$CRecordVector@PAX@@QAE@ABV0@@Z
.text:0000B60C ??0?$CRecordVector@PAX@@QAE@ABV0@@Z proc near
.text:0000B60C                                         ; CODE XREF: CMemBlocks::CMemBlocks(CMemBlocks const &)+15p
.text:0000B60C
.text:0000B60C var_C           = dword ptr -0Ch
.text:0000B60C var_8           = dword ptr -8
.text:0000B60C var_4           = dword ptr -4
.text:0000B60C arg_0           = dword ptr  8
.text:0000B60C
.text:0000B60C                 push    ebp
.text:0000B60D                 mov     ebp, esp
.text:0000B60F                 sub     esp, 0Ch
.text:0000B612                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000B619                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000B620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B627                 mov     [ebp+var_4], ecx
.text:0000B62A                 mov     eax, [ebp+var_4]
.text:0000B62D                 mov     dword ptr [eax], 0
.text:0000B633                 mov     ecx, [ebp+var_4]
.text:0000B636                 mov     dword ptr [ecx+4], 0
.text:0000B63D                 mov     edx, [ebp+var_4]
.text:0000B640                 mov     dword ptr [edx+8], 0
.text:0000B647                 mov     ecx, [ebp+arg_0]
.text:0000B64A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000B64F                 mov     [ebp+var_8], eax
.text:0000B652                 cmp     [ebp+var_8], 0
.text:0000B656                 jz      short loc_B6AC
.text:0000B658                 xor     ecx, ecx
.text:0000B65A                 mov     eax, [ebp+var_8]
.text:0000B65D                 mov     edx, 4
.text:0000B662                 mul     edx
.text:0000B664                 seto    cl
.text:0000B667                 neg     ecx
.text:0000B669                 or      ecx, eax
.text:0000B66B                 push    ecx             ; unsigned int
.text:0000B66C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B671                 add     esp, 4
.text:0000B674                 mov     [ebp+var_C], eax
.text:0000B677                 mov     eax, [ebp+var_4]
.text:0000B67A                 mov     ecx, [ebp+var_C]
.text:0000B67D                 mov     [eax], ecx
.text:0000B67F                 mov     edx, [ebp+var_4]
.text:0000B682                 mov     eax, [ebp+var_8]
.text:0000B685                 mov     [edx+4], eax
.text:0000B688                 mov     ecx, [ebp+var_4]
.text:0000B68B                 mov     edx, [ebp+var_8]
.text:0000B68E                 mov     [ecx+8], edx
.text:0000B691                 mov     eax, [ebp+var_8]
.text:0000B694                 shl     eax, 2
.text:0000B697                 push    eax             ; Size
.text:0000B698                 mov     ecx, [ebp+arg_0]
.text:0000B69B                 mov     edx, [ecx]
.text:0000B69D                 push    edx             ; Src
.text:0000B69E                 mov     eax, [ebp+var_4]
.text:0000B6A1                 mov     ecx, [eax]
.text:0000B6A3                 push    ecx             ; Dst
.text:0000B6A4                 call    _memcpy
.text:0000B6A9                 add     esp, 0Ch
.text:0000B6AC
.text:0000B6AC loc_B6AC:                               ; CODE XREF: CRecordVector<void *>::CRecordVector<void *>(CRecordVector<void *> const &)+4Aj
.text:0000B6AC                 mov     eax, [ebp+var_4]
.text:0000B6AF                 add     esp, 0Ch
.text:0000B6B2                 cmp     ebp, esp
.text:0000B6B4                 call    __RTC_CheckEsp
.text:0000B6B9                 mov     esp, ebp
.text:0000B6BB                 pop     ebp
.text:0000B6BC                 retn    4
.text:0000B6BC ??0?$CRecordVector@PAX@@QAE@ABV0@@Z endp
.text:0000B6BC
.text:0000B6BC ; ---------------------------------------------------------------------------
.text:0000B6BF                 align 10h
.text:0000B6BF _text           ends
.text:0000B6BF
.text:0000B6C0 ; ===========================================================================
.text:0000B6C0
.text:0000B6C0 ; Segment type: Pure code
.text:0000B6C0 ; Segment permissions: Read/Execute
.text:0000B6C0 _text           segment para public 'CODE' use32
.text:0000B6C0                 assume cs:_text
.text:0000B6C0                 ;org 0B6C0h
.text:0000B6C0 ; COMDAT (pick any)
.text:0000B6C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B6C0
.text:0000B6C0 ; =============== S U B R O U T I N E =======================================
.text:0000B6C0
.text:0000B6C0 ; Attributes: bp-based frame
.text:0000B6C0
.text:0000B6C0 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:0000B6C0                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000B6C0 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000B6C0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+60p
.text:0000B6C0                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:0000B6C0
.text:0000B6C0 var_8           = dword ptr -8
.text:0000B6C0 var_4           = dword ptr -4
.text:0000B6C0 arg_0           = dword ptr  8
.text:0000B6C0
.text:0000B6C0                 push    ebp
.text:0000B6C1                 mov     ebp, esp
.text:0000B6C3                 sub     esp, 8
.text:0000B6C6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000B6CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B6D4                 mov     [ebp+var_4], ecx
.text:0000B6D7                 cmp     [ebp+arg_0], 0
.text:0000B6DB                 jz      short loc_B70D
.text:0000B6DD                 xor     ecx, ecx
.text:0000B6DF                 mov     eax, [ebp+arg_0]
.text:0000B6E2                 mov     edx, 4
.text:0000B6E7                 mul     edx
.text:0000B6E9                 seto    cl
.text:0000B6EC                 neg     ecx
.text:0000B6EE                 or      ecx, eax
.text:0000B6F0                 push    ecx             ; unsigned int
.text:0000B6F1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B6F6                 add     esp, 4
.text:0000B6F9                 mov     [ebp+var_8], eax
.text:0000B6FC                 mov     eax, [ebp+var_4]
.text:0000B6FF                 mov     ecx, [ebp+var_8]
.text:0000B702                 mov     [eax], ecx
.text:0000B704                 mov     edx, [ebp+var_4]
.text:0000B707                 mov     eax, [ebp+arg_0]
.text:0000B70A                 mov     [edx+8], eax
.text:0000B70D
.text:0000B70D loc_B70D:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:0000B70D                 add     esp, 8
.text:0000B710                 cmp     ebp, esp
.text:0000B712                 call    __RTC_CheckEsp
.text:0000B717                 mov     esp, ebp
.text:0000B719                 pop     ebp
.text:0000B71A                 retn    4
.text:0000B71A ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000B71A
.text:0000B71A ; ---------------------------------------------------------------------------
.text:0000B71D                 align 10h
.text:0000B71D _text           ends
.text:0000B71D
.text:0000B720 ; ===========================================================================
.text:0000B720
.text:0000B720 ; Segment type: Pure code
.text:0000B720 ; Segment permissions: Read/Execute
.text:0000B720 _text           segment para public 'CODE' use32
.text:0000B720                 assume cs:_text
.text:0000B720                 ;org 0B720h
.text:0000B720 ; COMDAT (pick any)
.text:0000B720                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B720
.text:0000B720 ; =============== S U B R O U T I N E =======================================
.text:0000B720
.text:0000B720 ; Attributes: bp-based frame
.text:0000B720
.text:0000B720 ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:0000B720                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000B720 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000B720                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+69p
.text:0000B720                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+69p
.text:0000B720
.text:0000B720 var_10          = dword ptr -10h
.text:0000B720 var_C           = dword ptr -0Ch
.text:0000B720 Dst             = dword ptr -8
.text:0000B720 var_4           = dword ptr -4
.text:0000B720 arg_0           = dword ptr  8
.text:0000B720
.text:0000B720                 push    ebp
.text:0000B721                 mov     ebp, esp
.text:0000B723                 sub     esp, 10h
.text:0000B726                 mov     eax, 0CCCCCCCCh
.text:0000B72B                 mov     [ebp+var_10], eax
.text:0000B72E                 mov     [ebp+var_C], eax
.text:0000B731                 mov     [ebp+Dst], eax
.text:0000B734                 mov     [ebp+var_4], eax
.text:0000B737                 mov     [ebp+var_4], ecx
.text:0000B73A                 mov     eax, [ebp+var_4]
.text:0000B73D                 mov     ecx, [ebp+arg_0]
.text:0000B740                 cmp     ecx, [eax+8]
.text:0000B743                 jbe     short loc_B7B4
.text:0000B745                 xor     ecx, ecx
.text:0000B747                 mov     eax, [ebp+arg_0]
.text:0000B74A                 mov     edx, 4
.text:0000B74F                 mul     edx
.text:0000B751                 seto    cl
.text:0000B754                 neg     ecx
.text:0000B756                 or      ecx, eax
.text:0000B758                 push    ecx             ; unsigned int
.text:0000B759                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B75E                 add     esp, 4
.text:0000B761                 mov     [ebp+var_C], eax
.text:0000B764                 mov     eax, [ebp+var_C]
.text:0000B767                 mov     [ebp+Dst], eax
.text:0000B76A                 mov     ecx, [ebp+var_4]
.text:0000B76D                 cmp     dword ptr [ecx+4], 0
.text:0000B771                 jz      short loc_B78F
.text:0000B773                 mov     edx, [ebp+var_4]
.text:0000B776                 mov     eax, [edx+4]
.text:0000B779                 shl     eax, 2
.text:0000B77C                 push    eax             ; Size
.text:0000B77D                 mov     ecx, [ebp+var_4]
.text:0000B780                 mov     edx, [ecx]
.text:0000B782                 push    edx             ; Src
.text:0000B783                 mov     eax, [ebp+Dst]
.text:0000B786                 push    eax             ; Dst
.text:0000B787                 call    _memcpy
.text:0000B78C                 add     esp, 0Ch
.text:0000B78F
.text:0000B78F loc_B78F:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:0000B78F                 mov     ecx, [ebp+var_4]
.text:0000B792                 mov     edx, [ecx]
.text:0000B794                 mov     [ebp+var_10], edx
.text:0000B797                 mov     eax, [ebp+var_10]
.text:0000B79A                 push    eax             ; void *
.text:0000B79B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B7A0                 add     esp, 4
.text:0000B7A3                 mov     ecx, [ebp+var_4]
.text:0000B7A6                 mov     edx, [ebp+Dst]
.text:0000B7A9                 mov     [ecx], edx
.text:0000B7AB                 mov     eax, [ebp+var_4]
.text:0000B7AE                 mov     ecx, [ebp+arg_0]
.text:0000B7B1                 mov     [eax+8], ecx
.text:0000B7B4
.text:0000B7B4 loc_B7B4:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:0000B7B4                 add     esp, 10h
.text:0000B7B7                 cmp     ebp, esp
.text:0000B7B9                 call    __RTC_CheckEsp
.text:0000B7BE                 mov     esp, ebp
.text:0000B7C0                 pop     ebp
.text:0000B7C1                 retn    4
.text:0000B7C1 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000B7C1
.text:0000B7C1 _text           ends
.text:0000B7C1
.text:0000B7C4 ; ===========================================================================
.text:0000B7C4
.text:0000B7C4 ; Segment type: Pure code
.text:0000B7C4 ; Segment permissions: Read/Execute
.text:0000B7C4 _text           segment para public 'CODE' use32
.text:0000B7C4                 assume cs:_text
.text:0000B7C4                 ;org 0B7C4h
.text:0000B7C4 ; COMDAT (pick any)
.text:0000B7C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B7C4
.text:0000B7C4 ; =============== S U B R O U T I N E =======================================
.text:0000B7C4
.text:0000B7C4 ; Attributes: bp-based frame
.text:0000B7C4
.text:0000B7C4 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:0000B7C4                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:0000B7C4 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000B7C4                                         ; CODE XREF: CObjectVector<CProp>::Clear(void)+6Fp
.text:0000B7C4                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+6Fp
.text:0000B7C4
.text:0000B7C4 var_4           = dword ptr -4
.text:0000B7C4
.text:0000B7C4                 push    ebp
.text:0000B7C5                 mov     ebp, esp
.text:0000B7C7                 push    ecx
.text:0000B7C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B7CF                 mov     [ebp+var_4], ecx
.text:0000B7D2                 mov     eax, [ebp+var_4]
.text:0000B7D5                 mov     dword ptr [eax+4], 0
.text:0000B7DC                 mov     esp, ebp
.text:0000B7DE                 pop     ebp
.text:0000B7DF                 retn
.text:0000B7DF ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000B7DF
.text:0000B7DF _text           ends
.text:0000B7DF
.text:0000B7E0 ; ===========================================================================
.text:0000B7E0
.text:0000B7E0 ; Segment type: Pure code
.text:0000B7E0 ; Segment permissions: Read/Execute
.text:0000B7E0 _text           segment para public 'CODE' use32
.text:0000B7E0                 assume cs:_text
.text:0000B7E0                 ;org 0B7E0h
.text:0000B7E0 ; COMDAT (pick any)
.text:0000B7E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B7E0
.text:0000B7E0 ; =============== S U B R O U T I N E =======================================
.text:0000B7E0
.text:0000B7E0 ; Attributes: bp-based frame
.text:0000B7E0
.text:0000B7E0 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000B7E0                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000B7E0 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000B7E0                                         ; CODE XREF: CObjectVector<CProp>::operator=(CObjectVector<CProp> const &)+D7p
.text:0000B7E0                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+C8p ...
.text:0000B7E0
.text:0000B7E0 var_4           = dword ptr -4
.text:0000B7E0 arg_0           = dword ptr  8
.text:0000B7E0
.text:0000B7E0                 push    ebp
.text:0000B7E1                 mov     ebp, esp
.text:0000B7E3                 push    ecx
.text:0000B7E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B7EB                 mov     [ebp+var_4], ecx
.text:0000B7EE                 mov     eax, [ebp+var_4]
.text:0000B7F1                 mov     ecx, [eax+4]
.text:0000B7F4                 mov     edx, [ebp+var_4]
.text:0000B7F7                 mov     eax, [edx]
.text:0000B7F9                 mov     edx, [ebp+arg_0]
.text:0000B7FC                 mov     [eax+ecx*4], edx
.text:0000B7FF                 mov     eax, [ebp+var_4]
.text:0000B802                 mov     ecx, [eax+4]
.text:0000B805                 add     ecx, 1
.text:0000B808                 mov     edx, [ebp+var_4]
.text:0000B80B                 mov     [edx+4], ecx
.text:0000B80E                 mov     esp, ebp
.text:0000B810                 pop     ebp
.text:0000B811                 retn    4
.text:0000B811 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000B811
.text:0000B811 _text           ends
.text:0000B811
.text:0000B814 ; ===========================================================================
.text:0000B814
.text:0000B814 ; Segment type: Pure code
.text:0000B814 ; Segment permissions: Read/Execute
.text:0000B814 _text           segment para public 'CODE' use32
.text:0000B814                 assume cs:_text
.text:0000B814                 ;org 0B814h
.text:0000B814 ; COMDAT (pick any)
.text:0000B814                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B814
.text:0000B814 ; =============== S U B R O U T I N E =======================================
.text:0000B814
.text:0000B814 ; Attributes: bp-based frame
.text:0000B814
.text:0000B814 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:0000B814                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:0000B814 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:0000B814                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:0000B814                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)+15p ...
.text:0000B814
.text:0000B814 var_4           = dword ptr -4
.text:0000B814 arg_0           = dword ptr  8
.text:0000B814
.text:0000B814                 push    ebp
.text:0000B815                 mov     ebp, esp
.text:0000B817                 push    ecx
.text:0000B818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B81F                 mov     [ebp+var_4], ecx
.text:0000B822                 mov     eax, [ebp+var_4]
.text:0000B825                 mov     ecx, [eax]
.text:0000B827                 mov     edx, [ebp+arg_0]
.text:0000B82A                 lea     eax, [ecx+edx*4]
.text:0000B82D                 mov     esp, ebp
.text:0000B82F                 pop     ebp
.text:0000B830                 retn    4
.text:0000B830 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000B830
.text:0000B830 ; ---------------------------------------------------------------------------
.text:0000B833                 align 4
.text:0000B833 _text           ends
.text:0000B833
.text:0000B834 ; ===========================================================================
.text:0000B834
.text:0000B834 ; Segment type: Pure code
.text:0000B834 ; Segment permissions: Read/Execute
.text:0000B834 _text           segment para public 'CODE' use32
.text:0000B834                 assume cs:_text
.text:0000B834                 ;org 0B834h
.text:0000B834 ; COMDAT (pick any)
.text:0000B834                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B834
.text:0000B834 ; =============== S U B R O U T I N E =======================================
.text:0000B834
.text:0000B834 ; Attributes: bp-based frame
.text:0000B834
.text:0000B834 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:0000B834                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:0000B834 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:0000B834                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:0000B834                                         ; CObjectVector<CProp>::Clear(void)+3Ep ...
.text:0000B834
.text:0000B834 var_4           = dword ptr -4
.text:0000B834 arg_0           = dword ptr  8
.text:0000B834
.text:0000B834                 push    ebp
.text:0000B835                 mov     ebp, esp
.text:0000B837                 push    ecx
.text:0000B838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B83F                 mov     [ebp+var_4], ecx
.text:0000B842                 mov     eax, [ebp+var_4]
.text:0000B845                 mov     ecx, [eax]
.text:0000B847                 mov     edx, [ebp+arg_0]
.text:0000B84A                 lea     eax, [ecx+edx*4]
.text:0000B84D                 mov     esp, ebp
.text:0000B84F                 pop     ebp
.text:0000B850                 retn    4
.text:0000B850 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000B850
.text:0000B850 ; ---------------------------------------------------------------------------
.text:0000B853                 align 4
.text:0000B853 _text           ends
.text:0000B853
.text:0000B854 ; ===========================================================================
.text:0000B854
.text:0000B854 ; Segment type: Pure code
.text:0000B854 ; Segment permissions: Read/Execute
.text:0000B854 _text           segment para public 'CODE' use32
.text:0000B854                 assume cs:_text
.text:0000B854                 ;org 0B854h
.text:0000B854 ; COMDAT (pick any)
.text:0000B854                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B854
.text:0000B854 ; =============== S U B R O U T I N E =======================================
.text:0000B854
.text:0000B854 ; Attributes: bp-based frame
.text:0000B854
.text:0000B854 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(class CMyComPtr<struct ICompressCoder> const &)
.text:0000B854                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z
.text:0000B854 ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z proc near
.text:0000B854                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon const &)+33p
.text:0000B854                                         ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon const &)+45p
.text:0000B854
.text:0000B854 var_4           = dword ptr -4
.text:0000B854 arg_0           = dword ptr  8
.text:0000B854
.text:0000B854                 push    ebp
.text:0000B855                 mov     ebp, esp
.text:0000B857                 push    ecx
.text:0000B858                 push    esi
.text:0000B859                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B860                 mov     [ebp+var_4], ecx
.text:0000B863                 mov     eax, [ebp+var_4]
.text:0000B866                 mov     ecx, [ebp+arg_0]
.text:0000B869                 mov     edx, [ecx]
.text:0000B86B                 mov     [eax], edx
.text:0000B86D                 mov     eax, [ebp+var_4]
.text:0000B870                 cmp     dword ptr [eax], 0
.text:0000B873                 jz      short loc_B890
.text:0000B875                 mov     ecx, [ebp+var_4]
.text:0000B878                 mov     edx, [ecx]
.text:0000B87A                 mov     eax, [ebp+var_4]
.text:0000B87D                 mov     ecx, [eax]
.text:0000B87F                 mov     edx, [edx]
.text:0000B881                 mov     esi, esp
.text:0000B883                 push    ecx
.text:0000B884                 mov     eax, [edx+4]
.text:0000B887                 call    eax
.text:0000B889                 cmp     esi, esp
.text:0000B88B                 call    __RTC_CheckEsp
.text:0000B890
.text:0000B890 loc_B890:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(CMyComPtr<ICompressCoder> const &)+1Fj
.text:0000B890                 mov     eax, [ebp+var_4]
.text:0000B893                 pop     esi
.text:0000B894                 add     esp, 4
.text:0000B897                 cmp     ebp, esp
.text:0000B899                 call    __RTC_CheckEsp
.text:0000B89E                 mov     esp, ebp
.text:0000B8A0                 pop     ebp
.text:0000B8A1                 retn    4
.text:0000B8A1 ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z endp
.text:0000B8A1
.text:0000B8A1 _text           ends
.text:0000B8A1
.text:0000B8A4 ; ===========================================================================
.text:0000B8A4
.text:0000B8A4 ; Segment type: Pure code
.text:0000B8A4 ; Segment permissions: Read/Execute
.text:0000B8A4 _text           segment para public 'CODE' use32
.text:0000B8A4                 assume cs:_text
.text:0000B8A4                 ;org 0B8A4h
.text:0000B8A4 ; COMDAT (pick any)
.text:0000B8A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B8A4
.text:0000B8A4 ; =============== S U B R O U T I N E =======================================
.text:0000B8A4
.text:0000B8A4 ; Attributes: bp-based frame
.text:0000B8A4
.text:0000B8A4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(class CMyComPtr<struct ISequentialInStream> const &)
.text:0000B8A4                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z
.text:0000B8A4 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z proc near
.text:0000B8A4                                         ; CODE XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)+BBp
.text:0000B8A4
.text:0000B8A4 var_4           = dword ptr -4
.text:0000B8A4 arg_0           = dword ptr  8
.text:0000B8A4
.text:0000B8A4                 push    ebp
.text:0000B8A5                 mov     ebp, esp
.text:0000B8A7                 push    ecx
.text:0000B8A8                 push    esi
.text:0000B8A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B8B0                 mov     [ebp+var_4], ecx
.text:0000B8B3                 mov     eax, [ebp+var_4]
.text:0000B8B6                 mov     ecx, [ebp+arg_0]
.text:0000B8B9                 mov     edx, [ecx]
.text:0000B8BB                 mov     [eax], edx
.text:0000B8BD                 mov     eax, [ebp+var_4]
.text:0000B8C0                 cmp     dword ptr [eax], 0
.text:0000B8C3                 jz      short loc_B8E0
.text:0000B8C5                 mov     ecx, [ebp+var_4]
.text:0000B8C8                 mov     edx, [ecx]
.text:0000B8CA                 mov     eax, [ebp+var_4]
.text:0000B8CD                 mov     ecx, [eax]
.text:0000B8CF                 mov     edx, [edx]
.text:0000B8D1                 mov     esi, esp
.text:0000B8D3                 push    ecx
.text:0000B8D4                 mov     eax, [edx+4]
.text:0000B8D7                 call    eax
.text:0000B8D9                 cmp     esi, esp
.text:0000B8DB                 call    __RTC_CheckEsp
.text:0000B8E0
.text:0000B8E0 loc_B8E0:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(CMyComPtr<ISequentialInStream> const &)+1Fj
.text:0000B8E0                 mov     eax, [ebp+var_4]
.text:0000B8E3                 pop     esi
.text:0000B8E4                 add     esp, 4
.text:0000B8E7                 cmp     ebp, esp
.text:0000B8E9                 call    __RTC_CheckEsp
.text:0000B8EE                 mov     esp, ebp
.text:0000B8F0                 pop     ebp
.text:0000B8F1                 retn    4
.text:0000B8F1 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z endp
.text:0000B8F1
.text:0000B8F1 _text           ends
.text:0000B8F1
.text:0000B8F4 ; ===========================================================================
.text:0000B8F4
.text:0000B8F4 ; Segment type: Pure code
.text:0000B8F4 ; Segment permissions: Read/Execute
.text:0000B8F4 _text           segment para public 'CODE' use32
.text:0000B8F4                 assume cs:_text
.text:0000B8F4                 ;org 0B8F4h
.text:0000B8F4 ; COMDAT (pick any)
.text:0000B8F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B8F4
.text:0000B8F4 ; =============== S U B R O U T I N E =======================================
.text:0000B8F4
.text:0000B8F4 ; Attributes: bp-based frame
.text:0000B8F4
.text:0000B8F4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(class CMyComPtr<struct ISequentialOutStream> const &)
.text:0000B8F4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
.text:0000B8F4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z proc near
.text:0000B8F4                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon const &)+6Fp
.text:0000B8F4
.text:0000B8F4 var_4           = dword ptr -4
.text:0000B8F4 arg_0           = dword ptr  8
.text:0000B8F4
.text:0000B8F4                 push    ebp
.text:0000B8F5                 mov     ebp, esp
.text:0000B8F7                 push    ecx
.text:0000B8F8                 push    esi
.text:0000B8F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B900                 mov     [ebp+var_4], ecx
.text:0000B903                 mov     eax, [ebp+var_4]
.text:0000B906                 mov     ecx, [ebp+arg_0]
.text:0000B909                 mov     edx, [ecx]
.text:0000B90B                 mov     [eax], edx
.text:0000B90D                 mov     eax, [ebp+var_4]
.text:0000B910                 cmp     dword ptr [eax], 0
.text:0000B913                 jz      short loc_B930
.text:0000B915                 mov     ecx, [ebp+var_4]
.text:0000B918                 mov     edx, [ecx]
.text:0000B91A                 mov     eax, [ebp+var_4]
.text:0000B91D                 mov     ecx, [eax]
.text:0000B91F                 mov     edx, [edx]
.text:0000B921                 mov     esi, esp
.text:0000B923                 push    ecx
.text:0000B924                 mov     eax, [edx+4]
.text:0000B927                 call    eax
.text:0000B929                 cmp     esi, esp
.text:0000B92B                 call    __RTC_CheckEsp
.text:0000B930
.text:0000B930 loc_B930:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)+1Fj
.text:0000B930                 mov     eax, [ebp+var_4]
.text:0000B933                 pop     esi
.text:0000B934                 add     esp, 4
.text:0000B937                 cmp     ebp, esp
.text:0000B939                 call    __RTC_CheckEsp
.text:0000B93E                 mov     esp, ebp
.text:0000B940                 pop     ebp
.text:0000B941                 retn    4
.text:0000B941 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z endp
.text:0000B941
.text:0000B941 _text           ends
.text:0000B941
.text:0000B944 ; ===========================================================================
.text:0000B944
.text:0000B944 ; Segment type: Pure code
.text:0000B944 ; Segment permissions: Read/Execute
.text:0000B944 _text           segment para public 'CODE' use32
.text:0000B944                 assume cs:_text
.text:0000B944                 ;org 0B944h
.text:0000B944 ; COMDAT (pick any)
.text:0000B944                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B944
.text:0000B944 ; =============== S U B R O U T I N E =======================================
.text:0000B944
.text:0000B944 ; Attributes: bp-based frame
.text:0000B944
.text:0000B944 ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:0000B944                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:0000B944 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:0000B944                                         ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+29p
.text:0000B944
.text:0000B944 var_4           = dword ptr -4
.text:0000B944 Src             = dword ptr  8
.text:0000B944 Size            = dword ptr  0Ch
.text:0000B944
.text:0000B944                 push    ebp
.text:0000B945                 mov     ebp, esp
.text:0000B947                 push    ecx
.text:0000B948                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B94F                 mov     [ebp+var_4], ecx
.text:0000B952                 mov     eax, [ebp+Size]
.text:0000B955                 push    eax
.text:0000B956                 mov     ecx, [ebp+var_4]
.text:0000B959                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000B95E                 cmp     [ebp+Size], 0
.text:0000B962                 jz      short loc_B97A
.text:0000B964                 mov     ecx, [ebp+Size]
.text:0000B967                 push    ecx             ; Size
.text:0000B968                 mov     edx, [ebp+Src]
.text:0000B96B                 push    edx             ; Src
.text:0000B96C                 mov     eax, [ebp+var_4]
.text:0000B96F                 mov     ecx, [eax]
.text:0000B971                 push    ecx             ; Dst
.text:0000B972                 call    _memcpy
.text:0000B977                 add     esp, 0Ch
.text:0000B97A
.text:0000B97A loc_B97A:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:0000B97A                 add     esp, 4
.text:0000B97D                 cmp     ebp, esp
.text:0000B97F                 call    __RTC_CheckEsp
.text:0000B984                 mov     esp, ebp
.text:0000B986                 pop     ebp
.text:0000B987                 retn    8
.text:0000B987 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:0000B987
.text:0000B987 ; ---------------------------------------------------------------------------
.text:0000B98A                 align 4
.text:0000B98A _text           ends
.text:0000B98A
.text:0000B98C ; ===========================================================================
.text:0000B98C
.text:0000B98C ; Segment type: Pure code
.text:0000B98C ; Segment permissions: Read/Execute
.text:0000B98C _text           segment para public 'CODE' use32
.text:0000B98C                 assume cs:_text
.text:0000B98C                 ;org 0B98Ch
.text:0000B98C ; COMDAT (pick any)
.text:0000B98C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B98C
.text:0000B98C ; =============== S U B R O U T I N E =======================================
.text:0000B98C
.text:0000B98C ; Attributes: bp-based frame
.text:0000B98C
.text:0000B98C ; public: __thiscall CMyComPtr<struct IOutStream>::CMyComPtr<struct IOutStream>(class CMyComPtr<struct IOutStream> const &)
.text:0000B98C                 public ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z
.text:0000B98C ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z proc near
.text:0000B98C                                         ; CODE XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)+A5p
.text:0000B98C
.text:0000B98C var_4           = dword ptr -4
.text:0000B98C arg_0           = dword ptr  8
.text:0000B98C
.text:0000B98C                 push    ebp
.text:0000B98D                 mov     ebp, esp
.text:0000B98F                 push    ecx
.text:0000B990                 push    esi
.text:0000B991                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B998                 mov     [ebp+var_4], ecx
.text:0000B99B                 mov     eax, [ebp+var_4]
.text:0000B99E                 mov     ecx, [ebp+arg_0]
.text:0000B9A1                 mov     edx, [ecx]
.text:0000B9A3                 mov     [eax], edx
.text:0000B9A5                 mov     eax, [ebp+var_4]
.text:0000B9A8                 cmp     dword ptr [eax], 0
.text:0000B9AB                 jz      short loc_B9C8
.text:0000B9AD                 mov     ecx, [ebp+var_4]
.text:0000B9B0                 mov     edx, [ecx]
.text:0000B9B2                 mov     eax, [ebp+var_4]
.text:0000B9B5                 mov     ecx, [eax]
.text:0000B9B7                 mov     edx, [edx]
.text:0000B9B9                 mov     esi, esp
.text:0000B9BB                 push    ecx
.text:0000B9BC                 mov     eax, [edx+4]
.text:0000B9BF                 call    eax
.text:0000B9C1                 cmp     esi, esp
.text:0000B9C3                 call    __RTC_CheckEsp
.text:0000B9C8
.text:0000B9C8 loc_B9C8:                               ; CODE XREF: CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(CMyComPtr<IOutStream> const &)+1Fj
.text:0000B9C8                 mov     eax, [ebp+var_4]
.text:0000B9CB                 pop     esi
.text:0000B9CC                 add     esp, 4
.text:0000B9CF                 cmp     ebp, esp
.text:0000B9D1                 call    __RTC_CheckEsp
.text:0000B9D6                 mov     esp, ebp
.text:0000B9D8                 pop     ebp
.text:0000B9D9                 retn    4
.text:0000B9D9 ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z endp
.text:0000B9D9
.text:0000B9D9 _text           ends
.text:0000B9D9
.text:0000B9DC ; ===========================================================================
.text:0000B9DC
.text:0000B9DC ; Segment type: Pure code
.text:0000B9DC ; Segment permissions: Read/Execute
.text:0000B9DC _text           segment para public 'CODE' use32
.text:0000B9DC                 assume cs:_text
.text:0000B9DC                 ;org 0B9DCh
.text:0000B9DC ; COMDAT (pick any)
.text:0000B9DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000B9DC
.text:0000B9DC ; =============== S U B R O U T I N E =======================================
.text:0000B9DC
.text:0000B9DC ; Attributes: bp-based frame
.text:0000B9DC
.text:0000B9DC ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(class CMyComPtr<struct ICompressProgressInfo> const &)
.text:0000B9DC                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z
.text:0000B9DC ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z proc near
.text:0000B9DC                                         ; CODE XREF: NArchive::NZip::CThreadInfo::CThreadInfo(NArchive::NZip::CThreadInfo const &)+83p
.text:0000B9DC
.text:0000B9DC var_4           = dword ptr -4
.text:0000B9DC arg_0           = dword ptr  8
.text:0000B9DC
.text:0000B9DC                 push    ebp
.text:0000B9DD                 mov     ebp, esp
.text:0000B9DF                 push    ecx
.text:0000B9E0                 push    esi
.text:0000B9E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B9E8                 mov     [ebp+var_4], ecx
.text:0000B9EB                 mov     eax, [ebp+var_4]
.text:0000B9EE                 mov     ecx, [ebp+arg_0]
.text:0000B9F1                 mov     edx, [ecx]
.text:0000B9F3                 mov     [eax], edx
.text:0000B9F5                 mov     eax, [ebp+var_4]
.text:0000B9F8                 cmp     dword ptr [eax], 0
.text:0000B9FB                 jz      short loc_BA18
.text:0000B9FD                 mov     ecx, [ebp+var_4]
.text:0000BA00                 mov     edx, [ecx]
.text:0000BA02                 mov     eax, [ebp+var_4]
.text:0000BA05                 mov     ecx, [eax]
.text:0000BA07                 mov     edx, [edx]
.text:0000BA09                 mov     esi, esp
.text:0000BA0B                 push    ecx
.text:0000BA0C                 mov     eax, [edx+4]
.text:0000BA0F                 call    eax
.text:0000BA11                 cmp     esi, esp
.text:0000BA13                 call    __RTC_CheckEsp
.text:0000BA18
.text:0000BA18 loc_BA18:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(CMyComPtr<ICompressProgressInfo> const &)+1Fj
.text:0000BA18                 mov     eax, [ebp+var_4]
.text:0000BA1B                 pop     esi
.text:0000BA1C                 add     esp, 4
.text:0000BA1F                 cmp     ebp, esp
.text:0000BA21                 call    __RTC_CheckEsp
.text:0000BA26                 mov     esp, ebp
.text:0000BA28                 pop     ebp
.text:0000BA29                 retn    4
.text:0000BA29 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z endp
.text:0000BA29
.text:0000BA29 _text           ends
.text:0000BA29
.text:0000BA2C ; ===========================================================================
.text:0000BA2C
.text:0000BA2C ; Segment type: Pure code
.text:0000BA2C ; Segment permissions: Read/Execute
.text:0000BA2C _text           segment para public 'CODE' use32
.text:0000BA2C                 assume cs:_text
.text:0000BA2C                 ;org 0BA2Ch
.text:0000BA2C ; COMDAT (pick any)
.text:0000BA2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BA2C
.text:0000BA2C ; =============== S U B R O U T I N E =======================================
.text:0000BA2C
.text:0000BA2C ; Attributes: bp-based frame
.text:0000BA2C
.text:0000BA2C ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:0000BA2C                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:0000BA2C ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:0000BA2C                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:0000BA2C
.text:0000BA2C var_24          = dword ptr -24h
.text:0000BA2C var_20          = dword ptr -20h
.text:0000BA2C var_1C          = dword ptr -1Ch
.text:0000BA2C var_18          = dword ptr -18h
.text:0000BA2C var_14          = dword ptr -14h
.text:0000BA2C var_10          = dword ptr -10h
.text:0000BA2C var_C           = dword ptr -0Ch
.text:0000BA2C var_4           = dword ptr -4
.text:0000BA2C arg_0           = dword ptr  8
.text:0000BA2C
.text:0000BA2C                 push    ebp
.text:0000BA2D                 mov     ebp, esp
.text:0000BA2F                 push    0FFFFFFFFh
.text:0000BA31                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:0000BA36                 mov     eax, large fs:0
.text:0000BA3C                 push    eax
.text:0000BA3D                 sub     esp, 18h
.text:0000BA40                 mov     eax, 0CCCCCCCCh
.text:0000BA45                 mov     [ebp+var_24], eax
.text:0000BA48                 mov     [ebp+var_20], eax
.text:0000BA4B                 mov     [ebp+var_1C], eax
.text:0000BA4E                 mov     [ebp+var_18], eax
.text:0000BA51                 mov     [ebp+var_14], eax
.text:0000BA54                 mov     [ebp+var_10], eax
.text:0000BA57                 mov     eax, dword ptr ds:___security_cookie
.text:0000BA5C                 xor     eax, ebp
.text:0000BA5E                 push    eax
.text:0000BA5F                 lea     eax, [ebp+var_C]
.text:0000BA62                 mov     large fs:0, eax
.text:0000BA68                 mov     [ebp+var_10], ecx
.text:0000BA6B                 mov     ecx, [ebp+var_10]
.text:0000BA6E                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000BA73                 mov     [ebp+var_4], 0
.text:0000BA7A                 mov     ecx, [ebp+arg_0]
.text:0000BA7D                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:0000BA82                 mov     [ebp+var_14], eax
.text:0000BA85                 mov     eax, [ebp+var_14]
.text:0000BA88                 push    eax
.text:0000BA89                 mov     ecx, [ebp+var_10]
.text:0000BA8C                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:0000BA91                 mov     [ebp+var_18], 0
.text:0000BA98                 jmp     short loc_BAA3
.text:0000BA9A ; ---------------------------------------------------------------------------
.text:0000BA9A
.text:0000BA9A loc_BA9A:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:0000BA9A                 mov     ecx, [ebp+var_18]
.text:0000BA9D                 add     ecx, 1
.text:0000BAA0                 mov     [ebp+var_18], ecx
.text:0000BAA3
.text:0000BAA3 loc_BAA3:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:0000BAA3                 mov     edx, [ebp+var_18]
.text:0000BAA6                 cmp     edx, [ebp+var_14]
.text:0000BAA9                 jnb     short loc_BAFB
.text:0000BAAB                 push    18h             ; unsigned int
.text:0000BAAD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BAB2                 add     esp, 4
.text:0000BAB5                 mov     [ebp+var_20], eax
.text:0000BAB8                 mov     byte ptr [ebp+var_4], 1
.text:0000BABC                 cmp     [ebp+var_20], 0
.text:0000BAC0                 jz      short loc_BADC
.text:0000BAC2                 mov     eax, [ebp+var_18]
.text:0000BAC5                 push    eax
.text:0000BAC6                 mov     ecx, [ebp+arg_0]
.text:0000BAC9                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000BACE                 push    eax             ; struct CProp *
.text:0000BACF                 mov     ecx, [ebp+var_20] ; this
.text:0000BAD2                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:0000BAD7                 mov     [ebp+var_24], eax
.text:0000BADA                 jmp     short loc_BAE3
.text:0000BADC ; ---------------------------------------------------------------------------
.text:0000BADC
.text:0000BADC loc_BADC:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:0000BADC                 mov     [ebp+var_24], 0
.text:0000BAE3
.text:0000BAE3 loc_BAE3:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:0000BAE3                 mov     ecx, [ebp+var_24]
.text:0000BAE6                 mov     [ebp+var_1C], ecx
.text:0000BAE9                 mov     byte ptr [ebp+var_4], 0
.text:0000BAED                 mov     edx, [ebp+var_1C]
.text:0000BAF0                 push    edx
.text:0000BAF1                 mov     ecx, [ebp+var_10]
.text:0000BAF4                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:0000BAF9                 jmp     short loc_BA9A
.text:0000BAFB ; ---------------------------------------------------------------------------
.text:0000BAFB
.text:0000BAFB loc_BAFB:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:0000BAFB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000BB02                 mov     eax, [ebp+var_10]
.text:0000BB05                 mov     ecx, [ebp+var_C]
.text:0000BB08                 mov     large fs:0, ecx
.text:0000BB0F                 pop     ecx
.text:0000BB10                 add     esp, 24h
.text:0000BB13                 cmp     ebp, esp
.text:0000BB15                 call    __RTC_CheckEsp
.text:0000BB1A                 mov     esp, ebp
.text:0000BB1C                 pop     ebp
.text:0000BB1D                 retn    4
.text:0000BB1D ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:0000BB1D
.text:0000BB1D _text           ends
.text:0000BB1D
.text$x:0000BB20 ; ===========================================================================
.text$x:0000BB20
.text$x:0000BB20 ; Segment type: Pure code
.text$x:0000BB20 ; Segment permissions: Read/Execute
.text$x:0000BB20 _text$x         segment para public 'CODE' use32
.text$x:0000BB20                 assume cs:_text$x
.text$x:0000BB20                 ;org 0BB20h
.text$x:0000BB20 ; COMDAT (pick associative to section at BA2C)
.text$x:0000BB20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000BB20
.text$x:0000BB20 ; =============== S U B R O U T I N E =======================================
.text$x:0000BB20
.text$x:0000BB20
.text$x:0000BB20 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:0000BB20                                         ; DATA XREF: .xdata$x:0000BB54o
.text$x:0000BB20                 mov     ecx, [ebp-10h]
.text$x:0000BB23                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000BB23 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:0000BB23
.text$x:0000BB28
.text$x:0000BB28 ; =============== S U B R O U T I N E =======================================
.text$x:0000BB28
.text$x:0000BB28
.text$x:0000BB28 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:0000BB28                                         ; DATA XREF: .xdata$x:0000BB5Co
.text$x:0000BB28                 mov     eax, [ebp-20h]
.text$x:0000BB2B                 push    eax             ; void *
.text$x:0000BB2C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000BB31                 pop     ecx
.text$x:0000BB32                 retn
.text$x:0000BB32 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:0000BB32
.text$x:0000BB33
.text$x:0000BB33 ; =============== S U B R O U T I N E =======================================
.text$x:0000BB33
.text$x:0000BB33
.text$x:0000BB33 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:0000BB33                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:0000BB33
.text$x:0000BB33 arg_4           = dword ptr  8
.text$x:0000BB33
.text$x:0000BB33                 mov     edx, [esp+arg_4]
.text$x:0000BB37                 lea     eax, [edx+0Ch]
.text$x:0000BB3A                 mov     ecx, [edx-1Ch]
.text$x:0000BB3D                 xor     ecx, eax
.text$x:0000BB3F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BB44                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:0000BB49                 jmp     ___CxxFrameHandler3
.text$x:0000BB49 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:0000BB49
.text$x:0000BB49 ; ---------------------------------------------------------------------------
.text$x:0000BB4E                 align 10h
.text$x:0000BB4E _text$x         ends
.text$x:0000BB4E
.xdata$x:0000BB50 ; ===========================================================================
.xdata$x:0000BB50
.xdata$x:0000BB50 ; Segment type: Pure data
.xdata$x:0000BB50 ; Segment permissions: Read
.xdata$x:0000BB50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB50                 assume cs:_xdata$x
.xdata$x:0000BB50                 ;org 0BB50h
.xdata$x:0000BB50 ; COMDAT (pick associative to section at BA2C)
.xdata$x:0000BB50 __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:0000BB50                                         ; DATA XREF: .xdata$x:0000BB68o
.xdata$x:0000BB51                 db 0FFh
.xdata$x:0000BB52                 db 0FFh
.xdata$x:0000BB53                 db 0FFh
.xdata$x:0000BB54                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:0000BB58                 db    0
.xdata$x:0000BB59                 db    0
.xdata$x:0000BB5A                 db    0
.xdata$x:0000BB5B                 db    0
.xdata$x:0000BB5C                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:0000BB60 __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:0000BB60                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:0000BB61                 db    5
.xdata$x:0000BB62                 db  93h ; ô
.xdata$x:0000BB63                 db  19h
.xdata$x:0000BB64                 db    2
.xdata$x:0000BB65                 db    0
.xdata$x:0000BB66                 db    0
.xdata$x:0000BB67                 db    0
.xdata$x:0000BB68                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:0000BB6C                 align 20h
.xdata$x:0000BB80                 db    1
.xdata$x:0000BB81                 db    0
.xdata$x:0000BB82                 db    0
.xdata$x:0000BB83                 db    0
.xdata$x:0000BB83 _xdata$x        ends
.xdata$x:0000BB83
.text:0000BB84 ; ===========================================================================
.text:0000BB84
.text:0000BB84 ; Segment type: Pure code
.text:0000BB84 ; Segment permissions: Read/Execute
.text:0000BB84 _text           segment para public 'CODE' use32
.text:0000BB84                 assume cs:_text
.text:0000BB84                 ;org 0BB84h
.text:0000BB84 ; COMDAT (pick any)
.text:0000BB84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BB84
.text:0000BB84 ; =============== S U B R O U T I N E =======================================
.text:0000BB84
.text:0000BB84 ; Attributes: bp-based frame
.text:0000BB84
.text:0000BB84 ; public: __thiscall CRecordVector<unsigned char>::CRecordVector<unsigned char>(class CRecordVector<unsigned char> const &)
.text:0000BB84                 public ??0?$CRecordVector@E@@QAE@ABV0@@Z
.text:0000BB84 ??0?$CRecordVector@E@@QAE@ABV0@@Z proc near
.text:0000BB84                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+4Dp
.text:0000BB84
.text:0000BB84 var_C           = dword ptr -0Ch
.text:0000BB84 Size            = dword ptr -8
.text:0000BB84 var_4           = dword ptr -4
.text:0000BB84 arg_0           = dword ptr  8
.text:0000BB84
.text:0000BB84                 push    ebp
.text:0000BB85                 mov     ebp, esp
.text:0000BB87                 sub     esp, 0Ch
.text:0000BB8A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000BB91                 mov     [ebp+Size], 0CCCCCCCCh
.text:0000BB98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BB9F                 mov     [ebp+var_4], ecx
.text:0000BBA2                 mov     eax, [ebp+var_4]
.text:0000BBA5                 mov     dword ptr [eax], 0
.text:0000BBAB                 mov     ecx, [ebp+var_4]
.text:0000BBAE                 mov     dword ptr [ecx+4], 0
.text:0000BBB5                 mov     edx, [ebp+var_4]
.text:0000BBB8                 mov     dword ptr [edx+8], 0
.text:0000BBBF                 mov     ecx, [ebp+arg_0]
.text:0000BBC2                 call    ?Size@?$CRecordVector@E@@QBEIXZ ; CRecordVector<uchar>::Size(void)
.text:0000BBC7                 mov     [ebp+Size], eax
.text:0000BBCA                 cmp     [ebp+Size], 0
.text:0000BBCE                 jz      short loc_BC11
.text:0000BBD0                 mov     eax, [ebp+Size]
.text:0000BBD3                 push    eax             ; unsigned int
.text:0000BBD4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BBD9                 add     esp, 4
.text:0000BBDC                 mov     [ebp+var_C], eax
.text:0000BBDF                 mov     ecx, [ebp+var_4]
.text:0000BBE2                 mov     edx, [ebp+var_C]
.text:0000BBE5                 mov     [ecx], edx
.text:0000BBE7                 mov     eax, [ebp+var_4]
.text:0000BBEA                 mov     ecx, [ebp+Size]
.text:0000BBED                 mov     [eax+4], ecx
.text:0000BBF0                 mov     edx, [ebp+var_4]
.text:0000BBF3                 mov     eax, [ebp+Size]
.text:0000BBF6                 mov     [edx+8], eax
.text:0000BBF9                 mov     ecx, [ebp+Size]
.text:0000BBFC                 push    ecx             ; Size
.text:0000BBFD                 mov     edx, [ebp+arg_0]
.text:0000BC00                 mov     eax, [edx]
.text:0000BC02                 push    eax             ; Src
.text:0000BC03                 mov     ecx, [ebp+var_4]
.text:0000BC06                 mov     edx, [ecx]
.text:0000BC08                 push    edx             ; Dst
.text:0000BC09                 call    _memcpy
.text:0000BC0E                 add     esp, 0Ch
.text:0000BC11
.text:0000BC11 loc_BC11:                               ; CODE XREF: CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)+4Aj
.text:0000BC11                 mov     eax, [ebp+var_4]
.text:0000BC14                 add     esp, 0Ch
.text:0000BC17                 cmp     ebp, esp
.text:0000BC19                 call    __RTC_CheckEsp
.text:0000BC1E                 mov     esp, ebp
.text:0000BC20                 pop     ebp
.text:0000BC21                 retn    4
.text:0000BC21 ??0?$CRecordVector@E@@QAE@ABV0@@Z endp
.text:0000BC21
.text:0000BC21 _text           ends
.text:0000BC21
.text:0000BC24 ; ===========================================================================
.text:0000BC24
.text:0000BC24 ; Segment type: Pure code
.text:0000BC24 ; Segment permissions: Read/Execute
.text:0000BC24 _text           segment para public 'CODE' use32
.text:0000BC24                 assume cs:_text
.text:0000BC24                 ;org 0BC24h
.text:0000BC24 ; COMDAT (pick any)
.text:0000BC24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BC24
.text:0000BC24 ; =============== S U B R O U T I N E =======================================
.text:0000BC24
.text:0000BC24 ; Attributes: bp-based frame
.text:0000BC24
.text:0000BC24 ; public: unsigned int __thiscall CRecordVector<unsigned char>::Size(void)const
.text:0000BC24                 public ?Size@?$CRecordVector@E@@QBEIXZ
.text:0000BC24 ?Size@?$CRecordVector@E@@QBEIXZ proc near
.text:0000BC24                                         ; CODE XREF: CRecordVector<uchar>::operator=(CRecordVector<uchar> const &)+2Dp
.text:0000BC24                                         ; CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)+3Ep
.text:0000BC24
.text:0000BC24 var_4           = dword ptr -4
.text:0000BC24
.text:0000BC24                 push    ebp
.text:0000BC25                 mov     ebp, esp
.text:0000BC27                 push    ecx
.text:0000BC28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BC2F                 mov     [ebp+var_4], ecx
.text:0000BC32                 mov     eax, [ebp+var_4]
.text:0000BC35                 mov     eax, [eax+4]
.text:0000BC38                 mov     esp, ebp
.text:0000BC3A                 pop     ebp
.text:0000BC3B                 retn
.text:0000BC3B ?Size@?$CRecordVector@E@@QBEIXZ endp
.text:0000BC3B
.text:0000BC3B _text           ends
.text:0000BC3B
.text:0000BC3C ; ===========================================================================
.text:0000BC3C
.text:0000BC3C ; Segment type: Pure code
.text:0000BC3C ; Segment permissions: Read/Execute
.text:0000BC3C _text           segment para public 'CODE' use32
.text:0000BC3C                 assume cs:_text
.text:0000BC3C                 ;org 0BC3Ch
.text:0000BC3C ; COMDAT (pick any)
.text:0000BC3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BC3C
.text:0000BC3C ; =============== S U B R O U T I N E =======================================
.text:0000BC3C
.text:0000BC3C ; Attributes: bp-based frame
.text:0000BC3C
.text:0000BC3C ; private: void __thiscall CRecordVector<int>::MoveItems(unsigned int, unsigned int)
.text:0000BC3C                 public ?MoveItems@?$CRecordVector@H@@AAEXII@Z
.text:0000BC3C ?MoveItems@?$CRecordVector@H@@AAEXII@Z proc near
.text:0000BC3C                                         ; CODE XREF: CRecordVector<int>::Delete(uint)+1Cp
.text:0000BC3C
.text:0000BC3C var_4           = dword ptr -4
.text:0000BC3C arg_0           = dword ptr  8
.text:0000BC3C arg_4           = dword ptr  0Ch
.text:0000BC3C
.text:0000BC3C                 push    ebp
.text:0000BC3D                 mov     ebp, esp
.text:0000BC3F                 push    ecx
.text:0000BC40                 push    esi
.text:0000BC41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BC48                 mov     [ebp+var_4], ecx
.text:0000BC4B                 mov     eax, [ebp+var_4]
.text:0000BC4E                 mov     ecx, [eax+4]
.text:0000BC51                 sub     ecx, [ebp+arg_4]
.text:0000BC54                 shl     ecx, 2
.text:0000BC57                 mov     esi, esp
.text:0000BC59                 push    ecx             ; Size
.text:0000BC5A                 mov     edx, [ebp+var_4]
.text:0000BC5D                 mov     eax, [edx]
.text:0000BC5F                 mov     ecx, [ebp+arg_4]
.text:0000BC62                 lea     edx, [eax+ecx*4]
.text:0000BC65                 push    edx             ; Src
.text:0000BC66                 mov     eax, [ebp+var_4]
.text:0000BC69                 mov     ecx, [eax]
.text:0000BC6B                 mov     edx, [ebp+arg_0]
.text:0000BC6E                 lea     eax, [ecx+edx*4]
.text:0000BC71                 push    eax             ; Dst
.text:0000BC72                 call    dword ptr ds:__imp__memmove
.text:0000BC78                 add     esp, 0Ch
.text:0000BC7B                 cmp     esi, esp
.text:0000BC7D                 call    __RTC_CheckEsp
.text:0000BC82                 pop     esi
.text:0000BC83                 add     esp, 4
.text:0000BC86                 cmp     ebp, esp
.text:0000BC88                 call    __RTC_CheckEsp
.text:0000BC8D                 mov     esp, ebp
.text:0000BC8F                 pop     ebp
.text:0000BC90                 retn    8
.text:0000BC90 ?MoveItems@?$CRecordVector@H@@AAEXII@Z endp
.text:0000BC90
.text:0000BC90 ; ---------------------------------------------------------------------------
.text:0000BC93                 align 4
.text:0000BC93 _text           ends
.text:0000BC93
.text:0000BC94 ; ===========================================================================
.text:0000BC94
.text:0000BC94 ; Segment type: Pure code
.text:0000BC94 ; Segment permissions: Read/Execute
.text:0000BC94 _text           segment para public 'CODE' use32
.text:0000BC94                 assume cs:_text
.text:0000BC94                 ;org 0BC94h
.text:0000BC94 ; COMDAT (pick any)
.text:0000BC94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BC94
.text:0000BC94 ; =============== S U B R O U T I N E =======================================
.text:0000BC94
.text:0000BC94 ; Attributes: bp-based frame
.text:0000BC94
.text:0000BC94 ; private: void __thiscall CRecordVector<int>::ReserveOnePosition(void)
.text:0000BC94                 public ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
.text:0000BC94 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ proc near
.text:0000BC94                                         ; CODE XREF: CRecordVector<int>::Add(int)+1Ap
.text:0000BC94
.text:0000BC94 var_14          = dword ptr -14h
.text:0000BC94 var_10          = dword ptr -10h
.text:0000BC94 Dst             = dword ptr -0Ch
.text:0000BC94 var_8           = dword ptr -8
.text:0000BC94 var_4           = dword ptr -4
.text:0000BC94
.text:0000BC94                 push    ebp
.text:0000BC95                 mov     ebp, esp
.text:0000BC97                 sub     esp, 14h
.text:0000BC9A                 mov     eax, 0CCCCCCCCh
.text:0000BC9F                 mov     [ebp+var_14], eax
.text:0000BCA2                 mov     [ebp+var_10], eax
.text:0000BCA5                 mov     [ebp+Dst], eax
.text:0000BCA8                 mov     [ebp+var_8], eax
.text:0000BCAB                 mov     [ebp+var_4], eax
.text:0000BCAE                 mov     [ebp+var_4], ecx
.text:0000BCB1                 mov     eax, [ebp+var_4]
.text:0000BCB4                 mov     ecx, [ebp+var_4]
.text:0000BCB7                 mov     edx, [eax+4]
.text:0000BCBA                 cmp     edx, [ecx+8]
.text:0000BCBD                 jnz     loc_BD48
.text:0000BCC3                 mov     eax, [ebp+var_4]
.text:0000BCC6                 mov     ecx, [eax+8]
.text:0000BCC9                 shr     ecx, 2
.text:0000BCCC                 mov     edx, [ebp+var_4]
.text:0000BCCF                 mov     eax, [edx+8]
.text:0000BCD2                 lea     ecx, [eax+ecx+1]
.text:0000BCD6                 mov     [ebp+var_8], ecx
.text:0000BCD9                 xor     ecx, ecx
.text:0000BCDB                 mov     eax, [ebp+var_8]
.text:0000BCDE                 mov     edx, 4
.text:0000BCE3                 mul     edx
.text:0000BCE5                 seto    cl
.text:0000BCE8                 neg     ecx
.text:0000BCEA                 or      ecx, eax
.text:0000BCEC                 push    ecx             ; unsigned int
.text:0000BCED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BCF2                 add     esp, 4
.text:0000BCF5                 mov     [ebp+var_10], eax
.text:0000BCF8                 mov     eax, [ebp+var_10]
.text:0000BCFB                 mov     [ebp+Dst], eax
.text:0000BCFE                 mov     ecx, [ebp+var_4]
.text:0000BD01                 cmp     dword ptr [ecx+4], 0
.text:0000BD05                 jz      short loc_BD23
.text:0000BD07                 mov     edx, [ebp+var_4]
.text:0000BD0A                 mov     eax, [edx+4]
.text:0000BD0D                 shl     eax, 2
.text:0000BD10                 push    eax             ; Size
.text:0000BD11                 mov     ecx, [ebp+var_4]
.text:0000BD14                 mov     edx, [ecx]
.text:0000BD16                 push    edx             ; Src
.text:0000BD17                 mov     eax, [ebp+Dst]
.text:0000BD1A                 push    eax             ; Dst
.text:0000BD1B                 call    _memcpy
.text:0000BD20                 add     esp, 0Ch
.text:0000BD23
.text:0000BD23 loc_BD23:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+71j
.text:0000BD23                 mov     ecx, [ebp+var_4]
.text:0000BD26                 mov     edx, [ecx]
.text:0000BD28                 mov     [ebp+var_14], edx
.text:0000BD2B                 mov     eax, [ebp+var_14]
.text:0000BD2E                 push    eax             ; void *
.text:0000BD2F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BD34                 add     esp, 4
.text:0000BD37                 mov     ecx, [ebp+var_4]
.text:0000BD3A                 mov     edx, [ebp+Dst]
.text:0000BD3D                 mov     [ecx], edx
.text:0000BD3F                 mov     eax, [ebp+var_4]
.text:0000BD42                 mov     ecx, [ebp+var_8]
.text:0000BD45                 mov     [eax+8], ecx
.text:0000BD48
.text:0000BD48 loc_BD48:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+29j
.text:0000BD48                 add     esp, 14h
.text:0000BD4B                 cmp     ebp, esp
.text:0000BD4D                 call    __RTC_CheckEsp
.text:0000BD52                 mov     esp, ebp
.text:0000BD54                 pop     ebp
.text:0000BD55                 retn
.text:0000BD55 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ endp
.text:0000BD55
.text:0000BD55 ; ---------------------------------------------------------------------------
.text:0000BD56                 align 4
.text:0000BD56 _text           ends
.text:0000BD56
.text:0000BD58 ; ===========================================================================
.text:0000BD58
.text:0000BD58 ; Segment type: Pure code
.text:0000BD58 ; Segment permissions: Read/Execute
.text:0000BD58 _text           segment para public 'CODE' use32
.text:0000BD58                 assume cs:_text
.text:0000BD58                 ;org 0BD58h
.text:0000BD58 ; COMDAT (pick any)
.text:0000BD58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BD58
.text:0000BD58 ; =============== S U B R O U T I N E =======================================
.text:0000BD58
.text:0000BD58 ; Attributes: bp-based frame
.text:0000BD58
.text:0000BD58 ; public: long __thiscall CMyComPtr<struct IProgress>::QueryInterface<struct ICompressProgressInfo>(struct _GUID const &, struct ICompressProgressInfo * *)const
.text:0000BD58                 public ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z
.text:0000BD58 ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z proc near
.text:0000BD58                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::Create(IProgress *,bool)+34p
.text:0000BD58
.text:0000BD58 var_4           = dword ptr -4
.text:0000BD58 arg_0           = dword ptr  8
.text:0000BD58 arg_4           = dword ptr  0Ch
.text:0000BD58
.text:0000BD58                 push    ebp
.text:0000BD59                 mov     ebp, esp
.text:0000BD5B                 push    ecx
.text:0000BD5C                 push    esi
.text:0000BD5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BD64                 mov     [ebp+var_4], ecx
.text:0000BD67                 mov     esi, esp
.text:0000BD69                 mov     eax, [ebp+arg_4]
.text:0000BD6C                 push    eax
.text:0000BD6D                 mov     ecx, [ebp+arg_0]
.text:0000BD70                 push    ecx
.text:0000BD71                 mov     edx, [ebp+var_4]
.text:0000BD74                 mov     eax, [edx]
.text:0000BD76                 mov     ecx, [ebp+var_4]
.text:0000BD79                 mov     edx, [ecx]
.text:0000BD7B                 mov     eax, [eax]
.text:0000BD7D                 push    edx
.text:0000BD7E                 mov     ecx, [eax]
.text:0000BD80                 call    ecx
.text:0000BD82                 cmp     esi, esp
.text:0000BD84                 call    __RTC_CheckEsp
.text:0000BD89                 pop     esi
.text:0000BD8A                 add     esp, 4
.text:0000BD8D                 cmp     ebp, esp
.text:0000BD8F                 call    __RTC_CheckEsp
.text:0000BD94                 mov     esp, ebp
.text:0000BD96                 pop     ebp
.text:0000BD97                 retn    8
.text:0000BD97 ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z endp
.text:0000BD97
.text:0000BD97 ; ---------------------------------------------------------------------------
.text:0000BD9A                 align 4
.text:0000BD9A _text           ends
.text:0000BD9A
.text:0000BD9C ; ===========================================================================
.text:0000BD9C
.text:0000BD9C ; Segment type: Pure code
.text:0000BD9C ; Segment permissions: Read/Execute
.text:0000BD9C _text           segment para public 'CODE' use32
.text:0000BD9C                 assume cs:_text
.text:0000BD9C                 ;org 0BD9Ch
.text:0000BD9C ; COMDAT (pick any)
.text:0000BD9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000BD9C
.text:0000BD9C ; =============== S U B R O U T I N E =======================================
.text:0000BD9C
.text:0000BD9C ; Attributes: bp-based frame
.text:0000BD9C
.text:0000BD9C ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:0000BD9C                 public ??$MyMin@I@@YGIII@Z
.text:0000BD9C ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+C3p
.text:0000BD9C                                         ; NArchive::NZip::CCacheOutStream::MyWrite(uint)+D3p ...
.text:0000BD9C
.text:0000BD9C var_4           = dword ptr -4
.text:0000BD9C arg_0           = dword ptr  8
.text:0000BD9C arg_4           = dword ptr  0Ch
.text:0000BD9C
.text:0000BD9C                 push    ebp
.text:0000BD9D                 mov     ebp, esp
.text:0000BD9F                 push    ecx
.text:0000BDA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BDA7                 mov     eax, [ebp+arg_0]
.text:0000BDAA                 cmp     eax, [ebp+arg_4]
.text:0000BDAD                 jnb     short loc_BDB7
.text:0000BDAF                 mov     ecx, [ebp+arg_0]
.text:0000BDB2                 mov     [ebp+var_4], ecx
.text:0000BDB5                 jmp     short loc_BDBD
.text:0000BDB7 ; ---------------------------------------------------------------------------
.text:0000BDB7
.text:0000BDB7 loc_BDB7:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:0000BDB7                 mov     edx, [ebp+arg_4]
.text:0000BDBA                 mov     [ebp+var_4], edx
.text:0000BDBD
.text:0000BDBD loc_BDBD:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:0000BDBD                 mov     eax, [ebp+var_4]
.text:0000BDC0                 mov     esp, ebp
.text:0000BDC2                 pop     ebp
.text:0000BDC3                 retn    8
.text:0000BDC3 ??$MyMin@I@@YGIII@Z endp
.text:0000BDC3
.text:0000BDC3 _text           ends
.text:0000BDC3
UNDEF:0000BDD0 ; ===========================================================================
UNDEF:0000BDD0
UNDEF:0000BDD0 ; Segment type: Externs
UNDEF:0000BDD0 ; UNDEF
UNDEF:0000BDD0 ; __int32 __thiscall NArchive::NZip::CAddCommon::Compress(NArchive::NZip::CAddCommon *__hidden this, struct ISequentialInStream *, struct IOutStream *, unsigned int, struct ICompressProgressInfo *, struct NArchive::NZip::CCompressingResult *)
UNDEF:0000BDD0                 extrn ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z:near
UNDEF:0000BDD0                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+71p
UNDEF:0000BDD0                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+607p
UNDEF:0000BDD4                 extrn __RTC_CheckEsp:near
UNDEF:0000BDD4                                         ; CODE XREF: NArchive::NZip::CThreadInfo::WaitAndCode(void)+CEp
UNDEF:0000BDD4                                         ; NArchive::NZip::CThreadInfo::WaitAndCode(void)+F2p ...
UNDEF:0000BDD8                 extrn __RTC_Shutdown:near
UNDEF:0000BDD8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000BDDC                 extrn __RTC_InitBase:near
UNDEF:0000BDDC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000BDE0 ; __stdcall Event_Set(x)
UNDEF:0000BDE0                 extrn _Event_Set@4:near ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Set(void)+12p
UNDEF:0000BDE4 ; __stdcall Handle_WaitObject(x)
UNDEF:0000BDE4                 extrn _Handle_WaitObject@4:near
UNDEF:0000BDE4                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:0000BDE4                                         ; NWindows::CThread::Wait(void)+14p
UNDEF:0000BDE8                 extrn _IID_ICompressProgressInfo:near
UNDEF:0000BDE8                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::Create(IProgress *,bool)+29o
UNDEF:0000BDEC ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000BDEC                 extrn __imp__EnterCriticalSection@4:near
UNDEF:0000BDEC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:0000BDEC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:0000BDF0 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000BDF0                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:0000BDF0                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:0000BDF0                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:0000BDF4                 extrn ___security_cookie:near
UNDEF:0000BDF4                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+27r
UNDEF:0000BDF4                                         ; NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+25r ...
UNDEF:0000BDF8                 extrn ___CxxFrameHandler3:near
UNDEF:0000BDF8                                         ; CODE XREF: __ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z+16j
UNDEF:0000BDF8                                         ; __ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z+16j ...
UNDEF:0000BDFC ; __fastcall __security_check_cookie(x)
UNDEF:0000BDFC                 extrn @__security_check_cookie@4:near
UNDEF:0000BDFC                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2247p
UNDEF:0000BDFC                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+A2Dp ...
UNDEF:0000BE00 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000BE00                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000BE00                                         ; CODE XREF: NArchive::NZip::CMtProgressMixer2::SetRatioInfo(uint,unsigned __int64 const *,unsigned __int64 const *)+18Bp
UNDEF:0000BE00                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+53Ap ...
UNDEF:0000BE04 ; void __cdecl operator delete(void *)
UNDEF:0000BE04                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0+4p
UNDEF:0000BE04                                         ; __unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2+7p ...
UNDEF:0000BE08 ; void *__cdecl operator new(unsigned int)
UNDEF:0000BE08                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::CMtProgressMixer::Create(IProgress *,bool)+3Bp
UNDEF:0000BE08                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+1EFp ...
UNDEF:0000BE0C ; const type_info::`vftable'
UNDEF:0000BE0C                 extrn ??_7type_info@@6B@:near
UNDEF:0000BE0C                                         ; DATA XREF: .data:NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'o
UNDEF:0000BE0C                                         ; .data:ICompressProgressInfo `RTTI Type Descriptor'o ...
UNDEF:0000BE10 ; __stdcall CriticalSection_Init(x)
UNDEF:0000BE10                 extrn _CriticalSection_Init@4:near
UNDEF:0000BE10                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:0000BE14 ; const IID IID_IUnknown
UNDEF:0000BE14                 extrn _IID_IUnknown:near
UNDEF:0000BE14                                         ; DATA XREF: NArchive::NZip::CMtProgressMixer2::QueryInterface(_GUID const &,void * *)+Co
UNDEF:0000BE14                                         ; NArchive::NZip::CCacheOutStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:0000BE18 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000BE18                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000BE1C ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000BE1C                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:0000BE1C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:0000BE1C                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:0000BE20                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressProgressInfo::`vftable'o
UNDEF:0000BE20                                         ; .rdata:000058ECo ...
UNDEF:0000BE24 ; __stdcall MidAlloc(x)
UNDEF:0000BE24                 extrn _MidAlloc@4:near  ; CODE XREF: NArchive::NZip::CCacheOutStream::Allocate(void)+1Cp
UNDEF:0000BE28 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:0000BE28                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:0000BE28                                         ; CODE XREF: NArchive::NZip::CCacheOutStream::MyWrite(uint)+F5p
UNDEF:0000BE2C ; __stdcall MidFree(x)
UNDEF:0000BE2C                 extrn _MidFree@4:near   ; CODE XREF: NArchive::NZip::CCacheOutStream::~CCacheOutStream(void)+116p
UNDEF:0000BE30 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000BE30                 extrn _memcpy:near      ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+34Ep
UNDEF:0000BE30                                         ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+67p ...
UNDEF:0000BE34 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000BE34                 extrn _memset:near      ; CODE XREF: NArchive::NZip::CCacheOutStream::Write(void const *,uint,uint *)+234p
UNDEF:0000BE38 ; void __thiscall NArchive::NZip::COutArchive::MoveCurPos(NArchive::NZip::COutArchive *__hidden this, unsigned __int64)
UNDEF:0000BE38                 extrn ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z:near
UNDEF:0000BE38                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+4BCp
UNDEF:0000BE38                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+24Ep
UNDEF:0000BE3C ; __int32 __thiscall NArchive::NZip::COutArchive::Create(NArchive::NZip::COutArchive *__hidden this, struct IOutStream *)
UNDEF:0000BE3C                 extrn ?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z:near
UNDEF:0000BE3C                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+2FEp
UNDEF:0000BE40 ; __int32 NCompress::CopyStream_ExactSize(NCompress *__hidden this, struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64, struct ICompressProgressInfo *)
UNDEF:0000BE40                 extrn ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z:near
UNDEF:0000BE40                                         ; CODE XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+1B0p
UNDEF:0000BE40                                         ; NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+45Fp ...
UNDEF:0000BE44                 extrn _IID_IOutStream:near
UNDEF:0000BE44                                         ; DATA XREF: NArchive::NZip::Update(CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,ISequentialOutStream *,NArchive::NZip::CInArchive *,bool,NArchive::NZip::CCompressionMethodMode *,IArchiveUpdateCallback *)+81o
UNDEF:0000BE48 ; public: void __thiscall NArchive::NZip::COutArchive::WriteCentralDir(class CObjectVector<class NArchive::NZip::CItemOut> const &, class CBuffer<unsigned char> const *)
UNDEF:0000BE48                 extrn ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z:near
UNDEF:0000BE48                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+216Ap
UNDEF:0000BE48                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+9C8p
UNDEF:0000BE4C ; __int32 __thiscall CMtCompressProgressMixer::SetRatioInfo(CMtCompressProgressMixer *__hidden this, int, const unsigned __int64 *, const unsigned __int64 *)
UNDEF:0000BE4C                 extrn ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z:near
UNDEF:0000BE4C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+2088p
UNDEF:0000BE50 ; void __thiscall COutMemStream::DetachData(COutMemStream *__hidden this, struct CMemLockBlocks *)
UNDEF:0000BE50                 extrn ?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z:near
UNDEF:0000BE50                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1E7Ap
UNDEF:0000BE54 ; __int32 __thiscall COutMemStream::WriteToRealStream(COutMemStream *__hidden this)
UNDEF:0000BE54                 extrn ?WriteToRealStream@COutMemStream@@QAEJXZ:near
UNDEF:0000BE54                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1CF0p
UNDEF:0000BE58 ; DWORD __stdcall GetLastError()
UNDEF:0000BE58                 extrn __imp__GetLastError@0:near
UNDEF:0000BE58                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1973p
UNDEF:0000BE58                                         ; DATA XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1973r
UNDEF:0000BE5C ; DWORD __stdcall WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds)
UNDEF:0000BE5C                 extrn __imp__WaitForMultipleObjects@16:near
UNDEF:0000BE5C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1951p
UNDEF:0000BE5C                                         ; DATA XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1951r
UNDEF:0000BE60 ; void __thiscall CMemBlocks::FreeOpt(CMemBlocks *__hidden this, struct CMemBlockManagerMt *)
UNDEF:0000BE60                 extrn ?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z:near
UNDEF:0000BE60                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+188Cp
UNDEF:0000BE60                                         ; NArchive::NZip::CMemRefs::~CMemRefs(void)+76p
UNDEF:0000BE64 ; __int32 __thiscall CMemBlocks::WriteToStream(CMemBlocks *__hidden this, unsigned int, struct ISequentialOutStream *)
UNDEF:0000BE64                 extrn ?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z:near
UNDEF:0000BE64                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1826p
UNDEF:0000BE68 ; void __thiscall NArchive::NZip::COutArchive::CreateStreamForCompressing(NArchive::NZip::COutArchive *__hidden this, struct IOutStream **)
UNDEF:0000BE68                 extrn ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z:near
UNDEF:0000BE68                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1803p
UNDEF:0000BE68                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+18F7p ...
UNDEF:0000BE6C ; void __thiscall NArchive::NZip::COutArchive::PrepareWriteCompressedData(NArchive::NZip::COutArchive *__hidden this, unsigned int, unsigned __int64, bool)
UNDEF:0000BE6C                 extrn ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z:near
UNDEF:0000BE6C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+17B6p
UNDEF:0000BE6C                                         ; NArchive::NZip::WriteDirHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const *,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+34p ...
UNDEF:0000BE70 ; void __thiscall COutMemStream::Init(COutMemStream *__hidden this)
UNDEF:0000BE70                 extrn ?Init@COutMemStream@@QAEXXZ:near
UNDEF:0000BE70                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+14A6p
UNDEF:0000BE74 ; bool __thiscall NArchive::NZip::CItem::IsDir(NArchive::NZip::CItem *__hidden this)
UNDEF:0000BE74                 extrn ?IsDir@CItem@NZip@NArchive@@QBE_NXZ:near
UNDEF:0000BE74                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+E6Ep
UNDEF:0000BE74                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+1716p ...
UNDEF:0000BE78 ; int __thiscall CMemBlockManagerMt::AllocateSpaceAlways(CMemBlockManagerMt *__hidden this, unsigned int, unsigned int)
UNDEF:0000BE78                 extrn ?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z:near
UNDEF:0000BE78                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+6A3p
UNDEF:0000BE7C ; void __thiscall CMtCompressProgressMixer::Init(CMtCompressProgressMixer *__hidden this, int, struct ICompressProgressInfo *)
UNDEF:0000BE7C                 extrn ?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z:near
UNDEF:0000BE7C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+635p
UNDEF:0000BE80 ; _DWORD __thiscall NArchive::NZip::CAddCommon::~CAddCommon(NArchive::NZip::CAddCommon *__hidden this)
UNDEF:0000BE80                 extrn ??1CAddCommon@NZip@NArchive@@QAE@XZ:near
UNDEF:0000BE80                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+55Fp
UNDEF:0000BE80                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+758p ...
UNDEF:0000BE84 ; int __thiscall CMethodProps::FindProp(CMethodProps *__hidden this, unsigned __int32)
UNDEF:0000BE84                 extrn ?FindProp@CMethodProps@@QBEHK@Z:near
UNDEF:0000BE84                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+32Ep
UNDEF:0000BE84                                         ; CMethodProps::Get_NumThreads(void)+1Cp ...
UNDEF:0000BE88 ; _DWORD __thiscall NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon *__hidden this, const struct NArchive::NZip::CCompressionMethodMode *)
UNDEF:0000BE88                 extrn ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:near
UNDEF:0000BE88                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+224p
UNDEF:0000BE88                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+C3p ...
UNDEF:0000BE8C ; __int32 __thiscall NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CInArchive *__hidden this, struct NArchive::NZip::CItemEx *)
UNDEF:0000BE8C                 extrn ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:near
UNDEF:0000BE8C                                         ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+142p
UNDEF:0000BE8C                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+D71p ...
UNDEF:0000BE90                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:0000BE90                                         ; DATA XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+59o
UNDEF:0000BE94                 extrn __aulldiv:near    ; CODE XREF: NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+3CCp
UNDEF:0000BE94                                         ; NArchive::NZip::Update2(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *)+406p
UNDEF:0000BE98 ; void __thiscall CMemBlockManager::FreeSpace(CMemBlockManager *__hidden this)
UNDEF:0000BE98                 extrn ?FreeSpace@CMemBlockManager@@QAEXXZ:near
UNDEF:0000BE98                                         ; CODE XREF: CMemBlockManager::~CMemBlockManager(void)+11p
UNDEF:0000BE9C ; void __thiscall CMemBlockManagerMt::FreeSpace(CMemBlockManagerMt *__hidden this)
UNDEF:0000BE9C                 extrn ?FreeSpace@CMemBlockManagerMt@@QAEXXZ:near
UNDEF:0000BE9C                                         ; CODE XREF: CMemBlockManagerMt::~CMemBlockManagerMt(void)+37p
UNDEF:0000BEA0 ; __stdcall HandlePtr_Close(x)
UNDEF:0000BEA0                 extrn _HandlePtr_Close@4:near
UNDEF:0000BEA0                                         ; CODE XREF: NWindows::NSynchronization::CSemaphore::Close(void)+12p
UNDEF:0000BEA0                                         ; NWindows::NSynchronization::CBaseEvent::Close(void)+12p ...
UNDEF:0000BEA4 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:0000BEA4                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:0000BEA4                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+25p
UNDEF:0000BEA8 ; public: virtual long __stdcall COutMemStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:0000BEA8                 extrn ?Write@COutMemStream@@UAGJPBXIPAI@Z:near
UNDEF:0000BEA8                                         ; DATA XREF: .rdata:000062A8o
UNDEF:0000BEAC ; public: virtual long __stdcall COutMemStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:0000BEAC                 extrn ?Seek@COutMemStream@@UAGJ_JIPA_K@Z:near
UNDEF:0000BEAC                                         ; DATA XREF: .rdata:000062ACo
UNDEF:0000BEB0 ; public: virtual long __stdcall COutMemStream::SetSize(unsigned __int64)
UNDEF:0000BEB0                 extrn ?SetSize@COutMemStream@@UAGJ_K@Z:near
UNDEF:0000BEB0                                         ; DATA XREF: .rdata:000062B0o
UNDEF:0000BEB4 ; void __thiscall COutMemStream::Free(COutMemStream *__hidden this)
UNDEF:0000BEB4                 extrn ?Free@COutMemStream@@QAEXXZ:near
UNDEF:0000BEB4                                         ; CODE XREF: COutMemStream::~COutMemStream(void)+40p
UNDEF:0000BEB8 ; void __thiscall CMtCompressProgressMixer::Reinit(CMtCompressProgressMixer *__hidden this, int)
UNDEF:0000BEB8                 extrn ?Reinit@CMtCompressProgressMixer@@QAEXH@Z:near
UNDEF:0000BEB8                                         ; CODE XREF: CMtCompressProgress::Reinit(void)+1Bp
UNDEF:0000BEBC ; int __thiscall CMethodProps::GetLevel(CMethodProps *__hidden this)
UNDEF:0000BEBC                 extrn ?GetLevel@CMethodProps@@QBEHXZ:near
UNDEF:0000BEBC                                         ; CODE XREF: CMethodProps::Get_Lzma_Algo(void)+53p
UNDEF:0000BEBC                                         ; CMethodProps::Get_BZip2_BlockSize(void)+96p
UNDEF:0000BEC0 ; void __thiscall CProps::AddProp32(CProps *__hidden this, unsigned __int32, unsigned int)
UNDEF:0000BEC0                 extrn ?AddProp32@CProps@@QAEXKI@Z:near
UNDEF:0000BEC0                                         ; CODE XREF: CMethodProps::AddProp_NumThreads(uint)+17p
UNDEF:0000BEC4 ; public: __thiscall AString::AString(void)
UNDEF:0000BEC4                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000BEC4                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(void)+58p
UNDEF:0000BEC4                                         ; NArchive::NZip::CLocalItem::CLocalItem(void)+33p
UNDEF:0000BEC8 ; void __thiscall NArchive::NZip::COutArchive::SeekToCurPos(NArchive::NZip::COutArchive *__hidden this)
UNDEF:0000BEC8                 extrn ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ:near
UNDEF:0000BEC8                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)+1Dp
UNDEF:0000BECC ; void __thiscall NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::COutArchive *__hidden this, const struct NArchive::NZip::CLocalItem *)
UNDEF:0000BECC                 extrn ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z:near
UNDEF:0000BECC                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+176p
UNDEF:0000BECC                                         ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile(NArchive::NZip::CLocalItem const &)+15p
UNDEF:0000BED0 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:0000BED0                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000BED0                                         ; CODE XREF: NArchive::NZip::SetFileHeader(NArchive::NZip::COutArchive &,NArchive::NZip::CCompressionMethodMode const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &)+4Ap
UNDEF:0000BED0                                         ; NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+ACp ...
UNDEF:0000BED4 ; __stdcall Thread_Create(x, x, x)
UNDEF:0000BED4                 extrn _Thread_Create@12:near
UNDEF:0000BED4                                         ; CODE XREF: NWindows::CThread::Create(uint (*)(void *),void *)+1Ap
UNDEF:0000BED8 ; void __thiscall NArchive::NZip::COutArchive::PrepareWriteCompressedData2(NArchive::NZip::COutArchive *__hidden this, unsigned int, unsigned __int64, unsigned __int64, bool)
UNDEF:0000BED8                 extrn ?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z:near
UNDEF:0000BED8                                         ; CODE XREF: NArchive::NZip::UpdateItemOldData(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,NArchive::NZip::CItemEx const &,NArchive::NZip::CUpdateItem const &,NArchive::NZip::CItemOut &,ICompressProgressInfo *,IArchiveUpdateCallbackFile *,unsigned __int64 &)+16Ap
UNDEF:0000BEDC ; void __thiscall NArchive::NZip::COutArchive::CreateStreamForCopying(NArchive::NZip::COutArchive *__hidden this, struct ISequentialOutStream **)
UNDEF:0000BEDC                 extrn ?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z:near
UNDEF:0000BEDC                                         ; CODE XREF: NArchive::NZip::CopyBlockToArchive(ISequentialInStream *,unsigned __int64,NArchive::NZip::COutArchive &,ICompressProgressInfo *)+51p
UNDEF:0000BEE0 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0000BEE0                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0000BEE0                                         ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+15Fp
UNDEF:0000BEE0                                         ; NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+965p
UNDEF:0000BEE4 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:0000BEE4                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:0000BEE4                                         ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+B4p
UNDEF:0000BEE8 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:0000BEE8                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:0000BEE8                                         ; CODE XREF: NArchive::NZip::Update2St(NArchive::NZip::COutArchive &,NArchive::NZip::CInArchive *,CObjectVector<NArchive::NZip::CItemEx> const &,CObjectVector<NArchive::NZip::CUpdateItem> const &,NArchive::NZip::CCompressionMethodMode const *,CBuffer<uchar> const *,IArchiveUpdateCallback *,IArchiveUpdateCallbackFile *)+65p
UNDEF:0000BEEC ; public: virtual long __stdcall CMtCompressProgress::SetRatioInfo(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:0000BEEC                 extrn ?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z:near
UNDEF:0000BEEC                                         ; DATA XREF: .rdata:000086A0o
UNDEF:0000BEF0 ; public: __thiscall AString::AString(class AString const &)
UNDEF:0000BEF0                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:0000BEF0                                         ; CODE XREF: NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+9Ep
UNDEF:0000BEF0                                         ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+6Fp
UNDEF:0000BEF4 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:0000BEF4                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:0000BEF4                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:0000BEF8 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:0000BEF8                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:0000BEF8                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:0000BEFC ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000BEFC                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000BEFC                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000BF00 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000BF00                 extrn __imp__memmove:near
UNDEF:0000BF00                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:0000BF00                                         ; CRecordVector<int>::MoveItems(uint,uint)+36p
UNDEF:0000BF00                                         ; DATA XREF: ...
UNDEF:0000BF00
UNDEF:0000BF00
UNDEF:0000BF00                 end