.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B9DA20687AAA159A4702A77962A870D2
.text:00000000 ; Input CRC32 : 74238FD8
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\RandGen.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall CRandomGenerator::Init(CRandomGenerator *__hidden this)
.text:00000000                 public ?Init@CRandomGenerator@@AAEXXZ
.text:00000000 ?Init@CRandomGenerator@@AAEXXZ proc near
.text:00000000                                         ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+65p
.text:00000000
.text:00000000 var_A8          = dword ptr -0A8h
.text:00000000 var_A0          = dword ptr -0A0h
.text:00000000 PerformanceCount= LARGE_INTEGER ptr -94h
.text:00000000 var_88          = dword ptr -88h
.text:00000000 var_80          = dword ptr -80h
.text:00000000 var_74          = byte ptr -74h
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 0A8h
.text:00000009                 push    esi
.text:0000000A                 push    edi
.text:0000000B                 push    ecx
.text:0000000C                 lea     edi, [ebp+var_A8]
.text:00000012                 mov     ecx, 2Ah ; '*'
.text:00000017                 mov     eax, 0CCCCCCCCh
.text:0000001C                 rep stosd
.text:0000001E                 pop     ecx
.text:0000001F                 mov     eax, dword ptr ds:___security_cookie
.text:00000024                 xor     eax, ebp
.text:00000026                 mov     [ebp+var_4], eax
.text:00000029                 mov     [ebp+var_8], ecx
.text:0000002C                 lea     eax, [ebp+var_74]
.text:0000002F                 push    eax
.text:00000030                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:00000035                 mov     esi, esp
.text:00000037                 call    dword ptr ds:__imp__GetCurrentProcessId@0 ; GetCurrentProcessId()
.text:0000003D                 cmp     esi, esp
.text:0000003F                 call    __RTC_CheckEsp
.text:00000044                 mov     [ebp+var_80], eax
.text:00000047                 push    4
.text:00000049                 lea     ecx, [ebp+var_80]
.text:0000004C                 push    ecx
.text:0000004D                 lea     edx, [ebp+var_74]
.text:00000050                 push    edx
.text:00000051                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00000056                 mov     esi, esp
.text:00000058                 call    dword ptr ds:__imp__GetCurrentThreadId@0 ; GetCurrentThreadId()
.text:0000005E                 cmp     esi, esp
.text:00000060                 call    __RTC_CheckEsp
.text:00000065                 mov     [ebp+var_80], eax
.text:00000068                 push    4
.text:0000006A                 lea     eax, [ebp+var_80]
.text:0000006D                 push    eax
.text:0000006E                 lea     ecx, [ebp+var_74]
.text:00000071                 push    ecx
.text:00000072                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00000077                 mov     [ebp+var_88], 0
.text:00000081                 jmp     short loc_92
.text:00000083 ; ---------------------------------------------------------------------------
.text:00000083
.text:00000083 loc_83:                                 ; CODE XREF: CRandomGenerator::Init(void):loc_13Dj
.text:00000083                 mov     edx, [ebp+var_88]
.text:00000089                 add     edx, 1
.text:0000008C                 mov     [ebp+var_88], edx
.text:00000092
.text:00000092 loc_92:                                 ; CODE XREF: CRandomGenerator::Init(void)+81j
.text:00000092                 cmp     [ebp+var_88], 2
.text:00000099                 jnb     loc_142
.text:0000009F                 mov     esi, esp
.text:000000A1                 lea     eax, [ebp+PerformanceCount]
.text:000000A7                 push    eax             ; lpPerformanceCount
.text:000000A8                 call    dword ptr ds:__imp__QueryPerformanceCounter@4 ; QueryPerformanceCounter(x)
.text:000000AE                 cmp     esi, esp
.text:000000B0                 call    __RTC_CheckEsp
.text:000000B5                 test    eax, eax
.text:000000B7                 jz      short loc_CB
.text:000000B9                 push    8
.text:000000BB                 lea     ecx, [ebp+PerformanceCount]
.text:000000C1                 push    ecx
.text:000000C2                 lea     edx, [ebp+var_74]
.text:000000C5                 push    edx
.text:000000C6                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:000000CB
.text:000000CB loc_CB:                                 ; CODE XREF: CRandomGenerator::Init(void)+B7j
.text:000000CB                 mov     esi, esp
.text:000000CD                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:000000D3                 cmp     esi, esp
.text:000000D5                 call    __RTC_CheckEsp
.text:000000DA                 mov     [ebp+var_A0], eax
.text:000000E0                 push    4
.text:000000E2                 lea     eax, [ebp+var_A0]
.text:000000E8                 push    eax
.text:000000E9                 lea     ecx, [ebp+var_74]
.text:000000EC                 push    ecx
.text:000000ED                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:000000F2                 mov     [ebp+var_A8], 0
.text:000000FC                 jmp     short loc_10D
.text:000000FE ; ---------------------------------------------------------------------------
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: CRandomGenerator::Init(void)+13Bj
.text:000000FE                 mov     edx, [ebp+var_A8]
.text:00000104                 add     edx, 1
.text:00000107                 mov     [ebp+var_A8], edx
.text:0000010D
.text:0000010D loc_10D:                                ; CODE XREF: CRandomGenerator::Init(void)+FCj
.text:0000010D                 cmp     [ebp+var_A8], 64h ; 'd'
.text:00000114                 jnb     short loc_13D
.text:00000116                 mov     eax, [ebp+var_8]
.text:00000119                 push    eax
.text:0000011A                 lea     ecx, [ebp+var_74]
.text:0000011D                 push    ecx
.text:0000011E                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00000123                 lea     edx, [ebp+var_74]
.text:00000126                 push    edx
.text:00000127                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:0000012C                 push    20h ; ' '
.text:0000012E                 mov     eax, [ebp+var_8]
.text:00000131                 push    eax
.text:00000132                 lea     ecx, [ebp+var_74]
.text:00000135                 push    ecx
.text:00000136                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:0000013B                 jmp     short loc_FE
.text:0000013D ; ---------------------------------------------------------------------------
.text:0000013D
.text:0000013D loc_13D:                                ; CODE XREF: CRandomGenerator::Init(void)+114j
.text:0000013D                 jmp     loc_83
.text:00000142 ; ---------------------------------------------------------------------------
.text:00000142
.text:00000142 loc_142:                                ; CODE XREF: CRandomGenerator::Init(void)+99j
.text:00000142                 mov     edx, [ebp+var_8]
.text:00000145                 push    edx
.text:00000146                 lea     eax, [ebp+var_74]
.text:00000149                 push    eax
.text:0000014A                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:0000014F                 mov     ecx, [ebp+var_8]
.text:00000152                 mov     byte ptr [ecx+20h], 0
.text:00000156                 push    edx
.text:00000157                 mov     ecx, ebp
.text:00000159                 push    eax
.text:0000015A                 lea     edx, $LN15
.text:00000160                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000165                 pop     eax
.text:00000166                 pop     edx
.text:00000167                 pop     edi
.text:00000168                 pop     esi
.text:00000169                 mov     ecx, [ebp+var_4]
.text:0000016C                 xor     ecx, ebp
.text:0000016E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000173                 add     esp, 0A8h
.text:00000179                 cmp     ebp, esp
.text:0000017B                 call    __RTC_CheckEsp
.text:00000180                 mov     esp, ebp
.text:00000182                 pop     ebp
.text:00000183                 retn
.text:00000183 ?Init@CRandomGenerator@@AAEXXZ endp
.text:00000183
.text:00000183 ; ---------------------------------------------------------------------------
.text:00000184 $LN15           dd 4                    ; DATA XREF: CRandomGenerator::Init(void)+15Ao
.text:00000188                 dd offset $LN14
.text:0000018C $LN14           dd 0FFFFFF8Ch, 68h      ; DATA XREF: .text:00000188o
.text:00000194                 dd offset $LN10         ; "hash"
.text:00000198                 dd 0FFFFFF80h, 4
.text:000001A0                 dd offset $LN11         ; "w"
.text:000001A4                 dd 0FFFFFF6Ch, 8
.text:000001AC                 dd offset $LN12         ; "v"
.text:000001B0                 dd 0FFFFFF60h, 4
.text:000001B8                 dd offset $LN13         ; "tickCount"
.text:000001BC $LN13           db 'tickCount',0        ; DATA XREF: .text:000001B8o
.text:000001C6 $LN12           db 'v',0                ; DATA XREF: .text:000001ACo
.text:000001C8 $LN11           db 'w',0                ; DATA XREF: .text:000001A0o
.text:000001CA $LN10           db 'hash',0             ; DATA XREF: .text:00000194o
.text:000001CF                 align 10h
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; void __thiscall CRandomGenerator::Generate(CRandomGenerator *this, unsigned __int8 *, unsigned int)
.text:000001D0                 public ?Generate@CRandomGenerator@@QAEXPAEI@Z
.text:000001D0 ?Generate@CRandomGenerator@@QAEXPAEI@Z proc near
.text:000001D0
.text:000001D0 var_C8          = dword ptr -0C8h
.text:000001D0 var_C0          = byte ptr -0C0h
.text:000001D0 var_98          = dword ptr -98h
.text:000001D0 var_8C          = byte ptr -8Ch
.text:000001D0 var_1C          = byte ptr -1Ch
.text:000001D0 var_14          = dword ptr -14h
.text:000001D0 var_10          = dword ptr -10h
.text:000001D0 var_C           = dword ptr -0Ch
.text:000001D0 var_4           = dword ptr -4
.text:000001D0 arg_0           = dword ptr  8
.text:000001D0 arg_4           = dword ptr  0Ch
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 push    0FFFFFFFFh
.text:000001D5                 push    offset __ehhandler$?Generate@CRandomGenerator@@QAEXPAEI@Z
.text:000001DA                 mov     eax, large fs:0
.text:000001E0                 push    eax
.text:000001E1                 sub     esp, 0BCh
.text:000001E7                 push    edi
.text:000001E8                 push    ecx
.text:000001E9                 lea     edi, [ebp+var_C8]
.text:000001EF                 mov     ecx, 2Fh ; '/'
.text:000001F4                 mov     eax, 0CCCCCCCCh
.text:000001F9                 rep stosd
.text:000001FB                 pop     ecx
.text:000001FC                 mov     eax, dword ptr ds:___security_cookie
.text:00000201                 xor     eax, ebp
.text:00000203                 mov     [ebp+var_10], eax
.text:00000206                 push    eax
.text:00000207                 lea     eax, [ebp+var_C]
.text:0000020A                 mov     large fs:0, eax
.text:00000210                 mov     [ebp+var_14], ecx
.text:00000213                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000218                 lea     ecx, [ebp+var_1C] ; this
.text:0000021B                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000220                 mov     [ebp+var_4], 0
.text:00000227                 mov     eax, [ebp+var_14]
.text:0000022A                 movzx   ecx, byte ptr [eax+20h]
.text:0000022E                 test    ecx, ecx
.text:00000230                 jz      short loc_23A
.text:00000232                 mov     ecx, [ebp+var_14] ; this
.text:00000235                 call    ?Init@CRandomGenerator@@AAEXXZ ; CRandomGenerator::Init(void)
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+60j
.text:0000023A                                         ; CRandomGenerator::Generate(uchar *,uint):loc_312j
.text:0000023A                 cmp     [ebp+arg_4], 0
.text:0000023E                 jz      loc_317
.text:00000244                 lea     edx, [ebp+var_8C]
.text:0000024A                 push    edx
.text:0000024B                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:00000250                 push    20h ; ' '
.text:00000252                 mov     eax, [ebp+var_14]
.text:00000255                 push    eax
.text:00000256                 lea     ecx, [ebp+var_8C]
.text:0000025C                 push    ecx
.text:0000025D                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00000262                 mov     edx, [ebp+var_14]
.text:00000265                 push    edx
.text:00000266                 lea     eax, [ebp+var_8C]
.text:0000026C                 push    eax
.text:0000026D                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00000272                 lea     ecx, [ebp+var_8C]
.text:00000278                 push    ecx
.text:00000279                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:0000027E                 mov     [ebp+var_98], 0F672ABD1h
.text:00000288                 push    4
.text:0000028A                 lea     edx, [ebp+var_98]
.text:00000290                 push    edx
.text:00000291                 lea     eax, [ebp+var_8C]
.text:00000297                 push    eax
.text:00000298                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:0000029D                 push    20h ; ' '
.text:0000029F                 mov     ecx, [ebp+var_14]
.text:000002A2                 push    ecx
.text:000002A3                 lea     edx, [ebp+var_8C]
.text:000002A9                 push    edx
.text:000002AA                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:000002AF                 lea     eax, [ebp+var_C0]
.text:000002B5                 push    eax
.text:000002B6                 lea     ecx, [ebp+var_8C]
.text:000002BC                 push    ecx
.text:000002BD                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:000002C2                 mov     [ebp+var_C8], 0
.text:000002CC                 jmp     short loc_2E6
.text:000002CE ; ---------------------------------------------------------------------------
.text:000002CE
.text:000002CE loc_2CE:                                ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+140j
.text:000002CE                 mov     edx, [ebp+var_C8]
.text:000002D4                 add     edx, 1
.text:000002D7                 mov     [ebp+var_C8], edx
.text:000002DD                 mov     eax, [ebp+arg_4]
.text:000002E0                 sub     eax, 1
.text:000002E3                 mov     [ebp+arg_4], eax
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+FCj
.text:000002E6                 cmp     [ebp+var_C8], 20h ; ' '
.text:000002ED                 jnb     short loc_312
.text:000002EF                 cmp     [ebp+arg_4], 0
.text:000002F3                 jz      short loc_312
.text:000002F5                 mov     ecx, [ebp+arg_0]
.text:000002F8                 mov     edx, [ebp+var_C8]
.text:000002FE                 mov     al, [ebp+edx+var_C0]
.text:00000305                 mov     [ecx], al
.text:00000307                 mov     ecx, [ebp+arg_0]
.text:0000030A                 add     ecx, 1
.text:0000030D                 mov     [ebp+arg_0], ecx
.text:00000310                 jmp     short loc_2CE
.text:00000312 ; ---------------------------------------------------------------------------
.text:00000312
.text:00000312 loc_312:                                ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+11Dj
.text:00000312                                         ; CRandomGenerator::Generate(uchar *,uint)+123j
.text:00000312                 jmp     loc_23A
.text:00000317 ; ---------------------------------------------------------------------------
.text:00000317
.text:00000317 loc_317:                                ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+6Ej
.text:00000317                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000031E                 lea     ecx, [ebp+var_1C] ; this
.text:00000321                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000326                 push    edx
.text:00000327                 mov     ecx, ebp
.text:00000329                 push    eax
.text:0000032A                 lea     edx, $LN16
.text:00000330                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000335                 pop     eax
.text:00000336                 pop     edx
.text:00000337                 mov     ecx, [ebp+var_C]
.text:0000033A                 mov     large fs:0, ecx
.text:00000341                 pop     ecx
.text:00000342                 pop     edi
.text:00000343                 mov     ecx, [ebp+var_10]
.text:00000346                 xor     ecx, ebp
.text:00000348                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000034D                 add     esp, 0C8h
.text:00000353                 cmp     ebp, esp
.text:00000355                 call    __RTC_CheckEsp
.text:0000035A                 mov     esp, ebp
.text:0000035C                 pop     ebp
.text:0000035D                 retn    8
.text:0000035D ?Generate@CRandomGenerator@@QAEXPAEI@Z endp
.text:0000035D
.text:0000035D ; ---------------------------------------------------------------------------
.text:00000360 $LN16           dd 4                    ; DATA XREF: CRandomGenerator::Generate(uchar *,uint)+15Ao
.text:00000364                 dd offset $LN15_0
.text:00000368 $LN15_0         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000364o
.text:00000370                 dd offset $LN10_0       ; "lock"
.text:00000374                 dd 0FFFFFF74h, 68h
.text:0000037C                 dd offset $LN11_0       ; "hash"
.text:00000380                 dd 0FFFFFF68h, 4
.text:00000388                 dd offset $LN12_0       ; "salt"
.text:0000038C                 dd 0FFFFFF40h, 20h
.text:00000394                 dd offset $LN13_0       ; "buff"
.text:00000398 $LN13_0         db 'buff',0             ; DATA XREF: .text:00000394o
.text:0000039D $LN12_0         db 'salt',0             ; DATA XREF: .text:00000388o
.text:000003A2 $LN11_0         db 'hash',0             ; DATA XREF: .text:0000037Co
.text:000003A7 $LN10_0         db 'lock',0             ; DATA XREF: .text:00000370o
.text:000003A7 _text           ends
.text:000003A7
.rtc$TMZ:000003AC ; ===========================================================================
.rtc$TMZ:000003AC
.rtc$TMZ:000003AC ; Segment type: Pure data
.rtc$TMZ:000003AC ; Segment permissions: Read
.rtc$TMZ:000003AC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003AC                 assume cs:_rtc$TMZ
.rtc$TMZ:000003AC                 ;org 3ACh
.rtc$TMZ:000003AC ; COMDAT (pick any)
.rtc$TMZ:000003AC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003AC _rtc$TMZ        ends
.rtc$TMZ:000003AC
.rtc$IMZ:000003B0 ; ===========================================================================
.rtc$IMZ:000003B0
.rtc$IMZ:000003B0 ; Segment type: Pure data
.rtc$IMZ:000003B0 ; Segment permissions: Read
.rtc$IMZ:000003B0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003B0                 assume cs:_rtc$IMZ
.rtc$IMZ:000003B0                 ;org 3B0h
.rtc$IMZ:000003B0 ; COMDAT (pick any)
.rtc$IMZ:000003B0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003B0 _rtc$IMZ        ends
.rtc$IMZ:000003B0
.text$x:000003B4 ; ===========================================================================
.text$x:000003B4
.text$x:000003B4 ; Segment type: Pure code
.text$x:000003B4 ; Segment permissions: Read/Execute
.text$x:000003B4 _text$x         segment para public 'CODE' use32
.text$x:000003B4                 assume cs:_text$x
.text$x:000003B4                 ;org 3B4h
.text$x:000003B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000003B4
.text$x:000003B4 ; =============== S U B R O U T I N E =======================================
.text$x:000003B4
.text$x:000003B4
.text$x:000003B4 __unwindfunclet$?Generate@CRandomGenerator@@QAEXPAEI@Z$0 proc near
.text$x:000003B4                                         ; DATA XREF: .xdata$x:000003E8o
.text$x:000003B4                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000003B7                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000003B7 __unwindfunclet$?Generate@CRandomGenerator@@QAEXPAEI@Z$0 endp
.text$x:000003B7
.text$x:000003BC
.text$x:000003BC ; =============== S U B R O U T I N E =======================================
.text$x:000003BC
.text$x:000003BC
.text$x:000003BC __ehhandler$?Generate@CRandomGenerator@@QAEXPAEI@Z proc near
.text$x:000003BC                                         ; DATA XREF: CRandomGenerator::Generate(uchar *,uint)+5o
.text$x:000003BC
.text$x:000003BC arg_4           = dword ptr  8
.text$x:000003BC
.text$x:000003BC                 mov     edx, [esp+arg_4]
.text$x:000003C0                 lea     eax, [edx+0Ch]
.text$x:000003C3                 mov     ecx, [edx-0C4h]
.text$x:000003C9                 xor     ecx, eax
.text$x:000003CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003D0                 mov     ecx, [edx-4]
.text$x:000003D3                 xor     ecx, eax
.text$x:000003D5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003DA                 mov     eax, offset __ehfuncinfo$?Generate@CRandomGenerator@@QAEXPAEI@Z
.text$x:000003DF                 jmp     ___CxxFrameHandler3
.text$x:000003DF __ehhandler$?Generate@CRandomGenerator@@QAEXPAEI@Z endp
.text$x:000003DF
.text$x:000003DF _text$x         ends
.text$x:000003DF
.xdata$x:000003E4 ; ===========================================================================
.xdata$x:000003E4
.xdata$x:000003E4 ; Segment type: Pure data
.xdata$x:000003E4 ; Segment permissions: Read
.xdata$x:000003E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003E4                 assume cs:_xdata$x
.xdata$x:000003E4                 ;org 3E4h
.xdata$x:000003E4 __unwindtable$?Generate@CRandomGenerator@@QAEXPAEI@Z db 0FFh
.xdata$x:000003E4                                         ; DATA XREF: .xdata$x:000003F4o
.xdata$x:000003E5                 db 0FFh
.xdata$x:000003E6                 db 0FFh
.xdata$x:000003E7                 db 0FFh
.xdata$x:000003E8                 dd offset __unwindfunclet$?Generate@CRandomGenerator@@QAEXPAEI@Z$0
.xdata$x:000003EC __ehfuncinfo$?Generate@CRandomGenerator@@QAEXPAEI@Z db  22h ; "
.xdata$x:000003EC                                         ; DATA XREF: __ehhandler$?Generate@CRandomGenerator@@QAEXPAEI@Z+1Eo
.xdata$x:000003ED                 db    5
.xdata$x:000003EE                 db  93h ; ô
.xdata$x:000003EF                 db  19h
.xdata$x:000003F0                 db    1
.xdata$x:000003F1                 db    0
.xdata$x:000003F2                 db    0
.xdata$x:000003F3                 db    0
.xdata$x:000003F4                 dd offset __unwindtable$?Generate@CRandomGenerator@@QAEXPAEI@Z
.xdata$x:000003F8                 db    0
.xdata$x:000003F9                 db    0
.xdata$x:000003FA                 db    0
.xdata$x:000003FB                 db    0
.xdata$x:000003FC                 db    0
.xdata$x:000003FD                 db    0
.xdata$x:000003FE                 db    0
.xdata$x:000003FF                 db    0
.xdata$x:00000400                 db    0
.xdata$x:00000401                 db    0
.xdata$x:00000402                 db    0
.xdata$x:00000403                 db    0
.xdata$x:00000404                 db    0
.xdata$x:00000405                 db    0
.xdata$x:00000406                 db    0
.xdata$x:00000407                 db    0
.xdata$x:00000408                 db    0
.xdata$x:00000409                 db    0
.xdata$x:0000040A                 db    0
.xdata$x:0000040B                 db    0
.xdata$x:0000040C                 db    1
.xdata$x:0000040D                 db    0
.xdata$x:0000040E                 db    0
.xdata$x:0000040F                 db    0
.xdata$x:0000040F _xdata$x        ends
.xdata$x:0000040F
.text:00000410 ; ===========================================================================
.text:00000410
.text:00000410 ; Segment type: Pure code
.text:00000410 ; Segment permissions: Read/Execute
.text:00000410 _text           segment para public 'CODE' use32
.text:00000410                 assume cs:_text
.text:00000410                 ;org 410h
.text:00000410 ; COMDAT (pick any)
.text:00000410                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:00000410                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:00000410 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:00000410                                         ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+4Bp
.text:00000410
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 push    ecx
.text:00000414                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000041B                 mov     [ebp+var_4], ecx
.text:0000041E                 mov     eax, [ebp+var_4]
.text:00000421                 mov     ecx, [ebp+arg_0]
.text:00000424                 mov     [eax], ecx
.text:00000426                 mov     edx, [ebp+var_4]
.text:00000429                 mov     ecx, [edx]      ; this
.text:0000042B                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00000430                 mov     eax, [ebp+var_4]
.text:00000433                 add     esp, 4
.text:00000436                 cmp     ebp, esp
.text:00000438                 call    __RTC_CheckEsp
.text:0000043D                 mov     esp, ebp
.text:0000043F                 pop     ebp
.text:00000440                 retn    4
.text:00000440 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00000440
.text:00000440 ; ---------------------------------------------------------------------------
.text:00000443                 align 4
.text:00000443 _text           ends
.text:00000443
.text:00000444 ; ===========================================================================
.text:00000444
.text:00000444 ; Segment type: Pure code
.text:00000444 ; Segment permissions: Read/Execute
.text:00000444 _text           segment para public 'CODE' use32
.text:00000444                 assume cs:_text
.text:00000444                 ;org 444h
.text:00000444 ; COMDAT (pick any)
.text:00000444                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000444
.text:00000444 ; =============== S U B R O U T I N E =======================================
.text:00000444
.text:00000444 ; Attributes: bp-based frame
.text:00000444
.text:00000444 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00000444                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00000444 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00000444                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00000444
.text:00000444 lpCriticalSection= dword ptr -4
.text:00000444
.text:00000444                 push    ebp
.text:00000445                 mov     ebp, esp
.text:00000447                 push    ecx
.text:00000448                 push    esi
.text:00000449                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00000450                 mov     [ebp+lpCriticalSection], ecx
.text:00000453                 mov     esi, esp
.text:00000455                 mov     eax, [ebp+lpCriticalSection]
.text:00000458                 push    eax             ; lpCriticalSection
.text:00000459                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0000045F                 cmp     esi, esp
.text:00000461                 call    __RTC_CheckEsp
.text:00000466                 pop     esi
.text:00000467                 add     esp, 4
.text:0000046A                 cmp     ebp, esp
.text:0000046C                 call    __RTC_CheckEsp
.text:00000471                 mov     esp, ebp
.text:00000473                 pop     ebp
.text:00000474                 retn
.text:00000474 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00000474
.text:00000474 ; ---------------------------------------------------------------------------
.text:00000475                 align 4
.text:00000475 _text           ends
.text:00000475
.text:00000478 ; ===========================================================================
.text:00000478
.text:00000478 ; Segment type: Pure code
.text:00000478 ; Segment permissions: Read/Execute
.text:00000478 _text           segment para public 'CODE' use32
.text:00000478                 assume cs:_text
.text:00000478                 ;org 478h
.text:00000478 ; COMDAT (pick any)
.text:00000478                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000478
.text:00000478 ; =============== S U B R O U T I N E =======================================
.text:00000478
.text:00000478 ; Attributes: bp-based frame
.text:00000478
.text:00000478 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00000478                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:00000478 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:00000478                                         ; CODE XREF: CRandomGenerator::Generate(uchar *,uint)+151p
.text:00000478                                         ; __unwindfunclet$?Generate@CRandomGenerator@@QAEXPAEI@Z$0+3j
.text:00000478
.text:00000478 var_4           = dword ptr -4
.text:00000478
.text:00000478                 push    ebp
.text:00000479                 mov     ebp, esp
.text:0000047B                 push    ecx
.text:0000047C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000483                 mov     [ebp+var_4], ecx
.text:00000486                 mov     ecx, [ebp+var_4] ; this
.text:00000489                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:0000048E                 add     esp, 4
.text:00000491                 cmp     ebp, esp
.text:00000493                 call    __RTC_CheckEsp
.text:00000498                 mov     esp, ebp
.text:0000049A                 pop     ebp
.text:0000049B                 retn
.text:0000049B ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:0000049B
.text:0000049B _text           ends
.text:0000049B
.text:0000049C ; ===========================================================================
.text:0000049C
.text:0000049C ; Segment type: Pure code
.text:0000049C ; Segment permissions: Read/Execute
.text:0000049C _text           segment para public 'CODE' use32
.text:0000049C                 assume cs:_text
.text:0000049C                 ;org 49Ch
.text:0000049C ; COMDAT (pick any)
.text:0000049C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000049C
.text:0000049C ; =============== S U B R O U T I N E =======================================
.text:0000049C
.text:0000049C ; Attributes: bp-based frame
.text:0000049C
.text:0000049C ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:0000049C                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:0000049C ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:0000049C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:0000049C
.text:0000049C var_4           = dword ptr -4
.text:0000049C
.text:0000049C                 push    ebp
.text:0000049D                 mov     ebp, esp
.text:0000049F                 push    ecx
.text:000004A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004A7                 mov     [ebp+var_4], ecx
.text:000004AA                 mov     eax, [ebp+var_4]
.text:000004AD                 mov     ecx, [eax]      ; this
.text:000004AF                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000004B4                 add     esp, 4
.text:000004B7                 cmp     ebp, esp
.text:000004B9                 call    __RTC_CheckEsp
.text:000004BE                 mov     esp, ebp
.text:000004C0                 pop     ebp
.text:000004C1                 retn
.text:000004C1 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:000004C1
.text:000004C1 ; ---------------------------------------------------------------------------
.text:000004C2                 align 4
.text:000004C2 _text           ends
.text:000004C2
.text:000004C4 ; ===========================================================================
.text:000004C4
.text:000004C4 ; Segment type: Pure code
.text:000004C4 ; Segment permissions: Read/Execute
.text:000004C4 _text           segment para public 'CODE' use32
.text:000004C4                 assume cs:_text
.text:000004C4                 ;org 4C4h
.text:000004C4 ; COMDAT (pick any)
.text:000004C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000004C4
.text:000004C4 ; =============== S U B R O U T I N E =======================================
.text:000004C4
.text:000004C4 ; Attributes: bp-based frame
.text:000004C4
.text:000004C4 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000004C4                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:000004C4 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:000004C4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:000004C4
.text:000004C4 lpCriticalSection= dword ptr -4
.text:000004C4
.text:000004C4                 push    ebp
.text:000004C5                 mov     ebp, esp
.text:000004C7                 push    ecx
.text:000004C8                 push    esi
.text:000004C9                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:000004D0                 mov     [ebp+lpCriticalSection], ecx
.text:000004D3                 mov     esi, esp
.text:000004D5                 mov     eax, [ebp+lpCriticalSection]
.text:000004D8                 push    eax             ; lpCriticalSection
.text:000004D9                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000004DF                 cmp     esi, esp
.text:000004E1                 call    __RTC_CheckEsp
.text:000004E6                 pop     esi
.text:000004E7                 add     esp, 4
.text:000004EA                 cmp     ebp, esp
.text:000004EC                 call    __RTC_CheckEsp
.text:000004F1                 mov     esp, ebp
.text:000004F3                 pop     ebp
.text:000004F4                 retn
.text:000004F4 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000004F4
.text:000004F4 ; ---------------------------------------------------------------------------
.text:000004F5                 align 4
.text:000004F5 _text           ends
.text:000004F5
.text$yc:000004F8 ; ===========================================================================
.text$yc:000004F8
.text$yc:000004F8 ; Segment type: Pure code
.text$yc:000004F8 ; Segment permissions: Read/Execute
.text$yc:000004F8 _text$yc        segment para public 'CODE' use32
.text$yc:000004F8                 assume cs:_text$yc
.text$yc:000004F8                 ;org 4F8h
.text$yc:000004F8 ; COMDAT (pick any)
.text$yc:000004F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:000004F8
.text$yc:000004F8 ; =============== S U B R O U T I N E =======================================
.text$yc:000004F8
.text$yc:000004F8 ; Attributes: bp-based frame
.text$yc:000004F8
.text$yc:000004F8 ; void __cdecl `dynamic initializer for 'g_CriticalSection''(void)
.text$yc:000004F8 ??__Eg_CriticalSection@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_g_CriticalSection$initializer$o
.text$yc:000004F8                 push    ebp
.text$yc:000004F9                 mov     ebp, esp
.text$yc:000004FB                 mov     ecx, offset _g_CriticalSection ; this
.text$yc:00000500                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:00000505                 push    offset ??__Fg_CriticalSection@@YAXXZ ; void (__cdecl *)()
.text$yc:0000050A                 call    _atexit
.text$yc:0000050F                 add     esp, 4
.text$yc:00000512                 cmp     ebp, esp
.text$yc:00000514                 call    __RTC_CheckEsp
.text$yc:00000519                 pop     ebp
.text$yc:0000051A                 retn
.text$yc:0000051A ??__Eg_CriticalSection@@YAXXZ endp
.text$yc:0000051A
.text$yc:0000051A ; ---------------------------------------------------------------------------
.text$yc:0000051B                 align 4
.text$yc:0000051B _text$yc        ends
.text$yc:0000051B
.text:0000051C ; ===========================================================================
.text:0000051C
.text:0000051C ; Segment type: Pure code
.text:0000051C ; Segment permissions: Read/Execute
.text:0000051C _text           segment para public 'CODE' use32
.text:0000051C                 assume cs:_text
.text:0000051C                 ;org 51Ch
.text:0000051C ; COMDAT (pick any)
.text:0000051C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000051C
.text:0000051C ; =============== S U B R O U T I N E =======================================
.text:0000051C
.text:0000051C ; Attributes: bp-based frame
.text:0000051C
.text:0000051C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:0000051C                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:0000051C ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000051C                                         ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+8p
.text:0000051C
.text:0000051C var_4           = dword ptr -4
.text:0000051C
.text:0000051C                 push    ebp
.text:0000051D                 mov     ebp, esp
.text:0000051F                 push    ecx
.text:00000520                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000527                 mov     [ebp+var_4], ecx
.text:0000052A                 mov     eax, [ebp+var_4]
.text:0000052D                 push    eax
.text:0000052E                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00000533                 mov     eax, [ebp+var_4]
.text:00000536                 add     esp, 4
.text:00000539                 cmp     ebp, esp
.text:0000053B                 call    __RTC_CheckEsp
.text:00000540                 mov     esp, ebp
.text:00000542                 pop     ebp
.text:00000543                 retn
.text:00000543 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00000543
.text:00000543 _text           ends
.text:00000543
.text$yc:00000544 ; ===========================================================================
.text$yc:00000544
.text$yc:00000544 ; Segment type: Pure code
.text$yc:00000544 ; Segment permissions: Read/Execute
.text$yc:00000544 _text$yc        segment para public 'CODE' use32
.text$yc:00000544                 assume cs:_text$yc
.text$yc:00000544                 ;org 544h
.text$yc:00000544 ; COMDAT (pick any)
.text$yc:00000544                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:00000544
.text$yc:00000544 ; =============== S U B R O U T I N E =======================================
.text$yc:00000544
.text$yc:00000544 ; Attributes: bp-based frame
.text$yc:00000544
.text$yc:00000544 ; void __cdecl `dynamic initializer for 'g_RandomGenerator''(void)
.text$yc:00000544 ??__Eg_RandomGenerator@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_g_RandomGenerator$initializer$o
.text$yc:00000544                 push    ebp
.text$yc:00000545                 mov     ebp, esp
.text$yc:00000547                 mov     ecx, offset ?g_RandomGenerator@@3VCRandomGenerator@@A ; this
.text$yc:0000054C                 call    ??0CRandomGenerator@@QAE@XZ ; CRandomGenerator::CRandomGenerator(void)
.text$yc:00000551                 cmp     ebp, esp
.text$yc:00000553                 call    __RTC_CheckEsp
.text$yc:00000558                 pop     ebp
.text$yc:00000559                 retn
.text$yc:00000559 ??__Eg_RandomGenerator@@YAXXZ endp
.text$yc:00000559
.text$yc:00000559 ; ---------------------------------------------------------------------------
.text$yc:0000055A                 align 4
.text$yc:0000055A _text$yc        ends
.text$yc:0000055A
.text:0000055C ; ===========================================================================
.text:0000055C
.text:0000055C ; Segment type: Pure code
.text:0000055C ; Segment permissions: Read/Execute
.text:0000055C _text           segment para public 'CODE' use32
.text:0000055C                 assume cs:_text
.text:0000055C                 ;org 55Ch
.text:0000055C ; COMDAT (pick any)
.text:0000055C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000055C
.text:0000055C ; =============== S U B R O U T I N E =======================================
.text:0000055C
.text:0000055C ; Attributes: bp-based frame
.text:0000055C
.text:0000055C ; _DWORD __thiscall CRandomGenerator::CRandomGenerator(CRandomGenerator *__hidden this)
.text:0000055C                 public ??0CRandomGenerator@@QAE@XZ
.text:0000055C ??0CRandomGenerator@@QAE@XZ proc near   ; CODE XREF: `dynamic initializer for 'g_RandomGenerator''(void)+8p
.text:0000055C
.text:0000055C var_4           = dword ptr -4
.text:0000055C
.text:0000055C                 push    ebp
.text:0000055D                 mov     ebp, esp
.text:0000055F                 push    ecx
.text:00000560                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000567                 mov     [ebp+var_4], ecx
.text:0000056A                 mov     eax, [ebp+var_4]
.text:0000056D                 mov     byte ptr [eax+20h], 1
.text:00000571                 mov     eax, [ebp+var_4]
.text:00000574                 mov     esp, ebp
.text:00000576                 pop     ebp
.text:00000577                 retn
.text:00000577 ??0CRandomGenerator@@QAE@XZ endp
.text:00000577
.text:00000577 _text           ends
.text:00000577
.text$yd:00000578 ; ===========================================================================
.text$yd:00000578
.text$yd:00000578 ; Segment type: Pure code
.text$yd:00000578 ; Segment permissions: Read/Execute
.text$yd:00000578 _text$yd        segment para public 'CODE' use32
.text$yd:00000578                 assume cs:_text$yd
.text$yd:00000578                 ;org 578h
.text$yd:00000578 ; COMDAT (pick any)
.text$yd:00000578                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yd:00000578
.text$yd:00000578 ; =============== S U B R O U T I N E =======================================
.text$yd:00000578
.text$yd:00000578 ; Attributes: bp-based frame
.text$yd:00000578
.text$yd:00000578 ; void __cdecl `dynamic atexit destructor for 'g_CriticalSection''()
.text$yd:00000578 ??__Fg_CriticalSection@@YAXXZ proc near ; DATA XREF: `dynamic initializer for 'g_CriticalSection''(void)+Do
.text$yd:00000578                 push    ebp
.text$yd:00000579                 mov     ebp, esp
.text$yd:0000057B                 mov     ecx, offset _g_CriticalSection ; this
.text$yd:00000580                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00000585                 cmp     ebp, esp
.text$yd:00000587                 call    __RTC_CheckEsp
.text$yd:0000058C                 pop     ebp
.text$yd:0000058D                 retn
.text$yd:0000058D ??__Fg_CriticalSection@@YAXXZ endp
.text$yd:0000058D
.text$yd:0000058D ; ---------------------------------------------------------------------------
.text$yd:0000058E                 align 10h
.text$yd:0000058E _text$yd        ends
.text$yd:0000058E
.text:00000590 ; ===========================================================================
.text:00000590
.text:00000590 ; Segment type: Pure code
.text:00000590 ; Segment permissions: Read/Execute
.text:00000590 _text           segment para public 'CODE' use32
.text:00000590                 assume cs:_text
.text:00000590                 ;org 590h
.text:00000590 ; COMDAT (pick any)
.text:00000590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000590
.text:00000590 ; =============== S U B R O U T I N E =======================================
.text:00000590
.text:00000590 ; Attributes: bp-based frame
.text:00000590
.text:00000590 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00000590                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00000590 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00000590                                         ; CODE XREF: `dynamic atexit destructor for 'g_CriticalSection''(void)+8p
.text:00000590
.text:00000590 lpCriticalSection= dword ptr -4
.text:00000590
.text:00000590                 push    ebp
.text:00000591                 mov     ebp, esp
.text:00000593                 push    ecx
.text:00000594                 push    esi
.text:00000595                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000059C                 mov     [ebp+lpCriticalSection], ecx
.text:0000059F                 mov     esi, esp
.text:000005A1                 mov     eax, [ebp+lpCriticalSection]
.text:000005A4                 push    eax             ; lpCriticalSection
.text:000005A5                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:000005AB                 cmp     esi, esp
.text:000005AD                 call    __RTC_CheckEsp
.text:000005B2                 pop     esi
.text:000005B3                 add     esp, 4
.text:000005B6                 cmp     ebp, esp
.text:000005B8                 call    __RTC_CheckEsp
.text:000005BD                 mov     esp, ebp
.text:000005BF                 pop     ebp
.text:000005C0                 retn
.text:000005C0 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:000005C0
.text:000005C0 ; ---------------------------------------------------------------------------
.text:000005C1                 align 4
.text:000005C1 _text           ends
.text:000005C1
.bss:000005C4 ; ===========================================================================
.bss:000005C4
.bss:000005C4 ; Segment type: Uninitialized
.bss:000005C4 ; Segment permissions: Read/Write
.bss:000005C4 _bss            segment dword public 'BSS' use32
.bss:000005C4                 assume cs:_bss
.bss:000005C4                 ;org 5C4h
.bss:000005C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:000005C4 ; NWindows::NSynchronization::CCriticalSection g_CriticalSection
.bss:000005C4 _g_CriticalSection db    ? ;            ; DATA XREF: CRandomGenerator::Generate(uchar *,uint)+43o
.bss:000005C4                                         ; `dynamic initializer for 'g_CriticalSection''(void)+3o ...
.bss:000005C5                 db    ? ;
.bss:000005C6                 db    ? ;
.bss:000005C7                 db    ? ;
.bss:000005C8                 db    ? ;
.bss:000005C9                 db    ? ;
.bss:000005CA                 db    ? ;
.bss:000005CB                 db    ? ;
.bss:000005CC                 db    ? ;
.bss:000005CD                 db    ? ;
.bss:000005CE                 db    ? ;
.bss:000005CF                 db    ? ;
.bss:000005D0                 db    ? ;
.bss:000005D1                 db    ? ;
.bss:000005D2                 db    ? ;
.bss:000005D3                 db    ? ;
.bss:000005D4                 db    ? ;
.bss:000005D5                 db    ? ;
.bss:000005D6                 db    ? ;
.bss:000005D7                 db    ? ;
.bss:000005D8                 db    ? ;
.bss:000005D9                 db    ? ;
.bss:000005DA                 db    ? ;
.bss:000005DB                 db    ? ;
.bss:000005DC                 public ?g_RandomGenerator@@3VCRandomGenerator@@A
.bss:000005DC ; CRandomGenerator g_RandomGenerator
.bss:000005DC ?g_RandomGenerator@@3VCRandomGenerator@@A db    ? ;
.bss:000005DC                                         ; DATA XREF: `dynamic initializer for 'g_RandomGenerator''(void)+3o
.bss:000005DD                 db    ? ;
.bss:000005DE                 db    ? ;
.bss:000005DF                 db    ? ;
.bss:000005E0                 db    ? ;
.bss:000005E1                 db    ? ;
.bss:000005E2                 db    ? ;
.bss:000005E3                 db    ? ;
.bss:000005E4                 db    ? ;
.bss:000005E5                 db    ? ;
.bss:000005E6                 db    ? ;
.bss:000005E7                 db    ? ;
.bss:000005E8                 db    ? ;
.bss:000005E9                 db    ? ;
.bss:000005EA                 db    ? ;
.bss:000005EB                 db    ? ;
.bss:000005EC                 db    ? ;
.bss:000005ED                 db    ? ;
.bss:000005EE                 db    ? ;
.bss:000005EF                 db    ? ;
.bss:000005F0                 db    ? ;
.bss:000005F1                 db    ? ;
.bss:000005F2                 db    ? ;
.bss:000005F3                 db    ? ;
.bss:000005F4                 db    ? ;
.bss:000005F5                 db    ? ;
.bss:000005F6                 db    ? ;
.bss:000005F7                 db    ? ;
.bss:000005F8                 db    ? ;
.bss:000005F9                 db    ? ;
.bss:000005FA                 db    ? ;
.bss:000005FB                 db    ? ;
.bss:000005FC                 db    ? ;
.bss:000005FD                 align 10h
.bss:000005FD _bss            ends
.bss:000005FD
.CRT$XCU:00000600 ; ===========================================================================
.CRT$XCU:00000600
.CRT$XCU:00000600 ; Segment type: Pure data
.CRT$XCU:00000600 ; Segment permissions: Read
.CRT$XCU:00000600 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000600                 assume cs:_CRT$XCU
.CRT$XCU:00000600                 ;org 600h
.CRT$XCU:00000600 _g_CriticalSection$initializer$ dd offset ??__Eg_CriticalSection@@YAXXZ ; `dynamic initializer for 'g_CriticalSection''(void)
.CRT$XCU:00000604 _g_RandomGenerator$initializer$ dd offset ??__Eg_RandomGenerator@@YAXXZ ; `dynamic initializer for 'g_RandomGenerator''(void)
.CRT$XCU:00000604 _CRT$XCU        ends
.CRT$XCU:00000604
UNDEF:00000610 ; ===========================================================================
UNDEF:00000610
UNDEF:00000610 ; Segment type: Externs
UNDEF:00000610 ; UNDEF
UNDEF:00000610 ; __stdcall Sha256_Final(x, x)
UNDEF:00000610                 extrn _Sha256_Final@8:near
UNDEF:00000610                                         ; CODE XREF: CRandomGenerator::Init(void)+11Ep
UNDEF:00000610                                         ; CRandomGenerator::Init(void)+14Ap ...
UNDEF:00000614 ; DWORD __stdcall GetTickCount()
UNDEF:00000614                 extrn __imp__GetTickCount@0:near
UNDEF:00000614                                         ; CODE XREF: CRandomGenerator::Init(void)+CDp
UNDEF:00000614                                         ; DATA XREF: CRandomGenerator::Init(void)+CDr
UNDEF:00000618 ; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
UNDEF:00000618                 extrn __imp__QueryPerformanceCounter@4:near
UNDEF:00000618                                         ; CODE XREF: CRandomGenerator::Init(void)+A8p
UNDEF:00000618                                         ; DATA XREF: CRandomGenerator::Init(void)+A8r
UNDEF:0000061C ; DWORD __stdcall GetCurrentThreadId()
UNDEF:0000061C                 extrn __imp__GetCurrentThreadId@0:near
UNDEF:0000061C                                         ; CODE XREF: CRandomGenerator::Init(void)+58p
UNDEF:0000061C                                         ; DATA XREF: CRandomGenerator::Init(void)+58r
UNDEF:00000620 ; __stdcall Sha256_Update(x, x, x)
UNDEF:00000620                 extrn _Sha256_Update@12:near
UNDEF:00000620                                         ; CODE XREF: CRandomGenerator::Init(void)+51p
UNDEF:00000620                                         ; CRandomGenerator::Init(void)+72p ...
UNDEF:00000624 ; DWORD __stdcall GetCurrentProcessId()
UNDEF:00000624                 extrn __imp__GetCurrentProcessId@0:near
UNDEF:00000624                                         ; CODE XREF: CRandomGenerator::Init(void)+37p
UNDEF:00000624                                         ; DATA XREF: CRandomGenerator::Init(void)+37r
UNDEF:00000628 ; __stdcall Sha256_Init(x)
UNDEF:00000628                 extrn _Sha256_Init@4:near
UNDEF:00000628                                         ; CODE XREF: CRandomGenerator::Init(void)+30p
UNDEF:00000628                                         ; CRandomGenerator::Init(void)+127p ...
UNDEF:0000062C                 extrn ___security_cookie:near
UNDEF:0000062C                                         ; DATA XREF: CRandomGenerator::Init(void)+1Fr
UNDEF:0000062C                                         ; CRandomGenerator::Generate(uchar *,uint)+2Cr
UNDEF:00000630 ; __fastcall __security_check_cookie(x)
UNDEF:00000630                 extrn @__security_check_cookie@4:near
UNDEF:00000630                                         ; CODE XREF: CRandomGenerator::Init(void)+16Ep
UNDEF:00000630                                         ; CRandomGenerator::Generate(uchar *,uint)+178p ...
UNDEF:00000634 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000634                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000634                                         ; CODE XREF: CRandomGenerator::Init(void)+160p
UNDEF:00000634                                         ; CRandomGenerator::Generate(uchar *,uint)+160p
UNDEF:00000638                 extrn __RTC_CheckEsp:near
UNDEF:00000638                                         ; CODE XREF: CRandomGenerator::Init(void)+3Fp
UNDEF:00000638                                         ; CRandomGenerator::Init(void)+60p ...
UNDEF:0000063C                 extrn __RTC_Shutdown:near
UNDEF:0000063C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000640                 extrn __RTC_InitBase:near
UNDEF:00000640                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000644                 extrn ___CxxFrameHandler3:near
UNDEF:00000644                                         ; CODE XREF: __ehhandler$?Generate@CRandomGenerator@@QAEXPAEI@Z+23j
UNDEF:00000648 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000648                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00000648                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00000648                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:0000064C ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000064C                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:0000064C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:0000064C                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00000650 ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00000650                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+12p
UNDEF:00000654 ; __stdcall CriticalSection_Init(x)
UNDEF:00000654                 extrn _CriticalSection_Init@4:near
UNDEF:00000654                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00000658 ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000658                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00000658                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00000658                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00000658
UNDEF:00000658
UNDEF:00000658                 end