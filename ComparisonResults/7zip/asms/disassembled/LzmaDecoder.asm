.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 3C6D9DA58EC5E27503C38CC1D9ABA190
.text:00000000 ; Input CRC32 : 0CAB59C1
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzmaDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NLzma::CDecoder::CDecoder(NCompress::NLzma::CDecoder *__hidden this)
.text:00000000                 public ??0CDecoder@NLzma@NCompress@@QAE@XZ
.text:00000000 ??0CDecoder@NLzma@NCompress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     ecx, [ebp+var_4] ; this
.text:00000011                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000016                 mov     ecx, [ebp+var_4]
.text:00000019                 add     ecx, 4          ; this
.text:0000001C                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 add     ecx, 8          ; this
.text:00000027                 call    ??0ICompressSetFinishMode@@QAE@XZ ; ICompressSetFinishMode::ICompressSetFinishMode(void)
.text:0000002C                 mov     ecx, [ebp+var_4]
.text:0000002F                 add     ecx, 0Ch        ; this
.text:00000032                 call    ??0ICompressSetBufSize@@QAE@XZ ; ICompressSetBufSize::ICompressSetBufSize(void)
.text:00000037                 mov     ecx, [ebp+var_4]
.text:0000003A                 add     ecx, 10h        ; this
.text:0000003D                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00000042                 mov     ecx, [ebp+var_4]
.text:00000045                 add     ecx, 14h        ; this
.text:00000048                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:0000004D                 mov     ecx, [ebp+var_4]
.text:00000050                 add     ecx, 18h        ; this
.text:00000053                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000058                 mov     ecx, [ebp+var_4]
.text:0000005B                 add     ecx, 1Ch        ; this
.text:0000005E                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000063                 mov     eax, [ebp+var_4]
.text:00000066                 mov     dword ptr [eax], offset ??_7CDecoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressCoder'}
.text:0000006C                 mov     ecx, [ebp+var_4]
.text:0000006F                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000076                 mov     edx, [ebp+var_4]
.text:00000079                 mov     dword ptr [edx+8], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.text:00000080                 mov     eax, [ebp+var_4]
.text:00000083                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetBufSize'}
.text:0000008A                 mov     ecx, [ebp+var_4]
.text:0000008D                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:00000094                 mov     edx, [ebp+var_4]
.text:00000097                 mov     dword ptr [edx+14h], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:0000009E                 mov     eax, [ebp+var_4]
.text:000000A1                 mov     dword ptr [eax+18h], offset ??_7CDecoder@NLzma@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ISequentialInStream'}
.text:000000A8                 mov     ecx, [ebp+var_4]
.text:000000AB                 add     ecx, 20h ; ' '
.text:000000AE                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000000B3                 mov     ecx, [ebp+var_4]
.text:000000B6                 mov     dword ptr [ecx+24h], 0
.text:000000BD                 mov     edx, [ebp+var_4]
.text:000000C0                 mov     byte ptr [edx+0A0h], 0
.text:000000C7                 mov     eax, [ebp+var_4]
.text:000000CA                 mov     byte ptr [eax+0A1h], 0
.text:000000D1                 mov     ecx, [ebp+var_4]
.text:000000D4                 mov     dword ptr [ecx+0C4h], 100000h
.text:000000DE                 mov     edx, [ebp+var_4]
.text:000000E1                 mov     dword ptr [edx+0C8h], 400000h
.text:000000EB                 mov     eax, [ebp+var_4]
.text:000000EE                 mov     byte ptr [eax+0D0h], 0
.text:000000F5                 mov     ecx, [ebp+var_4]
.text:000000F8                 mov     byte ptr [ecx+0D1h], 0
.text:000000FF                 mov     edx, [ebp+var_4]
.text:00000102                 mov     dword ptr [edx+0B0h], 0
.text:0000010C                 mov     dword ptr [edx+0B4h], 0
.text:00000116                 mov     eax, [ebp+var_4]
.text:00000119                 mov     dword ptr [eax+2Ch], 0
.text:00000120                 mov     ecx, [ebp+var_4]
.text:00000123                 mov     dword ptr [ecx+28h], 0
.text:0000012A                 mov     edx, [ebp+var_4]
.text:0000012D                 mov     dword ptr [edx+44h], 0
.text:00000134                 mov     eax, [ebp+var_4]
.text:00000137                 mov     dword ptr [eax+40h], 0
.text:0000013E                 mov     eax, [ebp+var_4]
.text:00000141                 add     esp, 4
.text:00000144                 cmp     ebp, esp
.text:00000146                 call    __RTC_CheckEsp
.text:0000014B                 mov     esp, ebp
.text:0000014D                 pop     ebp
.text:0000014E                 retn
.text:0000014E ??0CDecoder@NLzma@NCompress@@QAE@XZ endp
.text:0000014E
.text:0000014E ; ---------------------------------------------------------------------------
.text:0000014F                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; _DWORD __thiscall NCompress::NLzma::CDecoder::~CDecoder(NCompress::NLzma::CDecoder *__hidden this)
.text:00000150                 public ??1CDecoder@NLzma@NCompress@@UAE@XZ
.text:00000150 ??1CDecoder@NLzma@NCompress@@UAE@XZ proc near
.text:00000150                                         ; CODE XREF: NCompress::NLzma::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00000150
.text:00000150 var_4           = dword ptr -4
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 push    ecx
.text:00000154                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000015B                 mov     [ebp+var_4], ecx
.text:0000015E                 mov     eax, [ebp+var_4]
.text:00000161                 mov     dword ptr [eax], offset ??_7CDecoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000167                 mov     ecx, [ebp+var_4]
.text:0000016A                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000171                 mov     edx, [ebp+var_4]
.text:00000174                 mov     dword ptr [edx+8], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.text:0000017B                 mov     eax, [ebp+var_4]
.text:0000017E                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetBufSize'}
.text:00000185                 mov     ecx, [ebp+var_4]
.text:00000188                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:0000018F                 mov     edx, [ebp+var_4]
.text:00000192                 mov     dword ptr [edx+14h], offset ??_7CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000199                 mov     eax, [ebp+var_4]
.text:0000019C                 mov     dword ptr [eax+18h], offset ??_7CDecoder@NLzma@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma::CDecoder::`vftable'{for `ISequentialInStream'}
.text:000001A3                 push    offset _g_Alloc
.text:000001A8                 mov     ecx, [ebp+var_4]
.text:000001AB                 add     ecx, 30h ; '0'
.text:000001AE                 push    ecx
.text:000001AF                 call    _LzmaDec_Free@8 ; LzmaDec_Free(x,x)
.text:000001B4                 mov     edx, [ebp+var_4]
.text:000001B7                 mov     eax, [edx+24h]
.text:000001BA                 push    eax
.text:000001BB                 call    _MyFree@4       ; MyFree(x)
.text:000001C0                 mov     ecx, [ebp+var_4]
.text:000001C3                 add     ecx, 20h ; ' '
.text:000001C6                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000001CB                 add     esp, 4
.text:000001CE                 cmp     ebp, esp
.text:000001D0                 call    __RTC_CheckEsp
.text:000001D5                 mov     esp, ebp
.text:000001D7                 pop     ebp
.text:000001D8                 retn
.text:000001D8 ??1CDecoder@NLzma@NCompress@@UAE@XZ endp
.text:000001D8
.text:000001D8 ; ---------------------------------------------------------------------------
.text:000001D9                 align 10h
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetInBufSize(NCompress::NLzma::CDecoder *this, unsigned int, unsigned int)
.text:000001E0                 public ?SetInBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z
.text:000001E0 ?SetInBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z proc near
.text:000001E0                                         ; DATA XREF: .rdata:00000E48o
.text:000001E0
.text:000001E0 this            = dword ptr  8
.text:000001E0 arg_8           = dword ptr  10h
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 mov     eax, [ebp+this]
.text:000001E6                 mov     ecx, [ebp+arg_8]
.text:000001E9                 mov     [eax+0B8h], ecx
.text:000001EF                 xor     eax, eax
.text:000001F1                 pop     ebp
.text:000001F2                 retn    0Ch
.text:000001F2 ?SetInBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z endp
.text:000001F2
.text:000001F2 ; ---------------------------------------------------------------------------
.text:000001F5                 align 10h
.text:00000200
.text:00000200 ; =============== S U B R O U T I N E =======================================
.text:00000200
.text:00000200 ; Attributes: bp-based frame
.text:00000200
.text:00000200 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetOutBufSize(NCompress::NLzma::CDecoder *this, unsigned int, unsigned int)
.text:00000200                 public ?SetOutBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z
.text:00000200 ?SetOutBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z proc near
.text:00000200                                         ; DATA XREF: .rdata:00000E4Co
.text:00000200
.text:00000200 this            = dword ptr  8
.text:00000200 arg_8           = dword ptr  10h
.text:00000200
.text:00000200                 push    ebp
.text:00000201                 mov     ebp, esp
.text:00000203                 mov     eax, [ebp+this]
.text:00000206                 mov     ecx, [ebp+arg_8]
.text:00000209                 mov     [eax+0BCh], ecx
.text:0000020F                 xor     eax, eax
.text:00000211                 pop     ebp
.text:00000212                 retn    0Ch
.text:00000212 ?SetOutBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z endp
.text:00000212
.text:00000212 ; ---------------------------------------------------------------------------
.text:00000215                 align 10h
.text:00000220
.text:00000220 ; =============== S U B R O U T I N E =======================================
.text:00000220
.text:00000220 ; Attributes: bp-based frame
.text:00000220
.text:00000220 ; __int32 __thiscall NCompress::NLzma::CDecoder::CreateInputBuffer(NCompress::NLzma::CDecoder *__hidden this)
.text:00000220                 public ?CreateInputBuffer@CDecoder@NLzma@NCompress@@AAEJXZ
.text:00000220 ?CreateInputBuffer@CDecoder@NLzma@NCompress@@AAEJXZ proc near
.text:00000220                                         ; CODE XREF: NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+48p
.text:00000220                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+21p
.text:00000220
.text:00000220 var_4           = dword ptr -4
.text:00000220
.text:00000220                 push    ebp
.text:00000221                 mov     ebp, esp
.text:00000223                 push    ecx
.text:00000224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000022B                 mov     [ebp+var_4], ecx
.text:0000022E                 mov     eax, [ebp+var_4]
.text:00000231                 cmp     dword ptr [eax+24h], 0
.text:00000235                 jz      short loc_24B
.text:00000237                 mov     ecx, [ebp+var_4]
.text:0000023A                 mov     edx, [ebp+var_4]
.text:0000023D                 mov     eax, [ecx+0C4h]
.text:00000243                 cmp     eax, [edx+0C0h]
.text:00000249                 jz      short loc_28E
.text:0000024B
.text:0000024B loc_24B:                                ; CODE XREF: NCompress::NLzma::CDecoder::CreateInputBuffer(void)+15j
.text:0000024B                 mov     ecx, [ebp+var_4]
.text:0000024E                 mov     edx, [ecx+24h]
.text:00000251                 push    edx
.text:00000252                 call    _MyFree@4       ; MyFree(x)
.text:00000257                 mov     eax, [ebp+var_4]
.text:0000025A                 mov     ecx, [eax+0C4h]
.text:00000260                 push    ecx
.text:00000261                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00000266                 mov     edx, [ebp+var_4]
.text:00000269                 mov     [edx+24h], eax
.text:0000026C                 mov     eax, [ebp+var_4]
.text:0000026F                 cmp     dword ptr [eax+24h], 0
.text:00000273                 jnz     short loc_27C
.text:00000275                 mov     eax, 8007000Eh
.text:0000027A                 jmp     short loc_290
.text:0000027C ; ---------------------------------------------------------------------------
.text:0000027C
.text:0000027C loc_27C:                                ; CODE XREF: NCompress::NLzma::CDecoder::CreateInputBuffer(void)+53j
.text:0000027C                 mov     ecx, [ebp+var_4]
.text:0000027F                 mov     edx, [ebp+var_4]
.text:00000282                 mov     eax, [edx+0C4h]
.text:00000288                 mov     [ecx+0C0h], eax
.text:0000028E
.text:0000028E loc_28E:                                ; CODE XREF: NCompress::NLzma::CDecoder::CreateInputBuffer(void)+29j
.text:0000028E                 xor     eax, eax
.text:00000290
.text:00000290 loc_290:                                ; CODE XREF: NCompress::NLzma::CDecoder::CreateInputBuffer(void)+5Aj
.text:00000290                 add     esp, 4
.text:00000293                 cmp     ebp, esp
.text:00000295                 call    __RTC_CheckEsp
.text:0000029A                 mov     esp, ebp
.text:0000029C                 pop     ebp
.text:0000029D                 retn
.text:0000029D ?CreateInputBuffer@CDecoder@NLzma@NCompress@@AAEJXZ endp
.text:0000029D
.text:0000029D ; ---------------------------------------------------------------------------
.text:0000029E                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetDecoderProperties2(NCompress::NLzma::CDecoder *this, const unsigned __int8 *, unsigned int)
.text:000002A0                 public ?SetDecoderProperties2@CDecoder@NLzma@NCompress@@UAGJPBEI@Z
.text:000002A0 ?SetDecoderProperties2@CDecoder@NLzma@NCompress@@UAGJPBEI@Z proc near
.text:000002A0                                         ; DATA XREF: .rdata:00000E74o
.text:000002A0
.text:000002A0 var_4           = dword ptr -4
.text:000002A0 this            = dword ptr  8
.text:000002A0 arg_4           = dword ptr  0Ch
.text:000002A0 arg_8           = dword ptr  10h
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 push    ecx
.text:000002A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002AB                 push    offset _g_Alloc
.text:000002B0                 mov     eax, [ebp+arg_8]
.text:000002B3                 push    eax
.text:000002B4                 mov     ecx, [ebp+arg_4]
.text:000002B7                 push    ecx
.text:000002B8                 mov     edx, [ebp+this]
.text:000002BB                 add     edx, 2Ch ; ','
.text:000002BE                 push    edx
.text:000002BF                 call    _LzmaDec_Allocate@16 ; LzmaDec_Allocate(x,x,x,x)
.text:000002C4                 push    eax
.text:000002C5                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:000002CA                 mov     [ebp+var_4], eax
.text:000002CD                 cmp     [ebp+var_4], 0
.text:000002D1                 jz      short loc_2D8
.text:000002D3                 mov     eax, [ebp+var_4]
.text:000002D6                 jmp     short loc_2ED
.text:000002D8 ; ---------------------------------------------------------------------------
.text:000002D8
.text:000002D8 loc_2D8:                                ; CODE XREF: NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+31j
.text:000002D8                 mov     eax, [ebp+this]
.text:000002DB                 mov     byte ptr [eax+9Ch], 1
.text:000002E2                 mov     ecx, [ebp+this]
.text:000002E5                 sub     ecx, 4          ; this
.text:000002E8                 call    ?CreateInputBuffer@CDecoder@NLzma@NCompress@@AAEJXZ ; NCompress::NLzma::CDecoder::CreateInputBuffer(void)
.text:000002ED
.text:000002ED loc_2ED:                                ; CODE XREF: NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+36j
.text:000002ED                 add     esp, 4
.text:000002F0                 cmp     ebp, esp
.text:000002F2                 call    __RTC_CheckEsp
.text:000002F7                 mov     esp, ebp
.text:000002F9                 pop     ebp
.text:000002FA                 retn    0Ch
.text:000002FA ?SetDecoderProperties2@CDecoder@NLzma@NCompress@@UAGJPBEI@Z endp
.text:000002FA
.text:000002FA ; ---------------------------------------------------------------------------
.text:000002FD                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; long __stdcall SResToHRESULT(int)
.text:00000300 ?SResToHRESULT@@YGJH@Z proc near        ; CODE XREF: NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+25p
.text:00000300                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1ACp
.text:00000300
.text:00000300 var_4           = dword ptr -4
.text:00000300 arg_0           = dword ptr  8
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 push    ecx
.text:00000304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000030B                 mov     eax, [ebp+arg_0]
.text:0000030E                 mov     [ebp+var_4], eax
.text:00000311                 cmp     [ebp+var_4], 5  ; switch 6 cases
.text:00000315                 ja      short $LN6      ; jumptable 0000031A default case
.text:00000317                 mov     ecx, [ebp+var_4]
.text:0000031A                 jmp     ds:$LN10[ecx*4] ; switch jump
.text:00000321 ; ---------------------------------------------------------------------------
.text:00000321
.text:00000321 $LN5:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:00000321                                         ; DATA XREF: .text:$LN10o
.text:00000321                 xor     eax, eax        ; jumptable 0000031A case 0
.text:00000323                 jmp     short loc_346
.text:00000325 ; ---------------------------------------------------------------------------
.text:00000325
.text:00000325 $LN4:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:00000325                                         ; DATA XREF: .text:$LN10o
.text:00000325                 mov     eax, 8007000Eh  ; jumptable 0000031A case 2
.text:0000032A                 jmp     short loc_346
.text:0000032C ; ---------------------------------------------------------------------------
.text:0000032C
.text:0000032C $LN3:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:0000032C                                         ; DATA XREF: .text:$LN10o
.text:0000032C                 mov     eax, 80070057h  ; jumptable 0000031A case 5
.text:00000331                 jmp     short loc_346
.text:00000333 ; ---------------------------------------------------------------------------
.text:00000333
.text:00000333 $LN2:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:00000333                                         ; DATA XREF: .text:$LN10o
.text:00000333                 mov     eax, 80004001h  ; jumptable 0000031A case 4
.text:00000338                 jmp     short loc_346
.text:0000033A ; ---------------------------------------------------------------------------
.text:0000033A
.text:0000033A $LN1:                                   ; CODE XREF: SResToHRESULT(int)+1Aj
.text:0000033A                                         ; DATA XREF: .text:$LN10o
.text:0000033A                 mov     eax, 1          ; jumptable 0000031A case 1
.text:0000033F                 jmp     short loc_346
.text:00000341 ; ---------------------------------------------------------------------------
.text:00000341
.text:00000341 $LN6:                                   ; CODE XREF: SResToHRESULT(int)+15j
.text:00000341                                         ; SResToHRESULT(int)+1Aj
.text:00000341                                         ; DATA XREF: ...
.text:00000341                 mov     eax, 80004005h  ; jumptable 0000031A default case
.text:00000346
.text:00000346 loc_346:                                ; CODE XREF: SResToHRESULT(int)+23j
.text:00000346                                         ; SResToHRESULT(int)+2Aj ...
.text:00000346                 mov     esp, ebp
.text:00000348                 pop     ebp
.text:00000349                 retn    4
.text:00000349 ?SResToHRESULT@@YGJH@Z endp
.text:00000349
.text:00000349 ; ---------------------------------------------------------------------------
.text:0000034C $LN10           dd offset $LN5          ; DATA XREF: SResToHRESULT(int)+1Ar
.text:0000034C                 dd offset $LN1          ; jump table for switch statement
.text:0000034C                 dd offset $LN4
.text:0000034C                 dd offset $LN6
.text:0000034C                 dd offset $LN2
.text:0000034C                 dd offset $LN3
.text:00000364                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; void __thiscall NCompress::NLzma::CDecoder::SetOutStreamSizeResume(NCompress::NLzma::CDecoder *this, const unsigned __int64 *)
.text:00000370                 public ?SetOutStreamSizeResume@CDecoder@NLzma@NCompress@@AAEXPB_K@Z
.text:00000370 ?SetOutStreamSizeResume@CDecoder@NLzma@NCompress@@AAEXPB_K@Z proc near
.text:00000370                                         ; CODE XREF: NCompress::NLzma::CDecoder::SetOutStreamSize(unsigned __int64 const *)+42p
.text:00000370                                         ; NCompress::NLzma::CDecoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+15p
.text:00000370
.text:00000370 var_4           = dword ptr -4
.text:00000370 arg_0           = dword ptr  8
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 push    ecx
.text:00000374                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000037B                 mov     [ebp+var_4], ecx
.text:0000037E                 xor     eax, eax
.text:00000380                 cmp     [ebp+arg_0], 0
.text:00000384                 setnz   al
.text:00000387                 mov     ecx, [ebp+var_4]
.text:0000038A                 mov     [ecx+0A1h], al
.text:00000390                 mov     edx, [ebp+var_4]
.text:00000393                 movzx   eax, byte ptr [edx+0A1h]
.text:0000039A                 test    eax, eax
.text:0000039C                 jz      short loc_3B5
.text:0000039E                 mov     ecx, [ebp+var_4]
.text:000003A1                 mov     edx, [ebp+arg_0]
.text:000003A4                 mov     eax, [edx]
.text:000003A6                 mov     [ecx+0A8h], eax
.text:000003AC                 mov     edx, [edx+4]
.text:000003AF                 mov     [ecx+0ACh], edx
.text:000003B5
.text:000003B5 loc_3B5:                                ; CODE XREF: NCompress::NLzma::CDecoder::SetOutStreamSizeResume(unsigned __int64 const *)+2Cj
.text:000003B5                 mov     eax, [ebp+var_4]
.text:000003B8                 mov     dword ptr [eax+0B8h], 0
.text:000003C2                 mov     dword ptr [eax+0BCh], 0
.text:000003CC                 mov     ecx, [ebp+var_4]
.text:000003CF                 mov     dword ptr [ecx+0CCh], 0
.text:000003D9                 mov     edx, [ebp+var_4]
.text:000003DC                 add     edx, 30h ; '0'
.text:000003DF                 push    edx
.text:000003E0                 call    _LzmaDec_Init@4 ; LzmaDec_Init(x)
.text:000003E5                 add     esp, 4
.text:000003E8                 cmp     ebp, esp
.text:000003EA                 call    __RTC_CheckEsp
.text:000003EF                 mov     esp, ebp
.text:000003F1                 pop     ebp
.text:000003F2                 retn    4
.text:000003F2 ?SetOutStreamSizeResume@CDecoder@NLzma@NCompress@@AAEXPB_K@Z endp
.text:000003F2
.text:000003F2 ; ---------------------------------------------------------------------------
.text:000003F5                 align 10h
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetOutStreamSize(NCompress::NLzma::CDecoder *this, const unsigned __int64 *)
.text:00000400                 public ?SetOutStreamSize@CDecoder@NLzma@NCompress@@UAGJPB_K@Z
.text:00000400 ?SetOutStreamSize@CDecoder@NLzma@NCompress@@UAGJPB_K@Z proc near
.text:00000400                                         ; DATA XREF: .rdata:00000E1Co
.text:00000400
.text:00000400 this            = dword ptr  8
.text:00000400 arg_4           = dword ptr  0Ch
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 mov     eax, [ebp+this]
.text:00000406                 mov     dword ptr [eax+9Ch], 0
.text:00000410                 mov     dword ptr [eax+0A0h], 0
.text:0000041A                 mov     ecx, [ebp+this]
.text:0000041D                 mov     dword ptr [ecx+18h], 0
.text:00000424                 mov     edx, [ebp+this]
.text:00000427                 mov     dword ptr [edx+14h], 0
.text:0000042E                 mov     eax, [ebp+this]
.text:00000431                 mov     byte ptr [eax+0BDh], 0
.text:00000438                 mov     ecx, [ebp+arg_4]
.text:0000043B                 push    ecx             ; unsigned __int64 *
.text:0000043C                 mov     ecx, [ebp+this]
.text:0000043F                 sub     ecx, 14h        ; this
.text:00000442                 call    ?SetOutStreamSizeResume@CDecoder@NLzma@NCompress@@AAEXPB_K@Z ; NCompress::NLzma::CDecoder::SetOutStreamSizeResume(unsigned __int64 const *)
.text:00000447                 xor     eax, eax
.text:00000449                 cmp     ebp, esp
.text:0000044B                 call    __RTC_CheckEsp
.text:00000450                 pop     ebp
.text:00000451                 retn    8
.text:00000451 ?SetOutStreamSize@CDecoder@NLzma@NCompress@@UAGJPB_K@Z endp
.text:00000451
.text:00000451 ; ---------------------------------------------------------------------------
.text:00000454                 align 10h
.text:00000460
.text:00000460 ; =============== S U B R O U T I N E =======================================
.text:00000460
.text:00000460 ; Attributes: bp-based frame
.text:00000460
.text:00000460 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetFinishMode(NCompress::NLzma::CDecoder *this, unsigned int)
.text:00000460                 public ?SetFinishMode@CDecoder@NLzma@NCompress@@UAGJI@Z
.text:00000460 ?SetFinishMode@CDecoder@NLzma@NCompress@@UAGJI@Z proc near
.text:00000460                                         ; DATA XREF: .rdata:00000E60o
.text:00000460
.text:00000460 this            = dword ptr  8
.text:00000460 arg_4           = dword ptr  0Ch
.text:00000460
.text:00000460                 push    ebp
.text:00000461                 mov     ebp, esp
.text:00000463                 xor     eax, eax
.text:00000465                 cmp     [ebp+arg_4], 0
.text:00000469                 setnz   al
.text:0000046C                 mov     ecx, [ebp+this]
.text:0000046F                 mov     [ecx+0C8h], al
.text:00000475                 xor     eax, eax
.text:00000477                 pop     ebp
.text:00000478                 retn    8
.text:00000478 ?SetFinishMode@CDecoder@NLzma@NCompress@@UAGJI@Z endp
.text:00000478
.text:00000478 ; ---------------------------------------------------------------------------
.text:0000047B                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; __int32 __thiscall NCompress::NLzma::CDecoder::CodeSpec(NCompress::NLzma::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:00000480                 public ?CodeSpec@CDecoder@NLzma@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00000480 ?CodeSpec@CDecoder@NLzma@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:00000480                                         ; CODE XREF: NCompress::NLzma::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+42p
.text:00000480                                         ; NCompress::NLzma::CDecoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+31p
.text:00000480
.text:00000480 var_88          = dword ptr -88h
.text:00000480 var_84          = dword ptr -84h
.text:00000480 var_80          = dword ptr -80h
.text:00000480 var_7C          = dword ptr -7Ch
.text:00000480 var_78          = dword ptr -78h
.text:00000480 var_74          = dword ptr -74h
.text:00000480 var_70          = dword ptr -70h
.text:00000480 var_6C          = dword ptr -6Ch
.text:00000480 var_68          = dword ptr -68h
.text:00000480 var_60          = dword ptr -60h
.text:00000480 var_5C          = dword ptr -5Ch
.text:00000480 var_54          = dword ptr -54h
.text:00000480 var_50          = dword ptr -50h
.text:00000480 var_4A          = byte ptr -4Ah
.text:00000480 var_49          = byte ptr -49h
.text:00000480 var_48          = dword ptr -48h
.text:00000480 var_44          = dword ptr -44h
.text:00000480 var_3C          = dword ptr -3Ch
.text:00000480 var_30          = dword ptr -30h
.text:00000480 var_28          = dword ptr -28h
.text:00000480 var_24          = dword ptr -24h
.text:00000480 var_20          = dword ptr -20h
.text:00000480 var_1C          = dword ptr -1Ch
.text:00000480 var_18          = dword ptr -18h
.text:00000480 var_14          = dword ptr -14h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480 arg_4           = dword ptr  0Ch
.text:00000480 arg_8           = dword ptr  10h
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 88h
.text:00000489                 push    esi
.text:0000048A                 push    edi
.text:0000048B                 push    ecx
.text:0000048C                 lea     edi, [ebp+var_88]
.text:00000492                 mov     ecx, 22h ; '"'
.text:00000497                 mov     eax, 0CCCCCCCCh
.text:0000049C                 rep stosd
.text:0000049E                 pop     ecx
.text:0000049F                 mov     [ebp+var_4], ecx
.text:000004A2                 mov     eax, [ebp+var_4]
.text:000004A5                 cmp     dword ptr [eax+24h], 0
.text:000004A9                 jz      short loc_4B9
.text:000004AB                 mov     ecx, [ebp+var_4]
.text:000004AE                 movzx   edx, byte ptr [ecx+0A0h]
.text:000004B5                 test    edx, edx
.text:000004B7                 jnz     short loc_4C3
.text:000004B9
.text:000004B9 loc_4B9:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+29j
.text:000004B9                 mov     eax, 1
.text:000004BE                 jmp     loc_8C3
.text:000004C3 ; ---------------------------------------------------------------------------
.text:000004C3
.text:000004C3 loc_4C3:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+37j
.text:000004C3                 mov     eax, [ebp+var_4]
.text:000004C6                 mov     ecx, [eax+0B0h]
.text:000004CC                 mov     [ebp+var_C], ecx
.text:000004CF                 mov     edx, [eax+0B4h]
.text:000004D5                 mov     [ebp+var_8], edx
.text:000004D8                 mov     eax, [ebp+var_4]
.text:000004DB                 mov     ecx, [ebp+var_4]
.text:000004DE                 mov     edx, [eax+58h]
.text:000004E1                 sub     edx, [ecx+54h]
.text:000004E4                 mov     eax, [ebp+var_4]
.text:000004E7                 cmp     edx, [eax+0C8h]
.text:000004ED                 jnb     short loc_4FA
.text:000004EF                 mov     ecx, [ebp+var_4]
.text:000004F2                 mov     edx, [ecx+58h]
.text:000004F5                 mov     [ebp+var_6C], edx
.text:000004F8                 jmp     short loc_50C
.text:000004FA ; ---------------------------------------------------------------------------
.text:000004FA
.text:000004FA loc_4FA:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+6Dj
.text:000004FA                 mov     eax, [ebp+var_4]
.text:000004FD                 mov     ecx, [eax+54h]
.text:00000500                 mov     edx, [ebp+var_4]
.text:00000503                 add     ecx, [edx+0C8h]
.text:00000509                 mov     [ebp+var_6C], ecx
.text:0000050C
.text:0000050C loc_50C:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+78j
.text:0000050C                 mov     eax, [ebp+var_6C]
.text:0000050F                 mov     [ebp+var_10], eax
.text:00000512
.text:00000512 loc_512:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_8BEj
.text:00000512                 mov     ecx, [ebp+var_4]
.text:00000515                 mov     edx, [ebp+var_4]
.text:00000518                 mov     eax, [ecx+28h]
.text:0000051B                 cmp     eax, [edx+2Ch]
.text:0000051E                 jnz     short loc_574
.text:00000520                 mov     ecx, [ebp+var_4]
.text:00000523                 mov     dword ptr [ecx+2Ch], 0
.text:0000052A                 mov     edx, [ebp+var_4]
.text:0000052D                 mov     dword ptr [edx+28h], 0
.text:00000534                 mov     eax, [ebp+var_4]
.text:00000537                 add     eax, 2Ch ; ','
.text:0000053A                 mov     esi, esp
.text:0000053C                 push    eax
.text:0000053D                 mov     ecx, [ebp+var_4]
.text:00000540                 mov     edx, [ecx+0C0h]
.text:00000546                 push    edx
.text:00000547                 mov     eax, [ebp+var_4]
.text:0000054A                 mov     ecx, [eax+24h]
.text:0000054D                 push    ecx
.text:0000054E                 mov     edx, [ebp+arg_0]
.text:00000551                 mov     eax, [edx]
.text:00000553                 mov     ecx, [ebp+arg_0]
.text:00000556                 push    ecx
.text:00000557                 mov     edx, [eax+0Ch]
.text:0000055A                 call    edx
.text:0000055C                 cmp     esi, esp
.text:0000055E                 call    __RTC_CheckEsp
.text:00000563                 mov     [ebp+var_14], eax
.text:00000566                 cmp     [ebp+var_14], 0
.text:0000056A                 jz      short loc_574
.text:0000056C                 mov     eax, [ebp+var_14]
.text:0000056F                 jmp     loc_8C3
.text:00000574 ; ---------------------------------------------------------------------------
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+9Ej
.text:00000574                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+EAj
.text:00000574                 mov     eax, [ebp+var_4]
.text:00000577                 mov     ecx, [eax+54h]
.text:0000057A                 mov     [ebp+var_18], ecx
.text:0000057D                 mov     edx, [ebp+var_10]
.text:00000580                 sub     edx, [ebp+var_18]
.text:00000583                 mov     [ebp+var_1C], edx
.text:00000586                 mov     [ebp+var_20], 0
.text:0000058D                 mov     eax, [ebp+var_4]
.text:00000590                 movzx   ecx, byte ptr [eax+0A1h]
.text:00000597                 test    ecx, ecx
.text:00000599                 jz      short loc_5F7
.text:0000059B                 mov     edx, [ebp+var_4]
.text:0000059E                 mov     eax, [ebp+var_4]
.text:000005A1                 mov     ecx, [edx+0A8h]
.text:000005A7                 sub     ecx, [eax+0B8h]
.text:000005AD                 mov     edx, [edx+0ACh]
.text:000005B3                 sbb     edx, [eax+0BCh]
.text:000005B9                 mov     [ebp+var_28], ecx
.text:000005BC                 mov     [ebp+var_24], edx
.text:000005BF                 mov     eax, [ebp+var_1C]
.text:000005C2                 xor     ecx, ecx
.text:000005C4                 mov     [ebp+var_74], eax
.text:000005C7                 mov     [ebp+var_70], ecx
.text:000005CA                 mov     edx, [ebp+var_24]
.text:000005CD                 cmp     edx, [ebp+var_70]
.text:000005D0                 ja      short loc_5F7
.text:000005D2                 jb      short loc_5DC
.text:000005D4                 mov     eax, [ebp+var_28]
.text:000005D7                 cmp     eax, [ebp+var_74]
.text:000005DA                 ja      short loc_5F7
.text:000005DC
.text:000005DC loc_5DC:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+152j
.text:000005DC                 mov     ecx, [ebp+var_28]
.text:000005DF                 mov     [ebp+var_1C], ecx
.text:000005E2                 mov     edx, [ebp+var_4]
.text:000005E5                 movzx   eax, byte ptr [edx+0D0h]
.text:000005EC                 test    eax, eax
.text:000005EE                 jz      short loc_5F7
.text:000005F0                 mov     [ebp+var_20], 1
.text:000005F7
.text:000005F7 loc_5F7:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+119j
.text:000005F7                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+150j ...
.text:000005F7                 mov     ecx, [ebp+var_4]
.text:000005FA                 mov     edx, [ebp+var_4]
.text:000005FD                 mov     eax, [ecx+2Ch]
.text:00000600                 sub     eax, [edx+28h]
.text:00000603                 mov     [ebp+var_30], eax
.text:00000606                 lea     ecx, [ebp+var_3C]
.text:00000609                 push    ecx
.text:0000060A                 mov     edx, [ebp+var_20]
.text:0000060D                 push    edx
.text:0000060E                 lea     eax, [ebp+var_30]
.text:00000611                 push    eax
.text:00000612                 mov     ecx, [ebp+var_4]
.text:00000615                 mov     edx, [ecx+24h]
.text:00000618                 mov     eax, [ebp+var_4]
.text:0000061B                 add     edx, [eax+28h]
.text:0000061E                 push    edx
.text:0000061F                 mov     ecx, [ebp+var_18]
.text:00000622                 add     ecx, [ebp+var_1C]
.text:00000625                 push    ecx
.text:00000626                 mov     edx, [ebp+var_4]
.text:00000629                 add     edx, 30h ; '0'
.text:0000062C                 push    edx
.text:0000062D                 call    _LzmaDec_DecodeToDic@24 ; LzmaDec_DecodeToDic(x,x,x,x,x,x)
.text:00000632                 mov     [ebp+var_44], eax
.text:00000635                 mov     eax, [ebp+var_4]
.text:00000638                 mov     ecx, [eax+28h]
.text:0000063B                 add     ecx, [ebp+var_30]
.text:0000063E                 mov     edx, [ebp+var_4]
.text:00000641                 mov     [edx+28h], ecx
.text:00000644                 mov     eax, [ebp+var_30]
.text:00000647                 xor     ecx, ecx
.text:00000649                 mov     edx, [ebp+var_4]
.text:0000064C                 add     eax, [edx+0B0h]
.text:00000652                 adc     ecx, [edx+0B4h]
.text:00000658                 mov     edx, [ebp+var_4]
.text:0000065B                 mov     [edx+0B0h], eax
.text:00000661                 mov     [edx+0B4h], ecx
.text:00000667                 mov     eax, [ebp+var_4]
.text:0000066A                 mov     ecx, [eax+54h]
.text:0000066D                 sub     ecx, [ebp+var_18]
.text:00000670                 mov     [ebp+var_48], ecx
.text:00000673                 mov     edx, [ebp+var_48]
.text:00000676                 xor     eax, eax
.text:00000678                 mov     ecx, [ebp+var_4]
.text:0000067B                 add     edx, [ecx+0B8h]
.text:00000681                 adc     eax, [ecx+0BCh]
.text:00000687                 mov     ecx, [ebp+var_4]
.text:0000068A                 mov     [ecx+0B8h], edx
.text:00000690                 mov     [ecx+0BCh], eax
.text:00000696                 cmp     [ebp+var_30], 0
.text:0000069A                 jnz     short loc_6AB
.text:0000069C                 cmp     [ebp+var_48], 0
.text:000006A0                 jnz     short loc_6AB
.text:000006A2                 mov     [ebp+var_78], 1
.text:000006A9                 jmp     short loc_6B2
.text:000006AB ; ---------------------------------------------------------------------------
.text:000006AB
.text:000006AB loc_6AB:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+21Aj
.text:000006AB                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+220j
.text:000006AB                 mov     [ebp+var_78], 0
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+229j
.text:000006B2                 mov     dl, byte ptr [ebp+var_78]
.text:000006B5                 mov     [ebp+var_49], dl
.text:000006B8                 mov     eax, [ebp+var_4]
.text:000006BB                 movzx   ecx, byte ptr [eax+0A1h]
.text:000006C2                 test    ecx, ecx
.text:000006C4                 jz      short loc_708
.text:000006C6                 mov     edx, [ebp+var_4]
.text:000006C9                 mov     eax, [ebp+var_4]
.text:000006CC                 mov     [ebp+var_7C], edx
.text:000006CF                 mov     [ebp+var_80], eax
.text:000006D2                 mov     ecx, [ebp+var_7C]
.text:000006D5                 mov     edx, [ebp+var_80]
.text:000006D8                 mov     eax, [ecx+0BCh]
.text:000006DE                 cmp     eax, [edx+0ACh]
.text:000006E4                 jb      short loc_708
.text:000006E6                 ja      short loc_6FC
.text:000006E8                 mov     ecx, [ebp+var_7C]
.text:000006EB                 mov     edx, [ebp+var_80]
.text:000006EE                 mov     eax, [ecx+0B8h]
.text:000006F4                 cmp     eax, [edx+0A8h]
.text:000006FA                 jb      short loc_708
.text:000006FC
.text:000006FC loc_6FC:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+266j
.text:000006FC                 mov     [ebp+var_84], 1
.text:00000706                 jmp     short loc_712
.text:00000708 ; ---------------------------------------------------------------------------
.text:00000708
.text:00000708 loc_708:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+244j
.text:00000708                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+264j ...
.text:00000708                 mov     [ebp+var_84], 0
.text:00000712
.text:00000712 loc_712:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+286j
.text:00000712                 mov     cl, byte ptr [ebp+var_84]
.text:00000718                 mov     [ebp+var_4A], cl
.text:0000071B                 cmp     [ebp+var_44], 0
.text:0000071F                 jnz     short loc_740
.text:00000721                 mov     edx, [ebp+var_4]
.text:00000724                 mov     eax, [edx+54h]
.text:00000727                 cmp     eax, [ebp+var_10]
.text:0000072A                 jz      short loc_740
.text:0000072C                 movzx   ecx, [ebp+var_49]
.text:00000730                 test    ecx, ecx
.text:00000732                 jnz     short loc_740
.text:00000734                 movzx   edx, [ebp+var_4A]
.text:00000738                 test    edx, edx
.text:0000073A                 jz      loc_86A
.text:00000740
.text:00000740 loc_740:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+29Fj
.text:00000740                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2AAj ...
.text:00000740                 mov     eax, [ebp+var_4]
.text:00000743                 mov     ecx, [ebp+var_4]
.text:00000746                 mov     edx, [eax+54h]
.text:00000749                 sub     edx, [ecx+0CCh]
.text:0000074F                 push    edx             ; unsigned int
.text:00000750                 mov     eax, [ebp+var_4]
.text:00000753                 mov     ecx, [eax+44h]
.text:00000756                 mov     edx, [ebp+var_4]
.text:00000759                 add     ecx, [edx+0CCh]
.text:0000075F                 push    ecx             ; void *
.text:00000760                 mov     eax, [ebp+arg_4]
.text:00000763                 push    eax             ; struct ISequentialOutStream *
.text:00000764                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000769                 mov     [ebp+var_50], eax
.text:0000076C                 mov     ecx, [ebp+var_4]
.text:0000076F                 mov     edx, [ebp+var_4]
.text:00000772                 mov     eax, [edx+54h]
.text:00000775                 mov     [ecx+0CCh], eax
.text:0000077B                 mov     ecx, [ebp+var_4]
.text:0000077E                 mov     edx, [ebp+var_4]
.text:00000781                 mov     eax, [ecx+54h]
.text:00000784                 cmp     eax, [edx+58h]
.text:00000787                 jnz     short loc_7A0
.text:00000789                 mov     ecx, [ebp+var_4]
.text:0000078C                 mov     dword ptr [ecx+54h], 0
.text:00000793                 mov     edx, [ebp+var_4]
.text:00000796                 mov     dword ptr [edx+0CCh], 0
.text:000007A0
.text:000007A0 loc_7A0:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+307j
.text:000007A0                 mov     eax, [ebp+var_4]
.text:000007A3                 mov     ecx, [ebp+var_4]
.text:000007A6                 mov     edx, [eax+58h]
.text:000007A9                 sub     edx, [ecx+54h]
.text:000007AC                 mov     eax, [ebp+var_4]
.text:000007AF                 cmp     edx, [eax+0C8h]
.text:000007B5                 jnb     short loc_7C5
.text:000007B7                 mov     ecx, [ebp+var_4]
.text:000007BA                 mov     edx, [ecx+58h]
.text:000007BD                 mov     [ebp+var_88], edx
.text:000007C3                 jmp     short loc_7DA
.text:000007C5 ; ---------------------------------------------------------------------------
.text:000007C5
.text:000007C5 loc_7C5:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+335j
.text:000007C5                 mov     eax, [ebp+var_4]
.text:000007C8                 mov     ecx, [eax+54h]
.text:000007CB                 mov     edx, [ebp+var_4]
.text:000007CE                 add     ecx, [edx+0C8h]
.text:000007D4                 mov     [ebp+var_88], ecx
.text:000007DA
.text:000007DA loc_7DA:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+343j
.text:000007DA                 mov     eax, [ebp+var_88]
.text:000007E0                 mov     [ebp+var_10], eax
.text:000007E3                 cmp     [ebp+var_44], 0
.text:000007E7                 jz      short loc_7F3
.text:000007E9                 mov     eax, 1
.text:000007EE                 jmp     loc_8C3
.text:000007F3 ; ---------------------------------------------------------------------------
.text:000007F3
.text:000007F3 loc_7F3:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+367j
.text:000007F3                 mov     ecx, [ebp+var_50]
.text:000007F6                 mov     [ebp+var_54], ecx
.text:000007F9                 cmp     [ebp+var_54], 0
.text:000007FD                 jz      short loc_807
.text:000007FF                 mov     eax, [ebp+var_54]
.text:00000802                 jmp     loc_8C3
.text:00000807 ; ---------------------------------------------------------------------------
.text:00000807
.text:00000807 loc_807:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+37Dj
.text:00000807                 movzx   edx, [ebp+var_4A]
.text:0000080B                 test    edx, edx
.text:0000080D                 jz      short loc_847
.text:0000080F                 cmp     [ebp+var_3C], 3
.text:00000813                 jnz     short loc_81F
.text:00000815                 mov     eax, [ebp+var_4]
.text:00000818                 mov     byte ptr [eax+0D1h], 1
.text:0000081F
.text:0000081F loc_81F:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+393j
.text:0000081F                 mov     ecx, [ebp+var_4]
.text:00000822                 movzx   edx, byte ptr [ecx+0D0h]
.text:00000829                 test    edx, edx
.text:0000082B                 jz      short loc_843
.text:0000082D                 cmp     [ebp+var_3C], 1
.text:00000831                 jz      short loc_843
.text:00000833                 cmp     [ebp+var_3C], 4
.text:00000837                 jz      short loc_843
.text:00000839                 mov     eax, 1
.text:0000083E                 jmp     loc_8C3
.text:00000843 ; ---------------------------------------------------------------------------
.text:00000843
.text:00000843 loc_843:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3ABj
.text:00000843                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3B1j ...
.text:00000843                 xor     eax, eax
.text:00000845                 jmp     short loc_8C3
.text:00000847 ; ---------------------------------------------------------------------------
.text:00000847
.text:00000847 loc_847:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+38Dj
.text:00000847                 movzx   eax, [ebp+var_49]
.text:0000084B                 test    eax, eax
.text:0000084D                 jz      short loc_86A
.text:0000084F                 cmp     [ebp+var_3C], 3
.text:00000853                 jnz     short loc_85F
.text:00000855                 mov     ecx, [ebp+var_4]
.text:00000858                 mov     byte ptr [ecx+0D1h], 1
.text:0000085F
.text:0000085F loc_85F:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3D3j
.text:0000085F                 xor     eax, eax
.text:00000861                 cmp     [ebp+var_3C], 1
.text:00000865                 setnz   al
.text:00000868                 jmp     short loc_8C3
.text:0000086A ; ---------------------------------------------------------------------------
.text:0000086A
.text:0000086A loc_86A:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2BAj
.text:0000086A                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3CDj
.text:0000086A                 cmp     [ebp+arg_8], 0
.text:0000086E                 jz      short loc_8BE
.text:00000870                 mov     edx, [ebp+var_4]
.text:00000873                 mov     eax, [edx+0B0h]
.text:00000879                 sub     eax, [ebp+var_C]
.text:0000087C                 mov     ecx, [edx+0B4h]
.text:00000882                 sbb     ecx, [ebp+var_8]
.text:00000885                 mov     [ebp+var_60], eax
.text:00000888                 mov     [ebp+var_5C], ecx
.text:0000088B                 mov     edx, [ebp+var_4]
.text:0000088E                 add     edx, 0B8h ; '+'
.text:00000894                 mov     esi, esp
.text:00000896                 push    edx
.text:00000897                 lea     eax, [ebp+var_60]
.text:0000089A                 push    eax
.text:0000089B                 mov     ecx, [ebp+arg_8]
.text:0000089E                 mov     edx, [ecx]
.text:000008A0                 mov     eax, [ebp+arg_8]
.text:000008A3                 push    eax
.text:000008A4                 mov     ecx, [edx+0Ch]
.text:000008A7                 call    ecx
.text:000008A9                 cmp     esi, esp
.text:000008AB                 call    __RTC_CheckEsp
.text:000008B0                 mov     [ebp+var_68], eax
.text:000008B3                 cmp     [ebp+var_68], 0
.text:000008B7                 jz      short loc_8BE
.text:000008B9                 mov     eax, [ebp+var_68]
.text:000008BC                 jmp     short loc_8C3
.text:000008BE ; ---------------------------------------------------------------------------
.text:000008BE
.text:000008BE loc_8BE:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3EEj
.text:000008BE                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+437j
.text:000008BE                 jmp     loc_512
.text:000008C3 ; ---------------------------------------------------------------------------
.text:000008C3
.text:000008C3 loc_8C3:                                ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3Ej
.text:000008C3                                         ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+EFj ...
.text:000008C3                 push    edx
.text:000008C4                 mov     ecx, ebp
.text:000008C6                 push    eax
.text:000008C7                 lea     edx, $LN38
.text:000008CD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008D2                 pop     eax
.text:000008D3                 pop     edx
.text:000008D4                 pop     edi
.text:000008D5                 pop     esi
.text:000008D6                 add     esp, 88h
.text:000008DC                 cmp     ebp, esp
.text:000008DE                 call    __RTC_CheckEsp
.text:000008E3                 mov     esp, ebp
.text:000008E5                 pop     ebp
.text:000008E6                 retn    0Ch
.text:000008E6 ?CodeSpec@CDecoder@NLzma@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:000008E6
.text:000008E6 ; ---------------------------------------------------------------------------
.text:000008E9                 align 4
.text:000008EC $LN38           dd 3                    ; DATA XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+447o
.text:000008F0                 dd offset $LN37
.text:000008F4 $LN37           dd 0FFFFFFD0h, 4        ; DATA XREF: .text:000008F0o
.text:000008FC                 dd offset $LN34         ; "inSizeProcessed"
.text:00000900                 dd 0FFFFFFC4h, 4
.text:00000908                 dd offset $LN35         ; "status"
.text:0000090C                 dd 0FFFFFFA0h, 8
.text:00000914                 dd offset $LN36         ; "inSize"
.text:00000918 $LN36           db 'inSize',0           ; DATA XREF: .text:00000914o
.text:0000091F $LN35           db 'status',0           ; DATA XREF: .text:00000908o
.text:00000926 $LN34           db 'inSizeProcessed',0  ; DATA XREF: .text:000008FCo
.text:00000936                 align 10h
.text:00000940
.text:00000940 ; =============== S U B R O U T I N E =======================================
.text:00000940
.text:00000940 ; Attributes: bp-based frame
.text:00000940
.text:00000940 ; __int32 __stdcall NCompress::NLzma::CDecoder::Code(NCompress::NLzma::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000940                 public ?Code@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000940 ?Code@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000940                                         ; DATA XREF: .rdata:00000E88o
.text:00000940
.text:00000940 this            = dword ptr  8
.text:00000940 arg_4           = dword ptr  0Ch
.text:00000940 arg_8           = dword ptr  10h
.text:00000940 arg_10          = dword ptr  18h
.text:00000940 arg_14          = dword ptr  1Ch
.text:00000940
.text:00000940                 push    ebp
.text:00000941                 mov     ebp, esp
.text:00000943                 push    esi
.text:00000944                 mov     eax, [ebp+this]
.text:00000947                 cmp     dword ptr [eax+24h], 0
.text:0000094B                 jnz     short loc_954
.text:0000094D                 mov     eax, 80070057h
.text:00000952                 jmp     short loc_987
.text:00000954 ; ---------------------------------------------------------------------------
.text:00000954
.text:00000954 loc_954:                                ; CODE XREF: NCompress::NLzma::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+Bj
.text:00000954                 mov     esi, esp
.text:00000956                 mov     ecx, [ebp+arg_10]
.text:00000959                 push    ecx
.text:0000095A                 mov     edx, [ebp+this]
.text:0000095D                 add     edx, 14h
.text:00000960                 mov     eax, [ebp+this]
.text:00000963                 mov     ecx, [eax+14h]
.text:00000966                 push    edx
.text:00000967                 mov     edx, [ecx+0Ch]
.text:0000096A                 call    edx
.text:0000096C                 cmp     esi, esp
.text:0000096E                 call    __RTC_CheckEsp
.text:00000973                 mov     eax, [ebp+arg_14]
.text:00000976                 push    eax             ; struct ICompressProgressInfo *
.text:00000977                 mov     ecx, [ebp+arg_8]
.text:0000097A                 push    ecx             ; struct ISequentialOutStream *
.text:0000097B                 mov     edx, [ebp+arg_4]
.text:0000097E                 push    edx             ; struct ISequentialInStream *
.text:0000097F                 mov     ecx, [ebp+this] ; this
.text:00000982                 call    ?CodeSpec@CDecoder@NLzma@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00000987
.text:00000987 loc_987:                                ; CODE XREF: NCompress::NLzma::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+12j
.text:00000987                 pop     esi
.text:00000988                 cmp     ebp, esp
.text:0000098A                 call    __RTC_CheckEsp
.text:0000098F                 pop     ebp
.text:00000990                 retn    18h
.text:00000990 ?Code@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000990
.text:00000990 ; ---------------------------------------------------------------------------
.text:00000993                 align 10h
.text:000009A0
.text:000009A0 ; =============== S U B R O U T I N E =======================================
.text:000009A0
.text:000009A0 ; Attributes: bp-based frame
.text:000009A0
.text:000009A0 ; __int32 __stdcall NCompress::NLzma::CDecoder::SetInStream(NCompress::NLzma::CDecoder *this, struct ISequentialInStream *)
.text:000009A0                 public ?SetInStream@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:000009A0 ?SetInStream@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:000009A0                                         ; DATA XREF: .rdata:00000E30o
.text:000009A0
.text:000009A0 this            = dword ptr  8
.text:000009A0 arg_4           = dword ptr  0Ch
.text:000009A0
.text:000009A0                 push    ebp
.text:000009A1                 mov     ebp, esp
.text:000009A3                 mov     eax, [ebp+arg_4]
.text:000009A6                 push    eax
.text:000009A7                 mov     ecx, [ebp+this]
.text:000009AA                 add     ecx, 10h
.text:000009AD                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000009B2                 xor     eax, eax
.text:000009B4                 cmp     ebp, esp
.text:000009B6                 call    __RTC_CheckEsp
.text:000009BB                 pop     ebp
.text:000009BC                 retn    8
.text:000009BC ?SetInStream@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:000009BC
.text:000009BC ; ---------------------------------------------------------------------------
.text:000009BF                 align 10h
.text:000009C0
.text:000009C0 ; =============== S U B R O U T I N E =======================================
.text:000009C0
.text:000009C0 ; Attributes: bp-based frame
.text:000009C0
.text:000009C0 ; __int32 __stdcall NCompress::NLzma::CDecoder::ReleaseInStream(NCompress::NLzma::CDecoder *this)
.text:000009C0                 public ?ReleaseInStream@CDecoder@NLzma@NCompress@@UAGJXZ
.text:000009C0 ?ReleaseInStream@CDecoder@NLzma@NCompress@@UAGJXZ proc near
.text:000009C0                                         ; DATA XREF: .rdata:00000E34o
.text:000009C0
.text:000009C0 this            = dword ptr  8
.text:000009C0
.text:000009C0                 push    ebp
.text:000009C1                 mov     ebp, esp
.text:000009C3                 mov     ecx, [ebp+this]
.text:000009C6                 add     ecx, 10h
.text:000009C9                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000009CE                 xor     eax, eax
.text:000009D0                 cmp     ebp, esp
.text:000009D2                 call    __RTC_CheckEsp
.text:000009D7                 pop     ebp
.text:000009D8                 retn    4
.text:000009D8 ?ReleaseInStream@CDecoder@NLzma@NCompress@@UAGJXZ endp
.text:000009D8
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009DB                 align 10h
.text:000009E0
.text:000009E0 ; =============== S U B R O U T I N E =======================================
.text:000009E0
.text:000009E0 ; Attributes: bp-based frame
.text:000009E0
.text:000009E0 ; __int32 __stdcall NCompress::NLzma::CDecoder::Read(NCompress::NLzma::CDecoder *this, void *, unsigned int, unsigned int *)
.text:000009E0                 public ?Read@CDecoder@NLzma@NCompress@@UAGJPAXIPAI@Z
.text:000009E0 ?Read@CDecoder@NLzma@NCompress@@UAGJPAXIPAI@Z proc near
.text:000009E0                                         ; DATA XREF: .rdata:00000E08o
.text:000009E0
.text:000009E0 var_44          = dword ptr -44h
.text:000009E0 var_40          = dword ptr -40h
.text:000009E0 var_3C          = dword ptr -3Ch
.text:000009E0 var_38          = dword ptr -38h
.text:000009E0 var_34          = dword ptr -34h
.text:000009E0 var_2C          = byte ptr -2Ch
.text:000009E0 var_20          = dword ptr -20h
.text:000009E0 var_18          = dword ptr -18h
.text:000009E0 var_14          = dword ptr -14h
.text:000009E0 var_C           = dword ptr -0Ch
.text:000009E0 var_4           = dword ptr -4
.text:000009E0 this            = dword ptr  8
.text:000009E0 arg_4           = dword ptr  0Ch
.text:000009E0 arg_8           = dword ptr  10h
.text:000009E0 arg_C           = dword ptr  14h
.text:000009E0
.text:000009E0                 push    ebp
.text:000009E1                 mov     ebp, esp
.text:000009E3                 sub     esp, 44h
.text:000009E6                 push    esi
.text:000009E7                 push    edi
.text:000009E8                 lea     edi, [ebp+var_44]
.text:000009EB                 mov     ecx, 11h
.text:000009F0                 mov     eax, 0CCCCCCCCh
.text:000009F5                 rep stosd
.text:000009F7                 cmp     [ebp+arg_C], 0
.text:000009FB                 jz      short loc_A06
.text:000009FD                 mov     eax, [ebp+arg_C]
.text:00000A00                 mov     dword ptr [eax], 0
.text:00000A06
.text:00000A06 loc_A06:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1Bj
.text:00000A06                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1D3j
.text:00000A06                 mov     ecx, [ebp+this]
.text:00000A09                 mov     edx, [ebp+this]
.text:00000A0C                 mov     eax, [ecx+10h]
.text:00000A0F                 cmp     eax, [edx+14h]
.text:00000A12                 jnz     short loc_A76
.text:00000A14                 mov     ecx, [ebp+this]
.text:00000A17                 mov     dword ptr [ecx+14h], 0
.text:00000A1E                 mov     edx, [ebp+this]
.text:00000A21                 mov     dword ptr [edx+10h], 0
.text:00000A28                 mov     ecx, [ebp+this]
.text:00000A2B                 add     ecx, 8
.text:00000A2E                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00000A33                 mov     [ebp+var_3C], eax
.text:00000A36                 mov     eax, [ebp+this]
.text:00000A39                 add     eax, 14h
.text:00000A3C                 mov     esi, esp
.text:00000A3E                 push    eax
.text:00000A3F                 mov     ecx, [ebp+this]
.text:00000A42                 mov     edx, [ecx+0A8h]
.text:00000A48                 push    edx
.text:00000A49                 mov     eax, [ebp+this]
.text:00000A4C                 mov     ecx, [eax+0Ch]
.text:00000A4F                 push    ecx
.text:00000A50                 mov     edx, [ebp+var_3C]
.text:00000A53                 push    edx
.text:00000A54                 mov     eax, [ebp+var_3C]
.text:00000A57                 mov     ecx, [eax]
.text:00000A59                 mov     edx, [ecx+0Ch]
.text:00000A5C                 call    edx
.text:00000A5E                 cmp     esi, esp
.text:00000A60                 call    __RTC_CheckEsp
.text:00000A65                 mov     [ebp+var_4], eax
.text:00000A68                 cmp     [ebp+var_4], 0
.text:00000A6C                 jz      short loc_A76
.text:00000A6E                 mov     eax, [ebp+var_4]
.text:00000A71                 jmp     loc_BBB
.text:00000A76 ; ---------------------------------------------------------------------------
.text:00000A76
.text:00000A76 loc_A76:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+32j
.text:00000A76                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+8Cj
.text:00000A76                 mov     eax, [ebp+this]
.text:00000A79                 mov     ecx, [ebp+this]
.text:00000A7C                 mov     edx, [eax+14h]
.text:00000A7F                 sub     edx, [ecx+10h]
.text:00000A82                 mov     [ebp+var_C], edx
.text:00000A85                 mov     eax, [ebp+this]
.text:00000A88                 movzx   ecx, byte ptr [eax+89h]
.text:00000A8F                 test    ecx, ecx
.text:00000A91                 jz      short loc_ADA
.text:00000A93                 mov     edx, [ebp+this]
.text:00000A96                 mov     eax, [ebp+this]
.text:00000A99                 mov     ecx, [edx+90h]
.text:00000A9F                 sub     ecx, [eax+0A0h]
.text:00000AA5                 mov     edx, [edx+94h]
.text:00000AAB                 sbb     edx, [eax+0A4h]
.text:00000AB1                 mov     [ebp+var_18], ecx
.text:00000AB4                 mov     [ebp+var_14], edx
.text:00000AB7                 mov     eax, [ebp+arg_8]
.text:00000ABA                 xor     ecx, ecx
.text:00000ABC                 mov     [ebp+var_44], eax
.text:00000ABF                 mov     [ebp+var_40], ecx
.text:00000AC2                 mov     edx, [ebp+var_14]
.text:00000AC5                 cmp     edx, [ebp+var_40]
.text:00000AC8                 ja      short loc_ADA
.text:00000ACA                 jb      short loc_AD4
.text:00000ACC                 mov     eax, [ebp+var_18]
.text:00000ACF                 cmp     eax, [ebp+var_44]
.text:00000AD2                 jnb     short loc_ADA
.text:00000AD4
.text:00000AD4 loc_AD4:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+EAj
.text:00000AD4                 mov     ecx, [ebp+var_18]
.text:00000AD7                 mov     [ebp+arg_8], ecx
.text:00000ADA
.text:00000ADA loc_ADA:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+B1j
.text:00000ADA                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+E8j ...
.text:00000ADA                 mov     edx, [ebp+arg_8]
.text:00000ADD                 mov     [ebp+var_20], edx
.text:00000AE0                 lea     eax, [ebp+var_2C]
.text:00000AE3                 push    eax
.text:00000AE4                 push    0
.text:00000AE6                 lea     ecx, [ebp+var_C]
.text:00000AE9                 push    ecx
.text:00000AEA                 mov     edx, [ebp+this]
.text:00000AED                 mov     eax, [edx+0Ch]
.text:00000AF0                 mov     ecx, [ebp+this]
.text:00000AF3                 add     eax, [ecx+10h]
.text:00000AF6                 push    eax
.text:00000AF7                 lea     edx, [ebp+var_20]
.text:00000AFA                 push    edx
.text:00000AFB                 mov     eax, [ebp+arg_4]
.text:00000AFE                 push    eax
.text:00000AFF                 mov     ecx, [ebp+this]
.text:00000B02                 add     ecx, 18h
.text:00000B05                 push    ecx
.text:00000B06                 call    _LzmaDec_DecodeToBuf@28 ; LzmaDec_DecodeToBuf(x,x,x,x,x,x,x)
.text:00000B0B                 mov     [ebp+var_34], eax
.text:00000B0E                 mov     edx, [ebp+this]
.text:00000B11                 mov     eax, [edx+10h]
.text:00000B14                 add     eax, [ebp+var_C]
.text:00000B17                 mov     ecx, [ebp+this]
.text:00000B1A                 mov     [ecx+10h], eax
.text:00000B1D                 mov     edx, [ebp+var_C]
.text:00000B20                 xor     eax, eax
.text:00000B22                 mov     ecx, [ebp+this]
.text:00000B25                 add     edx, [ecx+98h]
.text:00000B2B                 adc     eax, [ecx+9Ch]
.text:00000B31                 mov     ecx, [ebp+this]
.text:00000B34                 mov     [ecx+98h], edx
.text:00000B3A                 mov     [ecx+9Ch], eax
.text:00000B40                 mov     edx, [ebp+var_20]
.text:00000B43                 xor     eax, eax
.text:00000B45                 mov     ecx, [ebp+this]
.text:00000B48                 add     edx, [ecx+0A0h]
.text:00000B4E                 adc     eax, [ecx+0A4h]
.text:00000B54                 mov     ecx, [ebp+this]
.text:00000B57                 mov     [ecx+0A0h], edx
.text:00000B5D                 mov     [ecx+0A4h], eax
.text:00000B63                 mov     edx, [ebp+arg_8]
.text:00000B66                 sub     edx, [ebp+var_20]
.text:00000B69                 mov     [ebp+arg_8], edx
.text:00000B6C                 mov     eax, [ebp+arg_4]
.text:00000B6F                 add     eax, [ebp+var_20]
.text:00000B72                 mov     [ebp+arg_4], eax
.text:00000B75                 cmp     [ebp+arg_C], 0
.text:00000B79                 jz      short loc_B88
.text:00000B7B                 mov     ecx, [ebp+arg_C]
.text:00000B7E                 mov     edx, [ecx]
.text:00000B80                 add     edx, [ebp+var_20]
.text:00000B83                 mov     eax, [ebp+arg_C]
.text:00000B86                 mov     [eax], edx
.text:00000B88
.text:00000B88 loc_B88:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+199j
.text:00000B88                 mov     ecx, [ebp+var_34]
.text:00000B8B                 push    ecx
.text:00000B8C                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00000B91                 mov     [ebp+var_38], eax
.text:00000B94                 cmp     [ebp+var_38], 0
.text:00000B98                 jz      short loc_B9F
.text:00000B9A                 mov     eax, [ebp+var_38]
.text:00000B9D                 jmp     short loc_BBB
.text:00000B9F ; ---------------------------------------------------------------------------
.text:00000B9F
.text:00000B9F loc_B9F:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1B8j
.text:00000B9F                 cmp     [ebp+var_C], 0
.text:00000BA3                 jnz     short loc_BAF
.text:00000BA5                 cmp     [ebp+var_20], 0
.text:00000BA9                 jnz     short loc_BAF
.text:00000BAB                 xor     eax, eax
.text:00000BAD                 jmp     short loc_BBB
.text:00000BAF ; ---------------------------------------------------------------------------
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1C3j
.text:00000BAF                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1C9j
.text:00000BAF                 cmp     [ebp+arg_8], 0
.text:00000BB3                 jnz     loc_A06
.text:00000BB9                 xor     eax, eax
.text:00000BBB
.text:00000BBB loc_BBB:                                ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+91j
.text:00000BBB                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1BDj ...
.text:00000BBB                 push    edx
.text:00000BBC                 mov     ecx, ebp
.text:00000BBE                 push    eax
.text:00000BBF                 lea     edx, $LN19
.text:00000BC5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BCA                 pop     eax
.text:00000BCB                 pop     edx
.text:00000BCC                 pop     edi
.text:00000BCD                 pop     esi
.text:00000BCE                 add     esp, 44h
.text:00000BD1                 cmp     ebp, esp
.text:00000BD3                 call    __RTC_CheckEsp
.text:00000BD8                 mov     esp, ebp
.text:00000BDA                 pop     ebp
.text:00000BDB                 retn    10h
.text:00000BDB ?Read@CDecoder@NLzma@NCompress@@UAGJPAXIPAI@Z endp
.text:00000BDB
.text:00000BDB ; ---------------------------------------------------------------------------
.text:00000BDE                 align 10h
.text:00000BE0 $LN19           dd 3                    ; DATA XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1DFo
.text:00000BE4                 dd offset $LN18
.text:00000BE8 $LN18           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000BE4o
.text:00000BF0                 dd offset $LN15         ; "inProcessed"
.text:00000BF4                 dd 0FFFFFFE0h, 4
.text:00000BFC                 dd offset $LN16         ; "outProcessed"
.text:00000C00                 dd 0FFFFFFD4h, 4
.text:00000C08                 dd offset $LN17         ; "status"
.text:00000C0C $LN17           db 'status',0           ; DATA XREF: .text:00000C08o
.text:00000C13 $LN16           db 'outProcessed',0     ; DATA XREF: .text:00000BFCo
.text:00000C20 $LN15           db 'inProcessed',0      ; DATA XREF: .text:00000BF0o
.text:00000C2C                 align 10h
.text:00000C30
.text:00000C30 ; =============== S U B R O U T I N E =======================================
.text:00000C30
.text:00000C30 ; Attributes: bp-based frame
.text:00000C30
.text:00000C30 ; __int32 __thiscall NCompress::NLzma::CDecoder::CodeResume(NCompress::NLzma::CDecoder *this, struct ISequentialOutStream *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000C30                 public ?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:00000C30 ?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z proc near
.text:00000C30
.text:00000C30 var_4           = dword ptr -4
.text:00000C30 arg_0           = dword ptr  8
.text:00000C30 arg_4           = dword ptr  0Ch
.text:00000C30 arg_8           = dword ptr  10h
.text:00000C30
.text:00000C30                 push    ebp
.text:00000C31                 mov     ebp, esp
.text:00000C33                 push    ecx
.text:00000C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C3B                 mov     [ebp+var_4], ecx
.text:00000C3E                 mov     eax, [ebp+arg_4]
.text:00000C41                 push    eax             ; unsigned __int64 *
.text:00000C42                 mov     ecx, [ebp+var_4] ; this
.text:00000C45                 call    ?SetOutStreamSizeResume@CDecoder@NLzma@NCompress@@AAEXPB_K@Z ; NCompress::NLzma::CDecoder::SetOutStreamSizeResume(unsigned __int64 const *)
.text:00000C4A                 mov     ecx, [ebp+arg_8]
.text:00000C4D                 push    ecx             ; struct ICompressProgressInfo *
.text:00000C4E                 mov     edx, [ebp+arg_0]
.text:00000C51                 push    edx             ; struct ISequentialOutStream *
.text:00000C52                 mov     ecx, [ebp+var_4]
.text:00000C55                 add     ecx, 20h ; ' '
.text:00000C58                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000C5D                 push    eax             ; struct ISequentialInStream *
.text:00000C5E                 mov     ecx, [ebp+var_4] ; this
.text:00000C61                 call    ?CodeSpec@CDecoder@NLzma@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00000C66                 add     esp, 4
.text:00000C69                 cmp     ebp, esp
.text:00000C6B                 call    __RTC_CheckEsp
.text:00000C70                 mov     esp, ebp
.text:00000C72                 pop     ebp
.text:00000C73                 retn    0Ch
.text:00000C73 ?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z endp
.text:00000C73
.text:00000C73 ; ---------------------------------------------------------------------------
.text:00000C76                 align 10h
.text:00000C80
.text:00000C80 ; =============== S U B R O U T I N E =======================================
.text:00000C80
.text:00000C80 ; Attributes: bp-based frame
.text:00000C80
.text:00000C80 ; __int32 __thiscall NCompress::NLzma::CDecoder::ReadFromInputStream(NCompress::NLzma::CDecoder *this, void *Dst, unsigned int, unsigned int *)
.text:00000C80                 public ?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z
.text:00000C80 ?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z proc near
.text:00000C80
.text:00000C80 var_14          = dword ptr -14h
.text:00000C80 Size            = dword ptr -10h
.text:00000C80 var_C           = dword ptr -0Ch
.text:00000C80 var_8           = dword ptr -8
.text:00000C80 var_4           = dword ptr -4
.text:00000C80 Dst             = dword ptr  8
.text:00000C80 arg_4           = dword ptr  0Ch
.text:00000C80 arg_8           = dword ptr  10h
.text:00000C80
.text:00000C80                 push    ebp
.text:00000C81                 mov     ebp, esp
.text:00000C83                 sub     esp, 14h
.text:00000C86                 push    esi
.text:00000C87                 mov     eax, 0CCCCCCCCh
.text:00000C8C                 mov     [ebp+var_14], eax
.text:00000C8F                 mov     [ebp+Size], eax
.text:00000C92                 mov     [ebp+var_C], eax
.text:00000C95                 mov     [ebp+var_8], eax
.text:00000C98                 mov     [ebp+var_4], eax
.text:00000C9B                 mov     [ebp+var_4], ecx
.text:00000C9E                 mov     ecx, [ebp+var_4] ; this
.text:00000CA1                 call    ?CreateInputBuffer@CDecoder@NLzma@NCompress@@AAEJXZ ; NCompress::NLzma::CDecoder::CreateInputBuffer(void)
.text:00000CA6                 mov     [ebp+var_8], eax
.text:00000CA9                 cmp     [ebp+var_8], 0
.text:00000CAD                 jz      short loc_CB7
.text:00000CAF                 mov     eax, [ebp+var_8]
.text:00000CB2                 jmp     loc_DE6
.text:00000CB7 ; ---------------------------------------------------------------------------
.text:00000CB7
.text:00000CB7 loc_CB7:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+2Dj
.text:00000CB7                 cmp     [ebp+arg_8], 0
.text:00000CBB                 jz      short loc_CC6
.text:00000CBD                 mov     eax, [ebp+arg_8]
.text:00000CC0                 mov     dword ptr [eax], 0
.text:00000CC6
.text:00000CC6 loc_CC6:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+3Bj
.text:00000CC6                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *):loc_DDFj
.text:00000CC6                 cmp     [ebp+arg_4], 0
.text:00000CCA                 jbe     loc_DE4
.text:00000CD0                 mov     ecx, [ebp+var_4]
.text:00000CD3                 mov     edx, [ebp+var_4]
.text:00000CD6                 mov     eax, [ecx+28h]
.text:00000CD9                 cmp     eax, [edx+2Ch]
.text:00000CDC                 jnz     short loc_D4E
.text:00000CDE                 mov     ecx, [ebp+var_4]
.text:00000CE1                 mov     dword ptr [ecx+2Ch], 0
.text:00000CE8                 mov     edx, [ebp+var_4]
.text:00000CEB                 mov     dword ptr [edx+28h], 0
.text:00000CF2                 mov     ecx, [ebp+var_4]
.text:00000CF5                 add     ecx, 20h ; ' '
.text:00000CF8                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00000CFD                 mov     [ebp+var_14], eax
.text:00000D00                 mov     eax, [ebp+var_4]
.text:00000D03                 add     eax, 2Ch ; ','
.text:00000D06                 mov     esi, esp
.text:00000D08                 push    eax
.text:00000D09                 mov     ecx, [ebp+var_4]
.text:00000D0C                 mov     edx, [ecx+0C0h]
.text:00000D12                 push    edx
.text:00000D13                 mov     eax, [ebp+var_4]
.text:00000D16                 mov     ecx, [eax+24h]
.text:00000D19                 push    ecx
.text:00000D1A                 mov     edx, [ebp+var_14]
.text:00000D1D                 push    edx
.text:00000D1E                 mov     eax, [ebp+var_14]
.text:00000D21                 mov     ecx, [eax]
.text:00000D23                 mov     edx, [ecx+0Ch]
.text:00000D26                 call    edx
.text:00000D28                 cmp     esi, esp
.text:00000D2A                 call    __RTC_CheckEsp
.text:00000D2F                 mov     [ebp+var_C], eax
.text:00000D32                 cmp     [ebp+var_C], 0
.text:00000D36                 jz      short loc_D40
.text:00000D38                 mov     eax, [ebp+var_C]
.text:00000D3B                 jmp     loc_DE6
.text:00000D40 ; ---------------------------------------------------------------------------
.text:00000D40
.text:00000D40 loc_D40:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+B6j
.text:00000D40                 mov     eax, [ebp+var_4]
.text:00000D43                 cmp     dword ptr [eax+2Ch], 0
.text:00000D47                 jnz     short loc_D4E
.text:00000D49                 jmp     loc_DE4
.text:00000D4E ; ---------------------------------------------------------------------------
.text:00000D4E
.text:00000D4E loc_D4E:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+5Cj
.text:00000D4E                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+C7j
.text:00000D4E                 mov     ecx, [ebp+var_4]
.text:00000D51                 mov     edx, [ebp+var_4]
.text:00000D54                 mov     eax, [ecx+2Ch]
.text:00000D57                 sub     eax, [edx+28h]
.text:00000D5A                 mov     [ebp+Size], eax
.text:00000D5D                 mov     ecx, [ebp+Size]
.text:00000D60                 cmp     ecx, [ebp+arg_4]
.text:00000D63                 jbe     short loc_D6B
.text:00000D65                 mov     edx, [ebp+arg_4]
.text:00000D68                 mov     [ebp+Size], edx
.text:00000D6B
.text:00000D6B loc_D6B:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+E3j
.text:00000D6B                 mov     eax, [ebp+Size]
.text:00000D6E                 push    eax             ; Size
.text:00000D6F                 mov     ecx, [ebp+var_4]
.text:00000D72                 mov     edx, [ecx+24h]
.text:00000D75                 mov     eax, [ebp+var_4]
.text:00000D78                 add     edx, [eax+28h]
.text:00000D7B                 push    edx             ; Src
.text:00000D7C                 mov     ecx, [ebp+Dst]
.text:00000D7F                 push    ecx             ; Dst
.text:00000D80                 call    _memcpy
.text:00000D85                 add     esp, 0Ch
.text:00000D88                 mov     edx, [ebp+var_4]
.text:00000D8B                 mov     eax, [edx+28h]
.text:00000D8E                 add     eax, [ebp+Size]
.text:00000D91                 mov     ecx, [ebp+var_4]
.text:00000D94                 mov     [ecx+28h], eax
.text:00000D97                 mov     edx, [ebp+Size]
.text:00000D9A                 xor     eax, eax
.text:00000D9C                 mov     ecx, [ebp+var_4]
.text:00000D9F                 add     edx, [ecx+0B0h]
.text:00000DA5                 adc     eax, [ecx+0B4h]
.text:00000DAB                 mov     ecx, [ebp+var_4]
.text:00000DAE                 mov     [ecx+0B0h], edx
.text:00000DB4                 mov     [ecx+0B4h], eax
.text:00000DBA                 mov     edx, [ebp+arg_4]
.text:00000DBD                 sub     edx, [ebp+Size]
.text:00000DC0                 mov     [ebp+arg_4], edx
.text:00000DC3                 mov     eax, [ebp+Dst]
.text:00000DC6                 add     eax, [ebp+Size]
.text:00000DC9                 mov     [ebp+Dst], eax
.text:00000DCC                 cmp     [ebp+arg_8], 0
.text:00000DD0                 jz      short loc_DDF
.text:00000DD2                 mov     ecx, [ebp+arg_8]
.text:00000DD5                 mov     edx, [ecx]
.text:00000DD7                 add     edx, [ebp+Size]
.text:00000DDA                 mov     eax, [ebp+arg_8]
.text:00000DDD                 mov     [eax], edx
.text:00000DDF
.text:00000DDF loc_DDF:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+150j
.text:00000DDF                 jmp     loc_CC6
.text:00000DE4 ; ---------------------------------------------------------------------------
.text:00000DE4
.text:00000DE4 loc_DE4:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+4Aj
.text:00000DE4                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+C9j
.text:00000DE4                 xor     eax, eax
.text:00000DE6
.text:00000DE6 loc_DE6:                                ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+32j
.text:00000DE6                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+BBj
.text:00000DE6                 pop     esi
.text:00000DE7                 add     esp, 14h
.text:00000DEA                 cmp     ebp, esp
.text:00000DEC                 call    __RTC_CheckEsp
.text:00000DF1                 mov     esp, ebp
.text:00000DF3                 pop     ebp
.text:00000DF4                 retn    0Ch
.text:00000DF4 ?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z endp
.text:00000DF4
.text:00000DF4 ; ---------------------------------------------------------------------------
.text:00000DF7                 align 4
.text:00000DF7 _text           ends
.text:00000DF7
.rdata:00000DF8 ; ===========================================================================
.rdata:00000DF8
.rdata:00000DF8 ; Segment type: Pure data
.rdata:00000DF8 ; Segment permissions: Read
.rdata:00000DF8 _rdata          segment dword public 'DATA' use32
.rdata:00000DF8                 assume cs:_rdata
.rdata:00000DF8                 ;org 0DF8h
.rdata:00000DF8 ; COMDAT (pick largest)
.rdata:00000DF8                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BISequentialInStream@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000DFC                 public ??_7CDecoder@NLzma@NCompress@@6BISequentialInStream@@@
.rdata:00000DFC ; const NCompress::NLzma::CDecoder::`vftable'{for `ISequentialInStream'}
.rdata:00000DFC ??_7CDecoder@NLzma@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z
.rdata:00000DFC                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+A1o
.rdata:00000DFC                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+4Co
.rdata:00000DFC                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{24}' (_GUID const &,void * *)
.rdata:00000E00                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@WBI@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{24}' (void)
.rdata:00000E04                 dd offset ?Release@CDecoder@NLzma@NCompress@@WBI@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{24}' (void)
.rdata:00000E08                 dd offset ?Read@CDecoder@NLzma@NCompress@@UAGJPAXIPAI@Z ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)
.rdata:00000E08 _rdata          ends
.rdata:00000E08
.rdata:00000E0C ; ===========================================================================
.rdata:00000E0C
.rdata:00000E0C ; Segment type: Pure data
.rdata:00000E0C ; Segment permissions: Read
.rdata:00000E0C _rdata          segment dword public 'DATA' use32
.rdata:00000E0C                 assume cs:_rdata
.rdata:00000E0C                 ;org 0E0Ch
.rdata:00000E0C ; COMDAT (pick largest)
.rdata:00000E0C                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000E10                 public ??_7CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000E10 ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000E10 ??_7CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.rdata:00000E10                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+97o
.rdata:00000E10                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+42o
.rdata:00000E10                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{20}' (_GUID const &,void * *)
.rdata:00000E14                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{20}' (void)
.rdata:00000E18                 dd offset ?Release@CDecoder@NLzma@NCompress@@WBE@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{20}' (void)
.rdata:00000E1C                 dd offset ?SetOutStreamSize@CDecoder@NLzma@NCompress@@UAGJPB_K@Z ; NCompress::NLzma::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000E1C _rdata          ends
.rdata:00000E1C
.rdata:00000E20 ; ===========================================================================
.rdata:00000E20
.rdata:00000E20 ; Segment type: Pure data
.rdata:00000E20 ; Segment permissions: Read
.rdata:00000E20 _rdata          segment dword public 'DATA' use32
.rdata:00000E20                 assume cs:_rdata
.rdata:00000E20                 ;org 0E20h
.rdata:00000E20 ; COMDAT (pick largest)
.rdata:00000E20                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000E24                 public ??_7CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@
.rdata:00000E24 ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000E24 ??_7CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000E24                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+8Do
.rdata:00000E24                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+38o
.rdata:00000E24                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000E28                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{16}' (void)
.rdata:00000E2C                 dd offset ?Release@CDecoder@NLzma@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{16}' (void)
.rdata:00000E30                 dd offset ?SetInStream@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NLzma::CDecoder::SetInStream(ISequentialInStream *)
.rdata:00000E34                 dd offset ?ReleaseInStream@CDecoder@NLzma@NCompress@@UAGJXZ ; NCompress::NLzma::CDecoder::ReleaseInStream(void)
.rdata:00000E34 _rdata          ends
.rdata:00000E34
.rdata:00000E38 ; ===========================================================================
.rdata:00000E38
.rdata:00000E38 ; Segment type: Pure data
.rdata:00000E38 ; Segment permissions: Read
.rdata:00000E38 _rdata          segment dword public 'DATA' use32
.rdata:00000E38                 assume cs:_rdata
.rdata:00000E38                 ;org 0E38h
.rdata:00000E38 ; COMDAT (pick largest)
.rdata:00000E38                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata:00000E3C                 public ??_7CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@
.rdata:00000E3C ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetBufSize'}
.rdata:00000E3C ??_7CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000E3C                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+83o
.rdata:00000E3C                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+2Eo
.rdata:00000E3C                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000E40                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{12}' (void)
.rdata:00000E44                 dd offset ?Release@CDecoder@NLzma@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{12}' (void)
.rdata:00000E48                 dd offset ?SetInBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z ; NCompress::NLzma::CDecoder::SetInBufSize(uint,uint)
.rdata:00000E4C                 dd offset ?SetOutBufSize@CDecoder@NLzma@NCompress@@UAGJII@Z ; NCompress::NLzma::CDecoder::SetOutBufSize(uint,uint)
.rdata:00000E4C _rdata          ends
.rdata:00000E4C
.rdata:00000E50 ; ===========================================================================
.rdata:00000E50
.rdata:00000E50 ; Segment type: Pure data
.rdata:00000E50 ; Segment permissions: Read
.rdata:00000E50 _rdata          segment dword public 'DATA' use32
.rdata:00000E50                 assume cs:_rdata
.rdata:00000E50                 ;org 0E50h
.rdata:00000E50 ; COMDAT (pick largest)
.rdata:00000E50                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata:00000E54                 public ??_7CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@
.rdata:00000E54 ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetFinishMode'}
.rdata:00000E54 ??_7CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000E54                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+79o
.rdata:00000E54                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+24o
.rdata:00000E54                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000E58                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{8}' (void)
.rdata:00000E5C                 dd offset ?Release@CDecoder@NLzma@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{8}' (void)
.rdata:00000E60                 dd offset ?SetFinishMode@CDecoder@NLzma@NCompress@@UAGJI@Z ; NCompress::NLzma::CDecoder::SetFinishMode(uint)
.rdata:00000E60 _rdata          ends
.rdata:00000E60
.rdata:00000E64 ; ===========================================================================
.rdata:00000E64
.rdata:00000E64 ; Segment type: Pure data
.rdata:00000E64 ; Segment permissions: Read
.rdata:00000E64 _rdata          segment dword public 'DATA' use32
.rdata:00000E64                 assume cs:_rdata
.rdata:00000E64                 ;org 0E64h
.rdata:00000E64 ; COMDAT (pick largest)
.rdata:00000E64                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:00000E68                 public ??_7CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata:00000E68 ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:00000E68 ??_7CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000E68                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+6Fo
.rdata:00000E68                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+1Ao
.rdata:00000E68                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000E6C                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00000E70                 dd offset ?Release@CDecoder@NLzma@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{4}' (void)
.rdata:00000E74                 dd offset ?SetDecoderProperties2@CDecoder@NLzma@NCompress@@UAGJPBEI@Z ; NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:00000E74 _rdata          ends
.rdata:00000E74
.rdata:00000E78 ; ===========================================================================
.rdata:00000E78
.rdata:00000E78 ; Segment type: Pure data
.rdata:00000E78 ; Segment permissions: Read
.rdata:00000E78 _rdata          segment dword public 'DATA' use32
.rdata:00000E78                 assume cs:_rdata
.rdata:00000E78                 ;org 0E78h
.rdata:00000E78 ; COMDAT (pick largest)
.rdata:00000E78                 dd offset ??_R4CDecoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000E7C                 public ??_7CDecoder@NLzma@NCompress@@6BICompressCoder@@@
.rdata:00000E7C ; const NCompress::NLzma::CDecoder::`vftable'{for `ICompressCoder'}
.rdata:00000E7C ??_7CDecoder@NLzma@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000E7C                                         ; DATA XREF: NCompress::NLzma::CDecoder::CDecoder(void)+66o
.rdata:00000E7C                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+11o
.rdata:00000E7C                                         ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00000E80                 dd offset ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.rdata:00000E84                 dd offset ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.rdata:00000E88                 dd offset ?Code@CDecoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzma::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000E8C                 dd offset ??_ECDecoder@NLzma@NCompress@@UAEPAXI@Z ; NCompress::NLzma::CDecoder::`vector deleting destructor'(uint)
.rdata:00000E8C _rdata          ends
.rdata:00000E8C
.rtc$TMZ:00000E90 ; ===========================================================================
.rtc$TMZ:00000E90
.rtc$TMZ:00000E90 ; Segment type: Pure data
.rtc$TMZ:00000E90 ; Segment permissions: Read
.rtc$TMZ:00000E90 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000E90                 assume cs:_rtc$TMZ
.rtc$TMZ:00000E90                 ;org 0E90h
.rtc$TMZ:00000E90 ; COMDAT (pick any)
.rtc$TMZ:00000E90 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000E90 _rtc$TMZ        ends
.rtc$TMZ:00000E90
.rtc$IMZ:00000E94 ; ===========================================================================
.rtc$IMZ:00000E94
.rtc$IMZ:00000E94 ; Segment type: Pure data
.rtc$IMZ:00000E94 ; Segment permissions: Read
.rtc$IMZ:00000E94 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000E94                 assume cs:_rtc$IMZ
.rtc$IMZ:00000E94                 ;org 0E94h
.rtc$IMZ:00000E94 ; COMDAT (pick any)
.rtc$IMZ:00000E94 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000E94 _rtc$IMZ        ends
.rtc$IMZ:00000E94
.rdata$r:00000E98 ; ===========================================================================
.rdata$r:00000E98
.rdata$r:00000E98 ; Segment type: Pure data
.rdata$r:00000E98 ; Segment permissions: Read
.rdata$r:00000E98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E98                 assume cs:_rdata$r
.rdata$r:00000E98                 ;org 0E98h
.rdata$r:00000E98 ; COMDAT (pick any)
.rdata$r:00000E98                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressCoder@@@
.rdata$r:00000E98 ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000E98 ??_R4CDecoder@NLzma@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000E98                                         ; DATA XREF: .rdata:00000E78o
.rdata$r:00000E99                 db    0
.rdata$r:00000E9A                 db    0
.rdata$r:00000E9B                 db    0
.rdata$r:00000E9C                 db    0
.rdata$r:00000E9D                 db    0
.rdata$r:00000E9E                 db    0
.rdata$r:00000E9F                 db    0
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00000EA8                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EA8 _rdata$r        ends
.rdata$r:00000EA8
.data:00000EAC ; ===========================================================================
.data:00000EAC
.data:00000EAC ; Segment type: Pure data
.data:00000EAC ; Segment permissions: Read/Write
.data:00000EAC _data           segment dword public 'DATA' use32
.data:00000EAC                 assume cs:_data
.data:00000EAC                 ;org 0EACh
.data:00000EAC ; COMDAT (pick any)
.data:00000EAC                 public ??_R0?AVCDecoder@NLzma@NCompress@@@8
.data:00000EAC ; class NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.data:00000EAC ??_R0?AVCDecoder@NLzma@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000EAC                                         ; DATA XREF: .rdata$r:00000EA4o
.data:00000EAC                                         ; .rdata$r:NCompress::NLzma::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000EAC                                         ; const type_info::`vftable'
.data:00000EB0                 db    0
.data:00000EB1                 db    0
.data:00000EB2                 db    0
.data:00000EB3                 db    0
.data:00000EB4                 db  2Eh ; .
.data:00000EB5                 db  3Fh ; ?
.data:00000EB6                 db  41h ; A
.data:00000EB7                 db  56h ; V
.data:00000EB8                 db  43h ; C
.data:00000EB9                 db  44h ; D
.data:00000EBA                 db  65h ; e
.data:00000EBB                 db  63h ; c
.data:00000EBC                 db  6Fh ; o
.data:00000EBD                 db  64h ; d
.data:00000EBE                 db  65h ; e
.data:00000EBF                 db  72h ; r
.data:00000EC0                 db  40h ; @
.data:00000EC1                 db  4Eh ; N
.data:00000EC2                 db  4Ch ; L
.data:00000EC3                 db  7Ah ; z
.data:00000EC4                 db  6Dh ; m
.data:00000EC5                 db  61h ; a
.data:00000EC6                 db  40h ; @
.data:00000EC7                 db  4Eh ; N
.data:00000EC8                 db  43h ; C
.data:00000EC9                 db  6Fh ; o
.data:00000ECA                 db  6Dh ; m
.data:00000ECB                 db  70h ; p
.data:00000ECC                 db  72h ; r
.data:00000ECD                 db  65h ; e
.data:00000ECE                 db  73h ; s
.data:00000ECF                 db  73h ; s
.data:00000ED0                 db  40h ; @
.data:00000ED1                 db  40h ; @
.data:00000ED2                 db    0
.data:00000ED3                 align 4
.data:00000ED3 _data           ends
.data:00000ED3
.rdata$r:00000ED4 ; ===========================================================================
.rdata$r:00000ED4
.rdata$r:00000ED4 ; Segment type: Pure data
.rdata$r:00000ED4 ; Segment permissions: Read
.rdata$r:00000ED4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000ED4                 assume cs:_rdata$r
.rdata$r:00000ED4                 ;org 0ED4h
.rdata$r:00000ED4 ; COMDAT (pick any)
.rdata$r:00000ED4                 public ??_R3CDecoder@NLzma@NCompress@@8
.rdata$r:00000ED4 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ED4 ??_R3CDecoder@NLzma@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00000EA8o
.rdata$r:00000ED4                                         ; .rdata$r:00000F40o ...
.rdata$r:00000ED5                 db    0
.rdata$r:00000ED6                 db    0
.rdata$r:00000ED7                 db    0
.rdata$r:00000ED8                 db    5
.rdata$r:00000ED9                 db    0
.rdata$r:00000EDA                 db    0
.rdata$r:00000EDB                 db    0
.rdata$r:00000EDC                 db  10h
.rdata$r:00000EDD                 db    0
.rdata$r:00000EDE                 db    0
.rdata$r:00000EDF                 db    0
.rdata$r:00000EE0                 dd offset ??_R2CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Base Class Array'
.rdata$r:00000EE0 _rdata$r        ends
.rdata$r:00000EE0
.rdata$r:00000EE4 ; ===========================================================================
.rdata$r:00000EE4
.rdata$r:00000EE4 ; Segment type: Pure data
.rdata$r:00000EE4 ; Segment permissions: Read
.rdata$r:00000EE4 ; Segment alignment 'qword' can not be represented in assembly
.rdata$r:00000EE4 _rdata$r        segment para public 'DATA' use32
.rdata$r:00000EE4                 assume cs:_rdata$r
.rdata$r:00000EE4                 ;org 0EE4h
.rdata$r:00000EE4 ; COMDAT (pick any)
.rdata$r:00000EE4                 public ??_R2CDecoder@NLzma@NCompress@@8
.rdata$r:00000EE4 ; NCompress::NLzma::CDecoder::`RTTI Base Class Array'
.rdata$r:00000EE4 ??_R2CDecoder@NLzma@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NLzma@NCompress@@8
.rdata$r:00000EE4                                         ; DATA XREF: .rdata$r:00000EE0o
.rdata$r:00000EE4                                         ; NCompress::NLzma::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EE8                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EEC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000EF0                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000EF4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000EF8                 dd offset ??_R17?0A@EA@ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000EFC                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000F00                 dd offset ??_R1M@?0A@EA@ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000F04                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000F08                 dd offset ??_R1BA@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000F0C                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00000F10                 dd offset ??_R1BE@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00000F14                 dd offset ??_R1BE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
.rdata$r:00000F18                 dd offset ??_R1BI@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00000F1C                 dd offset ??_R1BI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (24,-1,0,66)'
.rdata$r:00000F20                 dd offset ??_R1BM@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (28,-1,0,64)'
.rdata$r:00000F24                 db    0
.rdata$r:00000F25                 align 4
.rdata$r:00000F25 _rdata$r        ends
.rdata$r:00000F25
.rdata$r:00000F28 ; ===========================================================================
.rdata$r:00000F28
.rdata$r:00000F28 ; Segment type: Pure data
.rdata$r:00000F28 ; Segment permissions: Read
.rdata$r:00000F28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F28                 assume cs:_rdata$r
.rdata$r:00000F28                 ;org 0F28h
.rdata$r:00000F28 ; COMDAT (pick any)
.rdata$r:00000F28                 public ??_R1A@?0A@EA@CDecoder@NLzma@NCompress@@8
.rdata$r:00000F28 ; NCompress::NLzma::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F28 ??_R1A@?0A@EA@CDecoder@NLzma@NCompress@@8 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8
.rdata$r:00000F28                                         ; DATA XREF: .rdata$r:NCompress::NLzma::CDecoder::`RTTI Base Class Array'o
.rdata$r:00000F28                                         ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00000F2C                 db  0Fh
.rdata$r:00000F2D                 db    0
.rdata$r:00000F2E                 db    0
.rdata$r:00000F2F                 db    0
.rdata$r:00000F30                 db    0
.rdata$r:00000F31                 db    0
.rdata$r:00000F32                 db    0
.rdata$r:00000F33                 db    0
.rdata$r:00000F34                 db 0FFh
.rdata$r:00000F35                 db 0FFh
.rdata$r:00000F36                 db 0FFh
.rdata$r:00000F37                 db 0FFh
.rdata$r:00000F38                 db    0
.rdata$r:00000F39                 db    0
.rdata$r:00000F3A                 db    0
.rdata$r:00000F3B                 db    0
.rdata$r:00000F3C                 db  40h ; @
.rdata$r:00000F3D                 db    0
.rdata$r:00000F3E                 db    0
.rdata$r:00000F3F                 db    0
.rdata$r:00000F40                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F40 _rdata$r        ends
.rdata$r:00000F40
.rdata$r:00000F44 ; ===========================================================================
.rdata$r:00000F44
.rdata$r:00000F44 ; Segment type: Pure data
.rdata$r:00000F44 ; Segment permissions: Read
.rdata$r:00000F44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F44                 assume cs:_rdata$r
.rdata$r:00000F44                 ;org 0F44h
.rdata$r:00000F44 ; COMDAT (pick any)
.rdata$r:00000F44                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000F44 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F44 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000F44                                         ; DATA XREF: .rdata$r:00000EE8o
.rdata$r:00000F44                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000F44                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000F48                 db    1
.rdata$r:00000F49                 db    0
.rdata$r:00000F4A                 db    0
.rdata$r:00000F4B                 db    0
.rdata$r:00000F4C                 db    0
.rdata$r:00000F4D                 db    0
.rdata$r:00000F4E                 db    0
.rdata$r:00000F4F                 db    0
.rdata$r:00000F50                 db 0FFh
.rdata$r:00000F51                 db 0FFh
.rdata$r:00000F52                 db 0FFh
.rdata$r:00000F53                 db 0FFh
.rdata$r:00000F54                 db    0
.rdata$r:00000F55                 db    0
.rdata$r:00000F56                 db    0
.rdata$r:00000F57                 db    0
.rdata$r:00000F58                 db  40h ; @
.rdata$r:00000F59                 db    0
.rdata$r:00000F5A                 db    0
.rdata$r:00000F5B                 db    0
.rdata$r:00000F5C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F5C _rdata$r        ends
.rdata$r:00000F5C
.data:00000F60 ; ===========================================================================
.data:00000F60
.data:00000F60 ; Segment type: Pure data
.data:00000F60 ; Segment permissions: Read/Write
.data:00000F60 _data           segment dword public 'DATA' use32
.data:00000F60                 assume cs:_data
.data:00000F60                 ;org 0F60h
.data:00000F60 ; COMDAT (pick any)
.data:00000F60                 public ??_R0?AUICompressCoder@@@8
.data:00000F60 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000F60 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000F60                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000F60                                         ; .rdata$r:000017E8o
.data:00000F60                                         ; const type_info::`vftable'
.data:00000F64                 align 8
.data:00000F68 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00000F7D                 align 10h
.data:00000F7D _data           ends
.data:00000F7D
.rdata$r:00000F80 ; ===========================================================================
.rdata$r:00000F80
.rdata$r:00000F80 ; Segment type: Pure data
.rdata$r:00000F80 ; Segment permissions: Read
.rdata$r:00000F80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F80                 assume cs:_rdata$r
.rdata$r:00000F80                 ;org 0F80h
.rdata$r:00000F80 ; COMDAT (pick any)
.rdata$r:00000F80                 public ??_R3ICompressCoder@@8
.rdata$r:00000F80 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F80 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000F5Co
.rdata$r:00000F80                                         ; .rdata$r:000017ECo
.rdata$r:00000F81                 db    0
.rdata$r:00000F82                 db    0
.rdata$r:00000F83                 db    0
.rdata$r:00000F84                 db    0
.rdata$r:00000F85                 db    0
.rdata$r:00000F86                 db    0
.rdata$r:00000F87                 db    0
.rdata$r:00000F88                 db    2
.rdata$r:00000F89                 db    0
.rdata$r:00000F8A                 db    0
.rdata$r:00000F8B                 db    0
.rdata$r:00000F8C                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000F8C _rdata$r        ends
.rdata$r:00000F8C
.rdata$r:00000F90 ; ===========================================================================
.rdata$r:00000F90
.rdata$r:00000F90 ; Segment type: Pure data
.rdata$r:00000F90 ; Segment permissions: Read
.rdata$r:00000F90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F90                 assume cs:_rdata$r
.rdata$r:00000F90                 ;org 0F90h
.rdata$r:00000F90 ; COMDAT (pick any)
.rdata$r:00000F90                 public ??_R2ICompressCoder@@8
.rdata$r:00000F90 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000F90 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000F90                                         ; DATA XREF: .rdata$r:00000F8Co
.rdata$r:00000F90                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F94                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F98                 db    0
.rdata$r:00000F99                 align 4
.rdata$r:00000F99 _rdata$r        ends
.rdata$r:00000F99
.rdata$r:00000F9C ; ===========================================================================
.rdata$r:00000F9C
.rdata$r:00000F9C ; Segment type: Pure data
.rdata$r:00000F9C ; Segment permissions: Read
.rdata$r:00000F9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F9C                 assume cs:_rdata$r
.rdata$r:00000F9C                 ;org 0F9Ch
.rdata$r:00000F9C ; COMDAT (pick any)
.rdata$r:00000F9C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000F9C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F9C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000F9C                                         ; DATA XREF: .rdata$r:00000F94o
.rdata$r:00000F9C                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000F9C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000FA0                 db    0
.rdata$r:00000FA1                 db    0
.rdata$r:00000FA2                 db    0
.rdata$r:00000FA3                 db    0
.rdata$r:00000FA4                 db    0
.rdata$r:00000FA5                 db    0
.rdata$r:00000FA6                 db    0
.rdata$r:00000FA7                 db    0
.rdata$r:00000FA8                 db 0FFh
.rdata$r:00000FA9                 db 0FFh
.rdata$r:00000FAA                 db 0FFh
.rdata$r:00000FAB                 db 0FFh
.rdata$r:00000FAC                 db    0
.rdata$r:00000FAD                 db    0
.rdata$r:00000FAE                 db    0
.rdata$r:00000FAF                 db    0
.rdata$r:00000FB0                 db  40h ; @
.rdata$r:00000FB1                 db    0
.rdata$r:00000FB2                 db    0
.rdata$r:00000FB3                 db    0
.rdata$r:00000FB4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FB4 _rdata$r        ends
.rdata$r:00000FB4
.data:00000FB8 ; ===========================================================================
.data:00000FB8
.data:00000FB8 ; Segment type: Pure data
.data:00000FB8 ; Segment permissions: Read/Write
.data:00000FB8 _data           segment dword public 'DATA' use32
.data:00000FB8                 assume cs:_data
.data:00000FB8                 ;org 0FB8h
.data:00000FB8 ; COMDAT (pick any)
.data:00000FB8                 public ??_R0?AUIUnknown@@@8
.data:00000FB8 ; struct IUnknown `RTTI Type Descriptor'
.data:00000FB8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000FB8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000FB8                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000FB8                                         ; const type_info::`vftable'
.data:00000FBC                 align 10h
.data:00000FC0 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000FCF                 align 10h
.data:00000FCF _data           ends
.data:00000FCF
.rdata$r:00000FD0 ; ===========================================================================
.rdata$r:00000FD0
.rdata$r:00000FD0 ; Segment type: Pure data
.rdata$r:00000FD0 ; Segment permissions: Read
.rdata$r:00000FD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FD0                 assume cs:_rdata$r
.rdata$r:00000FD0                 ;org 0FD0h
.rdata$r:00000FD0 ; COMDAT (pick any)
.rdata$r:00000FD0                 public ??_R3IUnknown@@8
.rdata$r:00000FD0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FD0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000FB4o
.rdata$r:00000FD0                                         ; .rdata$r:00001000o ...
.rdata$r:00000FD1                 db    0
.rdata$r:00000FD2                 db    0
.rdata$r:00000FD3                 db    0
.rdata$r:00000FD4                 db    0
.rdata$r:00000FD5                 db    0
.rdata$r:00000FD6                 db    0
.rdata$r:00000FD7                 db    0
.rdata$r:00000FD8                 db    1
.rdata$r:00000FD9                 db    0
.rdata$r:00000FDA                 db    0
.rdata$r:00000FDB                 db    0
.rdata$r:00000FDC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000FDC _rdata$r        ends
.rdata$r:00000FDC
.rdata$r:00000FE0 ; ===========================================================================
.rdata$r:00000FE0
.rdata$r:00000FE0 ; Segment type: Pure data
.rdata$r:00000FE0 ; Segment permissions: Read
.rdata$r:00000FE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FE0                 assume cs:_rdata$r
.rdata$r:00000FE0                 ;org 0FE0h
.rdata$r:00000FE0 ; COMDAT (pick any)
.rdata$r:00000FE0                 public ??_R2IUnknown@@8
.rdata$r:00000FE0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000FE0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000FE0                                         ; DATA XREF: .rdata$r:00000FDCo
.rdata$r:00000FE0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FE4                 db    0
.rdata$r:00000FE5                 align 4
.rdata$r:00000FE5 _rdata$r        ends
.rdata$r:00000FE5
.rdata$r:00000FE8 ; ===========================================================================
.rdata$r:00000FE8
.rdata$r:00000FE8 ; Segment type: Pure data
.rdata$r:00000FE8 ; Segment permissions: Read
.rdata$r:00000FE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FE8                 assume cs:_rdata$r
.rdata$r:00000FE8                 ;org 0FE8h
.rdata$r:00000FE8 ; COMDAT (pick any)
.rdata$r:00000FE8                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000FE8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000FE8 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000FE8                                         ; DATA XREF: .rdata$r:00000EECo
.rdata$r:00000FE8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000FEC                 db    0
.rdata$r:00000FED                 db    0
.rdata$r:00000FEE                 db    0
.rdata$r:00000FEF                 db    0
.rdata$r:00000FF0                 db    0
.rdata$r:00000FF1                 db    0
.rdata$r:00000FF2                 db    0
.rdata$r:00000FF3                 db    0
.rdata$r:00000FF4                 db 0FFh
.rdata$r:00000FF5                 db 0FFh
.rdata$r:00000FF6                 db 0FFh
.rdata$r:00000FF7                 db 0FFh
.rdata$r:00000FF8                 db    0
.rdata$r:00000FF9                 db    0
.rdata$r:00000FFA                 db    0
.rdata$r:00000FFB                 db    0
.rdata$r:00000FFC                 db  42h ; B
.rdata$r:00000FFD                 db    0
.rdata$r:00000FFE                 db    0
.rdata$r:00000FFF                 db    0
.rdata$r:00001000                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001000 _rdata$r        ends
.rdata$r:00001000
.rdata$r:00001004 ; ===========================================================================
.rdata$r:00001004
.rdata$r:00001004 ; Segment type: Pure data
.rdata$r:00001004 ; Segment permissions: Read
.rdata$r:00001004 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001004                 assume cs:_rdata$r
.rdata$r:00001004                 ;org 1004h
.rdata$r:00001004 ; COMDAT (pick any)
.rdata$r:00001004                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00001004 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001004 ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00001004                                         ; DATA XREF: .rdata$r:00000EF0o
.rdata$r:00001004                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00001008                 db    1
.rdata$r:00001009                 db    0
.rdata$r:0000100A                 db    0
.rdata$r:0000100B                 db    0
.rdata$r:0000100C                 db    4
.rdata$r:0000100D                 db    0
.rdata$r:0000100E                 db    0
.rdata$r:0000100F                 db    0
.rdata$r:00001010                 db 0FFh
.rdata$r:00001011                 db 0FFh
.rdata$r:00001012                 db 0FFh
.rdata$r:00001013                 db 0FFh
.rdata$r:00001014                 db    0
.rdata$r:00001015                 db    0
.rdata$r:00001016                 db    0
.rdata$r:00001017                 db    0
.rdata$r:00001018                 db  40h ; @
.rdata$r:00001019                 db    0
.rdata$r:0000101A                 db    0
.rdata$r:0000101B                 db    0
.rdata$r:0000101C                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000101C _rdata$r        ends
.rdata$r:0000101C
.data:00001020 ; ===========================================================================
.data:00001020
.data:00001020 ; Segment type: Pure data
.data:00001020 ; Segment permissions: Read/Write
.data:00001020 _data           segment dword public 'DATA' use32
.data:00001020                 assume cs:_data
.data:00001020                 ;org 1020h
.data:00001020 ; COMDAT (pick any)
.data:00001020                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:00001020 ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:00001020 ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:00001020                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001020                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001020                                         ; const type_info::`vftable'
.data:00001024                 align 8
.data:00001028 a_?auicompresss db '.?AUICompressSetDecoderProperties2@@',0
.data:0000104D                 align 10h
.data:0000104D _data           ends
.data:0000104D
.rdata$r:00001050 ; ===========================================================================
.rdata$r:00001050
.rdata$r:00001050 ; Segment type: Pure data
.rdata$r:00001050 ; Segment permissions: Read
.rdata$r:00001050 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001050                 assume cs:_rdata$r
.rdata$r:00001050                 ;org 1050h
.rdata$r:00001050 ; COMDAT (pick any)
.rdata$r:00001050                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:00001050 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001050 ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:00001050                                         ; DATA XREF: .rdata$r:0000101Co
.rdata$r:00001050                                         ; .rdata$r:00001084o ...
.rdata$r:00001051                 db    0
.rdata$r:00001052                 db    0
.rdata$r:00001053                 db    0
.rdata$r:00001054                 db    0
.rdata$r:00001055                 db    0
.rdata$r:00001056                 db    0
.rdata$r:00001057                 db    0
.rdata$r:00001058                 db    2
.rdata$r:00001059                 db    0
.rdata$r:0000105A                 db    0
.rdata$r:0000105B                 db    0
.rdata$r:0000105C                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:0000105C _rdata$r        ends
.rdata$r:0000105C
.rdata$r:00001060 ; ===========================================================================
.rdata$r:00001060
.rdata$r:00001060 ; Segment type: Pure data
.rdata$r:00001060 ; Segment permissions: Read
.rdata$r:00001060 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001060                 assume cs:_rdata$r
.rdata$r:00001060                 ;org 1060h
.rdata$r:00001060 ; COMDAT (pick any)
.rdata$r:00001060                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:00001060 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00001060 ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00001060                                         ; DATA XREF: .rdata$r:0000105Co
.rdata$r:00001060                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001064                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001068                 db    0
.rdata$r:00001069                 align 4
.rdata$r:00001069 _rdata$r        ends
.rdata$r:00001069
.rdata$r:0000106C ; ===========================================================================
.rdata$r:0000106C
.rdata$r:0000106C ; Segment type: Pure data
.rdata$r:0000106C ; Segment permissions: Read
.rdata$r:0000106C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000106C                 assume cs:_rdata$r
.rdata$r:0000106C                 ;org 106Ch
.rdata$r:0000106C ; COMDAT (pick any)
.rdata$r:0000106C                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:0000106C ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000106C ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:0000106C                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:0000106C                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00001070                 db    1
.rdata$r:00001071                 db    0
.rdata$r:00001072                 db    0
.rdata$r:00001073                 db    0
.rdata$r:00001074                 db    0
.rdata$r:00001075                 db    0
.rdata$r:00001076                 db    0
.rdata$r:00001077                 db    0
.rdata$r:00001078                 db 0FFh
.rdata$r:00001079                 db 0FFh
.rdata$r:0000107A                 db 0FFh
.rdata$r:0000107B                 db 0FFh
.rdata$r:0000107C                 db    0
.rdata$r:0000107D                 db    0
.rdata$r:0000107E                 db    0
.rdata$r:0000107F                 db    0
.rdata$r:00001080                 db  40h ; @
.rdata$r:00001081                 db    0
.rdata$r:00001082                 db    0
.rdata$r:00001083                 db    0
.rdata$r:00001084                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001084 _rdata$r        ends
.rdata$r:00001084
.rdata$r:00001088 ; ===========================================================================
.rdata$r:00001088
.rdata$r:00001088 ; Segment type: Pure data
.rdata$r:00001088 ; Segment permissions: Read
.rdata$r:00001088 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001088                 assume cs:_rdata$r
.rdata$r:00001088                 ;org 1088h
.rdata$r:00001088 ; COMDAT (pick any)
.rdata$r:00001088                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001088 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001088 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001088                                         ; DATA XREF: .rdata$r:00000EF4o
.rdata$r:00001088                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000108C                 align 10h
.rdata$r:00001090                 db    4
.rdata$r:00001091                 db    0
.rdata$r:00001092                 db    0
.rdata$r:00001093                 db    0
.rdata$r:00001094                 db 0FFh
.rdata$r:00001095                 db 0FFh
.rdata$r:00001096                 db 0FFh
.rdata$r:00001097                 db 0FFh
.rdata$r:00001098                 db    0
.rdata$r:00001099                 db    0
.rdata$r:0000109A                 db    0
.rdata$r:0000109B                 db    0
.rdata$r:0000109C                 db  42h ; B
.rdata$r:0000109D                 db    0
.rdata$r:0000109E                 db    0
.rdata$r:0000109F                 db    0
.rdata$r:000010A0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010A0 _rdata$r        ends
.rdata$r:000010A0
.rdata$r:000010A4 ; ===========================================================================
.rdata$r:000010A4
.rdata$r:000010A4 ; Segment type: Pure data
.rdata$r:000010A4 ; Segment permissions: Read
.rdata$r:000010A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010A4                 assume cs:_rdata$r
.rdata$r:000010A4                 ;org 10A4h
.rdata$r:000010A4 ; COMDAT (pick any)
.rdata$r:000010A4                 public ??_R17?0A@EA@ICompressSetFinishMode@@8
.rdata$r:000010A4 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000010A4 ??_R17?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:000010A4                                         ; DATA XREF: .rdata$r:00000EF8o
.rdata$r:000010A4                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:000010A8                 db    1
.rdata$r:000010A9                 db    0
.rdata$r:000010AA                 db    0
.rdata$r:000010AB                 db    0
.rdata$r:000010AC                 db    8
.rdata$r:000010AD                 db    0
.rdata$r:000010AE                 db    0
.rdata$r:000010AF                 db    0
.rdata$r:000010B0                 db 0FFh
.rdata$r:000010B1                 db 0FFh
.rdata$r:000010B2                 db 0FFh
.rdata$r:000010B3                 db 0FFh
.rdata$r:000010B4                 db    0
.rdata$r:000010B5                 db    0
.rdata$r:000010B6                 db    0
.rdata$r:000010B7                 db    0
.rdata$r:000010B8                 db  40h ; @
.rdata$r:000010B9                 db    0
.rdata$r:000010BA                 db    0
.rdata$r:000010BB                 db    0
.rdata$r:000010BC                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010BC _rdata$r        ends
.rdata$r:000010BC
.data:000010C0 ; ===========================================================================
.data:000010C0
.data:000010C0 ; Segment type: Pure data
.data:000010C0 ; Segment permissions: Read/Write
.data:000010C0 _data           segment dword public 'DATA' use32
.data:000010C0                 assume cs:_data
.data:000010C0                 ;org 10C0h
.data:000010C0 ; COMDAT (pick any)
.data:000010C0                 public ??_R0?AUICompressSetFinishMode@@@8
.data:000010C0 ; struct ICompressSetFinishMode `RTTI Type Descriptor'
.data:000010C0 ??_R0?AUICompressSetFinishMode@@@8 dd offset ??_7type_info@@6B@
.data:000010C0                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000010C0                                         ; .rdata$r:ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000010C0                                         ; const type_info::`vftable'
.data:000010C4                 align 8
.data:000010C8 a_?auicompres_0 db '.?AUICompressSetFinishMode@@',0
.data:000010E5                 align 4
.data:000010E5 _data           ends
.data:000010E5
.rdata$r:000010E8 ; ===========================================================================
.rdata$r:000010E8
.rdata$r:000010E8 ; Segment type: Pure data
.rdata$r:000010E8 ; Segment permissions: Read
.rdata$r:000010E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010E8                 assume cs:_rdata$r
.rdata$r:000010E8                 ;org 10E8h
.rdata$r:000010E8 ; COMDAT (pick any)
.rdata$r:000010E8                 public ??_R3ICompressSetFinishMode@@8
.rdata$r:000010E8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010E8 ??_R3ICompressSetFinishMode@@8 db    0  ; DATA XREF: .rdata$r:000010BCo
.rdata$r:000010E8                                         ; .rdata$r:0000111Co ...
.rdata$r:000010E9                 db    0
.rdata$r:000010EA                 db    0
.rdata$r:000010EB                 db    0
.rdata$r:000010EC                 db    0
.rdata$r:000010ED                 db    0
.rdata$r:000010EE                 db    0
.rdata$r:000010EF                 db    0
.rdata$r:000010F0                 db    2
.rdata$r:000010F1                 db    0
.rdata$r:000010F2                 db    0
.rdata$r:000010F3                 db    0
.rdata$r:000010F4                 dd offset ??_R2ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:000010F4 _rdata$r        ends
.rdata$r:000010F4
.rdata$r:000010F8 ; ===========================================================================
.rdata$r:000010F8
.rdata$r:000010F8 ; Segment type: Pure data
.rdata$r:000010F8 ; Segment permissions: Read
.rdata$r:000010F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010F8                 assume cs:_rdata$r
.rdata$r:000010F8                 ;org 10F8h
.rdata$r:000010F8 ; COMDAT (pick any)
.rdata$r:000010F8                 public ??_R2ICompressSetFinishMode@@8
.rdata$r:000010F8 ; ICompressSetFinishMode::`RTTI Base Class Array'
.rdata$r:000010F8 ??_R2ICompressSetFinishMode@@8 dd offset ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:000010F8                                         ; DATA XREF: .rdata$r:000010F4o
.rdata$r:000010F8                                         ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000010FC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001100                 db    0
.rdata$r:00001101                 align 4
.rdata$r:00001101 _rdata$r        ends
.rdata$r:00001101
.rdata$r:00001104 ; ===========================================================================
.rdata$r:00001104
.rdata$r:00001104 ; Segment type: Pure data
.rdata$r:00001104 ; Segment permissions: Read
.rdata$r:00001104 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001104                 assume cs:_rdata$r
.rdata$r:00001104                 ;org 1104h
.rdata$r:00001104 ; COMDAT (pick any)
.rdata$r:00001104                 public ??_R1A@?0A@EA@ICompressSetFinishMode@@8
.rdata$r:00001104 ; ICompressSetFinishMode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001104 ??_R1A@?0A@EA@ICompressSetFinishMode@@8 dd offset ??_R0?AUICompressSetFinishMode@@@8
.rdata$r:00001104                                         ; DATA XREF: .rdata$r:ICompressSetFinishMode::`RTTI Base Class Array'o
.rdata$r:00001104                                         ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:00001108                 db    1
.rdata$r:00001109                 db    0
.rdata$r:0000110A                 db    0
.rdata$r:0000110B                 db    0
.rdata$r:0000110C                 db    0
.rdata$r:0000110D                 db    0
.rdata$r:0000110E                 db    0
.rdata$r:0000110F                 db    0
.rdata$r:00001110                 db 0FFh
.rdata$r:00001111                 db 0FFh
.rdata$r:00001112                 db 0FFh
.rdata$r:00001113                 db 0FFh
.rdata$r:00001114                 db    0
.rdata$r:00001115                 db    0
.rdata$r:00001116                 db    0
.rdata$r:00001117                 db    0
.rdata$r:00001118                 db  40h ; @
.rdata$r:00001119                 db    0
.rdata$r:0000111A                 db    0
.rdata$r:0000111B                 db    0
.rdata$r:0000111C                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000111C _rdata$r        ends
.rdata$r:0000111C
.rdata$r:00001120 ; ===========================================================================
.rdata$r:00001120
.rdata$r:00001120 ; Segment type: Pure data
.rdata$r:00001120 ; Segment permissions: Read
.rdata$r:00001120 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001120                 assume cs:_rdata$r
.rdata$r:00001120                 ;org 1120h
.rdata$r:00001120 ; COMDAT (pick any)
.rdata$r:00001120                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00001120 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00001120 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001120                                         ; DATA XREF: .rdata$r:00000EFCo
.rdata$r:00001120                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001124                 align 8
.rdata$r:00001128                 db    8
.rdata$r:00001129                 db    0
.rdata$r:0000112A                 db    0
.rdata$r:0000112B                 db    0
.rdata$r:0000112C                 db 0FFh
.rdata$r:0000112D                 db 0FFh
.rdata$r:0000112E                 db 0FFh
.rdata$r:0000112F                 db 0FFh
.rdata$r:00001130                 db    0
.rdata$r:00001131                 db    0
.rdata$r:00001132                 db    0
.rdata$r:00001133                 db    0
.rdata$r:00001134                 db  42h ; B
.rdata$r:00001135                 db    0
.rdata$r:00001136                 db    0
.rdata$r:00001137                 db    0
.rdata$r:00001138                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001138 _rdata$r        ends
.rdata$r:00001138
.rdata$r:0000113C ; ===========================================================================
.rdata$r:0000113C
.rdata$r:0000113C ; Segment type: Pure data
.rdata$r:0000113C ; Segment permissions: Read
.rdata$r:0000113C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000113C                 assume cs:_rdata$r
.rdata$r:0000113C                 ;org 113Ch
.rdata$r:0000113C ; COMDAT (pick any)
.rdata$r:0000113C                 public ??_R1M@?0A@EA@ICompressSetBufSize@@8
.rdata$r:0000113C ; ICompressSetBufSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000113C ??_R1M@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:0000113C                                         ; DATA XREF: .rdata$r:00000F00o
.rdata$r:0000113C                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:00001140                 db    1
.rdata$r:00001141                 db    0
.rdata$r:00001142                 db    0
.rdata$r:00001143                 db    0
.rdata$r:00001144                 db  0Ch
.rdata$r:00001145                 db    0
.rdata$r:00001146                 db    0
.rdata$r:00001147                 db    0
.rdata$r:00001148                 db 0FFh
.rdata$r:00001149                 db 0FFh
.rdata$r:0000114A                 db 0FFh
.rdata$r:0000114B                 db 0FFh
.rdata$r:0000114C                 db    0
.rdata$r:0000114D                 db    0
.rdata$r:0000114E                 db    0
.rdata$r:0000114F                 db    0
.rdata$r:00001150                 db  40h ; @
.rdata$r:00001151                 db    0
.rdata$r:00001152                 db    0
.rdata$r:00001153                 db    0
.rdata$r:00001154                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001154 _rdata$r        ends
.rdata$r:00001154
.data:00001158 ; ===========================================================================
.data:00001158
.data:00001158 ; Segment type: Pure data
.data:00001158 ; Segment permissions: Read/Write
.data:00001158 _data           segment dword public 'DATA' use32
.data:00001158                 assume cs:_data
.data:00001158                 ;org 1158h
.data:00001158 ; COMDAT (pick any)
.data:00001158                 public ??_R0?AUICompressSetBufSize@@@8
.data:00001158 ; struct ICompressSetBufSize `RTTI Type Descriptor'
.data:00001158 ??_R0?AUICompressSetBufSize@@@8 dd offset ??_7type_info@@6B@
.data:00001158                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00001158                                         ; .rdata$r:ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001158                                         ; const type_info::`vftable'
.data:0000115C                 align 10h
.data:00001160 a_?auicompres_1 db '.?AUICompressSetBufSize@@',0
.data:0000117A                 align 4
.data:0000117A _data           ends
.data:0000117A
.rdata$r:0000117C ; ===========================================================================
.rdata$r:0000117C
.rdata$r:0000117C ; Segment type: Pure data
.rdata$r:0000117C ; Segment permissions: Read
.rdata$r:0000117C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000117C                 assume cs:_rdata$r
.rdata$r:0000117C                 ;org 117Ch
.rdata$r:0000117C ; COMDAT (pick any)
.rdata$r:0000117C                 public ??_R3ICompressSetBufSize@@8
.rdata$r:0000117C ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000117C ??_R3ICompressSetBufSize@@8 db    0     ; DATA XREF: .rdata$r:00001154o
.rdata$r:0000117C                                         ; .rdata$r:000011B0o ...
.rdata$r:0000117D                 db    0
.rdata$r:0000117E                 db    0
.rdata$r:0000117F                 db    0
.rdata$r:00001180                 db    0
.rdata$r:00001181                 db    0
.rdata$r:00001182                 db    0
.rdata$r:00001183                 db    0
.rdata$r:00001184                 db    2
.rdata$r:00001185                 db    0
.rdata$r:00001186                 db    0
.rdata$r:00001187                 db    0
.rdata$r:00001188                 dd offset ??_R2ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:00001188 _rdata$r        ends
.rdata$r:00001188
.rdata$r:0000118C ; ===========================================================================
.rdata$r:0000118C
.rdata$r:0000118C ; Segment type: Pure data
.rdata$r:0000118C ; Segment permissions: Read
.rdata$r:0000118C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000118C                 assume cs:_rdata$r
.rdata$r:0000118C                 ;org 118Ch
.rdata$r:0000118C ; COMDAT (pick any)
.rdata$r:0000118C                 public ??_R2ICompressSetBufSize@@8
.rdata$r:0000118C ; ICompressSetBufSize::`RTTI Base Class Array'
.rdata$r:0000118C ??_R2ICompressSetBufSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:0000118C                                         ; DATA XREF: .rdata$r:00001188o
.rdata$r:0000118C                                         ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001190                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001194                 db    0
.rdata$r:00001195                 align 4
.rdata$r:00001195 _rdata$r        ends
.rdata$r:00001195
.rdata$r:00001198 ; ===========================================================================
.rdata$r:00001198
.rdata$r:00001198 ; Segment type: Pure data
.rdata$r:00001198 ; Segment permissions: Read
.rdata$r:00001198 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001198                 assume cs:_rdata$r
.rdata$r:00001198                 ;org 1198h
.rdata$r:00001198 ; COMDAT (pick any)
.rdata$r:00001198                 public ??_R1A@?0A@EA@ICompressSetBufSize@@8
.rdata$r:00001198 ; ICompressSetBufSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001198 ??_R1A@?0A@EA@ICompressSetBufSize@@8 dd offset ??_R0?AUICompressSetBufSize@@@8
.rdata$r:00001198                                         ; DATA XREF: .rdata$r:ICompressSetBufSize::`RTTI Base Class Array'o
.rdata$r:00001198                                         ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:0000119C                 db    1
.rdata$r:0000119D                 db    0
.rdata$r:0000119E                 db    0
.rdata$r:0000119F                 db    0
.rdata$r:000011A0                 db    0
.rdata$r:000011A1                 db    0
.rdata$r:000011A2                 db    0
.rdata$r:000011A3                 db    0
.rdata$r:000011A4                 db 0FFh
.rdata$r:000011A5                 db 0FFh
.rdata$r:000011A6                 db 0FFh
.rdata$r:000011A7                 db 0FFh
.rdata$r:000011A8                 db    0
.rdata$r:000011A9                 db    0
.rdata$r:000011AA                 db    0
.rdata$r:000011AB                 db    0
.rdata$r:000011AC                 db  40h ; @
.rdata$r:000011AD                 db    0
.rdata$r:000011AE                 db    0
.rdata$r:000011AF                 db    0
.rdata$r:000011B0                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011B0 _rdata$r        ends
.rdata$r:000011B0
.rdata$r:000011B4 ; ===========================================================================
.rdata$r:000011B4
.rdata$r:000011B4 ; Segment type: Pure data
.rdata$r:000011B4 ; Segment permissions: Read
.rdata$r:000011B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011B4                 assume cs:_rdata$r
.rdata$r:000011B4                 ;org 11B4h
.rdata$r:000011B4 ; COMDAT (pick any)
.rdata$r:000011B4                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000011B4 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000011B4 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000011B4                                         ; DATA XREF: .rdata$r:00000F04o
.rdata$r:000011B4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000011B8                 db    0
.rdata$r:000011B9                 db    0
.rdata$r:000011BA                 db    0
.rdata$r:000011BB                 db    0
.rdata$r:000011BC                 db  0Ch
.rdata$r:000011BD                 db    0
.rdata$r:000011BE                 db    0
.rdata$r:000011BF                 db    0
.rdata$r:000011C0                 db 0FFh
.rdata$r:000011C1                 db 0FFh
.rdata$r:000011C2                 db 0FFh
.rdata$r:000011C3                 db 0FFh
.rdata$r:000011C4                 db    0
.rdata$r:000011C5                 db    0
.rdata$r:000011C6                 db    0
.rdata$r:000011C7                 db    0
.rdata$r:000011C8                 db  42h ; B
.rdata$r:000011C9                 db    0
.rdata$r:000011CA                 db    0
.rdata$r:000011CB                 db    0
.rdata$r:000011CC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011CC _rdata$r        ends
.rdata$r:000011CC
.rdata$r:000011D0 ; ===========================================================================
.rdata$r:000011D0
.rdata$r:000011D0 ; Segment type: Pure data
.rdata$r:000011D0 ; Segment permissions: Read
.rdata$r:000011D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011D0                 assume cs:_rdata$r
.rdata$r:000011D0                 ;org 11D0h
.rdata$r:000011D0 ; COMDAT (pick any)
.rdata$r:000011D0                 public ??_R1BA@?0A@EA@ICompressSetInStream@@8
.rdata$r:000011D0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000011D0 ??_R1BA@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000011D0                                         ; DATA XREF: .rdata$r:00000F08o
.rdata$r:000011D0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000011D4                 db    1
.rdata$r:000011D5                 db    0
.rdata$r:000011D6                 db    0
.rdata$r:000011D7                 db    0
.rdata$r:000011D8                 db  10h
.rdata$r:000011D9                 db    0
.rdata$r:000011DA                 db    0
.rdata$r:000011DB                 db    0
.rdata$r:000011DC                 db 0FFh
.rdata$r:000011DD                 db 0FFh
.rdata$r:000011DE                 db 0FFh
.rdata$r:000011DF                 db 0FFh
.rdata$r:000011E0                 db    0
.rdata$r:000011E1                 db    0
.rdata$r:000011E2                 db    0
.rdata$r:000011E3                 db    0
.rdata$r:000011E4                 db  40h ; @
.rdata$r:000011E5                 db    0
.rdata$r:000011E6                 db    0
.rdata$r:000011E7                 db    0
.rdata$r:000011E8                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011E8 _rdata$r        ends
.rdata$r:000011E8
.data:000011EC ; ===========================================================================
.data:000011EC
.data:000011EC ; Segment type: Pure data
.data:000011EC ; Segment permissions: Read/Write
.data:000011EC _data           segment dword public 'DATA' use32
.data:000011EC                 assume cs:_data
.data:000011EC                 ;org 11ECh
.data:000011EC ; COMDAT (pick any)
.data:000011EC                 public ??_R0?AUICompressSetInStream@@@8
.data:000011EC ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000011EC ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000011EC                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000011EC                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000011EC                                         ; const type_info::`vftable'
.data:000011F0                 db    0
.data:000011F1                 db    0
.data:000011F2                 db    0
.data:000011F3                 db    0
.data:000011F4                 db  2Eh ; .
.data:000011F5                 db  3Fh ; ?
.data:000011F6                 db  41h ; A
.data:000011F7                 db  55h ; U
.data:000011F8                 db  49h ; I
.data:000011F9                 db  43h ; C
.data:000011FA                 db  6Fh ; o
.data:000011FB                 db  6Dh ; m
.data:000011FC                 db  70h ; p
.data:000011FD                 db  72h ; r
.data:000011FE                 db  65h ; e
.data:000011FF                 db  73h ; s
.data:00001200                 db  73h ; s
.data:00001201                 db  53h ; S
.data:00001202                 db  65h ; e
.data:00001203                 db  74h ; t
.data:00001204                 db  49h ; I
.data:00001205                 db  6Eh ; n
.data:00001206                 db  53h ; S
.data:00001207                 db  74h ; t
.data:00001208                 db  72h ; r
.data:00001209                 db  65h ; e
.data:0000120A                 db  61h ; a
.data:0000120B                 db  6Dh ; m
.data:0000120C                 db  40h ; @
.data:0000120D                 db  40h ; @
.data:0000120E                 db    0
.data:0000120F                 align 10h
.data:0000120F _data           ends
.data:0000120F
.rdata$r:00001210 ; ===========================================================================
.rdata$r:00001210
.rdata$r:00001210 ; Segment type: Pure data
.rdata$r:00001210 ; Segment permissions: Read
.rdata$r:00001210 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001210                 assume cs:_rdata$r
.rdata$r:00001210                 ;org 1210h
.rdata$r:00001210 ; COMDAT (pick any)
.rdata$r:00001210                 public ??_R3ICompressSetInStream@@8
.rdata$r:00001210 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001210 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000011E8o
.rdata$r:00001210                                         ; .rdata$r:00001244o ...
.rdata$r:00001211                 db    0
.rdata$r:00001212                 db    0
.rdata$r:00001213                 db    0
.rdata$r:00001214                 db    0
.rdata$r:00001215                 db    0
.rdata$r:00001216                 db    0
.rdata$r:00001217                 db    0
.rdata$r:00001218                 db    2
.rdata$r:00001219                 db    0
.rdata$r:0000121A                 db    0
.rdata$r:0000121B                 db    0
.rdata$r:0000121C                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000121C _rdata$r        ends
.rdata$r:0000121C
.rdata$r:00001220 ; ===========================================================================
.rdata$r:00001220
.rdata$r:00001220 ; Segment type: Pure data
.rdata$r:00001220 ; Segment permissions: Read
.rdata$r:00001220 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001220                 assume cs:_rdata$r
.rdata$r:00001220                 ;org 1220h
.rdata$r:00001220 ; COMDAT (pick any)
.rdata$r:00001220                 public ??_R2ICompressSetInStream@@8
.rdata$r:00001220 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001220 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001220                                         ; DATA XREF: .rdata$r:0000121Co
.rdata$r:00001220                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001224                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001228                 db    0
.rdata$r:00001229                 align 4
.rdata$r:00001229 _rdata$r        ends
.rdata$r:00001229
.rdata$r:0000122C ; ===========================================================================
.rdata$r:0000122C
.rdata$r:0000122C ; Segment type: Pure data
.rdata$r:0000122C ; Segment permissions: Read
.rdata$r:0000122C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000122C                 assume cs:_rdata$r
.rdata$r:0000122C                 ;org 122Ch
.rdata$r:0000122C ; COMDAT (pick any)
.rdata$r:0000122C                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000122C ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000122C ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000122C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:0000122C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001230                 db    1
.rdata$r:00001231                 db    0
.rdata$r:00001232                 db    0
.rdata$r:00001233                 db    0
.rdata$r:00001234                 db    0
.rdata$r:00001235                 db    0
.rdata$r:00001236                 db    0
.rdata$r:00001237                 db    0
.rdata$r:00001238                 db 0FFh
.rdata$r:00001239                 db 0FFh
.rdata$r:0000123A                 db 0FFh
.rdata$r:0000123B                 db 0FFh
.rdata$r:0000123C                 db    0
.rdata$r:0000123D                 db    0
.rdata$r:0000123E                 db    0
.rdata$r:0000123F                 db    0
.rdata$r:00001240                 db  40h ; @
.rdata$r:00001241                 db    0
.rdata$r:00001242                 db    0
.rdata$r:00001243                 db    0
.rdata$r:00001244                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001244 _rdata$r        ends
.rdata$r:00001244
.rdata$r:00001248 ; ===========================================================================
.rdata$r:00001248
.rdata$r:00001248 ; Segment type: Pure data
.rdata$r:00001248 ; Segment permissions: Read
.rdata$r:00001248 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001248                 assume cs:_rdata$r
.rdata$r:00001248                 ;org 1248h
.rdata$r:00001248 ; COMDAT (pick any)
.rdata$r:00001248                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00001248 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00001248 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001248                                         ; DATA XREF: .rdata$r:00000F0Co
.rdata$r:00001248                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000124C                 align 10h
.rdata$r:00001250                 db  10h
.rdata$r:00001251                 db    0
.rdata$r:00001252                 db    0
.rdata$r:00001253                 db    0
.rdata$r:00001254                 db 0FFh
.rdata$r:00001255                 db 0FFh
.rdata$r:00001256                 db 0FFh
.rdata$r:00001257                 db 0FFh
.rdata$r:00001258                 db    0
.rdata$r:00001259                 db    0
.rdata$r:0000125A                 db    0
.rdata$r:0000125B                 db    0
.rdata$r:0000125C                 db  42h ; B
.rdata$r:0000125D                 db    0
.rdata$r:0000125E                 db    0
.rdata$r:0000125F                 db    0
.rdata$r:00001260                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001260 _rdata$r        ends
.rdata$r:00001260
.rdata$r:00001264 ; ===========================================================================
.rdata$r:00001264
.rdata$r:00001264 ; Segment type: Pure data
.rdata$r:00001264 ; Segment permissions: Read
.rdata$r:00001264 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001264                 assume cs:_rdata$r
.rdata$r:00001264                 ;org 1264h
.rdata$r:00001264 ; COMDAT (pick any)
.rdata$r:00001264                 public ??_R1BE@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00001264 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00001264 ??_R1BE@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00001264                                         ; DATA XREF: .rdata$r:00000F10o
.rdata$r:00001264                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00001268                 db    1
.rdata$r:00001269                 db    0
.rdata$r:0000126A                 db    0
.rdata$r:0000126B                 db    0
.rdata$r:0000126C                 db  14h
.rdata$r:0000126D                 db    0
.rdata$r:0000126E                 db    0
.rdata$r:0000126F                 db    0
.rdata$r:00001270                 db 0FFh
.rdata$r:00001271                 db 0FFh
.rdata$r:00001272                 db 0FFh
.rdata$r:00001273                 db 0FFh
.rdata$r:00001274                 db    0
.rdata$r:00001275                 db    0
.rdata$r:00001276                 db    0
.rdata$r:00001277                 db    0
.rdata$r:00001278                 db  40h ; @
.rdata$r:00001279                 db    0
.rdata$r:0000127A                 db    0
.rdata$r:0000127B                 db    0
.rdata$r:0000127C                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000127C _rdata$r        ends
.rdata$r:0000127C
.data:00001280 ; ===========================================================================
.data:00001280
.data:00001280 ; Segment type: Pure data
.data:00001280 ; Segment permissions: Read/Write
.data:00001280 _data           segment dword public 'DATA' use32
.data:00001280                 assume cs:_data
.data:00001280                 ;org 1280h
.data:00001280 ; COMDAT (pick any)
.data:00001280                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00001280 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00001280 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00001280                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00001280                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001280                                         ; const type_info::`vftable'
.data:00001284                 align 8
.data:00001288 a_?auicompres_2 db '.?AUICompressSetOutStreamSize@@',0
.data:00001288 _data           ends
.data:00001288
.rdata$r:000012A8 ; ===========================================================================
.rdata$r:000012A8
.rdata$r:000012A8 ; Segment type: Pure data
.rdata$r:000012A8 ; Segment permissions: Read
.rdata$r:000012A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012A8                 assume cs:_rdata$r
.rdata$r:000012A8                 ;org 12A8h
.rdata$r:000012A8 ; COMDAT (pick any)
.rdata$r:000012A8                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:000012A8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012A8 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:0000127Co
.rdata$r:000012A8                                         ; .rdata$r:000012DCo ...
.rdata$r:000012A9                 db    0
.rdata$r:000012AA                 db    0
.rdata$r:000012AB                 db    0
.rdata$r:000012AC                 db    0
.rdata$r:000012AD                 db    0
.rdata$r:000012AE                 db    0
.rdata$r:000012AF                 db    0
.rdata$r:000012B0                 db    2
.rdata$r:000012B1                 db    0
.rdata$r:000012B2                 db    0
.rdata$r:000012B3                 db    0
.rdata$r:000012B4                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000012B4 _rdata$r        ends
.rdata$r:000012B4
.rdata$r:000012B8 ; ===========================================================================
.rdata$r:000012B8
.rdata$r:000012B8 ; Segment type: Pure data
.rdata$r:000012B8 ; Segment permissions: Read
.rdata$r:000012B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012B8                 assume cs:_rdata$r
.rdata$r:000012B8                 ;org 12B8h
.rdata$r:000012B8 ; COMDAT (pick any)
.rdata$r:000012B8                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:000012B8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000012B8 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000012B8                                         ; DATA XREF: .rdata$r:000012B4o
.rdata$r:000012B8                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012BC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012C0                 db    0
.rdata$r:000012C1                 align 4
.rdata$r:000012C1 _rdata$r        ends
.rdata$r:000012C1
.rdata$r:000012C4 ; ===========================================================================
.rdata$r:000012C4
.rdata$r:000012C4 ; Segment type: Pure data
.rdata$r:000012C4 ; Segment permissions: Read
.rdata$r:000012C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012C4                 assume cs:_rdata$r
.rdata$r:000012C4                 ;org 12C4h
.rdata$r:000012C4 ; COMDAT (pick any)
.rdata$r:000012C4                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000012C4 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000012C4 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000012C4                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:000012C4                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000012C8                 db    1
.rdata$r:000012C9                 db    0
.rdata$r:000012CA                 db    0
.rdata$r:000012CB                 db    0
.rdata$r:000012CC                 db    0
.rdata$r:000012CD                 db    0
.rdata$r:000012CE                 db    0
.rdata$r:000012CF                 db    0
.rdata$r:000012D0                 db 0FFh
.rdata$r:000012D1                 db 0FFh
.rdata$r:000012D2                 db 0FFh
.rdata$r:000012D3                 db 0FFh
.rdata$r:000012D4                 db    0
.rdata$r:000012D5                 db    0
.rdata$r:000012D6                 db    0
.rdata$r:000012D7                 db    0
.rdata$r:000012D8                 db  40h ; @
.rdata$r:000012D9                 db    0
.rdata$r:000012DA                 db    0
.rdata$r:000012DB                 db    0
.rdata$r:000012DC                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012DC _rdata$r        ends
.rdata$r:000012DC
.rdata$r:000012E0 ; ===========================================================================
.rdata$r:000012E0
.rdata$r:000012E0 ; Segment type: Pure data
.rdata$r:000012E0 ; Segment permissions: Read
.rdata$r:000012E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012E0                 assume cs:_rdata$r
.rdata$r:000012E0                 ;org 12E0h
.rdata$r:000012E0 ; COMDAT (pick any)
.rdata$r:000012E0                 public ??_R1BE@?0A@EC@IUnknown@@8
.rdata$r:000012E0 ; IUnknown::`RTTI Base Class Descriptor at (20, -1, 0, 66)'
.rdata$r:000012E0 ??_R1BE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000012E0                                         ; DATA XREF: .rdata$r:00000F14o
.rdata$r:000012E0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000012E4                 align 8
.rdata$r:000012E8                 db  14h
.rdata$r:000012E9                 db    0
.rdata$r:000012EA                 db    0
.rdata$r:000012EB                 db    0
.rdata$r:000012EC                 db 0FFh
.rdata$r:000012ED                 db 0FFh
.rdata$r:000012EE                 db 0FFh
.rdata$r:000012EF                 db 0FFh
.rdata$r:000012F0                 db    0
.rdata$r:000012F1                 db    0
.rdata$r:000012F2                 db    0
.rdata$r:000012F3                 db    0
.rdata$r:000012F4                 db  42h ; B
.rdata$r:000012F5                 db    0
.rdata$r:000012F6                 db    0
.rdata$r:000012F7                 db    0
.rdata$r:000012F8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012F8 _rdata$r        ends
.rdata$r:000012F8
.rdata$r:000012FC ; ===========================================================================
.rdata$r:000012FC
.rdata$r:000012FC ; Segment type: Pure data
.rdata$r:000012FC ; Segment permissions: Read
.rdata$r:000012FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012FC                 assume cs:_rdata$r
.rdata$r:000012FC                 ;org 12FCh
.rdata$r:000012FC ; COMDAT (pick any)
.rdata$r:000012FC                 public ??_R1BI@?0A@EA@ISequentialInStream@@8
.rdata$r:000012FC ; ISequentialInStream::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:000012FC ??_R1BI@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000012FC                                         ; DATA XREF: .rdata$r:00000F18o
.rdata$r:000012FC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001300                 db    1
.rdata$r:00001301                 db    0
.rdata$r:00001302                 db    0
.rdata$r:00001303                 db    0
.rdata$r:00001304                 db  18h
.rdata$r:00001305                 db    0
.rdata$r:00001306                 db    0
.rdata$r:00001307                 db    0
.rdata$r:00001308                 db 0FFh
.rdata$r:00001309                 db 0FFh
.rdata$r:0000130A                 db 0FFh
.rdata$r:0000130B                 db 0FFh
.rdata$r:0000130C                 db    0
.rdata$r:0000130D                 db    0
.rdata$r:0000130E                 db    0
.rdata$r:0000130F                 db    0
.rdata$r:00001310                 db  40h ; @
.rdata$r:00001311                 db    0
.rdata$r:00001312                 db    0
.rdata$r:00001313                 db    0
.rdata$r:00001314                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001314 _rdata$r        ends
.rdata$r:00001314
.data:00001318 ; ===========================================================================
.data:00001318
.data:00001318 ; Segment type: Pure data
.data:00001318 ; Segment permissions: Read/Write
.data:00001318 _data           segment dword public 'DATA' use32
.data:00001318                 assume cs:_data
.data:00001318                 ;org 1318h
.data:00001318 ; COMDAT (pick any)
.data:00001318                 public ??_R0?AUISequentialInStream@@@8
.data:00001318 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001318 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001318                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00001318                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001318                                         ; const type_info::`vftable'
.data:0000131C                 align 10h
.data:00001320 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000133A                 align 4
.data:0000133A _data           ends
.data:0000133A
.rdata$r:0000133C ; ===========================================================================
.rdata$r:0000133C
.rdata$r:0000133C ; Segment type: Pure data
.rdata$r:0000133C ; Segment permissions: Read
.rdata$r:0000133C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000133C                 assume cs:_rdata$r
.rdata$r:0000133C                 ;org 133Ch
.rdata$r:0000133C ; COMDAT (pick any)
.rdata$r:0000133C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000133C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000133C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001314o
.rdata$r:0000133C                                         ; .rdata$r:00001370o ...
.rdata$r:0000133D                 db    0
.rdata$r:0000133E                 db    0
.rdata$r:0000133F                 db    0
.rdata$r:00001340                 db    0
.rdata$r:00001341                 db    0
.rdata$r:00001342                 db    0
.rdata$r:00001343                 db    0
.rdata$r:00001344                 db    2
.rdata$r:00001345                 db    0
.rdata$r:00001346                 db    0
.rdata$r:00001347                 db    0
.rdata$r:00001348                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001348 _rdata$r        ends
.rdata$r:00001348
.rdata$r:0000134C ; ===========================================================================
.rdata$r:0000134C
.rdata$r:0000134C ; Segment type: Pure data
.rdata$r:0000134C ; Segment permissions: Read
.rdata$r:0000134C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000134C                 assume cs:_rdata$r
.rdata$r:0000134C                 ;org 134Ch
.rdata$r:0000134C ; COMDAT (pick any)
.rdata$r:0000134C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000134C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000134C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000134C                                         ; DATA XREF: .rdata$r:00001348o
.rdata$r:0000134C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001350                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001354                 db    0
.rdata$r:00001355                 align 4
.rdata$r:00001355 _rdata$r        ends
.rdata$r:00001355
.rdata$r:00001358 ; ===========================================================================
.rdata$r:00001358
.rdata$r:00001358 ; Segment type: Pure data
.rdata$r:00001358 ; Segment permissions: Read
.rdata$r:00001358 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001358                 assume cs:_rdata$r
.rdata$r:00001358                 ;org 1358h
.rdata$r:00001358 ; COMDAT (pick any)
.rdata$r:00001358                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001358 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001358 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001358                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00001358                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000135C                 db    1
.rdata$r:0000135D                 db    0
.rdata$r:0000135E                 db    0
.rdata$r:0000135F                 db    0
.rdata$r:00001360                 db    0
.rdata$r:00001361                 db    0
.rdata$r:00001362                 db    0
.rdata$r:00001363                 db    0
.rdata$r:00001364                 db 0FFh
.rdata$r:00001365                 db 0FFh
.rdata$r:00001366                 db 0FFh
.rdata$r:00001367                 db 0FFh
.rdata$r:00001368                 db    0
.rdata$r:00001369                 db    0
.rdata$r:0000136A                 db    0
.rdata$r:0000136B                 db    0
.rdata$r:0000136C                 db  40h ; @
.rdata$r:0000136D                 db    0
.rdata$r:0000136E                 db    0
.rdata$r:0000136F                 db    0
.rdata$r:00001370                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001370 _rdata$r        ends
.rdata$r:00001370
.rdata$r:00001374 ; ===========================================================================
.rdata$r:00001374
.rdata$r:00001374 ; Segment type: Pure data
.rdata$r:00001374 ; Segment permissions: Read
.rdata$r:00001374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001374                 assume cs:_rdata$r
.rdata$r:00001374                 ;org 1374h
.rdata$r:00001374 ; COMDAT (pick any)
.rdata$r:00001374                 public ??_R1BI@?0A@EC@IUnknown@@8
.rdata$r:00001374 ; IUnknown::`RTTI Base Class Descriptor at (24, -1, 0, 66)'
.rdata$r:00001374 ??_R1BI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001374                                         ; DATA XREF: .rdata$r:00000F1Co
.rdata$r:00001374                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001378                 db    0
.rdata$r:00001379                 db    0
.rdata$r:0000137A                 db    0
.rdata$r:0000137B                 db    0
.rdata$r:0000137C                 db  18h
.rdata$r:0000137D                 db    0
.rdata$r:0000137E                 db    0
.rdata$r:0000137F                 db    0
.rdata$r:00001380                 db 0FFh
.rdata$r:00001381                 db 0FFh
.rdata$r:00001382                 db 0FFh
.rdata$r:00001383                 db 0FFh
.rdata$r:00001384                 db    0
.rdata$r:00001385                 db    0
.rdata$r:00001386                 db    0
.rdata$r:00001387                 db    0
.rdata$r:00001388                 db  42h ; B
.rdata$r:00001389                 db    0
.rdata$r:0000138A                 db    0
.rdata$r:0000138B                 db    0
.rdata$r:0000138C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000138C _rdata$r        ends
.rdata$r:0000138C
.rdata$r:00001390 ; ===========================================================================
.rdata$r:00001390
.rdata$r:00001390 ; Segment type: Pure data
.rdata$r:00001390 ; Segment permissions: Read
.rdata$r:00001390 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001390                 assume cs:_rdata$r
.rdata$r:00001390                 ;org 1390h
.rdata$r:00001390 ; COMDAT (pick any)
.rdata$r:00001390                 public ??_R1BM@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001390 ; CMyUnknownImp::`RTTI Base Class Descriptor at (28, -1, 0, 64)'
.rdata$r:00001390 ??_R1BM@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001390                                         ; DATA XREF: .rdata$r:00000F20o
.rdata$r:00001390                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001394                 align 8
.rdata$r:00001398                 db  1Ch
.rdata$r:00001399                 db    0
.rdata$r:0000139A                 db    0
.rdata$r:0000139B                 db    0
.rdata$r:0000139C                 db 0FFh
.rdata$r:0000139D                 db 0FFh
.rdata$r:0000139E                 db 0FFh
.rdata$r:0000139F                 db 0FFh
.rdata$r:000013A0                 db    0
.rdata$r:000013A1                 db    0
.rdata$r:000013A2                 db    0
.rdata$r:000013A3                 db    0
.rdata$r:000013A4                 db  40h ; @
.rdata$r:000013A5                 db    0
.rdata$r:000013A6                 db    0
.rdata$r:000013A7                 db    0
.rdata$r:000013A8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013A8 _rdata$r        ends
.rdata$r:000013A8
.data:000013AC ; ===========================================================================
.data:000013AC
.data:000013AC ; Segment type: Pure data
.data:000013AC ; Segment permissions: Read/Write
.data:000013AC _data           segment dword public 'DATA' use32
.data:000013AC                 assume cs:_data
.data:000013AC                 ;org 13ACh
.data:000013AC ; COMDAT (pick any)
.data:000013AC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000013AC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000013AC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000013AC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (28,-1,0,64)'o
.data:000013AC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000013AC                                         ; const type_info::`vftable'
.data:000013B0                 db    0
.data:000013B1                 db    0
.data:000013B2                 db    0
.data:000013B3                 db    0
.data:000013B4                 db  2Eh ; .
.data:000013B5                 db  3Fh ; ?
.data:000013B6                 db  41h ; A
.data:000013B7                 db  56h ; V
.data:000013B8                 db  43h ; C
.data:000013B9                 db  4Dh ; M
.data:000013BA                 db  79h ; y
.data:000013BB                 db  55h ; U
.data:000013BC                 db  6Eh ; n
.data:000013BD                 db  6Bh ; k
.data:000013BE                 db  6Eh ; n
.data:000013BF                 db  6Fh ; o
.data:000013C0                 db  77h ; w
.data:000013C1                 db  6Eh ; n
.data:000013C2                 db  49h ; I
.data:000013C3                 db  6Dh ; m
.data:000013C4                 db  70h ; p
.data:000013C5                 db  40h ; @
.data:000013C6                 db  40h ; @
.data:000013C7                 db    0
.data:000013C7 _data           ends
.data:000013C7
.rdata$r:000013C8 ; ===========================================================================
.rdata$r:000013C8
.rdata$r:000013C8 ; Segment type: Pure data
.rdata$r:000013C8 ; Segment permissions: Read
.rdata$r:000013C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013C8                 assume cs:_rdata$r
.rdata$r:000013C8                 ;org 13C8h
.rdata$r:000013C8 ; COMDAT (pick any)
.rdata$r:000013C8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000013C8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013C8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000013A8o
.rdata$r:000013C8                                         ; .rdata$r:000013F8o
.rdata$r:000013C9                 db    0
.rdata$r:000013CA                 db    0
.rdata$r:000013CB                 db    0
.rdata$r:000013CC                 db    0
.rdata$r:000013CD                 db    0
.rdata$r:000013CE                 db    0
.rdata$r:000013CF                 db    0
.rdata$r:000013D0                 db    1
.rdata$r:000013D1                 db    0
.rdata$r:000013D2                 db    0
.rdata$r:000013D3                 db    0
.rdata$r:000013D4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000013D4 _rdata$r        ends
.rdata$r:000013D4
.rdata$r:000013D8 ; ===========================================================================
.rdata$r:000013D8
.rdata$r:000013D8 ; Segment type: Pure data
.rdata$r:000013D8 ; Segment permissions: Read
.rdata$r:000013D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013D8                 assume cs:_rdata$r
.rdata$r:000013D8                 ;org 13D8h
.rdata$r:000013D8 ; COMDAT (pick any)
.rdata$r:000013D8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000013D8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000013D8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000013D8                                         ; DATA XREF: .rdata$r:000013D4o
.rdata$r:000013D8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013DC                 db    0
.rdata$r:000013DD                 align 10h
.rdata$r:000013DD _rdata$r        ends
.rdata$r:000013DD
.rdata$r:000013E0 ; ===========================================================================
.rdata$r:000013E0
.rdata$r:000013E0 ; Segment type: Pure data
.rdata$r:000013E0 ; Segment permissions: Read
.rdata$r:000013E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013E0                 assume cs:_rdata$r
.rdata$r:000013E0                 ;org 13E0h
.rdata$r:000013E0 ; COMDAT (pick any)
.rdata$r:000013E0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000013E0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000013E0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000013E0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000013E0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000013E4                 db    0
.rdata$r:000013E5                 db    0
.rdata$r:000013E6                 db    0
.rdata$r:000013E7                 db    0
.rdata$r:000013E8                 db    0
.rdata$r:000013E9                 db    0
.rdata$r:000013EA                 db    0
.rdata$r:000013EB                 db    0
.rdata$r:000013EC                 db 0FFh
.rdata$r:000013ED                 db 0FFh
.rdata$r:000013EE                 db 0FFh
.rdata$r:000013EF                 db 0FFh
.rdata$r:000013F0                 db    0
.rdata$r:000013F1                 db    0
.rdata$r:000013F2                 db    0
.rdata$r:000013F3                 db    0
.rdata$r:000013F4                 db  40h ; @
.rdata$r:000013F5                 db    0
.rdata$r:000013F6                 db    0
.rdata$r:000013F7                 db    0
.rdata$r:000013F8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013F8 _rdata$r        ends
.rdata$r:000013F8
.rdata$r:000013FC ; ===========================================================================
.rdata$r:000013FC
.rdata$r:000013FC ; Segment type: Pure data
.rdata$r:000013FC ; Segment permissions: Read
.rdata$r:000013FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013FC                 assume cs:_rdata$r
.rdata$r:000013FC                 ;org 13FCh
.rdata$r:000013FC ; COMDAT (pick any)
.rdata$r:000013FC                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata$r:000013FC ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:000013FC ??_R4CDecoder@NLzma@NCompress@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:000013FC                                         ; DATA XREF: .rdata:00000E64o
.rdata$r:000013FD                 db    0
.rdata$r:000013FE                 db    0
.rdata$r:000013FF                 db    0
.rdata$r:00001400                 db    4
.rdata$r:00001401                 db    0
.rdata$r:00001402                 db    0
.rdata$r:00001403                 db    0
.rdata$r:00001404                 db    0
.rdata$r:00001405                 db    0
.rdata$r:00001406                 db    0
.rdata$r:00001407                 db    0
.rdata$r:00001408                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:0000140C                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000140C _rdata$r        ends
.rdata$r:0000140C
.rdata$r:00001410 ; ===========================================================================
.rdata$r:00001410
.rdata$r:00001410 ; Segment type: Pure data
.rdata$r:00001410 ; Segment permissions: Read
.rdata$r:00001410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001410                 assume cs:_rdata$r
.rdata$r:00001410                 ;org 1410h
.rdata$r:00001410 ; COMDAT (pick any)
.rdata$r:00001410                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@
.rdata$r:00001410 ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetFinishMode'}
.rdata$r:00001410 ??_R4CDecoder@NLzma@NCompress@@6BICompressSetFinishMode@@@ db    0
.rdata$r:00001410                                         ; DATA XREF: .rdata:00000E50o
.rdata$r:00001411                 db    0
.rdata$r:00001412                 db    0
.rdata$r:00001413                 db    0
.rdata$r:00001414                 db    8
.rdata$r:00001415                 db    0
.rdata$r:00001416                 db    0
.rdata$r:00001417                 db    0
.rdata$r:00001418                 db    0
.rdata$r:00001419                 db    0
.rdata$r:0000141A                 db    0
.rdata$r:0000141B                 db    0
.rdata$r:0000141C                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00001420                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001420 _rdata$r        ends
.rdata$r:00001420
.rdata$r:00001424 ; ===========================================================================
.rdata$r:00001424
.rdata$r:00001424 ; Segment type: Pure data
.rdata$r:00001424 ; Segment permissions: Read
.rdata$r:00001424 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001424                 assume cs:_rdata$r
.rdata$r:00001424                 ;org 1424h
.rdata$r:00001424 ; COMDAT (pick any)
.rdata$r:00001424                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@
.rdata$r:00001424 ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetBufSize'}
.rdata$r:00001424 ??_R4CDecoder@NLzma@NCompress@@6BICompressSetBufSize@@@ db    0
.rdata$r:00001424                                         ; DATA XREF: .rdata:00000E38o
.rdata$r:00001425                 db    0
.rdata$r:00001426                 db    0
.rdata$r:00001427                 db    0
.rdata$r:00001428                 db  0Ch
.rdata$r:00001429                 db    0
.rdata$r:0000142A                 db    0
.rdata$r:0000142B                 db    0
.rdata$r:0000142C                 db    0
.rdata$r:0000142D                 db    0
.rdata$r:0000142E                 db    0
.rdata$r:0000142F                 db    0
.rdata$r:00001430                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00001434                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001434 _rdata$r        ends
.rdata$r:00001434
.rdata$r:00001438 ; ===========================================================================
.rdata$r:00001438
.rdata$r:00001438 ; Segment type: Pure data
.rdata$r:00001438 ; Segment permissions: Read
.rdata$r:00001438 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001438                 assume cs:_rdata$r
.rdata$r:00001438                 ;org 1438h
.rdata$r:00001438 ; COMDAT (pick any)
.rdata$r:00001438                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@
.rdata$r:00001438 ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00001438 ??_R4CDecoder@NLzma@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00001438                                         ; DATA XREF: .rdata:00000E20o
.rdata$r:00001439                 db    0
.rdata$r:0000143A                 db    0
.rdata$r:0000143B                 db    0
.rdata$r:0000143C                 db  10h
.rdata$r:0000143D                 db    0
.rdata$r:0000143E                 db    0
.rdata$r:0000143F                 db    0
.rdata$r:00001440                 db    0
.rdata$r:00001441                 db    0
.rdata$r:00001442                 db    0
.rdata$r:00001443                 db    0
.rdata$r:00001444                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00001448                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001448 _rdata$r        ends
.rdata$r:00001448
.rdata$r:0000144C ; ===========================================================================
.rdata$r:0000144C
.rdata$r:0000144C ; Segment type: Pure data
.rdata$r:0000144C ; Segment permissions: Read
.rdata$r:0000144C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000144C                 assume cs:_rdata$r
.rdata$r:0000144C                 ;org 144Ch
.rdata$r:0000144C ; COMDAT (pick any)
.rdata$r:0000144C                 public ??_R4CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:0000144C ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:0000144C ??_R4CDecoder@NLzma@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:0000144C                                         ; DATA XREF: .rdata:00000E0Co
.rdata$r:0000144D                 db    0
.rdata$r:0000144E                 db    0
.rdata$r:0000144F                 db    0
.rdata$r:00001450                 db  14h
.rdata$r:00001451                 db    0
.rdata$r:00001452                 db    0
.rdata$r:00001453                 db    0
.rdata$r:00001454                 db    0
.rdata$r:00001455                 db    0
.rdata$r:00001456                 db    0
.rdata$r:00001457                 db    0
.rdata$r:00001458                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:0000145C                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000145C _rdata$r        ends
.rdata$r:0000145C
.rdata$r:00001460 ; ===========================================================================
.rdata$r:00001460
.rdata$r:00001460 ; Segment type: Pure data
.rdata$r:00001460 ; Segment permissions: Read
.rdata$r:00001460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001460                 assume cs:_rdata$r
.rdata$r:00001460                 ;org 1460h
.rdata$r:00001460 ; COMDAT (pick any)
.rdata$r:00001460                 public ??_R4CDecoder@NLzma@NCompress@@6BISequentialInStream@@@
.rdata$r:00001460 ; const NCompress::NLzma::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00001460 ??_R4CDecoder@NLzma@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00001460                                         ; DATA XREF: .rdata:00000DF8o
.rdata$r:00001461                 db    0
.rdata$r:00001462                 db    0
.rdata$r:00001463                 db    0
.rdata$r:00001464                 db  18h
.rdata$r:00001465                 db    0
.rdata$r:00001466                 db    0
.rdata$r:00001467                 db    0
.rdata$r:00001468                 db    0
.rdata$r:00001469                 db    0
.rdata$r:0000146A                 db    0
.rdata$r:0000146B                 db    0
.rdata$r:0000146C                 dd offset ??_R0?AVCDecoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CDecoder `RTTI Type Descriptor'
.rdata$r:00001470                 dd offset ??_R3CDecoder@NLzma@NCompress@@8 ; NCompress::NLzma::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001470 _rdata$r        ends
.rdata$r:00001470
.text:00001474 ; ===========================================================================
.text:00001474
.text:00001474 ; Segment type: Pure code
.text:00001474 ; Segment permissions: Read/Execute
.text:00001474 _text           segment para public 'CODE' use32
.text:00001474                 assume cs:_text
.text:00001474                 ;org 1474h
.text:00001474 ; COMDAT (pick any)
.text:00001474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001474
.text:00001474 ; =============== S U B R O U T I N E =======================================
.text:00001474
.text:00001474 ; Attributes: bp-based frame
.text:00001474
.text:00001474 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00001474                 public ??0CMyUnknownImp@@QAE@XZ
.text:00001474 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+5Ep
.text:00001474
.text:00001474 var_4           = dword ptr -4
.text:00001474
.text:00001474                 push    ebp
.text:00001475                 mov     ebp, esp
.text:00001477                 push    ecx
.text:00001478                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000147F                 mov     [ebp+var_4], ecx
.text:00001482                 mov     eax, [ebp+var_4]
.text:00001485                 mov     dword ptr [eax], 0
.text:0000148B                 mov     eax, [ebp+var_4]
.text:0000148E                 mov     esp, ebp
.text:00001490                 pop     ebp
.text:00001491                 retn
.text:00001491 ??0CMyUnknownImp@@QAE@XZ endp
.text:00001491
.text:00001491 ; ---------------------------------------------------------------------------
.text:00001492                 align 4
.text:00001492 _text           ends
.text:00001492
.text:00001494 ; ===========================================================================
.text:00001494
.text:00001494 ; Segment type: Pure code
.text:00001494 ; Segment permissions: Read/Execute
.text:00001494 _text           segment para public 'CODE' use32
.text:00001494                 assume cs:_text
.text:00001494                 ;org 1494h
.text:00001494 ; COMDAT (pick any)
.text:00001494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001494
.text:00001494 ; =============== S U B R O U T I N E =======================================
.text:00001494
.text:00001494 ; Attributes: bp-based frame
.text:00001494
.text:00001494 ; __int32 __stdcall NCompress::NLzma::CDecoder::QueryInterface(NCompress::NLzma::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00001494                 public ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00001494 ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001494                                         ; CODE XREF: [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00001494                                         ; [thunk]:NCompress::NLzma::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00001494
.text:00001494 var_18          = dword ptr -18h
.text:00001494 var_14          = dword ptr -14h
.text:00001494 var_10          = dword ptr -10h
.text:00001494 var_C           = dword ptr -0Ch
.text:00001494 var_8           = dword ptr -8
.text:00001494 var_4           = dword ptr -4
.text:00001494 this            = dword ptr  8
.text:00001494 Buf1            = dword ptr  0Ch
.text:00001494 arg_8           = dword ptr  10h
.text:00001494
.text:00001494                 push    ebp
.text:00001495                 mov     ebp, esp
.text:00001497                 sub     esp, 18h
.text:0000149A                 mov     eax, 0CCCCCCCCh
.text:0000149F                 mov     [ebp+var_18], eax
.text:000014A2                 mov     [ebp+var_14], eax
.text:000014A5                 mov     [ebp+var_10], eax
.text:000014A8                 mov     [ebp+var_C], eax
.text:000014AB                 mov     [ebp+var_8], eax
.text:000014AE                 mov     [ebp+var_4], eax
.text:000014B1                 mov     eax, [ebp+arg_8]
.text:000014B4                 mov     dword ptr [eax], 0
.text:000014BA                 push    offset _IID_IUnknown ; Buf2
.text:000014BF                 mov     ecx, [ebp+Buf1]
.text:000014C2                 push    ecx             ; Buf1
.text:000014C3                 call    ___@8           ; __(x,x)
.text:000014C8                 test    eax, eax
.text:000014CA                 jz      short loc_14D9
.text:000014CC                 mov     edx, [ebp+arg_8]
.text:000014CF                 mov     eax, [ebp+this]
.text:000014D2                 mov     [edx], eax
.text:000014D4                 jmp     loc_1640
.text:000014D9 ; ---------------------------------------------------------------------------
.text:000014D9
.text:000014D9 loc_14D9:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+36j
.text:000014D9                 push    offset _IID_ICompressCoder ; Buf2
.text:000014DE                 mov     ecx, [ebp+Buf1]
.text:000014E1                 push    ecx             ; Buf1
.text:000014E2                 call    ___@8           ; __(x,x)
.text:000014E7                 test    eax, eax
.text:000014E9                 jz      short loc_14F8
.text:000014EB                 mov     edx, [ebp+arg_8]
.text:000014EE                 mov     eax, [ebp+this]
.text:000014F1                 mov     [edx], eax
.text:000014F3                 jmp     loc_1640
.text:000014F8 ; ---------------------------------------------------------------------------
.text:000014F8
.text:000014F8 loc_14F8:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+55j
.text:000014F8                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:000014FD                 mov     ecx, [ebp+Buf1]
.text:00001500                 push    ecx             ; Buf1
.text:00001501                 call    ___@8           ; __(x,x)
.text:00001506                 test    eax, eax
.text:00001508                 jz      short loc_152F
.text:0000150A                 cmp     [ebp+this], 0
.text:0000150E                 jz      short loc_151B
.text:00001510                 mov     edx, [ebp+this]
.text:00001513                 add     edx, 4
.text:00001516                 mov     [ebp+var_4], edx
.text:00001519                 jmp     short loc_1522
.text:0000151B ; ---------------------------------------------------------------------------
.text:0000151B
.text:0000151B loc_151B:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+7Aj
.text:0000151B                 mov     [ebp+var_4], 0
.text:00001522
.text:00001522 loc_1522:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+85j
.text:00001522                 mov     eax, [ebp+arg_8]
.text:00001525                 mov     ecx, [ebp+var_4]
.text:00001528                 mov     [eax], ecx
.text:0000152A                 jmp     loc_1640
.text:0000152F ; ---------------------------------------------------------------------------
.text:0000152F
.text:0000152F loc_152F:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+74j
.text:0000152F                 push    offset _IID_ICompressSetFinishMode ; Buf2
.text:00001534                 mov     edx, [ebp+Buf1]
.text:00001537                 push    edx             ; Buf1
.text:00001538                 call    ___@8           ; __(x,x)
.text:0000153D                 test    eax, eax
.text:0000153F                 jz      short loc_1566
.text:00001541                 cmp     [ebp+this], 0
.text:00001545                 jz      short loc_1552
.text:00001547                 mov     eax, [ebp+this]
.text:0000154A                 add     eax, 8
.text:0000154D                 mov     [ebp+var_8], eax
.text:00001550                 jmp     short loc_1559
.text:00001552 ; ---------------------------------------------------------------------------
.text:00001552
.text:00001552 loc_1552:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+B1j
.text:00001552                 mov     [ebp+var_8], 0
.text:00001559
.text:00001559 loc_1559:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+BCj
.text:00001559                 mov     ecx, [ebp+arg_8]
.text:0000155C                 mov     edx, [ebp+var_8]
.text:0000155F                 mov     [ecx], edx
.text:00001561                 jmp     loc_1640
.text:00001566 ; ---------------------------------------------------------------------------
.text:00001566
.text:00001566 loc_1566:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+ABj
.text:00001566                 push    offset _IID_ICompressSetBufSize ; Buf2
.text:0000156B                 mov     eax, [ebp+Buf1]
.text:0000156E                 push    eax             ; Buf1
.text:0000156F                 call    ___@8           ; __(x,x)
.text:00001574                 test    eax, eax
.text:00001576                 jz      short loc_159D
.text:00001578                 cmp     [ebp+this], 0
.text:0000157C                 jz      short loc_1589
.text:0000157E                 mov     ecx, [ebp+this]
.text:00001581                 add     ecx, 0Ch
.text:00001584                 mov     [ebp+var_C], ecx
.text:00001587                 jmp     short loc_1590
.text:00001589 ; ---------------------------------------------------------------------------
.text:00001589
.text:00001589 loc_1589:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+E8j
.text:00001589                 mov     [ebp+var_C], 0
.text:00001590
.text:00001590 loc_1590:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+F3j
.text:00001590                 mov     edx, [ebp+arg_8]
.text:00001593                 mov     eax, [ebp+var_C]
.text:00001596                 mov     [edx], eax
.text:00001598                 jmp     loc_1640
.text:0000159D ; ---------------------------------------------------------------------------
.text:0000159D
.text:0000159D loc_159D:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+E2j
.text:0000159D                 push    offset _IID_ICompressSetInStream ; Buf2
.text:000015A2                 mov     ecx, [ebp+Buf1]
.text:000015A5                 push    ecx             ; Buf1
.text:000015A6                 call    ___@8           ; __(x,x)
.text:000015AB                 test    eax, eax
.text:000015AD                 jz      short loc_15D1
.text:000015AF                 cmp     [ebp+this], 0
.text:000015B3                 jz      short loc_15C0
.text:000015B5                 mov     edx, [ebp+this]
.text:000015B8                 add     edx, 10h
.text:000015BB                 mov     [ebp+var_10], edx
.text:000015BE                 jmp     short loc_15C7
.text:000015C0 ; ---------------------------------------------------------------------------
.text:000015C0
.text:000015C0 loc_15C0:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+11Fj
.text:000015C0                 mov     [ebp+var_10], 0
.text:000015C7
.text:000015C7 loc_15C7:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+12Aj
.text:000015C7                 mov     eax, [ebp+arg_8]
.text:000015CA                 mov     ecx, [ebp+var_10]
.text:000015CD                 mov     [eax], ecx
.text:000015CF                 jmp     short loc_1640
.text:000015D1 ; ---------------------------------------------------------------------------
.text:000015D1
.text:000015D1 loc_15D1:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+119j
.text:000015D1                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:000015D6                 mov     edx, [ebp+Buf1]
.text:000015D9                 push    edx             ; Buf1
.text:000015DA                 call    ___@8           ; __(x,x)
.text:000015DF                 test    eax, eax
.text:000015E1                 jz      short loc_1605
.text:000015E3                 cmp     [ebp+this], 0
.text:000015E7                 jz      short loc_15F4
.text:000015E9                 mov     eax, [ebp+this]
.text:000015EC                 add     eax, 14h
.text:000015EF                 mov     [ebp+var_14], eax
.text:000015F2                 jmp     short loc_15FB
.text:000015F4 ; ---------------------------------------------------------------------------
.text:000015F4
.text:000015F4 loc_15F4:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+153j
.text:000015F4                 mov     [ebp+var_14], 0
.text:000015FB
.text:000015FB loc_15FB:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+15Ej
.text:000015FB                 mov     ecx, [ebp+arg_8]
.text:000015FE                 mov     edx, [ebp+var_14]
.text:00001601                 mov     [ecx], edx
.text:00001603                 jmp     short loc_1640
.text:00001605 ; ---------------------------------------------------------------------------
.text:00001605
.text:00001605 loc_1605:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+14Dj
.text:00001605                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000160A                 mov     eax, [ebp+Buf1]
.text:0000160D                 push    eax             ; Buf1
.text:0000160E                 call    ___@8           ; __(x,x)
.text:00001613                 test    eax, eax
.text:00001615                 jz      short loc_1639
.text:00001617                 cmp     [ebp+this], 0
.text:0000161B                 jz      short loc_1628
.text:0000161D                 mov     ecx, [ebp+this]
.text:00001620                 add     ecx, 18h
.text:00001623                 mov     [ebp+var_18], ecx
.text:00001626                 jmp     short loc_162F
.text:00001628 ; ---------------------------------------------------------------------------
.text:00001628
.text:00001628 loc_1628:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+187j
.text:00001628                 mov     [ebp+var_18], 0
.text:0000162F
.text:0000162F loc_162F:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+192j
.text:0000162F                 mov     edx, [ebp+arg_8]
.text:00001632                 mov     eax, [ebp+var_18]
.text:00001635                 mov     [edx], eax
.text:00001637                 jmp     short loc_1640
.text:00001639 ; ---------------------------------------------------------------------------
.text:00001639
.text:00001639 loc_1639:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+181j
.text:00001639                 mov     eax, 80004002h
.text:0000163E                 jmp     short loc_1651
.text:00001640 ; ---------------------------------------------------------------------------
.text:00001640
.text:00001640 loc_1640:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+40j
.text:00001640                                         ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+5Fj ...
.text:00001640                 mov     ecx, [ebp+this]
.text:00001643                 mov     edx, [ecx+1Ch]
.text:00001646                 add     edx, 1
.text:00001649                 mov     eax, [ebp+this]
.text:0000164C                 mov     [eax+1Ch], edx
.text:0000164F                 xor     eax, eax
.text:00001651
.text:00001651 loc_1651:                               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+1AAj
.text:00001651                 add     esp, 18h
.text:00001654                 cmp     ebp, esp
.text:00001656                 call    __RTC_CheckEsp
.text:0000165B                 mov     esp, ebp
.text:0000165D                 pop     ebp
.text:0000165E                 retn    0Ch
.text:0000165E ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000165E
.text:0000165E ; ---------------------------------------------------------------------------
.text:00001661                 align 4
.text:00001661 _text           ends
.text:00001661
.text:00001664 ; ===========================================================================
.text:00001664
.text:00001664 ; Segment type: Pure code
.text:00001664 ; Segment permissions: Read/Execute
.text:00001664 _text           segment para public 'CODE' use32
.text:00001664                 assume cs:_text
.text:00001664                 ;org 1664h
.text:00001664 ; COMDAT (pick any)
.text:00001664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001664
.text:00001664 ; =============== S U B R O U T I N E =======================================
.text:00001664
.text:00001664 ; Attributes: bp-based frame
.text:00001664
.text:00001664 ; unsigned __int32 __stdcall NCompress::NLzma::CDecoder::AddRef(NCompress::NLzma::CDecoder *this)
.text:00001664                 public ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ
.text:00001664 ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ proc near
.text:00001664                                         ; CODE XREF: [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{8}' (void)+5j
.text:00001664                                         ; [thunk]:NCompress::NLzma::CDecoder::AddRef`adjustor{12}' (void)+5j ...
.text:00001664
.text:00001664 var_4           = dword ptr -4
.text:00001664 this            = dword ptr  8
.text:00001664
.text:00001664                 push    ebp
.text:00001665                 mov     ebp, esp
.text:00001667                 push    ecx
.text:00001668                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000166F                 mov     eax, [ebp+this]
.text:00001672                 mov     ecx, [eax+1Ch]
.text:00001675                 add     ecx, 1
.text:00001678                 mov     [ebp+var_4], ecx
.text:0000167B                 mov     edx, [ebp+this]
.text:0000167E                 mov     eax, [ebp+var_4]
.text:00001681                 mov     [edx+1Ch], eax
.text:00001684                 mov     eax, [ebp+var_4]
.text:00001687                 mov     esp, ebp
.text:00001689                 pop     ebp
.text:0000168A                 retn    4
.text:0000168A ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ endp
.text:0000168A
.text:0000168A ; ---------------------------------------------------------------------------
.text:0000168D                 align 10h
.text:0000168D _text           ends
.text:0000168D
.text:00001690 ; ===========================================================================
.text:00001690
.text:00001690 ; Segment type: Pure code
.text:00001690 ; Segment permissions: Read/Execute
.text:00001690 _text           segment para public 'CODE' use32
.text:00001690                 assume cs:_text
.text:00001690                 ;org 1690h
.text:00001690 ; COMDAT (pick any)
.text:00001690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001690
.text:00001690 ; =============== S U B R O U T I N E =======================================
.text:00001690
.text:00001690 ; Attributes: bp-based frame
.text:00001690
.text:00001690 ; unsigned __int32 __stdcall NCompress::NLzma::CDecoder::Release(NCompress::NLzma::CDecoder *this)
.text:00001690                 public ?Release@CDecoder@NLzma@NCompress@@UAGKXZ
.text:00001690 ?Release@CDecoder@NLzma@NCompress@@UAGKXZ proc near
.text:00001690                                         ; CODE XREF: [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{16}' (void)+5j
.text:00001690                                         ; [thunk]:NCompress::NLzma::CDecoder::Release`adjustor{20}' (void)+5j ...
.text:00001690
.text:00001690 var_10          = dword ptr -10h
.text:00001690 var_C           = dword ptr -0Ch
.text:00001690 var_8           = dword ptr -8
.text:00001690 var_4           = dword ptr -4
.text:00001690 this            = dword ptr  8
.text:00001690
.text:00001690                 push    ebp
.text:00001691                 mov     ebp, esp
.text:00001693                 sub     esp, 10h
.text:00001696                 push    esi
.text:00001697                 mov     eax, 0CCCCCCCCh
.text:0000169C                 mov     [ebp+var_10], eax
.text:0000169F                 mov     [ebp+var_C], eax
.text:000016A2                 mov     [ebp+var_8], eax
.text:000016A5                 mov     [ebp+var_4], eax
.text:000016A8                 mov     eax, [ebp+this]
.text:000016AB                 mov     ecx, [eax+1Ch]
.text:000016AE                 sub     ecx, 1
.text:000016B1                 mov     [ebp+var_C], ecx
.text:000016B4                 mov     edx, [ebp+this]
.text:000016B7                 mov     eax, [ebp+var_C]
.text:000016BA                 mov     [edx+1Ch], eax
.text:000016BD                 cmp     [ebp+var_C], 0
.text:000016C1                 jz      short loc_16CB
.text:000016C3                 mov     ecx, [ebp+this]
.text:000016C6                 mov     eax, [ecx+1Ch]
.text:000016C9                 jmp     short loc_1703
.text:000016CB ; ---------------------------------------------------------------------------
.text:000016CB
.text:000016CB loc_16CB:                               ; CODE XREF: NCompress::NLzma::CDecoder::Release(void)+31j
.text:000016CB                 mov     edx, [ebp+this]
.text:000016CE                 mov     [ebp+var_8], edx
.text:000016D1                 mov     eax, [ebp+var_8]
.text:000016D4                 mov     [ebp+var_4], eax
.text:000016D7                 cmp     [ebp+var_4], 0
.text:000016DB                 jz      short loc_16FA
.text:000016DD                 mov     esi, esp
.text:000016DF                 push    1
.text:000016E1                 mov     ecx, [ebp+var_4]
.text:000016E4                 mov     edx, [ecx]
.text:000016E6                 mov     ecx, [ebp+var_4]
.text:000016E9                 mov     eax, [edx+10h]
.text:000016EC                 call    eax
.text:000016EE                 cmp     esi, esp
.text:000016F0                 call    __RTC_CheckEsp
.text:000016F5                 mov     [ebp+var_10], eax
.text:000016F8                 jmp     short loc_1701
.text:000016FA ; ---------------------------------------------------------------------------
.text:000016FA
.text:000016FA loc_16FA:                               ; CODE XREF: NCompress::NLzma::CDecoder::Release(void)+4Bj
.text:000016FA                 mov     [ebp+var_10], 0
.text:00001701
.text:00001701 loc_1701:                               ; CODE XREF: NCompress::NLzma::CDecoder::Release(void)+68j
.text:00001701                 xor     eax, eax
.text:00001703
.text:00001703 loc_1703:                               ; CODE XREF: NCompress::NLzma::CDecoder::Release(void)+39j
.text:00001703                 pop     esi
.text:00001704                 add     esp, 10h
.text:00001707                 cmp     ebp, esp
.text:00001709                 call    __RTC_CheckEsp
.text:0000170E                 mov     esp, ebp
.text:00001710                 pop     ebp
.text:00001711                 retn    4
.text:00001711 ?Release@CDecoder@NLzma@NCompress@@UAGKXZ endp
.text:00001711
.text:00001711 _text           ends
.text:00001711
.text:00001714 ; ===========================================================================
.text:00001714
.text:00001714 ; Segment type: Pure code
.text:00001714 ; Segment permissions: Read/Execute
.text:00001714 _text           segment para public 'CODE' use32
.text:00001714                 assume cs:_text
.text:00001714                 ;org 1714h
.text:00001714 ; COMDAT (pick any)
.text:00001714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001714
.text:00001714 ; =============== S U B R O U T I N E =======================================
.text:00001714
.text:00001714 ; Attributes: bp-based frame
.text:00001714
.text:00001714 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001714                 public ___@8
.text:00001714 ___@8           proc near               ; CODE XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+2Fp
.text:00001714                                         ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+4Ep ...
.text:00001714
.text:00001714 Buf1            = dword ptr  8
.text:00001714 Buf2            = dword ptr  0Ch
.text:00001714
.text:00001714                 push    ebp
.text:00001715                 mov     ebp, esp
.text:00001717                 mov     eax, [ebp+Buf2]
.text:0000171A                 push    eax             ; Buf2
.text:0000171B                 mov     ecx, [ebp+Buf1]
.text:0000171E                 push    ecx             ; Buf1
.text:0000171F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001724                 cmp     ebp, esp
.text:00001726                 call    __RTC_CheckEsp
.text:0000172B                 pop     ebp
.text:0000172C                 retn    8
.text:0000172C ___@8           endp
.text:0000172C
.text:0000172C ; ---------------------------------------------------------------------------
.text:0000172F                 align 10h
.text:0000172F _text           ends
.text:0000172F
.text:00001730 ; ===========================================================================
.text:00001730
.text:00001730 ; Segment type: Pure code
.text:00001730 ; Segment permissions: Read/Execute
.text:00001730 _text           segment para public 'CODE' use32
.text:00001730                 assume cs:_text
.text:00001730                 ;org 1730h
.text:00001730 ; COMDAT (pick any)
.text:00001730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001730
.text:00001730 ; =============== S U B R O U T I N E =======================================
.text:00001730
.text:00001730 ; Attributes: bp-based frame
.text:00001730
.text:00001730 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001730                 public _IsEqualGUID@8
.text:00001730 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001730
.text:00001730 Buf1            = dword ptr  8
.text:00001730 Buf2            = dword ptr  0Ch
.text:00001730
.text:00001730                 push    ebp
.text:00001731                 mov     ebp, esp
.text:00001733                 push    10h             ; Size
.text:00001735                 mov     eax, [ebp+Buf2]
.text:00001738                 push    eax             ; Buf2
.text:00001739                 mov     ecx, [ebp+Buf1]
.text:0000173C                 push    ecx             ; Buf1
.text:0000173D                 call    _memcmp
.text:00001742                 add     esp, 0Ch
.text:00001745                 neg     eax
.text:00001747                 sbb     eax, eax
.text:00001749                 add     eax, 1
.text:0000174C                 cmp     ebp, esp
.text:0000174E                 call    __RTC_CheckEsp
.text:00001753                 pop     ebp
.text:00001754                 retn    8
.text:00001754 _IsEqualGUID@8  endp
.text:00001754
.text:00001754 ; ---------------------------------------------------------------------------
.text:00001757                 align 4
.text:00001757 _text           ends
.text:00001757
.text:00001758 ; ===========================================================================
.text:00001758
.text:00001758 ; Segment type: Pure code
.text:00001758 ; Segment permissions: Read/Execute
.text:00001758 _text           segment para public 'CODE' use32
.text:00001758                 assume cs:_text
.text:00001758                 ;org 1758h
.text:00001758 ; COMDAT (pick any)
.text:00001758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001758
.text:00001758 ; =============== S U B R O U T I N E =======================================
.text:00001758
.text:00001758 ; Attributes: bp-based frame
.text:00001758
.text:00001758 ; public: virtual void * __thiscall NCompress::NLzma::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00001758                 public ??_GCDecoder@NLzma@NCompress@@UAEPAXI@Z
.text:00001758 ??_GCDecoder@NLzma@NCompress@@UAEPAXI@Z proc near
.text:00001758
.text:00001758 var_4           = dword ptr -4
.text:00001758 arg_0           = dword ptr  8
.text:00001758
.text:00001758                 push    ebp
.text:00001759                 mov     ebp, esp
.text:0000175B                 push    ecx
.text:0000175C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001763                 mov     [ebp+var_4], ecx
.text:00001766                 mov     ecx, [ebp+var_4] ; this
.text:00001769                 call    ??1CDecoder@NLzma@NCompress@@UAE@XZ ; NCompress::NLzma::CDecoder::~CDecoder(void)
.text:0000176E                 mov     eax, [ebp+arg_0]
.text:00001771                 and     eax, 1
.text:00001774                 jz      short loc_1782
.text:00001776                 mov     ecx, [ebp+var_4]
.text:00001779                 push    ecx             ; void *
.text:0000177A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000177F                 add     esp, 4
.text:00001782
.text:00001782 loc_1782:                               ; CODE XREF: NCompress::NLzma::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00001782                 mov     eax, [ebp+var_4]
.text:00001785                 add     esp, 4
.text:00001788                 cmp     ebp, esp
.text:0000178A                 call    __RTC_CheckEsp
.text:0000178F                 mov     esp, ebp
.text:00001791                 pop     ebp
.text:00001792                 retn    4
.text:00001792 ??_GCDecoder@NLzma@NCompress@@UAEPAXI@Z endp
.text:00001792
.text:00001792 ; ---------------------------------------------------------------------------
.text:00001795                 align 4
.text:00001795 _text           ends
.text:00001795
.text:00001798 ; ===========================================================================
.text:00001798
.text:00001798 ; Segment type: Pure code
.text:00001798 ; Segment permissions: Read/Execute
.text:00001798 _text           segment para public 'CODE' use32
.text:00001798                 assume cs:_text
.text:00001798                 ;org 1798h
.text:00001798 ; COMDAT (pick any)
.text:00001798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001798
.text:00001798 ; =============== S U B R O U T I N E =======================================
.text:00001798
.text:00001798 ; Attributes: bp-based frame
.text:00001798
.text:00001798 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001798                 public ??0ICompressCoder@@QAE@XZ
.text:00001798 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+11p
.text:00001798
.text:00001798 var_4           = dword ptr -4
.text:00001798
.text:00001798                 push    ebp
.text:00001799                 mov     ebp, esp
.text:0000179B                 push    ecx
.text:0000179C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017A3                 mov     [ebp+var_4], ecx
.text:000017A6                 mov     ecx, [ebp+var_4]
.text:000017A9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000017AE                 mov     eax, [ebp+var_4]
.text:000017B1                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000017B7                 mov     eax, [ebp+var_4]
.text:000017BA                 add     esp, 4
.text:000017BD                 cmp     ebp, esp
.text:000017BF                 call    __RTC_CheckEsp
.text:000017C4                 mov     esp, ebp
.text:000017C6                 pop     ebp
.text:000017C7                 retn
.text:000017C7 ??0ICompressCoder@@QAE@XZ endp
.text:000017C7
.text:000017C7 _text           ends
.text:000017C7
.rdata:000017C8 ; ===========================================================================
.rdata:000017C8
.rdata:000017C8 ; Segment type: Pure data
.rdata:000017C8 ; Segment permissions: Read
.rdata:000017C8 _rdata          segment dword public 'DATA' use32
.rdata:000017C8                 assume cs:_rdata
.rdata:000017C8                 ;org 17C8h
.rdata:000017C8 ; COMDAT (pick largest)
.rdata:000017C8                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000017CC                 public ??_7ICompressCoder@@6B@
.rdata:000017CC ; const ICompressCoder::`vftable'
.rdata:000017CC ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000017CC                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:000017D0                 dd offset __purecall
.rdata:000017D4                 dd offset __purecall
.rdata:000017D8                 dd offset __purecall
.rdata:000017D8 _rdata          ends
.rdata:000017D8
.rdata$r:000017DC ; ===========================================================================
.rdata$r:000017DC
.rdata$r:000017DC ; Segment type: Pure data
.rdata$r:000017DC ; Segment permissions: Read
.rdata$r:000017DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017DC                 assume cs:_rdata$r
.rdata$r:000017DC                 ;org 17DCh
.rdata$r:000017DC ; COMDAT (pick any)
.rdata$r:000017DC                 public ??_R4ICompressCoder@@6B@
.rdata$r:000017DC ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:000017DC ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000017C8o
.rdata$r:000017DD                 db    0
.rdata$r:000017DE                 db    0
.rdata$r:000017DF                 db    0
.rdata$r:000017E0                 db    0
.rdata$r:000017E1                 db    0
.rdata$r:000017E2                 db    0
.rdata$r:000017E3                 db    0
.rdata$r:000017E4                 db    0
.rdata$r:000017E5                 db    0
.rdata$r:000017E6                 db    0
.rdata$r:000017E7                 db    0
.rdata$r:000017E8                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000017EC                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017EC _rdata$r        ends
.rdata$r:000017EC
.text:000017F0 ; ===========================================================================
.text:000017F0
.text:000017F0 ; Segment type: Pure code
.text:000017F0 ; Segment permissions: Read/Execute
.text:000017F0 _text           segment para public 'CODE' use32
.text:000017F0                 assume cs:_text
.text:000017F0                 ;org 17F0h
.text:000017F0 ; COMDAT (pick any)
.text:000017F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017F0
.text:000017F0 ; =============== S U B R O U T I N E =======================================
.text:000017F0
.text:000017F0 ; Attributes: bp-based frame
.text:000017F0
.text:000017F0 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:000017F0                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:000017F0 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:000017F0                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+1Cp
.text:000017F0
.text:000017F0 var_4           = dword ptr -4
.text:000017F0
.text:000017F0                 push    ebp
.text:000017F1                 mov     ebp, esp
.text:000017F3                 push    ecx
.text:000017F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017FB                 mov     [ebp+var_4], ecx
.text:000017FE                 mov     ecx, [ebp+var_4]
.text:00001801                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001806                 mov     eax, [ebp+var_4]
.text:00001809                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:0000180F                 mov     eax, [ebp+var_4]
.text:00001812                 add     esp, 4
.text:00001815                 cmp     ebp, esp
.text:00001817                 call    __RTC_CheckEsp
.text:0000181C                 mov     esp, ebp
.text:0000181E                 pop     ebp
.text:0000181F                 retn
.text:0000181F ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:0000181F
.text:0000181F _text           ends
.text:0000181F
.rdata:00001820 ; ===========================================================================
.rdata:00001820
.rdata:00001820 ; Segment type: Pure data
.rdata:00001820 ; Segment permissions: Read
.rdata:00001820 _rdata          segment dword public 'DATA' use32
.rdata:00001820                 assume cs:_rdata
.rdata:00001820                 ;org 1820h
.rdata:00001820 ; COMDAT (pick largest)
.rdata:00001820                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:00001824                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:00001824 ; const ICompressSetDecoderProperties2::`vftable'
.rdata:00001824 ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:00001824                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:00001828                 dd offset __purecall
.rdata:0000182C                 dd offset __purecall
.rdata:00001830                 dd offset __purecall
.rdata:00001830 _rdata          ends
.rdata:00001830
.rdata$r:00001834 ; ===========================================================================
.rdata$r:00001834
.rdata$r:00001834 ; Segment type: Pure data
.rdata$r:00001834 ; Segment permissions: Read
.rdata$r:00001834 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001834                 assume cs:_rdata$r
.rdata$r:00001834                 ;org 1834h
.rdata$r:00001834 ; COMDAT (pick any)
.rdata$r:00001834                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:00001834 ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:00001834 ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:00001834                                         ; DATA XREF: .rdata:00001820o
.rdata$r:00001835                 db    0
.rdata$r:00001836                 db    0
.rdata$r:00001837                 db    0
.rdata$r:00001838                 db    0
.rdata$r:00001839                 db    0
.rdata$r:0000183A                 db    0
.rdata$r:0000183B                 db    0
.rdata$r:0000183C                 db    0
.rdata$r:0000183D                 db    0
.rdata$r:0000183E                 db    0
.rdata$r:0000183F                 db    0
.rdata$r:00001840                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00001844                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001844 _rdata$r        ends
.rdata$r:00001844
.text:00001848 ; ===========================================================================
.text:00001848
.text:00001848 ; Segment type: Pure code
.text:00001848 ; Segment permissions: Read/Execute
.text:00001848 _text           segment para public 'CODE' use32
.text:00001848                 assume cs:_text
.text:00001848                 ;org 1848h
.text:00001848 ; COMDAT (pick any)
.text:00001848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001848
.text:00001848 ; =============== S U B R O U T I N E =======================================
.text:00001848
.text:00001848 ; Attributes: bp-based frame
.text:00001848
.text:00001848 ; _DWORD __thiscall ICompressSetFinishMode::ICompressSetFinishMode(ICompressSetFinishMode *__hidden this)
.text:00001848                 public ??0ICompressSetFinishMode@@QAE@XZ
.text:00001848 ??0ICompressSetFinishMode@@QAE@XZ proc near
.text:00001848                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+27p
.text:00001848
.text:00001848 var_4           = dword ptr -4
.text:00001848
.text:00001848                 push    ebp
.text:00001849                 mov     ebp, esp
.text:0000184B                 push    ecx
.text:0000184C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001853                 mov     [ebp+var_4], ecx
.text:00001856                 mov     ecx, [ebp+var_4]
.text:00001859                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000185E                 mov     eax, [ebp+var_4]
.text:00001861                 mov     dword ptr [eax], offset ??_7ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`vftable'
.text:00001867                 mov     eax, [ebp+var_4]
.text:0000186A                 add     esp, 4
.text:0000186D                 cmp     ebp, esp
.text:0000186F                 call    __RTC_CheckEsp
.text:00001874                 mov     esp, ebp
.text:00001876                 pop     ebp
.text:00001877                 retn
.text:00001877 ??0ICompressSetFinishMode@@QAE@XZ endp
.text:00001877
.text:00001877 _text           ends
.text:00001877
.rdata:00001878 ; ===========================================================================
.rdata:00001878
.rdata:00001878 ; Segment type: Pure data
.rdata:00001878 ; Segment permissions: Read
.rdata:00001878 _rdata          segment dword public 'DATA' use32
.rdata:00001878                 assume cs:_rdata
.rdata:00001878                 ;org 1878h
.rdata:00001878 ; COMDAT (pick largest)
.rdata:00001878                 dd offset ??_R4ICompressSetFinishMode@@6B@ ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata:0000187C                 public ??_7ICompressSetFinishMode@@6B@
.rdata:0000187C ; const ICompressSetFinishMode::`vftable'
.rdata:0000187C ??_7ICompressSetFinishMode@@6B@ dd offset __purecall
.rdata:0000187C                                         ; DATA XREF: ICompressSetFinishMode::ICompressSetFinishMode(void)+19o
.rdata:00001880                 dd offset __purecall
.rdata:00001884                 dd offset __purecall
.rdata:00001888                 dd offset __purecall
.rdata:00001888 _rdata          ends
.rdata:00001888
.rdata$r:0000188C ; ===========================================================================
.rdata$r:0000188C
.rdata$r:0000188C ; Segment type: Pure data
.rdata$r:0000188C ; Segment permissions: Read
.rdata$r:0000188C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000188C                 assume cs:_rdata$r
.rdata$r:0000188C                 ;org 188Ch
.rdata$r:0000188C ; COMDAT (pick any)
.rdata$r:0000188C                 public ??_R4ICompressSetFinishMode@@6B@
.rdata$r:0000188C ; const ICompressSetFinishMode::`RTTI Complete Object Locator'
.rdata$r:0000188C ??_R4ICompressSetFinishMode@@6B@ db    0 ; DATA XREF: .rdata:00001878o
.rdata$r:0000188D                 db    0
.rdata$r:0000188E                 db    0
.rdata$r:0000188F                 db    0
.rdata$r:00001890                 db    0
.rdata$r:00001891                 db    0
.rdata$r:00001892                 db    0
.rdata$r:00001893                 db    0
.rdata$r:00001894                 db    0
.rdata$r:00001895                 db    0
.rdata$r:00001896                 db    0
.rdata$r:00001897                 db    0
.rdata$r:00001898                 dd offset ??_R0?AUICompressSetFinishMode@@@8 ; ICompressSetFinishMode `RTTI Type Descriptor'
.rdata$r:0000189C                 dd offset ??_R3ICompressSetFinishMode@@8 ; ICompressSetFinishMode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000189C _rdata$r        ends
.rdata$r:0000189C
.text:000018A0 ; ===========================================================================
.text:000018A0
.text:000018A0 ; Segment type: Pure code
.text:000018A0 ; Segment permissions: Read/Execute
.text:000018A0 _text           segment para public 'CODE' use32
.text:000018A0                 assume cs:_text
.text:000018A0                 ;org 18A0h
.text:000018A0 ; COMDAT (pick any)
.text:000018A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018A0
.text:000018A0 ; =============== S U B R O U T I N E =======================================
.text:000018A0
.text:000018A0 ; Attributes: bp-based frame
.text:000018A0
.text:000018A0 ; _DWORD __thiscall ICompressSetBufSize::ICompressSetBufSize(ICompressSetBufSize *__hidden this)
.text:000018A0                 public ??0ICompressSetBufSize@@QAE@XZ
.text:000018A0 ??0ICompressSetBufSize@@QAE@XZ proc near
.text:000018A0                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+32p
.text:000018A0
.text:000018A0 var_4           = dword ptr -4
.text:000018A0
.text:000018A0                 push    ebp
.text:000018A1                 mov     ebp, esp
.text:000018A3                 push    ecx
.text:000018A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018AB                 mov     [ebp+var_4], ecx
.text:000018AE                 mov     ecx, [ebp+var_4]
.text:000018B1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000018B6                 mov     eax, [ebp+var_4]
.text:000018B9                 mov     dword ptr [eax], offset ??_7ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`vftable'
.text:000018BF                 mov     eax, [ebp+var_4]
.text:000018C2                 add     esp, 4
.text:000018C5                 cmp     ebp, esp
.text:000018C7                 call    __RTC_CheckEsp
.text:000018CC                 mov     esp, ebp
.text:000018CE                 pop     ebp
.text:000018CF                 retn
.text:000018CF ??0ICompressSetBufSize@@QAE@XZ endp
.text:000018CF
.text:000018CF _text           ends
.text:000018CF
.rdata:000018D0 ; ===========================================================================
.rdata:000018D0
.rdata:000018D0 ; Segment type: Pure data
.rdata:000018D0 ; Segment permissions: Read
.rdata:000018D0 _rdata          segment dword public 'DATA' use32
.rdata:000018D0                 assume cs:_rdata
.rdata:000018D0                 ;org 18D0h
.rdata:000018D0 ; COMDAT (pick largest)
.rdata:000018D0                 dd offset ??_R4ICompressSetBufSize@@6B@ ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata:000018D4                 public ??_7ICompressSetBufSize@@6B@
.rdata:000018D4 ; const ICompressSetBufSize::`vftable'
.rdata:000018D4 ??_7ICompressSetBufSize@@6B@ dd offset __purecall
.rdata:000018D4                                         ; DATA XREF: ICompressSetBufSize::ICompressSetBufSize(void)+19o
.rdata:000018D8                 dd offset __purecall
.rdata:000018DC                 dd offset __purecall
.rdata:000018E0                 dd offset __purecall
.rdata:000018E4                 dd offset __purecall
.rdata:000018E4 _rdata          ends
.rdata:000018E4
.rdata$r:000018E8 ; ===========================================================================
.rdata$r:000018E8
.rdata$r:000018E8 ; Segment type: Pure data
.rdata$r:000018E8 ; Segment permissions: Read
.rdata$r:000018E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018E8                 assume cs:_rdata$r
.rdata$r:000018E8                 ;org 18E8h
.rdata$r:000018E8 ; COMDAT (pick any)
.rdata$r:000018E8                 public ??_R4ICompressSetBufSize@@6B@
.rdata$r:000018E8 ; const ICompressSetBufSize::`RTTI Complete Object Locator'
.rdata$r:000018E8 ??_R4ICompressSetBufSize@@6B@ db    0   ; DATA XREF: .rdata:000018D0o
.rdata$r:000018E9                 db    0
.rdata$r:000018EA                 db    0
.rdata$r:000018EB                 db    0
.rdata$r:000018EC                 db    0
.rdata$r:000018ED                 db    0
.rdata$r:000018EE                 db    0
.rdata$r:000018EF                 db    0
.rdata$r:000018F0                 db    0
.rdata$r:000018F1                 db    0
.rdata$r:000018F2                 db    0
.rdata$r:000018F3                 db    0
.rdata$r:000018F4                 dd offset ??_R0?AUICompressSetBufSize@@@8 ; ICompressSetBufSize `RTTI Type Descriptor'
.rdata$r:000018F8                 dd offset ??_R3ICompressSetBufSize@@8 ; ICompressSetBufSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018F8 _rdata$r        ends
.rdata$r:000018F8
.text:000018FC ; ===========================================================================
.text:000018FC
.text:000018FC ; Segment type: Pure code
.text:000018FC ; Segment permissions: Read/Execute
.text:000018FC _text           segment para public 'CODE' use32
.text:000018FC                 assume cs:_text
.text:000018FC                 ;org 18FCh
.text:000018FC ; COMDAT (pick any)
.text:000018FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018FC
.text:000018FC ; =============== S U B R O U T I N E =======================================
.text:000018FC
.text:000018FC ; Attributes: bp-based frame
.text:000018FC
.text:000018FC ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:000018FC                 public ??0ICompressSetInStream@@QAE@XZ
.text:000018FC ??0ICompressSetInStream@@QAE@XZ proc near
.text:000018FC                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+3Dp
.text:000018FC
.text:000018FC var_4           = dword ptr -4
.text:000018FC
.text:000018FC                 push    ebp
.text:000018FD                 mov     ebp, esp
.text:000018FF                 push    ecx
.text:00001900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001907                 mov     [ebp+var_4], ecx
.text:0000190A                 mov     ecx, [ebp+var_4]
.text:0000190D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001912                 mov     eax, [ebp+var_4]
.text:00001915                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:0000191B                 mov     eax, [ebp+var_4]
.text:0000191E                 add     esp, 4
.text:00001921                 cmp     ebp, esp
.text:00001923                 call    __RTC_CheckEsp
.text:00001928                 mov     esp, ebp
.text:0000192A                 pop     ebp
.text:0000192B                 retn
.text:0000192B ??0ICompressSetInStream@@QAE@XZ endp
.text:0000192B
.text:0000192B _text           ends
.text:0000192B
.rdata:0000192C ; ===========================================================================
.rdata:0000192C
.rdata:0000192C ; Segment type: Pure data
.rdata:0000192C ; Segment permissions: Read
.rdata:0000192C _rdata          segment dword public 'DATA' use32
.rdata:0000192C                 assume cs:_rdata
.rdata:0000192C                 ;org 192Ch
.rdata:0000192C ; COMDAT (pick largest)
.rdata:0000192C                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00001930                 public ??_7ICompressSetInStream@@6B@
.rdata:00001930 ; const ICompressSetInStream::`vftable'
.rdata:00001930 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00001930                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00001934                 dd offset __purecall
.rdata:00001938                 dd offset __purecall
.rdata:0000193C                 dd offset __purecall
.rdata:00001940                 dd offset __purecall
.rdata:00001940 _rdata          ends
.rdata:00001940
.rdata$r:00001944 ; ===========================================================================
.rdata$r:00001944
.rdata$r:00001944 ; Segment type: Pure data
.rdata$r:00001944 ; Segment permissions: Read
.rdata$r:00001944 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001944                 assume cs:_rdata$r
.rdata$r:00001944                 ;org 1944h
.rdata$r:00001944 ; COMDAT (pick any)
.rdata$r:00001944                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00001944 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00001944 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:0000192Co
.rdata$r:00001945                 db    0
.rdata$r:00001946                 db    0
.rdata$r:00001947                 db    0
.rdata$r:00001948                 db    0
.rdata$r:00001949                 db    0
.rdata$r:0000194A                 db    0
.rdata$r:0000194B                 db    0
.rdata$r:0000194C                 db    0
.rdata$r:0000194D                 db    0
.rdata$r:0000194E                 db    0
.rdata$r:0000194F                 db    0
.rdata$r:00001950                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001954                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001954 _rdata$r        ends
.rdata$r:00001954
.text:00001958 ; ===========================================================================
.text:00001958
.text:00001958 ; Segment type: Pure code
.text:00001958 ; Segment permissions: Read/Execute
.text:00001958 _text           segment para public 'CODE' use32
.text:00001958                 assume cs:_text
.text:00001958                 ;org 1958h
.text:00001958 ; COMDAT (pick any)
.text:00001958                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001958
.text:00001958 ; =============== S U B R O U T I N E =======================================
.text:00001958
.text:00001958 ; Attributes: bp-based frame
.text:00001958
.text:00001958 ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00001958                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00001958 ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00001958                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+48p
.text:00001958
.text:00001958 var_4           = dword ptr -4
.text:00001958
.text:00001958                 push    ebp
.text:00001959                 mov     ebp, esp
.text:0000195B                 push    ecx
.text:0000195C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001963                 mov     [ebp+var_4], ecx
.text:00001966                 mov     ecx, [ebp+var_4]
.text:00001969                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000196E                 mov     eax, [ebp+var_4]
.text:00001971                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00001977                 mov     eax, [ebp+var_4]
.text:0000197A                 add     esp, 4
.text:0000197D                 cmp     ebp, esp
.text:0000197F                 call    __RTC_CheckEsp
.text:00001984                 mov     esp, ebp
.text:00001986                 pop     ebp
.text:00001987                 retn
.text:00001987 ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00001987
.text:00001987 _text           ends
.text:00001987
.rdata:00001988 ; ===========================================================================
.rdata:00001988
.rdata:00001988 ; Segment type: Pure data
.rdata:00001988 ; Segment permissions: Read
.rdata:00001988 _rdata          segment dword public 'DATA' use32
.rdata:00001988                 assume cs:_rdata
.rdata:00001988                 ;org 1988h
.rdata:00001988 ; COMDAT (pick largest)
.rdata:00001988                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:0000198C                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:0000198C ; const ICompressSetOutStreamSize::`vftable'
.rdata:0000198C ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:0000198C                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00001990                 dd offset __purecall
.rdata:00001994                 dd offset __purecall
.rdata:00001998                 dd offset __purecall
.rdata:00001998 _rdata          ends
.rdata:00001998
.rdata$r:0000199C ; ===========================================================================
.rdata$r:0000199C
.rdata$r:0000199C ; Segment type: Pure data
.rdata$r:0000199C ; Segment permissions: Read
.rdata$r:0000199C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000199C                 assume cs:_rdata$r
.rdata$r:0000199C                 ;org 199Ch
.rdata$r:0000199C ; COMDAT (pick any)
.rdata$r:0000199C                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:0000199C ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:0000199C ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00001988o
.rdata$r:0000199D                 db    0
.rdata$r:0000199E                 db    0
.rdata$r:0000199F                 db    0
.rdata$r:000019A0                 db    0
.rdata$r:000019A1                 db    0
.rdata$r:000019A2                 db    0
.rdata$r:000019A3                 db    0
.rdata$r:000019A4                 db    0
.rdata$r:000019A5                 db    0
.rdata$r:000019A6                 db    0
.rdata$r:000019A7                 db    0
.rdata$r:000019A8                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000019AC                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019AC _rdata$r        ends
.rdata$r:000019AC
.text:000019B0 ; ===========================================================================
.text:000019B0
.text:000019B0 ; Segment type: Pure code
.text:000019B0 ; Segment permissions: Read/Execute
.text:000019B0 _text           segment para public 'CODE' use32
.text:000019B0                 assume cs:_text
.text:000019B0                 ;org 19B0h
.text:000019B0 ; COMDAT (pick any)
.text:000019B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019B0
.text:000019B0 ; =============== S U B R O U T I N E =======================================
.text:000019B0
.text:000019B0 ; Attributes: bp-based frame
.text:000019B0
.text:000019B0 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000019B0                 public ??0ISequentialInStream@@QAE@XZ
.text:000019B0 ??0ISequentialInStream@@QAE@XZ proc near
.text:000019B0                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+53p
.text:000019B0
.text:000019B0 var_4           = dword ptr -4
.text:000019B0
.text:000019B0                 push    ebp
.text:000019B1                 mov     ebp, esp
.text:000019B3                 push    ecx
.text:000019B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019BB                 mov     [ebp+var_4], ecx
.text:000019BE                 mov     ecx, [ebp+var_4]
.text:000019C1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000019C6                 mov     eax, [ebp+var_4]
.text:000019C9                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000019CF                 mov     eax, [ebp+var_4]
.text:000019D2                 add     esp, 4
.text:000019D5                 cmp     ebp, esp
.text:000019D7                 call    __RTC_CheckEsp
.text:000019DC                 mov     esp, ebp
.text:000019DE                 pop     ebp
.text:000019DF                 retn
.text:000019DF ??0ISequentialInStream@@QAE@XZ endp
.text:000019DF
.text:000019DF _text           ends
.text:000019DF
.rdata:000019E0 ; ===========================================================================
.rdata:000019E0
.rdata:000019E0 ; Segment type: Pure data
.rdata:000019E0 ; Segment permissions: Read
.rdata:000019E0 _rdata          segment dword public 'DATA' use32
.rdata:000019E0                 assume cs:_rdata
.rdata:000019E0                 ;org 19E0h
.rdata:000019E0 ; COMDAT (pick largest)
.rdata:000019E0                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000019E4                 public ??_7ISequentialInStream@@6B@
.rdata:000019E4 ; const ISequentialInStream::`vftable'
.rdata:000019E4 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000019E4                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000019E8                 dd offset __purecall
.rdata:000019EC                 dd offset __purecall
.rdata:000019F0                 dd offset __purecall
.rdata:000019F0 _rdata          ends
.rdata:000019F0
.rdata$r:000019F4 ; ===========================================================================
.rdata$r:000019F4
.rdata$r:000019F4 ; Segment type: Pure data
.rdata$r:000019F4 ; Segment permissions: Read
.rdata$r:000019F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019F4                 assume cs:_rdata$r
.rdata$r:000019F4                 ;org 19F4h
.rdata$r:000019F4 ; COMDAT (pick any)
.rdata$r:000019F4                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000019F4 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000019F4 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000019E0o
.rdata$r:000019F5                 db    0
.rdata$r:000019F6                 db    0
.rdata$r:000019F7                 db    0
.rdata$r:000019F8                 db    0
.rdata$r:000019F9                 db    0
.rdata$r:000019FA                 db    0
.rdata$r:000019FB                 db    0
.rdata$r:000019FC                 db    0
.rdata$r:000019FD                 db    0
.rdata$r:000019FE                 db    0
.rdata$r:000019FF                 db    0
.rdata$r:00001A00                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001A04                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A04 _rdata$r        ends
.rdata$r:00001A04
.text:00001A08 ; ===========================================================================
.text:00001A08
.text:00001A08 ; Segment type: Pure code
.text:00001A08 ; Segment permissions: Read/Execute
.text:00001A08 _text           segment para public 'CODE' use32
.text:00001A08                 assume cs:_text
.text:00001A08                 ;org 1A08h
.text:00001A08 ; COMDAT (pick any)
.text:00001A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A08
.text:00001A08 ; =============== S U B R O U T I N E =======================================
.text:00001A08
.text:00001A08 ; Attributes: bp-based frame
.text:00001A08
.text:00001A08 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001A08                 public ??0IUnknown@@QAE@XZ
.text:00001A08 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00001A08                                         ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+11p ...
.text:00001A08
.text:00001A08 var_4           = dword ptr -4
.text:00001A08
.text:00001A08                 push    ebp
.text:00001A09                 mov     ebp, esp
.text:00001A0B                 push    ecx
.text:00001A0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A13                 mov     [ebp+var_4], ecx
.text:00001A16                 mov     eax, [ebp+var_4]
.text:00001A19                 mov     esp, ebp
.text:00001A1B                 pop     ebp
.text:00001A1C                 retn
.text:00001A1C ??0IUnknown@@QAE@XZ endp
.text:00001A1C
.text:00001A1C ; ---------------------------------------------------------------------------
.text:00001A1D                 align 10h
.text:00001A1D _text           ends
.text:00001A1D
.text:00001A20 ; ===========================================================================
.text:00001A20
.text:00001A20 ; Segment type: Pure code
.text:00001A20 ; Segment permissions: Read/Execute
.text:00001A20 _text           segment para public 'CODE' use32
.text:00001A20                 assume cs:_text
.text:00001A20                 ;org 1A20h
.text:00001A20 ; COMDAT (pick any)
.text:00001A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A20
.text:00001A20 ; =============== S U B R O U T I N E =======================================
.text:00001A20
.text:00001A20 ; Attributes: bp-based frame
.text:00001A20
.text:00001A20 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00001A20                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001A20 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001A20                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+AEp
.text:00001A20
.text:00001A20 var_4           = dword ptr -4
.text:00001A20
.text:00001A20                 push    ebp
.text:00001A21                 mov     ebp, esp
.text:00001A23                 push    ecx
.text:00001A24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A2B                 mov     [ebp+var_4], ecx
.text:00001A2E                 mov     eax, [ebp+var_4]
.text:00001A31                 mov     dword ptr [eax], 0
.text:00001A37                 mov     eax, [ebp+var_4]
.text:00001A3A                 mov     esp, ebp
.text:00001A3C                 pop     ebp
.text:00001A3D                 retn
.text:00001A3D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00001A3D
.text:00001A3D ; ---------------------------------------------------------------------------
.text:00001A3E                 align 10h
.text:00001A3E _text           ends
.text:00001A3E
.text:00001A40 ; ===========================================================================
.text:00001A40
.text:00001A40 ; Segment type: Pure code
.text:00001A40 ; Segment permissions: Read/Execute
.text:00001A40 _text           segment para public 'CODE' use32
.text:00001A40                 assume cs:_text
.text:00001A40                 ;org 1A40h
.text:00001A40 ; COMDAT (pick any)
.text:00001A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A40
.text:00001A40 ; =============== S U B R O U T I N E =======================================
.text:00001A40
.text:00001A40 ; Attributes: bp-based frame
.text:00001A40
.text:00001A40 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00001A40                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001A40 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001A40                                         ; CODE XREF: NCompress::NLzma::CDecoder::~CDecoder(void)+76p
.text:00001A40
.text:00001A40 var_4           = dword ptr -4
.text:00001A40
.text:00001A40                 push    ebp
.text:00001A41                 mov     ebp, esp
.text:00001A43                 push    ecx
.text:00001A44                 push    esi
.text:00001A45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A4C                 mov     [ebp+var_4], ecx
.text:00001A4F                 mov     eax, [ebp+var_4]
.text:00001A52                 cmp     dword ptr [eax], 0
.text:00001A55                 jz      short loc_1A72
.text:00001A57                 mov     ecx, [ebp+var_4]
.text:00001A5A                 mov     edx, [ecx]
.text:00001A5C                 mov     eax, [ebp+var_4]
.text:00001A5F                 mov     ecx, [eax]
.text:00001A61                 mov     edx, [edx]
.text:00001A63                 mov     esi, esp
.text:00001A65                 push    ecx
.text:00001A66                 mov     eax, [edx+8]
.text:00001A69                 call    eax
.text:00001A6B                 cmp     esi, esp
.text:00001A6D                 call    __RTC_CheckEsp
.text:00001A72
.text:00001A72 loc_1A72:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00001A72                 pop     esi
.text:00001A73                 add     esp, 4
.text:00001A76                 cmp     ebp, esp
.text:00001A78                 call    __RTC_CheckEsp
.text:00001A7D                 mov     esp, ebp
.text:00001A7F                 pop     ebp
.text:00001A80                 retn
.text:00001A80 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00001A80
.text:00001A80 ; ---------------------------------------------------------------------------
.text:00001A81                 align 4
.text:00001A81 _text           ends
.text:00001A81
.text:00001A84 ; ===========================================================================
.text:00001A84
.text:00001A84 ; Segment type: Pure code
.text:00001A84 ; Segment permissions: Read/Execute
.text:00001A84 _text           segment para public 'CODE' use32
.text:00001A84                 assume cs:_text
.text:00001A84                 ;org 1A84h
.text:00001A84 ; COMDAT (pick any)
.text:00001A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A84
.text:00001A84 ; =============== S U B R O U T I N E =======================================
.text:00001A84
.text:00001A84 ; Attributes: bp-based frame
.text:00001A84
.text:00001A84 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00001A84                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00001A84 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00001A84                                         ; CODE XREF: NCompress::NLzma::CDecoder::ReleaseInStream(void)+9p
.text:00001A84
.text:00001A84 var_4           = dword ptr -4
.text:00001A84
.text:00001A84                 push    ebp
.text:00001A85                 mov     ebp, esp
.text:00001A87                 push    ecx
.text:00001A88                 push    esi
.text:00001A89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A90                 mov     [ebp+var_4], ecx
.text:00001A93                 mov     eax, [ebp+var_4]
.text:00001A96                 cmp     dword ptr [eax], 0
.text:00001A99                 jz      short loc_1ABF
.text:00001A9B                 mov     ecx, [ebp+var_4]
.text:00001A9E                 mov     edx, [ecx]
.text:00001AA0                 mov     eax, [ebp+var_4]
.text:00001AA3                 mov     ecx, [eax]
.text:00001AA5                 mov     edx, [edx]
.text:00001AA7                 mov     esi, esp
.text:00001AA9                 push    ecx
.text:00001AAA                 mov     eax, [edx+8]
.text:00001AAD                 call    eax
.text:00001AAF                 cmp     esi, esp
.text:00001AB1                 call    __RTC_CheckEsp
.text:00001AB6                 mov     ecx, [ebp+var_4]
.text:00001AB9                 mov     dword ptr [ecx], 0
.text:00001ABF
.text:00001ABF loc_1ABF:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00001ABF                 pop     esi
.text:00001AC0                 add     esp, 4
.text:00001AC3                 cmp     ebp, esp
.text:00001AC5                 call    __RTC_CheckEsp
.text:00001ACA                 mov     esp, ebp
.text:00001ACC                 pop     ebp
.text:00001ACD                 retn
.text:00001ACD ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00001ACD
.text:00001ACD ; ---------------------------------------------------------------------------
.text:00001ACE                 align 10h
.text:00001ACE _text           ends
.text:00001ACE
.text:00001AD0 ; ===========================================================================
.text:00001AD0
.text:00001AD0 ; Segment type: Pure code
.text:00001AD0 ; Segment permissions: Read/Execute
.text:00001AD0 _text           segment para public 'CODE' use32
.text:00001AD0                 assume cs:_text
.text:00001AD0                 ;org 1AD0h
.text:00001AD0 ; COMDAT (pick any)
.text:00001AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AD0
.text:00001AD0 ; =============== S U B R O U T I N E =======================================
.text:00001AD0
.text:00001AD0 ; Attributes: bp-based frame
.text:00001AD0
.text:00001AD0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00001AD0                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00001AD0 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00001AD0                                         ; CODE XREF: NCompress::NLzma::CDecoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+28p
.text:00001AD0
.text:00001AD0 var_4           = dword ptr -4
.text:00001AD0
.text:00001AD0                 push    ebp
.text:00001AD1                 mov     ebp, esp
.text:00001AD3                 push    ecx
.text:00001AD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ADB                 mov     [ebp+var_4], ecx
.text:00001ADE                 mov     eax, [ebp+var_4]
.text:00001AE1                 mov     eax, [eax]
.text:00001AE3                 mov     esp, ebp
.text:00001AE5                 pop     ebp
.text:00001AE6                 retn
.text:00001AE6 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00001AE6
.text:00001AE6 ; ---------------------------------------------------------------------------
.text:00001AE7                 align 4
.text:00001AE7 _text           ends
.text:00001AE7
.text:00001AE8 ; ===========================================================================
.text:00001AE8
.text:00001AE8 ; Segment type: Pure code
.text:00001AE8 ; Segment permissions: Read/Execute
.text:00001AE8 _text           segment para public 'CODE' use32
.text:00001AE8                 assume cs:_text
.text:00001AE8                 ;org 1AE8h
.text:00001AE8 ; COMDAT (pick any)
.text:00001AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AE8
.text:00001AE8 ; =============== S U B R O U T I N E =======================================
.text:00001AE8
.text:00001AE8 ; Attributes: bp-based frame
.text:00001AE8
.text:00001AE8 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:00001AE8                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00001AE8 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00001AE8                                         ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+4Ep
.text:00001AE8                                         ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+78p
.text:00001AE8
.text:00001AE8 var_4           = dword ptr -4
.text:00001AE8
.text:00001AE8                 push    ebp
.text:00001AE9                 mov     ebp, esp
.text:00001AEB                 push    ecx
.text:00001AEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AF3                 mov     [ebp+var_4], ecx
.text:00001AF6                 mov     eax, [ebp+var_4]
.text:00001AF9                 mov     eax, [eax]
.text:00001AFB                 mov     esp, ebp
.text:00001AFD                 pop     ebp
.text:00001AFE                 retn
.text:00001AFE ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00001AFE
.text:00001AFE ; ---------------------------------------------------------------------------
.text:00001AFF                 align 10h
.text:00001AFF _text           ends
.text:00001AFF
.text:00001B00 ; ===========================================================================
.text:00001B00
.text:00001B00 ; Segment type: Pure code
.text:00001B00 ; Segment permissions: Read/Execute
.text:00001B00 _text           segment para public 'CODE' use32
.text:00001B00                 assume cs:_text
.text:00001B00                 ;org 1B00h
.text:00001B00 ; COMDAT (pick any)
.text:00001B00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B00
.text:00001B00 ; =============== S U B R O U T I N E =======================================
.text:00001B00
.text:00001B00 ; Attributes: bp-based frame
.text:00001B00
.text:00001B00 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00001B00                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00001B00 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00001B00                                         ; CODE XREF: NCompress::NLzma::CDecoder::SetInStream(ISequentialInStream *)+Dp
.text:00001B00
.text:00001B00 var_4           = dword ptr -4
.text:00001B00 arg_0           = dword ptr  8
.text:00001B00
.text:00001B00                 push    ebp
.text:00001B01                 mov     ebp, esp
.text:00001B03                 push    ecx
.text:00001B04                 push    esi
.text:00001B05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B0C                 mov     [ebp+var_4], ecx
.text:00001B0F                 cmp     [ebp+arg_0], 0
.text:00001B13                 jz      short loc_1B2C
.text:00001B15                 mov     eax, [ebp+arg_0]
.text:00001B18                 mov     ecx, [eax]
.text:00001B1A                 mov     esi, esp
.text:00001B1C                 mov     edx, [ebp+arg_0]
.text:00001B1F                 push    edx
.text:00001B20                 mov     eax, [ecx+4]
.text:00001B23                 call    eax
.text:00001B25                 cmp     esi, esp
.text:00001B27                 call    __RTC_CheckEsp
.text:00001B2C
.text:00001B2C loc_1B2C:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00001B2C                 mov     ecx, [ebp+var_4]
.text:00001B2F                 cmp     dword ptr [ecx], 0
.text:00001B32                 jz      short loc_1B4F
.text:00001B34                 mov     edx, [ebp+var_4]
.text:00001B37                 mov     eax, [edx]
.text:00001B39                 mov     ecx, [ebp+var_4]
.text:00001B3C                 mov     edx, [ecx]
.text:00001B3E                 mov     eax, [eax]
.text:00001B40                 mov     esi, esp
.text:00001B42                 push    edx
.text:00001B43                 mov     ecx, [eax+8]
.text:00001B46                 call    ecx
.text:00001B48                 cmp     esi, esp
.text:00001B4A                 call    __RTC_CheckEsp
.text:00001B4F
.text:00001B4F loc_1B4F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00001B4F                 mov     edx, [ebp+var_4]
.text:00001B52                 mov     eax, [ebp+arg_0]
.text:00001B55                 mov     [edx], eax
.text:00001B57                 mov     eax, [ebp+arg_0]
.text:00001B5A                 pop     esi
.text:00001B5B                 add     esp, 4
.text:00001B5E                 cmp     ebp, esp
.text:00001B60                 call    __RTC_CheckEsp
.text:00001B65                 mov     esp, ebp
.text:00001B67                 pop     ebp
.text:00001B68                 retn    4
.text:00001B68 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00001B68
.text:00001B68 ; ---------------------------------------------------------------------------
.text:00001B6B                 align 4
.text:00001B6B _text           ends
.text:00001B6B
.text:00001B6C ; ===========================================================================
.text:00001B6C
.text:00001B6C ; Segment type: Pure code
.text:00001B6C ; Segment permissions: Read/Execute
.text:00001B6C _text           segment para public 'CODE' use32
.text:00001B6C                 assume cs:_text
.text:00001B6C                 ;org 1B6Ch
.text:00001B6C ; COMDAT (pick any)
.text:00001B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B6C
.text:00001B6C ; =============== S U B R O U T I N E =======================================
.text:00001B6C
.text:00001B6C
.text:00001B6C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{16}' (void)
.text:00001B6C                 public ?Release@CDecoder@NLzma@NCompress@@WBA@AGKXZ
.text:00001B6C ?Release@CDecoder@NLzma@NCompress@@WBA@AGKXZ proc near
.text:00001B6C                                         ; DATA XREF: .rdata:00000E2Co
.text:00001B6C
.text:00001B6C arg_0           = dword ptr  4
.text:00001B6C
.text:00001B6C                 sub     [esp+arg_0], 10h
.text:00001B71                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001B71 ?Release@CDecoder@NLzma@NCompress@@WBA@AGKXZ endp
.text:00001B71
.text:00001B71 ; ---------------------------------------------------------------------------
.text:00001B76                 align 4
.text:00001B76 _text           ends
.text:00001B76
.text:00001B78 ; ===========================================================================
.text:00001B78
.text:00001B78 ; Segment type: Pure code
.text:00001B78 ; Segment permissions: Read/Execute
.text:00001B78 _text           segment para public 'CODE' use32
.text:00001B78                 assume cs:_text
.text:00001B78                 ;org 1B78h
.text:00001B78 ; COMDAT (pick any)
.text:00001B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B78
.text:00001B78 ; =============== S U B R O U T I N E =======================================
.text:00001B78
.text:00001B78
.text:00001B78 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{8}' (void)
.text:00001B78                 public ?AddRef@CDecoder@NLzma@NCompress@@W7AGKXZ
.text:00001B78 ?AddRef@CDecoder@NLzma@NCompress@@W7AGKXZ proc near
.text:00001B78                                         ; DATA XREF: .rdata:00000E58o
.text:00001B78
.text:00001B78 arg_0           = dword ptr  4
.text:00001B78
.text:00001B78                 sub     [esp+arg_0], 8
.text:00001B7D                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001B7D ?AddRef@CDecoder@NLzma@NCompress@@W7AGKXZ endp
.text:00001B7D
.text:00001B7D ; ---------------------------------------------------------------------------
.text:00001B82                 align 4
.text:00001B82 _text           ends
.text:00001B82
.text:00001B84 ; ===========================================================================
.text:00001B84
.text:00001B84 ; Segment type: Pure code
.text:00001B84 ; Segment permissions: Read/Execute
.text:00001B84 _text           segment para public 'CODE' use32
.text:00001B84                 assume cs:_text
.text:00001B84                 ;org 1B84h
.text:00001B84 ; COMDAT (pick any)
.text:00001B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B84
.text:00001B84 ; =============== S U B R O U T I N E =======================================
.text:00001B84
.text:00001B84
.text:00001B84 ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001B84                 public ?QueryInterface@CDecoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00001B84 ?QueryInterface@CDecoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001B84                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:00001B84
.text:00001B84 arg_0           = dword ptr  4
.text:00001B84
.text:00001B84                 sub     [esp+arg_0], 4
.text:00001B89                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001B89 ?QueryInterface@CDecoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001B89
.text:00001B89 ; ---------------------------------------------------------------------------
.text:00001B8E                 align 10h
.text:00001B8E _text           ends
.text:00001B8E
.text:00001B90 ; ===========================================================================
.text:00001B90
.text:00001B90 ; Segment type: Pure code
.text:00001B90 ; Segment permissions: Read/Execute
.text:00001B90 _text           segment para public 'CODE' use32
.text:00001B90                 assume cs:_text
.text:00001B90                 ;org 1B90h
.text:00001B90 ; COMDAT (pick any)
.text:00001B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B90
.text:00001B90 ; =============== S U B R O U T I N E =======================================
.text:00001B90
.text:00001B90
.text:00001B90 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{20}' (void)
.text:00001B90                 public ?Release@CDecoder@NLzma@NCompress@@WBE@AGKXZ
.text:00001B90 ?Release@CDecoder@NLzma@NCompress@@WBE@AGKXZ proc near
.text:00001B90                                         ; DATA XREF: .rdata:00000E18o
.text:00001B90
.text:00001B90 arg_0           = dword ptr  4
.text:00001B90
.text:00001B90                 sub     [esp+arg_0], 14h
.text:00001B95                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001B95 ?Release@CDecoder@NLzma@NCompress@@WBE@AGKXZ endp
.text:00001B95
.text:00001B95 ; ---------------------------------------------------------------------------
.text:00001B9A                 align 4
.text:00001B9A _text           ends
.text:00001B9A
.text:00001B9C ; ===========================================================================
.text:00001B9C
.text:00001B9C ; Segment type: Pure code
.text:00001B9C ; Segment permissions: Read/Execute
.text:00001B9C _text           segment para public 'CODE' use32
.text:00001B9C                 assume cs:_text
.text:00001B9C                 ;org 1B9Ch
.text:00001B9C ; COMDAT (pick any)
.text:00001B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B9C
.text:00001B9C ; =============== S U B R O U T I N E =======================================
.text:00001B9C
.text:00001B9C
.text:00001B9C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{12}' (void)
.text:00001B9C                 public ?AddRef@CDecoder@NLzma@NCompress@@WM@AGKXZ
.text:00001B9C ?AddRef@CDecoder@NLzma@NCompress@@WM@AGKXZ proc near
.text:00001B9C                                         ; DATA XREF: .rdata:00000E40o
.text:00001B9C
.text:00001B9C arg_0           = dword ptr  4
.text:00001B9C
.text:00001B9C                 sub     [esp+arg_0], 0Ch
.text:00001BA1                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001BA1 ?AddRef@CDecoder@NLzma@NCompress@@WM@AGKXZ endp
.text:00001BA1
.text:00001BA1 ; ---------------------------------------------------------------------------
.text:00001BA6                 align 4
.text:00001BA6 _text           ends
.text:00001BA6
.text:00001BA8 ; ===========================================================================
.text:00001BA8
.text:00001BA8 ; Segment type: Pure code
.text:00001BA8 ; Segment permissions: Read/Execute
.text:00001BA8 _text           segment para public 'CODE' use32
.text:00001BA8                 assume cs:_text
.text:00001BA8                 ;org 1BA8h
.text:00001BA8 ; COMDAT (pick any)
.text:00001BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BA8
.text:00001BA8 ; =============== S U B R O U T I N E =======================================
.text:00001BA8
.text:00001BA8
.text:00001BA8 ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001BA8                 public ?QueryInterface@CDecoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001BA8 ?QueryInterface@CDecoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001BA8                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetFinishMode'}o
.text:00001BA8
.text:00001BA8 arg_0           = dword ptr  4
.text:00001BA8
.text:00001BA8                 sub     [esp+arg_0], 8
.text:00001BAD                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001BAD ?QueryInterface@CDecoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001BAD
.text:00001BAD ; ---------------------------------------------------------------------------
.text:00001BB2                 align 4
.text:00001BB2 _text           ends
.text:00001BB2
.text:00001BB4 ; ===========================================================================
.text:00001BB4
.text:00001BB4 ; Segment type: Pure code
.text:00001BB4 ; Segment permissions: Read/Execute
.text:00001BB4 _text           segment para public 'CODE' use32
.text:00001BB4                 assume cs:_text
.text:00001BB4                 ;org 1BB4h
.text:00001BB4 ; COMDAT (pick any)
.text:00001BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BB4
.text:00001BB4 ; =============== S U B R O U T I N E =======================================
.text:00001BB4
.text:00001BB4
.text:00001BB4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{24}' (void)
.text:00001BB4                 public ?Release@CDecoder@NLzma@NCompress@@WBI@AGKXZ
.text:00001BB4 ?Release@CDecoder@NLzma@NCompress@@WBI@AGKXZ proc near
.text:00001BB4                                         ; DATA XREF: .rdata:00000E04o
.text:00001BB4
.text:00001BB4 arg_0           = dword ptr  4
.text:00001BB4
.text:00001BB4                 sub     [esp+arg_0], 18h
.text:00001BB9                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001BB9 ?Release@CDecoder@NLzma@NCompress@@WBI@AGKXZ endp
.text:00001BB9
.text:00001BB9 ; ---------------------------------------------------------------------------
.text:00001BBE                 align 10h
.text:00001BBE _text           ends
.text:00001BBE
.text:00001BC0 ; ===========================================================================
.text:00001BC0
.text:00001BC0 ; Segment type: Pure code
.text:00001BC0 ; Segment permissions: Read/Execute
.text:00001BC0 _text           segment para public 'CODE' use32
.text:00001BC0                 assume cs:_text
.text:00001BC0                 ;org 1BC0h
.text:00001BC0 ; COMDAT (pick any)
.text:00001BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BC0
.text:00001BC0 ; =============== S U B R O U T I N E =======================================
.text:00001BC0
.text:00001BC0
.text:00001BC0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{16}' (void)
.text:00001BC0                 public ?AddRef@CDecoder@NLzma@NCompress@@WBA@AGKXZ
.text:00001BC0 ?AddRef@CDecoder@NLzma@NCompress@@WBA@AGKXZ proc near
.text:00001BC0                                         ; DATA XREF: .rdata:00000E28o
.text:00001BC0
.text:00001BC0 arg_0           = dword ptr  4
.text:00001BC0
.text:00001BC0                 sub     [esp+arg_0], 10h
.text:00001BC5                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001BC5 ?AddRef@CDecoder@NLzma@NCompress@@WBA@AGKXZ endp
.text:00001BC5
.text:00001BC5 ; ---------------------------------------------------------------------------
.text:00001BCA                 align 4
.text:00001BCA _text           ends
.text:00001BCA
.text:00001BCC ; ===========================================================================
.text:00001BCC
.text:00001BCC ; Segment type: Pure code
.text:00001BCC ; Segment permissions: Read/Execute
.text:00001BCC _text           segment para public 'CODE' use32
.text:00001BCC                 assume cs:_text
.text:00001BCC                 ;org 1BCCh
.text:00001BCC ; COMDAT (pick any)
.text:00001BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BCC
.text:00001BCC ; =============== S U B R O U T I N E =======================================
.text:00001BCC
.text:00001BCC
.text:00001BCC ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001BCC                 public ?QueryInterface@CDecoder@NLzma@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001BCC ?QueryInterface@CDecoder@NLzma@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001BCC                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetBufSize'}o
.text:00001BCC
.text:00001BCC arg_0           = dword ptr  4
.text:00001BCC
.text:00001BCC                 sub     [esp+arg_0], 0Ch
.text:00001BD1                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001BD1 ?QueryInterface@CDecoder@NLzma@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001BD1
.text:00001BD1 ; ---------------------------------------------------------------------------
.text:00001BD6                 align 4
.text:00001BD6 _text           ends
.text:00001BD6
.text:00001BD8 ; ===========================================================================
.text:00001BD8
.text:00001BD8 ; Segment type: Pure code
.text:00001BD8 ; Segment permissions: Read/Execute
.text:00001BD8 _text           segment para public 'CODE' use32
.text:00001BD8                 assume cs:_text
.text:00001BD8                 ;org 1BD8h
.text:00001BD8 ; COMDAT (pick any)
.text:00001BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BD8
.text:00001BD8 ; =============== S U B R O U T I N E =======================================
.text:00001BD8
.text:00001BD8
.text:00001BD8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{20}' (void)
.text:00001BD8                 public ?AddRef@CDecoder@NLzma@NCompress@@WBE@AGKXZ
.text:00001BD8 ?AddRef@CDecoder@NLzma@NCompress@@WBE@AGKXZ proc near
.text:00001BD8                                         ; DATA XREF: .rdata:00000E14o
.text:00001BD8
.text:00001BD8 arg_0           = dword ptr  4
.text:00001BD8
.text:00001BD8                 sub     [esp+arg_0], 14h
.text:00001BDD                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001BDD ?AddRef@CDecoder@NLzma@NCompress@@WBE@AGKXZ endp
.text:00001BDD
.text:00001BDD ; ---------------------------------------------------------------------------
.text:00001BE2                 align 4
.text:00001BE2 _text           ends
.text:00001BE2
.text:00001BE4 ; ===========================================================================
.text:00001BE4
.text:00001BE4 ; Segment type: Pure code
.text:00001BE4 ; Segment permissions: Read/Execute
.text:00001BE4 _text           segment para public 'CODE' use32
.text:00001BE4                 assume cs:_text
.text:00001BE4                 ;org 1BE4h
.text:00001BE4 ; COMDAT (pick any)
.text:00001BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BE4
.text:00001BE4 ; =============== S U B R O U T I N E =======================================
.text:00001BE4
.text:00001BE4
.text:00001BE4 ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00001BE4                 public ?QueryInterface@CDecoder@NLzma@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00001BE4 ?QueryInterface@CDecoder@NLzma@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00001BE4                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetInStream'}o
.text:00001BE4
.text:00001BE4 arg_0           = dword ptr  4
.text:00001BE4
.text:00001BE4                 sub     [esp+arg_0], 10h
.text:00001BE9                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001BE9 ?QueryInterface@CDecoder@NLzma@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00001BE9
.text:00001BE9 ; ---------------------------------------------------------------------------
.text:00001BEE                 align 10h
.text:00001BEE _text           ends
.text:00001BEE
.text:00001BF0 ; ===========================================================================
.text:00001BF0
.text:00001BF0 ; Segment type: Pure code
.text:00001BF0 ; Segment permissions: Read/Execute
.text:00001BF0 _text           segment para public 'CODE' use32
.text:00001BF0                 assume cs:_text
.text:00001BF0                 ;org 1BF0h
.text:00001BF0 ; COMDAT (pick any)
.text:00001BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BF0
.text:00001BF0 ; =============== S U B R O U T I N E =======================================
.text:00001BF0
.text:00001BF0
.text:00001BF0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{24}' (void)
.text:00001BF0                 public ?AddRef@CDecoder@NLzma@NCompress@@WBI@AGKXZ
.text:00001BF0 ?AddRef@CDecoder@NLzma@NCompress@@WBI@AGKXZ proc near
.text:00001BF0                                         ; DATA XREF: .rdata:00000E00o
.text:00001BF0
.text:00001BF0 arg_0           = dword ptr  4
.text:00001BF0
.text:00001BF0                 sub     [esp+arg_0], 18h
.text:00001BF5                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001BF5 ?AddRef@CDecoder@NLzma@NCompress@@WBI@AGKXZ endp
.text:00001BF5
.text:00001BF5 ; ---------------------------------------------------------------------------
.text:00001BFA                 align 4
.text:00001BFA _text           ends
.text:00001BFA
.text:00001BFC ; ===========================================================================
.text:00001BFC
.text:00001BFC ; Segment type: Pure code
.text:00001BFC ; Segment permissions: Read/Execute
.text:00001BFC _text           segment para public 'CODE' use32
.text:00001BFC                 assume cs:_text
.text:00001BFC                 ;org 1BFCh
.text:00001BFC ; COMDAT (pick any)
.text:00001BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BFC
.text:00001BFC ; =============== S U B R O U T I N E =======================================
.text:00001BFC
.text:00001BFC
.text:00001BFC ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{20}' (struct _GUID const &, void * *)
.text:00001BFC                 public ?QueryInterface@CDecoder@NLzma@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z
.text:00001BFC ?QueryInterface@CDecoder@NLzma@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z proc near
.text:00001BFC                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00001BFC
.text:00001BFC arg_0           = dword ptr  4
.text:00001BFC
.text:00001BFC                 sub     [esp+arg_0], 14h
.text:00001C01                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001C01 ?QueryInterface@CDecoder@NLzma@NCompress@@WBE@AGJABU_GUID@@PAPAX@Z endp
.text:00001C01
.text:00001C01 ; ---------------------------------------------------------------------------
.text:00001C06                 align 4
.text:00001C06 _text           ends
.text:00001C06
.text:00001C08 ; ===========================================================================
.text:00001C08
.text:00001C08 ; Segment type: Pure code
.text:00001C08 ; Segment permissions: Read/Execute
.text:00001C08 _text           segment para public 'CODE' use32
.text:00001C08                 assume cs:_text
.text:00001C08                 ;org 1C08h
.text:00001C08 ; COMDAT (pick any)
.text:00001C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C08
.text:00001C08 ; =============== S U B R O U T I N E =======================================
.text:00001C08
.text:00001C08
.text:00001C08 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{4}' (void)
.text:00001C08                 public ?Release@CDecoder@NLzma@NCompress@@W3AGKXZ
.text:00001C08 ?Release@CDecoder@NLzma@NCompress@@W3AGKXZ proc near
.text:00001C08                                         ; DATA XREF: .rdata:00000E70o
.text:00001C08
.text:00001C08 arg_0           = dword ptr  4
.text:00001C08
.text:00001C08                 sub     [esp+arg_0], 4
.text:00001C0D                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001C0D ?Release@CDecoder@NLzma@NCompress@@W3AGKXZ endp
.text:00001C0D
.text:00001C0D ; ---------------------------------------------------------------------------
.text:00001C12                 align 4
.text:00001C12 _text           ends
.text:00001C12
.text:00001C14 ; ===========================================================================
.text:00001C14
.text:00001C14 ; Segment type: Pure code
.text:00001C14 ; Segment permissions: Read/Execute
.text:00001C14 _text           segment para public 'CODE' use32
.text:00001C14                 assume cs:_text
.text:00001C14                 ;org 1C14h
.text:00001C14 ; COMDAT (pick any)
.text:00001C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C14
.text:00001C14 ; =============== S U B R O U T I N E =======================================
.text:00001C14
.text:00001C14
.text:00001C14 ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CDecoder::QueryInterface`adjustor{24}' (struct _GUID const &, void * *)
.text:00001C14                 public ?QueryInterface@CDecoder@NLzma@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z
.text:00001C14 ?QueryInterface@CDecoder@NLzma@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z proc near
.text:00001C14                                         ; DATA XREF: .rdata:const NCompress::NLzma::CDecoder::`vftable'{for `ISequentialInStream'}o
.text:00001C14
.text:00001C14 arg_0           = dword ptr  4
.text:00001C14
.text:00001C14                 sub     [esp+arg_0], 18h
.text:00001C19                 jmp     ?QueryInterface@CDecoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001C19 ?QueryInterface@CDecoder@NLzma@NCompress@@WBI@AGJABU_GUID@@PAPAX@Z endp
.text:00001C19
.text:00001C19 ; ---------------------------------------------------------------------------
.text:00001C1E                 align 10h
.text:00001C1E _text           ends
.text:00001C1E
.text:00001C20 ; ===========================================================================
.text:00001C20
.text:00001C20 ; Segment type: Pure code
.text:00001C20 ; Segment permissions: Read/Execute
.text:00001C20 _text           segment para public 'CODE' use32
.text:00001C20                 assume cs:_text
.text:00001C20                 ;org 1C20h
.text:00001C20 ; COMDAT (pick any)
.text:00001C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C20
.text:00001C20 ; =============== S U B R O U T I N E =======================================
.text:00001C20
.text:00001C20
.text:00001C20 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{8}' (void)
.text:00001C20                 public ?Release@CDecoder@NLzma@NCompress@@W7AGKXZ
.text:00001C20 ?Release@CDecoder@NLzma@NCompress@@W7AGKXZ proc near
.text:00001C20                                         ; DATA XREF: .rdata:00000E5Co
.text:00001C20
.text:00001C20 arg_0           = dword ptr  4
.text:00001C20
.text:00001C20                 sub     [esp+arg_0], 8
.text:00001C25                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001C25 ?Release@CDecoder@NLzma@NCompress@@W7AGKXZ endp
.text:00001C25
.text:00001C25 ; ---------------------------------------------------------------------------
.text:00001C2A                 align 4
.text:00001C2A _text           ends
.text:00001C2A
.text:00001C2C ; ===========================================================================
.text:00001C2C
.text:00001C2C ; Segment type: Pure code
.text:00001C2C ; Segment permissions: Read/Execute
.text:00001C2C _text           segment para public 'CODE' use32
.text:00001C2C                 assume cs:_text
.text:00001C2C                 ;org 1C2Ch
.text:00001C2C ; COMDAT (pick any)
.text:00001C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C2C
.text:00001C2C ; =============== S U B R O U T I N E =======================================
.text:00001C2C
.text:00001C2C
.text:00001C2C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::Release`adjustor{12}' (void)
.text:00001C2C                 public ?Release@CDecoder@NLzma@NCompress@@WM@AGKXZ
.text:00001C2C ?Release@CDecoder@NLzma@NCompress@@WM@AGKXZ proc near
.text:00001C2C                                         ; DATA XREF: .rdata:00000E44o
.text:00001C2C
.text:00001C2C arg_0           = dword ptr  4
.text:00001C2C
.text:00001C2C                 sub     [esp+arg_0], 0Ch
.text:00001C31                 jmp     ?Release@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::Release(void)
.text:00001C31 ?Release@CDecoder@NLzma@NCompress@@WM@AGKXZ endp
.text:00001C31
.text:00001C31 ; ---------------------------------------------------------------------------
.text:00001C36                 align 4
.text:00001C36 _text           ends
.text:00001C36
.text:00001C38 ; ===========================================================================
.text:00001C38
.text:00001C38 ; Segment type: Pure code
.text:00001C38 ; Segment permissions: Read/Execute
.text:00001C38 _text           segment para public 'CODE' use32
.text:00001C38                 assume cs:_text
.text:00001C38                 ;org 1C38h
.text:00001C38 ; COMDAT (pick any)
.text:00001C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C38
.text:00001C38 ; =============== S U B R O U T I N E =======================================
.text:00001C38
.text:00001C38
.text:00001C38 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CDecoder::AddRef`adjustor{4}' (void)
.text:00001C38                 public ?AddRef@CDecoder@NLzma@NCompress@@W3AGKXZ
.text:00001C38 ?AddRef@CDecoder@NLzma@NCompress@@W3AGKXZ proc near
.text:00001C38                                         ; DATA XREF: .rdata:00000E6Co
.text:00001C38
.text:00001C38 arg_0           = dword ptr  4
.text:00001C38
.text:00001C38                 sub     [esp+arg_0], 4
.text:00001C3D                 jmp     ?AddRef@CDecoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CDecoder::AddRef(void)
.text:00001C3D ?AddRef@CDecoder@NLzma@NCompress@@W3AGKXZ endp
.text:00001C3D
.text:00001C3D _text           ends
.text:00001C3D
UNDEF:00001C50 ; ===========================================================================
UNDEF:00001C50
UNDEF:00001C50 ; Segment type: Externs
UNDEF:00001C50 ; UNDEF
UNDEF:00001C50                 extrn __RTC_CheckEsp:near
UNDEF:00001C50                                         ; CODE XREF: NCompress::NLzma::CDecoder::CDecoder(void)+146p
UNDEF:00001C50                                         ; NCompress::NLzma::CDecoder::~CDecoder(void)+80p ...
UNDEF:00001C54                 extrn __RTC_Shutdown:near
UNDEF:00001C54                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001C58                 extrn __RTC_InitBase:near
UNDEF:00001C58                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001C5C ; const type_info::`vftable'
UNDEF:00001C5C                 extrn ??_7type_info@@6B@:near
UNDEF:00001C5C                                         ; DATA XREF: .data:NCompress::NLzma::CDecoder `RTTI Type Descriptor'o
UNDEF:00001C5C                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001C60 ; public: virtual void * __thiscall NCompress::NLzma::CDecoder::`scalar deleting destructor'(unsigned int)
UNDEF:00001C60                 extrn ??_GCDecoder@NLzma@NCompress@@UAEPAXI@Z_0:near
UNDEF:00001C64 ; public: virtual void * __thiscall NCompress::NLzma::CDecoder::`vector deleting destructor'(unsigned int)
UNDEF:00001C64                 extrn ??_ECDecoder@NLzma@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00001C64                                         ; DATA XREF: .rdata:00000E8Co
UNDEF:00001C68                 extrn _IID_ISequentialInStream:near
UNDEF:00001C68                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_1605o
UNDEF:00001C6C                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00001C6C                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_15D1o
UNDEF:00001C70                 extrn _IID_ICompressSetInStream:near
UNDEF:00001C70                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_159Do
UNDEF:00001C74                 extrn _IID_ICompressSetBufSize:near
UNDEF:00001C74                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_1566o
UNDEF:00001C78                 extrn _IID_ICompressSetFinishMode:near
UNDEF:00001C78                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_152Fo
UNDEF:00001C7C                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00001C7C                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_14F8o
UNDEF:00001C80                 extrn _IID_ICompressCoder:near
UNDEF:00001C80                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *):loc_14D9o
UNDEF:00001C84 ; const IID IID_IUnknown
UNDEF:00001C84                 extrn _IID_IUnknown:near
UNDEF:00001C84                                         ; DATA XREF: NCompress::NLzma::CDecoder::QueryInterface(_GUID const &,void * *)+26o
UNDEF:00001C88 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001C88                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001C8C ; void __cdecl operator delete(void *)
UNDEF:00001C8C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NLzma::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:00001C90                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001C90                                         ; .rdata:000017D0o ...
UNDEF:00001C94 ; __stdcall MyFree(x)
UNDEF:00001C94                 extrn _MyFree@4:near    ; CODE XREF: NCompress::NLzma::CDecoder::~CDecoder(void)+6Bp
UNDEF:00001C94                                         ; NCompress::NLzma::CDecoder::CreateInputBuffer(void)+32p
UNDEF:00001C98 ; __stdcall LzmaDec_Free(x, x)
UNDEF:00001C98                 extrn _LzmaDec_Free@8:near
UNDEF:00001C98                                         ; CODE XREF: NCompress::NLzma::CDecoder::~CDecoder(void)+5Fp
UNDEF:00001C9C                 extrn _g_Alloc:near     ; DATA XREF: NCompress::NLzma::CDecoder::~CDecoder(void)+53o
UNDEF:00001C9C                                         ; NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+Bo
UNDEF:00001CA0 ; __stdcall MyAlloc(x)
UNDEF:00001CA0                 extrn _MyAlloc@4:near   ; CODE XREF: NCompress::NLzma::CDecoder::CreateInputBuffer(void)+41p
UNDEF:00001CA4 ; __stdcall LzmaDec_Allocate(x, x, x, x)
UNDEF:00001CA4                 extrn _LzmaDec_Allocate@16:near
UNDEF:00001CA4                                         ; CODE XREF: NCompress::NLzma::CDecoder::SetDecoderProperties2(uchar const *,uint)+1Fp
UNDEF:00001CA8 ; __stdcall LzmaDec_Init(x)
UNDEF:00001CA8                 extrn _LzmaDec_Init@4:near
UNDEF:00001CA8                                         ; CODE XREF: NCompress::NLzma::CDecoder::SetOutStreamSizeResume(unsigned __int64 const *)+70p
UNDEF:00001CAC ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00001CAC                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00001CAC                                         ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2E4p
UNDEF:00001CB0 ; __stdcall LzmaDec_DecodeToDic(x, x, x, x, x, x)
UNDEF:00001CB0                 extrn _LzmaDec_DecodeToDic@24:near
UNDEF:00001CB0                                         ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1ADp
UNDEF:00001CB4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001CB4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001CB4                                         ; CODE XREF: NCompress::NLzma::CDecoder::CodeSpec(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+44Dp
UNDEF:00001CB4                                         ; NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+1E5p
UNDEF:00001CB8 ; __stdcall LzmaDec_DecodeToBuf(x, x, x, x, x, x, x)
UNDEF:00001CB8                 extrn _LzmaDec_DecodeToBuf@28:near
UNDEF:00001CB8                                         ; CODE XREF: NCompress::NLzma::CDecoder::Read(void *,uint,uint *)+126p
UNDEF:00001CBC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001CBC                 extrn _memcpy:near      ; CODE XREF: NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)+100p
UNDEF:00001CBC
UNDEF:00001CBC