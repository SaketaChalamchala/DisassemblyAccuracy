.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 289AE504A3CA93CA1F061680C5FE928A
.rdata:00000000 ; Input CRC32 : 6403E755
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzmaHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 7                    ; DATA XREF: NArchive::NLzma::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001                 db    8
.rdata:00000002                 db  16h
.rdata:00000003 _kArcProps      db 4Ah                  ; DATA XREF: NArchive::NLzma::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000004 ; char _SG70061[]
.rdata:00000004 $SG70061        db 'BCJ ',0             ; DATA XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+BEo
.rdata:00000009                 align 4
.rdata:0000000C ; char _SG70062[]
.rdata:0000000C $SG70062        db 'LZMA:',0            ; DATA XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_B2Bo
.rdata:00000012                 align 4
.rdata:00000014 $SG70347        db 'lzma',0             ; DATA XREF: .rdata:00000030o
.rdata:00000019                 align 4
.rdata:0000001C $SG70348        db 'lzma',0             ; DATA XREF: .rdata:00000034o
.rdata:00000021                 align 4
.rdata:00000024 ; struct CArcInfo g_ArcInfo
.rdata:00000024 _g_ArcInfo:                             ; DATA XREF: NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000024                 unicode 0, <A>
.rdata:00000024                 dw 0Ah, 0
.rdata:0000002A                 align 10h
.rdata:00000030                 dd offset $SG70347      ; "lzma"
.rdata:00000034                 dd offset $SG70348      ; "lzma"
.rdata:00000038                 db    0
.rdata:00000039                 db    0
.rdata:0000003A                 db    0
.rdata:0000003B                 db    0
.rdata:0000003C                 dd offset ?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NLzma::NLzmaAr::CreateArc(void)
.rdata:00000040 unk_40          db    0                 ; DATA XREF: .xdata$x:__catchsym$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8o
.rdata:00000041                 db    0
.rdata:00000042                 db    0
.rdata:00000043                 db    0
.rdata:00000044                 dd offset _IsArc_Lzma@8 ; IsArc_Lzma(x,x)
.rdata:00000048 $SG70393        db 'lzma86',0           ; DATA XREF: .rdata:00000064o
.rdata:0000004F                 align 10h
.rdata:00000050 $SG70394        db 'lzma86',0           ; DATA XREF: .rdata:00000068o
.rdata:00000057                 align 4
.rdata:00000058 ; struct CArcInfo g_ArcInfo_0
.rdata:00000058 _g_ArcInfo_0    db    1                 ; DATA XREF: NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000059                 db    0
.rdata:0000005A                 db  0Bh
.rdata:0000005B                 db    0
.rdata:0000005C                 db    0
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060                 db    0
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 dd offset $SG70393      ; "lzma86"
.rdata:00000068                 dd offset $SG70394      ; "lzma86"
.rdata:0000006C                 align 10h
.rdata:00000070                 dd offset ?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NLzma::NLzma86Ar::CreateArc(void)
.rdata:00000074                 align 8
.rdata:00000078                 dd offset _IsArc_Lzma86@8 ; IsArc_Lzma86(x,x)
.rdata:00000078 _rdata          ends
.rdata:00000078
.text:0000007C ; ===========================================================================
.text:0000007C
.text:0000007C ; Segment type: Pure code
.text:0000007C ; Segment permissions: Read/Execute
.text:0000007C _text           segment para public 'CODE' use32
.text:0000007C                 assume cs:_text
.text:0000007C                 ;org 7Ch
.text:0000007C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000007C
.text:0000007C ; =============== S U B R O U T I N E =======================================
.text:0000007C
.text:0000007C ; Attributes: bp-based frame
.text:0000007C
.text:0000007C ; bool __thiscall NArchive::NLzma::CHeader::Parse(NArchive::NLzma::CHeader *this, const unsigned __int8 *, bool)
.text:0000007C                 public ?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z
.text:0000007C ?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z proc near
.text:0000007C                                         ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+71p
.text:0000007C                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5E7p
.text:0000007C
.text:0000007C var_14          = dword ptr -14h
.text:0000007C var_10          = dword ptr -10h
.text:0000007C var_C           = dword ptr -0Ch
.text:0000007C var_8           = dword ptr -8
.text:0000007C var_4           = dword ptr -4
.text:0000007C arg_0           = dword ptr  8
.text:0000007C arg_4           = byte ptr  0Ch
.text:0000007C
.text:0000007C                 push    ebp
.text:0000007D                 mov     ebp, esp
.text:0000007F                 sub     esp, 14h
.text:00000082                 mov     eax, 0CCCCCCCCh
.text:00000087                 mov     [ebp+var_14], eax
.text:0000008A                 mov     [ebp+var_10], eax
.text:0000008D                 mov     [ebp+var_C], eax
.text:00000090                 mov     [ebp+var_8], eax
.text:00000093                 mov     [ebp+var_4], eax
.text:00000096                 mov     [ebp+var_4], ecx
.text:00000099                 mov     eax, [ebp+var_4]
.text:0000009C                 mov     byte ptr [eax+8], 0
.text:000000A0                 movzx   ecx, [ebp+arg_4]
.text:000000A4                 test    ecx, ecx
.text:000000A6                 jz      short loc_B3
.text:000000A8                 mov     edx, [ebp+var_4]
.text:000000AB                 mov     eax, [ebp+arg_0]
.text:000000AE                 mov     cl, [eax]
.text:000000B0                 mov     [edx+8], cl
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+2Aj
.text:000000B3                 movzx   edx, [ebp+arg_4]
.text:000000B7                 neg     edx
.text:000000B9                 sbb     edx, edx
.text:000000BB                 neg     edx
.text:000000BD                 add     edx, [ebp+arg_0]
.text:000000C0                 mov     [ebp+var_8], edx
.text:000000C3                 mov     [ebp+var_C], 0
.text:000000CA                 jmp     short loc_D5
.text:000000CC ; ---------------------------------------------------------------------------
.text:000000CC
.text:000000CC loc_CC:                                 ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+70j
.text:000000CC                 mov     eax, [ebp+var_C]
.text:000000CF                 add     eax, 1
.text:000000D2                 mov     [ebp+var_C], eax
.text:000000D5
.text:000000D5 loc_D5:                                 ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+4Ej
.text:000000D5                 cmp     [ebp+var_C], 5
.text:000000D9                 jge     short loc_EE
.text:000000DB                 mov     ecx, [ebp+var_4]
.text:000000DE                 add     ecx, [ebp+var_C]
.text:000000E1                 mov     edx, [ebp+var_8]
.text:000000E4                 add     edx, [ebp+var_C]
.text:000000E7                 mov     al, [edx]
.text:000000E9                 mov     [ecx+9], al
.text:000000EC                 jmp     short loc_CC
.text:000000EE ; ---------------------------------------------------------------------------
.text:000000EE
.text:000000EE loc_EE:                                 ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+5Dj
.text:000000EE                 mov     ecx, [ebp+var_4]
.text:000000F1                 mov     edx, [ebp+var_8]
.text:000000F4                 mov     eax, [edx+5]
.text:000000F7                 mov     [ecx], eax
.text:000000F9                 mov     edx, [edx+9]
.text:000000FC                 mov     [ecx+4], edx
.text:000000FF                 mov     eax, [ebp+var_4]
.text:00000102                 movzx   ecx, byte ptr [eax+9]
.text:00000106                 cmp     ecx, 0E1h ; 'ß'
.text:0000010C                 jge     short loc_161
.text:0000010E                 mov     edx, [ebp+var_4]
.text:00000111                 movzx   eax, byte ptr [edx+8]
.text:00000115                 cmp     eax, 2
.text:00000118                 jge     short loc_161
.text:0000011A                 mov     ecx, [ebp+var_4] ; this
.text:0000011D                 call    ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize(void)
.text:00000122                 movzx   ecx, al
.text:00000125                 test    ecx, ecx
.text:00000127                 jz      short loc_145
.text:00000129                 mov     edx, [ebp+var_4]
.text:0000012C                 mov     [ebp+var_10], edx
.text:0000012F                 mov     eax, [ebp+var_10]
.text:00000132                 cmp     dword ptr [eax+4], 1000000h
.text:00000139                 ja      short loc_161
.text:0000013B                 jb      short loc_145
.text:0000013D                 mov     ecx, [ebp+var_10]
.text:00000140                 cmp     dword ptr [ecx], 0
.text:00000143                 jnb     short loc_161
.text:00000145
.text:00000145 loc_145:                                ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+ABj
.text:00000145                                         ; NArchive::NLzma::CHeader::Parse(uchar const *,bool)+BFj
.text:00000145                 mov     edx, [ebp+var_4]
.text:00000148                 add     edx, 0Ah
.text:0000014B                 push    edx
.text:0000014C                 call    ?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z ; NArchive::NLzma::CheckDicSize(uchar const *)
.text:00000151                 movzx   eax, al
.text:00000154                 test    eax, eax
.text:00000156                 jz      short loc_161
.text:00000158                 mov     [ebp+var_14], 1
.text:0000015F                 jmp     short loc_168
.text:00000161 ; ---------------------------------------------------------------------------
.text:00000161
.text:00000161 loc_161:                                ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+90j
.text:00000161                                         ; NArchive::NLzma::CHeader::Parse(uchar const *,bool)+9Cj ...
.text:00000161                 mov     [ebp+var_14], 0
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+E3j
.text:00000168                 mov     al, byte ptr [ebp+var_14]
.text:0000016B                 add     esp, 14h
.text:0000016E                 cmp     ebp, esp
.text:00000170                 call    __RTC_CheckEsp
.text:00000175                 mov     esp, ebp
.text:00000177                 pop     ebp
.text:00000178                 retn    8
.text:00000178 ?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z endp
.text:00000178
.text:00000178 ; ---------------------------------------------------------------------------
.text:0000017B                 align 4
.text:0000017C
.text:0000017C ; =============== S U B R O U T I N E =======================================
.text:0000017C
.text:0000017C ; Attributes: bp-based frame
.text:0000017C
.text:0000017C ; bool __stdcall NArchive::NLzma::CheckDicSize(unsigned char const *)
.text:0000017C ?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z proc near
.text:0000017C                                         ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+D0p
.text:0000017C                                         ; IsArc_Lzma(x,x)+C9p
.text:0000017C
.text:0000017C var_8           = dword ptr -8
.text:0000017C var_4           = dword ptr -4
.text:0000017C arg_0           = dword ptr  8
.text:0000017C
.text:0000017C                 push    ebp
.text:0000017D                 mov     ebp, esp
.text:0000017F                 sub     esp, 8
.text:00000182                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000189                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000190                 mov     eax, [ebp+arg_0]
.text:00000193                 mov     ecx, [eax]
.text:00000195                 mov     [ebp+var_4], ecx
.text:00000198                 cmp     [ebp+var_4], 1
.text:0000019C                 jnz     short loc_1A2
.text:0000019E                 mov     al, 1
.text:000001A0                 jmp     short loc_1E7
.text:000001A2 ; ---------------------------------------------------------------------------
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+20j
.text:000001A2                 mov     [ebp+var_8], 0
.text:000001A9                 jmp     short loc_1B4
.text:000001AB ; ---------------------------------------------------------------------------
.text:000001AB
.text:000001AB loc_1AB:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *):loc_1DCj
.text:000001AB                 mov     edx, [ebp+var_8]
.text:000001AE                 add     edx, 1
.text:000001B1                 mov     [ebp+var_8], edx
.text:000001B4
.text:000001B4 loc_1B4:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+2Dj
.text:000001B4                 cmp     [ebp+var_8], 1Eh
.text:000001B8                 ja      short loc_1DE
.text:000001BA                 mov     eax, 2
.text:000001BF                 mov     ecx, [ebp+var_8]
.text:000001C2                 shl     eax, cl
.text:000001C4                 cmp     [ebp+var_4], eax
.text:000001C7                 jz      short loc_1D8
.text:000001C9                 mov     edx, 3
.text:000001CE                 mov     ecx, [ebp+var_8]
.text:000001D1                 shl     edx, cl
.text:000001D3                 cmp     [ebp+var_4], edx
.text:000001D6                 jnz     short loc_1DC
.text:000001D8
.text:000001D8 loc_1D8:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+4Bj
.text:000001D8                 mov     al, 1
.text:000001DA                 jmp     short loc_1E7
.text:000001DC ; ---------------------------------------------------------------------------
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+5Aj
.text:000001DC                 jmp     short loc_1AB
.text:000001DE ; ---------------------------------------------------------------------------
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+3Cj
.text:000001DE                 xor     eax, eax
.text:000001E0                 cmp     [ebp+var_4], 0FFFFFFFFh
.text:000001E4                 setz    al
.text:000001E7
.text:000001E7 loc_1E7:                                ; CODE XREF: NArchive::NLzma::CheckDicSize(uchar const *)+24j
.text:000001E7                                         ; NArchive::NLzma::CheckDicSize(uchar const *)+5Ej
.text:000001E7                 mov     esp, ebp
.text:000001E9                 pop     ebp
.text:000001EA                 retn    4
.text:000001EA ?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z endp
.text:000001EA
.text:000001EA ; ---------------------------------------------------------------------------
.text:000001ED                 db 0Fh dup(0CCh)
.text:000001FC
.text:000001FC ; =============== S U B R O U T I N E =======================================
.text:000001FC
.text:000001FC ; Attributes: bp-based frame
.text:000001FC
.text:000001FC ; __int32 __thiscall NArchive::NLzma::CDecoder::Create(NArchive::NLzma::CDecoder *this, bool, struct ISequentialInStream *)
.text:000001FC                 public ?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
.text:000001FC ?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z proc near
.text:000001FC                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3E5p
.text:000001FC
.text:000001FC var_48          = dword ptr -48h
.text:000001FC var_44          = dword ptr -44h
.text:000001FC var_40          = dword ptr -40h
.text:000001FC var_3C          = dword ptr -3Ch
.text:000001FC var_38          = dword ptr -38h
.text:000001FC var_34          = dword ptr -34h
.text:000001FC var_30          = dword ptr -30h
.text:000001FC var_2C          = dword ptr -2Ch
.text:000001FC var_28          = dword ptr -28h
.text:000001FC var_24          = dword ptr -24h
.text:000001FC var_20          = dword ptr -20h
.text:000001FC var_18          = byte ptr -18h
.text:000001FC var_10          = dword ptr -10h
.text:000001FC var_C           = dword ptr -0Ch
.text:000001FC var_4           = dword ptr -4
.text:000001FC arg_0           = byte ptr  8
.text:000001FC arg_4           = dword ptr  0Ch
.text:000001FC
.text:000001FC                 push    ebp
.text:000001FD                 mov     ebp, esp
.text:000001FF                 push    0FFFFFFFFh
.text:00000201                 push    offset __ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
.text:00000206                 mov     eax, large fs:0
.text:0000020C                 push    eax
.text:0000020D                 sub     esp, 3Ch
.text:00000210                 push    esi
.text:00000211                 push    edi
.text:00000212                 push    ecx
.text:00000213                 lea     edi, [ebp+var_48]
.text:00000216                 mov     ecx, 0Fh
.text:0000021B                 mov     eax, 0CCCCCCCCh
.text:00000220                 rep stosd
.text:00000222                 pop     ecx
.text:00000223                 mov     eax, dword ptr ds:___security_cookie
.text:00000228                 xor     eax, ebp
.text:0000022A                 push    eax
.text:0000022B                 lea     eax, [ebp+var_C]
.text:0000022E                 mov     large fs:0, eax
.text:00000234                 mov     [ebp+var_10], ecx
.text:00000237                 mov     ecx, [ebp+var_10]
.text:0000023A                 add     ecx, 8
.text:0000023D                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00000242                 movzx   eax, al
.text:00000245                 test    eax, eax
.text:00000247                 jz      short loc_2AF
.text:00000249                 push    0D8h ; '+'      ; unsigned int
.text:0000024E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000253                 add     esp, 4
.text:00000256                 mov     [ebp+var_24], eax
.text:00000259                 mov     [ebp+var_4], 0
.text:00000260                 cmp     [ebp+var_24], 0
.text:00000264                 jz      short loc_273
.text:00000266                 mov     ecx, [ebp+var_24] ; this
.text:00000269                 call    ??0CDecoder@NLzma@NCompress@@QAE@XZ ; NCompress::NLzma::CDecoder::CDecoder(void)
.text:0000026E                 mov     [ebp+var_38], eax
.text:00000271                 jmp     short loc_27A
.text:00000273 ; ---------------------------------------------------------------------------
.text:00000273
.text:00000273 loc_273:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+68j
.text:00000273                 mov     [ebp+var_38], 0
.text:0000027A
.text:0000027A loc_27A:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+75j
.text:0000027A                 mov     ecx, [ebp+var_38]
.text:0000027D                 mov     [ebp+var_20], ecx
.text:00000280                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000287                 mov     edx, [ebp+var_10]
.text:0000028A                 mov     eax, [ebp+var_20]
.text:0000028D                 mov     [edx+0Ch], eax
.text:00000290                 mov     ecx, [ebp+var_10]
.text:00000293                 mov     edx, [ecx+0Ch]
.text:00000296                 mov     byte ptr [edx+0D0h], 1
.text:0000029D                 mov     eax, [ebp+var_10]
.text:000002A0                 mov     ecx, [eax+0Ch]
.text:000002A3                 push    ecx
.text:000002A4                 mov     ecx, [ebp+var_10]
.text:000002A7                 add     ecx, 8
.text:000002AA                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000002AF
.text:000002AF loc_2AF:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+4Bj
.text:000002AF                 movzx   edx, [ebp+arg_0]
.text:000002B3                 test    edx, edx
.text:000002B5                 jz      loc_3B5
.text:000002BB                 mov     ecx, [ebp+var_10]
.text:000002BE                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:000002C3                 movzx   eax, al
.text:000002C6                 test    eax, eax
.text:000002C8                 jz      loc_3B5
.text:000002CE                 push    98h ; 'ÿ'       ; unsigned int
.text:000002D3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000002D8                 add     esp, 4
.text:000002DB                 mov     [ebp+var_2C], eax
.text:000002DE                 mov     [ebp+var_4], 1
.text:000002E5                 cmp     [ebp+var_2C], 0
.text:000002E9                 jz      short loc_2FA
.text:000002EB                 push    0               ; bool
.text:000002ED                 mov     ecx, [ebp+var_2C] ; this
.text:000002F0                 call    ??0CFilterCoder@@QAE@_N@Z ; CFilterCoder::CFilterCoder(bool)
.text:000002F5                 mov     [ebp+var_3C], eax
.text:000002F8                 jmp     short loc_301
.text:000002FA ; ---------------------------------------------------------------------------
.text:000002FA
.text:000002FA loc_2FA:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+EDj
.text:000002FA                 mov     [ebp+var_3C], 0
.text:00000301
.text:00000301 loc_301:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+FCj
.text:00000301                 mov     ecx, [ebp+var_3C]
.text:00000304                 mov     [ebp+var_28], ecx
.text:00000307                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000030E                 mov     edx, [ebp+var_10]
.text:00000311                 mov     eax, [ebp+var_28]
.text:00000314                 mov     [edx+4], eax
.text:00000317                 mov     ecx, [ebp+var_10]
.text:0000031A                 mov     edx, [ecx+4]
.text:0000031D                 push    edx
.text:0000031E                 lea     ecx, [ebp+var_18]
.text:00000321                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00000326                 mov     [ebp+var_4], 2
.text:0000032D                 push    14h             ; unsigned int
.text:0000032F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000334                 add     esp, 4
.text:00000337                 mov     [ebp+var_34], eax
.text:0000033A                 mov     byte ptr [ebp+var_4], 3
.text:0000033E                 cmp     [ebp+var_34], 0
.text:00000342                 jz      short loc_353
.text:00000344                 push    0
.text:00000346                 mov     ecx, [ebp+var_34]
.text:00000349                 call    ??0CBcjCoder@@QAE@H@Z ; CBcjCoder::CBcjCoder(int)
.text:0000034E                 mov     [ebp+var_40], eax
.text:00000351                 jmp     short loc_35A
.text:00000353 ; ---------------------------------------------------------------------------
.text:00000353
.text:00000353 loc_353:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+146j
.text:00000353                 mov     [ebp+var_40], 0
.text:0000035A
.text:0000035A loc_35A:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+155j
.text:0000035A                 mov     eax, [ebp+var_40]
.text:0000035D                 mov     [ebp+var_30], eax
.text:00000360                 mov     byte ptr [ebp+var_4], 2
.text:00000364                 mov     ecx, [ebp+var_30]
.text:00000367                 push    ecx
.text:00000368                 mov     edx, [ebp+var_10]
.text:0000036B                 mov     ecx, [edx+4]
.text:0000036E                 add     ecx, 94h ; 'ö'
.text:00000374                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00000379                 mov     eax, [ebp+var_10]
.text:0000037C                 mov     ecx, [eax+4]
.text:0000037F                 mov     [ebp+var_44], ecx
.text:00000382                 cmp     [ebp+var_44], 0
.text:00000386                 jz      short loc_393
.text:00000388                 mov     edx, [ebp+var_44]
.text:0000038B                 add     edx, 18h
.text:0000038E                 mov     [ebp+var_48], edx
.text:00000391                 jmp     short loc_39A
.text:00000393 ; ---------------------------------------------------------------------------
.text:00000393
.text:00000393 loc_393:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+18Aj
.text:00000393                 mov     [ebp+var_48], 0
.text:0000039A
.text:0000039A loc_39A:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+195j
.text:0000039A                 mov     eax, [ebp+var_48]
.text:0000039D                 push    eax
.text:0000039E                 mov     ecx, [ebp+var_10]
.text:000003A1                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000003A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003AD                 lea     ecx, [ebp+var_18]
.text:000003B0                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000003B5
.text:000003B5 loc_3B5:                                ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+B9j
.text:000003B5                                         ; NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+CCj
.text:000003B5                 mov     esi, esp
.text:000003B7                 mov     ecx, [ebp+arg_4]
.text:000003BA                 push    ecx
.text:000003BB                 mov     edx, [ebp+var_10]
.text:000003BE                 mov     eax, [edx+0Ch]
.text:000003C1                 mov     ecx, [ebp+var_10]
.text:000003C4                 mov     edx, [ecx+0Ch]
.text:000003C7                 add     edx, 10h
.text:000003CA                 mov     eax, [eax+10h]
.text:000003CD                 push    edx
.text:000003CE                 mov     ecx, [eax+0Ch]
.text:000003D1                 call    ecx
.text:000003D3                 cmp     esi, esp
.text:000003D5                 call    __RTC_CheckEsp
.text:000003DA                 push    edx
.text:000003DB                 mov     ecx, ebp
.text:000003DD                 push    eax
.text:000003DE                 lea     edx, $LN21
.text:000003E4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003E9                 pop     eax
.text:000003EA                 pop     edx
.text:000003EB                 mov     ecx, [ebp+var_C]
.text:000003EE                 mov     large fs:0, ecx
.text:000003F5                 pop     ecx
.text:000003F6                 pop     edi
.text:000003F7                 pop     esi
.text:000003F8                 add     esp, 48h
.text:000003FB                 cmp     ebp, esp
.text:000003FD                 call    __RTC_CheckEsp
.text:00000402                 mov     esp, ebp
.text:00000404                 pop     ebp
.text:00000405                 retn    8
.text:00000405 ?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z endp
.text:00000405
.text:00000405 ; ---------------------------------------------------------------------------
.text:00000408 $LN21           dd 1                    ; DATA XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+1E2o
.text:0000040C                 dd offset $LN20
.text:00000410 $LN20           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000040Co
.text:00000418                 dd offset $LN18         ; "coder"
.text:0000041C $LN18           db 'coder',0            ; DATA XREF: .text:00000418o
.text:00000422                 db 0Ah dup(0CCh)
.text:0000042C
.text:0000042C ; =============== S U B R O U T I N E =======================================
.text:0000042C
.text:0000042C ; Attributes: bp-based frame
.text:0000042C
.text:0000042C ; _DWORD __thiscall NArchive::NLzma::CDecoder::~CDecoder(NArchive::NLzma::CDecoder *__hidden this)
.text:0000042C                 public ??1CDecoder@NLzma@NArchive@@QAE@XZ
.text:0000042C ??1CDecoder@NLzma@NArchive@@QAE@XZ proc near
.text:0000042C                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+415p
.text:0000042C                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4D8p ...
.text:0000042C
.text:0000042C var_10          = dword ptr -10h
.text:0000042C var_C           = dword ptr -0Ch
.text:0000042C var_4           = dword ptr -4
.text:0000042C
.text:0000042C                 push    ebp
.text:0000042D                 mov     ebp, esp
.text:0000042F                 push    0FFFFFFFFh
.text:00000431                 push    offset __ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ
.text:00000436                 mov     eax, large fs:0
.text:0000043C                 push    eax
.text:0000043D                 push    ecx
.text:0000043E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000445                 mov     eax, dword ptr ds:___security_cookie
.text:0000044A                 xor     eax, ebp
.text:0000044C                 push    eax
.text:0000044D                 lea     eax, [ebp+var_C]
.text:00000450                 mov     large fs:0, eax
.text:00000456                 mov     [ebp+var_10], ecx
.text:00000459                 mov     [ebp+var_4], 1
.text:00000460                 mov     ecx, [ebp+var_10] ; this
.text:00000463                 call    ?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ ; NArchive::NLzma::CDecoder::ReleaseInStream(void)
.text:00000468                 mov     byte ptr [ebp+var_4], 0
.text:0000046C                 mov     ecx, [ebp+var_10]
.text:0000046F                 add     ecx, 8
.text:00000472                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000477                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000047E                 mov     ecx, [ebp+var_10]
.text:00000481                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000486                 mov     ecx, [ebp+var_C]
.text:00000489                 mov     large fs:0, ecx
.text:00000490                 pop     ecx
.text:00000491                 add     esp, 10h
.text:00000494                 cmp     ebp, esp
.text:00000496                 call    __RTC_CheckEsp
.text:0000049B                 mov     esp, ebp
.text:0000049D                 pop     ebp
.text:0000049E                 retn
.text:0000049E ??1CDecoder@NLzma@NArchive@@QAE@XZ endp
.text:0000049E
.text:0000049E ; ---------------------------------------------------------------------------
.text:0000049F                 db 0Dh dup(0CCh)
.text:000004AC
.text:000004AC ; =============== S U B R O U T I N E =======================================
.text:000004AC
.text:000004AC ; Attributes: bp-based frame
.text:000004AC
.text:000004AC ; __int32 __thiscall NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CDecoder *this, const struct NArchive::NLzma::CHeader *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:000004AC                 public ?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:000004AC ?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:000004AC                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+65Fp
.text:000004AC
.text:000004AC var_58          = dword ptr -58h
.text:000004AC var_54          = dword ptr -54h
.text:000004AC var_50          = dword ptr -50h
.text:000004AC var_4C          = dword ptr -4Ch
.text:000004AC var_48          = dword ptr -48h
.text:000004AC var_44          = dword ptr -44h
.text:000004AC var_40          = dword ptr -40h
.text:000004AC var_3C          = dword ptr -3Ch
.text:000004AC var_38          = dword ptr -38h
.text:000004AC var_34          = dword ptr -34h
.text:000004AC var_30          = dword ptr -30h
.text:000004AC var_2C          = dword ptr -2Ch
.text:000004AC var_28          = dword ptr -28h
.text:000004AC var_21          = byte ptr -21h
.text:000004AC var_20          = dword ptr -20h
.text:000004AC var_18          = byte ptr -18h
.text:000004AC var_10          = dword ptr -10h
.text:000004AC var_C           = dword ptr -0Ch
.text:000004AC var_4           = dword ptr -4
.text:000004AC arg_0           = dword ptr  8
.text:000004AC arg_4           = dword ptr  0Ch
.text:000004AC arg_8           = dword ptr  10h
.text:000004AC
.text:000004AC                 push    ebp
.text:000004AD                 mov     ebp, esp
.text:000004AF                 push    0FFFFFFFFh
.text:000004B1                 push    offset __ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:000004B6                 mov     eax, large fs:0
.text:000004BC                 push    eax
.text:000004BD                 sub     esp, 4Ch
.text:000004C0                 push    esi
.text:000004C1                 push    edi
.text:000004C2                 push    ecx
.text:000004C3                 lea     edi, [ebp+var_58]
.text:000004C6                 mov     ecx, 13h
.text:000004CB                 mov     eax, 0CCCCCCCCh
.text:000004D0                 rep stosd
.text:000004D2                 pop     ecx
.text:000004D3                 mov     eax, dword ptr ds:___security_cookie
.text:000004D8                 xor     eax, ebp
.text:000004DA                 push    eax
.text:000004DB                 lea     eax, [ebp+var_C]
.text:000004DE                 mov     large fs:0, eax
.text:000004E4                 mov     [ebp+var_10], ecx
.text:000004E7                 mov     eax, [ebp+arg_0]
.text:000004EA                 movzx   ecx, byte ptr [eax+8]
.text:000004EE                 cmp     ecx, 1
.text:000004F1                 jle     short loc_4FD
.text:000004F3                 mov     eax, 80004001h
.text:000004F8                 jmp     loc_72F
.text:000004FD ; ---------------------------------------------------------------------------
.text:000004FD
.text:000004FD loc_4FD:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+45j
.text:000004FD                 lea     ecx, [ebp+var_18]
.text:00000500                 call    ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:00000505                 mov     [ebp+var_4], 0
.text:0000050C                 lea     ecx, [ebp+var_18]
.text:0000050F                 call    ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&(void)
.text:00000514                 push    eax
.text:00000515                 push    offset _IID_ICompressSetDecoderProperties2
.text:0000051A                 mov     ecx, [ebp+var_10]
.text:0000051D                 add     ecx, 8
.text:00000520                 call    ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetDecoderProperties2>(_GUID const &,ICompressSetDecoderProperties2 * *)
.text:00000525                 lea     ecx, [ebp+var_18]
.text:00000528                 call    ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!(void)
.text:0000052D                 movzx   edx, al
.text:00000530                 test    edx, edx
.text:00000532                 jz      short loc_552
.text:00000534                 mov     [ebp+var_44], 80004001h
.text:0000053B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000542                 lea     ecx, [ebp+var_18]
.text:00000545                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:0000054A                 mov     eax, [ebp+var_44]
.text:0000054D                 jmp     loc_72F
.text:00000552 ; ---------------------------------------------------------------------------
.text:00000552
.text:00000552 loc_552:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+86j
.text:00000552                 lea     ecx, [ebp+var_18]
.text:00000555                 call    ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->(void)
.text:0000055A                 mov     [ebp+var_4C], eax
.text:0000055D                 mov     esi, esp
.text:0000055F                 push    5
.text:00000561                 mov     eax, [ebp+arg_0]
.text:00000564                 add     eax, 9
.text:00000567                 push    eax
.text:00000568                 mov     ecx, [ebp+var_4C]
.text:0000056B                 push    ecx
.text:0000056C                 mov     edx, [ebp+var_4C]
.text:0000056F                 mov     eax, [edx]
.text:00000571                 mov     ecx, [eax+0Ch]
.text:00000574                 call    ecx
.text:00000576                 cmp     esi, esp
.text:00000578                 call    __RTC_CheckEsp
.text:0000057D                 mov     [ebp+var_20], eax
.text:00000580                 cmp     [ebp+var_20], 0
.text:00000584                 jz      short loc_5A3
.text:00000586                 mov     edx, [ebp+var_20]
.text:00000589                 mov     [ebp+var_48], edx
.text:0000058C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000593                 lea     ecx, [ebp+var_18]
.text:00000596                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:0000059B                 mov     eax, [ebp+var_48]
.text:0000059E                 jmp     loc_72F
.text:000005A3 ; ---------------------------------------------------------------------------
.text:000005A3
.text:000005A3 loc_5A3:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+D8j
.text:000005A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005AA                 lea     ecx, [ebp+var_18]
.text:000005AD                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000005B2                 mov     eax, [ebp+arg_0]
.text:000005B5                 movzx   ecx, byte ptr [eax+8]
.text:000005B9                 sub     ecx, 1
.text:000005BC                 neg     ecx
.text:000005BE                 sbb     ecx, ecx
.text:000005C0                 add     ecx, 1
.text:000005C3                 mov     [ebp+var_21], cl
.text:000005C6                 movzx   edx, [ebp+var_21]
.text:000005CA                 test    edx, edx
.text:000005CC                 jz      short loc_643
.text:000005CE                 mov     esi, esp
.text:000005D0                 mov     eax, [ebp+arg_4]
.text:000005D3                 push    eax
.text:000005D4                 mov     ecx, [ebp+var_10]
.text:000005D7                 mov     edx, [ecx+4]
.text:000005DA                 mov     eax, [ebp+var_10]
.text:000005DD                 mov     ecx, [eax+4]
.text:000005E0                 add     ecx, 14h
.text:000005E3                 mov     edx, [edx+14h]
.text:000005E6                 push    ecx
.text:000005E7                 mov     eax, [edx+0Ch]
.text:000005EA                 call    eax
.text:000005EC                 cmp     esi, esp
.text:000005EE                 call    __RTC_CheckEsp
.text:000005F3                 mov     [ebp+var_28], eax
.text:000005F6                 cmp     [ebp+var_28], 0
.text:000005FA                 jz      short loc_604
.text:000005FC                 mov     eax, [ebp+var_28]
.text:000005FF                 jmp     loc_72F
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+14Ej
.text:00000604                 mov     ecx, [ebp+var_10]
.text:00000607                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000060C                 mov     [ebp+arg_4], eax
.text:0000060F                 mov     esi, esp
.text:00000611                 push    0
.text:00000613                 mov     ecx, [ebp+var_10]
.text:00000616                 mov     edx, [ecx+4]
.text:00000619                 mov     eax, [ebp+var_10]
.text:0000061C                 mov     ecx, [eax+4]
.text:0000061F                 add     ecx, 4
.text:00000622                 mov     edx, [edx+4]
.text:00000625                 push    ecx
.text:00000626                 mov     eax, [edx+0Ch]
.text:00000629                 call    eax
.text:0000062B                 cmp     esi, esp
.text:0000062D                 call    __RTC_CheckEsp
.text:00000632                 mov     [ebp+var_2C], eax
.text:00000635                 cmp     [ebp+var_2C], 0
.text:00000639                 jz      short loc_643
.text:0000063B                 mov     eax, [ebp+var_2C]
.text:0000063E                 jmp     loc_72F
.text:00000643 ; ---------------------------------------------------------------------------
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+120j
.text:00000643                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+18Dj
.text:00000643                 mov     ecx, [ebp+arg_0] ; this
.text:00000646                 call    ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize(void)
.text:0000064B                 movzx   ecx, al
.text:0000064E                 neg     ecx
.text:00000650                 sbb     ecx, ecx
.text:00000652                 and     ecx, [ebp+arg_0]
.text:00000655                 mov     [ebp+var_30], ecx
.text:00000658                 mov     edx, [ebp+arg_8]
.text:0000065B                 push    edx             ; struct ICompressProgressInfo *
.text:0000065C                 mov     eax, [ebp+var_30]
.text:0000065F                 push    eax             ; unsigned __int64 *
.text:00000660                 mov     ecx, [ebp+arg_4]
.text:00000663                 push    ecx             ; struct ISequentialOutStream *
.text:00000664                 mov     edx, [ebp+var_10]
.text:00000667                 mov     ecx, [edx+0Ch]  ; this
.text:0000066A                 call    ?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NLzma::CDecoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.text:0000066F                 mov     [ebp+var_34], eax
.text:00000672                 movzx   eax, [ebp+var_21]
.text:00000676                 test    eax, eax
.text:00000678                 jz      short loc_6DA
.text:0000067A                 mov     ecx, [ebp+var_10]
.text:0000067D                 mov     edx, [ecx+4]
.text:00000680                 mov     eax, [ebp+var_10]
.text:00000683                 mov     ecx, [eax+4]
.text:00000686                 add     ecx, 1Ch
.text:00000689                 mov     edx, [edx+1Ch]
.text:0000068C                 mov     esi, esp
.text:0000068E                 push    ecx
.text:0000068F                 mov     eax, [edx+0Ch]
.text:00000692                 call    eax
.text:00000694                 cmp     esi, esp
.text:00000696                 call    __RTC_CheckEsp
.text:0000069B                 mov     [ebp+var_38], eax
.text:0000069E                 cmp     [ebp+var_34], 0
.text:000006A2                 jnz     short loc_6AA
.text:000006A4                 mov     ecx, [ebp+var_38]
.text:000006A7                 mov     [ebp+var_34], ecx
.text:000006AA
.text:000006AA loc_6AA:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+1F6j
.text:000006AA                 mov     edx, [ebp+var_10]
.text:000006AD                 mov     eax, [edx+4]
.text:000006B0                 mov     ecx, [ebp+var_10]
.text:000006B3                 mov     edx, [ecx+4]
.text:000006B6                 add     edx, 14h
.text:000006B9                 mov     eax, [eax+14h]
.text:000006BC                 mov     esi, esp
.text:000006BE                 push    edx
.text:000006BF                 mov     ecx, [eax+10h]
.text:000006C2                 call    ecx
.text:000006C4                 cmp     esi, esp
.text:000006C6                 call    __RTC_CheckEsp
.text:000006CB                 mov     [ebp+var_3C], eax
.text:000006CE                 cmp     [ebp+var_34], 0
.text:000006D2                 jnz     short loc_6DA
.text:000006D4                 mov     edx, [ebp+var_3C]
.text:000006D7                 mov     [ebp+var_34], edx
.text:000006DA
.text:000006DA loc_6DA:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+1CCj
.text:000006DA                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+226j
.text:000006DA                 mov     eax, [ebp+var_34]
.text:000006DD                 mov     [ebp+var_40], eax
.text:000006E0                 cmp     [ebp+var_40], 0
.text:000006E4                 jz      short loc_6EB
.text:000006E6                 mov     eax, [ebp+var_40]
.text:000006E9                 jmp     short loc_72F
.text:000006EB ; ---------------------------------------------------------------------------
.text:000006EB
.text:000006EB loc_6EB:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+238j
.text:000006EB                 mov     ecx, [ebp+arg_0] ; this
.text:000006EE                 call    ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize(void)
.text:000006F3                 movzx   ecx, al
.text:000006F6                 test    ecx, ecx
.text:000006F8                 jz      short loc_72D
.text:000006FA                 mov     edx, [ebp+var_10]
.text:000006FD                 mov     ecx, [edx+0Ch]  ; this
.text:00000700                 call    ?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetOutputProcessedSize(void)
.text:00000705                 mov     ecx, [ebp+arg_0]
.text:00000708                 mov     [ebp+var_54], eax
.text:0000070B                 mov     [ebp+var_50], edx
.text:0000070E                 mov     [ebp+var_58], ecx
.text:00000711                 mov     edx, [ebp+var_58]
.text:00000714                 mov     eax, [ebp+var_54]
.text:00000717                 cmp     eax, [edx]
.text:00000719                 jnz     short loc_726
.text:0000071B                 mov     ecx, [ebp+var_58]
.text:0000071E                 mov     edx, [ebp+var_50]
.text:00000721                 cmp     edx, [ecx+4]
.text:00000724                 jz      short loc_72D
.text:00000726
.text:00000726 loc_726:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+26Dj
.text:00000726                 mov     eax, 1
.text:0000072B                 jmp     short loc_72F
.text:0000072D ; ---------------------------------------------------------------------------
.text:0000072D
.text:0000072D loc_72D:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+24Cj
.text:0000072D                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+278j
.text:0000072D                 xor     eax, eax
.text:0000072F
.text:0000072F loc_72F:                                ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+4Cj
.text:0000072F                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+A1j ...
.text:0000072F                 push    edx
.text:00000730                 mov     ecx, ebp
.text:00000732                 push    eax
.text:00000733                 lea     edx, $LN20_0
.text:00000739                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000073E                 pop     eax
.text:0000073F                 pop     edx
.text:00000740                 mov     ecx, [ebp+var_C]
.text:00000743                 mov     large fs:0, ecx
.text:0000074A                 pop     ecx
.text:0000074B                 pop     edi
.text:0000074C                 pop     esi
.text:0000074D                 add     esp, 58h
.text:00000750                 cmp     ebp, esp
.text:00000752                 call    __RTC_CheckEsp
.text:00000757                 mov     esp, ebp
.text:00000759                 pop     ebp
.text:0000075A                 retn    0Ch
.text:0000075A ?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:0000075A
.text:0000075A ; ---------------------------------------------------------------------------
.text:0000075D                 align 10h
.text:00000760 $LN20_0         dd 1                    ; DATA XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+287o
.text:00000764                 dd offset $LN19
.text:00000768 $LN19           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000764o
.text:00000770                 dd offset $LN17         ; "setDecoderProperties"
.text:00000774 $LN17           db 'setDecoderProperties',0 ; DATA XREF: .text:00000770o
.text:00000789                 align 4
.text:0000078C
.text:0000078C ; =============== S U B R O U T I N E =======================================
.text:0000078C
.text:0000078C ; Attributes: bp-based frame
.text:0000078C
.text:0000078C ; __int32 __stdcall NArchive::NLzma::CHandler::GetNumberOfProperties(NArchive::NLzma::CHandler *this, unsigned int *)
.text:0000078C                 public ?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z
.text:0000078C ?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z proc near
.text:0000078C                                         ; DATA XREF: .rdata:00002A74o
.text:0000078C
.text:0000078C this            = dword ptr  8
.text:0000078C arg_4           = dword ptr  0Ch
.text:0000078C
.text:0000078C                 push    ebp
.text:0000078D                 mov     ebp, esp
.text:0000078F                 mov     eax, [ebp+arg_4]
.text:00000792                 mov     dword ptr [eax], 3
.text:00000798                 xor     eax, eax
.text:0000079A                 pop     ebp
.text:0000079B                 retn    8
.text:0000079B ?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z endp
.text:0000079B
.text:0000079B ; ---------------------------------------------------------------------------
.text:0000079E                 db 0Eh dup(0CCh)
.text:000007AC
.text:000007AC ; =============== S U B R O U T I N E =======================================
.text:000007AC
.text:000007AC ; Attributes: bp-based frame
.text:000007AC
.text:000007AC ; __int32 __stdcall NArchive::NLzma::CHandler::GetPropertyInfo(NArchive::NLzma::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000007AC                 public ?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000007AC ?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000007AC                                         ; DATA XREF: .rdata:00002A78o
.text:000007AC
.text:000007AC this            = dword ptr  8
.text:000007AC arg_4           = dword ptr  0Ch
.text:000007AC arg_8           = dword ptr  10h
.text:000007AC arg_C           = dword ptr  14h
.text:000007AC arg_10          = dword ptr  18h
.text:000007AC
.text:000007AC                 push    ebp
.text:000007AD                 mov     ebp, esp
.text:000007AF                 cmp     [ebp+arg_4], 3
.text:000007B3                 jb      short loc_7BC
.text:000007B5                 mov     eax, 80070057h
.text:000007BA                 jmp     short loc_7E9
.text:000007BC ; ---------------------------------------------------------------------------
.text:000007BC
.text:000007BC loc_7BC:                                ; CODE XREF: NArchive::NLzma::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000007BC                 mov     eax, [ebp+arg_4]
.text:000007BF                 movzx   ecx, _kProps[eax]
.text:000007C6                 mov     edx, [ebp+arg_C]
.text:000007C9                 mov     [edx], ecx
.text:000007CB                 mov     eax, [ebp+arg_C]
.text:000007CE                 mov     ecx, [eax]
.text:000007D0                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000007D8                 mov     eax, [ebp+arg_10]
.text:000007DB                 mov     [eax], dx
.text:000007DE                 mov     ecx, [ebp+arg_8]
.text:000007E1                 mov     dword ptr [ecx], 0
.text:000007E7                 xor     eax, eax
.text:000007E9
.text:000007E9 loc_7E9:                                ; CODE XREF: NArchive::NLzma::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000007E9                 pop     ebp
.text:000007EA                 retn    14h
.text:000007EA ?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000007EA
.text:000007EA ; ---------------------------------------------------------------------------
.text:000007ED                 db 0Fh dup(0CCh)
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC ; __int32 __stdcall NArchive::NLzma::CHandler::GetNumberOfArchiveProperties(NArchive::NLzma::CHandler *this, unsigned int *)
.text:000007FC                 public ?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z
.text:000007FC ?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z proc near
.text:000007FC                                         ; DATA XREF: .rdata:00002A7Co
.text:000007FC
.text:000007FC this            = dword ptr  8
.text:000007FC arg_4           = dword ptr  0Ch
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 mov     eax, [ebp+arg_4]
.text:00000802                 mov     dword ptr [eax], 1
.text:00000808                 xor     eax, eax
.text:0000080A                 pop     ebp
.text:0000080B                 retn    8
.text:0000080B ?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z endp
.text:0000080B
.text:0000080B ; ---------------------------------------------------------------------------
.text:0000080E                 db 0Eh dup(0CCh)
.text:0000081C
.text:0000081C ; =============== S U B R O U T I N E =======================================
.text:0000081C
.text:0000081C ; Attributes: bp-based frame
.text:0000081C
.text:0000081C ; __int32 __stdcall NArchive::NLzma::CHandler::GetArchivePropertyInfo(NArchive::NLzma::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:0000081C                 public ?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:0000081C ?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:0000081C                                         ; DATA XREF: .rdata:00002A80o
.text:0000081C
.text:0000081C this            = dword ptr  8
.text:0000081C arg_4           = dword ptr  0Ch
.text:0000081C arg_8           = dword ptr  10h
.text:0000081C arg_C           = dword ptr  14h
.text:0000081C arg_10          = dword ptr  18h
.text:0000081C
.text:0000081C                 push    ebp
.text:0000081D                 mov     ebp, esp
.text:0000081F                 cmp     [ebp+arg_4], 1
.text:00000823                 jb      short loc_82C
.text:00000825                 mov     eax, 80070057h
.text:0000082A                 jmp     short loc_859
.text:0000082C ; ---------------------------------------------------------------------------
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:0000082C                 mov     eax, [ebp+arg_4]
.text:0000082F                 movzx   ecx, _kArcProps[eax]
.text:00000836                 mov     edx, [ebp+arg_C]
.text:00000839                 mov     [edx], ecx
.text:0000083B                 mov     eax, [ebp+arg_C]
.text:0000083E                 mov     ecx, [eax]
.text:00000840                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000848                 mov     eax, [ebp+arg_10]
.text:0000084B                 mov     [eax], dx
.text:0000084E                 mov     ecx, [ebp+arg_8]
.text:00000851                 mov     dword ptr [ecx], 0
.text:00000857                 xor     eax, eax
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000859                 pop     ebp
.text:0000085A                 retn    14h
.text:0000085A ?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000085A
.text:0000085A ; ---------------------------------------------------------------------------
.text:0000085D                 db 0Fh dup(0CCh)
.text:0000086C
.text:0000086C ; =============== S U B R O U T I N E =======================================
.text:0000086C
.text:0000086C ; Attributes: bp-based frame
.text:0000086C
.text:0000086C ; __int32 __stdcall NArchive::NLzma::CHandler::GetArchiveProperty(NArchive::NLzma::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:0000086C                 public ?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000086C ?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:0000086C                                         ; DATA XREF: .rdata:00002A70o
.text:0000086C
.text:0000086C var_24          = dword ptr -24h
.text:0000086C var_20          = dword ptr -20h
.text:0000086C var_1C          = dword ptr -1Ch
.text:0000086C var_18          = dword ptr -18h
.text:0000086C var_14          = dword ptr -14h
.text:0000086C var_10          = dword ptr -10h
.text:0000086C var_C           = dword ptr -0Ch
.text:0000086C var_8           = dword ptr -8
.text:0000086C var_4           = dword ptr -4
.text:0000086C this            = dword ptr  8
.text:0000086C arg_4           = dword ptr  0Ch
.text:0000086C arg_8           = dword ptr  10h
.text:0000086C
.text:0000086C                 push    ebp
.text:0000086D                 mov     ebp, esp
.text:0000086F                 sub     esp, 24h
.text:00000872                 mov     eax, 0CCCCCCCCh
.text:00000877                 mov     [ebp+var_24], eax
.text:0000087A                 mov     [ebp+var_20], eax
.text:0000087D                 mov     [ebp+var_1C], eax
.text:00000880                 mov     [ebp+var_18], eax
.text:00000883                 mov     [ebp+var_14], eax
.text:00000886                 mov     [ebp+var_10], eax
.text:00000889                 mov     [ebp+var_C], eax
.text:0000088C                 mov     [ebp+var_8], eax
.text:0000088F                 mov     [ebp+var_4], eax
.text:00000892                 lea     ecx, [ebp+var_14] ; this
.text:00000895                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000089A                 mov     eax, [ebp+arg_4]
.text:0000089D                 mov     [ebp+var_24], eax
.text:000008A0                 mov     ecx, [ebp+var_24]
.text:000008A3                 sub     ecx, 2Ch ; ','
.text:000008A6                 mov     [ebp+var_24], ecx
.text:000008A9                 cmp     [ebp+var_24], 22h ; '"' ; switch 35 cases
.text:000008AD                 ja      $LN13           ; jumptable 000008BD default case
.text:000008B3                 mov     edx, [ebp+var_24]
.text:000008B6                 movzx   eax, ds:$LN17_0[edx]
.text:000008BD                 jmp     ds:$LN21_0[eax*4] ; switch jump
.text:000008C4 ; ---------------------------------------------------------------------------
.text:000008C4
.text:000008C4 $LN12:                                  ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:000008C4                                         ; DATA XREF: .text:$LN21_0o
.text:000008C4                 mov     ecx, [ebp+this] ; jumptable 000008BD case 0
.text:000008C7                 movzx   edx, byte ptr [ecx+30h]
.text:000008CB                 test    edx, edx
.text:000008CD                 jz      short loc_8E2
.text:000008CF                 mov     eax, [ebp+this]
.text:000008D2                 mov     ecx, [eax+3Ch]
.text:000008D5                 push    ecx
.text:000008D6                 mov     edx, [eax+38h]
.text:000008D9                 push    edx
.text:000008DA                 lea     ecx, [ebp+var_14]
.text:000008DD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000008E2
.text:000008E2 loc_8E2:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+61j
.text:000008E2                 jmp     $LN13           ; jumptable 000008BD default case
.text:000008E7 ; ---------------------------------------------------------------------------
.text:000008E7
.text:000008E7 $LN10:                                  ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:000008E7                                         ; DATA XREF: .text:$LN21_0o
.text:000008E7                 mov     eax, [ebp+this] ; jumptable 000008BD case 30
.text:000008EA                 movzx   ecx, byte ptr [eax+32h]
.text:000008EE                 test    ecx, ecx
.text:000008F0                 jz      short loc_905
.text:000008F2                 mov     edx, [ebp+this]
.text:000008F5                 mov     eax, [edx+4Ch]
.text:000008F8                 push    eax
.text:000008F9                 mov     ecx, [edx+48h]
.text:000008FC                 push    ecx
.text:000008FD                 lea     ecx, [ebp+var_14]
.text:00000900                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000905
.text:00000905 loc_905:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+84j
.text:00000905                 jmp     $LN13           ; jumptable 000008BD default case
.text:0000090A ; ---------------------------------------------------------------------------
.text:0000090A
.text:0000090A $LN8:                                   ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:0000090A                                         ; DATA XREF: .text:$LN21_0o
.text:0000090A                 mov     edx, [ebp+this] ; jumptable 000008BD case 34
.text:0000090D                 movzx   eax, byte ptr [edx+31h]
.text:00000911                 test    eax, eax
.text:00000913                 jz      short loc_928
.text:00000915                 mov     ecx, [ebp+this]
.text:00000918                 mov     edx, [ecx+44h]
.text:0000091B                 push    edx
.text:0000091C                 mov     eax, [ecx+40h]
.text:0000091F                 push    eax
.text:00000920                 lea     ecx, [ebp+var_14]
.text:00000923                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000928
.text:00000928 loc_928:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+A7j
.text:00000928                 jmp     short $LN13     ; jumptable 000008BD default case
.text:0000092A ; ---------------------------------------------------------------------------
.text:0000092A
.text:0000092A $LN6:                                   ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j
.text:0000092A                                         ; DATA XREF: .text:$LN21_0o
.text:0000092A                 mov     [ebp+var_1C], 0 ; jumptable 000008BD case 27
.text:00000931                 mov     ecx, [ebp+this]
.text:00000934                 movzx   edx, byte ptr [ecx+2Ch]
.text:00000938                 test    edx, edx
.text:0000093A                 jnz     short loc_945
.text:0000093C                 mov     eax, [ebp+var_1C]
.text:0000093F                 or      eax, 1
.text:00000942                 mov     [ebp+var_1C], eax
.text:00000945
.text:00000945 loc_945:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+CEj
.text:00000945                 mov     ecx, [ebp+this]
.text:00000948                 movzx   edx, byte ptr [ecx+2Fh]
.text:0000094C                 test    edx, edx
.text:0000094E                 jz      short loc_959
.text:00000950                 mov     eax, [ebp+var_1C]
.text:00000953                 or      eax, 20h
.text:00000956                 mov     [ebp+var_1C], eax
.text:00000959
.text:00000959 loc_959:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+E2j
.text:00000959                 mov     ecx, [ebp+this]
.text:0000095C                 movzx   edx, byte ptr [ecx+2Eh]
.text:00000960                 test    edx, edx
.text:00000962                 jz      short loc_96D
.text:00000964                 mov     eax, [ebp+var_1C]
.text:00000967                 or      eax, 40h
.text:0000096A                 mov     [ebp+var_1C], eax
.text:0000096D
.text:0000096D loc_96D:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+F6j
.text:0000096D                 mov     ecx, [ebp+this]
.text:00000970                 movzx   edx, byte ptr [ecx+33h]
.text:00000974                 test    edx, edx
.text:00000976                 jz      short loc_983
.text:00000978                 mov     eax, [ebp+var_1C]
.text:0000097B                 or      eax, 80h
.text:00000980                 mov     [ebp+var_1C], eax
.text:00000983
.text:00000983 loc_983:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+10Aj
.text:00000983                 mov     ecx, [ebp+this]
.text:00000986                 movzx   edx, byte ptr [ecx+34h]
.text:0000098A                 test    edx, edx
.text:0000098C                 jz      short loc_999
.text:0000098E                 mov     eax, [ebp+var_1C]
.text:00000991                 or      eax, 200h
.text:00000996                 mov     [ebp+var_1C], eax
.text:00000999
.text:00000999 loc_999:                                ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+120j
.text:00000999                 mov     ecx, [ebp+var_1C]
.text:0000099C                 push    ecx
.text:0000099D                 lea     ecx, [ebp+var_14]
.text:000009A0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000009A5
.text:000009A5 $LN13:                                  ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+41j
.text:000009A5                                         ; NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51j ...
.text:000009A5                 mov     edx, [ebp+arg_8] ; jumptable 000008BD default case
.text:000009A8                 push    edx             ; struct tagPROPVARIANT *
.text:000009A9                 lea     ecx, [ebp+var_14] ; this
.text:000009AC                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000009B1                 mov     [ebp+var_20], 0
.text:000009B8                 lea     ecx, [ebp+var_14] ; this
.text:000009BB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000009C0                 mov     eax, [ebp+var_20]
.text:000009C3                 push    edx
.text:000009C4                 mov     ecx, ebp
.text:000009C6                 push    eax
.text:000009C7                 lea     edx, $LN20_1
.text:000009CD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009D2                 pop     eax
.text:000009D3                 pop     edx
.text:000009D4                 add     esp, 24h
.text:000009D7                 cmp     ebp, esp
.text:000009D9                 call    __RTC_CheckEsp
.text:000009DE                 mov     esp, ebp
.text:000009E0                 pop     ebp
.text:000009E1                 retn    0Ch
.text:000009E1 ?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:000009E1
.text:000009E1 ; ---------------------------------------------------------------------------
.text:000009E4 $LN20_1         dd 1                    ; DATA XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+15Bo
.text:000009E8                 dd offset $LN19_0
.text:000009EC $LN19_0         dd 0FFFFFFECh, 10h      ; DATA XREF: .text:000009E8o
.text:000009F4                 dd offset $LN18_0       ; "prop"
.text:000009F8 $LN18_0         db 'prop',0             ; DATA XREF: .text:000009F4o
.text:000009FD                 align 10h
.text:00000A00 $LN21_0         dd offset $LN12         ; DATA XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51r
.text:00000A00                 dd offset $LN6          ; jump table for switch statement
.text:00000A00                 dd offset $LN10
.text:00000A00                 dd offset $LN8
.text:00000A00                 dd offset $LN13
.text:00000A14 $LN17_0         db      0,     4,     4,     4
.text:00000A14                                         ; DATA XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Ar
.text:00000A14                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:00000A14                 db      4,     4,     4,     4
.text:00000A14                 db      4,     4,     4,     4
.text:00000A14                 db      4,     4,     4,     4
.text:00000A14                 db      4,     4,     4,     4
.text:00000A14                 db      4,     4,     4,     1
.text:00000A14                 db      4,     4,     2,     4
.text:00000A14                 db      4,     4,     3
.text:00000A37                 db 5 dup(0CCh)
.text:00000A3C
.text:00000A3C ; =============== S U B R O U T I N E =======================================
.text:00000A3C
.text:00000A3C ; Attributes: bp-based frame
.text:00000A3C
.text:00000A3C ; __int32 __stdcall NArchive::NLzma::CHandler::GetNumberOfItems(NArchive::NLzma::CHandler *this, unsigned int *)
.text:00000A3C                 public ?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z
.text:00000A3C ?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z proc near
.text:00000A3C                                         ; DATA XREF: .rdata:00002A64o
.text:00000A3C
.text:00000A3C this            = dword ptr  8
.text:00000A3C arg_4           = dword ptr  0Ch
.text:00000A3C
.text:00000A3C                 push    ebp
.text:00000A3D                 mov     ebp, esp
.text:00000A3F                 mov     eax, [ebp+arg_4]
.text:00000A42                 mov     dword ptr [eax], 1
.text:00000A48                 xor     eax, eax
.text:00000A4A                 pop     ebp
.text:00000A4B                 retn    8
.text:00000A4B ?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z endp
.text:00000A4B
.text:00000A4B ; ---------------------------------------------------------------------------
.text:00000A4E                 db 0Eh dup(0CCh)
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C ; __int32 __stdcall NArchive::NLzma::CHandler::GetProperty(NArchive::NLzma::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000A5C                 public ?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000A5C ?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000A5C                                         ; DATA XREF: .rdata:00002A68o
.text:00000A5C
.text:00000A5C var_70          = dword ptr -70h
.text:00000A5C var_6C          = dword ptr -6Ch
.text:00000A5C var_68          = dword ptr -68h
.text:00000A5C var_60          = byte ptr -60h
.text:00000A5C var_18          = byte ptr -18h
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C this            = dword ptr  8
.text:00000A5C arg_8           = dword ptr  10h
.text:00000A5C arg_C           = dword ptr  14h
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 sub     esp, 70h
.text:00000A62                 push    edi
.text:00000A63                 lea     edi, [ebp+var_70]
.text:00000A66                 mov     ecx, 1Ch
.text:00000A6B                 mov     eax, 0CCCCCCCCh
.text:00000A70                 rep stosd
.text:00000A72                 mov     eax, dword ptr ds:___security_cookie
.text:00000A77                 xor     eax, ebp
.text:00000A79                 mov     [ebp+var_4], eax
.text:00000A7C                 lea     ecx, [ebp+var_18] ; this
.text:00000A7F                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000A84                 mov     eax, [ebp+arg_8]
.text:00000A87                 mov     [ebp+var_70], eax
.text:00000A8A                 cmp     [ebp+var_70], 7
.text:00000A8E                 jz      short loc_AA1
.text:00000A90                 cmp     [ebp+var_70], 8
.text:00000A94                 jz      short loc_ADA
.text:00000A96                 cmp     [ebp+var_70], 16h
.text:00000A9A                 jz      short loc_AFA
.text:00000A9C                 jmp     loc_B5D
.text:00000AA1 ; ---------------------------------------------------------------------------
.text:00000AA1
.text:00000AA1 loc_AA1:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+32j
.text:00000AA1                 mov     ecx, [ebp+this]
.text:00000AA4                 add     ecx, 24h ; '$'
.text:00000AA7                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000AAC                 test    eax, eax
.text:00000AAE                 jz      short loc_AD5
.text:00000AB0                 mov     ecx, [ebp+this]
.text:00000AB3                 add     ecx, 10h        ; this
.text:00000AB6                 call    ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize(void)
.text:00000ABB                 movzx   ecx, al
.text:00000ABE                 test    ecx, ecx
.text:00000AC0                 jz      short loc_AD5
.text:00000AC2                 mov     edx, [ebp+this]
.text:00000AC5                 mov     eax, [edx+14h]
.text:00000AC8                 push    eax
.text:00000AC9                 mov     ecx, [edx+10h]
.text:00000ACC                 push    ecx
.text:00000ACD                 lea     ecx, [ebp+var_18]
.text:00000AD0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000AD5
.text:00000AD5 loc_AD5:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+52j
.text:00000AD5                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+64j
.text:00000AD5                 jmp     loc_B5D
.text:00000ADA ; ---------------------------------------------------------------------------
.text:00000ADA
.text:00000ADA loc_ADA:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+38j
.text:00000ADA                 mov     edx, [ebp+this]
.text:00000ADD                 movzx   eax, byte ptr [edx+30h]
.text:00000AE1                 test    eax, eax
.text:00000AE3                 jz      short loc_AF8
.text:00000AE5                 mov     ecx, [ebp+this]
.text:00000AE8                 mov     edx, [ecx+3Ch]
.text:00000AEB                 push    edx
.text:00000AEC                 mov     eax, [ecx+38h]
.text:00000AEF                 push    eax
.text:00000AF0                 lea     ecx, [ebp+var_18]
.text:00000AF3                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000AF8
.text:00000AF8 loc_AF8:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+87j
.text:00000AF8                 jmp     short loc_B5D
.text:00000AFA ; ---------------------------------------------------------------------------
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3Ej
.text:00000AFA                 mov     ecx, [ebp+this]
.text:00000AFD                 add     ecx, 24h ; '$'
.text:00000B00                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000B05                 test    eax, eax
.text:00000B07                 jz      short loc_B5D
.text:00000B09                 lea     ecx, [ebp+var_60]
.text:00000B0C                 mov     [ebp+var_68], ecx
.text:00000B0F                 mov     edx, [ebp+this]
.text:00000B12                 movzx   eax, byte ptr [edx+18h]
.text:00000B16                 test    eax, eax
.text:00000B18                 jz      short loc_B2B
.text:00000B1A                 push    offset $SG70061 ; "BCJ "
.text:00000B1F                 mov     ecx, [ebp+var_68]
.text:00000B22                 push    ecx             ; char *
.text:00000B23                 call    ?MyStpCpy@@YGPADPADPBD@Z ; MyStpCpy(char *,char const *)
.text:00000B28                 mov     [ebp+var_68], eax
.text:00000B2B
.text:00000B2B loc_B2B:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+BCj
.text:00000B2B                 push    offset $SG70062 ; "LZMA:"
.text:00000B30                 mov     edx, [ebp+var_68]
.text:00000B33                 push    edx             ; char *
.text:00000B34                 call    ?MyStpCpy@@YGPADPADPBD@Z ; MyStpCpy(char *,char const *)
.text:00000B39                 mov     [ebp+var_68], eax
.text:00000B3C                 mov     eax, [ebp+var_68]
.text:00000B3F                 push    eax             ; char *
.text:00000B40                 mov     ecx, [ebp+this]
.text:00000B43                 add     ecx, 10h        ; this
.text:00000B46                 call    ?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHeader::GetDicSize(void)
.text:00000B4B                 push    eax             ; unsigned int
.text:00000B4C                 call    ?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z ; NArchive::NLzma::DictSizeToString(uint,char *)
.text:00000B51                 lea     ecx, [ebp+var_60]
.text:00000B54                 push    ecx
.text:00000B55                 lea     ecx, [ebp+var_18]
.text:00000B58                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000B5D
.text:00000B5D loc_B5D:                                ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+40j
.text:00000B5D                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_AD5j ...
.text:00000B5D                 mov     edx, [ebp+arg_C]
.text:00000B60                 push    edx             ; struct tagPROPVARIANT *
.text:00000B61                 lea     ecx, [ebp+var_18] ; this
.text:00000B64                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000B69                 mov     [ebp+var_6C], 0
.text:00000B70                 lea     ecx, [ebp+var_18] ; this
.text:00000B73                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000B78                 mov     eax, [ebp+var_6C]
.text:00000B7B                 push    edx
.text:00000B7C                 mov     ecx, ebp
.text:00000B7E                 push    eax
.text:00000B7F                 lea     edx, $LN15
.text:00000B85                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B8A                 pop     eax
.text:00000B8B                 pop     edx
.text:00000B8C                 pop     edi
.text:00000B8D                 mov     ecx, [ebp+var_4]
.text:00000B90                 xor     ecx, ebp
.text:00000B92                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B97                 add     esp, 70h
.text:00000B9A                 cmp     ebp, esp
.text:00000B9C                 call    __RTC_CheckEsp
.text:00000BA1                 mov     esp, ebp
.text:00000BA3                 pop     ebp
.text:00000BA4                 retn    10h
.text:00000BA4 ?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:00000BA4
.text:00000BA4 ; ---------------------------------------------------------------------------
.text:00000BA7                 align 4
.text:00000BA8 $LN15           dd 2                    ; DATA XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+123o
.text:00000BAC                 dd offset $LN14
.text:00000BB0 $LN14           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000BACo
.text:00000BB8                 dd offset $LN12_0       ; "prop"
.text:00000BBC                 dd 0FFFFFFA0h, 40h
.text:00000BC4                 dd offset $LN13_0
.text:00000BC8 $LN13_0         db 73h, 7Ah, 0          ; DATA XREF: .text:00000BC4o
.text:00000BCB $LN12_0         db 'prop',0             ; DATA XREF: .text:00000BB8o
.text:00000BD0                 db 0Ch dup(0CCh)
.text:00000BDC
.text:00000BDC ; =============== S U B R O U T I N E =======================================
.text:00000BDC
.text:00000BDC ; Attributes: bp-based frame
.text:00000BDC
.text:00000BDC ; int __stdcall NArchive::NLzma::DictSizeToString(unsigned int, char *)
.text:00000BDC ?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z proc near
.text:00000BDC                                         ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F0p
.text:00000BDC
.text:00000BDC var_8           = dword ptr -8
.text:00000BDC var_4           = dword ptr -4
.text:00000BDC arg_0           = dword ptr  8
.text:00000BDC arg_4           = dword ptr  0Ch
.text:00000BDC
.text:00000BDC                 push    ebp
.text:00000BDD                 mov     ebp, esp
.text:00000BDF                 sub     esp, 8
.text:00000BE2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BE9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BF0                 mov     [ebp+var_4], 0
.text:00000BF7                 jmp     short loc_C02
.text:00000BF9 ; ---------------------------------------------------------------------------
.text:00000BF9
.text:00000BF9 loc_BF9:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *):loc_C26j
.text:00000BF9                 mov     eax, [ebp+var_4]
.text:00000BFC                 add     eax, 1
.text:00000BFF                 mov     [ebp+var_4], eax
.text:00000C02
.text:00000C02 loc_C02:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+1Bj
.text:00000C02                 cmp     [ebp+var_4], 1Fh
.text:00000C06                 jg      short loc_C28
.text:00000C08                 mov     edx, 1
.text:00000C0D                 mov     ecx, [ebp+var_4]
.text:00000C10                 shl     edx, cl
.text:00000C12                 cmp     edx, [ebp+arg_0]
.text:00000C15                 jnz     short loc_C26
.text:00000C17                 mov     eax, [ebp+arg_4]
.text:00000C1A                 push    eax             ; char *
.text:00000C1B                 mov     ecx, [ebp+var_4]
.text:00000C1E                 push    ecx             ; unsigned int
.text:00000C1F                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000C24                 jmp     short loc_C91
.text:00000C26 ; ---------------------------------------------------------------------------
.text:00000C26
.text:00000C26 loc_C26:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+39j
.text:00000C26                 jmp     short loc_BF9
.text:00000C28 ; ---------------------------------------------------------------------------
.text:00000C28
.text:00000C28 loc_C28:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+2Aj
.text:00000C28                 mov     byte ptr [ebp+var_8+3], 62h ; 'b'
.text:00000C2C                 mov     edx, [ebp+arg_0]
.text:00000C2F                 and     edx, 0FFFFFh
.text:00000C35                 jnz     short loc_C46
.text:00000C37                 mov     eax, [ebp+arg_0]
.text:00000C3A                 shr     eax, 14h
.text:00000C3D                 mov     [ebp+arg_0], eax
.text:00000C40                 mov     byte ptr [ebp+var_8+3], 6Dh ; 'm'
.text:00000C44                 jmp     short loc_C5E
.text:00000C46 ; ---------------------------------------------------------------------------
.text:00000C46
.text:00000C46 loc_C46:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+59j
.text:00000C46                 mov     ecx, [ebp+arg_0]
.text:00000C49                 and     ecx, 3FFh
.text:00000C4F                 jnz     short loc_C5E
.text:00000C51                 mov     edx, [ebp+arg_0]
.text:00000C54                 shr     edx, 0Ah
.text:00000C57                 mov     [ebp+arg_0], edx
.text:00000C5A                 mov     byte ptr [ebp+var_8+3], 6Bh ; 'k'
.text:00000C5E
.text:00000C5E loc_C5E:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+68j
.text:00000C5E                                         ; NArchive::NLzma::DictSizeToString(uint,char *)+73j
.text:00000C5E                 mov     eax, [ebp+arg_4]
.text:00000C61                 push    eax             ; char *
.text:00000C62                 mov     ecx, [ebp+arg_0]
.text:00000C65                 push    ecx             ; unsigned int
.text:00000C66                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000C6B                 mov     edx, [ebp+arg_4]
.text:00000C6E                 push    edx             ; char *
.text:00000C6F                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000C74                 add     eax, [ebp+arg_4]
.text:00000C77                 mov     [ebp+arg_4], eax
.text:00000C7A                 mov     eax, [ebp+arg_4]
.text:00000C7D                 mov     cl, byte ptr [ebp+var_8+3]
.text:00000C80                 mov     [eax], cl
.text:00000C82                 mov     edx, [ebp+arg_4]
.text:00000C85                 add     edx, 1
.text:00000C88                 mov     [ebp+arg_4], edx
.text:00000C8B                 mov     eax, [ebp+arg_4]
.text:00000C8E                 mov     byte ptr [eax], 0
.text:00000C91
.text:00000C91 loc_C91:                                ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+48j
.text:00000C91                 add     esp, 8
.text:00000C94                 cmp     ebp, esp
.text:00000C96                 call    __RTC_CheckEsp
.text:00000C9B                 mov     esp, ebp
.text:00000C9D                 pop     ebp
.text:00000C9E                 retn    8
.text:00000C9E ?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z endp
.text:00000C9E
.text:00000C9E ; ---------------------------------------------------------------------------
.text:00000CA1                 db 0Bh dup(0CCh)
.text:00000CAC
.text:00000CAC ; =============== S U B R O U T I N E =======================================
.text:00000CAC
.text:00000CAC ; Attributes: bp-based frame
.text:00000CAC
.text:00000CAC ; __stdcall IsArc_Lzma(x, x)
.text:00000CAC _IsArc_Lzma@8   proc near               ; CODE XREF: IsArc_Lzma86(x,x)+43p
.text:00000CAC                                         ; DATA XREF: .rdata:00000044o
.text:00000CAC
.text:00000CAC var_14          = dword ptr -14h
.text:00000CAC var_10          = dword ptr -10h
.text:00000CAC var_C           = dword ptr -0Ch
.text:00000CAC var_8           = dword ptr -8
.text:00000CAC var_4           = dword ptr -4
.text:00000CAC arg_0           = dword ptr  8
.text:00000CAC arg_4           = dword ptr  0Ch
.text:00000CAC
.text:00000CAC                 push    ebp
.text:00000CAD                 mov     ebp, esp
.text:00000CAF                 sub     esp, 14h
.text:00000CB2                 mov     eax, 0CCCCCCCCh
.text:00000CB7                 mov     [ebp+var_14], eax
.text:00000CBA                 mov     [ebp+var_10], eax
.text:00000CBD                 mov     [ebp+var_C], eax
.text:00000CC0                 mov     [ebp+var_8], eax
.text:00000CC3                 mov     [ebp+var_4], eax
.text:00000CC6                 mov     [ebp+var_4], 0Dh
.text:00000CCD                 cmp     [ebp+arg_4], 0Dh
.text:00000CD1                 jnb     short loc_CDD
.text:00000CD3                 mov     eax, 2
.text:00000CD8                 jmp     loc_D8A
.text:00000CDD ; ---------------------------------------------------------------------------
.text:00000CDD
.text:00000CDD loc_CDD:                                ; CODE XREF: IsArc_Lzma(x,x)+25j
.text:00000CDD                 mov     eax, [ebp+arg_0]
.text:00000CE0                 movzx   ecx, byte ptr [eax]
.text:00000CE3                 cmp     ecx, 0E1h ; 'ß'
.text:00000CE9                 jl      short loc_CF2
.text:00000CEB                 xor     eax, eax
.text:00000CED                 jmp     loc_D8A
.text:00000CF2 ; ---------------------------------------------------------------------------
.text:00000CF2
.text:00000CF2 loc_CF2:                                ; CODE XREF: IsArc_Lzma(x,x)+3Dj
.text:00000CF2                 mov     edx, [ebp+arg_0]
.text:00000CF5                 mov     eax, [edx+5]
.text:00000CF8                 mov     [ebp+var_C], eax
.text:00000CFB                 mov     ecx, [edx+9]
.text:00000CFE                 mov     [ebp+var_8], ecx
.text:00000D01                 mov     edx, [ebp+var_C]
.text:00000D04                 and     edx, [ebp+var_8]
.text:00000D07                 cmp     edx, 0FFFFFFFFh
.text:00000D0A                 jz      short loc_D2C
.text:00000D0C                 mov     eax, [ebp+arg_4]
.text:00000D0F                 xor     ecx, ecx
.text:00000D11                 mov     [ebp+var_14], eax
.text:00000D14                 mov     [ebp+var_10], ecx
.text:00000D17                 cmp     [ebp+var_10], 1000000h
.text:00000D1E                 jb      short loc_D2C
.text:00000D20                 ja      short loc_D28
.text:00000D22                 cmp     [ebp+var_14], 0
.text:00000D26                 jb      short loc_D2C
.text:00000D28
.text:00000D28 loc_D28:                                ; CODE XREF: IsArc_Lzma(x,x)+74j
.text:00000D28                 xor     eax, eax
.text:00000D2A                 jmp     short loc_D8A
.text:00000D2C ; ---------------------------------------------------------------------------
.text:00000D2C
.text:00000D2C loc_D2C:                                ; CODE XREF: IsArc_Lzma(x,x)+5Ej
.text:00000D2C                                         ; IsArc_Lzma(x,x)+72j ...
.text:00000D2C                 mov     edx, [ebp+var_C]
.text:00000D2F                 or      edx, [ebp+var_8]
.text:00000D32                 jz      short loc_D6E
.text:00000D34                 cmp     [ebp+arg_4], 0Fh
.text:00000D38                 jnb     short loc_D41
.text:00000D3A                 mov     eax, 2
.text:00000D3F                 jmp     short loc_D8A
.text:00000D41 ; ---------------------------------------------------------------------------
.text:00000D41
.text:00000D41 loc_D41:                                ; CODE XREF: IsArc_Lzma(x,x)+8Cj
.text:00000D41                 mov     eax, [ebp+arg_0]
.text:00000D44                 movzx   ecx, byte ptr [eax+0Dh]
.text:00000D48                 test    ecx, ecx
.text:00000D4A                 jz      short loc_D50
.text:00000D4C                 xor     eax, eax
.text:00000D4E                 jmp     short loc_D8A
.text:00000D50 ; ---------------------------------------------------------------------------
.text:00000D50
.text:00000D50 loc_D50:                                ; CODE XREF: IsArc_Lzma(x,x)+9Ej
.text:00000D50                 mov     edx, [ebp+var_C]
.text:00000D53                 and     edx, [ebp+var_8]
.text:00000D56                 cmp     edx, 0FFFFFFFFh
.text:00000D59                 jz      short loc_D6E
.text:00000D5B                 mov     eax, [ebp+arg_0]
.text:00000D5E                 movzx   ecx, byte ptr [eax+0Eh]
.text:00000D62                 and     ecx, 80h
.text:00000D68                 jz      short loc_D6E
.text:00000D6A                 xor     eax, eax
.text:00000D6C                 jmp     short loc_D8A
.text:00000D6E ; ---------------------------------------------------------------------------
.text:00000D6E
.text:00000D6E loc_D6E:                                ; CODE XREF: IsArc_Lzma(x,x)+86j
.text:00000D6E                                         ; IsArc_Lzma(x,x)+ADj ...
.text:00000D6E                 mov     edx, [ebp+arg_0]
.text:00000D71                 add     edx, 1
.text:00000D74                 push    edx
.text:00000D75                 call    ?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z ; NArchive::NLzma::CheckDicSize(uchar const *)
.text:00000D7A                 movzx   eax, al
.text:00000D7D                 test    eax, eax
.text:00000D7F                 jnz     short loc_D85
.text:00000D81                 xor     eax, eax
.text:00000D83                 jmp     short loc_D8A
.text:00000D85 ; ---------------------------------------------------------------------------
.text:00000D85
.text:00000D85 loc_D85:                                ; CODE XREF: IsArc_Lzma(x,x)+D3j
.text:00000D85                 mov     eax, 1
.text:00000D8A
.text:00000D8A loc_D8A:                                ; CODE XREF: IsArc_Lzma(x,x)+2Cj
.text:00000D8A                                         ; IsArc_Lzma(x,x)+41j ...
.text:00000D8A                 add     esp, 14h
.text:00000D8D                 cmp     ebp, esp
.text:00000D8F                 call    __RTC_CheckEsp
.text:00000D94                 mov     esp, ebp
.text:00000D96                 pop     ebp
.text:00000D97                 retn    8
.text:00000D97 _IsArc_Lzma@8   endp
.text:00000D97
.text:00000D97 ; ---------------------------------------------------------------------------
.text:00000D9A                 align 4
.text:00000D9C
.text:00000D9C ; =============== S U B R O U T I N E =======================================
.text:00000D9C
.text:00000D9C ; Attributes: bp-based frame
.text:00000D9C
.text:00000D9C ; __stdcall IsArc_Lzma86(x, x)
.text:00000D9C _IsArc_Lzma86@8 proc near               ; DATA XREF: .rdata:00000078o
.text:00000D9C
.text:00000D9C var_4           = dword ptr -4
.text:00000D9C arg_0           = dword ptr  8
.text:00000D9C arg_4           = dword ptr  0Ch
.text:00000D9C
.text:00000D9C                 push    ebp
.text:00000D9D                 mov     ebp, esp
.text:00000D9F                 push    ecx
.text:00000DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DA7                 cmp     [ebp+arg_4], 1
.text:00000DAB                 jnb     short loc_DB4
.text:00000DAD                 mov     eax, 2
.text:00000DB2                 jmp     short loc_DE4
.text:00000DB4 ; ---------------------------------------------------------------------------
.text:00000DB4
.text:00000DB4 loc_DB4:                                ; CODE XREF: IsArc_Lzma86(x,x)+Fj
.text:00000DB4                 mov     eax, [ebp+arg_0]
.text:00000DB7                 mov     cl, [eax]
.text:00000DB9                 mov     byte ptr [ebp+var_4+3], cl
.text:00000DBC                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00000DC0                 test    edx, edx
.text:00000DC2                 jz      short loc_DD1
.text:00000DC4                 movzx   eax, byte ptr [ebp+var_4+3]
.text:00000DC8                 cmp     eax, 1
.text:00000DCB                 jz      short loc_DD1
.text:00000DCD                 xor     eax, eax
.text:00000DCF                 jmp     short loc_DE4
.text:00000DD1 ; ---------------------------------------------------------------------------
.text:00000DD1
.text:00000DD1 loc_DD1:                                ; CODE XREF: IsArc_Lzma86(x,x)+26j
.text:00000DD1                                         ; IsArc_Lzma86(x,x)+2Fj
.text:00000DD1                 mov     ecx, [ebp+arg_4]
.text:00000DD4                 sub     ecx, 1
.text:00000DD7                 push    ecx
.text:00000DD8                 mov     edx, [ebp+arg_0]
.text:00000DDB                 add     edx, 1
.text:00000DDE                 push    edx
.text:00000DDF                 call    _IsArc_Lzma@8   ; IsArc_Lzma(x,x)
.text:00000DE4
.text:00000DE4 loc_DE4:                                ; CODE XREF: IsArc_Lzma86(x,x)+16j
.text:00000DE4                                         ; IsArc_Lzma86(x,x)+33j
.text:00000DE4                 add     esp, 4
.text:00000DE7                 cmp     ebp, esp
.text:00000DE9                 call    __RTC_CheckEsp
.text:00000DEE                 mov     esp, ebp
.text:00000DF0                 pop     ebp
.text:00000DF1                 retn    8
.text:00000DF1 _IsArc_Lzma86@8 endp
.text:00000DF1
.text:00000DF1 ; ---------------------------------------------------------------------------
.text:00000DF4                 db 8 dup(0CCh)
.text:00000DFC
.text:00000DFC ; =============== S U B R O U T I N E =======================================
.text:00000DFC
.text:00000DFC ; Attributes: bp-based frame
.text:00000DFC
.text:00000DFC ; __int32 __stdcall NArchive::NLzma::CHandler::Open(NArchive::NLzma::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00000DFC                 public ?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000DFC ?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00000DFC                                         ; DATA XREF: .rdata:00002A5Co
.text:00000DFC
.text:00000DFC var_34          = dword ptr -34h
.text:00000DFC var_30          = dword ptr -30h
.text:00000DFC var_2C          = dword ptr -2Ch
.text:00000DFC var_28          = dword ptr -28h
.text:00000DFC var_24          = dword ptr -24h
.text:00000DFC var_1C          = byte ptr -1Ch
.text:00000DFC var_8           = dword ptr -8
.text:00000DFC var_4           = dword ptr -4
.text:00000DFC this            = dword ptr  8
.text:00000DFC arg_4           = dword ptr  0Ch
.text:00000DFC
.text:00000DFC                 push    ebp
.text:00000DFD                 mov     ebp, esp
.text:00000DFF                 sub     esp, 34h
.text:00000E02                 push    esi
.text:00000E03                 push    edi
.text:00000E04                 lea     edi, [ebp+var_34]
.text:00000E07                 mov     ecx, 0Dh
.text:00000E0C                 mov     eax, 0CCCCCCCCh
.text:00000E11                 rep stosd
.text:00000E13                 mov     eax, dword ptr ds:___security_cookie
.text:00000E18                 xor     eax, ebp
.text:00000E1A                 mov     [ebp+var_4], eax
.text:00000E1D                 mov     eax, [ebp+this]
.text:00000E20                 mov     ecx, [eax]
.text:00000E22                 mov     esi, esp
.text:00000E24                 mov     edx, [ebp+this]
.text:00000E27                 push    edx
.text:00000E28                 mov     eax, [ecx+10h]
.text:00000E2B                 call    eax
.text:00000E2D                 cmp     esi, esp
.text:00000E2F                 call    __RTC_CheckEsp
.text:00000E34                 mov     [ebp+var_8], 10h
.text:00000E3B                 push    10h             ; unsigned int
.text:00000E3D                 lea     ecx, [ebp+var_1C]
.text:00000E40                 push    ecx             ; void *
.text:00000E41                 mov     edx, [ebp+arg_4]
.text:00000E44                 push    edx             ; struct ISequentialInStream *
.text:00000E45                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00000E4A                 mov     [ebp+var_24], eax
.text:00000E4D                 cmp     [ebp+var_24], 0
.text:00000E51                 jz      short loc_E5B
.text:00000E53                 mov     eax, [ebp+var_24]
.text:00000E56                 jmp     loc_F4F
.text:00000E5B ; ---------------------------------------------------------------------------
.text:00000E5B
.text:00000E5B loc_E5B:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+55j
.text:00000E5B                 mov     eax, [ebp+this]
.text:00000E5E                 movzx   ecx, byte ptr [eax+20h]
.text:00000E62                 push    ecx             ; bool
.text:00000E63                 lea     edx, [ebp+var_1C]
.text:00000E66                 push    edx             ; unsigned __int8 *
.text:00000E67                 mov     ecx, [ebp+this]
.text:00000E6A                 add     ecx, 10h        ; this
.text:00000E6D                 call    ?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z ; NArchive::NLzma::CHeader::Parse(uchar const *,bool)
.text:00000E72                 movzx   eax, al
.text:00000E75                 test    eax, eax
.text:00000E77                 jnz     short loc_E83
.text:00000E79                 mov     eax, 1
.text:00000E7E                 jmp     loc_F4F
.text:00000E83 ; ---------------------------------------------------------------------------
.text:00000E83
.text:00000E83 loc_E83:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7Bj
.text:00000E83                 mov     ecx, [ebp+this] ; this
.text:00000E86                 call    ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHandler::GetHeaderSize(void)
.text:00000E8B                 lea     ecx, [ebp+eax+var_1C]
.text:00000E8F                 mov     [ebp+var_28], ecx
.text:00000E92                 mov     edx, [ebp+var_28]
.text:00000E95                 movzx   eax, byte ptr [edx]
.text:00000E98                 test    eax, eax
.text:00000E9A                 jz      short loc_EA6
.text:00000E9C                 mov     eax, 1
.text:00000EA1                 jmp     loc_F4F
.text:00000EA6 ; ---------------------------------------------------------------------------
.text:00000EA6
.text:00000EA6 loc_EA6:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+9Ej
.text:00000EA6                 mov     ecx, [ebp+this]
.text:00000EA9                 add     ecx, 38h ; '8'
.text:00000EAC                 mov     esi, esp
.text:00000EAE                 push    ecx
.text:00000EAF                 push    2
.text:00000EB1                 push    0
.text:00000EB3                 push    0
.text:00000EB5                 mov     edx, [ebp+arg_4]
.text:00000EB8                 mov     eax, [edx]
.text:00000EBA                 mov     ecx, [ebp+arg_4]
.text:00000EBD                 push    ecx
.text:00000EBE                 mov     edx, [eax+10h]
.text:00000EC1                 call    edx
.text:00000EC3                 cmp     esi, esp
.text:00000EC5                 call    __RTC_CheckEsp
.text:00000ECA                 mov     [ebp+var_2C], eax
.text:00000ECD                 cmp     [ebp+var_2C], 0
.text:00000ED1                 jz      short loc_ED8
.text:00000ED3                 mov     eax, [ebp+var_2C]
.text:00000ED6                 jmp     short loc_F4F
.text:00000ED8 ; ---------------------------------------------------------------------------
.text:00000ED8
.text:00000ED8 loc_ED8:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+D5j
.text:00000ED8                 mov     eax, [ebp+this]
.text:00000EDB                 mov     [ebp+var_30], eax
.text:00000EDE                 mov     ecx, [ebp+var_30]
.text:00000EE1                 cmp     dword ptr [ecx+3Ch], 0
.text:00000EE5                 ja      short loc_EF0
.text:00000EE7                 mov     edx, [ebp+var_30]
.text:00000EEA                 cmp     dword ptr [edx+38h], 18h
.text:00000EEE                 jb      short loc_F21
.text:00000EF0
.text:00000EF0 loc_EF0:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+E9j
.text:00000EF0                 mov     eax, [ebp+this]
.text:00000EF3                 mov     [ebp+var_34], eax
.text:00000EF6                 mov     ecx, [ebp+var_34]
.text:00000EF9                 mov     edx, [ebp+var_34]
.text:00000EFC                 mov     eax, [ecx+10h]
.text:00000EFF                 or      eax, [edx+14h]
.text:00000F02                 jnz     short loc_F21
.text:00000F04                 mov     ecx, [ebp+this]
.text:00000F07                 movzx   edx, byte ptr [ecx+18h]
.text:00000F0B                 test    edx, edx
.text:00000F0D                 jnz     short loc_F21
.text:00000F0F                 mov     eax, [ebp+this]
.text:00000F12                 movzx   ecx, byte ptr [eax+19h]
.text:00000F16                 test    ecx, ecx
.text:00000F18                 jnz     short loc_F21
.text:00000F1A                 mov     eax, 1
.text:00000F1F                 jmp     short loc_F4F
.text:00000F21 ; ---------------------------------------------------------------------------
.text:00000F21
.text:00000F21 loc_F21:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+F2j
.text:00000F21                                         ; NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+106j ...
.text:00000F21                 mov     edx, [ebp+this]
.text:00000F24                 mov     byte ptr [edx+2Ch], 1
.text:00000F28                 mov     eax, [ebp+arg_4]
.text:00000F2B                 push    eax
.text:00000F2C                 mov     ecx, [ebp+this]
.text:00000F2F                 add     ecx, 24h ; '$'
.text:00000F32                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000F37                 mov     ecx, [ebp+arg_4]
.text:00000F3A                 push    ecx
.text:00000F3B                 mov     ecx, [ebp+this]
.text:00000F3E                 add     ecx, 28h ; '('
.text:00000F41                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000F46                 mov     edx, [ebp+this]
.text:00000F49                 mov     byte ptr [edx+2Dh], 1
.text:00000F4D                 xor     eax, eax
.text:00000F4F
.text:00000F4F loc_F4F:                                ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5Aj
.text:00000F4F                                         ; NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+82j ...
.text:00000F4F                 push    edx
.text:00000F50                 mov     ecx, ebp
.text:00000F52                 push    eax
.text:00000F53                 lea     edx, $LN11
.text:00000F59                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F5E                 pop     eax
.text:00000F5F                 pop     edx
.text:00000F60                 pop     edi
.text:00000F61                 pop     esi
.text:00000F62                 mov     ecx, [ebp+var_4]
.text:00000F65                 xor     ecx, ebp
.text:00000F67                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000F6C                 add     esp, 34h
.text:00000F6F                 cmp     ebp, esp
.text:00000F71                 call    __RTC_CheckEsp
.text:00000F76                 mov     esp, ebp
.text:00000F78                 pop     ebp
.text:00000F79                 retn    10h
.text:00000F79 ?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00000F79
.text:00000F79 ; ---------------------------------------------------------------------------
.text:00000F7C $LN11           dd 1                    ; DATA XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+157o
.text:00000F80                 dd offset $LN10_0
.text:00000F84 $LN10_0         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00000F80o
.text:00000F8C                 dd offset $LN9
.text:00000F90 $LN9            dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000F8Co
.text:00000F9C
.text:00000F9C ; =============== S U B R O U T I N E =======================================
.text:00000F9C
.text:00000F9C ; Attributes: bp-based frame
.text:00000F9C
.text:00000F9C ; __int32 __stdcall NArchive::NLzma::CHandler::OpenSeq(NArchive::NLzma::CHandler *this, struct ISequentialInStream *)
.text:00000F9C                 public ?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:00000F9C ?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text:00000F9C                                         ; DATA XREF: .rdata:00002A48o
.text:00000F9C
.text:00000F9C this            = dword ptr  8
.text:00000F9C arg_4           = dword ptr  0Ch
.text:00000F9C
.text:00000F9C                 push    ebp
.text:00000F9D                 mov     ebp, esp
.text:00000F9F                 push    esi
.text:00000FA0                 mov     eax, [ebp+this]
.text:00000FA3                 sub     eax, 4
.text:00000FA6                 mov     ecx, [ebp+this]
.text:00000FA9                 mov     edx, [ecx-4]
.text:00000FAC                 mov     esi, esp
.text:00000FAE                 push    eax
.text:00000FAF                 mov     eax, [edx+10h]
.text:00000FB2                 call    eax
.text:00000FB4                 cmp     esi, esp
.text:00000FB6                 call    __RTC_CheckEsp
.text:00000FBB                 mov     ecx, [ebp+this]
.text:00000FBE                 mov     byte ptr [ecx+28h], 1
.text:00000FC2                 mov     edx, [ebp+arg_4]
.text:00000FC5                 push    edx
.text:00000FC6                 mov     ecx, [ebp+this]
.text:00000FC9                 add     ecx, 24h ; '$'
.text:00000FCC                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000FD1                 xor     eax, eax
.text:00000FD3                 pop     esi
.text:00000FD4                 cmp     ebp, esp
.text:00000FD6                 call    __RTC_CheckEsp
.text:00000FDB                 pop     ebp
.text:00000FDC                 retn    8
.text:00000FDC ?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text:00000FDC
.text:00000FDC ; ---------------------------------------------------------------------------
.text:00000FDF                 db 0Dh dup(0CCh)
.text:00000FEC
.text:00000FEC ; =============== S U B R O U T I N E =======================================
.text:00000FEC
.text:00000FEC ; Attributes: bp-based frame
.text:00000FEC
.text:00000FEC ; __int32 __stdcall NArchive::NLzma::CHandler::Close(NArchive::NLzma::CHandler *this)
.text:00000FEC                 public ?Close@CHandler@NLzma@NArchive@@UAGJXZ
.text:00000FEC ?Close@CHandler@NLzma@NArchive@@UAGJXZ proc near
.text:00000FEC                                         ; DATA XREF: .rdata:00002A60o
.text:00000FEC
.text:00000FEC this            = dword ptr  8
.text:00000FEC
.text:00000FEC                 push    ebp
.text:00000FED                 mov     ebp, esp
.text:00000FEF                 mov     eax, [ebp+this]
.text:00000FF2                 mov     byte ptr [eax+2Ch], 0
.text:00000FF6                 mov     ecx, [ebp+this]
.text:00000FF9                 mov     byte ptr [ecx+30h], 0
.text:00000FFD                 mov     edx, [ebp+this]
.text:00001000                 mov     byte ptr [edx+31h], 0
.text:00001004                 mov     eax, [ebp+this]
.text:00001007                 mov     byte ptr [eax+32h], 0
.text:0000100B                 mov     ecx, [ebp+this]
.text:0000100E                 mov     byte ptr [ecx+2Eh], 0
.text:00001012                 mov     edx, [ebp+this]
.text:00001015                 mov     byte ptr [edx+2Fh], 0
.text:00001019                 mov     eax, [ebp+this]
.text:0000101C                 mov     byte ptr [eax+33h], 0
.text:00001020                 mov     ecx, [ebp+this]
.text:00001023                 mov     byte ptr [ecx+34h], 0
.text:00001027                 mov     edx, [ebp+this]
.text:0000102A                 mov     dword ptr [edx+38h], 0
.text:00001031                 mov     dword ptr [edx+3Ch], 0
.text:00001038                 mov     eax, [ebp+this]
.text:0000103B                 mov     byte ptr [eax+2Dh], 0
.text:0000103F                 mov     ecx, [ebp+this]
.text:00001042                 add     ecx, 24h ; '$'
.text:00001045                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:0000104A                 mov     ecx, [ebp+this]
.text:0000104D                 add     ecx, 28h ; '('
.text:00001050                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00001055                 xor     eax, eax
.text:00001057                 cmp     ebp, esp
.text:00001059                 call    __RTC_CheckEsp
.text:0000105E                 pop     ebp
.text:0000105F                 retn    4
.text:0000105F ?Close@CHandler@NLzma@NArchive@@UAGJXZ endp
.text:0000105F
.text:0000105F ; ---------------------------------------------------------------------------
.text:00001062                 db 0Ah dup(0CCh)
.text:0000106C
.text:0000106C ; =============== S U B R O U T I N E =======================================
.text:0000106C
.text:0000106C ; Attributes: bp-based frame
.text:0000106C
.text:0000106C ; __int32 __stdcall NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(NArchive::NLzma::CCompressProgressInfoImp *this, const unsigned __int64 *, const unsigned __int64 *)
.text:0000106C                 public ?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z
.text:0000106C ?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z proc near
.text:0000106C
.text:0000106C var_24          = dword ptr -24h
.text:0000106C var_20          = dword ptr -20h
.text:0000106C var_1C          = dword ptr -1Ch
.text:0000106C var_18          = dword ptr -18h
.text:0000106C var_14          = dword ptr -14h
.text:0000106C var_10          = dword ptr -10h
.text:0000106C var_C           = dword ptr -0Ch
.text:0000106C var_8           = dword ptr -8
.text:0000106C var_4           = dword ptr -4
.text:0000106C this            = dword ptr  8
.text:0000106C arg_4           = dword ptr  0Ch
.text:0000106C
.text:0000106C                 push    ebp
.text:0000106D                 mov     ebp, esp
.text:0000106F                 sub     esp, 24h
.text:00001072                 push    esi
.text:00001073                 mov     eax, 0CCCCCCCCh
.text:00001078                 mov     [ebp+var_24], eax
.text:0000107B                 mov     [ebp+var_20], eax
.text:0000107E                 mov     [ebp+var_1C], eax
.text:00001081                 mov     [ebp+var_18], eax
.text:00001084                 mov     [ebp+var_14], eax
.text:00001087                 mov     [ebp+var_10], eax
.text:0000108A                 mov     [ebp+var_C], eax
.text:0000108D                 mov     [ebp+var_8], eax
.text:00001090                 mov     [ebp+var_4], eax
.text:00001093                 mov     ecx, [ebp+this]
.text:00001096                 add     ecx, 8
.text:00001099                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:0000109E                 test    eax, eax
.text:000010A0                 jz      short loc_10F6
.text:000010A2                 mov     [ebp+var_C], 0
.text:000010A9                 mov     [ebp+var_8], 0
.text:000010B0                 mov     eax, [ebp+this]
.text:000010B3                 mov     ecx, [ebp+arg_4]
.text:000010B6                 mov     edx, [eax+10h]
.text:000010B9                 add     edx, [ecx]
.text:000010BB                 mov     eax, [eax+14h]
.text:000010BE                 adc     eax, [ecx+4]
.text:000010C1                 mov     [ebp+var_1C], edx
.text:000010C4                 mov     [ebp+var_18], eax
.text:000010C7                 mov     ecx, [ebp+this]
.text:000010CA                 add     ecx, 8
.text:000010CD                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:000010D2                 mov     [ebp+var_24], eax
.text:000010D5                 mov     esi, esp
.text:000010D7                 lea     ecx, [ebp+var_1C]
.text:000010DA                 push    ecx
.text:000010DB                 lea     edx, [ebp+var_C]
.text:000010DE                 push    edx
.text:000010DF                 mov     eax, [ebp+var_24]
.text:000010E2                 push    eax
.text:000010E3                 mov     ecx, [ebp+var_24]
.text:000010E6                 mov     edx, [ecx]
.text:000010E8                 mov     eax, [edx+10h]
.text:000010EB                 call    eax
.text:000010ED                 cmp     esi, esp
.text:000010EF                 call    __RTC_CheckEsp
.text:000010F4                 jmp     short loc_10F8
.text:000010F6 ; ---------------------------------------------------------------------------
.text:000010F6
.text:000010F6 loc_10F6:                               ; CODE XREF: NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+34j
.text:000010F6                 xor     eax, eax
.text:000010F8
.text:000010F8 loc_10F8:                               ; CODE XREF: NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+88j
.text:000010F8                 push    edx
.text:000010F9                 mov     ecx, ebp
.text:000010FB                 push    eax
.text:000010FC                 lea     edx, $LN7
.text:00001102                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001107                 pop     eax
.text:00001108                 pop     edx
.text:00001109                 pop     esi
.text:0000110A                 add     esp, 24h
.text:0000110D                 cmp     ebp, esp
.text:0000110F                 call    __RTC_CheckEsp
.text:00001114                 mov     esp, ebp
.text:00001116                 pop     ebp
.text:00001117                 retn    0Ch
.text:00001117 ?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z endp
.text:00001117
.text:00001117 ; ---------------------------------------------------------------------------
.text:0000111A                 align 4
.text:0000111C $LN7            dd 2                    ; DATA XREF: NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+90o
.text:00001120                 dd offset $LN6_0
.text:00001124 $LN6_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001120o
.text:0000112C                 dd offset $LN4          ; "files"
.text:00001130                 dd 0FFFFFFE4h, 8
.text:00001138                 dd offset $LN5          ; "value"
.text:0000113C $LN5            db 'value',0            ; DATA XREF: .text:00001138o
.text:00001142 $LN4            db 'files',0            ; DATA XREF: .text:0000112Co
.text:00001148                 db 4 dup(0CCh)
.text:0000114C
.text:0000114C ; =============== S U B R O U T I N E =======================================
.text:0000114C
.text:0000114C ; Attributes: bp-based frame
.text:0000114C
.text:0000114C ; __int32 __cdecl NArchive::NLzma::CHandler::Extract(NArchive::NLzma::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:0000114C                 public ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000114C ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:0000114C                                         ; DATA XREF: .rdata:00002A6Co
.text:0000114C
.text:0000114C var_194         = dword ptr -194h
.text:0000114C var_190         = dword ptr -190h
.text:0000114C var_18C         = dword ptr -18Ch
.text:0000114C var_188         = dword ptr -188h
.text:0000114C var_184         = dword ptr -184h
.text:0000114C var_180         = dword ptr -180h
.text:0000114C var_17C         = dword ptr -17Ch
.text:0000114C var_178         = dword ptr -178h
.text:0000114C var_171         = byte ptr -171h
.text:0000114C var_170         = dword ptr -170h
.text:0000114C var_16C         = dword ptr -16Ch
.text:0000114C var_168         = dword ptr -168h
.text:0000114C var_164         = dword ptr -164h
.text:0000114C var_160         = dword ptr -160h
.text:0000114C var_15C         = dword ptr -15Ch
.text:0000114C var_158         = dword ptr -158h
.text:0000114C var_154         = dword ptr -154h
.text:0000114C var_150         = dword ptr -150h
.text:0000114C var_149         = byte ptr -149h
.text:0000114C var_148         = dword ptr -148h
.text:0000114C var_144         = dword ptr -144h
.text:0000114C var_140         = dword ptr -140h
.text:0000114C var_13C         = dword ptr -13Ch
.text:0000114C var_138         = dword ptr -138h
.text:0000114C var_134         = dword ptr -134h
.text:0000114C var_130         = dword ptr -130h
.text:0000114C var_129         = byte ptr -129h
.text:0000114C var_128         = dword ptr -128h
.text:0000114C var_124         = dword ptr -124h
.text:0000114C var_120         = dword ptr -120h
.text:0000114C var_118         = dword ptr -118h
.text:0000114C var_114         = dword ptr -114h
.text:0000114C var_110         = dword ptr -110h
.text:0000114C var_10C         = dword ptr -10Ch
.text:0000114C var_108         = dword ptr -108h
.text:0000114C var_104         = dword ptr -104h
.text:0000114C var_100         = dword ptr -100h
.text:0000114C var_FC          = dword ptr -0FCh
.text:0000114C var_F8          = dword ptr -0F8h
.text:0000114C var_F4          = dword ptr -0F4h
.text:0000114C var_F0          = dword ptr -0F0h
.text:0000114C var_EC          = dword ptr -0ECh
.text:0000114C var_E8          = dword ptr -0E8h
.text:0000114C var_E4          = dword ptr -0E4h
.text:0000114C var_E0          = dword ptr -0E0h
.text:0000114C var_DC          = dword ptr -0DCh
.text:0000114C var_D4          = byte ptr -0D4h
.text:0000114C var_C0          = dword ptr -0C0h
.text:0000114C var_B8          = dword ptr -0B8h
.text:0000114C var_B0          = dword ptr -0B0h
.text:0000114C var_A8          = byte ptr -0A8h
.text:0000114C var_94          = dword ptr -94h
.text:0000114C var_90          = dword ptr -90h
.text:0000114C var_89          = byte ptr -89h
.text:0000114C var_88          = dword ptr -88h
.text:0000114C var_84          = dword ptr -84h
.text:0000114C var_80          = dword ptr -80h
.text:0000114C var_7C          = dword ptr -7Ch
.text:0000114C var_78          = dword ptr -78h
.text:0000114C var_74          = dword ptr -74h
.text:0000114C var_6D          = byte ptr -6Dh
.text:0000114C var_6C          = dword ptr -6Ch
.text:0000114C var_68          = dword ptr -68h
.text:0000114C var_60          = byte ptr -60h
.text:0000114C var_54          = dword ptr -54h
.text:0000114C var_4C          = dword ptr -4Ch
.text:0000114C var_44          = byte ptr -44h
.text:0000114C var_3C          = dword ptr -3Ch
.text:0000114C var_34          = byte ptr -34h
.text:0000114C var_2C          = dword ptr -2Ch
.text:0000114C var_28          = dword ptr -28h
.text:0000114C var_24          = dword ptr -24h
.text:0000114C var_1C          = byte ptr -1Ch
.text:0000114C var_14          = dword ptr -14h
.text:0000114C var_10          = dword ptr -10h
.text:0000114C var_C           = dword ptr -0Ch
.text:0000114C var_4           = dword ptr -4
.text:0000114C this            = dword ptr  8
.text:0000114C arg_4           = dword ptr  0Ch
.text:0000114C arg_8           = dword ptr  10h
.text:0000114C arg_C           = dword ptr  14h
.text:0000114C arg_10          = dword ptr  18h
.text:0000114C
.text:0000114C ; FUNCTION CHUNK AT .text:00001A8F SIZE 0000003C BYTES
.text:0000114C
.text:0000114C                 push    ebp
.text:0000114D                 mov     ebp, esp
.text:0000114F                 push    0FFFFFFFFh
.text:00001151                 push    offset __ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001156                 mov     eax, large fs:0
.text:0000115C                 push    eax
.text:0000115D                 push    ecx
.text:0000115E                 sub     esp, 184h
.text:00001164                 push    ebx
.text:00001165                 push    esi
.text:00001166                 push    edi
.text:00001167                 lea     edi, [ebp+var_194]
.text:0000116D                 mov     ecx, 61h ; 'a'
.text:00001172                 mov     eax, 0CCCCCCCCh
.text:00001177                 rep stosd
.text:00001179                 mov     eax, dword ptr ds:___security_cookie
.text:0000117E                 xor     eax, ebp
.text:00001180                 mov     [ebp+var_14], eax
.text:00001183                 push    eax
.text:00001184                 lea     eax, [ebp+var_C]
.text:00001187                 mov     large fs:0, eax
.text:0000118D                 mov     [ebp+var_10], esp
.text:00001190                 mov     [ebp+var_4], 0
.text:00001197                 cmp     [ebp+arg_8], 0
.text:0000119B                 jnz     short loc_11A4
.text:0000119D                 xor     eax, eax
.text:0000119F                 jmp     loc_1A8F
.text:000011A4 ; ---------------------------------------------------------------------------
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Fj
.text:000011A4                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000011A8                 jz      short loc_11C2
.text:000011AA                 cmp     [ebp+arg_8], 1
.text:000011AE                 jnz     short loc_11B8
.text:000011B0                 mov     eax, [ebp+arg_4]
.text:000011B3                 cmp     dword ptr [eax], 0
.text:000011B6                 jz      short loc_11C2
.text:000011B8
.text:000011B8 loc_11B8:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62j
.text:000011B8                 mov     eax, 80070057h
.text:000011BD                 jmp     loc_1A8F
.text:000011C2 ; ---------------------------------------------------------------------------
.text:000011C2
.text:000011C2 loc_11C2:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Cj
.text:000011C2                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6Aj
.text:000011C2                 mov     ecx, [ebp+this]
.text:000011C5                 movzx   edx, byte ptr [ecx+30h]
.text:000011C9                 test    edx, edx
.text:000011CB                 jz      short loc_11EF
.text:000011CD                 mov     esi, esp
.text:000011CF                 mov     eax, [ebp+this]
.text:000011D2                 mov     ecx, [eax+3Ch]
.text:000011D5                 push    ecx
.text:000011D6                 mov     edx, [eax+38h]
.text:000011D9                 push    edx
.text:000011DA                 mov     eax, [ebp+arg_10]
.text:000011DD                 push    eax
.text:000011DE                 mov     ecx, [ebp+arg_10]
.text:000011E1                 mov     edx, [ecx]
.text:000011E3                 mov     eax, [edx+0Ch]
.text:000011E6                 call    eax
.text:000011E8                 cmp     esi, esp
.text:000011EA                 call    __RTC_CheckEsp
.text:000011EF
.text:000011EF loc_11EF:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Fj
.text:000011EF                 lea     ecx, [ebp+var_1C]
.text:000011F2                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000011F7                 mov     [ebp+var_120], eax
.text:000011FD                 mov     byte ptr [ebp+var_4], 1
.text:00001201                 xor     ecx, ecx
.text:00001203                 cmp     [ebp+arg_C], 0
.text:00001207                 setnz   cl
.text:0000120A                 mov     [ebp+var_24], ecx
.text:0000120D                 lea     ecx, [ebp+var_1C]
.text:00001210                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001215                 mov     [ebp+var_124], eax
.text:0000121B                 mov     esi, esp
.text:0000121D                 mov     edx, [ebp+var_24]
.text:00001220                 push    edx
.text:00001221                 mov     eax, [ebp+var_124]
.text:00001227                 push    eax
.text:00001228                 push    0
.text:0000122A                 mov     ecx, [ebp+arg_10]
.text:0000122D                 push    ecx
.text:0000122E                 mov     edx, [ebp+arg_10]
.text:00001231                 mov     eax, [edx]
.text:00001233                 mov     ecx, [eax+14h]
.text:00001236                 call    ecx
.text:00001238                 cmp     esi, esp
.text:0000123A                 call    __RTC_CheckEsp
.text:0000123F                 mov     [ebp+var_128], eax
.text:00001245                 mov     edx, [ebp+var_128]
.text:0000124B                 mov     [ebp+var_28], edx
.text:0000124E                 cmp     [ebp+var_28], 0
.text:00001252                 jz      short loc_1274
.text:00001254                 mov     eax, [ebp+var_28]
.text:00001257                 mov     [ebp+var_E4], eax
.text:0000125D                 mov     byte ptr [ebp+var_4], 0
.text:00001261                 lea     ecx, [ebp+var_1C]
.text:00001264                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001269                 mov     eax, [ebp+var_E4]
.text:0000126F                 jmp     loc_1A8F
.text:00001274 ; ---------------------------------------------------------------------------
.text:00001274
.text:00001274 loc_1274:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+106j
.text:00001274                 cmp     [ebp+arg_C], 0
.text:00001278                 jnz     short loc_12B4
.text:0000127A                 lea     ecx, [ebp+var_1C]
.text:0000127D                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001282                 mov     [ebp+var_129], al
.text:00001288                 movzx   ecx, [ebp+var_129]
.text:0000128F                 test    ecx, ecx
.text:00001291                 jz      short loc_12B4
.text:00001293                 mov     [ebp+var_E8], 0
.text:0000129D                 mov     byte ptr [ebp+var_4], 0
.text:000012A1                 lea     ecx, [ebp+var_1C]
.text:000012A4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000012A9                 mov     eax, [ebp+var_E8]
.text:000012AF                 jmp     loc_1A8F
.text:000012B4 ; ---------------------------------------------------------------------------
.text:000012B4
.text:000012B4 loc_12B4:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+12Cj
.text:000012B4                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+145j
.text:000012B4                 mov     esi, esp
.text:000012B6                 mov     edx, [ebp+var_24]
.text:000012B9                 push    edx
.text:000012BA                 mov     eax, [ebp+arg_10]
.text:000012BD                 push    eax
.text:000012BE                 mov     ecx, [ebp+arg_10]
.text:000012C1                 mov     edx, [ecx]
.text:000012C3                 mov     eax, [edx+18h]
.text:000012C6                 call    eax
.text:000012C8                 cmp     esi, esp
.text:000012CA                 call    __RTC_CheckEsp
.text:000012CF                 push    18h             ; unsigned int
.text:000012D1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000012D6                 add     esp, 4
.text:000012D9                 mov     [ebp+var_130], eax
.text:000012DF                 mov     ecx, [ebp+var_130]
.text:000012E5                 mov     [ebp+var_F0], ecx
.text:000012EB                 mov     byte ptr [ebp+var_4], 2
.text:000012EF                 cmp     [ebp+var_F0], 0
.text:000012F6                 jz      short loc_1317
.text:000012F8                 mov     ecx, [ebp+var_F0]
.text:000012FE                 call    ??0CDummyOutStream@@QAE@XZ ; CDummyOutStream::CDummyOutStream(void)
.text:00001303                 mov     [ebp+var_134], eax
.text:00001309                 mov     edx, [ebp+var_134]
.text:0000130F                 mov     [ebp+var_138], edx
.text:00001315                 jmp     short loc_1321
.text:00001317 ; ---------------------------------------------------------------------------
.text:00001317
.text:00001317 loc_1317:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1AAj
.text:00001317                 mov     [ebp+var_138], 0
.text:00001321
.text:00001321 loc_1321:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C9j
.text:00001321                 mov     eax, [ebp+var_138]
.text:00001327                 mov     [ebp+var_EC], eax
.text:0000132D                 mov     byte ptr [ebp+var_4], 1
.text:00001331                 mov     ecx, [ebp+var_EC]
.text:00001337                 mov     [ebp+var_2C], ecx
.text:0000133A                 mov     edx, [ebp+var_2C]
.text:0000133D                 push    edx
.text:0000133E                 lea     ecx, [ebp+var_34]
.text:00001341                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00001346                 mov     byte ptr [ebp+var_4], 3
.text:0000134A                 lea     ecx, [ebp+var_1C]
.text:0000134D                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001352                 mov     [ebp+var_13C], eax
.text:00001358                 mov     eax, [ebp+var_13C]
.text:0000135E                 push    eax             ; struct ISequentialOutStream *
.text:0000135F                 mov     ecx, [ebp+var_2C] ; this
.text:00001362                 call    ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream(ISequentialOutStream *)
.text:00001367                 mov     ecx, [ebp+var_2C] ; this
.text:0000136A                 call    ?Init@CDummyOutStream@@QAEXXZ ; CDummyOutStream::Init(void)
.text:0000136F                 lea     ecx, [ebp+var_1C]
.text:00001372                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00001377                 push    38h ; '8'       ; unsigned int
.text:00001379                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000137E                 add     esp, 4
.text:00001381                 mov     [ebp+var_140], eax
.text:00001387                 mov     ecx, [ebp+var_140]
.text:0000138D                 mov     [ebp+var_F8], ecx
.text:00001393                 mov     byte ptr [ebp+var_4], 4
.text:00001397                 cmp     [ebp+var_F8], 0
.text:0000139E                 jz      short loc_13BF
.text:000013A0                 mov     ecx, [ebp+var_F8]
.text:000013A6                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000013AB                 mov     [ebp+var_144], eax
.text:000013B1                 mov     edx, [ebp+var_144]
.text:000013B7                 mov     [ebp+var_148], edx
.text:000013BD                 jmp     short loc_13C9
.text:000013BF ; ---------------------------------------------------------------------------
.text:000013BF
.text:000013BF loc_13BF:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+252j
.text:000013BF                 mov     [ebp+var_148], 0
.text:000013C9
.text:000013C9 loc_13C9:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+271j
.text:000013C9                 mov     eax, [ebp+var_148]
.text:000013CF                 mov     [ebp+var_F4], eax
.text:000013D5                 mov     byte ptr [ebp+var_4], 3
.text:000013D9                 mov     ecx, [ebp+var_F4]
.text:000013DF                 mov     [ebp+var_3C], ecx
.text:000013E2                 mov     edx, [ebp+var_3C]
.text:000013E5                 push    edx
.text:000013E6                 lea     ecx, [ebp+var_44]
.text:000013E9                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:000013EE                 mov     byte ptr [ebp+var_4], 5
.text:000013F2                 push    1               ; bool
.text:000013F4                 mov     eax, [ebp+arg_10]
.text:000013F7                 push    eax             ; struct IProgress *
.text:000013F8                 mov     ecx, [ebp+var_3C] ; this
.text:000013FB                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00001400                 mov     ecx, [ebp+this]
.text:00001403                 movzx   edx, byte ptr [ecx+2Dh]
.text:00001407                 test    edx, edx
.text:00001409                 jz      loc_14F5
.text:0000140F                 mov     ecx, [ebp+this]
.text:00001412                 add     ecx, 24h ; '$'
.text:00001415                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:0000141A                 mov     [ebp+var_149], al
.text:00001420                 movzx   eax, [ebp+var_149]
.text:00001427                 test    eax, eax
.text:00001429                 jz      short loc_1464
.text:0000142B                 mov     [ebp+var_FC], 80004005h
.text:00001435                 mov     byte ptr [ebp+var_4], 3
.text:00001439                 lea     ecx, [ebp+var_44]
.text:0000143C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001441                 mov     byte ptr [ebp+var_4], 1
.text:00001445                 lea     ecx, [ebp+var_34]
.text:00001448                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000144D                 mov     byte ptr [ebp+var_4], 0
.text:00001451                 lea     ecx, [ebp+var_1C]
.text:00001454                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001459                 mov     eax, [ebp+var_FC]
.text:0000145F                 jmp     loc_1A8F
.text:00001464 ; ---------------------------------------------------------------------------
.text:00001464
.text:00001464 loc_1464:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2DDj
.text:00001464                 mov     ecx, [ebp+this]
.text:00001467                 add     ecx, 24h ; '$'
.text:0000146A                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000146F                 mov     [ebp+var_150], eax
.text:00001475                 mov     ecx, [ebp+var_150]
.text:0000147B                 mov     [ebp+var_154], ecx
.text:00001481                 mov     esi, esp
.text:00001483                 push    0
.text:00001485                 push    0
.text:00001487                 push    0
.text:00001489                 push    0
.text:0000148B                 mov     edx, [ebp+var_154]
.text:00001491                 push    edx
.text:00001492                 mov     eax, [ebp+var_154]
.text:00001498                 mov     ecx, [eax]
.text:0000149A                 mov     edx, [ecx+10h]
.text:0000149D                 call    edx
.text:0000149F                 cmp     esi, esp
.text:000014A1                 call    __RTC_CheckEsp
.text:000014A6                 mov     [ebp+var_158], eax
.text:000014AC                 mov     eax, [ebp+var_158]
.text:000014B2                 mov     [ebp+var_4C], eax
.text:000014B5                 cmp     [ebp+var_4C], 0
.text:000014B9                 jz      short loc_14F3
.text:000014BB                 mov     ecx, [ebp+var_4C]
.text:000014BE                 mov     [ebp+var_100], ecx
.text:000014C4                 mov     byte ptr [ebp+var_4], 3
.text:000014C8                 lea     ecx, [ebp+var_44]
.text:000014CB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000014D0                 mov     byte ptr [ebp+var_4], 1
.text:000014D4                 lea     ecx, [ebp+var_34]
.text:000014D7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000014DC                 mov     byte ptr [ebp+var_4], 0
.text:000014E0                 lea     ecx, [ebp+var_1C]
.text:000014E3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000014E8                 mov     eax, [ebp+var_100]
.text:000014EE                 jmp     loc_1A8F
.text:000014F3 ; ---------------------------------------------------------------------------
.text:000014F3
.text:000014F3 loc_14F3:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+36Dj
.text:000014F3                 jmp     short loc_14FC
.text:000014F5 ; ---------------------------------------------------------------------------
.text:000014F5
.text:000014F5 loc_14F5:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2BDj
.text:000014F5                 mov     edx, [ebp+this]
.text:000014F8                 mov     byte ptr [edx+2Dh], 1
.text:000014FC
.text:000014FC loc_14FC:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_14F3j
.text:000014FC                 lea     ecx, [ebp+var_60] ; this
.text:000014FF                 call    ??0CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::CDecoder(void)
.text:00001504                 mov     [ebp+var_15C], eax
.text:0000150A                 mov     byte ptr [ebp+var_4], 6
.text:0000150E                 mov     ecx, [ebp+this]
.text:00001511                 add     ecx, 28h ; '('
.text:00001514                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00001519                 mov     [ebp+var_160], eax
.text:0000151F                 mov     eax, [ebp+var_160]
.text:00001525                 push    eax             ; struct ISequentialInStream *
.text:00001526                 mov     ecx, [ebp+this]
.text:00001529                 movzx   edx, byte ptr [ecx+20h]
.text:0000152D                 push    edx             ; bool
.text:0000152E                 lea     ecx, [ebp+var_60] ; this
.text:00001531                 call    ?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z ; NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)
.text:00001536                 mov     [ebp+var_164], eax
.text:0000153C                 mov     eax, [ebp+var_164]
.text:00001542                 mov     [ebp+var_68], eax
.text:00001545                 mov     ecx, [ebp+var_68]
.text:00001548                 mov     [ebp+var_6C], ecx
.text:0000154B                 cmp     [ebp+var_6C], 0
.text:0000154F                 jz      short loc_1595
.text:00001551                 mov     edx, [ebp+var_6C]
.text:00001554                 mov     [ebp+var_104], edx
.text:0000155A                 mov     byte ptr [ebp+var_4], 5
.text:0000155E                 lea     ecx, [ebp+var_60] ; this
.text:00001561                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:00001566                 mov     byte ptr [ebp+var_4], 3
.text:0000156A                 lea     ecx, [ebp+var_44]
.text:0000156D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001572                 mov     byte ptr [ebp+var_4], 1
.text:00001576                 lea     ecx, [ebp+var_34]
.text:00001579                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000157E                 mov     byte ptr [ebp+var_4], 0
.text:00001582                 lea     ecx, [ebp+var_1C]
.text:00001585                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000158A                 mov     eax, [ebp+var_104]
.text:00001590                 jmp     loc_1A8F
.text:00001595 ; ---------------------------------------------------------------------------
.text:00001595
.text:00001595 loc_1595:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+403j
.text:00001595                 mov     [ebp+var_6D], 1
.text:00001599                 mov     [ebp+var_78], 0
.text:000015A0                 mov     [ebp+var_74], 0
.text:000015A7                 mov     [ebp+var_80], 0
.text:000015AE                 mov     [ebp+var_7C], 0
.text:000015B5                 mov     [ebp+var_88], 0
.text:000015BF                 mov     [ebp+var_84], 0
.text:000015C9                 mov     [ebp+var_89], 0
.text:000015D0
.text:000015D0 loc_15D0:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_1885j
.text:000015D0                 mov     eax, [ebp+var_3C]
.text:000015D3                 mov     ecx, [ebp+var_78]
.text:000015D6                 mov     [eax+20h], ecx
.text:000015D9                 mov     edx, [ebp+var_74]
.text:000015DC                 mov     [eax+24h], edx
.text:000015DF                 mov     eax, [ebp+var_3C]
.text:000015E2                 mov     ecx, [ebp+var_80]
.text:000015E5                 mov     [eax+28h], ecx
.text:000015E8                 mov     edx, [ebp+var_7C]
.text:000015EB                 mov     [eax+2Ch], edx
.text:000015EE                 mov     ecx, [ebp+var_3C] ; this
.text:000015F1                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:000015F6                 mov     [ebp+var_168], eax
.text:000015FC                 mov     eax, [ebp+var_168]
.text:00001602                 mov     [ebp+var_90], eax
.text:00001608                 cmp     [ebp+var_90], 0
.text:0000160F                 jz      short loc_1658
.text:00001611                 mov     ecx, [ebp+var_90]
.text:00001617                 mov     [ebp+var_108], ecx
.text:0000161D                 mov     byte ptr [ebp+var_4], 5
.text:00001621                 lea     ecx, [ebp+var_60] ; this
.text:00001624                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:00001629                 mov     byte ptr [ebp+var_4], 3
.text:0000162D                 lea     ecx, [ebp+var_44]
.text:00001630                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001635                 mov     byte ptr [ebp+var_4], 1
.text:00001639                 lea     ecx, [ebp+var_34]
.text:0000163C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001641                 mov     byte ptr [ebp+var_4], 0
.text:00001645                 lea     ecx, [ebp+var_1C]
.text:00001648                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000164D                 mov     eax, [ebp+var_108]
.text:00001653                 jmp     loc_1A8F
.text:00001658 ; ---------------------------------------------------------------------------
.text:00001658
.text:00001658 loc_1658:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4C3j
.text:00001658                 mov     [ebp+var_94], 0Eh
.text:00001662                 mov     ecx, [ebp+this] ; this
.text:00001665                 call    ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHandler::GetHeaderSize(void)
.text:0000166A                 mov     [ebp+var_16C], eax
.text:00001670                 mov     edx, [ebp+var_16C]
.text:00001676                 mov     [ebp+var_B0], edx
.text:0000167C                 lea     eax, [ebp+var_B8]
.text:00001682                 push    eax             ; unsigned int *
.text:00001683                 mov     ecx, [ebp+var_B0]
.text:00001689                 push    ecx             ; unsigned int
.text:0000168A                 lea     edx, [ebp+var_A8]
.text:00001690                 push    edx             ; unsigned __int8 *
.text:00001691                 lea     ecx, [ebp+var_60] ; this
.text:00001694                 call    ?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z ; NArchive::NLzma::CDecoder::ReadInput(uchar *,uint,uint *)
.text:00001699                 mov     [ebp+var_170], eax
.text:0000169F                 mov     eax, [ebp+var_170]
.text:000016A5                 mov     [ebp+var_C0], eax
.text:000016AB                 cmp     [ebp+var_C0], 0
.text:000016B2                 jz      short loc_16FB
.text:000016B4                 mov     ecx, [ebp+var_C0]
.text:000016BA                 mov     [ebp+var_10C], ecx
.text:000016C0                 mov     byte ptr [ebp+var_4], 5
.text:000016C4                 lea     ecx, [ebp+var_60] ; this
.text:000016C7                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:000016CC                 mov     byte ptr [ebp+var_4], 3
.text:000016D0                 lea     ecx, [ebp+var_44]
.text:000016D3                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000016D8                 mov     byte ptr [ebp+var_4], 1
.text:000016DC                 lea     ecx, [ebp+var_34]
.text:000016DF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000016E4                 mov     byte ptr [ebp+var_4], 0
.text:000016E8                 lea     ecx, [ebp+var_1C]
.text:000016EB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000016F0                 mov     eax, [ebp+var_10C]
.text:000016F6                 jmp     loc_1A8F
.text:000016FB ; ---------------------------------------------------------------------------
.text:000016FB
.text:000016FB loc_16FB:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+566j
.text:000016FB                 mov     edx, [ebp+var_B8]
.text:00001701                 cmp     edx, [ebp+var_B0]
.text:00001707                 jz      short loc_171E
.text:00001709                 cmp     [ebp+var_B8], 0
.text:00001710                 jz      short loc_1719
.text:00001712                 mov     [ebp+var_89], 1
.text:00001719
.text:00001719 loc_1719:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5C4j
.text:00001719                 jmp     loc_188A
.text:0000171E ; ---------------------------------------------------------------------------
.text:0000171E
.text:0000171E loc_171E:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5BBj
.text:0000171E                 mov     eax, [ebp+this]
.text:00001721                 movzx   ecx, byte ptr [eax+20h]
.text:00001725                 push    ecx             ; bool
.text:00001726                 lea     edx, [ebp+var_A8]
.text:0000172C                 push    edx             ; unsigned __int8 *
.text:0000172D                 lea     ecx, [ebp+var_D4] ; this
.text:00001733                 call    ?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z ; NArchive::NLzma::CHeader::Parse(uchar const *,bool)
.text:00001738                 mov     [ebp+var_171], al
.text:0000173E                 movzx   eax, [ebp+var_171]
.text:00001745                 test    eax, eax
.text:00001747                 jnz     short loc_1755
.text:00001749                 mov     [ebp+var_89], 1
.text:00001750                 jmp     loc_188A
.text:00001755 ; ---------------------------------------------------------------------------
.text:00001755
.text:00001755 loc_1755:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5FBj
.text:00001755                 mov     ecx, [ebp+var_88]
.text:0000175B                 add     ecx, 1
.text:0000175E                 mov     edx, [ebp+var_84]
.text:00001764                 adc     edx, 0
.text:00001767                 mov     [ebp+var_88], ecx
.text:0000176D                 mov     [ebp+var_84], edx
.text:00001773                 mov     [ebp+var_6D], 0
.text:00001777                 lea     ecx, [ebp+var_44]
.text:0000177A                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000177F                 mov     [ebp+var_178], eax
.text:00001785                 lea     ecx, [ebp+var_34]
.text:00001788                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000178D                 mov     [ebp+var_17C], eax
.text:00001793                 mov     eax, [ebp+var_178]
.text:00001799                 push    eax             ; struct ICompressProgressInfo *
.text:0000179A                 mov     ecx, [ebp+var_17C]
.text:000017A0                 push    ecx             ; struct ISequentialOutStream *
.text:000017A1                 lea     edx, [ebp+var_D4]
.text:000017A7                 push    edx             ; struct NArchive::NLzma::CHeader *
.text:000017A8                 lea     ecx, [ebp+var_60] ; this
.text:000017AB                 call    ?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)
.text:000017B0                 mov     [ebp+var_180], eax
.text:000017B6                 mov     eax, [ebp+var_180]
.text:000017BC                 mov     [ebp+var_68], eax
.text:000017BF                 lea     ecx, [ebp+var_60] ; this
.text:000017C2                 call    ?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ ; NArchive::NLzma::CDecoder::GetInputProcessedSize(void)
.text:000017C7                 mov     [ebp+var_188], eax
.text:000017CD                 mov     [ebp+var_184], edx
.text:000017D3                 mov     ecx, [ebp+var_188]
.text:000017D9                 mov     [ebp+var_78], ecx
.text:000017DC                 mov     edx, [ebp+var_184]
.text:000017E2                 mov     [ebp+var_74], edx
.text:000017E5                 mov     ecx, [ebp+var_2C] ; this
.text:000017E8                 call    ?GetSize@CDummyOutStream@@QBE_KXZ ; CDummyOutStream::GetSize(void)
.text:000017ED                 mov     [ebp+var_190], eax
.text:000017F3                 mov     [ebp+var_18C], edx
.text:000017F9                 mov     eax, [ebp+var_190]
.text:000017FF                 mov     [ebp+var_80], eax
.text:00001802                 mov     ecx, [ebp+var_18C]
.text:00001808                 mov     [ebp+var_7C], ecx
.text:0000180B                 cmp     [ebp+var_68], 80004001h
.text:00001812                 jnz     short loc_1824
.text:00001814                 mov     edx, [ebp+this]
.text:00001817                 mov     byte ptr [edx+33h], 1
.text:0000181B                 mov     [ebp+var_68], 1
.text:00001822                 jmp     short loc_188A
.text:00001824 ; ---------------------------------------------------------------------------
.text:00001824
.text:00001824 loc_1824:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6C6j
.text:00001824                 cmp     [ebp+var_68], 1
.text:00001828                 jnz     short loc_182C
.text:0000182A                 jmp     short loc_188A
.text:0000182C ; ---------------------------------------------------------------------------
.text:0000182C
.text:0000182C loc_182C:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6DCj
.text:0000182C                 mov     eax, [ebp+var_68]
.text:0000182F                 mov     [ebp+var_DC], eax
.text:00001835                 cmp     [ebp+var_DC], 0
.text:0000183C                 jz      short loc_1885
.text:0000183E                 mov     ecx, [ebp+var_DC]
.text:00001844                 mov     [ebp+var_110], ecx
.text:0000184A                 mov     byte ptr [ebp+var_4], 5
.text:0000184E                 lea     ecx, [ebp+var_60] ; this
.text:00001851                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:00001856                 mov     byte ptr [ebp+var_4], 3
.text:0000185A                 lea     ecx, [ebp+var_44]
.text:0000185D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001862                 mov     byte ptr [ebp+var_4], 1
.text:00001866                 lea     ecx, [ebp+var_34]
.text:00001869                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000186E                 mov     byte ptr [ebp+var_4], 0
.text:00001872                 lea     ecx, [ebp+var_1C]
.text:00001875                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000187A                 mov     eax, [ebp+var_110]
.text:00001880                 jmp     loc_1A8F
.text:00001885 ; ---------------------------------------------------------------------------
.text:00001885
.text:00001885 loc_1885:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6F0j
.text:00001885                 jmp     loc_15D0
.text:0000188A ; ---------------------------------------------------------------------------
.text:0000188A
.text:0000188A loc_188A:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_1719j
.text:0000188A                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+604j ...
.text:0000188A                 movzx   edx, [ebp+var_6D]
.text:0000188E                 test    edx, edx
.text:00001890                 jz      short loc_18A2
.text:00001892                 mov     eax, [ebp+this]
.text:00001895                 mov     byte ptr [eax+2Ch], 0
.text:00001899                 mov     [ebp+var_68], 1
.text:000018A0                 jmp     short loc_191F
.text:000018A2 ; ---------------------------------------------------------------------------
.text:000018A2
.text:000018A2 loc_18A2:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+744j
.text:000018A2                 cmp     [ebp+var_68], 0
.text:000018A6                 jz      short loc_18AE
.text:000018A8                 cmp     [ebp+var_68], 1
.text:000018AC                 jnz     short loc_191F
.text:000018AE
.text:000018AE loc_18AE:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+75Aj
.text:000018AE                 movzx   ecx, [ebp+var_89]
.text:000018B5                 test    ecx, ecx
.text:000018B7                 jz      short loc_18C2
.text:000018B9                 mov     edx, [ebp+this]
.text:000018BC                 mov     byte ptr [edx+2Eh], 1
.text:000018C0                 jmp     short loc_18D7
.text:000018C2 ; ---------------------------------------------------------------------------
.text:000018C2
.text:000018C2 loc_18C2:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+76Bj
.text:000018C2                 mov     eax, [ebp+var_54]
.text:000018C5                 movzx   ecx, byte ptr [eax+0D1h]
.text:000018CC                 test    ecx, ecx
.text:000018CE                 jz      short loc_18D7
.text:000018D0                 mov     edx, [ebp+this]
.text:000018D3                 mov     byte ptr [edx+2Fh], 1
.text:000018D7
.text:000018D7 loc_18D7:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+774j
.text:000018D7                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+782j
.text:000018D7                 mov     eax, [ebp+this]
.text:000018DA                 mov     ecx, [ebp+var_78]
.text:000018DD                 mov     [eax+38h], ecx
.text:000018E0                 mov     edx, [ebp+var_74]
.text:000018E3                 mov     [eax+3Ch], edx
.text:000018E6                 mov     eax, [ebp+this]
.text:000018E9                 mov     ecx, [ebp+var_80]
.text:000018EC                 mov     [eax+40h], ecx
.text:000018EF                 mov     edx, [ebp+var_7C]
.text:000018F2                 mov     [eax+44h], edx
.text:000018F5                 mov     eax, [ebp+this]
.text:000018F8                 mov     ecx, [ebp+var_88]
.text:000018FE                 mov     [eax+48h], ecx
.text:00001901                 mov     edx, [ebp+var_84]
.text:00001907                 mov     [eax+4Ch], edx
.text:0000190A                 mov     eax, [ebp+this]
.text:0000190D                 mov     byte ptr [eax+30h], 1
.text:00001911                 mov     ecx, [ebp+this]
.text:00001914                 mov     byte ptr [ecx+31h], 1
.text:00001918                 mov     edx, [ebp+this]
.text:0000191B                 mov     byte ptr [edx+32h], 1
.text:0000191F
.text:0000191F loc_191F:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+754j
.text:0000191F                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+760j
.text:0000191F                 mov     [ebp+var_E0], 0
.text:00001929                 mov     eax, [ebp+this]
.text:0000192C                 movzx   ecx, byte ptr [eax+2Ch]
.text:00001930                 test    ecx, ecx
.text:00001932                 jnz     short loc_1943
.text:00001934                 mov     [ebp+var_E0], 7
.text:0000193E                 jmp     loc_19F3
.text:00001943 ; ---------------------------------------------------------------------------
.text:00001943
.text:00001943 loc_1943:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7E6j
.text:00001943                 mov     edx, [ebp+this]
.text:00001946                 movzx   eax, byte ptr [edx+2Fh]
.text:0000194A                 test    eax, eax
.text:0000194C                 jz      short loc_195D
.text:0000194E                 mov     [ebp+var_E0], 5
.text:00001958                 jmp     loc_19F3
.text:0000195D ; ---------------------------------------------------------------------------
.text:0000195D
.text:0000195D loc_195D:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+800j
.text:0000195D                 mov     ecx, [ebp+this]
.text:00001960                 movzx   edx, byte ptr [ecx+33h]
.text:00001964                 test    edx, edx
.text:00001966                 jz      short loc_1974
.text:00001968                 mov     [ebp+var_E0], 1
.text:00001972                 jmp     short loc_19F3
.text:00001974 ; ---------------------------------------------------------------------------
.text:00001974
.text:00001974 loc_1974:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+81Aj
.text:00001974                 mov     eax, [ebp+this]
.text:00001977                 movzx   ecx, byte ptr [eax+2Eh]
.text:0000197B                 test    ecx, ecx
.text:0000197D                 jz      short loc_198B
.text:0000197F                 mov     [ebp+var_E0], 6
.text:00001989                 jmp     short loc_19F3
.text:0000198B ; ---------------------------------------------------------------------------
.text:0000198B
.text:0000198B loc_198B:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+831j
.text:0000198B                 cmp     [ebp+var_68], 1
.text:0000198F                 jnz     short loc_199D
.text:00001991                 mov     [ebp+var_E0], 2
.text:0000199B                 jmp     short loc_19F3
.text:0000199D ; ---------------------------------------------------------------------------
.text:0000199D
.text:0000199D loc_199D:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+843j
.text:0000199D                 cmp     [ebp+var_68], 0
.text:000019A1                 jnz     short loc_19AF
.text:000019A3                 mov     [ebp+var_E0], 0
.text:000019AD                 jmp     short loc_19F3
.text:000019AF ; ---------------------------------------------------------------------------
.text:000019AF
.text:000019AF loc_19AF:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+855j
.text:000019AF                 mov     edx, [ebp+var_68]
.text:000019B2                 mov     [ebp+var_114], edx
.text:000019B8                 mov     byte ptr [ebp+var_4], 5
.text:000019BC                 lea     ecx, [ebp+var_60] ; this
.text:000019BF                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:000019C4                 mov     byte ptr [ebp+var_4], 3
.text:000019C8                 lea     ecx, [ebp+var_44]
.text:000019CB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000019D0                 mov     byte ptr [ebp+var_4], 1
.text:000019D4                 lea     ecx, [ebp+var_34]
.text:000019D7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019DC                 mov     byte ptr [ebp+var_4], 0
.text:000019E0                 lea     ecx, [ebp+var_1C]
.text:000019E3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019E8                 mov     eax, [ebp+var_114]
.text:000019EE                 jmp     loc_1A8F
.text:000019F3 ; ---------------------------------------------------------------------------
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7F2j
.text:000019F3                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+80Cj ...
.text:000019F3                 lea     ecx, [ebp+var_34]
.text:000019F6                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000019FB                 mov     esi, esp
.text:000019FD                 mov     eax, [ebp+var_E0]
.text:00001A03                 push    eax
.text:00001A04                 mov     ecx, [ebp+arg_10]
.text:00001A07                 push    ecx
.text:00001A08                 mov     edx, [ebp+arg_10]
.text:00001A0B                 mov     eax, [edx]
.text:00001A0D                 mov     ecx, [eax+1Ch]
.text:00001A10                 call    ecx
.text:00001A12                 cmp     esi, esp
.text:00001A14                 call    __RTC_CheckEsp
.text:00001A19                 mov     [ebp+var_194], eax
.text:00001A1F                 mov     edx, [ebp+var_194]
.text:00001A25                 mov     [ebp+var_118], edx
.text:00001A2B                 mov     byte ptr [ebp+var_4], 5
.text:00001A2F                 lea     ecx, [ebp+var_60] ; this
.text:00001A32                 call    ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text:00001A37                 mov     byte ptr [ebp+var_4], 3
.text:00001A3B                 lea     ecx, [ebp+var_44]
.text:00001A3E                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001A43                 mov     byte ptr [ebp+var_4], 1
.text:00001A47                 lea     ecx, [ebp+var_34]
.text:00001A4A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A4F                 mov     byte ptr [ebp+var_4], 0
.text:00001A53                 lea     ecx, [ebp+var_1C]
.text:00001A56                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A5B                 mov     eax, [ebp+var_118]
.text:00001A61                 jmp     short loc_1A8F
.text:00001A61 ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00001A61
.text:00001A63
.text:00001A63 ; =============== S U B R O U T I N E =======================================
.text:00001A63
.text:00001A63
.text:00001A63 __catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00001A63                                         ; DATA XREF: .xdata$x:00001EECo
.text:00001A63                 mov     dword ptr [ebp-11Ch], 8007000Eh
.text:00001A6D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001A74                 mov     eax, offset $LN57
.text:00001A79                 retn
.text:00001A79 __catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00001A79
.text:00001A7A ; ---------------------------------------------------------------------------
.text:00001A7A                 mov     eax, offset __tryend$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:00001A7F                 retn
.text:00001A80 ; ---------------------------------------------------------------------------
.text:00001A80
.text:00001A80 __tryend$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:00001A80                                         ; DATA XREF: .text:00001A7Ao
.text:00001A80                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001A87                 jmp     short loc_1A8F
.text:00001A89 ; ---------------------------------------------------------------------------
.text:00001A89
.text:00001A89 $LN57:                                  ; DATA XREF: __catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:00001A89                 mov     eax, [ebp-11Ch]
.text:00001A8F ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001A8F
.text:00001A8F loc_1A8F:                               ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+53j
.text:00001A8F                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+71j ...
.text:00001A8F                 push    edx
.text:00001A90                 mov     ecx, ebp
.text:00001A92                 push    eax
.text:00001A93                 lea     edx, $LN68
.text:00001A99                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A9E                 pop     eax
.text:00001A9F                 pop     edx
.text:00001AA0                 mov     ecx, [ebp+var_C]
.text:00001AA3                 mov     large fs:0, ecx
.text:00001AAA                 pop     ecx
.text:00001AAB                 pop     edi
.text:00001AAC                 pop     esi
.text:00001AAD                 pop     ebx
.text:00001AAE                 mov     ecx, [ebp+var_14]
.text:00001AB1                 xor     ecx, ebp
.text:00001AB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001AB8                 add     esp, 194h
.text:00001ABE                 cmp     ebp, esp
.text:00001AC0                 call    __RTC_CheckEsp
.text:00001AC5                 mov     esp, ebp
.text:00001AC7                 pop     ebp
.text:00001AC8                 retn    14h
.text:00001AC8 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001AC8 ; ---------------------------------------------------------------------------
.text:00001ACB                 align 4
.text:00001ACC $LN68           dd 7                    ; DATA XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+947o
.text:00001AD0                 dd offset $LN67
.text:00001AD4 $LN67           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00001AD0o
.text:00001ADC                 dd offset $LN59         ; "realOutStream"
.text:00001AE0                 db 0CCh
.text:00001AE1                 db 3 dup(0FFh)
.text:00001AE4                 dd 4
.text:00001AE8                 dd offset $LN60         ; "outStream"
.text:00001AEC                 dd 0FFFFFFBCh, 4
.text:00001AF4                 dd offset $LN61         ; "progress"
.text:00001AF8                 dd 0FFFFFFA0h, 10h
.text:00001B00                 dd offset $LN62         ; "decoder"
.text:00001B04                 dd 0FFFFFF58h, 0Eh
.text:00001B0C                 dd offset $LN63         ; "buf"
.text:00001B10                 dd 0FFFFFF48h, 4
.text:00001B18                 dd offset $LN64         ; "processed"
.text:00001B1C                 dd 0FFFFFF2Ch, 10h
.text:00001B24                 dd offset $LN65
.text:00001B28 $LN65           db 73h, 74h, 0          ; DATA XREF: .text:00001B24o
.text:00001B2B $LN64           db 'processed',0        ; DATA XREF: .text:00001B18o
.text:00001B35 $LN63           db 'buf',0              ; DATA XREF: .text:00001B0Co
.text:00001B39 $LN62           db 'decoder',0          ; DATA XREF: .text:00001B00o
.text:00001B41 $LN61           db 'progress',0         ; DATA XREF: .text:00001AF4o
.text:00001B4A $LN60           db 'outStream',0        ; DATA XREF: .text:00001AE8o
.text:00001B54 $LN59           db 'realOutStream',0    ; DATA XREF: .text:00001ADCo
.text:00001B62                 db 0Ah dup(0CCh)
.text:00001B6C
.text:00001B6C ; =============== S U B R O U T I N E =======================================
.text:00001B6C
.text:00001B6C ; Attributes: bp-based frame
.text:00001B6C
.text:00001B6C ; struct IInArchive * __stdcall NArchive::NLzma::NLzmaAr::CreateArc(void)
.text:00001B6C ?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00001B6C                                         ; DATA XREF: .rdata:0000003Co
.text:00001B6C
.text:00001B6C var_18          = dword ptr -18h
.text:00001B6C var_14          = dword ptr -14h
.text:00001B6C var_10          = dword ptr -10h
.text:00001B6C var_C           = dword ptr -0Ch
.text:00001B6C var_4           = dword ptr -4
.text:00001B6C
.text:00001B6C                 push    ebp
.text:00001B6D                 mov     ebp, esp
.text:00001B6F                 push    0FFFFFFFFh
.text:00001B71                 push    offset __ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
.text:00001B76                 mov     eax, large fs:0
.text:00001B7C                 push    eax
.text:00001B7D                 sub     esp, 0Ch
.text:00001B80                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00001B87                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001B8E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001B95                 mov     eax, dword ptr ds:___security_cookie
.text:00001B9A                 xor     eax, ebp
.text:00001B9C                 push    eax
.text:00001B9D                 lea     eax, [ebp+var_C]
.text:00001BA0                 mov     large fs:0, eax
.text:00001BA6                 push    50h ; 'P'       ; unsigned int
.text:00001BA8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001BAD                 add     esp, 4
.text:00001BB0                 mov     [ebp+var_14], eax
.text:00001BB3                 mov     [ebp+var_4], 0
.text:00001BBA                 cmp     [ebp+var_14], 0
.text:00001BBE                 jz      short loc_1BCF
.text:00001BC0                 push    0               ; bool
.text:00001BC2                 mov     ecx, [ebp+var_14] ; this
.text:00001BC5                 call    ??0CHandler@NLzma@NArchive@@QAE@_N@Z ; NArchive::NLzma::CHandler::CHandler(bool)
.text:00001BCA                 mov     [ebp+var_18], eax
.text:00001BCD                 jmp     short loc_1BD6
.text:00001BCF ; ---------------------------------------------------------------------------
.text:00001BCF
.text:00001BCF loc_1BCF:                               ; CODE XREF: NArchive::NLzma::NLzmaAr::CreateArc(void)+52j
.text:00001BCF                 mov     [ebp+var_18], 0
.text:00001BD6
.text:00001BD6 loc_1BD6:                               ; CODE XREF: NArchive::NLzma::NLzmaAr::CreateArc(void)+61j
.text:00001BD6                 mov     eax, [ebp+var_18]
.text:00001BD9                 mov     [ebp+var_10], eax
.text:00001BDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001BE3                 mov     eax, [ebp+var_10]
.text:00001BE6                 mov     ecx, [ebp+var_C]
.text:00001BE9                 mov     large fs:0, ecx
.text:00001BF0                 pop     ecx
.text:00001BF1                 add     esp, 18h
.text:00001BF4                 cmp     ebp, esp
.text:00001BF6                 call    __RTC_CheckEsp
.text:00001BFB                 mov     esp, ebp
.text:00001BFD                 pop     ebp
.text:00001BFE                 retn
.text:00001BFE ?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ endp
.text:00001BFE
.text:00001BFE ; ---------------------------------------------------------------------------
.text:00001BFF                 db 0Dh dup(0CCh)
.text:00001C0C
.text:00001C0C ; =============== S U B R O U T I N E =======================================
.text:00001C0C
.text:00001C0C ; Attributes: bp-based frame
.text:00001C0C
.text:00001C0C ; struct IInArchive * __stdcall NArchive::NLzma::NLzma86Ar::CreateArc(void)
.text:00001C0C ?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00001C0C                                         ; DATA XREF: .rdata:00000070o
.text:00001C0C
.text:00001C0C var_18          = dword ptr -18h
.text:00001C0C var_14          = dword ptr -14h
.text:00001C0C var_10          = dword ptr -10h
.text:00001C0C var_C           = dword ptr -0Ch
.text:00001C0C var_4           = dword ptr -4
.text:00001C0C
.text:00001C0C                 push    ebp
.text:00001C0D                 mov     ebp, esp
.text:00001C0F                 push    0FFFFFFFFh
.text:00001C11                 push    offset __ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
.text:00001C16                 mov     eax, large fs:0
.text:00001C1C                 push    eax
.text:00001C1D                 sub     esp, 0Ch
.text:00001C20                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00001C27                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001C2E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001C35                 mov     eax, dword ptr ds:___security_cookie
.text:00001C3A                 xor     eax, ebp
.text:00001C3C                 push    eax
.text:00001C3D                 lea     eax, [ebp+var_C]
.text:00001C40                 mov     large fs:0, eax
.text:00001C46                 push    50h ; 'P'       ; unsigned int
.text:00001C48                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C4D                 add     esp, 4
.text:00001C50                 mov     [ebp+var_14], eax
.text:00001C53                 mov     [ebp+var_4], 0
.text:00001C5A                 cmp     [ebp+var_14], 0
.text:00001C5E                 jz      short loc_1C6F
.text:00001C60                 push    1               ; bool
.text:00001C62                 mov     ecx, [ebp+var_14] ; this
.text:00001C65                 call    ??0CHandler@NLzma@NArchive@@QAE@_N@Z ; NArchive::NLzma::CHandler::CHandler(bool)
.text:00001C6A                 mov     [ebp+var_18], eax
.text:00001C6D                 jmp     short loc_1C76
.text:00001C6F ; ---------------------------------------------------------------------------
.text:00001C6F
.text:00001C6F loc_1C6F:                               ; CODE XREF: NArchive::NLzma::NLzma86Ar::CreateArc(void)+52j
.text:00001C6F                 mov     [ebp+var_18], 0
.text:00001C76
.text:00001C76 loc_1C76:                               ; CODE XREF: NArchive::NLzma::NLzma86Ar::CreateArc(void)+61j
.text:00001C76                 mov     eax, [ebp+var_18]
.text:00001C79                 mov     [ebp+var_10], eax
.text:00001C7C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C83                 mov     eax, [ebp+var_10]
.text:00001C86                 mov     ecx, [ebp+var_C]
.text:00001C89                 mov     large fs:0, ecx
.text:00001C90                 pop     ecx
.text:00001C91                 add     esp, 18h
.text:00001C94                 cmp     ebp, esp
.text:00001C96                 call    __RTC_CheckEsp
.text:00001C9B                 mov     esp, ebp
.text:00001C9D                 pop     ebp
.text:00001C9E                 retn
.text:00001C9E ?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ endp
.text:00001C9E
.text:00001C9E ; ---------------------------------------------------------------------------
.text:00001C9F                 align 10h
.text:00001C9F _text           ends
.text:00001C9F
.rtc$TMZ:00001CA0 ; ===========================================================================
.rtc$TMZ:00001CA0
.rtc$TMZ:00001CA0 ; Segment type: Pure data
.rtc$TMZ:00001CA0 ; Segment permissions: Read
.rtc$TMZ:00001CA0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001CA0                 assume cs:_rtc$TMZ
.rtc$TMZ:00001CA0                 ;org 1CA0h
.rtc$TMZ:00001CA0 ; COMDAT (pick any)
.rtc$TMZ:00001CA0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001CA0 _rtc$TMZ        ends
.rtc$TMZ:00001CA0
.rtc$IMZ:00001CA4 ; ===========================================================================
.rtc$IMZ:00001CA4
.rtc$IMZ:00001CA4 ; Segment type: Pure data
.rtc$IMZ:00001CA4 ; Segment permissions: Read
.rtc$IMZ:00001CA4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001CA4                 assume cs:_rtc$IMZ
.rtc$IMZ:00001CA4                 ;org 1CA4h
.rtc$IMZ:00001CA4 ; COMDAT (pick any)
.rtc$IMZ:00001CA4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001CA4 _rtc$IMZ        ends
.rtc$IMZ:00001CA4
.text:00001CA8 ; ===========================================================================
.text:00001CA8
.text:00001CA8 ; Segment type: Pure code
.text:00001CA8 ; Segment permissions: Read/Execute
.text:00001CA8 _text           segment para public 'CODE' use32
.text:00001CA8                 assume cs:_text
.text:00001CA8                 ;org 1CA8h
.text:00001CA8 ; COMDAT (pick any)
.text:00001CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CA8
.text:00001CA8 ; =============== S U B R O U T I N E =======================================
.text:00001CA8
.text:00001CA8 ; Attributes: bp-based frame
.text:00001CA8
.text:00001CA8 ; bool __thiscall NArchive::NLzma::CHeader::HasSize(NArchive::NLzma::CHeader *__hidden this)
.text:00001CA8                 public ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ
.text:00001CA8 ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ proc near
.text:00001CA8                                         ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+A1p
.text:00001CA8                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+19Ap ...
.text:00001CA8
.text:00001CA8 var_C           = dword ptr -0Ch
.text:00001CA8 var_8           = dword ptr -8
.text:00001CA8 var_4           = dword ptr -4
.text:00001CA8
.text:00001CA8                 push    ebp
.text:00001CA9                 mov     ebp, esp
.text:00001CAB                 sub     esp, 0Ch
.text:00001CAE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001CB5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CC3                 mov     [ebp+var_4], ecx
.text:00001CC6                 mov     eax, [ebp+var_4]
.text:00001CC9                 mov     [ebp+var_8], eax
.text:00001CCC                 mov     ecx, [ebp+var_8]
.text:00001CCF                 mov     edx, [ebp+var_8]
.text:00001CD2                 mov     eax, [ecx]
.text:00001CD4                 and     eax, [edx+4]
.text:00001CD7                 cmp     eax, 0FFFFFFFFh
.text:00001CDA                 jz      short loc_1CE5
.text:00001CDC                 mov     [ebp+var_C], 1
.text:00001CE3                 jmp     short loc_1CEC
.text:00001CE5 ; ---------------------------------------------------------------------------
.text:00001CE5
.text:00001CE5 loc_1CE5:                               ; CODE XREF: NArchive::NLzma::CHeader::HasSize(void)+32j
.text:00001CE5                 mov     [ebp+var_C], 0
.text:00001CEC
.text:00001CEC loc_1CEC:                               ; CODE XREF: NArchive::NLzma::CHeader::HasSize(void)+3Bj
.text:00001CEC                 mov     al, byte ptr [ebp+var_C]
.text:00001CEF                 mov     esp, ebp
.text:00001CF1                 pop     ebp
.text:00001CF2                 retn
.text:00001CF2 ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ endp
.text:00001CF2
.text:00001CF2 ; ---------------------------------------------------------------------------
.text:00001CF3                 align 4
.text:00001CF3 _text           ends
.text:00001CF3
.text$x:00001CF4 ; ===========================================================================
.text$x:00001CF4
.text$x:00001CF4 ; Segment type: Pure code
.text$x:00001CF4 ; Segment permissions: Read/Execute
.text$x:00001CF4 _text$x         segment para public 'CODE' use32
.text$x:00001CF4                 assume cs:_text$x
.text$x:00001CF4                 ;org 1CF4h
.text$x:00001CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001CF4
.text$x:00001CF4 ; =============== S U B R O U T I N E =======================================
.text$x:00001CF4
.text$x:00001CF4
.text$x:00001CF4 __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0 proc near
.text$x:00001CF4                                         ; DATA XREF: .xdata$x:00001E40o
.text$x:00001CF4                 mov     eax, [ebp-24h]
.text$x:00001CF7                 push    eax             ; void *
.text$x:00001CF8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001CFD                 pop     ecx
.text$x:00001CFE                 retn
.text$x:00001CFE __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0 endp
.text$x:00001CFE
.text$x:00001CFF
.text$x:00001CFF ; =============== S U B R O U T I N E =======================================
.text$x:00001CFF
.text$x:00001CFF
.text$x:00001CFF __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1 proc near
.text$x:00001CFF                                         ; DATA XREF: .xdata$x:00001E48o
.text$x:00001CFF                 mov     eax, [ebp-2Ch]
.text$x:00001D02                 push    eax             ; void *
.text$x:00001D03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D08                 pop     ecx
.text$x:00001D09                 retn
.text$x:00001D09 __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1 endp
.text$x:00001D09
.text$x:00001D0A
.text$x:00001D0A ; =============== S U B R O U T I N E =======================================
.text$x:00001D0A
.text$x:00001D0A
.text$x:00001D0A __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$2 proc near
.text$x:00001D0A                                         ; DATA XREF: .xdata$x:00001E50o
.text$x:00001D0A                 lea     ecx, [ebp-18h]
.text$x:00001D0D                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001D0D __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$2 endp
.text$x:00001D0D
.text$x:00001D12
.text$x:00001D12 ; =============== S U B R O U T I N E =======================================
.text$x:00001D12
.text$x:00001D12
.text$x:00001D12 __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$3 proc near
.text$x:00001D12                                         ; DATA XREF: .xdata$x:00001E58o
.text$x:00001D12                 mov     eax, [ebp-34h]
.text$x:00001D15                 push    eax             ; void *
.text$x:00001D16                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D1B                 pop     ecx
.text$x:00001D1C                 retn
.text$x:00001D1C __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$3 endp
.text$x:00001D1C
.text$x:00001D1D
.text$x:00001D1D ; =============== S U B R O U T I N E =======================================
.text$x:00001D1D
.text$x:00001D1D
.text$x:00001D1D __ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z proc near
.text$x:00001D1D                                         ; DATA XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+5o
.text$x:00001D1D
.text$x:00001D1D arg_4           = dword ptr  8
.text$x:00001D1D
.text$x:00001D1D                 mov     edx, [esp+arg_4]
.text$x:00001D21                 lea     eax, [edx+0Ch]
.text$x:00001D24                 mov     ecx, [edx-48h]
.text$x:00001D27                 xor     ecx, eax
.text$x:00001D29                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D2E                 mov     eax, offset __ehfuncinfo$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
.text$x:00001D33                 jmp     ___CxxFrameHandler3
.text$x:00001D33 __ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z endp
.text$x:00001D33
.text$x:00001D38
.text$x:00001D38 ; =============== S U B R O U T I N E =======================================
.text$x:00001D38
.text$x:00001D38
.text$x:00001D38 __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$0 proc near
.text$x:00001D38                                         ; DATA XREF: .xdata$x:00001E84o
.text$x:00001D38                 mov     ecx, [ebp-10h]
.text$x:00001D3B                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001D3B __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$0 endp
.text$x:00001D3B
.text$x:00001D40
.text$x:00001D40 ; =============== S U B R O U T I N E =======================================
.text$x:00001D40
.text$x:00001D40
.text$x:00001D40 __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$1 proc near
.text$x:00001D40                                         ; DATA XREF: .xdata$x:00001E8Co
.text$x:00001D40                 mov     ecx, [ebp-10h]
.text$x:00001D43                 add     ecx, 8
.text$x:00001D46                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001D46 __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$1 endp
.text$x:00001D46
.text$x:00001D4B
.text$x:00001D4B ; =============== S U B R O U T I N E =======================================
.text$x:00001D4B
.text$x:00001D4B
.text$x:00001D4B __ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ proc near
.text$x:00001D4B                                         ; DATA XREF: NArchive::NLzma::CDecoder::~CDecoder(void)+5o
.text$x:00001D4B
.text$x:00001D4B arg_4           = dword ptr  8
.text$x:00001D4B
.text$x:00001D4B                 mov     edx, [esp+arg_4]
.text$x:00001D4F                 lea     eax, [edx+0Ch]
.text$x:00001D52                 mov     ecx, [edx-8]
.text$x:00001D55                 xor     ecx, eax
.text$x:00001D57                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D5C                 mov     eax, offset __ehfuncinfo$??1CDecoder@NLzma@NArchive@@QAE@XZ
.text$x:00001D61                 jmp     ___CxxFrameHandler3
.text$x:00001D61 __ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ endp
.text$x:00001D61
.text$x:00001D66
.text$x:00001D66 ; =============== S U B R O U T I N E =======================================
.text$x:00001D66
.text$x:00001D66
.text$x:00001D66 __unwindfunclet$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00001D66                                         ; DATA XREF: .xdata$x:00001EB8o
.text$x:00001D66                 lea     ecx, [ebp-18h]
.text$x:00001D69                 jmp     ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text$x:00001D69 __unwindfunclet$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 endp
.text$x:00001D69
.text$x:00001D6E
.text$x:00001D6E ; =============== S U B R O U T I N E =======================================
.text$x:00001D6E
.text$x:00001D6E
.text$x:00001D6E __ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text$x:00001D6E                                         ; DATA XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+5o
.text$x:00001D6E
.text$x:00001D6E arg_4           = dword ptr  8
.text$x:00001D6E
.text$x:00001D6E                 mov     edx, [esp+arg_4]
.text$x:00001D72                 lea     eax, [edx+0Ch]
.text$x:00001D75                 mov     ecx, [edx-58h]
.text$x:00001D78                 xor     ecx, eax
.text$x:00001D7A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D7F                 mov     eax, offset __ehfuncinfo$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text$x:00001D84                 jmp     ___CxxFrameHandler3
.text$x:00001D84 __ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text$x:00001D84
.text$x:00001D89
.text$x:00001D89 ; =============== S U B R O U T I N E =======================================
.text$x:00001D89
.text$x:00001D89
.text$x:00001D89 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:00001D89                                         ; DATA XREF: .xdata$x:00001F34o
.text$x:00001D89                 lea     ecx, [ebp-1Ch]
.text$x:00001D8C                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001D8C __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:00001D8C
.text$x:00001D91
.text$x:00001D91 ; =============== S U B R O U T I N E =======================================
.text$x:00001D91
.text$x:00001D91
.text$x:00001D91 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:00001D91                                         ; DATA XREF: .xdata$x:00001F3Co
.text$x:00001D91                 mov     eax, [ebp-0F0h]
.text$x:00001D97                 push    eax             ; void *
.text$x:00001D98                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001D9D                 pop     ecx
.text$x:00001D9E                 retn
.text$x:00001D9E __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:00001D9E
.text$x:00001D9F
.text$x:00001D9F ; =============== S U B R O U T I N E =======================================
.text$x:00001D9F
.text$x:00001D9F
.text$x:00001D9F __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00001D9F                                         ; DATA XREF: .xdata$x:00001F44o
.text$x:00001D9F                 lea     ecx, [ebp-34h]
.text$x:00001DA2                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001DA2 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00001DA2
.text$x:00001DA7
.text$x:00001DA7 ; =============== S U B R O U T I N E =======================================
.text$x:00001DA7
.text$x:00001DA7
.text$x:00001DA7 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00001DA7                                         ; DATA XREF: .xdata$x:00001F4Co
.text$x:00001DA7                 mov     eax, [ebp-0F8h]
.text$x:00001DAD                 push    eax             ; void *
.text$x:00001DAE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001DB3                 pop     ecx
.text$x:00001DB4                 retn
.text$x:00001DB4 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00001DB4
.text$x:00001DB5
.text$x:00001DB5 ; =============== S U B R O U T I N E =======================================
.text$x:00001DB5
.text$x:00001DB5
.text$x:00001DB5 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00001DB5                                         ; DATA XREF: .xdata$x:00001F54o
.text$x:00001DB5                 lea     ecx, [ebp-44h]
.text$x:00001DB8                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00001DB8 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00001DB8
.text$x:00001DBD
.text$x:00001DBD ; =============== S U B R O U T I N E =======================================
.text$x:00001DBD
.text$x:00001DBD
.text$x:00001DBD __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00001DBD                                         ; DATA XREF: .xdata$x:00001F5Co
.text$x:00001DBD                 lea     ecx, [ebp-60h]  ; this
.text$x:00001DC0                 jmp     ??1CDecoder@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CDecoder::~CDecoder(void)
.text$x:00001DC0 __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00001DC0
.text$x:00001DC5
.text$x:00001DC5 ; =============== S U B R O U T I N E =======================================
.text$x:00001DC5
.text$x:00001DC5
.text$x:00001DC5 __ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00001DC5                                         ; DATA XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00001DC5
.text$x:00001DC5 arg_4           = dword ptr  8
.text$x:00001DC5
.text$x:00001DC5                 mov     edx, [esp+arg_4]
.text$x:00001DC9                 lea     eax, [edx+0Ch]
.text$x:00001DCC                 mov     ecx, [edx-198h]
.text$x:00001DD2                 xor     ecx, eax
.text$x:00001DD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DD9                 mov     ecx, [edx-8]
.text$x:00001DDC                 xor     ecx, eax
.text$x:00001DDE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DE3                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:00001DE8                 jmp     ___CxxFrameHandler3
.text$x:00001DE8 __ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:00001DE8
.text$x:00001DED
.text$x:00001DED ; =============== S U B R O U T I N E =======================================
.text$x:00001DED
.text$x:00001DED
.text$x:00001DED __unwindfunclet$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:00001DED                                         ; DATA XREF: .xdata$x:00001F6Co
.text$x:00001DED                 mov     eax, [ebp-14h]
.text$x:00001DF0                 push    eax             ; void *
.text$x:00001DF1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001DF6                 pop     ecx
.text$x:00001DF7                 retn
.text$x:00001DF7 __unwindfunclet$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:00001DF7
.text$x:00001DF8
.text$x:00001DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00001DF8
.text$x:00001DF8
.text$x:00001DF8 __ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:00001DF8                                         ; DATA XREF: NArchive::NLzma::NLzmaAr::CreateArc(void)+5o
.text$x:00001DF8
.text$x:00001DF8 arg_4           = dword ptr  8
.text$x:00001DF8
.text$x:00001DF8                 mov     edx, [esp+arg_4]
.text$x:00001DFC                 lea     eax, [edx+0Ch]
.text$x:00001DFF                 mov     ecx, [edx-10h]
.text$x:00001E02                 xor     ecx, eax
.text$x:00001E04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E09                 mov     eax, offset __ehfuncinfo$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
.text$x:00001E0E                 jmp     ___CxxFrameHandler3
.text$x:00001E0E __ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:00001E0E
.text$x:00001E13
.text$x:00001E13 ; =============== S U B R O U T I N E =======================================
.text$x:00001E13
.text$x:00001E13
.text$x:00001E13 __unwindfunclet$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:00001E13                                         ; DATA XREF: .xdata$x:00001F98o
.text$x:00001E13                 mov     eax, [ebp-14h]
.text$x:00001E16                 push    eax             ; void *
.text$x:00001E17                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001E1C                 pop     ecx
.text$x:00001E1D                 retn
.text$x:00001E1D __unwindfunclet$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:00001E1D
.text$x:00001E1E
.text$x:00001E1E ; =============== S U B R O U T I N E =======================================
.text$x:00001E1E
.text$x:00001E1E
.text$x:00001E1E __ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:00001E1E                                         ; DATA XREF: NArchive::NLzma::NLzma86Ar::CreateArc(void)+5o
.text$x:00001E1E
.text$x:00001E1E arg_4           = dword ptr  8
.text$x:00001E1E
.text$x:00001E1E                 mov     edx, [esp+arg_4]
.text$x:00001E22                 lea     eax, [edx+0Ch]
.text$x:00001E25                 mov     ecx, [edx-10h]
.text$x:00001E28                 xor     ecx, eax
.text$x:00001E2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E2F                 mov     eax, offset __ehfuncinfo$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
.text$x:00001E34                 jmp     ___CxxFrameHandler3
.text$x:00001E34 __ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:00001E34
.text$x:00001E34 ; ---------------------------------------------------------------------------
.text$x:00001E39                 align 4
.text$x:00001E39 _text$x         ends
.text$x:00001E39
.xdata$x:00001E3C ; ===========================================================================
.xdata$x:00001E3C
.xdata$x:00001E3C ; Segment type: Pure data
.xdata$x:00001E3C ; Segment permissions: Read
.xdata$x:00001E3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001E3C                 assume cs:_xdata$x
.xdata$x:00001E3C                 ;org 1E3Ch
.xdata$x:00001E3C __unwindtable$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z db 0FFh
.xdata$x:00001E3C                                         ; DATA XREF: .xdata$x:00001E64o
.xdata$x:00001E3D                 db 0FFh
.xdata$x:00001E3E                 db 0FFh
.xdata$x:00001E3F                 db 0FFh
.xdata$x:00001E40                 dd offset __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0
.xdata$x:00001E44                 db 0FFh
.xdata$x:00001E45                 db 0FFh
.xdata$x:00001E46                 db 0FFh
.xdata$x:00001E47                 db 0FFh
.xdata$x:00001E48                 dd offset __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1
.xdata$x:00001E4C                 db 0FFh
.xdata$x:00001E4D                 db 0FFh
.xdata$x:00001E4E                 db 0FFh
.xdata$x:00001E4F                 db 0FFh
.xdata$x:00001E50                 dd offset __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$2
.xdata$x:00001E54                 db    2
.xdata$x:00001E55                 db    0
.xdata$x:00001E56                 db    0
.xdata$x:00001E57                 db    0
.xdata$x:00001E58                 dd offset __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$3
.xdata$x:00001E5C __ehfuncinfo$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z db  22h ; "
.xdata$x:00001E5C                                         ; DATA XREF: __ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z+11o
.xdata$x:00001E5D                 db    5
.xdata$x:00001E5E                 db  93h ; ô
.xdata$x:00001E5F                 db  19h
.xdata$x:00001E60                 db    4
.xdata$x:00001E61                 db    0
.xdata$x:00001E62                 db    0
.xdata$x:00001E63                 db    0
.xdata$x:00001E64                 dd offset __unwindtable$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
.xdata$x:00001E68                 db    0
.xdata$x:00001E69                 db    0
.xdata$x:00001E6A                 db    0
.xdata$x:00001E6B                 db    0
.xdata$x:00001E6C                 db    0
.xdata$x:00001E6D                 db    0
.xdata$x:00001E6E                 db    0
.xdata$x:00001E6F                 db    0
.xdata$x:00001E70                 db    0
.xdata$x:00001E71                 db    0
.xdata$x:00001E72                 db    0
.xdata$x:00001E73                 db    0
.xdata$x:00001E74                 db    0
.xdata$x:00001E75                 db    0
.xdata$x:00001E76                 db    0
.xdata$x:00001E77                 db    0
.xdata$x:00001E78                 db    0
.xdata$x:00001E79                 db    0
.xdata$x:00001E7A                 db    0
.xdata$x:00001E7B                 db    0
.xdata$x:00001E7C                 db    1
.xdata$x:00001E7D                 db    0
.xdata$x:00001E7E                 db    0
.xdata$x:00001E7F                 db    0
.xdata$x:00001E80 __unwindtable$??1CDecoder@NLzma@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001E80                                         ; DATA XREF: .xdata$x:00001E98o
.xdata$x:00001E81                 db 0FFh
.xdata$x:00001E82                 db 0FFh
.xdata$x:00001E83                 db 0FFh
.xdata$x:00001E84                 dd offset __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$0
.xdata$x:00001E88                 db    0
.xdata$x:00001E89                 db    0
.xdata$x:00001E8A                 db    0
.xdata$x:00001E8B                 db    0
.xdata$x:00001E8C                 dd offset __unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$1
.xdata$x:00001E90 __ehfuncinfo$??1CDecoder@NLzma@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001E90                                         ; DATA XREF: __ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ+11o
.xdata$x:00001E91                 db    5
.xdata$x:00001E92                 db  93h ; ô
.xdata$x:00001E93                 db  19h
.xdata$x:00001E94                 db    2
.xdata$x:00001E95                 db    0
.xdata$x:00001E96                 db    0
.xdata$x:00001E97                 db    0
.xdata$x:00001E98                 dd offset __unwindtable$??1CDecoder@NLzma@NArchive@@QAE@XZ
.xdata$x:00001E9C                 db    0
.xdata$x:00001E9D                 db    0
.xdata$x:00001E9E                 db    0
.xdata$x:00001E9F                 db    0
.xdata$x:00001EA0                 db    0
.xdata$x:00001EA1                 db    0
.xdata$x:00001EA2                 db    0
.xdata$x:00001EA3                 db    0
.xdata$x:00001EA4                 db    0
.xdata$x:00001EA5                 db    0
.xdata$x:00001EA6                 db    0
.xdata$x:00001EA7                 db    0
.xdata$x:00001EA8                 db    0
.xdata$x:00001EA9                 db    0
.xdata$x:00001EAA                 db    0
.xdata$x:00001EAB                 db    0
.xdata$x:00001EAC                 db    0
.xdata$x:00001EAD                 db    0
.xdata$x:00001EAE                 db    0
.xdata$x:00001EAF                 db    0
.xdata$x:00001EB0                 db    1
.xdata$x:00001EB1                 db    0
.xdata$x:00001EB2                 db    0
.xdata$x:00001EB3                 db    0
.xdata$x:00001EB4 __unwindtable$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00001EB4                                         ; DATA XREF: .xdata$x:00001EC4o
.xdata$x:00001EB5                 db 0FFh
.xdata$x:00001EB6                 db 0FFh
.xdata$x:00001EB7                 db 0FFh
.xdata$x:00001EB8                 dd offset __unwindfunclet$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
.xdata$x:00001EBC __ehfuncinfo$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00001EBC                                         ; DATA XREF: __ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+11o
.xdata$x:00001EBD                 db    5
.xdata$x:00001EBE                 db  93h ; ô
.xdata$x:00001EBF                 db  19h
.xdata$x:00001EC0                 db    1
.xdata$x:00001EC1                 db    0
.xdata$x:00001EC2                 db    0
.xdata$x:00001EC3                 db    0
.xdata$x:00001EC4                 dd offset __unwindtable$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.xdata$x:00001EC8                 db    0
.xdata$x:00001EC9                 db    0
.xdata$x:00001ECA                 db    0
.xdata$x:00001ECB                 db    0
.xdata$x:00001ECC                 db    0
.xdata$x:00001ECD                 db    0
.xdata$x:00001ECE                 db    0
.xdata$x:00001ECF                 db    0
.xdata$x:00001ED0                 db    0
.xdata$x:00001ED1                 db    0
.xdata$x:00001ED2                 db    0
.xdata$x:00001ED3                 db    0
.xdata$x:00001ED4                 db    0
.xdata$x:00001ED5                 db    0
.xdata$x:00001ED6                 db    0
.xdata$x:00001ED7                 db    0
.xdata$x:00001ED8                 db    0
.xdata$x:00001ED9                 db    0
.xdata$x:00001EDA                 db    0
.xdata$x:00001EDB                 db    0
.xdata$x:00001EDC                 db    1
.xdata$x:00001EDD                 db    0
.xdata$x:00001EDE                 db    0
.xdata$x:00001EDF                 db    0
.xdata$x:00001EE0 __catchsym$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 dd offset unk_40
.xdata$x:00001EE0                                         ; DATA XREF: .xdata$x:00001F00o
.xdata$x:00001EE4                 db    0
.xdata$x:00001EE5                 db    0
.xdata$x:00001EE6                 db    0
.xdata$x:00001EE7                 db    0
.xdata$x:00001EE8                 db    0
.xdata$x:00001EE9                 db    0
.xdata$x:00001EEA                 db    0
.xdata$x:00001EEB                 db    0
.xdata$x:00001EEC                 dd offset __catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00001EF0 __tryblocktable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:00001EF0                                         ; DATA XREF: .xdata$x:00001F14o
.xdata$x:00001EF1                 db    0
.xdata$x:00001EF2                 db    0
.xdata$x:00001EF3                 db    0
.xdata$x:00001EF4                 db    6
.xdata$x:00001EF5                 db    0
.xdata$x:00001EF6                 db    0
.xdata$x:00001EF7                 db    0
.xdata$x:00001EF8                 db    7
.xdata$x:00001EF9                 db    0
.xdata$x:00001EFA                 db    0
.xdata$x:00001EFB                 db    0
.xdata$x:00001EFC                 db    1
.xdata$x:00001EFD                 db    0
.xdata$x:00001EFE                 db    0
.xdata$x:00001EFF                 db    0
.xdata$x:00001F00                 dd offset __catchsym$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:00001F04 __ehfuncinfo$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:00001F04                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+1Eo
.xdata$x:00001F05                 db    5
.xdata$x:00001F06                 db  93h ; ô
.xdata$x:00001F07                 db  19h
.xdata$x:00001F08                 db    8
.xdata$x:00001F09                 db    0
.xdata$x:00001F0A                 db    0
.xdata$x:00001F0B                 db    0
.xdata$x:00001F0C                 dd offset __unwindtable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00001F10                 db    1
.xdata$x:00001F11                 db    0
.xdata$x:00001F12                 db    0
.xdata$x:00001F13                 db    0
.xdata$x:00001F14                 dd offset __tryblocktable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00001F18                 db    0
.xdata$x:00001F19                 db    0
.xdata$x:00001F1A                 db    0
.xdata$x:00001F1B                 db    0
.xdata$x:00001F1C                 db    0
.xdata$x:00001F1D                 db    0
.xdata$x:00001F1E                 db    0
.xdata$x:00001F1F                 db    0
.xdata$x:00001F20                 db    0
.xdata$x:00001F21                 db    0
.xdata$x:00001F22                 db    0
.xdata$x:00001F23                 db    0
.xdata$x:00001F24                 db    1
.xdata$x:00001F25                 db    0
.xdata$x:00001F26                 db    0
.xdata$x:00001F27                 db    0
.xdata$x:00001F28 __unwindtable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00001F28                                         ; DATA XREF: .xdata$x:00001F0Co
.xdata$x:00001F29                 db 0FFh
.xdata$x:00001F2A                 db 0FFh
.xdata$x:00001F2B                 db 0FFh
.xdata$x:00001F2C                 db    0
.xdata$x:00001F2D                 db    0
.xdata$x:00001F2E                 db    0
.xdata$x:00001F2F                 db    0
.xdata$x:00001F30                 db    0
.xdata$x:00001F31                 db    0
.xdata$x:00001F32                 db    0
.xdata$x:00001F33                 db    0
.xdata$x:00001F34                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:00001F38                 db    1
.xdata$x:00001F39                 db    0
.xdata$x:00001F3A                 db    0
.xdata$x:00001F3B                 db    0
.xdata$x:00001F3C                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:00001F40                 db    1
.xdata$x:00001F41                 db    0
.xdata$x:00001F42                 db    0
.xdata$x:00001F43                 db    0
.xdata$x:00001F44                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00001F48                 db    3
.xdata$x:00001F49                 db    0
.xdata$x:00001F4A                 db    0
.xdata$x:00001F4B                 db    0
.xdata$x:00001F4C                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00001F50                 db    3
.xdata$x:00001F51                 db    0
.xdata$x:00001F52                 db    0
.xdata$x:00001F53                 db    0
.xdata$x:00001F54                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:00001F58                 db    5
.xdata$x:00001F59                 db    0
.xdata$x:00001F5A                 db    0
.xdata$x:00001F5B                 db    0
.xdata$x:00001F5C                 dd offset __unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00001F60                 db 0FFh
.xdata$x:00001F61                 db 0FFh
.xdata$x:00001F62                 db 0FFh
.xdata$x:00001F63                 db 0FFh
.xdata$x:00001F64                 db    0
.xdata$x:00001F65                 db    0
.xdata$x:00001F66                 db    0
.xdata$x:00001F67                 db    0
.xdata$x:00001F68 __unwindtable$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:00001F68                                         ; DATA XREF: .xdata$x:00001F78o
.xdata$x:00001F69                 db 0FFh
.xdata$x:00001F6A                 db 0FFh
.xdata$x:00001F6B                 db 0FFh
.xdata$x:00001F6C                 dd offset __unwindfunclet$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00001F70 __ehfuncinfo$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00001F70                                         ; DATA XREF: __ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00001F71                 db    5
.xdata$x:00001F72                 db  93h ; ô
.xdata$x:00001F73                 db  19h
.xdata$x:00001F74                 db    1
.xdata$x:00001F75                 db    0
.xdata$x:00001F76                 db    0
.xdata$x:00001F77                 db    0
.xdata$x:00001F78                 dd offset __unwindtable$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00001F7C                 db    0
.xdata$x:00001F7D                 db    0
.xdata$x:00001F7E                 db    0
.xdata$x:00001F7F                 db    0
.xdata$x:00001F80                 db    0
.xdata$x:00001F81                 db    0
.xdata$x:00001F82                 db    0
.xdata$x:00001F83                 db    0
.xdata$x:00001F84                 db    0
.xdata$x:00001F85                 db    0
.xdata$x:00001F86                 db    0
.xdata$x:00001F87                 db    0
.xdata$x:00001F88                 db    0
.xdata$x:00001F89                 db    0
.xdata$x:00001F8A                 db    0
.xdata$x:00001F8B                 db    0
.xdata$x:00001F8C                 db    0
.xdata$x:00001F8D                 db    0
.xdata$x:00001F8E                 db    0
.xdata$x:00001F8F                 db    0
.xdata$x:00001F90                 db    1
.xdata$x:00001F91                 db    0
.xdata$x:00001F92                 db    0
.xdata$x:00001F93                 db    0
.xdata$x:00001F94 __unwindtable$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:00001F94                                         ; DATA XREF: .xdata$x:00001FA4o
.xdata$x:00001F95                 db 0FFh
.xdata$x:00001F96                 db 0FFh
.xdata$x:00001F97                 db 0FFh
.xdata$x:00001F98                 dd offset __unwindfunclet$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00001F9C __ehfuncinfo$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00001F9C                                         ; DATA XREF: __ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00001F9D                 db    5
.xdata$x:00001F9E                 db  93h ; ô
.xdata$x:00001F9F                 db  19h
.xdata$x:00001FA0                 db    1
.xdata$x:00001FA1                 db    0
.xdata$x:00001FA2                 db    0
.xdata$x:00001FA3                 db    0
.xdata$x:00001FA4                 dd offset __unwindtable$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00001FA8                 db    0
.xdata$x:00001FA9                 db    0
.xdata$x:00001FAA                 db    0
.xdata$x:00001FAB                 db    0
.xdata$x:00001FAC                 db    0
.xdata$x:00001FAD                 db    0
.xdata$x:00001FAE                 db    0
.xdata$x:00001FAF                 db    0
.xdata$x:00001FB0                 db    0
.xdata$x:00001FB1                 db    0
.xdata$x:00001FB2                 db    0
.xdata$x:00001FB3                 db    0
.xdata$x:00001FB4                 db    0
.xdata$x:00001FB5                 db    0
.xdata$x:00001FB6                 db    0
.xdata$x:00001FB7                 db    0
.xdata$x:00001FB8                 db    0
.xdata$x:00001FB9                 db    0
.xdata$x:00001FBA                 db    0
.xdata$x:00001FBB                 db    0
.xdata$x:00001FBC                 db    1
.xdata$x:00001FBD                 db    0
.xdata$x:00001FBE                 db    0
.xdata$x:00001FBF                 db    0
.xdata$x:00001FBF _xdata$x        ends
.xdata$x:00001FBF
.text:00001FC0 ; ===========================================================================
.text:00001FC0
.text:00001FC0 ; Segment type: Pure code
.text:00001FC0 ; Segment permissions: Read/Execute
.text:00001FC0 _text           segment para public 'CODE' use32
.text:00001FC0                 assume cs:_text
.text:00001FC0                 ;org 1FC0h
.text:00001FC0 ; COMDAT (pick any)
.text:00001FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FC0
.text:00001FC0 ; =============== S U B R O U T I N E =======================================
.text:00001FC0
.text:00001FC0 ; Attributes: bp-based frame
.text:00001FC0
.text:00001FC0 ; public: __thiscall CBcjCoder::CBcjCoder(int)
.text:00001FC0                 public ??0CBcjCoder@@QAE@H@Z
.text:00001FC0 ??0CBcjCoder@@QAE@H@Z proc near         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+14Dp
.text:00001FC0
.text:00001FC0 var_4           = dword ptr -4
.text:00001FC0 arg_0           = dword ptr  8
.text:00001FC0
.text:00001FC0                 push    ebp
.text:00001FC1                 mov     ebp, esp
.text:00001FC3                 push    ecx
.text:00001FC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FCB                 mov     [ebp+var_4], ecx
.text:00001FCE                 mov     ecx, [ebp+var_4] ; this
.text:00001FD1                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00001FD6                 mov     ecx, [ebp+var_4]
.text:00001FD9                 add     ecx, 4          ; this
.text:00001FDC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00001FE1                 mov     eax, [ebp+var_4]
.text:00001FE4                 mov     dword ptr [eax], offset ??_7CBcjCoder@@6B@ ; const CBcjCoder::`vftable'
.text:00001FEA                 mov     ecx, [ebp+var_4]
.text:00001FED                 mov     dword ptr [ecx+8], 0
.text:00001FF4                 mov     edx, [ebp+var_4]
.text:00001FF7                 mov     eax, [ebp+arg_0]
.text:00001FFA                 mov     [edx+10h], eax
.text:00001FFD                 mov     ecx, [ebp+var_4]
.text:00002000                 mov     dword ptr [ecx+0Ch], 0
.text:00002007                 mov     eax, [ebp+var_4]
.text:0000200A                 add     esp, 4
.text:0000200D                 cmp     ebp, esp
.text:0000200F                 call    __RTC_CheckEsp
.text:00002014                 mov     esp, ebp
.text:00002016                 pop     ebp
.text:00002017                 retn    4
.text:00002017 ??0CBcjCoder@@QAE@H@Z endp
.text:00002017
.text:00002017 ; ---------------------------------------------------------------------------
.text:0000201A                 align 4
.text:0000201A _text           ends
.text:0000201A
.rdata:0000201C ; ===========================================================================
.rdata:0000201C
.rdata:0000201C ; Segment type: Pure data
.rdata:0000201C ; Segment permissions: Read
.rdata:0000201C _rdata          segment dword public 'DATA' use32
.rdata:0000201C                 assume cs:_rdata
.rdata:0000201C                 ;org 201Ch
.rdata:0000201C ; COMDAT (pick largest)
.rdata:0000201C                 dd offset ??_R4CBcjCoder@@6B@ ; const CBcjCoder::`RTTI Complete Object Locator'
.rdata:00002020                 public ??_7CBcjCoder@@6B@
.rdata:00002020 ; const CBcjCoder::`vftable'
.rdata:00002020 ??_7CBcjCoder@@6B@ dd offset ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002020                                         ; DATA XREF: CBcjCoder::CBcjCoder(int)+24o
.rdata:00002020                                         ; CBcjCoder::QueryInterface(_GUID const &,void * *)
.rdata:00002024                 dd offset ?AddRef@CBcjCoder@@UAGKXZ ; CBcjCoder::AddRef(void)
.rdata:00002028                 dd offset ?Release@CBcjCoder@@UAGKXZ ; CBcjCoder::Release(void)
.rdata:0000202C                 dd offset ?Init@CBcjCoder@@UAGJXZ ; CBcjCoder::Init(void)
.rdata:00002030                 dd offset ?Filter@CBcjCoder@@UAGIPAEI@Z ; CBcjCoder::Filter(uchar *,uint)
.rdata:00002030 _rdata          ends
.rdata:00002030
.rdata$r:00002034 ; ===========================================================================
.rdata$r:00002034
.rdata$r:00002034 ; Segment type: Pure data
.rdata$r:00002034 ; Segment permissions: Read
.rdata$r:00002034 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002034                 assume cs:_rdata$r
.rdata$r:00002034                 ;org 2034h
.rdata$r:00002034 ; COMDAT (pick any)
.rdata$r:00002034                 public ??_R4CBcjCoder@@6B@
.rdata$r:00002034 ; const CBcjCoder::`RTTI Complete Object Locator'
.rdata$r:00002034 ??_R4CBcjCoder@@6B@ db    0             ; DATA XREF: .rdata:0000201Co
.rdata$r:00002035                 db    0
.rdata$r:00002036                 db    0
.rdata$r:00002037                 db    0
.rdata$r:00002038                 db    0
.rdata$r:00002039                 db    0
.rdata$r:0000203A                 db    0
.rdata$r:0000203B                 db    0
.rdata$r:0000203C                 db    0
.rdata$r:0000203D                 db    0
.rdata$r:0000203E                 db    0
.rdata$r:0000203F                 db    0
.rdata$r:00002040                 dd offset ??_R0?AVCBcjCoder@@@8 ; CBcjCoder `RTTI Type Descriptor'
.rdata$r:00002044                 dd offset ??_R3CBcjCoder@@8 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002044 _rdata$r        ends
.rdata$r:00002044
.data:00002048 ; ===========================================================================
.data:00002048
.data:00002048 ; Segment type: Pure data
.data:00002048 ; Segment permissions: Read/Write
.data:00002048 _data           segment dword public 'DATA' use32
.data:00002048                 assume cs:_data
.data:00002048                 ;org 2048h
.data:00002048 ; COMDAT (pick any)
.data:00002048                 public ??_R0?AVCBcjCoder@@@8
.data:00002048 ; class CBcjCoder `RTTI Type Descriptor'
.data:00002048 ??_R0?AVCBcjCoder@@@8 dd offset ??_7type_info@@6B@
.data:00002048                                         ; DATA XREF: .rdata$r:00002040o
.data:00002048                                         ; .rdata$r:CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002048                                         ; const type_info::`vftable'
.data:0000204C                 align 10h
.data:00002050 a_?avcbcjcoder@ db '.?AVCBcjCoder@@',0
.data:00002050 _data           ends
.data:00002050
.rdata$r:00002060 ; ===========================================================================
.rdata$r:00002060
.rdata$r:00002060 ; Segment type: Pure data
.rdata$r:00002060 ; Segment permissions: Read
.rdata$r:00002060 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002060                 assume cs:_rdata$r
.rdata$r:00002060                 ;org 2060h
.rdata$r:00002060 ; COMDAT (pick any)
.rdata$r:00002060                 public ??_R3CBcjCoder@@8
.rdata$r:00002060 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002060 ??_R3CBcjCoder@@8 db    0               ; DATA XREF: .rdata$r:00002044o
.rdata$r:00002060                                         ; .rdata$r:0000209Co
.rdata$r:00002061                 db    0
.rdata$r:00002062                 db    0
.rdata$r:00002063                 db    0
.rdata$r:00002064                 db    1
.rdata$r:00002065                 db    0
.rdata$r:00002066                 db    0
.rdata$r:00002067                 db    0
.rdata$r:00002068                 db    4
.rdata$r:00002069                 db    0
.rdata$r:0000206A                 db    0
.rdata$r:0000206B                 db    0
.rdata$r:0000206C                 dd offset ??_R2CBcjCoder@@8 ; CBcjCoder::`RTTI Base Class Array'
.rdata$r:0000206C _rdata$r        ends
.rdata$r:0000206C
.rdata$r:00002070 ; ===========================================================================
.rdata$r:00002070
.rdata$r:00002070 ; Segment type: Pure data
.rdata$r:00002070 ; Segment permissions: Read
.rdata$r:00002070 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002070                 assume cs:_rdata$r
.rdata$r:00002070                 ;org 2070h
.rdata$r:00002070 ; COMDAT (pick any)
.rdata$r:00002070                 public ??_R2CBcjCoder@@8
.rdata$r:00002070 ; CBcjCoder::`RTTI Base Class Array'
.rdata$r:00002070 ??_R2CBcjCoder@@8 dd offset ??_R1A@?0A@EA@CBcjCoder@@8
.rdata$r:00002070                                         ; DATA XREF: .rdata$r:0000206Co
.rdata$r:00002070                                         ; CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002074                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002078                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000207C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002080                 db    0
.rdata$r:00002081                 align 4
.rdata$r:00002081 _rdata$r        ends
.rdata$r:00002081
.rdata$r:00002084 ; ===========================================================================
.rdata$r:00002084
.rdata$r:00002084 ; Segment type: Pure data
.rdata$r:00002084 ; Segment permissions: Read
.rdata$r:00002084 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002084                 assume cs:_rdata$r
.rdata$r:00002084                 ;org 2084h
.rdata$r:00002084 ; COMDAT (pick any)
.rdata$r:00002084                 public ??_R1A@?0A@EA@CBcjCoder@@8
.rdata$r:00002084 ; CBcjCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002084 ??_R1A@?0A@EA@CBcjCoder@@8 dd offset ??_R0?AVCBcjCoder@@@8
.rdata$r:00002084                                         ; DATA XREF: .rdata$r:CBcjCoder::`RTTI Base Class Array'o
.rdata$r:00002084                                         ; CBcjCoder `RTTI Type Descriptor'
.rdata$r:00002088                 db    3
.rdata$r:00002089                 db    0
.rdata$r:0000208A                 db    0
.rdata$r:0000208B                 db    0
.rdata$r:0000208C                 db    0
.rdata$r:0000208D                 db    0
.rdata$r:0000208E                 db    0
.rdata$r:0000208F                 db    0
.rdata$r:00002090                 db 0FFh
.rdata$r:00002091                 db 0FFh
.rdata$r:00002092                 db 0FFh
.rdata$r:00002093                 db 0FFh
.rdata$r:00002094                 db    0
.rdata$r:00002095                 db    0
.rdata$r:00002096                 db    0
.rdata$r:00002097                 db    0
.rdata$r:00002098                 db  40h ; @
.rdata$r:00002099                 db    0
.rdata$r:0000209A                 db    0
.rdata$r:0000209B                 db    0
.rdata$r:0000209C                 dd offset ??_R3CBcjCoder@@8 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000209C _rdata$r        ends
.rdata$r:0000209C
.rdata$r:000020A0 ; ===========================================================================
.rdata$r:000020A0
.rdata$r:000020A0 ; Segment type: Pure data
.rdata$r:000020A0 ; Segment permissions: Read
.rdata$r:000020A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020A0                 assume cs:_rdata$r
.rdata$r:000020A0                 ;org 20A0h
.rdata$r:000020A0 ; COMDAT (pick any)
.rdata$r:000020A0                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000020A0 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000020A0 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:000020A0                                         ; DATA XREF: .rdata$r:00002074o
.rdata$r:000020A0                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o
.rdata$r:000020A0                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000020A4                 db    1
.rdata$r:000020A5                 db    0
.rdata$r:000020A6                 db    0
.rdata$r:000020A7                 db    0
.rdata$r:000020A8                 db    0
.rdata$r:000020A9                 db    0
.rdata$r:000020AA                 db    0
.rdata$r:000020AB                 db    0
.rdata$r:000020AC                 db 0FFh
.rdata$r:000020AD                 db 0FFh
.rdata$r:000020AE                 db 0FFh
.rdata$r:000020AF                 db 0FFh
.rdata$r:000020B0                 db    0
.rdata$r:000020B1                 db    0
.rdata$r:000020B2                 db    0
.rdata$r:000020B3                 db    0
.rdata$r:000020B4                 db  40h ; @
.rdata$r:000020B5                 db    0
.rdata$r:000020B6                 db    0
.rdata$r:000020B7                 db    0
.rdata$r:000020B8                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020B8 _rdata$r        ends
.rdata$r:000020B8
.data:000020BC ; ===========================================================================
.data:000020BC
.data:000020BC ; Segment type: Pure data
.data:000020BC ; Segment permissions: Read/Write
.data:000020BC _data           segment dword public 'DATA' use32
.data:000020BC                 assume cs:_data
.data:000020BC                 ;org 20BCh
.data:000020BC ; COMDAT (pick any)
.data:000020BC                 public ??_R0?AUICompressFilter@@@8
.data:000020BC ; struct ICompressFilter `RTTI Type Descriptor'
.data:000020BC ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:000020BC                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000020BC                                         ; .rdata$r:0000233Co
.data:000020BC                                         ; const type_info::`vftable'
.data:000020C0                 db    0
.data:000020C1                 db    0
.data:000020C2                 db    0
.data:000020C3                 db    0
.data:000020C4                 db  2Eh ; .
.data:000020C5                 db  3Fh ; ?
.data:000020C6                 db  41h ; A
.data:000020C7                 db  55h ; U
.data:000020C8                 db  49h ; I
.data:000020C9                 db  43h ; C
.data:000020CA                 db  6Fh ; o
.data:000020CB                 db  6Dh ; m
.data:000020CC                 db  70h ; p
.data:000020CD                 db  72h ; r
.data:000020CE                 db  65h ; e
.data:000020CF                 db  73h ; s
.data:000020D0                 db  73h ; s
.data:000020D1                 db  46h ; F
.data:000020D2                 db  69h ; i
.data:000020D3                 db  6Ch ; l
.data:000020D4                 db  74h ; t
.data:000020D5                 db  65h ; e
.data:000020D6                 db  72h ; r
.data:000020D7                 db  40h ; @
.data:000020D8                 db  40h ; @
.data:000020D9                 db    0
.data:000020DA                 align 4
.data:000020DA _data           ends
.data:000020DA
.rdata$r:000020DC ; ===========================================================================
.rdata$r:000020DC
.rdata$r:000020DC ; Segment type: Pure data
.rdata$r:000020DC ; Segment permissions: Read
.rdata$r:000020DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020DC                 assume cs:_rdata$r
.rdata$r:000020DC                 ;org 20DCh
.rdata$r:000020DC ; COMDAT (pick any)
.rdata$r:000020DC                 public ??_R3ICompressFilter@@8
.rdata$r:000020DC ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020DC ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:000020B8o
.rdata$r:000020DC                                         ; .rdata$r:00002340o
.rdata$r:000020DD                 db    0
.rdata$r:000020DE                 db    0
.rdata$r:000020DF                 db    0
.rdata$r:000020E0                 db    0
.rdata$r:000020E1                 db    0
.rdata$r:000020E2                 db    0
.rdata$r:000020E3                 db    0
.rdata$r:000020E4                 db    2
.rdata$r:000020E5                 db    0
.rdata$r:000020E6                 db    0
.rdata$r:000020E7                 db    0
.rdata$r:000020E8                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000020E8 _rdata$r        ends
.rdata$r:000020E8
.rdata$r:000020EC ; ===========================================================================
.rdata$r:000020EC
.rdata$r:000020EC ; Segment type: Pure data
.rdata$r:000020EC ; Segment permissions: Read
.rdata$r:000020EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020EC                 assume cs:_rdata$r
.rdata$r:000020EC                 ;org 20ECh
.rdata$r:000020EC ; COMDAT (pick any)
.rdata$r:000020EC                 public ??_R2ICompressFilter@@8
.rdata$r:000020EC ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000020EC ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000020EC                                         ; DATA XREF: .rdata$r:000020E8o
.rdata$r:000020EC                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020F0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020F4                 db    0
.rdata$r:000020F5                 align 4
.rdata$r:000020F5 _rdata$r        ends
.rdata$r:000020F5
.rdata$r:000020F8 ; ===========================================================================
.rdata$r:000020F8
.rdata$r:000020F8 ; Segment type: Pure data
.rdata$r:000020F8 ; Segment permissions: Read
.rdata$r:000020F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020F8                 assume cs:_rdata$r
.rdata$r:000020F8                 ;org 20F8h
.rdata$r:000020F8 ; COMDAT (pick any)
.rdata$r:000020F8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000020F8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000020F8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000020F8                                         ; DATA XREF: .rdata$r:00002078o
.rdata$r:000020F8                                         ; .rdata$r:000020F0o ...
.rdata$r:000020F8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000020FC                 db    0
.rdata$r:000020FD                 db    0
.rdata$r:000020FE                 db    0
.rdata$r:000020FF                 db    0
.rdata$r:00002100                 db    0
.rdata$r:00002101                 db    0
.rdata$r:00002102                 db    0
.rdata$r:00002103                 db    0
.rdata$r:00002104                 db 0FFh
.rdata$r:00002105                 db 0FFh
.rdata$r:00002106                 db 0FFh
.rdata$r:00002107                 db 0FFh
.rdata$r:00002108                 db    0
.rdata$r:00002109                 db    0
.rdata$r:0000210A                 db    0
.rdata$r:0000210B                 db    0
.rdata$r:0000210C                 db  40h ; @
.rdata$r:0000210D                 db    0
.rdata$r:0000210E                 db    0
.rdata$r:0000210F                 db    0
.rdata$r:00002110                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002110 _rdata$r        ends
.rdata$r:00002110
.data:00002114 ; ===========================================================================
.data:00002114
.data:00002114 ; Segment type: Pure data
.data:00002114 ; Segment permissions: Read/Write
.data:00002114 _data           segment dword public 'DATA' use32
.data:00002114                 assume cs:_data
.data:00002114                 ;org 2114h
.data:00002114 ; COMDAT (pick any)
.data:00002114                 public ??_R0?AUIUnknown@@@8
.data:00002114 ; struct IUnknown `RTTI Type Descriptor'
.data:00002114 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00002114                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002114                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00002114                                         ; const type_info::`vftable'
.data:00002118                 db    0
.data:00002119                 db    0
.data:0000211A                 db    0
.data:0000211B                 db    0
.data:0000211C                 db  2Eh ; .
.data:0000211D                 db  3Fh ; ?
.data:0000211E                 db  41h ; A
.data:0000211F                 db  55h ; U
.data:00002120                 db  49h ; I
.data:00002121                 db  55h ; U
.data:00002122                 db  6Eh ; n
.data:00002123                 db  6Bh ; k
.data:00002124                 db  6Eh ; n
.data:00002125                 db  6Fh ; o
.data:00002126                 db  77h ; w
.data:00002127                 db  6Eh ; n
.data:00002128                 db  40h ; @
.data:00002129                 db  40h ; @
.data:0000212A                 db    0
.data:0000212B                 align 4
.data:0000212B _data           ends
.data:0000212B
.rdata$r:0000212C ; ===========================================================================
.rdata$r:0000212C
.rdata$r:0000212C ; Segment type: Pure data
.rdata$r:0000212C ; Segment permissions: Read
.rdata$r:0000212C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000212C                 assume cs:_rdata$r
.rdata$r:0000212C                 ;org 212Ch
.rdata$r:0000212C ; COMDAT (pick any)
.rdata$r:0000212C                 public ??_R3IUnknown@@8
.rdata$r:0000212C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000212C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00002110o
.rdata$r:0000212C                                         ; .rdata$r:00002BA0o ...
.rdata$r:0000212D                 db    0
.rdata$r:0000212E                 db    0
.rdata$r:0000212F                 db    0
.rdata$r:00002130                 db    0
.rdata$r:00002131                 db    0
.rdata$r:00002132                 db    0
.rdata$r:00002133                 db    0
.rdata$r:00002134                 db    1
.rdata$r:00002135                 db    0
.rdata$r:00002136                 db    0
.rdata$r:00002137                 db    0
.rdata$r:00002138                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002138 _rdata$r        ends
.rdata$r:00002138
.rdata$r:0000213C ; ===========================================================================
.rdata$r:0000213C
.rdata$r:0000213C ; Segment type: Pure data
.rdata$r:0000213C ; Segment permissions: Read
.rdata$r:0000213C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000213C                 assume cs:_rdata$r
.rdata$r:0000213C                 ;org 213Ch
.rdata$r:0000213C ; COMDAT (pick any)
.rdata$r:0000213C                 public ??_R2IUnknown@@8
.rdata$r:0000213C ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000213C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000213C                                         ; DATA XREF: .rdata$r:00002138o
.rdata$r:0000213C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002140                 db    0
.rdata$r:00002141                 align 4
.rdata$r:00002141 _rdata$r        ends
.rdata$r:00002141
.rdata$r:00002144 ; ===========================================================================
.rdata$r:00002144
.rdata$r:00002144 ; Segment type: Pure data
.rdata$r:00002144 ; Segment permissions: Read
.rdata$r:00002144 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002144                 assume cs:_rdata$r
.rdata$r:00002144                 ;org 2144h
.rdata$r:00002144 ; COMDAT (pick any)
.rdata$r:00002144                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00002144 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002144 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002144                                         ; DATA XREF: .rdata$r:0000207Co
.rdata$r:00002144                                         ; .rdata$r:0000267Co
.rdata$r:00002144                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002148                 db    0
.rdata$r:00002149                 db    0
.rdata$r:0000214A                 db    0
.rdata$r:0000214B                 db    0
.rdata$r:0000214C                 db    4
.rdata$r:0000214D                 db    0
.rdata$r:0000214E                 db    0
.rdata$r:0000214F                 db    0
.rdata$r:00002150                 db 0FFh
.rdata$r:00002151                 db 0FFh
.rdata$r:00002152                 db 0FFh
.rdata$r:00002153                 db 0FFh
.rdata$r:00002154                 db    0
.rdata$r:00002155                 db    0
.rdata$r:00002156                 db    0
.rdata$r:00002157                 db    0
.rdata$r:00002158                 db  40h ; @
.rdata$r:00002159                 db    0
.rdata$r:0000215A                 db    0
.rdata$r:0000215B                 db    0
.rdata$r:0000215C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000215C _rdata$r        ends
.rdata$r:0000215C
.data:00002160 ; ===========================================================================
.data:00002160
.data:00002160 ; Segment type: Pure data
.data:00002160 ; Segment permissions: Read/Write
.data:00002160 _data           segment dword public 'DATA' use32
.data:00002160                 assume cs:_data
.data:00002160                 ;org 2160h
.data:00002160 ; COMDAT (pick any)
.data:00002160                 public ??_R0?AVCMyUnknownImp@@@8
.data:00002160 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00002160 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00002160                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002160                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002160                                         ; const type_info::`vftable'
.data:00002164                 align 8
.data:00002168 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00002168 _data           ends
.data:00002168
.rdata$r:0000217C ; ===========================================================================
.rdata$r:0000217C
.rdata$r:0000217C ; Segment type: Pure data
.rdata$r:0000217C ; Segment permissions: Read
.rdata$r:0000217C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000217C                 assume cs:_rdata$r
.rdata$r:0000217C                 ;org 217Ch
.rdata$r:0000217C ; COMDAT (pick any)
.rdata$r:0000217C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000217C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000217C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000215Co
.rdata$r:0000217C                                         ; .rdata$r:000021ACo ...
.rdata$r:0000217D                 db    0
.rdata$r:0000217E                 db    0
.rdata$r:0000217F                 db    0
.rdata$r:00002180                 db    0
.rdata$r:00002181                 db    0
.rdata$r:00002182                 db    0
.rdata$r:00002183                 db    0
.rdata$r:00002184                 db    1
.rdata$r:00002185                 db    0
.rdata$r:00002186                 db    0
.rdata$r:00002187                 db    0
.rdata$r:00002188                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002188 _rdata$r        ends
.rdata$r:00002188
.rdata$r:0000218C ; ===========================================================================
.rdata$r:0000218C
.rdata$r:0000218C ; Segment type: Pure data
.rdata$r:0000218C ; Segment permissions: Read
.rdata$r:0000218C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000218C                 assume cs:_rdata$r
.rdata$r:0000218C                 ;org 218Ch
.rdata$r:0000218C ; COMDAT (pick any)
.rdata$r:0000218C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000218C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000218C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000218C                                         ; DATA XREF: .rdata$r:00002188o
.rdata$r:0000218C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002190                 db    0
.rdata$r:00002191                 align 4
.rdata$r:00002191 _rdata$r        ends
.rdata$r:00002191
.rdata$r:00002194 ; ===========================================================================
.rdata$r:00002194
.rdata$r:00002194 ; Segment type: Pure data
.rdata$r:00002194 ; Segment permissions: Read
.rdata$r:00002194 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002194                 assume cs:_rdata$r
.rdata$r:00002194                 ;org 2194h
.rdata$r:00002194 ; COMDAT (pick any)
.rdata$r:00002194                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002194 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002194 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002194                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002194                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002198                 align 10h
.rdata$r:000021A0                 db 0FFh
.rdata$r:000021A1                 db 0FFh
.rdata$r:000021A2                 db 0FFh
.rdata$r:000021A3                 db 0FFh
.rdata$r:000021A4                 db    0
.rdata$r:000021A5                 db    0
.rdata$r:000021A6                 db    0
.rdata$r:000021A7                 db    0
.rdata$r:000021A8                 db  40h ; @
.rdata$r:000021A9                 db    0
.rdata$r:000021AA                 db    0
.rdata$r:000021AB                 db    0
.rdata$r:000021AC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021AC _rdata$r        ends
.rdata$r:000021AC
.text:000021B0 ; ===========================================================================
.text:000021B0
.text:000021B0 ; Segment type: Pure code
.text:000021B0 ; Segment permissions: Read/Execute
.text:000021B0 _text           segment para public 'CODE' use32
.text:000021B0                 assume cs:_text
.text:000021B0                 ;org 21B0h
.text:000021B0 ; COMDAT (pick any)
.text:000021B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021B0
.text:000021B0 ; =============== S U B R O U T I N E =======================================
.text:000021B0
.text:000021B0 ; Attributes: bp-based frame
.text:000021B0
.text:000021B0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000021B0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000021B0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBcjCoder::CBcjCoder(int)+1Cp
.text:000021B0                                         ; CDummyOutStream::CDummyOutStream(void)+1Cp ...
.text:000021B0
.text:000021B0 var_4           = dword ptr -4
.text:000021B0
.text:000021B0                 push    ebp
.text:000021B1                 mov     ebp, esp
.text:000021B3                 push    ecx
.text:000021B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021BB                 mov     [ebp+var_4], ecx
.text:000021BE                 mov     eax, [ebp+var_4]
.text:000021C1                 mov     dword ptr [eax], 0
.text:000021C7                 mov     eax, [ebp+var_4]
.text:000021CA                 mov     esp, ebp
.text:000021CC                 pop     ebp
.text:000021CD                 retn
.text:000021CD ??0CMyUnknownImp@@QAE@XZ endp
.text:000021CD
.text:000021CD ; ---------------------------------------------------------------------------
.text:000021CE                 align 10h
.text:000021CE _text           ends
.text:000021CE
.text:000021D0 ; ===========================================================================
.text:000021D0
.text:000021D0 ; Segment type: Pure code
.text:000021D0 ; Segment permissions: Read/Execute
.text:000021D0 _text           segment para public 'CODE' use32
.text:000021D0                 assume cs:_text
.text:000021D0                 ;org 21D0h
.text:000021D0 ; COMDAT (pick any)
.text:000021D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021D0
.text:000021D0 ; =============== S U B R O U T I N E =======================================
.text:000021D0
.text:000021D0 ; Attributes: bp-based frame
.text:000021D0
.text:000021D0 ; __int32 __stdcall CBcjCoder::QueryInterface(CBcjCoder *this, const struct _GUID *Buf1, void **)
.text:000021D0                 public ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
.text:000021D0 ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000021D0                                         ; DATA XREF: .rdata:const CBcjCoder::`vftable'o
.text:000021D0
.text:000021D0 this            = dword ptr  8
.text:000021D0 Buf1            = dword ptr  0Ch
.text:000021D0 arg_8           = dword ptr  10h
.text:000021D0
.text:000021D0                 push    ebp
.text:000021D1                 mov     ebp, esp
.text:000021D3                 mov     eax, [ebp+arg_8]
.text:000021D6                 mov     dword ptr [eax], 0
.text:000021DC                 push    offset _IID_IUnknown ; Buf2
.text:000021E1                 mov     ecx, [ebp+Buf1]
.text:000021E4                 push    ecx             ; Buf1
.text:000021E5                 call    ___@8           ; __(x,x)
.text:000021EA                 test    eax, eax
.text:000021EC                 jz      short loc_21F8
.text:000021EE                 mov     edx, [ebp+arg_8]
.text:000021F1                 mov     eax, [ebp+this]
.text:000021F4                 mov     [edx], eax
.text:000021F6                 jmp     short loc_21FF
.text:000021F8 ; ---------------------------------------------------------------------------
.text:000021F8
.text:000021F8 loc_21F8:                               ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:000021F8                 mov     eax, 80004002h
.text:000021FD                 jmp     short loc_2210
.text:000021FF ; ---------------------------------------------------------------------------
.text:000021FF
.text:000021FF loc_21FF:                               ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+26j
.text:000021FF                 mov     ecx, [ebp+this]
.text:00002202                 mov     edx, [ecx+4]
.text:00002205                 add     edx, 1
.text:00002208                 mov     eax, [ebp+this]
.text:0000220B                 mov     [eax+4], edx
.text:0000220E                 xor     eax, eax
.text:00002210
.text:00002210 loc_2210:                               ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00002210                 cmp     ebp, esp
.text:00002212                 call    __RTC_CheckEsp
.text:00002217                 pop     ebp
.text:00002218                 retn    0Ch
.text:00002218 ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002218
.text:00002218 ; ---------------------------------------------------------------------------
.text:0000221B                 align 4
.text:0000221B _text           ends
.text:0000221B
.text:0000221C ; ===========================================================================
.text:0000221C
.text:0000221C ; Segment type: Pure code
.text:0000221C ; Segment permissions: Read/Execute
.text:0000221C _text           segment para public 'CODE' use32
.text:0000221C                 assume cs:_text
.text:0000221C                 ;org 221Ch
.text:0000221C ; COMDAT (pick any)
.text:0000221C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000221C
.text:0000221C ; =============== S U B R O U T I N E =======================================
.text:0000221C
.text:0000221C ; Attributes: bp-based frame
.text:0000221C
.text:0000221C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000221C                 public ___@8
.text:0000221C ___@8           proc near               ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+15p
.text:0000221C                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)+15p ...
.text:0000221C
.text:0000221C Buf1            = dword ptr  8
.text:0000221C Buf2            = dword ptr  0Ch
.text:0000221C
.text:0000221C                 push    ebp
.text:0000221D                 mov     ebp, esp
.text:0000221F                 mov     eax, [ebp+Buf2]
.text:00002222                 push    eax             ; Buf2
.text:00002223                 mov     ecx, [ebp+Buf1]
.text:00002226                 push    ecx             ; Buf1
.text:00002227                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000222C                 cmp     ebp, esp
.text:0000222E                 call    __RTC_CheckEsp
.text:00002233                 pop     ebp
.text:00002234                 retn    8
.text:00002234 ___@8           endp
.text:00002234
.text:00002234 ; ---------------------------------------------------------------------------
.text:00002237                 align 4
.text:00002237 _text           ends
.text:00002237
.text:00002238 ; ===========================================================================
.text:00002238
.text:00002238 ; Segment type: Pure code
.text:00002238 ; Segment permissions: Read/Execute
.text:00002238 _text           segment para public 'CODE' use32
.text:00002238                 assume cs:_text
.text:00002238                 ;org 2238h
.text:00002238 ; COMDAT (pick any)
.text:00002238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002238
.text:00002238 ; =============== S U B R O U T I N E =======================================
.text:00002238
.text:00002238 ; Attributes: bp-based frame
.text:00002238
.text:00002238 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00002238                 public _IsEqualGUID@8
.text:00002238 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00002238
.text:00002238 Buf1            = dword ptr  8
.text:00002238 Buf2            = dword ptr  0Ch
.text:00002238
.text:00002238                 push    ebp
.text:00002239                 mov     ebp, esp
.text:0000223B                 push    10h             ; Size
.text:0000223D                 mov     eax, [ebp+Buf2]
.text:00002240                 push    eax             ; Buf2
.text:00002241                 mov     ecx, [ebp+Buf1]
.text:00002244                 push    ecx             ; Buf1
.text:00002245                 call    _memcmp
.text:0000224A                 add     esp, 0Ch
.text:0000224D                 neg     eax
.text:0000224F                 sbb     eax, eax
.text:00002251                 add     eax, 1
.text:00002254                 cmp     ebp, esp
.text:00002256                 call    __RTC_CheckEsp
.text:0000225B                 pop     ebp
.text:0000225C                 retn    8
.text:0000225C _IsEqualGUID@8  endp
.text:0000225C
.text:0000225C ; ---------------------------------------------------------------------------
.text:0000225F                 align 10h
.text:0000225F _text           ends
.text:0000225F
.text:00002260 ; ===========================================================================
.text:00002260
.text:00002260 ; Segment type: Pure code
.text:00002260 ; Segment permissions: Read/Execute
.text:00002260 _text           segment para public 'CODE' use32
.text:00002260                 assume cs:_text
.text:00002260                 ;org 2260h
.text:00002260 ; COMDAT (pick any)
.text:00002260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002260
.text:00002260 ; =============== S U B R O U T I N E =======================================
.text:00002260
.text:00002260 ; Attributes: bp-based frame
.text:00002260
.text:00002260 ; unsigned __int32 __stdcall CBcjCoder::AddRef(CBcjCoder *this)
.text:00002260                 public ?AddRef@CBcjCoder@@UAGKXZ
.text:00002260 ?AddRef@CBcjCoder@@UAGKXZ proc near     ; DATA XREF: .rdata:00002024o
.text:00002260
.text:00002260 var_4           = dword ptr -4
.text:00002260 this            = dword ptr  8
.text:00002260
.text:00002260                 push    ebp
.text:00002261                 mov     ebp, esp
.text:00002263                 push    ecx
.text:00002264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000226B                 mov     eax, [ebp+this]
.text:0000226E                 mov     ecx, [eax+4]
.text:00002271                 add     ecx, 1
.text:00002274                 mov     [ebp+var_4], ecx
.text:00002277                 mov     edx, [ebp+this]
.text:0000227A                 mov     eax, [ebp+var_4]
.text:0000227D                 mov     [edx+4], eax
.text:00002280                 mov     eax, [ebp+var_4]
.text:00002283                 mov     esp, ebp
.text:00002285                 pop     ebp
.text:00002286                 retn    4
.text:00002286 ?AddRef@CBcjCoder@@UAGKXZ endp
.text:00002286
.text:00002286 ; ---------------------------------------------------------------------------
.text:00002289                 align 4
.text:00002289 _text           ends
.text:00002289
.text:0000228C ; ===========================================================================
.text:0000228C
.text:0000228C ; Segment type: Pure code
.text:0000228C ; Segment permissions: Read/Execute
.text:0000228C _text           segment para public 'CODE' use32
.text:0000228C                 assume cs:_text
.text:0000228C                 ;org 228Ch
.text:0000228C ; COMDAT (pick any)
.text:0000228C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000228C
.text:0000228C ; =============== S U B R O U T I N E =======================================
.text:0000228C
.text:0000228C ; Attributes: bp-based frame
.text:0000228C
.text:0000228C ; unsigned __int32 __stdcall CBcjCoder::Release(CBcjCoder *this)
.text:0000228C                 public ?Release@CBcjCoder@@UAGKXZ
.text:0000228C ?Release@CBcjCoder@@UAGKXZ proc near    ; DATA XREF: .rdata:00002028o
.text:0000228C
.text:0000228C var_8           = dword ptr -8
.text:0000228C var_4           = dword ptr -4
.text:0000228C this            = dword ptr  8
.text:0000228C
.text:0000228C                 push    ebp
.text:0000228D                 mov     ebp, esp
.text:0000228F                 sub     esp, 8
.text:00002292                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002299                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022A0                 mov     eax, [ebp+this]
.text:000022A3                 mov     ecx, [eax+4]
.text:000022A6                 sub     ecx, 1
.text:000022A9                 mov     [ebp+var_8], ecx
.text:000022AC                 mov     edx, [ebp+this]
.text:000022AF                 mov     eax, [ebp+var_8]
.text:000022B2                 mov     [edx+4], eax
.text:000022B5                 cmp     [ebp+var_8], 0
.text:000022B9                 jz      short loc_22C3
.text:000022BB                 mov     ecx, [ebp+this]
.text:000022BE                 mov     eax, [ecx+4]
.text:000022C1                 jmp     short loc_22D7
.text:000022C3 ; ---------------------------------------------------------------------------
.text:000022C3
.text:000022C3 loc_22C3:                               ; CODE XREF: CBcjCoder::Release(void)+2Dj
.text:000022C3                 mov     edx, [ebp+this]
.text:000022C6                 mov     [ebp+var_4], edx
.text:000022C9                 mov     eax, [ebp+var_4]
.text:000022CC                 push    eax             ; void *
.text:000022CD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000022D2                 add     esp, 4
.text:000022D5                 xor     eax, eax
.text:000022D7
.text:000022D7 loc_22D7:                               ; CODE XREF: CBcjCoder::Release(void)+35j
.text:000022D7                 add     esp, 8
.text:000022DA                 cmp     ebp, esp
.text:000022DC                 call    __RTC_CheckEsp
.text:000022E1                 mov     esp, ebp
.text:000022E3                 pop     ebp
.text:000022E4                 retn    4
.text:000022E4 ?Release@CBcjCoder@@UAGKXZ endp
.text:000022E4
.text:000022E4 ; ---------------------------------------------------------------------------
.text:000022E7                 align 4
.text:000022E7 _text           ends
.text:000022E7
.text:000022E8 ; ===========================================================================
.text:000022E8
.text:000022E8 ; Segment type: Pure code
.text:000022E8 ; Segment permissions: Read/Execute
.text:000022E8 _text           segment para public 'CODE' use32
.text:000022E8                 assume cs:_text
.text:000022E8                 ;org 22E8h
.text:000022E8 ; COMDAT (pick any)
.text:000022E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022E8
.text:000022E8 ; =============== S U B R O U T I N E =======================================
.text:000022E8
.text:000022E8 ; Attributes: bp-based frame
.text:000022E8
.text:000022E8 ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:000022E8                 public ??0ICompressFilter@@QAE@XZ
.text:000022E8 ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: CBcjCoder::CBcjCoder(int)+11p
.text:000022E8
.text:000022E8 var_4           = dword ptr -4
.text:000022E8
.text:000022E8                 push    ebp
.text:000022E9                 mov     ebp, esp
.text:000022EB                 push    ecx
.text:000022EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022F3                 mov     [ebp+var_4], ecx
.text:000022F6                 mov     ecx, [ebp+var_4]
.text:000022F9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000022FE                 mov     eax, [ebp+var_4]
.text:00002301                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:00002307                 mov     eax, [ebp+var_4]
.text:0000230A                 add     esp, 4
.text:0000230D                 cmp     ebp, esp
.text:0000230F                 call    __RTC_CheckEsp
.text:00002314                 mov     esp, ebp
.text:00002316                 pop     ebp
.text:00002317                 retn
.text:00002317 ??0ICompressFilter@@QAE@XZ endp
.text:00002317
.text:00002317 _text           ends
.text:00002317
.rdata:00002318 ; ===========================================================================
.rdata:00002318
.rdata:00002318 ; Segment type: Pure data
.rdata:00002318 ; Segment permissions: Read
.rdata:00002318 _rdata          segment dword public 'DATA' use32
.rdata:00002318                 assume cs:_rdata
.rdata:00002318                 ;org 2318h
.rdata:00002318 ; COMDAT (pick largest)
.rdata:00002318                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:0000231C                 public ??_7ICompressFilter@@6B@
.rdata:0000231C ; const ICompressFilter::`vftable'
.rdata:0000231C ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:0000231C                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:00002320                 dd offset __purecall
.rdata:00002324                 dd offset __purecall
.rdata:00002328                 dd offset __purecall
.rdata:0000232C                 dd offset __purecall
.rdata:0000232C _rdata          ends
.rdata:0000232C
.rdata$r:00002330 ; ===========================================================================
.rdata$r:00002330
.rdata$r:00002330 ; Segment type: Pure data
.rdata$r:00002330 ; Segment permissions: Read
.rdata$r:00002330 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002330                 assume cs:_rdata$r
.rdata$r:00002330                 ;org 2330h
.rdata$r:00002330 ; COMDAT (pick any)
.rdata$r:00002330                 public ??_R4ICompressFilter@@6B@
.rdata$r:00002330 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:00002330 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:00002318o
.rdata$r:00002331                 db    0
.rdata$r:00002332                 db    0
.rdata$r:00002333                 db    0
.rdata$r:00002334                 db    0
.rdata$r:00002335                 db    0
.rdata$r:00002336                 db    0
.rdata$r:00002337                 db    0
.rdata$r:00002338                 db    0
.rdata$r:00002339                 db    0
.rdata$r:0000233A                 db    0
.rdata$r:0000233B                 db    0
.rdata$r:0000233C                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00002340                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002340 _rdata$r        ends
.rdata$r:00002340
.text:00002344 ; ===========================================================================
.text:00002344
.text:00002344 ; Segment type: Pure code
.text:00002344 ; Segment permissions: Read/Execute
.text:00002344 _text           segment para public 'CODE' use32
.text:00002344                 assume cs:_text
.text:00002344                 ;org 2344h
.text:00002344 ; COMDAT (pick any)
.text:00002344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002344
.text:00002344 ; =============== S U B R O U T I N E =======================================
.text:00002344
.text:00002344 ; Attributes: bp-based frame
.text:00002344
.text:00002344 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002344                 public ??0IUnknown@@QAE@XZ
.text:00002344 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:00002344                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p ...
.text:00002344
.text:00002344 var_4           = dword ptr -4
.text:00002344
.text:00002344                 push    ebp
.text:00002345                 mov     ebp, esp
.text:00002347                 push    ecx
.text:00002348                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000234F                 mov     [ebp+var_4], ecx
.text:00002352                 mov     eax, [ebp+var_4]
.text:00002355                 mov     esp, ebp
.text:00002357                 pop     ebp
.text:00002358                 retn
.text:00002358 ??0IUnknown@@QAE@XZ endp
.text:00002358
.text:00002358 ; ---------------------------------------------------------------------------
.text:00002359                 align 4
.text:00002359 _text           ends
.text:00002359
.text:0000235C ; ===========================================================================
.text:0000235C
.text:0000235C ; Segment type: Pure code
.text:0000235C ; Segment permissions: Read/Execute
.text:0000235C _text           segment para public 'CODE' use32
.text:0000235C                 assume cs:_text
.text:0000235C                 ;org 235Ch
.text:0000235C ; COMDAT (pick any)
.text:0000235C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000235C
.text:0000235C ; =============== S U B R O U T I N E =======================================
.text:0000235C
.text:0000235C ; Attributes: bp-based frame
.text:0000235C
.text:0000235C ; void __thiscall NArchive::NLzma::CDecoder::ReleaseInStream(NArchive::NLzma::CDecoder *__hidden this)
.text:0000235C                 public ?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ
.text:0000235C ?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ proc near
.text:0000235C                                         ; CODE XREF: NArchive::NLzma::CDecoder::~CDecoder(void)+37p
.text:0000235C
.text:0000235C var_4           = dword ptr -4
.text:0000235C
.text:0000235C                 push    ebp
.text:0000235D                 mov     ebp, esp
.text:0000235F                 push    ecx
.text:00002360                 push    esi
.text:00002361                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002368                 mov     [ebp+var_4], ecx
.text:0000236B                 mov     ecx, [ebp+var_4]
.text:0000236E                 add     ecx, 8
.text:00002371                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00002376                 test    eax, eax
.text:00002378                 jz      short loc_239B
.text:0000237A                 mov     eax, [ebp+var_4]
.text:0000237D                 mov     ecx, [eax+0Ch]
.text:00002380                 mov     edx, [ebp+var_4]
.text:00002383                 mov     eax, [edx+0Ch]
.text:00002386                 add     eax, 10h
.text:00002389                 mov     ecx, [ecx+10h]
.text:0000238C                 mov     esi, esp
.text:0000238E                 push    eax
.text:0000238F                 mov     edx, [ecx+10h]
.text:00002392                 call    edx
.text:00002394                 cmp     esi, esp
.text:00002396                 call    __RTC_CheckEsp
.text:0000239B
.text:0000239B loc_239B:                               ; CODE XREF: NArchive::NLzma::CDecoder::ReleaseInStream(void)+1Cj
.text:0000239B                 pop     esi
.text:0000239C                 add     esp, 4
.text:0000239F                 cmp     ebp, esp
.text:000023A1                 call    __RTC_CheckEsp
.text:000023A6                 mov     esp, ebp
.text:000023A8                 pop     ebp
.text:000023A9                 retn
.text:000023A9 ?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ endp
.text:000023A9
.text:000023A9 ; ---------------------------------------------------------------------------
.text:000023AA                 align 4
.text:000023AA _text           ends
.text:000023AA
.text:000023AC ; ===========================================================================
.text:000023AC
.text:000023AC ; Segment type: Pure code
.text:000023AC ; Segment permissions: Read/Execute
.text:000023AC _text           segment para public 'CODE' use32
.text:000023AC                 assume cs:_text
.text:000023AC                 ;org 23ACh
.text:000023AC ; COMDAT (pick any)
.text:000023AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023AC
.text:000023AC ; =============== S U B R O U T I N E =======================================
.text:000023AC
.text:000023AC ; Attributes: bp-based frame
.text:000023AC
.text:000023AC ; unsigned __int64 __thiscall NCompress::NLzma::CDecoder::GetOutputProcessedSize(NCompress::NLzma::CDecoder *__hidden this)
.text:000023AC                 public ?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ
.text:000023AC ?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ proc near
.text:000023AC                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+254p
.text:000023AC
.text:000023AC var_4           = dword ptr -4
.text:000023AC
.text:000023AC                 push    ebp
.text:000023AD                 mov     ebp, esp
.text:000023AF                 push    ecx
.text:000023B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023B7                 mov     [ebp+var_4], ecx
.text:000023BA                 mov     ecx, [ebp+var_4]
.text:000023BD                 mov     eax, [ecx+0B8h]
.text:000023C3                 mov     edx, [ecx+0BCh]
.text:000023C9                 mov     esp, ebp
.text:000023CB                 pop     ebp
.text:000023CC                 retn
.text:000023CC ?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ endp
.text:000023CC
.text:000023CC ; ---------------------------------------------------------------------------
.text:000023CD                 align 10h
.text:000023CD _text           ends
.text:000023CD
.text:000023D0 ; ===========================================================================
.text:000023D0
.text:000023D0 ; Segment type: Pure code
.text:000023D0 ; Segment permissions: Read/Execute
.text:000023D0 _text           segment para public 'CODE' use32
.text:000023D0                 assume cs:_text
.text:000023D0                 ;org 23D0h
.text:000023D0 ; COMDAT (pick any)
.text:000023D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023D0
.text:000023D0 ; =============== S U B R O U T I N E =======================================
.text:000023D0
.text:000023D0 ; Attributes: bp-based frame
.text:000023D0
.text:000023D0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000023D0                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000023D0 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000023D0                                         ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+29p
.text:000023D0                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+23p
.text:000023D0
.text:000023D0 var_4           = dword ptr -4
.text:000023D0
.text:000023D0                 push    ebp
.text:000023D1                 mov     ebp, esp
.text:000023D3                 push    ecx
.text:000023D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023DB                 mov     [ebp+var_4], ecx
.text:000023DE                 xor     eax, eax
.text:000023E0                 mov     ecx, [ebp+var_4]
.text:000023E3                 mov     [ecx], ax
.text:000023E6                 xor     edx, edx
.text:000023E8                 mov     eax, [ebp+var_4]
.text:000023EB                 mov     [eax+2], dx
.text:000023EF                 mov     ecx, [ebp+var_4]
.text:000023F2                 mov     dword ptr [ecx+8], 0
.text:000023F9                 mov     eax, [ebp+var_4]
.text:000023FC                 mov     esp, ebp
.text:000023FE                 pop     ebp
.text:000023FF                 retn
.text:000023FF ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000023FF
.text:000023FF _text           ends
.text:000023FF
.text:00002400 ; ===========================================================================
.text:00002400
.text:00002400 ; Segment type: Pure code
.text:00002400 ; Segment permissions: Read/Execute
.text:00002400 _text           segment para public 'CODE' use32
.text:00002400                 assume cs:_text
.text:00002400                 ;org 2400h
.text:00002400 ; COMDAT (pick any)
.text:00002400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002400
.text:00002400 ; =============== S U B R O U T I N E =======================================
.text:00002400
.text:00002400 ; Attributes: bp-based frame
.text:00002400
.text:00002400 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00002400                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00002400 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00002400                                         ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+14Fp
.text:00002400                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+117p
.text:00002400
.text:00002400 var_4           = dword ptr -4
.text:00002400
.text:00002400                 push    ebp
.text:00002401                 mov     ebp, esp
.text:00002403                 push    ecx
.text:00002404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000240B                 mov     [ebp+var_4], ecx
.text:0000240E                 mov     ecx, [ebp+var_4] ; this
.text:00002411                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00002416                 add     esp, 4
.text:00002419                 cmp     ebp, esp
.text:0000241B                 call    __RTC_CheckEsp
.text:00002420                 mov     esp, ebp
.text:00002422                 pop     ebp
.text:00002423                 retn
.text:00002423 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00002423
.text:00002423 _text           ends
.text:00002423
.text:00002424 ; ===========================================================================
.text:00002424
.text:00002424 ; Segment type: Pure code
.text:00002424 ; Segment permissions: Read/Execute
.text:00002424 _text           segment para public 'CODE' use32
.text:00002424                 assume cs:_text
.text:00002424                 ;org 2424h
.text:00002424 ; COMDAT (pick any)
.text:00002424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002424
.text:00002424 ; =============== S U B R O U T I N E =======================================
.text:00002424
.text:00002424 ; Attributes: bp-based frame
.text:00002424
.text:00002424 ; char *__stdcall MyStpCpy(char *, const char *)
.text:00002424                 public ?MyStpCpy@@YGPADPADPBD@Z
.text:00002424 ?MyStpCpy@@YGPADPADPBD@Z proc near      ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+C7p
.text:00002424                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+D8p
.text:00002424
.text:00002424 var_4           = dword ptr -4
.text:00002424 arg_0           = dword ptr  8
.text:00002424 arg_4           = dword ptr  0Ch
.text:00002424
.text:00002424                 push    ebp
.text:00002425                 mov     ebp, esp
.text:00002427                 push    ecx
.text:00002428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000242F
.text:0000242F loc_242F:                               ; CODE XREF: MyStpCpy(char *,char const *)+3Aj
.text:0000242F                 mov     eax, [ebp+arg_4]
.text:00002432                 mov     cl, [eax]
.text:00002434                 mov     byte ptr [ebp+var_4+3], cl
.text:00002437                 mov     edx, [ebp+arg_0]
.text:0000243A                 mov     al, byte ptr [ebp+var_4+3]
.text:0000243D                 mov     [edx], al
.text:0000243F                 movsx   ecx, byte ptr [ebp+var_4+3]
.text:00002443                 test    ecx, ecx
.text:00002445                 jnz     short loc_244C
.text:00002447                 mov     eax, [ebp+arg_0]
.text:0000244A                 jmp     short loc_2460
.text:0000244C ; ---------------------------------------------------------------------------
.text:0000244C
.text:0000244C loc_244C:                               ; CODE XREF: MyStpCpy(char *,char const *)+21j
.text:0000244C                 mov     edx, [ebp+arg_4]
.text:0000244F                 add     edx, 1
.text:00002452                 mov     [ebp+arg_4], edx
.text:00002455                 mov     eax, [ebp+arg_0]
.text:00002458                 add     eax, 1
.text:0000245B                 mov     [ebp+arg_0], eax
.text:0000245E                 jmp     short loc_242F
.text:00002460 ; ---------------------------------------------------------------------------
.text:00002460
.text:00002460 loc_2460:                               ; CODE XREF: MyStpCpy(char *,char const *)+26j
.text:00002460                 mov     esp, ebp
.text:00002462                 pop     ebp
.text:00002463                 retn    8
.text:00002463 ?MyStpCpy@@YGPADPADPBD@Z endp
.text:00002463
.text:00002463 ; ---------------------------------------------------------------------------
.text:00002466                 align 4
.text:00002466 _text           ends
.text:00002466
.text:00002468 ; ===========================================================================
.text:00002468
.text:00002468 ; Segment type: Pure code
.text:00002468 ; Segment permissions: Read/Execute
.text:00002468 _text           segment para public 'CODE' use32
.text:00002468                 assume cs:_text
.text:00002468                 ;org 2468h
.text:00002468 ; COMDAT (pick any)
.text:00002468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002468
.text:00002468 ; =============== S U B R O U T I N E =======================================
.text:00002468
.text:00002468 ; Attributes: bp-based frame
.text:00002468
.text:00002468 ; unsigned int __thiscall NArchive::NLzma::CHeader::GetDicSize(NArchive::NLzma::CHeader *__hidden this)
.text:00002468                 public ?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ
.text:00002468 ?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ proc near
.text:00002468                                         ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+EAp
.text:00002468
.text:00002468 var_4           = dword ptr -4
.text:00002468
.text:00002468                 push    ebp
.text:00002469                 mov     ebp, esp
.text:0000246B                 push    ecx
.text:0000246C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002473                 mov     [ebp+var_4], ecx
.text:00002476                 mov     eax, [ebp+var_4]
.text:00002479                 mov     eax, [eax+0Ah]
.text:0000247C                 mov     esp, ebp
.text:0000247E                 pop     ebp
.text:0000247F                 retn
.text:0000247F ?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ endp
.text:0000247F
.text:0000247F _text           ends
.text:0000247F
.text:00002480 ; ===========================================================================
.text:00002480
.text:00002480 ; Segment type: Pure code
.text:00002480 ; Segment permissions: Read/Execute
.text:00002480 _text           segment para public 'CODE' use32
.text:00002480                 assume cs:_text
.text:00002480                 ;org 2480h
.text:00002480 ; COMDAT (pick any)
.text:00002480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002480
.text:00002480 ; =============== S U B R O U T I N E =======================================
.text:00002480
.text:00002480 ; Attributes: bp-based frame
.text:00002480
.text:00002480 ; unsigned int __stdcall MyStringLen(const char *)
.text:00002480                 public ?MyStringLen@@YGIPBD@Z
.text:00002480 ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+93p
.text:00002480
.text:00002480 var_4           = dword ptr -4
.text:00002480 arg_0           = dword ptr  8
.text:00002480
.text:00002480                 push    ebp
.text:00002481                 mov     ebp, esp
.text:00002483                 push    ecx
.text:00002484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000248B                 mov     [ebp+var_4], 0
.text:00002492                 jmp     short loc_249D
.text:00002494 ; ---------------------------------------------------------------------------
.text:00002494
.text:00002494 loc_2494:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:00002494                 mov     eax, [ebp+var_4]
.text:00002497                 add     eax, 1
.text:0000249A                 mov     [ebp+var_4], eax
.text:0000249D
.text:0000249D loc_249D:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:0000249D                 mov     ecx, [ebp+arg_0]
.text:000024A0                 add     ecx, [ebp+var_4]
.text:000024A3                 movsx   edx, byte ptr [ecx]
.text:000024A6                 test    edx, edx
.text:000024A8                 jz      short loc_24AC
.text:000024AA                 jmp     short loc_2494
.text:000024AC ; ---------------------------------------------------------------------------
.text:000024AC
.text:000024AC loc_24AC:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:000024AC                 mov     eax, [ebp+var_4]
.text:000024AF                 mov     esp, ebp
.text:000024B1                 pop     ebp
.text:000024B2                 retn    4
.text:000024B2 ?MyStringLen@@YGIPBD@Z endp
.text:000024B2
.text:000024B2 ; ---------------------------------------------------------------------------
.text:000024B5                 align 4
.text:000024B5 _text           ends
.text:000024B5
.text:000024B8 ; ===========================================================================
.text:000024B8
.text:000024B8 ; Segment type: Pure code
.text:000024B8 ; Segment permissions: Read/Execute
.text:000024B8 _text           segment para public 'CODE' use32
.text:000024B8                 assume cs:_text
.text:000024B8                 ;org 24B8h
.text:000024B8 ; COMDAT (pick any)
.text:000024B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024B8
.text:000024B8 ; =============== S U B R O U T I N E =======================================
.text:000024B8
.text:000024B8 ; Attributes: bp-based frame
.text:000024B8
.text:000024B8 ; unsigned int __thiscall NArchive::NLzma::CHandler::GetHeaderSize(NArchive::NLzma::CHandler *__hidden this)
.text:000024B8                 public ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ
.text:000024B8 ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ proc near
.text:000024B8                                         ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8Ap
.text:000024B8                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+519p
.text:000024B8
.text:000024B8 var_4           = dword ptr -4
.text:000024B8
.text:000024B8                 push    ebp
.text:000024B9                 mov     ebp, esp
.text:000024BB                 push    ecx
.text:000024BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024C3                 mov     [ebp+var_4], ecx
.text:000024C6                 mov     eax, [ebp+var_4]
.text:000024C9                 movzx   eax, byte ptr [eax+20h]
.text:000024CD                 neg     eax
.text:000024CF                 sbb     eax, eax
.text:000024D1                 neg     eax
.text:000024D3                 add     eax, 0Dh
.text:000024D6                 mov     esp, ebp
.text:000024D8                 pop     ebp
.text:000024D9                 retn
.text:000024D9 ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ endp
.text:000024D9
.text:000024D9 ; ---------------------------------------------------------------------------
.text:000024DA                 align 4
.text:000024DA _text           ends
.text:000024DA
.text:000024DC ; ===========================================================================
.text:000024DC
.text:000024DC ; Segment type: Pure code
.text:000024DC ; Segment permissions: Read/Execute
.text:000024DC _text           segment para public 'CODE' use32
.text:000024DC                 assume cs:_text
.text:000024DC                 ;org 24DCh
.text:000024DC ; COMDAT (pick any)
.text:000024DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024DC
.text:000024DC ; =============== S U B R O U T I N E =======================================
.text:000024DC
.text:000024DC ; Attributes: bp-based frame
.text:000024DC
.text:000024DC ; void __thiscall CDummyOutStream::SetStream(CDummyOutStream *this, struct ISequentialOutStream *)
.text:000024DC                 public ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z
.text:000024DC ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000024DC                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+216p
.text:000024DC
.text:000024DC var_4           = dword ptr -4
.text:000024DC arg_0           = dword ptr  8
.text:000024DC
.text:000024DC                 push    ebp
.text:000024DD                 mov     ebp, esp
.text:000024DF                 push    ecx
.text:000024E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024E7                 mov     [ebp+var_4], ecx
.text:000024EA                 mov     eax, [ebp+arg_0]
.text:000024ED                 push    eax
.text:000024EE                 mov     ecx, [ebp+var_4]
.text:000024F1                 add     ecx, 8
.text:000024F4                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000024F9                 add     esp, 4
.text:000024FC                 cmp     ebp, esp
.text:000024FE                 call    __RTC_CheckEsp
.text:00002503                 mov     esp, ebp
.text:00002505                 pop     ebp
.text:00002506                 retn    4
.text:00002506 ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z endp
.text:00002506
.text:00002506 ; ---------------------------------------------------------------------------
.text:00002509                 align 4
.text:00002509 _text           ends
.text:00002509
.text:0000250C ; ===========================================================================
.text:0000250C
.text:0000250C ; Segment type: Pure code
.text:0000250C ; Segment permissions: Read/Execute
.text:0000250C _text           segment para public 'CODE' use32
.text:0000250C                 assume cs:_text
.text:0000250C                 ;org 250Ch
.text:0000250C ; COMDAT (pick any)
.text:0000250C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000250C
.text:0000250C ; =============== S U B R O U T I N E =======================================
.text:0000250C
.text:0000250C ; Attributes: bp-based frame
.text:0000250C
.text:0000250C ; void __thiscall CDummyOutStream::Init(CDummyOutStream *__hidden this)
.text:0000250C                 public ?Init@CDummyOutStream@@QAEXXZ
.text:0000250C ?Init@CDummyOutStream@@QAEXXZ proc near ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+21Ep
.text:0000250C
.text:0000250C var_4           = dword ptr -4
.text:0000250C
.text:0000250C                 push    ebp
.text:0000250D                 mov     ebp, esp
.text:0000250F                 push    ecx
.text:00002510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002517                 mov     [ebp+var_4], ecx
.text:0000251A                 mov     eax, [ebp+var_4]
.text:0000251D                 mov     dword ptr [eax+10h], 0
.text:00002524                 mov     dword ptr [eax+14h], 0
.text:0000252B                 mov     esp, ebp
.text:0000252D                 pop     ebp
.text:0000252E                 retn
.text:0000252E ?Init@CDummyOutStream@@QAEXXZ endp
.text:0000252E
.text:0000252E ; ---------------------------------------------------------------------------
.text:0000252F                 align 10h
.text:0000252F _text           ends
.text:0000252F
.text:00002530 ; ===========================================================================
.text:00002530
.text:00002530 ; Segment type: Pure code
.text:00002530 ; Segment permissions: Read/Execute
.text:00002530 _text           segment para public 'CODE' use32
.text:00002530                 assume cs:_text
.text:00002530                 ;org 2530h
.text:00002530 ; COMDAT (pick any)
.text:00002530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002530
.text:00002530 ; =============== S U B R O U T I N E =======================================
.text:00002530
.text:00002530 ; Attributes: bp-based frame
.text:00002530
.text:00002530 ; unsigned __int64 __thiscall CDummyOutStream::GetSize(CDummyOutStream *__hidden this)
.text:00002530                 public ?GetSize@CDummyOutStream@@QBE_KXZ
.text:00002530 ?GetSize@CDummyOutStream@@QBE_KXZ proc near
.text:00002530                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+69Cp
.text:00002530
.text:00002530 var_4           = dword ptr -4
.text:00002530
.text:00002530                 push    ebp
.text:00002531                 mov     ebp, esp
.text:00002533                 push    ecx
.text:00002534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000253B                 mov     [ebp+var_4], ecx
.text:0000253E                 mov     ecx, [ebp+var_4]
.text:00002541                 mov     eax, [ecx+10h]
.text:00002544                 mov     edx, [ecx+14h]
.text:00002547                 mov     esp, ebp
.text:00002549                 pop     ebp
.text:0000254A                 retn
.text:0000254A ?GetSize@CDummyOutStream@@QBE_KXZ endp
.text:0000254A
.text:0000254A ; ---------------------------------------------------------------------------
.text:0000254B                 align 4
.text:0000254B _text           ends
.text:0000254B
.text:0000254C ; ===========================================================================
.text:0000254C
.text:0000254C ; Segment type: Pure code
.text:0000254C ; Segment permissions: Read/Execute
.text:0000254C _text           segment para public 'CODE' use32
.text:0000254C                 assume cs:_text
.text:0000254C                 ;org 254Ch
.text:0000254C ; COMDAT (pick any)
.text:0000254C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000254C
.text:0000254C ; =============== S U B R O U T I N E =======================================
.text:0000254C
.text:0000254C ; Attributes: bp-based frame
.text:0000254C
.text:0000254C ; unsigned __int64 __thiscall NArchive::NLzma::CDecoder::GetInputProcessedSize(NArchive::NLzma::CDecoder *__hidden this)
.text:0000254C                 public ?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ
.text:0000254C ?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ proc near
.text:0000254C                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+676p
.text:0000254C
.text:0000254C var_4           = dword ptr -4
.text:0000254C
.text:0000254C                 push    ebp
.text:0000254D                 mov     ebp, esp
.text:0000254F                 push    ecx
.text:00002550                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002557                 mov     [ebp+var_4], ecx
.text:0000255A                 mov     eax, [ebp+var_4]
.text:0000255D                 mov     ecx, [eax+0Ch]  ; this
.text:00002560                 call    ?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetInputProcessedSize(void)
.text:00002565                 add     esp, 4
.text:00002568                 cmp     ebp, esp
.text:0000256A                 call    __RTC_CheckEsp
.text:0000256F                 mov     esp, ebp
.text:00002571                 pop     ebp
.text:00002572                 retn
.text:00002572 ?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ endp
.text:00002572
.text:00002572 ; ---------------------------------------------------------------------------
.text:00002573                 align 4
.text:00002573 _text           ends
.text:00002573
.text:00002574 ; ===========================================================================
.text:00002574
.text:00002574 ; Segment type: Pure code
.text:00002574 ; Segment permissions: Read/Execute
.text:00002574 _text           segment para public 'CODE' use32
.text:00002574                 assume cs:_text
.text:00002574                 ;org 2574h
.text:00002574 ; COMDAT (pick any)
.text:00002574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002574
.text:00002574 ; =============== S U B R O U T I N E =======================================
.text:00002574
.text:00002574 ; Attributes: bp-based frame
.text:00002574
.text:00002574 ; unsigned __int64 __thiscall NCompress::NLzma::CDecoder::GetInputProcessedSize(NCompress::NLzma::CDecoder *__hidden this)
.text:00002574                 public ?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ
.text:00002574 ?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ proc near
.text:00002574                                         ; CODE XREF: NArchive::NLzma::CDecoder::GetInputProcessedSize(void)+14p
.text:00002574
.text:00002574 var_4           = dword ptr -4
.text:00002574
.text:00002574                 push    ebp
.text:00002575                 mov     ebp, esp
.text:00002577                 push    ecx
.text:00002578                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000257F                 mov     [ebp+var_4], ecx
.text:00002582                 mov     ecx, [ebp+var_4]
.text:00002585                 mov     eax, [ecx+0B0h]
.text:0000258B                 mov     edx, [ecx+0B4h]
.text:00002591                 mov     esp, ebp
.text:00002593                 pop     ebp
.text:00002594                 retn
.text:00002594 ?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ endp
.text:00002594
.text:00002594 ; ---------------------------------------------------------------------------
.text:00002595                 align 4
.text:00002595 _text           ends
.text:00002595
.text:00002598 ; ===========================================================================
.text:00002598
.text:00002598 ; Segment type: Pure code
.text:00002598 ; Segment permissions: Read/Execute
.text:00002598 _text           segment para public 'CODE' use32
.text:00002598                 assume cs:_text
.text:00002598                 ;org 2598h
.text:00002598 ; COMDAT (pick any)
.text:00002598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002598
.text:00002598 ; =============== S U B R O U T I N E =======================================
.text:00002598
.text:00002598 ; Attributes: bp-based frame
.text:00002598
.text:00002598 ; __int32 __thiscall NArchive::NLzma::CDecoder::ReadInput(NArchive::NLzma::CDecoder *this, unsigned __int8 *, unsigned int, unsigned int *)
.text:00002598                 public ?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z
.text:00002598 ?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z proc near
.text:00002598                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+548p
.text:00002598
.text:00002598 var_4           = dword ptr -4
.text:00002598 arg_0           = dword ptr  8
.text:00002598 arg_4           = dword ptr  0Ch
.text:00002598 arg_8           = dword ptr  10h
.text:00002598
.text:00002598                 push    ebp
.text:00002599                 mov     ebp, esp
.text:0000259B                 push    ecx
.text:0000259C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025A3                 mov     [ebp+var_4], ecx
.text:000025A6                 mov     eax, [ebp+arg_8]
.text:000025A9                 push    eax             ; unsigned int *
.text:000025AA                 mov     ecx, [ebp+arg_4]
.text:000025AD                 push    ecx             ; unsigned int
.text:000025AE                 mov     edx, [ebp+arg_0]
.text:000025B1                 push    edx             ; void *
.text:000025B2                 mov     eax, [ebp+var_4]
.text:000025B5                 mov     ecx, [eax+0Ch]  ; this
.text:000025B8                 call    ?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z ; NCompress::NLzma::CDecoder::ReadFromInputStream(void *,uint,uint *)
.text:000025BD                 add     esp, 4
.text:000025C0                 cmp     ebp, esp
.text:000025C2                 call    __RTC_CheckEsp
.text:000025C7                 mov     esp, ebp
.text:000025C9                 pop     ebp
.text:000025CA                 retn    0Ch
.text:000025CA ?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z endp
.text:000025CA
.text:000025CA ; ---------------------------------------------------------------------------
.text:000025CD                 align 10h
.text:000025CD _text           ends
.text:000025CD
.text:000025D0 ; ===========================================================================
.text:000025D0
.text:000025D0 ; Segment type: Pure code
.text:000025D0 ; Segment permissions: Read/Execute
.text:000025D0 _text           segment para public 'CODE' use32
.text:000025D0                 assume cs:_text
.text:000025D0                 ;org 25D0h
.text:000025D0 ; COMDAT (pick any)
.text:000025D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025D0
.text:000025D0 ; =============== S U B R O U T I N E =======================================
.text:000025D0
.text:000025D0 ; Attributes: bp-based frame
.text:000025D0
.text:000025D0 ; public: __thiscall CDummyOutStream::CDummyOutStream(void)
.text:000025D0                 public ??0CDummyOutStream@@QAE@XZ
.text:000025D0 ??0CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B2p
.text:000025D0
.text:000025D0 var_4           = dword ptr -4
.text:000025D0
.text:000025D0                 push    ebp
.text:000025D1                 mov     ebp, esp
.text:000025D3                 push    ecx
.text:000025D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025DB                 mov     [ebp+var_4], ecx
.text:000025DE                 mov     ecx, [ebp+var_4] ; this
.text:000025E1                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000025E6                 mov     ecx, [ebp+var_4]
.text:000025E9                 add     ecx, 4          ; this
.text:000025EC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000025F1                 mov     eax, [ebp+var_4]
.text:000025F4                 mov     dword ptr [eax], offset ??_7CDummyOutStream@@6B@ ; const CDummyOutStream::`vftable'
.text:000025FA                 mov     ecx, [ebp+var_4]
.text:000025FD                 add     ecx, 8
.text:00002600                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00002605                 mov     eax, [ebp+var_4]
.text:00002608                 add     esp, 4
.text:0000260B                 cmp     ebp, esp
.text:0000260D                 call    __RTC_CheckEsp
.text:00002612                 mov     esp, ebp
.text:00002614                 pop     ebp
.text:00002615                 retn
.text:00002615 ??0CDummyOutStream@@QAE@XZ endp
.text:00002615
.text:00002615 ; ---------------------------------------------------------------------------
.text:00002616                 align 4
.text:00002616 _text           ends
.text:00002616
.rdata:00002618 ; ===========================================================================
.rdata:00002618
.rdata:00002618 ; Segment type: Pure data
.rdata:00002618 ; Segment permissions: Read
.rdata:00002618 _rdata          segment dword public 'DATA' use32
.rdata:00002618                 assume cs:_rdata
.rdata:00002618                 ;org 2618h
.rdata:00002618 ; COMDAT (pick largest)
.rdata:00002618                 dd offset ??_R4CDummyOutStream@@6B@ ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata:0000261C                 public ??_7CDummyOutStream@@6B@
.rdata:0000261C ; const CDummyOutStream::`vftable'
.rdata:0000261C ??_7CDummyOutStream@@6B@ dd offset ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000261C                                         ; DATA XREF: CDummyOutStream::CDummyOutStream(void)+24o
.rdata:0000261C                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00002620                 dd offset ?AddRef@CDummyOutStream@@UAGKXZ ; CDummyOutStream::AddRef(void)
.rdata:00002624                 dd offset ?Release@CDummyOutStream@@UAGKXZ ; CDummyOutStream::Release(void)
.rdata:00002628                 dd offset ?Write@CDummyOutStream@@UAGJPBXIPAI@Z ; CDummyOutStream::Write(void const *,uint,uint *)
.rdata:00002628 _rdata          ends
.rdata:00002628
.rdata$r:0000262C ; ===========================================================================
.rdata$r:0000262C
.rdata$r:0000262C ; Segment type: Pure data
.rdata$r:0000262C ; Segment permissions: Read
.rdata$r:0000262C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000262C                 assume cs:_rdata$r
.rdata$r:0000262C                 ;org 262Ch
.rdata$r:0000262C ; COMDAT (pick any)
.rdata$r:0000262C                 public ??_R4CDummyOutStream@@6B@
.rdata$r:0000262C ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata$r:0000262C ??_R4CDummyOutStream@@6B@ db    0       ; DATA XREF: .rdata:00002618o
.rdata$r:0000262D                 db    0
.rdata$r:0000262E                 db    0
.rdata$r:0000262F                 db    0
.rdata$r:00002630                 db    0
.rdata$r:00002631                 db    0
.rdata$r:00002632                 db    0
.rdata$r:00002633                 db    0
.rdata$r:00002634                 db    0
.rdata$r:00002635                 db    0
.rdata$r:00002636                 db    0
.rdata$r:00002637                 db    0
.rdata$r:00002638                 dd offset ??_R0?AVCDummyOutStream@@@8 ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:0000263C                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000263C _rdata$r        ends
.rdata$r:0000263C
.data:00002640 ; ===========================================================================
.data:00002640
.data:00002640 ; Segment type: Pure data
.data:00002640 ; Segment permissions: Read/Write
.data:00002640 _data           segment dword public 'DATA' use32
.data:00002640                 assume cs:_data
.data:00002640                 ;org 2640h
.data:00002640 ; COMDAT (pick any)
.data:00002640                 public ??_R0?AVCDummyOutStream@@@8
.data:00002640 ; class CDummyOutStream `RTTI Type Descriptor'
.data:00002640 ??_R0?AVCDummyOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00002640                                         ; DATA XREF: .rdata$r:00002638o
.data:00002640                                         ; .rdata$r:CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002640                                         ; const type_info::`vftable'
.data:00002644                 align 8
.data:00002648 a_?avcdummyouts db '.?AVCDummyOutStream@@',0
.data:0000265E                 align 10h
.data:0000265E _data           ends
.data:0000265E
.rdata$r:00002660 ; ===========================================================================
.rdata$r:00002660
.rdata$r:00002660 ; Segment type: Pure data
.rdata$r:00002660 ; Segment permissions: Read
.rdata$r:00002660 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002660                 assume cs:_rdata$r
.rdata$r:00002660                 ;org 2660h
.rdata$r:00002660 ; COMDAT (pick any)
.rdata$r:00002660                 public ??_R3CDummyOutStream@@8
.rdata$r:00002660 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002660 ??_R3CDummyOutStream@@8 db    0         ; DATA XREF: .rdata$r:0000263Co
.rdata$r:00002660                                         ; .rdata$r:0000269Co
.rdata$r:00002661                 db    0
.rdata$r:00002662                 db    0
.rdata$r:00002663                 db    0
.rdata$r:00002664                 db    1
.rdata$r:00002665                 db    0
.rdata$r:00002666                 db    0
.rdata$r:00002667                 db    0
.rdata$r:00002668                 db    4
.rdata$r:00002669                 db    0
.rdata$r:0000266A                 db    0
.rdata$r:0000266B                 db    0
.rdata$r:0000266C                 dd offset ??_R2CDummyOutStream@@8 ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:0000266C _rdata$r        ends
.rdata$r:0000266C
.rdata$r:00002670 ; ===========================================================================
.rdata$r:00002670
.rdata$r:00002670 ; Segment type: Pure data
.rdata$r:00002670 ; Segment permissions: Read
.rdata$r:00002670 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002670                 assume cs:_rdata$r
.rdata$r:00002670                 ;org 2670h
.rdata$r:00002670 ; COMDAT (pick any)
.rdata$r:00002670                 public ??_R2CDummyOutStream@@8
.rdata$r:00002670 ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:00002670 ??_R2CDummyOutStream@@8 dd offset ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:00002670                                         ; DATA XREF: .rdata$r:0000266Co
.rdata$r:00002670                                         ; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002674                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002678                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000267C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002680                 db    0
.rdata$r:00002681                 align 4
.rdata$r:00002681 _rdata$r        ends
.rdata$r:00002681
.rdata$r:00002684 ; ===========================================================================
.rdata$r:00002684
.rdata$r:00002684 ; Segment type: Pure data
.rdata$r:00002684 ; Segment permissions: Read
.rdata$r:00002684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002684                 assume cs:_rdata$r
.rdata$r:00002684                 ;org 2684h
.rdata$r:00002684 ; COMDAT (pick any)
.rdata$r:00002684                 public ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:00002684 ; CDummyOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002684 ??_R1A@?0A@EA@CDummyOutStream@@8 dd offset ??_R0?AVCDummyOutStream@@@8
.rdata$r:00002684                                         ; DATA XREF: .rdata$r:CDummyOutStream::`RTTI Base Class Array'o
.rdata$r:00002684                                         ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:00002688                 db    3
.rdata$r:00002689                 db    0
.rdata$r:0000268A                 db    0
.rdata$r:0000268B                 db    0
.rdata$r:0000268C                 db    0
.rdata$r:0000268D                 db    0
.rdata$r:0000268E                 db    0
.rdata$r:0000268F                 db    0
.rdata$r:00002690                 db 0FFh
.rdata$r:00002691                 db 0FFh
.rdata$r:00002692                 db 0FFh
.rdata$r:00002693                 db 0FFh
.rdata$r:00002694                 db    0
.rdata$r:00002695                 db    0
.rdata$r:00002696                 db    0
.rdata$r:00002697                 db    0
.rdata$r:00002698                 db  40h ; @
.rdata$r:00002699                 db    0
.rdata$r:0000269A                 db    0
.rdata$r:0000269B                 db    0
.rdata$r:0000269C                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000269C _rdata$r        ends
.rdata$r:0000269C
.rdata$r:000026A0 ; ===========================================================================
.rdata$r:000026A0
.rdata$r:000026A0 ; Segment type: Pure data
.rdata$r:000026A0 ; Segment permissions: Read
.rdata$r:000026A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026A0                 assume cs:_rdata$r
.rdata$r:000026A0                 ;org 26A0h
.rdata$r:000026A0 ; COMDAT (pick any)
.rdata$r:000026A0                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000026A0 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000026A0 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000026A0                                         ; DATA XREF: .rdata$r:00002674o
.rdata$r:000026A0                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:000026A0                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000026A4                 db    1
.rdata$r:000026A5                 db    0
.rdata$r:000026A6                 db    0
.rdata$r:000026A7                 db    0
.rdata$r:000026A8                 db    0
.rdata$r:000026A9                 db    0
.rdata$r:000026AA                 db    0
.rdata$r:000026AB                 db    0
.rdata$r:000026AC                 db 0FFh
.rdata$r:000026AD                 db 0FFh
.rdata$r:000026AE                 db 0FFh
.rdata$r:000026AF                 db 0FFh
.rdata$r:000026B0                 db    0
.rdata$r:000026B1                 db    0
.rdata$r:000026B2                 db    0
.rdata$r:000026B3                 db    0
.rdata$r:000026B4                 db  40h ; @
.rdata$r:000026B5                 db    0
.rdata$r:000026B6                 db    0
.rdata$r:000026B7                 db    0
.rdata$r:000026B8                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026B8 _rdata$r        ends
.rdata$r:000026B8
.data:000026BC ; ===========================================================================
.data:000026BC
.data:000026BC ; Segment type: Pure data
.data:000026BC ; Segment permissions: Read/Write
.data:000026BC _data           segment dword public 'DATA' use32
.data:000026BC                 assume cs:_data
.data:000026BC                 ;org 26BCh
.data:000026BC ; COMDAT (pick any)
.data:000026BC                 public ??_R0?AUISequentialOutStream@@@8
.data:000026BC ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000026BC ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000026BC                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000026BC                                         ; .rdata$r:0000295Co
.data:000026BC                                         ; const type_info::`vftable'
.data:000026C0                 db    0
.data:000026C1                 db    0
.data:000026C2                 db    0
.data:000026C3                 db    0
.data:000026C4                 db  2Eh ; .
.data:000026C5                 db  3Fh ; ?
.data:000026C6                 db  41h ; A
.data:000026C7                 db  55h ; U
.data:000026C8                 db  49h ; I
.data:000026C9                 db  53h ; S
.data:000026CA                 db  65h ; e
.data:000026CB                 db  71h ; q
.data:000026CC                 db  75h ; u
.data:000026CD                 db  65h ; e
.data:000026CE                 db  6Eh ; n
.data:000026CF                 db  74h ; t
.data:000026D0                 db  69h ; i
.data:000026D1                 db  61h ; a
.data:000026D2                 db  6Ch ; l
.data:000026D3                 db  4Fh ; O
.data:000026D4                 db  75h ; u
.data:000026D5                 db  74h ; t
.data:000026D6                 db  53h ; S
.data:000026D7                 db  74h ; t
.data:000026D8                 db  72h ; r
.data:000026D9                 db  65h ; e
.data:000026DA                 db  61h ; a
.data:000026DB                 db  6Dh ; m
.data:000026DC                 db  40h ; @
.data:000026DD                 db  40h ; @
.data:000026DE                 db    0
.data:000026DF                 align 10h
.data:000026DF _data           ends
.data:000026DF
.rdata$r:000026E0 ; ===========================================================================
.rdata$r:000026E0
.rdata$r:000026E0 ; Segment type: Pure data
.rdata$r:000026E0 ; Segment permissions: Read
.rdata$r:000026E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026E0                 assume cs:_rdata$r
.rdata$r:000026E0                 ;org 26E0h
.rdata$r:000026E0 ; COMDAT (pick any)
.rdata$r:000026E0                 public ??_R3ISequentialOutStream@@8
.rdata$r:000026E0 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026E0 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000026B8o
.rdata$r:000026E0                                         ; .rdata$r:00002960o
.rdata$r:000026E1                 db    0
.rdata$r:000026E2                 db    0
.rdata$r:000026E3                 db    0
.rdata$r:000026E4                 db    0
.rdata$r:000026E5                 db    0
.rdata$r:000026E6                 db    0
.rdata$r:000026E7                 db    0
.rdata$r:000026E8                 db    2
.rdata$r:000026E9                 db    0
.rdata$r:000026EA                 db    0
.rdata$r:000026EB                 db    0
.rdata$r:000026EC                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000026EC _rdata$r        ends
.rdata$r:000026EC
.rdata$r:000026F0 ; ===========================================================================
.rdata$r:000026F0
.rdata$r:000026F0 ; Segment type: Pure data
.rdata$r:000026F0 ; Segment permissions: Read
.rdata$r:000026F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026F0                 assume cs:_rdata$r
.rdata$r:000026F0                 ;org 26F0h
.rdata$r:000026F0 ; COMDAT (pick any)
.rdata$r:000026F0                 public ??_R2ISequentialOutStream@@8
.rdata$r:000026F0 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000026F0 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000026F0                                         ; DATA XREF: .rdata$r:000026ECo
.rdata$r:000026F0                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000026F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000026F8                 db    0
.rdata$r:000026F9                 align 4
.rdata$r:000026F9 _rdata$r        ends
.rdata$r:000026F9
.text:000026FC ; ===========================================================================
.text:000026FC
.text:000026FC ; Segment type: Pure code
.text:000026FC ; Segment permissions: Read/Execute
.text:000026FC _text           segment para public 'CODE' use32
.text:000026FC                 assume cs:_text
.text:000026FC                 ;org 26FCh
.text:000026FC ; COMDAT (pick any)
.text:000026FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026FC
.text:000026FC ; =============== S U B R O U T I N E =======================================
.text:000026FC
.text:000026FC ; Attributes: bp-based frame
.text:000026FC
.text:000026FC ; __int32 __stdcall CDummyOutStream::QueryInterface(CDummyOutStream *this, const struct _GUID *Buf1, void **)
.text:000026FC                 public ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:000026FC ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000026FC                                         ; DATA XREF: .rdata:const CDummyOutStream::`vftable'o
.text:000026FC
.text:000026FC this            = dword ptr  8
.text:000026FC Buf1            = dword ptr  0Ch
.text:000026FC arg_8           = dword ptr  10h
.text:000026FC
.text:000026FC                 push    ebp
.text:000026FD                 mov     ebp, esp
.text:000026FF                 mov     eax, [ebp+arg_8]
.text:00002702                 mov     dword ptr [eax], 0
.text:00002708                 push    offset _IID_IUnknown ; Buf2
.text:0000270D                 mov     ecx, [ebp+Buf1]
.text:00002710                 push    ecx             ; Buf1
.text:00002711                 call    ___@8           ; __(x,x)
.text:00002716                 test    eax, eax
.text:00002718                 jz      short loc_2724
.text:0000271A                 mov     edx, [ebp+arg_8]
.text:0000271D                 mov     eax, [ebp+this]
.text:00002720                 mov     [edx], eax
.text:00002722                 jmp     short loc_272B
.text:00002724 ; ---------------------------------------------------------------------------
.text:00002724
.text:00002724 loc_2724:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002724                 mov     eax, 80004002h
.text:00002729                 jmp     short loc_273C
.text:0000272B ; ---------------------------------------------------------------------------
.text:0000272B
.text:0000272B loc_272B:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000272B                 mov     ecx, [ebp+this]
.text:0000272E                 mov     edx, [ecx+4]
.text:00002731                 add     edx, 1
.text:00002734                 mov     eax, [ebp+this]
.text:00002737                 mov     [eax+4], edx
.text:0000273A                 xor     eax, eax
.text:0000273C
.text:0000273C loc_273C:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000273C                 cmp     ebp, esp
.text:0000273E                 call    __RTC_CheckEsp
.text:00002743                 pop     ebp
.text:00002744                 retn    0Ch
.text:00002744 ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002744
.text:00002744 ; ---------------------------------------------------------------------------
.text:00002747                 align 4
.text:00002747 _text           ends
.text:00002747
.text:00002748 ; ===========================================================================
.text:00002748
.text:00002748 ; Segment type: Pure code
.text:00002748 ; Segment permissions: Read/Execute
.text:00002748 _text           segment para public 'CODE' use32
.text:00002748                 assume cs:_text
.text:00002748                 ;org 2748h
.text:00002748 ; COMDAT (pick any)
.text:00002748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002748
.text:00002748 ; =============== S U B R O U T I N E =======================================
.text:00002748
.text:00002748 ; Attributes: bp-based frame
.text:00002748
.text:00002748 ; unsigned __int32 __stdcall CDummyOutStream::AddRef(CDummyOutStream *this)
.text:00002748                 public ?AddRef@CDummyOutStream@@UAGKXZ
.text:00002748 ?AddRef@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00002620o
.text:00002748
.text:00002748 var_4           = dword ptr -4
.text:00002748 this            = dword ptr  8
.text:00002748
.text:00002748                 push    ebp
.text:00002749                 mov     ebp, esp
.text:0000274B                 push    ecx
.text:0000274C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002753                 mov     eax, [ebp+this]
.text:00002756                 mov     ecx, [eax+4]
.text:00002759                 add     ecx, 1
.text:0000275C                 mov     [ebp+var_4], ecx
.text:0000275F                 mov     edx, [ebp+this]
.text:00002762                 mov     eax, [ebp+var_4]
.text:00002765                 mov     [edx+4], eax
.text:00002768                 mov     eax, [ebp+var_4]
.text:0000276B                 mov     esp, ebp
.text:0000276D                 pop     ebp
.text:0000276E                 retn    4
.text:0000276E ?AddRef@CDummyOutStream@@UAGKXZ endp
.text:0000276E
.text:0000276E ; ---------------------------------------------------------------------------
.text:00002771                 align 4
.text:00002771 _text           ends
.text:00002771
.text:00002774 ; ===========================================================================
.text:00002774
.text:00002774 ; Segment type: Pure code
.text:00002774 ; Segment permissions: Read/Execute
.text:00002774 _text           segment para public 'CODE' use32
.text:00002774                 assume cs:_text
.text:00002774                 ;org 2774h
.text:00002774 ; COMDAT (pick any)
.text:00002774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002774
.text:00002774 ; =============== S U B R O U T I N E =======================================
.text:00002774
.text:00002774 ; Attributes: bp-based frame
.text:00002774
.text:00002774 ; unsigned __int32 __stdcall CDummyOutStream::Release(CDummyOutStream *this)
.text:00002774                 public ?Release@CDummyOutStream@@UAGKXZ
.text:00002774 ?Release@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00002624o
.text:00002774
.text:00002774 var_10          = dword ptr -10h
.text:00002774 var_C           = dword ptr -0Ch
.text:00002774 var_8           = dword ptr -8
.text:00002774 var_4           = dword ptr -4
.text:00002774 this            = dword ptr  8
.text:00002774
.text:00002774                 push    ebp
.text:00002775                 mov     ebp, esp
.text:00002777                 sub     esp, 10h
.text:0000277A                 mov     eax, 0CCCCCCCCh
.text:0000277F                 mov     [ebp+var_10], eax
.text:00002782                 mov     [ebp+var_C], eax
.text:00002785                 mov     [ebp+var_8], eax
.text:00002788                 mov     [ebp+var_4], eax
.text:0000278B                 mov     eax, [ebp+this]
.text:0000278E                 mov     ecx, [eax+4]
.text:00002791                 sub     ecx, 1
.text:00002794                 mov     [ebp+var_C], ecx
.text:00002797                 mov     edx, [ebp+this]
.text:0000279A                 mov     eax, [ebp+var_C]
.text:0000279D                 mov     [edx+4], eax
.text:000027A0                 cmp     [ebp+var_C], 0
.text:000027A4                 jz      short loc_27AE
.text:000027A6                 mov     ecx, [ebp+this]
.text:000027A9                 mov     eax, [ecx+4]
.text:000027AC                 jmp     short loc_27D8
.text:000027AE ; ---------------------------------------------------------------------------
.text:000027AE
.text:000027AE loc_27AE:                               ; CODE XREF: CDummyOutStream::Release(void)+30j
.text:000027AE                 mov     edx, [ebp+this]
.text:000027B1                 mov     [ebp+var_8], edx
.text:000027B4                 mov     eax, [ebp+var_8]
.text:000027B7                 mov     [ebp+var_4], eax
.text:000027BA                 cmp     [ebp+var_4], 0
.text:000027BE                 jz      short loc_27CF
.text:000027C0                 push    1
.text:000027C2                 mov     ecx, [ebp+var_4]
.text:000027C5                 call    ??_GCDummyOutStream@@QAEPAXI@Z ; CDummyOutStream::`scalar deleting destructor'(uint)
.text:000027CA                 mov     [ebp+var_10], eax
.text:000027CD                 jmp     short loc_27D6
.text:000027CF ; ---------------------------------------------------------------------------
.text:000027CF
.text:000027CF loc_27CF:                               ; CODE XREF: CDummyOutStream::Release(void)+4Aj
.text:000027CF                 mov     [ebp+var_10], 0
.text:000027D6
.text:000027D6 loc_27D6:                               ; CODE XREF: CDummyOutStream::Release(void)+59j
.text:000027D6                 xor     eax, eax
.text:000027D8
.text:000027D8 loc_27D8:                               ; CODE XREF: CDummyOutStream::Release(void)+38j
.text:000027D8                 add     esp, 10h
.text:000027DB                 cmp     ebp, esp
.text:000027DD                 call    __RTC_CheckEsp
.text:000027E2                 mov     esp, ebp
.text:000027E4                 pop     ebp
.text:000027E5                 retn    4
.text:000027E5 ?Release@CDummyOutStream@@UAGKXZ endp
.text:000027E5
.text:000027E5 _text           ends
.text:000027E5
.text:000027E8 ; ===========================================================================
.text:000027E8
.text:000027E8 ; Segment type: Pure code
.text:000027E8 ; Segment permissions: Read/Execute
.text:000027E8 _text           segment para public 'CODE' use32
.text:000027E8                 assume cs:_text
.text:000027E8                 ;org 27E8h
.text:000027E8 ; COMDAT (pick any)
.text:000027E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027E8
.text:000027E8 ; =============== S U B R O U T I N E =======================================
.text:000027E8
.text:000027E8 ; Attributes: bp-based frame
.text:000027E8
.text:000027E8 ; public: void * __thiscall CDummyOutStream::`scalar deleting destructor'(unsigned int)
.text:000027E8                 public ??_GCDummyOutStream@@QAEPAXI@Z
.text:000027E8 ??_GCDummyOutStream@@QAEPAXI@Z proc near
.text:000027E8                                         ; CODE XREF: CDummyOutStream::Release(void)+51p
.text:000027E8
.text:000027E8 var_4           = dword ptr -4
.text:000027E8 arg_0           = dword ptr  8
.text:000027E8
.text:000027E8                 push    ebp
.text:000027E9                 mov     ebp, esp
.text:000027EB                 push    ecx
.text:000027EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027F3                 mov     [ebp+var_4], ecx
.text:000027F6                 mov     ecx, [ebp+var_4] ; this
.text:000027F9                 call    ??1CDummyOutStream@@QAE@XZ ; CDummyOutStream::~CDummyOutStream(void)
.text:000027FE                 mov     eax, [ebp+arg_0]
.text:00002801                 and     eax, 1
.text:00002804                 jz      short loc_2812
.text:00002806                 mov     ecx, [ebp+var_4]
.text:00002809                 push    ecx             ; void *
.text:0000280A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000280F                 add     esp, 4
.text:00002812
.text:00002812 loc_2812:                               ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00002812                 mov     eax, [ebp+var_4]
.text:00002815                 add     esp, 4
.text:00002818                 cmp     ebp, esp
.text:0000281A                 call    __RTC_CheckEsp
.text:0000281F                 mov     esp, ebp
.text:00002821                 pop     ebp
.text:00002822                 retn    4
.text:00002822 ??_GCDummyOutStream@@QAEPAXI@Z endp
.text:00002822
.text:00002822 ; ---------------------------------------------------------------------------
.text:00002825                 align 4
.text:00002825 _text           ends
.text:00002825
.text:00002828 ; ===========================================================================
.text:00002828
.text:00002828 ; Segment type: Pure code
.text:00002828 ; Segment permissions: Read/Execute
.text:00002828 _text           segment para public 'CODE' use32
.text:00002828                 assume cs:_text
.text:00002828                 ;org 2828h
.text:00002828 ; COMDAT (pick any)
.text:00002828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002828
.text:00002828 ; =============== S U B R O U T I N E =======================================
.text:00002828
.text:00002828 ; Attributes: bp-based frame
.text:00002828
.text:00002828 ; _DWORD __thiscall CDummyOutStream::~CDummyOutStream(CDummyOutStream *__hidden this)
.text:00002828                 public ??1CDummyOutStream@@QAE@XZ
.text:00002828 ??1CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+11p
.text:00002828
.text:00002828 var_4           = dword ptr -4
.text:00002828
.text:00002828                 push    ebp
.text:00002829                 mov     ebp, esp
.text:0000282B                 push    ecx
.text:0000282C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002833                 mov     [ebp+var_4], ecx
.text:00002836                 mov     ecx, [ebp+var_4]
.text:00002839                 add     ecx, 8
.text:0000283C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002841                 add     esp, 4
.text:00002844                 cmp     ebp, esp
.text:00002846                 call    __RTC_CheckEsp
.text:0000284B                 mov     esp, ebp
.text:0000284D                 pop     ebp
.text:0000284E                 retn
.text:0000284E ??1CDummyOutStream@@QAE@XZ endp
.text:0000284E
.text:0000284E ; ---------------------------------------------------------------------------
.text:0000284F                 align 10h
.text:0000284F _text           ends
.text:0000284F
.text:00002850 ; ===========================================================================
.text:00002850
.text:00002850 ; Segment type: Pure code
.text:00002850 ; Segment permissions: Read/Execute
.text:00002850 _text           segment para public 'CODE' use32
.text:00002850                 assume cs:_text
.text:00002850                 ;org 2850h
.text:00002850 ; COMDAT (pick any)
.text:00002850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002850
.text:00002850 ; =============== S U B R O U T I N E =======================================
.text:00002850
.text:00002850 ; Attributes: bp-based frame
.text:00002850
.text:00002850 ; _DWORD __thiscall NArchive::NLzma::CDecoder::CDecoder(NArchive::NLzma::CDecoder *__hidden this)
.text:00002850                 public ??0CDecoder@NLzma@NArchive@@QAE@XZ
.text:00002850 ??0CDecoder@NLzma@NArchive@@QAE@XZ proc near
.text:00002850                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B3p
.text:00002850
.text:00002850 var_10          = dword ptr -10h
.text:00002850 var_C           = dword ptr -0Ch
.text:00002850 var_4           = dword ptr -4
.text:00002850
.text:00002850                 push    ebp
.text:00002851                 mov     ebp, esp
.text:00002853                 push    0FFFFFFFFh
.text:00002855                 push    offset __ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ
.text:0000285A                 mov     eax, large fs:0
.text:00002860                 push    eax
.text:00002861                 push    ecx
.text:00002862                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002869                 mov     eax, dword ptr ds:___security_cookie
.text:0000286E                 xor     eax, ebp
.text:00002870                 push    eax
.text:00002871                 lea     eax, [ebp+var_C]
.text:00002874                 mov     large fs:0, eax
.text:0000287A                 mov     [ebp+var_10], ecx
.text:0000287D                 mov     ecx, [ebp+var_10]
.text:00002880                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00002885                 mov     [ebp+var_4], 0
.text:0000288C                 mov     ecx, [ebp+var_10]
.text:0000288F                 add     ecx, 8
.text:00002892                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00002897                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000289E                 mov     eax, [ebp+var_10]
.text:000028A1                 mov     ecx, [ebp+var_C]
.text:000028A4                 mov     large fs:0, ecx
.text:000028AB                 pop     ecx
.text:000028AC                 add     esp, 10h
.text:000028AF                 cmp     ebp, esp
.text:000028B1                 call    __RTC_CheckEsp
.text:000028B6                 mov     esp, ebp
.text:000028B8                 pop     ebp
.text:000028B9                 retn
.text:000028B9 ??0CDecoder@NLzma@NArchive@@QAE@XZ endp
.text:000028B9
.text:000028B9 ; ---------------------------------------------------------------------------
.text:000028BA                 align 4
.text:000028BA _text           ends
.text:000028BA
.text$x:000028BC ; ===========================================================================
.text$x:000028BC
.text$x:000028BC ; Segment type: Pure code
.text$x:000028BC ; Segment permissions: Read/Execute
.text$x:000028BC _text$x         segment para public 'CODE' use32
.text$x:000028BC                 assume cs:_text$x
.text$x:000028BC                 ;org 28BCh
.text$x:000028BC ; COMDAT (pick associative to section at 2850)
.text$x:000028BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000028BC
.text$x:000028BC ; =============== S U B R O U T I N E =======================================
.text$x:000028BC
.text$x:000028BC
.text$x:000028BC __unwindfunclet$??0CDecoder@NLzma@NArchive@@QAE@XZ$0 proc near
.text$x:000028BC                                         ; DATA XREF: .xdata$x:000028E4o
.text$x:000028BC                 mov     ecx, [ebp-10h]
.text$x:000028BF                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000028BF __unwindfunclet$??0CDecoder@NLzma@NArchive@@QAE@XZ$0 endp
.text$x:000028BF
.text$x:000028C4
.text$x:000028C4 ; =============== S U B R O U T I N E =======================================
.text$x:000028C4
.text$x:000028C4
.text$x:000028C4 __ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ proc near
.text$x:000028C4                                         ; DATA XREF: NArchive::NLzma::CDecoder::CDecoder(void)+5o
.text$x:000028C4
.text$x:000028C4 arg_4           = dword ptr  8
.text$x:000028C4
.text$x:000028C4                 mov     edx, [esp+arg_4]
.text$x:000028C8                 lea     eax, [edx+0Ch]
.text$x:000028CB                 mov     ecx, [edx-8]
.text$x:000028CE                 xor     ecx, eax
.text$x:000028D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028D5                 mov     eax, offset __ehfuncinfo$??0CDecoder@NLzma@NArchive@@QAE@XZ
.text$x:000028DA                 jmp     ___CxxFrameHandler3
.text$x:000028DA __ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ endp
.text$x:000028DA
.text$x:000028DA ; ---------------------------------------------------------------------------
.text$x:000028DF                 align 10h
.text$x:000028DF _text$x         ends
.text$x:000028DF
.xdata$x:000028E0 ; ===========================================================================
.xdata$x:000028E0
.xdata$x:000028E0 ; Segment type: Pure data
.xdata$x:000028E0 ; Segment permissions: Read
.xdata$x:000028E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000028E0                 assume cs:_xdata$x
.xdata$x:000028E0                 ;org 28E0h
.xdata$x:000028E0 ; COMDAT (pick associative to section at 2850)
.xdata$x:000028E0 __unwindtable$??0CDecoder@NLzma@NArchive@@QAE@XZ db 0FFh
.xdata$x:000028E0                                         ; DATA XREF: .xdata$x:000028F0o
.xdata$x:000028E1                 db 0FFh
.xdata$x:000028E2                 db 0FFh
.xdata$x:000028E3                 db 0FFh
.xdata$x:000028E4                 dd offset __unwindfunclet$??0CDecoder@NLzma@NArchive@@QAE@XZ$0
.xdata$x:000028E8 __ehfuncinfo$??0CDecoder@NLzma@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000028E8                                         ; DATA XREF: __ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ+11o
.xdata$x:000028E9                 db    5
.xdata$x:000028EA                 db  93h ; ô
.xdata$x:000028EB                 db  19h
.xdata$x:000028EC                 db    1
.xdata$x:000028ED                 db    0
.xdata$x:000028EE                 db    0
.xdata$x:000028EF                 db    0
.xdata$x:000028F0                 dd offset __unwindtable$??0CDecoder@NLzma@NArchive@@QAE@XZ
.xdata$x:000028F4                 db    0
.xdata$x:000028F5                 db    0
.xdata$x:000028F6                 db    0
.xdata$x:000028F7                 db    0
.xdata$x:000028F8                 db    0
.xdata$x:000028F9                 db    0
.xdata$x:000028FA                 db    0
.xdata$x:000028FB                 db    0
.xdata$x:000028FC                 db    0
.xdata$x:000028FD                 db    0
.xdata$x:000028FE                 db    0
.xdata$x:000028FF                 db    0
.xdata$x:00002900                 db    0
.xdata$x:00002901                 db    0
.xdata$x:00002902                 db    0
.xdata$x:00002903                 db    0
.xdata$x:00002904                 db    0
.xdata$x:00002905                 db    0
.xdata$x:00002906                 db    0
.xdata$x:00002907                 db    0
.xdata$x:00002908                 db    1
.xdata$x:00002909                 db    0
.xdata$x:0000290A                 db    0
.xdata$x:0000290B                 db    0
.xdata$x:0000290B _xdata$x        ends
.xdata$x:0000290B
.text:0000290C ; ===========================================================================
.text:0000290C
.text:0000290C ; Segment type: Pure code
.text:0000290C ; Segment permissions: Read/Execute
.text:0000290C _text           segment para public 'CODE' use32
.text:0000290C                 assume cs:_text
.text:0000290C                 ;org 290Ch
.text:0000290C ; COMDAT (pick any)
.text:0000290C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000290C
.text:0000290C ; =============== S U B R O U T I N E =======================================
.text:0000290C
.text:0000290C ; Attributes: bp-based frame
.text:0000290C
.text:0000290C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:0000290C                 public ??0ISequentialOutStream@@QAE@XZ
.text:0000290C ??0ISequentialOutStream@@QAE@XZ proc near
.text:0000290C                                         ; CODE XREF: CDummyOutStream::CDummyOutStream(void)+11p
.text:0000290C
.text:0000290C var_4           = dword ptr -4
.text:0000290C
.text:0000290C                 push    ebp
.text:0000290D                 mov     ebp, esp
.text:0000290F                 push    ecx
.text:00002910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002917                 mov     [ebp+var_4], ecx
.text:0000291A                 mov     ecx, [ebp+var_4]
.text:0000291D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002922                 mov     eax, [ebp+var_4]
.text:00002925                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:0000292B                 mov     eax, [ebp+var_4]
.text:0000292E                 add     esp, 4
.text:00002931                 cmp     ebp, esp
.text:00002933                 call    __RTC_CheckEsp
.text:00002938                 mov     esp, ebp
.text:0000293A                 pop     ebp
.text:0000293B                 retn
.text:0000293B ??0ISequentialOutStream@@QAE@XZ endp
.text:0000293B
.text:0000293B _text           ends
.text:0000293B
.rdata:0000293C ; ===========================================================================
.rdata:0000293C
.rdata:0000293C ; Segment type: Pure data
.rdata:0000293C ; Segment permissions: Read
.rdata:0000293C _rdata          segment dword public 'DATA' use32
.rdata:0000293C                 assume cs:_rdata
.rdata:0000293C                 ;org 293Ch
.rdata:0000293C ; COMDAT (pick largest)
.rdata:0000293C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00002940                 public ??_7ISequentialOutStream@@6B@
.rdata:00002940 ; const ISequentialOutStream::`vftable'
.rdata:00002940 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00002940                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00002944                 dd offset __purecall
.rdata:00002948                 dd offset __purecall
.rdata:0000294C                 dd offset __purecall
.rdata:0000294C _rdata          ends
.rdata:0000294C
.rdata$r:00002950 ; ===========================================================================
.rdata$r:00002950
.rdata$r:00002950 ; Segment type: Pure data
.rdata$r:00002950 ; Segment permissions: Read
.rdata$r:00002950 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002950                 assume cs:_rdata$r
.rdata$r:00002950                 ;org 2950h
.rdata$r:00002950 ; COMDAT (pick any)
.rdata$r:00002950                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00002950 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00002950 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:0000293Co
.rdata$r:00002951                 db    0
.rdata$r:00002952                 db    0
.rdata$r:00002953                 db    0
.rdata$r:00002954                 db    0
.rdata$r:00002955                 db    0
.rdata$r:00002956                 db    0
.rdata$r:00002957                 db    0
.rdata$r:00002958                 db    0
.rdata$r:00002959                 db    0
.rdata$r:0000295A                 db    0
.rdata$r:0000295B                 db    0
.rdata$r:0000295C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00002960                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002960 _rdata$r        ends
.rdata$r:00002960
.text:00002964 ; ===========================================================================
.text:00002964
.text:00002964 ; Segment type: Pure code
.text:00002964 ; Segment permissions: Read/Execute
.text:00002964 _text           segment para public 'CODE' use32
.text:00002964                 assume cs:_text
.text:00002964                 ;org 2964h
.text:00002964 ; COMDAT (pick any)
.text:00002964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002964
.text:00002964 ; =============== S U B R O U T I N E =======================================
.text:00002964
.text:00002964 ; Attributes: bp-based frame
.text:00002964
.text:00002964 ; _DWORD __thiscall NArchive::NLzma::CHandler::CHandler(NArchive::NLzma::CHandler *this, bool)
.text:00002964                 public ??0CHandler@NLzma@NArchive@@QAE@_N@Z
.text:00002964 ??0CHandler@NLzma@NArchive@@QAE@_N@Z proc near
.text:00002964                                         ; CODE XREF: NArchive::NLzma::NLzmaAr::CreateArc(void)+59p
.text:00002964                                         ; NArchive::NLzma::NLzma86Ar::CreateArc(void)+59p
.text:00002964
.text:00002964 var_10          = dword ptr -10h
.text:00002964 var_C           = dword ptr -0Ch
.text:00002964 var_4           = dword ptr -4
.text:00002964 arg_0           = byte ptr  8
.text:00002964
.text:00002964                 push    ebp
.text:00002965                 mov     ebp, esp
.text:00002967                 push    0FFFFFFFFh
.text:00002969                 push    offset __ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z
.text:0000296E                 mov     eax, large fs:0
.text:00002974                 push    eax
.text:00002975                 push    ecx
.text:00002976                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000297D                 mov     eax, dword ptr ds:___security_cookie
.text:00002982                 xor     eax, ebp
.text:00002984                 push    eax
.text:00002985                 lea     eax, [ebp+var_C]
.text:00002988                 mov     large fs:0, eax
.text:0000298E                 mov     [ebp+var_10], ecx
.text:00002991                 mov     ecx, [ebp+var_10] ; this
.text:00002994                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00002999                 mov     ecx, [ebp+var_10]
.text:0000299C                 add     ecx, 4          ; this
.text:0000299F                 call    ??0IArchiveOpenSeq@@QAE@XZ ; IArchiveOpenSeq::IArchiveOpenSeq(void)
.text:000029A4                 mov     ecx, [ebp+var_10]
.text:000029A7                 add     ecx, 8          ; this
.text:000029AA                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000029AF                 mov     eax, [ebp+var_10]
.text:000029B2                 mov     dword ptr [eax], offset ??_7CHandler@NLzma@NArchive@@6BIInArchive@@@ ; const NArchive::NLzma::CHandler::`vftable'{for `IInArchive'}
.text:000029B8                 mov     ecx, [ebp+var_10]
.text:000029BB                 mov     dword ptr [ecx+4], offset ??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NLzma::CHandler::`vftable'{for `IArchiveOpenSeq'}
.text:000029C2                 mov     ecx, [ebp+var_10]
.text:000029C5                 add     ecx, 24h ; '$'
.text:000029C8                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000029CD                 mov     [ebp+var_4], 0
.text:000029D4                 mov     ecx, [ebp+var_10]
.text:000029D7                 add     ecx, 28h ; '('
.text:000029DA                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000029DF                 mov     edx, [ebp+var_10]
.text:000029E2                 mov     al, [ebp+arg_0]
.text:000029E5                 mov     [edx+20h], al
.text:000029E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029EF                 mov     eax, [ebp+var_10]
.text:000029F2                 mov     ecx, [ebp+var_C]
.text:000029F5                 mov     large fs:0, ecx
.text:000029FC                 pop     ecx
.text:000029FD                 add     esp, 10h
.text:00002A00                 cmp     ebp, esp
.text:00002A02                 call    __RTC_CheckEsp
.text:00002A07                 mov     esp, ebp
.text:00002A09                 pop     ebp
.text:00002A0A                 retn    4
.text:00002A0A ??0CHandler@NLzma@NArchive@@QAE@_N@Z endp
.text:00002A0A
.text:00002A0A ; ---------------------------------------------------------------------------
.text:00002A0D                 align 10h
.text:00002A0D _text           ends
.text:00002A0D
.text$x:00002A10 ; ===========================================================================
.text$x:00002A10
.text$x:00002A10 ; Segment type: Pure code
.text$x:00002A10 ; Segment permissions: Read/Execute
.text$x:00002A10 _text$x         segment para public 'CODE' use32
.text$x:00002A10                 assume cs:_text$x
.text$x:00002A10                 ;org 2A10h
.text$x:00002A10 ; COMDAT (pick associative to section at 2964)
.text$x:00002A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A10
.text$x:00002A10 ; =============== S U B R O U T I N E =======================================
.text$x:00002A10
.text$x:00002A10
.text$x:00002A10 __unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0 proc near
.text$x:00002A10                                         ; DATA XREF: .xdata$x:00002A88o
.text$x:00002A10                 mov     ecx, [ebp-10h]
.text$x:00002A13                 add     ecx, 24h ; '$'
.text$x:00002A16                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002A16 __unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0 endp
.text$x:00002A16
.text$x:00002A1B
.text$x:00002A1B ; =============== S U B R O U T I N E =======================================
.text$x:00002A1B
.text$x:00002A1B
.text$x:00002A1B __ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z proc near
.text$x:00002A1B                                         ; DATA XREF: NArchive::NLzma::CHandler::CHandler(bool)+5o
.text$x:00002A1B
.text$x:00002A1B arg_4           = dword ptr  8
.text$x:00002A1B
.text$x:00002A1B                 mov     edx, [esp+arg_4]
.text$x:00002A1F                 lea     eax, [edx+0Ch]
.text$x:00002A22                 mov     ecx, [edx-8]
.text$x:00002A25                 xor     ecx, eax
.text$x:00002A27                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002A2C                 mov     eax, offset __ehfuncinfo$??0CHandler@NLzma@NArchive@@QAE@_N@Z
.text$x:00002A31                 jmp     ___CxxFrameHandler3
.text$x:00002A31 __ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z endp
.text$x:00002A31
.text$x:00002A31 ; ---------------------------------------------------------------------------
.text$x:00002A36                 align 4
.text$x:00002A36 _text$x         ends
.text$x:00002A36
.rdata:00002A38 ; ===========================================================================
.rdata:00002A38
.rdata:00002A38 ; Segment type: Pure data
.rdata:00002A38 ; Segment permissions: Read
.rdata:00002A38 _rdata          segment dword public 'DATA' use32
.rdata:00002A38                 assume cs:_rdata
.rdata:00002A38                 ;org 2A38h
.rdata:00002A38 ; COMDAT (pick largest)
.rdata:00002A38                 dd offset ??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NLzma::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata:00002A3C                 public ??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@
.rdata:00002A3C ; const NArchive::NLzma::CHandler::`vftable'{for `IArchiveOpenSeq'}
.rdata:00002A3C ??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ dd offset ?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002A3C                                         ; DATA XREF: NArchive::NLzma::CHandler::CHandler(bool)+57o
.rdata:00002A3C                                         ; [thunk]:NArchive::NLzma::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00002A40                 dd offset ?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ ; [thunk]:NArchive::NLzma::CHandler::AddRef`adjustor{4}' (void)
.rdata:00002A44                 dd offset ?Release@CHandler@NLzma@NArchive@@W3AGKXZ ; [thunk]:NArchive::NLzma::CHandler::Release`adjustor{4}' (void)
.rdata:00002A48                 dd offset ?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NLzma::CHandler::OpenSeq(ISequentialInStream *)
.rdata:00002A48 _rdata          ends
.rdata:00002A48
.rdata:00002A4C ; ===========================================================================
.rdata:00002A4C
.rdata:00002A4C ; Segment type: Pure data
.rdata:00002A4C ; Segment permissions: Read
.rdata:00002A4C _rdata          segment dword public 'DATA' use32
.rdata:00002A4C                 assume cs:_rdata
.rdata:00002A4C                 ;org 2A4Ch
.rdata:00002A4C ; COMDAT (pick largest)
.rdata:00002A4C                 dd offset ??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@ ; const NArchive::NLzma::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:00002A50                 public ??_7CHandler@NLzma@NArchive@@6BIInArchive@@@
.rdata:00002A50 ; const NArchive::NLzma::CHandler::`vftable'{for `IInArchive'}
.rdata:00002A50 ??_7CHandler@NLzma@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002A50                                         ; DATA XREF: NArchive::NLzma::CHandler::CHandler(bool)+4Eo
.rdata:00002A50                                         ; NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:00002A54                 dd offset ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ ; NArchive::NLzma::CHandler::AddRef(void)
.rdata:00002A58                 dd offset ?Release@CHandler@NLzma@NArchive@@UAGKXZ ; NArchive::NLzma::CHandler::Release(void)
.rdata:00002A5C                 dd offset ?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00002A60                 dd offset ?Close@CHandler@NLzma@NArchive@@UAGJXZ ; NArchive::NLzma::CHandler::Close(void)
.rdata:00002A64                 dd offset ?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfItems(uint *)
.rdata:00002A68                 dd offset ?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:00002A6C                 dd offset ?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00002A70                 dd offset ?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:00002A74                 dd offset ?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfProperties(uint *)
.rdata:00002A78                 dd offset ?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NLzma::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00002A7C                 dd offset ?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00002A80                 dd offset ?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NLzma::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00002A80 _rdata          ends
.rdata:00002A80
.xdata$x:00002A84 ; ===========================================================================
.xdata$x:00002A84
.xdata$x:00002A84 ; Segment type: Pure data
.xdata$x:00002A84 ; Segment permissions: Read
.xdata$x:00002A84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002A84                 assume cs:_xdata$x
.xdata$x:00002A84                 ;org 2A84h
.xdata$x:00002A84 ; COMDAT (pick associative to section at 2964)
.xdata$x:00002A84 __unwindtable$??0CHandler@NLzma@NArchive@@QAE@_N@Z db 0FFh
.xdata$x:00002A84                                         ; DATA XREF: .xdata$x:00002A94o
.xdata$x:00002A85                 db 0FFh
.xdata$x:00002A86                 db 0FFh
.xdata$x:00002A87                 db 0FFh
.xdata$x:00002A88                 dd offset __unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0
.xdata$x:00002A8C __ehfuncinfo$??0CHandler@NLzma@NArchive@@QAE@_N@Z db  22h ; "
.xdata$x:00002A8C                                         ; DATA XREF: __ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z+11o
.xdata$x:00002A8D                 db    5
.xdata$x:00002A8E                 db  93h ; ô
.xdata$x:00002A8F                 db  19h
.xdata$x:00002A90                 db    1
.xdata$x:00002A91                 db    0
.xdata$x:00002A92                 db    0
.xdata$x:00002A93                 db    0
.xdata$x:00002A94                 dd offset __unwindtable$??0CHandler@NLzma@NArchive@@QAE@_N@Z
.xdata$x:00002A98                 db    0
.xdata$x:00002A99                 db    0
.xdata$x:00002A9A                 db    0
.xdata$x:00002A9B                 db    0
.xdata$x:00002A9C                 db    0
.xdata$x:00002A9D                 db    0
.xdata$x:00002A9E                 db    0
.xdata$x:00002A9F                 db    0
.xdata$x:00002AA0                 db    0
.xdata$x:00002AA1                 db    0
.xdata$x:00002AA2                 db    0
.xdata$x:00002AA3                 db    0
.xdata$x:00002AA4                 db    0
.xdata$x:00002AA5                 db    0
.xdata$x:00002AA6                 db    0
.xdata$x:00002AA7                 db    0
.xdata$x:00002AA8                 db    0
.xdata$x:00002AA9                 db    0
.xdata$x:00002AAA                 db    0
.xdata$x:00002AAB                 db    0
.xdata$x:00002AAC                 db    1
.xdata$x:00002AAD                 db    0
.xdata$x:00002AAE                 db    0
.xdata$x:00002AAF                 db    0
.xdata$x:00002AAF _xdata$x        ends
.xdata$x:00002AAF
.rdata$r:00002AB0 ; ===========================================================================
.rdata$r:00002AB0
.rdata$r:00002AB0 ; Segment type: Pure data
.rdata$r:00002AB0 ; Segment permissions: Read
.rdata$r:00002AB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002AB0                 assume cs:_rdata$r
.rdata$r:00002AB0                 ;org 2AB0h
.rdata$r:00002AB0 ; COMDAT (pick any)
.rdata$r:00002AB0                 public ??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@
.rdata$r:00002AB0 ; const NArchive::NLzma::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:00002AB0 ??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@ db    0
.rdata$r:00002AB0                                         ; DATA XREF: .rdata:00002A4Co
.rdata$r:00002AB1                 db    0
.rdata$r:00002AB2                 db    0
.rdata$r:00002AB3                 db    0
.rdata$r:00002AB4                 db    0
.rdata$r:00002AB5                 db    0
.rdata$r:00002AB6                 db    0
.rdata$r:00002AB7                 db    0
.rdata$r:00002AB8                 db    0
.rdata$r:00002AB9                 db    0
.rdata$r:00002ABA                 db    0
.rdata$r:00002ABB                 db    0
.rdata$r:00002ABC                 dd offset ??_R0?AVCHandler@NLzma@NArchive@@@8 ; NArchive::NLzma::CHandler `RTTI Type Descriptor'
.rdata$r:00002AC0                 dd offset ??_R3CHandler@NLzma@NArchive@@8 ; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002AC0 _rdata$r        ends
.rdata$r:00002AC0
.data:00002AC4 ; ===========================================================================
.data:00002AC4
.data:00002AC4 ; Segment type: Pure data
.data:00002AC4 ; Segment permissions: Read/Write
.data:00002AC4 _data           segment dword public 'DATA' use32
.data:00002AC4                 assume cs:_data
.data:00002AC4                 ;org 2AC4h
.data:00002AC4 ; COMDAT (pick any)
.data:00002AC4                 public ??_R0?AVCHandler@NLzma@NArchive@@@8
.data:00002AC4 ; class NArchive::NLzma::CHandler `RTTI Type Descriptor'
.data:00002AC4 ??_R0?AVCHandler@NLzma@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002AC4                                         ; DATA XREF: .rdata$r:00002ABCo
.data:00002AC4                                         ; .rdata$r:NArchive::NLzma::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002AC4                                         ; const type_info::`vftable'
.data:00002AC8                 db    0
.data:00002AC9                 db    0
.data:00002ACA                 db    0
.data:00002ACB                 db    0
.data:00002ACC                 db  2Eh ; .
.data:00002ACD                 db  3Fh ; ?
.data:00002ACE                 db  41h ; A
.data:00002ACF                 db  56h ; V
.data:00002AD0                 db  43h ; C
.data:00002AD1                 db  48h ; H
.data:00002AD2                 db  61h ; a
.data:00002AD3                 db  6Eh ; n
.data:00002AD4                 db  64h ; d
.data:00002AD5                 db  6Ch ; l
.data:00002AD6                 db  65h ; e
.data:00002AD7                 db  72h ; r
.data:00002AD8                 db  40h ; @
.data:00002AD9                 db  4Eh ; N
.data:00002ADA                 db  4Ch ; L
.data:00002ADB                 db  7Ah ; z
.data:00002ADC                 db  6Dh ; m
.data:00002ADD                 db  61h ; a
.data:00002ADE                 db  40h ; @
.data:00002ADF                 db  4Eh ; N
.data:00002AE0                 db  41h ; A
.data:00002AE1                 db  72h ; r
.data:00002AE2                 db  63h ; c
.data:00002AE3                 db  68h ; h
.data:00002AE4                 db  69h ; i
.data:00002AE5                 db  76h ; v
.data:00002AE6                 db  65h ; e
.data:00002AE7                 db  40h ; @
.data:00002AE8                 db  40h ; @
.data:00002AE9                 db    0
.data:00002AEA                 align 4
.data:00002AEA _data           ends
.data:00002AEA
.rdata$r:00002AEC ; ===========================================================================
.rdata$r:00002AEC
.rdata$r:00002AEC ; Segment type: Pure data
.rdata$r:00002AEC ; Segment permissions: Read
.rdata$r:00002AEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002AEC                 assume cs:_rdata$r
.rdata$r:00002AEC                 ;org 2AECh
.rdata$r:00002AEC ; COMDAT (pick any)
.rdata$r:00002AEC                 public ??_R3CHandler@NLzma@NArchive@@8
.rdata$r:00002AEC ; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002AEC ??_R3CHandler@NLzma@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00002AC0o
.rdata$r:00002AEC                                         ; .rdata$r:00002B30o ...
.rdata$r:00002AED                 db    0
.rdata$r:00002AEE                 db    0
.rdata$r:00002AEF                 db    0
.rdata$r:00002AF0                 db    5
.rdata$r:00002AF1                 db    0
.rdata$r:00002AF2                 db    0
.rdata$r:00002AF3                 db    0
.rdata$r:00002AF4                 db    6
.rdata$r:00002AF5                 db    0
.rdata$r:00002AF6                 db    0
.rdata$r:00002AF7                 db    0
.rdata$r:00002AF8                 dd offset ??_R2CHandler@NLzma@NArchive@@8 ; NArchive::NLzma::CHandler::`RTTI Base Class Array'
.rdata$r:00002AF8 _rdata$r        ends
.rdata$r:00002AF8
.rdata$r:00002AFC ; ===========================================================================
.rdata$r:00002AFC
.rdata$r:00002AFC ; Segment type: Pure data
.rdata$r:00002AFC ; Segment permissions: Read
.rdata$r:00002AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002AFC                 assume cs:_rdata$r
.rdata$r:00002AFC                 ;org 2AFCh
.rdata$r:00002AFC ; COMDAT (pick any)
.rdata$r:00002AFC                 public ??_R2CHandler@NLzma@NArchive@@8
.rdata$r:00002AFC ; NArchive::NLzma::CHandler::`RTTI Base Class Array'
.rdata$r:00002AFC ??_R2CHandler@NLzma@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8
.rdata$r:00002AFC                                         ; DATA XREF: .rdata$r:00002AF8o
.rdata$r:00002AFC                                         ; NArchive::NLzma::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B00                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B04                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002B08                 dd offset ??_R13?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002B0C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002B10                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002B14                 db    0
.rdata$r:00002B15                 align 4
.rdata$r:00002B15 _rdata$r        ends
.rdata$r:00002B15
.rdata$r:00002B18 ; ===========================================================================
.rdata$r:00002B18
.rdata$r:00002B18 ; Segment type: Pure data
.rdata$r:00002B18 ; Segment permissions: Read
.rdata$r:00002B18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B18                 assume cs:_rdata$r
.rdata$r:00002B18                 ;org 2B18h
.rdata$r:00002B18 ; COMDAT (pick any)
.rdata$r:00002B18                 public ??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8
.rdata$r:00002B18 ; NArchive::NLzma::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002B18 ??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8 dd offset ??_R0?AVCHandler@NLzma@NArchive@@@8
.rdata$r:00002B18                                         ; DATA XREF: .rdata$r:NArchive::NLzma::CHandler::`RTTI Base Class Array'o
.rdata$r:00002B18                                         ; NArchive::NLzma::CHandler `RTTI Type Descriptor'
.rdata$r:00002B1C                 db    5
.rdata$r:00002B1D                 db    0
.rdata$r:00002B1E                 db    0
.rdata$r:00002B1F                 db    0
.rdata$r:00002B20                 db    0
.rdata$r:00002B21                 db    0
.rdata$r:00002B22                 db    0
.rdata$r:00002B23                 db    0
.rdata$r:00002B24                 db 0FFh
.rdata$r:00002B25                 db 0FFh
.rdata$r:00002B26                 db 0FFh
.rdata$r:00002B27                 db 0FFh
.rdata$r:00002B28                 db    0
.rdata$r:00002B29                 db    0
.rdata$r:00002B2A                 db    0
.rdata$r:00002B2B                 db    0
.rdata$r:00002B2C                 db  40h ; @
.rdata$r:00002B2D                 db    0
.rdata$r:00002B2E                 db    0
.rdata$r:00002B2F                 db    0
.rdata$r:00002B30                 dd offset ??_R3CHandler@NLzma@NArchive@@8 ; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B30 _rdata$r        ends
.rdata$r:00002B30
.rdata$r:00002B34 ; ===========================================================================
.rdata$r:00002B34
.rdata$r:00002B34 ; Segment type: Pure data
.rdata$r:00002B34 ; Segment permissions: Read
.rdata$r:00002B34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B34                 assume cs:_rdata$r
.rdata$r:00002B34                 ;org 2B34h
.rdata$r:00002B34 ; COMDAT (pick any)
.rdata$r:00002B34                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00002B34 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002B34 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:00002B34                                         ; DATA XREF: .rdata$r:00002B00o
.rdata$r:00002B34                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:00002B34                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:00002B38                 db    1
.rdata$r:00002B39                 db    0
.rdata$r:00002B3A                 db    0
.rdata$r:00002B3B                 db    0
.rdata$r:00002B3C                 db    0
.rdata$r:00002B3D                 db    0
.rdata$r:00002B3E                 db    0
.rdata$r:00002B3F                 db    0
.rdata$r:00002B40                 db 0FFh
.rdata$r:00002B41                 db 0FFh
.rdata$r:00002B42                 db 0FFh
.rdata$r:00002B43                 db 0FFh
.rdata$r:00002B44                 db    0
.rdata$r:00002B45                 db    0
.rdata$r:00002B46                 db    0
.rdata$r:00002B47                 db    0
.rdata$r:00002B48                 db  40h ; @
.rdata$r:00002B49                 db    0
.rdata$r:00002B4A                 db    0
.rdata$r:00002B4B                 db    0
.rdata$r:00002B4C                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B4C _rdata$r        ends
.rdata$r:00002B4C
.data:00002B50 ; ===========================================================================
.data:00002B50
.data:00002B50 ; Segment type: Pure data
.data:00002B50 ; Segment permissions: Read/Write
.data:00002B50 _data           segment dword public 'DATA' use32
.data:00002B50                 assume cs:_data
.data:00002B50                 ;org 2B50h
.data:00002B50 ; COMDAT (pick any)
.data:00002B50                 public ??_R0?AUIInArchive@@@8
.data:00002B50 ; struct IInArchive `RTTI Type Descriptor'
.data:00002B50 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002B50                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002B50                                         ; .rdata$r:00002E60o
.data:00002B50                                         ; const type_info::`vftable'
.data:00002B54                 align 8
.data:00002B58 a_?auiinarchive db '.?AUIInArchive@@',0
.data:00002B69                 align 4
.data:00002B69 _data           ends
.data:00002B69
.rdata$r:00002B6C ; ===========================================================================
.rdata$r:00002B6C
.rdata$r:00002B6C ; Segment type: Pure data
.rdata$r:00002B6C ; Segment permissions: Read
.rdata$r:00002B6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B6C                 assume cs:_rdata$r
.rdata$r:00002B6C                 ;org 2B6Ch
.rdata$r:00002B6C ; COMDAT (pick any)
.rdata$r:00002B6C                 public ??_R3IInArchive@@8
.rdata$r:00002B6C ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B6C ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:00002B4Co
.rdata$r:00002B6C                                         ; .rdata$r:00002E64o
.rdata$r:00002B6D                 db    0
.rdata$r:00002B6E                 db    0
.rdata$r:00002B6F                 db    0
.rdata$r:00002B70                 db    0
.rdata$r:00002B71                 db    0
.rdata$r:00002B72                 db    0
.rdata$r:00002B73                 db    0
.rdata$r:00002B74                 db    2
.rdata$r:00002B75                 db    0
.rdata$r:00002B76                 db    0
.rdata$r:00002B77                 db    0
.rdata$r:00002B78                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00002B78 _rdata$r        ends
.rdata$r:00002B78
.rdata$r:00002B7C ; ===========================================================================
.rdata$r:00002B7C
.rdata$r:00002B7C ; Segment type: Pure data
.rdata$r:00002B7C ; Segment permissions: Read
.rdata$r:00002B7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B7C                 assume cs:_rdata$r
.rdata$r:00002B7C                 ;org 2B7Ch
.rdata$r:00002B7C ; COMDAT (pick any)
.rdata$r:00002B7C                 public ??_R2IInArchive@@8
.rdata$r:00002B7C ; IInArchive::`RTTI Base Class Array'
.rdata$r:00002B7C ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00002B7C                                         ; DATA XREF: .rdata$r:00002B78o
.rdata$r:00002B7C                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B80                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B84                 db    0
.rdata$r:00002B85                 align 4
.rdata$r:00002B85 _rdata$r        ends
.rdata$r:00002B85
.rdata$r:00002B88 ; ===========================================================================
.rdata$r:00002B88
.rdata$r:00002B88 ; Segment type: Pure data
.rdata$r:00002B88 ; Segment permissions: Read
.rdata$r:00002B88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B88                 assume cs:_rdata$r
.rdata$r:00002B88                 ;org 2B88h
.rdata$r:00002B88 ; COMDAT (pick any)
.rdata$r:00002B88                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00002B88 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00002B88 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002B88                                         ; DATA XREF: .rdata$r:00002B04o
.rdata$r:00002B88                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002B8C                 db    0
.rdata$r:00002B8D                 db    0
.rdata$r:00002B8E                 db    0
.rdata$r:00002B8F                 db    0
.rdata$r:00002B90                 db    0
.rdata$r:00002B91                 db    0
.rdata$r:00002B92                 db    0
.rdata$r:00002B93                 db    0
.rdata$r:00002B94                 db 0FFh
.rdata$r:00002B95                 db 0FFh
.rdata$r:00002B96                 db 0FFh
.rdata$r:00002B97                 db 0FFh
.rdata$r:00002B98                 db    0
.rdata$r:00002B99                 db    0
.rdata$r:00002B9A                 db    0
.rdata$r:00002B9B                 db    0
.rdata$r:00002B9C                 db  42h ; B
.rdata$r:00002B9D                 db    0
.rdata$r:00002B9E                 db    0
.rdata$r:00002B9F                 db    0
.rdata$r:00002BA0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BA0 _rdata$r        ends
.rdata$r:00002BA0
.rdata$r:00002BA4 ; ===========================================================================
.rdata$r:00002BA4
.rdata$r:00002BA4 ; Segment type: Pure data
.rdata$r:00002BA4 ; Segment permissions: Read
.rdata$r:00002BA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BA4                 assume cs:_rdata$r
.rdata$r:00002BA4                 ;org 2BA4h
.rdata$r:00002BA4 ; COMDAT (pick any)
.rdata$r:00002BA4                 public ??_R13?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00002BA4 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002BA4 ??_R13?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00002BA4                                         ; DATA XREF: .rdata$r:00002B08o
.rdata$r:00002BA4                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00002BA8                 db    1
.rdata$r:00002BA9                 db    0
.rdata$r:00002BAA                 db    0
.rdata$r:00002BAB                 db    0
.rdata$r:00002BAC                 db    4
.rdata$r:00002BAD                 db    0
.rdata$r:00002BAE                 db    0
.rdata$r:00002BAF                 db    0
.rdata$r:00002BB0                 db 0FFh
.rdata$r:00002BB1                 db 0FFh
.rdata$r:00002BB2                 db 0FFh
.rdata$r:00002BB3                 db 0FFh
.rdata$r:00002BB4                 db    0
.rdata$r:00002BB5                 db    0
.rdata$r:00002BB6                 db    0
.rdata$r:00002BB7                 db    0
.rdata$r:00002BB8                 db  40h ; @
.rdata$r:00002BB9                 db    0
.rdata$r:00002BBA                 db    0
.rdata$r:00002BBB                 db    0
.rdata$r:00002BBC                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BBC _rdata$r        ends
.rdata$r:00002BBC
.data:00002BC0 ; ===========================================================================
.data:00002BC0
.data:00002BC0 ; Segment type: Pure data
.data:00002BC0 ; Segment permissions: Read/Write
.data:00002BC0 _data           segment dword public 'DATA' use32
.data:00002BC0                 assume cs:_data
.data:00002BC0                 ;org 2BC0h
.data:00002BC0 ; COMDAT (pick any)
.data:00002BC0                 public ??_R0?AUIArchiveOpenSeq@@@8
.data:00002BC0 ; struct IArchiveOpenSeq `RTTI Type Descriptor'
.data:00002BC0 ??_R0?AUIArchiveOpenSeq@@@8 dd offset ??_7type_info@@6B@
.data:00002BC0                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002BC0                                         ; .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002BC0                                         ; const type_info::`vftable'
.data:00002BC4                 align 8
.data:00002BC8 a_?auiarchiveop db '.?AUIArchiveOpenSeq@@',0
.data:00002BDE                 align 10h
.data:00002BDE _data           ends
.data:00002BDE
.rdata$r:00002BE0 ; ===========================================================================
.rdata$r:00002BE0
.rdata$r:00002BE0 ; Segment type: Pure data
.rdata$r:00002BE0 ; Segment permissions: Read
.rdata$r:00002BE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BE0                 assume cs:_rdata$r
.rdata$r:00002BE0                 ;org 2BE0h
.rdata$r:00002BE0 ; COMDAT (pick any)
.rdata$r:00002BE0                 public ??_R3IArchiveOpenSeq@@8
.rdata$r:00002BE0 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BE0 ??_R3IArchiveOpenSeq@@8 db    0         ; DATA XREF: .rdata$r:00002BBCo
.rdata$r:00002BE0                                         ; .rdata$r:00002C14o ...
.rdata$r:00002BE1                 db    0
.rdata$r:00002BE2                 db    0
.rdata$r:00002BE3                 db    0
.rdata$r:00002BE4                 db    0
.rdata$r:00002BE5                 db    0
.rdata$r:00002BE6                 db    0
.rdata$r:00002BE7                 db    0
.rdata$r:00002BE8                 db    2
.rdata$r:00002BE9                 db    0
.rdata$r:00002BEA                 db    0
.rdata$r:00002BEB                 db    0
.rdata$r:00002BEC                 dd offset ??_R2IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00002BEC _rdata$r        ends
.rdata$r:00002BEC
.rdata$r:00002BF0 ; ===========================================================================
.rdata$r:00002BF0
.rdata$r:00002BF0 ; Segment type: Pure data
.rdata$r:00002BF0 ; Segment permissions: Read
.rdata$r:00002BF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BF0                 assume cs:_rdata$r
.rdata$r:00002BF0                 ;org 2BF0h
.rdata$r:00002BF0 ; COMDAT (pick any)
.rdata$r:00002BF0                 public ??_R2IArchiveOpenSeq@@8
.rdata$r:00002BF0 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00002BF0 ??_R2IArchiveOpenSeq@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00002BF0                                         ; DATA XREF: .rdata$r:00002BECo
.rdata$r:00002BF0                                         ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002BF4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002BF8                 db    0
.rdata$r:00002BF9                 align 4
.rdata$r:00002BF9 _rdata$r        ends
.rdata$r:00002BF9
.rdata$r:00002BFC ; ===========================================================================
.rdata$r:00002BFC
.rdata$r:00002BFC ; Segment type: Pure data
.rdata$r:00002BFC ; Segment permissions: Read
.rdata$r:00002BFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BFC                 assume cs:_rdata$r
.rdata$r:00002BFC                 ;org 2BFCh
.rdata$r:00002BFC ; COMDAT (pick any)
.rdata$r:00002BFC                 public ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00002BFC ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002BFC ??_R1A@?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00002BFC                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Array'o
.rdata$r:00002BFC                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00002C00                 db    1
.rdata$r:00002C01                 db    0
.rdata$r:00002C02                 db    0
.rdata$r:00002C03                 db    0
.rdata$r:00002C04                 db    0
.rdata$r:00002C05                 db    0
.rdata$r:00002C06                 db    0
.rdata$r:00002C07                 db    0
.rdata$r:00002C08                 db 0FFh
.rdata$r:00002C09                 db 0FFh
.rdata$r:00002C0A                 db 0FFh
.rdata$r:00002C0B                 db 0FFh
.rdata$r:00002C0C                 db    0
.rdata$r:00002C0D                 db    0
.rdata$r:00002C0E                 db    0
.rdata$r:00002C0F                 db    0
.rdata$r:00002C10                 db  40h ; @
.rdata$r:00002C11                 db    0
.rdata$r:00002C12                 db    0
.rdata$r:00002C13                 db    0
.rdata$r:00002C14                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C14 _rdata$r        ends
.rdata$r:00002C14
.rdata$r:00002C18 ; ===========================================================================
.rdata$r:00002C18
.rdata$r:00002C18 ; Segment type: Pure data
.rdata$r:00002C18 ; Segment permissions: Read
.rdata$r:00002C18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C18                 assume cs:_rdata$r
.rdata$r:00002C18                 ;org 2C18h
.rdata$r:00002C18 ; COMDAT (pick any)
.rdata$r:00002C18                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00002C18 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00002C18 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002C18                                         ; DATA XREF: .rdata$r:00002B0Co
.rdata$r:00002C18                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002C1C                 align 10h
.rdata$r:00002C20                 db    4
.rdata$r:00002C21                 db    0
.rdata$r:00002C22                 db    0
.rdata$r:00002C23                 db    0
.rdata$r:00002C24                 db 0FFh
.rdata$r:00002C25                 db 0FFh
.rdata$r:00002C26                 db 0FFh
.rdata$r:00002C27                 db 0FFh
.rdata$r:00002C28                 db    0
.rdata$r:00002C29                 db    0
.rdata$r:00002C2A                 db    0
.rdata$r:00002C2B                 db    0
.rdata$r:00002C2C                 db  42h ; B
.rdata$r:00002C2D                 db    0
.rdata$r:00002C2E                 db    0
.rdata$r:00002C2F                 db    0
.rdata$r:00002C30                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C30 _rdata$r        ends
.rdata$r:00002C30
.rdata$r:00002C34 ; ===========================================================================
.rdata$r:00002C34
.rdata$r:00002C34 ; Segment type: Pure data
.rdata$r:00002C34 ; Segment permissions: Read
.rdata$r:00002C34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C34                 assume cs:_rdata$r
.rdata$r:00002C34                 ;org 2C34h
.rdata$r:00002C34 ; COMDAT (pick any)
.rdata$r:00002C34                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00002C34 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00002C34 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002C34                                         ; DATA XREF: .rdata$r:00002B10o
.rdata$r:00002C34                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002C38                 db    0
.rdata$r:00002C39                 db    0
.rdata$r:00002C3A                 db    0
.rdata$r:00002C3B                 db    0
.rdata$r:00002C3C                 db    8
.rdata$r:00002C3D                 db    0
.rdata$r:00002C3E                 db    0
.rdata$r:00002C3F                 db    0
.rdata$r:00002C40                 db 0FFh
.rdata$r:00002C41                 db 0FFh
.rdata$r:00002C42                 db 0FFh
.rdata$r:00002C43                 db 0FFh
.rdata$r:00002C44                 db    0
.rdata$r:00002C45                 db    0
.rdata$r:00002C46                 db    0
.rdata$r:00002C47                 db    0
.rdata$r:00002C48                 db  40h ; @
.rdata$r:00002C49                 db    0
.rdata$r:00002C4A                 db    0
.rdata$r:00002C4B                 db    0
.rdata$r:00002C4C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C4C _rdata$r        ends
.rdata$r:00002C4C
.rdata$r:00002C50 ; ===========================================================================
.rdata$r:00002C50
.rdata$r:00002C50 ; Segment type: Pure data
.rdata$r:00002C50 ; Segment permissions: Read
.rdata$r:00002C50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C50                 assume cs:_rdata$r
.rdata$r:00002C50                 ;org 2C50h
.rdata$r:00002C50 ; COMDAT (pick any)
.rdata$r:00002C50                 public ??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@
.rdata$r:00002C50 ; const NArchive::NLzma::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata$r:00002C50 ??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ db    0
.rdata$r:00002C50                                         ; DATA XREF: .rdata:00002A38o
.rdata$r:00002C51                 db    0
.rdata$r:00002C52                 db    0
.rdata$r:00002C53                 db    0
.rdata$r:00002C54                 db    4
.rdata$r:00002C55                 db    0
.rdata$r:00002C56                 db    0
.rdata$r:00002C57                 db    0
.rdata$r:00002C58                 db    0
.rdata$r:00002C59                 db    0
.rdata$r:00002C5A                 db    0
.rdata$r:00002C5B                 db    0
.rdata$r:00002C5C                 dd offset ??_R0?AVCHandler@NLzma@NArchive@@@8 ; NArchive::NLzma::CHandler `RTTI Type Descriptor'
.rdata$r:00002C60                 dd offset ??_R3CHandler@NLzma@NArchive@@8 ; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C60 _rdata$r        ends
.rdata$r:00002C60
.text:00002C64 ; ===========================================================================
.text:00002C64
.text:00002C64 ; Segment type: Pure code
.text:00002C64 ; Segment permissions: Read/Execute
.text:00002C64 _text           segment para public 'CODE' use32
.text:00002C64                 assume cs:_text
.text:00002C64                 ;org 2C64h
.text:00002C64 ; COMDAT (pick any)
.text:00002C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C64
.text:00002C64 ; =============== S U B R O U T I N E =======================================
.text:00002C64
.text:00002C64 ; Attributes: bp-based frame
.text:00002C64
.text:00002C64 ; __int32 __stdcall NArchive::NLzma::CHandler::QueryInterface(NArchive::NLzma::CHandler *this, const struct _GUID *Buf1, void **)
.text:00002C64                 public ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00002C64 ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002C64                                         ; CODE XREF: [thunk]:NArchive::NLzma::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00002C64                                         ; DATA XREF: .rdata:const NArchive::NLzma::CHandler::`vftable'{for `IInArchive'}o
.text:00002C64
.text:00002C64 var_4           = dword ptr -4
.text:00002C64 this            = dword ptr  8
.text:00002C64 Buf1            = dword ptr  0Ch
.text:00002C64 arg_8           = dword ptr  10h
.text:00002C64
.text:00002C64                 push    ebp
.text:00002C65                 mov     ebp, esp
.text:00002C67                 push    ecx
.text:00002C68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C6F                 mov     eax, [ebp+arg_8]
.text:00002C72                 mov     dword ptr [eax], 0
.text:00002C78                 push    offset _IID_IUnknown ; Buf2
.text:00002C7D                 mov     ecx, [ebp+Buf1]
.text:00002C80                 push    ecx             ; Buf1
.text:00002C81                 call    ___@8           ; __(x,x)
.text:00002C86                 test    eax, eax
.text:00002C88                 jz      short loc_2C94
.text:00002C8A                 mov     edx, [ebp+arg_8]
.text:00002C8D                 mov     eax, [ebp+this]
.text:00002C90                 mov     [edx], eax
.text:00002C92                 jmp     short loc_2CEB
.text:00002C94 ; ---------------------------------------------------------------------------
.text:00002C94
.text:00002C94 loc_2C94:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+24j
.text:00002C94                 push    offset _IID_IInArchive ; Buf2
.text:00002C99                 mov     ecx, [ebp+Buf1]
.text:00002C9C                 push    ecx             ; Buf1
.text:00002C9D                 call    ___@8           ; __(x,x)
.text:00002CA2                 test    eax, eax
.text:00002CA4                 jz      short loc_2CB0
.text:00002CA6                 mov     edx, [ebp+arg_8]
.text:00002CA9                 mov     eax, [ebp+this]
.text:00002CAC                 mov     [edx], eax
.text:00002CAE                 jmp     short loc_2CEB
.text:00002CB0 ; ---------------------------------------------------------------------------
.text:00002CB0
.text:00002CB0 loc_2CB0:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+40j
.text:00002CB0                 push    offset _IID_IArchiveOpenSeq ; Buf2
.text:00002CB5                 mov     ecx, [ebp+Buf1]
.text:00002CB8                 push    ecx             ; Buf1
.text:00002CB9                 call    ___@8           ; __(x,x)
.text:00002CBE                 test    eax, eax
.text:00002CC0                 jz      short loc_2CE4
.text:00002CC2                 cmp     [ebp+this], 0
.text:00002CC6                 jz      short loc_2CD3
.text:00002CC8                 mov     edx, [ebp+this]
.text:00002CCB                 add     edx, 4
.text:00002CCE                 mov     [ebp+var_4], edx
.text:00002CD1                 jmp     short loc_2CDA
.text:00002CD3 ; ---------------------------------------------------------------------------
.text:00002CD3
.text:00002CD3 loc_2CD3:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+62j
.text:00002CD3                 mov     [ebp+var_4], 0
.text:00002CDA
.text:00002CDA loc_2CDA:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+6Dj
.text:00002CDA                 mov     eax, [ebp+arg_8]
.text:00002CDD                 mov     ecx, [ebp+var_4]
.text:00002CE0                 mov     [eax], ecx
.text:00002CE2                 jmp     short loc_2CEB
.text:00002CE4 ; ---------------------------------------------------------------------------
.text:00002CE4
.text:00002CE4 loc_2CE4:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+5Cj
.text:00002CE4                 mov     eax, 80004002h
.text:00002CE9                 jmp     short loc_2CFC
.text:00002CEB ; ---------------------------------------------------------------------------
.text:00002CEB
.text:00002CEB loc_2CEB:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+2Ej
.text:00002CEB                                         ; NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:00002CEB                 mov     edx, [ebp+this]
.text:00002CEE                 mov     eax, [edx+8]
.text:00002CF1                 add     eax, 1
.text:00002CF4                 mov     ecx, [ebp+this]
.text:00002CF7                 mov     [ecx+8], eax
.text:00002CFA                 xor     eax, eax
.text:00002CFC
.text:00002CFC loc_2CFC:                               ; CODE XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)+85j
.text:00002CFC                 add     esp, 4
.text:00002CFF                 cmp     ebp, esp
.text:00002D01                 call    __RTC_CheckEsp
.text:00002D06                 mov     esp, ebp
.text:00002D08                 pop     ebp
.text:00002D09                 retn    0Ch
.text:00002D09 ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002D09
.text:00002D09 _text           ends
.text:00002D09
.text:00002D0C ; ===========================================================================
.text:00002D0C
.text:00002D0C ; Segment type: Pure code
.text:00002D0C ; Segment permissions: Read/Execute
.text:00002D0C _text           segment para public 'CODE' use32
.text:00002D0C                 assume cs:_text
.text:00002D0C                 ;org 2D0Ch
.text:00002D0C ; COMDAT (pick any)
.text:00002D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D0C
.text:00002D0C ; =============== S U B R O U T I N E =======================================
.text:00002D0C
.text:00002D0C ; Attributes: bp-based frame
.text:00002D0C
.text:00002D0C ; unsigned __int32 __stdcall NArchive::NLzma::CHandler::AddRef(NArchive::NLzma::CHandler *this)
.text:00002D0C                 public ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ
.text:00002D0C ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ proc near
.text:00002D0C                                         ; CODE XREF: [thunk]:NArchive::NLzma::CHandler::AddRef`adjustor{4}' (void)+5j
.text:00002D0C                                         ; DATA XREF: .rdata:00002A54o
.text:00002D0C
.text:00002D0C var_4           = dword ptr -4
.text:00002D0C this            = dword ptr  8
.text:00002D0C
.text:00002D0C                 push    ebp
.text:00002D0D                 mov     ebp, esp
.text:00002D0F                 push    ecx
.text:00002D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D17                 mov     eax, [ebp+this]
.text:00002D1A                 mov     ecx, [eax+8]
.text:00002D1D                 add     ecx, 1
.text:00002D20                 mov     [ebp+var_4], ecx
.text:00002D23                 mov     edx, [ebp+this]
.text:00002D26                 mov     eax, [ebp+var_4]
.text:00002D29                 mov     [edx+8], eax
.text:00002D2C                 mov     eax, [ebp+var_4]
.text:00002D2F                 mov     esp, ebp
.text:00002D31                 pop     ebp
.text:00002D32                 retn    4
.text:00002D32 ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ endp
.text:00002D32
.text:00002D32 ; ---------------------------------------------------------------------------
.text:00002D35                 align 4
.text:00002D35 _text           ends
.text:00002D35
.text:00002D38 ; ===========================================================================
.text:00002D38
.text:00002D38 ; Segment type: Pure code
.text:00002D38 ; Segment permissions: Read/Execute
.text:00002D38 _text           segment para public 'CODE' use32
.text:00002D38                 assume cs:_text
.text:00002D38                 ;org 2D38h
.text:00002D38 ; COMDAT (pick any)
.text:00002D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D38
.text:00002D38 ; =============== S U B R O U T I N E =======================================
.text:00002D38
.text:00002D38 ; Attributes: bp-based frame
.text:00002D38
.text:00002D38 ; unsigned __int32 __stdcall NArchive::NLzma::CHandler::Release(NArchive::NLzma::CHandler *this)
.text:00002D38                 public ?Release@CHandler@NLzma@NArchive@@UAGKXZ
.text:00002D38 ?Release@CHandler@NLzma@NArchive@@UAGKXZ proc near
.text:00002D38                                         ; CODE XREF: [thunk]:NArchive::NLzma::CHandler::Release`adjustor{4}' (void)+5j
.text:00002D38                                         ; DATA XREF: .rdata:00002A58o
.text:00002D38
.text:00002D38 var_10          = dword ptr -10h
.text:00002D38 var_C           = dword ptr -0Ch
.text:00002D38 var_8           = dword ptr -8
.text:00002D38 var_4           = dword ptr -4
.text:00002D38 this            = dword ptr  8
.text:00002D38
.text:00002D38                 push    ebp
.text:00002D39                 mov     ebp, esp
.text:00002D3B                 sub     esp, 10h
.text:00002D3E                 mov     eax, 0CCCCCCCCh
.text:00002D43                 mov     [ebp+var_10], eax
.text:00002D46                 mov     [ebp+var_C], eax
.text:00002D49                 mov     [ebp+var_8], eax
.text:00002D4C                 mov     [ebp+var_4], eax
.text:00002D4F                 mov     eax, [ebp+this]
.text:00002D52                 mov     ecx, [eax+8]
.text:00002D55                 sub     ecx, 1
.text:00002D58                 mov     [ebp+var_C], ecx
.text:00002D5B                 mov     edx, [ebp+this]
.text:00002D5E                 mov     eax, [ebp+var_C]
.text:00002D61                 mov     [edx+8], eax
.text:00002D64                 cmp     [ebp+var_C], 0
.text:00002D68                 jz      short loc_2D72
.text:00002D6A                 mov     ecx, [ebp+this]
.text:00002D6D                 mov     eax, [ecx+8]
.text:00002D70                 jmp     short loc_2D9C
.text:00002D72 ; ---------------------------------------------------------------------------
.text:00002D72
.text:00002D72 loc_2D72:                               ; CODE XREF: NArchive::NLzma::CHandler::Release(void)+30j
.text:00002D72                 mov     edx, [ebp+this]
.text:00002D75                 mov     [ebp+var_8], edx
.text:00002D78                 mov     eax, [ebp+var_8]
.text:00002D7B                 mov     [ebp+var_4], eax
.text:00002D7E                 cmp     [ebp+var_4], 0
.text:00002D82                 jz      short loc_2D93
.text:00002D84                 push    1
.text:00002D86                 mov     ecx, [ebp+var_4]
.text:00002D89                 call    ??_GCHandler@NLzma@NArchive@@QAEPAXI@Z ; NArchive::NLzma::CHandler::`scalar deleting destructor'(uint)
.text:00002D8E                 mov     [ebp+var_10], eax
.text:00002D91                 jmp     short loc_2D9A
.text:00002D93 ; ---------------------------------------------------------------------------
.text:00002D93
.text:00002D93 loc_2D93:                               ; CODE XREF: NArchive::NLzma::CHandler::Release(void)+4Aj
.text:00002D93                 mov     [ebp+var_10], 0
.text:00002D9A
.text:00002D9A loc_2D9A:                               ; CODE XREF: NArchive::NLzma::CHandler::Release(void)+59j
.text:00002D9A                 xor     eax, eax
.text:00002D9C
.text:00002D9C loc_2D9C:                               ; CODE XREF: NArchive::NLzma::CHandler::Release(void)+38j
.text:00002D9C                 add     esp, 10h
.text:00002D9F                 cmp     ebp, esp
.text:00002DA1                 call    __RTC_CheckEsp
.text:00002DA6                 mov     esp, ebp
.text:00002DA8                 pop     ebp
.text:00002DA9                 retn    4
.text:00002DA9 ?Release@CHandler@NLzma@NArchive@@UAGKXZ endp
.text:00002DA9
.text:00002DA9 _text           ends
.text:00002DA9
.text:00002DAC ; ===========================================================================
.text:00002DAC
.text:00002DAC ; Segment type: Pure code
.text:00002DAC ; Segment permissions: Read/Execute
.text:00002DAC _text           segment para public 'CODE' use32
.text:00002DAC                 assume cs:_text
.text:00002DAC                 ;org 2DACh
.text:00002DAC ; COMDAT (pick any)
.text:00002DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DAC
.text:00002DAC ; =============== S U B R O U T I N E =======================================
.text:00002DAC
.text:00002DAC ; Attributes: bp-based frame
.text:00002DAC
.text:00002DAC ; public: void * __thiscall NArchive::NLzma::CHandler::`scalar deleting destructor'(unsigned int)
.text:00002DAC                 public ??_GCHandler@NLzma@NArchive@@QAEPAXI@Z
.text:00002DAC ??_GCHandler@NLzma@NArchive@@QAEPAXI@Z proc near
.text:00002DAC                                         ; CODE XREF: NArchive::NLzma::CHandler::Release(void)+51p
.text:00002DAC
.text:00002DAC var_4           = dword ptr -4
.text:00002DAC arg_0           = dword ptr  8
.text:00002DAC
.text:00002DAC                 push    ebp
.text:00002DAD                 mov     ebp, esp
.text:00002DAF                 push    ecx
.text:00002DB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DB7                 mov     [ebp+var_4], ecx
.text:00002DBA                 mov     ecx, [ebp+var_4] ; this
.text:00002DBD                 call    ??1CHandler@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::CHandler::~CHandler(void)
.text:00002DC2                 mov     eax, [ebp+arg_0]
.text:00002DC5                 and     eax, 1
.text:00002DC8                 jz      short loc_2DD6
.text:00002DCA                 mov     ecx, [ebp+var_4]
.text:00002DCD                 push    ecx             ; void *
.text:00002DCE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002DD3                 add     esp, 4
.text:00002DD6
.text:00002DD6 loc_2DD6:                               ; CODE XREF: NArchive::NLzma::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00002DD6                 mov     eax, [ebp+var_4]
.text:00002DD9                 add     esp, 4
.text:00002DDC                 cmp     ebp, esp
.text:00002DDE                 call    __RTC_CheckEsp
.text:00002DE3                 mov     esp, ebp
.text:00002DE5                 pop     ebp
.text:00002DE6                 retn    4
.text:00002DE6 ??_GCHandler@NLzma@NArchive@@QAEPAXI@Z endp
.text:00002DE6
.text:00002DE6 ; ---------------------------------------------------------------------------
.text:00002DE9                 align 4
.text:00002DE9 _text           ends
.text:00002DE9
.text:00002DEC ; ===========================================================================
.text:00002DEC
.text:00002DEC ; Segment type: Pure code
.text:00002DEC ; Segment permissions: Read/Execute
.text:00002DEC _text           segment para public 'CODE' use32
.text:00002DEC                 assume cs:_text
.text:00002DEC                 ;org 2DECh
.text:00002DEC ; COMDAT (pick any)
.text:00002DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DEC
.text:00002DEC ; =============== S U B R O U T I N E =======================================
.text:00002DEC
.text:00002DEC ; Attributes: bp-based frame
.text:00002DEC
.text:00002DEC ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:00002DEC                 public ??0IInArchive@@QAE@XZ
.text:00002DEC ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NLzma::CHandler::CHandler(bool)+30p
.text:00002DEC
.text:00002DEC var_4           = dword ptr -4
.text:00002DEC
.text:00002DEC                 push    ebp
.text:00002DED                 mov     ebp, esp
.text:00002DEF                 push    ecx
.text:00002DF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DF7                 mov     [ebp+var_4], ecx
.text:00002DFA                 mov     ecx, [ebp+var_4]
.text:00002DFD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E02                 mov     eax, [ebp+var_4]
.text:00002E05                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:00002E0B                 mov     eax, [ebp+var_4]
.text:00002E0E                 add     esp, 4
.text:00002E11                 cmp     ebp, esp
.text:00002E13                 call    __RTC_CheckEsp
.text:00002E18                 mov     esp, ebp
.text:00002E1A                 pop     ebp
.text:00002E1B                 retn
.text:00002E1B ??0IInArchive@@QAE@XZ endp
.text:00002E1B
.text:00002E1B _text           ends
.text:00002E1B
.rdata:00002E1C ; ===========================================================================
.rdata:00002E1C
.rdata:00002E1C ; Segment type: Pure data
.rdata:00002E1C ; Segment permissions: Read
.rdata:00002E1C _rdata          segment dword public 'DATA' use32
.rdata:00002E1C                 assume cs:_rdata
.rdata:00002E1C                 ;org 2E1Ch
.rdata:00002E1C ; COMDAT (pick largest)
.rdata:00002E1C                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00002E20                 public ??_7IInArchive@@6B@
.rdata:00002E20 ; const IInArchive::`vftable'
.rdata:00002E20 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00002E20                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00002E24                 dd offset __purecall
.rdata:00002E28                 dd offset __purecall
.rdata:00002E2C                 dd offset __purecall
.rdata:00002E30                 dd offset __purecall
.rdata:00002E34                 dd offset __purecall
.rdata:00002E38                 dd offset __purecall
.rdata:00002E3C                 dd offset __purecall
.rdata:00002E40                 dd offset __purecall
.rdata:00002E44                 dd offset __purecall
.rdata:00002E48                 dd offset __purecall
.rdata:00002E4C                 dd offset __purecall
.rdata:00002E50                 dd offset __purecall
.rdata:00002E50 _rdata          ends
.rdata:00002E50
.rdata$r:00002E54 ; ===========================================================================
.rdata$r:00002E54
.rdata$r:00002E54 ; Segment type: Pure data
.rdata$r:00002E54 ; Segment permissions: Read
.rdata$r:00002E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E54                 assume cs:_rdata$r
.rdata$r:00002E54                 ;org 2E54h
.rdata$r:00002E54 ; COMDAT (pick any)
.rdata$r:00002E54                 public ??_R4IInArchive@@6B@
.rdata$r:00002E54 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:00002E54 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:00002E1Co
.rdata$r:00002E55                 db    0
.rdata$r:00002E56                 db    0
.rdata$r:00002E57                 db    0
.rdata$r:00002E58                 db    0
.rdata$r:00002E59                 db    0
.rdata$r:00002E5A                 db    0
.rdata$r:00002E5B                 db    0
.rdata$r:00002E5C                 db    0
.rdata$r:00002E5D                 db    0
.rdata$r:00002E5E                 db    0
.rdata$r:00002E5F                 db    0
.rdata$r:00002E60                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:00002E64                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E64 _rdata$r        ends
.rdata$r:00002E64
.text:00002E68 ; ===========================================================================
.text:00002E68
.text:00002E68 ; Segment type: Pure code
.text:00002E68 ; Segment permissions: Read/Execute
.text:00002E68 _text           segment para public 'CODE' use32
.text:00002E68                 assume cs:_text
.text:00002E68                 ;org 2E68h
.text:00002E68 ; COMDAT (pick any)
.text:00002E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E68
.text:00002E68 ; =============== S U B R O U T I N E =======================================
.text:00002E68
.text:00002E68 ; Attributes: bp-based frame
.text:00002E68
.text:00002E68 ; _DWORD __thiscall IArchiveOpenSeq::IArchiveOpenSeq(IArchiveOpenSeq *__hidden this)
.text:00002E68                 public ??0IArchiveOpenSeq@@QAE@XZ
.text:00002E68 ??0IArchiveOpenSeq@@QAE@XZ proc near    ; CODE XREF: NArchive::NLzma::CHandler::CHandler(bool)+3Bp
.text:00002E68
.text:00002E68 var_4           = dword ptr -4
.text:00002E68
.text:00002E68                 push    ebp
.text:00002E69                 mov     ebp, esp
.text:00002E6B                 push    ecx
.text:00002E6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E73                 mov     [ebp+var_4], ecx
.text:00002E76                 mov     ecx, [ebp+var_4]
.text:00002E79                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002E7E                 mov     eax, [ebp+var_4]
.text:00002E81                 mov     dword ptr [eax], offset ??_7IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`vftable'
.text:00002E87                 mov     eax, [ebp+var_4]
.text:00002E8A                 add     esp, 4
.text:00002E8D                 cmp     ebp, esp
.text:00002E8F                 call    __RTC_CheckEsp
.text:00002E94                 mov     esp, ebp
.text:00002E96                 pop     ebp
.text:00002E97                 retn
.text:00002E97 ??0IArchiveOpenSeq@@QAE@XZ endp
.text:00002E97
.text:00002E97 _text           ends
.text:00002E97
.rdata:00002E98 ; ===========================================================================
.rdata:00002E98
.rdata:00002E98 ; Segment type: Pure data
.rdata:00002E98 ; Segment permissions: Read
.rdata:00002E98 _rdata          segment dword public 'DATA' use32
.rdata:00002E98                 assume cs:_rdata
.rdata:00002E98                 ;org 2E98h
.rdata:00002E98 ; COMDAT (pick largest)
.rdata:00002E98                 dd offset ??_R4IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata:00002E9C                 public ??_7IArchiveOpenSeq@@6B@
.rdata:00002E9C ; const IArchiveOpenSeq::`vftable'
.rdata:00002E9C ??_7IArchiveOpenSeq@@6B@ dd offset __purecall
.rdata:00002E9C                                         ; DATA XREF: IArchiveOpenSeq::IArchiveOpenSeq(void)+19o
.rdata:00002EA0                 dd offset __purecall
.rdata:00002EA4                 dd offset __purecall
.rdata:00002EA8                 dd offset __purecall
.rdata:00002EA8 _rdata          ends
.rdata:00002EA8
.rdata$r:00002EAC ; ===========================================================================
.rdata$r:00002EAC
.rdata$r:00002EAC ; Segment type: Pure data
.rdata$r:00002EAC ; Segment permissions: Read
.rdata$r:00002EAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002EAC                 assume cs:_rdata$r
.rdata$r:00002EAC                 ;org 2EACh
.rdata$r:00002EAC ; COMDAT (pick any)
.rdata$r:00002EAC                 public ??_R4IArchiveOpenSeq@@6B@
.rdata$r:00002EAC ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata$r:00002EAC ??_R4IArchiveOpenSeq@@6B@ db    0       ; DATA XREF: .rdata:00002E98o
.rdata$r:00002EAD                 db    0
.rdata$r:00002EAE                 db    0
.rdata$r:00002EAF                 db    0
.rdata$r:00002EB0                 db    0
.rdata$r:00002EB1                 db    0
.rdata$r:00002EB2                 db    0
.rdata$r:00002EB3                 db    0
.rdata$r:00002EB4                 db    0
.rdata$r:00002EB5                 db    0
.rdata$r:00002EB6                 db    0
.rdata$r:00002EB7                 db    0
.rdata$r:00002EB8                 dd offset ??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00002EBC                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002EBC _rdata$r        ends
.rdata$r:00002EBC
.text:00002EC0 ; ===========================================================================
.text:00002EC0
.text:00002EC0 ; Segment type: Pure code
.text:00002EC0 ; Segment permissions: Read/Execute
.text:00002EC0 _text           segment para public 'CODE' use32
.text:00002EC0                 assume cs:_text
.text:00002EC0                 ;org 2EC0h
.text:00002EC0 ; COMDAT (pick any)
.text:00002EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002EC0
.text:00002EC0 ; =============== S U B R O U T I N E =======================================
.text:00002EC0
.text:00002EC0 ; Attributes: bp-based frame
.text:00002EC0
.text:00002EC0 ; _DWORD __thiscall NArchive::NLzma::CHandler::~CHandler(NArchive::NLzma::CHandler *__hidden this)
.text:00002EC0                 public ??1CHandler@NLzma@NArchive@@QAE@XZ
.text:00002EC0 ??1CHandler@NLzma@NArchive@@QAE@XZ proc near
.text:00002EC0                                         ; CODE XREF: NArchive::NLzma::CHandler::`scalar deleting destructor'(uint)+11p
.text:00002EC0
.text:00002EC0 var_10          = dword ptr -10h
.text:00002EC0 var_C           = dword ptr -0Ch
.text:00002EC0 var_4           = dword ptr -4
.text:00002EC0
.text:00002EC0                 push    ebp
.text:00002EC1                 mov     ebp, esp
.text:00002EC3                 push    0FFFFFFFFh
.text:00002EC5                 push    offset __ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ
.text:00002ECA                 mov     eax, large fs:0
.text:00002ED0                 push    eax
.text:00002ED1                 push    ecx
.text:00002ED2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002ED9                 mov     eax, dword ptr ds:___security_cookie
.text:00002EDE                 xor     eax, ebp
.text:00002EE0                 push    eax
.text:00002EE1                 lea     eax, [ebp+var_C]
.text:00002EE4                 mov     large fs:0, eax
.text:00002EEA                 mov     [ebp+var_10], ecx
.text:00002EED                 mov     [ebp+var_4], 0
.text:00002EF4                 mov     ecx, [ebp+var_10]
.text:00002EF7                 add     ecx, 28h ; '('
.text:00002EFA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002EFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F06                 mov     ecx, [ebp+var_10]
.text:00002F09                 add     ecx, 24h ; '$'
.text:00002F0C                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00002F11                 mov     ecx, [ebp+var_C]
.text:00002F14                 mov     large fs:0, ecx
.text:00002F1B                 pop     ecx
.text:00002F1C                 add     esp, 10h
.text:00002F1F                 cmp     ebp, esp
.text:00002F21                 call    __RTC_CheckEsp
.text:00002F26                 mov     esp, ebp
.text:00002F28                 pop     ebp
.text:00002F29                 retn
.text:00002F29 ??1CHandler@NLzma@NArchive@@QAE@XZ endp
.text:00002F29
.text:00002F29 ; ---------------------------------------------------------------------------
.text:00002F2A                 align 4
.text:00002F2A _text           ends
.text:00002F2A
.text$x:00002F2C ; ===========================================================================
.text$x:00002F2C
.text$x:00002F2C ; Segment type: Pure code
.text$x:00002F2C ; Segment permissions: Read/Execute
.text$x:00002F2C _text$x         segment para public 'CODE' use32
.text$x:00002F2C                 assume cs:_text$x
.text$x:00002F2C                 ;org 2F2Ch
.text$x:00002F2C ; COMDAT (pick associative to section at 2EC0)
.text$x:00002F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F2C
.text$x:00002F2C ; =============== S U B R O U T I N E =======================================
.text$x:00002F2C
.text$x:00002F2C
.text$x:00002F2C __unwindfunclet$??1CHandler@NLzma@NArchive@@QAE@XZ$0 proc near
.text$x:00002F2C                                         ; DATA XREF: .xdata$x:00002F58o
.text$x:00002F2C                 mov     ecx, [ebp-10h]
.text$x:00002F2F                 add     ecx, 24h ; '$'
.text$x:00002F32                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002F32 __unwindfunclet$??1CHandler@NLzma@NArchive@@QAE@XZ$0 endp
.text$x:00002F32
.text$x:00002F37
.text$x:00002F37 ; =============== S U B R O U T I N E =======================================
.text$x:00002F37
.text$x:00002F37
.text$x:00002F37 __ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ proc near
.text$x:00002F37                                         ; DATA XREF: NArchive::NLzma::CHandler::~CHandler(void)+5o
.text$x:00002F37
.text$x:00002F37 arg_4           = dword ptr  8
.text$x:00002F37
.text$x:00002F37                 mov     edx, [esp+arg_4]
.text$x:00002F3B                 lea     eax, [edx+0Ch]
.text$x:00002F3E                 mov     ecx, [edx-8]
.text$x:00002F41                 xor     ecx, eax
.text$x:00002F43                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F48                 mov     eax, offset __ehfuncinfo$??1CHandler@NLzma@NArchive@@QAE@XZ
.text$x:00002F4D                 jmp     ___CxxFrameHandler3
.text$x:00002F4D __ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ endp
.text$x:00002F4D
.text$x:00002F4D ; ---------------------------------------------------------------------------
.text$x:00002F52                 align 4
.text$x:00002F52 _text$x         ends
.text$x:00002F52
.xdata$x:00002F54 ; ===========================================================================
.xdata$x:00002F54
.xdata$x:00002F54 ; Segment type: Pure data
.xdata$x:00002F54 ; Segment permissions: Read
.xdata$x:00002F54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002F54                 assume cs:_xdata$x
.xdata$x:00002F54                 ;org 2F54h
.xdata$x:00002F54 ; COMDAT (pick associative to section at 2EC0)
.xdata$x:00002F54 __unwindtable$??1CHandler@NLzma@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002F54                                         ; DATA XREF: .xdata$x:00002F64o
.xdata$x:00002F55                 db 0FFh
.xdata$x:00002F56                 db 0FFh
.xdata$x:00002F57                 db 0FFh
.xdata$x:00002F58                 dd offset __unwindfunclet$??1CHandler@NLzma@NArchive@@QAE@XZ$0
.xdata$x:00002F5C __ehfuncinfo$??1CHandler@NLzma@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002F5C                                         ; DATA XREF: __ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ+11o
.xdata$x:00002F5D                 db    5
.xdata$x:00002F5E                 db  93h ; ô
.xdata$x:00002F5F                 db  19h
.xdata$x:00002F60                 db    1
.xdata$x:00002F61                 db    0
.xdata$x:00002F62                 db    0
.xdata$x:00002F63                 db    0
.xdata$x:00002F64                 dd offset __unwindtable$??1CHandler@NLzma@NArchive@@QAE@XZ
.xdata$x:00002F68                 db    0
.xdata$x:00002F69                 db    0
.xdata$x:00002F6A                 db    0
.xdata$x:00002F6B                 db    0
.xdata$x:00002F6C                 db    0
.xdata$x:00002F6D                 db    0
.xdata$x:00002F6E                 db    0
.xdata$x:00002F6F                 db    0
.xdata$x:00002F70                 db    0
.xdata$x:00002F71                 db    0
.xdata$x:00002F72                 db    0
.xdata$x:00002F73                 db    0
.xdata$x:00002F74                 db    0
.xdata$x:00002F75                 db    0
.xdata$x:00002F76                 db    0
.xdata$x:00002F77                 db    0
.xdata$x:00002F78                 db    0
.xdata$x:00002F79                 db    0
.xdata$x:00002F7A                 db    0
.xdata$x:00002F7B                 db    0
.xdata$x:00002F7C                 db    1
.xdata$x:00002F7D                 db    0
.xdata$x:00002F7E                 db    0
.xdata$x:00002F7F                 db    0
.xdata$x:00002F7F _xdata$x        ends
.xdata$x:00002F7F
.text:00002F80 ; ===========================================================================
.text:00002F80
.text:00002F80 ; Segment type: Pure code
.text:00002F80 ; Segment permissions: Read/Execute
.text:00002F80 _text           segment para public 'CODE' use32
.text:00002F80                 assume cs:_text
.text:00002F80                 ;org 2F80h
.text:00002F80 ; COMDAT (pick any)
.text:00002F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F80
.text:00002F80 ; =============== S U B R O U T I N E =======================================
.text:00002F80
.text:00002F80 ; Attributes: bp-based frame
.text:00002F80
.text:00002F80 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00002F80                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00002F80 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00002F80                                         ; CODE XREF: NArchive::NLzma::CHandler::CHandler(bool)+76p
.text:00002F80
.text:00002F80 var_4           = dword ptr -4
.text:00002F80
.text:00002F80                 push    ebp
.text:00002F81                 mov     ebp, esp
.text:00002F83                 push    ecx
.text:00002F84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F8B                 mov     [ebp+var_4], ecx
.text:00002F8E                 mov     eax, [ebp+var_4]
.text:00002F91                 mov     dword ptr [eax], 0
.text:00002F97                 mov     eax, [ebp+var_4]
.text:00002F9A                 mov     esp, ebp
.text:00002F9C                 pop     ebp
.text:00002F9D                 retn
.text:00002F9D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00002F9D
.text:00002F9D ; ---------------------------------------------------------------------------
.text:00002F9E                 align 10h
.text:00002F9E _text           ends
.text:00002F9E
.text:00002FA0 ; ===========================================================================
.text:00002FA0
.text:00002FA0 ; Segment type: Pure code
.text:00002FA0 ; Segment permissions: Read/Execute
.text:00002FA0 _text           segment para public 'CODE' use32
.text:00002FA0                 assume cs:_text
.text:00002FA0                 ;org 2FA0h
.text:00002FA0 ; COMDAT (pick any)
.text:00002FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FA0
.text:00002FA0 ; =============== S U B R O U T I N E =======================================
.text:00002FA0
.text:00002FA0 ; Attributes: bp-based frame
.text:00002FA0
.text:00002FA0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00002FA0                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00002FA0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00002FA0                                         ; CODE XREF: NArchive::NLzma::CHandler::~CHandler(void)+3Ap
.text:00002FA0
.text:00002FA0 var_4           = dword ptr -4
.text:00002FA0
.text:00002FA0                 push    ebp
.text:00002FA1                 mov     ebp, esp
.text:00002FA3                 push    ecx
.text:00002FA4                 push    esi
.text:00002FA5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FAC                 mov     [ebp+var_4], ecx
.text:00002FAF                 mov     eax, [ebp+var_4]
.text:00002FB2                 cmp     dword ptr [eax], 0
.text:00002FB5                 jz      short loc_2FD2
.text:00002FB7                 mov     ecx, [ebp+var_4]
.text:00002FBA                 mov     edx, [ecx]
.text:00002FBC                 mov     eax, [ebp+var_4]
.text:00002FBF                 mov     ecx, [eax]
.text:00002FC1                 mov     edx, [edx]
.text:00002FC3                 mov     esi, esp
.text:00002FC5                 push    ecx
.text:00002FC6                 mov     eax, [edx+8]
.text:00002FC9                 call    eax
.text:00002FCB                 cmp     esi, esp
.text:00002FCD                 call    __RTC_CheckEsp
.text:00002FD2
.text:00002FD2 loc_2FD2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00002FD2                 pop     esi
.text:00002FD3                 add     esp, 4
.text:00002FD6                 cmp     ebp, esp
.text:00002FD8                 call    __RTC_CheckEsp
.text:00002FDD                 mov     esp, ebp
.text:00002FDF                 pop     ebp
.text:00002FE0                 retn
.text:00002FE0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00002FE0
.text:00002FE0 ; ---------------------------------------------------------------------------
.text:00002FE1                 align 4
.text:00002FE1 _text           ends
.text:00002FE1
.text:00002FE4 ; ===========================================================================
.text:00002FE4
.text:00002FE4 ; Segment type: Pure code
.text:00002FE4 ; Segment permissions: Read/Execute
.text:00002FE4 _text           segment para public 'CODE' use32
.text:00002FE4                 assume cs:_text
.text:00002FE4                 ;org 2FE4h
.text:00002FE4 ; COMDAT (pick any)
.text:00002FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FE4
.text:00002FE4 ; =============== S U B R O U T I N E =======================================
.text:00002FE4
.text:00002FE4 ; Attributes: bp-based frame
.text:00002FE4
.text:00002FE4 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00002FE4                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00002FE4 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00002FE4                                         ; CODE XREF: NArchive::NLzma::CHandler::Close(void)+64p
.text:00002FE4
.text:00002FE4 var_4           = dword ptr -4
.text:00002FE4
.text:00002FE4                 push    ebp
.text:00002FE5                 mov     ebp, esp
.text:00002FE7                 push    ecx
.text:00002FE8                 push    esi
.text:00002FE9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FF0                 mov     [ebp+var_4], ecx
.text:00002FF3                 mov     eax, [ebp+var_4]
.text:00002FF6                 cmp     dword ptr [eax], 0
.text:00002FF9                 jz      short loc_301F
.text:00002FFB                 mov     ecx, [ebp+var_4]
.text:00002FFE                 mov     edx, [ecx]
.text:00003000                 mov     eax, [ebp+var_4]
.text:00003003                 mov     ecx, [eax]
.text:00003005                 mov     edx, [edx]
.text:00003007                 mov     esi, esp
.text:00003009                 push    ecx
.text:0000300A                 mov     eax, [edx+8]
.text:0000300D                 call    eax
.text:0000300F                 cmp     esi, esp
.text:00003011                 call    __RTC_CheckEsp
.text:00003016                 mov     ecx, [ebp+var_4]
.text:00003019                 mov     dword ptr [ecx], 0
.text:0000301F
.text:0000301F loc_301F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000301F                 pop     esi
.text:00003020                 add     esp, 4
.text:00003023                 cmp     ebp, esp
.text:00003025                 call    __RTC_CheckEsp
.text:0000302A                 mov     esp, ebp
.text:0000302C                 pop     ebp
.text:0000302D                 retn
.text:0000302D ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:0000302D
.text:0000302D ; ---------------------------------------------------------------------------
.text:0000302E                 align 10h
.text:0000302E _text           ends
.text:0000302E
.text:00003030 ; ===========================================================================
.text:00003030
.text:00003030 ; Segment type: Pure code
.text:00003030 ; Segment permissions: Read/Execute
.text:00003030 _text           segment para public 'CODE' use32
.text:00003030                 assume cs:_text
.text:00003030                 ;org 3030h
.text:00003030 ; COMDAT (pick any)
.text:00003030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003030
.text:00003030 ; =============== S U B R O U T I N E =======================================
.text:00003030
.text:00003030 ; Attributes: bp-based frame
.text:00003030
.text:00003030 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00003030                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00003030 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00003030                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3C8p
.text:00003030
.text:00003030 var_4           = dword ptr -4
.text:00003030
.text:00003030                 push    ebp
.text:00003031                 mov     ebp, esp
.text:00003033                 push    ecx
.text:00003034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000303B                 mov     [ebp+var_4], ecx
.text:0000303E                 mov     eax, [ebp+var_4]
.text:00003041                 mov     eax, [eax]
.text:00003043                 mov     esp, ebp
.text:00003045                 pop     ebp
.text:00003046                 retn
.text:00003046 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00003046
.text:00003046 ; ---------------------------------------------------------------------------
.text:00003047                 align 4
.text:00003047 _text           ends
.text:00003047
.text:00003048 ; ===========================================================================
.text:00003048
.text:00003048 ; Segment type: Pure code
.text:00003048 ; Segment permissions: Read/Execute
.text:00003048 _text           segment para public 'CODE' use32
.text:00003048                 assume cs:_text
.text:00003048                 ;org 3048h
.text:00003048 ; COMDAT (pick any)
.text:00003048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003048
.text:00003048 ; =============== S U B R O U T I N E =======================================
.text:00003048
.text:00003048 ; Attributes: bp-based frame
.text:00003048
.text:00003048 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00003048                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00003048 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00003048                                         ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+145p
.text:00003048                                         ; NArchive::NLzma::CHandler::OpenSeq(ISequentialInStream *)+30p
.text:00003048
.text:00003048 var_4           = dword ptr -4
.text:00003048 arg_0           = dword ptr  8
.text:00003048
.text:00003048                 push    ebp
.text:00003049                 mov     ebp, esp
.text:0000304B                 push    ecx
.text:0000304C                 push    esi
.text:0000304D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003054                 mov     [ebp+var_4], ecx
.text:00003057                 cmp     [ebp+arg_0], 0
.text:0000305B                 jz      short loc_3074
.text:0000305D                 mov     eax, [ebp+arg_0]
.text:00003060                 mov     ecx, [eax]
.text:00003062                 mov     esi, esp
.text:00003064                 mov     edx, [ebp+arg_0]
.text:00003067                 push    edx
.text:00003068                 mov     eax, [ecx+4]
.text:0000306B                 call    eax
.text:0000306D                 cmp     esi, esp
.text:0000306F                 call    __RTC_CheckEsp
.text:00003074
.text:00003074 loc_3074:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00003074                 mov     ecx, [ebp+var_4]
.text:00003077                 cmp     dword ptr [ecx], 0
.text:0000307A                 jz      short loc_3097
.text:0000307C                 mov     edx, [ebp+var_4]
.text:0000307F                 mov     eax, [edx]
.text:00003081                 mov     ecx, [ebp+var_4]
.text:00003084                 mov     edx, [ecx]
.text:00003086                 mov     eax, [eax]
.text:00003088                 mov     esi, esp
.text:0000308A                 push    edx
.text:0000308B                 mov     ecx, [eax+8]
.text:0000308E                 call    ecx
.text:00003090                 cmp     esi, esp
.text:00003092                 call    __RTC_CheckEsp
.text:00003097
.text:00003097 loc_3097:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00003097                 mov     edx, [ebp+var_4]
.text:0000309A                 mov     eax, [ebp+arg_0]
.text:0000309D                 mov     [edx], eax
.text:0000309F                 mov     eax, [ebp+arg_0]
.text:000030A2                 pop     esi
.text:000030A3                 add     esp, 4
.text:000030A6                 cmp     ebp, esp
.text:000030A8                 call    __RTC_CheckEsp
.text:000030AD                 mov     esp, ebp
.text:000030AF                 pop     ebp
.text:000030B0                 retn    4
.text:000030B0 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:000030B0
.text:000030B0 ; ---------------------------------------------------------------------------
.text:000030B3                 align 4
.text:000030B3 _text           ends
.text:000030B3
.text:000030B4 ; ===========================================================================
.text:000030B4
.text:000030B4 ; Segment type: Pure code
.text:000030B4 ; Segment permissions: Read/Execute
.text:000030B4 _text           segment para public 'CODE' use32
.text:000030B4                 assume cs:_text
.text:000030B4                 ;org 30B4h
.text:000030B4 ; COMDAT (pick any)
.text:000030B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030B4
.text:000030B4 ; =============== S U B R O U T I N E =======================================
.text:000030B4
.text:000030B4 ; Attributes: bp-based frame
.text:000030B4
.text:000030B4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:000030B4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000030B4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000030B4                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A6p
.text:000030B4                                         ; CDummyOutStream::CDummyOutStream(void)+30p ...
.text:000030B4
.text:000030B4 var_4           = dword ptr -4
.text:000030B4
.text:000030B4                 push    ebp
.text:000030B5                 mov     ebp, esp
.text:000030B7                 push    ecx
.text:000030B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030BF                 mov     [ebp+var_4], ecx
.text:000030C2                 mov     eax, [ebp+var_4]
.text:000030C5                 mov     dword ptr [eax], 0
.text:000030CB                 mov     eax, [ebp+var_4]
.text:000030CE                 mov     esp, ebp
.text:000030D0                 pop     ebp
.text:000030D1                 retn
.text:000030D1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000030D1
.text:000030D1 ; ---------------------------------------------------------------------------
.text:000030D2                 align 4
.text:000030D2 _text           ends
.text:000030D2
.text:000030D4 ; ===========================================================================
.text:000030D4
.text:000030D4 ; Segment type: Pure code
.text:000030D4 ; Segment permissions: Read/Execute
.text:000030D4 _text           segment para public 'CODE' use32
.text:000030D4                 assume cs:_text
.text:000030D4                 ;org 30D4h
.text:000030D4 ; COMDAT (pick any)
.text:000030D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030D4
.text:000030D4 ; =============== S U B R O U T I N E =======================================
.text:000030D4
.text:000030D4 ; Attributes: bp-based frame
.text:000030D4
.text:000030D4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000030D4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000030D4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000030D4                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F5p
.text:000030D4
.text:000030D4 var_4           = dword ptr -4
.text:000030D4 arg_0           = dword ptr  8
.text:000030D4
.text:000030D4                 push    ebp
.text:000030D5                 mov     ebp, esp
.text:000030D7                 push    ecx
.text:000030D8                 push    esi
.text:000030D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030E0                 mov     [ebp+var_4], ecx
.text:000030E3                 mov     eax, [ebp+var_4]
.text:000030E6                 mov     ecx, [ebp+arg_0]
.text:000030E9                 mov     [eax], ecx
.text:000030EB                 cmp     [ebp+arg_0], 0
.text:000030EF                 jz      short loc_3108
.text:000030F1                 mov     edx, [ebp+arg_0]
.text:000030F4                 mov     eax, [edx]
.text:000030F6                 mov     esi, esp
.text:000030F8                 mov     ecx, [ebp+arg_0]
.text:000030FB                 push    ecx
.text:000030FC                 mov     edx, [eax+4]
.text:000030FF                 call    edx
.text:00003101                 cmp     esi, esp
.text:00003103                 call    __RTC_CheckEsp
.text:00003108
.text:00003108 loc_3108:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:00003108                 mov     eax, [ebp+var_4]
.text:0000310B                 pop     esi
.text:0000310C                 add     esp, 4
.text:0000310F                 cmp     ebp, esp
.text:00003111                 call    __RTC_CheckEsp
.text:00003116                 mov     esp, ebp
.text:00003118                 pop     ebp
.text:00003119                 retn    4
.text:00003119 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00003119
.text:00003119 _text           ends
.text:00003119
.text:0000311C ; ===========================================================================
.text:0000311C
.text:0000311C ; Segment type: Pure code
.text:0000311C ; Segment permissions: Read/Execute
.text:0000311C _text           segment para public 'CODE' use32
.text:0000311C                 assume cs:_text
.text:0000311C                 ;org 311Ch
.text:0000311C ; COMDAT (pick any)
.text:0000311C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000311C
.text:0000311C ; =============== S U B R O U T I N E =======================================
.text:0000311C
.text:0000311C ; Attributes: bp-based frame
.text:0000311C
.text:0000311C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:0000311C                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000311C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000311C                                         ; CODE XREF: NArchive::NLzma::CDecoder::~CDecoder(void)+55p
.text:0000311C                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+118p ...
.text:0000311C
.text:0000311C var_4           = dword ptr -4
.text:0000311C
.text:0000311C                 push    ebp
.text:0000311D                 mov     ebp, esp
.text:0000311F                 push    ecx
.text:00003120                 push    esi
.text:00003121                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003128                 mov     [ebp+var_4], ecx
.text:0000312B                 mov     eax, [ebp+var_4]
.text:0000312E                 cmp     dword ptr [eax], 0
.text:00003131                 jz      short loc_314E
.text:00003133                 mov     ecx, [ebp+var_4]
.text:00003136                 mov     edx, [ecx]
.text:00003138                 mov     eax, [ebp+var_4]
.text:0000313B                 mov     ecx, [eax]
.text:0000313D                 mov     edx, [edx]
.text:0000313F                 mov     esi, esp
.text:00003141                 push    ecx
.text:00003142                 mov     eax, [edx+8]
.text:00003145                 call    eax
.text:00003147                 cmp     esi, esp
.text:00003149                 call    __RTC_CheckEsp
.text:0000314E
.text:0000314E loc_314E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000314E                 pop     esi
.text:0000314F                 add     esp, 4
.text:00003152                 cmp     ebp, esp
.text:00003154                 call    __RTC_CheckEsp
.text:00003159                 mov     esp, ebp
.text:0000315B                 pop     ebp
.text:0000315C                 retn
.text:0000315C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000315C
.text:0000315C ; ---------------------------------------------------------------------------
.text:0000315D                 align 10h
.text:0000315D _text           ends
.text:0000315D
.text:00003160 ; ===========================================================================
.text:00003160
.text:00003160 ; Segment type: Pure code
.text:00003160 ; Segment permissions: Read/Execute
.text:00003160 _text           segment para public 'CODE' use32
.text:00003160                 assume cs:_text
.text:00003160                 ;org 3160h
.text:00003160 ; COMDAT (pick any)
.text:00003160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003160
.text:00003160 ; =============== S U B R O U T I N E =======================================
.text:00003160
.text:00003160 ; Attributes: bp-based frame
.text:00003160
.text:00003160 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00003160                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00003160 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00003160                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+226p
.text:00003160                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8AAp
.text:00003160
.text:00003160 var_4           = dword ptr -4
.text:00003160
.text:00003160                 push    ebp
.text:00003161                 mov     ebp, esp
.text:00003163                 push    ecx
.text:00003164                 push    esi
.text:00003165                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000316C                 mov     [ebp+var_4], ecx
.text:0000316F                 mov     eax, [ebp+var_4]
.text:00003172                 cmp     dword ptr [eax], 0
.text:00003175                 jz      short loc_319B
.text:00003177                 mov     ecx, [ebp+var_4]
.text:0000317A                 mov     edx, [ecx]
.text:0000317C                 mov     eax, [ebp+var_4]
.text:0000317F                 mov     ecx, [eax]
.text:00003181                 mov     edx, [edx]
.text:00003183                 mov     esi, esp
.text:00003185                 push    ecx
.text:00003186                 mov     eax, [edx+8]
.text:00003189                 call    eax
.text:0000318B                 cmp     esi, esp
.text:0000318D                 call    __RTC_CheckEsp
.text:00003192                 mov     ecx, [ebp+var_4]
.text:00003195                 mov     dword ptr [ecx], 0
.text:0000319B
.text:0000319B loc_319B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000319B                 pop     esi
.text:0000319C                 add     esp, 4
.text:0000319F                 cmp     ebp, esp
.text:000031A1                 call    __RTC_CheckEsp
.text:000031A6                 mov     esp, ebp
.text:000031A8                 pop     ebp
.text:000031A9                 retn
.text:000031A9 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:000031A9
.text:000031A9 ; ---------------------------------------------------------------------------
.text:000031AA                 align 4
.text:000031AA _text           ends
.text:000031AA
.text:000031AC ; ===========================================================================
.text:000031AC
.text:000031AC ; Segment type: Pure code
.text:000031AC ; Segment permissions: Read/Execute
.text:000031AC _text           segment para public 'CODE' use32
.text:000031AC                 assume cs:_text
.text:000031AC                 ;org 31ACh
.text:000031AC ; COMDAT (pick any)
.text:000031AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031AC
.text:000031AC ; =============== S U B R O U T I N E =======================================
.text:000031AC
.text:000031AC ; Attributes: bp-based frame
.text:000031AC
.text:000031AC ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:000031AC                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000031AC ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000031AC                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+15Bp
.text:000031AC                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+201p ...
.text:000031AC
.text:000031AC var_4           = dword ptr -4
.text:000031AC
.text:000031AC                 push    ebp
.text:000031AD                 mov     ebp, esp
.text:000031AF                 push    ecx
.text:000031B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031B7                 mov     [ebp+var_4], ecx
.text:000031BA                 mov     eax, [ebp+var_4]
.text:000031BD                 mov     eax, [eax]
.text:000031BF                 mov     esp, ebp
.text:000031C1                 pop     ebp
.text:000031C2                 retn
.text:000031C2 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000031C2
.text:000031C2 ; ---------------------------------------------------------------------------
.text:000031C3                 align 4
.text:000031C3 _text           ends
.text:000031C3
.text:000031C4 ; ===========================================================================
.text:000031C4
.text:000031C4 ; Segment type: Pure code
.text:000031C4 ; Segment permissions: Read/Execute
.text:000031C4 _text           segment para public 'CODE' use32
.text:000031C4                 assume cs:_text
.text:000031C4                 ;org 31C4h
.text:000031C4 ; COMDAT (pick any)
.text:000031C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031C4
.text:000031C4 ; =============== S U B R O U T I N E =======================================
.text:000031C4
.text:000031C4 ; Attributes: bp-based frame
.text:000031C4
.text:000031C4 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:000031C4                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:000031C4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:000031C4                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C4p
.text:000031C4
.text:000031C4 var_4           = dword ptr -4
.text:000031C4
.text:000031C4                 push    ebp
.text:000031C5                 mov     ebp, esp
.text:000031C7                 push    ecx
.text:000031C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031CF                 mov     [ebp+var_4], ecx
.text:000031D2                 mov     eax, [ebp+var_4]
.text:000031D5                 mov     esp, ebp
.text:000031D7                 pop     ebp
.text:000031D8                 retn
.text:000031D8 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000031D8
.text:000031D8 ; ---------------------------------------------------------------------------
.text:000031D9                 align 4
.text:000031D9 _text           ends
.text:000031D9
.text:000031DC ; ===========================================================================
.text:000031DC
.text:000031DC ; Segment type: Pure code
.text:000031DC ; Segment permissions: Read/Execute
.text:000031DC _text           segment para public 'CODE' use32
.text:000031DC                 assume cs:_text
.text:000031DC                 ;org 31DCh
.text:000031DC ; COMDAT (pick any)
.text:000031DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031DC
.text:000031DC ; =============== S U B R O U T I N E =======================================
.text:000031DC
.text:000031DC ; Attributes: bp-based frame
.text:000031DC
.text:000031DC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:000031DC                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:000031DC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:000031DC                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+1A5p
.text:000031DC                                         ; CDummyOutStream::SetStream(ISequentialOutStream *)+18p
.text:000031DC
.text:000031DC var_4           = dword ptr -4
.text:000031DC arg_0           = dword ptr  8
.text:000031DC
.text:000031DC                 push    ebp
.text:000031DD                 mov     ebp, esp
.text:000031DF                 push    ecx
.text:000031E0                 push    esi
.text:000031E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031E8                 mov     [ebp+var_4], ecx
.text:000031EB                 cmp     [ebp+arg_0], 0
.text:000031EF                 jz      short loc_3208
.text:000031F1                 mov     eax, [ebp+arg_0]
.text:000031F4                 mov     ecx, [eax]
.text:000031F6                 mov     esi, esp
.text:000031F8                 mov     edx, [ebp+arg_0]
.text:000031FB                 push    edx
.text:000031FC                 mov     eax, [ecx+4]
.text:000031FF                 call    eax
.text:00003201                 cmp     esi, esp
.text:00003203                 call    __RTC_CheckEsp
.text:00003208
.text:00003208 loc_3208:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00003208                 mov     ecx, [ebp+var_4]
.text:0000320B                 cmp     dword ptr [ecx], 0
.text:0000320E                 jz      short loc_322B
.text:00003210                 mov     edx, [ebp+var_4]
.text:00003213                 mov     eax, [edx]
.text:00003215                 mov     ecx, [ebp+var_4]
.text:00003218                 mov     edx, [ecx]
.text:0000321A                 mov     eax, [eax]
.text:0000321C                 mov     esi, esp
.text:0000321E                 push    edx
.text:0000321F                 mov     ecx, [eax+8]
.text:00003222                 call    ecx
.text:00003224                 cmp     esi, esp
.text:00003226                 call    __RTC_CheckEsp
.text:0000322B
.text:0000322B loc_322B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:0000322B                 mov     edx, [ebp+var_4]
.text:0000322E                 mov     eax, [ebp+arg_0]
.text:00003231                 mov     [edx], eax
.text:00003233                 mov     eax, [ebp+arg_0]
.text:00003236                 pop     esi
.text:00003237                 add     esp, 4
.text:0000323A                 cmp     ebp, esp
.text:0000323C                 call    __RTC_CheckEsp
.text:00003241                 mov     esp, ebp
.text:00003243                 pop     ebp
.text:00003244                 retn    4
.text:00003244 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00003244
.text:00003244 ; ---------------------------------------------------------------------------
.text:00003247                 align 4
.text:00003247 _text           ends
.text:00003247
.text:00003248 ; ===========================================================================
.text:00003248
.text:00003248 ; Segment type: Pure code
.text:00003248 ; Segment permissions: Read/Execute
.text:00003248 _text           segment para public 'CODE' use32
.text:00003248                 assume cs:_text
.text:00003248                 ;org 3248h
.text:00003248 ; COMDAT (pick any)
.text:00003248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003248
.text:00003248 ; =============== S U B R O U T I N E =======================================
.text:00003248
.text:00003248 ; Attributes: bp-based frame
.text:00003248
.text:00003248 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00003248                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00003248 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00003248                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+C2p
.text:00003248                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+131p
.text:00003248
.text:00003248 var_4           = dword ptr -4
.text:00003248
.text:00003248                 push    ebp
.text:00003249                 mov     ebp, esp
.text:0000324B                 push    ecx
.text:0000324C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003253                 mov     [ebp+var_4], ecx
.text:00003256                 mov     eax, [ebp+var_4]
.text:00003259                 xor     ecx, ecx
.text:0000325B                 cmp     dword ptr [eax], 0
.text:0000325E                 setz    cl
.text:00003261                 mov     al, cl
.text:00003263                 mov     esp, ebp
.text:00003265                 pop     ebp
.text:00003266                 retn
.text:00003266 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00003266
.text:00003266 ; ---------------------------------------------------------------------------
.text:00003267                 align 4
.text:00003267 _text           ends
.text:00003267
.text:00003268 ; ===========================================================================
.text:00003268
.text:00003268 ; Segment type: Pure code
.text:00003268 ; Segment permissions: Read/Execute
.text:00003268 _text           segment para public 'CODE' use32
.text:00003268                 assume cs:_text
.text:00003268                 ;org 3268h
.text:00003268 ; COMDAT (pick any)
.text:00003268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003268
.text:00003268 ; =============== S U B R O U T I N E =======================================
.text:00003268
.text:00003268 ; Attributes: bp-based frame
.text:00003268
.text:00003268 ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:00003268                 public ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:00003268 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:00003268                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+54p
.text:00003268
.text:00003268 var_4           = dword ptr -4
.text:00003268
.text:00003268                 push    ebp
.text:00003269                 mov     ebp, esp
.text:0000326B                 push    ecx
.text:0000326C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003273                 mov     [ebp+var_4], ecx
.text:00003276                 mov     eax, [ebp+var_4]
.text:00003279                 mov     dword ptr [eax], 0
.text:0000327F                 mov     eax, [ebp+var_4]
.text:00003282                 mov     esp, ebp
.text:00003284                 pop     ebp
.text:00003285                 retn
.text:00003285 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:00003285
.text:00003285 ; ---------------------------------------------------------------------------
.text:00003286                 align 4
.text:00003286 _text           ends
.text:00003286
.text:00003288 ; ===========================================================================
.text:00003288
.text:00003288 ; Segment type: Pure code
.text:00003288 ; Segment permissions: Read/Execute
.text:00003288 _text           segment para public 'CODE' use32
.text:00003288                 assume cs:_text
.text:00003288                 ;org 3288h
.text:00003288 ; COMDAT (pick any)
.text:00003288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003288
.text:00003288 ; =============== S U B R O U T I N E =======================================
.text:00003288
.text:00003288 ; Attributes: bp-based frame
.text:00003288
.text:00003288 ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::~CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:00003288                 public ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:00003288 ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:00003288                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+99p
.text:00003288                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+EAp ...
.text:00003288
.text:00003288 var_4           = dword ptr -4
.text:00003288
.text:00003288                 push    ebp
.text:00003289                 mov     ebp, esp
.text:0000328B                 push    ecx
.text:0000328C                 push    esi
.text:0000328D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003294                 mov     [ebp+var_4], ecx
.text:00003297                 mov     eax, [ebp+var_4]
.text:0000329A                 cmp     dword ptr [eax], 0
.text:0000329D                 jz      short loc_32BA
.text:0000329F                 mov     ecx, [ebp+var_4]
.text:000032A2                 mov     edx, [ecx]
.text:000032A4                 mov     eax, [ebp+var_4]
.text:000032A7                 mov     ecx, [eax]
.text:000032A9                 mov     edx, [edx]
.text:000032AB                 mov     esi, esp
.text:000032AD                 push    ecx
.text:000032AE                 mov     eax, [edx+8]
.text:000032B1                 call    eax
.text:000032B3                 cmp     esi, esp
.text:000032B5                 call    __RTC_CheckEsp
.text:000032BA
.text:000032BA loc_32BA:                               ; CODE XREF: CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)+15j
.text:000032BA                 pop     esi
.text:000032BB                 add     esp, 4
.text:000032BE                 cmp     ebp, esp
.text:000032C0                 call    __RTC_CheckEsp
.text:000032C5                 mov     esp, ebp
.text:000032C7                 pop     ebp
.text:000032C8                 retn
.text:000032C8 ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:000032C8
.text:000032C8 ; ---------------------------------------------------------------------------
.text:000032C9                 align 4
.text:000032C9 _text           ends
.text:000032C9
.text:000032CC ; ===========================================================================
.text:000032CC
.text:000032CC ; Segment type: Pure code
.text:000032CC ; Segment permissions: Read/Execute
.text:000032CC _text           segment para public 'CODE' use32
.text:000032CC                 assume cs:_text
.text:000032CC                 ;org 32CCh
.text:000032CC ; COMDAT (pick any)
.text:000032CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032CC
.text:000032CC ; =============== S U B R O U T I N E =======================================
.text:000032CC
.text:000032CC ; Attributes: bp-based frame
.text:000032CC
.text:000032CC ; public: struct ICompressSetDecoderProperties2 * * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator&(void)
.text:000032CC                 public ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
.text:000032CC ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ proc near
.text:000032CC                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+63p
.text:000032CC
.text:000032CC var_4           = dword ptr -4
.text:000032CC
.text:000032CC                 push    ebp
.text:000032CD                 mov     ebp, esp
.text:000032CF                 push    ecx
.text:000032D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032D7                 mov     [ebp+var_4], ecx
.text:000032DA                 mov     eax, [ebp+var_4]
.text:000032DD                 mov     esp, ebp
.text:000032DF                 pop     ebp
.text:000032E0                 retn
.text:000032E0 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ endp
.text:000032E0
.text:000032E0 ; ---------------------------------------------------------------------------
.text:000032E1                 align 4
.text:000032E1 _text           ends
.text:000032E1
.text:000032E4 ; ===========================================================================
.text:000032E4
.text:000032E4 ; Segment type: Pure code
.text:000032E4 ; Segment permissions: Read/Execute
.text:000032E4 _text           segment para public 'CODE' use32
.text:000032E4                 assume cs:_text
.text:000032E4                 ;org 32E4h
.text:000032E4 ; COMDAT (pick any)
.text:000032E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032E4
.text:000032E4 ; =============== S U B R O U T I N E =======================================
.text:000032E4
.text:000032E4 ; Attributes: bp-based frame
.text:000032E4
.text:000032E4 ; public: struct ICompressSetDecoderProperties2 * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator->(void)const
.text:000032E4                 public ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:000032E4 ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:000032E4                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+A9p
.text:000032E4
.text:000032E4 var_4           = dword ptr -4
.text:000032E4
.text:000032E4                 push    ebp
.text:000032E5                 mov     ebp, esp
.text:000032E7                 push    ecx
.text:000032E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032EF                 mov     [ebp+var_4], ecx
.text:000032F2                 mov     eax, [ebp+var_4]
.text:000032F5                 mov     eax, [eax]
.text:000032F7                 mov     esp, ebp
.text:000032F9                 pop     ebp
.text:000032FA                 retn
.text:000032FA ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:000032FA
.text:000032FA ; ---------------------------------------------------------------------------
.text:000032FB                 align 4
.text:000032FB _text           ends
.text:000032FB
.text:000032FC ; ===========================================================================
.text:000032FC
.text:000032FC ; Segment type: Pure code
.text:000032FC ; Segment permissions: Read/Execute
.text:000032FC _text           segment para public 'CODE' use32
.text:000032FC                 assume cs:_text
.text:000032FC                 ;org 32FCh
.text:000032FC ; COMDAT (pick any)
.text:000032FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032FC
.text:000032FC ; =============== S U B R O U T I N E =======================================
.text:000032FC
.text:000032FC ; Attributes: bp-based frame
.text:000032FC
.text:000032FC ; public: bool __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator!(void)const
.text:000032FC                 public ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ
.text:000032FC ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ proc near
.text:000032FC                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+7Cp
.text:000032FC
.text:000032FC var_4           = dword ptr -4
.text:000032FC
.text:000032FC                 push    ebp
.text:000032FD                 mov     ebp, esp
.text:000032FF                 push    ecx
.text:00003300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003307                 mov     [ebp+var_4], ecx
.text:0000330A                 mov     eax, [ebp+var_4]
.text:0000330D                 xor     ecx, ecx
.text:0000330F                 cmp     dword ptr [eax], 0
.text:00003312                 setz    cl
.text:00003315                 mov     al, cl
.text:00003317                 mov     esp, ebp
.text:00003319                 pop     ebp
.text:0000331A                 retn
.text:0000331A ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ endp
.text:0000331A
.text:0000331A ; ---------------------------------------------------------------------------
.text:0000331B                 align 4
.text:0000331B _text           ends
.text:0000331B
.text:0000331C ; ===========================================================================
.text:0000331C
.text:0000331C ; Segment type: Pure code
.text:0000331C ; Segment permissions: Read/Execute
.text:0000331C _text           segment para public 'CODE' use32
.text:0000331C                 assume cs:_text
.text:0000331C                 ;org 331Ch
.text:0000331C ; COMDAT (pick any)
.text:0000331C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000331C
.text:0000331C ; =============== S U B R O U T I N E =======================================
.text:0000331C
.text:0000331C ; Attributes: bp-based frame
.text:0000331C
.text:0000331C ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(struct ICompressFilter *)
.text:0000331C                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
.text:0000331C ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z proc near
.text:0000331C                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+178p
.text:0000331C
.text:0000331C var_4           = dword ptr -4
.text:0000331C arg_0           = dword ptr  8
.text:0000331C
.text:0000331C                 push    ebp
.text:0000331D                 mov     ebp, esp
.text:0000331F                 push    ecx
.text:00003320                 push    esi
.text:00003321                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003328                 mov     [ebp+var_4], ecx
.text:0000332B                 cmp     [ebp+arg_0], 0
.text:0000332F                 jz      short loc_3348
.text:00003331                 mov     eax, [ebp+arg_0]
.text:00003334                 mov     ecx, [eax]
.text:00003336                 mov     esi, esp
.text:00003338                 mov     edx, [ebp+arg_0]
.text:0000333B                 push    edx
.text:0000333C                 mov     eax, [ecx+4]
.text:0000333F                 call    eax
.text:00003341                 cmp     esi, esp
.text:00003343                 call    __RTC_CheckEsp
.text:00003348
.text:00003348 loc_3348:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+13j
.text:00003348                 mov     ecx, [ebp+var_4]
.text:0000334B                 cmp     dword ptr [ecx], 0
.text:0000334E                 jz      short loc_336B
.text:00003350                 mov     edx, [ebp+var_4]
.text:00003353                 mov     eax, [edx]
.text:00003355                 mov     ecx, [ebp+var_4]
.text:00003358                 mov     edx, [ecx]
.text:0000335A                 mov     eax, [eax]
.text:0000335C                 mov     esi, esp
.text:0000335E                 push    edx
.text:0000335F                 mov     ecx, [eax+8]
.text:00003362                 call    ecx
.text:00003364                 cmp     esi, esp
.text:00003366                 call    __RTC_CheckEsp
.text:0000336B
.text:0000336B loc_336B:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+32j
.text:0000336B                 mov     edx, [ebp+var_4]
.text:0000336E                 mov     eax, [ebp+arg_0]
.text:00003371                 mov     [edx], eax
.text:00003373                 mov     eax, [ebp+arg_0]
.text:00003376                 pop     esi
.text:00003377                 add     esp, 4
.text:0000337A                 cmp     ebp, esp
.text:0000337C                 call    __RTC_CheckEsp
.text:00003381                 mov     esp, ebp
.text:00003383                 pop     ebp
.text:00003384                 retn    4
.text:00003384 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z endp
.text:00003384
.text:00003384 ; ---------------------------------------------------------------------------
.text:00003387                 align 4
.text:00003387 _text           ends
.text:00003387
.text:00003388 ; ===========================================================================
.text:00003388
.text:00003388 ; Segment type: Pure code
.text:00003388 ; Segment permissions: Read/Execute
.text:00003388 _text           segment para public 'CODE' use32
.text:00003388                 assume cs:_text
.text:00003388                 ;org 3388h
.text:00003388 ; COMDAT (pick any)
.text:00003388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003388
.text:00003388 ; =============== S U B R O U T I N E =======================================
.text:00003388
.text:00003388 ; Attributes: bp-based frame
.text:00003388
.text:00003388 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00003388                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00003388 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00003388                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+29Dp
.text:00003388
.text:00003388 var_4           = dword ptr -4
.text:00003388 arg_0           = dword ptr  8
.text:00003388
.text:00003388                 push    ebp
.text:00003389                 mov     ebp, esp
.text:0000338B                 push    ecx
.text:0000338C                 push    esi
.text:0000338D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003394                 mov     [ebp+var_4], ecx
.text:00003397                 mov     eax, [ebp+var_4]
.text:0000339A                 mov     ecx, [ebp+arg_0]
.text:0000339D                 mov     [eax], ecx
.text:0000339F                 cmp     [ebp+arg_0], 0
.text:000033A3                 jz      short loc_33BC
.text:000033A5                 mov     edx, [ebp+arg_0]
.text:000033A8                 mov     eax, [edx]
.text:000033AA                 mov     esi, esp
.text:000033AC                 mov     ecx, [ebp+arg_0]
.text:000033AF                 push    ecx
.text:000033B0                 mov     edx, [eax+4]
.text:000033B3                 call    edx
.text:000033B5                 cmp     esi, esp
.text:000033B7                 call    __RTC_CheckEsp
.text:000033BC
.text:000033BC loc_33BC:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:000033BC                 mov     eax, [ebp+var_4]
.text:000033BF                 pop     esi
.text:000033C0                 add     esp, 4
.text:000033C3                 cmp     ebp, esp
.text:000033C5                 call    __RTC_CheckEsp
.text:000033CA                 mov     esp, ebp
.text:000033CC                 pop     ebp
.text:000033CD                 retn    4
.text:000033CD ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:000033CD
.text:000033CD _text           ends
.text:000033CD
.text:000033D0 ; ===========================================================================
.text:000033D0
.text:000033D0 ; Segment type: Pure code
.text:000033D0 ; Segment permissions: Read/Execute
.text:000033D0 _text           segment para public 'CODE' use32
.text:000033D0                 assume cs:_text
.text:000033D0                 ;org 33D0h
.text:000033D0 ; COMDAT (pick any)
.text:000033D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033D0
.text:000033D0 ; =============== S U B R O U T I N E =======================================
.text:000033D0
.text:000033D0 ; Attributes: bp-based frame
.text:000033D0
.text:000033D0 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:000033D0                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:000033D0 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:000033D0                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2F0p
.text:000033D0                                         ; NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+37Fp ...
.text:000033D0
.text:000033D0 var_4           = dword ptr -4
.text:000033D0
.text:000033D0                 push    ebp
.text:000033D1                 mov     ebp, esp
.text:000033D3                 push    ecx
.text:000033D4                 push    esi
.text:000033D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033DC                 mov     [ebp+var_4], ecx
.text:000033DF                 mov     eax, [ebp+var_4]
.text:000033E2                 cmp     dword ptr [eax], 0
.text:000033E5                 jz      short loc_3402
.text:000033E7                 mov     ecx, [ebp+var_4]
.text:000033EA                 mov     edx, [ecx]
.text:000033EC                 mov     eax, [ebp+var_4]
.text:000033EF                 mov     ecx, [eax]
.text:000033F1                 mov     edx, [edx]
.text:000033F3                 mov     esi, esp
.text:000033F5                 push    ecx
.text:000033F6                 mov     eax, [edx+8]
.text:000033F9                 call    eax
.text:000033FB                 cmp     esi, esp
.text:000033FD                 call    __RTC_CheckEsp
.text:00003402
.text:00003402 loc_3402:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00003402                 pop     esi
.text:00003403                 add     esp, 4
.text:00003406                 cmp     ebp, esp
.text:00003408                 call    __RTC_CheckEsp
.text:0000340D                 mov     esp, ebp
.text:0000340F                 pop     ebp
.text:00003410                 retn
.text:00003410 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00003410
.text:00003410 ; ---------------------------------------------------------------------------
.text:00003411                 align 4
.text:00003411 _text           ends
.text:00003411
.text:00003414 ; ===========================================================================
.text:00003414
.text:00003414 ; Segment type: Pure code
.text:00003414 ; Segment permissions: Read/Execute
.text:00003414 _text           segment para public 'CODE' use32
.text:00003414                 assume cs:_text
.text:00003414                 ;org 3414h
.text:00003414 ; COMDAT (pick any)
.text:00003414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003414
.text:00003414 ; =============== S U B R O U T I N E =======================================
.text:00003414
.text:00003414 ; Attributes: bp-based frame
.text:00003414
.text:00003414 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00003414                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00003414 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00003414                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62Ep
.text:00003414
.text:00003414 var_4           = dword ptr -4
.text:00003414
.text:00003414                 push    ebp
.text:00003415                 mov     ebp, esp
.text:00003417                 push    ecx
.text:00003418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000341F                 mov     [ebp+var_4], ecx
.text:00003422                 mov     eax, [ebp+var_4]
.text:00003425                 mov     eax, [eax]
.text:00003427                 mov     esp, ebp
.text:00003429                 pop     ebp
.text:0000342A                 retn
.text:0000342A ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000342A
.text:0000342A ; ---------------------------------------------------------------------------
.text:0000342B                 align 4
.text:0000342B _text           ends
.text:0000342B
.text:0000342C ; ===========================================================================
.text:0000342C
.text:0000342C ; Segment type: Pure code
.text:0000342C ; Segment permissions: Read/Execute
.text:0000342C _text           segment para public 'CODE' use32
.text:0000342C                 assume cs:_text
.text:0000342C                 ;org 342Ch
.text:0000342C ; COMDAT (pick any)
.text:0000342C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000342C
.text:0000342C ; =============== S U B R O U T I N E =======================================
.text:0000342C
.text:0000342C ; Attributes: bp-based frame
.text:0000342C
.text:0000342C ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:0000342C                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:0000342C ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:0000342C                                         ; CODE XREF: NArchive::NLzma::CDecoder::CDecoder(void)+42p
.text:0000342C
.text:0000342C var_4           = dword ptr -4
.text:0000342C
.text:0000342C                 push    ebp
.text:0000342D                 mov     ebp, esp
.text:0000342F                 push    ecx
.text:00003430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003437                 mov     [ebp+var_4], ecx
.text:0000343A                 mov     eax, [ebp+var_4]
.text:0000343D                 mov     dword ptr [eax], 0
.text:00003443                 mov     eax, [ebp+var_4]
.text:00003446                 mov     esp, ebp
.text:00003448                 pop     ebp
.text:00003449                 retn
.text:00003449 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00003449
.text:00003449 ; ---------------------------------------------------------------------------
.text:0000344A                 align 4
.text:0000344A _text           ends
.text:0000344A
.text:0000344C ; ===========================================================================
.text:0000344C
.text:0000344C ; Segment type: Pure code
.text:0000344C ; Segment permissions: Read/Execute
.text:0000344C _text           segment para public 'CODE' use32
.text:0000344C                 assume cs:_text
.text:0000344C                 ;org 344Ch
.text:0000344C ; COMDAT (pick any)
.text:0000344C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000344C
.text:0000344C ; =============== S U B R O U T I N E =======================================
.text:0000344C
.text:0000344C ; Attributes: bp-based frame
.text:0000344C
.text:0000344C ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:0000344C                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:0000344C ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:0000344C                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+125p
.text:0000344C
.text:0000344C var_4           = dword ptr -4
.text:0000344C arg_0           = dword ptr  8
.text:0000344C
.text:0000344C                 push    ebp
.text:0000344D                 mov     ebp, esp
.text:0000344F                 push    ecx
.text:00003450                 push    esi
.text:00003451                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003458                 mov     [ebp+var_4], ecx
.text:0000345B                 mov     eax, [ebp+var_4]
.text:0000345E                 mov     ecx, [ebp+arg_0]
.text:00003461                 mov     [eax], ecx
.text:00003463                 cmp     [ebp+arg_0], 0
.text:00003467                 jz      short loc_3480
.text:00003469                 mov     edx, [ebp+arg_0]
.text:0000346C                 mov     eax, [edx]
.text:0000346E                 mov     esi, esp
.text:00003470                 mov     ecx, [ebp+arg_0]
.text:00003473                 push    ecx
.text:00003474                 mov     edx, [eax+4]
.text:00003477                 call    edx
.text:00003479                 cmp     esi, esp
.text:0000347B                 call    __RTC_CheckEsp
.text:00003480
.text:00003480 loc_3480:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:00003480                 mov     eax, [ebp+var_4]
.text:00003483                 pop     esi
.text:00003484                 add     esp, 4
.text:00003487                 cmp     ebp, esp
.text:00003489                 call    __RTC_CheckEsp
.text:0000348E                 mov     esp, ebp
.text:00003490                 pop     ebp
.text:00003491                 retn    4
.text:00003491 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:00003491
.text:00003491 _text           ends
.text:00003491
.text:00003494 ; ===========================================================================
.text:00003494
.text:00003494 ; Segment type: Pure code
.text:00003494 ; Segment permissions: Read/Execute
.text:00003494 _text           segment para public 'CODE' use32
.text:00003494                 assume cs:_text
.text:00003494                 ;org 3494h
.text:00003494 ; COMDAT (pick any)
.text:00003494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003494
.text:00003494 ; =============== S U B R O U T I N E =======================================
.text:00003494
.text:00003494 ; Attributes: bp-based frame
.text:00003494
.text:00003494 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00003494                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00003494 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00003494                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+1B4p
.text:00003494                                         ; NArchive::NLzma::CDecoder::~CDecoder(void)+46p ...
.text:00003494
.text:00003494 var_4           = dword ptr -4
.text:00003494
.text:00003494                 push    ebp
.text:00003495                 mov     ebp, esp
.text:00003497                 push    ecx
.text:00003498                 push    esi
.text:00003499                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034A0                 mov     [ebp+var_4], ecx
.text:000034A3                 mov     eax, [ebp+var_4]
.text:000034A6                 cmp     dword ptr [eax], 0
.text:000034A9                 jz      short loc_34C6
.text:000034AB                 mov     ecx, [ebp+var_4]
.text:000034AE                 mov     edx, [ecx]
.text:000034B0                 mov     eax, [ebp+var_4]
.text:000034B3                 mov     ecx, [eax]
.text:000034B5                 mov     edx, [edx]
.text:000034B7                 mov     esi, esp
.text:000034B9                 push    ecx
.text:000034BA                 mov     eax, [edx+8]
.text:000034BD                 call    eax
.text:000034BF                 cmp     esi, esp
.text:000034C1                 call    __RTC_CheckEsp
.text:000034C6
.text:000034C6 loc_34C6:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:000034C6                 pop     esi
.text:000034C7                 add     esp, 4
.text:000034CA                 cmp     ebp, esp
.text:000034CC                 call    __RTC_CheckEsp
.text:000034D1                 mov     esp, ebp
.text:000034D3                 pop     ebp
.text:000034D4                 retn
.text:000034D4 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000034D4
.text:000034D4 ; ---------------------------------------------------------------------------
.text:000034D5                 align 4
.text:000034D5 _text           ends
.text:000034D5
.text:000034D8 ; ===========================================================================
.text:000034D8
.text:000034D8 ; Segment type: Pure code
.text:000034D8 ; Segment permissions: Read/Execute
.text:000034D8 _text           segment para public 'CODE' use32
.text:000034D8                 assume cs:_text
.text:000034D8                 ;org 34D8h
.text:000034D8 ; COMDAT (pick any)
.text:000034D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034D8
.text:000034D8 ; =============== S U B R O U T I N E =======================================
.text:000034D8
.text:000034D8 ; Attributes: bp-based frame
.text:000034D8
.text:000034D8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::operator struct ICompressCoder *(void)const
.text:000034D8                 public ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:000034D8 ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:000034D8                                         ; CODE XREF: NArchive::NLzma::CDecoder::ReleaseInStream(void)+15p
.text:000034D8
.text:000034D8 var_4           = dword ptr -4
.text:000034D8
.text:000034D8                 push    ebp
.text:000034D9                 mov     ebp, esp
.text:000034DB                 push    ecx
.text:000034DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034E3                 mov     [ebp+var_4], ecx
.text:000034E6                 mov     eax, [ebp+var_4]
.text:000034E9                 mov     eax, [eax]
.text:000034EB                 mov     esp, ebp
.text:000034ED                 pop     ebp
.text:000034EE                 retn
.text:000034EE ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:000034EE
.text:000034EE ; ---------------------------------------------------------------------------
.text:000034EF                 align 10h
.text:000034EF _text           ends
.text:000034EF
.text:000034F0 ; ===========================================================================
.text:000034F0
.text:000034F0 ; Segment type: Pure code
.text:000034F0 ; Segment permissions: Read/Execute
.text:000034F0 _text           segment para public 'CODE' use32
.text:000034F0                 assume cs:_text
.text:000034F0                 ;org 34F0h
.text:000034F0 ; COMDAT (pick any)
.text:000034F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034F0
.text:000034F0 ; =============== S U B R O U T I N E =======================================
.text:000034F0
.text:000034F0 ; Attributes: bp-based frame
.text:000034F0
.text:000034F0 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:000034F0                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:000034F0 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:000034F0                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+AEp
.text:000034F0
.text:000034F0 var_4           = dword ptr -4
.text:000034F0 arg_0           = dword ptr  8
.text:000034F0
.text:000034F0                 push    ebp
.text:000034F1                 mov     ebp, esp
.text:000034F3                 push    ecx
.text:000034F4                 push    esi
.text:000034F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034FC                 mov     [ebp+var_4], ecx
.text:000034FF                 cmp     [ebp+arg_0], 0
.text:00003503                 jz      short loc_351C
.text:00003505                 mov     eax, [ebp+arg_0]
.text:00003508                 mov     ecx, [eax]
.text:0000350A                 mov     esi, esp
.text:0000350C                 mov     edx, [ebp+arg_0]
.text:0000350F                 push    edx
.text:00003510                 mov     eax, [ecx+4]
.text:00003513                 call    eax
.text:00003515                 cmp     esi, esp
.text:00003517                 call    __RTC_CheckEsp
.text:0000351C
.text:0000351C loc_351C:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:0000351C                 mov     ecx, [ebp+var_4]
.text:0000351F                 cmp     dword ptr [ecx], 0
.text:00003522                 jz      short loc_353F
.text:00003524                 mov     edx, [ebp+var_4]
.text:00003527                 mov     eax, [edx]
.text:00003529                 mov     ecx, [ebp+var_4]
.text:0000352C                 mov     edx, [ecx]
.text:0000352E                 mov     eax, [eax]
.text:00003530                 mov     esi, esp
.text:00003532                 push    edx
.text:00003533                 mov     ecx, [eax+8]
.text:00003536                 call    ecx
.text:00003538                 cmp     esi, esp
.text:0000353A                 call    __RTC_CheckEsp
.text:0000353F
.text:0000353F loc_353F:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:0000353F                 mov     edx, [ebp+var_4]
.text:00003542                 mov     eax, [ebp+arg_0]
.text:00003545                 mov     [edx], eax
.text:00003547                 mov     eax, [ebp+arg_0]
.text:0000354A                 pop     esi
.text:0000354B                 add     esp, 4
.text:0000354E                 cmp     ebp, esp
.text:00003550                 call    __RTC_CheckEsp
.text:00003555                 mov     esp, ebp
.text:00003557                 pop     ebp
.text:00003558                 retn    4
.text:00003558 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:00003558
.text:00003558 ; ---------------------------------------------------------------------------
.text:0000355B                 align 4
.text:0000355B _text           ends
.text:0000355B
.text:0000355C ; ===========================================================================
.text:0000355C
.text:0000355C ; Segment type: Pure code
.text:0000355C ; Segment permissions: Read/Execute
.text:0000355C _text           segment para public 'CODE' use32
.text:0000355C                 assume cs:_text
.text:0000355C                 ;org 355Ch
.text:0000355C ; COMDAT (pick any)
.text:0000355C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000355C
.text:0000355C ; =============== S U B R O U T I N E =======================================
.text:0000355C
.text:0000355C ; Attributes: bp-based frame
.text:0000355C
.text:0000355C ; public: bool __thiscall CMyComPtr<struct ICompressCoder>::operator!(void)const
.text:0000355C                 public ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
.text:0000355C ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
.text:0000355C                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+41p
.text:0000355C
.text:0000355C var_4           = dword ptr -4
.text:0000355C
.text:0000355C                 push    ebp
.text:0000355D                 mov     ebp, esp
.text:0000355F                 push    ecx
.text:00003560                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003567                 mov     [ebp+var_4], ecx
.text:0000356A                 mov     eax, [ebp+var_4]
.text:0000356D                 xor     ecx, ecx
.text:0000356F                 cmp     dword ptr [eax], 0
.text:00003572                 setz    cl
.text:00003575                 mov     al, cl
.text:00003577                 mov     esp, ebp
.text:00003579                 pop     ebp
.text:0000357A                 retn
.text:0000357A ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ endp
.text:0000357A
.text:0000357A ; ---------------------------------------------------------------------------
.text:0000357B                 align 4
.text:0000357B _text           ends
.text:0000357B
.text:0000357C ; ===========================================================================
.text:0000357C
.text:0000357C ; Segment type: Pure code
.text:0000357C ; Segment permissions: Read/Execute
.text:0000357C _text           segment para public 'CODE' use32
.text:0000357C                 assume cs:_text
.text:0000357C                 ;org 357Ch
.text:0000357C ; COMDAT (pick any)
.text:0000357C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000357C
.text:0000357C ; =============== S U B R O U T I N E =======================================
.text:0000357C
.text:0000357C ; Attributes: bp-based frame
.text:0000357C
.text:0000357C ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:0000357C                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000357C ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000357C                                         ; CODE XREF: NArchive::NLzma::CHandler::CHandler(bool)+64p
.text:0000357C
.text:0000357C var_4           = dword ptr -4
.text:0000357C
.text:0000357C                 push    ebp
.text:0000357D                 mov     ebp, esp
.text:0000357F                 push    ecx
.text:00003580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003587                 mov     [ebp+var_4], ecx
.text:0000358A                 mov     eax, [ebp+var_4]
.text:0000358D                 mov     dword ptr [eax], 0
.text:00003593                 mov     eax, [ebp+var_4]
.text:00003596                 mov     esp, ebp
.text:00003598                 pop     ebp
.text:00003599                 retn
.text:00003599 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00003599
.text:00003599 ; ---------------------------------------------------------------------------
.text:0000359A                 align 4
.text:0000359A _text           ends
.text:0000359A
.text:0000359C ; ===========================================================================
.text:0000359C
.text:0000359C ; Segment type: Pure code
.text:0000359C ; Segment permissions: Read/Execute
.text:0000359C _text           segment para public 'CODE' use32
.text:0000359C                 assume cs:_text
.text:0000359C                 ;org 359Ch
.text:0000359C ; COMDAT (pick any)
.text:0000359C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000359C
.text:0000359C ; =============== S U B R O U T I N E =======================================
.text:0000359C
.text:0000359C ; Attributes: bp-based frame
.text:0000359C
.text:0000359C ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:0000359C                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000359C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000359C                                         ; CODE XREF: __unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0+6j
.text:0000359C                                         ; NArchive::NLzma::CHandler::~CHandler(void)+4Cp ...
.text:0000359C
.text:0000359C var_4           = dword ptr -4
.text:0000359C
.text:0000359C                 push    ebp
.text:0000359D                 mov     ebp, esp
.text:0000359F                 push    ecx
.text:000035A0                 push    esi
.text:000035A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035A8                 mov     [ebp+var_4], ecx
.text:000035AB                 mov     eax, [ebp+var_4]
.text:000035AE                 cmp     dword ptr [eax], 0
.text:000035B1                 jz      short loc_35CE
.text:000035B3                 mov     ecx, [ebp+var_4]
.text:000035B6                 mov     edx, [ecx]
.text:000035B8                 mov     eax, [ebp+var_4]
.text:000035BB                 mov     ecx, [eax]
.text:000035BD                 mov     edx, [edx]
.text:000035BF                 mov     esi, esp
.text:000035C1                 push    ecx
.text:000035C2                 mov     eax, [edx+8]
.text:000035C5                 call    eax
.text:000035C7                 cmp     esi, esp
.text:000035C9                 call    __RTC_CheckEsp
.text:000035CE
.text:000035CE loc_35CE:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:000035CE                 pop     esi
.text:000035CF                 add     esp, 4
.text:000035D2                 cmp     ebp, esp
.text:000035D4                 call    __RTC_CheckEsp
.text:000035D9                 mov     esp, ebp
.text:000035DB                 pop     ebp
.text:000035DC                 retn
.text:000035DC ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:000035DC
.text:000035DC ; ---------------------------------------------------------------------------
.text:000035DD                 align 10h
.text:000035DD _text           ends
.text:000035DD
.text:000035E0 ; ===========================================================================
.text:000035E0
.text:000035E0 ; Segment type: Pure code
.text:000035E0 ; Segment permissions: Read/Execute
.text:000035E0 _text           segment para public 'CODE' use32
.text:000035E0                 assume cs:_text
.text:000035E0                 ;org 35E0h
.text:000035E0 ; COMDAT (pick any)
.text:000035E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035E0
.text:000035E0 ; =============== S U B R O U T I N E =======================================
.text:000035E0
.text:000035E0 ; Attributes: bp-based frame
.text:000035E0
.text:000035E0 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:000035E0                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:000035E0 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:000035E0                                         ; CODE XREF: NArchive::NLzma::CHandler::Close(void)+59p
.text:000035E0
.text:000035E0 var_4           = dword ptr -4
.text:000035E0
.text:000035E0                 push    ebp
.text:000035E1                 mov     ebp, esp
.text:000035E3                 push    ecx
.text:000035E4                 push    esi
.text:000035E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035EC                 mov     [ebp+var_4], ecx
.text:000035EF                 mov     eax, [ebp+var_4]
.text:000035F2                 cmp     dword ptr [eax], 0
.text:000035F5                 jz      short loc_361B
.text:000035F7                 mov     ecx, [ebp+var_4]
.text:000035FA                 mov     edx, [ecx]
.text:000035FC                 mov     eax, [ebp+var_4]
.text:000035FF                 mov     ecx, [eax]
.text:00003601                 mov     edx, [edx]
.text:00003603                 mov     esi, esp
.text:00003605                 push    ecx
.text:00003606                 mov     eax, [edx+8]
.text:00003609                 call    eax
.text:0000360B                 cmp     esi, esp
.text:0000360D                 call    __RTC_CheckEsp
.text:00003612                 mov     ecx, [ebp+var_4]
.text:00003615                 mov     dword ptr [ecx], 0
.text:0000361B
.text:0000361B loc_361B:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:0000361B                 pop     esi
.text:0000361C                 add     esp, 4
.text:0000361F                 cmp     ebp, esp
.text:00003621                 call    __RTC_CheckEsp
.text:00003626                 mov     esp, ebp
.text:00003628                 pop     ebp
.text:00003629                 retn
.text:00003629 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:00003629
.text:00003629 ; ---------------------------------------------------------------------------
.text:0000362A                 align 4
.text:0000362A _text           ends
.text:0000362A
.text:0000362C ; ===========================================================================
.text:0000362C
.text:0000362C ; Segment type: Pure code
.text:0000362C ; Segment permissions: Read/Execute
.text:0000362C _text           segment para public 'CODE' use32
.text:0000362C                 assume cs:_text
.text:0000362C                 ;org 362Ch
.text:0000362C ; COMDAT (pick any)
.text:0000362C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000362C
.text:0000362C ; =============== S U B R O U T I N E =======================================
.text:0000362C
.text:0000362C ; Attributes: bp-based frame
.text:0000362C
.text:0000362C ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:0000362C                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:0000362C ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:0000362C                                         ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4Bp
.text:0000362C                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A4p
.text:0000362C
.text:0000362C var_4           = dword ptr -4
.text:0000362C
.text:0000362C                 push    ebp
.text:0000362D                 mov     ebp, esp
.text:0000362F                 push    ecx
.text:00003630                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003637                 mov     [ebp+var_4], ecx
.text:0000363A                 mov     eax, [ebp+var_4]
.text:0000363D                 mov     eax, [eax]
.text:0000363F                 mov     esp, ebp
.text:00003641                 pop     ebp
.text:00003642                 retn
.text:00003642 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00003642
.text:00003642 ; ---------------------------------------------------------------------------
.text:00003643                 align 4
.text:00003643 _text           ends
.text:00003643
.text:00003644 ; ===========================================================================
.text:00003644
.text:00003644 ; Segment type: Pure code
.text:00003644 ; Segment permissions: Read/Execute
.text:00003644 _text           segment para public 'CODE' use32
.text:00003644                 assume cs:_text
.text:00003644                 ;org 3644h
.text:00003644 ; COMDAT (pick any)
.text:00003644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003644
.text:00003644 ; =============== S U B R O U T I N E =======================================
.text:00003644
.text:00003644 ; Attributes: bp-based frame
.text:00003644
.text:00003644 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00003644                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00003644 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00003644                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+31Ep
.text:00003644
.text:00003644 var_4           = dword ptr -4
.text:00003644
.text:00003644                 push    ebp
.text:00003645                 mov     ebp, esp
.text:00003647                 push    ecx
.text:00003648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000364F                 mov     [ebp+var_4], ecx
.text:00003652                 mov     eax, [ebp+var_4]
.text:00003655                 mov     eax, [eax]
.text:00003657                 mov     esp, ebp
.text:00003659                 pop     ebp
.text:0000365A                 retn
.text:0000365A ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000365A
.text:0000365A ; ---------------------------------------------------------------------------
.text:0000365B                 align 4
.text:0000365B _text           ends
.text:0000365B
.text:0000365C ; ===========================================================================
.text:0000365C
.text:0000365C ; Segment type: Pure code
.text:0000365C ; Segment permissions: Read/Execute
.text:0000365C _text           segment para public 'CODE' use32
.text:0000365C                 assume cs:_text
.text:0000365C                 ;org 365Ch
.text:0000365C ; COMDAT (pick any)
.text:0000365C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000365C
.text:0000365C ; =============== S U B R O U T I N E =======================================
.text:0000365C
.text:0000365C ; Attributes: bp-based frame
.text:0000365C
.text:0000365C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:0000365C                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:0000365C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:0000365C                                         ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+136p
.text:0000365C
.text:0000365C var_4           = dword ptr -4
.text:0000365C arg_0           = dword ptr  8
.text:0000365C
.text:0000365C                 push    ebp
.text:0000365D                 mov     ebp, esp
.text:0000365F                 push    ecx
.text:00003660                 push    esi
.text:00003661                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003668                 mov     [ebp+var_4], ecx
.text:0000366B                 cmp     [ebp+arg_0], 0
.text:0000366F                 jz      short loc_3688
.text:00003671                 mov     eax, [ebp+arg_0]
.text:00003674                 mov     ecx, [eax]
.text:00003676                 mov     esi, esp
.text:00003678                 mov     edx, [ebp+arg_0]
.text:0000367B                 push    edx
.text:0000367C                 mov     eax, [ecx+4]
.text:0000367F                 call    eax
.text:00003681                 cmp     esi, esp
.text:00003683                 call    __RTC_CheckEsp
.text:00003688
.text:00003688 loc_3688:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00003688                 mov     ecx, [ebp+var_4]
.text:0000368B                 cmp     dword ptr [ecx], 0
.text:0000368E                 jz      short loc_36AB
.text:00003690                 mov     edx, [ebp+var_4]
.text:00003693                 mov     eax, [edx]
.text:00003695                 mov     ecx, [ebp+var_4]
.text:00003698                 mov     edx, [ecx]
.text:0000369A                 mov     eax, [eax]
.text:0000369C                 mov     esi, esp
.text:0000369E                 push    edx
.text:0000369F                 mov     ecx, [eax+8]
.text:000036A2                 call    ecx
.text:000036A4                 cmp     esi, esp
.text:000036A6                 call    __RTC_CheckEsp
.text:000036AB
.text:000036AB loc_36AB:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:000036AB                 mov     edx, [ebp+var_4]
.text:000036AE                 mov     eax, [ebp+arg_0]
.text:000036B1                 mov     [edx], eax
.text:000036B3                 mov     eax, [ebp+arg_0]
.text:000036B6                 pop     esi
.text:000036B7                 add     esp, 4
.text:000036BA                 cmp     ebp, esp
.text:000036BC                 call    __RTC_CheckEsp
.text:000036C1                 mov     esp, ebp
.text:000036C3                 pop     ebp
.text:000036C4                 retn    4
.text:000036C4 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:000036C4
.text:000036C4 ; ---------------------------------------------------------------------------
.text:000036C7                 align 4
.text:000036C7 _text           ends
.text:000036C7
.text:000036C8 ; ===========================================================================
.text:000036C8
.text:000036C8 ; Segment type: Pure code
.text:000036C8 ; Segment permissions: Read/Execute
.text:000036C8 _text           segment para public 'CODE' use32
.text:000036C8                 assume cs:_text
.text:000036C8                 ;org 36C8h
.text:000036C8 ; COMDAT (pick any)
.text:000036C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036C8
.text:000036C8 ; =============== S U B R O U T I N E =======================================
.text:000036C8
.text:000036C8 ; Attributes: bp-based frame
.text:000036C8
.text:000036C8 ; public: bool __thiscall CMyComPtr<struct IInStream>::operator!(void)const
.text:000036C8                 public ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
.text:000036C8 ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ proc near
.text:000036C8                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C9p
.text:000036C8
.text:000036C8 var_4           = dword ptr -4
.text:000036C8
.text:000036C8                 push    ebp
.text:000036C9                 mov     ebp, esp
.text:000036CB                 push    ecx
.text:000036CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036D3                 mov     [ebp+var_4], ecx
.text:000036D6                 mov     eax, [ebp+var_4]
.text:000036D9                 xor     ecx, ecx
.text:000036DB                 cmp     dword ptr [eax], 0
.text:000036DE                 setz    cl
.text:000036E1                 mov     al, cl
.text:000036E3                 mov     esp, ebp
.text:000036E5                 pop     ebp
.text:000036E6                 retn
.text:000036E6 ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ endp
.text:000036E6
.text:000036E6 ; ---------------------------------------------------------------------------
.text:000036E7                 align 4
.text:000036E7 _text           ends
.text:000036E7
.text:000036E8 ; ===========================================================================
.text:000036E8
.text:000036E8 ; Segment type: Pure code
.text:000036E8 ; Segment permissions: Read/Execute
.text:000036E8 _text           segment para public 'CODE' use32
.text:000036E8                 assume cs:_text
.text:000036E8                 ;org 36E8h
.text:000036E8 ; COMDAT (pick any)
.text:000036E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036E8
.text:000036E8 ; =============== S U B R O U T I N E =======================================
.text:000036E8
.text:000036E8 ; Attributes: bp-based frame
.text:000036E8
.text:000036E8 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator struct IArchiveOpenCallback *(void)const
.text:000036E8                 public ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:000036E8 ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:000036E8                                         ; CODE XREF: NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+2Dp
.text:000036E8
.text:000036E8 var_4           = dword ptr -4
.text:000036E8
.text:000036E8                 push    ebp
.text:000036E9                 mov     ebp, esp
.text:000036EB                 push    ecx
.text:000036EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036F3                 mov     [ebp+var_4], ecx
.text:000036F6                 mov     eax, [ebp+var_4]
.text:000036F9                 mov     eax, [eax]
.text:000036FB                 mov     esp, ebp
.text:000036FD                 pop     ebp
.text:000036FE                 retn
.text:000036FE ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:000036FE
.text:000036FE ; ---------------------------------------------------------------------------
.text:000036FF                 align 10h
.text:000036FF _text           ends
.text:000036FF
.text:00003700 ; ===========================================================================
.text:00003700
.text:00003700 ; Segment type: Pure code
.text:00003700 ; Segment permissions: Read/Execute
.text:00003700 _text           segment para public 'CODE' use32
.text:00003700                 assume cs:_text
.text:00003700                 ;org 3700h
.text:00003700 ; COMDAT (pick any)
.text:00003700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003700
.text:00003700 ; =============== S U B R O U T I N E =======================================
.text:00003700
.text:00003700 ; Attributes: bp-based frame
.text:00003700
.text:00003700 ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator->(void)const
.text:00003700                 public ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00003700 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00003700                                         ; CODE XREF: NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+61p
.text:00003700
.text:00003700 var_4           = dword ptr -4
.text:00003700
.text:00003700                 push    ebp
.text:00003701                 mov     ebp, esp
.text:00003703                 push    ecx
.text:00003704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000370B                 mov     [ebp+var_4], ecx
.text:0000370E                 mov     eax, [ebp+var_4]
.text:00003711                 mov     eax, [eax]
.text:00003713                 mov     esp, ebp
.text:00003715                 pop     ebp
.text:00003716                 retn
.text:00003716 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00003716
.text:00003716 ; ---------------------------------------------------------------------------
.text:00003717                 align 4
.text:00003717 _text           ends
.text:00003717
.text:00003718 ; ===========================================================================
.text:00003718
.text:00003718 ; Segment type: Pure code
.text:00003718 ; Segment permissions: Read/Execute
.text:00003718 _text           segment para public 'CODE' use32
.text:00003718                 assume cs:_text
.text:00003718                 ;org 3718h
.text:00003718 ; COMDAT (pick any)
.text:00003718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003718
.text:00003718 ; =============== S U B R O U T I N E =======================================
.text:00003718
.text:00003718 ; Attributes: bp-based frame
.text:00003718
.text:00003718 ; public: long __thiscall CMyComPtr<struct ICompressCoder>::QueryInterface<struct ICompressSetDecoderProperties2>(struct _GUID const &, struct ICompressSetDecoderProperties2 * *)const
.text:00003718                 public ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z
.text:00003718 ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z proc near
.text:00003718                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+74p
.text:00003718
.text:00003718 var_4           = dword ptr -4
.text:00003718 arg_0           = dword ptr  8
.text:00003718 arg_4           = dword ptr  0Ch
.text:00003718
.text:00003718                 push    ebp
.text:00003719                 mov     ebp, esp
.text:0000371B                 push    ecx
.text:0000371C                 push    esi
.text:0000371D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003724                 mov     [ebp+var_4], ecx
.text:00003727                 mov     esi, esp
.text:00003729                 mov     eax, [ebp+arg_4]
.text:0000372C                 push    eax
.text:0000372D                 mov     ecx, [ebp+arg_0]
.text:00003730                 push    ecx
.text:00003731                 mov     edx, [ebp+var_4]
.text:00003734                 mov     eax, [edx]
.text:00003736                 mov     ecx, [ebp+var_4]
.text:00003739                 mov     edx, [ecx]
.text:0000373B                 mov     eax, [eax]
.text:0000373D                 push    edx
.text:0000373E                 mov     ecx, [eax]
.text:00003740                 call    ecx
.text:00003742                 cmp     esi, esp
.text:00003744                 call    __RTC_CheckEsp
.text:00003749                 pop     esi
.text:0000374A                 add     esp, 4
.text:0000374D                 cmp     ebp, esp
.text:0000374F                 call    __RTC_CheckEsp
.text:00003754                 mov     esp, ebp
.text:00003756                 pop     ebp
.text:00003757                 retn    8
.text:00003757 ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z endp
.text:00003757
.text:00003757 ; ---------------------------------------------------------------------------
.text:0000375A                 align 4
.text:0000375A _text           ends
.text:0000375A
.text:0000375C ; ===========================================================================
.text:0000375C
.text:0000375C ; Segment type: Pure code
.text:0000375C ; Segment permissions: Read/Execute
.text:0000375C _text           segment para public 'CODE' use32
.text:0000375C                 assume cs:_text
.text:0000375C                 ;org 375Ch
.text:0000375C ; COMDAT (pick any)
.text:0000375C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000375C
.text:0000375C ; =============== S U B R O U T I N E =======================================
.text:0000375C
.text:0000375C
.text:0000375C ; [thunk]:public: virtual long __stdcall NArchive::NLzma::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000375C                 public ?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000375C ?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000375C                                         ; DATA XREF: .rdata:const NArchive::NLzma::CHandler::`vftable'{for `IArchiveOpenSeq'}o
.text:0000375C
.text:0000375C arg_0           = dword ptr  4
.text:0000375C
.text:0000375C                 sub     [esp+arg_0], 4
.text:00003761                 jmp     ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *)
.text:00003761 ?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00003761
.text:00003761 ; ---------------------------------------------------------------------------
.text:00003766                 align 4
.text:00003766 _text           ends
.text:00003766
.text:00003768 ; ===========================================================================
.text:00003768
.text:00003768 ; Segment type: Pure code
.text:00003768 ; Segment permissions: Read/Execute
.text:00003768 _text           segment para public 'CODE' use32
.text:00003768                 assume cs:_text
.text:00003768                 ;org 3768h
.text:00003768 ; COMDAT (pick any)
.text:00003768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003768
.text:00003768 ; =============== S U B R O U T I N E =======================================
.text:00003768
.text:00003768
.text:00003768 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NLzma::CHandler::Release`adjustor{4}' (void)
.text:00003768                 public ?Release@CHandler@NLzma@NArchive@@W3AGKXZ
.text:00003768 ?Release@CHandler@NLzma@NArchive@@W3AGKXZ proc near
.text:00003768                                         ; DATA XREF: .rdata:00002A44o
.text:00003768
.text:00003768 arg_0           = dword ptr  4
.text:00003768
.text:00003768                 sub     [esp+arg_0], 4
.text:0000376D                 jmp     ?Release@CHandler@NLzma@NArchive@@UAGKXZ ; NArchive::NLzma::CHandler::Release(void)
.text:0000376D ?Release@CHandler@NLzma@NArchive@@W3AGKXZ endp
.text:0000376D
.text:0000376D ; ---------------------------------------------------------------------------
.text:00003772                 align 4
.text:00003772 _text           ends
.text:00003772
.text:00003774 ; ===========================================================================
.text:00003774
.text:00003774 ; Segment type: Pure code
.text:00003774 ; Segment permissions: Read/Execute
.text:00003774 _text           segment para public 'CODE' use32
.text:00003774                 assume cs:_text
.text:00003774                 ;org 3774h
.text:00003774 ; COMDAT (pick any)
.text:00003774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003774
.text:00003774 ; =============== S U B R O U T I N E =======================================
.text:00003774
.text:00003774
.text:00003774 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NLzma::CHandler::AddRef`adjustor{4}' (void)
.text:00003774                 public ?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ
.text:00003774 ?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ proc near
.text:00003774                                         ; DATA XREF: .rdata:00002A40o
.text:00003774
.text:00003774 arg_0           = dword ptr  4
.text:00003774
.text:00003774                 sub     [esp+arg_0], 4
.text:00003779                 jmp     ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ ; NArchive::NLzma::CHandler::AddRef(void)
.text:00003779 ?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ endp
.text:00003779
.text:00003779 ; ---------------------------------------------------------------------------
.text:0000377E                 align 10h
.text:0000377E _text           ends
.text:0000377E
.text$yc:00003780 ; ===========================================================================
.text$yc:00003780
.text$yc:00003780 ; Segment type: Pure code
.text$yc:00003780 ; Segment permissions: Read/Execute
.text$yc:00003780 _text$yc        segment para public 'CODE' use32
.text$yc:00003780                 assume cs:_text$yc
.text$yc:00003780                 ;org 3780h
.text$yc:00003780 ; COMDAT (pick any)
.text$yc:00003780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00003780
.text$yc:00003780 ; =============== S U B R O U T I N E =======================================
.text$yc:00003780
.text$yc:00003780 ; Attributes: bp-based frame
.text$yc:00003780
.text$yc:00003780 ; void __cdecl NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:00003780 ??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ proc near
.text$yc:00003780                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:00003780                 push    ebp
.text$yc:00003781                 mov     ebp, esp
.text$yc:00003783                 mov     ecx, offset _g_RegisterArc_0 ; this
.text$yc:00003788                 call    ??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc(void)
.text$yc:0000378D                 cmp     ebp, esp
.text$yc:0000378F                 call    __RTC_CheckEsp
.text$yc:00003794                 pop     ebp
.text$yc:00003795                 retn
.text$yc:00003795 ??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ endp
.text$yc:00003795
.text$yc:00003795 ; ---------------------------------------------------------------------------
.text$yc:00003796                 align 4
.text$yc:00003796 _text$yc        ends
.text$yc:00003796
.text:00003798 ; ===========================================================================
.text:00003798
.text:00003798 ; Segment type: Pure code
.text:00003798 ; Segment permissions: Read/Execute
.text:00003798 _text           segment para public 'CODE' use32
.text:00003798                 assume cs:_text
.text:00003798                 ;org 3798h
.text:00003798 ; COMDAT (pick any)
.text:00003798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003798
.text:00003798 ; =============== S U B R O U T I N E =======================================
.text:00003798
.text:00003798 ; Attributes: bp-based frame
.text:00003798
.text:00003798 ; _DWORD __thiscall NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc(NArchive::NLzma::NLzmaAr::CRegisterArc *__hidden this)
.text:00003798                 public ??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ
.text:00003798 ??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ proc near
.text:00003798                                         ; CODE XREF: NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00003798
.text:00003798 var_4           = dword ptr -4
.text:00003798
.text:00003798                 push    ebp
.text:00003799                 mov     ebp, esp
.text:0000379B                 push    ecx
.text:0000379C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037A3                 mov     [ebp+var_4], ecx
.text:000037A6                 push    offset _g_ArcInfo ; "A\n"
.text:000037AB                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:000037B0                 mov     eax, [ebp+var_4]
.text:000037B3                 add     esp, 4
.text:000037B6                 cmp     ebp, esp
.text:000037B8                 call    __RTC_CheckEsp
.text:000037BD                 mov     esp, ebp
.text:000037BF                 pop     ebp
.text:000037C0                 retn
.text:000037C0 ??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ endp
.text:000037C0
.text:000037C0 ; ---------------------------------------------------------------------------
.text:000037C1                 align 4
.text:000037C1 _text           ends
.text:000037C1
.text$yc:000037C4 ; ===========================================================================
.text$yc:000037C4
.text$yc:000037C4 ; Segment type: Pure code
.text$yc:000037C4 ; Segment permissions: Read/Execute
.text$yc:000037C4 _text$yc        segment para public 'CODE' use32
.text$yc:000037C4                 assume cs:_text$yc
.text$yc:000037C4                 ;org 37C4h
.text$yc:000037C4 ; COMDAT (pick any)
.text$yc:000037C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000037C4
.text$yc:000037C4 ; =============== S U B R O U T I N E =======================================
.text$yc:000037C4
.text$yc:000037C4 ; Attributes: bp-based frame
.text$yc:000037C4
.text$yc:000037C4 ; void __cdecl NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:000037C4 ??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ proc near
.text$yc:000037C4                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$_0o
.text$yc:000037C4                 push    ebp
.text$yc:000037C5                 mov     ebp, esp
.text$yc:000037C7                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:000037CC                 call    ??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc(void)
.text$yc:000037D1                 cmp     ebp, esp
.text$yc:000037D3                 call    __RTC_CheckEsp
.text$yc:000037D8                 pop     ebp
.text$yc:000037D9                 retn
.text$yc:000037D9 ??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ endp
.text$yc:000037D9
.text$yc:000037D9 ; ---------------------------------------------------------------------------
.text$yc:000037DA                 align 4
.text$yc:000037DA _text$yc        ends
.text$yc:000037DA
.text:000037DC ; ===========================================================================
.text:000037DC
.text:000037DC ; Segment type: Pure code
.text:000037DC ; Segment permissions: Read/Execute
.text:000037DC _text           segment para public 'CODE' use32
.text:000037DC                 assume cs:_text
.text:000037DC                 ;org 37DCh
.text:000037DC ; COMDAT (pick any)
.text:000037DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037DC
.text:000037DC ; =============== S U B R O U T I N E =======================================
.text:000037DC
.text:000037DC ; Attributes: bp-based frame
.text:000037DC
.text:000037DC ; _DWORD __thiscall NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc(NArchive::NLzma::NLzma86Ar::CRegisterArc *__hidden this)
.text:000037DC                 public ??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ
.text:000037DC ??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ proc near
.text:000037DC                                         ; CODE XREF: NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:000037DC
.text:000037DC var_4           = dword ptr -4
.text:000037DC
.text:000037DC                 push    ebp
.text:000037DD                 mov     ebp, esp
.text:000037DF                 push    ecx
.text:000037E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037E7                 mov     [ebp+var_4], ecx
.text:000037EA                 push    offset _g_ArcInfo_0 ; struct CArcInfo *
.text:000037EF                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:000037F4                 mov     eax, [ebp+var_4]
.text:000037F7                 add     esp, 4
.text:000037FA                 cmp     ebp, esp
.text:000037FC                 call    __RTC_CheckEsp
.text:00003801                 mov     esp, ebp
.text:00003803                 pop     ebp
.text:00003804                 retn
.text:00003804 ??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ endp
.text:00003804
.text:00003804 ; ---------------------------------------------------------------------------
.text:00003805                 align 4
.text:00003805 _text           ends
.text:00003805
.bss:00003808 ; ===========================================================================
.bss:00003808
.bss:00003808 ; Segment type: Uninitialized
.bss:00003808 ; Segment permissions: Read/Write
.bss:00003808 _bss            segment byte public 'BSS' use32
.bss:00003808                 assume cs:_bss
.bss:00003808                 ;org 3808h
.bss:00003808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00003808 ; NArchive::NLzma::NLzmaAr::CRegisterArc g_RegisterArc_0
.bss:00003808 _g_RegisterArc_0 db    ? ;              ; DATA XREF: NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00003809 ; NArchive::NLzma::NLzma86Ar::CRegisterArc g_RegisterArc
.bss:00003809 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:0000380A                 align 4
.bss:0000380A _bss            ends
.bss:0000380A
.CRT$XCU:0000380C ; ===========================================================================
.CRT$XCU:0000380C
.CRT$XCU:0000380C ; Segment type: Pure data
.CRT$XCU:0000380C ; Segment permissions: Read
.CRT$XCU:0000380C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000380C                 assume cs:_CRT$XCU
.CRT$XCU:0000380C                 ;org 380Ch
.CRT$XCU:0000380C _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ ; NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00003810 _g_RegisterArc$initializer$_0 dd offset ??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ ; NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00003810 _CRT$XCU        ends
.CRT$XCU:00003810
UNDEF:00003820 ; ===========================================================================
UNDEF:00003820
UNDEF:00003820 ; Segment type: Externs
UNDEF:00003820 ; UNDEF
UNDEF:00003820                 extrn __RTC_CheckEsp:near
UNDEF:00003820                                         ; CODE XREF: NArchive::NLzma::CHeader::Parse(uchar const *,bool)+F4p
UNDEF:00003820                                         ; NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+1D9p ...
UNDEF:00003824                 extrn __RTC_Shutdown:near
UNDEF:00003824                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003828                 extrn __RTC_InitBase:near
UNDEF:00003828                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000382C ; void __cdecl operator delete(void *)
UNDEF:0000382C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0+4p
UNDEF:0000382C                                         ; __unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1+4p ...
UNDEF:00003830 ; _DWORD __thiscall CFilterCoder::CFilterCoder(CFilterCoder *__hidden this, bool)
UNDEF:00003830                 extrn ??0CFilterCoder@@QAE@_N@Z:near
UNDEF:00003830                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+F4p
UNDEF:00003834 ; _DWORD __thiscall NCompress::NLzma::CDecoder::CDecoder(NCompress::NLzma::CDecoder *__hidden this)
UNDEF:00003834                 extrn ??0CDecoder@NLzma@NCompress@@QAE@XZ:near
UNDEF:00003834                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+6Dp
UNDEF:00003838 ; void *__cdecl operator new(unsigned int)
UNDEF:00003838                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+52p
UNDEF:00003838                                         ; NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+D7p ...
UNDEF:0000383C                 extrn ___security_cookie:near
UNDEF:0000383C                                         ; DATA XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+27r
UNDEF:0000383C                                         ; NArchive::NLzma::CDecoder::~CDecoder(void)+19r ...
UNDEF:00003840                 extrn ___CxxFrameHandler3:near
UNDEF:00003840                                         ; CODE XREF: __ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z+16j
UNDEF:00003840                                         ; __ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ+16j ...
UNDEF:00003844 ; __fastcall __security_check_cookie(x)
UNDEF:00003844                 extrn @__security_check_cookie@4:near
UNDEF:00003844                                         ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+136p
UNDEF:00003844                                         ; NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+16Bp ...
UNDEF:00003848 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003848                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003848                                         ; CODE XREF: NArchive::NLzma::CDecoder::Create(bool,ISequentialInStream *)+1E8p
UNDEF:00003848                                         ; NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+28Dp ...
UNDEF:0000384C ; const type_info::`vftable'
UNDEF:0000384C                 extrn ??_7type_info@@6B@:near
UNDEF:0000384C                                         ; DATA XREF: .data:CBcjCoder `RTTI Type Descriptor'o
UNDEF:0000384C                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00003850 ; public: virtual long __stdcall CBcjCoder::Init(void)
UNDEF:00003850                 extrn ?Init@CBcjCoder@@UAGJXZ:near
UNDEF:00003850                                         ; DATA XREF: .rdata:0000202Co
UNDEF:00003854 ; public: virtual unsigned int __stdcall CBcjCoder::Filter(unsigned char *, unsigned int)
UNDEF:00003854                 extrn ?Filter@CBcjCoder@@UAGIPAEI@Z:near
UNDEF:00003854                                         ; DATA XREF: .rdata:00002030o
UNDEF:00003858 ; const IID IID_IUnknown
UNDEF:00003858                 extrn _IID_IUnknown:near
UNDEF:00003858                                         ; DATA XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00003858                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:0000385C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000385C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00003860                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:00003860                                         ; .rdata:00002320o ...
UNDEF:00003864 ; __int32 __thiscall NCompress::NLzma::CDecoder::CodeResume(NCompress::NLzma::CDecoder *__hidden this, struct ISequentialOutStream *, const unsigned __int64 *, struct ICompressProgressInfo *)
UNDEF:00003864                 extrn ?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:near
UNDEF:00003864                                         ; CODE XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+1BEp
UNDEF:00003868                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00003868                                         ; DATA XREF: NArchive::NLzma::CDecoder::Code(NArchive::NLzma::CHeader const &,ISequentialOutStream *,ICompressProgressInfo *)+69o
UNDEF:0000386C ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:0000386C                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:0000386C                                         ; DATA XREF: NArchive::NLzma::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000386C                                         ; NArchive::NLzma::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00003870 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00003870                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00003870                                         ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+140p
UNDEF:00003870                                         ; NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108p
UNDEF:00003874 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:00003874                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:00003874                                         ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+134p
UNDEF:00003878 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00003878                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00003878                                         ; CODE XREF: NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+71p
UNDEF:00003878                                         ; NArchive::NLzma::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+94p ...
UNDEF:0000387C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000387C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000387C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00003880 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:00003880                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:00003880                                         ; CODE XREF: NArchive::NLzma::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+FCp
UNDEF:00003884 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00003884                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00003884                                         ; CODE XREF: NArchive::NLzma::DictSizeToString(uint,char *)+43p
UNDEF:00003884                                         ; NArchive::NLzma::DictSizeToString(uint,char *)+8Ap
UNDEF:00003888 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00003888                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00003888                                         ; CODE XREF: NArchive::NLzma::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+49p
UNDEF:0000388C ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0000388C                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0000388C                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4A5p
UNDEF:00003890 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00003890                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00003890                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2AFp
UNDEF:00003894 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00003894                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00003894                                         ; CODE XREF: NArchive::NLzma::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+25Ap
UNDEF:00003898 ; __int32 __thiscall NCompress::NLzma::CDecoder::ReadFromInputStream(NCompress::NLzma::CDecoder *__hidden this, void *, unsigned int, unsigned int *)
UNDEF:00003898                 extrn ?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z:near
UNDEF:00003898                                         ; CODE XREF: NArchive::NLzma::CDecoder::ReadInput(uchar *,uint,uint *)+20p
UNDEF:0000389C ; public: virtual long __stdcall CDummyOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:0000389C                 extrn ?Write@CDummyOutStream@@UAGJPBXIPAI@Z:near
UNDEF:0000389C                                         ; DATA XREF: .rdata:00002628o
UNDEF:000038A0                 extrn _IID_IArchiveOpenSeq:near
UNDEF:000038A0                                         ; DATA XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *):loc_2CB0o
UNDEF:000038A4                 extrn _IID_IInArchive:near
UNDEF:000038A4                                         ; DATA XREF: NArchive::NLzma::CHandler::QueryInterface(_GUID const &,void * *):loc_2C94o
UNDEF:000038A8 ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:000038A8                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:000038A8                                         ; CODE XREF: NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc(void)+13p
UNDEF:000038A8                                         ; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc(void)+13p
UNDEF:000038A8
UNDEF:000038A8
UNDEF:000038A8                 end