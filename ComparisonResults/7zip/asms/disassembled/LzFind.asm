.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : D16F2A1DB460A6DF513874653016B920
.text:00000000 ; Input CRC32 : 227468E2
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzFind.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall MatchFinder_GetPointerToCurrentPos(x)
.text:00000000                 public _MatchFinder_GetPointerToCurrentPos@4
.text:00000000 _MatchFinder_GetPointerToCurrentPos@4 proc near
.text:00000000                                         ; DATA XREF: MatchFinder_CreateVTable(x,x)+19o
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 mov     eax, [eax]
.text:00000008                 pop     ebp
.text:00000009                 retn    4
.text:00000009 _MatchFinder_GetPointerToCurrentPos@4 endp
.text:00000009
.text:00000009 ; ---------------------------------------------------------------------------
.text:0000000C                 align 10h
.text:00000010
.text:00000010 ; =============== S U B R O U T I N E =======================================
.text:00000010
.text:00000010 ; Attributes: bp-based frame
.text:00000010
.text:00000010 ; __stdcall MatchFinder_GetNumAvailableBytes(x)
.text:00000010                 public _MatchFinder_GetNumAvailableBytes@4
.text:00000010 _MatchFinder_GetNumAvailableBytes@4 proc near
.text:00000010                                         ; DATA XREF: MatchFinder_CreateVTable(x,x)+Fo
.text:00000010
.text:00000010 arg_0           = dword ptr  8
.text:00000010
.text:00000010                 push    ebp
.text:00000011                 mov     ebp, esp
.text:00000013                 mov     eax, [ebp+arg_0]
.text:00000016                 mov     ecx, [ebp+arg_0]
.text:00000019                 mov     eax, [eax+0Ch]
.text:0000001C                 sub     eax, [ecx+4]
.text:0000001F                 pop     ebp
.text:00000020                 retn    4
.text:00000020 _MatchFinder_GetNumAvailableBytes@4 endp
.text:00000020
.text:00000020 ; ---------------------------------------------------------------------------
.text:00000023                 align 10h
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; __stdcall MatchFinder_ReduceOffsets(x, x)
.text:00000030                 public _MatchFinder_ReduceOffsets@8
.text:00000030 _MatchFinder_ReduceOffsets@8 proc near  ; CODE XREF: MatchFinder_Normalize(x)+39p
.text:00000030
.text:00000030 arg_0           = dword ptr  8
.text:00000030 arg_4           = dword ptr  0Ch
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 mov     eax, [ebp+arg_0]
.text:00000036                 mov     ecx, [eax+8]
.text:00000039                 sub     ecx, [ebp+arg_4]
.text:0000003C                 mov     edx, [ebp+arg_0]
.text:0000003F                 mov     [edx+8], ecx
.text:00000042                 mov     eax, [ebp+arg_0]
.text:00000045                 mov     ecx, [eax+4]
.text:00000048                 sub     ecx, [ebp+arg_4]
.text:0000004B                 mov     edx, [ebp+arg_0]
.text:0000004E                 mov     [edx+4], ecx
.text:00000051                 mov     eax, [ebp+arg_0]
.text:00000054                 mov     ecx, [eax+0Ch]
.text:00000057                 sub     ecx, [ebp+arg_4]
.text:0000005A                 mov     edx, [ebp+arg_0]
.text:0000005D                 mov     [edx+0Ch], ecx
.text:00000060                 pop     ebp
.text:00000061                 retn    8
.text:00000061 _MatchFinder_ReduceOffsets@8 endp
.text:00000061
.text:00000061 ; ---------------------------------------------------------------------------
.text:00000064                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; __stdcall MatchFinder_MoveBlock(x)
.text:00000070                 public _MatchFinder_MoveBlock@4
.text:00000070 _MatchFinder_MoveBlock@4 proc near      ; CODE XREF: MatchFinder_CheckAndMoveAndRead(x)+14p
.text:00000070
.text:00000070 arg_0           = dword ptr  8
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 push    esi
.text:00000074                 mov     eax, [ebp+arg_0]
.text:00000077                 mov     ecx, [ebp+arg_0]
.text:0000007A                 mov     edx, [eax+0Ch]
.text:0000007D                 sub     edx, [ecx+4]
.text:00000080                 mov     eax, [ebp+arg_0]
.text:00000083                 add     edx, [eax+40h]
.text:00000086                 mov     esi, esp
.text:00000088                 push    edx             ; Size
.text:00000089                 mov     ecx, [ebp+arg_0]
.text:0000008C                 mov     edx, [ebp+arg_0]
.text:0000008F                 mov     eax, [ecx]
.text:00000091                 sub     eax, [edx+40h]
.text:00000094                 push    eax             ; Src
.text:00000095                 mov     ecx, [ebp+arg_0]
.text:00000098                 mov     edx, [ecx+34h]
.text:0000009B                 push    edx             ; Dst
.text:0000009C                 call    dword ptr ds:__imp__memmove
.text:000000A2                 add     esp, 0Ch
.text:000000A5                 cmp     esi, esp
.text:000000A7                 call    __RTC_CheckEsp
.text:000000AC                 mov     eax, [ebp+arg_0]
.text:000000AF                 mov     ecx, [eax+34h]
.text:000000B2                 mov     edx, [ebp+arg_0]
.text:000000B5                 add     ecx, [edx+40h]
.text:000000B8                 mov     eax, [ebp+arg_0]
.text:000000BB                 mov     [eax], ecx
.text:000000BD                 pop     esi
.text:000000BE                 cmp     ebp, esp
.text:000000C0                 call    __RTC_CheckEsp
.text:000000C5                 pop     ebp
.text:000000C6                 retn    4
.text:000000C6 _MatchFinder_MoveBlock@4 endp
.text:000000C6
.text:000000C6 ; ---------------------------------------------------------------------------
.text:000000C9                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __stdcall MatchFinder_NeedMove(x)
.text:000000D0                 public _MatchFinder_NeedMove@4
.text:000000D0 _MatchFinder_NeedMove@4 proc near       ; CODE XREF: MatchFinder_CheckAndMoveAndRead(x)+7p
.text:000000D0
.text:000000D0 arg_0           = dword ptr  8
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 mov     eax, [ebp+arg_0]
.text:000000D6                 movzx   ecx, byte ptr [eax+1Fh]
.text:000000DA                 test    ecx, ecx
.text:000000DC                 jz      short loc_E2
.text:000000DE                 xor     eax, eax
.text:000000E0                 jmp     short loc_FE
.text:000000E2 ; ---------------------------------------------------------------------------
.text:000000E2
.text:000000E2 loc_E2:                                 ; CODE XREF: MatchFinder_NeedMove(x)+Cj
.text:000000E2                 mov     edx, [ebp+arg_0]
.text:000000E5                 mov     eax, [edx+34h]
.text:000000E8                 mov     ecx, [ebp+arg_0]
.text:000000EB                 add     eax, [ecx+3Ch]
.text:000000EE                 mov     edx, [ebp+arg_0]
.text:000000F1                 sub     eax, [edx]
.text:000000F3                 mov     ecx, [ebp+arg_0]
.text:000000F6                 cmp     [ecx+44h], eax
.text:000000F9                 sbb     eax, eax
.text:000000FB                 add     eax, 1
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: MatchFinder_NeedMove(x)+10j
.text:000000FE                 pop     ebp
.text:000000FF                 retn    4
.text:000000FF _MatchFinder_NeedMove@4 endp
.text:000000FF
.text:000000FF ; ---------------------------------------------------------------------------
.text:00000102                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; __stdcall MatchFinder_ReadIfRequired(x)
.text:00000110                 public _MatchFinder_ReadIfRequired@4
.text:00000110 _MatchFinder_ReadIfRequired@4 proc near
.text:00000110
.text:00000110 arg_0           = dword ptr  8
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 mov     eax, [ebp+arg_0]
.text:00000116                 movzx   ecx, byte ptr [eax+1Ch]
.text:0000011A                 test    ecx, ecx
.text:0000011C                 jz      short loc_120
.text:0000011E                 jmp     short loc_13D
.text:00000120 ; ---------------------------------------------------------------------------
.text:00000120
.text:00000120 loc_120:                                ; CODE XREF: MatchFinder_ReadIfRequired(x)+Cj
.text:00000120                 mov     edx, [ebp+arg_0]
.text:00000123                 mov     eax, [ebp+arg_0]
.text:00000126                 mov     ecx, [edx+0Ch]
.text:00000129                 sub     ecx, [eax+4]
.text:0000012C                 mov     edx, [ebp+arg_0]
.text:0000012F                 cmp     [edx+44h], ecx
.text:00000132                 jb      short loc_13D
.text:00000134                 mov     eax, [ebp+arg_0]
.text:00000137                 push    eax
.text:00000138                 call    _MatchFinder_ReadBlock@4 ; MatchFinder_ReadBlock(x)
.text:0000013D
.text:0000013D loc_13D:                                ; CODE XREF: MatchFinder_ReadIfRequired(x)+Ej
.text:0000013D                                         ; MatchFinder_ReadIfRequired(x)+22j
.text:0000013D                 cmp     ebp, esp
.text:0000013F                 call    __RTC_CheckEsp
.text:00000144                 pop     ebp
.text:00000145                 retn    4
.text:00000145 _MatchFinder_ReadIfRequired@4 endp
.text:00000145
.text:00000145 ; ---------------------------------------------------------------------------
.text:00000148                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __stdcall MatchFinder_ReadBlock(x)
.text:00000150 _MatchFinder_ReadBlock@4 proc near      ; CODE XREF: MatchFinder_ReadIfRequired(x)+28p
.text:00000150                                         ; MatchFinder_Init(x)+98p ...
.text:00000150
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_8           = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 14h
.text:00000156                 push    esi
.text:00000157                 mov     eax, 0CCCCCCCCh
.text:0000015C                 mov     [ebp+var_14], eax
.text:0000015F                 mov     [ebp+var_10], eax
.text:00000162                 mov     [ebp+var_C], eax
.text:00000165                 mov     [ebp+var_8], eax
.text:00000168                 mov     [ebp+var_4], eax
.text:0000016B                 mov     eax, [ebp+arg_0]
.text:0000016E                 movzx   ecx, byte ptr [eax+1Ch]
.text:00000172                 test    ecx, ecx
.text:00000174                 jnz     short loc_17F
.text:00000176                 mov     edx, [ebp+arg_0]
.text:00000179                 cmp     dword ptr [edx+5Ch], 0
.text:0000017D                 jz      short loc_184
.text:0000017F
.text:0000017F loc_17F:                                ; CODE XREF: MatchFinder_ReadBlock(x)+24j
.text:0000017F                 jmp     loc_278
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: MatchFinder_ReadBlock(x)+2Dj
.text:00000184                 mov     eax, [ebp+arg_0]
.text:00000187                 movzx   ecx, byte ptr [eax+1Fh]
.text:0000018B                 test    ecx, ecx
.text:0000018D                 jz      short loc_1E2
.text:0000018F                 mov     edx, [ebp+arg_0]
.text:00000192                 or      eax, 0FFFFFFFFh
.text:00000195                 sub     eax, [edx+0Ch]
.text:00000198                 mov     [ebp+var_4], eax
.text:0000019B                 mov     ecx, [ebp+arg_0]
.text:0000019E                 mov     edx, [ebp+var_4]
.text:000001A1                 cmp     edx, [ecx+4Ch]
.text:000001A4                 jbe     short loc_1AF
.text:000001A6                 mov     eax, [ebp+arg_0]
.text:000001A9                 mov     ecx, [eax+4Ch]
.text:000001AC                 mov     [ebp+var_4], ecx
.text:000001AF
.text:000001AF loc_1AF:                                ; CODE XREF: MatchFinder_ReadBlock(x)+54j
.text:000001AF                 mov     edx, [ebp+arg_0]
.text:000001B2                 mov     eax, [edx+4Ch]
.text:000001B5                 sub     eax, [ebp+var_4]
.text:000001B8                 mov     ecx, [ebp+arg_0]
.text:000001BB                 mov     [ecx+4Ch], eax
.text:000001BE                 mov     edx, [ebp+arg_0]
.text:000001C1                 mov     eax, [edx+0Ch]
.text:000001C4                 add     eax, [ebp+var_4]
.text:000001C7                 mov     ecx, [ebp+arg_0]
.text:000001CA                 mov     [ecx+0Ch], eax
.text:000001CD                 mov     edx, [ebp+arg_0]
.text:000001D0                 cmp     dword ptr [edx+4Ch], 0
.text:000001D4                 jnz     short loc_1DD
.text:000001D6                 mov     eax, [ebp+arg_0]
.text:000001D9                 mov     byte ptr [eax+1Ch], 1
.text:000001DD
.text:000001DD loc_1DD:                                ; CODE XREF: MatchFinder_ReadBlock(x)+84j
.text:000001DD                 jmp     loc_278
.text:000001E2 ; ---------------------------------------------------------------------------
.text:000001E2
.text:000001E2 loc_1E2:                                ; CODE XREF: MatchFinder_ReadBlock(x)+3Dj
.text:000001E2                                         ; MatchFinder_ReadBlock(x):loc_273j
.text:000001E2                 mov     ecx, [ebp+arg_0]
.text:000001E5                 mov     edx, [ebp+arg_0]
.text:000001E8                 mov     eax, [ecx+0Ch]
.text:000001EB                 sub     eax, [edx+4]
.text:000001EE                 mov     ecx, [ebp+arg_0]
.text:000001F1                 add     eax, [ecx]
.text:000001F3                 mov     [ebp+var_8], eax
.text:000001F6                 mov     edx, [ebp+arg_0]
.text:000001F9                 mov     eax, [edx+34h]
.text:000001FC                 mov     ecx, [ebp+arg_0]
.text:000001FF                 add     eax, [ecx+3Ch]
.text:00000202                 sub     eax, [ebp+var_8]
.text:00000205                 mov     [ebp+var_10], eax
.text:00000208                 jnz     short loc_20C
.text:0000020A                 jmp     short loc_278
.text:0000020C ; ---------------------------------------------------------------------------
.text:0000020C
.text:0000020C loc_20C:                                ; CODE XREF: MatchFinder_ReadBlock(x)+B8j
.text:0000020C                 mov     esi, esp
.text:0000020E                 lea     edx, [ebp+var_10]
.text:00000211                 push    edx
.text:00000212                 mov     eax, [ebp+var_8]
.text:00000215                 push    eax
.text:00000216                 mov     ecx, [ebp+arg_0]
.text:00000219                 mov     edx, [ecx+38h]
.text:0000021C                 push    edx
.text:0000021D                 mov     eax, [ebp+arg_0]
.text:00000220                 mov     ecx, [eax+38h]
.text:00000223                 mov     edx, [ecx]
.text:00000225                 call    edx
.text:00000227                 cmp     esi, esp
.text:00000229                 call    __RTC_CheckEsp
.text:0000022E                 mov     ecx, [ebp+arg_0]
.text:00000231                 mov     [ecx+5Ch], eax
.text:00000234                 mov     edx, [ebp+arg_0]
.text:00000237                 cmp     dword ptr [edx+5Ch], 0
.text:0000023B                 jz      short loc_23F
.text:0000023D                 jmp     short loc_278
.text:0000023F ; ---------------------------------------------------------------------------
.text:0000023F
.text:0000023F loc_23F:                                ; CODE XREF: MatchFinder_ReadBlock(x)+EBj
.text:0000023F                 cmp     [ebp+var_10], 0
.text:00000243                 jnz     short loc_24E
.text:00000245                 mov     eax, [ebp+arg_0]
.text:00000248                 mov     byte ptr [eax+1Ch], 1
.text:0000024C                 jmp     short loc_278
.text:0000024E ; ---------------------------------------------------------------------------
.text:0000024E
.text:0000024E loc_24E:                                ; CODE XREF: MatchFinder_ReadBlock(x)+F3j
.text:0000024E                 mov     ecx, [ebp+arg_0]
.text:00000251                 mov     edx, [ecx+0Ch]
.text:00000254                 add     edx, [ebp+var_10]
.text:00000257                 mov     eax, [ebp+arg_0]
.text:0000025A                 mov     [eax+0Ch], edx
.text:0000025D                 mov     ecx, [ebp+arg_0]
.text:00000260                 mov     edx, [ebp+arg_0]
.text:00000263                 mov     eax, [ecx+0Ch]
.text:00000266                 sub     eax, [edx+4]
.text:00000269                 mov     ecx, [ebp+arg_0]
.text:0000026C                 cmp     eax, [ecx+44h]
.text:0000026F                 jbe     short loc_273
.text:00000271                 jmp     short loc_278
.text:00000273 ; ---------------------------------------------------------------------------
.text:00000273
.text:00000273 loc_273:                                ; CODE XREF: MatchFinder_ReadBlock(x)+11Fj
.text:00000273                 jmp     loc_1E2
.text:00000278 ; ---------------------------------------------------------------------------
.text:00000278
.text:00000278 loc_278:                                ; CODE XREF: MatchFinder_ReadBlock(x):loc_17Fj
.text:00000278                                         ; MatchFinder_ReadBlock(x):loc_1DDj ...
.text:00000278                 push    edx
.text:00000279                 mov     ecx, ebp
.text:0000027B                 push    eax
.text:0000027C                 lea     edx, $LN16
.text:00000282                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000287                 pop     eax
.text:00000288                 pop     edx
.text:00000289                 pop     esi
.text:0000028A                 add     esp, 14h
.text:0000028D                 cmp     ebp, esp
.text:0000028F                 call    __RTC_CheckEsp
.text:00000294                 mov     esp, ebp
.text:00000296                 pop     ebp
.text:00000297                 retn    4
.text:00000297 _MatchFinder_ReadBlock@4 endp
.text:00000297
.text:00000297 ; ---------------------------------------------------------------------------
.text:0000029A                 align 4
.text:0000029C $LN16           dd 1                    ; DATA XREF: MatchFinder_ReadBlock(x)+12Co
.text:000002A0                 dd offset $LN15
.text:000002A4 $LN15           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000002A0o
.text:000002AC                 dd offset $LN14         ; "size"
.text:000002B0 $LN14           db 'size',0             ; DATA XREF: .text:000002ACo
.text:000002B5                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; __stdcall MatchFinder_Construct(x)
.text:000002C0                 public _MatchFinder_Construct@4
.text:000002C0 _MatchFinder_Construct@4 proc near
.text:000002C0
.text:000002C0 var_C           = dword ptr -0Ch
.text:000002C0 var_8           = dword ptr -8
.text:000002C0 var_4           = dword ptr -4
.text:000002C0 arg_0           = dword ptr  8
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 sub     esp, 0Ch
.text:000002C6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000002CD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002DB                 mov     eax, [ebp+arg_0]
.text:000002DE                 mov     dword ptr [eax+34h], 0
.text:000002E5                 mov     ecx, [ebp+arg_0]
.text:000002E8                 mov     byte ptr [ecx+1Fh], 0
.text:000002EC                 mov     edx, [ebp+arg_0]
.text:000002EF                 mov     dword ptr [edx+24h], 0
.text:000002F6                 mov     eax, [ebp+arg_0]
.text:000002F9                 push    eax
.text:000002FA                 call    _MatchFinder_SetDefaultSettings@4 ; MatchFinder_SetDefaultSettings(x)
.text:000002FF                 mov     [ebp+var_4], 0
.text:00000306                 jmp     short loc_311
.text:00000308 ; ---------------------------------------------------------------------------
.text:00000308
.text:00000308 loc_308:                                ; CODE XREF: MatchFinder_Construct(x)+A2j
.text:00000308                 mov     ecx, [ebp+var_4]
.text:0000030B                 add     ecx, 1
.text:0000030E                 mov     [ebp+var_4], ecx
.text:00000311
.text:00000311 loc_311:                                ; CODE XREF: MatchFinder_Construct(x)+46j
.text:00000311                 cmp     [ebp+var_4], 100h
.text:00000318                 jnb     short loc_364
.text:0000031A                 mov     edx, [ebp+var_4]
.text:0000031D                 mov     [ebp+var_8], edx
.text:00000320                 mov     [ebp+var_C], 0
.text:00000327                 jmp     short loc_332
.text:00000329 ; ---------------------------------------------------------------------------
.text:00000329
.text:00000329 loc_329:                                ; CODE XREF: MatchFinder_Construct(x)+93j
.text:00000329                 mov     eax, [ebp+var_C]
.text:0000032C                 add     eax, 1
.text:0000032F                 mov     [ebp+var_C], eax
.text:00000332
.text:00000332 loc_332:                                ; CODE XREF: MatchFinder_Construct(x)+67j
.text:00000332                 cmp     [ebp+var_C], 8
.text:00000336                 jnb     short loc_355
.text:00000338                 mov     ecx, [ebp+var_8]
.text:0000033B                 shr     ecx, 1
.text:0000033D                 mov     edx, [ebp+var_8]
.text:00000340                 and     edx, 1
.text:00000343                 sub     edx, 1
.text:00000346                 not     edx
.text:00000348                 and     edx, 0EDB88320h
.text:0000034E                 xor     ecx, edx
.text:00000350                 mov     [ebp+var_8], ecx
.text:00000353                 jmp     short loc_329
.text:00000355 ; ---------------------------------------------------------------------------
.text:00000355
.text:00000355 loc_355:                                ; CODE XREF: MatchFinder_Construct(x)+76j
.text:00000355                 mov     eax, [ebp+var_4]
.text:00000358                 mov     ecx, [ebp+arg_0]
.text:0000035B                 mov     edx, [ebp+var_8]
.text:0000035E                 mov     [ecx+eax*4+60h], edx
.text:00000362                 jmp     short loc_308
.text:00000364 ; ---------------------------------------------------------------------------
.text:00000364
.text:00000364 loc_364:                                ; CODE XREF: MatchFinder_Construct(x)+58j
.text:00000364                 add     esp, 0Ch
.text:00000367                 cmp     ebp, esp
.text:00000369                 call    __RTC_CheckEsp
.text:0000036E                 mov     esp, ebp
.text:00000370                 pop     ebp
.text:00000371                 retn    4
.text:00000371 _MatchFinder_Construct@4 endp
.text:00000371
.text:00000371 ; ---------------------------------------------------------------------------
.text:00000374                 align 10h
.text:00000380
.text:00000380 ; =============== S U B R O U T I N E =======================================
.text:00000380
.text:00000380 ; Attributes: bp-based frame
.text:00000380
.text:00000380 ; __stdcall MatchFinder_SetDefaultSettings(x)
.text:00000380 _MatchFinder_SetDefaultSettings@4 proc near
.text:00000380                                         ; CODE XREF: MatchFinder_Construct(x)+3Ap
.text:00000380
.text:00000380 arg_0           = dword ptr  8
.text:00000380
.text:00000380                 push    ebp
.text:00000381                 mov     ebp, esp
.text:00000383                 mov     eax, [ebp+arg_0]
.text:00000386                 mov     dword ptr [eax+30h], 20h ; ' '
.text:0000038D                 mov     ecx, [ebp+arg_0]
.text:00000390                 mov     byte ptr [ecx+1Dh], 1
.text:00000394                 mov     edx, [ebp+arg_0]
.text:00000397                 mov     dword ptr [edx+48h], 4
.text:0000039E                 mov     eax, [ebp+arg_0]
.text:000003A1                 mov     byte ptr [eax+1Eh], 0
.text:000003A5                 pop     ebp
.text:000003A6                 retn    4
.text:000003A6 _MatchFinder_SetDefaultSettings@4 endp
.text:000003A6
.text:000003A6 ; ---------------------------------------------------------------------------
.text:000003A9                 align 10h
.text:000003B0
.text:000003B0 ; =============== S U B R O U T I N E =======================================
.text:000003B0
.text:000003B0 ; Attributes: bp-based frame
.text:000003B0
.text:000003B0 ; __stdcall MatchFinder_Free(x, x)
.text:000003B0                 public _MatchFinder_Free@8
.text:000003B0 _MatchFinder_Free@8 proc near           ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+2Bp
.text:000003B0                                         ; MatchFinder_Create(x,x,x,x,x,x)+271p
.text:000003B0
.text:000003B0 arg_0           = dword ptr  8
.text:000003B0 arg_4           = dword ptr  0Ch
.text:000003B0
.text:000003B0                 push    ebp
.text:000003B1                 mov     ebp, esp
.text:000003B3                 mov     eax, [ebp+arg_4]
.text:000003B6                 push    eax
.text:000003B7                 mov     ecx, [ebp+arg_0]
.text:000003BA                 push    ecx
.text:000003BB                 call    _MatchFinder_FreeThisClassMemory@8 ; MatchFinder_FreeThisClassMemory(x,x)
.text:000003C0                 mov     edx, [ebp+arg_4]
.text:000003C3                 push    edx
.text:000003C4                 mov     eax, [ebp+arg_0]
.text:000003C7                 push    eax
.text:000003C8                 call    _LzInWindow_Free@8 ; LzInWindow_Free(x,x)
.text:000003CD                 cmp     ebp, esp
.text:000003CF                 call    __RTC_CheckEsp
.text:000003D4                 pop     ebp
.text:000003D5                 retn    8
.text:000003D5 _MatchFinder_Free@8 endp
.text:000003D5
.text:000003D5 ; ---------------------------------------------------------------------------
.text:000003D8                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; __stdcall LzInWindow_Free(x, x)
.text:000003E0 _LzInWindow_Free@8 proc near            ; CODE XREF: MatchFinder_Free(x,x)+18p
.text:000003E0                                         ; LzInWindow_Create(x,x,x)+55p
.text:000003E0
.text:000003E0 arg_0           = dword ptr  8
.text:000003E0 arg_4           = dword ptr  0Ch
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 push    esi
.text:000003E4                 mov     eax, [ebp+arg_0]
.text:000003E7                 movzx   ecx, byte ptr [eax+1Fh]
.text:000003EB                 test    ecx, ecx
.text:000003ED                 jnz     short loc_415
.text:000003EF                 mov     esi, esp
.text:000003F1                 mov     edx, [ebp+arg_0]
.text:000003F4                 mov     eax, [edx+34h]
.text:000003F7                 push    eax
.text:000003F8                 mov     ecx, [ebp+arg_4]
.text:000003FB                 push    ecx
.text:000003FC                 mov     edx, [ebp+arg_4]
.text:000003FF                 mov     eax, [edx+4]
.text:00000402                 call    eax
.text:00000404                 cmp     esi, esp
.text:00000406                 call    __RTC_CheckEsp
.text:0000040B                 mov     ecx, [ebp+arg_0]
.text:0000040E                 mov     dword ptr [ecx+34h], 0
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: LzInWindow_Free(x,x)+Dj
.text:00000415                 pop     esi
.text:00000416                 cmp     ebp, esp
.text:00000418                 call    __RTC_CheckEsp
.text:0000041D                 pop     ebp
.text:0000041E                 retn    8
.text:0000041E _LzInWindow_Free@8 endp
.text:0000041E
.text:0000041E ; ---------------------------------------------------------------------------
.text:00000421                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; __stdcall MatchFinder_FreeThisClassMemory(x, x)
.text:00000430 _MatchFinder_FreeThisClassMemory@8 proc near
.text:00000430                                         ; CODE XREF: MatchFinder_Free(x,x)+Bp
.text:00000430                                         ; MatchFinder_Create(x,x,x,x,x,x)+220p
.text:00000430
.text:00000430 arg_0           = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 push    esi
.text:00000434                 mov     esi, esp
.text:00000436                 mov     eax, [ebp+arg_0]
.text:00000439                 mov     ecx, [eax+24h]
.text:0000043C                 push    ecx
.text:0000043D                 mov     edx, [ebp+arg_4]
.text:00000440                 push    edx
.text:00000441                 mov     eax, [ebp+arg_4]
.text:00000444                 mov     ecx, [eax+4]
.text:00000447                 call    ecx
.text:00000449                 cmp     esi, esp
.text:0000044B                 call    __RTC_CheckEsp
.text:00000450                 mov     edx, [ebp+arg_0]
.text:00000453                 mov     dword ptr [edx+24h], 0
.text:0000045A                 pop     esi
.text:0000045B                 cmp     ebp, esp
.text:0000045D                 call    __RTC_CheckEsp
.text:00000462                 pop     ebp
.text:00000463                 retn    8
.text:00000463 _MatchFinder_FreeThisClassMemory@8 endp
.text:00000463
.text:00000463 ; ---------------------------------------------------------------------------
.text:00000466                 align 10h
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; __stdcall MatchFinder_Create(x, x, x, x, x, x)
.text:00000470                 public _MatchFinder_Create@24
.text:00000470 _MatchFinder_Create@24 proc near
.text:00000470
.text:00000470 var_14          = dword ptr -14h
.text:00000470 var_10          = dword ptr -10h
.text:00000470 var_C           = dword ptr -0Ch
.text:00000470 var_8           = dword ptr -8
.text:00000470 var_4           = dword ptr -4
.text:00000470 arg_0           = dword ptr  8
.text:00000470 arg_4           = dword ptr  0Ch
.text:00000470 arg_8           = dword ptr  10h
.text:00000470 arg_C           = dword ptr  14h
.text:00000470 arg_10          = dword ptr  18h
.text:00000470 arg_14          = dword ptr  1Ch
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 sub     esp, 14h
.text:00000476                 mov     eax, 0CCCCCCCCh
.text:0000047B                 mov     [ebp+var_14], eax
.text:0000047E                 mov     [ebp+var_10], eax
.text:00000481                 mov     [ebp+var_C], eax
.text:00000484                 mov     [ebp+var_8], eax
.text:00000487                 mov     [ebp+var_4], eax
.text:0000048A                 cmp     [ebp+arg_4], 0E0000000h
.text:00000491                 jbe     short loc_4A7
.text:00000493                 mov     eax, [ebp+arg_14]
.text:00000496                 push    eax
.text:00000497                 mov     ecx, [ebp+arg_0]
.text:0000049A                 push    ecx
.text:0000049B                 call    _MatchFinder_Free@8 ; MatchFinder_Free(x,x)
.text:000004A0                 xor     eax, eax
.text:000004A2                 jmp     loc_6E8
.text:000004A7 ; ---------------------------------------------------------------------------
.text:000004A7
.text:000004A7 loc_4A7:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+21j
.text:000004A7                 mov     edx, [ebp+arg_4]
.text:000004AA                 shr     edx, 1
.text:000004AC                 mov     [ebp+var_4], edx
.text:000004AF                 cmp     [ebp+arg_4], 0C0000000h
.text:000004B6                 jb      short loc_4C3
.text:000004B8                 mov     eax, [ebp+arg_4]
.text:000004BB                 shr     eax, 3
.text:000004BE                 mov     [ebp+var_4], eax
.text:000004C1                 jmp     short loc_4D5
.text:000004C3 ; ---------------------------------------------------------------------------
.text:000004C3
.text:000004C3 loc_4C3:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+46j
.text:000004C3                 cmp     [ebp+arg_4], 80000000h
.text:000004CA                 jb      short loc_4D5
.text:000004CC                 mov     ecx, [ebp+arg_4]
.text:000004CF                 shr     ecx, 2
.text:000004D2                 mov     [ebp+var_4], ecx
.text:000004D5
.text:000004D5 loc_4D5:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+51j
.text:000004D5                                         ; MatchFinder_Create(x,x,x,x,x,x)+5Aj
.text:000004D5                 mov     edx, [ebp+arg_8]
.text:000004D8                 add     edx, [ebp+arg_C]
.text:000004DB                 add     edx, [ebp+arg_10]
.text:000004DE                 shr     edx, 1
.text:000004E0                 mov     eax, [ebp+var_4]
.text:000004E3                 lea     ecx, [eax+edx+80000h]
.text:000004EA                 mov     [ebp+var_4], ecx
.text:000004ED                 mov     edx, [ebp+arg_8]
.text:000004F0                 mov     eax, [ebp+arg_4]
.text:000004F3                 lea     ecx, [eax+edx+1]
.text:000004F7                 mov     edx, [ebp+arg_0]
.text:000004FA                 mov     [edx+40h], ecx
.text:000004FD                 mov     eax, [ebp+arg_C]
.text:00000500                 add     eax, [ebp+arg_10]
.text:00000503                 mov     ecx, [ebp+arg_0]
.text:00000506                 mov     [ecx+44h], eax
.text:00000509                 mov     edx, [ebp+arg_14]
.text:0000050C                 push    edx
.text:0000050D                 mov     eax, [ebp+var_4]
.text:00000510                 push    eax
.text:00000511                 mov     ecx, [ebp+arg_0]
.text:00000514                 push    ecx
.text:00000515                 call    _LzInWindow_Create@12 ; LzInWindow_Create(x,x,x)
.text:0000051A                 test    eax, eax
.text:0000051C                 jz      loc_6D9
.text:00000522                 mov     edx, [ebp+arg_4]
.text:00000525                 add     edx, 1
.text:00000528                 mov     [ebp+var_8], edx
.text:0000052B                 mov     eax, [ebp+arg_0]
.text:0000052E                 mov     ecx, [ebp+arg_C]
.text:00000531                 mov     [eax+20h], ecx
.text:00000534                 mov     edx, [ebp+arg_0]
.text:00000537                 mov     dword ptr [edx+54h], 0
.text:0000053E                 mov     eax, [ebp+arg_0]
.text:00000541                 cmp     dword ptr [eax+48h], 2
.text:00000545                 jnz     short loc_550
.text:00000547                 mov     [ebp+var_C], 0FFFFh
.text:0000054E                 jmp     short loc_5BF
.text:00000550 ; ---------------------------------------------------------------------------
.text:00000550
.text:00000550 loc_550:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+D5j
.text:00000550                 mov     ecx, [ebp+arg_4]
.text:00000553                 sub     ecx, 1
.text:00000556                 mov     [ebp+var_C], ecx
.text:00000559                 mov     edx, [ebp+var_C]
.text:0000055C                 shr     edx, 1
.text:0000055E                 or      edx, [ebp+var_C]
.text:00000561                 mov     [ebp+var_C], edx
.text:00000564                 mov     eax, [ebp+var_C]
.text:00000567                 shr     eax, 2
.text:0000056A                 or      eax, [ebp+var_C]
.text:0000056D                 mov     [ebp+var_C], eax
.text:00000570                 mov     ecx, [ebp+var_C]
.text:00000573                 shr     ecx, 4
.text:00000576                 or      ecx, [ebp+var_C]
.text:00000579                 mov     [ebp+var_C], ecx
.text:0000057C                 mov     edx, [ebp+var_C]
.text:0000057F                 shr     edx, 8
.text:00000582                 or      edx, [ebp+var_C]
.text:00000585                 mov     [ebp+var_C], edx
.text:00000588                 mov     eax, [ebp+var_C]
.text:0000058B                 shr     eax, 1
.text:0000058D                 mov     [ebp+var_C], eax
.text:00000590                 mov     ecx, [ebp+var_C]
.text:00000593                 or      ecx, 0FFFFh
.text:00000599                 mov     [ebp+var_C], ecx
.text:0000059C                 cmp     [ebp+var_C], 1000000h
.text:000005A3                 jbe     short loc_5BF
.text:000005A5                 mov     edx, [ebp+arg_0]
.text:000005A8                 cmp     dword ptr [edx+48h], 3
.text:000005AC                 jnz     short loc_5B7
.text:000005AE                 mov     [ebp+var_C], 0FFFFFFh
.text:000005B5                 jmp     short loc_5BF
.text:000005B7 ; ---------------------------------------------------------------------------
.text:000005B7
.text:000005B7 loc_5B7:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+13Cj
.text:000005B7                 mov     eax, [ebp+var_C]
.text:000005BA                 shr     eax, 1
.text:000005BC                 mov     [ebp+var_C], eax
.text:000005BF
.text:000005BF loc_5BF:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+DEj
.text:000005BF                                         ; MatchFinder_Create(x,x,x,x,x,x)+133j ...
.text:000005BF                 mov     ecx, [ebp+arg_0]
.text:000005C2                 mov     edx, [ebp+var_C]
.text:000005C5                 mov     [ecx+2Ch], edx
.text:000005C8                 mov     eax, [ebp+var_C]
.text:000005CB                 add     eax, 1
.text:000005CE                 mov     [ebp+var_C], eax
.text:000005D1                 mov     ecx, [ebp+arg_0]
.text:000005D4                 cmp     dword ptr [ecx+48h], 2
.text:000005D8                 jbe     short loc_5EB
.text:000005DA                 mov     edx, [ebp+arg_0]
.text:000005DD                 mov     eax, [edx+54h]
.text:000005E0                 add     eax, 400h
.text:000005E5                 mov     ecx, [ebp+arg_0]
.text:000005E8                 mov     [ecx+54h], eax
.text:000005EB
.text:000005EB loc_5EB:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+168j
.text:000005EB                 mov     edx, [ebp+arg_0]
.text:000005EE                 cmp     dword ptr [edx+48h], 3
.text:000005F2                 jbe     short loc_606
.text:000005F4                 mov     eax, [ebp+arg_0]
.text:000005F7                 mov     ecx, [eax+54h]
.text:000005FA                 add     ecx, 10000h
.text:00000600                 mov     edx, [ebp+arg_0]
.text:00000603                 mov     [edx+54h], ecx
.text:00000606
.text:00000606 loc_606:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+182j
.text:00000606                 mov     eax, [ebp+arg_0]
.text:00000609                 cmp     dword ptr [eax+48h], 4
.text:0000060D                 jbe     short loc_621
.text:0000060F                 mov     ecx, [ebp+arg_0]
.text:00000612                 mov     edx, [ecx+54h]
.text:00000615                 add     edx, 100000h
.text:0000061B                 mov     eax, [ebp+arg_0]
.text:0000061E                 mov     [eax+54h], edx
.text:00000621
.text:00000621 loc_621:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+19Dj
.text:00000621                 mov     ecx, [ebp+arg_0]
.text:00000624                 mov     edx, [ebp+var_C]
.text:00000627                 add     edx, [ecx+54h]
.text:0000062A                 mov     [ebp+var_C], edx
.text:0000062D                 mov     eax, [ebp+arg_0]
.text:00000630                 mov     ecx, [ebp+arg_4]
.text:00000633                 mov     [eax+50h], ecx
.text:00000636                 mov     edx, [ebp+arg_0]
.text:00000639                 mov     eax, [ebp+var_C]
.text:0000063C                 mov     [edx+58h], eax
.text:0000063F                 mov     ecx, [ebp+arg_0]
.text:00000642                 mov     edx, [ebp+var_8]
.text:00000645                 mov     [ecx+18h], edx
.text:00000648                 mov     eax, [ebp+var_8]
.text:0000064B                 mov     [ebp+var_14], eax
.text:0000064E                 mov     ecx, [ebp+arg_0]
.text:00000651                 movzx   edx, byte ptr [ecx+1Dh]
.text:00000655                 test    edx, edx
.text:00000657                 jz      short loc_661
.text:00000659                 mov     eax, [ebp+var_14]
.text:0000065C                 shl     eax, 1
.text:0000065E                 mov     [ebp+var_14], eax
.text:00000661
.text:00000661 loc_661:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+1E7j
.text:00000661                 mov     ecx, [ebp+var_C]
.text:00000664                 add     ecx, [ebp+var_14]
.text:00000667                 mov     [ebp+var_10], ecx
.text:0000066A                 mov     edx, [ebp+arg_0]
.text:0000066D                 cmp     dword ptr [edx+24h], 0
.text:00000671                 jz      short loc_688
.text:00000673                 mov     eax, [ebp+arg_0]
.text:00000676                 mov     ecx, [eax+460h]
.text:0000067C                 cmp     ecx, [ebp+var_10]
.text:0000067F                 jnz     short loc_688
.text:00000681                 mov     eax, 1
.text:00000686                 jmp     short loc_6E8
.text:00000688 ; ---------------------------------------------------------------------------
.text:00000688
.text:00000688 loc_688:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+201j
.text:00000688                                         ; MatchFinder_Create(x,x,x,x,x,x)+20Fj
.text:00000688                 mov     edx, [ebp+arg_14]
.text:0000068B                 push    edx
.text:0000068C                 mov     eax, [ebp+arg_0]
.text:0000068F                 push    eax
.text:00000690                 call    _MatchFinder_FreeThisClassMemory@8 ; MatchFinder_FreeThisClassMemory(x,x)
.text:00000695                 mov     ecx, [ebp+arg_0]
.text:00000698                 mov     edx, [ebp+var_10]
.text:0000069B                 mov     [ecx+460h], edx
.text:000006A1                 mov     eax, [ebp+arg_14]
.text:000006A4                 push    eax
.text:000006A5                 mov     ecx, [ebp+var_10]
.text:000006A8                 push    ecx
.text:000006A9                 call    _AllocRefs@8    ; AllocRefs(x,x)
.text:000006AE                 mov     edx, [ebp+arg_0]
.text:000006B1                 mov     [edx+24h], eax
.text:000006B4                 mov     eax, [ebp+arg_0]
.text:000006B7                 cmp     dword ptr [eax+24h], 0
.text:000006BB                 jz      short loc_6D9
.text:000006BD                 mov     ecx, [ebp+arg_0]
.text:000006C0                 mov     edx, [ecx+58h]
.text:000006C3                 mov     eax, [ebp+arg_0]
.text:000006C6                 mov     ecx, [eax+24h]
.text:000006C9                 lea     edx, [ecx+edx*4]
.text:000006CC                 mov     eax, [ebp+arg_0]
.text:000006CF                 mov     [eax+28h], edx
.text:000006D2                 mov     eax, 1
.text:000006D7                 jmp     short loc_6E8
.text:000006D9 ; ---------------------------------------------------------------------------
.text:000006D9
.text:000006D9 loc_6D9:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+ACj
.text:000006D9                                         ; MatchFinder_Create(x,x,x,x,x,x)+24Bj
.text:000006D9                 mov     ecx, [ebp+arg_14]
.text:000006DC                 push    ecx
.text:000006DD                 mov     edx, [ebp+arg_0]
.text:000006E0                 push    edx
.text:000006E1                 call    _MatchFinder_Free@8 ; MatchFinder_Free(x,x)
.text:000006E6                 xor     eax, eax
.text:000006E8
.text:000006E8 loc_6E8:                                ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+32j
.text:000006E8                                         ; MatchFinder_Create(x,x,x,x,x,x)+216j ...
.text:000006E8                 add     esp, 14h
.text:000006EB                 cmp     ebp, esp
.text:000006ED                 call    __RTC_CheckEsp
.text:000006F2                 mov     esp, ebp
.text:000006F4                 pop     ebp
.text:000006F5                 retn    18h
.text:000006F5 _MatchFinder_Create@24 endp
.text:000006F5
.text:000006F5 ; ---------------------------------------------------------------------------
.text:000006F8                 align 10h
.text:00000700
.text:00000700 ; =============== S U B R O U T I N E =======================================
.text:00000700
.text:00000700 ; Attributes: bp-based frame
.text:00000700
.text:00000700 ; __stdcall LzInWindow_Create(x, x, x)
.text:00000700 _LzInWindow_Create@12 proc near         ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+A5p
.text:00000700
.text:00000700 var_4           = dword ptr -4
.text:00000700 arg_0           = dword ptr  8
.text:00000700 arg_4           = dword ptr  0Ch
.text:00000700 arg_8           = dword ptr  10h
.text:00000700
.text:00000700                 push    ebp
.text:00000701                 mov     ebp, esp
.text:00000703                 push    ecx
.text:00000704                 push    esi
.text:00000705                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000070C                 mov     eax, [ebp+arg_0]
.text:0000070F                 mov     ecx, [eax+40h]
.text:00000712                 mov     edx, [ebp+arg_0]
.text:00000715                 add     ecx, [edx+44h]
.text:00000718                 add     ecx, [ebp+arg_4]
.text:0000071B                 mov     [ebp+var_4], ecx
.text:0000071E                 mov     eax, [ebp+arg_0]
.text:00000721                 movzx   ecx, byte ptr [eax+1Fh]
.text:00000725                 test    ecx, ecx
.text:00000727                 jz      short loc_739
.text:00000729                 mov     edx, [ebp+arg_0]
.text:0000072C                 mov     eax, [ebp+var_4]
.text:0000072F                 mov     [edx+3Ch], eax
.text:00000732                 mov     eax, 1
.text:00000737                 jmp     short loc_78D
.text:00000739 ; ---------------------------------------------------------------------------
.text:00000739
.text:00000739 loc_739:                                ; CODE XREF: LzInWindow_Create(x,x,x)+27j
.text:00000739                 mov     ecx, [ebp+arg_0]
.text:0000073C                 cmp     dword ptr [ecx+34h], 0
.text:00000740                 jz      short loc_74D
.text:00000742                 mov     edx, [ebp+arg_0]
.text:00000745                 mov     eax, [edx+3Ch]
.text:00000748                 cmp     eax, [ebp+var_4]
.text:0000074B                 jz      short loc_781
.text:0000074D
.text:0000074D loc_74D:                                ; CODE XREF: LzInWindow_Create(x,x,x)+40j
.text:0000074D                 mov     ecx, [ebp+arg_8]
.text:00000750                 push    ecx
.text:00000751                 mov     edx, [ebp+arg_0]
.text:00000754                 push    edx
.text:00000755                 call    _LzInWindow_Free@8 ; LzInWindow_Free(x,x)
.text:0000075A                 mov     eax, [ebp+arg_0]
.text:0000075D                 mov     ecx, [ebp+var_4]
.text:00000760                 mov     [eax+3Ch], ecx
.text:00000763                 mov     esi, esp
.text:00000765                 mov     edx, [ebp+var_4]
.text:00000768                 push    edx
.text:00000769                 mov     eax, [ebp+arg_8]
.text:0000076C                 push    eax
.text:0000076D                 mov     ecx, [ebp+arg_8]
.text:00000770                 mov     edx, [ecx]
.text:00000772                 call    edx
.text:00000774                 cmp     esi, esp
.text:00000776                 call    __RTC_CheckEsp
.text:0000077B                 mov     ecx, [ebp+arg_0]
.text:0000077E                 mov     [ecx+34h], eax
.text:00000781
.text:00000781 loc_781:                                ; CODE XREF: LzInWindow_Create(x,x,x)+4Bj
.text:00000781                 mov     edx, [ebp+arg_0]
.text:00000784                 xor     eax, eax
.text:00000786                 cmp     dword ptr [edx+34h], 0
.text:0000078A                 setnz   al
.text:0000078D
.text:0000078D loc_78D:                                ; CODE XREF: LzInWindow_Create(x,x,x)+37j
.text:0000078D                 pop     esi
.text:0000078E                 add     esp, 4
.text:00000791                 cmp     ebp, esp
.text:00000793                 call    __RTC_CheckEsp
.text:00000798                 mov     esp, ebp
.text:0000079A                 pop     ebp
.text:0000079B                 retn    0Ch
.text:0000079B _LzInWindow_Create@12 endp
.text:0000079B
.text:0000079B ; ---------------------------------------------------------------------------
.text:0000079E                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __stdcall AllocRefs(x, x)
.text:000007A0 _AllocRefs@8    proc near               ; CODE XREF: MatchFinder_Create(x,x,x,x,x,x)+239p
.text:000007A0
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 push    ecx
.text:000007A4                 push    esi
.text:000007A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AC                 mov     eax, [ebp+arg_0]
.text:000007AF                 shl     eax, 2
.text:000007B2                 mov     [ebp+var_4], eax
.text:000007B5                 mov     ecx, [ebp+var_4]
.text:000007B8                 shr     ecx, 2
.text:000007BB                 cmp     ecx, [ebp+arg_0]
.text:000007BE                 jz      short loc_7C4
.text:000007C0                 xor     eax, eax
.text:000007C2                 jmp     short loc_7DC
.text:000007C4 ; ---------------------------------------------------------------------------
.text:000007C4
.text:000007C4 loc_7C4:                                ; CODE XREF: AllocRefs(x,x)+1Ej
.text:000007C4                 mov     esi, esp
.text:000007C6                 mov     edx, [ebp+var_4]
.text:000007C9                 push    edx
.text:000007CA                 mov     eax, [ebp+arg_4]
.text:000007CD                 push    eax
.text:000007CE                 mov     ecx, [ebp+arg_4]
.text:000007D1                 mov     edx, [ecx]
.text:000007D3                 call    edx
.text:000007D5                 cmp     esi, esp
.text:000007D7                 call    __RTC_CheckEsp
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: AllocRefs(x,x)+22j
.text:000007DC                 pop     esi
.text:000007DD                 add     esp, 4
.text:000007E0                 cmp     ebp, esp
.text:000007E2                 call    __RTC_CheckEsp
.text:000007E7                 mov     esp, ebp
.text:000007E9                 pop     ebp
.text:000007EA                 retn    8
.text:000007EA _AllocRefs@8    endp
.text:000007EA
.text:000007EA ; ---------------------------------------------------------------------------
.text:000007ED                 align 10h
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; __stdcall MatchFinder_Init(x)
.text:000007F0                 public _MatchFinder_Init@4
.text:000007F0 _MatchFinder_Init@4 proc near           ; DATA XREF: MatchFinder_CreateVTable(x,x)+6o
.text:000007F0
.text:000007F0 var_C           = dword ptr -0Ch
.text:000007F0 var_8           = dword ptr -8
.text:000007F0 var_4           = dword ptr -4
.text:000007F0 arg_0           = dword ptr  8
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 sub     esp, 0Ch
.text:000007F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000007FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000080B                 mov     eax, [ebp+arg_0]
.text:0000080E                 mov     ecx, [eax+24h]
.text:00000811                 mov     [ebp+var_8], ecx
.text:00000814                 mov     edx, [ebp+arg_0]
.text:00000817                 mov     eax, [edx+58h]
.text:0000081A                 mov     [ebp+var_C], eax
.text:0000081D                 mov     [ebp+var_4], 0
.text:00000824                 jmp     short loc_82F
.text:00000826 ; ---------------------------------------------------------------------------
.text:00000826
.text:00000826 loc_826:                                ; CODE XREF: MatchFinder_Init(x)+54j
.text:00000826                 mov     ecx, [ebp+var_4]
.text:00000829                 add     ecx, 1
.text:0000082C                 mov     [ebp+var_4], ecx
.text:0000082F
.text:0000082F loc_82F:                                ; CODE XREF: MatchFinder_Init(x)+34j
.text:0000082F                 mov     edx, [ebp+var_4]
.text:00000832                 cmp     edx, [ebp+var_C]
.text:00000835                 jnb     short loc_846
.text:00000837                 mov     eax, [ebp+var_4]
.text:0000083A                 mov     ecx, [ebp+var_8]
.text:0000083D                 mov     dword ptr [ecx+eax*4], 0
.text:00000844                 jmp     short loc_826
.text:00000846 ; ---------------------------------------------------------------------------
.text:00000846
.text:00000846 loc_846:                                ; CODE XREF: MatchFinder_Init(x)+45j
.text:00000846                 mov     edx, [ebp+arg_0]
.text:00000849                 mov     dword ptr [edx+14h], 0
.text:00000850                 mov     eax, [ebp+arg_0]
.text:00000853                 mov     ecx, [ebp+arg_0]
.text:00000856                 mov     edx, [ecx+34h]
.text:00000859                 mov     [eax], edx
.text:0000085B                 mov     eax, [ebp+arg_0]
.text:0000085E                 mov     ecx, [ebp+arg_0]
.text:00000861                 mov     edx, [ecx+18h]
.text:00000864                 mov     [eax+0Ch], edx
.text:00000867                 mov     eax, [ebp+arg_0]
.text:0000086A                 mov     ecx, [ebp+arg_0]
.text:0000086D                 mov     edx, [ecx+0Ch]
.text:00000870                 mov     [eax+4], edx
.text:00000873                 mov     eax, [ebp+arg_0]
.text:00000876                 mov     dword ptr [eax+5Ch], 0
.text:0000087D                 mov     ecx, [ebp+arg_0]
.text:00000880                 mov     byte ptr [ecx+1Ch], 0
.text:00000884                 mov     edx, [ebp+arg_0]
.text:00000887                 push    edx
.text:00000888                 call    _MatchFinder_ReadBlock@4 ; MatchFinder_ReadBlock(x)
.text:0000088D                 mov     eax, [ebp+arg_0]
.text:00000890                 push    eax
.text:00000891                 call    _MatchFinder_SetLimits@4 ; MatchFinder_SetLimits(x)
.text:00000896                 add     esp, 0Ch
.text:00000899                 cmp     ebp, esp
.text:0000089B                 call    __RTC_CheckEsp
.text:000008A0                 mov     esp, ebp
.text:000008A2                 pop     ebp
.text:000008A3                 retn    4
.text:000008A3 _MatchFinder_Init@4 endp
.text:000008A3
.text:000008A3 ; ---------------------------------------------------------------------------
.text:000008A6                 align 10h
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; __stdcall MatchFinder_SetLimits(x)
.text:000008B0 _MatchFinder_SetLimits@4 proc near      ; CODE XREF: MatchFinder_Init(x)+A1p
.text:000008B0                                         ; MatchFinder_CheckLimits(x)+59p
.text:000008B0
.text:000008B0 var_C           = dword ptr -0Ch
.text:000008B0 var_8           = dword ptr -8
.text:000008B0 var_4           = dword ptr -4
.text:000008B0 arg_0           = dword ptr  8
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 sub     esp, 0Ch
.text:000008B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000008BD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008CB                 mov     eax, [ebp+arg_0]
.text:000008CE                 or      ecx, 0FFFFFFFFh
.text:000008D1                 sub     ecx, [eax+4]
.text:000008D4                 mov     [ebp+var_4], ecx
.text:000008D7                 mov     edx, [ebp+arg_0]
.text:000008DA                 mov     eax, [ebp+arg_0]
.text:000008DD                 mov     ecx, [edx+18h]
.text:000008E0                 sub     ecx, [eax+14h]
.text:000008E3                 mov     [ebp+var_8], ecx
.text:000008E6                 mov     edx, [ebp+var_8]
.text:000008E9                 cmp     edx, [ebp+var_4]
.text:000008EC                 jnb     short loc_8F4
.text:000008EE                 mov     eax, [ebp+var_8]
.text:000008F1                 mov     [ebp+var_4], eax
.text:000008F4
.text:000008F4 loc_8F4:                                ; CODE XREF: MatchFinder_SetLimits(x)+3Cj
.text:000008F4                 mov     ecx, [ebp+arg_0]
.text:000008F7                 mov     edx, [ebp+arg_0]
.text:000008FA                 mov     eax, [ecx+0Ch]
.text:000008FD                 sub     eax, [edx+4]
.text:00000900                 mov     [ebp+var_8], eax
.text:00000903                 mov     ecx, [ebp+arg_0]
.text:00000906                 mov     edx, [ebp+var_8]
.text:00000909                 cmp     edx, [ecx+44h]
.text:0000090C                 ja      short loc_91D
.text:0000090E                 cmp     [ebp+var_8], 0
.text:00000912                 jbe     short loc_91B
.text:00000914                 mov     [ebp+var_8], 1
.text:0000091B
.text:0000091B loc_91B:                                ; CODE XREF: MatchFinder_SetLimits(x)+62j
.text:0000091B                 jmp     short loc_929
.text:0000091D ; ---------------------------------------------------------------------------
.text:0000091D
.text:0000091D loc_91D:                                ; CODE XREF: MatchFinder_SetLimits(x)+5Cj
.text:0000091D                 mov     eax, [ebp+arg_0]
.text:00000920                 mov     ecx, [ebp+var_8]
.text:00000923                 sub     ecx, [eax+44h]
.text:00000926                 mov     [ebp+var_8], ecx
.text:00000929
.text:00000929 loc_929:                                ; CODE XREF: MatchFinder_SetLimits(x):loc_91Bj
.text:00000929                 mov     edx, [ebp+var_8]
.text:0000092C                 cmp     edx, [ebp+var_4]
.text:0000092F                 jnb     short loc_937
.text:00000931                 mov     eax, [ebp+var_8]
.text:00000934                 mov     [ebp+var_4], eax
.text:00000937
.text:00000937 loc_937:                                ; CODE XREF: MatchFinder_SetLimits(x)+7Fj
.text:00000937                 mov     ecx, [ebp+arg_0]
.text:0000093A                 mov     edx, [ebp+arg_0]
.text:0000093D                 mov     eax, [ecx+0Ch]
.text:00000940                 sub     eax, [edx+4]
.text:00000943                 mov     [ebp+var_C], eax
.text:00000946                 mov     ecx, [ebp+arg_0]
.text:00000949                 mov     edx, [ebp+var_C]
.text:0000094C                 cmp     edx, [ecx+20h]
.text:0000094F                 jbe     short loc_95A
.text:00000951                 mov     eax, [ebp+arg_0]
.text:00000954                 mov     ecx, [eax+20h]
.text:00000957                 mov     [ebp+var_C], ecx
.text:0000095A
.text:0000095A loc_95A:                                ; CODE XREF: MatchFinder_SetLimits(x)+9Fj
.text:0000095A                 mov     edx, [ebp+arg_0]
.text:0000095D                 mov     eax, [ebp+var_C]
.text:00000960                 mov     [edx+10h], eax
.text:00000963                 mov     ecx, [ebp+arg_0]
.text:00000966                 mov     edx, [ecx+4]
.text:00000969                 add     edx, [ebp+var_4]
.text:0000096C                 mov     eax, [ebp+arg_0]
.text:0000096F                 mov     [eax+8], edx
.text:00000972                 mov     esp, ebp
.text:00000974                 pop     ebp
.text:00000975                 retn    4
.text:00000975 _MatchFinder_SetLimits@4 endp
.text:00000975
.text:00000975 ; ---------------------------------------------------------------------------
.text:00000978                 align 10h
.text:00000980
.text:00000980 ; =============== S U B R O U T I N E =======================================
.text:00000980
.text:00000980 ; Attributes: bp-based frame
.text:00000980
.text:00000980 ; __stdcall MatchFinder_Normalize3(x, x, x)
.text:00000980                 public _MatchFinder_Normalize3@12
.text:00000980 _MatchFinder_Normalize3@12 proc near    ; CODE XREF: MatchFinder_Normalize(x)+2Cp
.text:00000980
.text:00000980 var_8           = dword ptr -8
.text:00000980 var_4           = dword ptr -4
.text:00000980 arg_0           = dword ptr  8
.text:00000980 arg_4           = dword ptr  0Ch
.text:00000980 arg_8           = dword ptr  10h
.text:00000980
.text:00000980                 push    ebp
.text:00000981                 mov     ebp, esp
.text:00000983                 sub     esp, 8
.text:00000986                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000098D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000994                 mov     [ebp+var_4], 0
.text:0000099B                 jmp     short loc_9A6
.text:0000099D ; ---------------------------------------------------------------------------
.text:0000099D
.text:0000099D loc_99D:                                ; CODE XREF: MatchFinder_Normalize3(x,x,x)+60j
.text:0000099D                 mov     eax, [ebp+var_4]
.text:000009A0                 add     eax, 1
.text:000009A3                 mov     [ebp+var_4], eax
.text:000009A6
.text:000009A6 loc_9A6:                                ; CODE XREF: MatchFinder_Normalize3(x,x,x)+1Bj
.text:000009A6                 mov     ecx, [ebp+var_4]
.text:000009A9                 cmp     ecx, [ebp+arg_8]
.text:000009AC                 jnb     short loc_9E2
.text:000009AE                 mov     edx, [ebp+var_4]
.text:000009B1                 mov     eax, [ebp+arg_4]
.text:000009B4                 mov     ecx, [eax+edx*4]
.text:000009B7                 mov     [ebp+var_8], ecx
.text:000009BA                 mov     edx, [ebp+var_8]
.text:000009BD                 cmp     edx, [ebp+arg_0]
.text:000009C0                 ja      short loc_9CB
.text:000009C2                 mov     [ebp+var_8], 0
.text:000009C9                 jmp     short loc_9D4
.text:000009CB ; ---------------------------------------------------------------------------
.text:000009CB
.text:000009CB loc_9CB:                                ; CODE XREF: MatchFinder_Normalize3(x,x,x)+40j
.text:000009CB                 mov     eax, [ebp+var_8]
.text:000009CE                 sub     eax, [ebp+arg_0]
.text:000009D1                 mov     [ebp+var_8], eax
.text:000009D4
.text:000009D4 loc_9D4:                                ; CODE XREF: MatchFinder_Normalize3(x,x,x)+49j
.text:000009D4                 mov     ecx, [ebp+var_4]
.text:000009D7                 mov     edx, [ebp+arg_4]
.text:000009DA                 mov     eax, [ebp+var_8]
.text:000009DD                 mov     [edx+ecx*4], eax
.text:000009E0                 jmp     short loc_99D
.text:000009E2 ; ---------------------------------------------------------------------------
.text:000009E2
.text:000009E2 loc_9E2:                                ; CODE XREF: MatchFinder_Normalize3(x,x,x)+2Cj
.text:000009E2                 mov     esp, ebp
.text:000009E4                 pop     ebp
.text:000009E5                 retn    0Ch
.text:000009E5 _MatchFinder_Normalize3@12 endp
.text:000009E5
.text:000009E5 ; ---------------------------------------------------------------------------
.text:000009E8                 align 10h
.text:000009F0
.text:000009F0 ; =============== S U B R O U T I N E =======================================
.text:000009F0
.text:000009F0 ; Attributes: bp-based frame
.text:000009F0
.text:000009F0 ; __stdcall GetMatchesSpec1(x, x, x, x, x, x, x, x, x, x)
.text:000009F0                 public _GetMatchesSpec1@40
.text:000009F0 _GetMatchesSpec1@40 proc near           ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+D1p
.text:000009F0                                         ; Bt2_MatchFinder_GetMatches(x,x)+BEp ...
.text:000009F0
.text:000009F0 var_28          = dword ptr -28h
.text:000009F0 var_24          = dword ptr -24h
.text:000009F0 var_20          = dword ptr -20h
.text:000009F0 var_1C          = dword ptr -1Ch
.text:000009F0 var_18          = dword ptr -18h
.text:000009F0 var_14          = dword ptr -14h
.text:000009F0 var_10          = dword ptr -10h
.text:000009F0 var_C           = dword ptr -0Ch
.text:000009F0 var_8           = dword ptr -8
.text:000009F0 var_4           = dword ptr -4
.text:000009F0 arg_0           = dword ptr  8
.text:000009F0 arg_4           = dword ptr  0Ch
.text:000009F0 arg_8           = dword ptr  10h
.text:000009F0 arg_C           = dword ptr  14h
.text:000009F0 arg_10          = dword ptr  18h
.text:000009F0 arg_14          = dword ptr  1Ch
.text:000009F0 arg_18          = dword ptr  20h
.text:000009F0 arg_1C          = dword ptr  24h
.text:000009F0 arg_20          = dword ptr  28h
.text:000009F0 arg_24          = dword ptr  2Ch
.text:000009F0
.text:000009F0                 push    ebp
.text:000009F1                 mov     ebp, esp
.text:000009F3                 sub     esp, 28h
.text:000009F6                 push    edi
.text:000009F7                 lea     edi, [ebp+var_28]
.text:000009FA                 mov     ecx, 0Ah
.text:000009FF                 mov     eax, 0CCCCCCCCh
.text:00000A04                 rep stosd
.text:00000A06                 mov     eax, [ebp+arg_14]
.text:00000A09                 shl     eax, 1
.text:00000A0B                 mov     ecx, [ebp+arg_10]
.text:00000A0E                 lea     edx, [ecx+eax*4+4]
.text:00000A12                 mov     [ebp+var_4], edx
.text:00000A15                 mov     eax, [ebp+arg_14]
.text:00000A18                 shl     eax, 1
.text:00000A1A                 mov     ecx, [ebp+arg_10]
.text:00000A1D                 lea     edx, [ecx+eax*4]
.text:00000A20                 mov     [ebp+var_8], edx
.text:00000A23                 mov     [ebp+var_C], 0
.text:00000A2A                 mov     [ebp+var_10], 0
.text:00000A31
.text:00000A31 loc_A31:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x):loc_BD9j
.text:00000A31                 mov     eax, [ebp+arg_8]
.text:00000A34                 sub     eax, [ebp+arg_4]
.text:00000A37                 mov     [ebp+var_14], eax
.text:00000A3A                 mov     ecx, [ebp+arg_1C]
.text:00000A3D                 mov     edx, [ebp+arg_1C]
.text:00000A40                 sub     edx, 1
.text:00000A43                 mov     [ebp+arg_1C], edx
.text:00000A46                 test    ecx, ecx
.text:00000A48                 jnz     short loc_A53
.text:00000A4A                 mov     [ebp+var_24], 1
.text:00000A51                 jmp     short loc_A5A
.text:00000A53 ; ---------------------------------------------------------------------------
.text:00000A53
.text:00000A53 loc_A53:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+58j
.text:00000A53                 mov     [ebp+var_24], 0
.text:00000A5A
.text:00000A5A loc_A5A:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+61j
.text:00000A5A                 cmp     [ebp+var_24], 0
.text:00000A5E                 jnz     short loc_A68
.text:00000A60                 mov     eax, [ebp+var_14]
.text:00000A63                 cmp     eax, [ebp+arg_18]
.text:00000A66                 jb      short loc_A82
.text:00000A68
.text:00000A68 loc_A68:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+6Ej
.text:00000A68                 mov     ecx, [ebp+var_8]
.text:00000A6B                 mov     dword ptr [ecx], 0
.text:00000A71                 mov     edx, [ebp+var_4]
.text:00000A74                 mov     dword ptr [edx], 0
.text:00000A7A                 mov     eax, [ebp+arg_20]
.text:00000A7D                 jmp     loc_BDE
.text:00000A82 ; ---------------------------------------------------------------------------
.text:00000A82
.text:00000A82 loc_A82:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+76j
.text:00000A82                 mov     eax, [ebp+arg_14]
.text:00000A85                 sub     eax, [ebp+var_14]
.text:00000A88                 mov     ecx, [ebp+var_14]
.text:00000A8B                 cmp     [ebp+arg_14], ecx
.text:00000A8E                 sbb     edx, edx
.text:00000A90                 and     edx, [ebp+arg_18]
.text:00000A93                 add     eax, edx
.text:00000A95                 shl     eax, 1
.text:00000A97                 mov     ecx, [ebp+arg_10]
.text:00000A9A                 lea     edx, [ecx+eax*4]
.text:00000A9D                 mov     [ebp+var_18], edx
.text:00000AA0                 mov     eax, [ebp+arg_C]
.text:00000AA3                 sub     eax, [ebp+var_14]
.text:00000AA6                 mov     [ebp+var_1C], eax
.text:00000AA9                 mov     ecx, [ebp+var_C]
.text:00000AAC                 cmp     ecx, [ebp+var_10]
.text:00000AAF                 jnb     short loc_AB9
.text:00000AB1                 mov     edx, [ebp+var_C]
.text:00000AB4                 mov     [ebp+var_28], edx
.text:00000AB7                 jmp     short loc_ABF
.text:00000AB9 ; ---------------------------------------------------------------------------
.text:00000AB9
.text:00000AB9 loc_AB9:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+BFj
.text:00000AB9                 mov     eax, [ebp+var_10]
.text:00000ABC                 mov     [ebp+var_28], eax
.text:00000ABF
.text:00000ABF loc_ABF:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+C7j
.text:00000ABF                 mov     ecx, [ebp+var_28]
.text:00000AC2                 mov     [ebp+var_20], ecx
.text:00000AC5                 mov     edx, [ebp+var_1C]
.text:00000AC8                 add     edx, [ebp+var_20]
.text:00000ACB                 movzx   eax, byte ptr [edx]
.text:00000ACE                 mov     ecx, [ebp+arg_C]
.text:00000AD1                 add     ecx, [ebp+var_20]
.text:00000AD4                 movzx   edx, byte ptr [ecx]
.text:00000AD7                 cmp     eax, edx
.text:00000AD9                 jnz     loc_B86
.text:00000ADF                 mov     eax, [ebp+var_20]
.text:00000AE2                 add     eax, 1
.text:00000AE5                 mov     [ebp+var_20], eax
.text:00000AE8                 mov     ecx, [ebp+var_20]
.text:00000AEB                 cmp     ecx, [ebp+arg_0]
.text:00000AEE                 jz      short loc_B31
.text:00000AF0                 mov     edx, [ebp+var_1C]
.text:00000AF3                 add     edx, [ebp+var_20]
.text:00000AF6                 movzx   eax, byte ptr [edx]
.text:00000AF9                 mov     ecx, [ebp+arg_C]
.text:00000AFC                 add     ecx, [ebp+var_20]
.text:00000AFF                 movzx   edx, byte ptr [ecx]
.text:00000B02                 cmp     eax, edx
.text:00000B04                 jnz     short loc_B31
.text:00000B06
.text:00000B06 loc_B06:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x):loc_B2Fj
.text:00000B06                 mov     eax, [ebp+var_20]
.text:00000B09                 add     eax, 1
.text:00000B0C                 mov     [ebp+var_20], eax
.text:00000B0F                 mov     ecx, [ebp+var_20]
.text:00000B12                 cmp     ecx, [ebp+arg_0]
.text:00000B15                 jz      short loc_B31
.text:00000B17                 mov     edx, [ebp+var_1C]
.text:00000B1A                 add     edx, [ebp+var_20]
.text:00000B1D                 movzx   eax, byte ptr [edx]
.text:00000B20                 mov     ecx, [ebp+arg_C]
.text:00000B23                 add     ecx, [ebp+var_20]
.text:00000B26                 movzx   edx, byte ptr [ecx]
.text:00000B29                 cmp     eax, edx
.text:00000B2B                 jz      short loc_B2F
.text:00000B2D                 jmp     short loc_B31
.text:00000B2F ; ---------------------------------------------------------------------------
.text:00000B2F
.text:00000B2F loc_B2F:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+13Bj
.text:00000B2F                 jmp     short loc_B06
.text:00000B31 ; ---------------------------------------------------------------------------
.text:00000B31
.text:00000B31 loc_B31:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+FEj
.text:00000B31                                         ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+114j ...
.text:00000B31                 mov     eax, [ebp+arg_24]
.text:00000B34                 cmp     eax, [ebp+var_20]
.text:00000B37                 jnb     short loc_B86
.text:00000B39                 mov     ecx, [ebp+var_20]
.text:00000B3C                 mov     [ebp+arg_24], ecx
.text:00000B3F                 mov     edx, [ebp+arg_20]
.text:00000B42                 mov     eax, [ebp+arg_24]
.text:00000B45                 mov     [edx], eax
.text:00000B47                 mov     ecx, [ebp+arg_20]
.text:00000B4A                 add     ecx, 4
.text:00000B4D                 mov     [ebp+arg_20], ecx
.text:00000B50                 mov     edx, [ebp+var_14]
.text:00000B53                 sub     edx, 1
.text:00000B56                 mov     eax, [ebp+arg_20]
.text:00000B59                 mov     [eax], edx
.text:00000B5B                 mov     ecx, [ebp+arg_20]
.text:00000B5E                 add     ecx, 4
.text:00000B61                 mov     [ebp+arg_20], ecx
.text:00000B64                 mov     edx, [ebp+var_20]
.text:00000B67                 cmp     edx, [ebp+arg_0]
.text:00000B6A                 jnz     short loc_B86
.text:00000B6C                 mov     eax, [ebp+var_8]
.text:00000B6F                 mov     ecx, [ebp+var_18]
.text:00000B72                 mov     edx, [ecx]
.text:00000B74                 mov     [eax], edx
.text:00000B76                 mov     eax, [ebp+var_4]
.text:00000B79                 mov     ecx, [ebp+var_18]
.text:00000B7C                 mov     edx, [ecx+4]
.text:00000B7F                 mov     [eax], edx
.text:00000B81                 mov     eax, [ebp+arg_20]
.text:00000B84                 jmp     short loc_BDE
.text:00000B86 ; ---------------------------------------------------------------------------
.text:00000B86
.text:00000B86 loc_B86:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+E9j
.text:00000B86                                         ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+147j ...
.text:00000B86                 mov     eax, [ebp+var_1C]
.text:00000B89                 add     eax, [ebp+var_20]
.text:00000B8C                 movzx   ecx, byte ptr [eax]
.text:00000B8F                 mov     edx, [ebp+arg_C]
.text:00000B92                 add     edx, [ebp+var_20]
.text:00000B95                 movzx   eax, byte ptr [edx]
.text:00000B98                 cmp     ecx, eax
.text:00000B9A                 jge     short loc_BBD
.text:00000B9C                 mov     ecx, [ebp+var_8]
.text:00000B9F                 mov     edx, [ebp+arg_4]
.text:00000BA2                 mov     [ecx], edx
.text:00000BA4                 mov     eax, [ebp+var_18]
.text:00000BA7                 add     eax, 4
.text:00000BAA                 mov     [ebp+var_8], eax
.text:00000BAD                 mov     ecx, [ebp+var_8]
.text:00000BB0                 mov     edx, [ecx]
.text:00000BB2                 mov     [ebp+arg_4], edx
.text:00000BB5                 mov     eax, [ebp+var_20]
.text:00000BB8                 mov     [ebp+var_10], eax
.text:00000BBB                 jmp     short loc_BD9
.text:00000BBD ; ---------------------------------------------------------------------------
.text:00000BBD
.text:00000BBD loc_BBD:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+1AAj
.text:00000BBD                 mov     ecx, [ebp+var_4]
.text:00000BC0                 mov     edx, [ebp+arg_4]
.text:00000BC3                 mov     [ecx], edx
.text:00000BC5                 mov     eax, [ebp+var_18]
.text:00000BC8                 mov     [ebp+var_4], eax
.text:00000BCB                 mov     ecx, [ebp+var_4]
.text:00000BCE                 mov     edx, [ecx]
.text:00000BD0                 mov     [ebp+arg_4], edx
.text:00000BD3                 mov     eax, [ebp+var_20]
.text:00000BD6                 mov     [ebp+var_C], eax
.text:00000BD9
.text:00000BD9 loc_BD9:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+1CBj
.text:00000BD9                 jmp     loc_A31
.text:00000BDE ; ---------------------------------------------------------------------------
.text:00000BDE
.text:00000BDE loc_BDE:                                ; CODE XREF: GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+8Dj
.text:00000BDE                                         ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)+194j
.text:00000BDE                 pop     edi
.text:00000BDF                 mov     esp, ebp
.text:00000BE1                 pop     ebp
.text:00000BE2                 retn    28h
.text:00000BE2 _GetMatchesSpec1@40 endp
.text:00000BE2
.text:00000BE2 ; ---------------------------------------------------------------------------
.text:00000BE5                 align 10h
.text:00000BF0
.text:00000BF0 ; =============== S U B R O U T I N E =======================================
.text:00000BF0
.text:00000BF0 ; Attributes: bp-based frame
.text:00000BF0
.text:00000BF0 ; __stdcall Bt3Zip_MatchFinder_GetMatches(x, x)
.text:00000BF0                 public _Bt3Zip_MatchFinder_GetMatches@8
.text:00000BF0 _Bt3Zip_MatchFinder_GetMatches@8 proc near
.text:00000BF0
.text:00000BF0 var_18          = dword ptr -18h
.text:00000BF0 var_14          = dword ptr -14h
.text:00000BF0 var_10          = dword ptr -10h
.text:00000BF0 var_C           = dword ptr -0Ch
.text:00000BF0 var_8           = dword ptr -8
.text:00000BF0 var_4           = dword ptr -4
.text:00000BF0 arg_0           = dword ptr  8
.text:00000BF0 arg_4           = dword ptr  0Ch
.text:00000BF0
.text:00000BF0                 push    ebp
.text:00000BF1                 mov     ebp, esp
.text:00000BF3                 sub     esp, 18h
.text:00000BF6                 mov     eax, 0CCCCCCCCh
.text:00000BFB                 mov     [ebp+var_18], eax
.text:00000BFE                 mov     [ebp+var_14], eax
.text:00000C01                 mov     [ebp+var_10], eax
.text:00000C04                 mov     [ebp+var_C], eax
.text:00000C07                 mov     [ebp+var_8], eax
.text:00000C0A                 mov     [ebp+var_4], eax
.text:00000C0D                 mov     eax, [ebp+arg_0]
.text:00000C10                 mov     ecx, [eax+10h]
.text:00000C13                 mov     [ebp+var_8], ecx
.text:00000C16                 cmp     [ebp+var_8], 3
.text:00000C1A                 jnb     short loc_C2C
.text:00000C1C                 mov     edx, [ebp+arg_0]
.text:00000C1F                 push    edx
.text:00000C20                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00000C25                 xor     eax, eax
.text:00000C27                 jmp     loc_D17
.text:00000C2C ; ---------------------------------------------------------------------------
.text:00000C2C
.text:00000C2C loc_C2C:                                ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+2Aj
.text:00000C2C                 mov     eax, [ebp+arg_0]
.text:00000C2F                 mov     ecx, [eax]
.text:00000C31                 mov     [ebp+var_10], ecx
.text:00000C34                 mov     edx, [ebp+var_10]
.text:00000C37                 movzx   eax, byte ptr [edx+2]
.text:00000C3B                 mov     ecx, [ebp+var_10]
.text:00000C3E                 movzx   edx, byte ptr [ecx]
.text:00000C41                 shl     edx, 8
.text:00000C44                 or      eax, edx
.text:00000C46                 mov     ecx, [ebp+var_10]
.text:00000C49                 movzx   edx, byte ptr [ecx+1]
.text:00000C4D                 mov     ecx, [ebp+arg_0]
.text:00000C50                 xor     eax, [ecx+edx*4+60h]
.text:00000C54                 and     eax, 0FFFFh
.text:00000C59                 mov     [ebp+var_C], eax
.text:00000C5C                 mov     edx, [ebp+arg_0]
.text:00000C5F                 mov     eax, [edx+24h]
.text:00000C62                 mov     ecx, [ebp+var_C]
.text:00000C65                 mov     edx, [eax+ecx*4]
.text:00000C68                 mov     [ebp+var_14], edx
.text:00000C6B                 mov     eax, [ebp+arg_0]
.text:00000C6E                 mov     ecx, [eax+24h]
.text:00000C71                 mov     edx, [ebp+var_C]
.text:00000C74                 mov     eax, [ebp+arg_0]
.text:00000C77                 mov     eax, [eax+4]
.text:00000C7A                 mov     [ecx+edx*4], eax
.text:00000C7D                 mov     [ebp+var_4], 0
.text:00000C84                 push    2
.text:00000C86                 mov     ecx, [ebp+var_4]
.text:00000C89                 mov     edx, [ebp+arg_4]
.text:00000C8C                 lea     eax, [edx+ecx*4]
.text:00000C8F                 push    eax
.text:00000C90                 mov     ecx, [ebp+arg_0]
.text:00000C93                 mov     edx, [ecx+30h]
.text:00000C96                 push    edx
.text:00000C97                 mov     eax, [ebp+arg_0]
.text:00000C9A                 mov     ecx, [eax+18h]
.text:00000C9D                 push    ecx
.text:00000C9E                 mov     edx, [ebp+arg_0]
.text:00000CA1                 mov     eax, [edx+14h]
.text:00000CA4                 push    eax
.text:00000CA5                 mov     ecx, [ebp+arg_0]
.text:00000CA8                 mov     edx, [ecx+28h]
.text:00000CAB                 push    edx
.text:00000CAC                 mov     eax, [ebp+arg_0]
.text:00000CAF                 mov     ecx, [eax]
.text:00000CB1                 push    ecx
.text:00000CB2                 mov     edx, [ebp+arg_0]
.text:00000CB5                 mov     eax, [edx+4]
.text:00000CB8                 push    eax
.text:00000CB9                 mov     ecx, [ebp+var_14]
.text:00000CBC                 push    ecx
.text:00000CBD                 mov     edx, [ebp+var_8]
.text:00000CC0                 push    edx
.text:00000CC1                 call    _GetMatchesSpec1@40 ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)
.text:00000CC6                 sub     eax, [ebp+arg_4]
.text:00000CC9                 sar     eax, 2
.text:00000CCC                 mov     [ebp+var_4], eax
.text:00000CCF                 mov     eax, [ebp+arg_0]
.text:00000CD2                 mov     ecx, [eax+14h]
.text:00000CD5                 add     ecx, 1
.text:00000CD8                 mov     edx, [ebp+arg_0]
.text:00000CDB                 mov     [edx+14h], ecx
.text:00000CDE                 mov     eax, [ebp+arg_0]
.text:00000CE1                 mov     ecx, [eax]
.text:00000CE3                 add     ecx, 1
.text:00000CE6                 mov     edx, [ebp+arg_0]
.text:00000CE9                 mov     [edx], ecx
.text:00000CEB                 mov     eax, [ebp+arg_0]
.text:00000CEE                 mov     ecx, [eax+4]
.text:00000CF1                 add     ecx, 1
.text:00000CF4                 mov     [ebp+var_18], ecx
.text:00000CF7                 mov     edx, [ebp+arg_0]
.text:00000CFA                 mov     eax, [ebp+var_18]
.text:00000CFD                 mov     [edx+4], eax
.text:00000D00                 mov     ecx, [ebp+arg_0]
.text:00000D03                 mov     edx, [ebp+var_18]
.text:00000D06                 cmp     edx, [ecx+8]
.text:00000D09                 jnz     short loc_D14
.text:00000D0B                 mov     eax, [ebp+arg_0]
.text:00000D0E                 push    eax
.text:00000D0F                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+119j
.text:00000D14                 mov     eax, [ebp+var_4]
.text:00000D17
.text:00000D17 loc_D17:                                ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+37j
.text:00000D17                 add     esp, 18h
.text:00000D1A                 cmp     ebp, esp
.text:00000D1C                 call    __RTC_CheckEsp
.text:00000D21                 mov     esp, ebp
.text:00000D23                 pop     ebp
.text:00000D24                 retn    8
.text:00000D24 _Bt3Zip_MatchFinder_GetMatches@8 endp
.text:00000D24
.text:00000D24 ; ---------------------------------------------------------------------------
.text:00000D27                 align 10h
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; __stdcall MatchFinder_CheckLimits(x)
.text:00000D30 _MatchFinder_CheckLimits@4 proc near    ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+11Fp
.text:00000D30                                         ; MatchFinder_MovePos(x)+4Bp ...
.text:00000D30
.text:00000D30 arg_0           = dword ptr  8
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 mov     eax, [ebp+arg_0]
.text:00000D36                 cmp     dword ptr [eax+4], 0FFFFFFFFh
.text:00000D3A                 jnz     short loc_D45
.text:00000D3C                 mov     ecx, [ebp+arg_0]
.text:00000D3F                 push    ecx
.text:00000D40                 call    _MatchFinder_Normalize@4 ; MatchFinder_Normalize(x)
.text:00000D45
.text:00000D45 loc_D45:                                ; CODE XREF: MatchFinder_CheckLimits(x)+Aj
.text:00000D45                 mov     edx, [ebp+arg_0]
.text:00000D48                 movzx   eax, byte ptr [edx+1Ch]
.text:00000D4C                 test    eax, eax
.text:00000D4E                 jnz     short loc_D6D
.text:00000D50                 mov     ecx, [ebp+arg_0]
.text:00000D53                 mov     edx, [ebp+arg_0]
.text:00000D56                 mov     eax, [ecx+0Ch]
.text:00000D59                 sub     eax, [edx+4]
.text:00000D5C                 mov     ecx, [ebp+arg_0]
.text:00000D5F                 cmp     [ecx+44h], eax
.text:00000D62                 jnz     short loc_D6D
.text:00000D64                 mov     edx, [ebp+arg_0]
.text:00000D67                 push    edx
.text:00000D68                 call    _MatchFinder_CheckAndMoveAndRead@4 ; MatchFinder_CheckAndMoveAndRead(x)
.text:00000D6D
.text:00000D6D loc_D6D:                                ; CODE XREF: MatchFinder_CheckLimits(x)+1Ej
.text:00000D6D                                         ; MatchFinder_CheckLimits(x)+32j
.text:00000D6D                 mov     eax, [ebp+arg_0]
.text:00000D70                 mov     ecx, [ebp+arg_0]
.text:00000D73                 mov     edx, [eax+14h]
.text:00000D76                 cmp     edx, [ecx+18h]
.text:00000D79                 jnz     short loc_D85
.text:00000D7B                 mov     eax, [ebp+arg_0]
.text:00000D7E                 mov     dword ptr [eax+14h], 0
.text:00000D85
.text:00000D85 loc_D85:                                ; CODE XREF: MatchFinder_CheckLimits(x)+49j
.text:00000D85                 mov     ecx, [ebp+arg_0]
.text:00000D88                 push    ecx
.text:00000D89                 call    _MatchFinder_SetLimits@4 ; MatchFinder_SetLimits(x)
.text:00000D8E                 cmp     ebp, esp
.text:00000D90                 call    __RTC_CheckEsp
.text:00000D95                 pop     ebp
.text:00000D96                 retn    4
.text:00000D96 _MatchFinder_CheckLimits@4 endp
.text:00000D96
.text:00000D96 ; ---------------------------------------------------------------------------
.text:00000D99                 align 10h
.text:00000DA0
.text:00000DA0 ; =============== S U B R O U T I N E =======================================
.text:00000DA0
.text:00000DA0 ; Attributes: bp-based frame
.text:00000DA0
.text:00000DA0 ; __stdcall MatchFinder_CheckAndMoveAndRead(x)
.text:00000DA0 _MatchFinder_CheckAndMoveAndRead@4 proc near
.text:00000DA0                                         ; CODE XREF: MatchFinder_CheckLimits(x)+38p
.text:00000DA0
.text:00000DA0 arg_0           = dword ptr  8
.text:00000DA0
.text:00000DA0                 push    ebp
.text:00000DA1                 mov     ebp, esp
.text:00000DA3                 mov     eax, [ebp+arg_0]
.text:00000DA6                 push    eax
.text:00000DA7                 call    _MatchFinder_NeedMove@4 ; MatchFinder_NeedMove(x)
.text:00000DAC                 test    eax, eax
.text:00000DAE                 jz      short loc_DB9
.text:00000DB0                 mov     ecx, [ebp+arg_0]
.text:00000DB3                 push    ecx
.text:00000DB4                 call    _MatchFinder_MoveBlock@4 ; MatchFinder_MoveBlock(x)
.text:00000DB9
.text:00000DB9 loc_DB9:                                ; CODE XREF: MatchFinder_CheckAndMoveAndRead(x)+Ej
.text:00000DB9                 mov     edx, [ebp+arg_0]
.text:00000DBC                 push    edx
.text:00000DBD                 call    _MatchFinder_ReadBlock@4 ; MatchFinder_ReadBlock(x)
.text:00000DC2                 cmp     ebp, esp
.text:00000DC4                 call    __RTC_CheckEsp
.text:00000DC9                 pop     ebp
.text:00000DCA                 retn    4
.text:00000DCA _MatchFinder_CheckAndMoveAndRead@4 endp
.text:00000DCA
.text:00000DCA ; ---------------------------------------------------------------------------
.text:00000DCD                 align 10h
.text:00000DD0
.text:00000DD0 ; =============== S U B R O U T I N E =======================================
.text:00000DD0
.text:00000DD0 ; Attributes: bp-based frame
.text:00000DD0
.text:00000DD0 ; __stdcall MatchFinder_Normalize(x)
.text:00000DD0 _MatchFinder_Normalize@4 proc near      ; CODE XREF: MatchFinder_CheckLimits(x)+10p
.text:00000DD0
.text:00000DD0 var_4           = dword ptr -4
.text:00000DD0 arg_0           = dword ptr  8
.text:00000DD0
.text:00000DD0                 push    ebp
.text:00000DD1                 mov     ebp, esp
.text:00000DD3                 push    ecx
.text:00000DD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DDB                 mov     eax, [ebp+arg_0]
.text:00000DDE                 push    eax
.text:00000DDF                 call    _MatchFinder_GetSubValue@4 ; MatchFinder_GetSubValue(x)
.text:00000DE4                 mov     [ebp+var_4], eax
.text:00000DE7                 mov     ecx, [ebp+arg_0]
.text:00000DEA                 mov     edx, [ecx+460h]
.text:00000DF0                 push    edx
.text:00000DF1                 mov     eax, [ebp+arg_0]
.text:00000DF4                 mov     ecx, [eax+24h]
.text:00000DF7                 push    ecx
.text:00000DF8                 mov     edx, [ebp+var_4]
.text:00000DFB                 push    edx
.text:00000DFC                 call    _MatchFinder_Normalize3@12 ; MatchFinder_Normalize3(x,x,x)
.text:00000E01                 mov     eax, [ebp+var_4]
.text:00000E04                 push    eax
.text:00000E05                 mov     ecx, [ebp+arg_0]
.text:00000E08                 push    ecx
.text:00000E09                 call    _MatchFinder_ReduceOffsets@8 ; MatchFinder_ReduceOffsets(x,x)
.text:00000E0E                 add     esp, 4
.text:00000E11                 cmp     ebp, esp
.text:00000E13                 call    __RTC_CheckEsp
.text:00000E18                 mov     esp, ebp
.text:00000E1A                 pop     ebp
.text:00000E1B                 retn    4
.text:00000E1B _MatchFinder_Normalize@4 endp
.text:00000E1B
.text:00000E1B ; ---------------------------------------------------------------------------
.text:00000E1E                 align 10h
.text:00000E20
.text:00000E20 ; =============== S U B R O U T I N E =======================================
.text:00000E20
.text:00000E20 ; Attributes: bp-based frame
.text:00000E20
.text:00000E20 ; __stdcall MatchFinder_GetSubValue(x)
.text:00000E20 _MatchFinder_GetSubValue@4 proc near    ; CODE XREF: MatchFinder_Normalize(x)+Fp
.text:00000E20
.text:00000E20 arg_0           = dword ptr  8
.text:00000E20
.text:00000E20                 push    ebp
.text:00000E21                 mov     ebp, esp
.text:00000E23                 mov     eax, [ebp+arg_0]
.text:00000E26                 mov     ecx, [ebp+arg_0]
.text:00000E29                 mov     eax, [eax+4]
.text:00000E2C                 sub     eax, [ecx+50h]
.text:00000E2F                 sub     eax, 1
.text:00000E32                 and     eax, 0FFFFFC00h
.text:00000E37                 pop     ebp
.text:00000E38                 retn    4
.text:00000E38 _MatchFinder_GetSubValue@4 endp
.text:00000E38
.text:00000E38 ; ---------------------------------------------------------------------------
.text:00000E3B                 align 10h
.text:00000E40
.text:00000E40 ; =============== S U B R O U T I N E =======================================
.text:00000E40
.text:00000E40 ; Attributes: bp-based frame
.text:00000E40
.text:00000E40 ; __stdcall MatchFinder_MovePos(x)
.text:00000E40 _MatchFinder_MovePos@4 proc near        ; CODE XREF: Bt3Zip_MatchFinder_GetMatches(x,x)+30p
.text:00000E40                                         ; Hc3Zip_MatchFinder_GetMatches(x,x)+30p ...
.text:00000E40
.text:00000E40 var_4           = dword ptr -4
.text:00000E40 arg_0           = dword ptr  8
.text:00000E40
.text:00000E40                 push    ebp
.text:00000E41                 mov     ebp, esp
.text:00000E43                 push    ecx
.text:00000E44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E4B                 mov     eax, [ebp+arg_0]
.text:00000E4E                 mov     ecx, [eax+14h]
.text:00000E51                 add     ecx, 1
.text:00000E54                 mov     edx, [ebp+arg_0]
.text:00000E57                 mov     [edx+14h], ecx
.text:00000E5A                 mov     eax, [ebp+arg_0]
.text:00000E5D                 mov     ecx, [eax]
.text:00000E5F                 add     ecx, 1
.text:00000E62                 mov     edx, [ebp+arg_0]
.text:00000E65                 mov     [edx], ecx
.text:00000E67                 mov     eax, [ebp+arg_0]
.text:00000E6A                 mov     ecx, [eax+4]
.text:00000E6D                 add     ecx, 1
.text:00000E70                 mov     [ebp+var_4], ecx
.text:00000E73                 mov     edx, [ebp+arg_0]
.text:00000E76                 mov     eax, [ebp+var_4]
.text:00000E79                 mov     [edx+4], eax
.text:00000E7C                 mov     ecx, [ebp+arg_0]
.text:00000E7F                 mov     edx, [ebp+var_4]
.text:00000E82                 cmp     edx, [ecx+8]
.text:00000E85                 jnz     short loc_E90
.text:00000E87                 mov     eax, [ebp+arg_0]
.text:00000E8A                 push    eax
.text:00000E8B                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00000E90
.text:00000E90 loc_E90:                                ; CODE XREF: MatchFinder_MovePos(x)+45j
.text:00000E90                 add     esp, 4
.text:00000E93                 cmp     ebp, esp
.text:00000E95                 call    __RTC_CheckEsp
.text:00000E9A                 mov     esp, ebp
.text:00000E9C                 pop     ebp
.text:00000E9D                 retn    4
.text:00000E9D _MatchFinder_MovePos@4 endp
.text:00000E9D
.text:00000EA0
.text:00000EA0 ; =============== S U B R O U T I N E =======================================
.text:00000EA0
.text:00000EA0 ; Attributes: bp-based frame
.text:00000EA0
.text:00000EA0 ; __stdcall Hc3Zip_MatchFinder_GetMatches(x, x)
.text:00000EA0                 public _Hc3Zip_MatchFinder_GetMatches@8
.text:00000EA0 _Hc3Zip_MatchFinder_GetMatches@8 proc near
.text:00000EA0
.text:00000EA0 var_18          = dword ptr -18h
.text:00000EA0 var_14          = dword ptr -14h
.text:00000EA0 var_10          = dword ptr -10h
.text:00000EA0 var_C           = dword ptr -0Ch
.text:00000EA0 var_8           = dword ptr -8
.text:00000EA0 var_4           = dword ptr -4
.text:00000EA0 arg_0           = dword ptr  8
.text:00000EA0 arg_4           = dword ptr  0Ch
.text:00000EA0
.text:00000EA0                 push    ebp
.text:00000EA1                 mov     ebp, esp
.text:00000EA3                 sub     esp, 18h
.text:00000EA6                 mov     eax, 0CCCCCCCCh
.text:00000EAB                 mov     [ebp+var_18], eax
.text:00000EAE                 mov     [ebp+var_14], eax
.text:00000EB1                 mov     [ebp+var_10], eax
.text:00000EB4                 mov     [ebp+var_C], eax
.text:00000EB7                 mov     [ebp+var_8], eax
.text:00000EBA                 mov     [ebp+var_4], eax
.text:00000EBD                 mov     eax, [ebp+arg_0]
.text:00000EC0                 mov     ecx, [eax+10h]
.text:00000EC3                 mov     [ebp+var_8], ecx
.text:00000EC6                 cmp     [ebp+var_8], 3
.text:00000ECA                 jnb     short loc_EDC
.text:00000ECC                 mov     edx, [ebp+arg_0]
.text:00000ECF                 push    edx
.text:00000ED0                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00000ED5                 xor     eax, eax
.text:00000ED7                 jmp     loc_FBA
.text:00000EDC ; ---------------------------------------------------------------------------
.text:00000EDC
.text:00000EDC loc_EDC:                                ; CODE XREF: Hc3Zip_MatchFinder_GetMatches(x,x)+2Aj
.text:00000EDC                 mov     eax, [ebp+arg_0]
.text:00000EDF                 mov     ecx, [eax]
.text:00000EE1                 mov     [ebp+var_10], ecx
.text:00000EE4                 mov     edx, [ebp+var_10]
.text:00000EE7                 movzx   eax, byte ptr [edx+2]
.text:00000EEB                 mov     ecx, [ebp+var_10]
.text:00000EEE                 movzx   edx, byte ptr [ecx]
.text:00000EF1                 shl     edx, 8
.text:00000EF4                 or      eax, edx
.text:00000EF6                 mov     ecx, [ebp+var_10]
.text:00000EF9                 movzx   edx, byte ptr [ecx+1]
.text:00000EFD                 mov     ecx, [ebp+arg_0]
.text:00000F00                 xor     eax, [ecx+edx*4+60h]
.text:00000F04                 and     eax, 0FFFFh
.text:00000F09                 mov     [ebp+var_C], eax
.text:00000F0C                 mov     edx, [ebp+arg_0]
.text:00000F0F                 mov     eax, [edx+24h]
.text:00000F12                 mov     ecx, [ebp+var_C]
.text:00000F15                 mov     edx, [eax+ecx*4]
.text:00000F18                 mov     [ebp+var_14], edx
.text:00000F1B                 mov     eax, [ebp+arg_0]
.text:00000F1E                 mov     ecx, [eax+24h]
.text:00000F21                 mov     edx, [ebp+var_C]
.text:00000F24                 mov     eax, [ebp+arg_0]
.text:00000F27                 mov     eax, [eax+4]
.text:00000F2A                 mov     [ecx+edx*4], eax
.text:00000F2D                 push    2
.text:00000F2F                 mov     ecx, [ebp+arg_4]
.text:00000F32                 push    ecx
.text:00000F33                 mov     edx, [ebp+arg_0]
.text:00000F36                 mov     eax, [edx+30h]
.text:00000F39                 push    eax
.text:00000F3A                 mov     ecx, [ebp+arg_0]
.text:00000F3D                 mov     edx, [ecx+18h]
.text:00000F40                 push    edx
.text:00000F41                 mov     eax, [ebp+arg_0]
.text:00000F44                 mov     ecx, [eax+14h]
.text:00000F47                 push    ecx
.text:00000F48                 mov     edx, [ebp+arg_0]
.text:00000F4B                 mov     eax, [edx+28h]
.text:00000F4E                 push    eax
.text:00000F4F                 mov     ecx, [ebp+arg_0]
.text:00000F52                 mov     edx, [ecx]
.text:00000F54                 push    edx
.text:00000F55                 mov     eax, [ebp+arg_0]
.text:00000F58                 mov     ecx, [eax+4]
.text:00000F5B                 push    ecx
.text:00000F5C                 mov     edx, [ebp+var_14]
.text:00000F5F                 push    edx
.text:00000F60                 mov     eax, [ebp+var_8]
.text:00000F63                 push    eax
.text:00000F64                 call    _Hc_GetMatchesSpec@40 ; Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)
.text:00000F69                 sub     eax, [ebp+arg_4]
.text:00000F6C                 sar     eax, 2
.text:00000F6F                 mov     [ebp+var_4], eax
.text:00000F72                 mov     ecx, [ebp+arg_0]
.text:00000F75                 mov     edx, [ecx+14h]
.text:00000F78                 add     edx, 1
.text:00000F7B                 mov     eax, [ebp+arg_0]
.text:00000F7E                 mov     [eax+14h], edx
.text:00000F81                 mov     ecx, [ebp+arg_0]
.text:00000F84                 mov     edx, [ecx]
.text:00000F86                 add     edx, 1
.text:00000F89                 mov     eax, [ebp+arg_0]
.text:00000F8C                 mov     [eax], edx
.text:00000F8E                 mov     ecx, [ebp+arg_0]
.text:00000F91                 mov     edx, [ecx+4]
.text:00000F94                 add     edx, 1
.text:00000F97                 mov     [ebp+var_18], edx
.text:00000F9A                 mov     eax, [ebp+arg_0]
.text:00000F9D                 mov     ecx, [ebp+var_18]
.text:00000FA0                 mov     [eax+4], ecx
.text:00000FA3                 mov     edx, [ebp+arg_0]
.text:00000FA6                 mov     eax, [ebp+var_18]
.text:00000FA9                 cmp     eax, [edx+8]
.text:00000FAC                 jnz     short loc_FB7
.text:00000FAE                 mov     ecx, [ebp+arg_0]
.text:00000FB1                 push    ecx
.text:00000FB2                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00000FB7
.text:00000FB7 loc_FB7:                                ; CODE XREF: Hc3Zip_MatchFinder_GetMatches(x,x)+10Cj
.text:00000FB7                 mov     eax, [ebp+var_4]
.text:00000FBA
.text:00000FBA loc_FBA:                                ; CODE XREF: Hc3Zip_MatchFinder_GetMatches(x,x)+37j
.text:00000FBA                 add     esp, 18h
.text:00000FBD                 cmp     ebp, esp
.text:00000FBF                 call    __RTC_CheckEsp
.text:00000FC4                 mov     esp, ebp
.text:00000FC6                 pop     ebp
.text:00000FC7                 retn    8
.text:00000FC7 _Hc3Zip_MatchFinder_GetMatches@8 endp
.text:00000FC7
.text:00000FC7 ; ---------------------------------------------------------------------------
.text:00000FCA                 align 10h
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; __stdcall Hc_GetMatchesSpec(x, x, x, x, x, x, x, x, x, x)
.text:00000FD0 _Hc_GetMatchesSpec@40 proc near         ; CODE XREF: Hc3Zip_MatchFinder_GetMatches(x,x)+C4p
.text:00000FD0                                         ; Hc4_MatchFinder_GetMatches(x,x)+2BAp
.text:00000FD0
.text:00000FD0 var_10          = dword ptr -10h
.text:00000FD0 var_C           = dword ptr -0Ch
.text:00000FD0 var_8           = dword ptr -8
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0 arg_0           = dword ptr  8
.text:00000FD0 arg_4           = dword ptr  0Ch
.text:00000FD0 arg_8           = dword ptr  10h
.text:00000FD0 arg_C           = dword ptr  14h
.text:00000FD0 arg_10          = dword ptr  18h
.text:00000FD0 arg_14          = dword ptr  1Ch
.text:00000FD0 arg_18          = dword ptr  20h
.text:00000FD0 arg_1C          = dword ptr  24h
.text:00000FD0 arg_20          = dword ptr  28h
.text:00000FD0 arg_24          = dword ptr  2Ch
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 sub     esp, 10h
.text:00000FD6                 mov     eax, 0CCCCCCCCh
.text:00000FDB                 mov     [ebp+var_10], eax
.text:00000FDE                 mov     [ebp+var_C], eax
.text:00000FE1                 mov     [ebp+var_8], eax
.text:00000FE4                 mov     [ebp+var_4], eax
.text:00000FE7                 mov     eax, [ebp+arg_14]
.text:00000FEA                 mov     ecx, [ebp+arg_10]
.text:00000FED                 mov     edx, [ebp+arg_4]
.text:00000FF0                 mov     [ecx+eax*4], edx
.text:00000FF3
.text:00000FF3 loc_FF3:                                ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x):loc_10F3j
.text:00000FF3                 mov     eax, [ebp+arg_8]
.text:00000FF6                 sub     eax, [ebp+arg_4]
.text:00000FF9                 mov     [ebp+var_4], eax
.text:00000FFC                 mov     ecx, [ebp+arg_1C]
.text:00000FFF                 mov     edx, [ebp+arg_1C]
.text:00001002                 sub     edx, 1
.text:00001005                 mov     [ebp+arg_1C], edx
.text:00001008                 test    ecx, ecx
.text:0000100A                 jnz     short loc_1015
.text:0000100C                 mov     [ebp+var_10], 1
.text:00001013                 jmp     short loc_101C
.text:00001015 ; ---------------------------------------------------------------------------
.text:00001015
.text:00001015 loc_1015:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+3Aj
.text:00001015                 mov     [ebp+var_10], 0
.text:0000101C
.text:0000101C loc_101C:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+43j
.text:0000101C                 cmp     [ebp+var_10], 0
.text:00001020                 jnz     short loc_102A
.text:00001022                 mov     eax, [ebp+var_4]
.text:00001025                 cmp     eax, [ebp+arg_18]
.text:00001028                 jb      short loc_1032
.text:0000102A
.text:0000102A loc_102A:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+50j
.text:0000102A                 mov     eax, [ebp+arg_20]
.text:0000102D                 jmp     loc_10F8
.text:00001032 ; ---------------------------------------------------------------------------
.text:00001032
.text:00001032 loc_1032:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+58j
.text:00001032                 mov     ecx, [ebp+arg_C]
.text:00001035                 sub     ecx, [ebp+var_4]
.text:00001038                 mov     [ebp+var_8], ecx
.text:0000103B                 mov     edx, [ebp+arg_14]
.text:0000103E                 sub     edx, [ebp+var_4]
.text:00001041                 mov     eax, [ebp+var_4]
.text:00001044                 cmp     [ebp+arg_14], eax
.text:00001047                 sbb     ecx, ecx
.text:00001049                 and     ecx, [ebp+arg_18]
.text:0000104C                 add     edx, ecx
.text:0000104E                 mov     eax, [ebp+arg_10]
.text:00001051                 mov     ecx, [eax+edx*4]
.text:00001054                 mov     [ebp+arg_4], ecx
.text:00001057                 mov     edx, [ebp+var_8]
.text:0000105A                 add     edx, [ebp+arg_24]
.text:0000105D                 movzx   eax, byte ptr [edx]
.text:00001060                 mov     ecx, [ebp+arg_C]
.text:00001063                 add     ecx, [ebp+arg_24]
.text:00001066                 movzx   edx, byte ptr [ecx]
.text:00001069                 cmp     eax, edx
.text:0000106B                 jnz     loc_10F3
.text:00001071                 mov     eax, [ebp+var_8]
.text:00001074                 movzx   ecx, byte ptr [eax]
.text:00001077                 mov     edx, [ebp+arg_C]
.text:0000107A                 movzx   eax, byte ptr [edx]
.text:0000107D                 cmp     ecx, eax
.text:0000107F                 jnz     short loc_10F3
.text:00001081                 mov     [ebp+var_C], 0
.text:00001088
.text:00001088 loc_1088:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x):loc_10B1j
.text:00001088                 mov     ecx, [ebp+var_C]
.text:0000108B                 add     ecx, 1
.text:0000108E                 mov     [ebp+var_C], ecx
.text:00001091                 mov     edx, [ebp+var_C]
.text:00001094                 cmp     edx, [ebp+arg_0]
.text:00001097                 jz      short loc_10B3
.text:00001099                 mov     eax, [ebp+var_8]
.text:0000109C                 add     eax, [ebp+var_C]
.text:0000109F                 movzx   ecx, byte ptr [eax]
.text:000010A2                 mov     edx, [ebp+arg_C]
.text:000010A5                 add     edx, [ebp+var_C]
.text:000010A8                 movzx   eax, byte ptr [edx]
.text:000010AB                 cmp     ecx, eax
.text:000010AD                 jz      short loc_10B1
.text:000010AF                 jmp     short loc_10B3
.text:000010B1 ; ---------------------------------------------------------------------------
.text:000010B1
.text:000010B1 loc_10B1:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+DDj
.text:000010B1                 jmp     short loc_1088
.text:000010B3 ; ---------------------------------------------------------------------------
.text:000010B3
.text:000010B3 loc_10B3:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+C7j
.text:000010B3                                         ; Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+DFj
.text:000010B3                 mov     ecx, [ebp+arg_24]
.text:000010B6                 cmp     ecx, [ebp+var_C]
.text:000010B9                 jnb     short loc_10F3
.text:000010BB                 mov     edx, [ebp+var_C]
.text:000010BE                 mov     [ebp+arg_24], edx
.text:000010C1                 mov     eax, [ebp+arg_20]
.text:000010C4                 mov     ecx, [ebp+arg_24]
.text:000010C7                 mov     [eax], ecx
.text:000010C9                 mov     edx, [ebp+arg_20]
.text:000010CC                 add     edx, 4
.text:000010CF                 mov     [ebp+arg_20], edx
.text:000010D2                 mov     eax, [ebp+var_4]
.text:000010D5                 sub     eax, 1
.text:000010D8                 mov     ecx, [ebp+arg_20]
.text:000010DB                 mov     [ecx], eax
.text:000010DD                 mov     edx, [ebp+arg_20]
.text:000010E0                 add     edx, 4
.text:000010E3                 mov     [ebp+arg_20], edx
.text:000010E6                 mov     eax, [ebp+var_C]
.text:000010E9                 cmp     eax, [ebp+arg_0]
.text:000010EC                 jnz     short loc_10F3
.text:000010EE                 mov     eax, [ebp+arg_20]
.text:000010F1                 jmp     short loc_10F8
.text:000010F3 ; ---------------------------------------------------------------------------
.text:000010F3
.text:000010F3 loc_10F3:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+9Bj
.text:000010F3                                         ; Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+AFj ...
.text:000010F3                 jmp     loc_FF3
.text:000010F8 ; ---------------------------------------------------------------------------
.text:000010F8
.text:000010F8 loc_10F8:                               ; CODE XREF: Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+5Dj
.text:000010F8                                         ; Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)+121j
.text:000010F8                 mov     esp, ebp
.text:000010FA                 pop     ebp
.text:000010FB                 retn    28h
.text:000010FB _Hc_GetMatchesSpec@40 endp
.text:000010FB
.text:000010FB ; ---------------------------------------------------------------------------
.text:000010FE                 align 10h
.text:00001100
.text:00001100 ; =============== S U B R O U T I N E =======================================
.text:00001100
.text:00001100 ; Attributes: bp-based frame
.text:00001100
.text:00001100 ; __stdcall Bt3Zip_MatchFinder_Skip(x, x)
.text:00001100                 public _Bt3Zip_MatchFinder_Skip@8
.text:00001100 _Bt3Zip_MatchFinder_Skip@8 proc near
.text:00001100
.text:00001100 var_14          = dword ptr -14h
.text:00001100 var_10          = dword ptr -10h
.text:00001100 var_C           = dword ptr -0Ch
.text:00001100 var_8           = dword ptr -8
.text:00001100 var_4           = dword ptr -4
.text:00001100 arg_0           = dword ptr  8
.text:00001100 arg_4           = dword ptr  0Ch
.text:00001100
.text:00001100                 push    ebp
.text:00001101                 mov     ebp, esp
.text:00001103                 sub     esp, 14h
.text:00001106                 mov     eax, 0CCCCCCCCh
.text:0000110B                 mov     [ebp+var_14], eax
.text:0000110E                 mov     [ebp+var_10], eax
.text:00001111                 mov     [ebp+var_C], eax
.text:00001114                 mov     [ebp+var_8], eax
.text:00001117                 mov     [ebp+var_4], eax
.text:0000111A
.text:0000111A loc_111A:                               ; CODE XREF: Bt3Zip_MatchFinder_Skip(x,x)+10Cj
.text:0000111A                 mov     eax, [ebp+arg_0]
.text:0000111D                 mov     ecx, [eax+10h]
.text:00001120                 mov     [ebp+var_4], ecx
.text:00001123                 cmp     [ebp+var_4], 3
.text:00001127                 jnb     short loc_1137
.text:00001129                 mov     edx, [ebp+arg_0]
.text:0000112C                 push    edx
.text:0000112D                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00001132                 jmp     loc_1203
.text:00001137 ; ---------------------------------------------------------------------------
.text:00001137
.text:00001137 loc_1137:                               ; CODE XREF: Bt3Zip_MatchFinder_Skip(x,x)+27j
.text:00001137                 mov     eax, [ebp+arg_0]
.text:0000113A                 mov     ecx, [eax]
.text:0000113C                 mov     [ebp+var_C], ecx
.text:0000113F                 mov     edx, [ebp+var_C]
.text:00001142                 movzx   eax, byte ptr [edx+2]
.text:00001146                 mov     ecx, [ebp+var_C]
.text:00001149                 movzx   edx, byte ptr [ecx]
.text:0000114C                 shl     edx, 8
.text:0000114F                 or      eax, edx
.text:00001151                 mov     ecx, [ebp+var_C]
.text:00001154                 movzx   edx, byte ptr [ecx+1]
.text:00001158                 mov     ecx, [ebp+arg_0]
.text:0000115B                 xor     eax, [ecx+edx*4+60h]
.text:0000115F                 and     eax, 0FFFFh
.text:00001164                 mov     [ebp+var_8], eax
.text:00001167                 mov     edx, [ebp+arg_0]
.text:0000116A                 mov     eax, [edx+24h]
.text:0000116D                 mov     ecx, [ebp+var_8]
.text:00001170                 mov     edx, [eax+ecx*4]
.text:00001173                 mov     [ebp+var_10], edx
.text:00001176                 mov     eax, [ebp+arg_0]
.text:00001179                 mov     ecx, [eax+24h]
.text:0000117C                 mov     edx, [ebp+var_8]
.text:0000117F                 mov     eax, [ebp+arg_0]
.text:00001182                 mov     eax, [eax+4]
.text:00001185                 mov     [ecx+edx*4], eax
.text:00001188                 mov     ecx, [ebp+arg_0]
.text:0000118B                 mov     edx, [ecx+30h]
.text:0000118E                 push    edx
.text:0000118F                 mov     eax, [ebp+arg_0]
.text:00001192                 mov     ecx, [eax+18h]
.text:00001195                 push    ecx
.text:00001196                 mov     edx, [ebp+arg_0]
.text:00001199                 mov     eax, [edx+14h]
.text:0000119C                 push    eax
.text:0000119D                 mov     ecx, [ebp+arg_0]
.text:000011A0                 mov     edx, [ecx+28h]
.text:000011A3                 push    edx
.text:000011A4                 mov     eax, [ebp+arg_0]
.text:000011A7                 mov     ecx, [eax]
.text:000011A9                 push    ecx
.text:000011AA                 mov     edx, [ebp+arg_0]
.text:000011AD                 mov     eax, [edx+4]
.text:000011B0                 push    eax
.text:000011B1                 mov     ecx, [ebp+var_10]
.text:000011B4                 push    ecx
.text:000011B5                 mov     edx, [ebp+var_4]
.text:000011B8                 push    edx
.text:000011B9                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:000011BE                 mov     eax, [ebp+arg_0]
.text:000011C1                 mov     ecx, [eax+14h]
.text:000011C4                 add     ecx, 1
.text:000011C7                 mov     edx, [ebp+arg_0]
.text:000011CA                 mov     [edx+14h], ecx
.text:000011CD                 mov     eax, [ebp+arg_0]
.text:000011D0                 mov     ecx, [eax]
.text:000011D2                 add     ecx, 1
.text:000011D5                 mov     edx, [ebp+arg_0]
.text:000011D8                 mov     [edx], ecx
.text:000011DA                 mov     eax, [ebp+arg_0]
.text:000011DD                 mov     ecx, [eax+4]
.text:000011E0                 add     ecx, 1
.text:000011E3                 mov     [ebp+var_14], ecx
.text:000011E6                 mov     edx, [ebp+arg_0]
.text:000011E9                 mov     eax, [ebp+var_14]
.text:000011EC                 mov     [edx+4], eax
.text:000011EF                 mov     ecx, [ebp+arg_0]
.text:000011F2                 mov     edx, [ebp+var_14]
.text:000011F5                 cmp     edx, [ecx+8]
.text:000011F8                 jnz     short loc_1203
.text:000011FA                 mov     eax, [ebp+arg_0]
.text:000011FD                 push    eax
.text:000011FE                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001203
.text:00001203 loc_1203:                               ; CODE XREF: Bt3Zip_MatchFinder_Skip(x,x)+32j
.text:00001203                                         ; Bt3Zip_MatchFinder_Skip(x,x)+F8j
.text:00001203                 mov     ecx, [ebp+arg_4]
.text:00001206                 sub     ecx, 1
.text:00001209                 mov     [ebp+arg_4], ecx
.text:0000120C                 jnz     loc_111A
.text:00001212                 add     esp, 14h
.text:00001215                 cmp     ebp, esp
.text:00001217                 call    __RTC_CheckEsp
.text:0000121C                 mov     esp, ebp
.text:0000121E                 pop     ebp
.text:0000121F                 retn    8
.text:0000121F _Bt3Zip_MatchFinder_Skip@8 endp
.text:0000121F
.text:0000121F ; ---------------------------------------------------------------------------
.text:00001222                 align 10h
.text:00001230
.text:00001230 ; =============== S U B R O U T I N E =======================================
.text:00001230
.text:00001230 ; Attributes: bp-based frame
.text:00001230
.text:00001230 ; __stdcall SkipMatchesSpec(x, x, x, x, x, x, x, x)
.text:00001230 _SkipMatchesSpec@32 proc near           ; CODE XREF: Bt3Zip_MatchFinder_Skip(x,x)+B9p
.text:00001230                                         ; Bt3_MatchFinder_GetMatches(x,x)+19Cp ...
.text:00001230
.text:00001230 var_28          = dword ptr -28h
.text:00001230 var_24          = dword ptr -24h
.text:00001230 var_20          = dword ptr -20h
.text:00001230 var_1C          = dword ptr -1Ch
.text:00001230 var_18          = dword ptr -18h
.text:00001230 var_14          = dword ptr -14h
.text:00001230 var_10          = dword ptr -10h
.text:00001230 var_C           = dword ptr -0Ch
.text:00001230 var_8           = dword ptr -8
.text:00001230 var_4           = dword ptr -4
.text:00001230 arg_0           = dword ptr  8
.text:00001230 arg_4           = dword ptr  0Ch
.text:00001230 arg_8           = dword ptr  10h
.text:00001230 arg_C           = dword ptr  14h
.text:00001230 arg_10          = dword ptr  18h
.text:00001230 arg_14          = dword ptr  1Ch
.text:00001230 arg_18          = dword ptr  20h
.text:00001230 arg_1C          = dword ptr  24h
.text:00001230
.text:00001230                 push    ebp
.text:00001231                 mov     ebp, esp
.text:00001233                 sub     esp, 28h
.text:00001236                 push    edi
.text:00001237                 lea     edi, [ebp+var_28]
.text:0000123A                 mov     ecx, 0Ah
.text:0000123F                 mov     eax, 0CCCCCCCCh
.text:00001244                 rep stosd
.text:00001246                 mov     eax, [ebp+arg_14]
.text:00001249                 shl     eax, 1
.text:0000124B                 mov     ecx, [ebp+arg_10]
.text:0000124E                 lea     edx, [ecx+eax*4+4]
.text:00001252                 mov     [ebp+var_4], edx
.text:00001255                 mov     eax, [ebp+arg_14]
.text:00001258                 shl     eax, 1
.text:0000125A                 mov     ecx, [ebp+arg_10]
.text:0000125D                 lea     edx, [ecx+eax*4]
.text:00001260                 mov     [ebp+var_8], edx
.text:00001263                 mov     [ebp+var_C], 0
.text:0000126A                 mov     [ebp+var_10], 0
.text:00001271
.text:00001271 loc_1271:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x):loc_13B5j
.text:00001271                 mov     eax, [ebp+arg_8]
.text:00001274                 sub     eax, [ebp+arg_4]
.text:00001277                 mov     [ebp+var_14], eax
.text:0000127A                 mov     ecx, [ebp+arg_1C]
.text:0000127D                 mov     edx, [ebp+arg_1C]
.text:00001280                 sub     edx, 1
.text:00001283                 mov     [ebp+arg_1C], edx
.text:00001286                 test    ecx, ecx
.text:00001288                 jnz     short loc_1293
.text:0000128A                 mov     [ebp+var_24], 1
.text:00001291                 jmp     short loc_129A
.text:00001293 ; ---------------------------------------------------------------------------
.text:00001293
.text:00001293 loc_1293:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+58j
.text:00001293                 mov     [ebp+var_24], 0
.text:0000129A
.text:0000129A loc_129A:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+61j
.text:0000129A                 cmp     [ebp+var_24], 0
.text:0000129E                 jnz     short loc_12A8
.text:000012A0                 mov     eax, [ebp+var_14]
.text:000012A3                 cmp     eax, [ebp+arg_18]
.text:000012A6                 jb      short loc_12BF
.text:000012A8
.text:000012A8 loc_12A8:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+6Ej
.text:000012A8                 mov     ecx, [ebp+var_8]
.text:000012AB                 mov     dword ptr [ecx], 0
.text:000012B1                 mov     edx, [ebp+var_4]
.text:000012B4                 mov     dword ptr [edx], 0
.text:000012BA                 jmp     loc_13BA
.text:000012BF ; ---------------------------------------------------------------------------
.text:000012BF
.text:000012BF loc_12BF:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+76j
.text:000012BF                 mov     eax, [ebp+arg_14]
.text:000012C2                 sub     eax, [ebp+var_14]
.text:000012C5                 mov     ecx, [ebp+var_14]
.text:000012C8                 cmp     [ebp+arg_14], ecx
.text:000012CB                 sbb     edx, edx
.text:000012CD                 and     edx, [ebp+arg_18]
.text:000012D0                 add     eax, edx
.text:000012D2                 shl     eax, 1
.text:000012D4                 mov     ecx, [ebp+arg_10]
.text:000012D7                 lea     edx, [ecx+eax*4]
.text:000012DA                 mov     [ebp+var_18], edx
.text:000012DD                 mov     eax, [ebp+arg_C]
.text:000012E0                 sub     eax, [ebp+var_14]
.text:000012E3                 mov     [ebp+var_1C], eax
.text:000012E6                 mov     ecx, [ebp+var_C]
.text:000012E9                 cmp     ecx, [ebp+var_10]
.text:000012EC                 jnb     short loc_12F6
.text:000012EE                 mov     edx, [ebp+var_C]
.text:000012F1                 mov     [ebp+var_28], edx
.text:000012F4                 jmp     short loc_12FC
.text:000012F6 ; ---------------------------------------------------------------------------
.text:000012F6
.text:000012F6 loc_12F6:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+BCj
.text:000012F6                 mov     eax, [ebp+var_10]
.text:000012F9                 mov     [ebp+var_28], eax
.text:000012FC
.text:000012FC loc_12FC:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+C4j
.text:000012FC                 mov     ecx, [ebp+var_28]
.text:000012FF                 mov     [ebp+var_20], ecx
.text:00001302                 mov     edx, [ebp+var_1C]
.text:00001305                 add     edx, [ebp+var_20]
.text:00001308                 movzx   eax, byte ptr [edx]
.text:0000130B                 mov     ecx, [ebp+arg_C]
.text:0000130E                 add     ecx, [ebp+var_20]
.text:00001311                 movzx   edx, byte ptr [ecx]
.text:00001314                 cmp     eax, edx
.text:00001316                 jnz     short loc_1362
.text:00001318
.text:00001318 loc_1318:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x):loc_1341j
.text:00001318                 mov     eax, [ebp+var_20]
.text:0000131B                 add     eax, 1
.text:0000131E                 mov     [ebp+var_20], eax
.text:00001321                 mov     ecx, [ebp+var_20]
.text:00001324                 cmp     ecx, [ebp+arg_0]
.text:00001327                 jz      short loc_1343
.text:00001329                 mov     edx, [ebp+var_1C]
.text:0000132C                 add     edx, [ebp+var_20]
.text:0000132F                 movzx   eax, byte ptr [edx]
.text:00001332                 mov     ecx, [ebp+arg_C]
.text:00001335                 add     ecx, [ebp+var_20]
.text:00001338                 movzx   edx, byte ptr [ecx]
.text:0000133B                 cmp     eax, edx
.text:0000133D                 jz      short loc_1341
.text:0000133F                 jmp     short loc_1343
.text:00001341 ; ---------------------------------------------------------------------------
.text:00001341
.text:00001341 loc_1341:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+10Dj
.text:00001341                 jmp     short loc_1318
.text:00001343 ; ---------------------------------------------------------------------------
.text:00001343
.text:00001343 loc_1343:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+F7j
.text:00001343                                         ; SkipMatchesSpec(x,x,x,x,x,x,x,x)+10Fj
.text:00001343                 mov     eax, [ebp+var_20]
.text:00001346                 cmp     eax, [ebp+arg_0]
.text:00001349                 jnz     short loc_1362
.text:0000134B                 mov     ecx, [ebp+var_8]
.text:0000134E                 mov     edx, [ebp+var_18]
.text:00001351                 mov     eax, [edx]
.text:00001353                 mov     [ecx], eax
.text:00001355                 mov     ecx, [ebp+var_4]
.text:00001358                 mov     edx, [ebp+var_18]
.text:0000135B                 mov     eax, [edx+4]
.text:0000135E                 mov     [ecx], eax
.text:00001360                 jmp     short loc_13BA
.text:00001362 ; ---------------------------------------------------------------------------
.text:00001362
.text:00001362 loc_1362:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+E6j
.text:00001362                                         ; SkipMatchesSpec(x,x,x,x,x,x,x,x)+119j
.text:00001362                 mov     ecx, [ebp+var_1C]
.text:00001365                 add     ecx, [ebp+var_20]
.text:00001368                 movzx   edx, byte ptr [ecx]
.text:0000136B                 mov     eax, [ebp+arg_C]
.text:0000136E                 add     eax, [ebp+var_20]
.text:00001371                 movzx   ecx, byte ptr [eax]
.text:00001374                 cmp     edx, ecx
.text:00001376                 jge     short loc_1399
.text:00001378                 mov     edx, [ebp+var_8]
.text:0000137B                 mov     eax, [ebp+arg_4]
.text:0000137E                 mov     [edx], eax
.text:00001380                 mov     ecx, [ebp+var_18]
.text:00001383                 add     ecx, 4
.text:00001386                 mov     [ebp+var_8], ecx
.text:00001389                 mov     edx, [ebp+var_8]
.text:0000138C                 mov     eax, [edx]
.text:0000138E                 mov     [ebp+arg_4], eax
.text:00001391                 mov     ecx, [ebp+var_20]
.text:00001394                 mov     [ebp+var_10], ecx
.text:00001397                 jmp     short loc_13B5
.text:00001399 ; ---------------------------------------------------------------------------
.text:00001399
.text:00001399 loc_1399:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+146j
.text:00001399                 mov     edx, [ebp+var_4]
.text:0000139C                 mov     eax, [ebp+arg_4]
.text:0000139F                 mov     [edx], eax
.text:000013A1                 mov     ecx, [ebp+var_18]
.text:000013A4                 mov     [ebp+var_4], ecx
.text:000013A7                 mov     edx, [ebp+var_4]
.text:000013AA                 mov     eax, [edx]
.text:000013AC                 mov     [ebp+arg_4], eax
.text:000013AF                 mov     ecx, [ebp+var_20]
.text:000013B2                 mov     [ebp+var_C], ecx
.text:000013B5
.text:000013B5 loc_13B5:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+167j
.text:000013B5                 jmp     loc_1271
.text:000013BA ; ---------------------------------------------------------------------------
.text:000013BA
.text:000013BA loc_13BA:                               ; CODE XREF: SkipMatchesSpec(x,x,x,x,x,x,x,x)+8Aj
.text:000013BA                                         ; SkipMatchesSpec(x,x,x,x,x,x,x,x)+130j
.text:000013BA                 pop     edi
.text:000013BB                 mov     esp, ebp
.text:000013BD                 pop     ebp
.text:000013BE                 retn    20h
.text:000013BE _SkipMatchesSpec@32 endp
.text:000013BE
.text:000013BE ; ---------------------------------------------------------------------------
.text:000013C1                 align 10h
.text:000013D0
.text:000013D0 ; =============== S U B R O U T I N E =======================================
.text:000013D0
.text:000013D0 ; Attributes: bp-based frame
.text:000013D0
.text:000013D0 ; __stdcall Hc3Zip_MatchFinder_Skip(x, x)
.text:000013D0                 public _Hc3Zip_MatchFinder_Skip@8
.text:000013D0 _Hc3Zip_MatchFinder_Skip@8 proc near
.text:000013D0
.text:000013D0 var_14          = dword ptr -14h
.text:000013D0 var_10          = dword ptr -10h
.text:000013D0 var_C           = dword ptr -0Ch
.text:000013D0 var_8           = dword ptr -8
.text:000013D0 var_4           = dword ptr -4
.text:000013D0 arg_0           = dword ptr  8
.text:000013D0 arg_4           = dword ptr  0Ch
.text:000013D0
.text:000013D0                 push    ebp
.text:000013D1                 mov     ebp, esp
.text:000013D3                 sub     esp, 14h
.text:000013D6                 mov     eax, 0CCCCCCCCh
.text:000013DB                 mov     [ebp+var_14], eax
.text:000013DE                 mov     [ebp+var_10], eax
.text:000013E1                 mov     [ebp+var_C], eax
.text:000013E4                 mov     [ebp+var_8], eax
.text:000013E7                 mov     [ebp+var_4], eax
.text:000013EA
.text:000013EA loc_13EA:                               ; CODE XREF: Hc3Zip_MatchFinder_Skip(x,x)+E8j
.text:000013EA                 mov     eax, [ebp+arg_0]
.text:000013ED                 mov     ecx, [eax+10h]
.text:000013F0                 mov     [ebp+var_4], ecx
.text:000013F3                 cmp     [ebp+var_4], 3
.text:000013F7                 jnb     short loc_1407
.text:000013F9                 mov     edx, [ebp+arg_0]
.text:000013FC                 push    edx
.text:000013FD                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00001402                 jmp     loc_14AF
.text:00001407 ; ---------------------------------------------------------------------------
.text:00001407
.text:00001407 loc_1407:                               ; CODE XREF: Hc3Zip_MatchFinder_Skip(x,x)+27j
.text:00001407                 mov     eax, [ebp+arg_0]
.text:0000140A                 mov     ecx, [eax]
.text:0000140C                 mov     [ebp+var_C], ecx
.text:0000140F                 mov     edx, [ebp+var_C]
.text:00001412                 movzx   eax, byte ptr [edx+2]
.text:00001416                 mov     ecx, [ebp+var_C]
.text:00001419                 movzx   edx, byte ptr [ecx]
.text:0000141C                 shl     edx, 8
.text:0000141F                 or      eax, edx
.text:00001421                 mov     ecx, [ebp+var_C]
.text:00001424                 movzx   edx, byte ptr [ecx+1]
.text:00001428                 mov     ecx, [ebp+arg_0]
.text:0000142B                 xor     eax, [ecx+edx*4+60h]
.text:0000142F                 and     eax, 0FFFFh
.text:00001434                 mov     [ebp+var_8], eax
.text:00001437                 mov     edx, [ebp+arg_0]
.text:0000143A                 mov     eax, [edx+24h]
.text:0000143D                 mov     ecx, [ebp+var_8]
.text:00001440                 mov     edx, [eax+ecx*4]
.text:00001443                 mov     [ebp+var_10], edx
.text:00001446                 mov     eax, [ebp+arg_0]
.text:00001449                 mov     ecx, [eax+24h]
.text:0000144C                 mov     edx, [ebp+var_8]
.text:0000144F                 mov     eax, [ebp+arg_0]
.text:00001452                 mov     eax, [eax+4]
.text:00001455                 mov     [ecx+edx*4], eax
.text:00001458                 mov     ecx, [ebp+arg_0]
.text:0000145B                 mov     edx, [ecx+14h]
.text:0000145E                 mov     eax, [ebp+arg_0]
.text:00001461                 mov     ecx, [eax+28h]
.text:00001464                 mov     eax, [ebp+var_10]
.text:00001467                 mov     [ecx+edx*4], eax
.text:0000146A                 mov     ecx, [ebp+arg_0]
.text:0000146D                 mov     edx, [ecx+14h]
.text:00001470                 add     edx, 1
.text:00001473                 mov     eax, [ebp+arg_0]
.text:00001476                 mov     [eax+14h], edx
.text:00001479                 mov     ecx, [ebp+arg_0]
.text:0000147C                 mov     edx, [ecx]
.text:0000147E                 add     edx, 1
.text:00001481                 mov     eax, [ebp+arg_0]
.text:00001484                 mov     [eax], edx
.text:00001486                 mov     ecx, [ebp+arg_0]
.text:00001489                 mov     edx, [ecx+4]
.text:0000148C                 add     edx, 1
.text:0000148F                 mov     [ebp+var_14], edx
.text:00001492                 mov     eax, [ebp+arg_0]
.text:00001495                 mov     ecx, [ebp+var_14]
.text:00001498                 mov     [eax+4], ecx
.text:0000149B                 mov     edx, [ebp+arg_0]
.text:0000149E                 mov     eax, [ebp+var_14]
.text:000014A1                 cmp     eax, [edx+8]
.text:000014A4                 jnz     short loc_14AF
.text:000014A6                 mov     ecx, [ebp+arg_0]
.text:000014A9                 push    ecx
.text:000014AA                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:000014AF
.text:000014AF loc_14AF:                               ; CODE XREF: Hc3Zip_MatchFinder_Skip(x,x)+32j
.text:000014AF                                         ; Hc3Zip_MatchFinder_Skip(x,x)+D4j
.text:000014AF                 mov     edx, [ebp+arg_4]
.text:000014B2                 sub     edx, 1
.text:000014B5                 mov     [ebp+arg_4], edx
.text:000014B8                 jnz     loc_13EA
.text:000014BE                 add     esp, 14h
.text:000014C1                 cmp     ebp, esp
.text:000014C3                 call    __RTC_CheckEsp
.text:000014C8                 mov     esp, ebp
.text:000014CA                 pop     ebp
.text:000014CB                 retn    8
.text:000014CB _Hc3Zip_MatchFinder_Skip@8 endp
.text:000014CB
.text:000014CB ; ---------------------------------------------------------------------------
.text:000014CE                 align 10h
.text:000014D0
.text:000014D0 ; =============== S U B R O U T I N E =======================================
.text:000014D0
.text:000014D0 ; Attributes: bp-based frame
.text:000014D0
.text:000014D0 ; __stdcall MatchFinder_CreateVTable(x, x)
.text:000014D0                 public _MatchFinder_CreateVTable@8
.text:000014D0 _MatchFinder_CreateVTable@8 proc near
.text:000014D0
.text:000014D0 arg_0           = dword ptr  8
.text:000014D0 arg_4           = dword ptr  0Ch
.text:000014D0
.text:000014D0                 push    ebp
.text:000014D1                 mov     ebp, esp
.text:000014D3                 mov     eax, [ebp+arg_4]
.text:000014D6                 mov     dword ptr [eax], offset _MatchFinder_Init@4 ; MatchFinder_Init(x)
.text:000014DC                 mov     ecx, [ebp+arg_4]
.text:000014DF                 mov     dword ptr [ecx+4], offset _MatchFinder_GetNumAvailableBytes@4 ; MatchFinder_GetNumAvailableBytes(x)
.text:000014E6                 mov     edx, [ebp+arg_4]
.text:000014E9                 mov     dword ptr [edx+8], offset _MatchFinder_GetPointerToCurrentPos@4 ; MatchFinder_GetPointerToCurrentPos(x)
.text:000014F0                 mov     eax, [ebp+arg_0]
.text:000014F3                 movzx   ecx, byte ptr [eax+1Dh]
.text:000014F7                 test    ecx, ecx
.text:000014F9                 jnz     short loc_1511
.text:000014FB                 mov     edx, [ebp+arg_4]
.text:000014FE                 mov     dword ptr [edx+0Ch], offset _Hc4_MatchFinder_GetMatches@8 ; Hc4_MatchFinder_GetMatches(x,x)
.text:00001505                 mov     eax, [ebp+arg_4]
.text:00001508                 mov     dword ptr [eax+10h], offset _Hc4_MatchFinder_Skip@8 ; Hc4_MatchFinder_Skip(x,x)
.text:0000150F                 jmp     short loc_1563
.text:00001511 ; ---------------------------------------------------------------------------
.text:00001511
.text:00001511 loc_1511:                               ; CODE XREF: MatchFinder_CreateVTable(x,x)+29j
.text:00001511                 mov     ecx, [ebp+arg_0]
.text:00001514                 cmp     dword ptr [ecx+48h], 2
.text:00001518                 jnz     short loc_1530
.text:0000151A                 mov     edx, [ebp+arg_4]
.text:0000151D                 mov     dword ptr [edx+0Ch], offset _Bt2_MatchFinder_GetMatches@8 ; Bt2_MatchFinder_GetMatches(x,x)
.text:00001524                 mov     eax, [ebp+arg_4]
.text:00001527                 mov     dword ptr [eax+10h], offset _Bt2_MatchFinder_Skip@8 ; Bt2_MatchFinder_Skip(x,x)
.text:0000152E                 jmp     short loc_1563
.text:00001530 ; ---------------------------------------------------------------------------
.text:00001530
.text:00001530 loc_1530:                               ; CODE XREF: MatchFinder_CreateVTable(x,x)+48j
.text:00001530                 mov     ecx, [ebp+arg_0]
.text:00001533                 cmp     dword ptr [ecx+48h], 3
.text:00001537                 jnz     short loc_154F
.text:00001539                 mov     edx, [ebp+arg_4]
.text:0000153C                 mov     dword ptr [edx+0Ch], offset _Bt3_MatchFinder_GetMatches@8 ; Bt3_MatchFinder_GetMatches(x,x)
.text:00001543                 mov     eax, [ebp+arg_4]
.text:00001546                 mov     dword ptr [eax+10h], offset _Bt3_MatchFinder_Skip@8 ; Bt3_MatchFinder_Skip(x,x)
.text:0000154D                 jmp     short loc_1563
.text:0000154F ; ---------------------------------------------------------------------------
.text:0000154F
.text:0000154F loc_154F:                               ; CODE XREF: MatchFinder_CreateVTable(x,x)+67j
.text:0000154F                 mov     ecx, [ebp+arg_4]
.text:00001552                 mov     dword ptr [ecx+0Ch], offset _Bt4_MatchFinder_GetMatches@8 ; Bt4_MatchFinder_GetMatches(x,x)
.text:00001559                 mov     edx, [ebp+arg_4]
.text:0000155C                 mov     dword ptr [edx+10h], offset _Bt4_MatchFinder_Skip@8 ; Bt4_MatchFinder_Skip(x,x)
.text:00001563
.text:00001563 loc_1563:                               ; CODE XREF: MatchFinder_CreateVTable(x,x)+3Fj
.text:00001563                                         ; MatchFinder_CreateVTable(x,x)+5Ej ...
.text:00001563                 pop     ebp
.text:00001564                 retn    8
.text:00001564 _MatchFinder_CreateVTable@8 endp
.text:00001564
.text:00001564 ; ---------------------------------------------------------------------------
.text:00001567                 align 10h
.text:00001570
.text:00001570 ; =============== S U B R O U T I N E =======================================
.text:00001570
.text:00001570 ; Attributes: bp-based frame
.text:00001570
.text:00001570 ; __stdcall Bt2_MatchFinder_GetMatches(x, x)
.text:00001570 _Bt2_MatchFinder_GetMatches@8 proc near ; DATA XREF: MatchFinder_CreateVTable(x,x)+4Do
.text:00001570
.text:00001570 var_18          = dword ptr -18h
.text:00001570 var_14          = dword ptr -14h
.text:00001570 var_10          = dword ptr -10h
.text:00001570 var_C           = dword ptr -0Ch
.text:00001570 var_8           = dword ptr -8
.text:00001570 var_4           = dword ptr -4
.text:00001570 arg_0           = dword ptr  8
.text:00001570 arg_4           = dword ptr  0Ch
.text:00001570
.text:00001570                 push    ebp
.text:00001571                 mov     ebp, esp
.text:00001573                 sub     esp, 18h
.text:00001576                 mov     eax, 0CCCCCCCCh
.text:0000157B                 mov     [ebp+var_18], eax
.text:0000157E                 mov     [ebp+var_14], eax
.text:00001581                 mov     [ebp+var_10], eax
.text:00001584                 mov     [ebp+var_C], eax
.text:00001587                 mov     [ebp+var_8], eax
.text:0000158A                 mov     [ebp+var_4], eax
.text:0000158D                 mov     eax, [ebp+arg_0]
.text:00001590                 mov     ecx, [eax+10h]
.text:00001593                 mov     [ebp+var_8], ecx
.text:00001596                 cmp     [ebp+var_8], 2
.text:0000159A                 jnb     short loc_15AC
.text:0000159C                 mov     edx, [ebp+arg_0]
.text:0000159F                 push    edx
.text:000015A0                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:000015A5                 xor     eax, eax
.text:000015A7                 jmp     loc_1684
.text:000015AC ; ---------------------------------------------------------------------------
.text:000015AC
.text:000015AC loc_15AC:                               ; CODE XREF: Bt2_MatchFinder_GetMatches(x,x)+2Aj
.text:000015AC                 mov     eax, [ebp+arg_0]
.text:000015AF                 mov     ecx, [eax]
.text:000015B1                 mov     [ebp+var_10], ecx
.text:000015B4                 mov     edx, [ebp+var_10]
.text:000015B7                 movzx   eax, byte ptr [edx]
.text:000015BA                 mov     ecx, [ebp+var_10]
.text:000015BD                 movzx   edx, byte ptr [ecx+1]
.text:000015C1                 shl     edx, 8
.text:000015C4                 or      eax, edx
.text:000015C6                 mov     [ebp+var_C], eax
.text:000015C9                 mov     eax, [ebp+arg_0]
.text:000015CC                 mov     ecx, [eax+24h]
.text:000015CF                 mov     edx, [ebp+var_C]
.text:000015D2                 mov     eax, [ecx+edx*4]
.text:000015D5                 mov     [ebp+var_14], eax
.text:000015D8                 mov     ecx, [ebp+arg_0]
.text:000015DB                 mov     edx, [ecx+24h]
.text:000015DE                 mov     eax, [ebp+var_C]
.text:000015E1                 mov     ecx, [ebp+arg_0]
.text:000015E4                 mov     ecx, [ecx+4]
.text:000015E7                 mov     [edx+eax*4], ecx
.text:000015EA                 mov     [ebp+var_4], 0
.text:000015F1                 push    1
.text:000015F3                 mov     edx, [ebp+var_4]
.text:000015F6                 mov     eax, [ebp+arg_4]
.text:000015F9                 lea     ecx, [eax+edx*4]
.text:000015FC                 push    ecx
.text:000015FD                 mov     edx, [ebp+arg_0]
.text:00001600                 mov     eax, [edx+30h]
.text:00001603                 push    eax
.text:00001604                 mov     ecx, [ebp+arg_0]
.text:00001607                 mov     edx, [ecx+18h]
.text:0000160A                 push    edx
.text:0000160B                 mov     eax, [ebp+arg_0]
.text:0000160E                 mov     ecx, [eax+14h]
.text:00001611                 push    ecx
.text:00001612                 mov     edx, [ebp+arg_0]
.text:00001615                 mov     eax, [edx+28h]
.text:00001618                 push    eax
.text:00001619                 mov     ecx, [ebp+arg_0]
.text:0000161C                 mov     edx, [ecx]
.text:0000161E                 push    edx
.text:0000161F                 mov     eax, [ebp+arg_0]
.text:00001622                 mov     ecx, [eax+4]
.text:00001625                 push    ecx
.text:00001626                 mov     edx, [ebp+var_14]
.text:00001629                 push    edx
.text:0000162A                 mov     eax, [ebp+var_8]
.text:0000162D                 push    eax
.text:0000162E                 call    _GetMatchesSpec1@40 ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)
.text:00001633                 sub     eax, [ebp+arg_4]
.text:00001636                 sar     eax, 2
.text:00001639                 mov     [ebp+var_4], eax
.text:0000163C                 mov     ecx, [ebp+arg_0]
.text:0000163F                 mov     edx, [ecx+14h]
.text:00001642                 add     edx, 1
.text:00001645                 mov     eax, [ebp+arg_0]
.text:00001648                 mov     [eax+14h], edx
.text:0000164B                 mov     ecx, [ebp+arg_0]
.text:0000164E                 mov     edx, [ecx]
.text:00001650                 add     edx, 1
.text:00001653                 mov     eax, [ebp+arg_0]
.text:00001656                 mov     [eax], edx
.text:00001658                 mov     ecx, [ebp+arg_0]
.text:0000165B                 mov     edx, [ecx+4]
.text:0000165E                 add     edx, 1
.text:00001661                 mov     [ebp+var_18], edx
.text:00001664                 mov     eax, [ebp+arg_0]
.text:00001667                 mov     ecx, [ebp+var_18]
.text:0000166A                 mov     [eax+4], ecx
.text:0000166D                 mov     edx, [ebp+arg_0]
.text:00001670                 mov     eax, [ebp+var_18]
.text:00001673                 cmp     eax, [edx+8]
.text:00001676                 jnz     short loc_1681
.text:00001678                 mov     ecx, [ebp+arg_0]
.text:0000167B                 push    ecx
.text:0000167C                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001681
.text:00001681 loc_1681:                               ; CODE XREF: Bt2_MatchFinder_GetMatches(x,x)+106j
.text:00001681                 mov     eax, [ebp+var_4]
.text:00001684
.text:00001684 loc_1684:                               ; CODE XREF: Bt2_MatchFinder_GetMatches(x,x)+37j
.text:00001684                 add     esp, 18h
.text:00001687                 cmp     ebp, esp
.text:00001689                 call    __RTC_CheckEsp
.text:0000168E                 mov     esp, ebp
.text:00001690                 pop     ebp
.text:00001691                 retn    8
.text:00001691 _Bt2_MatchFinder_GetMatches@8 endp
.text:00001691
.text:00001691 ; ---------------------------------------------------------------------------
.text:00001694                 align 10h
.text:000016A0
.text:000016A0 ; =============== S U B R O U T I N E =======================================
.text:000016A0
.text:000016A0 ; Attributes: bp-based frame
.text:000016A0
.text:000016A0 ; __stdcall Bt3_MatchFinder_GetMatches(x, x)
.text:000016A0 _Bt3_MatchFinder_GetMatches@8 proc near ; DATA XREF: MatchFinder_CreateVTable(x,x)+6Co
.text:000016A0
.text:000016A0 var_40          = dword ptr -40h
.text:000016A0 var_3C          = dword ptr -3Ch
.text:000016A0 var_38          = dword ptr -38h
.text:000016A0 var_34          = dword ptr -34h
.text:000016A0 var_30          = dword ptr -30h
.text:000016A0 var_2C          = dword ptr -2Ch
.text:000016A0 var_28          = dword ptr -28h
.text:000016A0 var_24          = dword ptr -24h
.text:000016A0 var_20          = dword ptr -20h
.text:000016A0 var_1C          = dword ptr -1Ch
.text:000016A0 var_18          = dword ptr -18h
.text:000016A0 var_14          = dword ptr -14h
.text:000016A0 var_10          = dword ptr -10h
.text:000016A0 var_C           = dword ptr -0Ch
.text:000016A0 var_8           = dword ptr -8
.text:000016A0 var_4           = dword ptr -4
.text:000016A0 arg_0           = dword ptr  8
.text:000016A0 arg_4           = dword ptr  0Ch
.text:000016A0
.text:000016A0                 push    ebp
.text:000016A1                 mov     ebp, esp
.text:000016A3                 sub     esp, 40h
.text:000016A6                 push    edi
.text:000016A7                 lea     edi, [ebp+var_40]
.text:000016AA                 mov     ecx, 10h
.text:000016AF                 mov     eax, 0CCCCCCCCh
.text:000016B4                 rep stosd
.text:000016B6                 mov     eax, [ebp+arg_0]
.text:000016B9                 mov     ecx, [eax+10h]
.text:000016BC                 mov     [ebp+var_1C], ecx
.text:000016BF                 cmp     [ebp+var_1C], 3
.text:000016C3                 jnb     short loc_16D5
.text:000016C5                 mov     edx, [ebp+arg_0]
.text:000016C8                 push    edx
.text:000016C9                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:000016CE                 xor     eax, eax
.text:000016D0                 jmp     loc_1923
.text:000016D5 ; ---------------------------------------------------------------------------
.text:000016D5
.text:000016D5 loc_16D5:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+23j
.text:000016D5                 mov     eax, [ebp+arg_0]
.text:000016D8                 mov     ecx, [eax]
.text:000016DA                 mov     [ebp+var_24], ecx
.text:000016DD                 mov     edx, [ebp+var_24]
.text:000016E0                 movzx   eax, byte ptr [edx]
.text:000016E3                 mov     ecx, [ebp+var_24]
.text:000016E6                 movzx   edx, byte ptr [ecx+1]
.text:000016EA                 mov     ecx, [ebp+arg_0]
.text:000016ED                 xor     edx, [ecx+eax*4+60h]
.text:000016F1                 mov     [ebp+var_2C], edx
.text:000016F4                 mov     edx, [ebp+var_2C]
.text:000016F7                 and     edx, 3FFh
.text:000016FD                 mov     [ebp+var_4], edx
.text:00001700                 mov     eax, [ebp+var_24]
.text:00001703                 movzx   ecx, byte ptr [eax+2]
.text:00001707                 shl     ecx, 8
.text:0000170A                 xor     ecx, [ebp+var_2C]
.text:0000170D                 mov     edx, [ebp+arg_0]
.text:00001710                 and     ecx, [edx+2Ch]
.text:00001713                 mov     [ebp+var_20], ecx
.text:00001716                 mov     eax, [ebp+arg_0]
.text:00001719                 mov     ecx, [eax+24h]
.text:0000171C                 mov     [ebp+var_18], ecx
.text:0000171F                 mov     edx, [ebp+arg_0]
.text:00001722                 mov     eax, [edx+4]
.text:00001725                 mov     [ebp+var_14], eax
.text:00001728                 mov     ecx, [ebp+var_4]
.text:0000172B                 mov     edx, [ebp+var_18]
.text:0000172E                 mov     eax, [ebp+var_14]
.text:00001731                 sub     eax, [edx+ecx*4]
.text:00001734                 mov     [ebp+var_8], eax
.text:00001737                 mov     ecx, [ebp+var_20]
.text:0000173A                 mov     edx, [ebp+var_18]
.text:0000173D                 mov     eax, [edx+ecx*4+1000h]
.text:00001744                 mov     [ebp+var_28], eax
.text:00001747                 mov     ecx, [ebp+var_4]
.text:0000174A                 mov     edx, [ebp+var_18]
.text:0000174D                 mov     eax, [ebp+var_14]
.text:00001750                 mov     [edx+ecx*4], eax
.text:00001753                 mov     ecx, [ebp+var_20]
.text:00001756                 mov     edx, [ebp+var_18]
.text:00001759                 mov     eax, [ebp+var_14]
.text:0000175C                 mov     [edx+ecx*4+1000h], eax
.text:00001763                 mov     [ebp+var_C], 2
.text:0000176A                 mov     [ebp+var_10], 0
.text:00001771                 mov     ecx, [ebp+arg_0]
.text:00001774                 mov     edx, [ebp+var_8]
.text:00001777                 cmp     edx, [ecx+18h]
.text:0000177A                 jnb     loc_188E
.text:00001780                 mov     eax, [ebp+var_24]
.text:00001783                 sub     eax, [ebp+var_8]
.text:00001786                 movzx   ecx, byte ptr [eax]
.text:00001789                 mov     edx, [ebp+var_24]
.text:0000178C                 movzx   eax, byte ptr [edx]
.text:0000178F                 cmp     ecx, eax
.text:00001791                 jnz     loc_188E
.text:00001797                 xor     ecx, ecx
.text:00001799                 sub     ecx, [ebp+var_8]
.text:0000179C                 mov     [ebp+var_30], ecx
.text:0000179F                 mov     edx, [ebp+var_24]
.text:000017A2                 add     edx, [ebp+var_C]
.text:000017A5                 mov     [ebp+var_34], edx
.text:000017A8                 mov     eax, [ebp+var_24]
.text:000017AB                 add     eax, [ebp+var_1C]
.text:000017AE                 mov     [ebp+var_38], eax
.text:000017B1                 jmp     short loc_17BC
.text:000017B3 ; ---------------------------------------------------------------------------
.text:000017B3
.text:000017B3 loc_17B3:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x):loc_17D9j
.text:000017B3                 mov     ecx, [ebp+var_34]
.text:000017B6                 add     ecx, 1
.text:000017B9                 mov     [ebp+var_34], ecx
.text:000017BC
.text:000017BC loc_17BC:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+111j
.text:000017BC                 mov     edx, [ebp+var_34]
.text:000017BF                 cmp     edx, [ebp+var_38]
.text:000017C2                 jz      short loc_17DB
.text:000017C4                 mov     eax, [ebp+var_34]
.text:000017C7                 add     eax, [ebp+var_30]
.text:000017CA                 movzx   ecx, byte ptr [eax]
.text:000017CD                 mov     edx, [ebp+var_34]
.text:000017D0                 movzx   eax, byte ptr [edx]
.text:000017D3                 cmp     ecx, eax
.text:000017D5                 jz      short loc_17D9
.text:000017D7                 jmp     short loc_17DB
.text:000017D9 ; ---------------------------------------------------------------------------
.text:000017D9
.text:000017D9 loc_17D9:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+135j
.text:000017D9                 jmp     short loc_17B3
.text:000017DB ; ---------------------------------------------------------------------------
.text:000017DB
.text:000017DB loc_17DB:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+122j
.text:000017DB                                         ; Bt3_MatchFinder_GetMatches(x,x)+137j
.text:000017DB                 mov     ecx, [ebp+var_34]
.text:000017DE                 sub     ecx, [ebp+var_24]
.text:000017E1                 mov     [ebp+var_C], ecx
.text:000017E4                 mov     edx, [ebp+arg_4]
.text:000017E7                 mov     eax, [ebp+var_C]
.text:000017EA                 mov     [edx], eax
.text:000017EC                 mov     ecx, [ebp+var_8]
.text:000017EF                 sub     ecx, 1
.text:000017F2                 mov     edx, [ebp+arg_4]
.text:000017F5                 mov     [edx+4], ecx
.text:000017F8                 mov     [ebp+var_10], 2
.text:000017FF                 mov     eax, [ebp+var_C]
.text:00001802                 cmp     eax, [ebp+var_1C]
.text:00001805                 jnz     loc_188E
.text:0000180B                 mov     ecx, [ebp+arg_0]
.text:0000180E                 mov     edx, [ecx+30h]
.text:00001811                 push    edx
.text:00001812                 mov     eax, [ebp+arg_0]
.text:00001815                 mov     ecx, [eax+18h]
.text:00001818                 push    ecx
.text:00001819                 mov     edx, [ebp+arg_0]
.text:0000181C                 mov     eax, [edx+14h]
.text:0000181F                 push    eax
.text:00001820                 mov     ecx, [ebp+arg_0]
.text:00001823                 mov     edx, [ecx+28h]
.text:00001826                 push    edx
.text:00001827                 mov     eax, [ebp+arg_0]
.text:0000182A                 mov     ecx, [eax]
.text:0000182C                 push    ecx
.text:0000182D                 mov     edx, [ebp+arg_0]
.text:00001830                 mov     eax, [edx+4]
.text:00001833                 push    eax
.text:00001834                 mov     ecx, [ebp+var_28]
.text:00001837                 push    ecx
.text:00001838                 mov     edx, [ebp+var_1C]
.text:0000183B                 push    edx
.text:0000183C                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:00001841                 mov     eax, [ebp+arg_0]
.text:00001844                 mov     ecx, [eax+14h]
.text:00001847                 add     ecx, 1
.text:0000184A                 mov     edx, [ebp+arg_0]
.text:0000184D                 mov     [edx+14h], ecx
.text:00001850                 mov     eax, [ebp+arg_0]
.text:00001853                 mov     ecx, [eax]
.text:00001855                 add     ecx, 1
.text:00001858                 mov     edx, [ebp+arg_0]
.text:0000185B                 mov     [edx], ecx
.text:0000185D                 mov     eax, [ebp+arg_0]
.text:00001860                 mov     ecx, [eax+4]
.text:00001863                 add     ecx, 1
.text:00001866                 mov     [ebp+var_3C], ecx
.text:00001869                 mov     edx, [ebp+arg_0]
.text:0000186C                 mov     eax, [ebp+var_3C]
.text:0000186F                 mov     [edx+4], eax
.text:00001872                 mov     ecx, [ebp+arg_0]
.text:00001875                 mov     edx, [ebp+var_3C]
.text:00001878                 cmp     edx, [ecx+8]
.text:0000187B                 jnz     short loc_1886
.text:0000187D                 mov     eax, [ebp+arg_0]
.text:00001880                 push    eax
.text:00001881                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001886
.text:00001886 loc_1886:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+1DBj
.text:00001886                 mov     eax, [ebp+var_10]
.text:00001889                 jmp     loc_1923
.text:0000188E ; ---------------------------------------------------------------------------
.text:0000188E
.text:0000188E loc_188E:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+DAj
.text:0000188E                                         ; Bt3_MatchFinder_GetMatches(x,x)+F1j ...
.text:0000188E                 mov     ecx, [ebp+var_C]
.text:00001891                 push    ecx
.text:00001892                 mov     edx, [ebp+var_10]
.text:00001895                 mov     eax, [ebp+arg_4]
.text:00001898                 lea     ecx, [eax+edx*4]
.text:0000189B                 push    ecx
.text:0000189C                 mov     edx, [ebp+arg_0]
.text:0000189F                 mov     eax, [edx+30h]
.text:000018A2                 push    eax
.text:000018A3                 mov     ecx, [ebp+arg_0]
.text:000018A6                 mov     edx, [ecx+18h]
.text:000018A9                 push    edx
.text:000018AA                 mov     eax, [ebp+arg_0]
.text:000018AD                 mov     ecx, [eax+14h]
.text:000018B0                 push    ecx
.text:000018B1                 mov     edx, [ebp+arg_0]
.text:000018B4                 mov     eax, [edx+28h]
.text:000018B7                 push    eax
.text:000018B8                 mov     ecx, [ebp+arg_0]
.text:000018BB                 mov     edx, [ecx]
.text:000018BD                 push    edx
.text:000018BE                 mov     eax, [ebp+arg_0]
.text:000018C1                 mov     ecx, [eax+4]
.text:000018C4                 push    ecx
.text:000018C5                 mov     edx, [ebp+var_28]
.text:000018C8                 push    edx
.text:000018C9                 mov     eax, [ebp+var_1C]
.text:000018CC                 push    eax
.text:000018CD                 call    _GetMatchesSpec1@40 ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)
.text:000018D2                 sub     eax, [ebp+arg_4]
.text:000018D5                 sar     eax, 2
.text:000018D8                 mov     [ebp+var_10], eax
.text:000018DB                 mov     ecx, [ebp+arg_0]
.text:000018DE                 mov     edx, [ecx+14h]
.text:000018E1                 add     edx, 1
.text:000018E4                 mov     eax, [ebp+arg_0]
.text:000018E7                 mov     [eax+14h], edx
.text:000018EA                 mov     ecx, [ebp+arg_0]
.text:000018ED                 mov     edx, [ecx]
.text:000018EF                 add     edx, 1
.text:000018F2                 mov     eax, [ebp+arg_0]
.text:000018F5                 mov     [eax], edx
.text:000018F7                 mov     ecx, [ebp+arg_0]
.text:000018FA                 mov     edx, [ecx+4]
.text:000018FD                 add     edx, 1
.text:00001900                 mov     [ebp+var_40], edx
.text:00001903                 mov     eax, [ebp+arg_0]
.text:00001906                 mov     ecx, [ebp+var_40]
.text:00001909                 mov     [eax+4], ecx
.text:0000190C                 mov     edx, [ebp+arg_0]
.text:0000190F                 mov     eax, [ebp+var_40]
.text:00001912                 cmp     eax, [edx+8]
.text:00001915                 jnz     short loc_1920
.text:00001917                 mov     ecx, [ebp+arg_0]
.text:0000191A                 push    ecx
.text:0000191B                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001920
.text:00001920 loc_1920:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+275j
.text:00001920                 mov     eax, [ebp+var_10]
.text:00001923
.text:00001923 loc_1923:                               ; CODE XREF: Bt3_MatchFinder_GetMatches(x,x)+30j
.text:00001923                                         ; Bt3_MatchFinder_GetMatches(x,x)+1E9j
.text:00001923                 pop     edi
.text:00001924                 add     esp, 40h
.text:00001927                 cmp     ebp, esp
.text:00001929                 call    __RTC_CheckEsp
.text:0000192E                 mov     esp, ebp
.text:00001930                 pop     ebp
.text:00001931                 retn    8
.text:00001931 _Bt3_MatchFinder_GetMatches@8 endp
.text:00001931
.text:00001931 ; ---------------------------------------------------------------------------
.text:00001934                 align 10h
.text:00001940
.text:00001940 ; =============== S U B R O U T I N E =======================================
.text:00001940
.text:00001940 ; Attributes: bp-based frame
.text:00001940
.text:00001940 ; __stdcall Bt4_MatchFinder_GetMatches(x, x)
.text:00001940 _Bt4_MatchFinder_GetMatches@8 proc near ; DATA XREF: MatchFinder_CreateVTable(x,x)+82o
.text:00001940
.text:00001940 var_48          = dword ptr -48h
.text:00001940 var_44          = dword ptr -44h
.text:00001940 var_40          = dword ptr -40h
.text:00001940 var_3C          = dword ptr -3Ch
.text:00001940 var_38          = dword ptr -38h
.text:00001940 var_34          = dword ptr -34h
.text:00001940 var_30          = dword ptr -30h
.text:00001940 var_2C          = dword ptr -2Ch
.text:00001940 var_28          = dword ptr -28h
.text:00001940 var_24          = dword ptr -24h
.text:00001940 var_20          = dword ptr -20h
.text:00001940 var_1C          = dword ptr -1Ch
.text:00001940 var_18          = dword ptr -18h
.text:00001940 var_14          = dword ptr -14h
.text:00001940 var_10          = dword ptr -10h
.text:00001940 var_C           = dword ptr -0Ch
.text:00001940 var_8           = dword ptr -8
.text:00001940 var_4           = dword ptr -4
.text:00001940 arg_0           = dword ptr  8
.text:00001940 arg_4           = dword ptr  0Ch
.text:00001940
.text:00001940                 push    ebp
.text:00001941                 mov     ebp, esp
.text:00001943                 sub     esp, 48h
.text:00001946                 push    edi
.text:00001947                 lea     edi, [ebp+var_48]
.text:0000194A                 mov     ecx, 12h
.text:0000194F                 mov     eax, 0CCCCCCCCh
.text:00001954                 rep stosd
.text:00001956                 mov     eax, [ebp+arg_0]
.text:00001959                 mov     ecx, [eax+10h]
.text:0000195C                 mov     [ebp+var_24], ecx
.text:0000195F                 cmp     [ebp+var_24], 4
.text:00001963                 jnb     short loc_1975
.text:00001965                 mov     edx, [ebp+arg_0]
.text:00001968                 push    edx
.text:00001969                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:0000196E                 xor     eax, eax
.text:00001970                 jmp     loc_1C78
.text:00001975 ; ---------------------------------------------------------------------------
.text:00001975
.text:00001975 loc_1975:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+23j
.text:00001975                 mov     eax, [ebp+arg_0]
.text:00001978                 mov     ecx, [eax]
.text:0000197A                 mov     [ebp+var_2C], ecx
.text:0000197D                 mov     edx, [ebp+var_2C]
.text:00001980                 movzx   eax, byte ptr [edx]
.text:00001983                 mov     ecx, [ebp+var_2C]
.text:00001986                 movzx   edx, byte ptr [ecx+1]
.text:0000198A                 mov     ecx, [ebp+arg_0]
.text:0000198D                 xor     edx, [ecx+eax*4+60h]
.text:00001991                 mov     [ebp+var_34], edx
.text:00001994                 mov     edx, [ebp+var_34]
.text:00001997                 and     edx, 3FFh
.text:0000199D                 mov     [ebp+var_4], edx
.text:000019A0                 mov     eax, [ebp+var_2C]
.text:000019A3                 movzx   ecx, byte ptr [eax+2]
.text:000019A7                 shl     ecx, 8
.text:000019AA                 xor     ecx, [ebp+var_34]
.text:000019AD                 mov     [ebp+var_34], ecx
.text:000019B0                 mov     edx, [ebp+var_34]
.text:000019B3                 and     edx, 0FFFFh
.text:000019B9                 mov     [ebp+var_8], edx
.text:000019BC                 mov     eax, [ebp+var_2C]
.text:000019BF                 movzx   ecx, byte ptr [eax+3]
.text:000019C3                 mov     edx, [ebp+arg_0]
.text:000019C6                 mov     eax, [edx+ecx*4+60h]
.text:000019CA                 shl     eax, 5
.text:000019CD                 xor     eax, [ebp+var_34]
.text:000019D0                 mov     ecx, [ebp+arg_0]
.text:000019D3                 and     eax, [ecx+2Ch]
.text:000019D6                 mov     [ebp+var_28], eax
.text:000019D9                 mov     edx, [ebp+arg_0]
.text:000019DC                 mov     eax, [edx+24h]
.text:000019DF                 mov     [ebp+var_20], eax
.text:000019E2                 mov     ecx, [ebp+arg_0]
.text:000019E5                 mov     edx, [ecx+4]
.text:000019E8                 mov     [ebp+var_1C], edx
.text:000019EB                 mov     eax, [ebp+var_4]
.text:000019EE                 mov     ecx, [ebp+var_20]
.text:000019F1                 mov     edx, [ebp+var_1C]
.text:000019F4                 sub     edx, [ecx+eax*4]
.text:000019F7                 mov     [ebp+var_C], edx
.text:000019FA                 mov     eax, [ebp+var_8]
.text:000019FD                 mov     ecx, [ebp+var_20]
.text:00001A00                 mov     edx, [ebp+var_1C]
.text:00001A03                 sub     edx, [ecx+eax*4+1000h]
.text:00001A0A                 mov     [ebp+var_10], edx
.text:00001A0D                 mov     eax, [ebp+var_28]
.text:00001A10                 mov     ecx, [ebp+var_20]
.text:00001A13                 mov     edx, [ecx+eax*4+41000h]
.text:00001A1A                 mov     [ebp+var_30], edx
.text:00001A1D                 mov     eax, [ebp+var_4]
.text:00001A20                 mov     ecx, [ebp+var_20]
.text:00001A23                 mov     edx, [ebp+var_1C]
.text:00001A26                 mov     [ecx+eax*4], edx
.text:00001A29                 mov     eax, [ebp+var_8]
.text:00001A2C                 mov     ecx, [ebp+var_20]
.text:00001A2F                 mov     edx, [ebp+var_1C]
.text:00001A32                 mov     [ecx+eax*4+1000h], edx
.text:00001A39                 mov     eax, [ebp+var_28]
.text:00001A3C                 mov     ecx, [ebp+var_20]
.text:00001A3F                 mov     edx, [ebp+var_1C]
.text:00001A42                 mov     [ecx+eax*4+41000h], edx
.text:00001A49                 mov     [ebp+var_14], 0
.text:00001A50                 mov     [ebp+var_18], 0
.text:00001A57                 mov     eax, [ebp+arg_0]
.text:00001A5A                 mov     ecx, [ebp+var_C]
.text:00001A5D                 cmp     ecx, [eax+18h]
.text:00001A60                 jnb     short loc_1A97
.text:00001A62                 mov     edx, [ebp+var_2C]
.text:00001A65                 sub     edx, [ebp+var_C]
.text:00001A68                 movzx   eax, byte ptr [edx]
.text:00001A6B                 mov     ecx, [ebp+var_2C]
.text:00001A6E                 movzx   edx, byte ptr [ecx]
.text:00001A71                 cmp     eax, edx
.text:00001A73                 jnz     short loc_1A97
.text:00001A75                 mov     [ebp+var_14], 2
.text:00001A7C                 mov     eax, [ebp+arg_4]
.text:00001A7F                 mov     ecx, [ebp+var_14]
.text:00001A82                 mov     [eax], ecx
.text:00001A84                 mov     edx, [ebp+var_C]
.text:00001A87                 sub     edx, 1
.text:00001A8A                 mov     eax, [ebp+arg_4]
.text:00001A8D                 mov     [eax+4], edx
.text:00001A90                 mov     [ebp+var_18], 2
.text:00001A97
.text:00001A97 loc_1A97:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+120j
.text:00001A97                                         ; Bt4_MatchFinder_GetMatches(x,x)+133j
.text:00001A97                 mov     ecx, [ebp+var_C]
.text:00001A9A                 cmp     ecx, [ebp+var_10]
.text:00001A9D                 jz      short loc_1AE3
.text:00001A9F                 mov     edx, [ebp+arg_0]
.text:00001AA2                 mov     eax, [ebp+var_10]
.text:00001AA5                 cmp     eax, [edx+18h]
.text:00001AA8                 jnb     short loc_1AE3
.text:00001AAA                 mov     ecx, [ebp+var_2C]
.text:00001AAD                 sub     ecx, [ebp+var_10]
.text:00001AB0                 movzx   edx, byte ptr [ecx]
.text:00001AB3                 mov     eax, [ebp+var_2C]
.text:00001AB6                 movzx   ecx, byte ptr [eax]
.text:00001AB9                 cmp     edx, ecx
.text:00001ABB                 jnz     short loc_1AE3
.text:00001ABD                 mov     [ebp+var_14], 3
.text:00001AC4                 mov     edx, [ebp+var_10]
.text:00001AC7                 sub     edx, 1
.text:00001ACA                 mov     eax, [ebp+var_18]
.text:00001ACD                 mov     ecx, [ebp+arg_4]
.text:00001AD0                 mov     [ecx+eax*4+4], edx
.text:00001AD4                 mov     edx, [ebp+var_18]
.text:00001AD7                 add     edx, 2
.text:00001ADA                 mov     [ebp+var_18], edx
.text:00001ADD                 mov     eax, [ebp+var_10]
.text:00001AE0                 mov     [ebp+var_C], eax
.text:00001AE3
.text:00001AE3 loc_1AE3:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+15Dj
.text:00001AE3                                         ; Bt4_MatchFinder_GetMatches(x,x)+168j ...
.text:00001AE3                 cmp     [ebp+var_18], 0
.text:00001AE7                 jz      loc_1BD6
.text:00001AED                 xor     ecx, ecx
.text:00001AEF                 sub     ecx, [ebp+var_C]
.text:00001AF2                 mov     [ebp+var_38], ecx
.text:00001AF5                 mov     edx, [ebp+var_2C]
.text:00001AF8                 add     edx, [ebp+var_14]
.text:00001AFB                 mov     [ebp+var_3C], edx
.text:00001AFE                 mov     eax, [ebp+var_2C]
.text:00001B01                 add     eax, [ebp+var_24]
.text:00001B04                 mov     [ebp+var_40], eax
.text:00001B07                 jmp     short loc_1B12
.text:00001B09 ; ---------------------------------------------------------------------------
.text:00001B09
.text:00001B09 loc_1B09:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x):loc_1B2Fj
.text:00001B09                 mov     ecx, [ebp+var_3C]
.text:00001B0C                 add     ecx, 1
.text:00001B0F                 mov     [ebp+var_3C], ecx
.text:00001B12
.text:00001B12 loc_1B12:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+1C7j
.text:00001B12                 mov     edx, [ebp+var_3C]
.text:00001B15                 cmp     edx, [ebp+var_40]
.text:00001B18                 jz      short loc_1B31
.text:00001B1A                 mov     eax, [ebp+var_3C]
.text:00001B1D                 add     eax, [ebp+var_38]
.text:00001B20                 movzx   ecx, byte ptr [eax]
.text:00001B23                 mov     edx, [ebp+var_3C]
.text:00001B26                 movzx   eax, byte ptr [edx]
.text:00001B29                 cmp     ecx, eax
.text:00001B2B                 jz      short loc_1B2F
.text:00001B2D                 jmp     short loc_1B31
.text:00001B2F ; ---------------------------------------------------------------------------
.text:00001B2F
.text:00001B2F loc_1B2F:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+1EBj
.text:00001B2F                 jmp     short loc_1B09
.text:00001B31 ; ---------------------------------------------------------------------------
.text:00001B31
.text:00001B31 loc_1B31:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+1D8j
.text:00001B31                                         ; Bt4_MatchFinder_GetMatches(x,x)+1EDj
.text:00001B31                 mov     ecx, [ebp+var_3C]
.text:00001B34                 sub     ecx, [ebp+var_2C]
.text:00001B37                 mov     [ebp+var_14], ecx
.text:00001B3A                 mov     edx, [ebp+var_18]
.text:00001B3D                 mov     eax, [ebp+arg_4]
.text:00001B40                 mov     ecx, [ebp+var_14]
.text:00001B43                 mov     [eax+edx*4-8], ecx
.text:00001B47                 mov     edx, [ebp+var_14]
.text:00001B4A                 cmp     edx, [ebp+var_24]
.text:00001B4D                 jnz     loc_1BD6
.text:00001B53                 mov     eax, [ebp+arg_0]
.text:00001B56                 mov     ecx, [eax+30h]
.text:00001B59                 push    ecx
.text:00001B5A                 mov     edx, [ebp+arg_0]
.text:00001B5D                 mov     eax, [edx+18h]
.text:00001B60                 push    eax
.text:00001B61                 mov     ecx, [ebp+arg_0]
.text:00001B64                 mov     edx, [ecx+14h]
.text:00001B67                 push    edx
.text:00001B68                 mov     eax, [ebp+arg_0]
.text:00001B6B                 mov     ecx, [eax+28h]
.text:00001B6E                 push    ecx
.text:00001B6F                 mov     edx, [ebp+arg_0]
.text:00001B72                 mov     eax, [edx]
.text:00001B74                 push    eax
.text:00001B75                 mov     ecx, [ebp+arg_0]
.text:00001B78                 mov     edx, [ecx+4]
.text:00001B7B                 push    edx
.text:00001B7C                 mov     eax, [ebp+var_30]
.text:00001B7F                 push    eax
.text:00001B80                 mov     ecx, [ebp+var_24]
.text:00001B83                 push    ecx
.text:00001B84                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:00001B89                 mov     edx, [ebp+arg_0]
.text:00001B8C                 mov     eax, [edx+14h]
.text:00001B8F                 add     eax, 1
.text:00001B92                 mov     ecx, [ebp+arg_0]
.text:00001B95                 mov     [ecx+14h], eax
.text:00001B98                 mov     edx, [ebp+arg_0]
.text:00001B9B                 mov     eax, [edx]
.text:00001B9D                 add     eax, 1
.text:00001BA0                 mov     ecx, [ebp+arg_0]
.text:00001BA3                 mov     [ecx], eax
.text:00001BA5                 mov     edx, [ebp+arg_0]
.text:00001BA8                 mov     eax, [edx+4]
.text:00001BAB                 add     eax, 1
.text:00001BAE                 mov     [ebp+var_44], eax
.text:00001BB1                 mov     ecx, [ebp+arg_0]
.text:00001BB4                 mov     edx, [ebp+var_44]
.text:00001BB7                 mov     [ecx+4], edx
.text:00001BBA                 mov     eax, [ebp+arg_0]
.text:00001BBD                 mov     ecx, [ebp+var_44]
.text:00001BC0                 cmp     ecx, [eax+8]
.text:00001BC3                 jnz     short loc_1BCE
.text:00001BC5                 mov     edx, [ebp+arg_0]
.text:00001BC8                 push    edx
.text:00001BC9                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001BCE
.text:00001BCE loc_1BCE:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+283j
.text:00001BCE                 mov     eax, [ebp+var_18]
.text:00001BD1                 jmp     loc_1C78
.text:00001BD6 ; ---------------------------------------------------------------------------
.text:00001BD6
.text:00001BD6 loc_1BD6:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+1A7j
.text:00001BD6                                         ; Bt4_MatchFinder_GetMatches(x,x)+20Dj
.text:00001BD6                 cmp     [ebp+var_14], 3
.text:00001BDA                 jnb     short loc_1BE3
.text:00001BDC                 mov     [ebp+var_14], 3
.text:00001BE3
.text:00001BE3 loc_1BE3:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+29Aj
.text:00001BE3                 mov     eax, [ebp+var_14]
.text:00001BE6                 push    eax
.text:00001BE7                 mov     ecx, [ebp+var_18]
.text:00001BEA                 mov     edx, [ebp+arg_4]
.text:00001BED                 lea     eax, [edx+ecx*4]
.text:00001BF0                 push    eax
.text:00001BF1                 mov     ecx, [ebp+arg_0]
.text:00001BF4                 mov     edx, [ecx+30h]
.text:00001BF7                 push    edx
.text:00001BF8                 mov     eax, [ebp+arg_0]
.text:00001BFB                 mov     ecx, [eax+18h]
.text:00001BFE                 push    ecx
.text:00001BFF                 mov     edx, [ebp+arg_0]
.text:00001C02                 mov     eax, [edx+14h]
.text:00001C05                 push    eax
.text:00001C06                 mov     ecx, [ebp+arg_0]
.text:00001C09                 mov     edx, [ecx+28h]
.text:00001C0C                 push    edx
.text:00001C0D                 mov     eax, [ebp+arg_0]
.text:00001C10                 mov     ecx, [eax]
.text:00001C12                 push    ecx
.text:00001C13                 mov     edx, [ebp+arg_0]
.text:00001C16                 mov     eax, [edx+4]
.text:00001C19                 push    eax
.text:00001C1A                 mov     ecx, [ebp+var_30]
.text:00001C1D                 push    ecx
.text:00001C1E                 mov     edx, [ebp+var_24]
.text:00001C21                 push    edx
.text:00001C22                 call    _GetMatchesSpec1@40 ; GetMatchesSpec1(x,x,x,x,x,x,x,x,x,x)
.text:00001C27                 sub     eax, [ebp+arg_4]
.text:00001C2A                 sar     eax, 2
.text:00001C2D                 mov     [ebp+var_18], eax
.text:00001C30                 mov     eax, [ebp+arg_0]
.text:00001C33                 mov     ecx, [eax+14h]
.text:00001C36                 add     ecx, 1
.text:00001C39                 mov     edx, [ebp+arg_0]
.text:00001C3C                 mov     [edx+14h], ecx
.text:00001C3F                 mov     eax, [ebp+arg_0]
.text:00001C42                 mov     ecx, [eax]
.text:00001C44                 add     ecx, 1
.text:00001C47                 mov     edx, [ebp+arg_0]
.text:00001C4A                 mov     [edx], ecx
.text:00001C4C                 mov     eax, [ebp+arg_0]
.text:00001C4F                 mov     ecx, [eax+4]
.text:00001C52                 add     ecx, 1
.text:00001C55                 mov     [ebp+var_48], ecx
.text:00001C58                 mov     edx, [ebp+arg_0]
.text:00001C5B                 mov     eax, [ebp+var_48]
.text:00001C5E                 mov     [edx+4], eax
.text:00001C61                 mov     ecx, [ebp+arg_0]
.text:00001C64                 mov     edx, [ebp+var_48]
.text:00001C67                 cmp     edx, [ecx+8]
.text:00001C6A                 jnz     short loc_1C75
.text:00001C6C                 mov     eax, [ebp+arg_0]
.text:00001C6F                 push    eax
.text:00001C70                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001C75
.text:00001C75 loc_1C75:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+32Aj
.text:00001C75                 mov     eax, [ebp+var_18]
.text:00001C78
.text:00001C78 loc_1C78:                               ; CODE XREF: Bt4_MatchFinder_GetMatches(x,x)+30j
.text:00001C78                                         ; Bt4_MatchFinder_GetMatches(x,x)+291j
.text:00001C78                 pop     edi
.text:00001C79                 add     esp, 48h
.text:00001C7C                 cmp     ebp, esp
.text:00001C7E                 call    __RTC_CheckEsp
.text:00001C83                 mov     esp, ebp
.text:00001C85                 pop     ebp
.text:00001C86                 retn    8
.text:00001C86 _Bt4_MatchFinder_GetMatches@8 endp
.text:00001C86
.text:00001C86 ; ---------------------------------------------------------------------------
.text:00001C89                 align 10h
.text:00001C90
.text:00001C90 ; =============== S U B R O U T I N E =======================================
.text:00001C90
.text:00001C90 ; Attributes: bp-based frame
.text:00001C90
.text:00001C90 ; __stdcall Hc4_MatchFinder_GetMatches(x, x)
.text:00001C90 _Hc4_MatchFinder_GetMatches@8 proc near ; DATA XREF: MatchFinder_CreateVTable(x,x)+2Eo
.text:00001C90
.text:00001C90 var_48          = dword ptr -48h
.text:00001C90 var_44          = dword ptr -44h
.text:00001C90 var_40          = dword ptr -40h
.text:00001C90 var_3C          = dword ptr -3Ch
.text:00001C90 var_38          = dword ptr -38h
.text:00001C90 var_34          = dword ptr -34h
.text:00001C90 var_30          = dword ptr -30h
.text:00001C90 var_2C          = dword ptr -2Ch
.text:00001C90 var_28          = dword ptr -28h
.text:00001C90 var_24          = dword ptr -24h
.text:00001C90 var_20          = dword ptr -20h
.text:00001C90 var_1C          = dword ptr -1Ch
.text:00001C90 var_18          = dword ptr -18h
.text:00001C90 var_14          = dword ptr -14h
.text:00001C90 var_10          = dword ptr -10h
.text:00001C90 var_C           = dword ptr -0Ch
.text:00001C90 var_8           = dword ptr -8
.text:00001C90 var_4           = dword ptr -4
.text:00001C90 arg_0           = dword ptr  8
.text:00001C90 arg_4           = dword ptr  0Ch
.text:00001C90
.text:00001C90                 push    ebp
.text:00001C91                 mov     ebp, esp
.text:00001C93                 sub     esp, 48h
.text:00001C96                 push    edi
.text:00001C97                 lea     edi, [ebp+var_48]
.text:00001C9A                 mov     ecx, 12h
.text:00001C9F                 mov     eax, 0CCCCCCCCh
.text:00001CA4                 rep stosd
.text:00001CA6                 mov     eax, [ebp+arg_0]
.text:00001CA9                 mov     ecx, [eax+10h]
.text:00001CAC                 mov     [ebp+var_24], ecx
.text:00001CAF                 cmp     [ebp+var_24], 4
.text:00001CB3                 jnb     short loc_1CC5
.text:00001CB5                 mov     edx, [ebp+arg_0]
.text:00001CB8                 push    edx
.text:00001CB9                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00001CBE                 xor     eax, eax
.text:00001CC0                 jmp     loc_1FA0
.text:00001CC5 ; ---------------------------------------------------------------------------
.text:00001CC5
.text:00001CC5 loc_1CC5:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+23j
.text:00001CC5                 mov     eax, [ebp+arg_0]
.text:00001CC8                 mov     ecx, [eax]
.text:00001CCA                 mov     [ebp+var_2C], ecx
.text:00001CCD                 mov     edx, [ebp+var_2C]
.text:00001CD0                 movzx   eax, byte ptr [edx]
.text:00001CD3                 mov     ecx, [ebp+var_2C]
.text:00001CD6                 movzx   edx, byte ptr [ecx+1]
.text:00001CDA                 mov     ecx, [ebp+arg_0]
.text:00001CDD                 xor     edx, [ecx+eax*4+60h]
.text:00001CE1                 mov     [ebp+var_34], edx
.text:00001CE4                 mov     edx, [ebp+var_34]
.text:00001CE7                 and     edx, 3FFh
.text:00001CED                 mov     [ebp+var_4], edx
.text:00001CF0                 mov     eax, [ebp+var_2C]
.text:00001CF3                 movzx   ecx, byte ptr [eax+2]
.text:00001CF7                 shl     ecx, 8
.text:00001CFA                 xor     ecx, [ebp+var_34]
.text:00001CFD                 mov     [ebp+var_34], ecx
.text:00001D00                 mov     edx, [ebp+var_34]
.text:00001D03                 and     edx, 0FFFFh
.text:00001D09                 mov     [ebp+var_8], edx
.text:00001D0C                 mov     eax, [ebp+var_2C]
.text:00001D0F                 movzx   ecx, byte ptr [eax+3]
.text:00001D13                 mov     edx, [ebp+arg_0]
.text:00001D16                 mov     eax, [edx+ecx*4+60h]
.text:00001D1A                 shl     eax, 5
.text:00001D1D                 xor     eax, [ebp+var_34]
.text:00001D20                 mov     ecx, [ebp+arg_0]
.text:00001D23                 and     eax, [ecx+2Ch]
.text:00001D26                 mov     [ebp+var_28], eax
.text:00001D29                 mov     edx, [ebp+arg_0]
.text:00001D2C                 mov     eax, [edx+24h]
.text:00001D2F                 mov     [ebp+var_20], eax
.text:00001D32                 mov     ecx, [ebp+arg_0]
.text:00001D35                 mov     edx, [ecx+4]
.text:00001D38                 mov     [ebp+var_1C], edx
.text:00001D3B                 mov     eax, [ebp+var_4]
.text:00001D3E                 mov     ecx, [ebp+var_20]
.text:00001D41                 mov     edx, [ebp+var_1C]
.text:00001D44                 sub     edx, [ecx+eax*4]
.text:00001D47                 mov     [ebp+var_C], edx
.text:00001D4A                 mov     eax, [ebp+var_8]
.text:00001D4D                 mov     ecx, [ebp+var_20]
.text:00001D50                 mov     edx, [ebp+var_1C]
.text:00001D53                 sub     edx, [ecx+eax*4+1000h]
.text:00001D5A                 mov     [ebp+var_10], edx
.text:00001D5D                 mov     eax, [ebp+var_28]
.text:00001D60                 mov     ecx, [ebp+var_20]
.text:00001D63                 mov     edx, [ecx+eax*4+41000h]
.text:00001D6A                 mov     [ebp+var_30], edx
.text:00001D6D                 mov     eax, [ebp+var_4]
.text:00001D70                 mov     ecx, [ebp+var_20]
.text:00001D73                 mov     edx, [ebp+var_1C]
.text:00001D76                 mov     [ecx+eax*4], edx
.text:00001D79                 mov     eax, [ebp+var_8]
.text:00001D7C                 mov     ecx, [ebp+var_20]
.text:00001D7F                 mov     edx, [ebp+var_1C]
.text:00001D82                 mov     [ecx+eax*4+1000h], edx
.text:00001D89                 mov     eax, [ebp+var_28]
.text:00001D8C                 mov     ecx, [ebp+var_20]
.text:00001D8F                 mov     edx, [ebp+var_1C]
.text:00001D92                 mov     [ecx+eax*4+41000h], edx
.text:00001D99                 mov     [ebp+var_14], 0
.text:00001DA0                 mov     [ebp+var_18], 0
.text:00001DA7                 mov     eax, [ebp+arg_0]
.text:00001DAA                 mov     ecx, [ebp+var_C]
.text:00001DAD                 cmp     ecx, [eax+18h]
.text:00001DB0                 jnb     short loc_1DE7
.text:00001DB2                 mov     edx, [ebp+var_2C]
.text:00001DB5                 sub     edx, [ebp+var_C]
.text:00001DB8                 movzx   eax, byte ptr [edx]
.text:00001DBB                 mov     ecx, [ebp+var_2C]
.text:00001DBE                 movzx   edx, byte ptr [ecx]
.text:00001DC1                 cmp     eax, edx
.text:00001DC3                 jnz     short loc_1DE7
.text:00001DC5                 mov     [ebp+var_14], 2
.text:00001DCC                 mov     eax, [ebp+arg_4]
.text:00001DCF                 mov     ecx, [ebp+var_14]
.text:00001DD2                 mov     [eax], ecx
.text:00001DD4                 mov     edx, [ebp+var_C]
.text:00001DD7                 sub     edx, 1
.text:00001DDA                 mov     eax, [ebp+arg_4]
.text:00001DDD                 mov     [eax+4], edx
.text:00001DE0                 mov     [ebp+var_18], 2
.text:00001DE7
.text:00001DE7 loc_1DE7:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+120j
.text:00001DE7                                         ; Hc4_MatchFinder_GetMatches(x,x)+133j
.text:00001DE7                 mov     ecx, [ebp+var_C]
.text:00001DEA                 cmp     ecx, [ebp+var_10]
.text:00001DED                 jz      short loc_1E33
.text:00001DEF                 mov     edx, [ebp+arg_0]
.text:00001DF2                 mov     eax, [ebp+var_10]
.text:00001DF5                 cmp     eax, [edx+18h]
.text:00001DF8                 jnb     short loc_1E33
.text:00001DFA                 mov     ecx, [ebp+var_2C]
.text:00001DFD                 sub     ecx, [ebp+var_10]
.text:00001E00                 movzx   edx, byte ptr [ecx]
.text:00001E03                 mov     eax, [ebp+var_2C]
.text:00001E06                 movzx   ecx, byte ptr [eax]
.text:00001E09                 cmp     edx, ecx
.text:00001E0B                 jnz     short loc_1E33
.text:00001E0D                 mov     [ebp+var_14], 3
.text:00001E14                 mov     edx, [ebp+var_10]
.text:00001E17                 sub     edx, 1
.text:00001E1A                 mov     eax, [ebp+var_18]
.text:00001E1D                 mov     ecx, [ebp+arg_4]
.text:00001E20                 mov     [ecx+eax*4+4], edx
.text:00001E24                 mov     edx, [ebp+var_18]
.text:00001E27                 add     edx, 2
.text:00001E2A                 mov     [ebp+var_18], edx
.text:00001E2D                 mov     eax, [ebp+var_10]
.text:00001E30                 mov     [ebp+var_C], eax
.text:00001E33
.text:00001E33 loc_1E33:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+15Dj
.text:00001E33                                         ; Hc4_MatchFinder_GetMatches(x,x)+168j ...
.text:00001E33                 cmp     [ebp+var_18], 0
.text:00001E37                 jz      loc_1EFE
.text:00001E3D                 xor     ecx, ecx
.text:00001E3F                 sub     ecx, [ebp+var_C]
.text:00001E42                 mov     [ebp+var_38], ecx
.text:00001E45                 mov     edx, [ebp+var_2C]
.text:00001E48                 add     edx, [ebp+var_14]
.text:00001E4B                 mov     [ebp+var_3C], edx
.text:00001E4E                 mov     eax, [ebp+var_2C]
.text:00001E51                 add     eax, [ebp+var_24]
.text:00001E54                 mov     [ebp+var_40], eax
.text:00001E57                 jmp     short loc_1E62
.text:00001E59 ; ---------------------------------------------------------------------------
.text:00001E59
.text:00001E59 loc_1E59:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x):loc_1E7Fj
.text:00001E59                 mov     ecx, [ebp+var_3C]
.text:00001E5C                 add     ecx, 1
.text:00001E5F                 mov     [ebp+var_3C], ecx
.text:00001E62
.text:00001E62 loc_1E62:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+1C7j
.text:00001E62                 mov     edx, [ebp+var_3C]
.text:00001E65                 cmp     edx, [ebp+var_40]
.text:00001E68                 jz      short loc_1E81
.text:00001E6A                 mov     eax, [ebp+var_3C]
.text:00001E6D                 add     eax, [ebp+var_38]
.text:00001E70                 movzx   ecx, byte ptr [eax]
.text:00001E73                 mov     edx, [ebp+var_3C]
.text:00001E76                 movzx   eax, byte ptr [edx]
.text:00001E79                 cmp     ecx, eax
.text:00001E7B                 jz      short loc_1E7F
.text:00001E7D                 jmp     short loc_1E81
.text:00001E7F ; ---------------------------------------------------------------------------
.text:00001E7F
.text:00001E7F loc_1E7F:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+1EBj
.text:00001E7F                 jmp     short loc_1E59
.text:00001E81 ; ---------------------------------------------------------------------------
.text:00001E81
.text:00001E81 loc_1E81:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+1D8j
.text:00001E81                                         ; Hc4_MatchFinder_GetMatches(x,x)+1EDj
.text:00001E81                 mov     ecx, [ebp+var_3C]
.text:00001E84                 sub     ecx, [ebp+var_2C]
.text:00001E87                 mov     [ebp+var_14], ecx
.text:00001E8A                 mov     edx, [ebp+var_18]
.text:00001E8D                 mov     eax, [ebp+arg_4]
.text:00001E90                 mov     ecx, [ebp+var_14]
.text:00001E93                 mov     [eax+edx*4-8], ecx
.text:00001E97                 mov     edx, [ebp+var_14]
.text:00001E9A                 cmp     edx, [ebp+var_24]
.text:00001E9D                 jnz     short loc_1EFE
.text:00001E9F                 mov     eax, [ebp+arg_0]
.text:00001EA2                 mov     ecx, [eax+14h]
.text:00001EA5                 mov     edx, [ebp+arg_0]
.text:00001EA8                 mov     eax, [edx+28h]
.text:00001EAB                 mov     edx, [ebp+var_30]
.text:00001EAE                 mov     [eax+ecx*4], edx
.text:00001EB1                 mov     eax, [ebp+arg_0]
.text:00001EB4                 mov     ecx, [eax+14h]
.text:00001EB7                 add     ecx, 1
.text:00001EBA                 mov     edx, [ebp+arg_0]
.text:00001EBD                 mov     [edx+14h], ecx
.text:00001EC0                 mov     eax, [ebp+arg_0]
.text:00001EC3                 mov     ecx, [eax]
.text:00001EC5                 add     ecx, 1
.text:00001EC8                 mov     edx, [ebp+arg_0]
.text:00001ECB                 mov     [edx], ecx
.text:00001ECD                 mov     eax, [ebp+arg_0]
.text:00001ED0                 mov     ecx, [eax+4]
.text:00001ED3                 add     ecx, 1
.text:00001ED6                 mov     [ebp+var_44], ecx
.text:00001ED9                 mov     edx, [ebp+arg_0]
.text:00001EDC                 mov     eax, [ebp+var_44]
.text:00001EDF                 mov     [edx+4], eax
.text:00001EE2                 mov     ecx, [ebp+arg_0]
.text:00001EE5                 mov     edx, [ebp+var_44]
.text:00001EE8                 cmp     edx, [ecx+8]
.text:00001EEB                 jnz     short loc_1EF6
.text:00001EED                 mov     eax, [ebp+arg_0]
.text:00001EF0                 push    eax
.text:00001EF1                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001EF6
.text:00001EF6 loc_1EF6:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+25Bj
.text:00001EF6                 mov     eax, [ebp+var_18]
.text:00001EF9                 jmp     loc_1FA0
.text:00001EFE ; ---------------------------------------------------------------------------
.text:00001EFE
.text:00001EFE loc_1EFE:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+1A7j
.text:00001EFE                                         ; Hc4_MatchFinder_GetMatches(x,x)+20Dj
.text:00001EFE                 cmp     [ebp+var_14], 3
.text:00001F02                 jnb     short loc_1F0B
.text:00001F04                 mov     [ebp+var_14], 3
.text:00001F0B
.text:00001F0B loc_1F0B:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+272j
.text:00001F0B                 mov     ecx, [ebp+var_14]
.text:00001F0E                 push    ecx
.text:00001F0F                 mov     edx, [ebp+var_18]
.text:00001F12                 mov     eax, [ebp+arg_4]
.text:00001F15                 lea     ecx, [eax+edx*4]
.text:00001F18                 push    ecx
.text:00001F19                 mov     edx, [ebp+arg_0]
.text:00001F1C                 mov     eax, [edx+30h]
.text:00001F1F                 push    eax
.text:00001F20                 mov     ecx, [ebp+arg_0]
.text:00001F23                 mov     edx, [ecx+18h]
.text:00001F26                 push    edx
.text:00001F27                 mov     eax, [ebp+arg_0]
.text:00001F2A                 mov     ecx, [eax+14h]
.text:00001F2D                 push    ecx
.text:00001F2E                 mov     edx, [ebp+arg_0]
.text:00001F31                 mov     eax, [edx+28h]
.text:00001F34                 push    eax
.text:00001F35                 mov     ecx, [ebp+arg_0]
.text:00001F38                 mov     edx, [ecx]
.text:00001F3A                 push    edx
.text:00001F3B                 mov     eax, [ebp+arg_0]
.text:00001F3E                 mov     ecx, [eax+4]
.text:00001F41                 push    ecx
.text:00001F42                 mov     edx, [ebp+var_30]
.text:00001F45                 push    edx
.text:00001F46                 mov     eax, [ebp+var_24]
.text:00001F49                 push    eax
.text:00001F4A                 call    _Hc_GetMatchesSpec@40 ; Hc_GetMatchesSpec(x,x,x,x,x,x,x,x,x,x)
.text:00001F4F                 sub     eax, [ebp+arg_4]
.text:00001F52                 sar     eax, 2
.text:00001F55                 mov     [ebp+var_18], eax
.text:00001F58                 mov     ecx, [ebp+arg_0]
.text:00001F5B                 mov     edx, [ecx+14h]
.text:00001F5E                 add     edx, 1
.text:00001F61                 mov     eax, [ebp+arg_0]
.text:00001F64                 mov     [eax+14h], edx
.text:00001F67                 mov     ecx, [ebp+arg_0]
.text:00001F6A                 mov     edx, [ecx]
.text:00001F6C                 add     edx, 1
.text:00001F6F                 mov     eax, [ebp+arg_0]
.text:00001F72                 mov     [eax], edx
.text:00001F74                 mov     ecx, [ebp+arg_0]
.text:00001F77                 mov     edx, [ecx+4]
.text:00001F7A                 add     edx, 1
.text:00001F7D                 mov     [ebp+var_48], edx
.text:00001F80                 mov     eax, [ebp+arg_0]
.text:00001F83                 mov     ecx, [ebp+var_48]
.text:00001F86                 mov     [eax+4], ecx
.text:00001F89                 mov     edx, [ebp+arg_0]
.text:00001F8C                 mov     eax, [ebp+var_48]
.text:00001F8F                 cmp     eax, [edx+8]
.text:00001F92                 jnz     short loc_1F9D
.text:00001F94                 mov     ecx, [ebp+arg_0]
.text:00001F97                 push    ecx
.text:00001F98                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:00001F9D
.text:00001F9D loc_1F9D:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+302j
.text:00001F9D                 mov     eax, [ebp+var_18]
.text:00001FA0
.text:00001FA0 loc_1FA0:                               ; CODE XREF: Hc4_MatchFinder_GetMatches(x,x)+30j
.text:00001FA0                                         ; Hc4_MatchFinder_GetMatches(x,x)+269j
.text:00001FA0                 pop     edi
.text:00001FA1                 add     esp, 48h
.text:00001FA4                 cmp     ebp, esp
.text:00001FA6                 call    __RTC_CheckEsp
.text:00001FAB                 mov     esp, ebp
.text:00001FAD                 pop     ebp
.text:00001FAE                 retn    8
.text:00001FAE _Hc4_MatchFinder_GetMatches@8 endp
.text:00001FAE
.text:00001FAE ; ---------------------------------------------------------------------------
.text:00001FB1                 align 10h
.text:00001FC0
.text:00001FC0 ; =============== S U B R O U T I N E =======================================
.text:00001FC0
.text:00001FC0 ; Attributes: bp-based frame
.text:00001FC0
.text:00001FC0 ; __stdcall Bt2_MatchFinder_Skip(x, x)
.text:00001FC0 _Bt2_MatchFinder_Skip@8 proc near       ; DATA XREF: MatchFinder_CreateVTable(x,x)+57o
.text:00001FC0
.text:00001FC0 var_14          = dword ptr -14h
.text:00001FC0 var_10          = dword ptr -10h
.text:00001FC0 var_C           = dword ptr -0Ch
.text:00001FC0 var_8           = dword ptr -8
.text:00001FC0 var_4           = dword ptr -4
.text:00001FC0 arg_0           = dword ptr  8
.text:00001FC0 arg_4           = dword ptr  0Ch
.text:00001FC0
.text:00001FC0                 push    ebp
.text:00001FC1                 mov     ebp, esp
.text:00001FC3                 sub     esp, 14h
.text:00001FC6                 mov     eax, 0CCCCCCCCh
.text:00001FCB                 mov     [ebp+var_14], eax
.text:00001FCE                 mov     [ebp+var_10], eax
.text:00001FD1                 mov     [ebp+var_C], eax
.text:00001FD4                 mov     [ebp+var_8], eax
.text:00001FD7                 mov     [ebp+var_4], eax
.text:00001FDA
.text:00001FDA loc_1FDA:                               ; CODE XREF: Bt2_MatchFinder_Skip(x,x)+F9j
.text:00001FDA                 mov     eax, [ebp+arg_0]
.text:00001FDD                 mov     ecx, [eax+10h]
.text:00001FE0                 mov     [ebp+var_4], ecx
.text:00001FE3                 cmp     [ebp+var_4], 2
.text:00001FE7                 jnb     short loc_1FF7
.text:00001FE9                 mov     edx, [ebp+arg_0]
.text:00001FEC                 push    edx
.text:00001FED                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:00001FF2                 jmp     loc_20B0
.text:00001FF7 ; ---------------------------------------------------------------------------
.text:00001FF7
.text:00001FF7 loc_1FF7:                               ; CODE XREF: Bt2_MatchFinder_Skip(x,x)+27j
.text:00001FF7                 mov     eax, [ebp+arg_0]
.text:00001FFA                 mov     ecx, [eax]
.text:00001FFC                 mov     [ebp+var_C], ecx
.text:00001FFF                 mov     edx, [ebp+var_C]
.text:00002002                 movzx   eax, byte ptr [edx]
.text:00002005                 mov     ecx, [ebp+var_C]
.text:00002008                 movzx   edx, byte ptr [ecx+1]
.text:0000200C                 shl     edx, 8
.text:0000200F                 or      eax, edx
.text:00002011                 mov     [ebp+var_8], eax
.text:00002014                 mov     eax, [ebp+arg_0]
.text:00002017                 mov     ecx, [eax+24h]
.text:0000201A                 mov     edx, [ebp+var_8]
.text:0000201D                 mov     eax, [ecx+edx*4]
.text:00002020                 mov     [ebp+var_10], eax
.text:00002023                 mov     ecx, [ebp+arg_0]
.text:00002026                 mov     edx, [ecx+24h]
.text:00002029                 mov     eax, [ebp+var_8]
.text:0000202C                 mov     ecx, [ebp+arg_0]
.text:0000202F                 mov     ecx, [ecx+4]
.text:00002032                 mov     [edx+eax*4], ecx
.text:00002035                 mov     edx, [ebp+arg_0]
.text:00002038                 mov     eax, [edx+30h]
.text:0000203B                 push    eax
.text:0000203C                 mov     ecx, [ebp+arg_0]
.text:0000203F                 mov     edx, [ecx+18h]
.text:00002042                 push    edx
.text:00002043                 mov     eax, [ebp+arg_0]
.text:00002046                 mov     ecx, [eax+14h]
.text:00002049                 push    ecx
.text:0000204A                 mov     edx, [ebp+arg_0]
.text:0000204D                 mov     eax, [edx+28h]
.text:00002050                 push    eax
.text:00002051                 mov     ecx, [ebp+arg_0]
.text:00002054                 mov     edx, [ecx]
.text:00002056                 push    edx
.text:00002057                 mov     eax, [ebp+arg_0]
.text:0000205A                 mov     ecx, [eax+4]
.text:0000205D                 push    ecx
.text:0000205E                 mov     edx, [ebp+var_10]
.text:00002061                 push    edx
.text:00002062                 mov     eax, [ebp+var_4]
.text:00002065                 push    eax
.text:00002066                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:0000206B                 mov     ecx, [ebp+arg_0]
.text:0000206E                 mov     edx, [ecx+14h]
.text:00002071                 add     edx, 1
.text:00002074                 mov     eax, [ebp+arg_0]
.text:00002077                 mov     [eax+14h], edx
.text:0000207A                 mov     ecx, [ebp+arg_0]
.text:0000207D                 mov     edx, [ecx]
.text:0000207F                 add     edx, 1
.text:00002082                 mov     eax, [ebp+arg_0]
.text:00002085                 mov     [eax], edx
.text:00002087                 mov     ecx, [ebp+arg_0]
.text:0000208A                 mov     edx, [ecx+4]
.text:0000208D                 add     edx, 1
.text:00002090                 mov     [ebp+var_14], edx
.text:00002093                 mov     eax, [ebp+arg_0]
.text:00002096                 mov     ecx, [ebp+var_14]
.text:00002099                 mov     [eax+4], ecx
.text:0000209C                 mov     edx, [ebp+arg_0]
.text:0000209F                 mov     eax, [ebp+var_14]
.text:000020A2                 cmp     eax, [edx+8]
.text:000020A5                 jnz     short loc_20B0
.text:000020A7                 mov     ecx, [ebp+arg_0]
.text:000020AA                 push    ecx
.text:000020AB                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:000020B0
.text:000020B0 loc_20B0:                               ; CODE XREF: Bt2_MatchFinder_Skip(x,x)+32j
.text:000020B0                                         ; Bt2_MatchFinder_Skip(x,x)+E5j
.text:000020B0                 mov     edx, [ebp+arg_4]
.text:000020B3                 sub     edx, 1
.text:000020B6                 mov     [ebp+arg_4], edx
.text:000020B9                 jnz     loc_1FDA
.text:000020BF                 add     esp, 14h
.text:000020C2                 cmp     ebp, esp
.text:000020C4                 call    __RTC_CheckEsp
.text:000020C9                 mov     esp, ebp
.text:000020CB                 pop     ebp
.text:000020CC                 retn    8
.text:000020CC _Bt2_MatchFinder_Skip@8 endp
.text:000020CC
.text:000020CC ; ---------------------------------------------------------------------------
.text:000020CF                 align 10h
.text:000020D0
.text:000020D0 ; =============== S U B R O U T I N E =======================================
.text:000020D0
.text:000020D0 ; Attributes: bp-based frame
.text:000020D0
.text:000020D0 ; __stdcall Bt3_MatchFinder_Skip(x, x)
.text:000020D0 _Bt3_MatchFinder_Skip@8 proc near       ; DATA XREF: MatchFinder_CreateVTable(x,x)+76o
.text:000020D0
.text:000020D0 var_20          = dword ptr -20h
.text:000020D0 var_1C          = dword ptr -1Ch
.text:000020D0 var_18          = dword ptr -18h
.text:000020D0 var_14          = dword ptr -14h
.text:000020D0 var_10          = dword ptr -10h
.text:000020D0 var_C           = dword ptr -0Ch
.text:000020D0 var_8           = dword ptr -8
.text:000020D0 var_4           = dword ptr -4
.text:000020D0 arg_0           = dword ptr  8
.text:000020D0 arg_4           = dword ptr  0Ch
.text:000020D0
.text:000020D0                 push    ebp
.text:000020D1                 mov     ebp, esp
.text:000020D3                 sub     esp, 20h
.text:000020D6                 push    esi
.text:000020D7                 mov     eax, 0CCCCCCCCh
.text:000020DC                 mov     [ebp+var_20], eax
.text:000020DF                 mov     [ebp+var_1C], eax
.text:000020E2                 mov     [ebp+var_18], eax
.text:000020E5                 mov     [ebp+var_14], eax
.text:000020E8                 mov     [ebp+var_10], eax
.text:000020EB                 mov     [ebp+var_C], eax
.text:000020EE                 mov     [ebp+var_8], eax
.text:000020F1                 mov     [ebp+var_4], eax
.text:000020F4
.text:000020F4 loc_20F4:                               ; CODE XREF: Bt3_MatchFinder_Skip(x,x)+148j
.text:000020F4                 mov     eax, [ebp+arg_0]
.text:000020F7                 mov     ecx, [eax+10h]
.text:000020FA                 mov     [ebp+var_C], ecx
.text:000020FD                 cmp     [ebp+var_C], 3
.text:00002101                 jnb     short loc_2111
.text:00002103                 mov     edx, [ebp+arg_0]
.text:00002106                 push    edx
.text:00002107                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:0000210C                 jmp     loc_220F
.text:00002111 ; ---------------------------------------------------------------------------
.text:00002111
.text:00002111 loc_2111:                               ; CODE XREF: Bt3_MatchFinder_Skip(x,x)+31j
.text:00002111                 mov     eax, [ebp+arg_0]
.text:00002114                 mov     ecx, [eax]
.text:00002116                 mov     [ebp+var_14], ecx
.text:00002119                 mov     edx, [ebp+var_14]
.text:0000211C                 movzx   eax, byte ptr [edx]
.text:0000211F                 mov     ecx, [ebp+var_14]
.text:00002122                 movzx   edx, byte ptr [ecx+1]
.text:00002126                 mov     ecx, [ebp+arg_0]
.text:00002129                 xor     edx, [ecx+eax*4+60h]
.text:0000212D                 mov     [ebp+var_1C], edx
.text:00002130                 mov     edx, [ebp+var_1C]
.text:00002133                 and     edx, 3FFh
.text:00002139                 mov     [ebp+var_4], edx
.text:0000213C                 mov     eax, [ebp+var_14]
.text:0000213F                 movzx   ecx, byte ptr [eax+2]
.text:00002143                 shl     ecx, 8
.text:00002146                 xor     ecx, [ebp+var_1C]
.text:00002149                 mov     edx, [ebp+arg_0]
.text:0000214C                 and     ecx, [edx+2Ch]
.text:0000214F                 mov     [ebp+var_10], ecx
.text:00002152                 mov     eax, [ebp+arg_0]
.text:00002155                 mov     ecx, [eax+24h]
.text:00002158                 mov     [ebp+var_8], ecx
.text:0000215B                 mov     edx, [ebp+var_10]
.text:0000215E                 mov     eax, [ebp+var_8]
.text:00002161                 mov     ecx, [eax+edx*4+1000h]
.text:00002168                 mov     [ebp+var_18], ecx
.text:0000216B                 mov     edx, [ebp+var_10]
.text:0000216E                 mov     eax, [ebp+var_8]
.text:00002171                 mov     ecx, [ebp+arg_0]
.text:00002174                 mov     ecx, [ecx+4]
.text:00002177                 mov     [eax+edx*4+1000h], ecx
.text:0000217E                 mov     edx, [ebp+var_4]
.text:00002181                 mov     eax, [ebp+var_8]
.text:00002184                 mov     ecx, [ebp+var_10]
.text:00002187                 mov     esi, [ebp+var_8]
.text:0000218A                 mov     ecx, [esi+ecx*4+1000h]
.text:00002191                 mov     [eax+edx*4], ecx
.text:00002194                 mov     edx, [ebp+arg_0]
.text:00002197                 mov     eax, [edx+30h]
.text:0000219A                 push    eax
.text:0000219B                 mov     ecx, [ebp+arg_0]
.text:0000219E                 mov     edx, [ecx+18h]
.text:000021A1                 push    edx
.text:000021A2                 mov     eax, [ebp+arg_0]
.text:000021A5                 mov     ecx, [eax+14h]
.text:000021A8                 push    ecx
.text:000021A9                 mov     edx, [ebp+arg_0]
.text:000021AC                 mov     eax, [edx+28h]
.text:000021AF                 push    eax
.text:000021B0                 mov     ecx, [ebp+arg_0]
.text:000021B3                 mov     edx, [ecx]
.text:000021B5                 push    edx
.text:000021B6                 mov     eax, [ebp+arg_0]
.text:000021B9                 mov     ecx, [eax+4]
.text:000021BC                 push    ecx
.text:000021BD                 mov     edx, [ebp+var_18]
.text:000021C0                 push    edx
.text:000021C1                 mov     eax, [ebp+var_C]
.text:000021C4                 push    eax
.text:000021C5                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:000021CA                 mov     ecx, [ebp+arg_0]
.text:000021CD                 mov     edx, [ecx+14h]
.text:000021D0                 add     edx, 1
.text:000021D3                 mov     eax, [ebp+arg_0]
.text:000021D6                 mov     [eax+14h], edx
.text:000021D9                 mov     ecx, [ebp+arg_0]
.text:000021DC                 mov     edx, [ecx]
.text:000021DE                 add     edx, 1
.text:000021E1                 mov     eax, [ebp+arg_0]
.text:000021E4                 mov     [eax], edx
.text:000021E6                 mov     ecx, [ebp+arg_0]
.text:000021E9                 mov     edx, [ecx+4]
.text:000021EC                 add     edx, 1
.text:000021EF                 mov     [ebp+var_20], edx
.text:000021F2                 mov     eax, [ebp+arg_0]
.text:000021F5                 mov     ecx, [ebp+var_20]
.text:000021F8                 mov     [eax+4], ecx
.text:000021FB                 mov     edx, [ebp+arg_0]
.text:000021FE                 mov     eax, [ebp+var_20]
.text:00002201                 cmp     eax, [edx+8]
.text:00002204                 jnz     short loc_220F
.text:00002206                 mov     ecx, [ebp+arg_0]
.text:00002209                 push    ecx
.text:0000220A                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:0000220F
.text:0000220F loc_220F:                               ; CODE XREF: Bt3_MatchFinder_Skip(x,x)+3Cj
.text:0000220F                                         ; Bt3_MatchFinder_Skip(x,x)+134j
.text:0000220F                 mov     edx, [ebp+arg_4]
.text:00002212                 sub     edx, 1
.text:00002215                 mov     [ebp+arg_4], edx
.text:00002218                 jnz     loc_20F4
.text:0000221E                 pop     esi
.text:0000221F                 add     esp, 20h
.text:00002222                 cmp     ebp, esp
.text:00002224                 call    __RTC_CheckEsp
.text:00002229                 mov     esp, ebp
.text:0000222B                 pop     ebp
.text:0000222C                 retn    8
.text:0000222C _Bt3_MatchFinder_Skip@8 endp
.text:0000222C
.text:0000222C ; ---------------------------------------------------------------------------
.text:0000222F                 align 10h
.text:00002230
.text:00002230 ; =============== S U B R O U T I N E =======================================
.text:00002230
.text:00002230 ; Attributes: bp-based frame
.text:00002230
.text:00002230 ; __stdcall Bt4_MatchFinder_Skip(x, x)
.text:00002230 _Bt4_MatchFinder_Skip@8 proc near       ; DATA XREF: MatchFinder_CreateVTable(x,x)+8Co
.text:00002230
.text:00002230 var_24          = dword ptr -24h
.text:00002230 var_20          = dword ptr -20h
.text:00002230 var_1C          = dword ptr -1Ch
.text:00002230 var_18          = dword ptr -18h
.text:00002230 var_14          = dword ptr -14h
.text:00002230 var_10          = dword ptr -10h
.text:00002230 var_C           = dword ptr -0Ch
.text:00002230 var_8           = dword ptr -8
.text:00002230 var_4           = dword ptr -4
.text:00002230 arg_0           = dword ptr  8
.text:00002230 arg_4           = dword ptr  0Ch
.text:00002230
.text:00002230                 push    ebp
.text:00002231                 mov     ebp, esp
.text:00002233                 sub     esp, 24h
.text:00002236                 push    esi
.text:00002237                 mov     eax, 0CCCCCCCCh
.text:0000223C                 mov     [ebp+var_24], eax
.text:0000223F                 mov     [ebp+var_20], eax
.text:00002242                 mov     [ebp+var_1C], eax
.text:00002245                 mov     [ebp+var_18], eax
.text:00002248                 mov     [ebp+var_14], eax
.text:0000224B                 mov     [ebp+var_10], eax
.text:0000224E                 mov     [ebp+var_C], eax
.text:00002251                 mov     [ebp+var_8], eax
.text:00002254                 mov     [ebp+var_4], eax
.text:00002257
.text:00002257 loc_2257:                               ; CODE XREF: Bt4_MatchFinder_Skip(x,x)+188j
.text:00002257                 mov     eax, [ebp+arg_0]
.text:0000225A                 mov     ecx, [eax+10h]
.text:0000225D                 mov     [ebp+var_10], ecx
.text:00002260                 cmp     [ebp+var_10], 4
.text:00002264                 jnb     short loc_2274
.text:00002266                 mov     edx, [ebp+arg_0]
.text:00002269                 push    edx
.text:0000226A                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:0000226F                 jmp     loc_23AF
.text:00002274 ; ---------------------------------------------------------------------------
.text:00002274
.text:00002274 loc_2274:                               ; CODE XREF: Bt4_MatchFinder_Skip(x,x)+34j
.text:00002274                 mov     eax, [ebp+arg_0]
.text:00002277                 mov     ecx, [eax]
.text:00002279                 mov     [ebp+var_18], ecx
.text:0000227C                 mov     edx, [ebp+var_18]
.text:0000227F                 movzx   eax, byte ptr [edx]
.text:00002282                 mov     ecx, [ebp+var_18]
.text:00002285                 movzx   edx, byte ptr [ecx+1]
.text:00002289                 mov     ecx, [ebp+arg_0]
.text:0000228C                 xor     edx, [ecx+eax*4+60h]
.text:00002290                 mov     [ebp+var_20], edx
.text:00002293                 mov     edx, [ebp+var_20]
.text:00002296                 and     edx, 3FFh
.text:0000229C                 mov     [ebp+var_4], edx
.text:0000229F                 mov     eax, [ebp+var_18]
.text:000022A2                 movzx   ecx, byte ptr [eax+2]
.text:000022A6                 shl     ecx, 8
.text:000022A9                 xor     ecx, [ebp+var_20]
.text:000022AC                 mov     [ebp+var_20], ecx
.text:000022AF                 mov     edx, [ebp+var_20]
.text:000022B2                 and     edx, 0FFFFh
.text:000022B8                 mov     [ebp+var_8], edx
.text:000022BB                 mov     eax, [ebp+var_18]
.text:000022BE                 movzx   ecx, byte ptr [eax+3]
.text:000022C2                 mov     edx, [ebp+arg_0]
.text:000022C5                 mov     eax, [edx+ecx*4+60h]
.text:000022C9                 shl     eax, 5
.text:000022CC                 xor     eax, [ebp+var_20]
.text:000022CF                 mov     ecx, [ebp+arg_0]
.text:000022D2                 and     eax, [ecx+2Ch]
.text:000022D5                 mov     [ebp+var_14], eax
.text:000022D8                 mov     edx, [ebp+arg_0]
.text:000022DB                 mov     eax, [edx+24h]
.text:000022DE                 mov     [ebp+var_C], eax
.text:000022E1                 mov     ecx, [ebp+var_14]
.text:000022E4                 mov     edx, [ebp+var_C]
.text:000022E7                 mov     eax, [edx+ecx*4+41000h]
.text:000022EE                 mov     [ebp+var_1C], eax
.text:000022F1                 mov     ecx, [ebp+var_14]
.text:000022F4                 mov     edx, [ebp+var_C]
.text:000022F7                 mov     eax, [ebp+arg_0]
.text:000022FA                 mov     eax, [eax+4]
.text:000022FD                 mov     [edx+ecx*4+41000h], eax
.text:00002304                 mov     ecx, [ebp+var_8]
.text:00002307                 mov     edx, [ebp+var_C]
.text:0000230A                 mov     eax, [ebp+var_14]
.text:0000230D                 mov     esi, [ebp+var_C]
.text:00002310                 mov     eax, [esi+eax*4+41000h]
.text:00002317                 mov     [edx+ecx*4+1000h], eax
.text:0000231E                 mov     ecx, [ebp+var_4]
.text:00002321                 mov     edx, [ebp+var_C]
.text:00002324                 mov     eax, [ebp+var_8]
.text:00002327                 mov     esi, [ebp+var_C]
.text:0000232A                 mov     eax, [esi+eax*4+1000h]
.text:00002331                 mov     [edx+ecx*4], eax
.text:00002334                 mov     ecx, [ebp+arg_0]
.text:00002337                 mov     edx, [ecx+30h]
.text:0000233A                 push    edx
.text:0000233B                 mov     eax, [ebp+arg_0]
.text:0000233E                 mov     ecx, [eax+18h]
.text:00002341                 push    ecx
.text:00002342                 mov     edx, [ebp+arg_0]
.text:00002345                 mov     eax, [edx+14h]
.text:00002348                 push    eax
.text:00002349                 mov     ecx, [ebp+arg_0]
.text:0000234C                 mov     edx, [ecx+28h]
.text:0000234F                 push    edx
.text:00002350                 mov     eax, [ebp+arg_0]
.text:00002353                 mov     ecx, [eax]
.text:00002355                 push    ecx
.text:00002356                 mov     edx, [ebp+arg_0]
.text:00002359                 mov     eax, [edx+4]
.text:0000235C                 push    eax
.text:0000235D                 mov     ecx, [ebp+var_1C]
.text:00002360                 push    ecx
.text:00002361                 mov     edx, [ebp+var_10]
.text:00002364                 push    edx
.text:00002365                 call    _SkipMatchesSpec@32 ; SkipMatchesSpec(x,x,x,x,x,x,x,x)
.text:0000236A                 mov     eax, [ebp+arg_0]
.text:0000236D                 mov     ecx, [eax+14h]
.text:00002370                 add     ecx, 1
.text:00002373                 mov     edx, [ebp+arg_0]
.text:00002376                 mov     [edx+14h], ecx
.text:00002379                 mov     eax, [ebp+arg_0]
.text:0000237C                 mov     ecx, [eax]
.text:0000237E                 add     ecx, 1
.text:00002381                 mov     edx, [ebp+arg_0]
.text:00002384                 mov     [edx], ecx
.text:00002386                 mov     eax, [ebp+arg_0]
.text:00002389                 mov     ecx, [eax+4]
.text:0000238C                 add     ecx, 1
.text:0000238F                 mov     [ebp+var_24], ecx
.text:00002392                 mov     edx, [ebp+arg_0]
.text:00002395                 mov     eax, [ebp+var_24]
.text:00002398                 mov     [edx+4], eax
.text:0000239B                 mov     ecx, [ebp+arg_0]
.text:0000239E                 mov     edx, [ebp+var_24]
.text:000023A1                 cmp     edx, [ecx+8]
.text:000023A4                 jnz     short loc_23AF
.text:000023A6                 mov     eax, [ebp+arg_0]
.text:000023A9                 push    eax
.text:000023AA                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:000023AF
.text:000023AF loc_23AF:                               ; CODE XREF: Bt4_MatchFinder_Skip(x,x)+3Fj
.text:000023AF                                         ; Bt4_MatchFinder_Skip(x,x)+174j
.text:000023AF                 mov     ecx, [ebp+arg_4]
.text:000023B2                 sub     ecx, 1
.text:000023B5                 mov     [ebp+arg_4], ecx
.text:000023B8                 jnz     loc_2257
.text:000023BE                 pop     esi
.text:000023BF                 add     esp, 24h
.text:000023C2                 cmp     ebp, esp
.text:000023C4                 call    __RTC_CheckEsp
.text:000023C9                 mov     esp, ebp
.text:000023CB                 pop     ebp
.text:000023CC                 retn    8
.text:000023CC _Bt4_MatchFinder_Skip@8 endp
.text:000023CC
.text:000023CC ; ---------------------------------------------------------------------------
.text:000023CF                 align 10h
.text:000023D0
.text:000023D0 ; =============== S U B R O U T I N E =======================================
.text:000023D0
.text:000023D0 ; Attributes: bp-based frame
.text:000023D0
.text:000023D0 ; __stdcall Hc4_MatchFinder_Skip(x, x)
.text:000023D0 _Hc4_MatchFinder_Skip@8 proc near       ; DATA XREF: MatchFinder_CreateVTable(x,x)+38o
.text:000023D0
.text:000023D0 var_24          = dword ptr -24h
.text:000023D0 var_20          = dword ptr -20h
.text:000023D0 var_1C          = dword ptr -1Ch
.text:000023D0 var_18          = dword ptr -18h
.text:000023D0 var_14          = dword ptr -14h
.text:000023D0 var_10          = dword ptr -10h
.text:000023D0 var_C           = dword ptr -0Ch
.text:000023D0 var_8           = dword ptr -8
.text:000023D0 var_4           = dword ptr -4
.text:000023D0 arg_0           = dword ptr  8
.text:000023D0 arg_4           = dword ptr  0Ch
.text:000023D0
.text:000023D0                 push    ebp
.text:000023D1                 mov     ebp, esp
.text:000023D3                 sub     esp, 24h
.text:000023D6                 push    esi
.text:000023D7                 mov     eax, 0CCCCCCCCh
.text:000023DC                 mov     [ebp+var_24], eax
.text:000023DF                 mov     [ebp+var_20], eax
.text:000023E2                 mov     [ebp+var_1C], eax
.text:000023E5                 mov     [ebp+var_18], eax
.text:000023E8                 mov     [ebp+var_14], eax
.text:000023EB                 mov     [ebp+var_10], eax
.text:000023EE                 mov     [ebp+var_C], eax
.text:000023F1                 mov     [ebp+var_8], eax
.text:000023F4                 mov     [ebp+var_4], eax
.text:000023F7
.text:000023F7 loc_23F7:                               ; CODE XREF: Hc4_MatchFinder_Skip(x,x)+164j
.text:000023F7                 mov     eax, [ebp+arg_0]
.text:000023FA                 mov     ecx, [eax+10h]
.text:000023FD                 mov     [ebp+var_10], ecx
.text:00002400                 cmp     [ebp+var_10], 4
.text:00002404                 jnb     short loc_2414
.text:00002406                 mov     edx, [ebp+arg_0]
.text:00002409                 push    edx
.text:0000240A                 call    _MatchFinder_MovePos@4 ; MatchFinder_MovePos(x)
.text:0000240F                 jmp     loc_252B
.text:00002414 ; ---------------------------------------------------------------------------
.text:00002414
.text:00002414 loc_2414:                               ; CODE XREF: Hc4_MatchFinder_Skip(x,x)+34j
.text:00002414                 mov     eax, [ebp+arg_0]
.text:00002417                 mov     ecx, [eax]
.text:00002419                 mov     [ebp+var_18], ecx
.text:0000241C                 mov     edx, [ebp+var_18]
.text:0000241F                 movzx   eax, byte ptr [edx]
.text:00002422                 mov     ecx, [ebp+var_18]
.text:00002425                 movzx   edx, byte ptr [ecx+1]
.text:00002429                 mov     ecx, [ebp+arg_0]
.text:0000242C                 xor     edx, [ecx+eax*4+60h]
.text:00002430                 mov     [ebp+var_20], edx
.text:00002433                 mov     edx, [ebp+var_20]
.text:00002436                 and     edx, 3FFh
.text:0000243C                 mov     [ebp+var_4], edx
.text:0000243F                 mov     eax, [ebp+var_18]
.text:00002442                 movzx   ecx, byte ptr [eax+2]
.text:00002446                 shl     ecx, 8
.text:00002449                 xor     ecx, [ebp+var_20]
.text:0000244C                 mov     [ebp+var_20], ecx
.text:0000244F                 mov     edx, [ebp+var_20]
.text:00002452                 and     edx, 0FFFFh
.text:00002458                 mov     [ebp+var_8], edx
.text:0000245B                 mov     eax, [ebp+var_18]
.text:0000245E                 movzx   ecx, byte ptr [eax+3]
.text:00002462                 mov     edx, [ebp+arg_0]
.text:00002465                 mov     eax, [edx+ecx*4+60h]
.text:00002469                 shl     eax, 5
.text:0000246C                 xor     eax, [ebp+var_20]
.text:0000246F                 mov     ecx, [ebp+arg_0]
.text:00002472                 and     eax, [ecx+2Ch]
.text:00002475                 mov     [ebp+var_14], eax
.text:00002478                 mov     edx, [ebp+arg_0]
.text:0000247B                 mov     eax, [edx+24h]
.text:0000247E                 mov     [ebp+var_C], eax
.text:00002481                 mov     ecx, [ebp+var_14]
.text:00002484                 mov     edx, [ebp+var_C]
.text:00002487                 mov     eax, [edx+ecx*4+41000h]
.text:0000248E                 mov     [ebp+var_1C], eax
.text:00002491                 mov     ecx, [ebp+var_14]
.text:00002494                 mov     edx, [ebp+var_C]
.text:00002497                 mov     eax, [ebp+arg_0]
.text:0000249A                 mov     eax, [eax+4]
.text:0000249D                 mov     [edx+ecx*4+41000h], eax
.text:000024A4                 mov     ecx, [ebp+var_8]
.text:000024A7                 mov     edx, [ebp+var_C]
.text:000024AA                 mov     eax, [ebp+var_14]
.text:000024AD                 mov     esi, [ebp+var_C]
.text:000024B0                 mov     eax, [esi+eax*4+41000h]
.text:000024B7                 mov     [edx+ecx*4+1000h], eax
.text:000024BE                 mov     ecx, [ebp+var_4]
.text:000024C1                 mov     edx, [ebp+var_C]
.text:000024C4                 mov     eax, [ebp+var_8]
.text:000024C7                 mov     esi, [ebp+var_C]
.text:000024CA                 mov     eax, [esi+eax*4+1000h]
.text:000024D1                 mov     [edx+ecx*4], eax
.text:000024D4                 mov     ecx, [ebp+arg_0]
.text:000024D7                 mov     edx, [ecx+14h]
.text:000024DA                 mov     eax, [ebp+arg_0]
.text:000024DD                 mov     ecx, [eax+28h]
.text:000024E0                 mov     eax, [ebp+var_1C]
.text:000024E3                 mov     [ecx+edx*4], eax
.text:000024E6                 mov     ecx, [ebp+arg_0]
.text:000024E9                 mov     edx, [ecx+14h]
.text:000024EC                 add     edx, 1
.text:000024EF                 mov     eax, [ebp+arg_0]
.text:000024F2                 mov     [eax+14h], edx
.text:000024F5                 mov     ecx, [ebp+arg_0]
.text:000024F8                 mov     edx, [ecx]
.text:000024FA                 add     edx, 1
.text:000024FD                 mov     eax, [ebp+arg_0]
.text:00002500                 mov     [eax], edx
.text:00002502                 mov     ecx, [ebp+arg_0]
.text:00002505                 mov     edx, [ecx+4]
.text:00002508                 add     edx, 1
.text:0000250B                 mov     [ebp+var_24], edx
.text:0000250E                 mov     eax, [ebp+arg_0]
.text:00002511                 mov     ecx, [ebp+var_24]
.text:00002514                 mov     [eax+4], ecx
.text:00002517                 mov     edx, [ebp+arg_0]
.text:0000251A                 mov     eax, [ebp+var_24]
.text:0000251D                 cmp     eax, [edx+8]
.text:00002520                 jnz     short loc_252B
.text:00002522                 mov     ecx, [ebp+arg_0]
.text:00002525                 push    ecx
.text:00002526                 call    _MatchFinder_CheckLimits@4 ; MatchFinder_CheckLimits(x)
.text:0000252B
.text:0000252B loc_252B:                               ; CODE XREF: Hc4_MatchFinder_Skip(x,x)+3Fj
.text:0000252B                                         ; Hc4_MatchFinder_Skip(x,x)+150j
.text:0000252B                 mov     edx, [ebp+arg_4]
.text:0000252E                 sub     edx, 1
.text:00002531                 mov     [ebp+arg_4], edx
.text:00002534                 jnz     loc_23F7
.text:0000253A                 pop     esi
.text:0000253B                 add     esp, 24h
.text:0000253E                 cmp     ebp, esp
.text:00002540                 call    __RTC_CheckEsp
.text:00002545                 mov     esp, ebp
.text:00002547                 pop     ebp
.text:00002548                 retn    8
.text:00002548 _Hc4_MatchFinder_Skip@8 endp
.text:00002548
.text:00002548 ; ---------------------------------------------------------------------------
.text:0000254B                 align 4
.text:0000254B _text           ends
.text:0000254B
.rtc$TMZ:0000254C ; ===========================================================================
.rtc$TMZ:0000254C
.rtc$TMZ:0000254C ; Segment type: Pure data
.rtc$TMZ:0000254C ; Segment permissions: Read
.rtc$TMZ:0000254C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000254C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000254C                 ;org 254Ch
.rtc$TMZ:0000254C ; COMDAT (pick any)
.rtc$TMZ:0000254C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000254C _rtc$TMZ        ends
.rtc$TMZ:0000254C
.rtc$IMZ:00002550 ; ===========================================================================
.rtc$IMZ:00002550
.rtc$IMZ:00002550 ; Segment type: Pure data
.rtc$IMZ:00002550 ; Segment permissions: Read
.rtc$IMZ:00002550 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002550                 assume cs:_rtc$IMZ
.rtc$IMZ:00002550                 ;org 2550h
.rtc$IMZ:00002550 ; COMDAT (pick any)
.rtc$IMZ:00002550 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002550 _rtc$IMZ        ends
.rtc$IMZ:00002550
UNDEF:00002560 ; ===========================================================================
UNDEF:00002560
UNDEF:00002560 ; Segment type: Externs
UNDEF:00002560 ; UNDEF
UNDEF:00002560                 extrn __RTC_Shutdown:near
UNDEF:00002560                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002564                 extrn __RTC_InitBase:near
UNDEF:00002564                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002568 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00002568                 extrn __imp__memmove:near
UNDEF:00002568                                         ; CODE XREF: MatchFinder_MoveBlock(x)+2Cp
UNDEF:00002568                                         ; DATA XREF: MatchFinder_MoveBlock(x)+2Cr
UNDEF:0000256C                 extrn __RTC_CheckEsp:near
UNDEF:0000256C                                         ; CODE XREF: MatchFinder_MoveBlock(x)+37p
UNDEF:0000256C                                         ; MatchFinder_MoveBlock(x)+50p ...
UNDEF:00002570 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002570                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002570                                         ; CODE XREF: MatchFinder_ReadBlock(x)+132p
UNDEF:00002570
UNDEF:00002570
UNDEF:00002570                 end