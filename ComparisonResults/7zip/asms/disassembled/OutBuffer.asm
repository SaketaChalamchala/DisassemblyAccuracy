.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 2FDE0ADD0CC2415D39C4EE22C3597ED5
.text:00000000 ; Input CRC32 : 67F54672
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\OutBuffer.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __thiscall COutBuffer::Create(COutBuffer *this, unsigned int)
.text:00000000                 public ?Create@COutBuffer@@QAE_NI@Z
.text:00000000 ?Create@COutBuffer@@QAE_NI@Z proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     [ebp+var_8], 1
.text:0000001E                 cmp     [ebp+arg_0], 1
.text:00000022                 jnb     short loc_2B
.text:00000024                 mov     [ebp+arg_0], 1
.text:0000002B
.text:0000002B loc_2B:                                 ; CODE XREF: COutBuffer::Create(uint)+22j
.text:0000002B                 mov     eax, [ebp+var_4]
.text:0000002E                 cmp     dword ptr [eax], 0
.text:00000031                 jz      short loc_42
.text:00000033                 mov     ecx, [ebp+var_4]
.text:00000036                 mov     edx, [ecx+10h]
.text:00000039                 cmp     edx, [ebp+arg_0]
.text:0000003C                 jnz     short loc_42
.text:0000003E                 mov     al, 1
.text:00000040                 jmp     short loc_6C
.text:00000042 ; ---------------------------------------------------------------------------
.text:00000042
.text:00000042 loc_42:                                 ; CODE XREF: COutBuffer::Create(uint)+31j
.text:00000042                                         ; COutBuffer::Create(uint)+3Cj
.text:00000042                 mov     ecx, [ebp+var_4] ; this
.text:00000045                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:0000004A                 mov     eax, [ebp+var_4]
.text:0000004D                 mov     ecx, [ebp+arg_0]
.text:00000050                 mov     [eax+10h], ecx
.text:00000053                 mov     edx, [ebp+arg_0]
.text:00000056                 push    edx
.text:00000057                 call    _MidAlloc@4     ; MidAlloc(x)
.text:0000005C                 mov     ecx, [ebp+var_4]
.text:0000005F                 mov     [ecx], eax
.text:00000061                 mov     edx, [ebp+var_4]
.text:00000064                 xor     eax, eax
.text:00000066                 cmp     dword ptr [edx], 0
.text:00000069                 setnz   al
.text:0000006C
.text:0000006C loc_6C:                                 ; CODE XREF: COutBuffer::Create(uint)+40j
.text:0000006C                 add     esp, 8
.text:0000006F                 cmp     ebp, esp
.text:00000071                 call    __RTC_CheckEsp
.text:00000076                 mov     esp, ebp
.text:00000078                 pop     ebp
.text:00000079                 retn    4
.text:00000079 ?Create@COutBuffer@@QAE_NI@Z endp
.text:00000079
.text:00000079 ; ---------------------------------------------------------------------------
.text:0000007C                 align 10h
.text:00000080
.text:00000080 ; =============== S U B R O U T I N E =======================================
.text:00000080
.text:00000080 ; Attributes: bp-based frame
.text:00000080
.text:00000080 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
.text:00000080                 public ?Free@COutBuffer@@QAEXXZ
.text:00000080 ?Free@COutBuffer@@QAEXXZ proc near      ; CODE XREF: COutBuffer::Create(uint)+45p
.text:00000080
.text:00000080 var_4           = dword ptr -4
.text:00000080
.text:00000080                 push    ebp
.text:00000081                 mov     ebp, esp
.text:00000083                 push    ecx
.text:00000084                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000008B                 mov     [ebp+var_4], ecx
.text:0000008E                 mov     eax, [ebp+var_4]
.text:00000091                 mov     ecx, [eax]
.text:00000093                 push    ecx
.text:00000094                 call    _MidFree@4      ; MidFree(x)
.text:00000099                 mov     edx, [ebp+var_4]
.text:0000009C                 mov     dword ptr [edx], 0
.text:000000A2                 add     esp, 4
.text:000000A5                 cmp     ebp, esp
.text:000000A7                 call    __RTC_CheckEsp
.text:000000AC                 mov     esp, ebp
.text:000000AE                 pop     ebp
.text:000000AF                 retn
.text:000000AF ?Free@COutBuffer@@QAEXXZ endp
.text:000000AF
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
.text:000000B0                 public ?Init@COutBuffer@@QAEXXZ
.text:000000B0 ?Init@COutBuffer@@QAEXXZ proc near
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_4], ecx
.text:000000BE                 mov     eax, [ebp+var_4]
.text:000000C1                 mov     dword ptr [eax+0Ch], 0
.text:000000C8                 mov     ecx, [ebp+var_4]
.text:000000CB                 mov     edx, [ebp+var_4]
.text:000000CE                 mov     eax, [edx+10h]
.text:000000D1                 mov     [ecx+8], eax
.text:000000D4                 mov     ecx, [ebp+var_4]
.text:000000D7                 mov     dword ptr [ecx+4], 0
.text:000000DE                 mov     edx, [ebp+var_4]
.text:000000E1                 mov     dword ptr [edx+18h], 0
.text:000000E8                 mov     dword ptr [edx+1Ch], 0
.text:000000EF                 mov     eax, [ebp+var_4]
.text:000000F2                 mov     byte ptr [eax+24h], 0
.text:000000F6                 mov     esp, ebp
.text:000000F8                 pop     ebp
.text:000000F9                 retn
.text:000000F9 ?Init@COutBuffer@@QAEXXZ endp
.text:000000F9
.text:000000F9 ; ---------------------------------------------------------------------------
.text:000000FA                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
.text:00000100                 public ?GetProcessedSize@COutBuffer@@QBE_KXZ
.text:00000100 ?GetProcessedSize@COutBuffer@@QBE_KXZ proc near
.text:00000100
.text:00000100 var_C           = dword ptr -0Ch
.text:00000100 var_8           = dword ptr -8
.text:00000100 var_4           = dword ptr -4
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 sub     esp, 0Ch
.text:00000106                 push    esi
.text:00000107                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000010E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000115                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000011C                 mov     [ebp+var_4], ecx
.text:0000011F                 mov     eax, [ebp+var_4]
.text:00000122                 mov     ecx, [eax+4]
.text:00000125                 xor     edx, edx
.text:00000127                 mov     eax, [ebp+var_4]
.text:0000012A                 add     ecx, [eax+18h]
.text:0000012D                 adc     edx, [eax+1Ch]
.text:00000130                 mov     eax, [ebp+var_4]
.text:00000133                 mov     eax, [eax+0Ch]
.text:00000136                 xor     esi, esi
.text:00000138                 sub     ecx, eax
.text:0000013A                 sbb     edx, esi
.text:0000013C                 mov     [ebp+var_C], ecx
.text:0000013F                 mov     [ebp+var_8], edx
.text:00000142                 mov     ecx, [ebp+var_4]
.text:00000145                 mov     edx, [ebp+var_4]
.text:00000148                 mov     eax, [ecx+0Ch]
.text:0000014B                 cmp     eax, [edx+4]
.text:0000014E                 jbe     short loc_164
.text:00000150                 mov     ecx, [ebp+var_4]
.text:00000153                 mov     edx, [ecx+10h]
.text:00000156                 xor     eax, eax
.text:00000158                 add     edx, [ebp+var_C]
.text:0000015B                 adc     eax, [ebp+var_8]
.text:0000015E                 mov     [ebp+var_C], edx
.text:00000161                 mov     [ebp+var_8], eax
.text:00000164
.text:00000164 loc_164:                                ; CODE XREF: COutBuffer::GetProcessedSize(void)+4Ej
.text:00000164                 mov     eax, [ebp+var_C]
.text:00000167                 mov     edx, [ebp+var_8]
.text:0000016A                 pop     esi
.text:0000016B                 mov     esp, ebp
.text:0000016D                 pop     ebp
.text:0000016E                 retn
.text:0000016E ?GetProcessedSize@COutBuffer@@QBE_KXZ endp
.text:0000016E
.text:0000016E ; ---------------------------------------------------------------------------
.text:0000016F                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; __int32 __thiscall COutBuffer::FlushPart(COutBuffer *__hidden this)
.text:00000170                 public ?FlushPart@COutBuffer@@IAEJXZ
.text:00000170 ?FlushPart@COutBuffer@@IAEJXZ proc near ; CODE XREF: COutBuffer::Flush(void)+28p
.text:00000170
.text:00000170 var_20          = dword ptr -20h
.text:00000170 var_1C          = dword ptr -1Ch
.text:00000170 var_18          = dword ptr -18h
.text:00000170 var_14          = dword ptr -14h
.text:00000170 var_10          = dword ptr -10h
.text:00000170 var_C           = dword ptr -0Ch
.text:00000170 Size            = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 20h
.text:00000176                 push    esi
.text:00000177                 mov     eax, 0CCCCCCCCh
.text:0000017C                 mov     [ebp+var_20], eax
.text:0000017F                 mov     [ebp+var_1C], eax
.text:00000182                 mov     [ebp+var_18], eax
.text:00000185                 mov     [ebp+var_14], eax
.text:00000188                 mov     [ebp+var_10], eax
.text:0000018B                 mov     [ebp+var_C], eax
.text:0000018E                 mov     [ebp+Size], eax
.text:00000191                 mov     [ebp+var_4], eax
.text:00000194                 mov     [ebp+var_4], ecx
.text:00000197                 mov     eax, [ebp+var_4]
.text:0000019A                 mov     ecx, [ebp+var_4]
.text:0000019D                 mov     edx, [eax+0Ch]
.text:000001A0                 cmp     edx, [ecx+4]
.text:000001A3                 jb      short loc_1B6
.text:000001A5                 mov     eax, [ebp+var_4]
.text:000001A8                 mov     ecx, [ebp+var_4]
.text:000001AB                 mov     edx, [eax+10h]
.text:000001AE                 sub     edx, [ecx+0Ch]
.text:000001B1                 mov     [ebp+var_1C], edx
.text:000001B4                 jmp     short loc_1C5
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B6
.text:000001B6 loc_1B6:                                ; CODE XREF: COutBuffer::FlushPart(void)+33j
.text:000001B6                 mov     eax, [ebp+var_4]
.text:000001B9                 mov     ecx, [ebp+var_4]
.text:000001BC                 mov     edx, [eax+4]
.text:000001BF                 sub     edx, [ecx+0Ch]
.text:000001C2                 mov     [ebp+var_1C], edx
.text:000001C5
.text:000001C5 loc_1C5:                                ; CODE XREF: COutBuffer::FlushPart(void)+44j
.text:000001C5                 mov     eax, [ebp+var_1C]
.text:000001C8                 mov     [ebp+Size], eax
.text:000001CB                 mov     [ebp+var_C], 0
.text:000001D2                 mov     ecx, [ebp+var_4]
.text:000001D5                 cmp     dword ptr [ecx+20h], 0
.text:000001D9                 jz      short loc_209
.text:000001DB                 mov     edx, [ebp+Size]
.text:000001DE                 push    edx             ; Size
.text:000001DF                 mov     eax, [ebp+var_4]
.text:000001E2                 mov     ecx, [eax]
.text:000001E4                 mov     edx, [ebp+var_4]
.text:000001E7                 add     ecx, [edx+0Ch]
.text:000001EA                 push    ecx             ; Src
.text:000001EB                 mov     eax, [ebp+var_4]
.text:000001EE                 mov     ecx, [eax+20h]
.text:000001F1                 push    ecx             ; Dst
.text:000001F2                 call    _memcpy
.text:000001F7                 add     esp, 0Ch
.text:000001FA                 mov     edx, [ebp+var_4]
.text:000001FD                 mov     eax, [edx+20h]
.text:00000200                 add     eax, [ebp+Size]
.text:00000203                 mov     ecx, [ebp+var_4]
.text:00000206                 mov     [ecx+20h], eax
.text:00000209
.text:00000209 loc_209:                                ; CODE XREF: COutBuffer::FlushPart(void)+69j
.text:00000209                 mov     edx, [ebp+var_4]
.text:0000020C                 cmp     dword ptr [edx+14h], 0
.text:00000210                 jz      short loc_253
.text:00000212                 mov     [ebp+var_14], 0
.text:00000219                 mov     esi, esp
.text:0000021B                 lea     eax, [ebp+var_14]
.text:0000021E                 push    eax
.text:0000021F                 mov     ecx, [ebp+Size]
.text:00000222                 push    ecx
.text:00000223                 mov     edx, [ebp+var_4]
.text:00000226                 mov     eax, [edx]
.text:00000228                 mov     ecx, [ebp+var_4]
.text:0000022B                 add     eax, [ecx+0Ch]
.text:0000022E                 push    eax
.text:0000022F                 mov     edx, [ebp+var_4]
.text:00000232                 mov     eax, [edx+14h]
.text:00000235                 mov     ecx, [ebp+var_4]
.text:00000238                 mov     edx, [ecx+14h]
.text:0000023B                 mov     eax, [eax]
.text:0000023D                 push    edx
.text:0000023E                 mov     ecx, [eax+0Ch]
.text:00000241                 call    ecx
.text:00000243                 cmp     esi, esp
.text:00000245                 call    __RTC_CheckEsp
.text:0000024A                 mov     [ebp+var_C], eax
.text:0000024D                 mov     edx, [ebp+var_14]
.text:00000250                 mov     [ebp+Size], edx
.text:00000253
.text:00000253 loc_253:                                ; CODE XREF: COutBuffer::FlushPart(void)+A0j
.text:00000253                 mov     eax, [ebp+var_4]
.text:00000256                 mov     ecx, [eax+0Ch]
.text:00000259                 add     ecx, [ebp+Size]
.text:0000025C                 mov     edx, [ebp+var_4]
.text:0000025F                 mov     [edx+0Ch], ecx
.text:00000262                 mov     eax, [ebp+var_4]
.text:00000265                 mov     ecx, [ebp+var_4]
.text:00000268                 mov     edx, [eax+0Ch]
.text:0000026B                 cmp     edx, [ecx+10h]
.text:0000026E                 jnz     short loc_27A
.text:00000270                 mov     eax, [ebp+var_4]
.text:00000273                 mov     dword ptr [eax+0Ch], 0
.text:0000027A
.text:0000027A loc_27A:                                ; CODE XREF: COutBuffer::FlushPart(void)+FEj
.text:0000027A                 mov     ecx, [ebp+var_4]
.text:0000027D                 mov     edx, [ebp+var_4]
.text:00000280                 mov     eax, [ecx+4]
.text:00000283                 cmp     eax, [edx+10h]
.text:00000286                 jnz     short loc_299
.text:00000288                 mov     ecx, [ebp+var_4]
.text:0000028B                 mov     byte ptr [ecx+24h], 1
.text:0000028F                 mov     edx, [ebp+var_4]
.text:00000292                 mov     dword ptr [edx+4], 0
.text:00000299
.text:00000299 loc_299:                                ; CODE XREF: COutBuffer::FlushPart(void)+116j
.text:00000299                 mov     eax, [ebp+var_4]
.text:0000029C                 mov     ecx, [ebp+var_4]
.text:0000029F                 mov     edx, [eax+0Ch]
.text:000002A2                 cmp     edx, [ecx+4]
.text:000002A5                 jbe     short loc_2B2
.text:000002A7                 mov     eax, [ebp+var_4]
.text:000002AA                 mov     ecx, [eax+0Ch]
.text:000002AD                 mov     [ebp+var_20], ecx
.text:000002B0                 jmp     short loc_2BB
.text:000002B2 ; ---------------------------------------------------------------------------
.text:000002B2
.text:000002B2 loc_2B2:                                ; CODE XREF: COutBuffer::FlushPart(void)+135j
.text:000002B2                 mov     edx, [ebp+var_4]
.text:000002B5                 mov     eax, [edx+10h]
.text:000002B8                 mov     [ebp+var_20], eax
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: COutBuffer::FlushPart(void)+140j
.text:000002BB                 mov     ecx, [ebp+var_4]
.text:000002BE                 mov     edx, [ebp+var_20]
.text:000002C1                 mov     [ecx+8], edx
.text:000002C4                 mov     eax, [ebp+Size]
.text:000002C7                 xor     ecx, ecx
.text:000002C9                 mov     edx, [ebp+var_4]
.text:000002CC                 add     eax, [edx+18h]
.text:000002CF                 adc     ecx, [edx+1Ch]
.text:000002D2                 mov     edx, [ebp+var_4]
.text:000002D5                 mov     [edx+18h], eax
.text:000002D8                 mov     [edx+1Ch], ecx
.text:000002DB                 mov     eax, [ebp+var_C]
.text:000002DE                 push    edx
.text:000002DF                 mov     ecx, ebp
.text:000002E1                 push    eax
.text:000002E2                 lea     edx, $LN13
.text:000002E8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002ED                 pop     eax
.text:000002EE                 pop     edx
.text:000002EF                 pop     esi
.text:000002F0                 add     esp, 20h
.text:000002F3                 cmp     ebp, esp
.text:000002F5                 call    __RTC_CheckEsp
.text:000002FA                 mov     esp, ebp
.text:000002FC                 pop     ebp
.text:000002FD                 retn
.text:000002FD ?FlushPart@COutBuffer@@IAEJXZ endp
.text:000002FD
.text:000002FD ; ---------------------------------------------------------------------------
.text:000002FE                 align 10h
.text:00000300 $LN13           dd 1                    ; DATA XREF: COutBuffer::FlushPart(void)+172o
.text:00000304                 dd offset $LN12
.text:00000308 $LN12           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000304o
.text:00000310                 dd offset $LN11         ; "processedSize"
.text:00000314 $LN11           db 'processedSize',0    ; DATA XREF: .text:00000310o
.text:00000322                 align 10h
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
.text:00000330                 public ?Flush@COutBuffer@@QAEJXZ
.text:00000330 ?Flush@COutBuffer@@QAEJXZ proc near     ; CODE XREF: COutBuffer::FlushWithCheck(void)+1Dp
.text:00000330
.text:00000330 var_8           = dword ptr -8
.text:00000330 var_4           = dword ptr -4
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 sub     esp, 8
.text:00000336                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000033D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000344                 mov     [ebp+var_4], ecx
.text:00000347
.text:00000347 loc_347:                                ; CODE XREF: COutBuffer::Flush(void):loc_36Bj
.text:00000347                 mov     eax, [ebp+var_4]
.text:0000034A                 mov     ecx, [ebp+var_4]
.text:0000034D                 mov     edx, [eax+0Ch]
.text:00000350                 cmp     edx, [ecx+4]
.text:00000353                 jz      short loc_36D
.text:00000355                 mov     ecx, [ebp+var_4] ; this
.text:00000358                 call    ?FlushPart@COutBuffer@@IAEJXZ ; COutBuffer::FlushPart(void)
.text:0000035D                 mov     [ebp+var_8], eax
.text:00000360                 cmp     [ebp+var_8], 0
.text:00000364                 jz      short loc_36B
.text:00000366                 mov     eax, [ebp+var_8]
.text:00000369                 jmp     short loc_36F
.text:0000036B ; ---------------------------------------------------------------------------
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: COutBuffer::Flush(void)+34j
.text:0000036B                 jmp     short loc_347
.text:0000036D ; ---------------------------------------------------------------------------
.text:0000036D
.text:0000036D loc_36D:                                ; CODE XREF: COutBuffer::Flush(void)+23j
.text:0000036D                 xor     eax, eax
.text:0000036F
.text:0000036F loc_36F:                                ; CODE XREF: COutBuffer::Flush(void)+39j
.text:0000036F                 add     esp, 8
.text:00000372                 cmp     ebp, esp
.text:00000374                 call    __RTC_CheckEsp
.text:00000379                 mov     esp, ebp
.text:0000037B                 pop     ebp
.text:0000037C                 retn
.text:0000037C ?Flush@COutBuffer@@QAEJXZ endp
.text:0000037C
.text:0000037C ; ---------------------------------------------------------------------------
.text:0000037D                 align 10h
.text:00000380
.text:00000380 ; =============== S U B R O U T I N E =======================================
.text:00000380
.text:00000380 ; Attributes: bp-based frame
.text:00000380
.text:00000380 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
.text:00000380                 public ?FlushWithCheck@COutBuffer@@QAEXXZ
.text:00000380 ?FlushWithCheck@COutBuffer@@QAEXXZ proc near
.text:00000380
.text:00000380 var_10          = dword ptr -10h
.text:00000380 var_C           = dword ptr -0Ch
.text:00000380 var_8           = dword ptr -8
.text:00000380 var_4           = dword ptr -4
.text:00000380
.text:00000380                 push    ebp
.text:00000381                 mov     ebp, esp
.text:00000383                 sub     esp, 10h
.text:00000386                 mov     eax, 0CCCCCCCCh
.text:0000038B                 mov     [ebp+var_10], eax
.text:0000038E                 mov     [ebp+var_C], eax
.text:00000391                 mov     [ebp+var_8], eax
.text:00000394                 mov     [ebp+var_4], eax
.text:00000397                 mov     [ebp+var_4], ecx
.text:0000039A                 mov     ecx, [ebp+var_4] ; this
.text:0000039D                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:000003A2                 mov     [ebp+var_8], eax
.text:000003A5                 cmp     [ebp+var_8], 0
.text:000003A9                 jz      short loc_3CA
.text:000003AB                 mov     eax, [ebp+var_8]
.text:000003AE                 push    eax             ; __int32
.text:000003AF                 lea     ecx, [ebp+var_10] ; this
.text:000003B2                 call    ??0COutBufferException@@QAE@J@Z ; COutBufferException::COutBufferException(long)
.text:000003B7                 mov     ecx, [eax]
.text:000003B9                 mov     [ebp+var_C], ecx
.text:000003BC                 push    offset __TI2?AUCOutBufferException@@
.text:000003C1                 lea     edx, [ebp+var_C]
.text:000003C4                 push    edx
.text:000003C5                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000003CA ; ---------------------------------------------------------------------------
.text:000003CA
.text:000003CA loc_3CA:                                ; CODE XREF: COutBuffer::FlushWithCheck(void)+29j
.text:000003CA                 add     esp, 10h
.text:000003CD                 cmp     ebp, esp
.text:000003CF                 call    __RTC_CheckEsp
.text:000003D4                 mov     esp, ebp
.text:000003D6                 pop     ebp
.text:000003D7                 retn
.text:000003D7 ?FlushWithCheck@COutBuffer@@QAEXXZ endp
.text:000003D7
.text:000003D7 _text           ends
.text:000003D7
.rtc$TMZ:000003D8 ; ===========================================================================
.rtc$TMZ:000003D8
.rtc$TMZ:000003D8 ; Segment type: Pure data
.rtc$TMZ:000003D8 ; Segment permissions: Read
.rtc$TMZ:000003D8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003D8                 assume cs:_rtc$TMZ
.rtc$TMZ:000003D8                 ;org 3D8h
.rtc$TMZ:000003D8 ; COMDAT (pick any)
.rtc$TMZ:000003D8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003D8 _rtc$TMZ        ends
.rtc$TMZ:000003D8
.rtc$IMZ:000003DC ; ===========================================================================
.rtc$IMZ:000003DC
.rtc$IMZ:000003DC ; Segment type: Pure data
.rtc$IMZ:000003DC ; Segment permissions: Read
.rtc$IMZ:000003DC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003DC                 assume cs:_rtc$IMZ
.rtc$IMZ:000003DC                 ;org 3DCh
.rtc$IMZ:000003DC ; COMDAT (pick any)
.rtc$IMZ:000003DC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003DC _rtc$IMZ        ends
.rtc$IMZ:000003DC
.xdata$x:000003E0 ; ===========================================================================
.xdata$x:000003E0
.xdata$x:000003E0 ; Segment type: Pure data
.xdata$x:000003E0 ; Segment permissions: Read
.xdata$x:000003E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003E0                 assume cs:_xdata$x
.xdata$x:000003E0                 ;org 3E0h
.xdata$x:000003E0 ; COMDAT (pick any)
.xdata$x:000003E0                 public __TI2?AUCOutBufferException@@
.xdata$x:000003E0 __TI2?AUCOutBufferException@@ db    0   ; DATA XREF: COutBuffer::FlushWithCheck(void)+3Co
.xdata$x:000003E1                 db    0
.xdata$x:000003E2                 db    0
.xdata$x:000003E3                 db    0
.xdata$x:000003E4                 db    0
.xdata$x:000003E5                 db    0
.xdata$x:000003E6                 db    0
.xdata$x:000003E7                 db    0
.xdata$x:000003E8                 db    0
.xdata$x:000003E9                 db    0
.xdata$x:000003EA                 db    0
.xdata$x:000003EB                 db    0
.xdata$x:000003EC                 dd offset __CTA2?AUCOutBufferException@@
.xdata$x:000003EC _xdata$x        ends
.xdata$x:000003EC
.xdata$x:000003F0 ; ===========================================================================
.xdata$x:000003F0
.xdata$x:000003F0 ; Segment type: Pure data
.xdata$x:000003F0 ; Segment permissions: Read
.xdata$x:000003F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003F0                 assume cs:_xdata$x
.xdata$x:000003F0                 ;org 3F0h
.xdata$x:000003F0 ; COMDAT (pick any)
.xdata$x:000003F0                 public __CTA2?AUCOutBufferException@@
.xdata$x:000003F0 __CTA2?AUCOutBufferException@@ db    2  ; DATA XREF: .xdata$x:000003ECo
.xdata$x:000003F1                 db    0
.xdata$x:000003F2                 db    0
.xdata$x:000003F3                 db    0
.xdata$x:000003F4                 dd offset __CT??_R0?AUCOutBufferException@@@84
.xdata$x:000003F8                 dd offset __CT??_R0?AUCSystemException@@@84
.xdata$x:000003F8 _xdata$x        ends
.xdata$x:000003F8
.xdata$x:000003FC ; ===========================================================================
.xdata$x:000003FC
.xdata$x:000003FC ; Segment type: Pure data
.xdata$x:000003FC ; Segment permissions: Read
.xdata$x:000003FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003FC                 assume cs:_xdata$x
.xdata$x:000003FC                 ;org 3FCh
.xdata$x:000003FC ; COMDAT (pick any)
.xdata$x:000003FC                 public __CT??_R0?AUCOutBufferException@@@84
.xdata$x:000003FC __CT??_R0?AUCOutBufferException@@@84 db    0
.xdata$x:000003FC                                         ; DATA XREF: .xdata$x:000003F4o
.xdata$x:000003FD                 db    0
.xdata$x:000003FE                 db    0
.xdata$x:000003FF                 db    0
.xdata$x:00000400                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00000404                 align 8
.xdata$x:00000408                 db 0FFh
.xdata$x:00000409                 db 0FFh
.xdata$x:0000040A                 db 0FFh
.xdata$x:0000040B                 db 0FFh
.xdata$x:0000040C                 db    0
.xdata$x:0000040D                 db    0
.xdata$x:0000040E                 db    0
.xdata$x:0000040F                 db    0
.xdata$x:00000410                 db    4
.xdata$x:00000411                 db    0
.xdata$x:00000412                 db    0
.xdata$x:00000413                 db    0
.xdata$x:00000414                 db    0
.xdata$x:00000415                 db    0
.xdata$x:00000416                 db    0
.xdata$x:00000417                 db    0
.xdata$x:00000417 _xdata$x        ends
.xdata$x:00000417
.data:00000418 ; ===========================================================================
.data:00000418
.data:00000418 ; Segment type: Pure data
.data:00000418 ; Segment permissions: Read/Write
.data:00000418 _data           segment dword public 'DATA' use32
.data:00000418                 assume cs:_data
.data:00000418                 ;org 418h
.data:00000418 ; COMDAT (pick any)
.data:00000418                 public ??_R0?AUCOutBufferException@@@8
.data:00000418 ; struct COutBufferException `RTTI Type Descriptor'
.data:00000418 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00000418                                         ; DATA XREF: .xdata$x:00000400o
.data:00000418                                         ; const type_info::`vftable'
.data:0000041C                 align 10h
.data:00000420 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:0000043A                 align 4
.data:0000043A _data           ends
.data:0000043A
.xdata$x:0000043C ; ===========================================================================
.xdata$x:0000043C
.xdata$x:0000043C ; Segment type: Pure data
.xdata$x:0000043C ; Segment permissions: Read
.xdata$x:0000043C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000043C                 assume cs:_xdata$x
.xdata$x:0000043C                 ;org 43Ch
.xdata$x:0000043C ; COMDAT (pick any)
.xdata$x:0000043C                 public __CT??_R0?AUCSystemException@@@84
.xdata$x:0000043C __CT??_R0?AUCSystemException@@@84 db    0 ; DATA XREF: .xdata$x:000003F8o
.xdata$x:0000043D                 db    0
.xdata$x:0000043E                 db    0
.xdata$x:0000043F                 db    0
.xdata$x:00000440                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:00000444                 align 8
.xdata$x:00000448                 db 0FFh
.xdata$x:00000449                 db 0FFh
.xdata$x:0000044A                 db 0FFh
.xdata$x:0000044B                 db 0FFh
.xdata$x:0000044C                 db    0
.xdata$x:0000044D                 db    0
.xdata$x:0000044E                 db    0
.xdata$x:0000044F                 db    0
.xdata$x:00000450                 db    4
.xdata$x:00000451                 db    0
.xdata$x:00000452                 db    0
.xdata$x:00000453                 db    0
.xdata$x:00000454                 db    0
.xdata$x:00000455                 db    0
.xdata$x:00000456                 db    0
.xdata$x:00000457                 db    0
.xdata$x:00000457 _xdata$x        ends
.xdata$x:00000457
.data:00000458 ; ===========================================================================
.data:00000458
.data:00000458 ; Segment type: Pure data
.data:00000458 ; Segment permissions: Read/Write
.data:00000458 _data           segment dword public 'DATA' use32
.data:00000458                 assume cs:_data
.data:00000458                 ;org 458h
.data:00000458 ; COMDAT (pick any)
.data:00000458                 public ??_R0?AUCSystemException@@@8
.data:00000458 ; struct CSystemException `RTTI Type Descriptor'
.data:00000458 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00000458                                         ; DATA XREF: .xdata$x:00000440o
.data:00000458                                         ; const type_info::`vftable'
.data:0000045C                 align 10h
.data:00000460 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:00000477                 align 4
.data:00000477 _data           ends
.data:00000477
.text:00000478 ; ===========================================================================
.text:00000478
.text:00000478 ; Segment type: Pure code
.text:00000478 ; Segment permissions: Read/Execute
.text:00000478 _text           segment para public 'CODE' use32
.text:00000478                 assume cs:_text
.text:00000478                 ;org 478h
.text:00000478 ; COMDAT (pick any)
.text:00000478                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000478
.text:00000478 ; =============== S U B R O U T I N E =======================================
.text:00000478
.text:00000478 ; Attributes: bp-based frame
.text:00000478
.text:00000478 ; _DWORD __thiscall COutBufferException::COutBufferException(COutBufferException *this, __int32)
.text:00000478                 public ??0COutBufferException@@QAE@J@Z
.text:00000478 ??0COutBufferException@@QAE@J@Z proc near
.text:00000478                                         ; CODE XREF: COutBuffer::FlushWithCheck(void)+32p
.text:00000478
.text:00000478 var_4           = dword ptr -4
.text:00000478 arg_0           = dword ptr  8
.text:00000478
.text:00000478                 push    ebp
.text:00000479                 mov     ebp, esp
.text:0000047B                 push    ecx
.text:0000047C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000483                 mov     [ebp+var_4], ecx
.text:00000486                 mov     eax, [ebp+arg_0]
.text:00000489                 push    eax             ; __int32
.text:0000048A                 mov     ecx, [ebp+var_4] ; this
.text:0000048D                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:00000492                 mov     eax, [ebp+var_4]
.text:00000495                 add     esp, 4
.text:00000498                 cmp     ebp, esp
.text:0000049A                 call    __RTC_CheckEsp
.text:0000049F                 mov     esp, ebp
.text:000004A1                 pop     ebp
.text:000004A2                 retn    4
.text:000004A2 ??0COutBufferException@@QAE@J@Z endp
.text:000004A2
.text:000004A2 ; ---------------------------------------------------------------------------
.text:000004A5                 align 4
.text:000004A5 _text           ends
.text:000004A5
.text:000004A8 ; ===========================================================================
.text:000004A8
.text:000004A8 ; Segment type: Pure code
.text:000004A8 ; Segment permissions: Read/Execute
.text:000004A8 _text           segment para public 'CODE' use32
.text:000004A8                 assume cs:_text
.text:000004A8                 ;org 4A8h
.text:000004A8 ; COMDAT (pick any)
.text:000004A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000004A8
.text:000004A8 ; =============== S U B R O U T I N E =======================================
.text:000004A8
.text:000004A8 ; Attributes: bp-based frame
.text:000004A8
.text:000004A8 ; _DWORD __thiscall CSystemException::CSystemException(CSystemException *this, __int32)
.text:000004A8                 public ??0CSystemException@@QAE@J@Z
.text:000004A8 ??0CSystemException@@QAE@J@Z proc near  ; CODE XREF: COutBufferException::COutBufferException(long)+15p
.text:000004A8
.text:000004A8 var_4           = dword ptr -4
.text:000004A8 arg_0           = dword ptr  8
.text:000004A8
.text:000004A8                 push    ebp
.text:000004A9                 mov     ebp, esp
.text:000004AB                 push    ecx
.text:000004AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004B3                 mov     [ebp+var_4], ecx
.text:000004B6                 mov     eax, [ebp+var_4]
.text:000004B9                 mov     ecx, [ebp+arg_0]
.text:000004BC                 mov     [eax], ecx
.text:000004BE                 mov     eax, [ebp+var_4]
.text:000004C1                 mov     esp, ebp
.text:000004C3                 pop     ebp
.text:000004C4                 retn    4
.text:000004C4 ??0CSystemException@@QAE@J@Z endp
.text:000004C4
.text:000004C4 _text           ends
.text:000004C4
UNDEF:000004D0 ; ===========================================================================
UNDEF:000004D0
UNDEF:000004D0 ; Segment type: Externs
UNDEF:000004D0 ; UNDEF
UNDEF:000004D0 ; __stdcall MidAlloc(x)
UNDEF:000004D0                 extrn _MidAlloc@4:near  ; CODE XREF: COutBuffer::Create(uint)+57p
UNDEF:000004D4                 extrn __RTC_CheckEsp:near
UNDEF:000004D4                                         ; CODE XREF: COutBuffer::Create(uint)+71p
UNDEF:000004D4                                         ; COutBuffer::Free(void)+27p ...
UNDEF:000004D8                 extrn __RTC_Shutdown:near
UNDEF:000004D8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000004DC                 extrn __RTC_InitBase:near
UNDEF:000004DC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000004E0 ; __stdcall MidFree(x)
UNDEF:000004E0                 extrn _MidFree@4:near   ; CODE XREF: COutBuffer::Free(void)+14p
UNDEF:000004E4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000004E4                 extrn _memcpy:near      ; CODE XREF: COutBuffer::FlushPart(void)+82p
UNDEF:000004E8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000004E8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000004E8                                         ; CODE XREF: COutBuffer::FlushPart(void)+178p
UNDEF:000004EC ; __stdcall _CxxThrowException(x, x)
UNDEF:000004EC                 extrn __CxxThrowException@8:near
UNDEF:000004EC                                         ; CODE XREF: COutBuffer::FlushWithCheck(void)+45p
UNDEF:000004F0 ; const type_info::`vftable'
UNDEF:000004F0                 extrn ??_7type_info@@6B@:near
UNDEF:000004F0                                         ; DATA XREF: .data:COutBufferException `RTTI Type Descriptor'o
UNDEF:000004F0                                         ; .data:CSystemException `RTTI Type Descriptor'o
UNDEF:000004F0
UNDEF:000004F0
UNDEF:000004F0                 end