.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : A390106D0F16B655959F70E99A5BBAEF
.rdata:00000000 ; Input CRC32 : B73E1462
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\UpdateCallbackConsole.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG74557:                               ; DATA XREF: .data:_kEmptyFileAliaso
.rdata:00000000                 unicode 0, <[Content]>,0
.rdata:00000014 $SG74559        db 'Open archive: ',0   ; DATA XREF: .data:_kOpenArchiveMessageo
.rdata:00000023                 align 4
.rdata:00000024 $SG74561        db  43h ; C             ; DATA XREF: .data:_kCreatingArchiveMessageo
.rdata:00000025                 db  72h ; r
.rdata:00000026                 db  65h ; e
.rdata:00000027                 db  61h ; a
.rdata:00000028                 db  74h ; t
.rdata:00000029                 db  69h ; i
.rdata:0000002A                 db  6Eh ; n
.rdata:0000002B aGArchive       db 'g archive: ',0      ; DATA XREF: .rdata:$SG74843o
.rdata:0000002B                                         ; .rdata:$SG74899o ...
.rdata:00000037                 align 4
.rdata:00000038 $SG74563        db  55h ; U             ; DATA XREF: .data:_kUpdatingArchiveMessageo
.rdata:00000039                 db  70h ; p
.rdata:0000003A                 db  64h ; d
.rdata:0000003B                 db  61h ; a
.rdata:0000003C                 db  74h ; t
.rdata:0000003D unk_3D          db  69h ; i             ; DATA XREF: .rdata:$SG74905o
.rdata:0000003E                 db  6Eh ; n
.rdata:0000003F                 db  67h ; g
.rdata:00000040 unk_40          db  20h                 ; DATA XREF: .xdata$x:__catchsym$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$3o
.rdata:00000040                                         ; .xdata$x:__catchsym$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$3o
.rdata:00000041 aArchive        db 'archive: ',0        ; DATA XREF: .rdata:$SG74848o
.rdata:00000041                                         ; .rdata:$SG74903o ...
.rdata:0000004B                 align 4
.rdata:0000004C $SG74565        db  53h ; S             ; DATA XREF: .data:_kScanningMessageo
.rdata:0000004D                 db  63h ; c
.rdata:0000004E                 db  61h ; a
.rdata:0000004F                 db  6Eh ; n
.rdata:00000050                 db  6Eh ; n
.rdata:00000051                 db  69h ; i
.rdata:00000052 unk_52          db  6Eh ; n             ; DATA XREF: .rdata:$SG74907o
.rdata:00000053                 db  67h ; g
.rdata:00000054                 db  20h
.rdata:00000055 aTheDrive       db 'the drive:',0       ; DATA XREF: .rdata:$SG74845o
.rdata:00000055                                         ; .rdata:$SG74901o
.rdata:00000060 $SG74567        db 'ERROR: ',0          ; DATA XREF: .data:_kErroro
.rdata:00000068 $SG74569        db 'WARNING: ',0        ; DATA XREF: .data:_kWarningo
.rdata:00000072                 align 4
.rdata:00000074 ; char _SG74610[]
.rdata:00000074 $SG74610        db 'ERRORS:',0          ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+F7o
.rdata:0000007C ; char _SG74613[]
.rdata:0000007C $SG74613        db 'ERRORS:',0          ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+13Fo
.rdata:00000084 ; char _SG74622[]
.rdata:00000084 $SG74622        db 'WARNINGS:',0        ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+21Co
.rdata:0000008E                 align 10h
.rdata:00000090 ; char _SG74625[]
.rdata:00000090 $SG74625        db 'WARNINGS:',0        ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+264o
.rdata:0000009A                 align 4
.rdata:0000009C $SG74647        db 'Scan ',0            ; DATA XREF: CUpdateCallbackConsole::StartScanning(void):loc_5FBo
.rdata:000000A2                 align 4
.rdata:000000A4 $SG74699        dd offset loc_2038+2    ; DATA XREF: PrintPropPair(AString &,char const *,unsigned __int64)+3Do
.rdata:000000A8 $SG74715        db 'StdOut',0           ; DATA XREF: .data:_k_StdOut_ArcNameo
.rdata:000000AF                 align 10h
.rdata:000000B0 $SG74739        db 'Files read from disk',0
.rdata:000000B0                                         ; DATA XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+74o
.rdata:000000C5                 align 4
.rdata:000000C8 $SG74740        db 'Archive size: ',0   ; DATA XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+8Ao
.rdata:000000D7                 align 4
.rdata:000000D8 ; char _SG74748[]
.rdata:000000D8 $SG74748        db 'Write SFX: ',0      ; DATA XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+4Bo
.rdata:000000E4 $SG74750        db ' : ',0              ; DATA XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+70o
.rdata:000000E8 ; char _SG74760[]
.rdata:000000E8 $SG74760        db ': Removing files after including to archive',0
.rdata:000000E8                                         ; DATA XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+58o
.rdata:00000114 $SG74761        db 'Removing',0         ; DATA XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool):loc_10AEo
.rdata:0000011D                 align 10h
.rdata:00000120 $SG74767        db 'Removing',0         ; DATA XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+17Fo
.rdata:00000129                 align 4
.rdata:0000012C $SG74783        db 'Items to compress',0
.rdata:0000012C                                         ; DATA XREF: CUpdateCallbackConsole::SetNumItems(unsigned __int64)+6Do
.rdata:0000013E                 align 10h
.rdata:00000140 $SG74840        db 'Anti',0             ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+67o
.rdata:00000145                 align 4
.rdata:00000148 $SG74843        dd offset aGArchive     ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+76o
.rdata:00000148                                         ; "g archive: "
.rdata:0000014C $SG74845        dd offset aTheDrive     ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint):loc_184Fo
.rdata:0000014C                                         ; "the drive:"
.rdata:00000150 $SG74848        dd offset aArchive      ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+95o
.rdata:00000150                                         ; "archive: "
.rdata:00000154 $SG74850        db 'Reading',0          ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint):loc_186Eo
.rdata:0000015C ; char _SG74882[]
.rdata:0000015C $SG74882        db ' : ',0              ; DATA XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+B1o
.rdata:00000160 $SG74899        dd offset aGArchive     ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN9_2o
.rdata:00000160                                         ; "g archive: "
.rdata:00000164 $SG74901        dd offset aTheDrive     ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN8_5o
.rdata:00000164                                         ; "the drive:"
.rdata:00000168 $SG74903        dd offset aArchive      ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN7_7o
.rdata:00000168                                         ; "archive: "
.rdata:0000016C $SG74905        dd offset unk_3D        ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN6_5o
.rdata:00000170 $SG74907        dd offset unk_52        ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN5_5o
.rdata:00000174 $SG74909        dd offset aGArchive+3   ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN4_4o
.rdata:00000174                                         ; "rchive: "
.rdata:00000178 $SG74911        dd offset aArchive+3    ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN3_0o
.rdata:00000178                                         ; "hive: "
.rdata:0000017C $SG74913        db 'Header creation',0  ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool):$LN2o
.rdata:0000018C ; char _SG74945[]
.rdata:0000018C $SG74945        db 'D',0                ; DATA XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+47o
.rdata:0000018E                 align 10h
.rdata:0000018E _rdata          ends
.rdata:0000018E
.data:00000190 ; ===========================================================================
.data:00000190
.data:00000190 ; Segment type: Pure data
.data:00000190 ; Segment permissions: Read/Write
.data:00000190 _data           segment dword public 'DATA' use32
.data:00000190                 assume cs:_data
.data:00000190                 ;org 190h
.data:00000190 _kEmptyFileAlias dd offset $SG74557     ; DATA XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint):loc_1813r
.data:00000190                                         ; CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool):loc_1F3Cr
.data:00000190                                         ; "[Content]"
.data:00000194 ; char *kOpenArchiveMessage
.data:00000194 _kOpenArchiveMessage dd offset $SG74559 ; DATA XREF: CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)+1Ar
.data:00000194                                         ; "Open archive: "
.data:00000198 _kCreatingArchiveMessage dd offset $SG74561
.data:00000198                                         ; DATA XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool):loc_CC6r
.data:0000019C _kUpdatingArchiveMessage dd offset $SG74563
.data:0000019C                                         ; DATA XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+2Br
.data:000001A0 ; char *kScanningMessage
.data:000001A0 _kScanningMessage dd offset $SG74565    ; DATA XREF: CUpdateCallbackConsole::StartScanning(void)+1Fr
.data:000001A4 ; char *kError
.data:000001A4 _kError         dd offset $SG74567      ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+395r
.data:000001A4                                         ; CCallbackConsoleBase::CommonError(UString const &,ulong,bool):loc_747r
.data:000001A4                                         ; "ERROR: "
.data:000001A8 _kWarning       dd offset $SG74569      ; DATA XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+7Cr
.data:000001A8                                         ; "WARNING: "
.data:000001AC ; char *k_StdOut_ArcName
.data:000001AC _k_StdOut_ArcName dd offset $SG74715    ; DATA XREF: CUpdateCallbackConsole::StartOpenArchive(wchar_t const *):loc_C49r
.data:000001AC                                         ; CUpdateCallbackConsole::StartArchive(wchar_t const *,bool):loc_CFAr
.data:000001AC _data           ends                    ; "StdOut"
.data:000001AC
.text:000001B0 ; ===========================================================================
.text:000001B0
.text:000001B0 ; Segment type: Pure code
.text:000001B0 ; Segment permissions: Read/Execute
.text:000001B0 _text           segment para public 'CODE' use32
.text:000001B0                 assume cs:_text
.text:000001B0                 ;org 1B0h
.text:000001B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; __int32 __thiscall CUpdateCallbackConsole::OpenResult(CUpdateCallbackConsole *this, const struct CCodecs *, const struct CArchiveLink *, const wchar_t *, __int32)
.text:000001B0                 public ?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
.text:000001B0 ?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z proc near
.text:000001B0
.text:000001B0 var_24          = dword ptr -24h
.text:000001B0 var_20          = dword ptr -20h
.text:000001B0 var_1C          = dword ptr -1Ch
.text:000001B0 var_18          = dword ptr -18h
.text:000001B0 var_14          = dword ptr -14h
.text:000001B0 var_10          = dword ptr -10h
.text:000001B0 var_C           = dword ptr -0Ch
.text:000001B0 var_8           = dword ptr -8
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = dword ptr  8
.text:000001B0 arg_4           = dword ptr  0Ch
.text:000001B0 arg_8           = dword ptr  10h
.text:000001B0 arg_C           = dword ptr  14h
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 sub     esp, 24h
.text:000001B6                 mov     eax, 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_24], eax
.text:000001BE                 mov     [ebp+var_20], eax
.text:000001C1                 mov     [ebp+var_1C], eax
.text:000001C4                 mov     [ebp+var_18], eax
.text:000001C7                 mov     [ebp+var_14], eax
.text:000001CA                 mov     [ebp+var_10], eax
.text:000001CD                 mov     [ebp+var_C], eax
.text:000001D0                 mov     [ebp+var_8], eax
.text:000001D3                 mov     [ebp+var_4], eax
.text:000001D6                 mov     [ebp+var_4], ecx
.text:000001D9                 mov     ecx, [ebp+var_4]
.text:000001DC                 add     ecx, 8          ; this
.text:000001DF                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:000001E4                 mov     [ebp+var_8], 0
.text:000001EB                 jmp     short loc_1F6
.text:000001ED ; ---------------------------------------------------------------------------
.text:000001ED
.text:000001ED loc_1ED:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long):loc_4BFj
.text:000001ED                 mov     eax, [ebp+var_8]
.text:000001F0                 add     eax, 1
.text:000001F3                 mov     [ebp+var_8], eax
.text:000001F6
.text:000001F6 loc_1F6:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3Bj
.text:000001F6                 mov     ecx, [ebp+arg_4]
.text:000001F9                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:000001FE                 cmp     [ebp+var_8], eax
.text:00000201                 jnb     loc_4C4
.text:00000207                 mov     ecx, [ebp+var_8]
.text:0000020A                 push    ecx
.text:0000020B                 mov     ecx, [ebp+arg_4]
.text:0000020E                 call    ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:00000213                 mov     [ebp+var_C], eax
.text:00000216                 mov     edx, [ebp+var_C]
.text:00000219                 add     edx, 10h
.text:0000021C                 mov     [ebp+var_10], edx
.text:0000021F                 mov     ecx, [ebp+var_10] ; this
.text:00000222                 call    ?GetErrorFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetErrorFlags(void)
.text:00000227                 mov     [ebp+var_14], eax
.text:0000022A                 cmp     [ebp+var_14], 0
.text:0000022E                 jnz     short loc_246
.text:00000230                 mov     ecx, [ebp+var_10]
.text:00000233                 add     ecx, 18h        ; this
.text:00000236                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000023B                 movzx   eax, al
.text:0000023E                 test    eax, eax
.text:00000240                 jnz     loc_344
.text:00000246
.text:00000246 loc_246:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+7Ej
.text:00000246                 mov     ecx, [ebp+var_4]
.text:00000249                 cmp     dword ptr [ecx+0BCh], 0
.text:00000250                 jz      short loc_291
.text:00000252                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000257                 mov     edx, [ebp+var_4]
.text:0000025A                 mov     ecx, [edx+0BCh]
.text:00000260                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000265                 cmp     [ebp+var_8], 0
.text:00000269                 jz      short loc_291
.text:0000026B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000270                 mov     ecx, [ebp+var_C]
.text:00000273                 add     ecx, 70h ; 'p'
.text:00000276                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000027B                 push    eax
.text:0000027C                 mov     eax, [ebp+var_4]
.text:0000027F                 mov     ecx, [eax+0BCh]
.text:00000285                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000028A                 mov     ecx, eax
.text:0000028C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000291
.text:00000291 loc_291:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+A0j
.text:00000291                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+B9j
.text:00000291                 cmp     [ebp+var_14], 0
.text:00000295                 jz      short loc_2BB
.text:00000297                 mov     ecx, [ebp+var_4]
.text:0000029A                 cmp     dword ptr [ecx+0BCh], 0
.text:000002A1                 jz      short loc_2BB
.text:000002A3                 mov     edx, [ebp+var_14]
.text:000002A6                 push    edx             ; unsigned int
.text:000002A7                 push    offset $SG74610 ; "ERRORS:"
.text:000002AC                 mov     eax, [ebp+var_4]
.text:000002AF                 mov     ecx, [eax+0BCh]
.text:000002B5                 push    ecx             ; struct CStdOutStream *
.text:000002B6                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+E5j
.text:000002BB                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+F1j
.text:000002BB                 mov     ecx, [ebp+var_10]
.text:000002BE                 add     ecx, 18h        ; this
.text:000002C1                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000002C6                 movzx   edx, al
.text:000002C9                 test    edx, edx
.text:000002CB                 jnz     short loc_317
.text:000002CD                 mov     eax, [ebp+var_4]
.text:000002D0                 cmp     dword ptr [eax+0BCh], 0
.text:000002D7                 jz      short loc_317
.text:000002D9                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000002DE                 mov     ecx, [ebp+var_10]
.text:000002E1                 add     ecx, 18h
.text:000002E4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000002E9                 push    eax
.text:000002EA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000002EF                 push    offset $SG74613 ; "ERRORS:"
.text:000002F4                 mov     ecx, [ebp+var_4]
.text:000002F7                 mov     ecx, [ecx+0BCh]
.text:000002FD                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000302                 mov     ecx, eax
.text:00000304                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000309                 mov     ecx, eax
.text:0000030B                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000310                 mov     ecx, eax
.text:00000312                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000317
.text:00000317 loc_317:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+11Bj
.text:00000317                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+127j
.text:00000317                 mov     edx, [ebp+var_4]
.text:0000031A                 cmp     dword ptr [edx+0BCh], 0
.text:00000321                 jz      short loc_344
.text:00000323                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000328                 mov     eax, [ebp+var_4]
.text:0000032B                 mov     ecx, [eax+0BCh]
.text:00000331                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000336                 mov     ecx, [ebp+var_4]
.text:00000339                 mov     ecx, [ecx+0BCh] ; this
.text:0000033F                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000344
.text:00000344 loc_344:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+90j
.text:00000344                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+171j
.text:00000344                 mov     ecx, [ebp+var_10] ; this
.text:00000347                 call    ?GetWarningFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetWarningFlags(void)
.text:0000034C                 mov     [ebp+var_18], eax
.text:0000034F                 cmp     [ebp+var_18], 0
.text:00000353                 jnz     short loc_36B
.text:00000355                 mov     ecx, [ebp+var_10]
.text:00000358                 add     ecx, 24h ; '$'  ; this
.text:0000035B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000360                 movzx   edx, al
.text:00000363                 test    edx, edx
.text:00000365                 jnz     loc_477
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1A3j
.text:0000036B                 mov     eax, [ebp+var_4]
.text:0000036E                 cmp     dword ptr [eax+0B8h], 0
.text:00000375                 jz      short loc_3B6
.text:00000377                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000037C                 mov     ecx, [ebp+var_4]
.text:0000037F                 mov     ecx, [ecx+0B8h]
.text:00000385                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000038A                 cmp     [ebp+var_8], 0
.text:0000038E                 jz      short loc_3B6
.text:00000390                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000395                 mov     ecx, [ebp+var_C]
.text:00000398                 add     ecx, 70h ; 'p'
.text:0000039B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000003A0                 push    eax
.text:000003A1                 mov     edx, [ebp+var_4]
.text:000003A4                 mov     ecx, [edx+0B8h]
.text:000003AA                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000003AF                 mov     ecx, eax
.text:000003B1                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000003B6
.text:000003B6 loc_3B6:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1C5j
.text:000003B6                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1DEj
.text:000003B6                 cmp     [ebp+var_18], 0
.text:000003BA                 jz      short loc_3E0
.text:000003BC                 mov     eax, [ebp+var_4]
.text:000003BF                 cmp     dword ptr [eax+0B8h], 0
.text:000003C6                 jz      short loc_3E0
.text:000003C8                 mov     ecx, [ebp+var_18]
.text:000003CB                 push    ecx             ; unsigned int
.text:000003CC                 push    offset $SG74622 ; "WARNINGS:"
.text:000003D1                 mov     edx, [ebp+var_4]
.text:000003D4                 mov     eax, [edx+0B8h]
.text:000003DA                 push    eax             ; struct CStdOutStream *
.text:000003DB                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+20Aj
.text:000003E0                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+216j
.text:000003E0                 mov     ecx, [ebp+var_10]
.text:000003E3                 add     ecx, 24h ; '$'  ; this
.text:000003E6                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000003EB                 movzx   ecx, al
.text:000003EE                 test    ecx, ecx
.text:000003F0                 jnz     short loc_43C
.text:000003F2                 mov     edx, [ebp+var_4]
.text:000003F5                 cmp     dword ptr [edx+0B8h], 0
.text:000003FC                 jz      short loc_43C
.text:000003FE                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000403                 mov     ecx, [ebp+var_10]
.text:00000406                 add     ecx, 24h ; '$'
.text:00000409                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000040E                 push    eax
.text:0000040F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000414                 push    offset $SG74625 ; "WARNINGS:"
.text:00000419                 mov     eax, [ebp+var_4]
.text:0000041C                 mov     ecx, [eax+0B8h]
.text:00000422                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000427                 mov     ecx, eax
.text:00000429                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000042E                 mov     ecx, eax
.text:00000430                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000435                 mov     ecx, eax
.text:00000437                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000043C
.text:0000043C loc_43C:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+240j
.text:0000043C                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+24Cj
.text:0000043C                 mov     ecx, [ebp+var_4]
.text:0000043F                 cmp     dword ptr [ecx+0B8h], 0
.text:00000446                 jz      short loc_477
.text:00000448                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000044D                 mov     edx, [ebp+var_4]
.text:00000450                 mov     ecx, [edx+0B8h]
.text:00000456                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000045B                 mov     eax, [ebp+var_4]
.text:0000045E                 movzx   ecx, byte ptr [eax+0C1h]
.text:00000465                 test    ecx, ecx
.text:00000467                 jz      short loc_477
.text:00000469                 mov     edx, [ebp+var_4]
.text:0000046C                 mov     ecx, [edx+0B8h] ; this
.text:00000472                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000477
.text:00000477 loc_477:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1B5j
.text:00000477                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+296j ...
.text:00000477                 mov     eax, [ebp+var_10]
.text:0000047A                 cmp     dword ptr [eax+0Ch], 0
.text:0000047E                 jl      short loc_4BF
.text:00000480                 mov     ecx, [ebp+var_4]
.text:00000483                 cmp     dword ptr [ecx+0B8h], 0
.text:0000048A                 jz      short loc_4BF
.text:0000048C                 mov     edx, [ebp+var_C]
.text:0000048F                 push    edx             ; struct CArc *
.text:00000490                 mov     eax, [ebp+arg_0]
.text:00000493                 push    eax             ; struct CCodecs *
.text:00000494                 mov     ecx, [ebp+var_4]
.text:00000497                 mov     edx, [ecx+0B8h]
.text:0000049D                 push    edx             ; struct CStdOutStream *
.text:0000049E                 call    ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)
.text:000004A3                 mov     eax, [ebp+var_4]
.text:000004A6                 movzx   ecx, byte ptr [eax+0C1h]
.text:000004AD                 test    ecx, ecx
.text:000004AF                 jz      short loc_4BF
.text:000004B1                 mov     edx, [ebp+var_4]
.text:000004B4                 mov     ecx, [edx+0B8h] ; this
.text:000004BA                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000004BF
.text:000004BF loc_4BF:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2CEj
.text:000004BF                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2DAj ...
.text:000004BF                 jmp     loc_1ED
.text:000004C4 ; ---------------------------------------------------------------------------
.text:000004C4
.text:000004C4 loc_4C4:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+51j
.text:000004C4                 cmp     [ebp+arg_C], 0
.text:000004C8                 jnz     short loc_516
.text:000004CA                 mov     eax, [ebp+var_4]
.text:000004CD                 cmp     dword ptr [eax+0B8h], 0
.text:000004D4                 jz      short loc_511
.text:000004D6                 mov     ecx, [ebp+arg_4]
.text:000004D9                 push    ecx             ; struct CArchiveLink *
.text:000004DA                 mov     edx, [ebp+arg_0]
.text:000004DD                 push    edx             ; struct CCodecs *
.text:000004DE                 mov     eax, [ebp+var_4]
.text:000004E1                 mov     ecx, [eax+0B8h]
.text:000004E7                 push    ecx             ; struct CStdOutStream *
.text:000004E8                 call    ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:000004ED                 mov     [ebp+var_1C], eax
.text:000004F0                 cmp     [ebp+var_1C], 0
.text:000004F4                 jz      short loc_4FE
.text:000004F6                 mov     eax, [ebp+var_1C]
.text:000004F9                 jmp     loc_5A3
.text:000004FE ; ---------------------------------------------------------------------------
.text:000004FE
.text:000004FE loc_4FE:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+344j
.text:000004FE                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000503                 mov     edx, [ebp+var_4]
.text:00000506                 mov     ecx, [edx+0B8h]
.text:0000050C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000511
.text:00000511 loc_511:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+324j
.text:00000511                 jmp     loc_5A1
.text:00000516 ; ---------------------------------------------------------------------------
.text:00000516
.text:00000516 loc_516:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+318j
.text:00000516                 mov     eax, [ebp+var_4]
.text:00000519                 cmp     dword ptr [eax+0B8h], 0
.text:00000520                 jz      short loc_530
.text:00000522                 mov     ecx, [ebp+var_4]
.text:00000525                 mov     ecx, [ecx+0B8h] ; this
.text:0000052B                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000530
.text:00000530 loc_530:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+370j
.text:00000530                 mov     edx, [ebp+var_4]
.text:00000533                 cmp     dword ptr [edx+0BCh], 0
.text:0000053A                 jz      short loc_5A1
.text:0000053C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000541                 mov     eax, [ebp+arg_8]
.text:00000544                 push    eax
.text:00000545                 mov     ecx, ds:_kError
.text:0000054B                 push    ecx             ; Str
.text:0000054C                 mov     edx, [ebp+var_4]
.text:0000054F                 mov     ecx, [edx+0BCh]
.text:00000555                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000055A                 mov     ecx, eax
.text:0000055C                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000561                 mov     ecx, eax
.text:00000563                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000568                 mov     eax, [ebp+arg_4]
.text:0000056B                 push    eax             ; struct CArchiveLink *
.text:0000056C                 mov     ecx, [ebp+arg_0]
.text:0000056F                 push    ecx             ; struct CCodecs *
.text:00000570                 mov     edx, [ebp+var_4]
.text:00000573                 mov     eax, [edx+0BCh]
.text:00000579                 push    eax             ; struct CStdOutStream *
.text:0000057A                 call    ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:0000057F                 mov     [ebp+var_20], eax
.text:00000582                 mov     ecx, [ebp+var_20]
.text:00000585                 mov     [ebp+var_24], ecx
.text:00000588                 cmp     [ebp+var_24], 0
.text:0000058C                 jz      short loc_593
.text:0000058E                 mov     eax, [ebp+var_24]
.text:00000591                 jmp     short loc_5A3
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3DCj
.text:00000593                 mov     edx, [ebp+var_4]
.text:00000596                 mov     ecx, [edx+0BCh] ; this
.text:0000059C                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000005A1
.text:000005A1 loc_5A1:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long):loc_511j
.text:000005A1                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+38Aj
.text:000005A1                 xor     eax, eax
.text:000005A3
.text:000005A3 loc_5A3:                                ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+349j
.text:000005A3                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3E1j
.text:000005A3                 add     esp, 24h
.text:000005A6                 cmp     ebp, esp
.text:000005A8                 call    __RTC_CheckEsp
.text:000005AD                 mov     esp, ebp
.text:000005AF                 pop     ebp
.text:000005B0                 retn    10h
.text:000005B0 ?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z endp
.text:000005B0
.text:000005B0 ; ---------------------------------------------------------------------------
.text:000005B3                 align 10h
.text:000005C0
.text:000005C0 ; =============== S U B R O U T I N E =======================================
.text:000005C0
.text:000005C0 ; Attributes: bp-based frame
.text:000005C0
.text:000005C0 ; __int32 __thiscall CUpdateCallbackConsole::StartScanning(CUpdateCallbackConsole *__hidden this)
.text:000005C0                 public ?StartScanning@CUpdateCallbackConsole@@UAEJXZ
.text:000005C0 ?StartScanning@CUpdateCallbackConsole@@UAEJXZ proc near
.text:000005C0
.text:000005C0 var_4           = dword ptr -4
.text:000005C0
.text:000005C0                 push    ebp
.text:000005C1                 mov     ebp, esp
.text:000005C3                 push    ecx
.text:000005C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005CB                 mov     [ebp+var_4], ecx
.text:000005CE                 mov     eax, [ebp+var_4]
.text:000005D1                 cmp     dword ptr [eax+0B8h], 0
.text:000005D8                 jz      short loc_5FB
.text:000005DA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000005DF                 mov     ecx, ds:_kScanningMessage
.text:000005E5                 push    ecx             ; Str
.text:000005E6                 mov     edx, [ebp+var_4]
.text:000005E9                 mov     ecx, [edx+0B8h]
.text:000005EF                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000005F4                 mov     ecx, eax
.text:000005F6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000005FB
.text:000005FB loc_5FB:                                ; CODE XREF: CUpdateCallbackConsole::StartScanning(void)+18j
.text:000005FB                 push    offset $SG74647 ; "Scan "
.text:00000600                 mov     ecx, [ebp+var_4]
.text:00000603                 add     ecx, 20h ; ' '
.text:00000606                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:0000060B                 xor     eax, eax
.text:0000060D                 add     esp, 4
.text:00000610                 cmp     ebp, esp
.text:00000612                 call    __RTC_CheckEsp
.text:00000617                 mov     esp, ebp
.text:00000619                 pop     ebp
.text:0000061A                 retn
.text:0000061A ?StartScanning@CUpdateCallbackConsole@@UAEJXZ endp
.text:0000061A
.text:0000061A ; ---------------------------------------------------------------------------
.text:0000061B                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; __int32 __thiscall CUpdateCallbackConsole::ScanProgress(CUpdateCallbackConsole *this, const struct CDirItemsStat *, const struct UString *, bool)
.text:00000620                 public ?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
.text:00000620 ?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z proc near
.text:00000620
.text:00000620 var_4           = dword ptr -4
.text:00000620 arg_0           = dword ptr  8
.text:00000620 arg_4           = dword ptr  0Ch
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 push    ecx
.text:00000624                 push    esi
.text:00000625                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000062C                 mov     [ebp+var_4], ecx
.text:0000062F                 mov     ecx, [ebp+var_4]
.text:00000632                 add     ecx, 4          ; this
.text:00000635                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:0000063A                 movzx   eax, al
.text:0000063D                 test    eax, eax
.text:0000063F                 jz      short loc_68F
.text:00000641                 mov     ecx, [ebp+arg_0]
.text:00000644                 mov     edx, [ebp+arg_0]
.text:00000647                 mov     eax, [ecx]
.text:00000649                 add     eax, [edx+8]
.text:0000064C                 mov     ecx, [ecx+4]
.text:0000064F                 adc     ecx, [edx+0Ch]
.text:00000652                 mov     edx, [ebp+arg_0]
.text:00000655                 add     eax, [edx+10h]
.text:00000658                 adc     ecx, [edx+14h]
.text:0000065B                 mov     edx, [ebp+var_4]
.text:0000065E                 mov     [edx+14h], eax
.text:00000661                 mov     [edx+18h], ecx
.text:00000664                 mov     ecx, [ebp+arg_0] ; this
.text:00000667                 call    ?GetTotalBytes@CDirItemsStat@@QBE_KXZ ; CDirItemsStat::GetTotalBytes(void)
.text:0000066C                 mov     ecx, [ebp+var_4]
.text:0000066F                 mov     [ecx+4], eax
.text:00000672                 mov     [ecx+8], edx
.text:00000675                 mov     edx, [ebp+arg_4]
.text:00000678                 push    edx
.text:00000679                 mov     ecx, [ebp+var_4]
.text:0000067C                 add     ecx, 28h ; '('
.text:0000067F                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000684                 mov     ecx, [ebp+var_4]
.text:00000687                 add     ecx, 4          ; this
.text:0000068A                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000068F
.text:0000068F loc_68F:                                ; CODE XREF: CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+1Fj
.text:0000068F                 mov     ecx, [ebp+var_4]
.text:00000692                 sub     ecx, 4
.text:00000695                 mov     eax, [ebp+var_4]
.text:00000698                 mov     edx, [eax-4]
.text:0000069B                 mov     esi, esp
.text:0000069D                 mov     eax, [edx+10h]
.text:000006A0                 call    eax
.text:000006A2                 cmp     esi, esp
.text:000006A4                 call    __RTC_CheckEsp
.text:000006A9                 pop     esi
.text:000006AA                 add     esp, 4
.text:000006AD                 cmp     ebp, esp
.text:000006AF                 call    __RTC_CheckEsp
.text:000006B4                 mov     esp, ebp
.text:000006B6                 pop     ebp
.text:000006B7                 retn    0Ch
.text:000006B7 ?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z endp
.text:000006B7
.text:000006B7 ; ---------------------------------------------------------------------------
.text:000006BA                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0 ; void __thiscall CCallbackConsoleBase::CommonError(CCallbackConsoleBase *this, const struct UString *, unsigned __int32, bool)
.text:000006C0                 public ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z
.text:000006C0 ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z proc near
.text:000006C0                                         ; CODE XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+73p
.text:000006C0                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+73p ...
.text:000006C0
.text:000006C0 var_28          = dword ptr -28h
.text:000006C0 var_24          = dword ptr -24h
.text:000006C0 Str             = dword ptr -20h
.text:000006C0 var_1C          = dword ptr -1Ch
.text:000006C0 var_18          = dword ptr -18h
.text:000006C0 var_14          = dword ptr -14h
.text:000006C0 var_10          = dword ptr -10h
.text:000006C0 var_C           = dword ptr -0Ch
.text:000006C0 var_4           = dword ptr -4
.text:000006C0 arg_0           = dword ptr  8
.text:000006C0 arg_4           = dword ptr  0Ch
.text:000006C0 arg_8           = byte ptr  10h
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 push    0FFFFFFFFh
.text:000006C5                 push    offset __ehhandler$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z
.text:000006CA                 mov     eax, large fs:0
.text:000006D0                 push    eax
.text:000006D1                 sub     esp, 1Ch
.text:000006D4                 mov     eax, 0CCCCCCCCh
.text:000006D9                 mov     [ebp+var_28], eax
.text:000006DC                 mov     [ebp+var_24], eax
.text:000006DF                 mov     [ebp+Str], eax
.text:000006E2                 mov     [ebp+var_1C], eax
.text:000006E5                 mov     [ebp+var_18], eax
.text:000006E8                 mov     [ebp+var_14], eax
.text:000006EB                 mov     [ebp+var_10], eax
.text:000006EE                 mov     eax, dword ptr ds:___security_cookie
.text:000006F3                 xor     eax, ebp
.text:000006F5                 push    eax
.text:000006F6                 lea     eax, [ebp+var_C]
.text:000006F9                 mov     large fs:0, eax
.text:000006FF                 mov     [ebp+var_10], ecx
.text:00000702                 mov     ecx, [ebp+var_10] ; this
.text:00000705                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:0000070A                 mov     eax, [ebp+var_10]
.text:0000070D                 cmp     dword ptr [eax+0B4h], 0
.text:00000714                 jz      loc_7EC
.text:0000071A                 mov     ecx, [ebp+var_10]
.text:0000071D                 cmp     dword ptr [ecx+0B0h], 0
.text:00000724                 jz      short loc_734
.text:00000726                 mov     edx, [ebp+var_10]
.text:00000729                 mov     ecx, [edx+0B0h] ; this
.text:0000072F                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000734
.text:00000734 loc_734:                                ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+64j
.text:00000734                 movzx   eax, [ebp+arg_8]
.text:00000738                 test    eax, eax
.text:0000073A                 jz      short loc_747
.text:0000073C                 mov     ecx, ds:_kWarning
.text:00000742                 mov     [ebp+Str], ecx
.text:00000745                 jmp     short loc_750
.text:00000747 ; ---------------------------------------------------------------------------
.text:00000747
.text:00000747 loc_747:                                ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+7Aj
.text:00000747                 mov     edx, ds:_kError
.text:0000074D                 mov     [ebp+Str], edx
.text:00000750
.text:00000750 loc_750:                                ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+85j
.text:00000750                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000755                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000075A                 mov     ecx, [ebp+arg_0]
.text:0000075D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000762                 push    eax
.text:00000763                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000768                 mov     eax, [ebp+arg_4]
.text:0000076B                 push    eax
.text:0000076C                 lea     ecx, [ebp+var_1C]
.text:0000076F                 push    ecx
.text:00000770                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:00000775                 mov     [ebp+var_24], eax
.text:00000778                 mov     edx, [ebp+var_24]
.text:0000077B                 mov     [ebp+var_28], edx
.text:0000077E                 mov     [ebp+var_4], 0
.text:00000785                 mov     ecx, [ebp+var_28]
.text:00000788                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000078D                 push    eax
.text:0000078E                 mov     eax, [ebp+Str]
.text:00000791                 push    eax             ; Str
.text:00000792                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000797                 mov     ecx, [ebp+var_10]
.text:0000079A                 mov     ecx, [ecx+0B4h]
.text:000007A0                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000007A5                 mov     ecx, eax
.text:000007A7                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000007AC                 mov     ecx, eax
.text:000007AE                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000007B3                 mov     ecx, eax
.text:000007B5                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000007BA                 mov     ecx, eax
.text:000007BC                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000007C1                 mov     ecx, eax
.text:000007C3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000007C8                 mov     ecx, eax
.text:000007CA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000007CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007D6                 lea     ecx, [ebp+var_1C] ; this
.text:000007D9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000007DE                 mov     edx, [ebp+var_10]
.text:000007E1                 mov     ecx, [edx+0B4h] ; this
.text:000007E7                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000007EC
.text:000007EC loc_7EC:                                ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+54j
.text:000007EC                 mov     ecx, [ebp+var_C]
.text:000007EF                 mov     large fs:0, ecx
.text:000007F6                 pop     ecx
.text:000007F7                 add     esp, 28h
.text:000007FA                 cmp     ebp, esp
.text:000007FC                 call    __RTC_CheckEsp
.text:00000801                 mov     esp, ebp
.text:00000803                 pop     ebp
.text:00000804                 retn    0Ch
.text:00000804 ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z endp
.text:00000804
.text:00000804 ; ---------------------------------------------------------------------------
.text:00000807                 align 10h
.text:00000810
.text:00000810 ; =============== S U B R O U T I N E =======================================
.text:00000810
.text:00000810 ; Attributes: bp-based frame
.text:00000810
.text:00000810 ; __int32 __thiscall CCallbackConsoleBase::ScanError_Base(CCallbackConsoleBase *this, const struct UString *, unsigned __int32)
.text:00000810                 public ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:00000810 ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text:00000810                                         ; CODE XREF: CUpdateCallbackConsole::ScanError(UString const &,ulong)+1Cp
.text:00000810
.text:00000810 var_20          = dword ptr -20h
.text:00000810 var_1C          = dword ptr -1Ch
.text:00000810 var_18          = dword ptr -18h
.text:00000810 var_14          = dword ptr -14h
.text:00000810 var_10          = dword ptr -10h
.text:00000810 var_C           = dword ptr -0Ch
.text:00000810 var_4           = dword ptr -4
.text:00000810 arg_0           = dword ptr  8
.text:00000810 arg_4           = dword ptr  0Ch
.text:00000810
.text:00000810                 push    ebp
.text:00000811                 mov     ebp, esp
.text:00000813                 push    0FFFFFFFFh
.text:00000815                 push    offset __ehhandler$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:0000081A                 mov     eax, large fs:0
.text:00000820                 push    eax
.text:00000821                 sub     esp, 14h
.text:00000824                 mov     eax, 0CCCCCCCCh
.text:00000829                 mov     [ebp+var_20], eax
.text:0000082C                 mov     [ebp+var_1C], eax
.text:0000082F                 mov     [ebp+var_18], eax
.text:00000832                 mov     [ebp+var_14], eax
.text:00000835                 mov     [ebp+var_10], eax
.text:00000838                 mov     eax, dword ptr ds:___security_cookie
.text:0000083D                 xor     eax, ebp
.text:0000083F                 push    eax
.text:00000840                 lea     eax, [ebp+var_C]
.text:00000843                 mov     large fs:0, eax
.text:00000849                 mov     [ebp+var_10], ecx
.text:0000084C                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000851                 lea     ecx, [ebp+var_18] ; this
.text:00000854                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000859                 mov     [ebp+var_4], 0
.text:00000860                 mov     eax, [ebp+arg_4]
.text:00000863                 push    eax             ; unsigned __int32
.text:00000864                 mov     ecx, [ebp+arg_0]
.text:00000867                 push    ecx             ; struct UString *
.text:00000868                 mov     ecx, [ebp+var_10]
.text:0000086B                 add     ecx, 0F4h ; '(' ; this
.text:00000871                 call    ?AddError@CErrorPathCodes@@QAEXABVUString@@K@Z ; CErrorPathCodes::AddError(UString const &,ulong)
.text:00000876                 push    1               ; bool
.text:00000878                 mov     edx, [ebp+arg_4]
.text:0000087B                 push    edx             ; unsigned __int32
.text:0000087C                 mov     eax, [ebp+arg_0]
.text:0000087F                 push    eax             ; struct UString *
.text:00000880                 mov     ecx, [ebp+var_10] ; this
.text:00000883                 call    ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z ; CCallbackConsoleBase::CommonError(UString const &,ulong,bool)
.text:00000888                 mov     [ebp+var_20], 0
.text:0000088F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000896                 lea     ecx, [ebp+var_18] ; this
.text:00000899                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000089E                 mov     eax, [ebp+var_20]
.text:000008A1                 push    edx
.text:000008A2                 mov     ecx, ebp
.text:000008A4                 push    eax
.text:000008A5                 lea     edx, $LN7
.text:000008AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008B0                 pop     eax
.text:000008B1                 pop     edx
.text:000008B2                 mov     ecx, [ebp+var_C]
.text:000008B5                 mov     large fs:0, ecx
.text:000008BC                 pop     ecx
.text:000008BD                 add     esp, 20h
.text:000008C0                 cmp     ebp, esp
.text:000008C2                 call    __RTC_CheckEsp
.text:000008C7                 mov     esp, ebp
.text:000008C9                 pop     ebp
.text:000008CA                 retn    8
.text:000008CA ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text:000008CA
.text:000008CA ; ---------------------------------------------------------------------------
.text:000008CD                 align 10h
.text:000008D0 $LN7            dd 1                    ; DATA XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+95o
.text:000008D4                 dd offset $LN6
.text:000008D8 $LN6            dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000008D4o
.text:000008E0                 dd offset $LN4          ; "lock"
.text:000008E4 $LN4            db 'lock',0             ; DATA XREF: .text:000008E0o
.text:000008E9                 align 10h
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; __int32 __thiscall CCallbackConsoleBase::OpenFileError_Base(CCallbackConsoleBase *this, const struct UString *, unsigned __int32)
.text:000008F0                 public ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:000008F0 ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text:000008F0                                         ; CODE XREF: CUpdateCallbackConsole::OpenFileError(UString const &,ulong)+1Cp
.text:000008F0
.text:000008F0 var_20          = dword ptr -20h
.text:000008F0 var_1C          = dword ptr -1Ch
.text:000008F0 var_18          = dword ptr -18h
.text:000008F0 var_14          = dword ptr -14h
.text:000008F0 var_10          = dword ptr -10h
.text:000008F0 var_C           = dword ptr -0Ch
.text:000008F0 var_4           = dword ptr -4
.text:000008F0 arg_0           = dword ptr  8
.text:000008F0 arg_4           = dword ptr  0Ch
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 push    0FFFFFFFFh
.text:000008F5                 push    offset __ehhandler$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:000008FA                 mov     eax, large fs:0
.text:00000900                 push    eax
.text:00000901                 sub     esp, 14h
.text:00000904                 mov     eax, 0CCCCCCCCh
.text:00000909                 mov     [ebp+var_20], eax
.text:0000090C                 mov     [ebp+var_1C], eax
.text:0000090F                 mov     [ebp+var_18], eax
.text:00000912                 mov     [ebp+var_14], eax
.text:00000915                 mov     [ebp+var_10], eax
.text:00000918                 mov     eax, dword ptr ds:___security_cookie
.text:0000091D                 xor     eax, ebp
.text:0000091F                 push    eax
.text:00000920                 lea     eax, [ebp+var_C]
.text:00000923                 mov     large fs:0, eax
.text:00000929                 mov     [ebp+var_10], ecx
.text:0000092C                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000931                 lea     ecx, [ebp+var_18] ; this
.text:00000934                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000939                 mov     [ebp+var_4], 0
.text:00000940                 mov     eax, [ebp+arg_4]
.text:00000943                 push    eax             ; unsigned __int32
.text:00000944                 mov     ecx, [ebp+arg_0]
.text:00000947                 push    ecx             ; struct UString *
.text:00000948                 mov     ecx, [ebp+var_10]
.text:0000094B                 add     ecx, 0DCh ; '_' ; this
.text:00000951                 call    ?AddError@CErrorPathCodes@@QAEXABVUString@@K@Z ; CErrorPathCodes::AddError(UString const &,ulong)
.text:00000956                 push    1               ; bool
.text:00000958                 mov     edx, [ebp+arg_4]
.text:0000095B                 push    edx             ; unsigned __int32
.text:0000095C                 mov     eax, [ebp+arg_0]
.text:0000095F                 push    eax             ; struct UString *
.text:00000960                 mov     ecx, [ebp+var_10] ; this
.text:00000963                 call    ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z ; CCallbackConsoleBase::CommonError(UString const &,ulong,bool)
.text:00000968                 mov     [ebp+var_20], 1
.text:0000096F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000976                 lea     ecx, [ebp+var_18] ; this
.text:00000979                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000097E                 mov     eax, [ebp+var_20]
.text:00000981                 push    edx
.text:00000982                 mov     ecx, ebp
.text:00000984                 push    eax
.text:00000985                 lea     edx, $LN7_0
.text:0000098B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000990                 pop     eax
.text:00000991                 pop     edx
.text:00000992                 mov     ecx, [ebp+var_C]
.text:00000995                 mov     large fs:0, ecx
.text:0000099C                 pop     ecx
.text:0000099D                 add     esp, 20h
.text:000009A0                 cmp     ebp, esp
.text:000009A2                 call    __RTC_CheckEsp
.text:000009A7                 mov     esp, ebp
.text:000009A9                 pop     ebp
.text:000009AA                 retn    8
.text:000009AA ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text:000009AA
.text:000009AA ; ---------------------------------------------------------------------------
.text:000009AD                 align 10h
.text:000009B0 $LN7_0          dd 1                    ; DATA XREF: CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+95o
.text:000009B4                 dd offset $LN6_0
.text:000009B8 $LN6_0          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000009B4o
.text:000009C0                 dd offset $LN4_0        ; "lock"
.text:000009C4 $LN4_0          db 'lock',0             ; DATA XREF: .text:000009C0o
.text:000009C9                 align 10h
.text:000009D0
.text:000009D0 ; =============== S U B R O U T I N E =======================================
.text:000009D0
.text:000009D0 ; Attributes: bp-based frame
.text:000009D0
.text:000009D0 ; __int32 __thiscall CCallbackConsoleBase::ReadingFileError_Base(CCallbackConsoleBase *this, const struct UString *, unsigned __int32)
.text:000009D0                 public ?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:000009D0 ?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text:000009D0                                         ; CODE XREF: CUpdateCallbackConsole::ReadingFileError(UString const &,ulong)+1Cp
.text:000009D0
.text:000009D0 var_20          = dword ptr -20h
.text:000009D0 var_1C          = dword ptr -1Ch
.text:000009D0 var_18          = dword ptr -18h
.text:000009D0 var_14          = dword ptr -14h
.text:000009D0 var_10          = dword ptr -10h
.text:000009D0 var_C           = dword ptr -0Ch
.text:000009D0 var_4           = dword ptr -4
.text:000009D0 arg_0           = dword ptr  8
.text:000009D0 arg_4           = dword ptr  0Ch
.text:000009D0
.text:000009D0                 push    ebp
.text:000009D1                 mov     ebp, esp
.text:000009D3                 push    0FFFFFFFFh
.text:000009D5                 push    offset __ehhandler$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text:000009DA                 mov     eax, large fs:0
.text:000009E0                 push    eax
.text:000009E1                 sub     esp, 14h
.text:000009E4                 mov     eax, 0CCCCCCCCh
.text:000009E9                 mov     [ebp+var_20], eax
.text:000009EC                 mov     [ebp+var_1C], eax
.text:000009EF                 mov     [ebp+var_18], eax
.text:000009F2                 mov     [ebp+var_14], eax
.text:000009F5                 mov     [ebp+var_10], eax
.text:000009F8                 mov     eax, dword ptr ds:___security_cookie
.text:000009FD                 xor     eax, ebp
.text:000009FF                 push    eax
.text:00000A00                 lea     eax, [ebp+var_C]
.text:00000A03                 mov     large fs:0, eax
.text:00000A09                 mov     [ebp+var_10], ecx
.text:00000A0C                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000A11                 lea     ecx, [ebp+var_18] ; this
.text:00000A14                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000A19                 mov     [ebp+var_4], 0
.text:00000A20                 push    0               ; bool
.text:00000A22                 mov     eax, [ebp+arg_4]
.text:00000A25                 push    eax             ; unsigned __int32
.text:00000A26                 mov     ecx, [ebp+arg_0]
.text:00000A29                 push    ecx             ; struct UString *
.text:00000A2A                 mov     ecx, [ebp+var_10] ; this
.text:00000A2D                 call    ?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z ; CCallbackConsoleBase::CommonError(UString const &,ulong,bool)
.text:00000A32                 mov     edx, [ebp+arg_4]
.text:00000A35                 push    edx
.text:00000A36                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:00000A3B                 mov     [ebp+var_20], eax
.text:00000A3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A45                 lea     ecx, [ebp+var_18] ; this
.text:00000A48                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000A4D                 mov     eax, [ebp+var_20]
.text:00000A50                 push    edx
.text:00000A51                 mov     ecx, ebp
.text:00000A53                 push    eax
.text:00000A54                 lea     edx, $LN7_1
.text:00000A5A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A5F                 pop     eax
.text:00000A60                 pop     edx
.text:00000A61                 mov     ecx, [ebp+var_C]
.text:00000A64                 mov     large fs:0, ecx
.text:00000A6B                 pop     ecx
.text:00000A6C                 add     esp, 20h
.text:00000A6F                 cmp     ebp, esp
.text:00000A71                 call    __RTC_CheckEsp
.text:00000A76                 mov     esp, ebp
.text:00000A78                 pop     ebp
.text:00000A79                 retn    8
.text:00000A79 ?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text:00000A79
.text:00000A79 ; ---------------------------------------------------------------------------
.text:00000A7C $LN7_1          dd 1                    ; DATA XREF: CCallbackConsoleBase::ReadingFileError_Base(UString const &,ulong)+84o
.text:00000A80                 dd offset $LN6_1
.text:00000A84 $LN6_1          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000A80o
.text:00000A8C                 dd offset $LN4_1        ; "lock"
.text:00000A90 $LN4_1          db 'lock',0             ; DATA XREF: .text:00000A8Co
.text:00000A95                 align 10h
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; __int32 __thiscall CUpdateCallbackConsole::ScanError(CUpdateCallbackConsole *this, const struct UString *, unsigned __int32)
.text:00000AA0                 public ?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
.text:00000AA0 ?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z proc near
.text:00000AA0
.text:00000AA0 var_4           = dword ptr -4
.text:00000AA0 arg_0           = dword ptr  8
.text:00000AA0 arg_4           = dword ptr  0Ch
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 push    ecx
.text:00000AA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AAB                 mov     [ebp+var_4], ecx
.text:00000AAE                 mov     eax, [ebp+arg_4]
.text:00000AB1                 push    eax             ; unsigned __int32
.text:00000AB2                 mov     ecx, [ebp+arg_0]
.text:00000AB5                 push    ecx             ; struct UString *
.text:00000AB6                 mov     ecx, [ebp+var_4]
.text:00000AB9                 add     ecx, 4          ; this
.text:00000ABC                 call    ?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z ; CCallbackConsoleBase::ScanError_Base(UString const &,ulong)
.text:00000AC1                 add     esp, 4
.text:00000AC4                 cmp     ebp, esp
.text:00000AC6                 call    __RTC_CheckEsp
.text:00000ACB                 mov     esp, ebp
.text:00000ACD                 pop     ebp
.text:00000ACE                 retn    8
.text:00000ACE ?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z endp
.text:00000ACE
.text:00000ACE ; ---------------------------------------------------------------------------
.text:00000AD1                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; __int32 __thiscall CUpdateCallbackConsole::FinishScanning(CUpdateCallbackConsole *this, const struct CDirItemsStat *)
.text:00000AE0                 public ?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z
.text:00000AE0 ?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z proc near
.text:00000AE0
.text:00000AE0 var_24          = dword ptr -24h
.text:00000AE0 var_20          = dword ptr -20h
.text:00000AE0 var_1C          = dword ptr -1Ch
.text:00000AE0 var_18          = dword ptr -18h
.text:00000AE0 var_14          = dword ptr -14h
.text:00000AE0 var_10          = dword ptr -10h
.text:00000AE0 var_C           = dword ptr -0Ch
.text:00000AE0 var_4           = dword ptr -4
.text:00000AE0 arg_0           = dword ptr  8
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    0FFFFFFFFh
.text:00000AE5                 push    offset __ehhandler$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z
.text:00000AEA                 mov     eax, large fs:0
.text:00000AF0                 push    eax
.text:00000AF1                 sub     esp, 18h
.text:00000AF4                 mov     eax, 0CCCCCCCCh
.text:00000AF9                 mov     [ebp+var_24], eax
.text:00000AFC                 mov     [ebp+var_20], eax
.text:00000AFF                 mov     [ebp+var_1C], eax
.text:00000B02                 mov     [ebp+var_18], eax
.text:00000B05                 mov     [ebp+var_14], eax
.text:00000B08                 mov     [ebp+var_10], eax
.text:00000B0B                 mov     eax, dword ptr ds:___security_cookie
.text:00000B10                 xor     eax, ebp
.text:00000B12                 push    eax
.text:00000B13                 lea     eax, [ebp+var_C]
.text:00000B16                 mov     large fs:0, eax
.text:00000B1C                 mov     [ebp+var_10], ecx
.text:00000B1F                 mov     ecx, [ebp+var_10]
.text:00000B22                 add     ecx, 8          ; this
.text:00000B25                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00000B2A                 movzx   eax, al
.text:00000B2D                 test    eax, eax
.text:00000B2F                 jz      short loc_B49
.text:00000B31                 push    1               ; bool
.text:00000B33                 mov     ecx, [ebp+var_10]
.text:00000B36                 add     ecx, 8          ; this
.text:00000B39                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00000B3E                 mov     ecx, [ebp+var_10]
.text:00000B41                 add     ecx, 8          ; this
.text:00000B44                 call    ?ClearCurState@CPercentPrinterState@@QAEXXZ ; CPercentPrinterState::ClearCurState(void)
.text:00000B49
.text:00000B49 loc_B49:                                ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+4Fj
.text:00000B49                 mov     ecx, [ebp+var_10]
.text:00000B4C                 cmp     dword ptr [ecx+0B8h], 0
.text:00000B53                 jz      short loc_BAF
.text:00000B55                 lea     ecx, [ebp+var_20]
.text:00000B58                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000B5D                 mov     [ebp+var_4], 0
.text:00000B64                 mov     edx, [ebp+arg_0]
.text:00000B67                 push    edx             ; struct CDirItemsStat *
.text:00000B68                 lea     eax, [ebp+var_20]
.text:00000B6B                 push    eax             ; struct AString *
.text:00000B6C                 call    ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z ; Print_DirItemsStat(AString &,CDirItemsStat const &)
.text:00000B71                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000B76                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000B7B                 lea     ecx, [ebp+var_20]
.text:00000B7E                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000B83                 push    eax             ; Str
.text:00000B84                 mov     ecx, [ebp+var_10]
.text:00000B87                 mov     ecx, [ecx+0B8h]
.text:00000B8D                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000B92                 mov     ecx, eax
.text:00000B94                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000B99                 mov     ecx, eax
.text:00000B9B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000BA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BA7                 lea     ecx, [ebp+var_20] ; this
.text:00000BAA                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+73j
.text:00000BAF                 xor     eax, eax
.text:00000BB1                 push    edx
.text:00000BB2                 mov     ecx, ebp
.text:00000BB4                 push    eax
.text:00000BB5                 lea     edx, $LN9
.text:00000BBB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BC0                 pop     eax
.text:00000BC1                 pop     edx
.text:00000BC2                 mov     ecx, [ebp+var_C]
.text:00000BC5                 mov     large fs:0, ecx
.text:00000BCC                 pop     ecx
.text:00000BCD                 add     esp, 24h
.text:00000BD0                 cmp     ebp, esp
.text:00000BD2                 call    __RTC_CheckEsp
.text:00000BD7                 mov     esp, ebp
.text:00000BD9                 pop     ebp
.text:00000BDA                 retn    4
.text:00000BDA ?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z endp
.text:00000BDA
.text:00000BDA ; ---------------------------------------------------------------------------
.text:00000BDD                 align 10h
.text:00000BE0 $LN9            dd 1                    ; DATA XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+D5o
.text:00000BE4                 dd offset $LN8
.text:00000BE8 $LN8            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000BE4o
.text:00000BF0                 dd offset $LN6_2
.text:00000BF4 $LN6_2          dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000BF0o
.text:00000C00
.text:00000C00 ; =============== S U B R O U T I N E =======================================
.text:00000C00
.text:00000C00 ; Attributes: bp-based frame
.text:00000C00
.text:00000C00 ; __int32 __thiscall CUpdateCallbackConsole::StartOpenArchive(CUpdateCallbackConsole *this, const wchar_t *)
.text:00000C00                 public ?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z
.text:00000C00 ?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z proc near
.text:00000C00
.text:00000C00 var_4           = dword ptr -4
.text:00000C00 arg_0           = dword ptr  8
.text:00000C00
.text:00000C00                 push    ebp
.text:00000C01                 mov     ebp, esp
.text:00000C03                 push    ecx
.text:00000C04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C0B                 mov     [ebp+var_4], ecx
.text:00000C0E                 mov     eax, [ebp+var_4]
.text:00000C11                 cmp     dword ptr [eax+0B8h], 0
.text:00000C18                 jz      short loc_C71
.text:00000C1A                 mov     ecx, ds:_kOpenArchiveMessage
.text:00000C20                 push    ecx             ; Str
.text:00000C21                 mov     edx, [ebp+var_4]
.text:00000C24                 mov     ecx, [edx+0B8h]
.text:00000C2A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000C2F                 cmp     [ebp+arg_0], 0
.text:00000C33                 jz      short loc_C49
.text:00000C35                 mov     eax, [ebp+arg_0]
.text:00000C38                 push    eax
.text:00000C39                 mov     ecx, [ebp+var_4]
.text:00000C3C                 mov     ecx, [ecx+0B8h]
.text:00000C42                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000C47                 jmp     short loc_C5E
.text:00000C49 ; ---------------------------------------------------------------------------
.text:00000C49
.text:00000C49 loc_C49:                                ; CODE XREF: CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)+33j
.text:00000C49                 mov     edx, ds:_k_StdOut_ArcName
.text:00000C4F                 push    edx             ; Str
.text:00000C50                 mov     eax, [ebp+var_4]
.text:00000C53                 mov     ecx, [eax+0B8h]
.text:00000C59                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000C5E
.text:00000C5E loc_C5E:                                ; CODE XREF: CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)+47j
.text:00000C5E                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000C63                 mov     ecx, [ebp+var_4]
.text:00000C66                 mov     ecx, [ecx+0B8h]
.text:00000C6C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000C71
.text:00000C71 loc_C71:                                ; CODE XREF: CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)+18j
.text:00000C71                 xor     eax, eax
.text:00000C73                 add     esp, 4
.text:00000C76                 cmp     ebp, esp
.text:00000C78                 call    __RTC_CheckEsp
.text:00000C7D                 mov     esp, ebp
.text:00000C7F                 pop     ebp
.text:00000C80                 retn    4
.text:00000C80 ?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z endp
.text:00000C80
.text:00000C80 ; ---------------------------------------------------------------------------
.text:00000C83                 align 10h
.text:00000C90
.text:00000C90 ; =============== S U B R O U T I N E =======================================
.text:00000C90
.text:00000C90 ; Attributes: bp-based frame
.text:00000C90
.text:00000C90 ; __int32 __thiscall CUpdateCallbackConsole::StartArchive(CUpdateCallbackConsole *this, const wchar_t *, bool)
.text:00000C90                 public ?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z
.text:00000C90 ?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z proc near
.text:00000C90
.text:00000C90 Str             = dword ptr -8
.text:00000C90 var_4           = dword ptr -4
.text:00000C90 arg_0           = dword ptr  8
.text:00000C90 arg_4           = byte ptr  0Ch
.text:00000C90
.text:00000C90                 push    ebp
.text:00000C91                 mov     ebp, esp
.text:00000C93                 sub     esp, 8
.text:00000C96                 mov     [ebp+Str], 0CCCCCCCCh
.text:00000C9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CA4                 mov     [ebp+var_4], ecx
.text:00000CA7                 mov     eax, [ebp+var_4]
.text:00000CAA                 cmp     dword ptr [eax+0B8h], 0
.text:00000CB1                 jz      short loc_D2E
.text:00000CB3                 movzx   ecx, [ebp+arg_4]
.text:00000CB7                 test    ecx, ecx
.text:00000CB9                 jz      short loc_CC6
.text:00000CBB                 mov     edx, ds:_kUpdatingArchiveMessage
.text:00000CC1                 mov     [ebp+Str], edx
.text:00000CC4                 jmp     short loc_CCE
.text:00000CC6 ; ---------------------------------------------------------------------------
.text:00000CC6
.text:00000CC6 loc_CC6:                                ; CODE XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+29j
.text:00000CC6                 mov     eax, ds:_kCreatingArchiveMessage
.text:00000CCB                 mov     [ebp+Str], eax
.text:00000CCE
.text:00000CCE loc_CCE:                                ; CODE XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+34j
.text:00000CCE                 mov     ecx, [ebp+Str]
.text:00000CD1                 push    ecx             ; Str
.text:00000CD2                 mov     edx, [ebp+var_4]
.text:00000CD5                 mov     ecx, [edx+0B8h]
.text:00000CDB                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000CE0                 cmp     [ebp+arg_0], 0
.text:00000CE4                 jz      short loc_CFA
.text:00000CE6                 mov     eax, [ebp+arg_0]
.text:00000CE9                 push    eax
.text:00000CEA                 mov     ecx, [ebp+var_4]
.text:00000CED                 mov     ecx, [ecx+0B8h]
.text:00000CF3                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000CF8                 jmp     short loc_D0F
.text:00000CFA ; ---------------------------------------------------------------------------
.text:00000CFA
.text:00000CFA loc_CFA:                                ; CODE XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+54j
.text:00000CFA                 mov     edx, ds:_k_StdOut_ArcName
.text:00000D00                 push    edx             ; Str
.text:00000D01                 mov     eax, [ebp+var_4]
.text:00000D04                 mov     ecx, [eax+0B8h]
.text:00000D0A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000D0F
.text:00000D0F loc_D0F:                                ; CODE XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+68j
.text:00000D0F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000D14                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000D19                 mov     ecx, [ebp+var_4]
.text:00000D1C                 mov     ecx, [ecx+0B8h]
.text:00000D22                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000D27                 mov     ecx, eax
.text:00000D29                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000D2E
.text:00000D2E loc_D2E:                                ; CODE XREF: CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)+21j
.text:00000D2E                 xor     eax, eax
.text:00000D30                 add     esp, 8
.text:00000D33                 cmp     ebp, esp
.text:00000D35                 call    __RTC_CheckEsp
.text:00000D3A                 mov     esp, ebp
.text:00000D3C                 pop     ebp
.text:00000D3D                 retn    8
.text:00000D3D ?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z endp
.text:00000D3D
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; __int32 __thiscall CUpdateCallbackConsole::FinishArchive(CUpdateCallbackConsole *this, const struct CFinishArchiveStat *)
.text:00000D40                 public ?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z
.text:00000D40 ?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z proc near
.text:00000D40
.text:00000D40 var_24          = dword ptr -24h
.text:00000D40 var_20          = dword ptr -20h
.text:00000D40 var_1C          = dword ptr -1Ch
.text:00000D40 var_18          = dword ptr -18h
.text:00000D40 var_14          = dword ptr -14h
.text:00000D40 var_10          = dword ptr -10h
.text:00000D40 var_C           = dword ptr -0Ch
.text:00000D40 var_4           = dword ptr -4
.text:00000D40 arg_0           = dword ptr  8
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 push    0FFFFFFFFh
.text:00000D45                 push    offset __ehhandler$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z
.text:00000D4A                 mov     eax, large fs:0
.text:00000D50                 push    eax
.text:00000D51                 sub     esp, 18h
.text:00000D54                 mov     eax, 0CCCCCCCCh
.text:00000D59                 mov     [ebp+var_24], eax
.text:00000D5C                 mov     [ebp+var_20], eax
.text:00000D5F                 mov     [ebp+var_1C], eax
.text:00000D62                 mov     [ebp+var_18], eax
.text:00000D65                 mov     [ebp+var_14], eax
.text:00000D68                 mov     [ebp+var_10], eax
.text:00000D6B                 mov     eax, dword ptr ds:___security_cookie
.text:00000D70                 xor     eax, ebp
.text:00000D72                 push    eax
.text:00000D73                 lea     eax, [ebp+var_C]
.text:00000D76                 mov     large fs:0, eax
.text:00000D7C                 mov     [ebp+var_10], ecx
.text:00000D7F                 mov     ecx, [ebp+var_10]
.text:00000D82                 add     ecx, 8          ; this
.text:00000D85                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:00000D8A                 mov     eax, [ebp+var_10]
.text:00000D8D                 cmp     dword ptr [eax+0B8h], 0
.text:00000D94                 jz      loc_E2B
.text:00000D9A                 lea     ecx, [ebp+var_20]
.text:00000D9D                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000DA2                 mov     [ebp+var_4], 0
.text:00000DA9                 mov     ecx, [ebp+var_10]
.text:00000DAC                 mov     edx, [ecx+1Ch]
.text:00000DAF                 push    edx
.text:00000DB0                 mov     eax, [ecx+18h]
.text:00000DB3                 push    eax
.text:00000DB4                 push    offset $SG74739 ; "Files read from disk"
.text:00000DB9                 lea     ecx, [ebp+var_20]
.text:00000DBC                 push    ecx
.text:00000DBD                 call    ?PrintPropPair@@YGXAAVAString@@PBD_K@Z ; PrintPropPair(AString &,char const *,unsigned __int64)
.text:00000DC2                 lea     ecx, [ebp+var_20] ; this
.text:00000DC5                 call    ?Add_LF@AString@@QAEXXZ ; AString::Add_LF(void)
.text:00000DCA                 push    offset $SG74740 ; "Archive size: "
.text:00000DCF                 lea     ecx, [ebp+var_20]
.text:00000DD2                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000DD7                 mov     edx, [ebp+arg_0]
.text:00000DDA                 mov     eax, [edx+4]
.text:00000DDD                 push    eax
.text:00000DDE                 mov     ecx, [edx]
.text:00000DE0                 push    ecx             ; unsigned __int64
.text:00000DE1                 lea     edx, [ebp+var_20]
.text:00000DE4                 push    edx             ; struct AString *
.text:00000DE5                 call    ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z ; PrintSize_bytes_Smart(AString &,unsigned __int64)
.text:00000DEA                 lea     ecx, [ebp+var_20] ; this
.text:00000DED                 call    ?Add_LF@AString@@QAEXXZ ; AString::Add_LF(void)
.text:00000DF2                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000DF7                 mov     eax, [ebp+var_10]
.text:00000DFA                 mov     ecx, [eax+0B8h]
.text:00000E00                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000E05                 lea     ecx, [ebp+var_20]
.text:00000E08                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000E0D                 push    eax             ; Str
.text:00000E0E                 mov     ecx, [ebp+var_10]
.text:00000E11                 mov     ecx, [ecx+0B8h]
.text:00000E17                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E1C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E23                 lea     ecx, [ebp+var_20] ; this
.text:00000E26                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000E2B
.text:00000E2B loc_E2B:                                ; CODE XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+54j
.text:00000E2B                 xor     eax, eax
.text:00000E2D                 push    edx
.text:00000E2E                 mov     ecx, ebp
.text:00000E30                 push    eax
.text:00000E31                 lea     edx, $LN8_0
.text:00000E37                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E3C                 pop     eax
.text:00000E3D                 pop     edx
.text:00000E3E                 mov     ecx, [ebp+var_C]
.text:00000E41                 mov     large fs:0, ecx
.text:00000E48                 pop     ecx
.text:00000E49                 add     esp, 24h
.text:00000E4C                 cmp     ebp, esp
.text:00000E4E                 call    __RTC_CheckEsp
.text:00000E53                 mov     esp, ebp
.text:00000E55                 pop     ebp
.text:00000E56                 retn    4
.text:00000E56 ?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z endp
.text:00000E56
.text:00000E56 ; ---------------------------------------------------------------------------
.text:00000E59                 align 4
.text:00000E5C $LN8_0          dd 1                    ; DATA XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+F1o
.text:00000E60                 dd offset $LN7_2
.text:00000E64 $LN7_2          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000E60o
.text:00000E6C                 dd offset $LN5
.text:00000E70 $LN5            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000E6Co
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; void __stdcall PrintPropPair(class AString &, char const *, unsigned __int64)
.text:00000E80 ?PrintPropPair@@YGXAAVAString@@PBD_K@Z proc near
.text:00000E80                                         ; CODE XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+7Dp
.text:00000E80                                         ; CUpdateCallbackConsole::SetNumItems(unsigned __int64)+76p
.text:00000E80
.text:00000E80 var_2C          = byte ptr -2Ch
.text:00000E80 var_28          = byte ptr -28h
.text:00000E80 var_4           = dword ptr -4
.text:00000E80 arg_0           = dword ptr  8
.text:00000E80 arg_4           = dword ptr  0Ch
.text:00000E80 arg_8           = qword ptr  10h
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 sub     esp, 2Ch
.text:00000E86                 push    edi
.text:00000E87                 lea     edi, [ebp+var_2C]
.text:00000E8A                 mov     ecx, 0Bh
.text:00000E8F                 mov     eax, 0CCCCCCCCh
.text:00000E94                 rep stosd
.text:00000E96                 mov     eax, dword ptr ds:___security_cookie
.text:00000E9B                 xor     eax, ebp
.text:00000E9D                 mov     [ebp+var_4], eax
.text:00000EA0                 lea     eax, [ebp+var_28]
.text:00000EA3                 push    eax             ; char *
.text:00000EA4                 mov     ecx, dword ptr [ebp+arg_8+4]
.text:00000EA7                 push    ecx
.text:00000EA8                 mov     edx, dword ptr [ebp+arg_8]
.text:00000EAB                 push    edx             ; unsigned __int64
.text:00000EAC                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000EB1                 mov     eax, [ebp+arg_4]
.text:00000EB4                 push    eax
.text:00000EB5                 mov     ecx, [ebp+arg_0]
.text:00000EB8                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000EBD                 push    offset $SG74699
.text:00000EC2                 mov     ecx, [ebp+arg_0]
.text:00000EC5                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000ECA                 lea     ecx, [ebp+var_28]
.text:00000ECD                 push    ecx
.text:00000ECE                 mov     ecx, [ebp+arg_0]
.text:00000ED1                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000ED6                 push    edx
.text:00000ED7                 mov     ecx, ebp
.text:00000ED9                 push    eax
.text:00000EDA                 lea     edx, $LN5_0
.text:00000EE0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EE5                 pop     eax
.text:00000EE6                 pop     edx
.text:00000EE7                 pop     edi
.text:00000EE8                 mov     ecx, [ebp+var_4]
.text:00000EEB                 xor     ecx, ebp
.text:00000EED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000EF2                 add     esp, 2Ch
.text:00000EF5                 cmp     ebp, esp
.text:00000EF7                 call    __RTC_CheckEsp
.text:00000EFC                 mov     esp, ebp
.text:00000EFE                 pop     ebp
.text:00000EFF                 retn    10h
.text:00000EFF ?PrintPropPair@@YGXAAVAString@@PBD_K@Z endp
.text:00000EFF
.text:00000EFF ; ---------------------------------------------------------------------------
.text:00000F02                 align 4
.text:00000F04 $LN5_0          dd 1                    ; DATA XREF: PrintPropPair(AString &,char const *,unsigned __int64)+5Ao
.text:00000F08                 dd offset $LN4_2
.text:00000F0C $LN4_2          dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00000F08o
.text:00000F14                 dd offset $LN3          ; "temp"
.text:00000F18 $LN3            db 'temp',0             ; DATA XREF: .text:00000F14o
.text:00000F1D                 align 10h
.text:00000F20
.text:00000F20 ; =============== S U B R O U T I N E =======================================
.text:00000F20
.text:00000F20 ; Attributes: bp-based frame
.text:00000F20
.text:00000F20 ; __int32 __thiscall CUpdateCallbackConsole::WriteSfx(CUpdateCallbackConsole *this, const wchar_t *, unsigned __int64)
.text:00000F20                 public ?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
.text:00000F20 ?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z proc near
.text:00000F20
.text:00000F20 var_24          = dword ptr -24h
.text:00000F20 var_20          = dword ptr -20h
.text:00000F20 var_1C          = dword ptr -1Ch
.text:00000F20 var_18          = dword ptr -18h
.text:00000F20 var_14          = dword ptr -14h
.text:00000F20 var_10          = dword ptr -10h
.text:00000F20 var_C           = dword ptr -0Ch
.text:00000F20 var_4           = dword ptr -4
.text:00000F20 arg_0           = dword ptr  8
.text:00000F20 arg_4           = qword ptr  0Ch
.text:00000F20
.text:00000F20                 push    ebp
.text:00000F21                 mov     ebp, esp
.text:00000F23                 push    0FFFFFFFFh
.text:00000F25                 push    offset __ehhandler$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
.text:00000F2A                 mov     eax, large fs:0
.text:00000F30                 push    eax
.text:00000F31                 sub     esp, 18h
.text:00000F34                 mov     eax, 0CCCCCCCCh
.text:00000F39                 mov     [ebp+var_24], eax
.text:00000F3C                 mov     [ebp+var_20], eax
.text:00000F3F                 mov     [ebp+var_1C], eax
.text:00000F42                 mov     [ebp+var_18], eax
.text:00000F45                 mov     [ebp+var_14], eax
.text:00000F48                 mov     [ebp+var_10], eax
.text:00000F4B                 mov     eax, dword ptr ds:___security_cookie
.text:00000F50                 xor     eax, ebp
.text:00000F52                 push    eax
.text:00000F53                 lea     eax, [ebp+var_C]
.text:00000F56                 mov     large fs:0, eax
.text:00000F5C                 mov     [ebp+var_10], ecx
.text:00000F5F                 mov     eax, [ebp+var_10]
.text:00000F62                 cmp     dword ptr [eax+0B8h], 0
.text:00000F69                 jz      short loc_FE7
.text:00000F6B                 push    offset $SG74748 ; "Write SFX: "
.text:00000F70                 mov     ecx, [ebp+var_10]
.text:00000F73                 mov     ecx, [ecx+0B8h]
.text:00000F79                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F7E                 mov     edx, [ebp+arg_0]
.text:00000F81                 push    edx
.text:00000F82                 mov     eax, [ebp+var_10]
.text:00000F85                 mov     ecx, [eax+0B8h]
.text:00000F8B                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000F90                 push    offset $SG74750 ; " : "
.text:00000F95                 lea     ecx, [ebp+var_20]
.text:00000F98                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000F9D                 mov     [ebp+var_4], 0
.text:00000FA4                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000FA7                 push    ecx
.text:00000FA8                 mov     edx, dword ptr [ebp+arg_4]
.text:00000FAB                 push    edx             ; unsigned __int64
.text:00000FAC                 lea     eax, [ebp+var_20]
.text:00000FAF                 push    eax             ; struct AString *
.text:00000FB0                 call    ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z ; PrintSize_bytes_Smart(AString &,unsigned __int64)
.text:00000FB5                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000FBA                 lea     ecx, [ebp+var_20]
.text:00000FBD                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000FC2                 push    eax             ; Str
.text:00000FC3                 mov     ecx, [ebp+var_10]
.text:00000FC6                 mov     ecx, [ecx+0B8h]
.text:00000FCC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000FD1                 mov     ecx, eax
.text:00000FD3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000FD8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FDF                 lea     ecx, [ebp+var_20] ; this
.text:00000FE2                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+49j
.text:00000FE7                 xor     eax, eax
.text:00000FE9                 push    edx
.text:00000FEA                 mov     ecx, ebp
.text:00000FEC                 push    eax
.text:00000FED                 lea     edx, $LN8_1
.text:00000FF3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000FF8                 pop     eax
.text:00000FF9                 pop     edx
.text:00000FFA                 mov     ecx, [ebp+var_C]
.text:00000FFD                 mov     large fs:0, ecx
.text:00001004                 pop     ecx
.text:00001005                 add     esp, 24h
.text:00001008                 cmp     ebp, esp
.text:0000100A                 call    __RTC_CheckEsp
.text:0000100F                 mov     esp, ebp
.text:00001011                 pop     ebp
.text:00001012                 retn    0Ch
.text:00001012 ?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z endp
.text:00001012
.text:00001012 ; ---------------------------------------------------------------------------
.text:00001015                 align 4
.text:00001018 $LN8_1          dd 1                    ; DATA XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+CDo
.text:0000101C                 dd offset $LN7_3
.text:00001020 $LN7_3          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:0000101Co
.text:00001028                 dd offset $LN5_1
.text:0000102C $LN5_1          dd 0CCCC0073h           ; DATA XREF: .text:00001028o
.text:00001030
.text:00001030 ; =============== S U B R O U T I N E =======================================
.text:00001030
.text:00001030 ; Attributes: bp-based frame
.text:00001030
.text:00001030 ; __int32 __thiscall CUpdateCallbackConsole::DeletingAfterArchiving(CUpdateCallbackConsole *this, const struct UString *, bool)
.text:00001030                 public ?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z
.text:00001030 ?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z proc near
.text:00001030
.text:00001030 var_4           = dword ptr -4
.text:00001030 arg_0           = dword ptr  8
.text:00001030
.text:00001030                 push    ebp
.text:00001031                 mov     ebp, esp
.text:00001033                 push    ecx
.text:00001034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000103B                 mov     [ebp+var_4], ecx
.text:0000103E                 mov     eax, [ebp+var_4]
.text:00001041                 cmp     dword ptr [eax+0C8h], 0
.text:00001048                 jbe     loc_114E
.text:0000104E                 mov     ecx, [ebp+var_4]
.text:00001051                 cmp     dword ptr [ecx+0B8h], 0
.text:00001058                 jz      loc_114E
.text:0000105E                 mov     ecx, [ebp+var_4]
.text:00001061                 add     ecx, 8          ; this
.text:00001064                 call    ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents_for_so(void)
.text:00001069                 mov     edx, [ebp+var_4]
.text:0000106C                 movzx   eax, byte ptr [edx+129h]
.text:00001073                 test    eax, eax
.text:00001075                 jnz     short loc_10AE
.text:00001077                 mov     ecx, [ebp+var_4]
.text:0000107A                 cmp     dword ptr [ecx+0B8h], 0
.text:00001081                 jz      short loc_10AE
.text:00001083                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001088                 push    offset $SG74760 ; ": Removing files after including to arc"...
.text:0000108D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001092                 mov     edx, [ebp+var_4]
.text:00001095                 mov     ecx, [edx+0B8h]
.text:0000109B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000010A0                 mov     ecx, eax
.text:000010A2                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000010A7                 mov     ecx, eax
.text:000010A9                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000010AE
.text:000010AE loc_10AE:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+45j
.text:000010AE                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+51j
.text:000010AE                 push    offset $SG74761 ; "Removing"
.text:000010B3                 mov     ecx, [ebp+var_4]
.text:000010B6                 add     ecx, 0CCh ; '¦'
.text:000010BC                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000010C1                 mov     ecx, [ebp+var_4]
.text:000010C4                 add     ecx, 0CCh ; '¦' ; this
.text:000010CA                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:000010CF                 mov     ecx, [ebp+var_4]
.text:000010D2                 add     ecx, 0CCh ; '¦'
.text:000010D8                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000010DD                 push    eax             ; Str
.text:000010DE                 mov     eax, [ebp+var_4]
.text:000010E1                 mov     ecx, [eax+0B8h]
.text:000010E7                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000010EC                 mov     ecx, [ebp+arg_0]
.text:000010EF                 push    ecx
.text:000010F0                 mov     ecx, [ebp+var_4]
.text:000010F3                 add     ecx, 0D8h ; '+'
.text:000010F9                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000010FE                 mov     edx, [ebp+var_4]
.text:00001101                 add     edx, 0CCh ; '¦'
.text:00001107                 push    edx             ; struct AString *
.text:00001108                 mov     eax, [ebp+var_4]
.text:0000110B                 add     eax, 0D8h ; '+'
.text:00001110                 push    eax             ; struct UString *
.text:00001111                 mov     ecx, [ebp+var_4]
.text:00001114                 mov     ecx, [ecx+0B8h] ; this
.text:0000111A                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:0000111F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001124                 mov     edx, [ebp+var_4]
.text:00001127                 mov     ecx, [edx+0B8h]
.text:0000112D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001132                 mov     eax, [ebp+var_4]
.text:00001135                 movzx   ecx, byte ptr [eax+0C1h]
.text:0000113C                 test    ecx, ecx
.text:0000113E                 jz      short loc_114E
.text:00001140                 mov     edx, [ebp+var_4]
.text:00001143                 mov     ecx, [edx+0B8h] ; this
.text:00001149                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:0000114E
.text:0000114E loc_114E:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+18j
.text:0000114E                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+28j ...
.text:0000114E                 mov     eax, [ebp+var_4]
.text:00001151                 movzx   ecx, byte ptr [eax+129h]
.text:00001158                 test    ecx, ecx
.text:0000115A                 jnz     short loc_1185
.text:0000115C                 mov     ecx, [ebp+var_4]
.text:0000115F                 add     ecx, 8          ; this
.text:00001162                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00001167                 movzx   edx, al
.text:0000116A                 test    edx, edx
.text:0000116C                 jz      short loc_1179
.text:0000116E                 mov     ecx, [ebp+var_4]
.text:00001171                 add     ecx, 8          ; this
.text:00001174                 call    ?ClearCurState@CPercentPrinterState@@QAEXXZ ; CPercentPrinterState::ClearCurState(void)
.text:00001179
.text:00001179 loc_1179:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+13Cj
.text:00001179                 mov     eax, [ebp+var_4]
.text:0000117C                 mov     byte ptr [eax+129h], 1
.text:00001183                 jmp     short loc_119D
.text:00001185 ; ---------------------------------------------------------------------------
.text:00001185
.text:00001185 loc_1185:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+12Aj
.text:00001185                 mov     ecx, [ebp+var_4]
.text:00001188                 mov     edx, [ecx+18h]
.text:0000118B                 add     edx, 1
.text:0000118E                 mov     eax, [ecx+1Ch]
.text:00001191                 adc     eax, 0
.text:00001194                 mov     ecx, [ebp+var_4]
.text:00001197                 mov     [ecx+18h], edx
.text:0000119A                 mov     [ecx+1Ch], eax
.text:0000119D
.text:0000119D loc_119D:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+153j
.text:0000119D                 mov     ecx, [ebp+var_4]
.text:000011A0                 add     ecx, 8          ; this
.text:000011A3                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000011A8                 movzx   edx, al
.text:000011AB                 test    edx, edx
.text:000011AD                 jz      short loc_11D9
.text:000011AF                 push    offset $SG74767 ; "Removing"
.text:000011B4                 mov     ecx, [ebp+var_4]
.text:000011B7                 add     ecx, 20h ; ' '
.text:000011BA                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000011BF                 mov     eax, [ebp+arg_0]
.text:000011C2                 push    eax
.text:000011C3                 mov     ecx, [ebp+var_4]
.text:000011C6                 add     ecx, 2Ch ; ','
.text:000011C9                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000011CE                 mov     ecx, [ebp+var_4]
.text:000011D1                 add     ecx, 8          ; this
.text:000011D4                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:000011D9
.text:000011D9 loc_11D9:                               ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+17Dj
.text:000011D9                 xor     eax, eax
.text:000011DB                 add     esp, 4
.text:000011DE                 cmp     ebp, esp
.text:000011E0                 call    __RTC_CheckEsp
.text:000011E5                 mov     esp, ebp
.text:000011E7                 pop     ebp
.text:000011E8                 retn    8
.text:000011E8 ?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z endp
.text:000011E8
.text:000011E8 ; ---------------------------------------------------------------------------
.text:000011EB                 align 10h
.text:000011F0
.text:000011F0 ; =============== S U B R O U T I N E =======================================
.text:000011F0
.text:000011F0 ; Attributes: bp-based frame
.text:000011F0
.text:000011F0 ; __int32 __thiscall CUpdateCallbackConsole::FinishDeletingAfterArchiving(CUpdateCallbackConsole *__hidden this)
.text:000011F0                 public ?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ
.text:000011F0 ?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ proc near
.text:000011F0
.text:000011F0 var_4           = dword ptr -4
.text:000011F0
.text:000011F0                 push    ebp
.text:000011F1                 mov     ebp, esp
.text:000011F3                 push    ecx
.text:000011F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011FB                 mov     [ebp+var_4], ecx
.text:000011FE                 mov     ecx, [ebp+var_4]
.text:00001201                 add     ecx, 8          ; this
.text:00001204                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:00001209                 mov     eax, [ebp+var_4]
.text:0000120C                 cmp     dword ptr [eax+0B8h], 0
.text:00001213                 jz      short loc_1236
.text:00001215                 mov     ecx, [ebp+var_4]
.text:00001218                 movzx   edx, byte ptr [ecx+129h]
.text:0000121F                 test    edx, edx
.text:00001221                 jz      short loc_1236
.text:00001223                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001228                 mov     eax, [ebp+var_4]
.text:0000122B                 mov     ecx, [eax+0B8h]
.text:00001231                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001236
.text:00001236 loc_1236:                               ; CODE XREF: CUpdateCallbackConsole::FinishDeletingAfterArchiving(void)+23j
.text:00001236                                         ; CUpdateCallbackConsole::FinishDeletingAfterArchiving(void)+31j
.text:00001236                 xor     eax, eax
.text:00001238                 add     esp, 4
.text:0000123B                 cmp     ebp, esp
.text:0000123D                 call    __RTC_CheckEsp
.text:00001242                 mov     esp, ebp
.text:00001244                 pop     ebp
.text:00001245                 retn
.text:00001245 ?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ endp
.text:00001245
.text:00001245 ; ---------------------------------------------------------------------------
.text:00001246                 align 10h
.text:00001250
.text:00001250 ; =============== S U B R O U T I N E =======================================
.text:00001250
.text:00001250 ; Attributes: bp-based frame
.text:00001250
.text:00001250 ; __int32 __thiscall CUpdateCallbackConsole::CheckBreak(CUpdateCallbackConsole *__hidden this)
.text:00001250                 public ?CheckBreak@CUpdateCallbackConsole@@UAEJXZ
.text:00001250 ?CheckBreak@CUpdateCallbackConsole@@UAEJXZ proc near
.text:00001250
.text:00001250 var_4           = dword ptr -4
.text:00001250
.text:00001250                 push    ebp
.text:00001251                 mov     ebp, esp
.text:00001253                 push    ecx
.text:00001254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000125B                 mov     [ebp+var_4], ecx
.text:0000125E                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001263                 add     esp, 4
.text:00001266                 cmp     ebp, esp
.text:00001268                 call    __RTC_CheckEsp
.text:0000126D                 mov     esp, ebp
.text:0000126F                 pop     ebp
.text:00001270                 retn
.text:00001270 ?CheckBreak@CUpdateCallbackConsole@@UAEJXZ endp
.text:00001270
.text:00001270 ; ---------------------------------------------------------------------------
.text:00001271                 align 10h
.text:00001280
.text:00001280 ; =============== S U B R O U T I N E =======================================
.text:00001280
.text:00001280 ; Attributes: bp-based frame
.text:00001280
.text:00001280 ; long __stdcall CheckBreak2(void)
.text:00001280 ?CheckBreak2@@YGJXZ proc near           ; CODE XREF: CUpdateCallbackConsole::CheckBreak(void)+Ep
.text:00001280                                         ; CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *):loc_1504p ...
.text:00001280                 push    ebp             ; this
.text:00001281                 mov     ebp, esp
.text:00001283                 call    ?TestBreakSignal@NConsoleClose@@YG_NXZ ; NConsoleClose::TestBreakSignal(void)
.text:00001288                 movzx   eax, al
.text:0000128B                 neg     eax
.text:0000128D                 sbb     eax, eax
.text:0000128F                 and     eax, 80004004h
.text:00001294                 cmp     ebp, esp
.text:00001296                 call    __RTC_CheckEsp
.text:0000129B                 pop     ebp
.text:0000129C                 retn
.text:0000129C ?CheckBreak2@@YGJXZ endp
.text:0000129C
.text:0000129C ; ---------------------------------------------------------------------------
.text:0000129D                 align 10h
.text:000012A0
.text:000012A0 ; =============== S U B R O U T I N E =======================================
.text:000012A0
.text:000012A0 ; Attributes: bp-based frame
.text:000012A0
.text:000012A0 ; __int32 __thiscall CUpdateCallbackConsole::SetNumItems(CUpdateCallbackConsole *this, unsigned __int64)
.text:000012A0                 public ?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z
.text:000012A0 ?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z proc near
.text:000012A0
.text:000012A0 var_24          = dword ptr -24h
.text:000012A0 var_20          = dword ptr -20h
.text:000012A0 var_1C          = dword ptr -1Ch
.text:000012A0 var_18          = dword ptr -18h
.text:000012A0 var_14          = dword ptr -14h
.text:000012A0 var_10          = dword ptr -10h
.text:000012A0 var_C           = dword ptr -0Ch
.text:000012A0 var_4           = dword ptr -4
.text:000012A0 arg_0           = qword ptr  8
.text:000012A0
.text:000012A0                 push    ebp
.text:000012A1                 mov     ebp, esp
.text:000012A3                 push    0FFFFFFFFh
.text:000012A5                 push    offset __ehhandler$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z
.text:000012AA                 mov     eax, large fs:0
.text:000012B0                 push    eax
.text:000012B1                 sub     esp, 18h
.text:000012B4                 mov     eax, 0CCCCCCCCh
.text:000012B9                 mov     [ebp+var_24], eax
.text:000012BC                 mov     [ebp+var_20], eax
.text:000012BF                 mov     [ebp+var_1C], eax
.text:000012C2                 mov     [ebp+var_18], eax
.text:000012C5                 mov     [ebp+var_14], eax
.text:000012C8                 mov     [ebp+var_10], eax
.text:000012CB                 mov     eax, dword ptr ds:___security_cookie
.text:000012D0                 xor     eax, ebp
.text:000012D2                 push    eax
.text:000012D3                 lea     eax, [ebp+var_C]
.text:000012D6                 mov     large fs:0, eax
.text:000012DC                 mov     [ebp+var_10], ecx
.text:000012DF                 mov     eax, [ebp+var_10]
.text:000012E2                 cmp     dword ptr [eax+0B8h], 0
.text:000012E9                 jz      short loc_1359
.text:000012EB                 mov     ecx, [ebp+var_10]
.text:000012EE                 add     ecx, 8          ; this
.text:000012F1                 call    ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents_for_so(void)
.text:000012F6                 lea     ecx, [ebp+var_20]
.text:000012F9                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000012FE                 mov     [ebp+var_4], 0
.text:00001305                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00001308                 push    ecx
.text:00001309                 mov     edx, dword ptr [ebp+arg_0]
.text:0000130C                 push    edx
.text:0000130D                 push    offset $SG74783 ; "Items to compress"
.text:00001312                 lea     eax, [ebp+var_20]
.text:00001315                 push    eax
.text:00001316                 call    ?PrintPropPair@@YGXAAVAString@@PBD_K@Z ; PrintPropPair(AString &,char const *,unsigned __int64)
.text:0000131B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001320                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001325                 lea     ecx, [ebp+var_20]
.text:00001328                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000132D                 push    eax             ; Str
.text:0000132E                 mov     ecx, [ebp+var_10]
.text:00001331                 mov     ecx, [ecx+0B8h]
.text:00001337                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000133C                 mov     ecx, eax
.text:0000133E                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001343                 mov     ecx, eax
.text:00001345                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000134A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001351                 lea     ecx, [ebp+var_20] ; this
.text:00001354                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001359
.text:00001359 loc_1359:                               ; CODE XREF: CUpdateCallbackConsole::SetNumItems(unsigned __int64)+49j
.text:00001359                 xor     eax, eax
.text:0000135B                 push    edx
.text:0000135C                 mov     ecx, ebp
.text:0000135E                 push    eax
.text:0000135F                 lea     edx, $LN8_2
.text:00001365                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000136A                 pop     eax
.text:0000136B                 pop     edx
.text:0000136C                 mov     ecx, [ebp+var_C]
.text:0000136F                 mov     large fs:0, ecx
.text:00001376                 pop     ecx
.text:00001377                 add     esp, 24h
.text:0000137A                 cmp     ebp, esp
.text:0000137C                 call    __RTC_CheckEsp
.text:00001381                 mov     esp, ebp
.text:00001383                 pop     ebp
.text:00001384                 retn    8
.text:00001384 ?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z endp
.text:00001384
.text:00001384 ; ---------------------------------------------------------------------------
.text:00001387                 align 4
.text:00001388 $LN8_2          dd 1                    ; DATA XREF: CUpdateCallbackConsole::SetNumItems(unsigned __int64)+BFo
.text:0000138C                 dd offset $LN7_4
.text:00001390 $LN7_4          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:0000138Co
.text:00001398                 dd offset $LN5_2
.text:0000139C $LN5_2          dd 0CCCC0073h           ; DATA XREF: .text:00001398o
.text:000013A0
.text:000013A0 ; =============== S U B R O U T I N E =======================================
.text:000013A0
.text:000013A0 ; Attributes: bp-based frame
.text:000013A0
.text:000013A0 ; __int32 __thiscall CUpdateCallbackConsole::SetTotal(CUpdateCallbackConsole *this, unsigned __int64)
.text:000013A0                 public ?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z
.text:000013A0 ?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z proc near
.text:000013A0
.text:000013A0 var_20          = dword ptr -20h
.text:000013A0 var_1C          = dword ptr -1Ch
.text:000013A0 var_18          = dword ptr -18h
.text:000013A0 var_14          = dword ptr -14h
.text:000013A0 var_10          = dword ptr -10h
.text:000013A0 var_C           = dword ptr -0Ch
.text:000013A0 var_4           = dword ptr -4
.text:000013A0 arg_0           = qword ptr  8
.text:000013A0
.text:000013A0                 push    ebp
.text:000013A1                 mov     ebp, esp
.text:000013A3                 push    0FFFFFFFFh
.text:000013A5                 push    offset __ehhandler$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z
.text:000013AA                 mov     eax, large fs:0
.text:000013B0                 push    eax
.text:000013B1                 sub     esp, 14h
.text:000013B4                 mov     eax, 0CCCCCCCCh
.text:000013B9                 mov     [ebp+var_20], eax
.text:000013BC                 mov     [ebp+var_1C], eax
.text:000013BF                 mov     [ebp+var_18], eax
.text:000013C2                 mov     [ebp+var_14], eax
.text:000013C5                 mov     [ebp+var_10], eax
.text:000013C8                 mov     eax, dword ptr ds:___security_cookie
.text:000013CD                 xor     eax, ebp
.text:000013CF                 push    eax
.text:000013D0                 lea     eax, [ebp+var_C]
.text:000013D3                 mov     large fs:0, eax
.text:000013D9                 mov     [ebp+var_10], ecx
.text:000013DC                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:000013E1                 lea     ecx, [ebp+var_18] ; this
.text:000013E4                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000013E9                 mov     [ebp+var_4], 0
.text:000013F0                 mov     ecx, [ebp+var_10]
.text:000013F3                 add     ecx, 8          ; this
.text:000013F6                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000013FB                 movzx   eax, al
.text:000013FE                 test    eax, eax
.text:00001400                 jz      short loc_141C
.text:00001402                 mov     ecx, [ebp+var_10]
.text:00001405                 mov     edx, dword ptr [ebp+arg_0]
.text:00001408                 mov     [ecx+10h], edx
.text:0000140B                 mov     eax, dword ptr [ebp+arg_0+4]
.text:0000140E                 mov     [ecx+14h], eax
.text:00001411                 mov     ecx, [ebp+var_10]
.text:00001414                 add     ecx, 8          ; this
.text:00001417                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000141C
.text:0000141C loc_141C:                               ; CODE XREF: CUpdateCallbackConsole::SetTotal(unsigned __int64)+60j
.text:0000141C                 mov     [ebp+var_20], 0
.text:00001423                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000142A                 lea     ecx, [ebp+var_18] ; this
.text:0000142D                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001432                 mov     eax, [ebp+var_20]
.text:00001435                 push    edx
.text:00001436                 mov     ecx, ebp
.text:00001438                 push    eax
.text:00001439                 lea     edx, $LN8_3
.text:0000143F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001444                 pop     eax
.text:00001445                 pop     edx
.text:00001446                 mov     ecx, [ebp+var_C]
.text:00001449                 mov     large fs:0, ecx
.text:00001450                 pop     ecx
.text:00001451                 add     esp, 20h
.text:00001454                 cmp     ebp, esp
.text:00001456                 call    __RTC_CheckEsp
.text:0000145B                 mov     esp, ebp
.text:0000145D                 pop     ebp
.text:0000145E                 retn    8
.text:0000145E ?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z endp
.text:0000145E
.text:0000145E ; ---------------------------------------------------------------------------
.text:00001461                 align 4
.text:00001464 $LN8_3          dd 1                    ; DATA XREF: CUpdateCallbackConsole::SetTotal(unsigned __int64)+99o
.text:00001468                 dd offset $LN7_5
.text:0000146C $LN7_5          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001468o
.text:00001474                 dd offset $LN5_3        ; "lock"
.text:00001478 $LN5_3          db 'lock',0             ; DATA XREF: .text:00001474o
.text:0000147D                 align 10h
.text:00001480
.text:00001480 ; =============== S U B R O U T I N E =======================================
.text:00001480
.text:00001480 ; Attributes: bp-based frame
.text:00001480
.text:00001480 ; __int32 __thiscall CUpdateCallbackConsole::SetCompleted(CUpdateCallbackConsole *this, const unsigned __int64 *)
.text:00001480                 public ?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z
.text:00001480 ?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z proc near
.text:00001480
.text:00001480 var_20          = dword ptr -20h
.text:00001480 var_1C          = dword ptr -1Ch
.text:00001480 var_18          = dword ptr -18h
.text:00001480 var_14          = dword ptr -14h
.text:00001480 var_10          = dword ptr -10h
.text:00001480 var_C           = dword ptr -0Ch
.text:00001480 var_4           = dword ptr -4
.text:00001480 arg_0           = dword ptr  8
.text:00001480
.text:00001480                 push    ebp
.text:00001481                 mov     ebp, esp
.text:00001483                 push    0FFFFFFFFh
.text:00001485                 push    offset __ehhandler$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z
.text:0000148A                 mov     eax, large fs:0
.text:00001490                 push    eax
.text:00001491                 sub     esp, 14h
.text:00001494                 mov     eax, 0CCCCCCCCh
.text:00001499                 mov     [ebp+var_20], eax
.text:0000149C                 mov     [ebp+var_1C], eax
.text:0000149F                 mov     [ebp+var_18], eax
.text:000014A2                 mov     [ebp+var_14], eax
.text:000014A5                 mov     [ebp+var_10], eax
.text:000014A8                 mov     eax, dword ptr ds:___security_cookie
.text:000014AD                 xor     eax, ebp
.text:000014AF                 push    eax
.text:000014B0                 lea     eax, [ebp+var_C]
.text:000014B3                 mov     large fs:0, eax
.text:000014B9                 mov     [ebp+var_10], ecx
.text:000014BC                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:000014C1                 lea     ecx, [ebp+var_18] ; this
.text:000014C4                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000014C9                 mov     [ebp+var_4], 0
.text:000014D0                 cmp     [ebp+arg_0], 0
.text:000014D4                 jz      short loc_1504
.text:000014D6                 mov     ecx, [ebp+var_10]
.text:000014D9                 add     ecx, 8          ; this
.text:000014DC                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000014E1                 movzx   eax, al
.text:000014E4                 test    eax, eax
.text:000014E6                 jz      short loc_1504
.text:000014E8                 mov     ecx, [ebp+var_10]
.text:000014EB                 mov     edx, [ebp+arg_0]
.text:000014EE                 mov     eax, [edx]
.text:000014F0                 mov     [ecx+8], eax
.text:000014F3                 mov     edx, [edx+4]
.text:000014F6                 mov     [ecx+0Ch], edx
.text:000014F9                 mov     ecx, [ebp+var_10]
.text:000014FC                 add     ecx, 8          ; this
.text:000014FF                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:00001504
.text:00001504 loc_1504:                               ; CODE XREF: CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)+54j
.text:00001504                                         ; CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)+66j
.text:00001504                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001509                 mov     [ebp+var_20], eax
.text:0000150C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001513                 lea     ecx, [ebp+var_18] ; this
.text:00001516                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:0000151B                 mov     eax, [ebp+var_20]
.text:0000151E                 push    edx
.text:0000151F                 mov     ecx, ebp
.text:00001521                 push    eax
.text:00001522                 lea     edx, $LN9_0
.text:00001528                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000152D                 pop     eax
.text:0000152E                 pop     edx
.text:0000152F                 mov     ecx, [ebp+var_C]
.text:00001532                 mov     large fs:0, ecx
.text:00001539                 pop     ecx
.text:0000153A                 add     esp, 20h
.text:0000153D                 cmp     ebp, esp
.text:0000153F                 call    __RTC_CheckEsp
.text:00001544                 mov     esp, ebp
.text:00001546                 pop     ebp
.text:00001547                 retn    4
.text:00001547 ?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z endp
.text:00001547
.text:00001547 ; ---------------------------------------------------------------------------
.text:0000154A                 align 4
.text:0000154C $LN9_0          dd 1                    ; DATA XREF: CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)+A2o
.text:00001550                 dd offset $LN8_4
.text:00001554 $LN8_4          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001550o
.text:0000155C                 dd offset $LN6_3        ; "lock"
.text:00001560 $LN6_3          db 'lock',0             ; DATA XREF: .text:0000155Co
.text:00001565                 align 10h
.text:00001570
.text:00001570 ; =============== S U B R O U T I N E =======================================
.text:00001570
.text:00001570 ; Attributes: bp-based frame
.text:00001570
.text:00001570 ; __int32 __thiscall CUpdateCallbackConsole::SetRatioInfo(CUpdateCallbackConsole *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00001570                 public ?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z
.text:00001570 ?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z proc near
.text:00001570
.text:00001570 var_4           = dword ptr -4
.text:00001570
.text:00001570                 push    ebp
.text:00001571                 mov     ebp, esp
.text:00001573                 push    ecx
.text:00001574                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000157B                 mov     [ebp+var_4], ecx
.text:0000157E                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001583                 add     esp, 4
.text:00001586                 cmp     ebp, esp
.text:00001588                 call    __RTC_CheckEsp
.text:0000158D                 mov     esp, ebp
.text:0000158F                 pop     ebp
.text:00001590                 retn    8
.text:00001590 ?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z endp
.text:00001590
.text:00001590 ; ---------------------------------------------------------------------------
.text:00001593                 align 10h
.text:000015A0
.text:000015A0 ; =============== S U B R O U T I N E =======================================
.text:000015A0
.text:000015A0 ; Attributes: bp-based frame
.text:000015A0
.text:000015A0 ; __int32 __thiscall CCallbackConsoleBase::PrintProgress(CCallbackConsoleBase *this, const wchar_t *, const char *, bool)
.text:000015A0                 public ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z
.text:000015A0 ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z proc near
.text:000015A0                                         ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+C6p
.text:000015A0                                         ; CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+F6p ...
.text:000015A0
.text:000015A0 var_28          = dword ptr -28h
.text:000015A0 var_24          = dword ptr -24h
.text:000015A0 var_20          = dword ptr -20h
.text:000015A0 var_1C          = dword ptr -1Ch
.text:000015A0 var_18          = dword ptr -18h
.text:000015A0 var_14          = dword ptr -14h
.text:000015A0 var_10          = dword ptr -10h
.text:000015A0 var_C           = dword ptr -0Ch
.text:000015A0 var_4           = dword ptr -4
.text:000015A0 arg_0           = dword ptr  8
.text:000015A0 arg_4           = dword ptr  0Ch
.text:000015A0 arg_8           = byte ptr  10h
.text:000015A0
.text:000015A0                 push    ebp
.text:000015A1                 mov     ebp, esp
.text:000015A3                 push    0FFFFFFFFh
.text:000015A5                 push    offset __ehhandler$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z
.text:000015AA                 mov     eax, large fs:0
.text:000015B0                 push    eax
.text:000015B1                 sub     esp, 1Ch
.text:000015B4                 mov     eax, 0CCCCCCCCh
.text:000015B9                 mov     [ebp+var_28], eax
.text:000015BC                 mov     [ebp+var_24], eax
.text:000015BF                 mov     [ebp+var_20], eax
.text:000015C2                 mov     [ebp+var_1C], eax
.text:000015C5                 mov     [ebp+var_18], eax
.text:000015C8                 mov     [ebp+var_14], eax
.text:000015CB                 mov     [ebp+var_10], eax
.text:000015CE                 mov     eax, dword ptr ds:___security_cookie
.text:000015D3                 xor     eax, ebp
.text:000015D5                 push    eax
.text:000015D6                 lea     eax, [ebp+var_C]
.text:000015D9                 mov     large fs:0, eax
.text:000015DF                 mov     [ebp+var_10], ecx
.text:000015E2                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:000015E7                 lea     ecx, [ebp+var_18] ; this
.text:000015EA                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000015EF                 mov     [ebp+var_4], 0
.text:000015F6                 movzx   eax, [ebp+arg_8]
.text:000015FA                 test    eax, eax
.text:000015FC                 jz      short loc_1613
.text:000015FE                 mov     ecx, [ebp+var_10]
.text:00001601                 cmp     dword ptr [ecx+0B0h], 0
.text:00001608                 jz      short loc_1613
.text:0000160A                 mov     [ebp+var_28], 1
.text:00001611                 jmp     short loc_161A
.text:00001613 ; ---------------------------------------------------------------------------
.text:00001613
.text:00001613 loc_1613:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+5Cj
.text:00001613                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+68j
.text:00001613                 mov     [ebp+var_28], 0
.text:0000161A
.text:0000161A loc_161A:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+71j
.text:0000161A                 mov     dl, byte ptr [ebp+var_28]
.text:0000161D                 mov     byte ptr [ebp+var_20+3], dl
.text:00001620                 movzx   eax, byte ptr [ebp+var_20+3]
.text:00001624                 test    eax, eax
.text:00001626                 jz      loc_16EE
.text:0000162C                 mov     ecx, [ebp+var_10] ; this
.text:0000162F                 call    ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents_for_so(void)
.text:00001634                 mov     ecx, [ebp+arg_4]
.text:00001637                 push    ecx
.text:00001638                 mov     ecx, [ebp+var_10]
.text:0000163B                 add     ecx, 0C4h ; '-'
.text:00001641                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001646                 cmp     [ebp+arg_0], 0
.text:0000164A                 jz      short loc_165A
.text:0000164C                 mov     ecx, [ebp+var_10]
.text:0000164F                 add     ecx, 0C4h ; '-' ; this
.text:00001655                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:0000165A
.text:0000165A loc_165A:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+AAj
.text:0000165A                 mov     ecx, [ebp+var_10]
.text:0000165D                 add     ecx, 0C4h ; '-'
.text:00001663                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001668                 push    eax             ; Str
.text:00001669                 mov     edx, [ebp+var_10]
.text:0000166C                 mov     ecx, [edx+0B0h]
.text:00001672                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001677                 mov     ecx, [ebp+var_10]
.text:0000167A                 add     ecx, 0D0h ; '-' ; this
.text:00001680                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001685                 cmp     [ebp+arg_0], 0
.text:00001689                 jz      short loc_169D
.text:0000168B                 mov     eax, [ebp+arg_0]
.text:0000168E                 push    eax
.text:0000168F                 mov     ecx, [ebp+var_10]
.text:00001692                 add     ecx, 0D0h ; '-'
.text:00001698                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000169D
.text:0000169D loc_169D:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+E9j
.text:0000169D                 mov     ecx, [ebp+var_10]
.text:000016A0                 add     ecx, 0C4h ; '-'
.text:000016A6                 push    ecx             ; struct AString *
.text:000016A7                 mov     edx, [ebp+var_10]
.text:000016AA                 add     edx, 0D0h ; '-'
.text:000016B0                 push    edx             ; struct UString *
.text:000016B1                 mov     eax, [ebp+var_10]
.text:000016B4                 mov     ecx, [eax+0B0h] ; this
.text:000016BA                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:000016BF                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000016C4                 mov     ecx, [ebp+var_10]
.text:000016C7                 mov     ecx, [ecx+0B0h]
.text:000016CD                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000016D2                 mov     edx, [ebp+var_10]
.text:000016D5                 movzx   eax, byte ptr [edx+0B9h]
.text:000016DC                 test    eax, eax
.text:000016DE                 jz      short loc_16EE
.text:000016E0                 mov     ecx, [ebp+var_10]
.text:000016E3                 mov     ecx, [ecx+0B0h] ; this
.text:000016E9                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000016EE
.text:000016EE loc_16EE:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+86j
.text:000016EE                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+13Ej
.text:000016EE                 mov     ecx, [ebp+var_10] ; this
.text:000016F1                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:000016F6                 movzx   edx, al
.text:000016F9                 test    edx, edx
.text:000016FB                 jz      short loc_175F
.text:000016FD                 mov     eax, [ebp+var_10]
.text:00001700                 cmp     dword ptr [eax+0BCh], 1
.text:00001707                 jb      short loc_1757
.text:00001709                 mov     ecx, [ebp+var_10]
.text:0000170C                 add     ecx, 24h ; '$'  ; this
.text:0000170F                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001714                 mov     ecx, [ebp+var_10]
.text:00001717                 add     ecx, 18h        ; this
.text:0000171A                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000171F                 mov     ecx, [ebp+var_10]
.text:00001722                 cmp     dword ptr [ecx+0BCh], 1
.text:00001729                 ja      short loc_1733
.text:0000172B                 movzx   edx, byte ptr [ebp+var_20+3]
.text:0000172F                 test    edx, edx
.text:00001731                 jnz     short loc_1757
.text:00001733
.text:00001733 loc_1733:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+189j
.text:00001733                 mov     eax, [ebp+arg_4]
.text:00001736                 push    eax
.text:00001737                 mov     ecx, [ebp+var_10]
.text:0000173A                 add     ecx, 18h
.text:0000173D                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001742                 cmp     [ebp+arg_0], 0
.text:00001746                 jz      short loc_1757
.text:00001748                 mov     ecx, [ebp+arg_0]
.text:0000174B                 push    ecx
.text:0000174C                 mov     ecx, [ebp+var_10]
.text:0000174F                 add     ecx, 24h ; '$'
.text:00001752                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001757
.text:00001757 loc_1757:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+167j
.text:00001757                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+191j ...
.text:00001757                 mov     ecx, [ebp+var_10] ; this
.text:0000175A                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000175F
.text:0000175F loc_175F:                               ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+15Bj
.text:0000175F                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001764                 mov     [ebp+var_24], eax
.text:00001767                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000176E                 lea     ecx, [ebp+var_18] ; this
.text:00001771                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001776                 mov     eax, [ebp+var_24]
.text:00001779                 push    edx
.text:0000177A                 mov     ecx, ebp
.text:0000177C                 push    eax
.text:0000177D                 lea     edx, $LN18
.text:00001783                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001788                 pop     eax
.text:00001789                 pop     edx
.text:0000178A                 mov     ecx, [ebp+var_C]
.text:0000178D                 mov     large fs:0, ecx
.text:00001794                 pop     ecx
.text:00001795                 add     esp, 28h
.text:00001798                 cmp     ebp, esp
.text:0000179A                 call    __RTC_CheckEsp
.text:0000179F                 mov     esp, ebp
.text:000017A1                 pop     ebp
.text:000017A2                 retn    0Ch
.text:000017A2 ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z endp
.text:000017A2
.text:000017A2 ; ---------------------------------------------------------------------------
.text:000017A5                 align 4
.text:000017A8 $LN18           dd 1                    ; DATA XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+1DDo
.text:000017AC                 dd offset $LN17
.text:000017B0 $LN17           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000017ACo
.text:000017B8                 dd offset $LN15         ; "lock"
.text:000017BC $LN15           db 'lock',0             ; DATA XREF: .text:000017B8o
.text:000017C1                 align 10h
.text:000017D0
.text:000017D0 ; =============== S U B R O U T I N E =======================================
.text:000017D0
.text:000017D0 ; Attributes: bp-based frame
.text:000017D0
.text:000017D0 ; __int32 __thiscall CUpdateCallbackConsole::GetStream(CUpdateCallbackConsole *this, const wchar_t *, bool, bool, unsigned int)
.text:000017D0                 public ?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z
.text:000017D0 ?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z proc near
.text:000017D0
.text:000017D0 var_C           = dword ptr -0Ch
.text:000017D0 var_8           = dword ptr -8
.text:000017D0 var_4           = dword ptr -4
.text:000017D0 arg_0           = dword ptr  8
.text:000017D0 arg_8           = byte ptr  10h
.text:000017D0 arg_C           = dword ptr  14h
.text:000017D0
.text:000017D0                 push    ebp
.text:000017D1                 mov     ebp, esp
.text:000017D3                 sub     esp, 0Ch
.text:000017D6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000017DD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000017E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017EB                 mov     [ebp+var_4], ecx
.text:000017EE                 mov     eax, [ebp+var_4]
.text:000017F1                 movzx   ecx, byte ptr [eax+0C0h]
.text:000017F8                 test    ecx, ecx
.text:000017FA                 jz      short loc_1803
.text:000017FC                 xor     eax, eax
.text:000017FE                 jmp     loc_189B
.text:00001803 ; ---------------------------------------------------------------------------
.text:00001803
.text:00001803 loc_1803:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+2Aj
.text:00001803                 cmp     [ebp+arg_0], 0
.text:00001807                 jz      short loc_1813
.text:00001809                 mov     edx, [ebp+arg_0]
.text:0000180C                 movzx   eax, word ptr [edx]
.text:0000180F                 test    eax, eax
.text:00001811                 jnz     short loc_181C
.text:00001813
.text:00001813 loc_1813:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+37j
.text:00001813                 mov     ecx, ds:_kEmptyFileAlias
.text:00001819                 mov     [ebp+arg_0], ecx
.text:0000181C
.text:0000181C loc_181C:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+41j
.text:0000181C                 mov     [ebp+var_8], 1
.text:00001823                 cmp     [ebp+arg_C], 0
.text:00001827                 jz      short loc_182F
.text:00001829                 cmp     [ebp+arg_C], 1
.text:0000182D                 jnz     short loc_1858
.text:0000182F
.text:0000182F loc_182F:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+57j
.text:0000182F                 movzx   edx, [ebp+arg_8]
.text:00001833                 test    edx, edx
.text:00001835                 jz      short loc_1840
.text:00001837                 mov     [ebp+var_C], offset $SG74840 ; "Anti"
.text:0000183E                 jmp     short loc_1856
.text:00001840 ; ---------------------------------------------------------------------------
.text:00001840
.text:00001840 loc_1840:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+65j
.text:00001840                 cmp     [ebp+arg_C], 0
.text:00001844                 jnz     short loc_184F
.text:00001846                 mov     [ebp+var_C], offset $SG74843
.text:0000184D                 jmp     short loc_1856
.text:0000184F ; ---------------------------------------------------------------------------
.text:0000184F
.text:0000184F loc_184F:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+74j
.text:0000184F                 mov     [ebp+var_C], offset $SG74845
.text:00001856
.text:00001856 loc_1856:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+6Ej
.text:00001856                                         ; CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+7Dj
.text:00001856                 jmp     short loc_1875
.text:00001858 ; ---------------------------------------------------------------------------
.text:00001858
.text:00001858 loc_1858:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+5Dj
.text:00001858                 mov     [ebp+var_8], 3
.text:0000185F                 cmp     [ebp+arg_C], 2
.text:00001863                 jnz     short loc_186E
.text:00001865                 mov     [ebp+var_C], offset $SG74848
.text:0000186C                 jmp     short loc_1875
.text:0000186E ; ---------------------------------------------------------------------------
.text:0000186E
.text:0000186E loc_186E:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+93j
.text:0000186E                 mov     [ebp+var_C], offset $SG74850 ; "Reading"
.text:00001875
.text:00001875 loc_1875:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint):loc_1856j
.text:00001875                                         ; CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+9Cj
.text:00001875                 mov     eax, [ebp+var_4]
.text:00001878                 mov     ecx, [eax+0C8h]
.text:0000187E                 cmp     ecx, [ebp+var_8]
.text:00001881                 setnb   dl
.text:00001884                 movzx   eax, dl
.text:00001887                 push    eax             ; bool
.text:00001888                 mov     ecx, [ebp+var_C]
.text:0000188B                 push    ecx             ; char *
.text:0000188C                 mov     edx, [ebp+arg_0]
.text:0000188F                 push    edx             ; wchar_t *
.text:00001890                 mov     ecx, [ebp+var_4]
.text:00001893                 add     ecx, 8          ; this
.text:00001896                 call    ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)
.text:0000189B
.text:0000189B loc_189B:                               ; CODE XREF: CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)+2Ej
.text:0000189B                 add     esp, 0Ch
.text:0000189E                 cmp     ebp, esp
.text:000018A0                 call    __RTC_CheckEsp
.text:000018A5                 mov     esp, ebp
.text:000018A7                 pop     ebp
.text:000018A8                 retn    10h
.text:000018A8 ?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z endp
.text:000018A8
.text:000018A8 ; ---------------------------------------------------------------------------
.text:000018AB                 align 10h
.text:000018B0
.text:000018B0 ; =============== S U B R O U T I N E =======================================
.text:000018B0
.text:000018B0 ; Attributes: bp-based frame
.text:000018B0
.text:000018B0 ; __int32 __thiscall CUpdateCallbackConsole::OpenFileError(CUpdateCallbackConsole *this, const struct UString *, unsigned __int32)
.text:000018B0                 public ?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
.text:000018B0 ?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z proc near
.text:000018B0
.text:000018B0 var_4           = dword ptr -4
.text:000018B0 arg_0           = dword ptr  8
.text:000018B0 arg_4           = dword ptr  0Ch
.text:000018B0
.text:000018B0                 push    ebp
.text:000018B1                 mov     ebp, esp
.text:000018B3                 push    ecx
.text:000018B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018BB                 mov     [ebp+var_4], ecx
.text:000018BE                 mov     eax, [ebp+arg_4]
.text:000018C1                 push    eax             ; unsigned __int32
.text:000018C2                 mov     ecx, [ebp+arg_0]
.text:000018C5                 push    ecx             ; struct UString *
.text:000018C6                 mov     ecx, [ebp+var_4]
.text:000018C9                 add     ecx, 8          ; this
.text:000018CC                 call    ?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)
.text:000018D1                 add     esp, 4
.text:000018D4                 cmp     ebp, esp
.text:000018D6                 call    __RTC_CheckEsp
.text:000018DB                 mov     esp, ebp
.text:000018DD                 pop     ebp
.text:000018DE                 retn    8
.text:000018DE ?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z endp
.text:000018DE
.text:000018DE ; ---------------------------------------------------------------------------
.text:000018E1                 align 10h
.text:000018F0
.text:000018F0 ; =============== S U B R O U T I N E =======================================
.text:000018F0
.text:000018F0 ; Attributes: bp-based frame
.text:000018F0
.text:000018F0 ; __int32 __thiscall CUpdateCallbackConsole::ReadingFileError(CUpdateCallbackConsole *this, const struct UString *, unsigned __int32)
.text:000018F0                 public ?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
.text:000018F0 ?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z proc near
.text:000018F0
.text:000018F0 var_4           = dword ptr -4
.text:000018F0 arg_0           = dword ptr  8
.text:000018F0 arg_4           = dword ptr  0Ch
.text:000018F0
.text:000018F0                 push    ebp
.text:000018F1                 mov     ebp, esp
.text:000018F3                 push    ecx
.text:000018F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018FB                 mov     [ebp+var_4], ecx
.text:000018FE                 mov     eax, [ebp+arg_4]
.text:00001901                 push    eax             ; unsigned __int32
.text:00001902                 mov     ecx, [ebp+arg_0]
.text:00001905                 push    ecx             ; struct UString *
.text:00001906                 mov     ecx, [ebp+var_4]
.text:00001909                 add     ecx, 8          ; this
.text:0000190C                 call    ?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z ; CCallbackConsoleBase::ReadingFileError_Base(UString const &,ulong)
.text:00001911                 add     esp, 4
.text:00001914                 cmp     ebp, esp
.text:00001916                 call    __RTC_CheckEsp
.text:0000191B                 mov     esp, ebp
.text:0000191D                 pop     ebp
.text:0000191E                 retn    8
.text:0000191E ?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z endp
.text:0000191E
.text:0000191E ; ---------------------------------------------------------------------------
.text:00001921                 align 10h
.text:00001930
.text:00001930 ; =============== S U B R O U T I N E =======================================
.text:00001930
.text:00001930 ; Attributes: bp-based frame
.text:00001930
.text:00001930 ; __int32 __thiscall CUpdateCallbackConsole::SetOperationResult(CUpdateCallbackConsole *this, int)
.text:00001930                 public ?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z
.text:00001930 ?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z proc near
.text:00001930
.text:00001930 var_14          = dword ptr -14h
.text:00001930 var_10          = dword ptr -10h
.text:00001930 var_C           = dword ptr -0Ch
.text:00001930 var_8           = dword ptr -8
.text:00001930 var_4           = dword ptr -4
.text:00001930
.text:00001930                 push    ebp
.text:00001931                 mov     ebp, esp
.text:00001933                 sub     esp, 14h
.text:00001936                 mov     eax, 0CCCCCCCCh
.text:0000193B                 mov     [ebp+var_14], eax
.text:0000193E                 mov     [ebp+var_10], eax
.text:00001941                 mov     [ebp+var_C], eax
.text:00001944                 mov     [ebp+var_8], eax
.text:00001947                 mov     [ebp+var_4], eax
.text:0000194A                 mov     [ebp+var_4], ecx
.text:0000194D                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00001952                 lea     ecx, [ebp+var_C] ; this
.text:00001955                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:0000195A                 mov     eax, [ebp+var_4]
.text:0000195D                 mov     ecx, [eax+18h]
.text:00001960                 add     ecx, 1
.text:00001963                 mov     edx, [eax+1Ch]
.text:00001966                 adc     edx, 0
.text:00001969                 mov     eax, [ebp+var_4]
.text:0000196C                 mov     [eax+18h], ecx
.text:0000196F                 mov     [eax+1Ch], edx
.text:00001972                 mov     [ebp+var_14], 0
.text:00001979                 lea     ecx, [ebp+var_C] ; this
.text:0000197C                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001981                 mov     eax, [ebp+var_14]
.text:00001984                 push    edx
.text:00001985                 mov     ecx, ebp
.text:00001987                 push    eax
.text:00001988                 lea     edx, $LN6_4
.text:0000198E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001993                 pop     eax
.text:00001994                 pop     edx
.text:00001995                 add     esp, 14h
.text:00001998                 cmp     ebp, esp
.text:0000199A                 call    __RTC_CheckEsp
.text:0000199F                 mov     esp, ebp
.text:000019A1                 pop     ebp
.text:000019A2                 retn    4
.text:000019A2 ?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z endp
.text:000019A2
.text:000019A2 ; ---------------------------------------------------------------------------
.text:000019A5                 align 4
.text:000019A8 $LN6_4          dd 1                    ; DATA XREF: CUpdateCallbackConsole::SetOperationResult(int)+58o
.text:000019AC                 dd offset $LN5_4
.text:000019B0 $LN5_4          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000019ACo
.text:000019B8                 dd offset $LN4_3        ; "lock"
.text:000019BC $LN4_3          db 'lock',0             ; DATA XREF: .text:000019B8o
.text:000019C1                 align 10h
.text:000019D0
.text:000019D0 ; =============== S U B R O U T I N E =======================================
.text:000019D0
.text:000019D0 ; Attributes: bp-based frame
.text:000019D0
.text:000019D0 ; __int32 __thiscall CUpdateCallbackConsole::ReportExtractResult(CUpdateCallbackConsole *this, int, int, const wchar_t *)
.text:000019D0                 public ?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z
.text:000019D0 ?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z proc near
.text:000019D0
.text:000019D0 var_24          = dword ptr -24h
.text:000019D0 var_20          = dword ptr -20h
.text:000019D0 var_1C          = dword ptr -1Ch
.text:000019D0 var_18          = dword ptr -18h
.text:000019D0 var_14          = dword ptr -14h
.text:000019D0 var_10          = dword ptr -10h
.text:000019D0 var_C           = dword ptr -0Ch
.text:000019D0 var_4           = dword ptr -4
.text:000019D0 arg_0           = dword ptr  8
.text:000019D0 arg_4           = dword ptr  0Ch
.text:000019D0 arg_8           = dword ptr  10h
.text:000019D0
.text:000019D0                 push    ebp
.text:000019D1                 mov     ebp, esp
.text:000019D3                 push    0FFFFFFFFh
.text:000019D5                 push    offset __ehhandler$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z
.text:000019DA                 mov     eax, large fs:0
.text:000019E0                 push    eax
.text:000019E1                 sub     esp, 18h
.text:000019E4                 mov     eax, 0CCCCCCCCh
.text:000019E9                 mov     [ebp+var_24], eax
.text:000019EC                 mov     [ebp+var_20], eax
.text:000019EF                 mov     [ebp+var_1C], eax
.text:000019F2                 mov     [ebp+var_18], eax
.text:000019F5                 mov     [ebp+var_14], eax
.text:000019F8                 mov     [ebp+var_10], eax
.text:000019FB                 mov     eax, dword ptr ds:___security_cookie
.text:00001A00                 xor     eax, ebp
.text:00001A02                 push    eax
.text:00001A03                 lea     eax, [ebp+var_C]
.text:00001A06                 mov     large fs:0, eax
.text:00001A0C                 mov     [ebp+var_10], ecx
.text:00001A0F                 cmp     [ebp+arg_0], 0
.text:00001A13                 jz      loc_1AE1
.text:00001A19                 mov     ecx, [ebp+var_10]
.text:00001A1C                 add     ecx, 8          ; this
.text:00001A1F                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:00001A24                 mov     eax, [ebp+var_10]
.text:00001A27                 cmp     dword ptr [eax+0BCh], 0
.text:00001A2E                 jz      loc_1ADD
.text:00001A34                 mov     ecx, [ebp+var_10]
.text:00001A37                 cmp     dword ptr [ecx+0B8h], 0
.text:00001A3E                 jz      short loc_1A4E
.text:00001A40                 mov     edx, [ebp+var_10]
.text:00001A43                 mov     ecx, [edx+0B8h] ; this
.text:00001A49                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00001A4E
.text:00001A4E loc_1A4E:                               ; CODE XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+6Ej
.text:00001A4E                 lea     ecx, [ebp+var_20]
.text:00001A51                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001A56                 mov     [ebp+var_4], 0
.text:00001A5D                 lea     eax, [ebp+var_20]
.text:00001A60                 push    eax             ; struct AString *
.text:00001A61                 mov     ecx, [ebp+arg_4]
.text:00001A64                 push    ecx             ; int
.text:00001A65                 mov     edx, [ebp+arg_0]
.text:00001A68                 push    edx             ; int
.text:00001A69                 call    ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z ; SetExtractErrorMessage(int,int,AString &)
.text:00001A6E                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001A73                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001A78                 mov     eax, [ebp+arg_8]
.text:00001A7B                 push    eax
.text:00001A7C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001A81                 push    offset $SG74882 ; " : "
.text:00001A86                 lea     ecx, [ebp+var_20]
.text:00001A89                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001A8E                 push    eax             ; Str
.text:00001A8F                 mov     ecx, [ebp+var_10]
.text:00001A92                 mov     ecx, [ecx+0BCh]
.text:00001A98                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001A9D                 mov     ecx, eax
.text:00001A9F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001AA4                 mov     ecx, eax
.text:00001AA6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001AAB                 mov     ecx, eax
.text:00001AAD                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001AB2                 mov     ecx, eax
.text:00001AB4                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001AB9                 mov     ecx, eax
.text:00001ABB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001AC0                 mov     edx, [ebp+var_10]
.text:00001AC3                 mov     ecx, [edx+0BCh] ; this
.text:00001AC9                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00001ACE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001AD5                 lea     ecx, [ebp+var_20] ; this
.text:00001AD8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001ADD
.text:00001ADD loc_1ADD:                               ; CODE XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+5Ej
.text:00001ADD                 xor     eax, eax
.text:00001ADF                 jmp     short loc_1AE3
.text:00001AE1 ; ---------------------------------------------------------------------------
.text:00001AE1
.text:00001AE1 loc_1AE1:                               ; CODE XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+43j
.text:00001AE1                 xor     eax, eax
.text:00001AE3
.text:00001AE3 loc_1AE3:                               ; CODE XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+10Fj
.text:00001AE3                 push    edx
.text:00001AE4                 mov     ecx, ebp
.text:00001AE6                 push    eax
.text:00001AE7                 lea     edx, $LN10
.text:00001AED                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001AF2                 pop     eax
.text:00001AF3                 pop     edx
.text:00001AF4                 mov     ecx, [ebp+var_C]
.text:00001AF7                 mov     large fs:0, ecx
.text:00001AFE                 pop     ecx
.text:00001AFF                 add     esp, 24h
.text:00001B02                 cmp     ebp, esp
.text:00001B04                 call    __RTC_CheckEsp
.text:00001B09                 mov     esp, ebp
.text:00001B0B                 pop     ebp
.text:00001B0C                 retn    0Ch
.text:00001B0C ?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z endp
.text:00001B0C
.text:00001B0C ; ---------------------------------------------------------------------------
.text:00001B0F                 align 10h
.text:00001B10 $LN10           dd 1                    ; DATA XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+117o
.text:00001B14                 dd offset $LN9_1
.text:00001B18 $LN9_1          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001B14o
.text:00001B20                 dd offset $LN7_6
.text:00001B24 $LN7_6          dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001B20o
.text:00001B30
.text:00001B30 ; =============== S U B R O U T I N E =======================================
.text:00001B30
.text:00001B30 ; Attributes: bp-based frame
.text:00001B30
.text:00001B30 ; __int32 __thiscall CUpdateCallbackConsole::ReportUpdateOpeartion(CUpdateCallbackConsole *this, wchar_t *, const wchar_t *, bool)
.text:00001B30                 public ?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z
.text:00001B30 ?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z proc near
.text:00001B30
.text:00001B30 var_2C          = dword ptr -2Ch
.text:00001B30 var_28          = dword ptr -28h
.text:00001B30 var_24          = dword ptr -24h
.text:00001B30 var_1C          = byte ptr -1Ch
.text:00001B30 var_1B          = byte ptr -1Bh
.text:00001B30 var_1A          = byte ptr -1Ah
.text:00001B30 var_8           = dword ptr -8
.text:00001B30 var_4           = dword ptr -4
.text:00001B30 arg_0           = dword ptr  8
.text:00001B30
.text:00001B30                 push    ebp
.text:00001B31                 mov     ebp, esp
.text:00001B33                 sub     esp, 2Ch
.text:00001B36                 push    edi
.text:00001B37                 push    ecx
.text:00001B38                 lea     edi, [ebp+var_2C]
.text:00001B3B                 mov     ecx, 0Bh
.text:00001B40                 mov     eax, 0CCCCCCCCh
.text:00001B45                 rep stosd
.text:00001B47                 pop     ecx
.text:00001B48                 mov     eax, dword ptr ds:___security_cookie
.text:00001B4D                 xor     eax, ebp
.text:00001B4F                 mov     [ebp+var_4], eax
.text:00001B52                 mov     [ebp+var_8], ecx
.text:00001B55                 mov     [ebp+var_28], 1
.text:00001B5C                 mov     eax, [ebp+arg_0]
.text:00001B5F                 mov     [ebp+var_2C], eax
.text:00001B62                 cmp     [ebp+var_2C], 7 ; switch 8 cases
.text:00001B66                 ja      short loc_1BE7  ; jumptable 00001B6B default case
.text:00001B68                 mov     ecx, [ebp+var_2C]
.text:00001B6B                 jmp     ds:$LN17_0[ecx*4] ; switch jump
.text:00001B72 ; ---------------------------------------------------------------------------
.text:00001B72
.text:00001B72 $LN9_2:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001B72                                         ; DATA XREF: .text:$LN17_0o
.text:00001B72                 mov     [ebp+var_24], offset $SG74899 ; jumptable 00001B6B case 0
.text:00001B79                 jmp     loc_1C05
.text:00001B7E ; ---------------------------------------------------------------------------
.text:00001B7E
.text:00001B7E $LN8_5:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001B7E                                         ; DATA XREF: .text:$LN17_0o
.text:00001B7E                 mov     [ebp+var_24], offset $SG74901 ; jumptable 00001B6B case 1
.text:00001B85                 jmp     short loc_1C05
.text:00001B87 ; ---------------------------------------------------------------------------
.text:00001B87
.text:00001B87 $LN7_7:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001B87                                         ; DATA XREF: .text:$LN17_0o
.text:00001B87                 mov     [ebp+var_24], offset $SG74903 ; jumptable 00001B6B case 2
.text:00001B8E                 mov     [ebp+var_28], 3
.text:00001B95                 jmp     short loc_1C05
.text:00001B97 ; ---------------------------------------------------------------------------
.text:00001B97
.text:00001B97 $LN6_5:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001B97                                         ; DATA XREF: .text:$LN17_0o
.text:00001B97                 mov     [ebp+var_24], offset $SG74905 ; jumptable 00001B6B case 3
.text:00001B9E                 mov     [ebp+var_28], 3
.text:00001BA5                 jmp     short loc_1C05
.text:00001BA7 ; ---------------------------------------------------------------------------
.text:00001BA7
.text:00001BA7 $LN5_5:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001BA7                                         ; DATA XREF: .text:$LN17_0o
.text:00001BA7                 mov     [ebp+var_24], offset $SG74907 ; jumptable 00001B6B case 4
.text:00001BAE                 mov     [ebp+var_28], 2
.text:00001BB5                 jmp     short loc_1C05
.text:00001BB7 ; ---------------------------------------------------------------------------
.text:00001BB7
.text:00001BB7 $LN4_4:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001BB7                                         ; DATA XREF: .text:$LN17_0o
.text:00001BB7                 mov     [ebp+var_24], offset $SG74909 ; jumptable 00001B6B case 5
.text:00001BBE                 mov     [ebp+var_28], 2
.text:00001BC5                 jmp     short loc_1C05
.text:00001BC7 ; ---------------------------------------------------------------------------
.text:00001BC7
.text:00001BC7 $LN3_0:                                 ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001BC7                                         ; DATA XREF: .text:$LN17_0o
.text:00001BC7                 mov     [ebp+var_24], offset $SG74911 ; jumptable 00001B6B case 6
.text:00001BCE                 mov     [ebp+var_28], 3
.text:00001BD5                 jmp     short loc_1C05
.text:00001BD7 ; ---------------------------------------------------------------------------
.text:00001BD7
.text:00001BD7 $LN2:                                   ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Bj
.text:00001BD7                                         ; DATA XREF: .text:$LN17_0o
.text:00001BD7                 mov     [ebp+var_24], offset $SG74913 ; jumptable 00001B6B case 7
.text:00001BDE                 mov     [ebp+var_28], 64h ; 'd'
.text:00001BE5                 jmp     short loc_1C05
.text:00001BE7 ; ---------------------------------------------------------------------------
.text:00001BE7
.text:00001BE7 loc_1BE7:                               ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+36j
.text:00001BE7                 mov     [ebp+var_1C], 6Fh ; 'o' ; jumptable 00001B6B default case
.text:00001BEB                 mov     [ebp+var_1B], 70h ; 'p'
.text:00001BEF                 lea     edx, [ebp+var_1A]
.text:00001BF2                 push    edx             ; char *
.text:00001BF3                 mov     eax, [ebp+arg_0]
.text:00001BF6                 xor     ecx, ecx
.text:00001BF8                 push    ecx
.text:00001BF9                 push    eax             ; unsigned __int64
.text:00001BFA                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00001BFF                 lea     edx, [ebp+var_1C]
.text:00001C02                 mov     [ebp+var_24], edx
.text:00001C05
.text:00001C05 loc_1C05:                               ; CODE XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+49j
.text:00001C05                                         ; CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+55j ...
.text:00001C05                 mov     eax, [ebp+var_8]
.text:00001C08                 mov     ecx, [eax+0C8h]
.text:00001C0E                 cmp     ecx, [ebp+var_28]
.text:00001C11                 setnb   dl
.text:00001C14                 movzx   eax, dl
.text:00001C17                 push    eax             ; bool
.text:00001C18                 mov     ecx, [ebp+var_24]
.text:00001C1B                 push    ecx             ; char *
.text:00001C1C                 mov     edx, [ebp+0Ch]
.text:00001C1F                 push    edx             ; wchar_t *
.text:00001C20                 mov     ecx, [ebp+var_8]
.text:00001C23                 add     ecx, 8          ; this
.text:00001C26                 call    ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)
.text:00001C2B                 push    edx
.text:00001C2C                 mov     ecx, ebp
.text:00001C2E                 push    eax
.text:00001C2F                 lea     edx, $LN16
.text:00001C35                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C3A                 pop     eax
.text:00001C3B                 pop     edx
.text:00001C3C                 pop     edi
.text:00001C3D                 mov     ecx, [ebp+var_4]
.text:00001C40                 xor     ecx, ebp
.text:00001C42                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001C47                 add     esp, 2Ch
.text:00001C4A                 cmp     ebp, esp
.text:00001C4C                 call    __RTC_CheckEsp
.text:00001C51                 mov     esp, ebp
.text:00001C53                 pop     ebp
.text:00001C54                 retn    0Ch
.text:00001C54 ?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z endp
.text:00001C54
.text:00001C54 ; ---------------------------------------------------------------------------
.text:00001C57                 align 4
.text:00001C58 $LN16           dd 1                    ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+FFo
.text:00001C5C                 dd offset $LN15_0
.text:00001C60 $LN15_0         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00001C5Co
.text:00001C68                 dd offset $LN14         ; "temp"
.text:00001C6C $LN14           db 'temp',0             ; DATA XREF: .text:00001C68o
.text:00001C71                 align 4
.text:00001C74 $LN17_0         dd offset $LN9_2        ; DATA XREF: CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+3Br
.text:00001C74                 dd offset $LN8_5        ; jump table for switch statement
.text:00001C74                 dd offset $LN7_7
.text:00001C74                 dd offset $LN6_5
.text:00001C74                 dd offset $LN5_5
.text:00001C74                 dd offset $LN4_4
.text:00001C74                 dd offset $LN3_0
.text:00001C74                 dd offset $LN2
.text:00001C94                 align 10h
.text:00001CA0
.text:00001CA0 ; =============== S U B R O U T I N E =======================================
.text:00001CA0
.text:00001CA0 ; Attributes: bp-based frame
.text:00001CA0
.text:00001CA0 ; __int32 __thiscall CUpdateCallbackConsole::CryptoGetTextPassword2(CUpdateCallbackConsole *this, int *, wchar_t **)
.text:00001CA0                 public ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.text:00001CA0 ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z proc near
.text:00001CA0
.text:00001CA0 var_38          = dword ptr -38h
.text:00001CA0 psz             = dword ptr -34h
.text:00001CA0 var_30          = dword ptr -30h
.text:00001CA0 var_2C          = dword ptr -2Ch
.text:00001CA0 var_28          = dword ptr -28h
.text:00001CA0 var_20          = byte ptr -20h
.text:00001CA0 var_14          = dword ptr -14h
.text:00001CA0 var_10          = dword ptr -10h
.text:00001CA0 var_C           = dword ptr -0Ch
.text:00001CA0 var_4           = dword ptr -4
.text:00001CA0 arg_0           = dword ptr  8
.text:00001CA0 arg_4           = dword ptr  0Ch
.text:00001CA0
.text:00001CA0 ; FUNCTION CHUNK AT .text:00001DBB SIZE 0000001E BYTES
.text:00001CA0
.text:00001CA0                 push    ebp
.text:00001CA1                 mov     ebp, esp
.text:00001CA3                 push    0FFFFFFFFh
.text:00001CA5                 push    offset __ehhandler$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.text:00001CAA                 mov     eax, large fs:0
.text:00001CB0                 push    eax
.text:00001CB1                 push    ecx
.text:00001CB2                 sub     esp, 28h
.text:00001CB5                 push    ebx
.text:00001CB6                 push    esi
.text:00001CB7                 push    edi
.text:00001CB8                 push    ecx
.text:00001CB9                 lea     edi, [ebp+var_38]
.text:00001CBC                 mov     ecx, 0Ah
.text:00001CC1                 mov     eax, 0CCCCCCCCh
.text:00001CC6                 rep stosd
.text:00001CC8                 pop     ecx
.text:00001CC9                 mov     eax, dword ptr ds:___security_cookie
.text:00001CCE                 xor     eax, ebp
.text:00001CD0                 push    eax
.text:00001CD1                 lea     eax, [ebp+var_C]
.text:00001CD4                 mov     large fs:0, eax
.text:00001CDA                 mov     [ebp+var_10], esp
.text:00001CDD                 mov     [ebp+var_14], ecx
.text:00001CE0                 mov     [ebp+var_4], 0
.text:00001CE7                 mov     eax, [ebp+arg_4]
.text:00001CEA                 mov     dword ptr [eax], 0
.text:00001CF0                 mov     ecx, [ebp+var_14]
.text:00001CF3                 movzx   edx, byte ptr [ecx+118h]
.text:00001CFA                 test    edx, edx
.text:00001CFC                 jnz     short loc_1D54
.text:00001CFE                 mov     eax, [ebp+var_14]
.text:00001D01                 movzx   ecx, byte ptr [eax+128h]
.text:00001D08                 test    ecx, ecx
.text:00001D0A                 jz      short loc_1D54
.text:00001D0C                 mov     edx, [ebp+var_14]
.text:00001D0F                 mov     eax, [edx+0B8h]
.text:00001D15                 push    eax
.text:00001D16                 lea     ecx, [ebp+var_20]
.text:00001D19                 push    ecx
.text:00001D1A                 call    ?GetPassword@@YG?AVUString@@PAVCStdOutStream@@@Z ; GetPassword(CStdOutStream *)
.text:00001D1F                 mov     [ebp+var_28], eax
.text:00001D22                 mov     edx, [ebp+var_28]
.text:00001D25                 mov     [ebp+var_2C], edx
.text:00001D28                 mov     byte ptr [ebp+var_4], 1
.text:00001D2C                 mov     eax, [ebp+var_2C]
.text:00001D2F                 push    eax
.text:00001D30                 mov     ecx, [ebp+var_14]
.text:00001D33                 add     ecx, 11Ch
.text:00001D39                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001D3E                 mov     byte ptr [ebp+var_4], 0
.text:00001D42                 lea     ecx, [ebp+var_20] ; this
.text:00001D45                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001D4A                 mov     ecx, [ebp+var_14]
.text:00001D4D                 mov     byte ptr [ecx+118h], 1
.text:00001D54
.text:00001D54 loc_1D54:                               ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+5Cj
.text:00001D54                                         ; CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+6Aj
.text:00001D54                 mov     edx, [ebp+var_14]
.text:00001D57                 movzx   eax, byte ptr [edx+118h]
.text:00001D5E                 push    eax             ; bool
.text:00001D5F                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:00001D64                 mov     [ebp+var_30], eax
.text:00001D67                 mov     ecx, [ebp+arg_0]
.text:00001D6A                 mov     edx, [ebp+var_30]
.text:00001D6D                 mov     [ecx], edx
.text:00001D6F                 mov     ecx, [ebp+var_14]
.text:00001D72                 add     ecx, 11Ch
.text:00001D78                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001D7D                 mov     [ebp+psz], eax
.text:00001D80                 mov     eax, [ebp+arg_4]
.text:00001D83                 push    eax             ; wchar_t **
.text:00001D84                 mov     ecx, [ebp+psz]
.text:00001D87                 push    ecx             ; psz
.text:00001D88                 call    ?StringToBstr@@YGJPB_WPAPA_W@Z ; StringToBstr(wchar_t const *,wchar_t * *)
.text:00001D8D                 mov     [ebp+var_38], eax
.text:00001D90                 mov     eax, [ebp+var_38]
.text:00001D93                 jmp     short loc_1DBB
.text:00001D93 ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z endp
.text:00001D93
.text:00001D95
.text:00001D95 ; =============== S U B R O U T I N E =======================================
.text:00001D95
.text:00001D95
.text:00001D95 __catch$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$0 proc near
.text:00001D95                                         ; DATA XREF: .xdata$x:00002588o
.text:00001D95                 mov     dword ptr [ebp-24h], 8007000Eh
.text:00001D9C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001DA3                 mov     eax, offset $LN10_0
.text:00001DA8                 retn
.text:00001DA8 __catch$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$0 endp
.text:00001DA8
.text:00001DA9 ; ---------------------------------------------------------------------------
.text:00001DA9                 mov     eax, offset __tryend$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$1
.text:00001DAE                 retn
.text:00001DAF ; ---------------------------------------------------------------------------
.text:00001DAF
.text:00001DAF __tryend$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$1:
.text:00001DAF                                         ; DATA XREF: .text:00001DA9o
.text:00001DAF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001DB6                 jmp     short loc_1DBB
.text:00001DB8 ; ---------------------------------------------------------------------------
.text:00001DB8
.text:00001DB8 $LN10_0:                                ; DATA XREF: __catch$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$0+Eo
.text:00001DB8                 mov     eax, [ebp-24h]
.text:00001DBB ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.text:00001DBB
.text:00001DBB loc_1DBB:                               ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+F3j
.text:00001DBB                                         ; .text:00001DB6j
.text:00001DBB                 mov     ecx, [ebp+var_C]
.text:00001DBE                 mov     large fs:0, ecx
.text:00001DC5                 pop     ecx
.text:00001DC6                 pop     edi
.text:00001DC7                 pop     esi
.text:00001DC8                 pop     ebx
.text:00001DC9                 add     esp, 38h
.text:00001DCC                 cmp     ebp, esp
.text:00001DCE                 call    __RTC_CheckEsp
.text:00001DD3                 mov     esp, ebp
.text:00001DD5                 pop     ebp
.text:00001DD6                 retn    8
.text:00001DD6 ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.text:00001DD6 ; ---------------------------------------------------------------------------
.text:00001DD9                 align 10h
.text:00001DE0
.text:00001DE0 ; =============== S U B R O U T I N E =======================================
.text:00001DE0
.text:00001DE0 ; Attributes: bp-based frame
.text:00001DE0
.text:00001DE0 ; __int32 __thiscall CUpdateCallbackConsole::CryptoGetTextPassword(CUpdateCallbackConsole *this, wchar_t **)
.text:00001DE0                 public ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.text:00001DE0 ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z proc near
.text:00001DE0
.text:00001DE0 var_34          = dword ptr -34h
.text:00001DE0 psz             = dword ptr -30h
.text:00001DE0 var_2C          = dword ptr -2Ch
.text:00001DE0 var_28          = dword ptr -28h
.text:00001DE0 var_24          = dword ptr -24h
.text:00001DE0 var_20          = dword ptr -20h
.text:00001DE0 var_1C          = dword ptr -1Ch
.text:00001DE0 var_18          = dword ptr -18h
.text:00001DE0 var_14          = dword ptr -14h
.text:00001DE0 var_10          = dword ptr -10h
.text:00001DE0 var_C           = dword ptr -0Ch
.text:00001DE0 var_4           = dword ptr -4
.text:00001DE0 arg_0           = dword ptr  8
.text:00001DE0
.text:00001DE0 ; FUNCTION CHUNK AT .text:00001EE1 SIZE 0000001E BYTES
.text:00001DE0
.text:00001DE0                 push    ebp
.text:00001DE1                 mov     ebp, esp
.text:00001DE3                 push    0FFFFFFFFh
.text:00001DE5                 push    offset __ehhandler$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.text:00001DEA                 mov     eax, large fs:0
.text:00001DF0                 push    eax
.text:00001DF1                 push    ecx
.text:00001DF2                 sub     esp, 24h
.text:00001DF5                 push    ebx
.text:00001DF6                 push    esi
.text:00001DF7                 push    edi
.text:00001DF8                 mov     eax, 0CCCCCCCCh
.text:00001DFD                 mov     [ebp+var_34], eax
.text:00001E00                 mov     [ebp+psz], eax
.text:00001E03                 mov     [ebp+var_2C], eax
.text:00001E06                 mov     [ebp+var_28], eax
.text:00001E09                 mov     [ebp+var_24], eax
.text:00001E0C                 mov     [ebp+var_20], eax
.text:00001E0F                 mov     [ebp+var_1C], eax
.text:00001E12                 mov     [ebp+var_18], eax
.text:00001E15                 mov     [ebp+var_14], eax
.text:00001E18                 mov     eax, dword ptr ds:___security_cookie
.text:00001E1D                 xor     eax, ebp
.text:00001E1F                 push    eax
.text:00001E20                 lea     eax, [ebp+var_C]
.text:00001E23                 mov     large fs:0, eax
.text:00001E29                 mov     [ebp+var_10], esp
.text:00001E2C                 mov     [ebp+var_14], ecx
.text:00001E2F                 mov     [ebp+var_4], 0
.text:00001E36                 mov     eax, [ebp+arg_0]
.text:00001E39                 mov     dword ptr [eax], 0
.text:00001E3F                 mov     ecx, [ebp+var_14]
.text:00001E42                 movzx   edx, byte ptr [ecx+118h]
.text:00001E49                 test    edx, edx
.text:00001E4B                 jnz     short loc_1E95
.text:00001E4D                 mov     eax, [ebp+var_14]
.text:00001E50                 mov     ecx, [eax+0B8h]
.text:00001E56                 push    ecx
.text:00001E57                 lea     edx, [ebp+var_20]
.text:00001E5A                 push    edx
.text:00001E5B                 call    ?GetPassword@@YG?AVUString@@PAVCStdOutStream@@@Z ; GetPassword(CStdOutStream *)
.text:00001E60                 mov     [ebp+var_28], eax
.text:00001E63                 mov     eax, [ebp+var_28]
.text:00001E66                 mov     [ebp+var_2C], eax
.text:00001E69                 mov     byte ptr [ebp+var_4], 1
.text:00001E6D                 mov     ecx, [ebp+var_2C]
.text:00001E70                 push    ecx
.text:00001E71                 mov     ecx, [ebp+var_14]
.text:00001E74                 add     ecx, 11Ch
.text:00001E7A                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001E7F                 mov     byte ptr [ebp+var_4], 0
.text:00001E83                 lea     ecx, [ebp+var_20] ; this
.text:00001E86                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001E8B                 mov     edx, [ebp+var_14]
.text:00001E8E                 mov     byte ptr [edx+118h], 1
.text:00001E95
.text:00001E95 loc_1E95:                               ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)+6Bj
.text:00001E95                 mov     ecx, [ebp+var_14]
.text:00001E98                 add     ecx, 11Ch
.text:00001E9E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001EA3                 mov     [ebp+psz], eax
.text:00001EA6                 mov     eax, [ebp+arg_0]
.text:00001EA9                 push    eax             ; wchar_t **
.text:00001EAA                 mov     ecx, [ebp+psz]
.text:00001EAD                 push    ecx             ; psz
.text:00001EAE                 call    ?StringToBstr@@YGJPB_WPAPA_W@Z ; StringToBstr(wchar_t const *,wchar_t * *)
.text:00001EB3                 mov     [ebp+var_34], eax
.text:00001EB6                 mov     eax, [ebp+var_34]
.text:00001EB9                 jmp     short loc_1EE1
.text:00001EB9 ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z endp
.text:00001EB9
.text:00001EBB
.text:00001EBB ; =============== S U B R O U T I N E =======================================
.text:00001EBB
.text:00001EBB
.text:00001EBB __catch$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$0 proc near
.text:00001EBB                                         ; DATA XREF: .xdata$x:000025E8o
.text:00001EBB                 mov     dword ptr [ebp-24h], 8007000Eh
.text:00001EC2                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001EC9                 mov     eax, offset $LN9_3
.text:00001ECE                 retn
.text:00001ECE __catch$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$0 endp
.text:00001ECE
.text:00001ECF ; ---------------------------------------------------------------------------
.text:00001ECF                 mov     eax, offset __tryend$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$1
.text:00001ED4                 retn
.text:00001ED5 ; ---------------------------------------------------------------------------
.text:00001ED5
.text:00001ED5 __tryend$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$1:
.text:00001ED5                                         ; DATA XREF: .text:00001ECFo
.text:00001ED5                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001EDC                 jmp     short loc_1EE1
.text:00001EDE ; ---------------------------------------------------------------------------
.text:00001EDE
.text:00001EDE $LN9_3:                                 ; DATA XREF: __catch$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$0+Eo
.text:00001EDE                 mov     eax, [ebp-24h]
.text:00001EE1 ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.text:00001EE1
.text:00001EE1 loc_1EE1:                               ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)+D9j
.text:00001EE1                                         ; .text:00001EDCj
.text:00001EE1                 mov     ecx, [ebp+var_C]
.text:00001EE4                 mov     large fs:0, ecx
.text:00001EEB                 pop     ecx
.text:00001EEC                 pop     edi
.text:00001EED                 pop     esi
.text:00001EEE                 pop     ebx
.text:00001EEF                 add     esp, 34h
.text:00001EF2                 cmp     ebp, esp
.text:00001EF4                 call    __RTC_CheckEsp
.text:00001EF9                 mov     esp, ebp
.text:00001EFB                 pop     ebp
.text:00001EFC                 retn    4
.text:00001EFC ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.text:00001EFC ; ---------------------------------------------------------------------------
.text:00001EFF                 align 10h
.text:00001F00
.text:00001F00 ; =============== S U B R O U T I N E =======================================
.text:00001F00
.text:00001F00 ; Attributes: bp-based frame
.text:00001F00
.text:00001F00 ; __int32 __thiscall CUpdateCallbackConsole::ShowDeleteFile(CUpdateCallbackConsole *this, const wchar_t *, bool)
.text:00001F00                 public ?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z
.text:00001F00 ?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z proc near
.text:00001F00
.text:00001F00 var_4           = dword ptr -4
.text:00001F00 arg_0           = dword ptr  8
.text:00001F00
.text:00001F00                 push    ebp
.text:00001F01                 mov     ebp, esp
.text:00001F03                 push    ecx
.text:00001F04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F0B                 mov     [ebp+var_4], ecx
.text:00001F0E                 mov     eax, [ebp+var_4]
.text:00001F11                 movzx   ecx, byte ptr [eax+0C0h]
.text:00001F18                 test    ecx, ecx
.text:00001F1A                 jz      short loc_1F20
.text:00001F1C                 xor     eax, eax
.text:00001F1E                 jmp     short loc_1F5F
.text:00001F20 ; ---------------------------------------------------------------------------
.text:00001F20
.text:00001F20 loc_1F20:                               ; CODE XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+1Aj
.text:00001F20                 mov     edx, [ebp+var_4]
.text:00001F23                 cmp     dword ptr [edx+0C8h], 7
.text:00001F2A                 jbe     short loc_1F5D
.text:00001F2C                 cmp     [ebp+arg_0], 0
.text:00001F30                 jz      short loc_1F3C
.text:00001F32                 mov     eax, [ebp+arg_0]
.text:00001F35                 movzx   ecx, word ptr [eax]
.text:00001F38                 test    ecx, ecx
.text:00001F3A                 jnz     short loc_1F45
.text:00001F3C
.text:00001F3C loc_1F3C:                               ; CODE XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+30j
.text:00001F3C                 mov     edx, ds:_kEmptyFileAlias
.text:00001F42                 mov     [ebp+arg_0], edx
.text:00001F45
.text:00001F45 loc_1F45:                               ; CODE XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+3Aj
.text:00001F45                 push    1               ; bool
.text:00001F47                 push    offset $SG74945 ; "D"
.text:00001F4C                 mov     eax, [ebp+arg_0]
.text:00001F4F                 push    eax             ; wchar_t *
.text:00001F50                 mov     ecx, [ebp+var_4]
.text:00001F53                 add     ecx, 8          ; this
.text:00001F56                 call    ?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)
.text:00001F5B                 jmp     short loc_1F5F
.text:00001F5D ; ---------------------------------------------------------------------------
.text:00001F5D
.text:00001F5D loc_1F5D:                               ; CODE XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+2Aj
.text:00001F5D                 xor     eax, eax
.text:00001F5F
.text:00001F5F loc_1F5F:                               ; CODE XREF: CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+1Ej
.text:00001F5F                                         ; CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)+5Bj
.text:00001F5F                 add     esp, 4
.text:00001F62                 cmp     ebp, esp
.text:00001F64                 call    __RTC_CheckEsp
.text:00001F69                 mov     esp, ebp
.text:00001F6B                 pop     ebp
.text:00001F6C                 retn    8
.text:00001F6C ?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z endp
.text:00001F6C
.text:00001F6C ; ---------------------------------------------------------------------------
.text:00001F6F                 align 10h
.text:00001F6F _text           ends
.text:00001F6F
.rtc$TMZ:00001F70 ; ===========================================================================
.rtc$TMZ:00001F70
.rtc$TMZ:00001F70 ; Segment type: Pure data
.rtc$TMZ:00001F70 ; Segment permissions: Read
.rtc$TMZ:00001F70 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001F70                 assume cs:_rtc$TMZ
.rtc$TMZ:00001F70                 ;org 1F70h
.rtc$TMZ:00001F70 ; COMDAT (pick any)
.rtc$TMZ:00001F70 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001F70 _rtc$TMZ        ends
.rtc$TMZ:00001F70
.rtc$IMZ:00001F74 ; ===========================================================================
.rtc$IMZ:00001F74
.rtc$IMZ:00001F74 ; Segment type: Pure data
.rtc$IMZ:00001F74 ; Segment permissions: Read
.rtc$IMZ:00001F74 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001F74                 assume cs:_rtc$IMZ
.rtc$IMZ:00001F74                 ;org 1F74h
.rtc$IMZ:00001F74 ; COMDAT (pick any)
.rtc$IMZ:00001F74 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001F74 _rtc$IMZ        ends
.rtc$IMZ:00001F74
.text:00001F78 ; ===========================================================================
.text:00001F78
.text:00001F78 ; Segment type: Pure code
.text:00001F78 ; Segment permissions: Read/Execute
.text:00001F78 _text           segment para public 'CODE' use32
.text:00001F78                 assume cs:_text
.text:00001F78                 ;org 1F78h
.text:00001F78 ; COMDAT (pick any)
.text:00001F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F78
.text:00001F78 ; =============== S U B R O U T I N E =======================================
.text:00001F78
.text:00001F78 ; Attributes: bp-based frame
.text:00001F78
.text:00001F78 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00001F78                 public ?IsEmpty@UString@@QBE_NXZ
.text:00001F78 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+86p
.text:00001F78                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+111p ...
.text:00001F78
.text:00001F78 var_4           = dword ptr -4
.text:00001F78
.text:00001F78                 push    ebp
.text:00001F79                 mov     ebp, esp
.text:00001F7B                 push    ecx
.text:00001F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F83                 mov     [ebp+var_4], ecx
.text:00001F86                 mov     eax, [ebp+var_4]
.text:00001F89                 xor     ecx, ecx
.text:00001F8B                 cmp     dword ptr [eax+4], 0
.text:00001F8F                 setz    cl
.text:00001F92                 mov     al, cl
.text:00001F94                 mov     esp, ebp
.text:00001F96                 pop     ebp
.text:00001F97                 retn
.text:00001F97 ?IsEmpty@UString@@QBE_NXZ endp
.text:00001F97
.text:00001F97 _text           ends
.text:00001F97
.text:00001F98 ; ===========================================================================
.text:00001F98
.text:00001F98 ; Segment type: Pure code
.text:00001F98 ; Segment permissions: Read/Execute
.text:00001F98 _text           segment para public 'CODE' use32
.text:00001F98                 assume cs:_text
.text:00001F98                 ;org 1F98h
.text:00001F98 ; COMDAT (pick any)
.text:00001F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F98
.text:00001F98 ; =============== S U B R O U T I N E =======================================
.text:00001F98
.text:00001F98 ; Attributes: bp-based frame
.text:00001F98
.text:00001F98 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00001F98                 public ??BUString@@QBEPB_WXZ
.text:00001F98 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+C6p
.text:00001F98                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+134p ...
.text:00001F98
.text:00001F98 var_4           = dword ptr -4
.text:00001F98
.text:00001F98                 push    ebp
.text:00001F99                 mov     ebp, esp
.text:00001F9B                 push    ecx
.text:00001F9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FA3                 mov     [ebp+var_4], ecx
.text:00001FA6                 mov     eax, [ebp+var_4]
.text:00001FA9                 mov     eax, [eax]
.text:00001FAB                 mov     esp, ebp
.text:00001FAD                 pop     ebp
.text:00001FAE                 retn
.text:00001FAE ??BUString@@QBEPB_WXZ endp
.text:00001FAE
.text:00001FAE ; ---------------------------------------------------------------------------
.text:00001FAF                 align 10h
.text:00001FAF _text           ends
.text:00001FAF
.text:00001FB0 ; ===========================================================================
.text:00001FB0
.text:00001FB0 ; Segment type: Pure code
.text:00001FB0 ; Segment permissions: Read/Execute
.text:00001FB0 _text           segment para public 'CODE' use32
.text:00001FB0                 assume cs:_text
.text:00001FB0                 ;org 1FB0h
.text:00001FB0 ; COMDAT (pick any)
.text:00001FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FB0
.text:00001FB0 ; =============== S U B R O U T I N E =======================================
.text:00001FB0
.text:00001FB0 ; Attributes: bp-based frame
.text:00001FB0
.text:00001FB0 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00001FB0                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00001FB0 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00001FB0                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+B0p
.text:00001FB0                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+DCp ...
.text:00001FB0
.text:00001FB0 var_4           = dword ptr -4
.text:00001FB0 arg_0           = dword ptr  8
.text:00001FB0
.text:00001FB0                 push    ebp
.text:00001FB1                 mov     ebp, esp
.text:00001FB3                 push    ecx
.text:00001FB4                 push    esi
.text:00001FB5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FBC                 mov     [ebp+var_4], ecx
.text:00001FBF                 mov     esi, esp
.text:00001FC1                 mov     eax, [ebp+var_4]
.text:00001FC4                 push    eax
.text:00001FC5                 call    [ebp+arg_0]
.text:00001FC8                 cmp     esi, esp
.text:00001FCA                 call    __RTC_CheckEsp
.text:00001FCF                 mov     eax, [ebp+var_4]
.text:00001FD2                 pop     esi
.text:00001FD3                 add     esp, 4
.text:00001FD6                 cmp     ebp, esp
.text:00001FD8                 call    __RTC_CheckEsp
.text:00001FDD                 mov     esp, ebp
.text:00001FDF                 pop     ebp
.text:00001FE0                 retn    4
.text:00001FE0 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:00001FE0
.text:00001FE0 ; ---------------------------------------------------------------------------
.text:00001FE3                 align 4
.text:00001FE3 _text           ends
.text:00001FE3
.text:00001FE4 ; ===========================================================================
.text:00001FE4
.text:00001FE4 ; Segment type: Pure code
.text:00001FE4 ; Segment permissions: Read/Execute
.text:00001FE4 _text           segment para public 'CODE' use32
.text:00001FE4                 assume cs:_text
.text:00001FE4                 ;org 1FE4h
.text:00001FE4 ; COMDAT (pick any)
.text:00001FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FE4
.text:00001FE4 ; =============== S U B R O U T I N E =======================================
.text:00001FE4
.text:00001FE4 ; Attributes: bp-based frame
.text:00001FE4
.text:00001FE4 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:00001FE4                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:00001FE4 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near
.text:00001FE4                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+14Dp
.text:00001FE4                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+272p ...
.text:00001FE4
.text:00001FE4 var_4           = dword ptr -4
.text:00001FE4 Str             = dword ptr  8
.text:00001FE4
.text:00001FE4                 push    ebp
.text:00001FE5                 mov     ebp, esp
.text:00001FE7                 push    ecx
.text:00001FE8                 push    esi
.text:00001FE9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FF0                 mov     [ebp+var_4], ecx
.text:00001FF3                 mov     esi, esp
.text:00001FF5                 mov     eax, [ebp+var_4]
.text:00001FF8                 mov     ecx, [eax]
.text:00001FFA                 push    ecx             ; File
.text:00001FFB                 mov     edx, [ebp+Str]
.text:00001FFE                 push    edx             ; Str
.text:00001FFF                 call    dword ptr ds:__imp__fputs
.text:00002005                 add     esp, 8
.text:00002008                 cmp     esi, esp
.text:0000200A                 call    __RTC_CheckEsp
.text:0000200F                 mov     eax, [ebp+var_4]
.text:00002012                 pop     esi
.text:00002013                 add     esp, 4
.text:00002016                 cmp     ebp, esp
.text:00002018                 call    __RTC_CheckEsp
.text:0000201D                 mov     esp, ebp
.text:0000201F                 pop     ebp
.text:00002020                 retn    4
.text:00002020 ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:00002020
.text:00002020 ; ---------------------------------------------------------------------------
.text:00002023                 align 4
.text:00002023 _text           ends
.text:00002023
.text:00002024 ; ===========================================================================
.text:00002024
.text:00002024 ; Segment type: Pure code
.text:00002024 ; Segment permissions: Read/Execute
.text:00002024 _text           segment para public 'CODE' use32
.text:00002024                 assume cs:_text
.text:00002024                 ;org 2024h
.text:00002024 ; COMDAT (pick any)
.text:00002024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002024
.text:00002024 ; =============== S U B R O U T I N E =======================================
.text:00002024
.text:00002024 ; Attributes: bp-based frame
.text:00002024
.text:00002024 ; unsigned int __thiscall CArcErrorInfo::GetWarningFlags(CArcErrorInfo *__hidden this)
.text:00002024                 public ?GetWarningFlags@CArcErrorInfo@@QBEIXZ
.text:00002024 ?GetWarningFlags@CArcErrorInfo@@QBEIXZ proc near
.text:00002024                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+197p
.text:00002024
.text:00002024 var_8           = dword ptr -8
.text:00002024 var_4           = dword ptr -4
.text:00002024
.text:00002024                 push    ebp
.text:00002025                 mov     ebp, esp
.text:00002027                 sub     esp, 8
.text:0000202A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002031                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002038
.text:00002038 loc_2038:                               ; DATA XREF: .rdata:$SG74699o
.text:00002038                 mov     [ebp+var_4], ecx
.text:0000203B                 mov     eax, [ebp+var_4]
.text:0000203E                 mov     ecx, [eax+8]
.text:00002041                 mov     [ebp+var_8], ecx
.text:00002044                 mov     ecx, [ebp+var_4] ; this
.text:00002047                 call    ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::NeedTailWarning(void)
.text:0000204C                 movzx   edx, al
.text:0000204F                 test    edx, edx
.text:00002051                 jz      short loc_2067
.text:00002053                 mov     eax, [ebp+var_4]
.text:00002056                 mov     ecx, [eax+4]
.text:00002059                 and     ecx, 40h
.text:0000205C                 jnz     short loc_2067
.text:0000205E                 mov     edx, [ebp+var_8]
.text:00002061                 or      edx, 40h
.text:00002064                 mov     [ebp+var_8], edx
.text:00002067
.text:00002067 loc_2067:                               ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+2Dj
.text:00002067                                         ; CArcErrorInfo::GetWarningFlags(void)+38j
.text:00002067                 mov     eax, [ebp+var_8]
.text:0000206A                 add     esp, 8
.text:0000206D                 cmp     ebp, esp
.text:0000206F                 call    __RTC_CheckEsp
.text:00002074                 mov     esp, ebp
.text:00002076                 pop     ebp
.text:00002077                 retn
.text:00002077 ?GetWarningFlags@CArcErrorInfo@@QBEIXZ endp
.text:00002077
.text:00002077 _text           ends
.text:00002077
.text:00002078 ; ===========================================================================
.text:00002078
.text:00002078 ; Segment type: Pure code
.text:00002078 ; Segment permissions: Read/Execute
.text:00002078 _text           segment para public 'CODE' use32
.text:00002078                 assume cs:_text
.text:00002078                 ;org 2078h
.text:00002078 ; COMDAT (pick any)
.text:00002078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002078
.text:00002078 ; =============== S U B R O U T I N E =======================================
.text:00002078
.text:00002078 ; Attributes: bp-based frame
.text:00002078
.text:00002078 ; bool __thiscall CArcErrorInfo::NeedTailWarning(CArcErrorInfo *__hidden this)
.text:00002078                 public ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ
.text:00002078 ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ proc near
.text:00002078                                         ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+23p
.text:00002078
.text:00002078 var_8           = dword ptr -8
.text:00002078 var_4           = dword ptr -4
.text:00002078
.text:00002078                 push    ebp
.text:00002079                 mov     ebp, esp
.text:0000207B                 sub     esp, 8
.text:0000207E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002085                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000208C                 mov     [ebp+var_4], ecx
.text:0000208F                 mov     eax, [ebp+var_4]
.text:00002092                 movzx   ecx, byte ptr [eax+2]
.text:00002096                 test    ecx, ecx
.text:00002098                 jnz     short loc_20AD
.text:0000209A                 mov     edx, [ebp+var_4]
.text:0000209D                 movzx   eax, byte ptr [edx]
.text:000020A0                 test    eax, eax
.text:000020A2                 jz      short loc_20AD
.text:000020A4                 mov     [ebp+var_8], 1
.text:000020AB                 jmp     short loc_20B4
.text:000020AD ; ---------------------------------------------------------------------------
.text:000020AD
.text:000020AD loc_20AD:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+20j
.text:000020AD                                         ; CArcErrorInfo::NeedTailWarning(void)+2Aj
.text:000020AD                 mov     [ebp+var_8], 0
.text:000020B4
.text:000020B4 loc_20B4:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+33j
.text:000020B4                 mov     al, byte ptr [ebp+var_8]
.text:000020B7                 mov     esp, ebp
.text:000020B9                 pop     ebp
.text:000020BA                 retn
.text:000020BA ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ endp
.text:000020BA
.text:000020BA ; ---------------------------------------------------------------------------
.text:000020BB                 align 4
.text:000020BB _text           ends
.text:000020BB
.text:000020BC ; ===========================================================================
.text:000020BC
.text:000020BC ; Segment type: Pure code
.text:000020BC ; Segment permissions: Read/Execute
.text:000020BC _text           segment para public 'CODE' use32
.text:000020BC                 assume cs:_text
.text:000020BC                 ;org 20BCh
.text:000020BC ; COMDAT (pick any)
.text:000020BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020BC
.text:000020BC ; =============== S U B R O U T I N E =======================================
.text:000020BC
.text:000020BC ; Attributes: bp-based frame
.text:000020BC
.text:000020BC ; unsigned int __thiscall CArcErrorInfo::GetErrorFlags(CArcErrorInfo *__hidden this)
.text:000020BC                 public ?GetErrorFlags@CArcErrorInfo@@QBEIXZ
.text:000020BC ?GetErrorFlags@CArcErrorInfo@@QBEIXZ proc near
.text:000020BC                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+72p
.text:000020BC
.text:000020BC var_8           = dword ptr -8
.text:000020BC var_4           = dword ptr -4
.text:000020BC
.text:000020BC                 push    ebp
.text:000020BD                 mov     ebp, esp
.text:000020BF                 sub     esp, 8
.text:000020C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000020C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020D0                 mov     [ebp+var_4], ecx
.text:000020D3                 mov     eax, [ebp+var_4]
.text:000020D6                 mov     ecx, [eax+4]
.text:000020D9                 mov     [ebp+var_8], ecx
.text:000020DC                 mov     edx, [ebp+var_4]
.text:000020DF                 movzx   eax, byte ptr [edx+1]
.text:000020E3                 test    eax, eax
.text:000020E5                 jz      short loc_20F0
.text:000020E7                 mov     ecx, [ebp+var_8]
.text:000020EA                 or      ecx, 20h
.text:000020ED                 mov     [ebp+var_8], ecx
.text:000020F0
.text:000020F0 loc_20F0:                               ; CODE XREF: CArcErrorInfo::GetErrorFlags(void)+29j
.text:000020F0                 mov     eax, [ebp+var_8]
.text:000020F3                 mov     esp, ebp
.text:000020F5                 pop     ebp
.text:000020F6                 retn
.text:000020F6 ?GetErrorFlags@CArcErrorInfo@@QBEIXZ endp
.text:000020F6
.text:000020F6 ; ---------------------------------------------------------------------------
.text:000020F7                 align 4
.text:000020F7 _text           ends
.text:000020F7
.text:000020F8 ; ===========================================================================
.text:000020F8
.text:000020F8 ; Segment type: Pure code
.text:000020F8 ; Segment permissions: Read/Execute
.text:000020F8 _text           segment para public 'CODE' use32
.text:000020F8                 assume cs:_text
.text:000020F8                 ;org 20F8h
.text:000020F8 ; COMDAT (pick any)
.text:000020F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020F8
.text:000020F8 ; =============== S U B R O U T I N E =======================================
.text:000020F8
.text:000020F8 ; Attributes: bp-based frame
.text:000020F8
.text:000020F8 ; void __thiscall CCallbackConsoleBase::ClosePercents2(CCallbackConsoleBase *__hidden this)
.text:000020F8                 public ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ
.text:000020F8 ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ proc near
.text:000020F8                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2Fp
.text:000020F8                                         ; CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+45p ...
.text:000020F8
.text:000020F8 var_4           = dword ptr -4
.text:000020F8
.text:000020F8                 push    ebp
.text:000020F9                 mov     ebp, esp
.text:000020FB                 push    ecx
.text:000020FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002103                 mov     [ebp+var_4], ecx
.text:00002106                 mov     ecx, [ebp+var_4] ; this
.text:00002109                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:0000210E                 movzx   eax, al
.text:00002111                 test    eax, eax
.text:00002113                 jz      short loc_211F
.text:00002115                 push    1               ; bool
.text:00002117                 mov     ecx, [ebp+var_4] ; this
.text:0000211A                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:0000211F
.text:0000211F loc_211F:                               ; CODE XREF: CCallbackConsoleBase::ClosePercents2(void)+1Bj
.text:0000211F                 add     esp, 4
.text:00002122                 cmp     ebp, esp
.text:00002124                 call    __RTC_CheckEsp
.text:00002129                 mov     esp, ebp
.text:0000212B                 pop     ebp
.text:0000212C                 retn
.text:0000212C ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ endp
.text:0000212C
.text:0000212C ; ---------------------------------------------------------------------------
.text:0000212D                 align 10h
.text:0000212D _text           ends
.text:0000212D
.text:00002130 ; ===========================================================================
.text:00002130
.text:00002130 ; Segment type: Pure code
.text:00002130 ; Segment permissions: Read/Execute
.text:00002130 _text           segment para public 'CODE' use32
.text:00002130                 assume cs:_text
.text:00002130                 ;org 2130h
.text:00002130 ; COMDAT (pick any)
.text:00002130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002130
.text:00002130 ; =============== S U B R O U T I N E =======================================
.text:00002130
.text:00002130 ; Attributes: bp-based frame
.text:00002130
.text:00002130 ; bool __thiscall CCallbackConsoleBase::NeedPercents(CCallbackConsoleBase *__hidden this)
.text:00002130                 public ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ
.text:00002130 ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ proc near
.text:00002130                                         ; CODE XREF: CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+15p
.text:00002130                                         ; CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+45p ...
.text:00002130
.text:00002130 var_4           = dword ptr -4
.text:00002130
.text:00002130                 push    ebp
.text:00002131                 mov     ebp, esp
.text:00002133                 push    ecx
.text:00002134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000213B                 mov     [ebp+var_4], ecx
.text:0000213E                 mov     eax, [ebp+var_4]
.text:00002141                 xor     ecx, ecx
.text:00002143                 cmp     dword ptr [eax+0A4h], 0
.text:0000214A                 setnz   cl
.text:0000214D                 mov     al, cl
.text:0000214F                 mov     esp, ebp
.text:00002151                 pop     ebp
.text:00002152                 retn
.text:00002152 ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ endp
.text:00002152
.text:00002152 ; ---------------------------------------------------------------------------
.text:00002153                 align 4
.text:00002153 _text           ends
.text:00002153
.text:00002154 ; ===========================================================================
.text:00002154
.text:00002154 ; Segment type: Pure code
.text:00002154 ; Segment permissions: Read/Execute
.text:00002154 _text           segment para public 'CODE' use32
.text:00002154                 assume cs:_text
.text:00002154                 ;org 2154h
.text:00002154 ; COMDAT (pick any)
.text:00002154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002154
.text:00002154 ; =============== S U B R O U T I N E =======================================
.text:00002154
.text:00002154 ; Attributes: bp-based frame
.text:00002154
.text:00002154 ; unsigned __int64 __thiscall CDirItemsStat::GetTotalBytes(CDirItemsStat *__hidden this)
.text:00002154                 public ?GetTotalBytes@CDirItemsStat@@QBE_KXZ
.text:00002154 ?GetTotalBytes@CDirItemsStat@@QBE_KXZ proc near
.text:00002154                                         ; CODE XREF: CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+47p
.text:00002154
.text:00002154 var_4           = dword ptr -4
.text:00002154
.text:00002154                 push    ebp
.text:00002155                 mov     ebp, esp
.text:00002157                 push    ecx
.text:00002158                 push    esi
.text:00002159                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002160                 mov     [ebp+var_4], ecx
.text:00002163                 mov     eax, [ebp+var_4]
.text:00002166                 mov     ecx, [ebp+var_4]
.text:00002169                 mov     edx, [eax+18h]
.text:0000216C                 add     edx, [ecx+20h]
.text:0000216F                 mov     esi, [eax+1Ch]
.text:00002172                 adc     esi, [ecx+24h]
.text:00002175                 mov     eax, edx
.text:00002177                 mov     edx, esi
.text:00002179                 pop     esi
.text:0000217A                 mov     esp, ebp
.text:0000217C                 pop     ebp
.text:0000217D                 retn
.text:0000217D ?GetTotalBytes@CDirItemsStat@@QBE_KXZ endp
.text:0000217D
.text:0000217D ; ---------------------------------------------------------------------------
.text:0000217E                 align 10h
.text:0000217E _text           ends
.text:0000217E
.text$x:00002180 ; ===========================================================================
.text$x:00002180
.text$x:00002180 ; Segment type: Pure code
.text$x:00002180 ; Segment permissions: Read/Execute
.text$x:00002180 _text$x         segment para public 'CODE' use32
.text$x:00002180                 assume cs:_text$x
.text$x:00002180                 ;org 2180h
.text$x:00002180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002180
.text$x:00002180 ; =============== S U B R O U T I N E =======================================
.text$x:00002180
.text$x:00002180
.text$x:00002180 __unwindfunclet$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z$0 proc near
.text$x:00002180                                         ; DATA XREF: .xdata$x:00002370o
.text$x:00002180                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00002183                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002183 __unwindfunclet$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z$0 endp
.text$x:00002183
.text$x:00002188
.text$x:00002188 ; =============== S U B R O U T I N E =======================================
.text$x:00002188
.text$x:00002188
.text$x:00002188 __ehhandler$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z proc near
.text$x:00002188                                         ; DATA XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+5o
.text$x:00002188
.text$x:00002188 arg_4           = dword ptr  8
.text$x:00002188
.text$x:00002188                 mov     edx, [esp+arg_4]
.text$x:0000218C                 lea     eax, [edx+0Ch]
.text$x:0000218F                 mov     ecx, [edx-20h]
.text$x:00002192                 xor     ecx, eax
.text$x:00002194                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002199                 mov     eax, offset __ehfuncinfo$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z
.text$x:0000219E                 jmp     ___CxxFrameHandler3
.text$x:0000219E __ehhandler$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z endp
.text$x:0000219E
.text$x:000021A3
.text$x:000021A3 ; =============== S U B R O U T I N E =======================================
.text$x:000021A3
.text$x:000021A3
.text$x:000021A3 __unwindfunclet$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 proc near
.text$x:000021A3                                         ; DATA XREF: .xdata$x:0000239Co
.text$x:000021A3                 lea     ecx, [ebp-18h]  ; this
.text$x:000021A6                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000021A6 __unwindfunclet$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 endp
.text$x:000021A6
.text$x:000021AB
.text$x:000021AB ; =============== S U B R O U T I N E =======================================
.text$x:000021AB
.text$x:000021AB
.text$x:000021AB __ehhandler$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text$x:000021AB                                         ; DATA XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+5o
.text$x:000021AB
.text$x:000021AB arg_4           = dword ptr  8
.text$x:000021AB
.text$x:000021AB                 mov     edx, [esp+arg_4]
.text$x:000021AF                 lea     eax, [edx+0Ch]
.text$x:000021B2                 mov     ecx, [edx-18h]
.text$x:000021B5                 xor     ecx, eax
.text$x:000021B7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000021BC                 mov     eax, offset __ehfuncinfo$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text$x:000021C1                 jmp     ___CxxFrameHandler3
.text$x:000021C1 __ehhandler$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text$x:000021C1
.text$x:000021C6
.text$x:000021C6 ; =============== S U B R O U T I N E =======================================
.text$x:000021C6
.text$x:000021C6
.text$x:000021C6 __unwindfunclet$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 proc near
.text$x:000021C6                                         ; DATA XREF: .xdata$x:000023C8o
.text$x:000021C6                 lea     ecx, [ebp-18h]  ; this
.text$x:000021C9                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000021C9 __unwindfunclet$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 endp
.text$x:000021C9
.text$x:000021CE
.text$x:000021CE ; =============== S U B R O U T I N E =======================================
.text$x:000021CE
.text$x:000021CE
.text$x:000021CE __ehhandler$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text$x:000021CE                                         ; DATA XREF: CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+5o
.text$x:000021CE
.text$x:000021CE arg_4           = dword ptr  8
.text$x:000021CE
.text$x:000021CE                 mov     edx, [esp+arg_4]
.text$x:000021D2                 lea     eax, [edx+0Ch]
.text$x:000021D5                 mov     ecx, [edx-18h]
.text$x:000021D8                 xor     ecx, eax
.text$x:000021DA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000021DF                 mov     eax, offset __ehfuncinfo$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text$x:000021E4                 jmp     ___CxxFrameHandler3
.text$x:000021E4 __ehhandler$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text$x:000021E4
.text$x:000021E9
.text$x:000021E9 ; =============== S U B R O U T I N E =======================================
.text$x:000021E9
.text$x:000021E9
.text$x:000021E9 __unwindfunclet$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 proc near
.text$x:000021E9                                         ; DATA XREF: .xdata$x:000023F4o
.text$x:000021E9                 lea     ecx, [ebp-18h]  ; this
.text$x:000021EC                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000021EC __unwindfunclet$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0 endp
.text$x:000021EC
.text$x:000021F1
.text$x:000021F1 ; =============== S U B R O U T I N E =======================================
.text$x:000021F1
.text$x:000021F1
.text$x:000021F1 __ehhandler$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z proc near
.text$x:000021F1                                         ; DATA XREF: CCallbackConsoleBase::ReadingFileError_Base(UString const &,ulong)+5o
.text$x:000021F1
.text$x:000021F1 arg_4           = dword ptr  8
.text$x:000021F1
.text$x:000021F1                 mov     edx, [esp+arg_4]
.text$x:000021F5                 lea     eax, [edx+0Ch]
.text$x:000021F8                 mov     ecx, [edx-18h]
.text$x:000021FB                 xor     ecx, eax
.text$x:000021FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002202                 mov     eax, offset __ehfuncinfo$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.text$x:00002207                 jmp     ___CxxFrameHandler3
.text$x:00002207 __ehhandler$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z endp
.text$x:00002207
.text$x:0000220C
.text$x:0000220C ; =============== S U B R O U T I N E =======================================
.text$x:0000220C
.text$x:0000220C
.text$x:0000220C __unwindfunclet$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z$0 proc near
.text$x:0000220C                                         ; DATA XREF: .xdata$x:00002420o
.text$x:0000220C                 lea     ecx, [ebp-20h]  ; this
.text$x:0000220F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000220F __unwindfunclet$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z$0 endp
.text$x:0000220F
.text$x:00002214
.text$x:00002214 ; =============== S U B R O U T I N E =======================================
.text$x:00002214
.text$x:00002214
.text$x:00002214 __ehhandler$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z proc near
.text$x:00002214                                         ; DATA XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+5o
.text$x:00002214
.text$x:00002214 arg_4           = dword ptr  8
.text$x:00002214
.text$x:00002214                 mov     edx, [esp+arg_4]
.text$x:00002218                 lea     eax, [edx+0Ch]
.text$x:0000221B                 mov     ecx, [edx-1Ch]
.text$x:0000221E                 xor     ecx, eax
.text$x:00002220                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002225                 mov     eax, offset __ehfuncinfo$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z
.text$x:0000222A                 jmp     ___CxxFrameHandler3
.text$x:0000222A __ehhandler$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z endp
.text$x:0000222A
.text$x:0000222F
.text$x:0000222F ; =============== S U B R O U T I N E =======================================
.text$x:0000222F
.text$x:0000222F
.text$x:0000222F __unwindfunclet$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z$0 proc near
.text$x:0000222F                                         ; DATA XREF: .xdata$x:0000244Co
.text$x:0000222F                 lea     ecx, [ebp-20h]  ; this
.text$x:00002232                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002232 __unwindfunclet$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z$0 endp
.text$x:00002232
.text$x:00002237
.text$x:00002237 ; =============== S U B R O U T I N E =======================================
.text$x:00002237
.text$x:00002237
.text$x:00002237 __ehhandler$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z proc near
.text$x:00002237                                         ; DATA XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+5o
.text$x:00002237
.text$x:00002237 arg_4           = dword ptr  8
.text$x:00002237
.text$x:00002237                 mov     edx, [esp+arg_4]
.text$x:0000223B                 lea     eax, [edx+0Ch]
.text$x:0000223E                 mov     ecx, [edx-1Ch]
.text$x:00002241                 xor     ecx, eax
.text$x:00002243                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002248                 mov     eax, offset __ehfuncinfo$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z
.text$x:0000224D                 jmp     ___CxxFrameHandler3
.text$x:0000224D __ehhandler$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z endp
.text$x:0000224D
.text$x:00002252
.text$x:00002252 ; =============== S U B R O U T I N E =======================================
.text$x:00002252
.text$x:00002252
.text$x:00002252 __unwindfunclet$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z$0 proc near
.text$x:00002252                                         ; DATA XREF: .xdata$x:00002478o
.text$x:00002252                 lea     ecx, [ebp-20h]  ; this
.text$x:00002255                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002255 __unwindfunclet$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z$0 endp
.text$x:00002255
.text$x:0000225A
.text$x:0000225A ; =============== S U B R O U T I N E =======================================
.text$x:0000225A
.text$x:0000225A
.text$x:0000225A __ehhandler$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z proc near
.text$x:0000225A                                         ; DATA XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+5o
.text$x:0000225A
.text$x:0000225A arg_4           = dword ptr  8
.text$x:0000225A
.text$x:0000225A                 mov     edx, [esp+arg_4]
.text$x:0000225E                 lea     eax, [edx+0Ch]
.text$x:00002261                 mov     ecx, [edx-1Ch]
.text$x:00002264                 xor     ecx, eax
.text$x:00002266                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000226B                 mov     eax, offset __ehfuncinfo$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
.text$x:00002270                 jmp     ___CxxFrameHandler3
.text$x:00002270 __ehhandler$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z endp
.text$x:00002270
.text$x:00002275
.text$x:00002275 ; =============== S U B R O U T I N E =======================================
.text$x:00002275
.text$x:00002275
.text$x:00002275 __unwindfunclet$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z$0 proc near
.text$x:00002275                                         ; DATA XREF: .xdata$x:000024A4o
.text$x:00002275                 lea     ecx, [ebp-20h]  ; this
.text$x:00002278                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002278 __unwindfunclet$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z$0 endp
.text$x:00002278
.text$x:0000227D
.text$x:0000227D ; =============== S U B R O U T I N E =======================================
.text$x:0000227D
.text$x:0000227D
.text$x:0000227D __ehhandler$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z proc near
.text$x:0000227D                                         ; DATA XREF: CUpdateCallbackConsole::SetNumItems(unsigned __int64)+5o
.text$x:0000227D
.text$x:0000227D arg_4           = dword ptr  8
.text$x:0000227D
.text$x:0000227D                 mov     edx, [esp+arg_4]
.text$x:00002281                 lea     eax, [edx+0Ch]
.text$x:00002284                 mov     ecx, [edx-1Ch]
.text$x:00002287                 xor     ecx, eax
.text$x:00002289                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000228E                 mov     eax, offset __ehfuncinfo$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z
.text$x:00002293                 jmp     ___CxxFrameHandler3
.text$x:00002293 __ehhandler$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z endp
.text$x:00002293
.text$x:00002298
.text$x:00002298 ; =============== S U B R O U T I N E =======================================
.text$x:00002298
.text$x:00002298
.text$x:00002298 __unwindfunclet$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z$0 proc near
.text$x:00002298                                         ; DATA XREF: .xdata$x:000024D0o
.text$x:00002298                 lea     ecx, [ebp-18h]  ; this
.text$x:0000229B                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:0000229B __unwindfunclet$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z$0 endp
.text$x:0000229B
.text$x:000022A0
.text$x:000022A0 ; =============== S U B R O U T I N E =======================================
.text$x:000022A0
.text$x:000022A0
.text$x:000022A0 __ehhandler$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z proc near
.text$x:000022A0                                         ; DATA XREF: CUpdateCallbackConsole::SetTotal(unsigned __int64)+5o
.text$x:000022A0
.text$x:000022A0 arg_4           = dword ptr  8
.text$x:000022A0
.text$x:000022A0                 mov     edx, [esp+arg_4]
.text$x:000022A4                 lea     eax, [edx+0Ch]
.text$x:000022A7                 mov     ecx, [edx-18h]
.text$x:000022AA                 xor     ecx, eax
.text$x:000022AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022B1                 mov     eax, offset __ehfuncinfo$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z
.text$x:000022B6                 jmp     ___CxxFrameHandler3
.text$x:000022B6 __ehhandler$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z endp
.text$x:000022B6
.text$x:000022BB
.text$x:000022BB ; =============== S U B R O U T I N E =======================================
.text$x:000022BB
.text$x:000022BB
.text$x:000022BB __unwindfunclet$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z$0 proc near
.text$x:000022BB                                         ; DATA XREF: .xdata$x:000024FCo
.text$x:000022BB                 lea     ecx, [ebp-18h]  ; this
.text$x:000022BE                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000022BE __unwindfunclet$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z$0 endp
.text$x:000022BE
.text$x:000022C3
.text$x:000022C3 ; =============== S U B R O U T I N E =======================================
.text$x:000022C3
.text$x:000022C3
.text$x:000022C3 __ehhandler$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z proc near
.text$x:000022C3                                         ; DATA XREF: CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)+5o
.text$x:000022C3
.text$x:000022C3 arg_4           = dword ptr  8
.text$x:000022C3
.text$x:000022C3                 mov     edx, [esp+arg_4]
.text$x:000022C7                 lea     eax, [edx+0Ch]
.text$x:000022CA                 mov     ecx, [edx-18h]
.text$x:000022CD                 xor     ecx, eax
.text$x:000022CF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022D4                 mov     eax, offset __ehfuncinfo$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z
.text$x:000022D9                 jmp     ___CxxFrameHandler3
.text$x:000022D9 __ehhandler$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z endp
.text$x:000022D9
.text$x:000022DE
.text$x:000022DE ; =============== S U B R O U T I N E =======================================
.text$x:000022DE
.text$x:000022DE
.text$x:000022DE __unwindfunclet$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z$0 proc near
.text$x:000022DE                                         ; DATA XREF: .xdata$x:00002528o
.text$x:000022DE                 lea     ecx, [ebp-18h]  ; this
.text$x:000022E1                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000022E1 __unwindfunclet$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z$0 endp
.text$x:000022E1
.text$x:000022E6
.text$x:000022E6 ; =============== S U B R O U T I N E =======================================
.text$x:000022E6
.text$x:000022E6
.text$x:000022E6 __ehhandler$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z proc near
.text$x:000022E6                                         ; DATA XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+5o
.text$x:000022E6
.text$x:000022E6 arg_4           = dword ptr  8
.text$x:000022E6
.text$x:000022E6                 mov     edx, [esp+arg_4]
.text$x:000022EA                 lea     eax, [edx+0Ch]
.text$x:000022ED                 mov     ecx, [edx-20h]
.text$x:000022F0                 xor     ecx, eax
.text$x:000022F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022F7                 mov     eax, offset __ehfuncinfo$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z
.text$x:000022FC                 jmp     ___CxxFrameHandler3
.text$x:000022FC __ehhandler$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z endp
.text$x:000022FC
.text$x:00002301
.text$x:00002301 ; =============== S U B R O U T I N E =======================================
.text$x:00002301
.text$x:00002301
.text$x:00002301 __unwindfunclet$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z$0 proc near
.text$x:00002301                                         ; DATA XREF: .xdata$x:00002554o
.text$x:00002301                 lea     ecx, [ebp-20h]  ; this
.text$x:00002304                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002304 __unwindfunclet$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z$0 endp
.text$x:00002304
.text$x:00002309
.text$x:00002309 ; =============== S U B R O U T I N E =======================================
.text$x:00002309
.text$x:00002309
.text$x:00002309 __ehhandler$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z proc near
.text$x:00002309                                         ; DATA XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+5o
.text$x:00002309
.text$x:00002309 arg_4           = dword ptr  8
.text$x:00002309
.text$x:00002309                 mov     edx, [esp+arg_4]
.text$x:0000230D                 lea     eax, [edx+0Ch]
.text$x:00002310                 mov     ecx, [edx-1Ch]
.text$x:00002313                 xor     ecx, eax
.text$x:00002315                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000231A                 mov     eax, offset __ehfuncinfo$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z
.text$x:0000231F                 jmp     ___CxxFrameHandler3
.text$x:0000231F __ehhandler$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z endp
.text$x:0000231F
.text$x:00002324
.text$x:00002324 ; =============== S U B R O U T I N E =======================================
.text$x:00002324
.text$x:00002324
.text$x:00002324 __unwindfunclet$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$2 proc near
.text$x:00002324                                         ; DATA XREF: .xdata$x:000025ACo
.text$x:00002324                 lea     ecx, [ebp-20h]  ; this
.text$x:00002327                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002327 __unwindfunclet$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$2 endp
.text$x:00002327
.text$x:0000232C
.text$x:0000232C ; =============== S U B R O U T I N E =======================================
.text$x:0000232C
.text$x:0000232C
.text$x:0000232C __ehhandler$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z proc near
.text$x:0000232C                                         ; DATA XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+5o
.text$x:0000232C
.text$x:0000232C arg_4           = dword ptr  8
.text$x:0000232C
.text$x:0000232C                 mov     edx, [esp+arg_4]
.text$x:00002330                 lea     eax, [edx+0Ch]
.text$x:00002333                 mov     ecx, [edx-3Ch]
.text$x:00002336                 xor     ecx, eax
.text$x:00002338                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000233D                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.text$x:00002342                 jmp     ___CxxFrameHandler3
.text$x:00002342 __ehhandler$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z endp
.text$x:00002342
.text$x:00002347
.text$x:00002347 ; =============== S U B R O U T I N E =======================================
.text$x:00002347
.text$x:00002347
.text$x:00002347 __unwindfunclet$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$2 proc near
.text$x:00002347                                         ; DATA XREF: .xdata$x:0000260Co
.text$x:00002347                 lea     ecx, [ebp-20h]  ; this
.text$x:0000234A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000234A __unwindfunclet$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$2 endp
.text$x:0000234A
.text$x:0000234F
.text$x:0000234F ; =============== S U B R O U T I N E =======================================
.text$x:0000234F
.text$x:0000234F
.text$x:0000234F __ehhandler$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z proc near
.text$x:0000234F                                         ; DATA XREF: CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)+5o
.text$x:0000234F
.text$x:0000234F arg_4           = dword ptr  8
.text$x:0000234F
.text$x:0000234F                 mov     edx, [esp+arg_4]
.text$x:00002353                 lea     eax, [edx+0Ch]
.text$x:00002356                 mov     ecx, [edx-38h]
.text$x:00002359                 xor     ecx, eax
.text$x:0000235B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002360                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.text$x:00002365                 jmp     ___CxxFrameHandler3
.text$x:00002365 __ehhandler$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z endp
.text$x:00002365
.text$x:00002365 ; ---------------------------------------------------------------------------
.text$x:0000236A                 align 4
.text$x:0000236A _text$x         ends
.text$x:0000236A
.xdata$x:0000236C ; ===========================================================================
.xdata$x:0000236C
.xdata$x:0000236C ; Segment type: Pure data
.xdata$x:0000236C ; Segment permissions: Read
.xdata$x:0000236C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000236C                 assume cs:_xdata$x
.xdata$x:0000236C                 ;org 236Ch
.xdata$x:0000236C __unwindtable$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z db 0FFh
.xdata$x:0000236C                                         ; DATA XREF: .xdata$x:0000237Co
.xdata$x:0000236D                 db 0FFh
.xdata$x:0000236E                 db 0FFh
.xdata$x:0000236F                 db 0FFh
.xdata$x:00002370                 dd offset __unwindfunclet$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z$0
.xdata$x:00002374 __ehfuncinfo$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z db  22h ; "
.xdata$x:00002374                                         ; DATA XREF: __ehhandler$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z+11o
.xdata$x:00002375                 db    5
.xdata$x:00002376                 db  93h ; ô
.xdata$x:00002377                 db  19h
.xdata$x:00002378                 db    1
.xdata$x:00002379                 db    0
.xdata$x:0000237A                 db    0
.xdata$x:0000237B                 db    0
.xdata$x:0000237C                 dd offset __unwindtable$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z
.xdata$x:00002380                 db    0
.xdata$x:00002381                 db    0
.xdata$x:00002382                 db    0
.xdata$x:00002383                 db    0
.xdata$x:00002384                 db    0
.xdata$x:00002385                 db    0
.xdata$x:00002386                 db    0
.xdata$x:00002387                 db    0
.xdata$x:00002388                 db    0
.xdata$x:00002389                 db    0
.xdata$x:0000238A                 db    0
.xdata$x:0000238B                 db    0
.xdata$x:0000238C                 db    0
.xdata$x:0000238D                 db    0
.xdata$x:0000238E                 db    0
.xdata$x:0000238F                 db    0
.xdata$x:00002390                 db    0
.xdata$x:00002391                 db    0
.xdata$x:00002392                 db    0
.xdata$x:00002393                 db    0
.xdata$x:00002394                 db    1
.xdata$x:00002395                 db    0
.xdata$x:00002396                 db    0
.xdata$x:00002397                 db    0
.xdata$x:00002398 __unwindtable$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db 0FFh
.xdata$x:00002398                                         ; DATA XREF: .xdata$x:000023A8o
.xdata$x:00002399                 db 0FFh
.xdata$x:0000239A                 db 0FFh
.xdata$x:0000239B                 db 0FFh
.xdata$x:0000239C                 dd offset __unwindfunclet$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0
.xdata$x:000023A0 __ehfuncinfo$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db  22h ; "
.xdata$x:000023A0                                         ; DATA XREF: __ehhandler$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z+11o
.xdata$x:000023A1                 db    5
.xdata$x:000023A2                 db  93h ; ô
.xdata$x:000023A3                 db  19h
.xdata$x:000023A4                 db    1
.xdata$x:000023A5                 db    0
.xdata$x:000023A6                 db    0
.xdata$x:000023A7                 db    0
.xdata$x:000023A8                 dd offset __unwindtable$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.xdata$x:000023AC                 align 20h
.xdata$x:000023C0                 db    1
.xdata$x:000023C1                 db    0
.xdata$x:000023C2                 db    0
.xdata$x:000023C3                 db    0
.xdata$x:000023C4 __unwindtable$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db 0FFh
.xdata$x:000023C4                                         ; DATA XREF: .xdata$x:000023D4o
.xdata$x:000023C5                 db 0FFh
.xdata$x:000023C6                 db 0FFh
.xdata$x:000023C7                 db 0FFh
.xdata$x:000023C8                 dd offset __unwindfunclet$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0
.xdata$x:000023CC __ehfuncinfo$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db  22h ; "
.xdata$x:000023CC                                         ; DATA XREF: __ehhandler$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z+11o
.xdata$x:000023CD                 db    5
.xdata$x:000023CE                 db  93h ; ô
.xdata$x:000023CF                 db  19h
.xdata$x:000023D0                 db    1
.xdata$x:000023D1                 db    0
.xdata$x:000023D2                 db    0
.xdata$x:000023D3                 db    0
.xdata$x:000023D4                 dd offset __unwindtable$?OpenFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.xdata$x:000023D8                 db    0
.xdata$x:000023D9                 db    0
.xdata$x:000023DA                 db    0
.xdata$x:000023DB                 db    0
.xdata$x:000023DC                 db    0
.xdata$x:000023DD                 db    0
.xdata$x:000023DE                 db    0
.xdata$x:000023DF                 db    0
.xdata$x:000023E0                 db    0
.xdata$x:000023E1                 db    0
.xdata$x:000023E2                 db    0
.xdata$x:000023E3                 db    0
.xdata$x:000023E4                 db    0
.xdata$x:000023E5                 db    0
.xdata$x:000023E6                 db    0
.xdata$x:000023E7                 db    0
.xdata$x:000023E8                 db    0
.xdata$x:000023E9                 db    0
.xdata$x:000023EA                 db    0
.xdata$x:000023EB                 db    0
.xdata$x:000023EC                 db    1
.xdata$x:000023ED                 db    0
.xdata$x:000023EE                 db    0
.xdata$x:000023EF                 db    0
.xdata$x:000023F0 __unwindtable$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db 0FFh
.xdata$x:000023F0                                         ; DATA XREF: .xdata$x:00002400o
.xdata$x:000023F1                 db 0FFh
.xdata$x:000023F2                 db 0FFh
.xdata$x:000023F3                 db 0FFh
.xdata$x:000023F4                 dd offset __unwindfunclet$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z$0
.xdata$x:000023F8 __ehfuncinfo$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z db  22h ; "
.xdata$x:000023F8                                         ; DATA XREF: __ehhandler$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z+11o
.xdata$x:000023F9                 db    5
.xdata$x:000023FA                 db  93h ; ô
.xdata$x:000023FB                 db  19h
.xdata$x:000023FC                 db    1
.xdata$x:000023FD                 db    0
.xdata$x:000023FE                 db    0
.xdata$x:000023FF                 db    0
.xdata$x:00002400                 dd offset __unwindtable$?ReadingFileError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z
.xdata$x:00002404                 db    0
.xdata$x:00002405                 db    0
.xdata$x:00002406                 db    0
.xdata$x:00002407                 db    0
.xdata$x:00002408                 db    0
.xdata$x:00002409                 db    0
.xdata$x:0000240A                 db    0
.xdata$x:0000240B                 db    0
.xdata$x:0000240C                 db    0
.xdata$x:0000240D                 db    0
.xdata$x:0000240E                 db    0
.xdata$x:0000240F                 db    0
.xdata$x:00002410                 db    0
.xdata$x:00002411                 db    0
.xdata$x:00002412                 db    0
.xdata$x:00002413                 db    0
.xdata$x:00002414                 db    0
.xdata$x:00002415                 db    0
.xdata$x:00002416                 db    0
.xdata$x:00002417                 db    0
.xdata$x:00002418                 db    1
.xdata$x:00002419                 db    0
.xdata$x:0000241A                 db    0
.xdata$x:0000241B                 db    0
.xdata$x:0000241C __unwindtable$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z db 0FFh
.xdata$x:0000241C                                         ; DATA XREF: .xdata$x:0000242Co
.xdata$x:0000241D                 db 0FFh
.xdata$x:0000241E                 db 0FFh
.xdata$x:0000241F                 db 0FFh
.xdata$x:00002420                 dd offset __unwindfunclet$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z$0
.xdata$x:00002424 __ehfuncinfo$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z db  22h ; "
.xdata$x:00002424                                         ; DATA XREF: __ehhandler$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z+11o
.xdata$x:00002425                 db    5
.xdata$x:00002426                 db  93h ; ô
.xdata$x:00002427                 db  19h
.xdata$x:00002428                 db    1
.xdata$x:00002429                 db    0
.xdata$x:0000242A                 db    0
.xdata$x:0000242B                 db    0
.xdata$x:0000242C                 dd offset __unwindtable$?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z
.xdata$x:00002430                 db    0
.xdata$x:00002431                 db    0
.xdata$x:00002432                 db    0
.xdata$x:00002433                 db    0
.xdata$x:00002434                 db    0
.xdata$x:00002435                 db    0
.xdata$x:00002436                 db    0
.xdata$x:00002437                 db    0
.xdata$x:00002438                 db    0
.xdata$x:00002439                 db    0
.xdata$x:0000243A                 db    0
.xdata$x:0000243B                 db    0
.xdata$x:0000243C                 db    0
.xdata$x:0000243D                 db    0
.xdata$x:0000243E                 db    0
.xdata$x:0000243F                 db    0
.xdata$x:00002440                 db    0
.xdata$x:00002441                 db    0
.xdata$x:00002442                 db    0
.xdata$x:00002443                 db    0
.xdata$x:00002444                 db    1
.xdata$x:00002445                 db    0
.xdata$x:00002446                 db    0
.xdata$x:00002447                 db    0
.xdata$x:00002448 __unwindtable$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z db 0FFh
.xdata$x:00002448                                         ; DATA XREF: .xdata$x:00002458o
.xdata$x:00002449                 db 0FFh
.xdata$x:0000244A                 db 0FFh
.xdata$x:0000244B                 db 0FFh
.xdata$x:0000244C                 dd offset __unwindfunclet$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z$0
.xdata$x:00002450 __ehfuncinfo$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z db  22h ; "
.xdata$x:00002450                                         ; DATA XREF: __ehhandler$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z+11o
.xdata$x:00002451                 db    5
.xdata$x:00002452                 db  93h ; ô
.xdata$x:00002453                 db  19h
.xdata$x:00002454                 db    1
.xdata$x:00002455                 db    0
.xdata$x:00002456                 db    0
.xdata$x:00002457                 db    0
.xdata$x:00002458                 dd offset __unwindtable$?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z
.xdata$x:0000245C                 db    0
.xdata$x:0000245D                 db    0
.xdata$x:0000245E                 db    0
.xdata$x:0000245F                 db    0
.xdata$x:00002460                 db    0
.xdata$x:00002461                 db    0
.xdata$x:00002462                 db    0
.xdata$x:00002463                 db    0
.xdata$x:00002464                 db    0
.xdata$x:00002465                 db    0
.xdata$x:00002466                 db    0
.xdata$x:00002467                 db    0
.xdata$x:00002468                 db    0
.xdata$x:00002469                 db    0
.xdata$x:0000246A                 db    0
.xdata$x:0000246B                 db    0
.xdata$x:0000246C                 db    0
.xdata$x:0000246D                 db    0
.xdata$x:0000246E                 db    0
.xdata$x:0000246F                 db    0
.xdata$x:00002470                 db    1
.xdata$x:00002471                 db    0
.xdata$x:00002472                 db    0
.xdata$x:00002473                 db    0
.xdata$x:00002474 __unwindtable$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z db 0FFh
.xdata$x:00002474                                         ; DATA XREF: .xdata$x:00002484o
.xdata$x:00002475                 db 0FFh
.xdata$x:00002476                 db 0FFh
.xdata$x:00002477                 db 0FFh
.xdata$x:00002478                 dd offset __unwindfunclet$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z$0
.xdata$x:0000247C __ehfuncinfo$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z db  22h ; "
.xdata$x:0000247C                                         ; DATA XREF: __ehhandler$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z+11o
.xdata$x:0000247D                 db    5
.xdata$x:0000247E                 db  93h ; ô
.xdata$x:0000247F                 db  19h
.xdata$x:00002480                 db    1
.xdata$x:00002481                 db    0
.xdata$x:00002482                 db    0
.xdata$x:00002483                 db    0
.xdata$x:00002484                 dd offset __unwindtable$?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
.xdata$x:00002488                 db    0
.xdata$x:00002489                 db    0
.xdata$x:0000248A                 db    0
.xdata$x:0000248B                 db    0
.xdata$x:0000248C                 db    0
.xdata$x:0000248D                 db    0
.xdata$x:0000248E                 db    0
.xdata$x:0000248F                 db    0
.xdata$x:00002490                 db    0
.xdata$x:00002491                 db    0
.xdata$x:00002492                 db    0
.xdata$x:00002493                 db    0
.xdata$x:00002494                 db    0
.xdata$x:00002495                 db    0
.xdata$x:00002496                 db    0
.xdata$x:00002497                 db    0
.xdata$x:00002498                 db    0
.xdata$x:00002499                 db    0
.xdata$x:0000249A                 db    0
.xdata$x:0000249B                 db    0
.xdata$x:0000249C                 db    1
.xdata$x:0000249D                 db    0
.xdata$x:0000249E                 db    0
.xdata$x:0000249F                 db    0
.xdata$x:000024A0 __unwindtable$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z db 0FFh
.xdata$x:000024A0                                         ; DATA XREF: .xdata$x:000024B0o
.xdata$x:000024A1                 db 0FFh
.xdata$x:000024A2                 db 0FFh
.xdata$x:000024A3                 db 0FFh
.xdata$x:000024A4                 dd offset __unwindfunclet$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z$0
.xdata$x:000024A8 __ehfuncinfo$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z db  22h ; "
.xdata$x:000024A8                                         ; DATA XREF: __ehhandler$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z+11o
.xdata$x:000024A9                 db    5
.xdata$x:000024AA                 db  93h ; ô
.xdata$x:000024AB                 db  19h
.xdata$x:000024AC                 db    1
.xdata$x:000024AD                 db    0
.xdata$x:000024AE                 db    0
.xdata$x:000024AF                 db    0
.xdata$x:000024B0                 dd offset __unwindtable$?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z
.xdata$x:000024B4                 db    0
.xdata$x:000024B5                 db    0
.xdata$x:000024B6                 db    0
.xdata$x:000024B7                 db    0
.xdata$x:000024B8                 db    0
.xdata$x:000024B9                 db    0
.xdata$x:000024BA                 db    0
.xdata$x:000024BB                 db    0
.xdata$x:000024BC                 db    0
.xdata$x:000024BD                 db    0
.xdata$x:000024BE                 db    0
.xdata$x:000024BF                 db    0
.xdata$x:000024C0                 db    0
.xdata$x:000024C1                 db    0
.xdata$x:000024C2                 db    0
.xdata$x:000024C3                 db    0
.xdata$x:000024C4                 db    0
.xdata$x:000024C5                 db    0
.xdata$x:000024C6                 db    0
.xdata$x:000024C7                 db    0
.xdata$x:000024C8                 db    1
.xdata$x:000024C9                 db    0
.xdata$x:000024CA                 db    0
.xdata$x:000024CB                 db    0
.xdata$x:000024CC __unwindtable$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z db 0FFh
.xdata$x:000024CC                                         ; DATA XREF: .xdata$x:000024DCo
.xdata$x:000024CD                 db 0FFh
.xdata$x:000024CE                 db 0FFh
.xdata$x:000024CF                 db 0FFh
.xdata$x:000024D0                 dd offset __unwindfunclet$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z$0
.xdata$x:000024D4 __ehfuncinfo$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z db  22h ; "
.xdata$x:000024D4                                         ; DATA XREF: __ehhandler$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z+11o
.xdata$x:000024D5                 db    5
.xdata$x:000024D6                 db  93h ; ô
.xdata$x:000024D7                 db  19h
.xdata$x:000024D8                 db    1
.xdata$x:000024D9                 db    0
.xdata$x:000024DA                 db    0
.xdata$x:000024DB                 db    0
.xdata$x:000024DC                 dd offset __unwindtable$?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z
.xdata$x:000024E0                 db    0
.xdata$x:000024E1                 db    0
.xdata$x:000024E2                 db    0
.xdata$x:000024E3                 db    0
.xdata$x:000024E4                 db    0
.xdata$x:000024E5                 db    0
.xdata$x:000024E6                 db    0
.xdata$x:000024E7                 db    0
.xdata$x:000024E8                 db    0
.xdata$x:000024E9                 db    0
.xdata$x:000024EA                 db    0
.xdata$x:000024EB                 db    0
.xdata$x:000024EC                 db    0
.xdata$x:000024ED                 db    0
.xdata$x:000024EE                 db    0
.xdata$x:000024EF                 db    0
.xdata$x:000024F0                 db    0
.xdata$x:000024F1                 db    0
.xdata$x:000024F2                 db    0
.xdata$x:000024F3                 db    0
.xdata$x:000024F4                 db    1
.xdata$x:000024F5                 db    0
.xdata$x:000024F6                 db    0
.xdata$x:000024F7                 db    0
.xdata$x:000024F8 __unwindtable$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z db 0FFh
.xdata$x:000024F8                                         ; DATA XREF: .xdata$x:00002508o
.xdata$x:000024F9                 db 0FFh
.xdata$x:000024FA                 db 0FFh
.xdata$x:000024FB                 db 0FFh
.xdata$x:000024FC                 dd offset __unwindfunclet$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z$0
.xdata$x:00002500 __ehfuncinfo$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z db  22h ; "
.xdata$x:00002500                                         ; DATA XREF: __ehhandler$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z+11o
.xdata$x:00002501                 db    5
.xdata$x:00002502                 db  93h ; ô
.xdata$x:00002503                 db  19h
.xdata$x:00002504                 db    1
.xdata$x:00002505                 db    0
.xdata$x:00002506                 db    0
.xdata$x:00002507                 db    0
.xdata$x:00002508                 dd offset __unwindtable$?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z
.xdata$x:0000250C                 align 20h
.xdata$x:00002520                 db    1
.xdata$x:00002521                 db    0
.xdata$x:00002522                 db    0
.xdata$x:00002523                 db    0
.xdata$x:00002524 __unwindtable$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z db 0FFh
.xdata$x:00002524                                         ; DATA XREF: .xdata$x:00002534o
.xdata$x:00002525                 db 0FFh
.xdata$x:00002526                 db 0FFh
.xdata$x:00002527                 db 0FFh
.xdata$x:00002528                 dd offset __unwindfunclet$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z$0
.xdata$x:0000252C __ehfuncinfo$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z db  22h ; "
.xdata$x:0000252C                                         ; DATA XREF: __ehhandler$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z+11o
.xdata$x:0000252D                 db    5
.xdata$x:0000252E                 db  93h ; ô
.xdata$x:0000252F                 db  19h
.xdata$x:00002530                 db    1
.xdata$x:00002531                 db    0
.xdata$x:00002532                 db    0
.xdata$x:00002533                 db    0
.xdata$x:00002534                 dd offset __unwindtable$?PrintProgress@CCallbackConsoleBase@@QAEJPB_WPBD_N@Z
.xdata$x:00002538                 db    0
.xdata$x:00002539                 db    0
.xdata$x:0000253A                 db    0
.xdata$x:0000253B                 db    0
.xdata$x:0000253C                 db    0
.xdata$x:0000253D                 db    0
.xdata$x:0000253E                 db    0
.xdata$x:0000253F                 db    0
.xdata$x:00002540                 db    0
.xdata$x:00002541                 db    0
.xdata$x:00002542                 db    0
.xdata$x:00002543                 db    0
.xdata$x:00002544                 db    0
.xdata$x:00002545                 db    0
.xdata$x:00002546                 db    0
.xdata$x:00002547                 db    0
.xdata$x:00002548                 db    0
.xdata$x:00002549                 db    0
.xdata$x:0000254A                 db    0
.xdata$x:0000254B                 db    0
.xdata$x:0000254C                 db    1
.xdata$x:0000254D                 db    0
.xdata$x:0000254E                 db    0
.xdata$x:0000254F                 db    0
.xdata$x:00002550 __unwindtable$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z db 0FFh
.xdata$x:00002550                                         ; DATA XREF: .xdata$x:00002560o
.xdata$x:00002551                 db 0FFh
.xdata$x:00002552                 db 0FFh
.xdata$x:00002553                 db 0FFh
.xdata$x:00002554                 dd offset __unwindfunclet$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z$0
.xdata$x:00002558 __ehfuncinfo$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z db  22h ; "
.xdata$x:00002558                                         ; DATA XREF: __ehhandler$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z+11o
.xdata$x:00002559                 db    5
.xdata$x:0000255A                 db  93h ; ô
.xdata$x:0000255B                 db  19h
.xdata$x:0000255C                 db    1
.xdata$x:0000255D                 db    0
.xdata$x:0000255E                 db    0
.xdata$x:0000255F                 db    0
.xdata$x:00002560                 dd offset __unwindtable$?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z
.xdata$x:00002564                 db    0
.xdata$x:00002565                 db    0
.xdata$x:00002566                 db    0
.xdata$x:00002567                 db    0
.xdata$x:00002568                 db    0
.xdata$x:00002569                 db    0
.xdata$x:0000256A                 db    0
.xdata$x:0000256B                 db    0
.xdata$x:0000256C                 db    0
.xdata$x:0000256D                 db    0
.xdata$x:0000256E                 db    0
.xdata$x:0000256F                 db    0
.xdata$x:00002570                 db    0
.xdata$x:00002571                 db    0
.xdata$x:00002572                 db    0
.xdata$x:00002573                 db    0
.xdata$x:00002574                 db    0
.xdata$x:00002575                 db    0
.xdata$x:00002576                 db    0
.xdata$x:00002577                 db    0
.xdata$x:00002578                 db    1
.xdata$x:00002579                 db    0
.xdata$x:0000257A                 db    0
.xdata$x:0000257B                 db    0
.xdata$x:0000257C __catchsym$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$3 dd offset unk_40
.xdata$x:0000257C                                         ; DATA XREF: .xdata$x:0000259Co
.xdata$x:00002580                 db    0
.xdata$x:00002581                 db    0
.xdata$x:00002582                 db    0
.xdata$x:00002583                 db    0
.xdata$x:00002584                 db    0
.xdata$x:00002585                 db    0
.xdata$x:00002586                 db    0
.xdata$x:00002587                 db    0
.xdata$x:00002588                 dd offset __catch$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$0
.xdata$x:0000258C __tryblocktable$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z db    0
.xdata$x:0000258C                                         ; DATA XREF: .xdata$x:000025C8o
.xdata$x:0000258D                 db    0
.xdata$x:0000258E                 db    0
.xdata$x:0000258F                 db    0
.xdata$x:00002590                 db    1
.xdata$x:00002591                 db    0
.xdata$x:00002592                 db    0
.xdata$x:00002593                 db    0
.xdata$x:00002594                 db    2
.xdata$x:00002595                 db    0
.xdata$x:00002596                 db    0
.xdata$x:00002597                 db    0
.xdata$x:00002598                 db    1
.xdata$x:00002599                 db    0
.xdata$x:0000259A                 db    0
.xdata$x:0000259B                 db    0
.xdata$x:0000259C                 dd offset __catchsym$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$3
.xdata$x:000025A0 __unwindtable$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z db 0FFh
.xdata$x:000025A0                                         ; DATA XREF: .xdata$x:000025C0o
.xdata$x:000025A1                 db 0FFh
.xdata$x:000025A2                 db 0FFh
.xdata$x:000025A3                 db 0FFh
.xdata$x:000025A4                 db    0
.xdata$x:000025A5                 db    0
.xdata$x:000025A6                 db    0
.xdata$x:000025A7                 db    0
.xdata$x:000025A8                 db    0
.xdata$x:000025A9                 db    0
.xdata$x:000025AA                 db    0
.xdata$x:000025AB                 db    0
.xdata$x:000025AC                 dd offset __unwindfunclet$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z$2
.xdata$x:000025B0                 db 0FFh
.xdata$x:000025B1                 db 0FFh
.xdata$x:000025B2                 db 0FFh
.xdata$x:000025B3                 db 0FFh
.xdata$x:000025B4                 db    0
.xdata$x:000025B5                 db    0
.xdata$x:000025B6                 db    0
.xdata$x:000025B7                 db    0
.xdata$x:000025B8 __ehfuncinfo$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z db  22h ; "
.xdata$x:000025B8                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z+11o
.xdata$x:000025B9                 db    5
.xdata$x:000025BA                 db  93h ; ô
.xdata$x:000025BB                 db  19h
.xdata$x:000025BC                 db    3
.xdata$x:000025BD                 db    0
.xdata$x:000025BE                 db    0
.xdata$x:000025BF                 db    0
.xdata$x:000025C0                 dd offset __unwindtable$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.xdata$x:000025C4                 db    1
.xdata$x:000025C5                 db    0
.xdata$x:000025C6                 db    0
.xdata$x:000025C7                 db    0
.xdata$x:000025C8                 dd offset __tryblocktable$?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
.xdata$x:000025CC                 db    0
.xdata$x:000025CD                 db    0
.xdata$x:000025CE                 db    0
.xdata$x:000025CF                 db    0
.xdata$x:000025D0                 db    0
.xdata$x:000025D1                 db    0
.xdata$x:000025D2                 db    0
.xdata$x:000025D3                 db    0
.xdata$x:000025D4                 db    0
.xdata$x:000025D5                 db    0
.xdata$x:000025D6                 db    0
.xdata$x:000025D7                 db    0
.xdata$x:000025D8                 db    1
.xdata$x:000025D9                 db    0
.xdata$x:000025DA                 db    0
.xdata$x:000025DB                 db    0
.xdata$x:000025DC __catchsym$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$3 dd offset unk_40
.xdata$x:000025DC                                         ; DATA XREF: .xdata$x:000025FCo
.xdata$x:000025E0                 db    0
.xdata$x:000025E1                 db    0
.xdata$x:000025E2                 db    0
.xdata$x:000025E3                 db    0
.xdata$x:000025E4                 db    0
.xdata$x:000025E5                 db    0
.xdata$x:000025E6                 db    0
.xdata$x:000025E7                 db    0
.xdata$x:000025E8                 dd offset __catch$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$0
.xdata$x:000025EC __tryblocktable$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z db    0
.xdata$x:000025EC                                         ; DATA XREF: .xdata$x:00002628o
.xdata$x:000025ED                 db    0
.xdata$x:000025EE                 db    0
.xdata$x:000025EF                 db    0
.xdata$x:000025F0                 db    1
.xdata$x:000025F1                 db    0
.xdata$x:000025F2                 db    0
.xdata$x:000025F3                 db    0
.xdata$x:000025F4                 db    2
.xdata$x:000025F5                 db    0
.xdata$x:000025F6                 db    0
.xdata$x:000025F7                 db    0
.xdata$x:000025F8                 db    1
.xdata$x:000025F9                 db    0
.xdata$x:000025FA                 db    0
.xdata$x:000025FB                 db    0
.xdata$x:000025FC                 dd offset __catchsym$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$3
.xdata$x:00002600 __unwindtable$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z db 0FFh
.xdata$x:00002600                                         ; DATA XREF: .xdata$x:00002620o
.xdata$x:00002601                 db 0FFh
.xdata$x:00002602                 db 0FFh
.xdata$x:00002603                 db 0FFh
.xdata$x:00002604                 db    0
.xdata$x:00002605                 db    0
.xdata$x:00002606                 db    0
.xdata$x:00002607                 db    0
.xdata$x:00002608                 db    0
.xdata$x:00002609                 db    0
.xdata$x:0000260A                 db    0
.xdata$x:0000260B                 db    0
.xdata$x:0000260C                 dd offset __unwindfunclet$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z$2
.xdata$x:00002610                 db 0FFh
.xdata$x:00002611                 db 0FFh
.xdata$x:00002612                 db 0FFh
.xdata$x:00002613                 db 0FFh
.xdata$x:00002614                 db    0
.xdata$x:00002615                 db    0
.xdata$x:00002616                 db    0
.xdata$x:00002617                 db    0
.xdata$x:00002618 __ehfuncinfo$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z db  22h ; "
.xdata$x:00002618                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z+11o
.xdata$x:00002619                 db    5
.xdata$x:0000261A                 db  93h ; ô
.xdata$x:0000261B                 db  19h
.xdata$x:0000261C                 db    3
.xdata$x:0000261D                 db    0
.xdata$x:0000261E                 db    0
.xdata$x:0000261F                 db    0
.xdata$x:00002620                 dd offset __unwindtable$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.xdata$x:00002624                 db    1
.xdata$x:00002625                 db    0
.xdata$x:00002626                 db    0
.xdata$x:00002627                 db    0
.xdata$x:00002628                 dd offset __tryblocktable$?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
.xdata$x:0000262C                 db    0
.xdata$x:0000262D                 db    0
.xdata$x:0000262E                 db    0
.xdata$x:0000262F                 db    0
.xdata$x:00002630                 db    0
.xdata$x:00002631                 db    0
.xdata$x:00002632                 db    0
.xdata$x:00002633                 db    0
.xdata$x:00002634                 db    0
.xdata$x:00002635                 db    0
.xdata$x:00002636                 db    0
.xdata$x:00002637                 db    0
.xdata$x:00002638                 db    1
.xdata$x:00002639                 db    0
.xdata$x:0000263A                 db    0
.xdata$x:0000263B                 db    0
.xdata$x:0000263B _xdata$x        ends
.xdata$x:0000263B
.text:0000263C ; ===========================================================================
.text:0000263C
.text:0000263C ; Segment type: Pure code
.text:0000263C ; Segment permissions: Read/Execute
.text:0000263C _text           segment para public 'CODE' use32
.text:0000263C                 assume cs:_text
.text:0000263C                 ;org 263Ch
.text:0000263C ; COMDAT (pick any)
.text:0000263C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000263C
.text:0000263C ; =============== S U B R O U T I N E =======================================
.text:0000263C
.text:0000263C ; Attributes: bp-based frame
.text:0000263C
.text:0000263C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000263C                 public ??1UString@@QAE@XZ
.text:0000263C ??1UString@@QAE@XZ proc near            ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+119p
.text:0000263C                                         ; CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+A5p ...
.text:0000263C
.text:0000263C var_8           = dword ptr -8
.text:0000263C var_4           = dword ptr -4
.text:0000263C
.text:0000263C                 push    ebp
.text:0000263D                 mov     ebp, esp
.text:0000263F                 sub     esp, 8
.text:00002642                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002649                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002650                 mov     [ebp+var_4], ecx
.text:00002653                 mov     eax, [ebp+var_4]
.text:00002656                 mov     ecx, [eax]
.text:00002658                 mov     [ebp+var_8], ecx
.text:0000265B                 mov     edx, [ebp+var_8]
.text:0000265E                 push    edx             ; void *
.text:0000265F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002664                 add     esp, 4
.text:00002667                 add     esp, 8
.text:0000266A                 cmp     ebp, esp
.text:0000266C                 call    __RTC_CheckEsp
.text:00002671                 mov     esp, ebp
.text:00002673                 pop     ebp
.text:00002674                 retn
.text:00002674 ??1UString@@QAE@XZ endp
.text:00002674
.text:00002674 ; ---------------------------------------------------------------------------
.text:00002675                 align 4
.text:00002675 _text           ends
.text:00002675
.text:00002678 ; ===========================================================================
.text:00002678
.text:00002678 ; Segment type: Pure code
.text:00002678 ; Segment permissions: Read/Execute
.text:00002678 _text           segment para public 'CODE' use32
.text:00002678                 assume cs:_text
.text:00002678                 ;org 2678h
.text:00002678 ; COMDAT (pick any)
.text:00002678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002678
.text:00002678 ; =============== S U B R O U T I N E =======================================
.text:00002678
.text:00002678 ; Attributes: bp-based frame
.text:00002678
.text:00002678 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:00002678                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:00002678 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:00002678                                         ; CODE XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+44p
.text:00002678                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+44p ...
.text:00002678
.text:00002678 var_4           = dword ptr -4
.text:00002678 arg_0           = dword ptr  8
.text:00002678
.text:00002678                 push    ebp
.text:00002679                 mov     ebp, esp
.text:0000267B                 push    ecx
.text:0000267C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002683                 mov     [ebp+var_4], ecx
.text:00002686                 mov     eax, [ebp+var_4]
.text:00002689                 mov     ecx, [ebp+arg_0]
.text:0000268C                 mov     [eax], ecx
.text:0000268E                 mov     edx, [ebp+var_4]
.text:00002691                 mov     ecx, [edx]      ; this
.text:00002693                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00002698                 mov     eax, [ebp+var_4]
.text:0000269B                 add     esp, 4
.text:0000269E                 cmp     ebp, esp
.text:000026A0                 call    __RTC_CheckEsp
.text:000026A5                 mov     esp, ebp
.text:000026A7                 pop     ebp
.text:000026A8                 retn    4
.text:000026A8 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:000026A8
.text:000026A8 ; ---------------------------------------------------------------------------
.text:000026AB                 align 4
.text:000026AB _text           ends
.text:000026AB
.text:000026AC ; ===========================================================================
.text:000026AC
.text:000026AC ; Segment type: Pure code
.text:000026AC ; Segment permissions: Read/Execute
.text:000026AC _text           segment para public 'CODE' use32
.text:000026AC                 assume cs:_text
.text:000026AC                 ;org 26ACh
.text:000026AC ; COMDAT (pick any)
.text:000026AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026AC
.text:000026AC ; =============== S U B R O U T I N E =======================================
.text:000026AC
.text:000026AC ; Attributes: bp-based frame
.text:000026AC
.text:000026AC ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000026AC                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:000026AC ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:000026AC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:000026AC
.text:000026AC lpCriticalSection= dword ptr -4
.text:000026AC
.text:000026AC                 push    ebp
.text:000026AD                 mov     ebp, esp
.text:000026AF                 push    ecx
.text:000026B0                 push    esi
.text:000026B1                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:000026B8                 mov     [ebp+lpCriticalSection], ecx
.text:000026BB                 mov     esi, esp
.text:000026BD                 mov     eax, [ebp+lpCriticalSection]
.text:000026C0                 push    eax             ; lpCriticalSection
.text:000026C1                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:000026C7                 cmp     esi, esp
.text:000026C9                 call    __RTC_CheckEsp
.text:000026CE                 pop     esi
.text:000026CF                 add     esp, 4
.text:000026D2                 cmp     ebp, esp
.text:000026D4                 call    __RTC_CheckEsp
.text:000026D9                 mov     esp, ebp
.text:000026DB                 pop     ebp
.text:000026DC                 retn
.text:000026DC ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000026DC
.text:000026DC ; ---------------------------------------------------------------------------
.text:000026DD                 align 10h
.text:000026DD _text           ends
.text:000026DD
.text:000026E0 ; ===========================================================================
.text:000026E0
.text:000026E0 ; Segment type: Pure code
.text:000026E0 ; Segment permissions: Read/Execute
.text:000026E0 _text           segment para public 'CODE' use32
.text:000026E0                 assume cs:_text
.text:000026E0                 ;org 26E0h
.text:000026E0 ; COMDAT (pick any)
.text:000026E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026E0
.text:000026E0 ; =============== S U B R O U T I N E =======================================
.text:000026E0
.text:000026E0 ; Attributes: bp-based frame
.text:000026E0
.text:000026E0 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:000026E0                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:000026E0 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:000026E0                                         ; CODE XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+89p
.text:000026E0                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+89p ...
.text:000026E0
.text:000026E0 var_4           = dword ptr -4
.text:000026E0
.text:000026E0                 push    ebp
.text:000026E1                 mov     ebp, esp
.text:000026E3                 push    ecx
.text:000026E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026EB                 mov     [ebp+var_4], ecx
.text:000026EE                 mov     ecx, [ebp+var_4] ; this
.text:000026F1                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:000026F6                 add     esp, 4
.text:000026F9                 cmp     ebp, esp
.text:000026FB                 call    __RTC_CheckEsp
.text:00002700                 mov     esp, ebp
.text:00002702                 pop     ebp
.text:00002703                 retn
.text:00002703 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:00002703
.text:00002703 _text           ends
.text:00002703
.text:00002704 ; ===========================================================================
.text:00002704
.text:00002704 ; Segment type: Pure code
.text:00002704 ; Segment permissions: Read/Execute
.text:00002704 _text           segment para public 'CODE' use32
.text:00002704                 assume cs:_text
.text:00002704                 ;org 2704h
.text:00002704 ; COMDAT (pick any)
.text:00002704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002704
.text:00002704 ; =============== S U B R O U T I N E =======================================
.text:00002704
.text:00002704 ; Attributes: bp-based frame
.text:00002704
.text:00002704 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00002704                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00002704 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00002704                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00002704
.text:00002704 var_4           = dword ptr -4
.text:00002704
.text:00002704                 push    ebp
.text:00002705                 mov     ebp, esp
.text:00002707                 push    ecx
.text:00002708                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000270F                 mov     [ebp+var_4], ecx
.text:00002712                 mov     eax, [ebp+var_4]
.text:00002715                 mov     ecx, [eax]      ; this
.text:00002717                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:0000271C                 add     esp, 4
.text:0000271F                 cmp     ebp, esp
.text:00002721                 call    __RTC_CheckEsp
.text:00002726                 mov     esp, ebp
.text:00002728                 pop     ebp
.text:00002729                 retn
.text:00002729 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00002729
.text:00002729 ; ---------------------------------------------------------------------------
.text:0000272A                 align 4
.text:0000272A _text           ends
.text:0000272A
.text:0000272C ; ===========================================================================
.text:0000272C
.text:0000272C ; Segment type: Pure code
.text:0000272C ; Segment permissions: Read/Execute
.text:0000272C _text           segment para public 'CODE' use32
.text:0000272C                 assume cs:_text
.text:0000272C                 ;org 272Ch
.text:0000272C ; COMDAT (pick any)
.text:0000272C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000272C
.text:0000272C ; =============== S U B R O U T I N E =======================================
.text:0000272C
.text:0000272C ; Attributes: bp-based frame
.text:0000272C
.text:0000272C ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:0000272C                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:0000272C ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:0000272C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:0000272C
.text:0000272C lpCriticalSection= dword ptr -4
.text:0000272C
.text:0000272C                 push    ebp
.text:0000272D                 mov     ebp, esp
.text:0000272F                 push    ecx
.text:00002730                 push    esi
.text:00002731                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002738                 mov     [ebp+lpCriticalSection], ecx
.text:0000273B                 mov     esi, esp
.text:0000273D                 mov     eax, [ebp+lpCriticalSection]
.text:00002740                 push    eax             ; lpCriticalSection
.text:00002741                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00002747                 cmp     esi, esp
.text:00002749                 call    __RTC_CheckEsp
.text:0000274E                 pop     esi
.text:0000274F                 add     esp, 4
.text:00002752                 cmp     ebp, esp
.text:00002754                 call    __RTC_CheckEsp
.text:00002759                 mov     esp, ebp
.text:0000275B                 pop     ebp
.text:0000275C                 retn
.text:0000275C ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:0000275C
.text:0000275C ; ---------------------------------------------------------------------------
.text:0000275D                 align 10h
.text:0000275D _text           ends
.text:0000275D
.text:00002760 ; ===========================================================================
.text:00002760
.text:00002760 ; Segment type: Pure code
.text:00002760 ; Segment permissions: Read/Execute
.text:00002760 _text           segment para public 'CODE' use32
.text:00002760                 assume cs:_text
.text:00002760                 ;org 2760h
.text:00002760 ; COMDAT (pick any)
.text:00002760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002760
.text:00002760 ; =============== S U B R O U T I N E =======================================
.text:00002760
.text:00002760 ; Attributes: bp-based frame
.text:00002760
.text:00002760 ; void __thiscall CErrorPathCodes::AddError(CErrorPathCodes *this, const struct UString *, unsigned __int32)
.text:00002760                 public ?AddError@CErrorPathCodes@@QAEXABVUString@@K@Z
.text:00002760 ?AddError@CErrorPathCodes@@QAEXABVUString@@K@Z proc near
.text:00002760                                         ; CODE XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+61p
.text:00002760                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+61p
.text:00002760
.text:00002760 var_4           = dword ptr -4
.text:00002760 arg_0           = dword ptr  8
.text:00002760 arg_4           = dword ptr  0Ch
.text:00002760
.text:00002760                 push    ebp
.text:00002761                 mov     ebp, esp
.text:00002763                 push    ecx
.text:00002764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000276B                 mov     [ebp+var_4], ecx
.text:0000276E                 mov     eax, [ebp+arg_0]
.text:00002771                 push    eax
.text:00002772                 mov     ecx, [ebp+var_4]
.text:00002775                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:0000277A                 mov     ecx, [ebp+arg_4]
.text:0000277D                 push    ecx
.text:0000277E                 mov     ecx, [ebp+var_4]
.text:00002781                 add     ecx, 0Ch
.text:00002784                 call    ?Add@?$CRecordVector@K@@QAEIK@Z ; CRecordVector<ulong>::Add(ulong)
.text:00002789                 add     esp, 4
.text:0000278C                 cmp     ebp, esp
.text:0000278E                 call    __RTC_CheckEsp
.text:00002793                 mov     esp, ebp
.text:00002795                 pop     ebp
.text:00002796                 retn    8
.text:00002796 ?AddError@CErrorPathCodes@@QAEXABVUString@@K@Z endp
.text:00002796
.text:00002796 ; ---------------------------------------------------------------------------
.text:00002799                 align 4
.text:00002799 _text           ends
.text:00002799
.text:0000279C ; ===========================================================================
.text:0000279C
.text:0000279C ; Segment type: Pure code
.text:0000279C ; Segment permissions: Read/Execute
.text:0000279C _text           segment para public 'CODE' use32
.text:0000279C                 assume cs:_text
.text:0000279C                 ;org 279Ch
.text:0000279C ; COMDAT (pick any)
.text:0000279C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000279C
.text:0000279C ; =============== S U B R O U T I N E =======================================
.text:0000279C
.text:0000279C ; Attributes: bp-based frame
.text:0000279C
.text:0000279C ; __stdcall HRESULT_FROM_WIN32(x)
.text:0000279C                 public _HRESULT_FROM_WIN32@4
.text:0000279C _HRESULT_FROM_WIN32@4 proc near         ; CODE XREF: CCallbackConsoleBase::ReadingFileError_Base(UString const &,ulong)+66p
.text:0000279C
.text:0000279C var_4           = dword ptr -4
.text:0000279C arg_0           = dword ptr  8
.text:0000279C
.text:0000279C                 push    ebp
.text:0000279D                 mov     ebp, esp
.text:0000279F                 push    ecx
.text:000027A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027A7                 cmp     [ebp+arg_0], 0
.text:000027AB                 jg      short loc_27B5
.text:000027AD                 mov     eax, [ebp+arg_0]
.text:000027B0                 mov     [ebp+var_4], eax
.text:000027B3                 jmp     short loc_27CD
.text:000027B5 ; ---------------------------------------------------------------------------
.text:000027B5
.text:000027B5 loc_27B5:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+Fj
.text:000027B5                 mov     ecx, [ebp+arg_0]
.text:000027B8                 and     ecx, 0FFFFh
.text:000027BE                 or      ecx, 70000h
.text:000027C4                 or      ecx, 80000000h
.text:000027CA                 mov     [ebp+var_4], ecx
.text:000027CD
.text:000027CD loc_27CD:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+17j
.text:000027CD                 mov     eax, [ebp+var_4]
.text:000027D0                 mov     esp, ebp
.text:000027D2                 pop     ebp
.text:000027D3                 retn    4
.text:000027D3 _HRESULT_FROM_WIN32@4 endp
.text:000027D3
.text:000027D3 ; ---------------------------------------------------------------------------
.text:000027D6                 align 4
.text:000027D6 _text           ends
.text:000027D6
.text:000027D8 ; ===========================================================================
.text:000027D8
.text:000027D8 ; Segment type: Pure code
.text:000027D8 ; Segment permissions: Read/Execute
.text:000027D8 _text           segment para public 'CODE' use32
.text:000027D8                 assume cs:_text
.text:000027D8                 ;org 27D8h
.text:000027D8 ; COMDAT (pick any)
.text:000027D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027D8
.text:000027D8 ; =============== S U B R O U T I N E =======================================
.text:000027D8
.text:000027D8 ; Attributes: bp-based frame
.text:000027D8
.text:000027D8 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000027D8                 public ??1AString@@QAE@XZ
.text:000027D8 ??1AString@@QAE@XZ proc near            ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+CAp
.text:000027D8                                         ; CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+E6p ...
.text:000027D8
.text:000027D8 var_8           = dword ptr -8
.text:000027D8 var_4           = dword ptr -4
.text:000027D8
.text:000027D8                 push    ebp
.text:000027D9                 mov     ebp, esp
.text:000027DB                 sub     esp, 8
.text:000027DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000027E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027EC                 mov     [ebp+var_4], ecx
.text:000027EF                 mov     eax, [ebp+var_4]
.text:000027F2                 mov     ecx, [eax]
.text:000027F4                 mov     [ebp+var_8], ecx
.text:000027F7                 mov     edx, [ebp+var_8]
.text:000027FA                 push    edx             ; void *
.text:000027FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002800                 add     esp, 4
.text:00002803                 add     esp, 8
.text:00002806                 cmp     ebp, esp
.text:00002808                 call    __RTC_CheckEsp
.text:0000280D                 mov     esp, ebp
.text:0000280F                 pop     ebp
.text:00002810                 retn
.text:00002810 ??1AString@@QAE@XZ endp
.text:00002810
.text:00002810 ; ---------------------------------------------------------------------------
.text:00002811                 align 4
.text:00002811 _text           ends
.text:00002811
.text:00002814 ; ===========================================================================
.text:00002814
.text:00002814 ; Segment type: Pure code
.text:00002814 ; Segment permissions: Read/Execute
.text:00002814 _text           segment para public 'CODE' use32
.text:00002814                 assume cs:_text
.text:00002814                 ;org 2814h
.text:00002814 ; COMDAT (pick any)
.text:00002814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002814
.text:00002814 ; =============== S U B R O U T I N E =======================================
.text:00002814
.text:00002814 ; Attributes: bp-based frame
.text:00002814
.text:00002814 ; public: __thiscall AString::operator char const *(void)const
.text:00002814                 public ??BAString@@QBEPBDXZ
.text:00002814 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+9Ep
.text:00002814                                         ; CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+C8p ...
.text:00002814
.text:00002814 var_4           = dword ptr -4
.text:00002814
.text:00002814                 push    ebp
.text:00002815                 mov     ebp, esp
.text:00002817                 push    ecx
.text:00002818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000281F                 mov     [ebp+var_4], ecx
.text:00002822                 mov     eax, [ebp+var_4]
.text:00002825                 mov     eax, [eax]
.text:00002827                 mov     esp, ebp
.text:00002829                 pop     ebp
.text:0000282A                 retn
.text:0000282A ??BAString@@QBEPBDXZ endp
.text:0000282A
.text:0000282A ; ---------------------------------------------------------------------------
.text:0000282B                 align 4
.text:0000282B _text           ends
.text:0000282B
.text:0000282C ; ===========================================================================
.text:0000282C
.text:0000282C ; Segment type: Pure code
.text:0000282C ; Segment permissions: Read/Execute
.text:0000282C _text           segment para public 'CODE' use32
.text:0000282C                 assume cs:_text
.text:0000282C                 ;org 282Ch
.text:0000282C ; COMDAT (pick any)
.text:0000282C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000282C
.text:0000282C ; =============== S U B R O U T I N E =======================================
.text:0000282C
.text:0000282C ; Attributes: bp-based frame
.text:0000282C
.text:0000282C ; void __thiscall CCallbackConsoleBase::ClosePercents_for_so(CCallbackConsoleBase *__hidden this)
.text:0000282C                 public ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ
.text:0000282C ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ proc near
.text:0000282C                                         ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+34p
.text:0000282C                                         ; CUpdateCallbackConsole::SetNumItems(unsigned __int64)+51p ...
.text:0000282C
.text:0000282C var_4           = dword ptr -4
.text:0000282C
.text:0000282C                 push    ebp
.text:0000282D                 mov     ebp, esp
.text:0000282F                 push    ecx
.text:00002830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002837                 mov     [ebp+var_4], ecx
.text:0000283A                 mov     ecx, [ebp+var_4] ; this
.text:0000283D                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00002842                 movzx   eax, al
.text:00002845                 test    eax, eax
.text:00002847                 jz      short loc_2867
.text:00002849                 mov     ecx, [ebp+var_4]
.text:0000284C                 mov     edx, [ebp+var_4]
.text:0000284F                 mov     eax, [ecx+0B0h]
.text:00002855                 cmp     eax, [edx+0A4h]
.text:0000285B                 jnz     short loc_2867
.text:0000285D                 push    0               ; bool
.text:0000285F                 mov     ecx, [ebp+var_4] ; this
.text:00002862                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00002867
.text:00002867 loc_2867:                               ; CODE XREF: CCallbackConsoleBase::ClosePercents_for_so(void)+1Bj
.text:00002867                                         ; CCallbackConsoleBase::ClosePercents_for_so(void)+2Fj
.text:00002867                 add     esp, 4
.text:0000286A                 cmp     ebp, esp
.text:0000286C                 call    __RTC_CheckEsp
.text:00002871                 mov     esp, ebp
.text:00002873                 pop     ebp
.text:00002874                 retn
.text:00002874 ?ClosePercents_for_so@CCallbackConsoleBase@@QAEXXZ endp
.text:00002874
.text:00002874 ; ---------------------------------------------------------------------------
.text:00002875                 align 4
.text:00002875 _text           ends
.text:00002875
.text:00002878 ; ===========================================================================
.text:00002878
.text:00002878 ; Segment type: Pure code
.text:00002878 ; Segment permissions: Read/Execute
.text:00002878 _text           segment para public 'CODE' use32
.text:00002878                 assume cs:_text
.text:00002878                 ;org 2878h
.text:00002878 ; COMDAT (pick any)
.text:00002878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002878
.text:00002878 ; =============== S U B R O U T I N E =======================================
.text:00002878
.text:00002878 ; Attributes: bp-based frame
.text:00002878
.text:00002878 ; bool NConsoleClose::TestBreakSignal(NConsoleClose *__hidden this)
.text:00002878                 public ?TestBreakSignal@NConsoleClose@@YG_NXZ
.text:00002878 ?TestBreakSignal@NConsoleClose@@YG_NXZ proc near
.text:00002878                                         ; CODE XREF: CheckBreak2(void)+3p
.text:00002878
.text:00002878 this            = dword ptr  8
.text:00002878
.text:00002878                 push    ebp
.text:00002879                 mov     ebp, esp
.text:0000287B                 xor     eax, eax
.text:0000287D                 cmp     dword ptr ds:?g_BreakCounter@NConsoleClose@@3IA, 0 ; uint NConsoleClose::g_BreakCounter
.text:00002884                 setnz   al
.text:00002887                 pop     ebp
.text:00002888                 retn
.text:00002888 ?TestBreakSignal@NConsoleClose@@YG_NXZ endp
.text:00002888
.text:00002888 ; ---------------------------------------------------------------------------
.text:00002889                 align 4
.text:00002889 _text           ends
.text:00002889
.text:0000288C ; ===========================================================================
.text:0000288C
.text:0000288C ; Segment type: Pure code
.text:0000288C ; Segment permissions: Read/Execute
.text:0000288C _text           segment para public 'CODE' use32
.text:0000288C                 assume cs:_text
.text:0000288C                 ;org 288Ch
.text:0000288C ; COMDAT (pick any)
.text:0000288C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000288C
.text:0000288C ; =============== S U B R O U T I N E =======================================
.text:0000288C
.text:0000288C ; Attributes: bp-based frame
.text:0000288C
.text:0000288C ; void __thiscall AString::Empty(AString *__hidden this)
.text:0000288C                 public ?Empty@AString@@QAEXXZ
.text:0000288C ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+17Ap
.text:0000288C
.text:0000288C var_4           = dword ptr -4
.text:0000288C
.text:0000288C                 push    ebp
.text:0000288D                 mov     ebp, esp
.text:0000288F                 push    ecx
.text:00002890                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002897                 mov     [ebp+var_4], ecx
.text:0000289A                 mov     eax, [ebp+var_4]
.text:0000289D                 mov     dword ptr [eax+4], 0
.text:000028A4                 mov     ecx, [ebp+var_4]
.text:000028A7                 mov     edx, [ecx]
.text:000028A9                 mov     byte ptr [edx], 0
.text:000028AC                 mov     esp, ebp
.text:000028AE                 pop     ebp
.text:000028AF                 retn
.text:000028AF ?Empty@AString@@QAEXXZ endp
.text:000028AF
.text:000028AF _text           ends
.text:000028AF
.text:000028B0 ; ===========================================================================
.text:000028B0
.text:000028B0 ; Segment type: Pure code
.text:000028B0 ; Segment permissions: Read/Execute
.text:000028B0 _text           segment para public 'CODE' use32
.text:000028B0                 assume cs:_text
.text:000028B0                 ;org 28B0h
.text:000028B0 ; COMDAT (pick any)
.text:000028B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028B0
.text:000028B0 ; =============== S U B R O U T I N E =======================================
.text:000028B0
.text:000028B0 ; Attributes: bp-based frame
.text:000028B0
.text:000028B0 ; void __thiscall UString::Empty(UString *__hidden this)
.text:000028B0                 public ?Empty@UString@@QAEXXZ
.text:000028B0 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+E0p
.text:000028B0                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+16Fp
.text:000028B0
.text:000028B0 var_4           = dword ptr -4
.text:000028B0
.text:000028B0                 push    ebp
.text:000028B1                 mov     ebp, esp
.text:000028B3                 push    ecx
.text:000028B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028BB                 mov     [ebp+var_4], ecx
.text:000028BE                 mov     eax, [ebp+var_4]
.text:000028C1                 mov     dword ptr [eax+4], 0
.text:000028C8                 mov     ecx, [ebp+var_4]
.text:000028CB                 mov     edx, [ecx]
.text:000028CD                 xor     eax, eax
.text:000028CF                 mov     [edx], ax
.text:000028D2                 mov     esp, ebp
.text:000028D4                 pop     ebp
.text:000028D5                 retn
.text:000028D5 ?Empty@UString@@QAEXXZ endp
.text:000028D5
.text:000028D5 ; ---------------------------------------------------------------------------
.text:000028D6                 align 4
.text:000028D6 _text           ends
.text:000028D6
.text:000028D8 ; ===========================================================================
.text:000028D8
.text:000028D8 ; Segment type: Pure code
.text:000028D8 ; Segment permissions: Read/Execute
.text:000028D8 _text           segment para public 'CODE' use32
.text:000028D8                 assume cs:_text
.text:000028D8                 ;org 28D8h
.text:000028D8 ; COMDAT (pick any)
.text:000028D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028D8
.text:000028D8 ; =============== S U B R O U T I N E =======================================
.text:000028D8
.text:000028D8 ; Attributes: bp-based frame
.text:000028D8
.text:000028D8 ; __int32 __stdcall StringToBstr(const wchar_t *psz, wchar_t **)
.text:000028D8                 public ?StringToBstr@@YGJPB_WPAPA_W@Z
.text:000028D8 ?StringToBstr@@YGJPB_WPAPA_W@Z proc near
.text:000028D8                                         ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+E8p
.text:000028D8                                         ; CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)+CEp
.text:000028D8
.text:000028D8 psz             = dword ptr  8
.text:000028D8 arg_4           = dword ptr  0Ch
.text:000028D8
.text:000028D8                 push    ebp
.text:000028D9                 mov     ebp, esp
.text:000028DB                 push    esi
.text:000028DC                 mov     esi, esp
.text:000028DE                 mov     eax, [ebp+psz]
.text:000028E1                 push    eax             ; psz
.text:000028E2                 call    dword ptr ds:__imp__SysAllocString@4 ; SysAllocString(x)
.text:000028E8                 cmp     esi, esp
.text:000028EA                 call    __RTC_CheckEsp
.text:000028EF                 mov     ecx, [ebp+arg_4]
.text:000028F2                 mov     [ecx], eax
.text:000028F4                 mov     edx, [ebp+arg_4]
.text:000028F7                 mov     eax, [edx]
.text:000028F9                 neg     eax
.text:000028FB                 sbb     eax, eax
.text:000028FD                 and     eax, 7FF8FFF2h
.text:00002902                 add     eax, 8007000Eh
.text:00002907                 pop     esi
.text:00002908                 cmp     ebp, esp
.text:0000290A                 call    __RTC_CheckEsp
.text:0000290F                 pop     ebp
.text:00002910                 retn    8
.text:00002910 ?StringToBstr@@YGJPB_WPAPA_W@Z endp
.text:00002910
.text:00002910 ; ---------------------------------------------------------------------------
.text:00002913                 align 4
.text:00002913 _text           ends
.text:00002913
.text:00002914 ; ===========================================================================
.text:00002914
.text:00002914 ; Segment type: Pure code
.text:00002914 ; Segment permissions: Read/Execute
.text:00002914 _text           segment para public 'CODE' use32
.text:00002914                 assume cs:_text
.text:00002914                 ;org 2914h
.text:00002914 ; COMDAT (pick any)
.text:00002914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002914
.text:00002914 ; =============== S U B R O U T I N E =======================================
.text:00002914
.text:00002914 ; Attributes: bp-based frame
.text:00002914
.text:00002914 ; int __stdcall BoolToInt(bool)
.text:00002914                 public ?BoolToInt@@YGH_N@Z
.text:00002914 ?BoolToInt@@YGH_N@Z proc near           ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+BFp
.text:00002914
.text:00002914 arg_0           = byte ptr  8
.text:00002914
.text:00002914                 push    ebp
.text:00002915                 mov     ebp, esp
.text:00002917                 movzx   eax, [ebp+arg_0]
.text:0000291B                 neg     eax
.text:0000291D                 sbb     eax, eax
.text:0000291F                 neg     eax
.text:00002921                 pop     ebp
.text:00002922                 retn    4
.text:00002922 ?BoolToInt@@YGH_N@Z endp
.text:00002922
.text:00002922 ; ---------------------------------------------------------------------------
.text:00002925                 align 4
.text:00002925 _text           ends
.text:00002925
.text:00002928 ; ===========================================================================
.text:00002928
.text:00002928 ; Segment type: Pure code
.text:00002928 ; Segment permissions: Read/Execute
.text:00002928 _text           segment para public 'CODE' use32
.text:00002928                 assume cs:_text
.text:00002928                 ;org 2928h
.text:00002928 ; COMDAT (pick any)
.text:00002928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002928
.text:00002928 ; =============== S U B R O U T I N E =======================================
.text:00002928
.text:00002928 ; Attributes: bp-based frame
.text:00002928
.text:00002928 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00002928                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00002928 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00002928                                         ; CODE XREF: CErrorPathCodes::AddError(UString const &,ulong)+15p
.text:00002928
.text:00002928 var_1C          = dword ptr -1Ch
.text:00002928 var_18          = dword ptr -18h
.text:00002928 var_14          = dword ptr -14h
.text:00002928 var_10          = dword ptr -10h
.text:00002928 var_C           = dword ptr -0Ch
.text:00002928 var_4           = dword ptr -4
.text:00002928 arg_0           = dword ptr  8
.text:00002928
.text:00002928                 push    ebp
.text:00002929                 mov     ebp, esp
.text:0000292B                 push    0FFFFFFFFh
.text:0000292D                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00002932                 mov     eax, large fs:0
.text:00002938                 push    eax
.text:00002939                 sub     esp, 10h
.text:0000293C                 mov     eax, 0CCCCCCCCh
.text:00002941                 mov     [ebp+var_1C], eax
.text:00002944                 mov     [ebp+var_18], eax
.text:00002947                 mov     [ebp+var_14], eax
.text:0000294A                 mov     [ebp+var_10], eax
.text:0000294D                 mov     eax, dword ptr ds:___security_cookie
.text:00002952                 xor     eax, ebp
.text:00002954                 push    eax
.text:00002955                 lea     eax, [ebp+var_C]
.text:00002958                 mov     large fs:0, eax
.text:0000295E                 mov     [ebp+var_10], ecx
.text:00002961                 push    0Ch             ; unsigned int
.text:00002963                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002968                 add     esp, 4
.text:0000296B                 mov     [ebp+var_18], eax
.text:0000296E                 mov     [ebp+var_4], 0
.text:00002975                 cmp     [ebp+var_18], 0
.text:00002979                 jz      short loc_298C
.text:0000297B                 mov     eax, [ebp+arg_0]
.text:0000297E                 push    eax
.text:0000297F                 mov     ecx, [ebp+var_18]
.text:00002982                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00002987                 mov     [ebp+var_1C], eax
.text:0000298A                 jmp     short loc_2993
.text:0000298C ; ---------------------------------------------------------------------------
.text:0000298C
.text:0000298C loc_298C:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:0000298C                 mov     [ebp+var_1C], 0
.text:00002993
.text:00002993 loc_2993:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:00002993                 mov     ecx, [ebp+var_1C]
.text:00002996                 mov     [ebp+var_14], ecx
.text:00002999                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029A0                 mov     edx, [ebp+var_14]
.text:000029A3                 push    edx
.text:000029A4                 mov     ecx, [ebp+var_10]
.text:000029A7                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000029AC                 mov     ecx, [ebp+var_C]
.text:000029AF                 mov     large fs:0, ecx
.text:000029B6                 pop     ecx
.text:000029B7                 add     esp, 1Ch
.text:000029BA                 cmp     ebp, esp
.text:000029BC                 call    __RTC_CheckEsp
.text:000029C1                 mov     esp, ebp
.text:000029C3                 pop     ebp
.text:000029C4                 retn    4
.text:000029C4 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:000029C4
.text:000029C4 ; ---------------------------------------------------------------------------
.text:000029C7                 align 4
.text:000029C7 _text           ends
.text:000029C7
.text$x:000029C8 ; ===========================================================================
.text$x:000029C8
.text$x:000029C8 ; Segment type: Pure code
.text$x:000029C8 ; Segment permissions: Read/Execute
.text$x:000029C8 _text$x         segment para public 'CODE' use32
.text$x:000029C8                 assume cs:_text$x
.text$x:000029C8                 ;org 29C8h
.text$x:000029C8 ; COMDAT (pick associative to section at 2928)
.text$x:000029C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000029C8
.text$x:000029C8 ; =============== S U B R O U T I N E =======================================
.text$x:000029C8
.text$x:000029C8
.text$x:000029C8 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:000029C8                                         ; DATA XREF: .xdata$x:000029F4o
.text$x:000029C8                 mov     eax, [ebp-18h]
.text$x:000029CB                 push    eax             ; void *
.text$x:000029CC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000029D1                 pop     ecx
.text$x:000029D2                 retn
.text$x:000029D2 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:000029D2
.text$x:000029D3
.text$x:000029D3 ; =============== S U B R O U T I N E =======================================
.text$x:000029D3
.text$x:000029D3
.text$x:000029D3 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:000029D3                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:000029D3
.text$x:000029D3 arg_4           = dword ptr  8
.text$x:000029D3
.text$x:000029D3                 mov     edx, [esp+arg_4]
.text$x:000029D7                 lea     eax, [edx+0Ch]
.text$x:000029DA                 mov     ecx, [edx-14h]
.text$x:000029DD                 xor     ecx, eax
.text$x:000029DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000029E4                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:000029E9                 jmp     ___CxxFrameHandler3
.text$x:000029E9 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:000029E9
.text$x:000029E9 ; ---------------------------------------------------------------------------
.text$x:000029EE                 align 10h
.text$x:000029EE _text$x         ends
.text$x:000029EE
.xdata$x:000029F0 ; ===========================================================================
.xdata$x:000029F0
.xdata$x:000029F0 ; Segment type: Pure data
.xdata$x:000029F0 ; Segment permissions: Read
.xdata$x:000029F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000029F0                 assume cs:_xdata$x
.xdata$x:000029F0                 ;org 29F0h
.xdata$x:000029F0 ; COMDAT (pick associative to section at 2928)
.xdata$x:000029F0 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:000029F0                                         ; DATA XREF: .xdata$x:00002A00o
.xdata$x:000029F1                 db 0FFh
.xdata$x:000029F2                 db 0FFh
.xdata$x:000029F3                 db 0FFh
.xdata$x:000029F4                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:000029F8 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:000029F8                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:000029F9                 db    5
.xdata$x:000029FA                 db  93h ; ô
.xdata$x:000029FB                 db  19h
.xdata$x:000029FC                 db    1
.xdata$x:000029FD                 db    0
.xdata$x:000029FE                 db    0
.xdata$x:000029FF                 db    0
.xdata$x:00002A00                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00002A04                 db    0
.xdata$x:00002A05                 db    0
.xdata$x:00002A06                 db    0
.xdata$x:00002A07                 db    0
.xdata$x:00002A08                 db    0
.xdata$x:00002A09                 db    0
.xdata$x:00002A0A                 db    0
.xdata$x:00002A0B                 db    0
.xdata$x:00002A0C                 db    0
.xdata$x:00002A0D                 db    0
.xdata$x:00002A0E                 db    0
.xdata$x:00002A0F                 db    0
.xdata$x:00002A10                 db    0
.xdata$x:00002A11                 db    0
.xdata$x:00002A12                 db    0
.xdata$x:00002A13                 db    0
.xdata$x:00002A14                 db    0
.xdata$x:00002A15                 db    0
.xdata$x:00002A16                 db    0
.xdata$x:00002A17                 db    0
.xdata$x:00002A18                 db    1
.xdata$x:00002A19                 db    0
.xdata$x:00002A1A                 db    0
.xdata$x:00002A1B                 db    0
.xdata$x:00002A1B _xdata$x        ends
.xdata$x:00002A1B
.text:00002A1C ; ===========================================================================
.text:00002A1C
.text:00002A1C ; Segment type: Pure code
.text:00002A1C ; Segment permissions: Read/Execute
.text:00002A1C _text           segment para public 'CODE' use32
.text:00002A1C                 assume cs:_text
.text:00002A1C                 ;org 2A1Ch
.text:00002A1C ; COMDAT (pick any)
.text:00002A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A1C
.text:00002A1C ; =============== S U B R O U T I N E =======================================
.text:00002A1C
.text:00002A1C ; Attributes: bp-based frame
.text:00002A1C
.text:00002A1C ; public: unsigned int __thiscall CObjectVector<class CArc>::Size(void)const
.text:00002A1C                 public ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
.text:00002A1C ?Size@?$CObjectVector@VCArc@@@@QBEIXZ proc near
.text:00002A1C                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+49p
.text:00002A1C
.text:00002A1C var_4           = dword ptr -4
.text:00002A1C
.text:00002A1C                 push    ebp
.text:00002A1D                 mov     ebp, esp
.text:00002A1F                 push    ecx
.text:00002A20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A27                 mov     [ebp+var_4], ecx
.text:00002A2A                 mov     ecx, [ebp+var_4]
.text:00002A2D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00002A32                 add     esp, 4
.text:00002A35                 cmp     ebp, esp
.text:00002A37                 call    __RTC_CheckEsp
.text:00002A3C                 mov     esp, ebp
.text:00002A3E                 pop     ebp
.text:00002A3F                 retn
.text:00002A3F ?Size@?$CObjectVector@VCArc@@@@QBEIXZ endp
.text:00002A3F
.text:00002A3F _text           ends
.text:00002A3F
.text:00002A40 ; ===========================================================================
.text:00002A40
.text:00002A40 ; Segment type: Pure code
.text:00002A40 ; Segment permissions: Read/Execute
.text:00002A40 _text           segment para public 'CODE' use32
.text:00002A40                 assume cs:_text
.text:00002A40                 ;org 2A40h
.text:00002A40 ; COMDAT (pick any)
.text:00002A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A40
.text:00002A40 ; =============== S U B R O U T I N E =======================================
.text:00002A40
.text:00002A40 ; Attributes: bp-based frame
.text:00002A40
.text:00002A40 ; public: class CArc const & __thiscall CObjectVector<class CArc>::operator[](unsigned int)const
.text:00002A40                 public ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z
.text:00002A40 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z proc near
.text:00002A40                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+5Ep
.text:00002A40
.text:00002A40 var_4           = dword ptr -4
.text:00002A40 arg_0           = dword ptr  8
.text:00002A40
.text:00002A40                 push    ebp
.text:00002A41                 mov     ebp, esp
.text:00002A43                 push    ecx
.text:00002A44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A4B                 mov     [ebp+var_4], ecx
.text:00002A4E                 mov     eax, [ebp+arg_0]
.text:00002A51                 push    eax
.text:00002A52                 mov     ecx, [ebp+var_4]
.text:00002A55                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002A5A                 mov     eax, [eax]
.text:00002A5C                 add     esp, 4
.text:00002A5F                 cmp     ebp, esp
.text:00002A61                 call    __RTC_CheckEsp
.text:00002A66                 mov     esp, ebp
.text:00002A68                 pop     ebp
.text:00002A69                 retn    4
.text:00002A69 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z endp
.text:00002A69
.text:00002A69 _text           ends
.text:00002A69
.text:00002A6C ; ===========================================================================
.text:00002A6C
.text:00002A6C ; Segment type: Pure code
.text:00002A6C ; Segment permissions: Read/Execute
.text:00002A6C _text           segment para public 'CODE' use32
.text:00002A6C                 assume cs:_text
.text:00002A6C                 ;org 2A6Ch
.text:00002A6C ; COMDAT (pick any)
.text:00002A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A6C
.text:00002A6C ; =============== S U B R O U T I N E =======================================
.text:00002A6C
.text:00002A6C ; Attributes: bp-based frame
.text:00002A6C
.text:00002A6C ; public: unsigned int __thiscall CRecordVector<unsigned long>::Add(unsigned long)
.text:00002A6C                 public ?Add@?$CRecordVector@K@@QAEIK@Z
.text:00002A6C ?Add@?$CRecordVector@K@@QAEIK@Z proc near
.text:00002A6C                                         ; CODE XREF: CErrorPathCodes::AddError(UString const &,ulong)+24p
.text:00002A6C
.text:00002A6C var_8           = dword ptr -8
.text:00002A6C var_4           = dword ptr -4
.text:00002A6C arg_0           = dword ptr  8
.text:00002A6C
.text:00002A6C                 push    ebp
.text:00002A6D                 mov     ebp, esp
.text:00002A6F                 sub     esp, 8
.text:00002A72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A80                 mov     [ebp+var_4], ecx
.text:00002A83                 mov     ecx, [ebp+var_4]
.text:00002A86                 call    ?ReserveOnePosition@?$CRecordVector@K@@AAEXXZ ; CRecordVector<ulong>::ReserveOnePosition(void)
.text:00002A8B                 mov     eax, [ebp+var_4]
.text:00002A8E                 mov     ecx, [eax+4]
.text:00002A91                 mov     edx, [ebp+var_4]
.text:00002A94                 mov     eax, [edx]
.text:00002A96                 mov     edx, [ebp+arg_0]
.text:00002A99                 mov     [eax+ecx*4], edx
.text:00002A9C                 mov     eax, [ebp+var_4]
.text:00002A9F                 mov     ecx, [eax+4]
.text:00002AA2                 mov     [ebp+var_8], ecx
.text:00002AA5                 mov     edx, [ebp+var_4]
.text:00002AA8                 mov     eax, [edx+4]
.text:00002AAB                 add     eax, 1
.text:00002AAE                 mov     ecx, [ebp+var_4]
.text:00002AB1                 mov     [ecx+4], eax
.text:00002AB4                 mov     eax, [ebp+var_8]
.text:00002AB7                 add     esp, 8
.text:00002ABA                 cmp     ebp, esp
.text:00002ABC                 call    __RTC_CheckEsp
.text:00002AC1                 mov     esp, ebp
.text:00002AC3                 pop     ebp
.text:00002AC4                 retn    4
.text:00002AC4 ?Add@?$CRecordVector@K@@QAEIK@Z endp
.text:00002AC4
.text:00002AC4 ; ---------------------------------------------------------------------------
.text:00002AC7                 align 4
.text:00002AC7 _text           ends
.text:00002AC7
.text:00002AC8 ; ===========================================================================
.text:00002AC8
.text:00002AC8 ; Segment type: Pure code
.text:00002AC8 ; Segment permissions: Read/Execute
.text:00002AC8 _text           segment para public 'CODE' use32
.text:00002AC8                 assume cs:_text
.text:00002AC8                 ;org 2AC8h
.text:00002AC8 ; COMDAT (pick any)
.text:00002AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AC8
.text:00002AC8 ; =============== S U B R O U T I N E =======================================
.text:00002AC8
.text:00002AC8 ; Attributes: bp-based frame
.text:00002AC8
.text:00002AC8 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00002AC8                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00002AC8 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00002AC8                                         ; CODE XREF: CObjectVector<CArc>::Size(void)+11p
.text:00002AC8
.text:00002AC8 var_4           = dword ptr -4
.text:00002AC8
.text:00002AC8                 push    ebp
.text:00002AC9                 mov     ebp, esp
.text:00002ACB                 push    ecx
.text:00002ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AD3                 mov     [ebp+var_4], ecx
.text:00002AD6                 mov     eax, [ebp+var_4]
.text:00002AD9                 mov     eax, [eax+4]
.text:00002ADC                 mov     esp, ebp
.text:00002ADE                 pop     ebp
.text:00002ADF                 retn
.text:00002ADF ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00002ADF
.text:00002ADF _text           ends
.text:00002ADF
.text:00002AE0 ; ===========================================================================
.text:00002AE0
.text:00002AE0 ; Segment type: Pure code
.text:00002AE0 ; Segment permissions: Read/Execute
.text:00002AE0 _text           segment para public 'CODE' use32
.text:00002AE0                 assume cs:_text
.text:00002AE0                 ;org 2AE0h
.text:00002AE0 ; COMDAT (pick any)
.text:00002AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AE0
.text:00002AE0 ; =============== S U B R O U T I N E =======================================
.text:00002AE0
.text:00002AE0 ; Attributes: bp-based frame
.text:00002AE0
.text:00002AE0 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00002AE0                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00002AE0 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00002AE0                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00002AE0
.text:00002AE0 var_8           = dword ptr -8
.text:00002AE0 var_4           = dword ptr -4
.text:00002AE0 arg_0           = dword ptr  8
.text:00002AE0
.text:00002AE0                 push    ebp
.text:00002AE1                 mov     ebp, esp
.text:00002AE3                 sub     esp, 8
.text:00002AE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002AED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AF4                 mov     [ebp+var_4], ecx
.text:00002AF7                 mov     ecx, [ebp+var_4]
.text:00002AFA                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00002AFF                 mov     eax, [ebp+var_4]
.text:00002B02                 mov     ecx, [eax+4]
.text:00002B05                 mov     edx, [ebp+var_4]
.text:00002B08                 mov     eax, [edx]
.text:00002B0A                 mov     edx, [ebp+arg_0]
.text:00002B0D                 mov     [eax+ecx*4], edx
.text:00002B10                 mov     eax, [ebp+var_4]
.text:00002B13                 mov     ecx, [eax+4]
.text:00002B16                 mov     [ebp+var_8], ecx
.text:00002B19                 mov     edx, [ebp+var_4]
.text:00002B1C                 mov     eax, [edx+4]
.text:00002B1F                 add     eax, 1
.text:00002B22                 mov     ecx, [ebp+var_4]
.text:00002B25                 mov     [ecx+4], eax
.text:00002B28                 mov     eax, [ebp+var_8]
.text:00002B2B                 add     esp, 8
.text:00002B2E                 cmp     ebp, esp
.text:00002B30                 call    __RTC_CheckEsp
.text:00002B35                 mov     esp, ebp
.text:00002B37                 pop     ebp
.text:00002B38                 retn    4
.text:00002B38 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00002B38
.text:00002B38 ; ---------------------------------------------------------------------------
.text:00002B3B                 align 4
.text:00002B3B _text           ends
.text:00002B3B
.text:00002B3C ; ===========================================================================
.text:00002B3C
.text:00002B3C ; Segment type: Pure code
.text:00002B3C ; Segment permissions: Read/Execute
.text:00002B3C _text           segment para public 'CODE' use32
.text:00002B3C                 assume cs:_text
.text:00002B3C                 ;org 2B3Ch
.text:00002B3C ; COMDAT (pick any)
.text:00002B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B3C
.text:00002B3C ; =============== S U B R O U T I N E =======================================
.text:00002B3C
.text:00002B3C ; Attributes: bp-based frame
.text:00002B3C
.text:00002B3C ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00002B3C                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00002B3C ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00002B3C                                         ; CODE XREF: CObjectVector<CArc>::operator[](uint)+15p
.text:00002B3C
.text:00002B3C var_4           = dword ptr -4
.text:00002B3C arg_0           = dword ptr  8
.text:00002B3C
.text:00002B3C                 push    ebp
.text:00002B3D                 mov     ebp, esp
.text:00002B3F                 push    ecx
.text:00002B40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B47                 mov     [ebp+var_4], ecx
.text:00002B4A                 mov     eax, [ebp+var_4]
.text:00002B4D                 mov     ecx, [eax]
.text:00002B4F                 mov     edx, [ebp+arg_0]
.text:00002B52                 lea     eax, [ecx+edx*4]
.text:00002B55                 mov     esp, ebp
.text:00002B57                 pop     ebp
.text:00002B58                 retn    4
.text:00002B58 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00002B58
.text:00002B58 ; ---------------------------------------------------------------------------
.text:00002B5B                 align 4
.text:00002B5B _text           ends
.text:00002B5B
.text:00002B5C ; ===========================================================================
.text:00002B5C
.text:00002B5C ; Segment type: Pure code
.text:00002B5C ; Segment permissions: Read/Execute
.text:00002B5C _text           segment para public 'CODE' use32
.text:00002B5C                 assume cs:_text
.text:00002B5C                 ;org 2B5Ch
.text:00002B5C ; COMDAT (pick any)
.text:00002B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B5C
.text:00002B5C ; =============== S U B R O U T I N E =======================================
.text:00002B5C
.text:00002B5C ; Attributes: bp-based frame
.text:00002B5C
.text:00002B5C ; private: void __thiscall CRecordVector<unsigned long>::ReserveOnePosition(void)
.text:00002B5C                 public ?ReserveOnePosition@?$CRecordVector@K@@AAEXXZ
.text:00002B5C ?ReserveOnePosition@?$CRecordVector@K@@AAEXXZ proc near
.text:00002B5C                                         ; CODE XREF: CRecordVector<ulong>::Add(ulong)+1Ap
.text:00002B5C
.text:00002B5C var_14          = dword ptr -14h
.text:00002B5C var_10          = dword ptr -10h
.text:00002B5C Dst             = dword ptr -0Ch
.text:00002B5C var_8           = dword ptr -8
.text:00002B5C var_4           = dword ptr -4
.text:00002B5C
.text:00002B5C                 push    ebp
.text:00002B5D                 mov     ebp, esp
.text:00002B5F                 sub     esp, 14h
.text:00002B62                 mov     eax, 0CCCCCCCCh
.text:00002B67                 mov     [ebp+var_14], eax
.text:00002B6A                 mov     [ebp+var_10], eax
.text:00002B6D                 mov     [ebp+Dst], eax
.text:00002B70                 mov     [ebp+var_8], eax
.text:00002B73                 mov     [ebp+var_4], eax
.text:00002B76                 mov     [ebp+var_4], ecx
.text:00002B79                 mov     eax, [ebp+var_4]
.text:00002B7C                 mov     ecx, [ebp+var_4]
.text:00002B7F                 mov     edx, [eax+4]
.text:00002B82                 cmp     edx, [ecx+8]
.text:00002B85                 jnz     loc_2C10
.text:00002B8B                 mov     eax, [ebp+var_4]
.text:00002B8E                 mov     ecx, [eax+8]
.text:00002B91                 shr     ecx, 2
.text:00002B94                 mov     edx, [ebp+var_4]
.text:00002B97                 mov     eax, [edx+8]
.text:00002B9A                 lea     ecx, [eax+ecx+1]
.text:00002B9E                 mov     [ebp+var_8], ecx
.text:00002BA1                 xor     ecx, ecx
.text:00002BA3                 mov     eax, [ebp+var_8]
.text:00002BA6                 mov     edx, 4
.text:00002BAB                 mul     edx
.text:00002BAD                 seto    cl
.text:00002BB0                 neg     ecx
.text:00002BB2                 or      ecx, eax
.text:00002BB4                 push    ecx             ; unsigned int
.text:00002BB5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002BBA                 add     esp, 4
.text:00002BBD                 mov     [ebp+var_10], eax
.text:00002BC0                 mov     eax, [ebp+var_10]
.text:00002BC3                 mov     [ebp+Dst], eax
.text:00002BC6                 mov     ecx, [ebp+var_4]
.text:00002BC9                 cmp     dword ptr [ecx+4], 0
.text:00002BCD                 jz      short loc_2BEB
.text:00002BCF                 mov     edx, [ebp+var_4]
.text:00002BD2                 mov     eax, [edx+4]
.text:00002BD5                 shl     eax, 2
.text:00002BD8                 push    eax             ; Size
.text:00002BD9                 mov     ecx, [ebp+var_4]
.text:00002BDC                 mov     edx, [ecx]
.text:00002BDE                 push    edx             ; Src
.text:00002BDF                 mov     eax, [ebp+Dst]
.text:00002BE2                 push    eax             ; Dst
.text:00002BE3                 call    _memcpy
.text:00002BE8                 add     esp, 0Ch
.text:00002BEB
.text:00002BEB loc_2BEB:                               ; CODE XREF: CRecordVector<ulong>::ReserveOnePosition(void)+71j
.text:00002BEB                 mov     ecx, [ebp+var_4]
.text:00002BEE                 mov     edx, [ecx]
.text:00002BF0                 mov     [ebp+var_14], edx
.text:00002BF3                 mov     eax, [ebp+var_14]
.text:00002BF6                 push    eax             ; void *
.text:00002BF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002BFC                 add     esp, 4
.text:00002BFF                 mov     ecx, [ebp+var_4]
.text:00002C02                 mov     edx, [ebp+Dst]
.text:00002C05                 mov     [ecx], edx
.text:00002C07                 mov     eax, [ebp+var_4]
.text:00002C0A                 mov     ecx, [ebp+var_8]
.text:00002C0D                 mov     [eax+8], ecx
.text:00002C10
.text:00002C10 loc_2C10:                               ; CODE XREF: CRecordVector<ulong>::ReserveOnePosition(void)+29j
.text:00002C10                 add     esp, 14h
.text:00002C13                 cmp     ebp, esp
.text:00002C15                 call    __RTC_CheckEsp
.text:00002C1A                 mov     esp, ebp
.text:00002C1C                 pop     ebp
.text:00002C1D                 retn
.text:00002C1D ?ReserveOnePosition@?$CRecordVector@K@@AAEXXZ endp
.text:00002C1D
.text:00002C1D ; ---------------------------------------------------------------------------
.text:00002C1E                 align 10h
.text:00002C1E _text           ends
.text:00002C1E
.text:00002C20 ; ===========================================================================
.text:00002C20
.text:00002C20 ; Segment type: Pure code
.text:00002C20 ; Segment permissions: Read/Execute
.text:00002C20 _text           segment para public 'CODE' use32
.text:00002C20                 assume cs:_text
.text:00002C20                 ;org 2C20h
.text:00002C20 ; COMDAT (pick any)
.text:00002C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C20
.text:00002C20 ; =============== S U B R O U T I N E =======================================
.text:00002C20
.text:00002C20 ; Attributes: bp-based frame
.text:00002C20
.text:00002C20 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00002C20                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00002C20 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00002C20                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00002C20
.text:00002C20 var_14          = dword ptr -14h
.text:00002C20 var_10          = dword ptr -10h
.text:00002C20 Dst             = dword ptr -0Ch
.text:00002C20 var_8           = dword ptr -8
.text:00002C20 var_4           = dword ptr -4
.text:00002C20
.text:00002C20                 push    ebp
.text:00002C21                 mov     ebp, esp
.text:00002C23                 sub     esp, 14h
.text:00002C26                 mov     eax, 0CCCCCCCCh
.text:00002C2B                 mov     [ebp+var_14], eax
.text:00002C2E                 mov     [ebp+var_10], eax
.text:00002C31                 mov     [ebp+Dst], eax
.text:00002C34                 mov     [ebp+var_8], eax
.text:00002C37                 mov     [ebp+var_4], eax
.text:00002C3A                 mov     [ebp+var_4], ecx
.text:00002C3D                 mov     eax, [ebp+var_4]
.text:00002C40                 mov     ecx, [ebp+var_4]
.text:00002C43                 mov     edx, [eax+4]
.text:00002C46                 cmp     edx, [ecx+8]
.text:00002C49                 jnz     loc_2CD4
.text:00002C4F                 mov     eax, [ebp+var_4]
.text:00002C52                 mov     ecx, [eax+8]
.text:00002C55                 shr     ecx, 2
.text:00002C58                 mov     edx, [ebp+var_4]
.text:00002C5B                 mov     eax, [edx+8]
.text:00002C5E                 lea     ecx, [eax+ecx+1]
.text:00002C62                 mov     [ebp+var_8], ecx
.text:00002C65                 xor     ecx, ecx
.text:00002C67                 mov     eax, [ebp+var_8]
.text:00002C6A                 mov     edx, 4
.text:00002C6F                 mul     edx
.text:00002C71                 seto    cl
.text:00002C74                 neg     ecx
.text:00002C76                 or      ecx, eax
.text:00002C78                 push    ecx             ; unsigned int
.text:00002C79                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002C7E                 add     esp, 4
.text:00002C81                 mov     [ebp+var_10], eax
.text:00002C84                 mov     eax, [ebp+var_10]
.text:00002C87                 mov     [ebp+Dst], eax
.text:00002C8A                 mov     ecx, [ebp+var_4]
.text:00002C8D                 cmp     dword ptr [ecx+4], 0
.text:00002C91                 jz      short loc_2CAF
.text:00002C93                 mov     edx, [ebp+var_4]
.text:00002C96                 mov     eax, [edx+4]
.text:00002C99                 shl     eax, 2
.text:00002C9C                 push    eax             ; Size
.text:00002C9D                 mov     ecx, [ebp+var_4]
.text:00002CA0                 mov     edx, [ecx]
.text:00002CA2                 push    edx             ; Src
.text:00002CA3                 mov     eax, [ebp+Dst]
.text:00002CA6                 push    eax             ; Dst
.text:00002CA7                 call    _memcpy
.text:00002CAC                 add     esp, 0Ch
.text:00002CAF
.text:00002CAF loc_2CAF:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00002CAF                 mov     ecx, [ebp+var_4]
.text:00002CB2                 mov     edx, [ecx]
.text:00002CB4                 mov     [ebp+var_14], edx
.text:00002CB7                 mov     eax, [ebp+var_14]
.text:00002CBA                 push    eax             ; void *
.text:00002CBB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002CC0                 add     esp, 4
.text:00002CC3                 mov     ecx, [ebp+var_4]
.text:00002CC6                 mov     edx, [ebp+Dst]
.text:00002CC9                 mov     [ecx], edx
.text:00002CCB                 mov     eax, [ebp+var_4]
.text:00002CCE                 mov     ecx, [ebp+var_8]
.text:00002CD1                 mov     [eax+8], ecx
.text:00002CD4
.text:00002CD4 loc_2CD4:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00002CD4                 add     esp, 14h
.text:00002CD7                 cmp     ebp, esp
.text:00002CD9                 call    __RTC_CheckEsp
.text:00002CDE                 mov     esp, ebp
.text:00002CE0                 pop     ebp
.text:00002CE1                 retn
.text:00002CE1 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00002CE1
.text:00002CE1 ; ---------------------------------------------------------------------------
.text:00002CE2                 align 4
.text:00002CE2 _text           ends
.text:00002CE2
.text$yc:00002CE4 ; ===========================================================================
.text$yc:00002CE4
.text$yc:00002CE4 ; Segment type: Pure code
.text$yc:00002CE4 ; Segment permissions: Read/Execute
.text$yc:00002CE4 _text$yc        segment para public 'CODE' use32
.text$yc:00002CE4                 assume cs:_text$yc
.text$yc:00002CE4                 ;org 2CE4h
.text$yc:00002CE4 ; COMDAT (pick any)
.text$yc:00002CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00002CE4
.text$yc:00002CE4 ; =============== S U B R O U T I N E =======================================
.text$yc:00002CE4
.text$yc:00002CE4 ; Attributes: bp-based frame
.text$yc:00002CE4
.text$yc:00002CE4 ; void __cdecl `dynamic initializer for 'g_CriticalSection''(void)
.text$yc:00002CE4 ??__Eg_CriticalSection@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_g_CriticalSection$initializer$o
.text$yc:00002CE4                 push    ebp
.text$yc:00002CE5                 mov     ebp, esp
.text$yc:00002CE7                 mov     ecx, offset _g_CriticalSection ; this
.text$yc:00002CEC                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:00002CF1                 push    offset ??__Fg_CriticalSection@@YAXXZ ; void (__cdecl *)()
.text$yc:00002CF6                 call    _atexit
.text$yc:00002CFB                 add     esp, 4
.text$yc:00002CFE                 cmp     ebp, esp
.text$yc:00002D00                 call    __RTC_CheckEsp
.text$yc:00002D05                 pop     ebp
.text$yc:00002D06                 retn
.text$yc:00002D06 ??__Eg_CriticalSection@@YAXXZ endp
.text$yc:00002D06
.text$yc:00002D06 ; ---------------------------------------------------------------------------
.text$yc:00002D07                 align 4
.text$yc:00002D07 _text$yc        ends
.text$yc:00002D07
.text:00002D08 ; ===========================================================================
.text:00002D08
.text:00002D08 ; Segment type: Pure code
.text:00002D08 ; Segment permissions: Read/Execute
.text:00002D08 _text           segment para public 'CODE' use32
.text:00002D08                 assume cs:_text
.text:00002D08                 ;org 2D08h
.text:00002D08 ; COMDAT (pick any)
.text:00002D08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D08
.text:00002D08 ; =============== S U B R O U T I N E =======================================
.text:00002D08
.text:00002D08 ; Attributes: bp-based frame
.text:00002D08
.text:00002D08 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002D08                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00002D08 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00002D08                                         ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+8p
.text:00002D08
.text:00002D08 var_4           = dword ptr -4
.text:00002D08
.text:00002D08                 push    ebp
.text:00002D09                 mov     ebp, esp
.text:00002D0B                 push    ecx
.text:00002D0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D13                 mov     [ebp+var_4], ecx
.text:00002D16                 mov     eax, [ebp+var_4]
.text:00002D19                 push    eax
.text:00002D1A                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00002D1F                 mov     eax, [ebp+var_4]
.text:00002D22                 add     esp, 4
.text:00002D25                 cmp     ebp, esp
.text:00002D27                 call    __RTC_CheckEsp
.text:00002D2C                 mov     esp, ebp
.text:00002D2E                 pop     ebp
.text:00002D2F                 retn
.text:00002D2F ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00002D2F
.text:00002D2F _text           ends
.text:00002D2F
.text$yd:00002D30 ; ===========================================================================
.text$yd:00002D30
.text$yd:00002D30 ; Segment type: Pure code
.text$yd:00002D30 ; Segment permissions: Read/Execute
.text$yd:00002D30 _text$yd        segment para public 'CODE' use32
.text$yd:00002D30                 assume cs:_text$yd
.text$yd:00002D30                 ;org 2D30h
.text$yd:00002D30 ; COMDAT (pick any)
.text$yd:00002D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00002D30
.text$yd:00002D30 ; =============== S U B R O U T I N E =======================================
.text$yd:00002D30
.text$yd:00002D30 ; Attributes: bp-based frame
.text$yd:00002D30
.text$yd:00002D30 ; void __cdecl `dynamic atexit destructor for 'g_CriticalSection''()
.text$yd:00002D30 ??__Fg_CriticalSection@@YAXXZ proc near ; DATA XREF: `dynamic initializer for 'g_CriticalSection''(void)+Do
.text$yd:00002D30                 push    ebp
.text$yd:00002D31                 mov     ebp, esp
.text$yd:00002D33                 mov     ecx, offset _g_CriticalSection ; this
.text$yd:00002D38                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00002D3D                 cmp     ebp, esp
.text$yd:00002D3F                 call    __RTC_CheckEsp
.text$yd:00002D44                 pop     ebp
.text$yd:00002D45                 retn
.text$yd:00002D45 ??__Fg_CriticalSection@@YAXXZ endp
.text$yd:00002D45
.text$yd:00002D45 ; ---------------------------------------------------------------------------
.text$yd:00002D46                 align 4
.text$yd:00002D46 _text$yd        ends
.text$yd:00002D46
.text:00002D48 ; ===========================================================================
.text:00002D48
.text:00002D48 ; Segment type: Pure code
.text:00002D48 ; Segment permissions: Read/Execute
.text:00002D48 _text           segment para public 'CODE' use32
.text:00002D48                 assume cs:_text
.text:00002D48                 ;org 2D48h
.text:00002D48 ; COMDAT (pick any)
.text:00002D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D48
.text:00002D48 ; =============== S U B R O U T I N E =======================================
.text:00002D48
.text:00002D48 ; Attributes: bp-based frame
.text:00002D48
.text:00002D48 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002D48                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00002D48 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00002D48                                         ; CODE XREF: `dynamic atexit destructor for 'g_CriticalSection''(void)+8p
.text:00002D48
.text:00002D48 lpCriticalSection= dword ptr -4
.text:00002D48
.text:00002D48                 push    ebp
.text:00002D49                 mov     ebp, esp
.text:00002D4B                 push    ecx
.text:00002D4C                 push    esi
.text:00002D4D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002D54                 mov     [ebp+lpCriticalSection], ecx
.text:00002D57                 mov     esi, esp
.text:00002D59                 mov     eax, [ebp+lpCriticalSection]
.text:00002D5C                 push    eax             ; lpCriticalSection
.text:00002D5D                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:00002D63                 cmp     esi, esp
.text:00002D65                 call    __RTC_CheckEsp
.text:00002D6A                 pop     esi
.text:00002D6B                 add     esp, 4
.text:00002D6E                 cmp     ebp, esp
.text:00002D70                 call    __RTC_CheckEsp
.text:00002D75                 mov     esp, ebp
.text:00002D77                 pop     ebp
.text:00002D78                 retn
.text:00002D78 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00002D78
.text:00002D78 ; ---------------------------------------------------------------------------
.text:00002D79                 align 4
.text:00002D79 _text           ends
.text:00002D79
.bss:00002D7C ; ===========================================================================
.bss:00002D7C
.bss:00002D7C ; Segment type: Uninitialized
.bss:00002D7C ; Segment permissions: Read/Write
.bss:00002D7C _bss            segment dword public 'BSS' use32
.bss:00002D7C                 assume cs:_bss
.bss:00002D7C                 ;org 2D7Ch
.bss:00002D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00002D7C ; NWindows::NSynchronization::CCriticalSection g_CriticalSection
.bss:00002D7C _g_CriticalSection db    ? ;            ; DATA XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+3Co
.bss:00002D7C                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+3Co ...
.bss:00002D7D                 db    ? ;
.bss:00002D7E                 db    ? ;
.bss:00002D7F                 db    ? ;
.bss:00002D80                 db    ? ;
.bss:00002D81                 db    ? ;
.bss:00002D82                 db    ? ;
.bss:00002D83                 db    ? ;
.bss:00002D84                 db    ? ;
.bss:00002D85                 db    ? ;
.bss:00002D86                 db    ? ;
.bss:00002D87                 db    ? ;
.bss:00002D88                 db    ? ;
.bss:00002D89                 db    ? ;
.bss:00002D8A                 db    ? ;
.bss:00002D8B                 db    ? ;
.bss:00002D8C                 db    ? ;
.bss:00002D8D                 db    ? ;
.bss:00002D8E                 db    ? ;
.bss:00002D8F                 db    ? ;
.bss:00002D90                 db    ? ;
.bss:00002D91                 db    ? ;
.bss:00002D92                 db    ? ;
.bss:00002D93                 db    ? ;
.bss:00002D93 _bss            ends
.bss:00002D93
.CRT$XCU:00002D94 ; ===========================================================================
.CRT$XCU:00002D94
.CRT$XCU:00002D94 ; Segment type: Pure data
.CRT$XCU:00002D94 ; Segment permissions: Read
.CRT$XCU:00002D94 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00002D94                 assume cs:_CRT$XCU
.CRT$XCU:00002D94                 ;org 2D94h
.CRT$XCU:00002D94 _g_CriticalSection$initializer$ dd offset ??__Eg_CriticalSection@@YAXXZ ; `dynamic initializer for 'g_CriticalSection''(void)
.CRT$XCU:00002D94 _CRT$XCU        ends
.CRT$XCU:00002D94
UNDEF:00002DA0 ; ===========================================================================
UNDEF:00002DA0
UNDEF:00002DA0 ; Segment type: Externs
UNDEF:00002DA0 ; UNDEF
UNDEF:00002DA0 ; __int32 __stdcall Print_OpenArchive_Error(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
UNDEF:00002DA0                 extrn ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z:near
UNDEF:00002DA0                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3CAp
UNDEF:00002DA4 ; __int32 __stdcall Print_OpenArchive_Props(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
UNDEF:00002DA4                 extrn ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z:near
UNDEF:00002DA4                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+338p
UNDEF:00002DA8 ; void __stdcall Print_ErrorFormatIndex_Warning(struct CStdOutStream *, const struct CCodecs *, const struct CArc *)
UNDEF:00002DA8                 extrn ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z:near
UNDEF:00002DA8                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2EEp
UNDEF:00002DAC ; bool __thiscall CStdOutStream::Flush(CStdOutStream *__hidden this)
UNDEF:00002DAC                 extrn ?Flush@CStdOutStream@@QAE_NXZ:near
UNDEF:00002DAC                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+18Fp
UNDEF:00002DAC                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2C2p ...
UNDEF:00002DB0 ; void __stdcall PrintErrorFlags(struct CStdOutStream *, const char *, unsigned int)
UNDEF:00002DB0                 extrn ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z:near
UNDEF:00002DB0                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+106p
UNDEF:00002DB0                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+22Bp
UNDEF:00002DB4 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:00002DB4                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:00002DB4                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+D5p
UNDEF:00002DB4                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+15Bp ...
UNDEF:00002DB8 ; class CStdOutStream & __stdcall endl(class CStdOutStream &)
UNDEF:00002DB8                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:00002DB8                                         ; DATA XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+A2o
UNDEF:00002DB8                                         ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+BBo ...
UNDEF:00002DBC                 extrn __RTC_CheckEsp:near
UNDEF:00002DBC                                         ; CODE XREF: CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3F8p
UNDEF:00002DBC                                         ; CUpdateCallbackConsole::StartScanning(void)+52p ...
UNDEF:00002DC0                 extrn __RTC_Shutdown:near
UNDEF:00002DC0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002DC4                 extrn __RTC_InitBase:near
UNDEF:00002DC4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002DC8 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:00002DC8                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:00002DC8                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:00002DCC ; void __thiscall CPercentPrinter::ClosePrint(CPercentPrinter *__hidden this, bool)
UNDEF:00002DCC                 extrn ?ClosePrint@CPercentPrinter@@QAEX_N@Z:near
UNDEF:00002DCC                                         ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+59p
UNDEF:00002DCC                                         ; CCallbackConsoleBase::ClosePercents2(void)+22p ...
UNDEF:00002DD0 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00002DD0                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00002DD0                                         ; CODE XREF: CUpdateCallbackConsole::StartScanning(void)+46p
UNDEF:00002DD0                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+8Cp ...
UNDEF:00002DD4 ; void __thiscall CPercentPrinter::Print(CPercentPrinter *__hidden this)
UNDEF:00002DD4                 extrn ?Print@CPercentPrinter@@QAEXXZ:near
UNDEF:00002DD4                                         ; CODE XREF: CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+6Ap
UNDEF:00002DD4                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+1A4p ...
UNDEF:00002DD8 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00002DD8                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00002DD8                                         ; CODE XREF: CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+5Fp
UNDEF:00002DD8                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+C9p ...
UNDEF:00002DDC ; struct UString __stdcall __high NWindows::NError::MyFormatMessage(unsigned __int32)
UNDEF:00002DDC                 extrn ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:near
UNDEF:00002DDC                                         ; CODE XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+B0p
UNDEF:00002DE0                 extrn ___security_cookie:near
UNDEF:00002DE0                                         ; DATA XREF: CCallbackConsoleBase::CommonError(UString const &,ulong,bool)+2Er
UNDEF:00002DE0                                         ; CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+28r ...
UNDEF:00002DE4                 extrn ___CxxFrameHandler3:near
UNDEF:00002DE4                                         ; CODE XREF: __ehhandler$?CommonError@CCallbackConsoleBase@@IAEXABVUString@@K_N@Z+16j
UNDEF:00002DE4                                         ; __ehhandler$?ScanError_Base@CCallbackConsoleBase@@IAEJABVUString@@K@Z+16j ...
UNDEF:00002DE8 ; __fastcall __security_check_cookie(x)
UNDEF:00002DE8                 extrn @__security_check_cookie@4:near
UNDEF:00002DE8                                         ; CODE XREF: PrintPropPair(AString &,char const *,unsigned __int64)+6Dp
UNDEF:00002DE8                                         ; CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+112p ...
UNDEF:00002DEC ; void __cdecl operator delete(void *)
UNDEF:00002DEC                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00002DEC                                         ; AString::~AString(void)+23p ...
UNDEF:00002DF0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002DF0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002DF0                                         ; CODE XREF: CCallbackConsoleBase::ScanError_Base(UString const &,ulong)+9Bp
UNDEF:00002DF0                                         ; CCallbackConsoleBase::OpenFileError_Base(UString const &,ulong)+9Bp ...
UNDEF:00002DF4 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00002DF4                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00002DF4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00002DF4                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:00002DF8 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00002DF8                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00002DF8                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00002DF8                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00002DFC ; void __stdcall Print_DirItemsStat(struct AString *, const struct CDirItemsStat *)
UNDEF:00002DFC                 extrn ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z:near
UNDEF:00002DFC                                         ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+8Cp
UNDEF:00002E00 ; public: __thiscall AString::AString(void)
UNDEF:00002E00                 extrn ??0AString@@QAE@XZ:near
UNDEF:00002E00                                         ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+78p
UNDEF:00002E00                                         ; CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+5Dp ...
UNDEF:00002E04 ; void __thiscall CPercentPrinterState::ClearCurState(CPercentPrinterState *__hidden this)
UNDEF:00002E04                 extrn ?ClearCurState@CPercentPrinterState@@QAEXXZ:near
UNDEF:00002E04                                         ; CODE XREF: CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)+64p
UNDEF:00002E04                                         ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+144p
UNDEF:00002E08 ; void __stdcall PrintSize_bytes_Smart(struct AString *, unsigned __int64)
UNDEF:00002E08                 extrn ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z:near
UNDEF:00002E08                                         ; CODE XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+A5p
UNDEF:00002E08                                         ; CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+90p
UNDEF:00002E0C ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00002E0C                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00002E0C                                         ; CODE XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+92p
UNDEF:00002E0C                                         ; PrintPropPair(AString &,char const *,unsigned __int64)+38p ...
UNDEF:00002E10 ; void __thiscall AString::Add_LF(AString *__hidden this)
UNDEF:00002E10                 extrn ?Add_LF@AString@@QAEXXZ:near
UNDEF:00002E10                                         ; CODE XREF: CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+85p
UNDEF:00002E10                                         ; CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)+ADp
UNDEF:00002E14 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:00002E14                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:00002E14                                         ; CODE XREF: PrintPropPair(AString &,char const *,unsigned __int64)+2Cp
UNDEF:00002E14                                         ; CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)+CAp
UNDEF:00002E18 ; public: __thiscall AString::AString(char const *)
UNDEF:00002E18                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:00002E18                                         ; CODE XREF: CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)+78p
UNDEF:00002E1C ; void __thiscall CStdOutStream::PrintUString(CStdOutStream *__hidden this, const struct UString *, struct AString *)
UNDEF:00002E1C                 extrn ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z:near
UNDEF:00002E1C                                         ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+EAp
UNDEF:00002E1C                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+11Ap
UNDEF:00002E20 ; void __thiscall AString::Add_Space(AString *__hidden this)
UNDEF:00002E20                 extrn ?Add_Space@AString@@QAEXXZ:near
UNDEF:00002E20                                         ; CODE XREF: CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)+9Ap
UNDEF:00002E20                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+B5p
UNDEF:00002E24 ; unsigned int NConsoleClose::g_BreakCounter
UNDEF:00002E24                 extrn ?g_BreakCounter@NConsoleClose@@3IA:near
UNDEF:00002E24                                         ; DATA XREF: NConsoleClose::TestBreakSignal(void)+5r
UNDEF:00002E28 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00002E28                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00002E28                                         ; CODE XREF: CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+F8p
UNDEF:00002E28                                         ; CCallbackConsoleBase::PrintProgress(wchar_t const *,char const *,bool)+1B2p
UNDEF:00002E2C ; void __stdcall SetExtractErrorMessage(int, int, struct AString *)
UNDEF:00002E2C                 extrn ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z:near
UNDEF:00002E2C                                         ; CODE XREF: CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+99p
UNDEF:00002E30 ; struct UString __stdcall __high GetPassword(struct CStdOutStream *)
UNDEF:00002E30                 extrn ?GetPassword@@YG?AVUString@@PAVCStdOutStream@@@Z:near
UNDEF:00002E30                                         ; CODE XREF: CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)+7Ap
UNDEF:00002E30                                         ; CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)+7Bp
UNDEF:00002E34 ; BSTR __stdcall SysAllocString(const OLECHAR *psz)
UNDEF:00002E34                 extrn __imp__SysAllocString@4:near
UNDEF:00002E34                                         ; CODE XREF: StringToBstr(wchar_t const *,wchar_t * *)+Ap
UNDEF:00002E34                                         ; DATA XREF: StringToBstr(wchar_t const *,wchar_t * *)+Ar
UNDEF:00002E38 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00002E38                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00002E38                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00002E3C ; void *__cdecl operator new(unsigned int)
UNDEF:00002E3C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<UString>::Add(UString const &)+3Bp
UNDEF:00002E3C                                         ; CRecordVector<ulong>::ReserveOnePosition(void)+59p ...
UNDEF:00002E40 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00002E40                 extrn _memcpy:near      ; CODE XREF: CRecordVector<ulong>::ReserveOnePosition(void)+87p
UNDEF:00002E40                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:00002E44 ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00002E44                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+12p
UNDEF:00002E48 ; __stdcall CriticalSection_Init(x)
UNDEF:00002E48                 extrn _CriticalSection_Init@4:near
UNDEF:00002E48                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00002E4C ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00002E4C                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00002E4C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00002E4C                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00002E4C
UNDEF:00002E4C
UNDEF:00002E4C                 end