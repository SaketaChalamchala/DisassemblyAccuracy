.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 420F27F61ACE88E7C0B3DCCC67196D12
.rdata:00000000 ; Input CRC32 : 0AEB58AB
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\InOutTempBuffer.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67833:                               ; DATA XREF: .data:_kTempFilePrefixStringo
.rdata:00000000                 unicode 0, <7zt>,0
.rdata:00000000 _rdata          ends
.rdata:00000000
.data:00000008 ; ===========================================================================
.data:00000008
.data:00000008 ; Segment type: Pure data
.data:00000008 ; Segment permissions: Read/Write
.data:00000008 _data           segment dword public 'DATA' use32
.data:00000008                 assume cs:_data
.data:00000008                 ;org 8
.data:00000008 ; wchar_t *kTempFilePrefixString
.data:00000008 _kTempFilePrefixString dd offset $SG67833
.data:00000008                                         ; DATA XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+39r
.data:00000008 _data           ends                    ; "7zt"
.data:00000008
.text:0000000C ; ===========================================================================
.text:0000000C
.text:0000000C ; Segment type: Pure code
.text:0000000C ; Segment permissions: Read/Execute
.text:0000000C _text           segment para public 'CODE' use32
.text:0000000C                 assume cs:_text
.text:0000000C                 ;org 0Ch
.text:0000000C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000000C
.text:0000000C ; =============== S U B R O U T I N E =======================================
.text:0000000C
.text:0000000C ; Attributes: bp-based frame
.text:0000000C
.text:0000000C ; public: __thiscall CInOutTempBuffer::CInOutTempBuffer(void)
.text:0000000C                 public ??0CInOutTempBuffer@@QAE@XZ
.text:0000000C ??0CInOutTempBuffer@@QAE@XZ proc near
.text:0000000C
.text:0000000C var_10          = dword ptr -10h
.text:0000000C var_C           = dword ptr -0Ch
.text:0000000C var_4           = dword ptr -4
.text:0000000C
.text:0000000C                 push    ebp
.text:0000000D                 mov     ebp, esp
.text:0000000F                 push    0FFFFFFFFh
.text:00000011                 push    offset __ehhandler$??0CInOutTempBuffer@@QAE@XZ
.text:00000016                 mov     eax, large fs:0
.text:0000001C                 push    eax
.text:0000001D                 push    ecx
.text:0000001E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000025                 mov     eax, dword ptr ds:___security_cookie
.text:0000002A                 xor     eax, ebp
.text:0000002C                 push    eax
.text:0000002D                 lea     eax, [ebp+var_C]
.text:00000030                 mov     large fs:0, eax
.text:00000036                 mov     [ebp+var_10], ecx
.text:00000039                 mov     ecx, [ebp+var_10] ; this
.text:0000003C                 call    ??0CTempFile@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CTempFile::CTempFile(void)
.text:00000041                 mov     [ebp+var_4], 0
.text:00000048                 mov     ecx, [ebp+var_10]
.text:0000004B                 add     ecx, 10h        ; this
.text:0000004E                 call    ??0COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::COutFile(void)
.text:00000053                 mov     eax, [ebp+var_10]
.text:00000056                 mov     dword ptr [eax+20h], 0
.text:0000005D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000064                 mov     eax, [ebp+var_10]
.text:00000067                 mov     ecx, [ebp+var_C]
.text:0000006A                 mov     large fs:0, ecx
.text:00000071                 pop     ecx
.text:00000072                 add     esp, 10h
.text:00000075                 cmp     ebp, esp
.text:00000077                 call    __RTC_CheckEsp
.text:0000007C                 mov     esp, ebp
.text:0000007E                 pop     ebp
.text:0000007F                 retn
.text:0000007F ??0CInOutTempBuffer@@QAE@XZ endp
.text:0000007F
.text:0000007F ; ---------------------------------------------------------------------------
.text:00000080                 db 0Ch dup(0CCh)
.text:0000008C
.text:0000008C ; =============== S U B R O U T I N E =======================================
.text:0000008C
.text:0000008C ; Attributes: bp-based frame
.text:0000008C
.text:0000008C ; void __thiscall CInOutTempBuffer::Create(CInOutTempBuffer *__hidden this)
.text:0000008C                 public ?Create@CInOutTempBuffer@@QAEXXZ
.text:0000008C ?Create@CInOutTempBuffer@@QAEXXZ proc near
.text:0000008C
.text:0000008C var_8           = dword ptr -8
.text:0000008C var_4           = dword ptr -4
.text:0000008C
.text:0000008C                 push    ebp
.text:0000008D                 mov     ebp, esp
.text:0000008F                 sub     esp, 8
.text:00000092                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000099                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000A0                 mov     [ebp+var_4], ecx
.text:000000A3                 mov     eax, [ebp+var_4]
.text:000000A6                 cmp     dword ptr [eax+20h], 0
.text:000000AA                 jnz     short loc_C5
.text:000000AC                 push    100000h         ; unsigned int
.text:000000B1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000000B6                 add     esp, 4
.text:000000B9                 mov     [ebp+var_8], eax
.text:000000BC                 mov     ecx, [ebp+var_4]
.text:000000BF                 mov     edx, [ebp+var_8]
.text:000000C2                 mov     [ecx+20h], edx
.text:000000C5
.text:000000C5 loc_C5:                                 ; CODE XREF: CInOutTempBuffer::Create(void)+1Ej
.text:000000C5                 add     esp, 8
.text:000000C8                 cmp     ebp, esp
.text:000000CA                 call    __RTC_CheckEsp
.text:000000CF                 mov     esp, ebp
.text:000000D1                 pop     ebp
.text:000000D2                 retn
.text:000000D2 ?Create@CInOutTempBuffer@@QAEXXZ endp
.text:000000D2
.text:000000D2 ; ---------------------------------------------------------------------------
.text:000000D3                 db 9 dup(0CCh)
.text:000000DC
.text:000000DC ; =============== S U B R O U T I N E =======================================
.text:000000DC
.text:000000DC ; Attributes: bp-based frame
.text:000000DC
.text:000000DC ; _DWORD __thiscall CInOutTempBuffer::~CInOutTempBuffer(CInOutTempBuffer *__hidden this)
.text:000000DC                 public ??1CInOutTempBuffer@@QAE@XZ
.text:000000DC ??1CInOutTempBuffer@@QAE@XZ proc near
.text:000000DC
.text:000000DC var_14          = dword ptr -14h
.text:000000DC var_10          = dword ptr -10h
.text:000000DC var_C           = dword ptr -0Ch
.text:000000DC var_4           = dword ptr -4
.text:000000DC
.text:000000DC                 push    ebp
.text:000000DD                 mov     ebp, esp
.text:000000DF                 push    0FFFFFFFFh
.text:000000E1                 push    offset __ehhandler$??1CInOutTempBuffer@@QAE@XZ
.text:000000E6                 mov     eax, large fs:0
.text:000000EC                 push    eax
.text:000000ED                 sub     esp, 8
.text:000000F0                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000F7                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000FE                 mov     eax, dword ptr ds:___security_cookie
.text:00000103                 xor     eax, ebp
.text:00000105                 push    eax
.text:00000106                 lea     eax, [ebp+var_C]
.text:00000109                 mov     large fs:0, eax
.text:0000010F                 mov     [ebp+var_10], ecx
.text:00000112                 mov     [ebp+var_4], 0
.text:00000119                 mov     eax, [ebp+var_10]
.text:0000011C                 mov     ecx, [eax+20h]
.text:0000011F                 mov     [ebp+var_14], ecx
.text:00000122                 mov     edx, [ebp+var_14]
.text:00000125                 push    edx             ; void *
.text:00000126                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000012B                 add     esp, 4
.text:0000012E                 mov     ecx, [ebp+var_10]
.text:00000131                 add     ecx, 10h        ; this
.text:00000134                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000139                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000140                 mov     ecx, [ebp+var_10] ; this
.text:00000143                 call    ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CTempFile::~CTempFile(void)
.text:00000148                 mov     ecx, [ebp+var_C]
.text:0000014B                 mov     large fs:0, ecx
.text:00000152                 pop     ecx
.text:00000153                 add     esp, 14h
.text:00000156                 cmp     ebp, esp
.text:00000158                 call    __RTC_CheckEsp
.text:0000015D                 mov     esp, ebp
.text:0000015F                 pop     ebp
.text:00000160                 retn
.text:00000160 ??1CInOutTempBuffer@@QAE@XZ endp
.text:00000160
.text:00000160 ; ---------------------------------------------------------------------------
.text:00000161                 db 0Bh dup(0CCh)
.text:0000016C
.text:0000016C ; =============== S U B R O U T I N E =======================================
.text:0000016C
.text:0000016C ; Attributes: bp-based frame
.text:0000016C
.text:0000016C ; void __thiscall CInOutTempBuffer::InitWriting(CInOutTempBuffer *__hidden this)
.text:0000016C                 public ?InitWriting@CInOutTempBuffer@@QAEXXZ
.text:0000016C ?InitWriting@CInOutTempBuffer@@QAEXXZ proc near
.text:0000016C
.text:0000016C var_4           = dword ptr -4
.text:0000016C
.text:0000016C                 push    ebp
.text:0000016D                 mov     ebp, esp
.text:0000016F                 push    ecx
.text:00000170                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000177                 mov     [ebp+var_4], ecx
.text:0000017A                 mov     eax, [ebp+var_4]
.text:0000017D                 mov     dword ptr [eax+24h], 0
.text:00000184                 mov     ecx, [ebp+var_4]
.text:00000187                 mov     byte ptr [ecx+34h], 0
.text:0000018B                 mov     edx, [ebp+var_4]
.text:0000018E                 mov     dword ptr [edx+28h], 0
.text:00000195                 mov     dword ptr [edx+2Ch], 0
.text:0000019C                 mov     eax, [ebp+var_4]
.text:0000019F                 mov     dword ptr [eax+30h], 0FFFFFFFFh
.text:000001A6                 mov     esp, ebp
.text:000001A8                 pop     ebp
.text:000001A9                 retn
.text:000001A9 ?InitWriting@CInOutTempBuffer@@QAEXXZ endp
.text:000001A9
.text:000001A9 ; ---------------------------------------------------------------------------
.text:000001AA                 align 4
.text:000001AC
.text:000001AC ; =============== S U B R O U T I N E =======================================
.text:000001AC
.text:000001AC ; Attributes: bp-based frame
.text:000001AC
.text:000001AC ; bool __thiscall CInOutTempBuffer::WriteToFile(CInOutTempBuffer *this, const void *, unsigned int)
.text:000001AC                 public ?WriteToFile@CInOutTempBuffer@@AAE_NPBXI@Z
.text:000001AC ?WriteToFile@CInOutTempBuffer@@AAE_NPBXI@Z proc near
.text:000001AC                                         ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+BAp
.text:000001AC
.text:000001AC var_10          = dword ptr -10h
.text:000001AC var_C           = dword ptr -0Ch
.text:000001AC var_8           = dword ptr -8
.text:000001AC var_4           = dword ptr -4
.text:000001AC arg_0           = dword ptr  8
.text:000001AC arg_4           = dword ptr  0Ch
.text:000001AC
.text:000001AC                 push    ebp
.text:000001AD                 mov     ebp, esp
.text:000001AF                 sub     esp, 10h
.text:000001B2                 mov     eax, 0CCCCCCCCh
.text:000001B7                 mov     [ebp+var_10], eax
.text:000001BA                 mov     [ebp+var_C], eax
.text:000001BD                 mov     [ebp+var_8], eax
.text:000001C0                 mov     [ebp+var_4], eax
.text:000001C3                 mov     [ebp+var_4], ecx
.text:000001C6                 cmp     [ebp+arg_4], 0
.text:000001CA                 jnz     short loc_1D3
.text:000001CC                 mov     al, 1
.text:000001CE                 jmp     loc_261
.text:000001D3 ; ---------------------------------------------------------------------------
.text:000001D3
.text:000001D3 loc_1D3:                                ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+1Ej
.text:000001D3                 mov     eax, [ebp+var_4]
.text:000001D6                 movzx   ecx, byte ptr [eax+34h]
.text:000001DA                 test    ecx, ecx
.text:000001DC                 jnz     short loc_205
.text:000001DE                 mov     edx, [ebp+var_4]
.text:000001E1                 add     edx, 10h
.text:000001E4                 push    edx             ; struct NWindows::NFile::NIO::COutFile *
.text:000001E5                 mov     eax, ds:_kTempFilePrefixString
.text:000001EA                 push    eax             ; wchar_t *
.text:000001EB                 mov     ecx, [ebp+var_4] ; this
.text:000001EE                 call    ?CreateRandomInTempFolder@CTempFile@NDir@NFile@NWindows@@QAE_NPB_WPAVCOutFile@NIO@34@@Z ; NWindows::NFile::NDir::CTempFile::CreateRandomInTempFolder(wchar_t const *,NWindows::NFile::NIO::COutFile *)
.text:000001F3                 movzx   ecx, al
.text:000001F6                 test    ecx, ecx
.text:000001F8                 jnz     short loc_1FE
.text:000001FA                 xor     al, al
.text:000001FC                 jmp     short loc_261
.text:000001FE ; ---------------------------------------------------------------------------
.text:000001FE
.text:000001FE loc_1FE:                                ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+4Cj
.text:000001FE                 mov     edx, [ebp+var_4]
.text:00000201                 mov     byte ptr [edx+34h], 1
.text:00000205
.text:00000205 loc_205:                                ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+30j
.text:00000205                 lea     eax, [ebp+var_C]
.text:00000208                 push    eax             ; unsigned int *
.text:00000209                 mov     ecx, [ebp+arg_4]
.text:0000020C                 push    ecx             ; unsigned int
.text:0000020D                 mov     edx, [ebp+arg_0]
.text:00000210                 push    edx             ; void *
.text:00000211                 mov     ecx, [ebp+var_4]
.text:00000214                 add     ecx, 10h        ; this
.text:00000217                 call    ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z ; NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)
.text:0000021C                 movzx   eax, al
.text:0000021F                 test    eax, eax
.text:00000221                 jnz     short loc_227
.text:00000223                 xor     al, al
.text:00000225                 jmp     short loc_261
.text:00000227 ; ---------------------------------------------------------------------------
.text:00000227
.text:00000227 loc_227:                                ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+75j
.text:00000227                 mov     ecx, [ebp+var_C]
.text:0000022A                 push    ecx
.text:0000022B                 mov     edx, [ebp+arg_0]
.text:0000022E                 mov     eax, [ebp+var_4]
.text:00000231                 mov     ecx, [eax+30h]
.text:00000234                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00000239                 mov     ecx, [ebp+var_4]
.text:0000023C                 mov     [ecx+30h], eax
.text:0000023F                 mov     edx, [ebp+var_C]
.text:00000242                 xor     eax, eax
.text:00000244                 mov     ecx, [ebp+var_4]
.text:00000247                 add     edx, [ecx+28h]
.text:0000024A                 adc     eax, [ecx+2Ch]
.text:0000024D                 mov     ecx, [ebp+var_4]
.text:00000250                 mov     [ecx+28h], edx
.text:00000253                 mov     [ecx+2Ch], eax
.text:00000256                 mov     edx, [ebp+var_C]
.text:00000259                 xor     eax, eax
.text:0000025B                 cmp     edx, [ebp+arg_4]
.text:0000025E                 setz    al
.text:00000261
.text:00000261 loc_261:                                ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+22j
.text:00000261                                         ; CInOutTempBuffer::WriteToFile(void const *,uint)+50j ...
.text:00000261                 push    edx
.text:00000262                 mov     ecx, ebp
.text:00000264                 push    eax
.text:00000265                 lea     edx, $LN9
.text:0000026B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000270                 pop     eax
.text:00000271                 pop     edx
.text:00000272                 add     esp, 10h
.text:00000275                 cmp     ebp, esp
.text:00000277                 call    __RTC_CheckEsp
.text:0000027C                 mov     esp, ebp
.text:0000027E                 pop     ebp
.text:0000027F                 retn    8
.text:0000027F ?WriteToFile@CInOutTempBuffer@@AAE_NPBXI@Z endp
.text:0000027F
.text:0000027F ; ---------------------------------------------------------------------------
.text:00000282                 align 4
.text:00000284 $LN9            dd 1                    ; DATA XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+B9o
.text:00000288                 dd offset $LN8
.text:0000028C $LN8            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000288o
.text:00000294                 dd offset $LN7          ; "processed"
.text:00000298 $LN7            db 'processed',0        ; DATA XREF: .text:00000294o
.text:000002A2                 db 0Ah dup(0CCh)
.text:000002AC
.text:000002AC ; =============== S U B R O U T I N E =======================================
.text:000002AC
.text:000002AC ; Attributes: bp-based frame
.text:000002AC
.text:000002AC ; bool __thiscall CInOutTempBuffer::Write(CInOutTempBuffer *this, const void *Src, unsigned int)
.text:000002AC                 public ?Write@CInOutTempBuffer@@QAE_NPBXI@Z
.text:000002AC ?Write@CInOutTempBuffer@@QAE_NPBXI@Z proc near
.text:000002AC
.text:000002AC Size            = dword ptr -8
.text:000002AC var_4           = dword ptr -4
.text:000002AC Src             = dword ptr  8
.text:000002AC arg_4           = dword ptr  0Ch
.text:000002AC
.text:000002AC                 push    ebp
.text:000002AD                 mov     ebp, esp
.text:000002AF                 sub     esp, 8
.text:000002B2                 mov     [ebp+Size], 0CCCCCCCCh
.text:000002B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002C0                 mov     [ebp+var_4], ecx
.text:000002C3                 cmp     [ebp+arg_4], 0
.text:000002C7                 jnz     short loc_2D0
.text:000002C9                 mov     al, 1
.text:000002CB                 jmp     loc_36B
.text:000002D0 ; ---------------------------------------------------------------------------
.text:000002D0
.text:000002D0 loc_2D0:                                ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+1Bj
.text:000002D0                 mov     eax, [ebp+var_4]
.text:000002D3                 mov     ecx, 100000h
.text:000002D8                 sub     ecx, [eax+24h]
.text:000002DB                 mov     [ebp+Size], ecx
.text:000002DE                 jz      short loc_35B
.text:000002E0                 mov     edx, [ebp+Size]
.text:000002E3                 cmp     edx, [ebp+arg_4]
.text:000002E6                 jbe     short loc_2EE
.text:000002E8                 mov     eax, [ebp+arg_4]
.text:000002EB                 mov     [ebp+Size], eax
.text:000002EE
.text:000002EE loc_2EE:                                ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+3Aj
.text:000002EE                 mov     ecx, [ebp+Size]
.text:000002F1                 push    ecx             ; Size
.text:000002F2                 mov     edx, [ebp+Src]
.text:000002F5                 push    edx             ; Src
.text:000002F6                 mov     eax, [ebp+var_4]
.text:000002F9                 mov     ecx, [eax+20h]
.text:000002FC                 mov     edx, [ebp+var_4]
.text:000002FF                 add     ecx, [edx+24h]
.text:00000302                 push    ecx             ; Dst
.text:00000303                 call    _memcpy
.text:00000308                 add     esp, 0Ch
.text:0000030B                 mov     eax, [ebp+Size]
.text:0000030E                 push    eax
.text:0000030F                 mov     edx, [ebp+Src]
.text:00000312                 mov     ecx, [ebp+var_4]
.text:00000315                 mov     ecx, [ecx+30h]
.text:00000318                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:0000031D                 mov     edx, [ebp+var_4]
.text:00000320                 mov     [edx+30h], eax
.text:00000323                 mov     eax, [ebp+var_4]
.text:00000326                 mov     ecx, [eax+24h]
.text:00000329                 add     ecx, [ebp+Size]
.text:0000032C                 mov     edx, [ebp+var_4]
.text:0000032F                 mov     [edx+24h], ecx
.text:00000332                 mov     eax, [ebp+Size]
.text:00000335                 xor     ecx, ecx
.text:00000337                 mov     edx, [ebp+var_4]
.text:0000033A                 add     eax, [edx+28h]
.text:0000033D                 adc     ecx, [edx+2Ch]
.text:00000340                 mov     edx, [ebp+var_4]
.text:00000343                 mov     [edx+28h], eax
.text:00000346                 mov     [edx+2Ch], ecx
.text:00000349                 mov     eax, [ebp+arg_4]
.text:0000034C                 sub     eax, [ebp+Size]
.text:0000034F                 mov     [ebp+arg_4], eax
.text:00000352                 mov     ecx, [ebp+Src]
.text:00000355                 add     ecx, [ebp+Size]
.text:00000358                 mov     [ebp+Src], ecx
.text:0000035B
.text:0000035B loc_35B:                                ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+32j
.text:0000035B                 mov     edx, [ebp+arg_4]
.text:0000035E                 push    edx             ; unsigned int
.text:0000035F                 mov     eax, [ebp+Src]
.text:00000362                 push    eax             ; void *
.text:00000363                 mov     ecx, [ebp+var_4] ; this
.text:00000366                 call    ?WriteToFile@CInOutTempBuffer@@AAE_NPBXI@Z ; CInOutTempBuffer::WriteToFile(void const *,uint)
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+1Fj
.text:0000036B                 add     esp, 8
.text:0000036E                 cmp     ebp, esp
.text:00000370                 call    __RTC_CheckEsp
.text:00000375                 mov     esp, ebp
.text:00000377                 pop     ebp
.text:00000378                 retn    8
.text:00000378 ?Write@CInOutTempBuffer@@QAE_NPBXI@Z endp
.text:00000378
.text:00000378 ; ---------------------------------------------------------------------------
.text:0000037B                 align 4
.text:0000037C
.text:0000037C ; =============== S U B R O U T I N E =======================================
.text:0000037C
.text:0000037C ; Attributes: bp-based frame
.text:0000037C
.text:0000037C ; __int32 __thiscall CInOutTempBuffer::WriteToStream(CInOutTempBuffer *this, struct ISequentialOutStream *)
.text:0000037C                 public ?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z
.text:0000037C ?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z proc near
.text:0000037C
.text:0000037C var_60          = dword ptr -60h
.text:0000037C var_5C          = dword ptr -5Ch
.text:0000037C var_58          = dword ptr -58h
.text:0000037C var_54          = dword ptr -54h
.text:0000037C var_50          = dword ptr -50h
.text:0000037C var_4C          = dword ptr -4Ch
.text:0000037C var_48          = dword ptr -48h
.text:0000037C var_40          = dword ptr -40h
.text:0000037C var_34          = byte ptr -34h
.text:0000037C var_20          = dword ptr -20h
.text:0000037C var_1C          = dword ptr -1Ch
.text:0000037C var_18          = dword ptr -18h
.text:0000037C var_14          = dword ptr -14h
.text:0000037C var_10          = dword ptr -10h
.text:0000037C var_C           = dword ptr -0Ch
.text:0000037C var_4           = dword ptr -4
.text:0000037C arg_0           = dword ptr  8
.text:0000037C
.text:0000037C                 push    ebp
.text:0000037D                 mov     ebp, esp
.text:0000037F                 push    0FFFFFFFFh
.text:00000381                 push    offset __ehhandler$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z
.text:00000386                 mov     eax, large fs:0
.text:0000038C                 push    eax
.text:0000038D                 sub     esp, 54h
.text:00000390                 push    edi
.text:00000391                 push    ecx
.text:00000392                 lea     edi, [ebp+var_60]
.text:00000395                 mov     ecx, 15h
.text:0000039A                 mov     eax, 0CCCCCCCCh
.text:0000039F                 rep stosd
.text:000003A1                 pop     ecx
.text:000003A2                 mov     eax, dword ptr ds:___security_cookie
.text:000003A7                 xor     eax, ebp
.text:000003A9                 push    eax
.text:000003AA                 lea     eax, [ebp+var_C]
.text:000003AD                 mov     large fs:0, eax
.text:000003B3                 mov     [ebp+var_10], ecx
.text:000003B6                 mov     ecx, [ebp+var_10]
.text:000003B9                 add     ecx, 10h        ; this
.text:000003BC                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:000003C1                 movzx   eax, al
.text:000003C4                 test    eax, eax
.text:000003C6                 jnz     short loc_3D2
.text:000003C8                 mov     eax, 80004005h
.text:000003CD                 jmp     loc_5B5
.text:000003D2 ; ---------------------------------------------------------------------------
.text:000003D2
.text:000003D2 loc_3D2:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+4Aj
.text:000003D2                 mov     [ebp+var_18], 0
.text:000003D9                 mov     [ebp+var_14], 0
.text:000003E0                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:000003E7                 mov     ecx, [ebp+var_10]
.text:000003EA                 cmp     dword ptr [ecx+24h], 0
.text:000003EE                 jz      short loc_444
.text:000003F0                 mov     edx, [ebp+var_10]
.text:000003F3                 mov     eax, [edx+24h]
.text:000003F6                 push    eax             ; unsigned int
.text:000003F7                 mov     ecx, [ebp+var_10]
.text:000003FA                 mov     edx, [ecx+20h]
.text:000003FD                 push    edx             ; void *
.text:000003FE                 mov     eax, [ebp+arg_0]
.text:00000401                 push    eax             ; struct ISequentialOutStream *
.text:00000402                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000407                 mov     [ebp+var_20], eax
.text:0000040A                 cmp     [ebp+var_20], 0
.text:0000040E                 jz      short loc_418
.text:00000410                 mov     eax, [ebp+var_20]
.text:00000413                 jmp     loc_5B5
.text:00000418 ; ---------------------------------------------------------------------------
.text:00000418
.text:00000418 loc_418:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+92j
.text:00000418                 mov     ecx, [ebp+var_10]
.text:0000041B                 mov     edx, [ecx+24h]
.text:0000041E                 push    edx
.text:0000041F                 mov     eax, [ebp+var_10]
.text:00000422                 mov     edx, [eax+20h]
.text:00000425                 mov     ecx, [ebp+var_1C]
.text:00000428                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:0000042D                 mov     [ebp+var_1C], eax
.text:00000430                 mov     ecx, [ebp+var_10]
.text:00000433                 mov     edx, [ecx+24h]
.text:00000436                 xor     eax, eax
.text:00000438                 add     edx, [ebp+var_18]
.text:0000043B                 adc     eax, [ebp+var_14]
.text:0000043E                 mov     [ebp+var_18], edx
.text:00000441                 mov     [ebp+var_14], eax
.text:00000444
.text:00000444 loc_444:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+72j
.text:00000444                 mov     ecx, [ebp+var_10]
.text:00000447                 movzx   edx, byte ptr [ecx+34h]
.text:0000044B                 test    edx, edx
.text:0000044D                 jz      loc_57B
.text:00000453                 lea     ecx, [ebp+var_34] ; this
.text:00000456                 call    ??0CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::CInFile(void)
.text:0000045B                 mov     [ebp+var_4], 0
.text:00000462                 mov     ecx, [ebp+var_10] ; this
.text:00000465                 call    ?GetPath@CTempFile@NDir@NFile@NWindows@@QBEABVUString@@XZ ; NWindows::NFile::NDir::CTempFile::GetPath(void)
.text:0000046A                 mov     ecx, eax
.text:0000046C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000471                 push    eax             ; wchar_t *
.text:00000472                 lea     ecx, [ebp+var_34] ; this
.text:00000475                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *)
.text:0000047A                 movzx   eax, al
.text:0000047D                 test    eax, eax
.text:0000047F                 jnz     short loc_49F
.text:00000481                 mov     [ebp+var_4C], 80004005h
.text:00000488                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000048F                 lea     ecx, [ebp+var_34] ; this
.text:00000492                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000497                 mov     eax, [ebp+var_4C]
.text:0000049A                 jmp     loc_5B5
.text:0000049F ; ---------------------------------------------------------------------------
.text:0000049F
.text:0000049F loc_49F:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+103j
.text:0000049F                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+1EBj
.text:0000049F                 mov     ecx, [ebp+var_10]
.text:000004A2                 mov     [ebp+var_58], ecx
.text:000004A5                 mov     edx, [ebp+var_58]
.text:000004A8                 mov     eax, [ebp+var_14]
.text:000004AB                 cmp     eax, [edx+2Ch]
.text:000004AE                 ja      loc_56C
.text:000004B4                 jb      short loc_4C5
.text:000004B6                 mov     ecx, [ebp+var_58]
.text:000004B9                 mov     edx, [ebp+var_18]
.text:000004BC                 cmp     edx, [ecx+28h]
.text:000004BF                 jnb     loc_56C
.text:000004C5
.text:000004C5 loc_4C5:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+138j
.text:000004C5                 lea     eax, [ebp+var_40]
.text:000004C8                 push    eax             ; unsigned int *
.text:000004C9                 push    100000h         ; unsigned int
.text:000004CE                 mov     ecx, [ebp+var_10]
.text:000004D1                 mov     edx, [ecx+20h]
.text:000004D4                 push    edx             ; void *
.text:000004D5                 lea     ecx, [ebp+var_34] ; this
.text:000004D8                 call    ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)
.text:000004DD                 movzx   eax, al
.text:000004E0                 test    eax, eax
.text:000004E2                 jnz     short loc_502
.text:000004E4                 mov     [ebp+var_50], 80004005h
.text:000004EB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004F2                 lea     ecx, [ebp+var_34] ; this
.text:000004F5                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000004FA                 mov     eax, [ebp+var_50]
.text:000004FD                 jmp     loc_5B5
.text:00000502 ; ---------------------------------------------------------------------------
.text:00000502
.text:00000502 loc_502:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+166j
.text:00000502                 cmp     [ebp+var_40], 0
.text:00000506                 jnz     short loc_50A
.text:00000508                 jmp     short loc_56C
.text:0000050A ; ---------------------------------------------------------------------------
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+18Aj
.text:0000050A                 mov     ecx, [ebp+var_40]
.text:0000050D                 push    ecx             ; unsigned int
.text:0000050E                 mov     edx, [ebp+var_10]
.text:00000511                 mov     eax, [edx+20h]
.text:00000514                 push    eax             ; void *
.text:00000515                 mov     ecx, [ebp+arg_0]
.text:00000518                 push    ecx             ; struct ISequentialOutStream *
.text:00000519                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000051E                 mov     [ebp+var_48], eax
.text:00000521                 cmp     [ebp+var_48], 0
.text:00000525                 jz      short loc_541
.text:00000527                 mov     edx, [ebp+var_48]
.text:0000052A                 mov     [ebp+var_54], edx
.text:0000052D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000534                 lea     ecx, [ebp+var_34] ; this
.text:00000537                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:0000053C                 mov     eax, [ebp+var_54]
.text:0000053F                 jmp     short loc_5B5
.text:00000541 ; ---------------------------------------------------------------------------
.text:00000541
.text:00000541 loc_541:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+1A9j
.text:00000541                 mov     eax, [ebp+var_40]
.text:00000544                 push    eax
.text:00000545                 mov     ecx, [ebp+var_10]
.text:00000548                 mov     edx, [ecx+20h]
.text:0000054B                 mov     ecx, [ebp+var_1C]
.text:0000054E                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00000553                 mov     [ebp+var_1C], eax
.text:00000556                 mov     edx, [ebp+var_40]
.text:00000559                 xor     eax, eax
.text:0000055B                 add     edx, [ebp+var_18]
.text:0000055E                 adc     eax, [ebp+var_14]
.text:00000561                 mov     [ebp+var_18], edx
.text:00000564                 mov     [ebp+var_14], eax
.text:00000567                 jmp     loc_49F
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056C
.text:0000056C loc_56C:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+132j
.text:0000056C                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+143j ...
.text:0000056C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000573                 lea     ecx, [ebp+var_34] ; this
.text:00000576                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:0000057B
.text:0000057B loc_57B:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+D1j
.text:0000057B                 mov     ecx, [ebp+var_10]
.text:0000057E                 mov     edx, [ecx+30h]
.text:00000581                 cmp     edx, [ebp+var_1C]
.text:00000584                 jnz     short loc_5AB
.text:00000586                 mov     eax, [ebp+var_10]
.text:00000589                 mov     [ebp+var_5C], eax
.text:0000058C                 mov     ecx, [ebp+var_5C]
.text:0000058F                 mov     edx, [ebp+var_18]
.text:00000592                 cmp     edx, [ecx+28h]
.text:00000595                 jnz     short loc_5AB
.text:00000597                 mov     eax, [ebp+var_5C]
.text:0000059A                 mov     ecx, [ebp+var_14]
.text:0000059D                 cmp     ecx, [eax+2Ch]
.text:000005A0                 jnz     short loc_5AB
.text:000005A2                 mov     [ebp+var_60], 0
.text:000005A9                 jmp     short loc_5B2
.text:000005AB ; ---------------------------------------------------------------------------
.text:000005AB
.text:000005AB loc_5AB:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+208j
.text:000005AB                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+219j ...
.text:000005AB                 mov     [ebp+var_60], 80004005h
.text:000005B2
.text:000005B2 loc_5B2:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+22Dj
.text:000005B2                 mov     eax, [ebp+var_60]
.text:000005B5
.text:000005B5 loc_5B5:                                ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+51j
.text:000005B5                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+97j ...
.text:000005B5                 push    edx
.text:000005B6                 mov     ecx, ebp
.text:000005B8                 push    eax
.text:000005B9                 lea     edx, $LN21
.text:000005BF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005C4                 pop     eax
.text:000005C5                 pop     edx
.text:000005C6                 mov     ecx, [ebp+var_C]
.text:000005C9                 mov     large fs:0, ecx
.text:000005D0                 pop     ecx
.text:000005D1                 pop     edi
.text:000005D2                 add     esp, 60h
.text:000005D5                 cmp     ebp, esp
.text:000005D7                 call    __RTC_CheckEsp
.text:000005DC                 mov     esp, ebp
.text:000005DE                 pop     ebp
.text:000005DF                 retn    4
.text:000005DF ?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z endp
.text:000005DF
.text:000005DF ; ---------------------------------------------------------------------------
.text:000005E2                 align 4
.text:000005E4 $LN21           dd 2                    ; DATA XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+23Do
.text:000005E8                 dd offset $LN20
.text:000005EC $LN20           db 0CCh                 ; DATA XREF: .text:000005E8o
.text:000005ED                 db 3 dup(0FFh)
.text:000005F0                 dd 10h
.text:000005F4                 dd offset $LN17         ; "inFile"
.text:000005F8                 dd 0FFFFFFC0h, 4
.text:00000600                 dd offset $LN18         ; "processed"
.text:00000604 $LN18           db 'processed',0        ; DATA XREF: .text:00000600o
.text:0000060E $LN17           db 'inFile',0           ; DATA XREF: .text:000005F4o
.text:00000615                 align 4
.text:00000615 _text           ends
.text:00000615
.text$x:00000618 ; ===========================================================================
.text$x:00000618
.text$x:00000618 ; Segment type: Pure code
.text$x:00000618 ; Segment permissions: Read/Execute
.text$x:00000618 _text$x         segment para public 'CODE' use32
.text$x:00000618                 assume cs:_text$x
.text$x:00000618                 ;org 618h
.text$x:00000618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000618
.text$x:00000618 ; =============== S U B R O U T I N E =======================================
.text$x:00000618
.text$x:00000618
.text$x:00000618 __unwindfunclet$??0CInOutTempBuffer@@QAE@XZ$0 proc near
.text$x:00000618                                         ; DATA XREF: .xdata$x:00000688o
.text$x:00000618                 mov     ecx, [ebp-10h]  ; this
.text$x:0000061B                 jmp     ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CTempFile::~CTempFile(void)
.text$x:0000061B __unwindfunclet$??0CInOutTempBuffer@@QAE@XZ$0 endp
.text$x:0000061B
.text$x:00000620
.text$x:00000620 ; =============== S U B R O U T I N E =======================================
.text$x:00000620
.text$x:00000620
.text$x:00000620 __ehhandler$??0CInOutTempBuffer@@QAE@XZ proc near
.text$x:00000620                                         ; DATA XREF: CInOutTempBuffer::CInOutTempBuffer(void)+5o
.text$x:00000620
.text$x:00000620 arg_4           = dword ptr  8
.text$x:00000620
.text$x:00000620                 mov     edx, [esp+arg_4]
.text$x:00000624                 lea     eax, [edx+0Ch]
.text$x:00000627                 mov     ecx, [edx-8]
.text$x:0000062A                 xor     ecx, eax
.text$x:0000062C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000631                 mov     eax, offset __ehfuncinfo$??0CInOutTempBuffer@@QAE@XZ
.text$x:00000636                 jmp     ___CxxFrameHandler3
.text$x:00000636 __ehhandler$??0CInOutTempBuffer@@QAE@XZ endp
.text$x:00000636
.text$x:0000063B
.text$x:0000063B ; =============== S U B R O U T I N E =======================================
.text$x:0000063B
.text$x:0000063B
.text$x:0000063B __unwindfunclet$??1CInOutTempBuffer@@QAE@XZ$0 proc near
.text$x:0000063B                                         ; DATA XREF: .xdata$x:000006B4o
.text$x:0000063B                 mov     ecx, [ebp-10h]  ; this
.text$x:0000063E                 jmp     ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CTempFile::~CTempFile(void)
.text$x:0000063E __unwindfunclet$??1CInOutTempBuffer@@QAE@XZ$0 endp
.text$x:0000063E
.text$x:00000643
.text$x:00000643 ; =============== S U B R O U T I N E =======================================
.text$x:00000643
.text$x:00000643
.text$x:00000643 __ehhandler$??1CInOutTempBuffer@@QAE@XZ proc near
.text$x:00000643                                         ; DATA XREF: CInOutTempBuffer::~CInOutTempBuffer(void)+5o
.text$x:00000643
.text$x:00000643 arg_4           = dword ptr  8
.text$x:00000643
.text$x:00000643                 mov     edx, [esp+arg_4]
.text$x:00000647                 lea     eax, [edx+0Ch]
.text$x:0000064A                 mov     ecx, [edx-0Ch]
.text$x:0000064D                 xor     ecx, eax
.text$x:0000064F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000654                 mov     eax, offset __ehfuncinfo$??1CInOutTempBuffer@@QAE@XZ
.text$x:00000659                 jmp     ___CxxFrameHandler3
.text$x:00000659 __ehhandler$??1CInOutTempBuffer@@QAE@XZ endp
.text$x:00000659
.text$x:0000065E
.text$x:0000065E ; =============== S U B R O U T I N E =======================================
.text$x:0000065E
.text$x:0000065E
.text$x:0000065E __unwindfunclet$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z$0 proc near
.text$x:0000065E                                         ; DATA XREF: .xdata$x:000006E0o
.text$x:0000065E                 lea     ecx, [ebp-34h]  ; this
.text$x:00000661                 jmp     ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text$x:00000661 __unwindfunclet$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z$0 endp
.text$x:00000661
.text$x:00000666
.text$x:00000666 ; =============== S U B R O U T I N E =======================================
.text$x:00000666
.text$x:00000666
.text$x:00000666 __ehhandler$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z proc near
.text$x:00000666                                         ; DATA XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+5o
.text$x:00000666
.text$x:00000666 arg_4           = dword ptr  8
.text$x:00000666
.text$x:00000666                 mov     edx, [esp+arg_4]
.text$x:0000066A                 lea     eax, [edx+0Ch]
.text$x:0000066D                 mov     ecx, [edx-5Ch]
.text$x:00000670                 xor     ecx, eax
.text$x:00000672                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000677                 mov     eax, offset __ehfuncinfo$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z
.text$x:0000067C                 jmp     ___CxxFrameHandler3
.text$x:0000067C __ehhandler$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z endp
.text$x:0000067C
.text$x:0000067C ; ---------------------------------------------------------------------------
.text$x:00000681                 align 4
.text$x:00000681 _text$x         ends
.text$x:00000681
.xdata$x:00000684 ; ===========================================================================
.xdata$x:00000684
.xdata$x:00000684 ; Segment type: Pure data
.xdata$x:00000684 ; Segment permissions: Read
.xdata$x:00000684 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000684                 assume cs:_xdata$x
.xdata$x:00000684                 ;org 684h
.xdata$x:00000684 __unwindtable$??0CInOutTempBuffer@@QAE@XZ db 0FFh
.xdata$x:00000684                                         ; DATA XREF: .xdata$x:00000694o
.xdata$x:00000685                 db 0FFh
.xdata$x:00000686                 db 0FFh
.xdata$x:00000687                 db 0FFh
.xdata$x:00000688                 dd offset __unwindfunclet$??0CInOutTempBuffer@@QAE@XZ$0
.xdata$x:0000068C __ehfuncinfo$??0CInOutTempBuffer@@QAE@XZ db  22h ; "
.xdata$x:0000068C                                         ; DATA XREF: __ehhandler$??0CInOutTempBuffer@@QAE@XZ+11o
.xdata$x:0000068D                 db    5
.xdata$x:0000068E                 db  93h ; ô
.xdata$x:0000068F                 db  19h
.xdata$x:00000690                 db    1
.xdata$x:00000691                 db    0
.xdata$x:00000692                 db    0
.xdata$x:00000693                 db    0
.xdata$x:00000694                 dd offset __unwindtable$??0CInOutTempBuffer@@QAE@XZ
.xdata$x:00000698                 db    0
.xdata$x:00000699                 db    0
.xdata$x:0000069A                 db    0
.xdata$x:0000069B                 db    0
.xdata$x:0000069C                 db    0
.xdata$x:0000069D                 db    0
.xdata$x:0000069E                 db    0
.xdata$x:0000069F                 db    0
.xdata$x:000006A0                 db    0
.xdata$x:000006A1                 db    0
.xdata$x:000006A2                 db    0
.xdata$x:000006A3                 db    0
.xdata$x:000006A4                 db    0
.xdata$x:000006A5                 db    0
.xdata$x:000006A6                 db    0
.xdata$x:000006A7                 db    0
.xdata$x:000006A8                 db    0
.xdata$x:000006A9                 db    0
.xdata$x:000006AA                 db    0
.xdata$x:000006AB                 db    0
.xdata$x:000006AC                 db    1
.xdata$x:000006AD                 db    0
.xdata$x:000006AE                 db    0
.xdata$x:000006AF                 db    0
.xdata$x:000006B0 __unwindtable$??1CInOutTempBuffer@@QAE@XZ db 0FFh
.xdata$x:000006B0                                         ; DATA XREF: .xdata$x:000006C0o
.xdata$x:000006B1                 db 0FFh
.xdata$x:000006B2                 db 0FFh
.xdata$x:000006B3                 db 0FFh
.xdata$x:000006B4                 dd offset __unwindfunclet$??1CInOutTempBuffer@@QAE@XZ$0
.xdata$x:000006B8 __ehfuncinfo$??1CInOutTempBuffer@@QAE@XZ db  22h ; "
.xdata$x:000006B8                                         ; DATA XREF: __ehhandler$??1CInOutTempBuffer@@QAE@XZ+11o
.xdata$x:000006B9                 db    5
.xdata$x:000006BA                 db  93h ; ô
.xdata$x:000006BB                 db  19h
.xdata$x:000006BC                 db    1
.xdata$x:000006BD                 db    0
.xdata$x:000006BE                 db    0
.xdata$x:000006BF                 db    0
.xdata$x:000006C0                 dd offset __unwindtable$??1CInOutTempBuffer@@QAE@XZ
.xdata$x:000006C4                 db    0
.xdata$x:000006C5                 db    0
.xdata$x:000006C6                 db    0
.xdata$x:000006C7                 db    0
.xdata$x:000006C8                 db    0
.xdata$x:000006C9                 db    0
.xdata$x:000006CA                 db    0
.xdata$x:000006CB                 db    0
.xdata$x:000006CC                 db    0
.xdata$x:000006CD                 db    0
.xdata$x:000006CE                 db    0
.xdata$x:000006CF                 db    0
.xdata$x:000006D0                 db    0
.xdata$x:000006D1                 db    0
.xdata$x:000006D2                 db    0
.xdata$x:000006D3                 db    0
.xdata$x:000006D4                 db    0
.xdata$x:000006D5                 db    0
.xdata$x:000006D6                 db    0
.xdata$x:000006D7                 db    0
.xdata$x:000006D8                 db    1
.xdata$x:000006D9                 db    0
.xdata$x:000006DA                 db    0
.xdata$x:000006DB                 db    0
.xdata$x:000006DC __unwindtable$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z db 0FFh
.xdata$x:000006DC                                         ; DATA XREF: .xdata$x:000006ECo
.xdata$x:000006DD                 db 0FFh
.xdata$x:000006DE                 db 0FFh
.xdata$x:000006DF                 db 0FFh
.xdata$x:000006E0                 dd offset __unwindfunclet$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z$0
.xdata$x:000006E4 __ehfuncinfo$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z db  22h ; "
.xdata$x:000006E4                                         ; DATA XREF: __ehhandler$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z+11o
.xdata$x:000006E5                 db    5
.xdata$x:000006E6                 db  93h ; ô
.xdata$x:000006E7                 db  19h
.xdata$x:000006E8                 db    1
.xdata$x:000006E9                 db    0
.xdata$x:000006EA                 db    0
.xdata$x:000006EB                 db    0
.xdata$x:000006EC                 dd offset __unwindtable$?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z
.xdata$x:000006F0                 db    0
.xdata$x:000006F1                 db    0
.xdata$x:000006F2                 db    0
.xdata$x:000006F3                 db    0
.xdata$x:000006F4                 db    0
.xdata$x:000006F5                 db    0
.xdata$x:000006F6                 db    0
.xdata$x:000006F7                 db    0
.xdata$x:000006F8                 db    0
.xdata$x:000006F9                 db    0
.xdata$x:000006FA                 db    0
.xdata$x:000006FB                 db    0
.xdata$x:000006FC                 db    0
.xdata$x:000006FD                 db    0
.xdata$x:000006FE                 db    0
.xdata$x:000006FF                 db    0
.xdata$x:00000700                 db    0
.xdata$x:00000701                 db    0
.xdata$x:00000702                 db    0
.xdata$x:00000703                 db    0
.xdata$x:00000704                 db    1
.xdata$x:00000705                 db    0
.xdata$x:00000706                 db    0
.xdata$x:00000707                 db    0
.xdata$x:00000707 _xdata$x        ends
.xdata$x:00000707
.rtc$TMZ:00000708 ; ===========================================================================
.rtc$TMZ:00000708
.rtc$TMZ:00000708 ; Segment type: Pure data
.rtc$TMZ:00000708 ; Segment permissions: Read
.rtc$TMZ:00000708 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000708                 assume cs:_rtc$TMZ
.rtc$TMZ:00000708                 ;org 708h
.rtc$TMZ:00000708 ; COMDAT (pick any)
.rtc$TMZ:00000708 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000708 _rtc$TMZ        ends
.rtc$TMZ:00000708
.rtc$IMZ:0000070C ; ===========================================================================
.rtc$IMZ:0000070C
.rtc$IMZ:0000070C ; Segment type: Pure data
.rtc$IMZ:0000070C ; Segment permissions: Read
.rtc$IMZ:0000070C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000070C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000070C                 ;org 70Ch
.rtc$IMZ:0000070C ; COMDAT (pick any)
.rtc$IMZ:0000070C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000070C _rtc$IMZ        ends
.rtc$IMZ:0000070C
.text:00000710 ; ===========================================================================
.text:00000710
.text:00000710 ; Segment type: Pure code
.text:00000710 ; Segment permissions: Read/Execute
.text:00000710 _text           segment para public 'CODE' use32
.text:00000710                 assume cs:_text
.text:00000710                 ;org 710h
.text:00000710 ; COMDAT (pick any)
.text:00000710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 ; _DWORD __thiscall NWindows::NFile::NDir::CTempFile::CTempFile(NWindows::NFile::NDir::CTempFile *__hidden this)
.text:00000710                 public ??0CTempFile@NDir@NFile@NWindows@@QAE@XZ
.text:00000710 ??0CTempFile@NDir@NFile@NWindows@@QAE@XZ proc near
.text:00000710                                         ; CODE XREF: CInOutTempBuffer::CInOutTempBuffer(void)+30p
.text:00000710
.text:00000710 var_4           = dword ptr -4
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 push    ecx
.text:00000714                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071B                 mov     [ebp+var_4], ecx
.text:0000071E                 mov     eax, [ebp+var_4]
.text:00000721                 mov     byte ptr [eax], 0
.text:00000724                 mov     ecx, [ebp+var_4]
.text:00000727                 add     ecx, 4          ; this
.text:0000072A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000072F                 mov     eax, [ebp+var_4]
.text:00000732                 add     esp, 4
.text:00000735                 cmp     ebp, esp
.text:00000737                 call    __RTC_CheckEsp
.text:0000073C                 mov     esp, ebp
.text:0000073E                 pop     ebp
.text:0000073F                 retn
.text:0000073F ??0CTempFile@NDir@NFile@NWindows@@QAE@XZ endp
.text:0000073F
.text:0000073F _text           ends
.text:0000073F
.text:00000740 ; ===========================================================================
.text:00000740
.text:00000740 ; Segment type: Pure code
.text:00000740 ; Segment permissions: Read/Execute
.text:00000740 _text           segment para public 'CODE' use32
.text:00000740                 assume cs:_text
.text:00000740                 ;org 740h
.text:00000740 ; COMDAT (pick any)
.text:00000740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000740
.text:00000740 ; =============== S U B R O U T I N E =======================================
.text:00000740
.text:00000740 ; Attributes: bp-based frame
.text:00000740
.text:00000740 ; _DWORD __thiscall NWindows::NFile::NDir::CTempFile::~CTempFile(NWindows::NFile::NDir::CTempFile *__hidden this)
.text:00000740                 public ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ
.text:00000740 ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ proc near
.text:00000740                                         ; CODE XREF: CInOutTempBuffer::~CInOutTempBuffer(void)+67p
.text:00000740                                         ; __unwindfunclet$??0CInOutTempBuffer@@QAE@XZ$0+3j ...
.text:00000740
.text:00000740 var_10          = dword ptr -10h
.text:00000740 var_C           = dword ptr -0Ch
.text:00000740 var_4           = dword ptr -4
.text:00000740
.text:00000740                 push    ebp
.text:00000741                 mov     ebp, esp
.text:00000743                 push    0FFFFFFFFh
.text:00000745                 push    offset __ehhandler$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ
.text:0000074A                 mov     eax, large fs:0
.text:00000750                 push    eax
.text:00000751                 push    ecx
.text:00000752                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000759                 mov     eax, dword ptr ds:___security_cookie
.text:0000075E                 xor     eax, ebp
.text:00000760                 push    eax
.text:00000761                 lea     eax, [ebp+var_C]
.text:00000764                 mov     large fs:0, eax
.text:0000076A                 mov     [ebp+var_10], ecx
.text:0000076D                 mov     [ebp+var_4], 0
.text:00000774                 mov     ecx, [ebp+var_10] ; this
.text:00000777                 call    ?Remove@CTempFile@NDir@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NDir::CTempFile::Remove(void)
.text:0000077C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000783                 mov     ecx, [ebp+var_10]
.text:00000786                 add     ecx, 4          ; this
.text:00000789                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000078E                 mov     ecx, [ebp+var_C]
.text:00000791                 mov     large fs:0, ecx
.text:00000798                 pop     ecx
.text:00000799                 add     esp, 10h
.text:0000079C                 cmp     ebp, esp
.text:0000079E                 call    __RTC_CheckEsp
.text:000007A3                 mov     esp, ebp
.text:000007A5                 pop     ebp
.text:000007A6                 retn
.text:000007A6 ??1CTempFile@NDir@NFile@NWindows@@QAE@XZ endp
.text:000007A6
.text:000007A6 ; ---------------------------------------------------------------------------
.text:000007A7                 align 4
.text:000007A7 _text           ends
.text:000007A7
.text$x:000007A8 ; ===========================================================================
.text$x:000007A8
.text$x:000007A8 ; Segment type: Pure code
.text$x:000007A8 ; Segment permissions: Read/Execute
.text$x:000007A8 _text$x         segment para public 'CODE' use32
.text$x:000007A8                 assume cs:_text$x
.text$x:000007A8                 ;org 7A8h
.text$x:000007A8 ; COMDAT (pick associative to section at 740)
.text$x:000007A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000007A8
.text$x:000007A8 ; =============== S U B R O U T I N E =======================================
.text$x:000007A8
.text$x:000007A8
.text$x:000007A8 __unwindfunclet$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:000007A8                                         ; DATA XREF: .xdata$x:000007D4o
.text$x:000007A8                 mov     ecx, [ebp-10h]
.text$x:000007AB                 add     ecx, 4          ; this
.text$x:000007AE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000007AE __unwindfunclet$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ$0 endp
.text$x:000007AE
.text$x:000007B3
.text$x:000007B3 ; =============== S U B R O U T I N E =======================================
.text$x:000007B3
.text$x:000007B3
.text$x:000007B3 __ehhandler$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ proc near
.text$x:000007B3                                         ; DATA XREF: NWindows::NFile::NDir::CTempFile::~CTempFile(void)+5o
.text$x:000007B3
.text$x:000007B3 arg_4           = dword ptr  8
.text$x:000007B3
.text$x:000007B3                 mov     edx, [esp+arg_4]
.text$x:000007B7                 lea     eax, [edx+0Ch]
.text$x:000007BA                 mov     ecx, [edx-8]
.text$x:000007BD                 xor     ecx, eax
.text$x:000007BF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007C4                 mov     eax, offset __ehfuncinfo$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ
.text$x:000007C9                 jmp     ___CxxFrameHandler3
.text$x:000007C9 __ehhandler$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ endp
.text$x:000007C9
.text$x:000007C9 ; ---------------------------------------------------------------------------
.text$x:000007CE                 align 10h
.text$x:000007CE _text$x         ends
.text$x:000007CE
.xdata$x:000007D0 ; ===========================================================================
.xdata$x:000007D0
.xdata$x:000007D0 ; Segment type: Pure data
.xdata$x:000007D0 ; Segment permissions: Read
.xdata$x:000007D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000007D0                 assume cs:_xdata$x
.xdata$x:000007D0                 ;org 7D0h
.xdata$x:000007D0 ; COMDAT (pick associative to section at 740)
.xdata$x:000007D0 __unwindtable$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:000007D0                                         ; DATA XREF: .xdata$x:000007E0o
.xdata$x:000007D1                 db 0FFh
.xdata$x:000007D2                 db 0FFh
.xdata$x:000007D3                 db 0FFh
.xdata$x:000007D4                 dd offset __unwindfunclet$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ$0
.xdata$x:000007D8 __ehfuncinfo$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:000007D8                                         ; DATA XREF: __ehhandler$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ+11o
.xdata$x:000007D9                 db    5
.xdata$x:000007DA                 db  93h ; ô
.xdata$x:000007DB                 db  19h
.xdata$x:000007DC                 db    1
.xdata$x:000007DD                 db    0
.xdata$x:000007DE                 db    0
.xdata$x:000007DF                 db    0
.xdata$x:000007E0                 dd offset __unwindtable$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ
.xdata$x:000007E4                 db    0
.xdata$x:000007E5                 db    0
.xdata$x:000007E6                 db    0
.xdata$x:000007E7                 db    0
.xdata$x:000007E8                 db    0
.xdata$x:000007E9                 db    0
.xdata$x:000007EA                 db    0
.xdata$x:000007EB                 db    0
.xdata$x:000007EC                 db    0
.xdata$x:000007ED                 db    0
.xdata$x:000007EE                 db    0
.xdata$x:000007EF                 db    0
.xdata$x:000007F0                 db    0
.xdata$x:000007F1                 db    0
.xdata$x:000007F2                 db    0
.xdata$x:000007F3                 db    0
.xdata$x:000007F4                 db    0
.xdata$x:000007F5                 db    0
.xdata$x:000007F6                 db    0
.xdata$x:000007F7                 db    0
.xdata$x:000007F8                 db    1
.xdata$x:000007F9                 db    0
.xdata$x:000007FA                 db    0
.xdata$x:000007FB                 db    0
.xdata$x:000007FB _xdata$x        ends
.xdata$x:000007FB
.text:000007FC ; ===========================================================================
.text:000007FC
.text:000007FC ; Segment type: Pure code
.text:000007FC ; Segment permissions: Read/Execute
.text:000007FC _text           segment para public 'CODE' use32
.text:000007FC                 assume cs:_text
.text:000007FC                 ;org 7FCh
.text:000007FC ; COMDAT (pick any)
.text:000007FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000007FC                 public ??1UString@@QAE@XZ
.text:000007FC ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NDir::CTempFile::~CTempFile(void)+49p
.text:000007FC                                         ; __unwindfunclet$??1CTempFile@NDir@NFile@NWindows@@QAE@XZ$0+6j
.text:000007FC
.text:000007FC var_8           = dword ptr -8
.text:000007FC var_4           = dword ptr -4
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 sub     esp, 8
.text:00000802                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000809                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000810                 mov     [ebp+var_4], ecx
.text:00000813                 mov     eax, [ebp+var_4]
.text:00000816                 mov     ecx, [eax]
.text:00000818                 mov     [ebp+var_8], ecx
.text:0000081B                 mov     edx, [ebp+var_8]
.text:0000081E                 push    edx             ; void *
.text:0000081F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000824                 add     esp, 4
.text:00000827                 add     esp, 8
.text:0000082A                 cmp     ebp, esp
.text:0000082C                 call    __RTC_CheckEsp
.text:00000831                 mov     esp, ebp
.text:00000833                 pop     ebp
.text:00000834                 retn
.text:00000834 ??1UString@@QAE@XZ endp
.text:00000834
.text:00000834 ; ---------------------------------------------------------------------------
.text:00000835                 align 4
.text:00000835 _text           ends
.text:00000835
.text:00000838 ; ===========================================================================
.text:00000838
.text:00000838 ; Segment type: Pure code
.text:00000838 ; Segment permissions: Read/Execute
.text:00000838 _text           segment para public 'CODE' use32
.text:00000838                 assume cs:_text
.text:00000838                 ;org 838h
.text:00000838 ; COMDAT (pick any)
.text:00000838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000838
.text:00000838 ; =============== S U B R O U T I N E =======================================
.text:00000838
.text:00000838 ; Attributes: bp-based frame
.text:00000838
.text:00000838 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00000838                 public ??0COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00000838 ??0COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000838                                         ; CODE XREF: CInOutTempBuffer::CInOutTempBuffer(void)+42p
.text:00000838
.text:00000838 var_4           = dword ptr -4
.text:00000838
.text:00000838                 push    ebp
.text:00000839                 mov     ebp, esp
.text:0000083B                 push    ecx
.text:0000083C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000843                 mov     [ebp+var_4], ecx
.text:00000846                 mov     ecx, [ebp+var_4] ; this
.text:00000849                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:0000084E                 mov     eax, [ebp+var_4]
.text:00000851                 add     esp, 4
.text:00000854                 cmp     ebp, esp
.text:00000856                 call    __RTC_CheckEsp
.text:0000085B                 mov     esp, ebp
.text:0000085D                 pop     ebp
.text:0000085E                 retn
.text:0000085E ??0COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000085E
.text:0000085E ; ---------------------------------------------------------------------------
.text:0000085F                 align 10h
.text:0000085F _text           ends
.text:0000085F
.text:00000860 ; ===========================================================================
.text:00000860
.text:00000860 ; Segment type: Pure code
.text:00000860 ; Segment permissions: Read/Execute
.text:00000860 _text           segment para public 'CODE' use32
.text:00000860                 assume cs:_text
.text:00000860                 ;org 860h
.text:00000860 ; COMDAT (pick any)
.text:00000860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000860
.text:00000860 ; =============== S U B R O U T I N E =======================================
.text:00000860
.text:00000860 ; Attributes: bp-based frame
.text:00000860
.text:00000860 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00000860                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00000860 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000860                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::COutFile(void)+11p
.text:00000860                                         ; NWindows::NFile::NIO::CInFile::CInFile(void)+11p
.text:00000860
.text:00000860 var_4           = dword ptr -4
.text:00000860
.text:00000860                 push    ebp
.text:00000861                 mov     ebp, esp
.text:00000863                 push    ecx
.text:00000864                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000086B                 mov     [ebp+var_4], ecx
.text:0000086E                 mov     eax, [ebp+var_4]
.text:00000871                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00000877                 mov     eax, [ebp+var_4]
.text:0000087A                 mov     esp, ebp
.text:0000087C                 pop     ebp
.text:0000087D                 retn
.text:0000087D ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000087D
.text:0000087D ; ---------------------------------------------------------------------------
.text:0000087E                 align 10h
.text:0000087E _text           ends
.text:0000087E
.text:00000880 ; ===========================================================================
.text:00000880
.text:00000880 ; Segment type: Pure code
.text:00000880 ; Segment permissions: Read/Execute
.text:00000880 _text           segment para public 'CODE' use32
.text:00000880                 assume cs:_text
.text:00000880                 ;org 880h
.text:00000880 ; COMDAT (pick any)
.text:00000880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000880
.text:00000880 ; =============== S U B R O U T I N E =======================================
.text:00000880
.text:00000880 ; Attributes: bp-based frame
.text:00000880
.text:00000880 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::~COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00000880                 public ??1COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00000880 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000880                                         ; CODE XREF: CInOutTempBuffer::~CInOutTempBuffer(void)+58p
.text:00000880
.text:00000880 var_4           = dword ptr -4
.text:00000880
.text:00000880                 push    ebp
.text:00000881                 mov     ebp, esp
.text:00000883                 push    ecx
.text:00000884                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000088B                 mov     [ebp+var_4], ecx
.text:0000088E                 mov     ecx, [ebp+var_4] ; this
.text:00000891                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00000896                 add     esp, 4
.text:00000899                 cmp     ebp, esp
.text:0000089B                 call    __RTC_CheckEsp
.text:000008A0                 mov     esp, ebp
.text:000008A2                 pop     ebp
.text:000008A3                 retn
.text:000008A3 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:000008A3
.text:000008A3 _text           ends
.text:000008A3
.text:000008A4 ; ===========================================================================
.text:000008A4
.text:000008A4 ; Segment type: Pure code
.text:000008A4 ; Segment permissions: Read/Execute
.text:000008A4 _text           segment para public 'CODE' use32
.text:000008A4                 assume cs:_text
.text:000008A4                 ;org 8A4h
.text:000008A4 ; COMDAT (pick any)
.text:000008A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008A4
.text:000008A4 ; =============== S U B R O U T I N E =======================================
.text:000008A4
.text:000008A4 ; Attributes: bp-based frame
.text:000008A4
.text:000008A4 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:000008A4                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:000008A4 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000008A4                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::~COutFile(void)+11p
.text:000008A4                                         ; NWindows::NFile::NIO::CInFile::~CInFile(void)+11p
.text:000008A4
.text:000008A4 var_4           = dword ptr -4
.text:000008A4
.text:000008A4                 push    ebp
.text:000008A5                 mov     ebp, esp
.text:000008A7                 push    ecx
.text:000008A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008AF                 mov     [ebp+var_4], ecx
.text:000008B2                 mov     ecx, [ebp+var_4] ; this
.text:000008B5                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:000008BA                 add     esp, 4
.text:000008BD                 cmp     ebp, esp
.text:000008BF                 call    __RTC_CheckEsp
.text:000008C4                 mov     esp, ebp
.text:000008C6                 pop     ebp
.text:000008C7                 retn
.text:000008C7 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:000008C7
.text:000008C7 _text           ends
.text:000008C7
.text:000008C8 ; ===========================================================================
.text:000008C8
.text:000008C8 ; Segment type: Pure code
.text:000008C8 ; Segment permissions: Read/Execute
.text:000008C8 _text           segment para public 'CODE' use32
.text:000008C8                 assume cs:_text
.text:000008C8                 ;org 8C8h
.text:000008C8 ; COMDAT (pick any)
.text:000008C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008C8
.text:000008C8 ; =============== S U B R O U T I N E =======================================
.text:000008C8
.text:000008C8 ; Attributes: bp-based frame
.text:000008C8
.text:000008C8 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:000008C8                 public ??BUString@@QBEPB_WXZ
.text:000008C8 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+F0p
.text:000008C8
.text:000008C8 var_4           = dword ptr -4
.text:000008C8
.text:000008C8                 push    ebp
.text:000008C9                 mov     ebp, esp
.text:000008CB                 push    ecx
.text:000008CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008D3                 mov     [ebp+var_4], ecx
.text:000008D6                 mov     eax, [ebp+var_4]
.text:000008D9                 mov     eax, [eax]
.text:000008DB                 mov     esp, ebp
.text:000008DD                 pop     ebp
.text:000008DE                 retn
.text:000008DE ??BUString@@QBEPB_WXZ endp
.text:000008DE
.text:000008DE ; ---------------------------------------------------------------------------
.text:000008DF                 align 10h
.text:000008DF _text           ends
.text:000008DF
.text:000008E0 ; ===========================================================================
.text:000008E0
.text:000008E0 ; Segment type: Pure code
.text:000008E0 ; Segment permissions: Read/Execute
.text:000008E0 _text           segment para public 'CODE' use32
.text:000008E0                 assume cs:_text
.text:000008E0                 ;org 8E0h
.text:000008E0 ; COMDAT (pick any)
.text:000008E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008E0
.text:000008E0 ; =============== S U B R O U T I N E =======================================
.text:000008E0
.text:000008E0 ; Attributes: bp-based frame
.text:000008E0
.text:000008E0 ; const struct UString *__thiscall NWindows::NFile::NDir::CTempFile::GetPath(NWindows::NFile::NDir::CTempFile *__hidden this)
.text:000008E0                 public ?GetPath@CTempFile@NDir@NFile@NWindows@@QBEABVUString@@XZ
.text:000008E0 ?GetPath@CTempFile@NDir@NFile@NWindows@@QBEABVUString@@XZ proc near
.text:000008E0                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+E9p
.text:000008E0
.text:000008E0 var_4           = dword ptr -4
.text:000008E0
.text:000008E0                 push    ebp
.text:000008E1                 mov     ebp, esp
.text:000008E3                 push    ecx
.text:000008E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008EB                 mov     [ebp+var_4], ecx
.text:000008EE                 mov     eax, [ebp+var_4]
.text:000008F1                 add     eax, 4
.text:000008F4                 mov     esp, ebp
.text:000008F6                 pop     ebp
.text:000008F7                 retn
.text:000008F7 ?GetPath@CTempFile@NDir@NFile@NWindows@@QBEABVUString@@XZ endp
.text:000008F7
.text:000008F7 _text           ends
.text:000008F7
.text:000008F8 ; ===========================================================================
.text:000008F8
.text:000008F8 ; Segment type: Pure code
.text:000008F8 ; Segment permissions: Read/Execute
.text:000008F8 _text           segment para public 'CODE' use32
.text:000008F8                 assume cs:_text
.text:000008F8                 ;org 8F8h
.text:000008F8 ; COMDAT (pick any)
.text:000008F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008F8
.text:000008F8 ; =============== S U B R O U T I N E =======================================
.text:000008F8
.text:000008F8 ; Attributes: bp-based frame
.text:000008F8
.text:000008F8 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:000008F8                 public ??0CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:000008F8 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000008F8                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+DAp
.text:000008F8
.text:000008F8 var_4           = dword ptr -4
.text:000008F8
.text:000008F8                 push    ebp
.text:000008F9                 mov     ebp, esp
.text:000008FB                 push    ecx
.text:000008FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000903                 mov     [ebp+var_4], ecx
.text:00000906                 mov     ecx, [ebp+var_4] ; this
.text:00000909                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:0000090E                 mov     eax, [ebp+var_4]
.text:00000911                 add     esp, 4
.text:00000914                 cmp     ebp, esp
.text:00000916                 call    __RTC_CheckEsp
.text:0000091B                 mov     esp, ebp
.text:0000091D                 pop     ebp
.text:0000091E                 retn
.text:0000091E ??0CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000091E
.text:0000091E ; ---------------------------------------------------------------------------
.text:0000091F                 align 10h
.text:0000091F _text           ends
.text:0000091F
.text:00000920 ; ===========================================================================
.text:00000920
.text:00000920 ; Segment type: Pure code
.text:00000920 ; Segment permissions: Read/Execute
.text:00000920 _text           segment para public 'CODE' use32
.text:00000920                 assume cs:_text
.text:00000920                 ;org 920h
.text:00000920 ; COMDAT (pick any)
.text:00000920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000920
.text:00000920 ; =============== S U B R O U T I N E =======================================
.text:00000920
.text:00000920 ; Attributes: bp-based frame
.text:00000920
.text:00000920 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::~CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00000920                 public ??1CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00000920 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000920                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+116p
.text:00000920                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+179p ...
.text:00000920
.text:00000920 var_4           = dword ptr -4
.text:00000920
.text:00000920                 push    ebp
.text:00000921                 mov     ebp, esp
.text:00000923                 push    ecx
.text:00000924                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000092B                 mov     [ebp+var_4], ecx
.text:0000092E                 mov     ecx, [ebp+var_4] ; this
.text:00000931                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00000936                 add     esp, 4
.text:00000939                 cmp     ebp, esp
.text:0000093B                 call    __RTC_CheckEsp
.text:00000940                 mov     esp, ebp
.text:00000942                 pop     ebp
.text:00000943                 retn
.text:00000943 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00000943
.text:00000943 _text           ends
.text:00000943
UNDEF:00000950 ; ===========================================================================
UNDEF:00000950
UNDEF:00000950 ; Segment type: Externs
UNDEF:00000950 ; UNDEF
UNDEF:00000950                 extrn ___security_cookie:near
UNDEF:00000950                                         ; DATA XREF: CInOutTempBuffer::CInOutTempBuffer(void)+19r
UNDEF:00000950                                         ; CInOutTempBuffer::~CInOutTempBuffer(void)+22r ...
UNDEF:00000954                 extrn ___CxxFrameHandler3:near
UNDEF:00000954                                         ; CODE XREF: __ehhandler$??0CInOutTempBuffer@@QAE@XZ+16j
UNDEF:00000954                                         ; __ehhandler$??1CInOutTempBuffer@@QAE@XZ+16j ...
UNDEF:00000958 ; __fastcall __security_check_cookie(x)
UNDEF:00000958                 extrn @__security_check_cookie@4:near
UNDEF:00000958                                         ; CODE XREF: __ehhandler$??0CInOutTempBuffer@@QAE@XZ+Cp
UNDEF:00000958                                         ; __ehhandler$??1CInOutTempBuffer@@QAE@XZ+Cp ...
UNDEF:0000095C                 extrn __RTC_CheckEsp:near
UNDEF:0000095C                                         ; CODE XREF: CInOutTempBuffer::CInOutTempBuffer(void)+6Bp
UNDEF:0000095C                                         ; CInOutTempBuffer::Create(void)+3Ep ...
UNDEF:00000960                 extrn __RTC_Shutdown:near
UNDEF:00000960                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000964                 extrn __RTC_InitBase:near
UNDEF:00000964                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000968 ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:00000968                 extrn ??0UString@@QAE@XZ:near
UNDEF:00000968                                         ; CODE XREF: NWindows::NFile::NDir::CTempFile::CTempFile(void)+1Ap
UNDEF:0000096C ; bool __thiscall NWindows::NFile::NDir::CTempFile::Remove(NWindows::NFile::NDir::CTempFile *__hidden this)
UNDEF:0000096C                 extrn ?Remove@CTempFile@NDir@NFile@NWindows@@QAE_NXZ:near
UNDEF:0000096C                                         ; CODE XREF: NWindows::NFile::NDir::CTempFile::~CTempFile(void)+37p
UNDEF:00000970 ; void __cdecl operator delete(void *)
UNDEF:00000970                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CInOutTempBuffer::~CInOutTempBuffer(void)+4Ap
UNDEF:00000970                                         ; UString::~UString(void)+23p
UNDEF:00000974 ; void *__cdecl operator new(unsigned int)
UNDEF:00000974                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CInOutTempBuffer::Create(void)+25p
UNDEF:00000978 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:00000978                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:00000978                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+40p
UNDEF:00000978                                         ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)+11p
UNDEF:0000097C ; __fastcall CrcUpdate(x, x, x)
UNDEF:0000097C                 extrn @CrcUpdate@12:near
UNDEF:0000097C                                         ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+88p
UNDEF:0000097C                                         ; CInOutTempBuffer::Write(void const *,uint)+6Cp ...
UNDEF:00000980 ; bool __thiscall NWindows::NFile::NIO::COutFile::Write(NWindows::NFile::NIO::COutFile *__hidden this, const void *, unsigned int, unsigned int *)
UNDEF:00000980                 extrn ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z:near
UNDEF:00000980                                         ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+6Bp
UNDEF:00000984 ; bool __thiscall NWindows::NFile::NDir::CTempFile::CreateRandomInTempFolder(NWindows::NFile::NDir::CTempFile *__hidden this, const wchar_t *, struct NWindows::NFile::NIO::COutFile *)
UNDEF:00000984                 extrn ?CreateRandomInTempFolder@CTempFile@NDir@NFile@NWindows@@QAE_NPB_WPAVCOutFile@NIO@34@@Z:near
UNDEF:00000984                                         ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+42p
UNDEF:00000988 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000988                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000988                                         ; CODE XREF: CInOutTempBuffer::WriteToFile(void const *,uint)+BFp
UNDEF:00000988                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+243p
UNDEF:0000098C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000098C                 extrn _memcpy:near      ; CODE XREF: CInOutTempBuffer::Write(void const *,uint)+57p
UNDEF:00000990 ; bool __thiscall NWindows::NFile::NIO::CInFile::ReadPart(NWindows::NFile::NIO::CInFile *__hidden this, void *, unsigned int, unsigned int *)
UNDEF:00000990                 extrn ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z:near
UNDEF:00000990                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+15Cp
UNDEF:00000994 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
UNDEF:00000994                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00000994                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+F9p
UNDEF:00000998 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00000998                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00000998                                         ; CODE XREF: CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+86p
UNDEF:00000998                                         ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)+19Dp
UNDEF:00000998
UNDEF:00000998