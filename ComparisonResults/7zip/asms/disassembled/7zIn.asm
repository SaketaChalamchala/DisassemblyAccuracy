.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C062A6D60CBE87FEC1BE15C8BCDD195B
.text:00000000 ; Input CRC32 : 358733D3
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zIn.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NArchive::N7z::CStreamSwitch::Remove(NArchive::N7z::CStreamSwitch *__hidden this)
.text:00000000                 public ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ
.text:00000000 ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ proc near
.text:00000000                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,uchar const *,uint,bool)+11p
.text:00000000                                         ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+21p ...
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 movzx   ecx, byte ptr [eax+4]
.text:00000015                 test    ecx, ecx
.text:00000017                 jz      short loc_4C
.text:00000019                 mov     edx, [ebp+var_4]
.text:0000001C                 mov     eax, [edx]
.text:0000001E                 mov     ecx, [eax+38h]  ; this
.text:00000021                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:00000026                 test    eax, eax
.text:00000028                 jz      short loc_33
.text:0000002A                 mov     ecx, [ebp+var_4]
.text:0000002D                 mov     edx, [ecx]
.text:0000002F                 mov     byte ptr [edx+3Ch], 1
.text:00000033
.text:00000033 loc_33:                                 ; CODE XREF: NArchive::N7z::CStreamSwitch::Remove(void)+28j
.text:00000033                 mov     eax, [ebp+var_4]
.text:00000036                 movzx   ecx, byte ptr [eax+5]
.text:0000003A                 push    ecx             ; bool
.text:0000003B                 mov     edx, [ebp+var_4]
.text:0000003E                 mov     ecx, [edx]      ; this
.text:00000040                 call    ?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z ; NArchive::N7z::CInArchive::DeleteByteStream(bool)
.text:00000045                 mov     eax, [ebp+var_4]
.text:00000048                 mov     byte ptr [eax+4], 0
.text:0000004C
.text:0000004C loc_4C:                                 ; CODE XREF: NArchive::N7z::CStreamSwitch::Remove(void)+17j
.text:0000004C                 add     esp, 4
.text:0000004F                 cmp     ebp, esp
.text:00000051                 call    __RTC_CheckEsp
.text:00000056                 mov     esp, ebp
.text:00000058                 pop     ebp
.text:00000059                 retn
.text:00000059 ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ endp
.text:00000059
.text:00000059 ; ---------------------------------------------------------------------------
.text:0000005A                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; void __thiscall NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CStreamSwitch *this, struct NArchive::N7z::CInArchive *, const unsigned __int8 *, unsigned int, bool)
.text:00000060                 public ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z
.text:00000060 ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z proc near
.text:00000060                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)+29p
.text:00000060                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+32Bp
.text:00000060
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_0           = dword ptr  8
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = dword ptr  10h
.text:00000060 arg_C           = byte ptr  14h
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 push    ecx
.text:00000064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000006B                 mov     [ebp+var_4], ecx
.text:0000006E                 mov     ecx, [ebp+var_4] ; this
.text:00000071                 call    ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove(void)
.text:00000076                 mov     eax, [ebp+var_4]
.text:00000079                 mov     ecx, [ebp+arg_0]
.text:0000007C                 mov     [eax], ecx
.text:0000007E                 mov     edx, [ebp+arg_8]
.text:00000081                 push    edx             ; unsigned int
.text:00000082                 mov     eax, [ebp+arg_4]
.text:00000085                 push    eax             ; unsigned __int8 *
.text:00000086                 mov     ecx, [ebp+var_4]
.text:00000089                 mov     ecx, [ecx]      ; this
.text:0000008B                 call    ?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z ; NArchive::N7z::CInArchive::AddByteStream(uchar const *,uint)
.text:00000090                 mov     edx, [ebp+var_4]
.text:00000093                 mov     byte ptr [edx+4], 1
.text:00000097                 mov     eax, [ebp+var_4]
.text:0000009A                 mov     cl, [ebp+arg_C]
.text:0000009D                 mov     [eax+5], cl
.text:000000A0                 add     esp, 4
.text:000000A3                 cmp     ebp, esp
.text:000000A5                 call    __RTC_CheckEsp
.text:000000AA                 mov     esp, ebp
.text:000000AC                 pop     ebp
.text:000000AD                 retn    10h
.text:000000AD ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z endp
.text:000000AD
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; int __stdcall NArchive::N7z::CStreamSwitch::Set(struct NArchive::N7z::CInArchive *, int)
.text:000000B0                 public ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z
.text:000000B0 ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z proc near
.text:000000B0                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+6Ap
.text:000000B0                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+66Dp ...
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = dword ptr  8
.text:000000B0 arg_4           = dword ptr  0Ch
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_4], ecx
.text:000000BE                 push    0               ; bool
.text:000000C0                 mov     ecx, [ebp+arg_4]
.text:000000C3                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000000C8                 push    eax             ; unsigned int
.text:000000C9                 mov     ecx, [ebp+arg_4]
.text:000000CC                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000000D1                 push    eax             ; unsigned __int8 *
.text:000000D2                 mov     eax, [ebp+arg_0]
.text:000000D5                 push    eax             ; struct NArchive::N7z::CInArchive *
.text:000000D6                 mov     ecx, [ebp+var_4] ; this
.text:000000D9                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,uchar const *,uint,bool)
.text:000000DE                 add     esp, 4
.text:000000E1                 cmp     ebp, esp
.text:000000E3                 call    __RTC_CheckEsp
.text:000000E8                 mov     esp, ebp
.text:000000EA                 pop     ebp
.text:000000EB                 retn    8
.text:000000EB ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z endp
.text:000000EB
.text:000000EB ; ---------------------------------------------------------------------------
.text:000000EE                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; int __stdcall NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *, int)
.text:000000F0                 public ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z
.text:000000F0 ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z proc near
.text:000000F0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+79p
.text:000000F0                                         ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+64p ...
.text:000000F0
.text:000000F0 var_C           = dword ptr -0Ch
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = dword ptr  8
.text:000000F0 arg_4           = dword ptr  0Ch
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 0Ch
.text:000000F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000000FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010B                 mov     [ebp+var_4], ecx
.text:0000010E                 mov     ecx, [ebp+var_4] ; this
.text:00000111                 call    ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove(void)
.text:00000116                 mov     ecx, [ebp+arg_0] ; this
.text:00000119                 call    ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte(void)
.text:0000011E                 mov     byte ptr [ebp+var_8+3], al
.text:00000121                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00000125                 test    eax, eax
.text:00000127                 jz      short loc_15F
.text:00000129                 mov     ecx, [ebp+arg_0] ; this
.text:0000012C                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00000131                 mov     [ebp+var_C], eax
.text:00000134                 mov     ecx, [ebp+arg_4]
.text:00000137                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:0000013C                 cmp     [ebp+var_C], eax
.text:0000013F                 jb      short loc_146
.text:00000141                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00000146 ; ---------------------------------------------------------------------------
.text:00000146
.text:00000146 loc_146:                                ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+4Fj
.text:00000146                 mov     ecx, [ebp+var_C]
.text:00000149                 push    ecx
.text:0000014A                 mov     ecx, [ebp+arg_4]
.text:0000014D                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00000152                 push    eax             ; int
.text:00000153                 mov     edx, [ebp+arg_0]
.text:00000156                 push    edx             ; struct NArchive::N7z::CInArchive *
.text:00000157                 mov     ecx, [ebp+var_4]
.text:0000015A                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)
.text:0000015F
.text:0000015F loc_15F:                                ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+37j
.text:0000015F                 add     esp, 0Ch
.text:00000162                 cmp     ebp, esp
.text:00000164                 call    __RTC_CheckEsp
.text:00000169                 mov     esp, ebp
.text:0000016B                 pop     ebp
.text:0000016C                 retn    8
.text:0000016C ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z endp
.text:0000016C
.text:0000016C ; ---------------------------------------------------------------------------
.text:0000016F                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: noreturn bp-based frame
.text:00000170
.text:00000170 ; void __stdcall NArchive::N7z::ThrowIncorrect(void)
.text:00000170 ?ThrowIncorrect@N7z@NArchive@@YGXXZ proc near
.text:00000170                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+51p
.text:00000170                                         ; NArchive::N7z::CInArchive::AddByteStream(uchar const *,uint)+17p ...
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 call    ?ThrowException@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowException(void)
.text:00000173 ?ThrowIncorrect@N7z@NArchive@@YGXXZ endp
.text:00000173
.text:00000178 ; ---------------------------------------------------------------------------
.text:00000178                 cmp     ebp, esp
.text:0000017A                 call    __RTC_CheckEsp
.text:0000017F                 pop     ebp
.text:00000180                 retn
.text:00000180 ; ---------------------------------------------------------------------------
.text:00000181                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: noreturn bp-based frame
.text:00000190
.text:00000190 ; void __stdcall NArchive::N7z::ThrowException(void)
.text:00000190 ?ThrowException@N7z@NArchive@@YGXXZ proc near
.text:00000190                                         ; CODE XREF: NArchive::N7z::ThrowIncorrect(void)+3p
.text:00000190                                         ; NArchive::N7z::ThrowEndOfData(void)+3p
.text:00000190
.text:00000190 var_4           = dword ptr -4
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 push    ecx
.text:00000194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000019B                 xor     eax, eax
.text:0000019D                 mov     byte ptr [ebp+var_4+2], al
.text:000001A0                 mov     cl, byte ptr [ebp+var_4+2]
.text:000001A3                 mov     byte ptr [ebp+var_4+3], cl
.text:000001A6                 push    offset __TI1?AVCInArchiveException@N7z@NArchive@@
.text:000001AB                 lea     edx, [ebp+var_4+3]
.text:000001AE                 push    edx
.text:000001AF                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000001AF ?ThrowException@N7z@NArchive@@YGXXZ endp
.text:000001AF
.text:000001B4 ; ---------------------------------------------------------------------------
.text:000001B4                 add     esp, 4
.text:000001B7                 cmp     ebp, esp
.text:000001B9                 call    __RTC_CheckEsp
.text:000001BE                 mov     esp, ebp
.text:000001C0                 pop     ebp
.text:000001C1                 retn
.text:000001C1 ; ---------------------------------------------------------------------------
.text:000001C2                 align 10h
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; void __thiscall NArchive::N7z::CInArchive::AddByteStream(NArchive::N7z::CInArchive *this, const unsigned __int8 *, unsigned int)
.text:000001D0                 public ?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z
.text:000001D0 ?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z proc near
.text:000001D0                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,uchar const *,uint,bool)+2Bp
.text:000001D0
.text:000001D0 var_4           = dword ptr -4
.text:000001D0 arg_0           = dword ptr  8
.text:000001D0 arg_4           = dword ptr  0Ch
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 push    ecx
.text:000001D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001DB                 mov     [ebp+var_4], ecx
.text:000001DE                 mov     eax, [ebp+var_4]
.text:000001E1                 cmp     dword ptr [eax+4], 4
.text:000001E5                 jnz     short loc_1EC
.text:000001E7                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NArchive::N7z::CInArchive::AddByteStream(uchar const *,uint)+15j
.text:000001EC                 mov     ecx, [ebp+var_4]
.text:000001EF                 mov     edx, [ecx+4]
.text:000001F2                 imul    edx, 0Ch
.text:000001F5                 mov     eax, [ebp+var_4]
.text:000001F8                 lea     ecx, [eax+edx+8]
.text:000001FC                 mov     edx, [ebp+var_4]
.text:000001FF                 mov     [edx+38h], ecx
.text:00000202                 mov     eax, [ebp+var_4]
.text:00000205                 mov     ecx, [eax+4]
.text:00000208                 add     ecx, 1
.text:0000020B                 mov     edx, [ebp+var_4]
.text:0000020E                 mov     [edx+4], ecx
.text:00000211                 mov     eax, [ebp+arg_4]
.text:00000214                 push    eax             ; unsigned int
.text:00000215                 mov     ecx, [ebp+arg_0]
.text:00000218                 push    ecx             ; unsigned __int8 *
.text:00000219                 mov     edx, [ebp+var_4]
.text:0000021C                 mov     ecx, [edx+38h]  ; this
.text:0000021F                 call    ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z ; NArchive::N7z::CInByte2::Init(uchar const *,uint)
.text:00000224                 add     esp, 4
.text:00000227                 cmp     ebp, esp
.text:00000229                 call    __RTC_CheckEsp
.text:0000022E                 mov     esp, ebp
.text:00000230                 pop     ebp
.text:00000231                 retn    8
.text:00000231 ?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z endp
.text:00000231
.text:00000231 ; ---------------------------------------------------------------------------
.text:00000234                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; unsigned __int8 __thiscall NArchive::N7z::CInByte2::ReadByte(NArchive::N7z::CInByte2 *__hidden this)
.text:00000240                 public ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ
.text:00000240 ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ proc near
.text:00000240                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+79p
.text:00000240                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+193p ...
.text:00000240
.text:00000240 var_8           = dword ptr -8
.text:00000240 var_4           = dword ptr -4
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 sub     esp, 8
.text:00000246                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000024D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000254                 mov     [ebp+var_4], ecx
.text:00000257                 mov     eax, [ebp+var_4]
.text:0000025A                 mov     ecx, [ebp+var_4]
.text:0000025D                 mov     edx, [eax+8]
.text:00000260                 cmp     edx, [ecx+4]
.text:00000263                 jb      short loc_26A
.text:00000265                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:0000026A ; ---------------------------------------------------------------------------
.text:0000026A
.text:0000026A loc_26A:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadByte(void)+23j
.text:0000026A                 mov     eax, [ebp+var_4]
.text:0000026D                 mov     ecx, [eax]
.text:0000026F                 mov     edx, [ebp+var_4]
.text:00000272                 mov     eax, [edx+8]
.text:00000275                 mov     cl, [ecx+eax]
.text:00000278                 mov     byte ptr [ebp+var_8+3], cl
.text:0000027B                 mov     edx, [ebp+var_4]
.text:0000027E                 mov     eax, [edx+8]
.text:00000281                 add     eax, 1
.text:00000284                 mov     ecx, [ebp+var_4]
.text:00000287                 mov     [ecx+8], eax
.text:0000028A                 mov     al, byte ptr [ebp+var_8+3]
.text:0000028D                 add     esp, 8
.text:00000290                 cmp     ebp, esp
.text:00000292                 call    __RTC_CheckEsp
.text:00000297                 mov     esp, ebp
.text:00000299                 pop     ebp
.text:0000029A                 retn
.text:0000029A ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ endp
.text:0000029A
.text:0000029A ; ---------------------------------------------------------------------------
.text:0000029B                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: noreturn bp-based frame
.text:000002A0
.text:000002A0 ; void __stdcall NArchive::N7z::ThrowEndOfData(void)
.text:000002A0 ?ThrowEndOfData@N7z@NArchive@@YGXXZ proc near
.text:000002A0                                         ; CODE XREF: NArchive::N7z::CInByte2::ReadByte(void)+25p
.text:000002A0                                         ; NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)+27p ...
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 call    ?ThrowException@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowException(void)
.text:000002A3 ?ThrowEndOfData@N7z@NArchive@@YGXXZ endp
.text:000002A3
.text:000002A8 ; ---------------------------------------------------------------------------
.text:000002A8                 cmp     ebp, esp
.text:000002AA                 call    __RTC_CheckEsp
.text:000002AF                 pop     ebp
.text:000002B0                 retn
.text:000002B0 ; ---------------------------------------------------------------------------
.text:000002B1                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; void __thiscall NArchive::N7z::CInByte2::ReadBytes(NArchive::N7z::CInByte2 *this, unsigned __int8 *Dst, unsigned int)
.text:000002C0                 public ?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z
.text:000002C0 ?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z proc near
.text:000002C0                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+18Cp
.text:000002C0                                         ; NArchive::N7z::CInArchive::ReadBytes(uchar *,uint)+1Cp
.text:000002C0
.text:000002C0 var_4           = dword ptr -4
.text:000002C0 Dst             = dword ptr  8
.text:000002C0 Size            = dword ptr  0Ch
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 push    ecx
.text:000002C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002CB                 mov     [ebp+var_4], ecx
.text:000002CE                 cmp     [ebp+Size], 0
.text:000002D2                 jnz     short loc_2D6
.text:000002D4                 jmp     short loc_317
.text:000002D6 ; ---------------------------------------------------------------------------
.text:000002D6
.text:000002D6 loc_2D6:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)+12j
.text:000002D6                 mov     eax, [ebp+var_4]
.text:000002D9                 mov     ecx, [ebp+var_4]
.text:000002DC                 mov     edx, [eax+4]
.text:000002DF                 sub     edx, [ecx+8]
.text:000002E2                 cmp     [ebp+Size], edx
.text:000002E5                 jbe     short loc_2EC
.text:000002E7                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:000002EC ; ---------------------------------------------------------------------------
.text:000002EC
.text:000002EC loc_2EC:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)+25j
.text:000002EC                 mov     eax, [ebp+Size]
.text:000002EF                 push    eax             ; Size
.text:000002F0                 mov     ecx, [ebp+var_4]
.text:000002F3                 mov     edx, [ecx]
.text:000002F5                 mov     eax, [ebp+var_4]
.text:000002F8                 add     edx, [eax+8]
.text:000002FB                 push    edx             ; Src
.text:000002FC                 mov     ecx, [ebp+Dst]
.text:000002FF                 push    ecx             ; Dst
.text:00000300                 call    _memcpy
.text:00000305                 add     esp, 0Ch
.text:00000308                 mov     edx, [ebp+var_4]
.text:0000030B                 mov     eax, [edx+8]
.text:0000030E                 add     eax, [ebp+Size]
.text:00000311                 mov     ecx, [ebp+var_4]
.text:00000314                 mov     [ecx+8], eax
.text:00000317
.text:00000317 loc_317:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)+14j
.text:00000317                 add     esp, 4
.text:0000031A                 cmp     ebp, esp
.text:0000031C                 call    __RTC_CheckEsp
.text:00000321                 mov     esp, ebp
.text:00000323                 pop     ebp
.text:00000324                 retn    8
.text:00000324 ?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z endp
.text:00000324
.text:00000324 ; ---------------------------------------------------------------------------
.text:00000327                 align 10h
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; void __thiscall NArchive::N7z::CInByte2::SkipData(NArchive::N7z::CInByte2 *this, unsigned __int64)
.text:00000330                 public ?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z
.text:00000330 ?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z proc near
.text:00000330                                         ; CODE XREF: NArchive::N7z::CInByte2::SkipData(void)+1Bp
.text:00000330
.text:00000330 var_C           = dword ptr -0Ch
.text:00000330 var_8           = dword ptr -8
.text:00000330 var_4           = dword ptr -4
.text:00000330 arg_0           = qword ptr  8
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 sub     esp, 0Ch
.text:00000336                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000033D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000344                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000034B                 mov     [ebp+var_4], ecx
.text:0000034E                 mov     eax, [ebp+var_4]
.text:00000351                 mov     ecx, [ebp+var_4]
.text:00000354                 mov     edx, [eax+4]
.text:00000357                 sub     edx, [ecx+8]
.text:0000035A                 xor     eax, eax
.text:0000035C                 mov     [ebp+var_C], edx
.text:0000035F                 mov     [ebp+var_8], eax
.text:00000362                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00000365                 cmp     ecx, [ebp+var_8]
.text:00000368                 jb      short loc_379
.text:0000036A                 ja      short loc_374
.text:0000036C                 mov     edx, dword ptr [ebp+arg_0]
.text:0000036F                 cmp     edx, [ebp+var_C]
.text:00000372                 jbe     short loc_379
.text:00000374
.text:00000374 loc_374:                                ; CODE XREF: NArchive::N7z::CInByte2::SkipData(unsigned __int64)+3Aj
.text:00000374                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:00000379 ; ---------------------------------------------------------------------------
.text:00000379
.text:00000379 loc_379:                                ; CODE XREF: NArchive::N7z::CInByte2::SkipData(unsigned __int64)+38j
.text:00000379                                         ; NArchive::N7z::CInByte2::SkipData(unsigned __int64)+42j
.text:00000379                 mov     eax, dword ptr [ebp+arg_0]
.text:0000037C                 mov     ecx, [ebp+var_4]
.text:0000037F                 add     eax, [ecx+8]
.text:00000382                 mov     edx, [ebp+var_4]
.text:00000385                 mov     [edx+8], eax
.text:00000388                 add     esp, 0Ch
.text:0000038B                 cmp     ebp, esp
.text:0000038D                 call    __RTC_CheckEsp
.text:00000392                 mov     esp, ebp
.text:00000394                 pop     ebp
.text:00000395                 retn    8
.text:00000395 ?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z endp
.text:00000395
.text:00000395 ; ---------------------------------------------------------------------------
.text:00000398                 align 10h
.text:000003A0
.text:000003A0 ; =============== S U B R O U T I N E =======================================
.text:000003A0
.text:000003A0 ; Attributes: bp-based frame
.text:000003A0
.text:000003A0 ; void __thiscall NArchive::N7z::CInByte2::SkipData(NArchive::N7z::CInByte2 *__hidden this)
.text:000003A0                 public ?SkipData@CInByte2@N7z@NArchive@@QAEXXZ
.text:000003A0 ?SkipData@CInByte2@N7z@NArchive@@QAEXXZ proc near
.text:000003A0                                         ; CODE XREF: NArchive::N7z::CInArchive::SkipData(void)+14p
.text:000003A0
.text:000003A0 var_4           = dword ptr -4
.text:000003A0
.text:000003A0                 push    ebp
.text:000003A1                 mov     ebp, esp
.text:000003A3                 push    ecx
.text:000003A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003AB                 mov     [ebp+var_4], ecx
.text:000003AE                 mov     ecx, [ebp+var_4] ; this
.text:000003B1                 call    ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber(void)
.text:000003B6                 push    edx
.text:000003B7                 push    eax             ; unsigned __int64
.text:000003B8                 mov     ecx, [ebp+var_4] ; this
.text:000003BB                 call    ?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipData(unsigned __int64)
.text:000003C0                 add     esp, 4
.text:000003C3                 cmp     ebp, esp
.text:000003C5                 call    __RTC_CheckEsp
.text:000003CA                 mov     esp, ebp
.text:000003CC                 pop     ebp
.text:000003CD                 retn
.text:000003CD ?SkipData@CInByte2@N7z@NArchive@@QAEXXZ endp
.text:000003CD
.text:000003CD ; ---------------------------------------------------------------------------
.text:000003CE                 align 10h
.text:000003D0
.text:000003D0 ; =============== S U B R O U T I N E =======================================
.text:000003D0
.text:000003D0 ; Attributes: bp-based frame
.text:000003D0
.text:000003D0 ; unsigned __int64 __thiscall NArchive::N7z::CInByte2::ReadNumber(NArchive::N7z::CInByte2 *__hidden this)
.text:000003D0                 public ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ
.text:000003D0 ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ proc near
.text:000003D0                                         ; CODE XREF: NArchive::N7z::CInByte2::SkipData(void)+11p
.text:000003D0                                         ; NArchive::N7z::CInByte2::ReadNum(void)+21p ...
.text:000003D0
.text:000003D0 var_18          = dword ptr -18h
.text:000003D0 var_14          = dword ptr -14h
.text:000003D0 var_10          = dword ptr -10h
.text:000003D0 var_C           = dword ptr -0Ch
.text:000003D0 var_8           = dword ptr -8
.text:000003D0 var_4           = dword ptr -4
.text:000003D0
.text:000003D0                 push    ebp
.text:000003D1                 mov     ebp, esp
.text:000003D3                 sub     esp, 18h
.text:000003D6                 mov     eax, 0CCCCCCCCh
.text:000003DB                 mov     [ebp+var_18], eax
.text:000003DE                 mov     [ebp+var_14], eax
.text:000003E1                 mov     [ebp+var_10], eax
.text:000003E4                 mov     [ebp+var_C], eax
.text:000003E7                 mov     [ebp+var_8], eax
.text:000003EA                 mov     [ebp+var_4], eax
.text:000003ED                 mov     [ebp+var_4], ecx
.text:000003F0                 lea     eax, [ebp+var_C]
.text:000003F3                 push    eax
.text:000003F4                 mov     ecx, [ebp+var_4]
.text:000003F7                 mov     edx, [ebp+var_4]
.text:000003FA                 mov     eax, [ecx+4]
.text:000003FD                 sub     eax, [edx+8]
.text:00000400                 push    eax
.text:00000401                 mov     ecx, [ebp+var_4]
.text:00000404                 mov     edx, [ecx]
.text:00000406                 mov     eax, [ebp+var_4]
.text:00000409                 add     edx, [eax+8]
.text:0000040C                 push    edx
.text:0000040D                 call    ?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z ; NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)
.text:00000412                 mov     [ebp+var_18], eax
.text:00000415                 mov     [ebp+var_14], edx
.text:00000418                 cmp     [ebp+var_C], 0
.text:0000041C                 jnz     short loc_423
.text:0000041E                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:00000423 ; ---------------------------------------------------------------------------
.text:00000423
.text:00000423 loc_423:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadNumber(void)+4Cj
.text:00000423                 mov     ecx, [ebp+var_4]
.text:00000426                 mov     edx, [ecx+8]
.text:00000429                 add     edx, [ebp+var_C]
.text:0000042C                 mov     eax, [ebp+var_4]
.text:0000042F                 mov     [eax+8], edx
.text:00000432                 mov     eax, [ebp+var_18]
.text:00000435                 mov     edx, [ebp+var_14]
.text:00000438                 push    edx
.text:00000439                 mov     ecx, ebp
.text:0000043B                 push    eax
.text:0000043C                 lea     edx, $LN6
.text:00000442                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000447                 pop     eax
.text:00000448                 pop     edx
.text:00000449                 add     esp, 18h
.text:0000044C                 cmp     ebp, esp
.text:0000044E                 call    __RTC_CheckEsp
.text:00000453                 mov     esp, ebp
.text:00000455                 pop     ebp
.text:00000456                 retn
.text:00000456 ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ endp
.text:00000456
.text:00000456 ; ---------------------------------------------------------------------------
.text:00000457                 align 4
.text:00000458 $LN6            dd 1                    ; DATA XREF: NArchive::N7z::CInByte2::ReadNumber(void)+6Co
.text:0000045C                 dd offset $LN5
.text:00000460 $LN5            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000045Co
.text:00000468                 dd offset $LN4          ; "processed"
.text:0000046C $LN4            db 'processed',0        ; DATA XREF: .text:00000468o
.text:00000476                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; unsigned __int64 __stdcall NArchive::N7z::ReadNumberSpec(unsigned char const *, unsigned int, unsigned int &)
.text:00000480 ?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z proc near
.text:00000480                                         ; CODE XREF: NArchive::N7z::CInByte2::ReadNumber(void)+3Dp
.text:00000480
.text:00000480 var_1C          = dword ptr -1Ch
.text:00000480 var_18          = dword ptr -18h
.text:00000480 var_14          = dword ptr -14h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480 arg_4           = dword ptr  0Ch
.text:00000480 arg_8           = dword ptr  10h
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 1Ch
.text:00000486                 mov     eax, 0CCCCCCCCh
.text:0000048B                 mov     [ebp+var_1C], eax
.text:0000048E                 mov     [ebp+var_18], eax
.text:00000491                 mov     [ebp+var_14], eax
.text:00000494                 mov     [ebp+var_10], eax
.text:00000497                 mov     [ebp+var_C], eax
.text:0000049A                 mov     [ebp+var_8], eax
.text:0000049D                 mov     [ebp+var_4], eax
.text:000004A0                 cmp     [ebp+arg_4], 0
.text:000004A4                 jnz     short loc_4B8
.text:000004A6                 mov     eax, [ebp+arg_8]
.text:000004A9                 mov     dword ptr [eax], 0
.text:000004AF                 xor     eax, eax
.text:000004B1                 xor     edx, edx
.text:000004B3                 jmp     loc_5F3
.text:000004B8 ; ---------------------------------------------------------------------------
.text:000004B8
.text:000004B8 loc_4B8:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+24j
.text:000004B8                 mov     ecx, [ebp+arg_0]
.text:000004BB                 movzx   edx, byte ptr [ecx]
.text:000004BE                 mov     [ebp+var_4], edx
.text:000004C1                 mov     eax, [ebp+arg_0]
.text:000004C4                 add     eax, 1
.text:000004C7                 mov     [ebp+arg_0], eax
.text:000004CA                 mov     ecx, [ebp+arg_4]
.text:000004CD                 sub     ecx, 1
.text:000004D0                 mov     [ebp+arg_4], ecx
.text:000004D3                 mov     edx, [ebp+var_4]
.text:000004D6                 and     edx, 80h
.text:000004DC                 jnz     short loc_4F1
.text:000004DE                 mov     eax, [ebp+arg_8]
.text:000004E1                 mov     dword ptr [eax], 1
.text:000004E7                 mov     eax, [ebp+var_4]
.text:000004EA                 xor     edx, edx
.text:000004EC                 jmp     loc_5F3
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F1
.text:000004F1 loc_4F1:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+5Cj
.text:000004F1                 cmp     [ebp+arg_4], 0
.text:000004F5                 jnz     short loc_509
.text:000004F7                 mov     ecx, [ebp+arg_8]
.text:000004FA                 mov     dword ptr [ecx], 0
.text:00000500                 xor     eax, eax
.text:00000502                 xor     edx, edx
.text:00000504                 jmp     loc_5F3
.text:00000509 ; ---------------------------------------------------------------------------
.text:00000509
.text:00000509 loc_509:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+75j
.text:00000509                 mov     edx, [ebp+arg_0]
.text:0000050C                 movzx   eax, byte ptr [edx]
.text:0000050F                 cdq
.text:00000510                 mov     [ebp+var_C], eax
.text:00000513                 mov     [ebp+var_8], edx
.text:00000516                 mov     eax, [ebp+arg_0]
.text:00000519                 add     eax, 1
.text:0000051C                 mov     [ebp+arg_0], eax
.text:0000051F                 mov     ecx, [ebp+arg_4]
.text:00000522                 sub     ecx, 1
.text:00000525                 mov     [ebp+arg_4], ecx
.text:00000528                 mov     [ebp+var_10], 1
.text:0000052F                 jmp     short loc_53A
.text:00000531 ; ---------------------------------------------------------------------------
.text:00000531
.text:00000531 loc_531:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+15Fj
.text:00000531                 mov     edx, [ebp+var_10]
.text:00000534                 add     edx, 1
.text:00000537                 mov     [ebp+var_10], edx
.text:0000053A
.text:0000053A loc_53A:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+AFj
.text:0000053A                 cmp     [ebp+var_10], 8
.text:0000053E                 jnb     loc_5E4
.text:00000544                 mov     eax, 80h ; 'Ç'
.text:00000549                 mov     ecx, [ebp+var_10]
.text:0000054C                 shr     eax, cl
.text:0000054E                 mov     [ebp+var_14], eax
.text:00000551                 mov     ecx, [ebp+var_4]
.text:00000554                 and     ecx, [ebp+var_14]
.text:00000557                 jnz     short loc_59A
.text:00000559                 mov     edx, [ebp+var_14]
.text:0000055C                 sub     edx, 1
.text:0000055F                 and     edx, [ebp+var_4]
.text:00000562                 xor     eax, eax
.text:00000564                 mov     [ebp+var_1C], edx
.text:00000567                 mov     [ebp+var_18], eax
.text:0000056A                 mov     ecx, [ebp+var_10]
.text:0000056D                 shl     ecx, 3
.text:00000570                 mov     eax, [ebp+var_1C]
.text:00000573                 mov     edx, [ebp+var_18]
.text:00000576                 call    __allshl
.text:0000057B                 or      eax, [ebp+var_C]
.text:0000057E                 or      edx, [ebp+var_8]
.text:00000581                 mov     [ebp+var_C], eax
.text:00000584                 mov     [ebp+var_8], edx
.text:00000587                 mov     ecx, [ebp+var_10]
.text:0000058A                 add     ecx, 1
.text:0000058D                 mov     edx, [ebp+arg_8]
.text:00000590                 mov     [edx], ecx
.text:00000592                 mov     eax, [ebp+var_C]
.text:00000595                 mov     edx, [ebp+var_8]
.text:00000598                 jmp     short loc_5F3
.text:0000059A ; ---------------------------------------------------------------------------
.text:0000059A
.text:0000059A loc_59A:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+D7j
.text:0000059A                 cmp     [ebp+arg_4], 0
.text:0000059E                 jnz     short loc_5AF
.text:000005A0                 mov     eax, [ebp+arg_8]
.text:000005A3                 mov     dword ptr [eax], 0
.text:000005A9                 xor     eax, eax
.text:000005AB                 xor     edx, edx
.text:000005AD                 jmp     short loc_5F3
.text:000005AF ; ---------------------------------------------------------------------------
.text:000005AF
.text:000005AF loc_5AF:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+11Ej
.text:000005AF                 mov     ecx, [ebp+arg_0]
.text:000005B2                 movzx   eax, byte ptr [ecx]
.text:000005B5                 cdq
.text:000005B6                 mov     ecx, [ebp+var_10]
.text:000005B9                 shl     ecx, 3
.text:000005BC                 call    __allshl
.text:000005C1                 or      eax, [ebp+var_C]
.text:000005C4                 or      edx, [ebp+var_8]
.text:000005C7                 mov     [ebp+var_C], eax
.text:000005CA                 mov     [ebp+var_8], edx
.text:000005CD                 mov     edx, [ebp+arg_0]
.text:000005D0                 add     edx, 1
.text:000005D3                 mov     [ebp+arg_0], edx
.text:000005D6                 mov     eax, [ebp+arg_4]
.text:000005D9                 sub     eax, 1
.text:000005DC                 mov     [ebp+arg_4], eax
.text:000005DF                 jmp     loc_531
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+BEj
.text:000005E4                 mov     ecx, [ebp+arg_8]
.text:000005E7                 mov     dword ptr [ecx], 9
.text:000005ED                 mov     eax, [ebp+var_C]
.text:000005F0                 mov     edx, [ebp+var_8]
.text:000005F3
.text:000005F3 loc_5F3:                                ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+33j
.text:000005F3                                         ; NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+6Cj ...
.text:000005F3                 add     esp, 1Ch
.text:000005F6                 cmp     ebp, esp
.text:000005F8                 call    __RTC_CheckEsp
.text:000005FD                 mov     esp, ebp
.text:000005FF                 pop     ebp
.text:00000600                 retn    0Ch
.text:00000600 ?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z endp
.text:00000600
.text:00000600 ; ---------------------------------------------------------------------------
.text:00000603                 align 10h
.text:00000610
.text:00000610 ; =============== S U B R O U T I N E =======================================
.text:00000610
.text:00000610 ; Attributes: bp-based frame
.text:00000610
.text:00000610 ; unsigned int __thiscall NArchive::N7z::CInByte2::ReadNum(NArchive::N7z::CInByte2 *__hidden this)
.text:00000610                 public ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ
.text:00000610 ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ proc near
.text:00000610                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1Fp
.text:00000610                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+137p ...
.text:00000610
.text:00000610 var_C           = dword ptr -0Ch
.text:00000610 var_8           = dword ptr -8
.text:00000610 var_4           = dword ptr -4
.text:00000610
.text:00000610                 push    ebp
.text:00000611                 mov     ebp, esp
.text:00000613                 sub     esp, 0Ch
.text:00000616                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000061D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000062B                 mov     [ebp+var_4], ecx
.text:0000062E                 mov     ecx, [ebp+var_4] ; this
.text:00000631                 call    ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber(void)
.text:00000636                 mov     [ebp+var_C], eax
.text:00000639                 mov     [ebp+var_8], edx
.text:0000063C                 cmp     [ebp+var_8], 0
.text:00000640                 ja      short loc_64B
.text:00000642                 cmp     [ebp+var_C], 7FFFFFFFh
.text:00000649                 jbe     short loc_650
.text:0000064B
.text:0000064B loc_64B:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadNum(void)+30j
.text:0000064B                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00000650 ; ---------------------------------------------------------------------------
.text:00000650
.text:00000650 loc_650:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadNum(void)+39j
.text:00000650                 mov     eax, [ebp+var_C]
.text:00000653                 add     esp, 0Ch
.text:00000656                 cmp     ebp, esp
.text:00000658                 call    __RTC_CheckEsp
.text:0000065D                 mov     esp, ebp
.text:0000065F                 pop     ebp
.text:00000660                 retn
.text:00000660 ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ endp
.text:00000660
.text:00000660 ; ---------------------------------------------------------------------------
.text:00000661                 align 10h
.text:00000670
.text:00000670 ; =============== S U B R O U T I N E =======================================
.text:00000670
.text:00000670 ; Attributes: noreturn bp-based frame
.text:00000670
.text:00000670 ; void __stdcall NArchive::N7z::ThrowUnsupported(void)
.text:00000670 ?ThrowUnsupported@N7z@NArchive@@YGXXZ proc near
.text:00000670                                         ; CODE XREF: NArchive::N7z::CInByte2::ReadNum(void):loc_64Bp
.text:00000670                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+2Dp ...
.text:00000670
.text:00000670 var_4           = dword ptr -4
.text:00000670
.text:00000670                 push    ebp
.text:00000671                 mov     ebp, esp
.text:00000673                 push    ecx
.text:00000674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000067B                 mov     al, byte ptr [ebp+var_4+2]
.text:0000067E                 mov     byte ptr [ebp+var_4+3], al
.text:00000681                 push    offset __TI2?AVCUnsupportedFeatureException@N7z@NArchive@@
.text:00000686                 lea     ecx, [ebp+var_4+3]
.text:00000689                 push    ecx
.text:0000068A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000068A ?ThrowUnsupported@N7z@NArchive@@YGXXZ endp
.text:0000068A
.text:0000068F ; ---------------------------------------------------------------------------
.text:0000068F                 add     esp, 4
.text:00000692                 cmp     ebp, esp
.text:00000694                 call    __RTC_CheckEsp
.text:00000699                 mov     esp, ebp
.text:0000069B                 pop     ebp
.text:0000069C                 retn
.text:0000069C ; ---------------------------------------------------------------------------
.text:0000069D                 align 10h
.text:000006A0
.text:000006A0 ; =============== S U B R O U T I N E =======================================
.text:000006A0
.text:000006A0 ; Attributes: bp-based frame
.text:000006A0
.text:000006A0 ; unsigned int __thiscall NArchive::N7z::CInByte2::ReadUInt32(NArchive::N7z::CInByte2 *__hidden this)
.text:000006A0                 public ?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ
.text:000006A0 ?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ proc near
.text:000006A0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt32(void)+14p
.text:000006A0
.text:000006A0 var_8           = dword ptr -8
.text:000006A0 var_4           = dword ptr -4
.text:000006A0
.text:000006A0                 push    ebp
.text:000006A1                 mov     ebp, esp
.text:000006A3                 sub     esp, 8
.text:000006A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006B4                 mov     [ebp+var_4], ecx
.text:000006B7                 mov     eax, [ebp+var_4]
.text:000006BA                 mov     ecx, [eax+8]
.text:000006BD                 add     ecx, 4
.text:000006C0                 mov     edx, [ebp+var_4]
.text:000006C3                 cmp     ecx, [edx+4]
.text:000006C6                 jbe     short loc_6CD
.text:000006C8                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:000006CD ; ---------------------------------------------------------------------------
.text:000006CD
.text:000006CD loc_6CD:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadUInt32(void)+26j
.text:000006CD                 mov     eax, [ebp+var_4]
.text:000006D0                 mov     ecx, [eax]
.text:000006D2                 mov     edx, [ebp+var_4]
.text:000006D5                 mov     eax, [edx+8]
.text:000006D8                 mov     ecx, [ecx+eax]
.text:000006DB                 mov     [ebp+var_8], ecx
.text:000006DE                 mov     edx, [ebp+var_4]
.text:000006E1                 mov     eax, [edx+8]
.text:000006E4                 add     eax, 4
.text:000006E7                 mov     ecx, [ebp+var_4]
.text:000006EA                 mov     [ecx+8], eax
.text:000006ED                 mov     eax, [ebp+var_8]
.text:000006F0                 add     esp, 8
.text:000006F3                 cmp     ebp, esp
.text:000006F5                 call    __RTC_CheckEsp
.text:000006FA                 mov     esp, ebp
.text:000006FC                 pop     ebp
.text:000006FD                 retn
.text:000006FD ?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ endp
.text:000006FD
.text:000006FD ; ---------------------------------------------------------------------------
.text:000006FE                 align 10h
.text:00000700
.text:00000700 ; =============== S U B R O U T I N E =======================================
.text:00000700
.text:00000700 ; Attributes: bp-based frame
.text:00000700
.text:00000700 ; unsigned __int64 __thiscall NArchive::N7z::CInByte2::ReadUInt64(NArchive::N7z::CInByte2 *__hidden this)
.text:00000700                 public ?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ
.text:00000700 ?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ proc near
.text:00000700                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64(void)+14p
.text:00000700
.text:00000700 var_C           = dword ptr -0Ch
.text:00000700 var_8           = dword ptr -8
.text:00000700 var_4           = dword ptr -4
.text:00000700
.text:00000700                 push    ebp
.text:00000701                 mov     ebp, esp
.text:00000703                 sub     esp, 0Ch
.text:00000706                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000070D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000714                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071B                 mov     [ebp+var_4], ecx
.text:0000071E                 mov     eax, [ebp+var_4]
.text:00000721                 mov     ecx, [eax+8]
.text:00000724                 add     ecx, 8
.text:00000727                 mov     edx, [ebp+var_4]
.text:0000072A                 cmp     ecx, [edx+4]
.text:0000072D                 jbe     short loc_734
.text:0000072F                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:00000734 ; ---------------------------------------------------------------------------
.text:00000734
.text:00000734 loc_734:                                ; CODE XREF: NArchive::N7z::CInByte2::ReadUInt64(void)+2Dj
.text:00000734                 mov     eax, [ebp+var_4]
.text:00000737                 mov     ecx, [eax]
.text:00000739                 mov     edx, [ebp+var_4]
.text:0000073C                 mov     eax, [edx+8]
.text:0000073F                 mov     edx, [ecx+eax]
.text:00000742                 mov     [ebp+var_C], edx
.text:00000745                 mov     eax, [ecx+eax+4]
.text:00000749                 mov     [ebp+var_8], eax
.text:0000074C                 mov     ecx, [ebp+var_4]
.text:0000074F                 mov     edx, [ecx+8]
.text:00000752                 add     edx, 8
.text:00000755                 mov     eax, [ebp+var_4]
.text:00000758                 mov     [eax+8], edx
.text:0000075B                 mov     eax, [ebp+var_C]
.text:0000075E                 mov     edx, [ebp+var_8]
.text:00000761                 add     esp, 0Ch
.text:00000764                 cmp     ebp, esp
.text:00000766                 call    __RTC_CheckEsp
.text:0000076B                 mov     esp, ebp
.text:0000076D                 pop     ebp
.text:0000076E                 retn
.text:0000076E ?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ endp
.text:0000076E
.text:0000076E ; ---------------------------------------------------------------------------
.text:0000076F                 align 10h
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; __int32 __thiscall NArchive::N7z::CInArchive::FindAndReadSignature(NArchive::N7z::CInArchive *this, struct IInStream *, const unsigned __int64 *)
.text:00000770                 public ?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text:00000770 ?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z proc near
.text:00000770                                         ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+DDp
.text:00000770
.text:00000770 var_70          = dword ptr -70h
.text:00000770 var_6C          = dword ptr -6Ch
.text:00000770 var_68          = dword ptr -68h
.text:00000770 var_64          = dword ptr -64h
.text:00000770 var_60          = dword ptr -60h
.text:00000770 var_5C          = dword ptr -5Ch
.text:00000770 var_58          = dword ptr -58h
.text:00000770 var_54          = dword ptr -54h
.text:00000770 Src             = dword ptr -50h
.text:00000770 var_4C          = dword ptr -4Ch
.text:00000770 var_48          = dword ptr -48h
.text:00000770 var_40          = dword ptr -40h
.text:00000770 var_38          = dword ptr -38h
.text:00000770 var_34          = dword ptr -34h
.text:00000770 var_30          = dword ptr -30h
.text:00000770 var_2C          = dword ptr -2Ch
.text:00000770 var_28          = dword ptr -28h
.text:00000770 var_20          = byte ptr -20h
.text:00000770 var_18          = dword ptr -18h
.text:00000770 var_14          = dword ptr -14h
.text:00000770 var_10          = dword ptr -10h
.text:00000770 var_C           = dword ptr -0Ch
.text:00000770 var_4           = dword ptr -4
.text:00000770 arg_0           = dword ptr  8
.text:00000770 arg_4           = dword ptr  0Ch
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 push    0FFFFFFFFh
.text:00000775                 push    offset __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text:0000077A                 mov     eax, large fs:0
.text:00000780                 push    eax
.text:00000781                 sub     esp, 64h
.text:00000784                 push    esi
.text:00000785                 push    edi
.text:00000786                 push    ecx
.text:00000787                 lea     edi, [ebp+var_70]
.text:0000078A                 mov     ecx, 19h
.text:0000078F                 mov     eax, 0CCCCCCCCh
.text:00000794                 rep stosd
.text:00000796                 pop     ecx
.text:00000797                 mov     eax, dword ptr ds:___security_cookie
.text:0000079C                 xor     eax, ebp
.text:0000079E                 push    eax
.text:0000079F                 lea     eax, [ebp+var_C]
.text:000007A2                 mov     large fs:0, eax
.text:000007A8                 mov     [ebp+var_10], ecx
.text:000007AB                 push    20h ; ' '       ; unsigned int
.text:000007AD                 mov     eax, [ebp+var_10]
.text:000007B0                 add     eax, 50h ; 'P'
.text:000007B3                 push    eax             ; void *
.text:000007B4                 mov     ecx, [ebp+arg_0]
.text:000007B7                 push    ecx             ; struct ISequentialInStream *
.text:000007B8                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000007BD                 mov     [ebp+var_14], eax
.text:000007C0                 cmp     [ebp+var_14], 0
.text:000007C4                 jz      short loc_7CE
.text:000007C6                 mov     eax, [ebp+var_14]
.text:000007C9                 jmp     loc_AB5
.text:000007CE ; ---------------------------------------------------------------------------
.text:000007CE
.text:000007CE loc_7CE:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+54j
.text:000007CE                 mov     edx, [ebp+var_10]
.text:000007D1                 add     edx, 50h ; 'P'
.text:000007D4                 push    edx
.text:000007D5                 call    ?TestSignature2@N7z@NArchive@@YG_NPBE@Z ; NArchive::N7z::TestSignature2(uchar const *)
.text:000007DA                 movzx   eax, al
.text:000007DD                 test    eax, eax
.text:000007DF                 jz      short loc_7E8
.text:000007E1                 xor     eax, eax
.text:000007E3                 jmp     loc_AB5
.text:000007E8 ; ---------------------------------------------------------------------------
.text:000007E8
.text:000007E8 loc_7E8:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+6Fj
.text:000007E8                 cmp     [ebp+arg_4], 0
.text:000007EC                 jz      short loc_80B
.text:000007EE                 mov     ecx, [ebp+arg_4]
.text:000007F1                 mov     [ebp+var_68], ecx
.text:000007F4                 mov     edx, [ebp+var_68]
.text:000007F7                 mov     eax, [ebp+var_68]
.text:000007FA                 mov     ecx, [edx]
.text:000007FC                 or      ecx, [eax+4]
.text:000007FF                 jnz     short loc_80B
.text:00000801                 mov     eax, 1
.text:00000806                 jmp     loc_AB5
.text:0000080B ; ---------------------------------------------------------------------------
.text:0000080B
.text:0000080B loc_80B:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+7Cj
.text:0000080B                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+8Fj
.text:0000080B                 mov     [ebp+var_18], 8000h
.text:00000812                 push    8000h
.text:00000817                 lea     ecx, [ebp+var_20]
.text:0000081A                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:0000081F                 mov     [ebp+var_4], 0
.text:00000826                 push    20h ; ' '       ; Size
.text:00000828                 mov     edx, [ebp+var_10]
.text:0000082B                 add     edx, 50h ; 'P'
.text:0000082E                 push    edx             ; Src
.text:0000082F                 lea     ecx, [ebp+var_20]
.text:00000832                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000837                 push    eax             ; Dst
.text:00000838                 call    _memcpy
.text:0000083D                 add     esp, 0Ch
.text:00000840                 mov     [ebp+var_2C], 0
.text:00000847                 mov     [ebp+var_28], 0
.text:0000084E
.text:0000084E loc_84E:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+331j
.text:0000084E                 mov     [ebp+var_30], 7FE0h
.text:00000855                 cmp     [ebp+arg_4], 0
.text:00000859                 jz      short loc_8B6
.text:0000085B                 mov     eax, [ebp+arg_4]
.text:0000085E                 mov     ecx, [eax]
.text:00000860                 sub     ecx, [ebp+var_2C]
.text:00000863                 mov     edx, [eax+4]
.text:00000866                 sbb     edx, [ebp+var_28]
.text:00000869                 mov     [ebp+var_38], ecx
.text:0000086C                 mov     [ebp+var_34], edx
.text:0000086F                 mov     eax, [ebp+var_30]
.text:00000872                 xor     ecx, ecx
.text:00000874                 mov     [ebp+var_70], eax
.text:00000877                 mov     [ebp+var_6C], ecx
.text:0000087A                 mov     edx, [ebp+var_6C]
.text:0000087D                 cmp     edx, [ebp+var_34]
.text:00000880                 jb      short loc_892
.text:00000882                 ja      short loc_88C
.text:00000884                 mov     eax, [ebp+var_70]
.text:00000887                 cmp     eax, [ebp+var_38]
.text:0000088A                 jbe     short loc_892
.text:0000088C
.text:0000088C loc_88C:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+112j
.text:0000088C                 mov     ecx, [ebp+var_38]
.text:0000088F                 mov     [ebp+var_30], ecx
.text:00000892
.text:00000892 loc_892:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+110j
.text:00000892                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+11Aj
.text:00000892                 cmp     [ebp+var_30], 0
.text:00000896                 jnz     short loc_8B6
.text:00000898                 mov     [ebp+var_58], 1
.text:0000089F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008A6                 lea     ecx, [ebp+var_20]
.text:000008A9                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000008AE                 mov     eax, [ebp+var_58]
.text:000008B1                 jmp     loc_AB5
.text:000008B6 ; ---------------------------------------------------------------------------
.text:000008B6
.text:000008B6 loc_8B6:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+E9j
.text:000008B6                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+126j
.text:000008B6                 mov     [ebp+var_40], 0
.text:000008BD                 mov     esi, esp
.text:000008BF                 lea     edx, [ebp+var_40]
.text:000008C2                 push    edx
.text:000008C3                 mov     eax, [ebp+var_30]
.text:000008C6                 push    eax
.text:000008C7                 lea     ecx, [ebp+var_20]
.text:000008CA                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000008CF                 add     eax, 20h ; ' '
.text:000008D2                 push    eax
.text:000008D3                 mov     ecx, [ebp+arg_0]
.text:000008D6                 mov     edx, [ecx]
.text:000008D8                 mov     eax, [ebp+arg_0]
.text:000008DB                 push    eax
.text:000008DC                 mov     ecx, [edx+0Ch]
.text:000008DF                 call    ecx
.text:000008E1                 cmp     esi, esp
.text:000008E3                 call    __RTC_CheckEsp
.text:000008E8                 mov     [ebp+var_48], eax
.text:000008EB                 cmp     [ebp+var_48], 0
.text:000008EF                 jz      short loc_90E
.text:000008F1                 mov     edx, [ebp+var_48]
.text:000008F4                 mov     [ebp+var_5C], edx
.text:000008F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008FE                 lea     ecx, [ebp+var_20]
.text:00000901                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000906                 mov     eax, [ebp+var_5C]
.text:00000909                 jmp     loc_AB5
.text:0000090E ; ---------------------------------------------------------------------------
.text:0000090E
.text:0000090E loc_90E:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+17Fj
.text:0000090E                 cmp     [ebp+var_40], 0
.text:00000912                 jnz     short loc_932
.text:00000914                 mov     [ebp+var_60], 1
.text:0000091B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000922                 lea     ecx, [ebp+var_20]
.text:00000925                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000092A                 mov     eax, [ebp+var_60]
.text:0000092D                 jmp     loc_AB5
.text:00000932 ; ---------------------------------------------------------------------------
.text:00000932
.text:00000932 loc_932:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+1A2j
.text:00000932                 mov     [ebp+var_4C], 0
.text:00000939
.text:00000939 loc_939:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *):loc_A62j
.text:00000939                 lea     ecx, [ebp+var_20]
.text:0000093C                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000941                 mov     ecx, [ebp+var_4C]
.text:00000944                 lea     edx, [eax+ecx+1]
.text:00000948                 mov     [ebp+Src], edx
.text:0000094B                 lea     ecx, [ebp+var_20]
.text:0000094E                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000953                 add     eax, [ebp+var_40]
.text:00000956                 mov     [ebp+var_54], eax
.text:00000959                 jmp     short loc_964
.text:0000095B ; ---------------------------------------------------------------------------
.text:0000095B
.text:0000095B loc_95B:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *):loc_9BEj
.text:0000095B                 mov     eax, [ebp+Src]
.text:0000095E                 add     eax, 4
.text:00000961                 mov     [ebp+Src], eax
.text:00000964
.text:00000964 loc_964:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+1E9j
.text:00000964                 mov     ecx, [ebp+Src]
.text:00000967                 cmp     ecx, [ebp+var_54]
.text:0000096A                 ja      short loc_9C0
.text:0000096C                 mov     edx, [ebp+Src]
.text:0000096F                 movzx   eax, byte ptr [edx]
.text:00000972                 cmp     eax, 37h ; '7'
.text:00000975                 jnz     short loc_979
.text:00000977                 jmp     short loc_9C0
.text:00000979 ; ---------------------------------------------------------------------------
.text:00000979
.text:00000979 loc_979:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+205j
.text:00000979                 mov     ecx, [ebp+Src]
.text:0000097C                 movzx   edx, byte ptr [ecx+1]
.text:00000980                 cmp     edx, 37h ; '7'
.text:00000983                 jnz     short loc_990
.text:00000985                 mov     eax, [ebp+Src]
.text:00000988                 add     eax, 1
.text:0000098B                 mov     [ebp+Src], eax
.text:0000098E                 jmp     short loc_9C0
.text:00000990 ; ---------------------------------------------------------------------------
.text:00000990
.text:00000990 loc_990:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+213j
.text:00000990                 mov     ecx, [ebp+Src]
.text:00000993                 movzx   edx, byte ptr [ecx+2]
.text:00000997                 cmp     edx, 37h ; '7'
.text:0000099A                 jnz     short loc_9A7
.text:0000099C                 mov     eax, [ebp+Src]
.text:0000099F                 add     eax, 2
.text:000009A2                 mov     [ebp+Src], eax
.text:000009A5                 jmp     short loc_9C0
.text:000009A7 ; ---------------------------------------------------------------------------
.text:000009A7
.text:000009A7 loc_9A7:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+22Aj
.text:000009A7                 mov     ecx, [ebp+Src]
.text:000009AA                 movzx   edx, byte ptr [ecx+3]
.text:000009AE                 cmp     edx, 37h ; '7'
.text:000009B1                 jnz     short loc_9BE
.text:000009B3                 mov     eax, [ebp+Src]
.text:000009B6                 add     eax, 3
.text:000009B9                 mov     [ebp+Src], eax
.text:000009BC                 jmp     short loc_9C0
.text:000009BE ; ---------------------------------------------------------------------------
.text:000009BE
.text:000009BE loc_9BE:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+241j
.text:000009BE                 jmp     short loc_95B
.text:000009C0 ; ---------------------------------------------------------------------------
.text:000009C0
.text:000009C0 loc_9C0:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+1FAj
.text:000009C0                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+207j ...
.text:000009C0                 mov     ecx, [ebp+Src]
.text:000009C3                 cmp     ecx, [ebp+var_54]
.text:000009C6                 jbe     short loc_9CD
.text:000009C8                 jmp     loc_A67
.text:000009CD ; ---------------------------------------------------------------------------
.text:000009CD
.text:000009CD loc_9CD:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+256j
.text:000009CD                 lea     ecx, [ebp+var_20]
.text:000009D0                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000009D5                 mov     edx, [ebp+Src]
.text:000009D8                 sub     edx, eax
.text:000009DA                 mov     [ebp+var_4C], edx
.text:000009DD                 mov     eax, [ebp+Src]
.text:000009E0                 push    eax
.text:000009E1                 call    ?TestSignature@N7z@NArchive@@YG_NPBE@Z ; NArchive::N7z::TestSignature(uchar const *)
.text:000009E6                 movzx   ecx, al
.text:000009E9                 test    ecx, ecx
.text:000009EB                 jz      short loc_A62
.text:000009ED                 push    20h ; ' '       ; Size
.text:000009EF                 mov     edx, [ebp+Src]
.text:000009F2                 push    edx             ; Src
.text:000009F3                 mov     eax, [ebp+var_10]
.text:000009F6                 add     eax, 50h ; 'P'
.text:000009F9                 push    eax             ; Dst
.text:000009FA                 call    _memcpy
.text:000009FF                 add     esp, 0Ch
.text:00000A02                 mov     ecx, [ebp+var_4C]
.text:00000A05                 xor     edx, edx
.text:00000A07                 add     ecx, [ebp+var_2C]
.text:00000A0A                 adc     edx, [ebp+var_28]
.text:00000A0D                 mov     eax, [ebp+var_10]
.text:00000A10                 add     ecx, [eax+40h]
.text:00000A13                 adc     edx, [eax+44h]
.text:00000A16                 mov     eax, [ebp+var_10]
.text:00000A19                 mov     [eax+40h], ecx
.text:00000A1C                 mov     [eax+44h], edx
.text:00000A1F                 mov     esi, esp
.text:00000A21                 push    0
.text:00000A23                 push    0
.text:00000A25                 mov     ecx, [ebp+var_10]
.text:00000A28                 mov     edx, [ecx+40h]
.text:00000A2B                 add     edx, 20h ; ' '
.text:00000A2E                 mov     eax, [ecx+44h]
.text:00000A31                 adc     eax, 0
.text:00000A34                 push    eax
.text:00000A35                 push    edx
.text:00000A36                 mov     ecx, [ebp+arg_0]
.text:00000A39                 mov     edx, [ecx]
.text:00000A3B                 mov     eax, [ebp+arg_0]
.text:00000A3E                 push    eax
.text:00000A3F                 mov     ecx, [edx+10h]
.text:00000A42                 call    ecx
.text:00000A44                 cmp     esi, esp
.text:00000A46                 call    __RTC_CheckEsp
.text:00000A4B                 mov     [ebp+var_64], eax
.text:00000A4E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A55                 lea     ecx, [ebp+var_20]
.text:00000A58                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000A5D                 mov     eax, [ebp+var_64]
.text:00000A60                 jmp     short loc_AB5
.text:00000A62 ; ---------------------------------------------------------------------------
.text:00000A62
.text:00000A62 loc_A62:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+27Bj
.text:00000A62                 jmp     loc_939
.text:00000A67 ; ---------------------------------------------------------------------------
.text:00000A67
.text:00000A67 loc_A67:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+258j
.text:00000A67                 mov     edx, [ebp+var_40]
.text:00000A6A                 xor     eax, eax
.text:00000A6C                 add     edx, [ebp+var_2C]
.text:00000A6F                 adc     eax, [ebp+var_28]
.text:00000A72                 mov     [ebp+var_2C], edx
.text:00000A75                 mov     [ebp+var_28], eax
.text:00000A78                 mov     esi, esp
.text:00000A7A                 push    20h ; ' '       ; Size
.text:00000A7C                 lea     ecx, [ebp+var_20]
.text:00000A7F                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000A84                 add     eax, [ebp+var_40]
.text:00000A87                 push    eax             ; Src
.text:00000A88                 lea     ecx, [ebp+var_20]
.text:00000A8B                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000A90                 push    eax             ; Dst
.text:00000A91                 call    dword ptr ds:__imp__memmove
.text:00000A97                 add     esp, 0Ch
.text:00000A9A                 cmp     esi, esp
.text:00000A9C                 call    __RTC_CheckEsp
.text:00000AA1                 jmp     loc_84E
.text:00000AA6 ; ---------------------------------------------------------------------------
.text:00000AA6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AAD                 lea     ecx, [ebp+var_20]
.text:00000AB0                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000AB5
.text:00000AB5 loc_AB5:                                ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+59j
.text:00000AB5                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+73j ...
.text:00000AB5                 push    edx
.text:00000AB6                 mov     ecx, ebp
.text:00000AB8                 push    eax
.text:00000AB9                 lea     edx, $LN30
.text:00000ABF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AC4                 pop     eax
.text:00000AC5                 pop     edx
.text:00000AC6                 mov     ecx, [ebp+var_C]
.text:00000AC9                 mov     large fs:0, ecx
.text:00000AD0                 pop     ecx
.text:00000AD1                 pop     edi
.text:00000AD2                 pop     esi
.text:00000AD3                 add     esp, 70h
.text:00000AD6                 cmp     ebp, esp
.text:00000AD8                 call    __RTC_CheckEsp
.text:00000ADD                 mov     esp, ebp
.text:00000ADF                 pop     ebp
.text:00000AE0                 retn    8
.text:00000AE0 ?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z endp
.text:00000AE0
.text:00000AE0 ; ---------------------------------------------------------------------------
.text:00000AE3                 align 4
.text:00000AE4 $LN30           dd 2                    ; DATA XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+349o
.text:00000AE8                 dd offset $LN29
.text:00000AEC $LN29           dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00000AE8o
.text:00000AF4                 dd offset $LN26         ; "buf"
.text:00000AF8                 dd 0FFFFFFC0h, 4
.text:00000B00                 dd offset $LN27         ; "processed"
.text:00000B04 $LN27           db 'processed',0        ; DATA XREF: .text:00000B00o
.text:00000B0E $LN26           db 'buf',0              ; DATA XREF: .text:00000AF4o
.text:00000B12                 align 10h
.text:00000B20
.text:00000B20 ; =============== S U B R O U T I N E =======================================
.text:00000B20
.text:00000B20 ; Attributes: bp-based frame
.text:00000B20
.text:00000B20 ; bool __stdcall NArchive::N7z::TestSignature(unsigned char const *)
.text:00000B20 ?TestSignature@N7z@NArchive@@YG_NPBE@Z proc near
.text:00000B20                                         ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+271p
.text:00000B20
.text:00000B20 arg_0           = dword ptr  8
.text:00000B20
.text:00000B20                 push    ebp
.text:00000B21                 mov     ebp, esp
.text:00000B23                 mov     eax, [ebp+arg_0]
.text:00000B26                 movzx   ecx, byte ptr [eax]
.text:00000B29                 cmp     ecx, 37h ; '7'
.text:00000B2C                 jnz     short loc_B70
.text:00000B2E                 mov     edx, [ebp+arg_0]
.text:00000B31                 movzx   eax, byte ptr [edx+1]
.text:00000B35                 cmp     eax, 7Ah ; 'z'
.text:00000B38                 jnz     short loc_B70
.text:00000B3A                 mov     ecx, [ebp+arg_0]
.text:00000B3D                 movzx   edx, byte ptr [ecx+2]
.text:00000B41                 cmp     edx, 0BCh ; '+'
.text:00000B47                 jnz     short loc_B70
.text:00000B49                 mov     eax, [ebp+arg_0]
.text:00000B4C                 movzx   ecx, byte ptr [eax+3]
.text:00000B50                 cmp     ecx, 0AFh ; '»'
.text:00000B56                 jnz     short loc_B70
.text:00000B58                 mov     edx, [ebp+arg_0]
.text:00000B5B                 movzx   eax, byte ptr [edx+4]
.text:00000B5F                 cmp     eax, 27h ; '''
.text:00000B62                 jnz     short loc_B70
.text:00000B64                 mov     ecx, [ebp+arg_0]
.text:00000B67                 movzx   edx, byte ptr [ecx+5]
.text:00000B6B                 cmp     edx, 1Ch
.text:00000B6E                 jz      short loc_B74
.text:00000B70
.text:00000B70 loc_B70:                                ; CODE XREF: NArchive::N7z::TestSignature(uchar const *)+Cj
.text:00000B70                                         ; NArchive::N7z::TestSignature(uchar const *)+18j ...
.text:00000B70                 xor     al, al
.text:00000B72                 jmp     short loc_B91
.text:00000B74 ; ---------------------------------------------------------------------------
.text:00000B74
.text:00000B74 loc_B74:                                ; CODE XREF: NArchive::N7z::TestSignature(uchar const *)+4Ej
.text:00000B74                 mov     ecx, [ebp+arg_0]
.text:00000B77                 add     ecx, 0Ch
.text:00000B7A                 mov     edx, 14h
.text:00000B7F                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000B84                 mov     ecx, [ebp+arg_0]
.text:00000B87                 xor     edx, edx
.text:00000B89                 cmp     eax, [ecx+8]
.text:00000B8C                 setz    dl
.text:00000B8F                 mov     al, dl
.text:00000B91
.text:00000B91 loc_B91:                                ; CODE XREF: NArchive::N7z::TestSignature(uchar const *)+52j
.text:00000B91                 cmp     ebp, esp
.text:00000B93                 call    __RTC_CheckEsp
.text:00000B98                 pop     ebp
.text:00000B99                 retn    4
.text:00000B99 ?TestSignature@N7z@NArchive@@YG_NPBE@Z endp
.text:00000B99
.text:00000B99 ; ---------------------------------------------------------------------------
.text:00000B9C                 align 10h
.text:00000BA0
.text:00000BA0 ; =============== S U B R O U T I N E =======================================
.text:00000BA0
.text:00000BA0 ; Attributes: bp-based frame
.text:00000BA0
.text:00000BA0 ; bool __stdcall NArchive::N7z::TestSignature2(unsigned char const *)
.text:00000BA0 ?TestSignature2@N7z@NArchive@@YG_NPBE@Z proc near
.text:00000BA0                                         ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+65p
.text:00000BA0
.text:00000BA0 var_8           = dword ptr -8
.text:00000BA0 var_4           = dword ptr -4
.text:00000BA0 arg_0           = dword ptr  8
.text:00000BA0
.text:00000BA0                 push    ebp
.text:00000BA1                 mov     ebp, esp
.text:00000BA3                 sub     esp, 8
.text:00000BA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BB4                 mov     eax, [ebp+arg_0]
.text:00000BB7                 movzx   ecx, byte ptr [eax]
.text:00000BBA                 cmp     ecx, 37h ; '7'
.text:00000BBD                 jnz     short loc_C01
.text:00000BBF                 mov     edx, [ebp+arg_0]
.text:00000BC2                 movzx   eax, byte ptr [edx+1]
.text:00000BC6                 cmp     eax, 7Ah ; 'z'
.text:00000BC9                 jnz     short loc_C01
.text:00000BCB                 mov     ecx, [ebp+arg_0]
.text:00000BCE                 movzx   edx, byte ptr [ecx+2]
.text:00000BD2                 cmp     edx, 0BCh ; '+'
.text:00000BD8                 jnz     short loc_C01
.text:00000BDA                 mov     eax, [ebp+arg_0]
.text:00000BDD                 movzx   ecx, byte ptr [eax+3]
.text:00000BE1                 cmp     ecx, 0AFh ; '»'
.text:00000BE7                 jnz     short loc_C01
.text:00000BE9                 mov     edx, [ebp+arg_0]
.text:00000BEC                 movzx   eax, byte ptr [edx+4]
.text:00000BF0                 cmp     eax, 27h ; '''
.text:00000BF3                 jnz     short loc_C01
.text:00000BF5                 mov     ecx, [ebp+arg_0]
.text:00000BF8                 movzx   edx, byte ptr [ecx+5]
.text:00000BFC                 cmp     edx, 1Ch
.text:00000BFF                 jz      short loc_C05
.text:00000C01
.text:00000C01 loc_C01:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+1Dj
.text:00000C01                                         ; NArchive::N7z::TestSignature2(uchar const *)+29j ...
.text:00000C01                 xor     al, al
.text:00000C03                 jmp     short loc_C75
.text:00000C05 ; ---------------------------------------------------------------------------
.text:00000C05
.text:00000C05 loc_C05:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+5Fj
.text:00000C05                 mov     ecx, [ebp+arg_0]
.text:00000C08                 add     ecx, 0Ch
.text:00000C0B                 mov     edx, 14h
.text:00000C10                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000C15                 mov     ecx, [ebp+arg_0]
.text:00000C18                 cmp     eax, [ecx+8]
.text:00000C1B                 jnz     short loc_C21
.text:00000C1D                 mov     al, 1
.text:00000C1F                 jmp     short loc_C75
.text:00000C21 ; ---------------------------------------------------------------------------
.text:00000C21
.text:00000C21 loc_C21:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+7Bj
.text:00000C21                 mov     [ebp+var_4], 8
.text:00000C28                 jmp     short loc_C33
.text:00000C2A ; ---------------------------------------------------------------------------
.text:00000C2A
.text:00000C2A loc_C2A:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *):loc_C4Aj
.text:00000C2A                 mov     edx, [ebp+var_4]
.text:00000C2D                 add     edx, 1
.text:00000C30                 mov     [ebp+var_4], edx
.text:00000C33
.text:00000C33 loc_C33:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+88j
.text:00000C33                 cmp     [ebp+var_4], 20h ; ' '
.text:00000C37                 jnb     short loc_C4C
.text:00000C39                 mov     eax, [ebp+arg_0]
.text:00000C3C                 add     eax, [ebp+var_4]
.text:00000C3F                 movzx   ecx, byte ptr [eax]
.text:00000C42                 test    ecx, ecx
.text:00000C44                 jz      short loc_C4A
.text:00000C46                 xor     al, al
.text:00000C48                 jmp     short loc_C75
.text:00000C4A ; ---------------------------------------------------------------------------
.text:00000C4A
.text:00000C4A loc_C4A:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+A4j
.text:00000C4A                 jmp     short loc_C2A
.text:00000C4C ; ---------------------------------------------------------------------------
.text:00000C4C
.text:00000C4C loc_C4C:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+97j
.text:00000C4C                 mov     edx, [ebp+arg_0]
.text:00000C4F                 movzx   eax, byte ptr [edx+6]
.text:00000C53                 test    eax, eax
.text:00000C55                 jnz     short loc_C6B
.text:00000C57                 mov     ecx, [ebp+arg_0]
.text:00000C5A                 movzx   edx, byte ptr [ecx+7]
.text:00000C5E                 test    edx, edx
.text:00000C60                 jnz     short loc_C6B
.text:00000C62                 mov     [ebp+var_8], 0
.text:00000C69                 jmp     short loc_C72
.text:00000C6B ; ---------------------------------------------------------------------------
.text:00000C6B
.text:00000C6B loc_C6B:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+B5j
.text:00000C6B                                         ; NArchive::N7z::TestSignature2(uchar const *)+C0j
.text:00000C6B                 mov     [ebp+var_8], 1
.text:00000C72
.text:00000C72 loc_C72:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+C9j
.text:00000C72                 mov     al, byte ptr [ebp+var_8]
.text:00000C75
.text:00000C75 loc_C75:                                ; CODE XREF: NArchive::N7z::TestSignature2(uchar const *)+63j
.text:00000C75                                         ; NArchive::N7z::TestSignature2(uchar const *)+7Fj ...
.text:00000C75                 add     esp, 8
.text:00000C78                 cmp     ebp, esp
.text:00000C7A                 call    __RTC_CheckEsp
.text:00000C7F                 mov     esp, ebp
.text:00000C81                 pop     ebp
.text:00000C82                 retn    4
.text:00000C82 ?TestSignature2@N7z@NArchive@@YG_NPBE@Z endp
.text:00000C82
.text:00000C82 ; ---------------------------------------------------------------------------
.text:00000C85                 align 10h
.text:00000C90
.text:00000C90 ; =============== S U B R O U T I N E =======================================
.text:00000C90
.text:00000C90 ; Attributes: bp-based frame
.text:00000C90
.text:00000C90 ; __int32 __thiscall NArchive::N7z::CInArchive::Open(NArchive::N7z::CInArchive *this, struct IInStream *, const unsigned __int64 *)
.text:00000C90                 public ?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z
.text:00000C90 ?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z proc near
.text:00000C90
.text:00000C90 var_14          = dword ptr -14h
.text:00000C90 var_10          = dword ptr -10h
.text:00000C90 var_C           = dword ptr -0Ch
.text:00000C90 var_8           = dword ptr -8
.text:00000C90 var_4           = dword ptr -4
.text:00000C90 arg_0           = dword ptr  8
.text:00000C90 arg_4           = dword ptr  0Ch
.text:00000C90
.text:00000C90                 push    ebp
.text:00000C91                 mov     ebp, esp
.text:00000C93                 sub     esp, 14h
.text:00000C96                 push    esi
.text:00000C97                 mov     eax, 0CCCCCCCCh
.text:00000C9C                 mov     [ebp+var_14], eax
.text:00000C9F                 mov     [ebp+var_10], eax
.text:00000CA2                 mov     [ebp+var_C], eax
.text:00000CA5                 mov     [ebp+var_8], eax
.text:00000CA8                 mov     [ebp+var_4], eax
.text:00000CAB                 mov     [ebp+var_4], ecx
.text:00000CAE                 mov     eax, [ebp+var_4]
.text:00000CB1                 mov     dword ptr [eax+70h], 0
.text:00000CB8                 mov     dword ptr [eax+74h], 0
.text:00000CBF                 mov     ecx, [ebp+var_4] ; this
.text:00000CC2                 call    ?Close@CInArchive@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInArchive::Close(void)
.text:00000CC7                 mov     ecx, [ebp+var_4]
.text:00000CCA                 add     ecx, 40h ; '@'
.text:00000CCD                 mov     esi, esp
.text:00000CCF                 push    ecx
.text:00000CD0                 push    1
.text:00000CD2                 push    0
.text:00000CD4                 push    0
.text:00000CD6                 mov     edx, [ebp+arg_0]
.text:00000CD9                 mov     eax, [edx]
.text:00000CDB                 mov     ecx, [ebp+arg_0]
.text:00000CDE                 push    ecx
.text:00000CDF                 mov     edx, [eax+10h]
.text:00000CE2                 call    edx
.text:00000CE4                 cmp     esi, esp
.text:00000CE6                 call    __RTC_CheckEsp
.text:00000CEB                 mov     [ebp+var_8], eax
.text:00000CEE                 cmp     [ebp+var_8], 0
.text:00000CF2                 jz      short loc_CFC
.text:00000CF4                 mov     eax, [ebp+var_8]
.text:00000CF7                 jmp     loc_D8E
.text:00000CFC ; ---------------------------------------------------------------------------
.text:00000CFC
.text:00000CFC loc_CFC:                                ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+62j
.text:00000CFC                 mov     eax, [ebp+var_4]
.text:00000CFF                 add     eax, 48h ; 'H'
.text:00000D02                 mov     esi, esp
.text:00000D04                 push    eax
.text:00000D05                 push    2
.text:00000D07                 push    0
.text:00000D09                 push    0
.text:00000D0B                 mov     ecx, [ebp+arg_0]
.text:00000D0E                 mov     edx, [ecx]
.text:00000D10                 mov     eax, [ebp+arg_0]
.text:00000D13                 push    eax
.text:00000D14                 mov     ecx, [edx+10h]
.text:00000D17                 call    ecx
.text:00000D19                 cmp     esi, esp
.text:00000D1B                 call    __RTC_CheckEsp
.text:00000D20                 mov     [ebp+var_C], eax
.text:00000D23                 cmp     [ebp+var_C], 0
.text:00000D27                 jz      short loc_D2E
.text:00000D29                 mov     eax, [ebp+var_C]
.text:00000D2C                 jmp     short loc_D8E
.text:00000D2E ; ---------------------------------------------------------------------------
.text:00000D2E
.text:00000D2E loc_D2E:                                ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+97j
.text:00000D2E                 mov     esi, esp
.text:00000D30                 push    0
.text:00000D32                 push    0
.text:00000D34                 mov     edx, [ebp+var_4]
.text:00000D37                 mov     eax, [edx+44h]
.text:00000D3A                 push    eax
.text:00000D3B                 mov     ecx, [edx+40h]
.text:00000D3E                 push    ecx
.text:00000D3F                 mov     edx, [ebp+arg_0]
.text:00000D42                 mov     eax, [edx]
.text:00000D44                 mov     ecx, [ebp+arg_0]
.text:00000D47                 push    ecx
.text:00000D48                 mov     edx, [eax+10h]
.text:00000D4B                 call    edx
.text:00000D4D                 cmp     esi, esp
.text:00000D4F                 call    __RTC_CheckEsp
.text:00000D54                 mov     [ebp+var_10], eax
.text:00000D57                 cmp     [ebp+var_10], 0
.text:00000D5B                 jz      short loc_D62
.text:00000D5D                 mov     eax, [ebp+var_10]
.text:00000D60                 jmp     short loc_D8E
.text:00000D62 ; ---------------------------------------------------------------------------
.text:00000D62
.text:00000D62 loc_D62:                                ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+CBj
.text:00000D62                 mov     eax, [ebp+arg_4]
.text:00000D65                 push    eax             ; unsigned __int64 *
.text:00000D66                 mov     ecx, [ebp+arg_0]
.text:00000D69                 push    ecx             ; struct IInStream *
.text:00000D6A                 mov     ecx, [ebp+var_4] ; this
.text:00000D6D                 call    ?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)
.text:00000D72                 mov     [ebp+var_14], eax
.text:00000D75                 cmp     [ebp+var_14], 0
.text:00000D79                 jz      short loc_D80
.text:00000D7B                 mov     eax, [ebp+var_14]
.text:00000D7E                 jmp     short loc_D8E
.text:00000D80 ; ---------------------------------------------------------------------------
.text:00000D80
.text:00000D80 loc_D80:                                ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+E9j
.text:00000D80                 mov     edx, [ebp+arg_0]
.text:00000D83                 push    edx
.text:00000D84                 mov     ecx, [ebp+var_4]
.text:00000D87                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000D8C                 xor     eax, eax
.text:00000D8E
.text:00000D8E loc_D8E:                                ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+67j
.text:00000D8E                                         ; NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+9Cj ...
.text:00000D8E                 pop     esi
.text:00000D8F                 add     esp, 14h
.text:00000D92                 cmp     ebp, esp
.text:00000D94                 call    __RTC_CheckEsp
.text:00000D99                 mov     esp, ebp
.text:00000D9B                 pop     ebp
.text:00000D9C                 retn    8
.text:00000D9C ?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z endp
.text:00000D9C
.text:00000D9C ; ---------------------------------------------------------------------------
.text:00000D9F                 align 10h
.text:00000DA0
.text:00000DA0 ; =============== S U B R O U T I N E =======================================
.text:00000DA0
.text:00000DA0 ; Attributes: bp-based frame
.text:00000DA0
.text:00000DA0 ; void __thiscall NArchive::N7z::CInArchive::Close(NArchive::N7z::CInArchive *__hidden this)
.text:00000DA0                 public ?Close@CInArchive@N7z@NArchive@@QAEXXZ
.text:00000DA0 ?Close@CInArchive@N7z@NArchive@@QAEXXZ proc near
.text:00000DA0                                         ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+32p
.text:00000DA0
.text:00000DA0 var_4           = dword ptr -4
.text:00000DA0
.text:00000DA0                 push    ebp
.text:00000DA1                 mov     ebp, esp
.text:00000DA3                 push    ecx
.text:00000DA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DAB                 mov     [ebp+var_4], ecx
.text:00000DAE                 mov     eax, [ebp+var_4]
.text:00000DB1                 mov     dword ptr [eax+4], 0
.text:00000DB8                 mov     ecx, [ebp+var_4]
.text:00000DBB                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:00000DC0                 mov     ecx, [ebp+var_4]
.text:00000DC3                 mov     byte ptr [ecx+3Ch], 0
.text:00000DC7                 add     esp, 4
.text:00000DCA                 cmp     ebp, esp
.text:00000DCC                 call    __RTC_CheckEsp
.text:00000DD1                 mov     esp, ebp
.text:00000DD3                 pop     ebp
.text:00000DD4                 retn
.text:00000DD4 ?Close@CInArchive@N7z@NArchive@@QAEXXZ endp
.text:00000DD4
.text:00000DD4 ; ---------------------------------------------------------------------------
.text:00000DD5                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; void __thiscall NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchive *this, struct NArchive::N7z::CInArchiveInfo *)
.text:00000DE0                 public ?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z
.text:00000DE0 ?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z proc near
.text:00000DE0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+67p
.text:00000DE0
.text:00000DE0 var_C           = dword ptr -0Ch
.text:00000DE0 var_8           = dword ptr -8
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 sub     esp, 0Ch
.text:00000DE6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000DED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DFB                 mov     [ebp+var_4], ecx
.text:00000DFE
.text:00000DFE loc_DFE:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)+3Ej
.text:00000DFE                 mov     ecx, [ebp+var_4] ; this
.text:00000E01                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00000E06                 mov     [ebp+var_C], eax
.text:00000E09                 mov     [ebp+var_8], edx
.text:00000E0C                 mov     eax, [ebp+var_C]
.text:00000E0F                 or      eax, [ebp+var_8]
.text:00000E12                 jnz     short loc_E16
.text:00000E14                 jmp     short loc_E20
.text:00000E16 ; ---------------------------------------------------------------------------
.text:00000E16
.text:00000E16 loc_E16:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)+32j
.text:00000E16                 mov     ecx, [ebp+var_4] ; this
.text:00000E19                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:00000E1E                 jmp     short loc_DFE
.text:00000E20 ; ---------------------------------------------------------------------------
.text:00000E20
.text:00000E20 loc_E20:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)+34j
.text:00000E20                 add     esp, 0Ch
.text:00000E23                 cmp     ebp, esp
.text:00000E25                 call    __RTC_CheckEsp
.text:00000E2A                 mov     esp, ebp
.text:00000E2C                 pop     ebp
.text:00000E2D                 retn    4
.text:00000E2D ?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z endp
.text:00000E2D
.text:00000E30
.text:00000E30 ; =============== S U B R O U T I N E =======================================
.text:00000E30
.text:00000E30 ; Attributes: bp-based frame
.text:00000E30
.text:00000E30 ; void __thiscall NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CInByte2 *this, struct NArchive::N7z::CFolder *)
.text:00000E30                 public ?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z
.text:00000E30 ?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z proc near
.text:00000E30                                         ; CODE XREF: NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+6Ep
.text:00000E30
.text:00000E30 var_3C          = dword ptr -3Ch
.text:00000E30 var_38          = dword ptr -38h
.text:00000E30 var_34          = dword ptr -34h
.text:00000E30 var_30          = dword ptr -30h
.text:00000E30 var_2C          = dword ptr -2Ch
.text:00000E30 var_28          = dword ptr -28h
.text:00000E30 var_24          = dword ptr -24h
.text:00000E30 var_20          = dword ptr -20h
.text:00000E30 var_1C          = qword ptr -1Ch
.text:00000E30 var_14          = dword ptr -14h
.text:00000E30 var_10          = dword ptr -10h
.text:00000E30 var_C           = dword ptr -0Ch
.text:00000E30 var_8           = dword ptr -8
.text:00000E30 var_4           = dword ptr -4
.text:00000E30 arg_0           = dword ptr  8
.text:00000E30
.text:00000E30                 push    ebp
.text:00000E31                 mov     ebp, esp
.text:00000E33                 sub     esp, 3Ch
.text:00000E36                 push    esi
.text:00000E37                 push    edi
.text:00000E38                 push    ecx
.text:00000E39                 lea     edi, [ebp+var_3C]
.text:00000E3C                 mov     ecx, 0Fh
.text:00000E41                 mov     eax, 0CCCCCCCCh
.text:00000E46                 rep stosd
.text:00000E48                 pop     ecx
.text:00000E49                 mov     [ebp+var_4], ecx
.text:00000E4C                 mov     ecx, [ebp+var_4] ; this
.text:00000E4F                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000E54                 mov     [ebp+var_8], eax
.text:00000E57                 cmp     [ebp+var_8], 0
.text:00000E5B                 jnz     short loc_E62
.text:00000E5D                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00000E62 ; ---------------------------------------------------------------------------
.text:00000E62
.text:00000E62 loc_E62:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+2Bj
.text:00000E62                 mov     eax, [ebp+var_8]
.text:00000E65                 push    eax
.text:00000E66                 mov     ecx, [ebp+arg_0]
.text:00000E69                 call    ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)
.text:00000E6E                 mov     [ebp+var_C], 0
.text:00000E75                 mov     [ebp+var_10], 0
.text:00000E7C                 jmp     short loc_E87
.text:00000E7E ; ---------------------------------------------------------------------------
.text:00000E7E
.text:00000E7E loc_E7E:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1AAj
.text:00000E7E                 mov     ecx, [ebp+var_10]
.text:00000E81                 add     ecx, 1
.text:00000E84                 mov     [ebp+var_10], ecx
.text:00000E87
.text:00000E87 loc_E87:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+4Cj
.text:00000E87                 mov     edx, [ebp+var_10]
.text:00000E8A                 cmp     edx, [ebp+var_8]
.text:00000E8D                 jnb     loc_FDF
.text:00000E93                 mov     ecx, [ebp+arg_0]
.text:00000E96                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *(void)
.text:00000E9B                 mov     ecx, [ebp+var_10]
.text:00000E9E                 imul    ecx, 18h
.text:00000EA1                 add     eax, ecx
.text:00000EA3                 mov     [ebp+var_14], eax
.text:00000EA6                 mov     ecx, [ebp+var_4] ; this
.text:00000EA9                 call    ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ; NArchive::N7z::CInByte2::ReadByte(void)
.text:00000EAE                 mov     byte ptr [ebp+var_1C+7], al
.text:00000EB1                 movzx   edx, byte ptr [ebp+var_1C+7]
.text:00000EB5                 and     edx, 0C0h
.text:00000EBB                 jz      short loc_EC2
.text:00000EBD                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00000EC2 ; ---------------------------------------------------------------------------
.text:00000EC2
.text:00000EC2 loc_EC2:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+8Bj
.text:00000EC2                 movzx   eax, byte ptr [ebp+var_1C+7]
.text:00000EC6                 and     eax, 0Fh
.text:00000EC9                 mov     dword ptr [ebp+var_1C], eax
.text:00000ECC                 cmp     dword ptr [ebp+var_1C], 8
.text:00000ED0                 ja      short loc_EDF
.text:00000ED2                 mov     ecx, [ebp+var_4] ; this
.text:00000ED5                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:00000EDA                 cmp     dword ptr [ebp+var_1C], eax
.text:00000EDD                 jbe     short loc_EE4
.text:00000EDF
.text:00000EDF loc_EDF:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+A0j
.text:00000EDF                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00000EE4 ; ---------------------------------------------------------------------------
.text:00000EE4
.text:00000EE4 loc_EE4:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+ADj
.text:00000EE4                 mov     ecx, [ebp+var_4] ; this
.text:00000EE7                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00000EEC                 mov     [ebp+var_20], eax
.text:00000EEF                 mov     [ebp+var_28], 0
.text:00000EF6                 mov     [ebp+var_24], 0
.text:00000EFD                 mov     [ebp+var_2C], 0
.text:00000F04                 jmp     short loc_F0F
.text:00000F06 ; ---------------------------------------------------------------------------
.text:00000F06
.text:00000F06 loc_F06:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+10Cj
.text:00000F06                 mov     ecx, [ebp+var_2C]
.text:00000F09                 add     ecx, 1
.text:00000F0C                 mov     [ebp+var_2C], ecx
.text:00000F0F
.text:00000F0F loc_F0F:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+D4j
.text:00000F0F                 mov     edx, [ebp+var_2C]
.text:00000F12                 cmp     edx, dword ptr [ebp+var_1C]
.text:00000F15                 jnb     short loc_F3E
.text:00000F17                 mov     eax, [ebp+var_28]
.text:00000F1A                 mov     edx, [ebp+var_24]
.text:00000F1D                 mov     cl, 8
.text:00000F1F                 call    __allshl
.text:00000F24                 mov     ecx, eax
.text:00000F26                 mov     esi, edx
.text:00000F28                 mov     edx, [ebp+var_20]
.text:00000F2B                 add     edx, [ebp+var_2C]
.text:00000F2E                 movzx   eax, byte ptr [edx]
.text:00000F31                 cdq
.text:00000F32                 or      ecx, eax
.text:00000F34                 or      esi, edx
.text:00000F36                 mov     [ebp+var_28], ecx
.text:00000F39                 mov     [ebp+var_24], esi
.text:00000F3C                 jmp     short loc_F06
.text:00000F3E ; ---------------------------------------------------------------------------
.text:00000F3E
.text:00000F3E loc_F3E:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+E5j
.text:00000F3E                 mov     eax, dword ptr [ebp+var_1C]
.text:00000F41                 xor     ecx, ecx
.text:00000F43                 push    ecx
.text:00000F44                 push    eax             ; unsigned __int64
.text:00000F45                 mov     ecx, [ebp+var_4] ; this
.text:00000F48                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00000F4D                 mov     edx, [ebp+var_14]
.text:00000F50                 mov     eax, [ebp+var_28]
.text:00000F53                 mov     [edx], eax
.text:00000F55                 mov     ecx, [ebp+var_24]
.text:00000F58                 mov     [edx+4], ecx
.text:00000F5B                 movzx   edx, byte ptr [ebp+var_1C+7]
.text:00000F5F                 and     edx, 10h
.text:00000F62                 jz      short loc_F7C
.text:00000F64                 mov     ecx, [ebp+var_4] ; this
.text:00000F67                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F6C                 mov     ecx, [ebp+var_14]
.text:00000F6F                 mov     [ecx+10h], eax
.text:00000F72                 mov     ecx, [ebp+var_4] ; this
.text:00000F75                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F7A                 jmp     short loc_F86
.text:00000F7C ; ---------------------------------------------------------------------------
.text:00000F7C
.text:00000F7C loc_F7C:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+132j
.text:00000F7C                 mov     edx, [ebp+var_14]
.text:00000F7F                 mov     dword ptr [edx+10h], 1
.text:00000F86
.text:00000F86 loc_F86:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+14Aj
.text:00000F86                 movzx   eax, byte ptr [ebp+var_1C+7]
.text:00000F8A                 and     eax, 20h
.text:00000F8D                 jz      short loc_FC3
.text:00000F8F                 mov     ecx, [ebp+var_4] ; this
.text:00000F92                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F97                 mov     [ebp+var_30], eax
.text:00000F9A                 mov     ecx, [ebp+var_30]
.text:00000F9D                 push    ecx
.text:00000F9E                 mov     ecx, [ebp+var_14]
.text:00000FA1                 add     ecx, 8
.text:00000FA4                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00000FA9                 mov     edx, [ebp+var_30]
.text:00000FAC                 push    edx             ; unsigned int
.text:00000FAD                 mov     ecx, [ebp+var_14]
.text:00000FB0                 add     ecx, 8
.text:00000FB3                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000FB8                 push    eax             ; Dst
.text:00000FB9                 mov     ecx, [ebp+var_4] ; this
.text:00000FBC                 call    ?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)
.text:00000FC1                 jmp     short loc_FCE
.text:00000FC3 ; ---------------------------------------------------------------------------
.text:00000FC3
.text:00000FC3 loc_FC3:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+15Dj
.text:00000FC3                 mov     ecx, [ebp+var_14]
.text:00000FC6                 add     ecx, 8
.text:00000FC9                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00000FCE
.text:00000FCE loc_FCE:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+191j
.text:00000FCE                 mov     eax, [ebp+var_14]
.text:00000FD1                 mov     ecx, [ebp+var_C]
.text:00000FD4                 add     ecx, [eax+10h]
.text:00000FD7                 mov     [ebp+var_C], ecx
.text:00000FDA                 jmp     loc_E7E
.text:00000FDF ; ---------------------------------------------------------------------------
.text:00000FDF
.text:00000FDF loc_FDF:                                ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+5Dj
.text:00000FDF                 mov     edx, [ebp+var_8]
.text:00000FE2                 sub     edx, 1
.text:00000FE5                 mov     [ebp+var_34], edx
.text:00000FE8                 mov     eax, [ebp+var_34]
.text:00000FEB                 push    eax
.text:00000FEC                 mov     ecx, [ebp+arg_0]
.text:00000FEF                 add     ecx, 8
.text:00000FF2                 call    ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize(uint)
.text:00000FF7                 mov     [ebp+var_10], 0
.text:00000FFE                 jmp     short loc_1009
.text:00001000 ; ---------------------------------------------------------------------------
.text:00001000
.text:00001000 loc_1000:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+210j
.text:00001000                 mov     ecx, [ebp+var_10]
.text:00001003                 add     ecx, 1
.text:00001006                 mov     [ebp+var_10], ecx
.text:00001009
.text:00001009 loc_1009:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1CEj
.text:00001009                 mov     edx, [ebp+var_10]
.text:0000100C                 cmp     edx, [ebp+var_34]
.text:0000100F                 jnb     short loc_1042
.text:00001011                 mov     ecx, [ebp+arg_0]
.text:00001014                 add     ecx, 8
.text:00001017                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *(void)
.text:0000101C                 mov     ecx, [ebp+var_10]
.text:0000101F                 lea     edx, [eax+ecx*8]
.text:00001022                 mov     [ebp+var_38], edx
.text:00001025                 mov     ecx, [ebp+var_4] ; this
.text:00001028                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:0000102D                 mov     ecx, [ebp+var_38]
.text:00001030                 mov     [ecx], eax
.text:00001032                 mov     ecx, [ebp+var_4] ; this
.text:00001035                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:0000103A                 mov     edx, [ebp+var_38]
.text:0000103D                 mov     [edx+4], eax
.text:00001040                 jmp     short loc_1000
.text:00001042 ; ---------------------------------------------------------------------------
.text:00001042
.text:00001042 loc_1042:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1DFj
.text:00001042                 mov     eax, [ebp+var_C]
.text:00001045                 cmp     eax, [ebp+var_34]
.text:00001048                 jnb     short loc_104F
.text:0000104A                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:0000104F ; ---------------------------------------------------------------------------
.text:0000104F
.text:0000104F loc_104F:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+218j
.text:0000104F                 mov     ecx, [ebp+var_C]
.text:00001052                 sub     ecx, [ebp+var_34]
.text:00001055                 mov     [ebp+var_3C], ecx
.text:00001058                 mov     edx, [ebp+var_3C]
.text:0000105B                 push    edx
.text:0000105C                 mov     ecx, [ebp+arg_0]
.text:0000105F                 add     ecx, 10h
.text:00001062                 call    ?SetSize@?$CObjArray2@I@@QAEXI@Z ; CObjArray2<uint>::SetSize(uint)
.text:00001067                 cmp     [ebp+var_3C], 1
.text:0000106B                 jnz     short loc_10BA
.text:0000106D                 mov     [ebp+var_10], 0
.text:00001074                 jmp     short loc_107F
.text:00001076 ; ---------------------------------------------------------------------------
.text:00001076
.text:00001076 loc_1076:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &):loc_10A9j
.text:00001076                 mov     eax, [ebp+var_10]
.text:00001079                 add     eax, 1
.text:0000107C                 mov     [ebp+var_10], eax
.text:0000107F
.text:0000107F loc_107F:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+244j
.text:0000107F                 mov     ecx, [ebp+var_10]
.text:00001082                 cmp     ecx, [ebp+var_C]
.text:00001085                 jnb     short loc_10AB
.text:00001087                 mov     edx, [ebp+var_10]
.text:0000108A                 push    edx             ; unsigned int
.text:0000108B                 mov     ecx, [ebp+arg_0] ; this
.text:0000108E                 call    ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream(uint)
.text:00001093                 test    eax, eax
.text:00001095                 jge     short loc_10A9
.text:00001097                 mov     ecx, [ebp+arg_0]
.text:0000109A                 add     ecx, 10h
.text:0000109D                 call    ??B?$CObjArray2@I@@QAEPAIXZ ; CObjArray2<uint>::operator uint *(void)
.text:000010A2                 mov     ecx, [ebp+var_10]
.text:000010A5                 mov     [eax], ecx
.text:000010A7                 jmp     short loc_10AB
.text:000010A9 ; ---------------------------------------------------------------------------
.text:000010A9
.text:000010A9 loc_10A9:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+265j
.text:000010A9                 jmp     short loc_1076
.text:000010AB ; ---------------------------------------------------------------------------
.text:000010AB
.text:000010AB loc_10AB:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+255j
.text:000010AB                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+277j
.text:000010AB                 mov     edx, [ebp+var_10]
.text:000010AE                 cmp     edx, [ebp+var_C]
.text:000010B1                 jnz     short loc_10B8
.text:000010B3                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000010B8 ; ---------------------------------------------------------------------------
.text:000010B8
.text:000010B8 loc_10B8:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+281j
.text:000010B8                 jmp     short loc_10F1
.text:000010BA ; ---------------------------------------------------------------------------
.text:000010BA
.text:000010BA loc_10BA:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+23Bj
.text:000010BA                 mov     [ebp+var_10], 0
.text:000010C1                 jmp     short loc_10CC
.text:000010C3 ; ---------------------------------------------------------------------------
.text:000010C3
.text:000010C3 loc_10C3:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+2BFj
.text:000010C3                 mov     eax, [ebp+var_10]
.text:000010C6                 add     eax, 1
.text:000010C9                 mov     [ebp+var_10], eax
.text:000010CC
.text:000010CC loc_10CC:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+291j
.text:000010CC                 mov     ecx, [ebp+var_10]
.text:000010CF                 cmp     ecx, [ebp+var_3C]
.text:000010D2                 jnb     short loc_10F1
.text:000010D4                 mov     ecx, [ebp+var_4] ; this
.text:000010D7                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:000010DC                 mov     esi, eax
.text:000010DE                 mov     ecx, [ebp+arg_0]
.text:000010E1                 add     ecx, 10h
.text:000010E4                 call    ??B?$CObjArray2@I@@QAEPAIXZ ; CObjArray2<uint>::operator uint *(void)
.text:000010E9                 mov     edx, [ebp+var_10]
.text:000010EC                 mov     [eax+edx*4], esi
.text:000010EF                 jmp     short loc_10C3
.text:000010F1 ; ---------------------------------------------------------------------------
.text:000010F1
.text:000010F1 loc_10F1:                               ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &):loc_10B8j
.text:000010F1                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+2A2j
.text:000010F1                 pop     edi
.text:000010F2                 pop     esi
.text:000010F3                 add     esp, 3Ch
.text:000010F6                 cmp     ebp, esp
.text:000010F8                 call    __RTC_CheckEsp
.text:000010FD                 mov     esp, ebp
.text:000010FF                 pop     ebp
.text:00001100                 retn    4
.text:00001100 ?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z endp
.text:00001100
.text:00001100 ; ---------------------------------------------------------------------------
.text:00001103                 align 10h
.text:00001110
.text:00001110 ; =============== S U B R O U T I N E =======================================
.text:00001110
.text:00001110 ; Attributes: bp-based frame
.text:00001110
.text:00001110 ; void __thiscall NArchive::N7z::CFolders::ParseFolderInfo(NArchive::N7z::CFolders *this, unsigned int, struct NArchive::N7z::CFolder *)
.text:00001110                 public ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z
.text:00001110 ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z proc near
.text:00001110
.text:00001110 var_20          = dword ptr -20h
.text:00001110 var_1C          = dword ptr -1Ch
.text:00001110 var_18          = dword ptr -18h
.text:00001110 var_14          = dword ptr -14h
.text:00001110 var_10          = dword ptr -10h
.text:00001110 var_C           = dword ptr -0Ch
.text:00001110 var_8           = dword ptr -8
.text:00001110 var_4           = dword ptr -4
.text:00001110 arg_0           = dword ptr  8
.text:00001110 arg_4           = dword ptr  0Ch
.text:00001110
.text:00001110                 push    ebp
.text:00001111                 mov     ebp, esp
.text:00001113                 sub     esp, 20h
.text:00001116                 mov     eax, 0CCCCCCCCh
.text:0000111B                 mov     [ebp+var_20], eax
.text:0000111E                 mov     [ebp+var_1C], eax
.text:00001121                 mov     [ebp+var_18], eax
.text:00001124                 mov     [ebp+var_14], eax
.text:00001127                 mov     [ebp+var_10], eax
.text:0000112A                 mov     [ebp+var_C], eax
.text:0000112D                 mov     [ebp+var_8], eax
.text:00001130                 mov     [ebp+var_4], eax
.text:00001133                 mov     [ebp+var_4], ecx
.text:00001136                 mov     ecx, [ebp+var_4]
.text:00001139                 add     ecx, 38h ; '8'
.text:0000113C                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001141                 mov     ecx, [ebp+arg_0]
.text:00001144                 mov     edx, [eax+ecx*4]
.text:00001147                 mov     [ebp+var_8], edx
.text:0000114A                 mov     ecx, [ebp+var_4]
.text:0000114D                 add     ecx, 38h ; '8'
.text:00001150                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001155                 mov     ecx, [ebp+arg_0]
.text:00001158                 mov     edx, [eax+ecx*4+4]
.text:0000115C                 sub     edx, [ebp+var_8]
.text:0000115F                 push    edx             ; unsigned int
.text:00001160                 mov     ecx, [ebp+var_4]
.text:00001163                 add     ecx, 3Ch ; '<'
.text:00001166                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000116B                 add     eax, [ebp+var_8]
.text:0000116E                 push    eax             ; unsigned __int8 *
.text:0000116F                 lea     ecx, [ebp+var_18] ; this
.text:00001172                 call    ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z ; NArchive::N7z::CInByte2::Init(uchar const *,uint)
.text:00001177                 mov     eax, [ebp+arg_4]
.text:0000117A                 push    eax             ; struct NArchive::N7z::CFolder *
.text:0000117B                 lea     ecx, [ebp+var_18] ; this
.text:0000117E                 call    ?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)
.text:00001183                 lea     ecx, [ebp+var_18] ; this
.text:00001186                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:0000118B                 test    eax, eax
.text:0000118D                 jz      short loc_11A4
.text:0000118F                 mov     [ebp+var_20], 1330368h
.text:00001196                 push    offset __TI1H
.text:0000119B                 lea     ecx, [ebp+var_20]
.text:0000119E                 push    ecx
.text:0000119F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000011A4 ; ---------------------------------------------------------------------------
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+7Dj
.text:000011A4                 push    edx
.text:000011A5                 mov     ecx, ebp
.text:000011A7                 push    eax
.text:000011A8                 lea     edx, $LN6_0
.text:000011AE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000011B3                 pop     eax
.text:000011B4                 pop     edx
.text:000011B5                 add     esp, 20h
.text:000011B8                 cmp     ebp, esp
.text:000011BA                 call    __RTC_CheckEsp
.text:000011BF                 mov     esp, ebp
.text:000011C1                 pop     ebp
.text:000011C2                 retn    8
.text:000011C2 ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z endp
.text:000011C2
.text:000011C2 ; ---------------------------------------------------------------------------
.text:000011C5                 align 4
.text:000011C8 $LN6_0          dd 1                    ; DATA XREF: NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+98o
.text:000011CC                 dd offset $LN5_0
.text:000011D0 $LN5_0          dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:000011CCo
.text:000011D8                 dd offset $LN4_0        ; "inByte"
.text:000011DC $LN4_0          db 'inByte',0           ; DATA XREF: .text:000011D8o
.text:000011E3                 align 10h
.text:000011F0
.text:000011F0 ; =============== S U B R O U T I N E =======================================
.text:000011F0
.text:000011F0 ; Attributes: bp-based frame
.text:000011F0
.text:000011F0 ; void __thiscall NArchive::N7z::CDatabase::GetPath(NArchive::N7z::CDatabase *this, unsigned int, struct UString *)
.text:000011F0                 public ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z
.text:000011F0 ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z proc near
.text:000011F0
.text:000011F0 Src             = dword ptr -14h
.text:000011F0 Dst             = dword ptr -10h
.text:000011F0 var_C           = dword ptr -0Ch
.text:000011F0 var_8           = dword ptr -8
.text:000011F0 var_4           = dword ptr -4
.text:000011F0 arg_0           = dword ptr  8
.text:000011F0 arg_4           = dword ptr  0Ch
.text:000011F0
.text:000011F0                 push    ebp
.text:000011F1                 mov     ebp, esp
.text:000011F3                 sub     esp, 14h
.text:000011F6                 mov     eax, 0CCCCCCCCh
.text:000011FB                 mov     [ebp+Src], eax
.text:000011FE                 mov     [ebp+Dst], eax
.text:00001201                 mov     [ebp+var_C], eax
.text:00001204                 mov     [ebp+var_8], eax
.text:00001207                 mov     [ebp+var_4], eax
.text:0000120A                 mov     [ebp+var_4], ecx
.text:0000120D                 mov     ecx, [ebp+arg_4] ; this
.text:00001210                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001215                 mov     ecx, [ebp+var_4]
.text:00001218                 add     ecx, 0D8h ; '+'
.text:0000121E                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001223                 test    eax, eax
.text:00001225                 jz      short loc_1239
.text:00001227                 mov     ecx, [ebp+var_4]
.text:0000122A                 add     ecx, 0D0h ; '-'
.text:00001230                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00001235                 test    eax, eax
.text:00001237                 jnz     short loc_123E
.text:00001239
.text:00001239 loc_1239:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+35j
.text:00001239                 jmp     loc_12C7
.text:0000123E ; ---------------------------------------------------------------------------
.text:0000123E
.text:0000123E loc_123E:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+47j
.text:0000123E                 mov     ecx, [ebp+var_4]
.text:00001241                 add     ecx, 0D8h ; '+'
.text:00001247                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000124C                 mov     ecx, [ebp+arg_0]
.text:0000124F                 mov     edx, [eax+ecx*4]
.text:00001252                 mov     [ebp+var_8], edx
.text:00001255                 mov     ecx, [ebp+var_4]
.text:00001258                 add     ecx, 0D8h ; '+'
.text:0000125E                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001263                 mov     ecx, [ebp+arg_0]
.text:00001266                 mov     edx, [eax+ecx*4+4]
.text:0000126A                 sub     edx, [ebp+var_8]
.text:0000126D                 mov     [ebp+var_C], edx
.text:00001270                 cmp     [ebp+var_C], 10000000h
.text:00001277                 jb      short loc_127B
.text:00001279                 jmp     short loc_12C7
.text:0000127B ; ---------------------------------------------------------------------------
.text:0000127B
.text:0000127B loc_127B:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+87j
.text:0000127B                 mov     eax, [ebp+var_C]
.text:0000127E                 sub     eax, 1
.text:00001281                 push    eax             ; unsigned int
.text:00001282                 mov     ecx, [ebp+arg_4] ; this
.text:00001285                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:0000128A                 mov     [ebp+Dst], eax
.text:0000128D                 mov     ecx, [ebp+var_4]
.text:00001290                 add     ecx, 0D0h ; '-'
.text:00001296                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000129B                 mov     ecx, [ebp+var_8]
.text:0000129E                 lea     edx, [eax+ecx*2]
.text:000012A1                 mov     [ebp+Src], edx
.text:000012A4                 mov     eax, [ebp+var_C]
.text:000012A7                 push    eax             ; int
.text:000012A8                 mov     ecx, [ebp+Src]
.text:000012AB                 push    ecx             ; Src
.text:000012AC                 mov     edx, [ebp+Dst]
.text:000012AF                 push    edx             ; Dst
.text:000012B0                 call    _wmemcpy
.text:000012B5                 add     esp, 0Ch
.text:000012B8                 mov     eax, [ebp+var_C]
.text:000012BB                 sub     eax, 1
.text:000012BE                 push    eax             ; unsigned int
.text:000012BF                 mov     ecx, [ebp+arg_4] ; this
.text:000012C2                 call    ?ReleaseBuf_SetLen@UString@@QAEXI@Z ; UString::ReleaseBuf_SetLen(uint)
.text:000012C7
.text:000012C7 loc_12C7:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &):loc_1239j
.text:000012C7                                         ; NArchive::N7z::CDatabase::GetPath(uint,UString &)+89j
.text:000012C7                 add     esp, 14h
.text:000012CA                 cmp     ebp, esp
.text:000012CC                 call    __RTC_CheckEsp
.text:000012D1                 mov     esp, ebp
.text:000012D3                 pop     ebp
.text:000012D4                 retn    8
.text:000012D4 ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z endp
.text:000012D4
.text:000012D4 ; ---------------------------------------------------------------------------
.text:000012D7                 align 10h
.text:000012E0
.text:000012E0 ; =============== S U B R O U T I N E =======================================
.text:000012E0
.text:000012E0 ; Attributes: bp-based frame
.text:000012E0
.text:000012E0 ; __int32 __thiscall NArchive::N7z::CDatabase::GetPath_Prop(NArchive::N7z::CDatabase *this, unsigned int, struct tagPROPVARIANT *)
.text:000012E0                 public ?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z
.text:000012E0 ?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z proc near
.text:000012E0
.text:000012E0 var_20          = dword ptr -20h
.text:000012E0 var_1C          = dword ptr -1Ch
.text:000012E0 var_18          = dword ptr -18h
.text:000012E0 var_14          = dword ptr -14h
.text:000012E0 var_10          = dword ptr -10h
.text:000012E0 var_C           = dword ptr -0Ch
.text:000012E0 var_8           = dword ptr -8
.text:000012E0 var_4           = dword ptr -4
.text:000012E0 arg_0           = dword ptr  8
.text:000012E0 arg_4           = dword ptr  0Ch
.text:000012E0
.text:000012E0                 push    ebp
.text:000012E1                 mov     ebp, esp
.text:000012E3                 sub     esp, 20h
.text:000012E6                 mov     eax, 0CCCCCCCCh
.text:000012EB                 mov     [ebp+var_20], eax
.text:000012EE                 mov     [ebp+var_1C], eax
.text:000012F1                 mov     [ebp+var_18], eax
.text:000012F4                 mov     [ebp+var_14], eax
.text:000012F7                 mov     [ebp+var_10], eax
.text:000012FA                 mov     [ebp+var_C], eax
.text:000012FD                 mov     [ebp+var_8], eax
.text:00001300                 mov     [ebp+var_4], eax
.text:00001303                 mov     [ebp+var_4], ecx
.text:00001306                 mov     eax, [ebp+arg_4]
.text:00001309                 push    eax             ; unsigned int
.text:0000130A                 call    ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)
.text:0000130F                 mov     ecx, [ebp+var_4]
.text:00001312                 add     ecx, 0D8h ; '+'
.text:00001318                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000131D                 test    eax, eax
.text:0000131F                 jz      short loc_1333
.text:00001321                 mov     ecx, [ebp+var_4]
.text:00001324                 add     ecx, 0D0h ; '-'
.text:0000132A                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000132F                 test    eax, eax
.text:00001331                 jnz     short loc_133A
.text:00001333
.text:00001333 loc_1333:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+3Fj
.text:00001333                 xor     eax, eax
.text:00001335                 jmp     loc_1410
.text:0000133A ; ---------------------------------------------------------------------------
.text:0000133A
.text:0000133A loc_133A:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+51j
.text:0000133A                 mov     ecx, [ebp+var_4]
.text:0000133D                 add     ecx, 0D8h ; '+'
.text:00001343                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001348                 mov     ecx, [ebp+arg_0]
.text:0000134B                 mov     edx, [eax+ecx*4]
.text:0000134E                 mov     [ebp+var_8], edx
.text:00001351                 mov     ecx, [ebp+var_4]
.text:00001354                 add     ecx, 0D8h ; '+'
.text:0000135A                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000135F                 mov     ecx, [ebp+arg_0]
.text:00001362                 mov     edx, [eax+ecx*4+4]
.text:00001366                 sub     edx, [ebp+var_8]
.text:00001369                 mov     [ebp+var_C], edx
.text:0000136C                 cmp     [ebp+var_C], 4000h
.text:00001373                 jb      short loc_137C
.text:00001375                 xor     eax, eax
.text:00001377                 jmp     loc_1410
.text:0000137C ; ---------------------------------------------------------------------------
.text:0000137C
.text:0000137C loc_137C:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+93j
.text:0000137C                 mov     eax, [ebp+var_C]
.text:0000137F                 sub     eax, 1
.text:00001382                 push    eax             ; struct tagPROPVARIANT *
.text:00001383                 mov     ecx, [ebp+arg_4]
.text:00001386                 push    ecx             ; this
.text:00001387                 call    ?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z ; NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)
.text:0000138C                 mov     [ebp+var_10], eax
.text:0000138F                 cmp     [ebp+var_10], 0
.text:00001393                 jz      short loc_139A
.text:00001395                 mov     eax, [ebp+var_10]
.text:00001398                 jmp     short loc_1410
.text:0000139A ; ---------------------------------------------------------------------------
.text:0000139A
.text:0000139A loc_139A:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+B3j
.text:0000139A                 mov     edx, [ebp+arg_4]
.text:0000139D                 mov     eax, [edx+8]
.text:000013A0                 mov     [ebp+var_14], eax
.text:000013A3                 mov     ecx, [ebp+var_4]
.text:000013A6                 add     ecx, 0D0h ; '-'
.text:000013AC                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000013B1                 mov     ecx, [ebp+var_8]
.text:000013B4                 lea     edx, [eax+ecx*2]
.text:000013B7                 mov     [ebp+var_18], edx
.text:000013BA                 mov     [ebp+var_1C], 0
.text:000013C1                 jmp     short loc_13CC
.text:000013C3 ; ---------------------------------------------------------------------------
.text:000013C3
.text:000013C3 loc_13C3:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+12Cj
.text:000013C3                 mov     eax, [ebp+var_1C]
.text:000013C6                 add     eax, 1
.text:000013C9                 mov     [ebp+var_1C], eax
.text:000013CC
.text:000013CC loc_13CC:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+E1j
.text:000013CC                 mov     ecx, [ebp+var_1C]
.text:000013CF                 cmp     ecx, [ebp+var_C]
.text:000013D2                 jnb     short loc_140E
.text:000013D4                 mov     edx, [ebp+var_18]
.text:000013D7                 mov     ax, [edx]
.text:000013DA                 mov     word ptr [ebp+var_20], ax
.text:000013DE                 mov     ecx, [ebp+var_18]
.text:000013E1                 add     ecx, 2
.text:000013E4                 mov     [ebp+var_18], ecx
.text:000013E7                 movzx   edx, word ptr [ebp+var_20]
.text:000013EB                 cmp     edx, 2Fh ; '/'
.text:000013EE                 jnz     short loc_13F9
.text:000013F0                 mov     eax, 5Ch ; '\'
.text:000013F5                 mov     word ptr [ebp+var_20], ax
.text:000013F9
.text:000013F9 loc_13F9:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+10Ej
.text:000013F9                 mov     ecx, [ebp+var_14]
.text:000013FC                 mov     dx, word ptr [ebp+var_20]
.text:00001400                 mov     [ecx], dx
.text:00001403                 mov     eax, [ebp+var_14]
.text:00001406                 add     eax, 2
.text:00001409                 mov     [ebp+var_14], eax
.text:0000140C                 jmp     short loc_13C3
.text:0000140E ; ---------------------------------------------------------------------------
.text:0000140E
.text:0000140E loc_140E:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+F2j
.text:0000140E                 xor     eax, eax
.text:00001410
.text:00001410 loc_1410:                               ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+55j
.text:00001410                                         ; NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+97j ...
.text:00001410                 add     esp, 20h
.text:00001413                 cmp     ebp, esp
.text:00001415                 call    __RTC_CheckEsp
.text:0000141A                 mov     esp, ebp
.text:0000141C                 pop     ebp
.text:0000141D                 retn    8
.text:0000141D ?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z endp ; sp-analysis failed
.text:0000141D
.text:00001420
.text:00001420 ; =============== S U B R O U T I N E =======================================
.text:00001420
.text:00001420 ; Attributes: bp-based frame
.text:00001420
.text:00001420 ; void __thiscall NArchive::N7z::CInArchive::WaitId(NArchive::N7z::CInArchive *this, unsigned __int64)
.text:00001420                 public ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z
.text:00001420 ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z proc near
.text:00001420                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+4Cp
.text:00001420                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+48p ...
.text:00001420
.text:00001420 var_C           = dword ptr -0Ch
.text:00001420 var_8           = dword ptr -8
.text:00001420 var_4           = dword ptr -4
.text:00001420 arg_0           = qword ptr  8
.text:00001420
.text:00001420                 push    ebp
.text:00001421                 mov     ebp, esp
.text:00001423                 sub     esp, 0Ch
.text:00001426                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000142D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000143B                 mov     [ebp+var_4], ecx
.text:0000143E
.text:0000143E loc_143E:                               ; CODE XREF: NArchive::N7z::CInArchive::WaitId(unsigned __int64)+53j
.text:0000143E                 mov     ecx, [ebp+var_4] ; this
.text:00001441                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00001446                 mov     [ebp+var_C], eax
.text:00001449                 mov     [ebp+var_8], edx
.text:0000144C                 mov     eax, [ebp+var_C]
.text:0000144F                 cmp     eax, dword ptr [ebp+arg_0]
.text:00001452                 jnz     short loc_145E
.text:00001454                 mov     ecx, [ebp+var_8]
.text:00001457                 cmp     ecx, dword ptr [ebp+arg_0+4]
.text:0000145A                 jnz     short loc_145E
.text:0000145C                 jmp     short loc_1475
.text:0000145E ; ---------------------------------------------------------------------------
.text:0000145E
.text:0000145E loc_145E:                               ; CODE XREF: NArchive::N7z::CInArchive::WaitId(unsigned __int64)+32j
.text:0000145E                                         ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)+3Aj
.text:0000145E                 mov     edx, [ebp+var_C]
.text:00001461                 or      edx, [ebp+var_8]
.text:00001464                 jnz     short loc_146B
.text:00001466                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:0000146B ; ---------------------------------------------------------------------------
.text:0000146B
.text:0000146B loc_146B:                               ; CODE XREF: NArchive::N7z::CInArchive::WaitId(unsigned __int64)+44j
.text:0000146B                 mov     ecx, [ebp+var_4] ; this
.text:0000146E                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:00001473                 jmp     short loc_143E
.text:00001475 ; ---------------------------------------------------------------------------
.text:00001475
.text:00001475 loc_1475:                               ; CODE XREF: NArchive::N7z::CInArchive::WaitId(unsigned __int64)+3Cj
.text:00001475                 add     esp, 0Ch
.text:00001478                 cmp     ebp, esp
.text:0000147A                 call    __RTC_CheckEsp
.text:0000147F                 mov     esp, ebp
.text:00001481                 pop     ebp
.text:00001482                 retn    8
.text:00001482 ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z endp
.text:00001482
.text:00001482 ; ---------------------------------------------------------------------------
.text:00001485                 align 10h
.text:00001490
.text:00001490 ; =============== S U B R O U T I N E =======================================
.text:00001490
.text:00001490 ; Attributes: bp-based frame
.text:00001490
.text:00001490 ; void __thiscall NArchive::N7z::CInArchive::ReadHashDigests(NArchive::N7z::CInArchive *this, unsigned int, struct NArchive::N7z::CUInt32DefVector *)
.text:00001490                 public ?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z
.text:00001490 ?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z proc near
.text:00001490                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+140p
.text:00001490                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+745p
.text:00001490
.text:00001490 var_14          = dword ptr -14h
.text:00001490 var_10          = dword ptr -10h
.text:00001490 var_C           = dword ptr -0Ch
.text:00001490 var_8           = dword ptr -8
.text:00001490 var_4           = dword ptr -4
.text:00001490 arg_0           = dword ptr  8
.text:00001490 arg_4           = dword ptr  0Ch
.text:00001490
.text:00001490                 push    ebp
.text:00001491                 mov     ebp, esp
.text:00001493                 sub     esp, 14h
.text:00001496                 mov     eax, 0CCCCCCCCh
.text:0000149B                 mov     [ebp+var_14], eax
.text:0000149E                 mov     [ebp+var_10], eax
.text:000014A1                 mov     [ebp+var_C], eax
.text:000014A4                 mov     [ebp+var_8], eax
.text:000014A7                 mov     [ebp+var_4], eax
.text:000014AA                 mov     [ebp+var_4], ecx
.text:000014AD                 mov     eax, [ebp+arg_4]
.text:000014B0                 push    eax
.text:000014B1                 mov     ecx, [ebp+arg_0]
.text:000014B4                 push    ecx
.text:000014B5                 mov     ecx, [ebp+var_4]
.text:000014B8                 call    ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)
.text:000014BD                 mov     edx, [ebp+arg_0]
.text:000014C0                 push    edx
.text:000014C1                 mov     ecx, [ebp+arg_4]
.text:000014C4                 add     ecx, 0Ch
.text:000014C7                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:000014CC                 push    0
.text:000014CE                 mov     ecx, [ebp+arg_4]
.text:000014D1                 add     ecx, 0Ch
.text:000014D4                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000014D9                 mov     [ebp+var_8], eax
.text:000014DC                 push    0
.text:000014DE                 mov     ecx, [ebp+arg_4]
.text:000014E1                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000014E6                 mov     [ebp+var_C], eax
.text:000014E9                 mov     [ebp+var_10], 0
.text:000014F0                 jmp     short loc_14FB
.text:000014F2 ; ---------------------------------------------------------------------------
.text:000014F2
.text:000014F2 loc_14F2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+9Ej
.text:000014F2                 mov     eax, [ebp+var_10]
.text:000014F5                 add     eax, 1
.text:000014F8                 mov     [ebp+var_10], eax
.text:000014FB
.text:000014FB loc_14FB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+60j
.text:000014FB                 mov     ecx, [ebp+var_10]
.text:000014FE                 cmp     ecx, [ebp+arg_0]
.text:00001501                 jnb     short loc_1530
.text:00001503                 mov     [ebp+var_14], 0
.text:0000150A                 mov     edx, [ebp+var_C]
.text:0000150D                 add     edx, [ebp+var_10]
.text:00001510                 movzx   eax, byte ptr [edx]
.text:00001513                 test    eax, eax
.text:00001515                 jz      short loc_1522
.text:00001517                 mov     ecx, [ebp+var_4] ; this
.text:0000151A                 call    ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32(void)
.text:0000151F                 mov     [ebp+var_14], eax
.text:00001522
.text:00001522 loc_1522:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+85j
.text:00001522                 mov     ecx, [ebp+var_10]
.text:00001525                 mov     edx, [ebp+var_8]
.text:00001528                 mov     eax, [ebp+var_14]
.text:0000152B                 mov     [edx+ecx*4], eax
.text:0000152E                 jmp     short loc_14F2
.text:00001530 ; ---------------------------------------------------------------------------
.text:00001530
.text:00001530 loc_1530:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+71j
.text:00001530                 add     esp, 14h
.text:00001533                 cmp     ebp, esp
.text:00001535                 call    __RTC_CheckEsp
.text:0000153A                 mov     esp, ebp
.text:0000153C                 pop     ebp
.text:0000153D                 retn    8
.text:0000153D ?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z endp
.text:0000153D
.text:00001540
.text:00001540 ; =============== S U B R O U T I N E =======================================
.text:00001540
.text:00001540 ; Attributes: bp-based frame
.text:00001540
.text:00001540 ; void __thiscall NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CInArchive *this, struct NArchive::N7z::CFolders *)
.text:00001540                 public ?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
.text:00001540 ?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z proc near
.text:00001540                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+4Bp
.text:00001540
.text:00001540 var_50          = byte ptr -50h
.text:00001540 var_4C          = byte ptr -4Ch
.text:00001540 var_30          = dword ptr -30h
.text:00001540 var_2C          = dword ptr -2Ch
.text:00001540 var_28          = dword ptr -28h
.text:00001540 var_24          = dword ptr -24h
.text:00001540 var_20          = dword ptr -20h
.text:00001540 var_1C          = dword ptr -1Ch
.text:00001540 var_18          = dword ptr -18h
.text:00001540 var_14          = dword ptr -14h
.text:00001540 var_10          = dword ptr -10h
.text:00001540 var_C           = dword ptr -0Ch
.text:00001540 var_4           = dword ptr -4
.text:00001540 arg_0           = dword ptr  8
.text:00001540
.text:00001540                 push    ebp
.text:00001541                 mov     ebp, esp
.text:00001543                 push    0FFFFFFFFh
.text:00001545                 push    offset __ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
.text:0000154A                 mov     eax, large fs:0
.text:00001550                 push    eax
.text:00001551                 sub     esp, 44h
.text:00001554                 push    edi
.text:00001555                 push    ecx
.text:00001556                 lea     edi, [ebp+var_50]
.text:00001559                 mov     ecx, 11h
.text:0000155E                 mov     eax, 0CCCCCCCCh
.text:00001563                 rep stosd
.text:00001565                 pop     ecx
.text:00001566                 mov     eax, dword ptr ds:___security_cookie
.text:0000156B                 xor     eax, ebp
.text:0000156D                 push    eax
.text:0000156E                 lea     eax, [ebp+var_C]
.text:00001571                 mov     large fs:0, eax
.text:00001577                 mov     [ebp+var_10], ecx
.text:0000157A                 mov     ecx, [ebp+var_10] ; this
.text:0000157D                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00001582                 mov     [ebp+var_14], eax
.text:00001585                 push    0
.text:00001587                 push    9               ; unsigned __int64
.text:00001589                 mov     ecx, [ebp+var_10] ; this
.text:0000158C                 call    ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)
.text:00001591                 mov     eax, [ebp+var_14]
.text:00001594                 add     eax, 1
.text:00001597                 push    eax
.text:00001598                 mov     ecx, [ebp+arg_0]
.text:0000159B                 add     ecx, 8
.text:0000159E                 call    ?Alloc@?$CObjArray@_K@@QAEXI@Z ; CObjArray<unsigned __int64>::Alloc(uint)
.text:000015A3                 mov     ecx, [ebp+arg_0]
.text:000015A6                 mov     edx, [ebp+var_14]
.text:000015A9                 mov     [ecx], edx
.text:000015AB                 mov     [ebp+var_1C], 0
.text:000015B2                 mov     [ebp+var_18], 0
.text:000015B9                 mov     [ebp+var_20], 0
.text:000015C0                 jmp     short loc_15CB
.text:000015C2 ; ---------------------------------------------------------------------------
.text:000015C2
.text:000015C2 loc_15C2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &):loc_1625j
.text:000015C2                 mov     eax, [ebp+var_20]
.text:000015C5                 add     eax, 1
.text:000015C8                 mov     [ebp+var_20], eax
.text:000015CB
.text:000015CB loc_15CB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+80j
.text:000015CB                 mov     ecx, [ebp+var_20]
.text:000015CE                 cmp     ecx, [ebp+var_14]
.text:000015D1                 jnb     short loc_1627
.text:000015D3                 mov     ecx, [ebp+arg_0]
.text:000015D6                 add     ecx, 8
.text:000015D9                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:000015DE                 mov     edx, [ebp+var_20]
.text:000015E1                 mov     ecx, [ebp+var_1C]
.text:000015E4                 mov     [eax+edx*8], ecx
.text:000015E7                 mov     ecx, [ebp+var_18]
.text:000015EA                 mov     [eax+edx*8+4], ecx
.text:000015EE                 mov     ecx, [ebp+var_10] ; this
.text:000015F1                 call    ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber(void)
.text:000015F6                 mov     [ebp+var_28], eax
.text:000015F9                 mov     [ebp+var_24], edx
.text:000015FC                 mov     edx, [ebp+var_1C]
.text:000015FF                 add     edx, [ebp+var_28]
.text:00001602                 mov     eax, [ebp+var_18]
.text:00001605                 adc     eax, [ebp+var_24]
.text:00001608                 mov     [ebp+var_1C], edx
.text:0000160B                 mov     [ebp+var_18], eax
.text:0000160E                 mov     ecx, [ebp+var_18]
.text:00001611                 cmp     ecx, [ebp+var_24]
.text:00001614                 ja      short loc_1625
.text:00001616                 jb      short loc_1620
.text:00001618                 mov     edx, [ebp+var_1C]
.text:0000161B                 cmp     edx, [ebp+var_28]
.text:0000161E                 jnb     short loc_1625
.text:00001620
.text:00001620 loc_1620:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+D6j
.text:00001620                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00001625 ; ---------------------------------------------------------------------------
.text:00001625
.text:00001625 loc_1625:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+D4j
.text:00001625                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+DEj
.text:00001625                 jmp     short loc_15C2
.text:00001627 ; ---------------------------------------------------------------------------
.text:00001627
.text:00001627 loc_1627:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+91j
.text:00001627                 mov     ecx, [ebp+arg_0]
.text:0000162A                 add     ecx, 8
.text:0000162D                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00001632                 mov     ecx, [ebp+var_14]
.text:00001635                 mov     edx, [ebp+var_1C]
.text:00001638                 mov     [eax+ecx*8], edx
.text:0000163B                 mov     edx, [ebp+var_18]
.text:0000163E                 mov     [eax+ecx*8+4], edx
.text:00001642
.text:00001642 loc_1642:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+154j
.text:00001642                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+15Ej
.text:00001642                 mov     ecx, [ebp+var_10] ; this
.text:00001645                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:0000164A                 mov     [ebp+var_30], eax
.text:0000164D                 mov     [ebp+var_2C], edx
.text:00001650                 mov     eax, [ebp+var_30]
.text:00001653                 or      eax, [ebp+var_2C]
.text:00001656                 jnz     short loc_165A
.text:00001658                 jmp     short loc_16A0
.text:0000165A ; ---------------------------------------------------------------------------
.text:0000165A
.text:0000165A loc_165A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+116j
.text:0000165A                 cmp     [ebp+var_30], 0Ah
.text:0000165E                 jnz     short loc_1696
.text:00001660                 cmp     [ebp+var_2C], 0
.text:00001664                 jnz     short loc_1696
.text:00001666                 lea     ecx, [ebp+var_4C] ; this
.text:00001669                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:0000166E                 mov     [ebp+var_4], 0
.text:00001675                 lea     ecx, [ebp+var_4C]
.text:00001678                 push    ecx             ; struct NArchive::N7z::CUInt32DefVector *
.text:00001679                 mov     edx, [ebp+var_14]
.text:0000167C                 push    edx             ; unsigned int
.text:0000167D                 mov     ecx, [ebp+var_10] ; this
.text:00001680                 call    ?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)
.text:00001685                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000168C                 lea     ecx, [ebp+var_4C] ; this
.text:0000168F                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00001694                 jmp     short loc_1642
.text:00001696 ; ---------------------------------------------------------------------------
.text:00001696
.text:00001696 loc_1696:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+11Ej
.text:00001696                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+124j
.text:00001696                 mov     ecx, [ebp+var_10] ; this
.text:00001699                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:0000169E                 jmp     short loc_1642
.text:000016A0 ; ---------------------------------------------------------------------------
.text:000016A0
.text:000016A0 loc_16A0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+118j
.text:000016A0                 push    edx
.text:000016A1                 mov     ecx, ebp
.text:000016A3                 push    eax
.text:000016A4                 lea     edx, $LN17
.text:000016AA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000016AF                 pop     eax
.text:000016B0                 pop     edx
.text:000016B1                 mov     ecx, [ebp+var_C]
.text:000016B4                 mov     large fs:0, ecx
.text:000016BB                 pop     ecx
.text:000016BC                 pop     edi
.text:000016BD                 add     esp, 50h
.text:000016C0                 cmp     ebp, esp
.text:000016C2                 call    __RTC_CheckEsp
.text:000016C7                 mov     esp, ebp
.text:000016C9                 pop     ebp
.text:000016CA                 retn    4
.text:000016CA ?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z endp
.text:000016CA
.text:000016CA ; ---------------------------------------------------------------------------
.text:000016CD                 align 10h
.text:000016D0 $LN17           dd 1                    ; DATA XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+164o
.text:000016D4                 dd offset $LN16
.text:000016D8 $LN16           dd 0FFFFFFB4h, 18h      ; DATA XREF: .text:000016D4o
.text:000016E0                 dd offset $LN14         ; "PackCRCs"
.text:000016E4 $LN14           db 'PackCRCs',0         ; DATA XREF: .text:000016E0o
.text:000016ED                 align 10h
.text:000016F0
.text:000016F0 ; =============== S U B R O U T I N E =======================================
.text:000016F0
.text:000016F0 ; Attributes: bp-based frame
.text:000016F0
.text:000016F0 ; private: void __thiscall NArchive::N7z::CInArchive::ReadUnpackInfo(class CObjectVector<class CBuffer<unsigned char>> const *, struct NArchive::N7z::CFolders &)
.text:000016F0                 public ?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
.text:000016F0 ?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z proc near
.text:000016F0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+75p
.text:000016F0
.text:000016F0 var_BC          = dword ptr -0BCh
.text:000016F0 var_B8          = dword ptr -0B8h
.text:000016F0 var_B4          = dword ptr -0B4h
.text:000016F0 Size            = dword ptr -0B0h
.text:000016F0 var_AC          = dword ptr -0ACh
.text:000016F0 var_A8          = dword ptr -0A8h
.text:000016F0 var_A4          = dword ptr -0A4h
.text:000016F0 var_A0          = dword ptr -0A0h
.text:000016F0 var_9C          = dword ptr -9Ch
.text:000016F0 var_95          = byte ptr -95h
.text:000016F0 var_94          = qword ptr -94h
.text:000016F0 var_8C          = dword ptr -8Ch
.text:000016F0 var_88          = dword ptr -88h
.text:000016F0 var_84          = dword ptr -84h
.text:000016F0 var_80          = dword ptr -80h
.text:000016F0 var_7C          = qword ptr -7Ch
.text:000016F0 var_74          = dword ptr -74h
.text:000016F0 var_70          = dword ptr -70h
.text:000016F0 var_6C          = dword ptr -6Ch
.text:000016F0 var_68          = dword ptr -68h
.text:000016F0 var_64          = dword ptr -64h
.text:000016F0 var_60          = dword ptr -60h
.text:000016F0 var_5C          = dword ptr -5Ch
.text:000016F0 var_58          = dword ptr -58h
.text:000016F0 var_50          = byte ptr -50h
.text:000016F0 var_3C          = byte ptr -3Ch
.text:000016F0 Src             = dword ptr -2Ch
.text:000016F0 var_24          = byte ptr -24h
.text:000016F0 var_18          = dword ptr -18h
.text:000016F0 var_14          = dword ptr -14h
.text:000016F0 var_10          = dword ptr -10h
.text:000016F0 var_C           = dword ptr -0Ch
.text:000016F0 var_4           = dword ptr -4
.text:000016F0 arg_0           = dword ptr  8
.text:000016F0 arg_4           = dword ptr  0Ch
.text:000016F0
.text:000016F0                 push    ebp
.text:000016F1                 mov     ebp, esp
.text:000016F3                 push    0FFFFFFFFh
.text:000016F5                 push    offset __ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
.text:000016FA                 mov     eax, large fs:0
.text:00001700                 push    eax
.text:00001701                 sub     esp, 0B0h
.text:00001707                 push    esi
.text:00001708                 push    edi
.text:00001709                 push    ecx
.text:0000170A                 lea     edi, [ebp+var_BC]
.text:00001710                 mov     ecx, 2Ch ; ','
.text:00001715                 mov     eax, 0CCCCCCCCh
.text:0000171A                 rep stosd
.text:0000171C                 pop     ecx
.text:0000171D                 mov     eax, dword ptr ds:___security_cookie
.text:00001722                 xor     eax, ebp
.text:00001724                 push    eax
.text:00001725                 lea     eax, [ebp+var_C]
.text:00001728                 mov     large fs:0, eax
.text:0000172E                 mov     [ebp+var_10], ecx
.text:00001731                 push    0
.text:00001733                 push    0Bh             ; unsigned __int64
.text:00001735                 mov     ecx, [ebp+var_10] ; this
.text:00001738                 call    ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)
.text:0000173D                 mov     ecx, [ebp+var_10] ; this
.text:00001740                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00001745                 mov     [ebp+var_14], eax
.text:00001748                 mov     [ebp+var_18], 0
.text:0000174F                 lea     ecx, [ebp+var_24] ; this
.text:00001752                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:00001757                 mov     [ebp+var_4], 0
.text:0000175E                 mov     eax, [ebp+arg_0]
.text:00001761                 push    eax             ; int
.text:00001762                 mov     ecx, [ebp+var_10]
.text:00001765                 push    ecx             ; NArchive::N7z::CInArchive *
.text:00001766                 lea     ecx, [ebp+var_24]
.text:00001769                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)
.text:0000176E                 mov     edx, [ebp+var_10]
.text:00001771                 mov     ecx, [edx+38h]  ; this
.text:00001774                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001779                 mov     [ebp+Src], eax
.text:0000177C                 mov     eax, [ebp+arg_4]
.text:0000177F                 mov     ecx, [ebp+var_14]
.text:00001782                 mov     [eax+4], ecx
.text:00001785                 mov     edx, [ebp+var_14]
.text:00001788                 add     edx, 1
.text:0000178B                 push    edx
.text:0000178C                 mov     ecx, [ebp+arg_4]
.text:0000178F                 add     ecx, 30h ; '0'
.text:00001792                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:00001797                 mov     eax, [ebp+var_14]
.text:0000179A                 push    eax
.text:0000179B                 mov     ecx, [ebp+arg_4]
.text:0000179E                 add     ecx, 34h ; '4'
.text:000017A1                 call    ?Alloc@?$CObjArray@E@@QAEXI@Z ; CObjArray<uchar>::Alloc(uint)
.text:000017A6                 mov     ecx, [ebp+var_14]
.text:000017A9                 add     ecx, 1
.text:000017AC                 push    ecx
.text:000017AD                 mov     ecx, [ebp+arg_4]
.text:000017B0                 add     ecx, 38h ; '8'
.text:000017B3                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:000017B8                 mov     edx, [ebp+var_14]
.text:000017BB                 add     edx, 1
.text:000017BE                 push    edx
.text:000017BF                 mov     ecx, [ebp+arg_4]
.text:000017C2                 add     ecx, 2Ch ; ','
.text:000017C5                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:000017CA                 lea     ecx, [ebp+var_3C]
.text:000017CD                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000017D2                 mov     byte ptr [ebp+var_4], 1
.text:000017D6                 lea     ecx, [ebp+var_50]
.text:000017D9                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000017DE                 mov     byte ptr [ebp+var_4], 2
.text:000017E2                 mov     [ebp+var_58], 0
.text:000017E9                 mov     eax, [ebp+var_10]
.text:000017EC                 mov     ecx, [eax+38h]
.text:000017EF                 mov     [ebp+var_60], ecx
.text:000017F2                 mov     [ebp+var_5C], 0
.text:000017F9                 jmp     short loc_1804
.text:000017FB ; ---------------------------------------------------------------------------
.text:000017FB
.text:000017FB loc_17FB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+5FBj
.text:000017FB                 mov     edx, [ebp+var_5C]
.text:000017FE                 add     edx, 1
.text:00001801                 mov     [ebp+var_5C], edx
.text:00001804
.text:00001804 loc_1804:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+109j
.text:00001804                 mov     eax, [ebp+var_5C]
.text:00001807                 cmp     eax, [ebp+var_14]
.text:0000180A                 jnb     loc_1CF0
.text:00001810                 mov     [ebp+var_64], 0
.text:00001817                 mov     [ebp+var_68], 0
.text:0000181E                 mov     ecx, [ebp+var_10]
.text:00001821                 mov     ecx, [ecx+38h]  ; this
.text:00001824                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001829                 mov     esi, eax
.text:0000182B                 sub     esi, [ebp+Src]
.text:0000182E                 mov     ecx, [ebp+arg_4]
.text:00001831                 add     ecx, 38h ; '8'
.text:00001834                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001839                 mov     edx, [ebp+var_5C]
.text:0000183C                 mov     [eax+edx*4], esi
.text:0000183F                 mov     [ebp+var_6C], 0
.text:00001846                 mov     ecx, [ebp+var_60] ; this
.text:00001849                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:0000184E                 mov     [ebp+var_70], eax
.text:00001851                 cmp     [ebp+var_70], 0
.text:00001855                 jz      short loc_185D
.text:00001857                 cmp     [ebp+var_70], 40h ; '@'
.text:0000185B                 jbe     short loc_1862
.text:0000185D
.text:0000185D loc_185D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+165j
.text:0000185D                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001862 ; ---------------------------------------------------------------------------
.text:00001862
.text:00001862 loc_1862:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+16Bj
.text:00001862                 mov     [ebp+var_74], 0
.text:00001869                 jmp     short loc_1874
.text:0000186B ; ---------------------------------------------------------------------------
.text:0000186B
.text:0000186B loc_186B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &):loc_1AACj
.text:0000186B                 mov     eax, [ebp+var_74]
.text:0000186E                 add     eax, 1
.text:00001871                 mov     [ebp+var_74], eax
.text:00001874
.text:00001874 loc_1874:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+179j
.text:00001874                 mov     ecx, [ebp+var_74]
.text:00001877                 cmp     ecx, [ebp+var_70]
.text:0000187A                 jnb     loc_1AB1
.text:00001880                 mov     ecx, [ebp+var_60] ; this
.text:00001883                 call    ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ; NArchive::N7z::CInByte2::ReadByte(void)
.text:00001888                 mov     byte ptr [ebp+var_7C+7], al
.text:0000188B                 movzx   edx, byte ptr [ebp+var_7C+7]
.text:0000188F                 and     edx, 0C0h
.text:00001895                 jz      short loc_189C
.text:00001897                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:0000189C ; ---------------------------------------------------------------------------
.text:0000189C
.text:0000189C loc_189C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+1A5j
.text:0000189C                 movzx   eax, byte ptr [ebp+var_7C+7]
.text:000018A0                 and     eax, 0Fh
.text:000018A3                 mov     dword ptr [ebp+var_7C], eax
.text:000018A6                 cmp     dword ptr [ebp+var_7C], 8
.text:000018AA                 jbe     short loc_18B1
.text:000018AC                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000018B1 ; ---------------------------------------------------------------------------
.text:000018B1
.text:000018B1 loc_18B1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+1BAj
.text:000018B1                 mov     ecx, [ebp+var_60] ; this
.text:000018B4                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:000018B9                 cmp     dword ptr [ebp+var_7C], eax
.text:000018BC                 jbe     short loc_18C3
.text:000018BE                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:000018C3 ; ---------------------------------------------------------------------------
.text:000018C3
.text:000018C3 loc_18C3:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+1CCj
.text:000018C3                 mov     ecx, [ebp+var_60] ; this
.text:000018C6                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:000018CB                 mov     [ebp+var_80], eax
.text:000018CE                 mov     [ebp+var_88], 0
.text:000018D8                 mov     [ebp+var_84], 0
.text:000018E2                 mov     [ebp+var_8C], 0
.text:000018EC                 jmp     short loc_18FD
.text:000018EE ; ---------------------------------------------------------------------------
.text:000018EE
.text:000018EE loc_18EE:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+24Cj
.text:000018EE                 mov     ecx, [ebp+var_8C]
.text:000018F4                 add     ecx, 1
.text:000018F7                 mov     [ebp+var_8C], ecx
.text:000018FD
.text:000018FD loc_18FD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+1FCj
.text:000018FD                 mov     edx, [ebp+var_8C]
.text:00001903                 cmp     edx, dword ptr [ebp+var_7C]
.text:00001906                 jnb     short loc_193E
.text:00001908                 mov     eax, [ebp+var_88]
.text:0000190E                 mov     edx, [ebp+var_84]
.text:00001914                 mov     cl, 8
.text:00001916                 call    __allshl
.text:0000191B                 mov     ecx, eax
.text:0000191D                 mov     esi, edx
.text:0000191F                 mov     edx, [ebp+var_80]
.text:00001922                 add     edx, [ebp+var_8C]
.text:00001928                 movzx   eax, byte ptr [edx]
.text:0000192B                 cdq
.text:0000192C                 or      ecx, eax
.text:0000192E                 or      esi, edx
.text:00001930                 mov     [ebp+var_88], ecx
.text:00001936                 mov     [ebp+var_84], esi
.text:0000193C                 jmp     short loc_18EE
.text:0000193E ; ---------------------------------------------------------------------------
.text:0000193E
.text:0000193E loc_193E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+216j
.text:0000193E                 mov     eax, dword ptr [ebp+var_7C]
.text:00001941                 xor     ecx, ecx
.text:00001943                 push    ecx
.text:00001944                 push    eax             ; unsigned __int64
.text:00001945                 mov     ecx, [ebp+var_60] ; this
.text:00001948                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:0000194D                 mov     ecx, [ebp+arg_4]
.text:00001950                 add     ecx, 4Ch ; 'L'
.text:00001953                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00001958                 cmp     eax, 80h ; 'Ç'
.text:0000195D                 jnb     short loc_1978
.text:0000195F                 mov     edx, [ebp+var_84]
.text:00001965                 push    edx
.text:00001966                 mov     eax, [ebp+var_88]
.text:0000196C                 push    eax
.text:0000196D                 mov     ecx, [ebp+arg_4]
.text:00001970                 add     ecx, 4Ch ; 'L'
.text:00001973                 call    ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)
.text:00001978
.text:00001978 loc_1978:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+26Dj
.text:00001978                 mov     dword ptr [ebp+var_94+4], 1
.text:00001982                 movzx   ecx, byte ptr [ebp+var_7C+7]
.text:00001986                 and     ecx, 10h
.text:00001989                 jz      short loc_19B9
.text:0000198B                 mov     ecx, [ebp+var_60] ; this
.text:0000198E                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00001993                 mov     dword ptr [ebp+var_94+4], eax
.text:00001999                 cmp     dword ptr [ebp+var_94+4], 40h ; '@'
.text:000019A0                 jbe     short loc_19A7
.text:000019A2                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000019A7 ; ---------------------------------------------------------------------------
.text:000019A7
.text:000019A7 loc_19A7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+2B0j
.text:000019A7                 mov     ecx, [ebp+var_60] ; this
.text:000019AA                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:000019AF                 cmp     eax, 1
.text:000019B2                 jz      short loc_19B9
.text:000019B4                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000019B9 ; ---------------------------------------------------------------------------
.text:000019B9
.text:000019B9 loc_19B9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+299j
.text:000019B9                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+2C2j
.text:000019B9                 mov     edx, [ebp+var_6C]
.text:000019BC                 add     edx, dword ptr [ebp+var_94+4]
.text:000019C2                 mov     [ebp+var_6C], edx
.text:000019C5                 cmp     [ebp+var_6C], 40h ; '@'
.text:000019C9                 jbe     short loc_19D0
.text:000019CB                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000019D0 ; ---------------------------------------------------------------------------
.text:000019D0
.text:000019D0 loc_19D0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+2D9j
.text:000019D0                 movzx   eax, byte ptr [ebp+var_7C+7]
.text:000019D4                 and     eax, 20h
.text:000019D7                 jz      loc_1AAC
.text:000019DD                 mov     ecx, [ebp+var_60] ; this
.text:000019E0                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:000019E5                 mov     dword ptr [ebp+var_94], eax
.text:000019EB                 mov     ecx, [ebp+var_60] ; this
.text:000019EE                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:000019F3                 cmp     dword ptr [ebp+var_94], eax
.text:000019F9                 jbe     short loc_1A00
.text:000019FB                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:00001A00 ; ---------------------------------------------------------------------------
.text:00001A00
.text:00001A00 loc_1A00:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+309j
.text:00001A00                 cmp     [ebp+var_88], 21h ; '!'
.text:00001A07                 jnz     short loc_1A4E
.text:00001A09                 cmp     [ebp+var_84], 0
.text:00001A10                 jnz     short loc_1A4E
.text:00001A12                 cmp     dword ptr [ebp+var_94], 1
.text:00001A19                 jnz     short loc_1A4E
.text:00001A1B                 mov     ecx, [ebp+var_10]
.text:00001A1E                 mov     ecx, [ecx+38h]  ; this
.text:00001A21                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001A26                 mov     dl, [eax]
.text:00001A28                 mov     [ebp+var_95], dl
.text:00001A2E                 mov     eax, [ebp+arg_4]
.text:00001A31                 movzx   ecx, byte ptr [eax+44h]
.text:00001A35                 movzx   edx, [ebp+var_95]
.text:00001A3C                 cmp     ecx, edx
.text:00001A3E                 jge     short loc_1A4C
.text:00001A40                 mov     eax, [ebp+arg_4]
.text:00001A43                 mov     cl, [ebp+var_95]
.text:00001A49                 mov     [eax+44h], cl
.text:00001A4C
.text:00001A4C loc_1A4C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+34Ej
.text:00001A4C                 jmp     short loc_1A9A
.text:00001A4E ; ---------------------------------------------------------------------------
.text:00001A4E
.text:00001A4E loc_1A4E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+317j
.text:00001A4E                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+320j ...
.text:00001A4E                 cmp     [ebp+var_88], 30101h
.text:00001A58                 jnz     short loc_1A9A
.text:00001A5A                 cmp     [ebp+var_84], 0
.text:00001A61                 jnz     short loc_1A9A
.text:00001A63                 cmp     dword ptr [ebp+var_94], 5
.text:00001A6A                 jnz     short loc_1A9A
.text:00001A6C                 mov     edx, [ebp+var_10]
.text:00001A6F                 mov     ecx, [edx+38h]  ; this
.text:00001A72                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001A77                 mov     eax, [eax+1]
.text:00001A7A                 mov     [ebp+var_9C], eax
.text:00001A80                 mov     ecx, [ebp+arg_4]
.text:00001A83                 mov     edx, [ecx+48h]
.text:00001A86                 cmp     edx, [ebp+var_9C]
.text:00001A8C                 jnb     short loc_1A9A
.text:00001A8E                 mov     eax, [ebp+arg_4]
.text:00001A91                 mov     ecx, [ebp+var_9C]
.text:00001A97                 mov     [eax+48h], ecx
.text:00001A9A
.text:00001A9A loc_1A9A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &):loc_1A4Cj
.text:00001A9A                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+368j ...
.text:00001A9A                 mov     edx, dword ptr [ebp+var_94]
.text:00001AA0                 xor     eax, eax
.text:00001AA2                 push    eax
.text:00001AA3                 push    edx             ; unsigned __int64
.text:00001AA4                 mov     ecx, [ebp+var_60] ; this
.text:00001AA7                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00001AAC
.text:00001AAC loc_1AAC:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+2E7j
.text:00001AAC                 jmp     loc_186B
.text:00001AB1 ; ---------------------------------------------------------------------------
.text:00001AB1
.text:00001AB1 loc_1AB1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+18Aj
.text:00001AB1                 cmp     [ebp+var_70], 1
.text:00001AB5                 jnz     short loc_1AD0
.text:00001AB7                 cmp     [ebp+var_6C], 1
.text:00001ABB                 jnz     short loc_1AD0
.text:00001ABD                 mov     [ebp+var_64], 0
.text:00001AC4                 mov     [ebp+var_68], 1
.text:00001ACB                 jmp     loc_1C9D
.text:00001AD0 ; ---------------------------------------------------------------------------
.text:00001AD0
.text:00001AD0 loc_1AD0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+3C5j
.text:00001AD0                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+3CBj
.text:00001AD0                 mov     ecx, [ebp+var_70]
.text:00001AD3                 sub     ecx, 1
.text:00001AD6                 mov     [ebp+var_A4], ecx
.text:00001ADC                 mov     edx, [ebp+var_6C]
.text:00001ADF                 cmp     edx, [ebp+var_A4]
.text:00001AE5                 jnb     short loc_1AEC
.text:00001AE7                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001AEC ; ---------------------------------------------------------------------------
.text:00001AEC
.text:00001AEC loc_1AEC:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+3F5j
.text:00001AEC                 mov     eax, [ebp+var_6C]
.text:00001AEF                 push    eax
.text:00001AF0                 lea     ecx, [ebp+var_3C]
.text:00001AF3                 push    ecx
.text:00001AF4                 call    ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:00001AF9                 mov     edx, [ebp+var_70]
.text:00001AFC                 push    edx
.text:00001AFD                 lea     eax, [ebp+var_50]
.text:00001B00                 push    eax
.text:00001B01                 call    ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:00001B06                 mov     [ebp+var_A0], 0
.text:00001B10                 jmp     short loc_1B21
.text:00001B12 ; ---------------------------------------------------------------------------
.text:00001B12
.text:00001B12 loc_1B12:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+4CFj
.text:00001B12                 mov     ecx, [ebp+var_A0]
.text:00001B18                 add     ecx, 1
.text:00001B1B                 mov     [ebp+var_A0], ecx
.text:00001B21
.text:00001B21 loc_1B21:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+420j
.text:00001B21                 mov     edx, [ebp+var_A0]
.text:00001B27                 cmp     edx, [ebp+var_A4]
.text:00001B2D                 jnb     loc_1BC4
.text:00001B33                 mov     ecx, [ebp+var_10] ; this
.text:00001B36                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00001B3B                 mov     [ebp+var_A8], eax
.text:00001B41                 mov     eax, [ebp+var_A8]
.text:00001B47                 cmp     eax, [ebp+var_6C]
.text:00001B4A                 jnb     short loc_1B62
.text:00001B4C                 mov     ecx, [ebp+var_A8]
.text:00001B52                 push    ecx
.text:00001B53                 lea     ecx, [ebp+var_3C]
.text:00001B56                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001B5B                 movzx   edx, byte ptr [eax]
.text:00001B5E                 test    edx, edx
.text:00001B60                 jz      short loc_1B67
.text:00001B62
.text:00001B62 loc_1B62:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+45Aj
.text:00001B62                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001B67 ; ---------------------------------------------------------------------------
.text:00001B67
.text:00001B67 loc_1B67:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+470j
.text:00001B67                 mov     eax, [ebp+var_A8]
.text:00001B6D                 push    eax
.text:00001B6E                 lea     ecx, [ebp+var_3C]
.text:00001B71                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001B76                 mov     byte ptr [eax], 1
.text:00001B79                 mov     ecx, [ebp+var_10] ; this
.text:00001B7C                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00001B81                 mov     [ebp+var_A8], eax
.text:00001B87                 mov     ecx, [ebp+var_A8]
.text:00001B8D                 cmp     ecx, [ebp+var_70]
.text:00001B90                 jnb     short loc_1BA8
.text:00001B92                 mov     edx, [ebp+var_A8]
.text:00001B98                 push    edx
.text:00001B99                 lea     ecx, [ebp+var_50]
.text:00001B9C                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001BA1                 movzx   eax, byte ptr [eax]
.text:00001BA4                 test    eax, eax
.text:00001BA6                 jz      short loc_1BAD
.text:00001BA8
.text:00001BA8 loc_1BA8:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+4A0j
.text:00001BA8                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001BAD ; ---------------------------------------------------------------------------
.text:00001BAD
.text:00001BAD loc_1BAD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+4B6j
.text:00001BAD                 mov     ecx, [ebp+var_A8]
.text:00001BB3                 push    ecx
.text:00001BB4                 lea     ecx, [ebp+var_50]
.text:00001BB7                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001BBC                 mov     byte ptr [eax], 1
.text:00001BBF                 jmp     loc_1B12
.text:00001BC4 ; ---------------------------------------------------------------------------
.text:00001BC4
.text:00001BC4 loc_1BC4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+43Dj
.text:00001BC4                 mov     edx, [ebp+var_6C]
.text:00001BC7                 sub     edx, [ebp+var_A4]
.text:00001BCD                 mov     [ebp+var_68], edx
.text:00001BD0                 cmp     [ebp+var_68], 1
.text:00001BD4                 jz      short loc_1C44
.text:00001BD6                 mov     [ebp+var_A0], 0
.text:00001BE0                 jmp     short loc_1BF1
.text:00001BE2 ; ---------------------------------------------------------------------------
.text:00001BE2
.text:00001BE2 loc_1BE2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+552j
.text:00001BE2                 mov     eax, [ebp+var_A0]
.text:00001BE8                 add     eax, 1
.text:00001BEB                 mov     [ebp+var_A0], eax
.text:00001BF1
.text:00001BF1 loc_1BF1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+4F0j
.text:00001BF1                 mov     ecx, [ebp+var_A0]
.text:00001BF7                 cmp     ecx, [ebp+var_68]
.text:00001BFA                 jnb     short loc_1C44
.text:00001BFC                 mov     ecx, [ebp+var_60] ; this
.text:00001BFF                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00001C04                 mov     [ebp+var_AC], eax
.text:00001C0A                 mov     edx, [ebp+var_AC]
.text:00001C10                 cmp     edx, [ebp+var_6C]
.text:00001C13                 jnb     short loc_1C2B
.text:00001C15                 mov     eax, [ebp+var_AC]
.text:00001C1B                 push    eax
.text:00001C1C                 lea     ecx, [ebp+var_3C]
.text:00001C1F                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C24                 movzx   ecx, byte ptr [eax]
.text:00001C27                 test    ecx, ecx
.text:00001C29                 jz      short loc_1C30
.text:00001C2B
.text:00001C2B loc_1C2B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+523j
.text:00001C2B                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001C30 ; ---------------------------------------------------------------------------
.text:00001C30
.text:00001C30 loc_1C30:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+539j
.text:00001C30                 mov     edx, [ebp+var_AC]
.text:00001C36                 push    edx
.text:00001C37                 lea     ecx, [ebp+var_3C]
.text:00001C3A                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C3F                 mov     byte ptr [eax], 1
.text:00001C42                 jmp     short loc_1BE2
.text:00001C44 ; ---------------------------------------------------------------------------
.text:00001C44
.text:00001C44 loc_1C44:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+4E4j
.text:00001C44                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+50Aj
.text:00001C44                 mov     [ebp+var_A0], 0
.text:00001C4E                 jmp     short loc_1C5F
.text:00001C50 ; ---------------------------------------------------------------------------
.text:00001C50
.text:00001C50 loc_1C50:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &):loc_1C8Bj
.text:00001C50                 mov     eax, [ebp+var_A0]
.text:00001C56                 add     eax, 1
.text:00001C59                 mov     [ebp+var_A0], eax
.text:00001C5F
.text:00001C5F loc_1C5F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+55Ej
.text:00001C5F                 mov     ecx, [ebp+var_A0]
.text:00001C65                 cmp     ecx, [ebp+var_70]
.text:00001C68                 jnb     short loc_1C8D
.text:00001C6A                 mov     edx, [ebp+var_A0]
.text:00001C70                 push    edx
.text:00001C71                 lea     ecx, [ebp+var_50]
.text:00001C74                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C79                 movzx   eax, byte ptr [eax]
.text:00001C7C                 test    eax, eax
.text:00001C7E                 jnz     short loc_1C8B
.text:00001C80                 mov     ecx, [ebp+var_A0]
.text:00001C86                 mov     [ebp+var_64], ecx
.text:00001C89                 jmp     short loc_1C8D
.text:00001C8B ; ---------------------------------------------------------------------------
.text:00001C8B
.text:00001C8B loc_1C8B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+58Ej
.text:00001C8B                 jmp     short loc_1C50
.text:00001C8D ; ---------------------------------------------------------------------------
.text:00001C8D
.text:00001C8D loc_1C8D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+578j
.text:00001C8D                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+599j
.text:00001C8D                 mov     edx, [ebp+var_A0]
.text:00001C93                 cmp     edx, [ebp+var_70]
.text:00001C96                 jnz     short loc_1C9D
.text:00001C98                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00001C9D ; ---------------------------------------------------------------------------
.text:00001C9D
.text:00001C9D loc_1C9D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+3DBj
.text:00001C9D                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+5A6j
.text:00001C9D                 mov     ecx, [ebp+arg_4]
.text:00001CA0                 add     ecx, 2Ch ; ','
.text:00001CA3                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001CA8                 mov     ecx, [ebp+var_5C]
.text:00001CAB                 mov     edx, [ebp+var_18]
.text:00001CAE                 mov     [eax+ecx*4], edx
.text:00001CB1                 mov     eax, [ebp+var_18]
.text:00001CB4                 add     eax, [ebp+var_70]
.text:00001CB7                 mov     [ebp+var_18], eax
.text:00001CBA                 mov     ecx, [ebp+arg_4]
.text:00001CBD                 add     ecx, 30h ; '0'
.text:00001CC0                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001CC5                 mov     ecx, [ebp+var_5C]
.text:00001CC8                 mov     edx, [ebp+var_58]
.text:00001CCB                 mov     [eax+ecx*4], edx
.text:00001CCE                 mov     eax, [ebp+var_58]
.text:00001CD1                 add     eax, [ebp+var_68]
.text:00001CD4                 mov     [ebp+var_58], eax
.text:00001CD7                 mov     ecx, [ebp+arg_4]
.text:00001CDA                 add     ecx, 34h ; '4'
.text:00001CDD                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00001CE2                 mov     ecx, [ebp+var_5C]
.text:00001CE5                 mov     dl, byte ptr [ebp+var_64]
.text:00001CE8                 mov     [eax+ecx], dl
.text:00001CEB                 jmp     loc_17FB
.text:00001CF0 ; ---------------------------------------------------------------------------
.text:00001CF0
.text:00001CF0 loc_1CF0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+11Aj
.text:00001CF0                 mov     eax, [ebp+var_10]
.text:00001CF3                 mov     ecx, [eax+38h]  ; this
.text:00001CF6                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001CFB                 sub     eax, [ebp+Src]
.text:00001CFE                 mov     [ebp+Size], eax
.text:00001D04                 mov     ecx, [ebp+arg_4]
.text:00001D07                 add     ecx, 2Ch ; ','
.text:00001D0A                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001D0F                 mov     ecx, [ebp+var_5C]
.text:00001D12                 mov     edx, [ebp+var_18]
.text:00001D15                 mov     [eax+ecx*4], edx
.text:00001D18                 mov     ecx, [ebp+arg_4]
.text:00001D1B                 add     ecx, 30h ; '0'
.text:00001D1E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001D23                 mov     ecx, [ebp+var_5C]
.text:00001D26                 mov     edx, [ebp+var_58]
.text:00001D29                 mov     [eax+ecx*4], edx
.text:00001D2C                 mov     eax, [ebp+var_10]
.text:00001D2F                 mov     ecx, [eax+38h]  ; this
.text:00001D32                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00001D37                 mov     esi, eax
.text:00001D39                 sub     esi, [ebp+Src]
.text:00001D3C                 mov     ecx, [ebp+arg_4]
.text:00001D3F                 add     ecx, 38h ; '8'
.text:00001D42                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001D47                 mov     ecx, [ebp+var_5C]
.text:00001D4A                 mov     [eax+ecx*4], esi
.text:00001D4D                 mov     edx, [ebp+Size]
.text:00001D53                 push    edx             ; Size
.text:00001D54                 mov     eax, [ebp+Src]
.text:00001D57                 push    eax             ; Src
.text:00001D58                 mov     ecx, [ebp+arg_4]
.text:00001D5B                 add     ecx, 3Ch ; '<'
.text:00001D5E                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00001D63                 mov     byte ptr [ebp+var_4], 1
.text:00001D67                 lea     ecx, [ebp+var_50]
.text:00001D6A                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001D6F                 mov     byte ptr [ebp+var_4], 0
.text:00001D73                 lea     ecx, [ebp+var_3C]
.text:00001D76                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001D7B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D82                 lea     ecx, [ebp+var_24] ; this
.text:00001D85                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:00001D8A                 push    0
.text:00001D8C                 push    0Ch             ; unsigned __int64
.text:00001D8E                 mov     ecx, [ebp+var_10] ; this
.text:00001D91                 call    ?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)
.text:00001D96                 mov     ecx, [ebp+var_18]
.text:00001D99                 push    ecx
.text:00001D9A                 mov     ecx, [ebp+arg_4]
.text:00001D9D                 add     ecx, 28h ; '('
.text:00001DA0                 call    ?Alloc@?$CObjArray@_K@@QAEXI@Z ; CObjArray<unsigned __int64>::Alloc(uint)
.text:00001DA5                 mov     [ebp+var_B4], 0
.text:00001DAF                 jmp     short loc_1DC0
.text:00001DB1 ; ---------------------------------------------------------------------------
.text:00001DB1
.text:00001DB1 loc_1DB1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+6FFj
.text:00001DB1                 mov     edx, [ebp+var_B4]
.text:00001DB7                 add     edx, 1
.text:00001DBA                 mov     [ebp+var_B4], edx
.text:00001DC0
.text:00001DC0 loc_1DC0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+6BFj
.text:00001DC0                 mov     eax, [ebp+var_B4]
.text:00001DC6                 cmp     eax, [ebp+var_18]
.text:00001DC9                 jnb     short loc_1DF1
.text:00001DCB                 mov     ecx, [ebp+var_10] ; this
.text:00001DCE                 call    ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber(void)
.text:00001DD3                 mov     esi, eax
.text:00001DD5                 mov     edi, edx
.text:00001DD7                 mov     ecx, [ebp+arg_4]
.text:00001DDA                 add     ecx, 28h ; '('
.text:00001DDD                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00001DE2                 mov     ecx, [ebp+var_B4]
.text:00001DE8                 mov     [eax+ecx*8], esi
.text:00001DEB                 mov     [eax+ecx*8+4], edi
.text:00001DEF                 jmp     short loc_1DB1
.text:00001DF1 ; ---------------------------------------------------------------------------
.text:00001DF1
.text:00001DF1 loc_1DF1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+6D9j
.text:00001DF1                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+74Aj ...
.text:00001DF1                 mov     ecx, [ebp+var_10] ; this
.text:00001DF4                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00001DF9                 mov     [ebp+var_BC], eax
.text:00001DFF                 mov     [ebp+var_B8], edx
.text:00001E05                 mov     edx, [ebp+var_BC]
.text:00001E0B                 or      edx, [ebp+var_B8]
.text:00001E11                 jnz     short loc_1E15
.text:00001E13                 jmp     short loc_1E46
.text:00001E15 ; ---------------------------------------------------------------------------
.text:00001E15
.text:00001E15 loc_1E15:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+721j
.text:00001E15                 cmp     [ebp+var_BC], 0Ah
.text:00001E1C                 jnz     short loc_1E3C
.text:00001E1E                 cmp     [ebp+var_B8], 0
.text:00001E25                 jnz     short loc_1E3C
.text:00001E27                 mov     eax, [ebp+arg_4]
.text:00001E2A                 add     eax, 0Ch
.text:00001E2D                 push    eax             ; struct NArchive::N7z::CUInt32DefVector *
.text:00001E2E                 mov     ecx, [ebp+var_14]
.text:00001E31                 push    ecx             ; unsigned int
.text:00001E32                 mov     ecx, [ebp+var_10] ; this
.text:00001E35                 call    ?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)
.text:00001E3A                 jmp     short loc_1DF1
.text:00001E3C ; ---------------------------------------------------------------------------
.text:00001E3C
.text:00001E3C loc_1E3C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+72Cj
.text:00001E3C                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+735j
.text:00001E3C                 mov     ecx, [ebp+var_10] ; this
.text:00001E3F                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:00001E44                 jmp     short loc_1DF1
.text:00001E46 ; ---------------------------------------------------------------------------
.text:00001E46
.text:00001E46 loc_1E46:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+723j
.text:00001E46                 push    edx
.text:00001E47                 mov     ecx, ebp
.text:00001E49                 push    eax
.text:00001E4A                 lea     edx, $LN66
.text:00001E50                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E55                 pop     eax
.text:00001E56                 pop     edx
.text:00001E57                 mov     ecx, [ebp+var_C]
.text:00001E5A                 mov     large fs:0, ecx
.text:00001E61                 pop     ecx
.text:00001E62                 pop     edi
.text:00001E63                 pop     esi
.text:00001E64                 add     esp, 0BCh
.text:00001E6A                 cmp     ebp, esp
.text:00001E6C                 call    __RTC_CheckEsp
.text:00001E71                 mov     esp, ebp
.text:00001E73                 pop     ebp
.text:00001E74                 retn    8
.text:00001E74 ?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z endp
.text:00001E74
.text:00001E74 ; ---------------------------------------------------------------------------
.text:00001E77                 align 4
.text:00001E78 $LN66           dd 3                    ; DATA XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+75Ao
.text:00001E7C                 dd offset $LN65
.text:00001E80 $LN65           dd 0FFFFFFDCh, 8        ; DATA XREF: .text:00001E7Co
.text:00001E88                 dd offset $LN61         ; "streamSwitch"
.text:00001E8C                 dd 0FFFFFFC4h, 0Ch
.text:00001E94                 dd offset $LN62         ; "StreamUsed"
.text:00001E98                 dd 0FFFFFFB0h, 0Ch
.text:00001EA0                 dd offset $LN63         ; "CoderUsed"
.text:00001EA4 $LN63           db 'CoderUsed',0        ; DATA XREF: .text:00001EA0o
.text:00001EAE $LN62           db 'StreamUsed',0       ; DATA XREF: .text:00001E94o
.text:00001EB9 $LN61           db 'streamSwitch',0     ; DATA XREF: .text:00001E88o
.text:00001EC6                 align 10h
.text:00001ED0
.text:00001ED0 ; =============== S U B R O U T I N E =======================================
.text:00001ED0
.text:00001ED0 ; Attributes: bp-based frame
.text:00001ED0
.text:00001ED0 ; void __stdcall NArchive::N7z::BoolVector_Fill_False(class CRecordVector<bool> &, unsigned int)
.text:00001ED0 ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z proc near
.text:00001ED0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+404p
.text:00001ED0                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+411p ...
.text:00001ED0
.text:00001ED0 var_8           = dword ptr -8
.text:00001ED0 var_4           = dword ptr -4
.text:00001ED0 arg_0           = dword ptr  8
.text:00001ED0 arg_4           = dword ptr  0Ch
.text:00001ED0
.text:00001ED0                 push    ebp
.text:00001ED1                 mov     ebp, esp
.text:00001ED3                 sub     esp, 8
.text:00001ED6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001EDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EE4                 mov     eax, [ebp+arg_4]
.text:00001EE7                 push    eax
.text:00001EE8                 mov     ecx, [ebp+arg_0]
.text:00001EEB                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:00001EF0                 push    0
.text:00001EF2                 mov     ecx, [ebp+arg_0]
.text:00001EF5                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001EFA                 mov     [ebp+var_4], eax
.text:00001EFD                 mov     [ebp+var_8], 0
.text:00001F04                 jmp     short loc_1F0F
.text:00001F06 ; ---------------------------------------------------------------------------
.text:00001F06
.text:00001F06 loc_1F06:                               ; CODE XREF: NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)+50j
.text:00001F06                 mov     ecx, [ebp+var_8]
.text:00001F09                 add     ecx, 1
.text:00001F0C                 mov     [ebp+var_8], ecx
.text:00001F0F
.text:00001F0F loc_1F0F:                               ; CODE XREF: NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)+34j
.text:00001F0F                 mov     edx, [ebp+var_8]
.text:00001F12                 cmp     edx, [ebp+arg_4]
.text:00001F15                 jnb     short loc_1F22
.text:00001F17                 mov     eax, [ebp+var_4]
.text:00001F1A                 add     eax, [ebp+var_8]
.text:00001F1D                 mov     byte ptr [eax], 0
.text:00001F20                 jmp     short loc_1F06
.text:00001F22 ; ---------------------------------------------------------------------------
.text:00001F22
.text:00001F22 loc_1F22:                               ; CODE XREF: NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)+45j
.text:00001F22                 add     esp, 8
.text:00001F25                 cmp     ebp, esp
.text:00001F27                 call    __RTC_CheckEsp
.text:00001F2C                 mov     esp, ebp
.text:00001F2E                 pop     ebp
.text:00001F2F                 retn    8
.text:00001F2F ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z endp
.text:00001F2F
.text:00001F2F ; ---------------------------------------------------------------------------
.text:00001F32                 align 10h
.text:00001F40
.text:00001F40 ; =============== S U B R O U T I N E =======================================
.text:00001F40
.text:00001F40 ; Attributes: bp-based frame
.text:00001F40
.text:00001F40 ; int __stdcall NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders *, int, NArchive::N7z::CUInt32DefVector *)
.text:00001F40                 public ?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
.text:00001F40 ?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z proc near
.text:00001F40                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+E0p
.text:00001F40
.text:00001F40 var_84          = dword ptr -84h
.text:00001F40 var_80          = dword ptr -80h
.text:00001F40 var_7C          = dword ptr -7Ch
.text:00001F40 var_78          = dword ptr -78h
.text:00001F40 var_74          = dword ptr -74h
.text:00001F40 var_6D          = byte ptr -6Dh
.text:00001F40 var_6C          = dword ptr -6Ch
.text:00001F40 var_68          = dword ptr -68h
.text:00001F40 var_64          = dword ptr -64h
.text:00001F40 var_60          = dword ptr -60h
.text:00001F40 var_58          = byte ptr -58h
.text:00001F40 var_48          = dword ptr -48h
.text:00001F40 var_44          = dword ptr -44h
.text:00001F40 var_40          = dword ptr -40h
.text:00001F40 var_3C          = dword ptr -3Ch
.text:00001F40 var_38          = dword ptr -38h
.text:00001F40 var_34          = dword ptr -34h
.text:00001F40 var_30          = dword ptr -30h
.text:00001F40 var_2C          = dword ptr -2Ch
.text:00001F40 var_28          = dword ptr -28h
.text:00001F40 var_24          = dword ptr -24h
.text:00001F40 var_20          = dword ptr -20h
.text:00001F40 var_1C          = dword ptr -1Ch
.text:00001F40 var_18          = dword ptr -18h
.text:00001F40 var_14          = dword ptr -14h
.text:00001F40 var_10          = dword ptr -10h
.text:00001F40 var_C           = dword ptr -0Ch
.text:00001F40 var_4           = dword ptr -4
.text:00001F40 arg_0           = dword ptr  8
.text:00001F40 arg_4           = dword ptr  0Ch
.text:00001F40 arg_8           = dword ptr  10h
.text:00001F40
.text:00001F40                 push    ebp
.text:00001F41                 mov     ebp, esp
.text:00001F43                 push    0FFFFFFFFh
.text:00001F45                 push    offset __ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
.text:00001F4A                 mov     eax, large fs:0
.text:00001F50                 push    eax
.text:00001F51                 sub     esp, 78h
.text:00001F54                 push    esi
.text:00001F55                 push    edi
.text:00001F56                 push    ecx
.text:00001F57                 lea     edi, [ebp+var_84]
.text:00001F5D                 mov     ecx, 1Eh
.text:00001F62                 mov     eax, 0CCCCCCCCh
.text:00001F67                 rep stosd
.text:00001F69                 pop     ecx
.text:00001F6A                 mov     eax, dword ptr ds:___security_cookie
.text:00001F6F                 xor     eax, ebp
.text:00001F71                 push    eax
.text:00001F72                 lea     eax, [ebp+var_C]
.text:00001F75                 mov     large fs:0, eax
.text:00001F7B                 mov     [ebp+var_10], ecx
.text:00001F7E                 mov     eax, [ebp+arg_0]
.text:00001F81                 mov     ecx, [eax+4]
.text:00001F84                 push    ecx
.text:00001F85                 mov     ecx, [ebp+arg_0]
.text:00001F88                 add     ecx, 24h ; '$'
.text:00001F8B                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:00001F90                 mov     [ebp+var_14], 0
.text:00001F97                 jmp     short loc_1FA2
.text:00001F99 ; ---------------------------------------------------------------------------
.text:00001F99
.text:00001F99 loc_1F99:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+82j
.text:00001F99                 mov     edx, [ebp+var_14]
.text:00001F9C                 add     edx, 1
.text:00001F9F                 mov     [ebp+var_14], edx
.text:00001FA2
.text:00001FA2 loc_1FA2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+57j
.text:00001FA2                 mov     eax, [ebp+arg_0]
.text:00001FA5                 mov     ecx, [ebp+var_14]
.text:00001FA8                 cmp     ecx, [eax+4]
.text:00001FAB                 jnb     short loc_1FC4
.text:00001FAD                 mov     ecx, [ebp+arg_0]
.text:00001FB0                 add     ecx, 24h ; '$'
.text:00001FB3                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001FB8                 mov     edx, [ebp+var_14]
.text:00001FBB                 mov     dword ptr [eax+edx*4], 1
.text:00001FC2                 jmp     short loc_1F99
.text:00001FC4 ; ---------------------------------------------------------------------------
.text:00001FC4
.text:00001FC4 loc_1FC4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+6Bj
.text:00001FC4                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_2018j ...
.text:00001FC4                 mov     ecx, [ebp+var_10] ; this
.text:00001FC7                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00001FCC                 mov     [ebp+var_1C], eax
.text:00001FCF                 mov     [ebp+var_18], edx
.text:00001FD2                 cmp     [ebp+var_1C], 0Dh
.text:00001FD6                 jnz     short loc_201A
.text:00001FD8                 cmp     [ebp+var_18], 0
.text:00001FDC                 jnz     short loc_201A
.text:00001FDE                 mov     [ebp+var_14], 0
.text:00001FE5                 jmp     short loc_1FF0
.text:00001FE7 ; ---------------------------------------------------------------------------
.text:00001FE7
.text:00001FE7 loc_1FE7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+D6j
.text:00001FE7                 mov     eax, [ebp+var_14]
.text:00001FEA                 add     eax, 1
.text:00001FED                 mov     [ebp+var_14], eax
.text:00001FF0
.text:00001FF0 loc_1FF0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+A5j
.text:00001FF0                 mov     ecx, [ebp+arg_0]
.text:00001FF3                 mov     edx, [ebp+var_14]
.text:00001FF6                 cmp     edx, [ecx+4]
.text:00001FF9                 jnb     short loc_2018
.text:00001FFB                 mov     ecx, [ebp+var_10] ; this
.text:00001FFE                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00002003                 mov     esi, eax
.text:00002005                 mov     ecx, [ebp+arg_0]
.text:00002008                 add     ecx, 24h ; '$'
.text:0000200B                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00002010                 mov     ecx, [ebp+var_14]
.text:00002013                 mov     [eax+ecx*4], esi
.text:00002016                 jmp     short loc_1FE7
.text:00002018 ; ---------------------------------------------------------------------------
.text:00002018
.text:00002018 loc_2018:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+B9j
.text:00002018                 jmp     short loc_1FC4
.text:0000201A ; ---------------------------------------------------------------------------
.text:0000201A
.text:0000201A loc_201A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+96j
.text:0000201A                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+9Cj
.text:0000201A                 cmp     [ebp+var_1C], 0Ah
.text:0000201E                 jnz     short loc_2026
.text:00002020                 cmp     [ebp+var_18], 0
.text:00002024                 jz      short loc_203A
.text:00002026
.text:00002026 loc_2026:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+DEj
.text:00002026                 cmp     [ebp+var_1C], 9
.text:0000202A                 jnz     short loc_2032
.text:0000202C                 cmp     [ebp+var_18], 0
.text:00002030                 jz      short loc_203A
.text:00002032
.text:00002032 loc_2032:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+EAj
.text:00002032                 mov     edx, [ebp+var_1C]
.text:00002035                 or      edx, [ebp+var_18]
.text:00002038                 jnz     short loc_203C
.text:0000203A
.text:0000203A loc_203A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+E4j
.text:0000203A                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+F0j
.text:0000203A                 jmp     short loc_2049
.text:0000203C ; ---------------------------------------------------------------------------
.text:0000203C
.text:0000203C loc_203C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+F8j
.text:0000203C                 mov     ecx, [ebp+var_10] ; this
.text:0000203F                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:00002044                 jmp     loc_1FC4
.text:00002049 ; ---------------------------------------------------------------------------
.text:00002049
.text:00002049 loc_2049:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_203Aj
.text:00002049                 cmp     [ebp+var_1C], 9
.text:0000204D                 jnz     loc_215F
.text:00002053                 cmp     [ebp+var_18], 0
.text:00002057                 jnz     loc_215F
.text:0000205D                 mov     [ebp+var_14], 0
.text:00002064                 jmp     short loc_206F
.text:00002066 ; ---------------------------------------------------------------------------
.text:00002066
.text:00002066 loc_2066:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+158j
.text:00002066                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+20Aj
.text:00002066                 mov     eax, [ebp+var_14]
.text:00002069                 add     eax, 1
.text:0000206C                 mov     [ebp+var_14], eax
.text:0000206F
.text:0000206F loc_206F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+124j
.text:0000206F                 mov     ecx, [ebp+arg_0]
.text:00002072                 mov     edx, [ebp+var_14]
.text:00002075                 cmp     edx, [ecx+4]
.text:00002078                 jnb     loc_214F
.text:0000207E                 mov     ecx, [ebp+arg_0]
.text:00002081                 add     ecx, 24h ; '$'
.text:00002084                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00002089                 mov     ecx, [ebp+var_14]
.text:0000208C                 mov     edx, [eax+ecx*4]
.text:0000208F                 mov     [ebp+var_20], edx
.text:00002092                 cmp     [ebp+var_20], 0
.text:00002096                 jnz     short loc_209A
.text:00002098                 jmp     short loc_2066
.text:0000209A ; ---------------------------------------------------------------------------
.text:0000209A
.text:0000209A loc_209A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+156j
.text:0000209A                 mov     [ebp+var_28], 0
.text:000020A1                 mov     [ebp+var_24], 0
.text:000020A8                 mov     [ebp+var_2C], 1
.text:000020AF                 jmp     short loc_20BA
.text:000020B1 ; ---------------------------------------------------------------------------
.text:000020B1
.text:000020B1 loc_20B1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_2109j
.text:000020B1                 mov     eax, [ebp+var_2C]
.text:000020B4                 add     eax, 1
.text:000020B7                 mov     [ebp+var_2C], eax
.text:000020BA
.text:000020BA loc_20BA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+16Fj
.text:000020BA                 mov     ecx, [ebp+var_2C]
.text:000020BD                 cmp     ecx, [ebp+var_20]
.text:000020C0                 jnb     short loc_210B
.text:000020C2                 mov     ecx, [ebp+var_10] ; this
.text:000020C5                 call    ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber(void)
.text:000020CA                 mov     [ebp+var_34], eax
.text:000020CD                 mov     [ebp+var_30], edx
.text:000020D0                 mov     edx, [ebp+var_30]
.text:000020D3                 push    edx
.text:000020D4                 mov     eax, [ebp+var_34]
.text:000020D7                 push    eax
.text:000020D8                 mov     ecx, [ebp+arg_4]
.text:000020DB                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:000020E0                 mov     ecx, [ebp+var_28]
.text:000020E3                 add     ecx, [ebp+var_34]
.text:000020E6                 mov     edx, [ebp+var_24]
.text:000020E9                 adc     edx, [ebp+var_30]
.text:000020EC                 mov     [ebp+var_28], ecx
.text:000020EF                 mov     [ebp+var_24], edx
.text:000020F2                 mov     eax, [ebp+var_24]
.text:000020F5                 cmp     eax, [ebp+var_30]
.text:000020F8                 ja      short loc_2109
.text:000020FA                 jb      short loc_2104
.text:000020FC                 mov     ecx, [ebp+var_28]
.text:000020FF                 cmp     ecx, [ebp+var_34]
.text:00002102                 jnb     short loc_2109
.text:00002104
.text:00002104 loc_2104:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1BAj
.text:00002104                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00002109 ; ---------------------------------------------------------------------------
.text:00002109
.text:00002109 loc_2109:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1B8j
.text:00002109                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1C2j
.text:00002109                 jmp     short loc_20B1
.text:0000210B ; ---------------------------------------------------------------------------
.text:0000210B
.text:0000210B loc_210B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+180j
.text:0000210B                 mov     edx, [ebp+var_14]
.text:0000210E                 push    edx             ; unsigned int
.text:0000210F                 mov     ecx, [ebp+arg_0] ; this
.text:00002112                 call    ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)
.text:00002117                 mov     [ebp+var_3C], eax
.text:0000211A                 mov     [ebp+var_38], edx
.text:0000211D                 mov     eax, [ebp+var_38]
.text:00002120                 cmp     eax, [ebp+var_24]
.text:00002123                 ja      short loc_2134
.text:00002125                 jb      short loc_212F
.text:00002127                 mov     ecx, [ebp+var_3C]
.text:0000212A                 cmp     ecx, [ebp+var_28]
.text:0000212D                 jnb     short loc_2134
.text:0000212F
.text:0000212F loc_212F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1E5j
.text:0000212F                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00002134 ; ---------------------------------------------------------------------------
.text:00002134
.text:00002134 loc_2134:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1E3j
.text:00002134                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1EDj
.text:00002134                 mov     edx, [ebp+var_3C]
.text:00002137                 sub     edx, [ebp+var_28]
.text:0000213A                 mov     eax, [ebp+var_38]
.text:0000213D                 sbb     eax, [ebp+var_24]
.text:00002140                 push    eax
.text:00002141                 push    edx
.text:00002142                 mov     ecx, [ebp+arg_4]
.text:00002145                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000214A                 jmp     loc_2066
.text:0000214F ; ---------------------------------------------------------------------------
.text:0000214F
.text:0000214F loc_214F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+138j
.text:0000214F                 mov     ecx, [ebp+var_10] ; this
.text:00002152                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002157                 mov     [ebp+var_1C], eax
.text:0000215A                 mov     [ebp+var_18], edx
.text:0000215D                 jmp     short loc_21B9
.text:0000215F ; ---------------------------------------------------------------------------
.text:0000215F
.text:0000215F loc_215F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+10Dj
.text:0000215F                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+117j
.text:0000215F                 mov     [ebp+var_14], 0
.text:00002166                 jmp     short loc_2171
.text:00002168 ; ---------------------------------------------------------------------------
.text:00002168
.text:00002168 loc_2168:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_21B7j
.text:00002168                 mov     ecx, [ebp+var_14]
.text:0000216B                 add     ecx, 1
.text:0000216E                 mov     [ebp+var_14], ecx
.text:00002171
.text:00002171 loc_2171:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+226j
.text:00002171                 mov     edx, [ebp+arg_0]
.text:00002174                 mov     eax, [ebp+var_14]
.text:00002177                 cmp     eax, [edx+4]
.text:0000217A                 jnb     short loc_21B9
.text:0000217C                 mov     ecx, [ebp+arg_0]
.text:0000217F                 add     ecx, 24h ; '$'
.text:00002182                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00002187                 mov     ecx, [ebp+var_14]
.text:0000218A                 mov     edx, [eax+ecx*4]
.text:0000218D                 mov     [ebp+var_40], edx
.text:00002190                 cmp     [ebp+var_40], 1
.text:00002194                 jbe     short loc_219B
.text:00002196                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:0000219B ; ---------------------------------------------------------------------------
.text:0000219B
.text:0000219B loc_219B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+254j
.text:0000219B                 cmp     [ebp+var_40], 1
.text:0000219F                 jnz     short loc_21B7
.text:000021A1                 mov     eax, [ebp+var_14]
.text:000021A4                 push    eax             ; unsigned int
.text:000021A5                 mov     ecx, [ebp+arg_0] ; this
.text:000021A8                 call    ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)
.text:000021AD                 push    edx
.text:000021AE                 push    eax
.text:000021AF                 mov     ecx, [ebp+arg_4]
.text:000021B2                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:000021B7
.text:000021B7 loc_21B7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+25Fj
.text:000021B7                 jmp     short loc_2168
.text:000021B9 ; ---------------------------------------------------------------------------
.text:000021B9
.text:000021B9 loc_21B9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+21Dj
.text:000021B9                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+23Aj
.text:000021B9                 mov     [ebp+var_44], 0
.text:000021C0                 mov     [ebp+var_14], 0
.text:000021C7                 jmp     short loc_21D2
.text:000021C9 ; ---------------------------------------------------------------------------
.text:000021C9
.text:000021C9 loc_21C9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_2216j
.text:000021C9                 mov     ecx, [ebp+var_14]
.text:000021CC                 add     ecx, 1
.text:000021CF                 mov     [ebp+var_14], ecx
.text:000021D2
.text:000021D2 loc_21D2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+287j
.text:000021D2                 mov     edx, [ebp+arg_0]
.text:000021D5                 mov     eax, [ebp+var_14]
.text:000021D8                 cmp     eax, [edx+4]
.text:000021DB                 jnb     short loc_2218
.text:000021DD                 mov     ecx, [ebp+arg_0]
.text:000021E0                 add     ecx, 24h ; '$'
.text:000021E3                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000021E8                 mov     ecx, [ebp+var_14]
.text:000021EB                 mov     edx, [eax+ecx*4]
.text:000021EE                 mov     [ebp+var_48], edx
.text:000021F1                 cmp     [ebp+var_48], 1
.text:000021F5                 jnz     short loc_220D
.text:000021F7                 mov     eax, [ebp+var_14]
.text:000021FA                 push    eax             ; unsigned int
.text:000021FB                 mov     ecx, [ebp+arg_0]
.text:000021FE                 add     ecx, 0Ch        ; this
.text:00002201                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:00002206                 movzx   ecx, al
.text:00002209                 test    ecx, ecx
.text:0000220B                 jnz     short loc_2216
.text:0000220D
.text:0000220D loc_220D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2B5j
.text:0000220D                 mov     edx, [ebp+var_44]
.text:00002210                 add     edx, [ebp+var_48]
.text:00002213                 mov     [ebp+var_44], edx
.text:00002216
.text:00002216 loc_2216:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2CBj
.text:00002216                 jmp     short loc_21C9
.text:00002218 ; ---------------------------------------------------------------------------
.text:00002218
.text:00002218 loc_2218:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+29Bj
.text:00002218                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+482j
.text:00002218                 mov     eax, [ebp+var_1C]
.text:0000221B                 or      eax, [ebp+var_18]
.text:0000221E                 jnz     short loc_2225
.text:00002220                 jmp     loc_23C7
.text:00002225 ; ---------------------------------------------------------------------------
.text:00002225
.text:00002225 loc_2225:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2DEj
.text:00002225                 cmp     [ebp+var_1C], 0Ah
.text:00002229                 jnz     loc_23AC
.text:0000222F                 cmp     [ebp+var_18], 0
.text:00002233                 jnz     loc_23AC
.text:00002239                 lea     ecx, [ebp+var_58]
.text:0000223C                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002241                 mov     [ebp+var_4], 0
.text:00002248                 lea     ecx, [ebp+var_58]
.text:0000224B                 push    ecx
.text:0000224C                 mov     edx, [ebp+var_44]
.text:0000224F                 push    edx
.text:00002250                 mov     ecx, [ebp+var_10]
.text:00002253                 call    ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)
.text:00002258                 mov     ecx, [ebp+arg_4]
.text:0000225B                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00002260                 push    eax             ; unsigned int
.text:00002261                 mov     ecx, [ebp+arg_8] ; this
.text:00002264                 call    ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize(uint)
.text:00002269                 mov     [ebp+var_60], 0
.text:00002270                 mov     [ebp+var_64], 0
.text:00002277                 mov     [ebp+var_14], 0
.text:0000227E                 jmp     short loc_2289
.text:00002280 ; ---------------------------------------------------------------------------
.text:00002280
.text:00002280 loc_2280:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_2396j
.text:00002280                 mov     eax, [ebp+var_14]
.text:00002283                 add     eax, 1
.text:00002286                 mov     [ebp+var_14], eax
.text:00002289
.text:00002289 loc_2289:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+33Ej
.text:00002289                 mov     ecx, [ebp+arg_0]
.text:0000228C                 mov     edx, [ebp+var_14]
.text:0000228F                 cmp     edx, [ecx+4]
.text:00002292                 jnb     loc_239B
.text:00002298                 mov     ecx, [ebp+arg_0]
.text:0000229B                 add     ecx, 24h ; '$'
.text:0000229E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000022A3                 mov     ecx, [ebp+var_14]
.text:000022A6                 mov     edx, [eax+ecx*4]
.text:000022A9                 mov     [ebp+var_68], edx
.text:000022AC                 cmp     [ebp+var_68], 1
.text:000022B0                 jnz     short loc_2309
.text:000022B2                 mov     eax, [ebp+var_14]
.text:000022B5                 push    eax             ; unsigned int
.text:000022B6                 mov     ecx, [ebp+arg_0]
.text:000022B9                 add     ecx, 0Ch        ; this
.text:000022BC                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:000022C1                 movzx   ecx, al
.text:000022C4                 test    ecx, ecx
.text:000022C6                 jz      short loc_2309
.text:000022C8                 mov     edx, [ebp+var_60]
.text:000022CB                 push    edx
.text:000022CC                 mov     ecx, [ebp+arg_8]
.text:000022CF                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000022D4                 mov     byte ptr [eax], 1
.text:000022D7                 mov     eax, [ebp+var_14]
.text:000022DA                 push    eax
.text:000022DB                 mov     ecx, [ebp+arg_0]
.text:000022DE                 add     ecx, 18h
.text:000022E1                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000022E6                 mov     esi, eax
.text:000022E8                 mov     ecx, [ebp+var_60]
.text:000022EB                 push    ecx
.text:000022EC                 mov     ecx, [ebp+arg_8]
.text:000022EF                 add     ecx, 0Ch
.text:000022F2                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000022F7                 mov     edx, [esi]
.text:000022F9                 mov     [eax], edx
.text:000022FB                 mov     eax, [ebp+var_60]
.text:000022FE                 add     eax, 1
.text:00002301                 mov     [ebp+var_60], eax
.text:00002304                 jmp     loc_2396
.text:00002309 ; ---------------------------------------------------------------------------
.text:00002309
.text:00002309 loc_2309:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+370j
.text:00002309                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+386j
.text:00002309                 mov     [ebp+var_6C], 0
.text:00002310                 jmp     short loc_231B
.text:00002312 ; ---------------------------------------------------------------------------
.text:00002312
.text:00002312 loc_2312:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+451j
.text:00002312                 mov     ecx, [ebp+var_6C]
.text:00002315                 add     ecx, 1
.text:00002318                 mov     [ebp+var_6C], ecx
.text:0000231B
.text:0000231B loc_231B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+3D0j
.text:0000231B                 mov     edx, [ebp+var_6C]
.text:0000231E                 cmp     edx, [ebp+var_68]
.text:00002321                 jnb     short loc_2396
.text:00002323                 mov     eax, [ebp+var_64]
.text:00002326                 mov     [ebp+var_84], eax
.text:0000232C                 mov     ecx, [ebp+var_64]
.text:0000232F                 add     ecx, 1
.text:00002332                 mov     [ebp+var_64], ecx
.text:00002335                 mov     edx, [ebp+var_84]
.text:0000233B                 push    edx
.text:0000233C                 lea     ecx, [ebp+var_58]
.text:0000233F                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002344                 mov     al, [eax]
.text:00002346                 mov     [ebp+var_6D], al
.text:00002349                 mov     ecx, [ebp+var_60]
.text:0000234C                 push    ecx
.text:0000234D                 mov     ecx, [ebp+arg_8]
.text:00002350                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002355                 mov     dl, [ebp+var_6D]
.text:00002358                 mov     [eax], dl
.text:0000235A                 mov     [ebp+var_74], 0
.text:00002361                 movzx   eax, [ebp+var_6D]
.text:00002365                 test    eax, eax
.text:00002367                 jz      short loc_2374
.text:00002369                 mov     ecx, [ebp+var_10] ; this
.text:0000236C                 call    ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32(void)
.text:00002371                 mov     [ebp+var_74], eax
.text:00002374
.text:00002374 loc_2374:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+427j
.text:00002374                 mov     ecx, [ebp+var_60]
.text:00002377                 push    ecx
.text:00002378                 mov     ecx, [ebp+arg_8]
.text:0000237B                 add     ecx, 0Ch
.text:0000237E                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002383                 mov     edx, [ebp+var_74]
.text:00002386                 mov     [eax], edx
.text:00002388                 mov     eax, [ebp+var_60]
.text:0000238B                 add     eax, 1
.text:0000238E                 mov     [ebp+var_60], eax
.text:00002391                 jmp     loc_2312
.text:00002396 ; ---------------------------------------------------------------------------
.text:00002396
.text:00002396 loc_2396:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+3C4j
.text:00002396                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+3E1j
.text:00002396                 jmp     loc_2280
.text:0000239B ; ---------------------------------------------------------------------------
.text:0000239B
.text:0000239B loc_239B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+352j
.text:0000239B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023A2                 lea     ecx, [ebp+var_58]
.text:000023A5                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000023AA                 jmp     short loc_23B4
.text:000023AC ; ---------------------------------------------------------------------------
.text:000023AC
.text:000023AC loc_23AC:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2E9j
.text:000023AC                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2F3j
.text:000023AC                 mov     ecx, [ebp+var_10] ; this
.text:000023AF                 call    ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData(void)
.text:000023B4
.text:000023B4 loc_23B4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+46Aj
.text:000023B4                 mov     ecx, [ebp+var_10] ; this
.text:000023B7                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:000023BC                 mov     [ebp+var_1C], eax
.text:000023BF                 mov     [ebp+var_18], edx
.text:000023C2                 jmp     loc_2218
.text:000023C7 ; ---------------------------------------------------------------------------
.text:000023C7
.text:000023C7 loc_23C7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2E0j
.text:000023C7                 mov     ecx, [ebp+arg_8]
.text:000023CA                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000023CF                 mov     esi, eax
.text:000023D1                 mov     ecx, [ebp+arg_4]
.text:000023D4                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000023D9                 cmp     esi, eax
.text:000023DB                 jz      loc_24D6
.text:000023E1                 mov     ecx, [ebp+arg_4]
.text:000023E4                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000023E9                 push    eax             ; unsigned int
.text:000023EA                 mov     ecx, [ebp+arg_8] ; this
.text:000023ED                 call    ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize(uint)
.text:000023F2                 mov     [ebp+var_78], 0
.text:000023F9                 mov     [ebp+var_14], 0
.text:00002400                 jmp     short loc_240B
.text:00002402 ; ---------------------------------------------------------------------------
.text:00002402
.text:00002402 loc_2402:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &):loc_24D1j
.text:00002402                 mov     ecx, [ebp+var_14]
.text:00002405                 add     ecx, 1
.text:00002408                 mov     [ebp+var_14], ecx
.text:0000240B
.text:0000240B loc_240B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+4C0j
.text:0000240B                 mov     edx, [ebp+arg_0]
.text:0000240E                 mov     eax, [ebp+var_14]
.text:00002411                 cmp     eax, [edx+4]
.text:00002414                 jnb     loc_24D6
.text:0000241A                 mov     ecx, [ebp+arg_0]
.text:0000241D                 add     ecx, 24h ; '$'
.text:00002420                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00002425                 mov     ecx, [ebp+var_14]
.text:00002428                 mov     edx, [eax+ecx*4]
.text:0000242B                 mov     [ebp+var_7C], edx
.text:0000242E                 cmp     [ebp+var_7C], 1
.text:00002432                 jnz     short loc_2488
.text:00002434                 mov     eax, [ebp+var_14]
.text:00002437                 push    eax             ; unsigned int
.text:00002438                 mov     ecx, [ebp+arg_0]
.text:0000243B                 add     ecx, 0Ch        ; this
.text:0000243E                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:00002443                 movzx   ecx, al
.text:00002446                 test    ecx, ecx
.text:00002448                 jz      short loc_2488
.text:0000244A                 mov     edx, [ebp+var_78]
.text:0000244D                 push    edx
.text:0000244E                 mov     ecx, [ebp+arg_8]
.text:00002451                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002456                 mov     byte ptr [eax], 1
.text:00002459                 mov     eax, [ebp+var_14]
.text:0000245C                 push    eax
.text:0000245D                 mov     ecx, [ebp+arg_0]
.text:00002460                 add     ecx, 18h
.text:00002463                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002468                 mov     esi, eax
.text:0000246A                 mov     ecx, [ebp+var_78]
.text:0000246D                 push    ecx
.text:0000246E                 mov     ecx, [ebp+arg_8]
.text:00002471                 add     ecx, 0Ch
.text:00002474                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002479                 mov     edx, [esi]
.text:0000247B                 mov     [eax], edx
.text:0000247D                 mov     eax, [ebp+var_78]
.text:00002480                 add     eax, 1
.text:00002483                 mov     [ebp+var_78], eax
.text:00002486                 jmp     short loc_24D1
.text:00002488 ; ---------------------------------------------------------------------------
.text:00002488
.text:00002488 loc_2488:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+4F2j
.text:00002488                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+508j
.text:00002488                 mov     [ebp+var_80], 0
.text:0000248F                 jmp     short loc_249A
.text:00002491 ; ---------------------------------------------------------------------------
.text:00002491
.text:00002491 loc_2491:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+58Fj
.text:00002491                 mov     ecx, [ebp+var_80]
.text:00002494                 add     ecx, 1
.text:00002497                 mov     [ebp+var_80], ecx
.text:0000249A
.text:0000249A loc_249A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+54Fj
.text:0000249A                 mov     edx, [ebp+var_80]
.text:0000249D                 cmp     edx, [ebp+var_7C]
.text:000024A0                 jnb     short loc_24D1
.text:000024A2                 mov     eax, [ebp+var_78]
.text:000024A5                 push    eax
.text:000024A6                 mov     ecx, [ebp+arg_8]
.text:000024A9                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000024AE                 mov     byte ptr [eax], 0
.text:000024B1                 mov     ecx, [ebp+var_78]
.text:000024B4                 push    ecx
.text:000024B5                 mov     ecx, [ebp+arg_8]
.text:000024B8                 add     ecx, 0Ch
.text:000024BB                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000024C0                 mov     dword ptr [eax], 0
.text:000024C6                 mov     edx, [ebp+var_78]
.text:000024C9                 add     edx, 1
.text:000024CC                 mov     [ebp+var_78], edx
.text:000024CF                 jmp     short loc_2491
.text:000024D1 ; ---------------------------------------------------------------------------
.text:000024D1
.text:000024D1 loc_24D1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+546j
.text:000024D1                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+560j
.text:000024D1                 jmp     loc_2402
.text:000024D6 ; ---------------------------------------------------------------------------
.text:000024D6
.text:000024D6 loc_24D6:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+49Bj
.text:000024D6                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+4D4j
.text:000024D6                 push    edx
.text:000024D7                 mov     ecx, ebp
.text:000024D9                 push    eax
.text:000024DA                 lea     edx, $LN67
.text:000024E0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000024E5                 pop     eax
.text:000024E6                 pop     edx
.text:000024E7                 mov     ecx, [ebp+var_C]
.text:000024EA                 mov     large fs:0, ecx
.text:000024F1                 pop     ecx
.text:000024F2                 pop     edi
.text:000024F3                 pop     esi
.text:000024F4                 add     esp, 84h
.text:000024FA                 cmp     ebp, esp
.text:000024FC                 call    __RTC_CheckEsp
.text:00002501                 mov     esp, ebp
.text:00002503                 pop     ebp
.text:00002504                 retn    0Ch
.text:00002504 ?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z endp
.text:00002504
.text:00002504 ; ---------------------------------------------------------------------------
.text:00002507                 align 4
.text:00002508 $LN67           dd 1                    ; DATA XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+59Ao
.text:0000250C                 dd offset $LN66_0
.text:00002510 $LN66_0         dd 0FFFFFFA8h, 0Ch      ; DATA XREF: .text:0000250Co
.text:00002518                 dd offset $LN64         ; "digests2"
.text:0000251C $LN64           db 'digests2',0         ; DATA XREF: .text:00002518o
.text:00002525                 align 10h
.text:00002530
.text:00002530 ; =============== S U B R O U T I N E =======================================
.text:00002530
.text:00002530 ; Attributes: bp-based frame
.text:00002530
.text:00002530 ; int __stdcall NArchive::N7z::CInArchive::ReadStreamsInfo(int, int, NArchive::N7z::CFolders *, int, NArchive::N7z::CUInt32DefVector *)
.text:00002530                 public ?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
.text:00002530 ?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z proc near
.text:00002530                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+83p
.text:00002530                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+181p
.text:00002530
.text:00002530 var_10          = dword ptr -10h
.text:00002530 var_C           = dword ptr -0Ch
.text:00002530 var_8           = dword ptr -8
.text:00002530 var_4           = dword ptr -4
.text:00002530 arg_0           = dword ptr  8
.text:00002530 arg_4           = dword ptr  0Ch
.text:00002530 arg_8           = dword ptr  10h
.text:00002530 arg_C           = dword ptr  14h
.text:00002530 arg_10          = dword ptr  18h
.text:00002530
.text:00002530                 push    ebp
.text:00002531                 mov     ebp, esp
.text:00002533                 sub     esp, 10h
.text:00002536                 mov     eax, 0CCCCCCCCh
.text:0000253B                 mov     [ebp+var_10], eax
.text:0000253E                 mov     [ebp+var_C], eax
.text:00002541                 mov     [ebp+var_8], eax
.text:00002544                 mov     [ebp+var_4], eax
.text:00002547                 mov     [ebp+var_4], ecx
.text:0000254A                 mov     ecx, [ebp+var_4] ; this
.text:0000254D                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002552                 mov     [ebp+var_C], eax
.text:00002555                 mov     [ebp+var_8], edx
.text:00002558                 cmp     [ebp+var_C], 6
.text:0000255C                 jnz     short loc_258E
.text:0000255E                 cmp     [ebp+var_8], 0
.text:00002562                 jnz     short loc_258E
.text:00002564                 mov     ecx, [ebp+var_4] ; this
.text:00002567                 call    ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber(void)
.text:0000256C                 mov     ecx, [ebp+arg_4]
.text:0000256F                 mov     [ecx], eax
.text:00002571                 mov     [ecx+4], edx
.text:00002574                 mov     edx, [ebp+arg_8]
.text:00002577                 push    edx             ; struct NArchive::N7z::CFolders *
.text:00002578                 mov     ecx, [ebp+var_4] ; this
.text:0000257B                 call    ?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)
.text:00002580                 mov     ecx, [ebp+var_4] ; this
.text:00002583                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002588                 mov     [ebp+var_C], eax
.text:0000258B                 mov     [ebp+var_8], edx
.text:0000258E
.text:0000258E loc_258E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2Cj
.text:0000258E                                         ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+32j
.text:0000258E                 cmp     [ebp+var_C], 7
.text:00002592                 jnz     short loc_25B8
.text:00002594                 cmp     [ebp+var_8], 0
.text:00002598                 jnz     short loc_25B8
.text:0000259A                 mov     eax, [ebp+arg_8]
.text:0000259D                 push    eax
.text:0000259E                 mov     ecx, [ebp+arg_0]
.text:000025A1                 push    ecx
.text:000025A2                 mov     ecx, [ebp+var_4]
.text:000025A5                 call    ?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)
.text:000025AA                 mov     ecx, [ebp+var_4] ; this
.text:000025AD                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:000025B2                 mov     [ebp+var_C], eax
.text:000025B5                 mov     [ebp+var_8], edx
.text:000025B8
.text:000025B8 loc_25B8:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+62j
.text:000025B8                                         ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+68j
.text:000025B8                 mov     edx, [ebp+arg_8]
.text:000025BB                 cmp     dword ptr [edx+4], 0
.text:000025BF                 jz      short loc_25F5
.text:000025C1                 mov     ecx, [ebp+arg_8]
.text:000025C4                 add     ecx, 8
.text:000025C7                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:000025CC                 test    eax, eax
.text:000025CE                 jnz     short loc_25F5
.text:000025D0                 push    1
.text:000025D2                 mov     ecx, [ebp+arg_8]
.text:000025D5                 add     ecx, 8
.text:000025D8                 call    ?Alloc@?$CObjArray@_K@@QAEXI@Z ; CObjArray<unsigned __int64>::Alloc(uint)
.text:000025DD                 mov     ecx, [ebp+arg_8]
.text:000025E0                 add     ecx, 8
.text:000025E3                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:000025E8                 mov     dword ptr [eax], 0
.text:000025EE                 mov     dword ptr [eax+4], 0
.text:000025F5
.text:000025F5 loc_25F5:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+8Fj
.text:000025F5                                         ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+9Ej
.text:000025F5                 cmp     [ebp+var_C], 8
.text:000025F9                 jnz     short loc_2625
.text:000025FB                 cmp     [ebp+var_8], 0
.text:000025FF                 jnz     short loc_2625
.text:00002601                 mov     eax, [ebp+arg_10]
.text:00002604                 push    eax             ; NArchive::N7z::CUInt32DefVector *
.text:00002605                 mov     ecx, [ebp+arg_C]
.text:00002608                 push    ecx             ; int
.text:00002609                 mov     edx, [ebp+arg_8]
.text:0000260C                 push    edx             ; NArchive::N7z::CFolders *
.text:0000260D                 mov     ecx, [ebp+var_4]
.text:00002610                 call    ?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)
.text:00002615                 mov     ecx, [ebp+var_4] ; this
.text:00002618                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:0000261D                 mov     [ebp+var_C], eax
.text:00002620                 mov     [ebp+var_8], edx
.text:00002623                 jmp     short loc_2681
.text:00002625 ; ---------------------------------------------------------------------------
.text:00002625
.text:00002625 loc_2625:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+C9j
.text:00002625                                         ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+CFj
.text:00002625                 mov     eax, [ebp+arg_8]
.text:00002628                 mov     ecx, [eax+4]
.text:0000262B                 push    ecx
.text:0000262C                 mov     ecx, [ebp+arg_8]
.text:0000262F                 add     ecx, 24h ; '$'
.text:00002632                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:00002637                 mov     [ebp+var_10], 0
.text:0000263E                 jmp     short loc_2649
.text:00002640 ; ---------------------------------------------------------------------------
.text:00002640
.text:00002640 loc_2640:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+14Fj
.text:00002640                 mov     edx, [ebp+var_10]
.text:00002643                 add     edx, 1
.text:00002646                 mov     [ebp+var_10], edx
.text:00002649
.text:00002649 loc_2649:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+10Ej
.text:00002649                 mov     eax, [ebp+arg_8]
.text:0000264C                 mov     ecx, [ebp+var_10]
.text:0000264F                 cmp     ecx, [eax+4]
.text:00002652                 jnb     short loc_2681
.text:00002654                 mov     ecx, [ebp+arg_8]
.text:00002657                 add     ecx, 24h ; '$'
.text:0000265A                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:0000265F                 mov     edx, [ebp+var_10]
.text:00002662                 mov     dword ptr [eax+edx*4], 1
.text:00002669                 mov     eax, [ebp+var_10]
.text:0000266C                 push    eax             ; unsigned int
.text:0000266D                 mov     ecx, [ebp+arg_8] ; this
.text:00002670                 call    ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)
.text:00002675                 push    edx
.text:00002676                 push    eax
.text:00002677                 mov     ecx, [ebp+arg_C]
.text:0000267A                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000267F                 jmp     short loc_2640
.text:00002681 ; ---------------------------------------------------------------------------
.text:00002681
.text:00002681 loc_2681:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+F3j
.text:00002681                                         ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+122j
.text:00002681                 mov     ecx, [ebp+var_C]
.text:00002684                 or      ecx, [ebp+var_8]
.text:00002687                 jz      short loc_268E
.text:00002689                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:0000268E ; ---------------------------------------------------------------------------
.text:0000268E
.text:0000268E loc_268E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+157j
.text:0000268E                 add     esp, 10h
.text:00002691                 cmp     ebp, esp
.text:00002693                 call    __RTC_CheckEsp
.text:00002698                 mov     esp, ebp
.text:0000269A                 pop     ebp
.text:0000269B                 retn    14h
.text:0000269B ?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z endp
.text:0000269B
.text:0000269B ; ---------------------------------------------------------------------------
.text:0000269E                 align 10h
.text:000026A0
.text:000026A0 ; =============== S U B R O U T I N E =======================================
.text:000026A0
.text:000026A0 ; Attributes: bp-based frame
.text:000026A0
.text:000026A0 ; private: void __thiscall NArchive::N7z::CInArchive::ReadBoolVector(unsigned int, class CRecordVector<bool> &)
.text:000026A0                 public ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z
.text:000026A0 ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z proc near
.text:000026A0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+38p
.text:000026A0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+639p ...
.text:000026A0
.text:000026A0 var_10          = dword ptr -10h
.text:000026A0 var_C           = dword ptr -0Ch
.text:000026A0 var_8           = dword ptr -8
.text:000026A0 var_4           = dword ptr -4
.text:000026A0 arg_0           = dword ptr  8
.text:000026A0 arg_4           = dword ptr  0Ch
.text:000026A0
.text:000026A0                 push    ebp
.text:000026A1                 mov     ebp, esp
.text:000026A3                 sub     esp, 10h
.text:000026A6                 mov     eax, 0CCCCCCCCh
.text:000026AB                 mov     [ebp+var_10], eax
.text:000026AE                 mov     [ebp+var_C], eax
.text:000026B1                 mov     [ebp+var_8], eax
.text:000026B4                 mov     [ebp+var_4], eax
.text:000026B7                 mov     [ebp+var_4], ecx
.text:000026BA                 mov     eax, [ebp+arg_0]
.text:000026BD                 push    eax
.text:000026BE                 mov     ecx, [ebp+arg_4]
.text:000026C1                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:000026C6                 mov     byte ptr [ebp+var_8+3], 0
.text:000026CA                 mov     byte ptr [ebp+var_8+2], 0
.text:000026CE                 push    0
.text:000026D0                 mov     ecx, [ebp+arg_4]
.text:000026D3                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000026D8                 mov     [ebp+var_C], eax
.text:000026DB                 mov     [ebp+var_10], 0
.text:000026E2                 jmp     short loc_26ED
.text:000026E4 ; ---------------------------------------------------------------------------
.text:000026E4
.text:000026E4 loc_26E4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+8Cj
.text:000026E4                 mov     ecx, [ebp+var_10]
.text:000026E7                 add     ecx, 1
.text:000026EA                 mov     [ebp+var_10], ecx
.text:000026ED
.text:000026ED loc_26ED:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+42j
.text:000026ED                 mov     edx, [ebp+var_10]
.text:000026F0                 cmp     edx, [ebp+arg_0]
.text:000026F3                 jnb     short loc_272E
.text:000026F5                 movzx   eax, byte ptr [ebp+var_8+2]
.text:000026F9                 test    eax, eax
.text:000026FB                 jnz     short loc_270C
.text:000026FD                 mov     ecx, [ebp+var_4] ; this
.text:00002700                 call    ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte(void)
.text:00002705                 mov     byte ptr [ebp+var_8+3], al
.text:00002708                 mov     byte ptr [ebp+var_8+2], 80h ; 'Ç'
.text:0000270C
.text:0000270C loc_270C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+5Bj
.text:0000270C                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00002710                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00002714                 and     ecx, edx
.text:00002716                 neg     ecx
.text:00002718                 sbb     ecx, ecx
.text:0000271A                 neg     ecx
.text:0000271C                 mov     eax, [ebp+var_C]
.text:0000271F                 add     eax, [ebp+var_10]
.text:00002722                 mov     [eax], cl
.text:00002724                 mov     cl, byte ptr [ebp+var_8+2]
.text:00002727                 shr     cl, 1
.text:00002729                 mov     byte ptr [ebp+var_8+2], cl
.text:0000272C                 jmp     short loc_26E4
.text:0000272E ; ---------------------------------------------------------------------------
.text:0000272E
.text:0000272E loc_272E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+53j
.text:0000272E                 add     esp, 10h
.text:00002731                 cmp     ebp, esp
.text:00002733                 call    __RTC_CheckEsp
.text:00002738                 mov     esp, ebp
.text:0000273A                 pop     ebp
.text:0000273B                 retn    8
.text:0000273B ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z endp
.text:0000273B
.text:0000273B ; ---------------------------------------------------------------------------
.text:0000273E                 align 10h
.text:00002740
.text:00002740 ; =============== S U B R O U T I N E =======================================
.text:00002740
.text:00002740 ; Attributes: bp-based frame
.text:00002740
.text:00002740 ; private: void __thiscall NArchive::N7z::CInArchive::ReadBoolVector2(unsigned int, class CRecordVector<bool> &)
.text:00002740                 public ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z
.text:00002740 ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z proc near
.text:00002740                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+28p
.text:00002740                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+313p ...
.text:00002740
.text:00002740 var_10          = dword ptr -10h
.text:00002740 var_C           = dword ptr -0Ch
.text:00002740 var_8           = dword ptr -8
.text:00002740 var_4           = dword ptr -4
.text:00002740 arg_0           = dword ptr  8
.text:00002740 arg_4           = dword ptr  0Ch
.text:00002740
.text:00002740                 push    ebp
.text:00002741                 mov     ebp, esp
.text:00002743                 sub     esp, 10h
.text:00002746                 mov     eax, 0CCCCCCCCh
.text:0000274B                 mov     [ebp+var_10], eax
.text:0000274E                 mov     [ebp+var_C], eax
.text:00002751                 mov     [ebp+var_8], eax
.text:00002754                 mov     [ebp+var_4], eax
.text:00002757                 mov     [ebp+var_4], ecx
.text:0000275A                 mov     ecx, [ebp+var_4] ; this
.text:0000275D                 call    ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte(void)
.text:00002762                 mov     byte ptr [ebp+var_8+3], al
.text:00002765                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00002769                 test    eax, eax
.text:0000276B                 jnz     short loc_277F
.text:0000276D                 mov     ecx, [ebp+arg_4]
.text:00002770                 push    ecx
.text:00002771                 mov     edx, [ebp+arg_0]
.text:00002774                 push    edx
.text:00002775                 mov     ecx, [ebp+var_4]
.text:00002778                 call    ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)
.text:0000277D                 jmp     short loc_27BD
.text:0000277F ; ---------------------------------------------------------------------------
.text:0000277F
.text:0000277F loc_277F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+2Bj
.text:0000277F                 mov     eax, [ebp+arg_0]
.text:00002782                 push    eax
.text:00002783                 mov     ecx, [ebp+arg_4]
.text:00002786                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:0000278B                 push    0
.text:0000278D                 mov     ecx, [ebp+arg_4]
.text:00002790                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002795                 mov     [ebp+var_C], eax
.text:00002798                 mov     [ebp+var_10], 0
.text:0000279F                 jmp     short loc_27AA
.text:000027A1 ; ---------------------------------------------------------------------------
.text:000027A1
.text:000027A1 loc_27A1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+7Bj
.text:000027A1                 mov     ecx, [ebp+var_10]
.text:000027A4                 add     ecx, 1
.text:000027A7                 mov     [ebp+var_10], ecx
.text:000027AA
.text:000027AA loc_27AA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+5Fj
.text:000027AA                 mov     edx, [ebp+var_10]
.text:000027AD                 cmp     edx, [ebp+arg_0]
.text:000027B0                 jnb     short loc_27BD
.text:000027B2                 mov     eax, [ebp+var_C]
.text:000027B5                 add     eax, [ebp+var_10]
.text:000027B8                 mov     byte ptr [eax], 1
.text:000027BB                 jmp     short loc_27A1
.text:000027BD ; ---------------------------------------------------------------------------
.text:000027BD
.text:000027BD loc_27BD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+3Dj
.text:000027BD                                         ; NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)+70j
.text:000027BD                 add     esp, 10h
.text:000027C0                 cmp     ebp, esp
.text:000027C2                 call    __RTC_CheckEsp
.text:000027C7                 mov     esp, ebp
.text:000027C9                 pop     ebp
.text:000027CA                 retn    8
.text:000027CA ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z endp
.text:000027CA
.text:000027CA ; ---------------------------------------------------------------------------
.text:000027CD                 align 10h
.text:000027D0
.text:000027D0 ; =============== S U B R O U T I N E =======================================
.text:000027D0
.text:000027D0 ; Attributes: bp-based frame
.text:000027D0
.text:000027D0 ; private: void __thiscall NArchive::N7z::CInArchive::ReadUInt64DefVector(class CObjectVector<class CBuffer<unsigned char>> const &, struct NArchive::N7z::CUInt64DefVector &, unsigned int)
.text:000027D0                 public ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
.text:000027D0 ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z proc near
.text:000027D0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+701p
.text:000027D0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+71Dp ...
.text:000027D0
.text:000027D0 var_34          = dword ptr -34h
.text:000027D0 var_30          = dword ptr -30h
.text:000027D0 var_2C          = dword ptr -2Ch
.text:000027D0 var_28          = dword ptr -28h
.text:000027D0 var_24          = dword ptr -24h
.text:000027D0 var_1C          = byte ptr -1Ch
.text:000027D0 var_10          = dword ptr -10h
.text:000027D0 var_C           = dword ptr -0Ch
.text:000027D0 var_4           = dword ptr -4
.text:000027D0 arg_0           = dword ptr  8
.text:000027D0 arg_4           = dword ptr  0Ch
.text:000027D0 arg_8           = dword ptr  10h
.text:000027D0
.text:000027D0                 push    ebp
.text:000027D1                 mov     ebp, esp
.text:000027D3                 push    0FFFFFFFFh
.text:000027D5                 push    offset __ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
.text:000027DA                 mov     eax, large fs:0
.text:000027E0                 push    eax
.text:000027E1                 sub     esp, 28h
.text:000027E4                 push    edi
.text:000027E5                 push    ecx
.text:000027E6                 lea     edi, [ebp+var_34]
.text:000027E9                 mov     ecx, 0Ah
.text:000027EE                 mov     eax, 0CCCCCCCCh
.text:000027F3                 rep stosd
.text:000027F5                 pop     ecx
.text:000027F6                 mov     eax, dword ptr ds:___security_cookie
.text:000027FB                 xor     eax, ebp
.text:000027FD                 push    eax
.text:000027FE                 lea     eax, [ebp+var_C]
.text:00002801                 mov     large fs:0, eax
.text:00002807                 mov     [ebp+var_10], ecx
.text:0000280A                 mov     eax, [ebp+arg_4]
.text:0000280D                 push    eax
.text:0000280E                 mov     ecx, [ebp+arg_8]
.text:00002811                 push    ecx
.text:00002812                 mov     ecx, [ebp+var_10]
.text:00002815                 call    ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)
.text:0000281A                 lea     ecx, [ebp+var_1C] ; this
.text:0000281D                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:00002822                 mov     [ebp+var_4], 0
.text:00002829                 mov     edx, [ebp+arg_0]
.text:0000282C                 push    edx             ; int
.text:0000282D                 mov     eax, [ebp+var_10]
.text:00002830                 push    eax             ; NArchive::N7z::CInArchive *
.text:00002831                 lea     ecx, [ebp+var_1C]
.text:00002834                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)
.text:00002839                 mov     ecx, [ebp+arg_8]
.text:0000283C                 push    ecx
.text:0000283D                 mov     ecx, [ebp+arg_4]
.text:00002840                 add     ecx, 0Ch
.text:00002843                 call    ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize(uint)
.text:00002848                 push    0
.text:0000284A                 mov     ecx, [ebp+arg_4]
.text:0000284D                 add     ecx, 0Ch
.text:00002850                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00002855                 mov     [ebp+var_24], eax
.text:00002858                 push    0
.text:0000285A                 mov     ecx, [ebp+arg_4]
.text:0000285D                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002862                 mov     [ebp+var_28], eax
.text:00002865                 mov     [ebp+var_2C], 0
.text:0000286C                 jmp     short loc_2877
.text:0000286E ; ---------------------------------------------------------------------------
.text:0000286E
.text:0000286E loc_286E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+EBj
.text:0000286E                 mov     edx, [ebp+var_2C]
.text:00002871                 add     edx, 1
.text:00002874                 mov     [ebp+var_2C], edx
.text:00002877
.text:00002877 loc_2877:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+9Cj
.text:00002877                 mov     eax, [ebp+var_2C]
.text:0000287A                 cmp     eax, [ebp+arg_8]
.text:0000287D                 jnb     short loc_28BD
.text:0000287F                 mov     [ebp+var_34], 0
.text:00002886                 mov     [ebp+var_30], 0
.text:0000288D                 mov     ecx, [ebp+var_28]
.text:00002890                 add     ecx, [ebp+var_2C]
.text:00002893                 movzx   edx, byte ptr [ecx]
.text:00002896                 test    edx, edx
.text:00002898                 jz      short loc_28A8
.text:0000289A                 mov     ecx, [ebp+var_10] ; this
.text:0000289D                 call    ?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadUInt64(void)
.text:000028A2                 mov     [ebp+var_34], eax
.text:000028A5                 mov     [ebp+var_30], edx
.text:000028A8
.text:000028A8 loc_28A8:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+C8j
.text:000028A8                 mov     eax, [ebp+var_2C]
.text:000028AB                 mov     ecx, [ebp+var_24]
.text:000028AE                 mov     edx, [ebp+var_34]
.text:000028B1                 mov     [ecx+eax*8], edx
.text:000028B4                 mov     edx, [ebp+var_30]
.text:000028B7                 mov     [ecx+eax*8+4], edx
.text:000028BB                 jmp     short loc_286E
.text:000028BD ; ---------------------------------------------------------------------------
.text:000028BD
.text:000028BD loc_28BD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+ADj
.text:000028BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000028C4                 lea     ecx, [ebp+var_1C] ; this
.text:000028C7                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:000028CC                 push    edx
.text:000028CD                 mov     ecx, ebp
.text:000028CF                 push    eax
.text:000028D0                 lea     edx, $LN11
.text:000028D6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000028DB                 pop     eax
.text:000028DC                 pop     edx
.text:000028DD                 mov     ecx, [ebp+var_C]
.text:000028E0                 mov     large fs:0, ecx
.text:000028E7                 pop     ecx
.text:000028E8                 pop     edi
.text:000028E9                 add     esp, 34h
.text:000028EC                 cmp     ebp, esp
.text:000028EE                 call    __RTC_CheckEsp
.text:000028F3                 mov     esp, ebp
.text:000028F5                 pop     ebp
.text:000028F6                 retn    0Ch
.text:000028F6 ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z endp
.text:000028F6
.text:000028F6 ; ---------------------------------------------------------------------------
.text:000028F9                 align 4
.text:000028FC $LN11           dd 1                    ; DATA XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+100o
.text:00002900                 dd offset $LN10
.text:00002904 $LN10           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:00002900o
.text:0000290C                 dd offset $LN8          ; "streamSwitch"
.text:00002910 $LN8            db 'streamSwitch',0     ; DATA XREF: .text:0000290Co
.text:0000291D                 align 10h
.text:00002920
.text:00002920 ; =============== S U B R O U T I N E =======================================
.text:00002920
.text:00002920 ; Attributes: bp-based frame
.text:00002920
.text:00002920 ; int __stdcall NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(int, int, int, int, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *)
.text:00002920                 public ?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
.text:00002920 ?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z proc near
.text:00002920                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+CEp
.text:00002920                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+6F7p
.text:00002920
.text:00002920 var_158         = dword ptr -158h
.text:00002920 var_154         = dword ptr -154h
.text:00002920 var_150         = dword ptr -150h
.text:00002920 var_14C         = dword ptr -14Ch
.text:00002920 var_148         = dword ptr -148h
.text:00002920 var_144         = dword ptr -144h
.text:00002920 var_140         = dword ptr -140h
.text:00002920 var_13C         = dword ptr -13Ch
.text:00002920 var_138         = dword ptr -138h
.text:00002920 var_130         = byte ptr -130h
.text:00002920 var_128         = dword ptr -128h
.text:00002920 var_124         = dword ptr -124h
.text:00002920 var_120         = dword ptr -120h
.text:00002920 var_11C         = dword ptr -11Ch
.text:00002920 var_118         = dword ptr -118h
.text:00002920 var_114         = dword ptr -114h
.text:00002920 var_10C         = byte ptr -10Ch
.text:00002920 var_A0          = byte ptr -0A0h
.text:00002920 var_80          = dword ptr -80h
.text:00002920 var_6C          = dword ptr -6Ch
.text:00002920 var_68          = dword ptr -68h
.text:00002920 var_64          = byte ptr -64h
.text:00002920 var_60          = byte ptr -60h
.text:00002920 var_54          = byte ptr -54h
.text:00002920 var_10          = dword ptr -10h
.text:00002920 var_C           = dword ptr -0Ch
.text:00002920 var_4           = dword ptr -4
.text:00002920 arg_0           = dword ptr  8
.text:00002920 arg_4           = dword ptr  0Ch
.text:00002920 arg_8           = dword ptr  10h
.text:00002920 arg_C           = dword ptr  14h
.text:00002920 arg_10          = dword ptr  18h
.text:00002920 arg_14          = dword ptr  1Ch
.text:00002920 arg_18          = dword ptr  20h
.text:00002920 arg_1C          = dword ptr  24h
.text:00002920
.text:00002920                 push    ebp
.text:00002921                 mov     ebp, esp
.text:00002923                 push    0FFFFFFFFh
.text:00002925                 push    offset __ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
.text:0000292A                 mov     eax, large fs:0
.text:00002930                 push    eax
.text:00002931                 sub     esp, 14Ch
.text:00002937                 push    esi
.text:00002938                 push    edi
.text:00002939                 push    ecx
.text:0000293A                 lea     edi, [ebp+var_158]
.text:00002940                 mov     ecx, 53h ; 'S'
.text:00002945                 mov     eax, 0CCCCCCCCh
.text:0000294A                 rep stosd
.text:0000294C                 pop     ecx
.text:0000294D                 mov     eax, dword ptr ds:___security_cookie
.text:00002952                 xor     eax, ebp
.text:00002954                 push    eax
.text:00002955                 lea     eax, [ebp+var_C]
.text:00002958                 mov     large fs:0, eax
.text:0000295E                 mov     [ebp+var_10], ecx
.text:00002961                 lea     ecx, [ebp+var_6C] ; this
.text:00002964                 call    ??0CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::CFolders(void)
.text:00002969                 mov     [ebp+var_4], 0
.text:00002970                 lea     ecx, [ebp+var_80]
.text:00002973                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00002978                 mov     byte ptr [ebp+var_4], 1
.text:0000297C                 lea     ecx, [ebp+var_A0] ; this
.text:00002982                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:00002987                 mov     byte ptr [ebp+var_4], 2
.text:0000298B                 lea     eax, [ebp+var_A0]
.text:00002991                 push    eax             ; NArchive::N7z::CUInt32DefVector *
.text:00002992                 lea     ecx, [ebp+var_80]
.text:00002995                 push    ecx             ; int
.text:00002996                 lea     edx, [ebp+var_6C]
.text:00002999                 push    edx             ; NArchive::N7z::CFolders *
.text:0000299A                 mov     eax, [ebp+arg_8]
.text:0000299D                 push    eax             ; int
.text:0000299E                 push    0               ; int
.text:000029A0                 mov     ecx, [ebp+var_10]
.text:000029A3                 call    ?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)
.text:000029A8                 mov     ecx, [ebp+var_10]
.text:000029AB                 movzx   edx, byte ptr [ecx+78h]
.text:000029AF                 push    edx             ; bool
.text:000029B0                 lea     ecx, [ebp+var_10C] ; this
.text:000029B6                 call    ??0CDecoder@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CDecoder::CDecoder(bool)
.text:000029BB                 mov     byte ptr [ebp+var_4], 3
.text:000029BF                 mov     [ebp+var_114], 0
.text:000029C9                 jmp     short loc_29DA
.text:000029CB ; ---------------------------------------------------------------------------
.text:000029CB
.text:000029CB loc_29CB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2F5j
.text:000029CB                 mov     eax, [ebp+var_114]
.text:000029D1                 add     eax, 1
.text:000029D4                 mov     [ebp+var_114], eax
.text:000029DA
.text:000029DA loc_29DA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+A9j
.text:000029DA                 mov     ecx, [ebp+var_114]
.text:000029E0                 cmp     ecx, [ebp+var_68]
.text:000029E3                 jnb     loc_2C1A
.text:000029E9                 mov     ecx, [ebp+arg_C]
.text:000029EC                 call    ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<uchar>>::AddNew(void)
.text:000029F1                 mov     [ebp+var_118], eax
.text:000029F7                 mov     edx, [ebp+var_114]
.text:000029FD                 push    edx             ; unsigned int
.text:000029FE                 lea     ecx, [ebp+var_6C] ; this
.text:00002A01                 call    ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)
.text:00002A06                 mov     [ebp+var_120], eax
.text:00002A0C                 mov     [ebp+var_11C], edx
.text:00002A12                 mov     eax, [ebp+var_120]
.text:00002A18                 mov     [ebp+var_124], eax
.text:00002A1E                 mov     ecx, [ebp+var_124]
.text:00002A24                 xor     edx, edx
.text:00002A26                 mov     [ebp+var_154], ecx
.text:00002A2C                 mov     [ebp+var_150], edx
.text:00002A32                 mov     eax, [ebp+var_154]
.text:00002A38                 cmp     eax, [ebp+var_120]
.text:00002A3E                 jnz     short loc_2A4E
.text:00002A40                 mov     ecx, [ebp+var_150]
.text:00002A46                 cmp     ecx, [ebp+var_11C]
.text:00002A4C                 jz      short loc_2A53
.text:00002A4E
.text:00002A4E loc_2A4E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+11Ej
.text:00002A4E                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00002A53 ; ---------------------------------------------------------------------------
.text:00002A53
.text:00002A53 loc_2A53:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+12Cj
.text:00002A53                 mov     edx, [ebp+var_124]
.text:00002A59                 push    edx
.text:00002A5A                 mov     ecx, [ebp+var_118]
.text:00002A60                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00002A65                 push    14h             ; unsigned int
.text:00002A67                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002A6C                 add     esp, 4
.text:00002A6F                 mov     [ebp+var_144], eax
.text:00002A75                 mov     byte ptr [ebp+var_4], 4
.text:00002A79                 cmp     [ebp+var_144], 0
.text:00002A80                 jz      short loc_2A95
.text:00002A82                 mov     ecx, [ebp+var_144]
.text:00002A88                 call    ??0CBufPtrSeqOutStream@@QAE@XZ ; CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)
.text:00002A8D                 mov     [ebp+var_158], eax
.text:00002A93                 jmp     short loc_2A9F
.text:00002A95 ; ---------------------------------------------------------------------------
.text:00002A95
.text:00002A95 loc_2A95:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+160j
.text:00002A95                 mov     [ebp+var_158], 0
.text:00002A9F
.text:00002A9F loc_2A9F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+173j
.text:00002A9F                 mov     eax, [ebp+var_158]
.text:00002AA5                 mov     [ebp+var_140], eax
.text:00002AAB                 mov     byte ptr [ebp+var_4], 3
.text:00002AAF                 mov     ecx, [ebp+var_140]
.text:00002AB5                 mov     [ebp+var_128], ecx
.text:00002ABB                 mov     edx, [ebp+var_128]
.text:00002AC1                 push    edx
.text:00002AC2                 lea     ecx, [ebp+var_130]
.text:00002AC8                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00002ACD                 mov     byte ptr [ebp+var_4], 5
.text:00002AD1                 mov     eax, [ebp+var_124]
.text:00002AD7                 push    eax             ; unsigned int
.text:00002AD8                 mov     ecx, [ebp+var_118]
.text:00002ADE                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00002AE3                 push    eax             ; unsigned __int8 *
.text:00002AE4                 mov     ecx, [ebp+var_128] ; this
.text:00002AEA                 call    ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z ; CBufPtrSeqOutStream::Init(uchar *,uint)
.text:00002AEF                 push    1               ; unsigned int
.text:00002AF1                 push    0               ; bool
.text:00002AF3                 mov     ecx, [ebp+arg_1C]
.text:00002AF6                 push    ecx             ; struct UString *
.text:00002AF7                 mov     edx, [ebp+arg_18]
.text:00002AFA                 push    edx             ; bool *
.text:00002AFB                 mov     eax, [ebp+arg_14]
.text:00002AFE                 push    eax             ; bool *
.text:00002AFF                 mov     ecx, [ebp+arg_10]
.text:00002B02                 push    ecx             ; struct ICryptoGetTextPassword *
.text:00002B03                 push    0               ; struct ISequentialInStream **
.text:00002B05                 push    0               ; struct ICompressProgressInfo *
.text:00002B07                 lea     ecx, [ebp+var_130]
.text:00002B0D                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002B12                 push    eax             ; struct ISequentialOutStream *
.text:00002B13                 push    0               ; unsigned __int64 *
.text:00002B15                 mov     edx, [ebp+var_114]
.text:00002B1B                 push    edx             ; unsigned int
.text:00002B1C                 lea     eax, [ebp+var_6C]
.text:00002B1F                 push    eax             ; struct NArchive::N7z::CFolders *
.text:00002B20                 mov     ecx, [ebp+arg_8]
.text:00002B23                 mov     edx, [ebp+arg_0]
.text:00002B26                 add     edx, [ecx]
.text:00002B28                 mov     eax, [ebp+arg_4]
.text:00002B2B                 adc     eax, [ecx+4]
.text:00002B2E                 push    eax
.text:00002B2F                 push    edx             ; unsigned __int64
.text:00002B30                 mov     ecx, [ebp+var_10]
.text:00002B33                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002B38                 push    eax             ; struct IInStream *
.text:00002B39                 lea     ecx, [ebp+var_10C] ; this
.text:00002B3F                 call    ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)
.text:00002B44                 mov     [ebp+var_138], eax
.text:00002B4A                 mov     ecx, [ebp+var_138]
.text:00002B50                 mov     [ebp+var_13C], ecx
.text:00002B56                 cmp     [ebp+var_13C], 0
.text:00002B5D                 jz      short loc_2BBE
.text:00002B5F                 mov     edx, [ebp+var_13C]
.text:00002B65                 mov     [ebp+var_148], edx
.text:00002B6B                 mov     byte ptr [ebp+var_4], 3
.text:00002B6F                 lea     ecx, [ebp+var_130]
.text:00002B75                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002B7A                 mov     byte ptr [ebp+var_4], 2
.text:00002B7E                 lea     ecx, [ebp+var_10C] ; this
.text:00002B84                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00002B89                 mov     byte ptr [ebp+var_4], 1
.text:00002B8D                 lea     ecx, [ebp+var_A0] ; this
.text:00002B93                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00002B98                 mov     byte ptr [ebp+var_4], 0
.text:00002B9C                 lea     ecx, [ebp+var_80]
.text:00002B9F                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002BA4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002BAB                 lea     ecx, [ebp+var_6C] ; this
.text:00002BAE                 call    ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text:00002BB3                 mov     eax, [ebp+var_148]
.text:00002BB9                 jmp     loc_2C87
.text:00002BBE ; ---------------------------------------------------------------------------
.text:00002BBE
.text:00002BBE loc_2BBE:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+23Dj
.text:00002BBE                 mov     eax, [ebp+var_114]
.text:00002BC4                 push    eax             ; unsigned int
.text:00002BC5                 lea     ecx, [ebp+var_60] ; this
.text:00002BC8                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:00002BCD                 movzx   ecx, al
.text:00002BD0                 test    ecx, ecx
.text:00002BD2                 jz      short loc_2C06
.text:00002BD4                 mov     ecx, [ebp+var_118]
.text:00002BDA                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00002BDF                 mov     edx, [ebp+var_124]
.text:00002BE5                 mov     ecx, eax
.text:00002BE7                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00002BEC                 mov     esi, eax
.text:00002BEE                 mov     edx, [ebp+var_114]
.text:00002BF4                 push    edx
.text:00002BF5                 lea     ecx, [ebp+var_54]
.text:00002BF8                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002BFD                 cmp     esi, [eax]
.text:00002BFF                 jz      short loc_2C06
.text:00002C01                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00002C06 ; ---------------------------------------------------------------------------
.text:00002C06
.text:00002C06 loc_2C06:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2B2j
.text:00002C06                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2DFj
.text:00002C06                 mov     byte ptr [ebp+var_4], 3
.text:00002C0A                 lea     ecx, [ebp+var_130]
.text:00002C10                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002C15                 jmp     loc_29CB
.text:00002C1A ; ---------------------------------------------------------------------------
.text:00002C1A
.text:00002C1A loc_2C1A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+C3j
.text:00002C1A                 lea     ecx, [ebp+var_64]
.text:00002C1D                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00002C22                 mov     ecx, [ebp+var_10]
.text:00002C25                 mov     edx, [ebp+var_6C]
.text:00002C28                 mov     esi, [ecx+70h]
.text:00002C2B                 add     esi, [eax+edx*8]
.text:00002C2E                 mov     ecx, [ecx+74h]
.text:00002C31                 adc     ecx, [eax+edx*8+4]
.text:00002C35                 mov     edx, [ebp+var_10]
.text:00002C38                 mov     [edx+70h], esi
.text:00002C3B                 mov     [edx+74h], ecx
.text:00002C3E                 mov     [ebp+var_14C], 0
.text:00002C48                 mov     byte ptr [ebp+var_4], 2
.text:00002C4C                 lea     ecx, [ebp+var_10C] ; this
.text:00002C52                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00002C57                 mov     byte ptr [ebp+var_4], 1
.text:00002C5B                 lea     ecx, [ebp+var_A0] ; this
.text:00002C61                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00002C66                 mov     byte ptr [ebp+var_4], 0
.text:00002C6A                 lea     ecx, [ebp+var_80]
.text:00002C6D                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002C72                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C79                 lea     ecx, [ebp+var_6C] ; this
.text:00002C7C                 call    ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text:00002C81                 mov     eax, [ebp+var_14C]
.text:00002C87
.text:00002C87 loc_2C87:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+299j
.text:00002C87                 push    edx
.text:00002C88                 mov     ecx, ebp
.text:00002C8A                 push    eax
.text:00002C8B                 lea     edx, $LN26_0
.text:00002C91                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002C96                 pop     eax
.text:00002C97                 pop     edx
.text:00002C98                 mov     ecx, [ebp+var_C]
.text:00002C9B                 mov     large fs:0, ecx
.text:00002CA2                 pop     ecx
.text:00002CA3                 pop     edi
.text:00002CA4                 pop     esi
.text:00002CA5                 add     esp, 158h
.text:00002CAB                 cmp     ebp, esp
.text:00002CAD                 call    __RTC_CheckEsp
.text:00002CB2                 mov     esp, ebp
.text:00002CB4                 pop     ebp
.text:00002CB5                 retn    20h
.text:00002CB5 ?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z endp
.text:00002CB5
.text:00002CB5 ; ---------------------------------------------------------------------------
.text:00002CB8 $LN26_0         dd 5                    ; DATA XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+36Bo
.text:00002CBC                 dd offset $LN25
.text:00002CC0 $LN25           dd 0FFFFFF94h, 58h      ; DATA XREF: .text:00002CBCo
.text:00002CC8                 dd offset $LN19         ; "folders"
.text:00002CCC                 dd 0FFFFFF80h, 0Ch
.text:00002CD4                 dd offset $LN20         ; "unpackSizes"
.text:00002CD8                 dd 0FFFFFF60h, 18h
.text:00002CE0                 dd offset $LN21         ; "digests"
.text:00002CE4                 dd 0FFFFFEF4h, 64h
.text:00002CEC                 dd offset $LN22         ; "decoder"
.text:00002CF0                 dd 0FFFFFED0h, 4
.text:00002CF8                 dd offset $LN23         ; "outStream"
.text:00002CFC $LN23           db 'outStream',0        ; DATA XREF: .text:00002CF8o
.text:00002D06 $LN22           db 'decoder',0          ; DATA XREF: .text:00002CECo
.text:00002D0E $LN21           db 'digests',0          ; DATA XREF: .text:00002CE0o
.text:00002D16 $LN20           db 'unpackSizes',0      ; DATA XREF: .text:00002CD4o
.text:00002D22 $LN19           db 'folders',0          ; DATA XREF: .text:00002CC8o
.text:00002D2A                 align 10h
.text:00002D30
.text:00002D30 ; =============== S U B R O U T I N E =======================================
.text:00002D30
.text:00002D30 ; Attributes: bp-based frame
.text:00002D30
.text:00002D30 ; __int32 __thiscall NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CInArchive *this, struct NArchive::N7z::CDbEx *, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *)
.text:00002D30                 public ?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00002D30 ?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text:00002D30                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+851p
.text:00002D30
.text:00002D30 var_154         = dword ptr -154h
.text:00002D30 var_150         = dword ptr -150h
.text:00002D30 var_14C         = dword ptr -14Ch
.text:00002D30 var_148         = dword ptr -148h
.text:00002D30 var_144         = dword ptr -144h
.text:00002D30 var_13D         = byte ptr -13Dh
.text:00002D30 var_13C         = dword ptr -13Ch
.text:00002D30 var_138         = dword ptr -138h
.text:00002D30 var_134         = dword ptr -134h
.text:00002D30 var_130         = dword ptr -130h
.text:00002D30 var_12C         = dword ptr -12Ch
.text:00002D30 var_128         = dword ptr -128h
.text:00002D30 var_124         = dword ptr -124h
.text:00002D30 var_11C         = byte ptr -11Ch
.text:00002D30 var_10C         = byte ptr -10Ch
.text:00002D30 var_FC          = dword ptr -0FCh
.text:00002D30 var_F8          = dword ptr -0F8h
.text:00002D30 var_F4          = dword ptr -0F4h
.text:00002D30 var_F0          = dword ptr -0F0h
.text:00002D30 var_EC          = dword ptr -0ECh
.text:00002D30 var_E8          = dword ptr -0E8h
.text:00002D30 var_E0          = byte ptr -0E0h
.text:00002D30 var_D2          = byte ptr -0D2h
.text:00002D30 var_D1          = byte ptr -0D1h
.text:00002D30 var_CC          = byte ptr -0CCh
.text:00002D30 var_C0          = dword ptr -0C0h
.text:00002D30 var_BC          = dword ptr -0BCh
.text:00002D30 var_B8          = dword ptr -0B8h
.text:00002D30 var_B4          = dword ptr -0B4h
.text:00002D30 var_B0          = dword ptr -0B0h
.text:00002D30 var_A8          = byte ptr -0A8h
.text:00002D30 var_94          = byte ptr -94h
.text:00002D30 var_80          = byte ptr -80h
.text:00002D30 var_70          = dword ptr -70h
.text:00002D30 var_6C          = dword ptr -6Ch
.text:00002D30 var_64          = byte ptr -64h
.text:00002D30 var_58          = byte ptr -58h
.text:00002D30 var_44          = dword ptr -44h
.text:00002D30 var_34          = dword ptr -34h
.text:00002D30 var_30          = dword ptr -30h
.text:00002D30 var_28          = dword ptr -28h
.text:00002D30 var_18          = dword ptr -18h
.text:00002D30 var_14          = dword ptr -14h
.text:00002D30 var_10          = dword ptr -10h
.text:00002D30 var_C           = dword ptr -0Ch
.text:00002D30 var_4           = dword ptr -4
.text:00002D30 arg_0           = dword ptr  8
.text:00002D30 arg_4           = dword ptr  0Ch
.text:00002D30 arg_8           = dword ptr  10h
.text:00002D30 arg_C           = dword ptr  14h
.text:00002D30 arg_10          = dword ptr  18h
.text:00002D30
.text:00002D30                 push    ebp
.text:00002D31                 mov     ebp, esp
.text:00002D33                 push    0FFFFFFFFh
.text:00002D35                 push    offset __ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00002D3A                 mov     eax, large fs:0
.text:00002D40                 push    eax
.text:00002D41                 sub     esp, 148h
.text:00002D47                 push    esi
.text:00002D48                 push    edi
.text:00002D49                 push    ecx
.text:00002D4A                 lea     edi, [ebp+var_154]
.text:00002D50                 mov     ecx, 52h ; 'R'
.text:00002D55                 mov     eax, 0CCCCCCCCh
.text:00002D5A                 rep stosd
.text:00002D5C                 pop     ecx
.text:00002D5D                 mov     eax, dword ptr ds:___security_cookie
.text:00002D62                 xor     eax, ebp
.text:00002D64                 push    eax
.text:00002D65                 lea     eax, [ebp+var_C]
.text:00002D68                 mov     large fs:0, eax
.text:00002D6E                 mov     [ebp+var_10], ecx
.text:00002D71                 mov     ecx, [ebp+var_10] ; this
.text:00002D74                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002D79                 mov     [ebp+var_18], eax
.text:00002D7C                 mov     [ebp+var_14], edx
.text:00002D7F                 cmp     [ebp+var_18], 2
.text:00002D83                 jnz     short loc_2DAA
.text:00002D85                 cmp     [ebp+var_14], 0
.text:00002D89                 jnz     short loc_2DAA
.text:00002D8B                 mov     eax, [ebp+arg_0]
.text:00002D8E                 add     eax, 0E0h ; 'a'
.text:00002D93                 push    eax             ; struct NArchive::N7z::CInArchiveInfo *
.text:00002D94                 mov     ecx, [ebp+var_10] ; this
.text:00002D97                 call    ?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z ; NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)
.text:00002D9C                 mov     ecx, [ebp+var_10] ; this
.text:00002D9F                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002DA4                 mov     [ebp+var_18], eax
.text:00002DA7                 mov     [ebp+var_14], edx
.text:00002DAA
.text:00002DAA loc_2DAA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+53j
.text:00002DAA                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+59j
.text:00002DAA                 lea     ecx, [ebp+var_28]
.text:00002DAD                 call    ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::CObjectVector<CBuffer<uchar>>(void)
.text:00002DB2                 mov     [ebp+var_4], 0
.text:00002DB9                 cmp     [ebp+var_18], 3
.text:00002DBD                 jnz     loc_2E70
.text:00002DC3                 cmp     [ebp+var_14], 0
.text:00002DC7                 jnz     loc_2E70
.text:00002DCD                 mov     ecx, [ebp+arg_10]
.text:00002DD0                 push    ecx             ; struct UString *
.text:00002DD1                 mov     edx, [ebp+arg_C]
.text:00002DD4                 push    edx             ; bool *
.text:00002DD5                 mov     eax, [ebp+arg_8]
.text:00002DD8                 push    eax             ; bool *
.text:00002DD9                 mov     ecx, [ebp+arg_4]
.text:00002DDC                 push    ecx             ; struct ICryptoGetTextPassword *
.text:00002DDD                 lea     edx, [ebp+var_28]
.text:00002DE0                 push    edx             ; int
.text:00002DE1                 mov     eax, [ebp+arg_0]
.text:00002DE4                 add     eax, 100h
.text:00002DE9                 push    eax             ; int
.text:00002DEA                 mov     ecx, [ebp+arg_0]
.text:00002DED                 mov     edx, [ecx+0F4h]
.text:00002DF3                 push    edx             ; int
.text:00002DF4                 mov     eax, [ecx+0F0h]
.text:00002DFA                 push    eax             ; int
.text:00002DFB                 mov     ecx, [ebp+var_10]
.text:00002DFE                 call    ?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)
.text:00002E03                 mov     [ebp+var_30], eax
.text:00002E06                 mov     ecx, [ebp+var_30]
.text:00002E09                 mov     [ebp+var_34], ecx
.text:00002E0C                 cmp     [ebp+var_34], 0
.text:00002E10                 jz      short loc_2E35
.text:00002E12                 mov     edx, [ebp+var_34]
.text:00002E15                 mov     [ebp+var_144], edx
.text:00002E1B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E22                 lea     ecx, [ebp+var_28]
.text:00002E25                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:00002E2A                 mov     eax, [ebp+var_144]
.text:00002E30                 jmp     loc_37FD
.text:00002E35 ; ---------------------------------------------------------------------------
.text:00002E35
.text:00002E35 loc_2E35:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+E0j
.text:00002E35                 mov     eax, [ebp+arg_0]
.text:00002E38                 mov     ecx, [ebp+arg_0]
.text:00002E3B                 mov     edx, [eax+100h]
.text:00002E41                 add     edx, [ecx+0F0h]
.text:00002E47                 mov     eax, [eax+104h]
.text:00002E4D                 adc     eax, [ecx+0F4h]
.text:00002E53                 mov     ecx, [ebp+arg_0]
.text:00002E56                 mov     [ecx+100h], edx
.text:00002E5C                 mov     [ecx+104h], eax
.text:00002E62                 mov     ecx, [ebp+var_10] ; this
.text:00002E65                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002E6A                 mov     [ebp+var_18], eax
.text:00002E6D                 mov     [ebp+var_14], edx
.text:00002E70
.text:00002E70 loc_2E70:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8Dj
.text:00002E70                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+97j
.text:00002E70                 lea     ecx, [ebp+var_44]
.text:00002E73                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00002E78                 mov     byte ptr [ebp+var_4], 1
.text:00002E7C                 lea     ecx, [ebp+var_64] ; this
.text:00002E7F                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:00002E84                 mov     byte ptr [ebp+var_4], 2
.text:00002E88                 cmp     [ebp+var_18], 4
.text:00002E8C                 jnz     short loc_2EF1
.text:00002E8E                 cmp     [ebp+var_14], 0
.text:00002E92                 jnz     short loc_2EF1
.text:00002E94                 lea     edx, [ebp+var_64]
.text:00002E97                 push    edx             ; NArchive::N7z::CUInt32DefVector *
.text:00002E98                 lea     eax, [ebp+var_44]
.text:00002E9B                 push    eax             ; int
.text:00002E9C                 mov     ecx, [ebp+arg_0]
.text:00002E9F                 push    ecx             ; NArchive::N7z::CFolders *
.text:00002EA0                 mov     edx, [ebp+arg_0]
.text:00002EA3                 add     edx, 0F8h ; '°'
.text:00002EA9                 push    edx             ; int
.text:00002EAA                 lea     eax, [ebp+var_28]
.text:00002EAD                 push    eax             ; int
.text:00002EAE                 mov     ecx, [ebp+var_10]
.text:00002EB1                 call    ?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadStreamsInfo(CObjectVector<CBuffer<uchar>> const *,unsigned __int64 &,NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)
.text:00002EB6                 mov     ecx, [ebp+arg_0]
.text:00002EB9                 mov     edx, [ebp+arg_0]
.text:00002EBC                 mov     eax, [ecx+0F8h]
.text:00002EC2                 add     eax, [edx+0F0h]
.text:00002EC8                 mov     ecx, [ecx+0FCh]
.text:00002ECE                 adc     ecx, [edx+0F4h]
.text:00002ED4                 mov     edx, [ebp+arg_0]
.text:00002ED7                 mov     [edx+0F8h], eax
.text:00002EDD                 mov     [edx+0FCh], ecx
.text:00002EE3                 mov     ecx, [ebp+var_10] ; this
.text:00002EE6                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002EEB                 mov     [ebp+var_18], eax
.text:00002EEE                 mov     [ebp+var_14], edx
.text:00002EF1
.text:00002EF1 loc_2EF1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+15Cj
.text:00002EF1                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+162j
.text:00002EF1                 mov     ecx, [ebp+arg_0]
.text:00002EF4                 add     ecx, 58h ; 'X'
.text:00002EF7                 call    ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear(void)
.text:00002EFC                 cmp     [ebp+var_18], 5
.text:00002F00                 jnz     loc_37BE
.text:00002F06                 cmp     [ebp+var_14], 0
.text:00002F0A                 jnz     loc_37BE
.text:00002F10                 mov     ecx, [ebp+var_10] ; this
.text:00002F13                 call    ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum(void)
.text:00002F18                 mov     [ebp+var_6C], eax
.text:00002F1B                 mov     eax, [ebp+var_6C]
.text:00002F1E                 push    eax
.text:00002F1F                 mov     ecx, [ebp+arg_0]
.text:00002F22                 add     ecx, 58h ; 'X'
.text:00002F25                 call    ?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize(uint)
.text:00002F2A                 push    0
.text:00002F2C                 push    9
.text:00002F2E                 mov     ecx, [ebp+arg_0]
.text:00002F31                 add     ecx, 108h
.text:00002F37                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00002F3C                 push    0
.text:00002F3E                 push    6
.text:00002F40                 mov     ecx, [ebp+arg_0]
.text:00002F43                 add     ecx, 108h
.text:00002F49                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00002F4E                 cmp     [ebp+var_6C], 0
.text:00002F52                 jbe     short loc_2F75
.text:00002F54                 lea     ecx, [ebp+var_64]
.text:00002F57                 call    ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ; CRecordVector<bool>::IsEmpty(void)
.text:00002F5C                 movzx   ecx, al
.text:00002F5F                 test    ecx, ecx
.text:00002F61                 jnz     short loc_2F75
.text:00002F63                 push    0
.text:00002F65                 push    0Ah
.text:00002F67                 mov     ecx, [ebp+arg_0]
.text:00002F6A                 add     ecx, 108h
.text:00002F70                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00002F75
.text:00002F75 loc_2F75:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+222j
.text:00002F75                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+231j
.text:00002F75                 lea     ecx, [ebp+var_80]
.text:00002F78                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002F7D                 mov     byte ptr [ebp+var_4], 3
.text:00002F81                 mov     edx, [ebp+var_6C]
.text:00002F84                 push    edx
.text:00002F85                 lea     eax, [ebp+var_80]
.text:00002F88                 push    eax
.text:00002F89                 call    ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:00002F8E                 lea     ecx, [ebp+var_94]
.text:00002F94                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002F99                 mov     byte ptr [ebp+var_4], 4
.text:00002F9D                 lea     ecx, [ebp+var_A8]
.text:00002FA3                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002FA8                 mov     byte ptr [ebp+var_4], 5
.text:00002FAC                 mov     [ebp+var_B0], 0
.text:00002FB6
.text:00002FB6 loc_2FB6:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+854j
.text:00002FB6                 mov     ecx, [ebp+var_10] ; this
.text:00002FB9                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00002FBE                 mov     [ebp+var_B8], eax
.text:00002FC4                 mov     [ebp+var_B4], edx
.text:00002FCA                 mov     ecx, [ebp+var_B8]
.text:00002FD0                 or      ecx, [ebp+var_B4]
.text:00002FD6                 jnz     short loc_2FDD
.text:00002FD8                 jmp     loc_3589
.text:00002FDD ; ---------------------------------------------------------------------------
.text:00002FDD
.text:00002FDD loc_2FDD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2A6j
.text:00002FDD                 mov     ecx, [ebp+var_10] ; this
.text:00002FE0                 call    ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber(void)
.text:00002FE5                 mov     [ebp+var_C0], eax
.text:00002FEB                 mov     [ebp+var_BC], edx
.text:00002FF1                 mov     edx, [ebp+var_10]
.text:00002FF4                 mov     ecx, [edx+38h]  ; this
.text:00002FF7                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:00002FFC                 xor     ecx, ecx
.text:00002FFE                 mov     [ebp+var_150], eax
.text:00003004                 mov     [ebp+var_14C], ecx
.text:0000300A                 mov     edx, [ebp+var_BC]
.text:00003010                 cmp     edx, [ebp+var_14C]
.text:00003016                 jb      short loc_302D
.text:00003018                 ja      short loc_3028
.text:0000301A                 mov     eax, [ebp+var_C0]
.text:00003020                 cmp     eax, [ebp+var_150]
.text:00003026                 jbe     short loc_302D
.text:00003028
.text:00003028 loc_3028:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2E8j
.text:00003028                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:0000302D ; ---------------------------------------------------------------------------
.text:0000302D
.text:0000302D loc_302D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2E6j
.text:0000302D                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2F6j
.text:0000302D                 lea     ecx, [ebp+var_CC] ; this
.text:00003033                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:00003038                 mov     byte ptr [ebp+var_4], 6
.text:0000303C                 push    1               ; bool
.text:0000303E                 mov     ecx, [ebp+var_C0]
.text:00003044                 push    ecx             ; unsigned int
.text:00003045                 mov     edx, [ebp+var_10]
.text:00003048                 mov     ecx, [edx+38h]  ; this
.text:0000304B                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00003050                 push    eax             ; unsigned __int8 *
.text:00003051                 mov     eax, [ebp+var_10]
.text:00003054                 push    eax             ; struct NArchive::N7z::CInArchive *
.text:00003055                 lea     ecx, [ebp+var_CC] ; this
.text:0000305B                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,uchar const *,uint,bool)
.text:00003060                 mov     [ebp+var_D1], 1
.text:00003067                 mov     [ebp+var_D2], 1
.text:0000306E                 cmp     [ebp+var_B4], 0
.text:00003075                 ja      short loc_3083
.text:00003077                 cmp     [ebp+var_B8], 40000000h
.text:00003081                 jbe     short loc_308F
.text:00003083
.text:00003083 loc_3083:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+345j
.text:00003083                 mov     [ebp+var_D2], 0
.text:0000308A                 jmp     loc_3518
.text:0000308F ; ---------------------------------------------------------------------------
.text:0000308F
.text:0000308F loc_308F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+351j
.text:0000308F                 mov     ecx, [ebp+var_B8]
.text:00003095                 mov     [ebp+var_154], ecx
.text:0000309B                 mov     edx, [ebp+var_154]
.text:000030A1                 sub     edx, 0Eh
.text:000030A4                 mov     [ebp+var_154], edx
.text:000030AA                 cmp     [ebp+var_154], 0Bh ; switch 12 cases
.text:000030B1                 ja      $LN17_0         ; jumptable 000030BD default case
.text:000030B7                 mov     eax, [ebp+var_154]
.text:000030BD                 jmp     ds:$LN90[eax*4] ; switch jump
.text:000030C4 ; ---------------------------------------------------------------------------
.text:000030C4
.text:000030C4 $LN47:                                  ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:000030C4                                         ; DATA XREF: .text:$LN90o
.text:000030C4                 lea     ecx, [ebp+var_E0] ; jumptable 000030BD case 3
.text:000030CA                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:000030CF                 mov     byte ptr [ebp+var_4], 7
.text:000030D3                 lea     ecx, [ebp+var_28]
.text:000030D6                 push    ecx             ; int
.text:000030D7                 mov     edx, [ebp+var_10]
.text:000030DA                 push    edx             ; NArchive::N7z::CInArchive *
.text:000030DB                 lea     ecx, [ebp+var_E0]
.text:000030E1                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)
.text:000030E6                 mov     eax, [ebp+var_10]
.text:000030E9                 mov     ecx, [eax+38h]  ; this
.text:000030EC                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:000030F1                 mov     [ebp+var_E8], eax
.text:000030F7                 mov     ecx, [ebp+var_E8]
.text:000030FD                 push    ecx
.text:000030FE                 mov     ecx, [ebp+arg_0]
.text:00003101                 add     ecx, 0D0h ; '-'
.text:00003107                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000310C                 mov     edx, [ebp+var_E8]
.text:00003112                 push    edx             ; unsigned int
.text:00003113                 mov     ecx, [ebp+arg_0]
.text:00003116                 add     ecx, 0D0h ; '-'
.text:0000311C                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00003121                 push    eax             ; Dst
.text:00003122                 mov     ecx, [ebp+var_10] ; this
.text:00003125                 call    ?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z ; NArchive::N7z::CInArchive::ReadBytes(uchar *,uint)
.text:0000312A                 mov     ecx, [ebp+arg_0]
.text:0000312D                 add     ecx, 58h ; 'X'
.text:00003130                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00003135                 add     eax, 1
.text:00003138                 push    eax
.text:00003139                 mov     ecx, [ebp+arg_0]
.text:0000313C                 add     ecx, 0D8h ; '+'
.text:00003142                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:00003147                 mov     [ebp+var_EC], 0
.text:00003151                 mov     [ebp+var_F0], 0
.text:0000315B                 jmp     short loc_316C
.text:0000315D ; ---------------------------------------------------------------------------
.text:0000315D
.text:0000315D loc_315D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+508j
.text:0000315D                 mov     eax, [ebp+var_F0]
.text:00003163                 add     eax, 1
.text:00003166                 mov     [ebp+var_F0], eax
.text:0000316C
.text:0000316C loc_316C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+42Bj
.text:0000316C                 mov     ecx, [ebp+arg_0]
.text:0000316F                 add     ecx, 58h ; 'X'
.text:00003172                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00003177                 cmp     [ebp+var_F0], eax
.text:0000317D                 jnb     loc_323D
.text:00003183                 mov     ecx, [ebp+var_E8]
.text:00003189                 sub     ecx, [ebp+var_EC]
.text:0000318F                 shr     ecx, 1
.text:00003191                 mov     [ebp+var_F4], ecx
.text:00003197                 mov     ecx, [ebp+arg_0]
.text:0000319A                 add     ecx, 0D0h ; '-'
.text:000031A0                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000031A5                 add     eax, [ebp+var_EC]
.text:000031AB                 mov     [ebp+var_F8], eax
.text:000031B1                 mov     [ebp+var_FC], 0
.text:000031BB                 jmp     short loc_31CC
.text:000031BD ; ---------------------------------------------------------------------------
.text:000031BD
.text:000031BD loc_31BD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4BEj
.text:000031BD                 mov     edx, [ebp+var_FC]
.text:000031C3                 add     edx, 1
.text:000031C6                 mov     [ebp+var_FC], edx
.text:000031CC
.text:000031CC loc_31CC:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+48Bj
.text:000031CC                 mov     eax, [ebp+var_FC]
.text:000031D2                 cmp     eax, [ebp+var_F4]
.text:000031D8                 jnb     short loc_31F0
.text:000031DA                 mov     ecx, [ebp+var_FC]
.text:000031E0                 mov     edx, [ebp+var_F8]
.text:000031E6                 movzx   eax, word ptr [edx+ecx*2]
.text:000031EA                 test    eax, eax
.text:000031EC                 jz      short loc_31F0
.text:000031EE                 jmp     short loc_31BD
.text:000031F0 ; ---------------------------------------------------------------------------
.text:000031F0
.text:000031F0 loc_31F0:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4A8j
.text:000031F0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4BCj
.text:000031F0                 mov     ecx, [ebp+var_FC]
.text:000031F6                 cmp     ecx, [ebp+var_F4]
.text:000031FC                 jnz     short loc_3203
.text:000031FE                 call    ?ThrowEndOfData@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowEndOfData(void)
.text:00003203 ; ---------------------------------------------------------------------------
.text:00003203
.text:00003203 loc_3203:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4CCj
.text:00003203                 mov     esi, [ebp+var_EC]
.text:00003209                 shr     esi, 1
.text:0000320B                 mov     ecx, [ebp+arg_0]
.text:0000320E                 add     ecx, 0D8h ; '+'
.text:00003214                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003219                 mov     edx, [ebp+var_F0]
.text:0000321F                 mov     [eax+edx*4], esi
.text:00003222                 mov     eax, [ebp+var_FC]
.text:00003228                 mov     ecx, [ebp+var_EC]
.text:0000322E                 lea     edx, [ecx+eax*2+2]
.text:00003232                 mov     [ebp+var_EC], edx
.text:00003238                 jmp     loc_315D
.text:0000323D ; ---------------------------------------------------------------------------
.text:0000323D
.text:0000323D loc_323D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+44Dj
.text:0000323D                 mov     esi, [ebp+var_EC]
.text:00003243                 shr     esi, 1
.text:00003245                 mov     ecx, [ebp+arg_0]
.text:00003248                 add     ecx, 0D8h ; '+'
.text:0000324E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003253                 mov     ecx, [ebp+var_F0]
.text:00003259                 mov     [eax+ecx*4], esi
.text:0000325C                 mov     edx, [ebp+var_EC]
.text:00003262                 cmp     edx, [ebp+var_E8]
.text:00003268                 jz      short loc_3271
.text:0000326A                 mov     eax, [ebp+var_10]
.text:0000326D                 mov     byte ptr [eax+3Ch], 1
.text:00003271
.text:00003271 loc_3271:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+538j
.text:00003271                 mov     byte ptr [ebp+var_4], 6
.text:00003275                 lea     ecx, [ebp+var_E0] ; this
.text:0000327B                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:00003280                 jmp     loc_3518
.text:00003285 ; ---------------------------------------------------------------------------
.text:00003285
.text:00003285 $LN38:                                  ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003285                                         ; DATA XREF: .text:$LN90o
.text:00003285                 lea     ecx, [ebp+var_10C] ; jumptable 000030BD case 7
.text:0000328B                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00003290                 mov     byte ptr [ebp+var_4], 8
.text:00003294                 lea     ecx, [ebp+var_10C]
.text:0000329A                 push    ecx
.text:0000329B                 mov     ecx, [ebp+arg_0]
.text:0000329E                 add     ecx, 58h ; 'X'
.text:000032A1                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000032A6                 push    eax
.text:000032A7                 mov     ecx, [ebp+var_10]
.text:000032AA                 call    ?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2(uint,CRecordVector<bool> &)
.text:000032AF                 lea     ecx, [ebp+var_11C] ; this
.text:000032B5                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:000032BA                 mov     byte ptr [ebp+var_4], 9
.text:000032BE                 lea     edx, [ebp+var_28]
.text:000032C1                 push    edx             ; int
.text:000032C2                 mov     eax, [ebp+var_10]
.text:000032C5                 push    eax             ; NArchive::N7z::CInArchive *
.text:000032C6                 lea     ecx, [ebp+var_11C]
.text:000032CC                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)
.text:000032D1                 mov     [ebp+var_70], 0
.text:000032D8                 jmp     short loc_32E3
.text:000032DA ; ---------------------------------------------------------------------------
.text:000032DA
.text:000032DA loc_32DA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_3339j
.text:000032DA                 mov     ecx, [ebp+var_70]
.text:000032DD                 add     ecx, 1
.text:000032E0                 mov     [ebp+var_70], ecx
.text:000032E3
.text:000032E3 loc_32E3:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5A8j
.text:000032E3                 mov     edx, [ebp+var_70]
.text:000032E6                 cmp     edx, [ebp+var_6C]
.text:000032E9                 jnb     short loc_333B
.text:000032EB                 mov     eax, [ebp+var_70]
.text:000032EE                 push    eax
.text:000032EF                 mov     ecx, [ebp+arg_0]
.text:000032F2                 add     ecx, 58h ; 'X'
.text:000032F5                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000032FA                 mov     [ebp+var_124], eax
.text:00003300                 mov     ecx, [ebp+var_70]
.text:00003303                 push    ecx
.text:00003304                 lea     ecx, [ebp+var_10C]
.text:0000330A                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000330F                 mov     edx, [ebp+var_124]
.text:00003315                 mov     al, [eax]
.text:00003317                 mov     [edx+13h], al
.text:0000331A                 mov     ecx, [ebp+var_124]
.text:00003320                 movzx   edx, byte ptr [ecx+13h]
.text:00003324                 test    edx, edx
.text:00003326                 jz      short loc_3339
.text:00003328                 mov     ecx, [ebp+var_10] ; this
.text:0000332B                 call    ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32(void)
.text:00003330                 mov     ecx, [ebp+var_124]
.text:00003336                 mov     [ecx+8], eax
.text:00003339
.text:00003339 loc_3339:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5F6j
.text:00003339                 jmp     short loc_32DA
.text:0000333B ; ---------------------------------------------------------------------------
.text:0000333B
.text:0000333B loc_333B:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5B9j
.text:0000333B                 mov     byte ptr [ebp+var_4], 8
.text:0000333F                 lea     ecx, [ebp+var_11C] ; this
.text:00003345                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:0000334A                 mov     byte ptr [ebp+var_4], 6
.text:0000334E                 lea     ecx, [ebp+var_10C]
.text:00003354                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003359                 jmp     loc_3518
.text:0000335E ; ---------------------------------------------------------------------------
.text:0000335E
.text:0000335E $LN33:                                  ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:0000335E                                         ; DATA XREF: .text:$LN90o
.text:0000335E                 lea     edx, [ebp+var_80] ; jumptable 000030BD case 0
.text:00003361                 push    edx
.text:00003362                 mov     eax, [ebp+var_6C]
.text:00003365                 push    eax
.text:00003366                 mov     ecx, [ebp+var_10]
.text:00003369                 call    ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)
.text:0000336E                 mov     [ebp+var_B0], 0
.text:00003378                 mov     [ebp+var_70], 0
.text:0000337F                 jmp     short loc_338A
.text:00003381 ; ---------------------------------------------------------------------------
.text:00003381
.text:00003381 loc_3381:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_33B9j
.text:00003381                 mov     ecx, [ebp+var_70]
.text:00003384                 add     ecx, 1
.text:00003387                 mov     [ebp+var_70], ecx
.text:0000338A
.text:0000338A loc_338A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+64Fj
.text:0000338A                 lea     ecx, [ebp+var_80]
.text:0000338D                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00003392                 cmp     [ebp+var_70], eax
.text:00003395                 jnb     short loc_33BB
.text:00003397                 mov     edx, [ebp+var_70]
.text:0000339A                 push    edx
.text:0000339B                 lea     ecx, [ebp+var_80]
.text:0000339E                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000033A3                 movzx   eax, byte ptr [eax]
.text:000033A6                 test    eax, eax
.text:000033A8                 jz      short loc_33B9
.text:000033AA                 mov     ecx, [ebp+var_B0]
.text:000033B0                 add     ecx, 1
.text:000033B3                 mov     [ebp+var_B0], ecx
.text:000033B9
.text:000033B9 loc_33B9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+678j
.text:000033B9                 jmp     short loc_3381
.text:000033BB ; ---------------------------------------------------------------------------
.text:000033BB
.text:000033BB loc_33BB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+665j
.text:000033BB                 mov     edx, [ebp+var_B0]
.text:000033C1                 push    edx
.text:000033C2                 lea     eax, [ebp+var_94]
.text:000033C8                 push    eax
.text:000033C9                 call    ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:000033CE                 mov     ecx, [ebp+var_B0]
.text:000033D4                 push    ecx
.text:000033D5                 lea     edx, [ebp+var_A8]
.text:000033DB                 push    edx
.text:000033DC                 call    ?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:000033E1                 jmp     loc_3518
.text:000033E6 ; ---------------------------------------------------------------------------
.text:000033E6
.text:000033E6 $LN28:                                  ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:000033E6                                         ; DATA XREF: .text:$LN90o
.text:000033E6                 lea     eax, [ebp+var_94] ; jumptable 000030BD case 1
.text:000033EC                 push    eax
.text:000033ED                 mov     ecx, [ebp+var_B0]
.text:000033F3                 push    ecx
.text:000033F4                 mov     ecx, [ebp+var_10]
.text:000033F7                 call    ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)
.text:000033FC                 jmp     loc_3518
.text:00003401 ; ---------------------------------------------------------------------------
.text:00003401
.text:00003401 $LN27_0:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003401                                         ; DATA XREF: .text:$LN90o
.text:00003401                 lea     edx, [ebp+var_A8] ; jumptable 000030BD case 2
.text:00003407                 push    edx
.text:00003408                 mov     eax, [ebp+var_B0]
.text:0000340E                 push    eax
.text:0000340F                 mov     ecx, [ebp+var_10]
.text:00003412                 call    ?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)
.text:00003417                 jmp     loc_3518
.text:0000341C ; ---------------------------------------------------------------------------
.text:0000341C
.text:0000341C $LN26_1:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:0000341C                                         ; DATA XREF: .text:$LN90o
.text:0000341C                 mov     ecx, [ebp+var_6C] ; jumptable 000030BD case 10
.text:0000341F                 push    ecx
.text:00003420                 mov     edx, [ebp+arg_0]
.text:00003423                 add     edx, 0ACh ; '¼'
.text:00003429                 push    edx
.text:0000342A                 lea     eax, [ebp+var_28]
.text:0000342D                 push    eax
.text:0000342E                 mov     ecx, [ebp+var_10]
.text:00003431                 call    ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)
.text:00003436                 jmp     loc_3518
.text:0000343B ; ---------------------------------------------------------------------------
.text:0000343B
.text:0000343B $LN25_0:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:0000343B                                         ; DATA XREF: .text:$LN90o
.text:0000343B                 mov     ecx, [ebp+var_6C] ; jumptable 000030BD case 4
.text:0000343E                 push    ecx
.text:0000343F                 mov     edx, [ebp+arg_0]
.text:00003442                 add     edx, 64h ; 'd'
.text:00003445                 push    edx
.text:00003446                 lea     eax, [ebp+var_28]
.text:00003449                 push    eax
.text:0000344A                 mov     ecx, [ebp+var_10]
.text:0000344D                 call    ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)
.text:00003452                 jmp     loc_3518
.text:00003457 ; ---------------------------------------------------------------------------
.text:00003457
.text:00003457 $LN24:                                  ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003457                                         ; DATA XREF: .text:$LN90o
.text:00003457                 mov     ecx, [ebp+var_6C] ; jumptable 000030BD case 5
.text:0000345A                 push    ecx
.text:0000345B                 mov     edx, [ebp+arg_0]
.text:0000345E                 add     edx, 7Ch ; '|'
.text:00003461                 push    edx
.text:00003462                 lea     eax, [ebp+var_28]
.text:00003465                 push    eax
.text:00003466                 mov     ecx, [ebp+var_10]
.text:00003469                 call    ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)
.text:0000346E                 jmp     loc_3518
.text:00003473 ; ---------------------------------------------------------------------------
.text:00003473
.text:00003473 $LN23_0:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003473                                         ; DATA XREF: .text:$LN90o
.text:00003473                 mov     ecx, [ebp+var_6C] ; jumptable 000030BD case 6
.text:00003476                 push    ecx
.text:00003477                 mov     edx, [ebp+arg_0]
.text:0000347A                 add     edx, 94h ; 'ö'
.text:00003480                 push    edx
.text:00003481                 lea     eax, [ebp+var_28]
.text:00003484                 push    eax
.text:00003485                 mov     ecx, [ebp+var_10]
.text:00003488                 call    ?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)
.text:0000348D                 jmp     loc_3518
.text:00003492 ; ---------------------------------------------------------------------------
.text:00003492
.text:00003492 $LN22_0:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003492                                         ; DATA XREF: .text:$LN90o
.text:00003492                 mov     [ebp+var_12C], 0 ; jumptable 000030BD case 11
.text:0000349C                 mov     [ebp+var_128], 0
.text:000034A6                 jmp     short loc_34C6
.text:000034A8 ; ---------------------------------------------------------------------------
.text:000034A8
.text:000034A8 loc_34A8:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_34FAj
.text:000034A8                 mov     ecx, [ebp+var_12C]
.text:000034AE                 add     ecx, 1
.text:000034B1                 mov     edx, [ebp+var_128]
.text:000034B7                 adc     edx, 0
.text:000034BA                 mov     [ebp+var_12C], ecx
.text:000034C0                 mov     [ebp+var_128], edx
.text:000034C6
.text:000034C6 loc_34C6:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+776j
.text:000034C6                 mov     eax, [ebp+var_128]
.text:000034CC                 cmp     eax, [ebp+var_BC]
.text:000034D2                 ja      short loc_34FC
.text:000034D4                 jb      short loc_34E4
.text:000034D6                 mov     ecx, [ebp+var_12C]
.text:000034DC                 cmp     ecx, [ebp+var_C0]
.text:000034E2                 jnb     short loc_34FC
.text:000034E4
.text:000034E4 loc_34E4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7A4j
.text:000034E4                 mov     ecx, [ebp+var_10] ; this
.text:000034E7                 call    ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte(void)
.text:000034EC                 movzx   edx, al
.text:000034EF                 test    edx, edx
.text:000034F1                 jz      short loc_34FA
.text:000034F3                 mov     eax, [ebp+var_10]
.text:000034F6                 mov     byte ptr [eax+3Ch], 1
.text:000034FA
.text:000034FA loc_34FA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7C1j
.text:000034FA                 jmp     short loc_34A8
.text:000034FC ; ---------------------------------------------------------------------------
.text:000034FC
.text:000034FC loc_34FC:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7A2j
.text:000034FC                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7B2j
.text:000034FC                 mov     [ebp+var_D1], 0
.text:00003503                 jmp     short loc_3518
.text:00003505 ; ---------------------------------------------------------------------------
.text:00003505
.text:00003505 $LN17_0:                                ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+381j
.text:00003505                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dj
.text:00003505                                         ; DATA XREF: ...
.text:00003505                 mov     [ebp+var_D2], 0 ; jumptable 000030BD default case
.text:0000350C                 mov     cl, [ebp+var_D2]
.text:00003512                 mov     [ebp+var_D1], cl
.text:00003518
.text:00003518 loc_3518:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+35Aj
.text:00003518                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+550j ...
.text:00003518                 movzx   edx, [ebp+var_D2]
.text:0000351F                 test    edx, edx
.text:00003521                 jz      short loc_354C
.text:00003523                 movzx   eax, [ebp+var_D1]
.text:0000352A                 test    eax, eax
.text:0000352C                 jz      short loc_354A
.text:0000352E                 mov     ecx, [ebp+var_B4]
.text:00003534                 push    ecx
.text:00003535                 mov     edx, [ebp+var_B8]
.text:0000353B                 push    edx
.text:0000353C                 mov     ecx, [ebp+arg_0]
.text:0000353F                 add     ecx, 108h
.text:00003545                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000354A
.text:0000354A loc_354A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7FCj
.text:0000354A                 jmp     short loc_3561
.text:0000354C ; ---------------------------------------------------------------------------
.text:0000354C
.text:0000354C loc_354C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7F1j
.text:0000354C                 mov     eax, [ebp+arg_0]
.text:0000354F                 mov     byte ptr [eax+135h], 1
.text:00003556                 mov     ecx, [ebp+var_10]
.text:00003559                 mov     ecx, [ecx+38h]  ; this
.text:0000355C                 call    ?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInByte2::SkipRem(void)
.text:00003561
.text:00003561 loc_3561:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_354Aj
.text:00003561                 mov     edx, [ebp+var_10]
.text:00003564                 mov     ecx, [edx+38h]  ; this
.text:00003567                 call    ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CInByte2::GetRem(void)
.text:0000356C                 test    eax, eax
.text:0000356E                 jz      short loc_3575
.text:00003570                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00003575 ; ---------------------------------------------------------------------------
.text:00003575
.text:00003575 loc_3575:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+83Ej
.text:00003575                 mov     byte ptr [ebp+var_4], 5
.text:00003579                 lea     ecx, [ebp+var_CC] ; this
.text:0000357F                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:00003584                 jmp     loc_2FB6
.text:00003589 ; ---------------------------------------------------------------------------
.text:00003589
.text:00003589 loc_3589:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2A8j
.text:00003589                 mov     ecx, [ebp+var_10] ; this
.text:0000358C                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00003591                 mov     [ebp+var_18], eax
.text:00003594                 mov     [ebp+var_14], edx
.text:00003597                 mov     esi, [ebp+var_6C]
.text:0000359A                 sub     esi, [ebp+var_B0]
.text:000035A0                 lea     ecx, [ebp+var_44]
.text:000035A3                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000035A8                 cmp     esi, eax
.text:000035AA                 jz      short loc_35B1
.text:000035AC                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:000035B1 ; ---------------------------------------------------------------------------
.text:000035B1
.text:000035B1 loc_35B1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+87Aj
.text:000035B1                 mov     [ebp+var_130], 0
.text:000035BB                 mov     [ebp+var_134], 0
.text:000035C5                 mov     [ebp+var_138], 0
.text:000035CF                 mov     [ebp+var_70], 0
.text:000035D6                 jmp     short loc_35E1
.text:000035D8 ; ---------------------------------------------------------------------------
.text:000035D8
.text:000035D8 loc_35D8:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_3611j
.text:000035D8                 mov     eax, [ebp+var_70]
.text:000035DB                 add     eax, 1
.text:000035DE                 mov     [ebp+var_70], eax
.text:000035E1
.text:000035E1 loc_35E1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8A6j
.text:000035E1                 mov     ecx, [ebp+var_70]
.text:000035E4                 cmp     ecx, [ebp+var_B0]
.text:000035EA                 jnb     short loc_3613
.text:000035EC                 mov     edx, [ebp+var_70]
.text:000035EF                 push    edx
.text:000035F0                 lea     ecx, [ebp+var_A8]
.text:000035F6                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000035FB                 movzx   eax, byte ptr [eax]
.text:000035FE                 test    eax, eax
.text:00003600                 jz      short loc_3611
.text:00003602                 mov     ecx, [ebp+var_138]
.text:00003608                 add     ecx, 1
.text:0000360B                 mov     [ebp+var_138], ecx
.text:00003611
.text:00003611 loc_3611:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8D0j
.text:00003611                 jmp     short loc_35D8
.text:00003613 ; ---------------------------------------------------------------------------
.text:00003613
.text:00003613 loc_3613:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8BAj
.text:00003613                 mov     [ebp+var_70], 0
.text:0000361A                 jmp     short loc_3625
.text:0000361C ; ---------------------------------------------------------------------------
.text:0000361C
.text:0000361C loc_361C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_378Fj
.text:0000361C                 mov     edx, [ebp+var_70]
.text:0000361F                 add     edx, 1
.text:00003622                 mov     [ebp+var_70], edx
.text:00003625
.text:00003625 loc_3625:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8EAj
.text:00003625                 mov     eax, [ebp+var_70]
.text:00003628                 cmp     eax, [ebp+var_6C]
.text:0000362B                 jnb     loc_3794
.text:00003631                 mov     ecx, [ebp+var_70]
.text:00003634                 push    ecx
.text:00003635                 mov     ecx, [ebp+arg_0]
.text:00003638                 add     ecx, 58h ; 'X'
.text:0000363B                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00003640                 mov     [ebp+var_13C], eax
.text:00003646                 mov     edx, [ebp+var_70]
.text:00003649                 push    edx
.text:0000364A                 lea     ecx, [ebp+var_80]
.text:0000364D                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00003652                 movzx   eax, byte ptr [eax]
.text:00003655                 neg     eax
.text:00003657                 sbb     eax, eax
.text:00003659                 add     eax, 1
.text:0000365C                 mov     ecx, [ebp+var_13C]
.text:00003662                 mov     [ecx+10h], al
.text:00003665                 mov     edx, [ebp+var_13C]
.text:0000366B                 mov     dword ptr [edx+0Ch], 0
.text:00003672                 mov     eax, [ebp+var_13C]
.text:00003678                 movzx   ecx, byte ptr [eax+10h]
.text:0000367C                 test    ecx, ecx
.text:0000367E                 jz      loc_3705
.text:00003684                 mov     edx, [ebp+var_13C]
.text:0000368A                 mov     byte ptr [edx+11h], 0
.text:0000368E                 mov     [ebp+var_13D], 0
.text:00003695                 mov     eax, [ebp+var_134]
.text:0000369B                 push    eax
.text:0000369C                 lea     ecx, [ebp+var_44]
.text:0000369F                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000036A4                 mov     ecx, [ebp+var_13C]
.text:000036AA                 mov     edx, [eax]
.text:000036AC                 mov     [ecx], edx
.text:000036AE                 mov     eax, [eax+4]
.text:000036B1                 mov     [ecx+4], eax
.text:000036B4                 mov     ecx, [ebp+var_134]
.text:000036BA                 push    ecx             ; unsigned int
.text:000036BB                 lea     ecx, [ebp+var_64] ; this
.text:000036BE                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:000036C3                 mov     edx, [ebp+var_13C]
.text:000036C9                 mov     [edx+12h], al
.text:000036CC                 mov     eax, [ebp+var_13C]
.text:000036D2                 movzx   ecx, byte ptr [eax+12h]
.text:000036D6                 test    ecx, ecx
.text:000036D8                 jz      short loc_36F4
.text:000036DA                 mov     edx, [ebp+var_134]
.text:000036E0                 push    edx
.text:000036E1                 lea     ecx, [ebp+var_58]
.text:000036E4                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000036E9                 mov     ecx, [ebp+var_13C]
.text:000036EF                 mov     edx, [eax]
.text:000036F1                 mov     [ecx+0Ch], edx
.text:000036F4
.text:000036F4 loc_36F4:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+9A8j
.text:000036F4                 mov     eax, [ebp+var_134]
.text:000036FA                 add     eax, 1
.text:000036FD                 mov     [ebp+var_134], eax
.text:00003703                 jmp     short loc_3770
.text:00003705 ; ---------------------------------------------------------------------------
.text:00003705
.text:00003705 loc_3705:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+94Ej
.text:00003705                 mov     ecx, [ebp+var_130]
.text:0000370B                 push    ecx
.text:0000370C                 lea     ecx, [ebp+var_94]
.text:00003712                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00003717                 movzx   edx, byte ptr [eax]
.text:0000371A                 neg     edx
.text:0000371C                 sbb     edx, edx
.text:0000371E                 add     edx, 1
.text:00003721                 mov     eax, [ebp+var_13C]
.text:00003727                 mov     [eax+11h], dl
.text:0000372A                 mov     ecx, [ebp+var_130]
.text:00003730                 push    ecx
.text:00003731                 lea     ecx, [ebp+var_A8]
.text:00003737                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000373C                 mov     dl, [eax]
.text:0000373E                 mov     [ebp+var_13D], dl
.text:00003744                 mov     eax, [ebp+var_130]
.text:0000374A                 add     eax, 1
.text:0000374D                 mov     [ebp+var_130], eax
.text:00003753                 mov     ecx, [ebp+var_13C]
.text:00003759                 mov     dword ptr [ecx], 0
.text:0000375F                 mov     dword ptr [ecx+4], 0
.text:00003766                 mov     edx, [ebp+var_13C]
.text:0000376C                 mov     byte ptr [edx+12h], 0
.text:00003770
.text:00003770 loc_3770:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+9D3j
.text:00003770                 cmp     [ebp+var_138], 0
.text:00003777                 jz      short loc_378F
.text:00003779                 movzx   eax, [ebp+var_13D]
.text:00003780                 push    eax
.text:00003781                 mov     ecx, [ebp+arg_0]
.text:00003784                 add     ecx, 0C4h ; '-'
.text:0000378A                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000378F
.text:0000378F loc_378F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+A47j
.text:0000378F                 jmp     loc_361C
.text:00003794 ; ---------------------------------------------------------------------------
.text:00003794
.text:00003794 loc_3794:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8FBj
.text:00003794                 mov     byte ptr [ebp+var_4], 4
.text:00003798                 lea     ecx, [ebp+var_A8]
.text:0000379E                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000037A3                 mov     byte ptr [ebp+var_4], 3
.text:000037A7                 lea     ecx, [ebp+var_94]
.text:000037AD                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000037B2                 mov     byte ptr [ebp+var_4], 2
.text:000037B6                 lea     ecx, [ebp+var_80]
.text:000037B9                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000037BE
.text:000037BE loc_37BE:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1D0j
.text:000037BE                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1DAj
.text:000037BE                 mov     ecx, [ebp+arg_0] ; this
.text:000037C1                 call    ?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CDbEx::FillLinks(void)
.text:000037C6                 mov     [ebp+var_148], 0
.text:000037D0                 mov     byte ptr [ebp+var_4], 1
.text:000037D4                 lea     ecx, [ebp+var_64] ; this
.text:000037D7                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:000037DC                 mov     byte ptr [ebp+var_4], 0
.text:000037E0                 lea     ecx, [ebp+var_44]
.text:000037E3                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000037E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000037EF                 lea     ecx, [ebp+var_28]
.text:000037F2                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:000037F7                 mov     eax, [ebp+var_148]
.text:000037FD
.text:000037FD loc_37FD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+100j
.text:000037FD                 push    edx
.text:000037FE                 mov     ecx, ebp
.text:00003800                 push    eax
.text:00003801                 lea     edx, $LN89
.text:00003807                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000380C                 pop     eax
.text:0000380D                 pop     edx
.text:0000380E                 mov     ecx, [ebp+var_C]
.text:00003811                 mov     large fs:0, ecx
.text:00003818                 pop     ecx
.text:00003819                 pop     edi
.text:0000381A                 pop     esi
.text:0000381B                 add     esp, 154h
.text:00003821                 cmp     ebp, esp
.text:00003823                 call    __RTC_CheckEsp
.text:00003828                 mov     esp, ebp
.text:0000382A                 pop     ebp
.text:0000382B                 retn    14h
.text:0000382B ?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text:0000382B
.text:0000382B ; ---------------------------------------------------------------------------
.text:0000382E                 align 10h
.text:00003830 $LN89           dd 0Ah                  ; DATA XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+AD1o
.text:00003834                 dd offset $LN88
.text:00003838 $LN88           dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:00003834o
.text:00003840                 dd offset $LN77         ; "dataVector"
.text:00003844                 dd 0FFFFFFBCh, 0Ch
.text:0000384C                 dd offset $LN78         ; "unpackSizes"
.text:00003850                 dd 0FFFFFF9Ch, 18h
.text:00003858                 dd offset $LN79         ; "digests"
.text:0000385C                 dd 0FFFFFF80h, 0Ch
.text:00003864                 dd offset $LN80         ; "emptyStreamVector"
.text:00003868                 dd 0FFFFFF6Ch, 0Ch
.text:00003870                 dd offset $LN81         ; "emptyFileVector"
.text:00003874                 dd 0FFFFFF58h, 0Ch
.text:0000387C                 dd offset $LN82         ; "antiFileVector"
.text:00003880                 dd 0FFFFFF34h, 8
.text:00003888                 dd offset $LN83         ; "switchProp"
.text:0000388C                 dd 0FFFFFF20h, 8
.text:00003894                 dd offset $LN84         ; "streamSwitch"
.text:00003898                 dd 0FFFFFEF4h, 0Ch
.text:000038A0                 dd offset $LN85         ; "boolVector"
.text:000038A4                 dd 0FFFFFEE4h, 8
.text:000038AC                 dd offset $LN86         ; "streamSwitch"
.text:000038B0 $LN86           db 'streamSwitch',0     ; DATA XREF: .text:000038ACo
.text:000038BD $LN85           db 'boolVector',0       ; DATA XREF: .text:000038A0o
.text:000038C8 $LN84           db 'streamSwitch',0     ; DATA XREF: .text:00003894o
.text:000038D5 $LN83           db 'switchProp',0       ; DATA XREF: .text:00003888o
.text:000038E0 $LN82           db 'antiFileVector',0   ; DATA XREF: .text:0000387Co
.text:000038EF $LN81           db 'emptyFileVector',0  ; DATA XREF: .text:00003870o
.text:000038FF $LN80           db 'emptyStreamVector',0 ; DATA XREF: .text:00003864o
.text:00003911 $LN79           db 'digests',0          ; DATA XREF: .text:00003858o
.text:00003919 $LN78           db 'unpackSizes',0      ; DATA XREF: .text:0000384Co
.text:00003925 $LN77           db 'dataVector',0       ; DATA XREF: .text:00003840o
.text:00003930 $LN90           dd offset $LN33         ; DATA XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+38Dr
.text:00003930                 dd offset $LN28         ; jump table for switch statement
.text:00003930                 dd offset $LN27_0
.text:00003930                 dd offset $LN47
.text:00003930                 dd offset $LN25_0
.text:00003930                 dd offset $LN24
.text:00003930                 dd offset $LN23_0
.text:00003930                 dd offset $LN38
.text:00003930                 dd offset $LN17_0
.text:00003930                 dd offset $LN17_0
.text:00003930                 dd offset $LN26_1
.text:00003930                 dd offset $LN22_0
.text:00003960
.text:00003960 ; =============== S U B R O U T I N E =======================================
.text:00003960
.text:00003960 ; Attributes: bp-based frame
.text:00003960
.text:00003960 ; void __thiscall NArchive::N7z::CDbEx::FillLinks(NArchive::N7z::CDbEx *__hidden this)
.text:00003960                 public ?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ
.text:00003960 ?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ proc near
.text:00003960                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+A91p
.text:00003960
.text:00003960 var_14          = dword ptr -14h
.text:00003960 var_10          = dword ptr -10h
.text:00003960 var_C           = dword ptr -0Ch
.text:00003960 var_8           = dword ptr -8
.text:00003960 var_4           = dword ptr -4
.text:00003960
.text:00003960                 push    ebp
.text:00003961                 mov     ebp, esp
.text:00003963                 sub     esp, 14h
.text:00003966                 mov     eax, 0CCCCCCCCh
.text:0000396B                 mov     [ebp+var_14], eax
.text:0000396E                 mov     [ebp+var_10], eax
.text:00003971                 mov     [ebp+var_C], eax
.text:00003974                 mov     [ebp+var_8], eax
.text:00003977                 mov     [ebp+var_4], eax
.text:0000397A                 mov     [ebp+var_4], ecx
.text:0000397D                 mov     eax, [ebp+var_4]
.text:00003980                 mov     ecx, [eax+4]
.text:00003983                 push    ecx
.text:00003984                 mov     ecx, [ebp+var_4]
.text:00003987                 add     ecx, 118h
.text:0000398D                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:00003992                 mov     ecx, [ebp+var_4]
.text:00003995                 add     ecx, 58h ; 'X'
.text:00003998                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:0000399D                 push    eax
.text:0000399E                 mov     ecx, [ebp+var_4]
.text:000039A1                 add     ecx, 11Ch
.text:000039A7                 call    ?Alloc@?$CObjArray@I@@QAEXI@Z ; CObjArray<uint>::Alloc(uint)
.text:000039AC                 mov     [ebp+var_8], 0
.text:000039B3                 mov     [ebp+var_C], 0
.text:000039BA                 mov     [ebp+var_10], 0
.text:000039C1                 jmp     short loc_39CC
.text:000039C3 ; ---------------------------------------------------------------------------
.text:000039C3
.text:000039C3 loc_39C3:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+C3j
.text:000039C3                                         ; NArchive::N7z::CDbEx::FillLinks(void)+12Cj ...
.text:000039C3                 mov     edx, [ebp+var_10]
.text:000039C6                 add     edx, 1
.text:000039C9                 mov     [ebp+var_10], edx
.text:000039CC
.text:000039CC loc_39CC:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+61j
.text:000039CC                 mov     ecx, [ebp+var_4]
.text:000039CF                 add     ecx, 58h ; 'X'
.text:000039D2                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000039D7                 cmp     [ebp+var_10], eax
.text:000039DA                 jnb     loc_3AC5
.text:000039E0                 mov     eax, [ebp+var_10]
.text:000039E3                 push    eax
.text:000039E4                 mov     ecx, [ebp+var_4]
.text:000039E7                 add     ecx, 58h ; 'X'
.text:000039EA                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000039EF                 movzx   ecx, byte ptr [eax+10h]
.text:000039F3                 neg     ecx
.text:000039F5                 sbb     ecx, ecx
.text:000039F7                 add     ecx, 1
.text:000039FA                 mov     byte ptr [ebp+var_14+3], cl
.text:000039FD                 cmp     [ebp+var_C], 0
.text:00003A01                 jnz     short loc_3A6D
.text:00003A03                 movzx   edx, byte ptr [ebp+var_14+3]
.text:00003A07                 test    edx, edx
.text:00003A09                 jz      short loc_3A25
.text:00003A0B                 mov     ecx, [ebp+var_4]
.text:00003A0E                 add     ecx, 11Ch
.text:00003A14                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003A19                 mov     ecx, [ebp+var_10]
.text:00003A1C                 mov     dword ptr [eax+ecx*4], 0FFFFFFFFh
.text:00003A23                 jmp     short loc_39C3
.text:00003A25 ; ---------------------------------------------------------------------------
.text:00003A25
.text:00003A25 loc_3A25:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+A9j
.text:00003A25                                         ; NArchive::N7z::CDbEx::FillLinks(void)+10Bj
.text:00003A25                 mov     edx, [ebp+var_4]
.text:00003A28                 mov     eax, [ebp+var_8]
.text:00003A2B                 cmp     eax, [edx+4]
.text:00003A2E                 jb      short loc_3A35
.text:00003A30                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00003A35 ; ---------------------------------------------------------------------------
.text:00003A35
.text:00003A35 loc_3A35:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+CEj
.text:00003A35                 mov     ecx, [ebp+var_4]
.text:00003A38                 add     ecx, 118h
.text:00003A3E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003A43                 mov     ecx, [ebp+var_8]
.text:00003A46                 mov     edx, [ebp+var_10]
.text:00003A49                 mov     [eax+ecx*4], edx
.text:00003A4C                 mov     ecx, [ebp+var_4]
.text:00003A4F                 add     ecx, 24h ; '$'
.text:00003A52                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003A57                 mov     ecx, [ebp+var_8]
.text:00003A5A                 cmp     dword ptr [eax+ecx*4], 0
.text:00003A5E                 jz      short loc_3A62
.text:00003A60                 jmp     short loc_3A6D
.text:00003A62 ; ---------------------------------------------------------------------------
.text:00003A62
.text:00003A62 loc_3A62:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+FEj
.text:00003A62                 mov     edx, [ebp+var_8]
.text:00003A65                 add     edx, 1
.text:00003A68                 mov     [ebp+var_8], edx
.text:00003A6B                 jmp     short loc_3A25
.text:00003A6D ; ---------------------------------------------------------------------------
.text:00003A6D
.text:00003A6D loc_3A6D:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+A1j
.text:00003A6D                                         ; NArchive::N7z::CDbEx::FillLinks(void)+100j
.text:00003A6D                 mov     ecx, [ebp+var_4]
.text:00003A70                 add     ecx, 11Ch
.text:00003A76                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003A7B                 mov     ecx, [ebp+var_10]
.text:00003A7E                 mov     edx, [ebp+var_8]
.text:00003A81                 mov     [eax+ecx*4], edx
.text:00003A84                 movzx   eax, byte ptr [ebp+var_14+3]
.text:00003A88                 test    eax, eax
.text:00003A8A                 jz      short loc_3A91
.text:00003A8C                 jmp     loc_39C3
.text:00003A91 ; ---------------------------------------------------------------------------
.text:00003A91
.text:00003A91 loc_3A91:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+12Aj
.text:00003A91                 mov     ecx, [ebp+var_C]
.text:00003A94                 add     ecx, 1
.text:00003A97                 mov     [ebp+var_C], ecx
.text:00003A9A                 mov     ecx, [ebp+var_4]
.text:00003A9D                 add     ecx, 24h ; '$'
.text:00003AA0                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003AA5                 mov     edx, [ebp+var_8]
.text:00003AA8                 mov     ecx, [ebp+var_C]
.text:00003AAB                 cmp     ecx, [eax+edx*4]
.text:00003AAE                 jb      short loc_3AC0
.text:00003AB0                 mov     edx, [ebp+var_8]
.text:00003AB3                 add     edx, 1
.text:00003AB6                 mov     [ebp+var_8], edx
.text:00003AB9                 mov     [ebp+var_C], 0
.text:00003AC0
.text:00003AC0 loc_3AC0:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+14Ej
.text:00003AC0                 jmp     loc_39C3
.text:00003AC5 ; ---------------------------------------------------------------------------
.text:00003AC5
.text:00003AC5 loc_3AC5:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+7Aj
.text:00003AC5                 cmp     [ebp+var_C], 0
.text:00003AC9                 jz      short loc_3AD4
.text:00003ACB                 mov     eax, [ebp+var_8]
.text:00003ACE                 add     eax, 1
.text:00003AD1                 mov     [ebp+var_8], eax
.text:00003AD4
.text:00003AD4 loc_3AD4:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+169j
.text:00003AD4                                         ; NArchive::N7z::CDbEx::FillLinks(void)+1A1j
.text:00003AD4                 mov     ecx, [ebp+var_4]
.text:00003AD7                 mov     edx, [ebp+var_8]
.text:00003ADA                 cmp     edx, [ecx+4]
.text:00003ADD                 jb      short loc_3AE1
.text:00003ADF                 jmp     short loc_3B03
.text:00003AE1 ; ---------------------------------------------------------------------------
.text:00003AE1
.text:00003AE1 loc_3AE1:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+17Dj
.text:00003AE1                 mov     ecx, [ebp+var_4]
.text:00003AE4                 add     ecx, 118h
.text:00003AEA                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00003AEF                 mov     ecx, [ebp+var_8]
.text:00003AF2                 mov     edx, [ebp+var_10]
.text:00003AF5                 mov     [eax+ecx*4], edx
.text:00003AF8                 mov     eax, [ebp+var_8]
.text:00003AFB                 add     eax, 1
.text:00003AFE                 mov     [ebp+var_8], eax
.text:00003B01                 jmp     short loc_3AD4
.text:00003B03 ; ---------------------------------------------------------------------------
.text:00003B03
.text:00003B03 loc_3B03:                               ; CODE XREF: NArchive::N7z::CDbEx::FillLinks(void)+17Fj
.text:00003B03                 add     esp, 14h
.text:00003B06                 cmp     ebp, esp
.text:00003B08                 call    __RTC_CheckEsp
.text:00003B0D                 mov     esp, ebp
.text:00003B0F                 pop     ebp
.text:00003B10                 retn
.text:00003B10 ?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ endp
.text:00003B10
.text:00003B10 ; ---------------------------------------------------------------------------
.text:00003B11                 align 10h
.text:00003B20
.text:00003B20 ; =============== S U B R O U T I N E =======================================
.text:00003B20
.text:00003B20 ; Attributes: bp-based frame
.text:00003B20
.text:00003B20 ; __int32 __thiscall NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CInArchive *this, struct NArchive::N7z::CDbEx *, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *)
.text:00003B20                 public ?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00003B20 ?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text:00003B20                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+61p
.text:00003B20
.text:00003B20 var_310         = dword ptr -310h
.text:00003B20 var_30C         = dword ptr -30Ch
.text:00003B20 var_308         = dword ptr -308h
.text:00003B20 var_304         = dword ptr -304h
.text:00003B20 var_300         = dword ptr -300h
.text:00003B20 var_2FC         = dword ptr -2FCh
.text:00003B20 var_2F8         = dword ptr -2F8h
.text:00003B20 var_2F4         = dword ptr -2F4h
.text:00003B20 var_2F0         = dword ptr -2F0h
.text:00003B20 var_2EC         = dword ptr -2ECh
.text:00003B20 var_2E8         = dword ptr -2E8h
.text:00003B20 var_2E4         = dword ptr -2E4h
.text:00003B20 var_2E0         = dword ptr -2E0h
.text:00003B20 var_2DC         = dword ptr -2DCh
.text:00003B20 var_2D8         = dword ptr -2D8h
.text:00003B20 var_2D4         = dword ptr -2D4h
.text:00003B20 var_2D0         = dword ptr -2D0h
.text:00003B20 var_2CC         = dword ptr -2CCh
.text:00003B20 var_2C8         = dword ptr -2C8h
.text:00003B20 var_2C4         = dword ptr -2C4h
.text:00003B20 var_2C0         = dword ptr -2C0h
.text:00003B20 var_2B8         = dword ptr -2B8h
.text:00003B20 var_2A4         = byte ptr -2A4h
.text:00003B20 var_298         = dword ptr -298h
.text:00003B20 var_290         = dword ptr -290h
.text:00003B20 var_284         = dword ptr -284h
.text:00003B20 var_280         = dword ptr -280h
.text:00003B20 var_27C         = dword ptr -27Ch
.text:00003B20 var_278         = dword ptr -278h
.text:00003B20 var_274         = dword ptr -274h
.text:00003B20 var_270         = dword ptr -270h
.text:00003B20 var_26C         = dword ptr -26Ch
.text:00003B20 var_268         = dword ptr -268h
.text:00003B20 var_264         = dword ptr -264h
.text:00003B20 var_260         = dword ptr -260h
.text:00003B20 var_259         = byte ptr -259h
.text:00003B20 var_258         = byte ptr -258h
.text:00003B20 var_257         = byte ptr -257h
.text:00003B20 var_54          = dword ptr -54h
.text:00003B20 var_50          = dword ptr -50h
.text:00003B20 var_48          = dword ptr -48h
.text:00003B20 var_44          = dword ptr -44h
.text:00003B20 var_38          = dword ptr -38h
.text:00003B20 var_34          = dword ptr -34h
.text:00003B20 var_2C          = dword ptr -2Ch
.text:00003B20 var_28          = dword ptr -28h
.text:00003B20 var_24          = dword ptr -24h
.text:00003B20 var_20          = dword ptr -20h
.text:00003B20 var_1C          = dword ptr -1Ch
.text:00003B20 var_18          = dword ptr -18h
.text:00003B20 var_14          = dword ptr -14h
.text:00003B20 var_10          = dword ptr -10h
.text:00003B20 var_C           = dword ptr -0Ch
.text:00003B20 var_4           = dword ptr -4
.text:00003B20 arg_0           = dword ptr  8
.text:00003B20 arg_4           = dword ptr  0Ch
.text:00003B20 arg_8           = dword ptr  10h
.text:00003B20 arg_C           = dword ptr  14h
.text:00003B20 arg_10          = dword ptr  18h
.text:00003B20
.text:00003B20                 push    ebp
.text:00003B21                 mov     ebp, esp
.text:00003B23                 push    0FFFFFFFFh
.text:00003B25                 push    offset __ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00003B2A                 mov     eax, large fs:0
.text:00003B30                 push    eax
.text:00003B31                 sub     esp, 304h
.text:00003B37                 push    esi
.text:00003B38                 push    edi
.text:00003B39                 push    ecx
.text:00003B3A                 lea     edi, [ebp+var_310]
.text:00003B40                 mov     ecx, 0C1h ; '-'
.text:00003B45                 mov     eax, 0CCCCCCCCh
.text:00003B4A                 rep stosd
.text:00003B4C                 pop     ecx
.text:00003B4D                 mov     eax, dword ptr ds:___security_cookie
.text:00003B52                 xor     eax, ebp
.text:00003B54                 mov     [ebp+var_10], eax
.text:00003B57                 push    eax
.text:00003B58                 lea     eax, [ebp+var_C]
.text:00003B5B                 mov     large fs:0, eax
.text:00003B61                 mov     [ebp+var_14], ecx
.text:00003B64                 mov     ecx, [ebp+arg_0] ; this
.text:00003B67                 call    ?Clear@CDbEx@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CDbEx::Clear(void)
.text:00003B6C                 mov     eax, [ebp+arg_0]
.text:00003B6F                 mov     ecx, [ebp+var_14]
.text:00003B72                 mov     edx, [ecx+40h]
.text:00003B75                 mov     [eax+0E8h], edx
.text:00003B7B                 mov     ecx, [ecx+44h]
.text:00003B7E                 mov     [eax+0ECh], ecx
.text:00003B84                 mov     edx, [ebp+arg_0]
.text:00003B87                 mov     eax, [ebp+var_14]
.text:00003B8A                 mov     cl, [eax+56h]
.text:00003B8D                 mov     [edx+0E0h], cl
.text:00003B93                 mov     edx, [ebp+arg_0]
.text:00003B96                 mov     eax, [ebp+var_14]
.text:00003B99                 mov     cl, [eax+57h]
.text:00003B9C                 mov     [edx+0E1h], cl
.text:00003BA2                 mov     edx, [ebp+arg_0]
.text:00003BA5                 movzx   eax, byte ptr [edx+0E0h]
.text:00003BAC                 test    eax, eax
.text:00003BAE                 jz      short loc_3BBA
.text:00003BB0                 mov     eax, 1
.text:00003BB5                 jmp     loc_43B2
.text:00003BBA ; ---------------------------------------------------------------------------
.text:00003BBA
.text:00003BBA loc_3BBA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8Ej
.text:00003BBA                 mov     ecx, [ebp+var_14]
.text:00003BBD                 mov     edx, [ecx+5Ch]
.text:00003BC0                 mov     [ebp+var_1C], edx
.text:00003BC3                 mov     eax, [ecx+60h]
.text:00003BC6                 mov     [ebp+var_18], eax
.text:00003BC9                 mov     ecx, [ebp+var_14]
.text:00003BCC                 mov     edx, [ecx+64h]
.text:00003BCF                 mov     [ebp+var_24], edx
.text:00003BD2                 mov     eax, [ecx+68h]
.text:00003BD5                 mov     [ebp+var_20], eax
.text:00003BD8                 mov     ecx, [ebp+var_14]
.text:00003BDB                 mov     edx, [ecx+6Ch]
.text:00003BDE                 mov     [ebp+var_28], edx
.text:00003BE1                 mov     eax, [ebp+var_14]
.text:00003BE4                 mov     ecx, [eax+58h]
.text:00003BE7                 mov     [ebp+var_2C], ecx
.text:00003BEA                 cmp     [ebp+var_2C], 0
.text:00003BEE                 jnz     loc_3EDB
.text:00003BF4                 mov     edx, [ebp+var_1C]
.text:00003BF7                 or      edx, [ebp+var_18]
.text:00003BFA                 jnz     loc_3EDB
.text:00003C00                 mov     eax, [ebp+var_24]
.text:00003C03                 or      eax, [ebp+var_20]
.text:00003C06                 jnz     loc_3EDB
.text:00003C0C                 cmp     [ebp+var_28], 0
.text:00003C10                 jnz     loc_3EDB
.text:00003C16                 mov     ecx, [ebp+var_14]
.text:00003C19                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003C1E                 mov     [ebp+var_2E0], eax
.text:00003C24                 mov     esi, esp
.text:00003C26                 lea     ecx, [ebp+var_38]
.text:00003C29                 push    ecx
.text:00003C2A                 push    1
.text:00003C2C                 push    0
.text:00003C2E                 push    0
.text:00003C30                 mov     edx, [ebp+var_2E0]
.text:00003C36                 push    edx
.text:00003C37                 mov     eax, [ebp+var_2E0]
.text:00003C3D                 mov     ecx, [eax]
.text:00003C3F                 mov     edx, [ecx+10h]
.text:00003C42                 call    edx
.text:00003C44                 cmp     esi, esp
.text:00003C46                 call    __RTC_CheckEsp
.text:00003C4B                 mov     [ebp+var_50], eax
.text:00003C4E                 cmp     [ebp+var_50], 0
.text:00003C52                 jz      short loc_3C5C
.text:00003C54                 mov     eax, [ebp+var_50]
.text:00003C57                 jmp     loc_43B2
.text:00003C5C ; ---------------------------------------------------------------------------
.text:00003C5C
.text:00003C5C loc_3C5C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+132j
.text:00003C5C                 mov     [ebp+var_54], 200h
.text:00003C63                 mov     ecx, [ebp+var_14]
.text:00003C66                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003C6B                 mov     [ebp+var_2E4], eax
.text:00003C71                 mov     esi, esp
.text:00003C73                 lea     eax, [ebp+var_48]
.text:00003C76                 push    eax
.text:00003C77                 push    2
.text:00003C79                 push    0
.text:00003C7B                 push    0
.text:00003C7D                 mov     ecx, [ebp+var_2E4]
.text:00003C83                 push    ecx
.text:00003C84                 mov     edx, [ebp+var_2E4]
.text:00003C8A                 mov     eax, [edx]
.text:00003C8C                 mov     ecx, [eax+10h]
.text:00003C8F                 call    ecx
.text:00003C91                 cmp     esi, esp
.text:00003C93                 call    __RTC_CheckEsp
.text:00003C98                 mov     [ebp+var_260], eax
.text:00003C9E                 cmp     [ebp+var_260], 0
.text:00003CA5                 jz      short loc_3CB2
.text:00003CA7                 mov     eax, [ebp+var_260]
.text:00003CAD                 jmp     loc_43B2
.text:00003CB2 ; ---------------------------------------------------------------------------
.text:00003CB2
.text:00003CB2 loc_3CB2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+185j
.text:00003CB2                 mov     edx, [ebp+var_48]
.text:00003CB5                 sub     edx, [ebp+var_38]
.text:00003CB8                 mov     eax, [ebp+var_44]
.text:00003CBB                 sbb     eax, [ebp+var_34]
.text:00003CBE                 mov     [ebp+var_268], edx
.text:00003CC4                 mov     [ebp+var_264], eax
.text:00003CCA                 mov     [ebp+var_26C], 200h
.text:00003CD4                 cmp     [ebp+var_264], 0
.text:00003CDB                 ja      short loc_3CF7
.text:00003CDD                 jb      short loc_3CEB
.text:00003CDF                 cmp     [ebp+var_268], 200h
.text:00003CE9                 jnb     short loc_3CF7
.text:00003CEB
.text:00003CEB loc_3CEB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1BDj
.text:00003CEB                 mov     ecx, [ebp+var_268]
.text:00003CF1                 mov     [ebp+var_26C], ecx
.text:00003CF7
.text:00003CF7 loc_3CF7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1BBj
.text:00003CF7                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1C9j
.text:00003CF7                 cmp     [ebp+var_26C], 3
.text:00003CFE                 jnb     short loc_3D0A
.text:00003D00                 mov     eax, 1
.text:00003D05                 jmp     loc_43B2
.text:00003D0A ; ---------------------------------------------------------------------------
.text:00003D0A
.text:00003D0A loc_3D0A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1DEj
.text:00003D0A                 mov     ecx, [ebp+var_14]
.text:00003D0D                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003D12                 mov     [ebp+var_2E8], eax
.text:00003D18                 mov     esi, esp
.text:00003D1A                 push    0
.text:00003D1C                 push    0
.text:00003D1E                 mov     edx, [ebp+var_26C]
.text:00003D24                 xor     eax, eax
.text:00003D26                 mov     ecx, [ebp+var_48]
.text:00003D29                 sub     ecx, edx
.text:00003D2B                 mov     edx, [ebp+var_44]
.text:00003D2E                 sbb     edx, eax
.text:00003D30                 push    edx
.text:00003D31                 push    ecx
.text:00003D32                 mov     eax, [ebp+var_2E8]
.text:00003D38                 push    eax
.text:00003D39                 mov     ecx, [ebp+var_2E8]
.text:00003D3F                 mov     edx, [ecx]
.text:00003D41                 mov     eax, [edx+10h]
.text:00003D44                 call    eax
.text:00003D46                 cmp     esi, esp
.text:00003D48                 call    __RTC_CheckEsp
.text:00003D4D                 mov     [ebp+var_270], eax
.text:00003D53                 cmp     [ebp+var_270], 0
.text:00003D5A                 jz      short loc_3D67
.text:00003D5C                 mov     eax, [ebp+var_270]
.text:00003D62                 jmp     loc_43B2
.text:00003D67 ; ---------------------------------------------------------------------------
.text:00003D67
.text:00003D67 loc_3D67:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+23Aj
.text:00003D67                 mov     ecx, [ebp+var_26C]
.text:00003D6D                 push    ecx             ; unsigned int
.text:00003D6E                 lea     edx, [ebp+var_258]
.text:00003D74                 push    edx             ; void *
.text:00003D75                 mov     ecx, [ebp+var_14]
.text:00003D78                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00003D7D                 push    eax             ; struct ISequentialInStream *
.text:00003D7E                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00003D83                 mov     [ebp+var_274], eax
.text:00003D89                 cmp     [ebp+var_274], 0
.text:00003D90                 jz      short loc_3D9D
.text:00003D92                 mov     eax, [ebp+var_274]
.text:00003D98                 jmp     loc_43B2
.text:00003D9D ; ---------------------------------------------------------------------------
.text:00003D9D
.text:00003D9D loc_3D9D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+270j
.text:00003D9D                 mov     eax, [ebp+var_26C]
.text:00003DA3                 movzx   ecx, [ebp+eax+var_259]
.text:00003DAB                 test    ecx, ecx
.text:00003DAD                 jz      short loc_3DB9
.text:00003DAF                 mov     eax, 1
.text:00003DB4                 jmp     loc_43B2
.text:00003DB9 ; ---------------------------------------------------------------------------
.text:00003DB9
.text:00003DB9 loc_3DB9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+28Dj
.text:00003DB9                 mov     edx, [ebp+var_26C]
.text:00003DBF                 sub     edx, 2
.text:00003DC2                 mov     [ebp+var_278], edx
.text:00003DC8                 jmp     short loc_3DD9
.text:00003DCA ; ---------------------------------------------------------------------------
.text:00003DCA
.text:00003DCA loc_3DCA:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_3E3Aj
.text:00003DCA                 mov     eax, [ebp+var_278]
.text:00003DD0                 sub     eax, 1
.text:00003DD3                 mov     [ebp+var_278], eax
.text:00003DD9
.text:00003DD9 loc_3DD9:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2A8j
.text:00003DD9                 mov     ecx, [ebp+var_278]
.text:00003DDF                 movzx   edx, [ebp+ecx+var_258]
.text:00003DE7                 cmp     edx, 17h
.text:00003DEA                 jnz     short loc_3DFF
.text:00003DEC                 mov     eax, [ebp+var_278]
.text:00003DF2                 movzx   ecx, [ebp+eax+var_257]
.text:00003DFA                 cmp     ecx, 6
.text:00003DFD                 jz      short loc_3E25
.text:00003DFF
.text:00003DFF loc_3DFF:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2CAj
.text:00003DFF                 mov     edx, [ebp+var_278]
.text:00003E05                 movzx   eax, [ebp+edx+var_258]
.text:00003E0D                 cmp     eax, 1
.text:00003E10                 jnz     short loc_3E27
.text:00003E12                 mov     ecx, [ebp+var_278]
.text:00003E18                 movzx   edx, [ebp+ecx+var_257]
.text:00003E20                 cmp     edx, 4
.text:00003E23                 jnz     short loc_3E27
.text:00003E25
.text:00003E25 loc_3E25:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2DDj
.text:00003E25                 jmp     short loc_3E3C
.text:00003E27 ; ---------------------------------------------------------------------------
.text:00003E27
.text:00003E27 loc_3E27:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2F0j
.text:00003E27                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+303j
.text:00003E27                 cmp     [ebp+var_278], 0
.text:00003E2E                 jnz     short loc_3E3A
.text:00003E30                 mov     eax, 1
.text:00003E35                 jmp     loc_43B2
.text:00003E3A ; ---------------------------------------------------------------------------
.text:00003E3A
.text:00003E3A loc_3E3A:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+30Ej
.text:00003E3A                 jmp     short loc_3DCA
.text:00003E3C ; ---------------------------------------------------------------------------
.text:00003E3C
.text:00003E3C loc_3E3C:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &):loc_3E25j
.text:00003E3C                 mov     eax, [ebp+var_26C]
.text:00003E42                 sub     eax, [ebp+var_278]
.text:00003E48                 xor     ecx, ecx
.text:00003E4A                 mov     [ebp+var_24], eax
.text:00003E4D                 mov     [ebp+var_20], ecx
.text:00003E50                 mov     edx, [ebp+var_268]
.text:00003E56                 sub     edx, [ebp+var_24]
.text:00003E59                 mov     eax, [ebp+var_264]
.text:00003E5F                 sbb     eax, [ebp+var_20]
.text:00003E62                 mov     [ebp+var_1C], edx
.text:00003E65                 mov     [ebp+var_18], eax
.text:00003E68                 mov     edx, [ebp+var_24]
.text:00003E6B                 mov     ecx, [ebp+var_278]
.text:00003E71                 lea     ecx, [ebp+ecx+var_258]
.text:00003E78                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00003E7D                 mov     [ebp+var_28], eax
.text:00003E80                 mov     ecx, [ebp+var_14]
.text:00003E83                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003E88                 mov     [ebp+var_2EC], eax
.text:00003E8E                 mov     esi, esp
.text:00003E90                 push    0
.text:00003E92                 push    0
.text:00003E94                 mov     edx, [ebp+var_34]
.text:00003E97                 push    edx
.text:00003E98                 mov     eax, [ebp+var_38]
.text:00003E9B                 push    eax
.text:00003E9C                 mov     ecx, [ebp+var_2EC]
.text:00003EA2                 push    ecx
.text:00003EA3                 mov     edx, [ebp+var_2EC]
.text:00003EA9                 mov     eax, [edx]
.text:00003EAB                 mov     ecx, [eax+10h]
.text:00003EAE                 call    ecx
.text:00003EB0                 cmp     esi, esp
.text:00003EB2                 call    __RTC_CheckEsp
.text:00003EB7                 mov     [ebp+var_27C], eax
.text:00003EBD                 cmp     [ebp+var_27C], 0
.text:00003EC4                 jz      short loc_3ED1
.text:00003EC6                 mov     eax, [ebp+var_27C]
.text:00003ECC                 jmp     loc_43B2
.text:00003ED1 ; ---------------------------------------------------------------------------
.text:00003ED1
.text:00003ED1 loc_3ED1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+3A4j
.text:00003ED1                 mov     edx, [ebp+arg_0]
.text:00003ED4                 mov     byte ptr [edx+134h], 1
.text:00003EDB
.text:00003EDB loc_3EDB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+CEj
.text:00003EDB                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+DAj ...
.text:00003EDB                 mov     eax, [ebp+var_14]
.text:00003EDE                 mov     ecx, [eax+40h]
.text:00003EE1                 add     ecx, 20h ; ' '
.text:00003EE4                 mov     edx, [eax+44h]
.text:00003EE7                 adc     edx, 0
.text:00003EEA                 mov     eax, [ebp+arg_0]
.text:00003EED                 mov     [eax+0F0h], ecx
.text:00003EF3                 mov     [eax+0F4h], edx
.text:00003EF9                 mov     ecx, [ebp+arg_0]
.text:00003EFC                 mov     dword ptr [ecx+128h], 20h ; ' '
.text:00003F06                 mov     dword ptr [ecx+12Ch], 0
.text:00003F10                 mov     edx, [ebp+arg_0]
.text:00003F13                 mov     byte ptr [edx+130h], 0
.text:00003F1A                 cmp     [ebp+var_18], 0
.text:00003F1E                 jl      short loc_3F39
.text:00003F20                 jg      short loc_3F28
.text:00003F22                 cmp     [ebp+var_1C], 0
.text:00003F26                 jb      short loc_3F39
.text:00003F28
.text:00003F28 loc_3F28:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+400j
.text:00003F28                 cmp     [ebp+var_20], 40000000h
.text:00003F2F                 jb      short loc_3F43
.text:00003F31                 ja      short loc_3F39
.text:00003F33                 cmp     [ebp+var_24], 0
.text:00003F37                 jbe     short loc_3F43
.text:00003F39
.text:00003F39 loc_3F39:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+3FEj
.text:00003F39                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+406j ...
.text:00003F39                 mov     eax, 1
.text:00003F3E                 jmp     loc_43B2
.text:00003F43 ; ---------------------------------------------------------------------------
.text:00003F43
.text:00003F43 loc_3F43:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+40Fj
.text:00003F43                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+417j
.text:00003F43                 mov     eax, [ebp+var_24]
.text:00003F46                 or      eax, [ebp+var_20]
.text:00003F49                 jnz     short loc_3F6E
.text:00003F4B                 mov     ecx, [ebp+var_1C]
.text:00003F4E                 or      ecx, [ebp+var_18]
.text:00003F51                 jz      short loc_3F5D
.text:00003F53                 mov     eax, 1
.text:00003F58                 jmp     loc_43B2
.text:00003F5D ; ---------------------------------------------------------------------------
.text:00003F5D
.text:00003F5D loc_3F5D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+431j
.text:00003F5D                 mov     edx, [ebp+arg_0]
.text:00003F60                 mov     byte ptr [edx+130h], 1
.text:00003F67                 xor     eax, eax
.text:00003F69                 jmp     loc_43B2
.text:00003F6E ; ---------------------------------------------------------------------------
.text:00003F6E
.text:00003F6E loc_3F6E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+429j
.text:00003F6E                 mov     eax, [ebp+arg_0]
.text:00003F71                 movzx   ecx, byte ptr [eax+134h]
.text:00003F78                 test    ecx, ecx
.text:00003F7A                 jnz     short loc_3F86
.text:00003F7C                 mov     edx, [ebp+arg_0]
.text:00003F7F                 mov     byte ptr [edx+130h], 1
.text:00003F86
.text:00003F86 loc_3F86:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+45Aj
.text:00003F86                 mov     eax, [ebp+var_24]
.text:00003F89                 add     eax, 20h ; ' '
.text:00003F8C                 mov     ecx, [ebp+var_20]
.text:00003F8F                 adc     ecx, 0
.text:00003F92                 mov     edx, [ebp+var_14]
.text:00003F95                 add     eax, [edx+70h]
.text:00003F98                 adc     ecx, [edx+74h]
.text:00003F9B                 mov     edx, [ebp+var_14]
.text:00003F9E                 mov     [edx+70h], eax
.text:00003FA1                 mov     [edx+74h], ecx
.text:00003FA4                 mov     eax, [ebp+var_1C]
.text:00003FA7                 add     eax, 20h ; ' '
.text:00003FAA                 mov     ecx, [ebp+var_18]
.text:00003FAD                 adc     ecx, 0
.text:00003FB0                 add     eax, [ebp+var_24]
.text:00003FB3                 adc     ecx, [ebp+var_20]
.text:00003FB6                 mov     edx, [ebp+arg_0]
.text:00003FB9                 mov     [edx+128h], eax
.text:00003FBF                 mov     [edx+12Ch], ecx
.text:00003FC5                 mov     eax, [ebp+var_14]
.text:00003FC8                 mov     ecx, [ebp+arg_0]
.text:00003FCB                 mov     edx, [eax+48h]
.text:00003FCE                 sub     edx, [ecx+0F0h]
.text:00003FD4                 mov     eax, [eax+4Ch]
.text:00003FD7                 sbb     eax, [ecx+0F4h]
.text:00003FDD                 mov     ecx, [ebp+var_1C]
.text:00003FE0                 add     ecx, [ebp+var_24]
.text:00003FE3                 mov     esi, [ebp+var_18]
.text:00003FE6                 adc     esi, [ebp+var_20]
.text:00003FE9                 mov     [ebp+var_2F4], edx
.text:00003FEF                 mov     [ebp+var_2F0], eax
.text:00003FF5                 mov     [ebp+var_2FC], ecx
.text:00003FFB                 mov     [ebp+var_2F8], esi
.text:00004001                 mov     edx, [ebp+var_2F0]
.text:00004007                 cmp     edx, [ebp+var_2F8]
.text:0000400D                 ja      short loc_4033
.text:0000400F                 jb      short loc_401F
.text:00004011                 mov     eax, [ebp+var_2F4]
.text:00004017                 cmp     eax, [ebp+var_2FC]
.text:0000401D                 jnb     short loc_4033
.text:0000401F
.text:0000401F loc_401F:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4EFj
.text:0000401F                 mov     ecx, [ebp+arg_0]
.text:00004022                 mov     byte ptr [ecx+133h], 1
.text:00004029                 mov     eax, 1
.text:0000402E                 jmp     loc_43B2
.text:00004033 ; ---------------------------------------------------------------------------
.text:00004033
.text:00004033 loc_4033:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4EDj
.text:00004033                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+4FDj
.text:00004033                 mov     ecx, [ebp+var_14]
.text:00004036                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000403B                 mov     [ebp+var_300], eax
.text:00004041                 mov     esi, esp
.text:00004043                 push    0
.text:00004045                 push    1
.text:00004047                 mov     edx, [ebp+var_18]
.text:0000404A                 push    edx
.text:0000404B                 mov     eax, [ebp+var_1C]
.text:0000404E                 push    eax
.text:0000404F                 mov     ecx, [ebp+var_300]
.text:00004055                 push    ecx
.text:00004056                 mov     edx, [ebp+var_300]
.text:0000405C                 mov     eax, [edx]
.text:0000405E                 mov     ecx, [eax+10h]
.text:00004061                 call    ecx
.text:00004063                 cmp     esi, esp
.text:00004065                 call    __RTC_CheckEsp
.text:0000406A                 mov     [ebp+var_280], eax
.text:00004070                 cmp     [ebp+var_280], 0
.text:00004077                 jz      short loc_4084
.text:00004079                 mov     eax, [ebp+var_280]
.text:0000407F                 jmp     loc_43B2
.text:00004084 ; ---------------------------------------------------------------------------
.text:00004084
.text:00004084 loc_4084:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+557j
.text:00004084                 mov     edx, [ebp+var_24]
.text:00004087                 mov     [ebp+var_284], edx
.text:0000408D                 mov     eax, [ebp+var_284]
.text:00004093                 xor     ecx, ecx
.text:00004095                 mov     [ebp+var_308], eax
.text:0000409B                 mov     [ebp+var_304], ecx
.text:000040A1                 mov     edx, [ebp+var_308]
.text:000040A7                 cmp     edx, [ebp+var_24]
.text:000040AA                 jnz     short loc_40B7
.text:000040AC                 mov     eax, [ebp+var_304]
.text:000040B2                 cmp     eax, [ebp+var_20]
.text:000040B5                 jz      short loc_40C1
.text:000040B7
.text:000040B7 loc_40B7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+58Aj
.text:000040B7                 mov     eax, 8007000Eh
.text:000040BC                 jmp     loc_43B2
.text:000040C1 ; ---------------------------------------------------------------------------
.text:000040C1
.text:000040C1 loc_40C1:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+595j
.text:000040C1                 mov     ecx, [ebp+var_284]
.text:000040C7                 push    ecx
.text:000040C8                 lea     ecx, [ebp+var_290]
.text:000040CE                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:000040D3                 mov     [ebp+var_4], 0
.text:000040DA                 mov     edx, [ebp+var_284]
.text:000040E0                 push    edx             ; unsigned int
.text:000040E1                 lea     ecx, [ebp+var_290]
.text:000040E7                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000040EC                 push    eax             ; void *
.text:000040ED                 mov     ecx, [ebp+var_14]
.text:000040F0                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000040F5                 push    eax             ; struct ISequentialInStream *
.text:000040F6                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000040FB                 mov     [ebp+var_298], eax
.text:00004101                 cmp     [ebp+var_298], 0
.text:00004108                 jz      short loc_4133
.text:0000410A                 mov     eax, [ebp+var_298]
.text:00004110                 mov     [ebp+var_2D0], eax
.text:00004116                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000411D                 lea     ecx, [ebp+var_290]
.text:00004123                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004128                 mov     eax, [ebp+var_2D0]
.text:0000412E                 jmp     loc_43B2
.text:00004133 ; ---------------------------------------------------------------------------
.text:00004133
.text:00004133 loc_4133:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5E8j
.text:00004133                 lea     ecx, [ebp+var_290]
.text:00004139                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000413E                 mov     edx, [ebp+var_284]
.text:00004144                 mov     ecx, eax
.text:00004146                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:0000414B                 cmp     eax, [ebp+var_28]
.text:0000414E                 jz      short loc_4155
.text:00004150                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00004155 ; ---------------------------------------------------------------------------
.text:00004155
.text:00004155 loc_4155:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+62Ej
.text:00004155                 mov     ecx, [ebp+arg_0]
.text:00004158                 movzx   edx, byte ptr [ecx+134h]
.text:0000415F                 test    edx, edx
.text:00004161                 jnz     short loc_416D
.text:00004163                 mov     eax, [ebp+arg_0]
.text:00004166                 mov     byte ptr [eax+131h], 1
.text:0000416D
.text:0000416D loc_416D:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+641j
.text:0000416D                 lea     ecx, [ebp+var_2A4] ; this
.text:00004173                 call    ??0CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::CStreamSwitch(void)
.text:00004178                 mov     byte ptr [ebp+var_4], 1
.text:0000417C                 lea     ecx, [ebp+var_290]
.text:00004182                 push    ecx             ; int
.text:00004183                 mov     edx, [ebp+var_14]
.text:00004186                 push    edx             ; struct NArchive::N7z::CInArchive *
.text:00004187                 lea     ecx, [ebp+var_2A4]
.text:0000418D                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)
.text:00004192                 lea     ecx, [ebp+var_2B8]
.text:00004198                 call    ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::CObjectVector<CBuffer<uchar>>(void)
.text:0000419D                 mov     byte ptr [ebp+var_4], 2
.text:000041A1                 mov     ecx, [ebp+var_14] ; this
.text:000041A4                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:000041A9                 mov     [ebp+var_2C4], eax
.text:000041AF                 mov     [ebp+var_2C0], edx
.text:000041B5                 cmp     [ebp+var_2C4], 1
.text:000041BC                 jnz     short loc_41CB
.text:000041BE                 cmp     [ebp+var_2C0], 0
.text:000041C5                 jz      loc_4338
.text:000041CB
.text:000041CB loc_41CB:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+69Cj
.text:000041CB                 cmp     [ebp+var_2C4], 17h
.text:000041D2                 jnz     short loc_41DD
.text:000041D4                 cmp     [ebp+var_2C0], 0
.text:000041DB                 jz      short loc_41E2
.text:000041DD
.text:000041DD loc_41DD:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+6B2j
.text:000041DD                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:000041E2 ; ---------------------------------------------------------------------------
.text:000041E2
.text:000041E2 loc_41E2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+6BBj
.text:000041E2                 mov     eax, [ebp+arg_10]
.text:000041E5                 push    eax             ; struct UString *
.text:000041E6                 mov     ecx, [ebp+arg_C]
.text:000041E9                 push    ecx             ; bool *
.text:000041EA                 mov     edx, [ebp+arg_8]
.text:000041ED                 push    edx             ; bool *
.text:000041EE                 mov     eax, [ebp+arg_4]
.text:000041F1                 push    eax             ; struct ICryptoGetTextPassword *
.text:000041F2                 lea     ecx, [ebp+var_2B8]
.text:000041F8                 push    ecx             ; int
.text:000041F9                 mov     edx, [ebp+arg_0]
.text:000041FC                 add     edx, 100h
.text:00004202                 push    edx             ; int
.text:00004203                 mov     eax, [ebp+arg_0]
.text:00004206                 mov     ecx, [eax+0F4h]
.text:0000420C                 push    ecx             ; int
.text:0000420D                 mov     edx, [eax+0F0h]
.text:00004213                 push    edx             ; int
.text:00004214                 mov     ecx, [ebp+var_14]
.text:00004217                 call    ?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)
.text:0000421C                 mov     [ebp+var_2C8], eax
.text:00004222                 mov     eax, [ebp+var_2C8]
.text:00004228                 mov     [ebp+var_2CC], eax
.text:0000422E                 cmp     [ebp+var_2CC], 0
.text:00004235                 jz      short loc_427E
.text:00004237                 mov     ecx, [ebp+var_2CC]
.text:0000423D                 mov     [ebp+var_2D4], ecx
.text:00004243                 mov     byte ptr [ebp+var_4], 1
.text:00004247                 lea     ecx, [ebp+var_2B8]
.text:0000424D                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:00004252                 mov     byte ptr [ebp+var_4], 0
.text:00004256                 lea     ecx, [ebp+var_2A4] ; this
.text:0000425C                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:00004261                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004268                 lea     ecx, [ebp+var_290]
.text:0000426E                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004273                 mov     eax, [ebp+var_2D4]
.text:00004279                 jmp     loc_43B2
.text:0000427E ; ---------------------------------------------------------------------------
.text:0000427E
.text:0000427E loc_427E:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+715j
.text:0000427E                 lea     ecx, [ebp+var_2B8]
.text:00004284                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:00004289                 test    eax, eax
.text:0000428B                 jnz     short loc_42D2
.text:0000428D                 mov     [ebp+var_2D8], 0
.text:00004297                 mov     byte ptr [ebp+var_4], 1
.text:0000429B                 lea     ecx, [ebp+var_2B8]
.text:000042A1                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:000042A6                 mov     byte ptr [ebp+var_4], 0
.text:000042AA                 lea     ecx, [ebp+var_2A4] ; this
.text:000042B0                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:000042B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000042BC                 lea     ecx, [ebp+var_290]
.text:000042C2                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000042C7                 mov     eax, [ebp+var_2D8]
.text:000042CD                 jmp     loc_43B2
.text:000042D2 ; ---------------------------------------------------------------------------
.text:000042D2
.text:000042D2 loc_42D2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+76Bj
.text:000042D2                 lea     ecx, [ebp+var_2B8]
.text:000042D8                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:000042DD                 cmp     eax, 1
.text:000042E0                 jbe     short loc_42E7
.text:000042E2                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:000042E7 ; ---------------------------------------------------------------------------
.text:000042E7
.text:000042E7 loc_42E7:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7C0j
.text:000042E7                 lea     ecx, [ebp+var_2A4] ; this
.text:000042ED                 call    ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove(void)
.text:000042F2                 lea     ecx, [ebp+var_2B8]
.text:000042F8                 call    ?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<uchar>>::Front(void)
.text:000042FD                 push    eax             ; int
.text:000042FE                 mov     edx, [ebp+var_14]
.text:00004301                 push    edx             ; struct NArchive::N7z::CInArchive *
.text:00004302                 lea     ecx, [ebp+var_2A4]
.text:00004308                 call    ?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)
.text:0000430D                 mov     ecx, [ebp+var_14] ; this
.text:00004310                 call    ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID(void)
.text:00004315                 mov     [ebp+var_310], eax
.text:0000431B                 mov     [ebp+var_30C], edx
.text:00004321                 cmp     [ebp+var_310], 1
.text:00004328                 jnz     short loc_4333
.text:0000432A                 cmp     [ebp+var_30C], 0
.text:00004331                 jz      short loc_4338
.text:00004333
.text:00004333 loc_4333:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+808j
.text:00004333                 call    ?ThrowIncorrect@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowIncorrect(void)
.text:00004338 ; ---------------------------------------------------------------------------
.text:00004338
.text:00004338 loc_4338:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+6A5j
.text:00004338                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+811j
.text:00004338                 mov     eax, [ebp+arg_0]
.text:0000433B                 mov     byte ptr [eax+130h], 1
.text:00004342                 mov     ecx, [ebp+arg_0]
.text:00004345                 mov     edx, [ebp+var_14]
.text:00004348                 mov     eax, [edx+70h]
.text:0000434B                 mov     [ecx+120h], eax
.text:00004351                 mov     edx, [edx+74h]
.text:00004354                 mov     [ecx+124h], edx
.text:0000435A                 mov     eax, [ebp+arg_10]
.text:0000435D                 push    eax             ; struct UString *
.text:0000435E                 mov     ecx, [ebp+arg_C]
.text:00004361                 push    ecx             ; bool *
.text:00004362                 mov     edx, [ebp+arg_8]
.text:00004365                 push    edx             ; bool *
.text:00004366                 mov     eax, [ebp+arg_4]
.text:00004369                 push    eax             ; struct ICryptoGetTextPassword *
.text:0000436A                 mov     ecx, [ebp+arg_0]
.text:0000436D                 push    ecx             ; struct NArchive::N7z::CDbEx *
.text:0000436E                 mov     ecx, [ebp+var_14] ; this
.text:00004371                 call    ?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)
.text:00004376                 mov     [ebp+var_2DC], eax
.text:0000437C                 mov     byte ptr [ebp+var_4], 1
.text:00004380                 lea     ecx, [ebp+var_2B8]
.text:00004386                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:0000438B                 mov     byte ptr [ebp+var_4], 0
.text:0000438F                 lea     ecx, [ebp+var_2A4] ; this
.text:00004395                 call    ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text:0000439A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000043A1                 lea     ecx, [ebp+var_290]
.text:000043A7                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000043AC                 mov     eax, [ebp+var_2DC]
.text:000043B2
.text:000043B2 loc_43B2:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+95j
.text:000043B2                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+137j ...
.text:000043B2                 push    edx
.text:000043B3                 mov     ecx, ebp
.text:000043B5                 push    eax
.text:000043B6                 lea     edx, $LN57
.text:000043BC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000043C1                 pop     eax
.text:000043C2                 pop     edx
.text:000043C3                 mov     ecx, [ebp+var_C]
.text:000043C6                 mov     large fs:0, ecx
.text:000043CD                 pop     ecx
.text:000043CE                 pop     edi
.text:000043CF                 pop     esi
.text:000043D0                 mov     ecx, [ebp+var_10]
.text:000043D3                 xor     ecx, ebp
.text:000043D5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000043DA                 add     esp, 310h
.text:000043E0                 cmp     ebp, esp
.text:000043E2                 call    __RTC_CheckEsp
.text:000043E7                 mov     esp, ebp
.text:000043E9                 pop     ebp
.text:000043EA                 retn    14h
.text:000043EA ?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text:000043EA
.text:000043EA ; ---------------------------------------------------------------------------
.text:000043ED                 align 10h
.text:000043F0 $LN57           dd 6                    ; DATA XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+896o
.text:000043F4                 dd offset $LN56
.text:000043F8 $LN56           dd 0FFFFFFC8h, 8        ; DATA XREF: .text:000043F4o
.text:00004400                 dd offset $LN49         ; "cur"
.text:00004404                 dd 0FFFFFFB8h, 8
.text:0000440C                 dd offset $LN50         ; "fileSize"
.text:00004410                 dd 0FFFFFDA8h, 200h
.text:00004418                 dd offset $LN51         ; "buf"
.text:0000441C                 dd 0FFFFFD70h, 8
.text:00004424                 dd offset $LN52         ; "buffer2"
.text:00004428                 dd 0FFFFFD5Ch, 8
.text:00004430                 dd offset $LN53         ; "streamSwitch"
.text:00004434                 dd 0FFFFFD48h, 0Ch
.text:0000443C                 dd offset $LN54         ; "dataVector"
.text:00004440 $LN54           db 'dataVector',0       ; DATA XREF: .text:0000443Co
.text:0000444B $LN53           db 'streamSwitch',0     ; DATA XREF: .text:00004430o
.text:00004458 $LN52           db 'buffer2',0          ; DATA XREF: .text:00004424o
.text:00004460 $LN51           db 'buf',0              ; DATA XREF: .text:00004418o
.text:00004464 $LN50           db 'fileSize',0         ; DATA XREF: .text:0000440Co
.text:0000446D $LN49           db 'cur',0              ; DATA XREF: .text:00004400o
.text:00004471                 align 10h
.text:00004480
.text:00004480 ; =============== S U B R O U T I N E =======================================
.text:00004480
.text:00004480 ; Attributes: bp-based frame
.text:00004480
.text:00004480 ; __int32 __thiscall NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CInArchive *this, struct NArchive::N7z::CDbEx *, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *)
.text:00004480                 public ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00004480 ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text:00004480
.text:00004480 var_24          = dword ptr -24h
.text:00004480 var_20          = dword ptr -20h
.text:00004480 var_1C          = dword ptr -1Ch
.text:00004480 var_18          = dword ptr -18h
.text:00004480 var_14          = dword ptr -14h
.text:00004480 var_10          = dword ptr -10h
.text:00004480 var_C           = dword ptr -0Ch
.text:00004480 var_4           = dword ptr -4
.text:00004480 arg_0           = dword ptr  8
.text:00004480 arg_4           = dword ptr  0Ch
.text:00004480 arg_8           = dword ptr  10h
.text:00004480 arg_C           = dword ptr  14h
.text:00004480 arg_10          = dword ptr  18h
.text:00004480
.text:00004480 ; FUNCTION CHUNK AT .text:00004572 SIZE 0000001E BYTES
.text:00004480
.text:00004480                 push    ebp
.text:00004481                 mov     ebp, esp
.text:00004483                 push    0FFFFFFFFh
.text:00004485                 push    offset __ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:0000448A                 mov     eax, large fs:0
.text:00004490                 push    eax
.text:00004491                 push    ecx
.text:00004492                 sub     esp, 14h
.text:00004495                 push    ebx
.text:00004496                 push    esi
.text:00004497                 push    edi
.text:00004498                 mov     eax, 0CCCCCCCCh
.text:0000449D                 mov     [ebp+var_24], eax
.text:000044A0                 mov     [ebp+var_20], eax
.text:000044A3                 mov     [ebp+var_1C], eax
.text:000044A6                 mov     [ebp+var_18], eax
.text:000044A9                 mov     [ebp+var_14], eax
.text:000044AC                 mov     eax, dword ptr ds:___security_cookie
.text:000044B1                 xor     eax, ebp
.text:000044B3                 push    eax
.text:000044B4                 lea     eax, [ebp+var_C]
.text:000044B7                 mov     large fs:0, eax
.text:000044BD                 mov     [ebp+var_10], esp
.text:000044C0                 mov     [ebp+var_14], ecx
.text:000044C3                 mov     [ebp+var_4], 0
.text:000044CA                 mov     eax, [ebp+arg_10]
.text:000044CD                 push    eax             ; struct UString *
.text:000044CE                 mov     ecx, [ebp+arg_C]
.text:000044D1                 push    ecx             ; bool *
.text:000044D2                 mov     edx, [ebp+arg_8]
.text:000044D5                 push    edx             ; bool *
.text:000044D6                 mov     eax, [ebp+arg_4]
.text:000044D9                 push    eax             ; struct ICryptoGetTextPassword *
.text:000044DA                 mov     ecx, [ebp+arg_0]
.text:000044DD                 push    ecx             ; struct NArchive::N7z::CDbEx *
.text:000044DE                 mov     ecx, [ebp+var_14] ; this
.text:000044E1                 call    ?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)
.text:000044E6                 mov     [ebp+var_24], eax
.text:000044E9                 mov     edx, [ebp+var_24]
.text:000044EC                 mov     [ebp+var_18], edx
.text:000044EF                 mov     eax, [ebp+var_14]
.text:000044F2                 movzx   ecx, byte ptr [eax+3Ch]
.text:000044F6                 test    ecx, ecx
.text:000044F8                 jz      short loc_4504
.text:000044FA                 mov     edx, [ebp+arg_0]
.text:000044FD                 mov     byte ptr [edx+132h], 1
.text:00004504
.text:00004504 loc_4504:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+78j
.text:00004504                 cmp     [ebp+var_18], 80004001h
.text:0000450B                 jnz     short loc_4512
.text:0000450D                 call    ?ThrowUnsupported@N7z@NArchive@@YGXXZ ; NArchive::N7z::ThrowUnsupported(void)
.text:00004512 ; ---------------------------------------------------------------------------
.text:00004512
.text:00004512 loc_4512:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8Bj
.text:00004512                 mov     eax, [ebp+var_18]
.text:00004515                 jmp     short loc_4572
.text:00004515 ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text:00004515
.text:00004517
.text:00004517 ; =============== S U B R O U T I N E =======================================
.text:00004517
.text:00004517
.text:00004517 __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 proc near
.text:00004517                                         ; DATA XREF: .xdata$x:00004BA4o
.text:00004517                 mov     eax, [ebp+8]
.text:0000451A                 mov     byte ptr [eax+136h], 1
.text:00004521                 mov     dword ptr [ebp-1Ch], 1
.text:00004528                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000452F                 mov     eax, offset $LN10_0
.text:00004534                 retn
.text:00004534 __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 endp
.text:00004534
.text:00004535 ; ---------------------------------------------------------------------------
.text:00004535                 mov     eax, offset __tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
.text:0000453A                 retn
.text:0000453B
.text:0000453B ; =============== S U B R O U T I N E =======================================
.text:0000453B
.text:0000453B
.text:0000453B __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 proc near
.text:0000453B                                         ; DATA XREF: .xdata$x:00004BB4o
.text:0000453B                 mov     ecx, [ebp+8]
.text:0000453E                 mov     byte ptr [ecx+132h], 1
.text:00004545                 mov     dword ptr [ebp-20h], 1
.text:0000454C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004553                 mov     eax, offset $LN12
.text:00004558                 retn
.text:00004558 __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 endp
.text:00004558
.text:00004559 ; ---------------------------------------------------------------------------
.text:00004559                 mov     eax, offset __tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
.text:0000455E                 retn
.text:0000455F ; ---------------------------------------------------------------------------
.text:0000455F
.text:0000455F __tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2:
.text:0000455F                                         ; DATA XREF: .text:00004535o
.text:0000455F                                         ; .text:00004559o
.text:0000455F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004566                 jmp     short loc_456D
.text:00004568 ; ---------------------------------------------------------------------------
.text:00004568
.text:00004568 $LN12:                                  ; DATA XREF: __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1+18o
.text:00004568                 mov     eax, [ebp-20h]
.text:0000456B                 jmp     short loc_4572
.text:0000456D ; ---------------------------------------------------------------------------
.text:0000456D
.text:0000456D loc_456D:                               ; CODE XREF: .text:00004566j
.text:0000456D                 jmp     short loc_4572
.text:0000456F ; ---------------------------------------------------------------------------
.text:0000456F
.text:0000456F $LN10_0:                                ; DATA XREF: __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0+18o
.text:0000456F                 mov     eax, [ebp-1Ch]
.text:00004572 ; START OF FUNCTION CHUNK FOR ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:00004572
.text:00004572 loc_4572:                               ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+95j
.text:00004572                                         ; .text:0000456Bj ...
.text:00004572                 mov     ecx, [ebp+var_C]
.text:00004575                 mov     large fs:0, ecx
.text:0000457C                 pop     ecx
.text:0000457D                 pop     edi
.text:0000457E                 pop     esi
.text:0000457F                 pop     ebx
.text:00004580                 add     esp, 24h
.text:00004583                 cmp     ebp, esp
.text:00004585                 call    __RTC_CheckEsp
.text:0000458A                 mov     esp, ebp
.text:0000458C                 pop     ebp
.text:0000458D                 retn    14h
.text:0000458D ; END OF FUNCTION CHUNK FOR ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text:0000458D _text           ends
.text:0000458D
.rtc$TMZ:00004590 ; ===========================================================================
.rtc$TMZ:00004590
.rtc$TMZ:00004590 ; Segment type: Pure data
.rtc$TMZ:00004590 ; Segment permissions: Read
.rtc$TMZ:00004590 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00004590                 assume cs:_rtc$TMZ
.rtc$TMZ:00004590                 ;org 4590h
.rtc$TMZ:00004590 ; COMDAT (pick any)
.rtc$TMZ:00004590 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00004590 _rtc$TMZ        ends
.rtc$TMZ:00004590
.rtc$IMZ:00004594 ; ===========================================================================
.rtc$IMZ:00004594
.rtc$IMZ:00004594 ; Segment type: Pure data
.rtc$IMZ:00004594 ; Segment permissions: Read
.rtc$IMZ:00004594 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00004594                 assume cs:_rtc$IMZ
.rtc$IMZ:00004594                 ;org 4594h
.rtc$IMZ:00004594 ; COMDAT (pick any)
.rtc$IMZ:00004594 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00004594 _rtc$IMZ        ends
.rtc$IMZ:00004594
.text:00004598 ; ===========================================================================
.text:00004598
.text:00004598 ; Segment type: Pure code
.text:00004598 ; Segment permissions: Read/Execute
.text:00004598 _text           segment para public 'CODE' use32
.text:00004598                 assume cs:_text
.text:00004598                 ;org 4598h
.text:00004598 ; COMDAT (pick any)
.text:00004598                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004598
.text:00004598 ; =============== S U B R O U T I N E =======================================
.text:00004598
.text:00004598 ; Attributes: bp-based frame
.text:00004598
.text:00004598 ; unsigned int __thiscall NArchive::N7z::CInByte2::GetRem(NArchive::N7z::CInByte2 *__hidden this)
.text:00004598                 public ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ
.text:00004598 ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ proc near
.text:00004598                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Remove(void)+21p
.text:00004598                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+A5p ...
.text:00004598
.text:00004598 var_4           = dword ptr -4
.text:00004598
.text:00004598                 push    ebp
.text:00004599                 mov     ebp, esp
.text:0000459B                 push    ecx
.text:0000459C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045A3                 mov     [ebp+var_4], ecx
.text:000045A6                 mov     eax, [ebp+var_4]
.text:000045A9                 mov     ecx, [ebp+var_4]
.text:000045AC                 mov     eax, [eax+4]
.text:000045AF                 sub     eax, [ecx+8]
.text:000045B2                 mov     esp, ebp
.text:000045B4                 pop     ebp
.text:000045B5                 retn
.text:000045B5 ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ endp
.text:000045B5
.text:000045B5 ; ---------------------------------------------------------------------------
.text:000045B6                 align 4
.text:000045B6 _text           ends
.text:000045B6
.text:000045B8 ; ===========================================================================
.text:000045B8
.text:000045B8 ; Segment type: Pure code
.text:000045B8 ; Segment permissions: Read/Execute
.text:000045B8 _text           segment para public 'CODE' use32
.text:000045B8                 assume cs:_text
.text:000045B8                 ;org 45B8h
.text:000045B8 ; COMDAT (pick any)
.text:000045B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000045B8
.text:000045B8 ; =============== S U B R O U T I N E =======================================
.text:000045B8
.text:000045B8 ; Attributes: bp-based frame
.text:000045B8
.text:000045B8 ; void __thiscall NArchive::N7z::CInArchive::DeleteByteStream(NArchive::N7z::CInArchive *this, bool)
.text:000045B8                 public ?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z
.text:000045B8 ?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z proc near
.text:000045B8                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Remove(void)+40p
.text:000045B8
.text:000045B8 var_4           = dword ptr -4
.text:000045B8 arg_0           = byte ptr  8
.text:000045B8
.text:000045B8                 push    ebp
.text:000045B9                 mov     ebp, esp
.text:000045BB                 push    ecx
.text:000045BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045C3                 mov     [ebp+var_4], ecx
.text:000045C6                 mov     eax, [ebp+var_4]
.text:000045C9                 mov     ecx, [eax+4]
.text:000045CC                 sub     ecx, 1
.text:000045CF                 mov     edx, [ebp+var_4]
.text:000045D2                 mov     [edx+4], ecx
.text:000045D5                 mov     eax, [ebp+var_4]
.text:000045D8                 cmp     dword ptr [eax+4], 0
.text:000045DC                 jbe     short loc_4621
.text:000045DE                 mov     ecx, [ebp+var_4]
.text:000045E1                 mov     edx, [ecx+4]
.text:000045E4                 sub     edx, 1
.text:000045E7                 imul    edx, 0Ch
.text:000045EA                 mov     eax, [ebp+var_4]
.text:000045ED                 lea     ecx, [eax+edx+8]
.text:000045F1                 mov     edx, [ebp+var_4]
.text:000045F4                 mov     [edx+38h], ecx
.text:000045F7                 movzx   eax, [ebp+arg_0]
.text:000045FB                 test    eax, eax
.text:000045FD                 jz      short loc_4621
.text:000045FF                 mov     ecx, [ebp+var_4]
.text:00004602                 mov     edx, [ecx+38h]
.text:00004605                 mov     eax, [ebp+var_4]
.text:00004608                 mov     ecx, [eax+4]
.text:0000460B                 imul    ecx, 0Ch
.text:0000460E                 mov     edx, [edx+8]
.text:00004611                 mov     eax, [ebp+var_4]
.text:00004614                 add     edx, [eax+ecx+10h]
.text:00004618                 mov     ecx, [ebp+var_4]
.text:0000461B                 mov     eax, [ecx+38h]
.text:0000461E                 mov     [eax+8], edx
.text:00004621
.text:00004621 loc_4621:                               ; CODE XREF: NArchive::N7z::CInArchive::DeleteByteStream(bool)+24j
.text:00004621                                         ; NArchive::N7z::CInArchive::DeleteByteStream(bool)+45j
.text:00004621                 mov     esp, ebp
.text:00004623                 pop     ebp
.text:00004624                 retn    4
.text:00004624 ?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z endp
.text:00004624
.text:00004624 ; ---------------------------------------------------------------------------
.text:00004627                 align 4
.text:00004627 _text           ends
.text:00004627
.text:00004628 ; ===========================================================================
.text:00004628
.text:00004628 ; Segment type: Pure code
.text:00004628 ; Segment permissions: Read/Execute
.text:00004628 _text           segment para public 'CODE' use32
.text:00004628                 assume cs:_text
.text:00004628                 ;org 4628h
.text:00004628 ; COMDAT (pick any)
.text:00004628                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004628
.text:00004628 ; =============== S U B R O U T I N E =======================================
.text:00004628
.text:00004628 ; Attributes: bp-based frame
.text:00004628
.text:00004628 ; unsigned __int8 __thiscall NArchive::N7z::CInArchive::ReadByte(NArchive::N7z::CInArchive *__hidden this)
.text:00004628                 public ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ
.text:00004628 ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ proc near
.text:00004628                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+29p
.text:00004628                                         ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+60p ...
.text:00004628
.text:00004628 var_4           = dword ptr -4
.text:00004628
.text:00004628                 push    ebp
.text:00004629                 mov     ebp, esp
.text:0000462B                 push    ecx
.text:0000462C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004633                 mov     [ebp+var_4], ecx
.text:00004636                 mov     eax, [ebp+var_4]
.text:00004639                 mov     ecx, [eax+38h]  ; this
.text:0000463C                 call    ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ; NArchive::N7z::CInByte2::ReadByte(void)
.text:00004641                 add     esp, 4
.text:00004644                 cmp     ebp, esp
.text:00004646                 call    __RTC_CheckEsp
.text:0000464B                 mov     esp, ebp
.text:0000464D                 pop     ebp
.text:0000464E                 retn
.text:0000464E ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ endp
.text:0000464E
.text:0000464E ; ---------------------------------------------------------------------------
.text:0000464F                 align 10h
.text:0000464F _text           ends
.text:0000464F
.text:00004650 ; ===========================================================================
.text:00004650
.text:00004650 ; Segment type: Pure code
.text:00004650 ; Segment permissions: Read/Execute
.text:00004650 _text           segment para public 'CODE' use32
.text:00004650                 assume cs:_text
.text:00004650                 ;org 4650h
.text:00004650 ; COMDAT (pick any)
.text:00004650                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004650
.text:00004650 ; =============== S U B R O U T I N E =======================================
.text:00004650
.text:00004650 ; Attributes: bp-based frame
.text:00004650
.text:00004650 ; unsigned int __thiscall NArchive::N7z::CInArchive::ReadNum(NArchive::N7z::CInArchive *__hidden this)
.text:00004650                 public ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ
.text:00004650 ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ proc near
.text:00004650                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+3Cp
.text:00004650                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+3Dp ...
.text:00004650
.text:00004650 var_4           = dword ptr -4
.text:00004650
.text:00004650                 push    ebp
.text:00004651                 mov     ebp, esp
.text:00004653                 push    ecx
.text:00004654                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000465B                 mov     [ebp+var_4], ecx
.text:0000465E                 mov     eax, [ebp+var_4]
.text:00004661                 mov     ecx, [eax+38h]  ; this
.text:00004664                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00004669                 add     esp, 4
.text:0000466C                 cmp     ebp, esp
.text:0000466E                 call    __RTC_CheckEsp
.text:00004673                 mov     esp, ebp
.text:00004675                 pop     ebp
.text:00004676                 retn
.text:00004676 ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ endp
.text:00004676
.text:00004676 ; ---------------------------------------------------------------------------
.text:00004677                 align 4
.text:00004677 _text           ends
.text:00004677
.xdata$x:00004678 ; ===========================================================================
.xdata$x:00004678
.xdata$x:00004678 ; Segment type: Pure data
.xdata$x:00004678 ; Segment permissions: Read
.xdata$x:00004678 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004678                 assume cs:_xdata$x
.xdata$x:00004678                 ;org 4678h
.xdata$x:00004678 ; COMDAT (pick any)
.xdata$x:00004678                 public __TI1?AVCInArchiveException@N7z@NArchive@@
.xdata$x:00004678 __TI1?AVCInArchiveException@N7z@NArchive@@ db    0
.xdata$x:00004678                                         ; DATA XREF: NArchive::N7z::ThrowException(void)+16o
.xdata$x:00004679                 db    0
.xdata$x:0000467A                 db    0
.xdata$x:0000467B                 db    0
.xdata$x:0000467C                 db    0
.xdata$x:0000467D                 db    0
.xdata$x:0000467E                 db    0
.xdata$x:0000467F                 db    0
.xdata$x:00004680                 db    0
.xdata$x:00004681                 db    0
.xdata$x:00004682                 db    0
.xdata$x:00004683                 db    0
.xdata$x:00004684                 dd offset __CTA1?AVCInArchiveException@N7z@NArchive@@
.xdata$x:00004684 _xdata$x        ends
.xdata$x:00004684
.xdata$x:00004688 ; ===========================================================================
.xdata$x:00004688
.xdata$x:00004688 ; Segment type: Pure data
.xdata$x:00004688 ; Segment permissions: Read
.xdata$x:00004688 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004688                 assume cs:_xdata$x
.xdata$x:00004688                 ;org 4688h
.xdata$x:00004688 ; COMDAT (pick any)
.xdata$x:00004688                 public __CTA1?AVCInArchiveException@N7z@NArchive@@
.xdata$x:00004688 __CTA1?AVCInArchiveException@N7z@NArchive@@ db    1
.xdata$x:00004688                                         ; DATA XREF: .xdata$x:00004684o
.xdata$x:00004689                 db    0
.xdata$x:0000468A                 db    0
.xdata$x:0000468B                 db    0
.xdata$x:0000468C                 dd offset __CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
.xdata$x:0000468C _xdata$x        ends
.xdata$x:0000468C
.xdata$x:00004690 ; ===========================================================================
.xdata$x:00004690
.xdata$x:00004690 ; Segment type: Pure data
.xdata$x:00004690 ; Segment permissions: Read
.xdata$x:00004690 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004690                 assume cs:_xdata$x
.xdata$x:00004690                 ;org 4690h
.xdata$x:00004690 ; COMDAT (pick any)
.xdata$x:00004690                 public __CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
.xdata$x:00004690 __CT??_R0?AVCInArchiveException@N7z@NArchive@@@81 db    0
.xdata$x:00004690                                         ; DATA XREF: .xdata$x:0000468Co
.xdata$x:00004690                                         ; .xdata$x:00004724o
.xdata$x:00004691                 db    0
.xdata$x:00004692                 db    0
.xdata$x:00004693                 db    0
.xdata$x:00004694                 dd offset ??_R0?AVCInArchiveException@N7z@NArchive@@@8 ; NArchive::N7z::CInArchiveException `RTTI Type Descriptor'
.xdata$x:00004698                 db    0
.xdata$x:00004699                 db    0
.xdata$x:0000469A                 db    0
.xdata$x:0000469B                 db    0
.xdata$x:0000469C                 db 0FFh
.xdata$x:0000469D                 db 0FFh
.xdata$x:0000469E                 db 0FFh
.xdata$x:0000469F                 db 0FFh
.xdata$x:000046A0                 db    0
.xdata$x:000046A1                 db    0
.xdata$x:000046A2                 db    0
.xdata$x:000046A3                 db    0
.xdata$x:000046A4                 db    1
.xdata$x:000046A5                 db    0
.xdata$x:000046A6                 db    0
.xdata$x:000046A7                 db    0
.xdata$x:000046A8                 db    0
.xdata$x:000046A9                 db    0
.xdata$x:000046AA                 db    0
.xdata$x:000046AB                 db    0
.xdata$x:000046AB _xdata$x        ends
.xdata$x:000046AB
.data:000046AC ; ===========================================================================
.data:000046AC
.data:000046AC ; Segment type: Pure data
.data:000046AC ; Segment permissions: Read/Write
.data:000046AC _data           segment dword public 'DATA' use32
.data:000046AC                 assume cs:_data
.data:000046AC                 ;org 46ACh
.data:000046AC ; COMDAT (pick any)
.data:000046AC                 public ??_R0?AVCInArchiveException@N7z@NArchive@@@8
.data:000046AC ; class NArchive::N7z::CInArchiveException `RTTI Type Descriptor'
.data:000046AC ??_R0?AVCInArchiveException@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000046AC                                         ; DATA XREF: .xdata$x:00004694o
.data:000046AC                                         ; .xdata$x:00004BACo
.data:000046AC                                         ; const type_info::`vftable'
.data:000046B0                 db    0
.data:000046B1                 db    0
.data:000046B2                 db    0
.data:000046B3                 db    0
.data:000046B4                 db  2Eh ; .
.data:000046B5                 db  3Fh ; ?
.data:000046B6                 db  41h ; A
.data:000046B7                 db  56h ; V
.data:000046B8                 db  43h ; C
.data:000046B9                 db  49h ; I
.data:000046BA                 db  6Eh ; n
.data:000046BB                 db  41h ; A
.data:000046BC                 db  72h ; r
.data:000046BD                 db  63h ; c
.data:000046BE                 db  68h ; h
.data:000046BF                 db  69h ; i
.data:000046C0                 db  76h ; v
.data:000046C1                 db  65h ; e
.data:000046C2                 db  45h ; E
.data:000046C3                 db  78h ; x
.data:000046C4                 db  63h ; c
.data:000046C5                 db  65h ; e
.data:000046C6                 db  70h ; p
.data:000046C7                 db  74h ; t
.data:000046C8                 db  69h ; i
.data:000046C9                 db  6Fh ; o
.data:000046CA                 db  6Eh ; n
.data:000046CB                 db  40h ; @
.data:000046CC                 db  4Eh ; N
.data:000046CD                 db  37h ; 7
.data:000046CE                 db  7Ah ; z
.data:000046CF                 db  40h ; @
.data:000046D0                 db  4Eh ; N
.data:000046D1                 db  41h ; A
.data:000046D2                 db  72h ; r
.data:000046D3                 db  63h ; c
.data:000046D4                 db  68h ; h
.data:000046D5                 db  69h ; i
.data:000046D6                 db  76h ; v
.data:000046D7                 db  65h ; e
.data:000046D8                 db  40h ; @
.data:000046D9                 db  40h ; @
.data:000046DA                 db    0
.data:000046DB                 align 4
.data:000046DB _data           ends
.data:000046DB
.text:000046DC ; ===========================================================================
.text:000046DC
.text:000046DC ; Segment type: Pure code
.text:000046DC ; Segment permissions: Read/Execute
.text:000046DC _text           segment para public 'CODE' use32
.text:000046DC                 assume cs:_text
.text:000046DC                 ;org 46DCh
.text:000046DC ; COMDAT (pick any)
.text:000046DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000046DC
.text:000046DC ; =============== S U B R O U T I N E =======================================
.text:000046DC
.text:000046DC ; Attributes: bp-based frame
.text:000046DC
.text:000046DC ; void __thiscall NArchive::N7z::CInByte2::Init(NArchive::N7z::CInByte2 *this, const unsigned __int8 *, unsigned int)
.text:000046DC                 public ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z
.text:000046DC ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z proc near
.text:000046DC                                         ; CODE XREF: NArchive::N7z::CInArchive::AddByteStream(uchar const *,uint)+4Fp
.text:000046DC                                         ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+62p
.text:000046DC
.text:000046DC var_4           = dword ptr -4
.text:000046DC arg_0           = dword ptr  8
.text:000046DC arg_4           = dword ptr  0Ch
.text:000046DC
.text:000046DC                 push    ebp
.text:000046DD                 mov     ebp, esp
.text:000046DF                 push    ecx
.text:000046E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046E7                 mov     [ebp+var_4], ecx
.text:000046EA                 mov     eax, [ebp+var_4]
.text:000046ED                 mov     ecx, [ebp+arg_0]
.text:000046F0                 mov     [eax], ecx
.text:000046F2                 mov     edx, [ebp+var_4]
.text:000046F5                 mov     eax, [ebp+arg_4]
.text:000046F8                 mov     [edx+4], eax
.text:000046FB                 mov     ecx, [ebp+var_4]
.text:000046FE                 mov     dword ptr [ecx+8], 0
.text:00004705                 mov     esp, ebp
.text:00004707                 pop     ebp
.text:00004708                 retn    8
.text:00004708 ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z endp
.text:00004708
.text:00004708 ; ---------------------------------------------------------------------------
.text:0000470B                 align 4
.text:0000470B _text           ends
.text:0000470B
.xdata$x:0000470C ; ===========================================================================
.xdata$x:0000470C
.xdata$x:0000470C ; Segment type: Pure data
.xdata$x:0000470C ; Segment permissions: Read
.xdata$x:0000470C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000470C                 assume cs:_xdata$x
.xdata$x:0000470C                 ;org 470Ch
.xdata$x:0000470C ; COMDAT (pick any)
.xdata$x:0000470C                 public __TI2?AVCUnsupportedFeatureException@N7z@NArchive@@
.xdata$x:0000470C __TI2?AVCUnsupportedFeatureException@N7z@NArchive@@ db    0
.xdata$x:0000470C                                         ; DATA XREF: NArchive::N7z::ThrowUnsupported(void)+11o
.xdata$x:0000470D                 db    0
.xdata$x:0000470E                 db    0
.xdata$x:0000470F                 db    0
.xdata$x:00004710                 db    0
.xdata$x:00004711                 db    0
.xdata$x:00004712                 db    0
.xdata$x:00004713                 db    0
.xdata$x:00004714                 db    0
.xdata$x:00004715                 db    0
.xdata$x:00004716                 db    0
.xdata$x:00004717                 db    0
.xdata$x:00004718                 dd offset __CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@
.xdata$x:00004718 _xdata$x        ends
.xdata$x:00004718
.xdata$x:0000471C ; ===========================================================================
.xdata$x:0000471C
.xdata$x:0000471C ; Segment type: Pure data
.xdata$x:0000471C ; Segment permissions: Read
.xdata$x:0000471C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000471C                 assume cs:_xdata$x
.xdata$x:0000471C                 ;org 471Ch
.xdata$x:0000471C ; COMDAT (pick any)
.xdata$x:0000471C                 public __CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@
.xdata$x:0000471C __CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@ db    2
.xdata$x:0000471C                                         ; DATA XREF: .xdata$x:00004718o
.xdata$x:0000471D                 db    0
.xdata$x:0000471E                 db    0
.xdata$x:0000471F                 db    0
.xdata$x:00004720                 dd offset __CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81
.xdata$x:00004724                 dd offset __CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
.xdata$x:00004724 _xdata$x        ends
.xdata$x:00004724
.xdata$x:00004728 ; ===========================================================================
.xdata$x:00004728
.xdata$x:00004728 ; Segment type: Pure data
.xdata$x:00004728 ; Segment permissions: Read
.xdata$x:00004728 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004728                 assume cs:_xdata$x
.xdata$x:00004728                 ;org 4728h
.xdata$x:00004728 ; COMDAT (pick any)
.xdata$x:00004728                 public __CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81
.xdata$x:00004728 __CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81 db    0
.xdata$x:00004728                                         ; DATA XREF: .xdata$x:00004720o
.xdata$x:00004729                 db    0
.xdata$x:0000472A                 db    0
.xdata$x:0000472B                 db    0
.xdata$x:0000472C                 dd offset ??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8 ; NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'
.xdata$x:00004730                 db    0
.xdata$x:00004731                 db    0
.xdata$x:00004732                 db    0
.xdata$x:00004733                 db    0
.xdata$x:00004734                 db 0FFh
.xdata$x:00004735                 db 0FFh
.xdata$x:00004736                 db 0FFh
.xdata$x:00004737                 db 0FFh
.xdata$x:00004738                 db    0
.xdata$x:00004739                 db    0
.xdata$x:0000473A                 db    0
.xdata$x:0000473B                 db    0
.xdata$x:0000473C                 db    1
.xdata$x:0000473D                 db    0
.xdata$x:0000473E                 db    0
.xdata$x:0000473F                 db    0
.xdata$x:00004740                 db    0
.xdata$x:00004741                 db    0
.xdata$x:00004742                 db    0
.xdata$x:00004743                 db    0
.xdata$x:00004743 _xdata$x        ends
.xdata$x:00004743
.data:00004744 ; ===========================================================================
.data:00004744
.data:00004744 ; Segment type: Pure data
.data:00004744 ; Segment permissions: Read/Write
.data:00004744 _data           segment dword public 'DATA' use32
.data:00004744                 assume cs:_data
.data:00004744                 ;org 4744h
.data:00004744 ; COMDAT (pick any)
.data:00004744                 public ??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8
.data:00004744 ; class NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'
.data:00004744 ??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004744                                         ; DATA XREF: .xdata$x:0000472Co
.data:00004744                                         ; .xdata$x:00004B9Co
.data:00004744                                         ; const type_info::`vftable'
.data:00004748                 db    0
.data:00004749                 db    0
.data:0000474A                 db    0
.data:0000474B                 db    0
.data:0000474C                 db  2Eh ; .
.data:0000474D                 db  3Fh ; ?
.data:0000474E                 db  41h ; A
.data:0000474F                 db  56h ; V
.data:00004750                 db  43h ; C
.data:00004751                 db  55h ; U
.data:00004752                 db  6Eh ; n
.data:00004753                 db  73h ; s
.data:00004754                 db  75h ; u
.data:00004755                 db  70h ; p
.data:00004756                 db  70h ; p
.data:00004757                 db  6Fh ; o
.data:00004758                 db  72h ; r
.data:00004759                 db  74h ; t
.data:0000475A                 db  65h ; e
.data:0000475B                 db  64h ; d
.data:0000475C                 db  46h ; F
.data:0000475D                 db  65h ; e
.data:0000475E                 db  61h ; a
.data:0000475F                 db  74h ; t
.data:00004760                 db  75h ; u
.data:00004761                 db  72h ; r
.data:00004762                 db  65h ; e
.data:00004763                 db  45h ; E
.data:00004764                 db  78h ; x
.data:00004765                 db  63h ; c
.data:00004766                 db  65h ; e
.data:00004767                 db  70h ; p
.data:00004768                 db  74h ; t
.data:00004769                 db  69h ; i
.data:0000476A                 db  6Fh ; o
.data:0000476B                 db  6Eh ; n
.data:0000476C                 db  40h ; @
.data:0000476D                 db  4Eh ; N
.data:0000476E                 db  37h ; 7
.data:0000476F                 db  7Ah ; z
.data:00004770                 db  40h ; @
.data:00004771                 db  4Eh ; N
.data:00004772                 db  41h ; A
.data:00004773                 db  72h ; r
.data:00004774                 db  63h ; c
.data:00004775                 db  68h ; h
.data:00004776                 db  69h ; i
.data:00004777                 db  76h ; v
.data:00004778                 db  65h ; e
.data:00004779                 db  40h ; @
.data:0000477A                 db  40h ; @
.data:0000477B                 db    0
.data:0000477B _data           ends
.data:0000477B
.text$x:0000477C ; ===========================================================================
.text$x:0000477C
.text$x:0000477C ; Segment type: Pure code
.text$x:0000477C ; Segment permissions: Read/Execute
.text$x:0000477C _text$x         segment para public 'CODE' use32
.text$x:0000477C                 assume cs:_text$x
.text$x:0000477C                 ;org 477Ch
.text$x:0000477C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000477C
.text$x:0000477C ; =============== S U B R O U T I N E =======================================
.text$x:0000477C
.text$x:0000477C
.text$x:0000477C __unwindfunclet$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z$0 proc near
.text$x:0000477C                                         ; DATA XREF: .xdata$x:00004988o
.text$x:0000477C                 lea     ecx, [ebp-20h]
.text$x:0000477F                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:0000477F __unwindfunclet$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z$0 endp
.text$x:0000477F
.text$x:00004784
.text$x:00004784 ; =============== S U B R O U T I N E =======================================
.text$x:00004784
.text$x:00004784
.text$x:00004784 __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z proc near
.text$x:00004784                                         ; DATA XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+5o
.text$x:00004784
.text$x:00004784 arg_4           = dword ptr  8
.text$x:00004784
.text$x:00004784                 mov     edx, [esp+arg_4]
.text$x:00004788                 lea     eax, [edx+0Ch]
.text$x:0000478B                 mov     ecx, [edx-70h]
.text$x:0000478E                 xor     ecx, eax
.text$x:00004790                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004795                 mov     eax, offset __ehfuncinfo$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text$x:0000479A                 jmp     ___CxxFrameHandler3
.text$x:0000479A __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z endp
.text$x:0000479A
.text$x:0000479F
.text$x:0000479F ; =============== S U B R O U T I N E =======================================
.text$x:0000479F
.text$x:0000479F
.text$x:0000479F __unwindfunclet$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z$0 proc near
.text$x:0000479F                                         ; DATA XREF: .xdata$x:000049B4o
.text$x:0000479F                 lea     ecx, [ebp-4Ch]  ; this
.text$x:000047A2                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:000047A2 __unwindfunclet$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z$0 endp
.text$x:000047A2
.text$x:000047A7
.text$x:000047A7 ; =============== S U B R O U T I N E =======================================
.text$x:000047A7
.text$x:000047A7
.text$x:000047A7 __ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z proc near
.text$x:000047A7                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+5o
.text$x:000047A7
.text$x:000047A7 arg_4           = dword ptr  8
.text$x:000047A7
.text$x:000047A7                 mov     edx, [esp+arg_4]
.text$x:000047AB                 lea     eax, [edx+0Ch]
.text$x:000047AE                 mov     ecx, [edx-4Ch]
.text$x:000047B1                 xor     ecx, eax
.text$x:000047B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047B8                 mov     eax, offset __ehfuncinfo$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
.text$x:000047BD                 jmp     ___CxxFrameHandler3
.text$x:000047BD __ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z endp
.text$x:000047BD
.text$x:000047C2
.text$x:000047C2 ; =============== S U B R O U T I N E =======================================
.text$x:000047C2
.text$x:000047C2
.text$x:000047C2 __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$0 proc near
.text$x:000047C2                                         ; DATA XREF: .xdata$x:000049E0o
.text$x:000047C2                 lea     ecx, [ebp-24h]  ; this
.text$x:000047C5                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:000047C5 __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$0 endp
.text$x:000047C5
.text$x:000047CA
.text$x:000047CA ; =============== S U B R O U T I N E =======================================
.text$x:000047CA
.text$x:000047CA
.text$x:000047CA __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$1 proc near
.text$x:000047CA                                         ; DATA XREF: .xdata$x:000049E8o
.text$x:000047CA                 lea     ecx, [ebp-3Ch]
.text$x:000047CD                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000047CD __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$1 endp
.text$x:000047CD
.text$x:000047D2
.text$x:000047D2 ; =============== S U B R O U T I N E =======================================
.text$x:000047D2
.text$x:000047D2
.text$x:000047D2 __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$2 proc near
.text$x:000047D2                                         ; DATA XREF: .xdata$x:000049F0o
.text$x:000047D2                 lea     ecx, [ebp-50h]
.text$x:000047D5                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000047D5 __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$2 endp
.text$x:000047D5
.text$x:000047DA
.text$x:000047DA ; =============== S U B R O U T I N E =======================================
.text$x:000047DA
.text$x:000047DA
.text$x:000047DA __ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z proc near
.text$x:000047DA                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+5o
.text$x:000047DA
.text$x:000047DA arg_4           = dword ptr  8
.text$x:000047DA
.text$x:000047DA                 mov     edx, [esp+arg_4]
.text$x:000047DE                 lea     eax, [edx+0Ch]
.text$x:000047E1                 mov     ecx, [edx-0BCh]
.text$x:000047E7                 xor     ecx, eax
.text$x:000047E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047EE                 mov     eax, offset __ehfuncinfo$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
.text$x:000047F3                 jmp     ___CxxFrameHandler3
.text$x:000047F3 __ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z endp
.text$x:000047F3
.text$x:000047F8
.text$x:000047F8 ; =============== S U B R O U T I N E =======================================
.text$x:000047F8
.text$x:000047F8
.text$x:000047F8 __unwindfunclet$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z$0 proc near
.text$x:000047F8                                         ; DATA XREF: .xdata$x:00004A1Co
.text$x:000047F8                 lea     ecx, [ebp-58h]
.text$x:000047FB                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000047FB __unwindfunclet$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z$0 endp
.text$x:000047FB
.text$x:00004800
.text$x:00004800 ; =============== S U B R O U T I N E =======================================
.text$x:00004800
.text$x:00004800
.text$x:00004800 __ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z proc near
.text$x:00004800                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+5o
.text$x:00004800
.text$x:00004800 arg_4           = dword ptr  8
.text$x:00004800
.text$x:00004800                 mov     edx, [esp+arg_4]
.text$x:00004804                 lea     eax, [edx+0Ch]
.text$x:00004807                 mov     ecx, [edx-84h]
.text$x:0000480D                 xor     ecx, eax
.text$x:0000480F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004814                 mov     eax, offset __ehfuncinfo$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
.text$x:00004819                 jmp     ___CxxFrameHandler3
.text$x:00004819 __ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z endp
.text$x:00004819
.text$x:0000481E
.text$x:0000481E ; =============== S U B R O U T I N E =======================================
.text$x:0000481E
.text$x:0000481E
.text$x:0000481E __unwindfunclet$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z$0 proc near
.text$x:0000481E                                         ; DATA XREF: .xdata$x:00004A48o
.text$x:0000481E                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00004821                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:00004821 __unwindfunclet$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z$0 endp
.text$x:00004821
.text$x:00004826
.text$x:00004826 ; =============== S U B R O U T I N E =======================================
.text$x:00004826
.text$x:00004826
.text$x:00004826 __ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z proc near
.text$x:00004826                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+5o
.text$x:00004826
.text$x:00004826 arg_4           = dword ptr  8
.text$x:00004826
.text$x:00004826                 mov     edx, [esp+arg_4]
.text$x:0000482A                 lea     eax, [edx+0Ch]
.text$x:0000482D                 mov     ecx, [edx-30h]
.text$x:00004830                 xor     ecx, eax
.text$x:00004832                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004837                 mov     eax, offset __ehfuncinfo$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
.text$x:0000483C                 jmp     ___CxxFrameHandler3
.text$x:0000483C __ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z endp
.text$x:0000483C
.text$x:00004841
.text$x:00004841 ; =============== S U B R O U T I N E =======================================
.text$x:00004841
.text$x:00004841
.text$x:00004841 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$0 proc near
.text$x:00004841                                         ; DATA XREF: .xdata$x:00004A98o
.text$x:00004841                 lea     ecx, [ebp-6Ch]  ; this
.text$x:00004844                 jmp     ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text$x:00004844 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$0 endp
.text$x:00004844
.text$x:00004849
.text$x:00004849 ; =============== S U B R O U T I N E =======================================
.text$x:00004849
.text$x:00004849
.text$x:00004849 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$1 proc near
.text$x:00004849                                         ; DATA XREF: .xdata$x:00004AA0o
.text$x:00004849                 lea     ecx, [ebp-80h]
.text$x:0000484C                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:0000484C __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$1 endp
.text$x:0000484C
.text$x:00004851
.text$x:00004851 ; =============== S U B R O U T I N E =======================================
.text$x:00004851
.text$x:00004851
.text$x:00004851 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$2 proc near
.text$x:00004851                                         ; DATA XREF: .xdata$x:00004AA8o
.text$x:00004851                 lea     ecx, [ebp-0A0h] ; this
.text$x:00004857                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00004857 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$2 endp
.text$x:00004857
.text$x:0000485C
.text$x:0000485C ; =============== S U B R O U T I N E =======================================
.text$x:0000485C
.text$x:0000485C
.text$x:0000485C __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$3 proc near
.text$x:0000485C                                         ; DATA XREF: .xdata$x:00004AB0o
.text$x:0000485C                 lea     ecx, [ebp-10Ch] ; this
.text$x:00004862                 jmp     ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text$x:00004862 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$3 endp
.text$x:00004862
.text$x:00004867
.text$x:00004867 ; =============== S U B R O U T I N E =======================================
.text$x:00004867
.text$x:00004867
.text$x:00004867 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4 proc near
.text$x:00004867                                         ; DATA XREF: .xdata$x:00004AB8o
.text$x:00004867                 mov     eax, [ebp-144h]
.text$x:0000486D                 push    eax             ; void *
.text$x:0000486E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004873                 pop     ecx
.text$x:00004874                 retn
.text$x:00004874 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4 endp
.text$x:00004874
.text$x:00004875
.text$x:00004875 ; =============== S U B R O U T I N E =======================================
.text$x:00004875
.text$x:00004875
.text$x:00004875 __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$5 proc near
.text$x:00004875                                         ; DATA XREF: .xdata$x:00004AC0o
.text$x:00004875                 lea     ecx, [ebp-130h]
.text$x:0000487B                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000487B __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$5 endp
.text$x:0000487B
.text$x:00004880
.text$x:00004880 ; =============== S U B R O U T I N E =======================================
.text$x:00004880
.text$x:00004880
.text$x:00004880 __ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z proc near
.text$x:00004880                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5o
.text$x:00004880
.text$x:00004880 arg_4           = dword ptr  8
.text$x:00004880
.text$x:00004880                 mov     edx, [esp+arg_4]
.text$x:00004884                 lea     eax, [edx+0Ch]
.text$x:00004887                 mov     ecx, [edx-158h]
.text$x:0000488D                 xor     ecx, eax
.text$x:0000488F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004894                 mov     eax, offset __ehfuncinfo$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
.text$x:00004899                 jmp     ___CxxFrameHandler3
.text$x:00004899 __ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z endp
.text$x:00004899
.text$x:0000489E
.text$x:0000489E ; =============== S U B R O U T I N E =======================================
.text$x:0000489E
.text$x:0000489E
.text$x:0000489E __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 proc near
.text$x:0000489E                                         ; DATA XREF: .xdata$x:00004AECo
.text$x:0000489E                 lea     ecx, [ebp-28h]
.text$x:000048A1                 jmp     ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text$x:000048A1 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 endp
.text$x:000048A1
.text$x:000048A6
.text$x:000048A6 ; =============== S U B R O U T I N E =======================================
.text$x:000048A6
.text$x:000048A6
.text$x:000048A6 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 proc near
.text$x:000048A6                                         ; DATA XREF: .xdata$x:00004AF4o
.text$x:000048A6                 lea     ecx, [ebp-44h]
.text$x:000048A9                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000048A9 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 endp
.text$x:000048A9
.text$x:000048AE
.text$x:000048AE ; =============== S U B R O U T I N E =======================================
.text$x:000048AE
.text$x:000048AE
.text$x:000048AE __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2 proc near
.text$x:000048AE                                         ; DATA XREF: .xdata$x:00004AFCo
.text$x:000048AE                 lea     ecx, [ebp-64h]  ; this
.text$x:000048B1                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:000048B1 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2 endp
.text$x:000048B1
.text$x:000048B6
.text$x:000048B6 ; =============== S U B R O U T I N E =======================================
.text$x:000048B6
.text$x:000048B6
.text$x:000048B6 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3 proc near
.text$x:000048B6                                         ; DATA XREF: .xdata$x:00004B04o
.text$x:000048B6                 lea     ecx, [ebp-80h]
.text$x:000048B9                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000048B9 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3 endp
.text$x:000048B9
.text$x:000048BE
.text$x:000048BE ; =============== S U B R O U T I N E =======================================
.text$x:000048BE
.text$x:000048BE
.text$x:000048BE __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$4 proc near
.text$x:000048BE                                         ; DATA XREF: .xdata$x:00004B0Co
.text$x:000048BE                 lea     ecx, [ebp-94h]
.text$x:000048C4                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000048C4 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$4 endp
.text$x:000048C4
.text$x:000048C9
.text$x:000048C9 ; =============== S U B R O U T I N E =======================================
.text$x:000048C9
.text$x:000048C9
.text$x:000048C9 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$5 proc near
.text$x:000048C9                                         ; DATA XREF: .xdata$x:00004B14o
.text$x:000048C9                 lea     ecx, [ebp-0A8h]
.text$x:000048CF                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000048CF __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$5 endp
.text$x:000048CF
.text$x:000048D4
.text$x:000048D4 ; =============== S U B R O U T I N E =======================================
.text$x:000048D4
.text$x:000048D4
.text$x:000048D4 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$6 proc near
.text$x:000048D4                                         ; DATA XREF: .xdata$x:00004B1Co
.text$x:000048D4                 lea     ecx, [ebp-0CCh] ; this
.text$x:000048DA                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:000048DA __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$6 endp
.text$x:000048DA
.text$x:000048DF
.text$x:000048DF ; =============== S U B R O U T I N E =======================================
.text$x:000048DF
.text$x:000048DF
.text$x:000048DF __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$7 proc near
.text$x:000048DF                                         ; DATA XREF: .xdata$x:00004B24o
.text$x:000048DF                 lea     ecx, [ebp-0E0h] ; this
.text$x:000048E5                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:000048E5 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$7 endp
.text$x:000048E5
.text$x:000048EA
.text$x:000048EA ; =============== S U B R O U T I N E =======================================
.text$x:000048EA
.text$x:000048EA
.text$x:000048EA __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$8 proc near
.text$x:000048EA                                         ; DATA XREF: .xdata$x:00004B2Co
.text$x:000048EA                 lea     ecx, [ebp-10Ch]
.text$x:000048F0                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000048F0 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$8 endp
.text$x:000048F0
.text$x:000048F5
.text$x:000048F5 ; =============== S U B R O U T I N E =======================================
.text$x:000048F5
.text$x:000048F5
.text$x:000048F5 __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$9 proc near
.text$x:000048F5                                         ; DATA XREF: .xdata$x:00004B34o
.text$x:000048F5                 lea     ecx, [ebp-11Ch] ; this
.text$x:000048FB                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:000048FB __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$9 endp
.text$x:000048FB
.text$x:00004900
.text$x:00004900 ; =============== S U B R O U T I N E =======================================
.text$x:00004900
.text$x:00004900
.text$x:00004900 __ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text$x:00004900                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5o
.text$x:00004900
.text$x:00004900 arg_4           = dword ptr  8
.text$x:00004900
.text$x:00004900                 mov     edx, [esp+arg_4]
.text$x:00004904                 lea     eax, [edx+0Ch]
.text$x:00004907                 mov     ecx, [edx-154h]
.text$x:0000490D                 xor     ecx, eax
.text$x:0000490F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004914                 mov     eax, offset __ehfuncinfo$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text$x:00004919                 jmp     ___CxxFrameHandler3
.text$x:00004919 __ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text$x:00004919
.text$x:0000491E
.text$x:0000491E ; =============== S U B R O U T I N E =======================================
.text$x:0000491E
.text$x:0000491E
.text$x:0000491E __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 proc near
.text$x:0000491E                                         ; DATA XREF: .xdata$x:00004B3Co
.text$x:0000491E                 lea     ecx, [ebp-290h]
.text$x:00004924                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00004924 __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0 endp
.text$x:00004924
.text$x:00004929
.text$x:00004929 ; =============== S U B R O U T I N E =======================================
.text$x:00004929
.text$x:00004929
.text$x:00004929 __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 proc near
.text$x:00004929                                         ; DATA XREF: .xdata$x:00004B44o
.text$x:00004929                 lea     ecx, [ebp-2A4h] ; this
.text$x:0000492F                 jmp     ??1CStreamSwitch@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CStreamSwitch::~CStreamSwitch(void)
.text$x:0000492F __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1 endp
.text$x:0000492F
.text$x:00004934
.text$x:00004934 ; =============== S U B R O U T I N E =======================================
.text$x:00004934
.text$x:00004934
.text$x:00004934 __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2 proc near
.text$x:00004934                                         ; DATA XREF: .xdata$x:00004B4Co
.text$x:00004934                 lea     ecx, [ebp-2B8h]
.text$x:0000493A                 jmp     ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text$x:0000493A __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2 endp
.text$x:0000493A
.text$x:0000493F
.text$x:0000493F ; =============== S U B R O U T I N E =======================================
.text$x:0000493F
.text$x:0000493F
.text$x:0000493F __ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text$x:0000493F                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5o
.text$x:0000493F
.text$x:0000493F arg_4           = dword ptr  8
.text$x:0000493F
.text$x:0000493F                 mov     edx, [esp+arg_4]
.text$x:00004943                 lea     eax, [edx+0Ch]
.text$x:00004946                 mov     ecx, [edx-310h]
.text$x:0000494C                 xor     ecx, eax
.text$x:0000494E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004953                 mov     ecx, [edx-4]
.text$x:00004956                 xor     ecx, eax
.text$x:00004958                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000495D                 mov     eax, offset __ehfuncinfo$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text$x:00004962                 jmp     ___CxxFrameHandler3
.text$x:00004962 __ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text$x:00004962
.text$x:00004967
.text$x:00004967 ; =============== S U B R O U T I N E =======================================
.text$x:00004967
.text$x:00004967
.text$x:00004967 __ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z proc near
.text$x:00004967                                         ; DATA XREF: NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5o
.text$x:00004967
.text$x:00004967 arg_4           = dword ptr  8
.text$x:00004967
.text$x:00004967                 mov     edx, [esp+arg_4]
.text$x:0000496B                 lea     eax, [edx+0Ch]
.text$x:0000496E                 mov     ecx, [edx-28h]
.text$x:00004971                 xor     ecx, eax
.text$x:00004973                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004978                 mov     eax, offset __ehfuncinfo$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.text$x:0000497D                 jmp     ___CxxFrameHandler3
.text$x:0000497D __ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z endp
.text$x:0000497D
.text$x:0000497D ; ---------------------------------------------------------------------------
.text$x:00004982                 align 4
.text$x:00004982 _text$x         ends
.text$x:00004982
.xdata$x:00004984 ; ===========================================================================
.xdata$x:00004984
.xdata$x:00004984 ; Segment type: Pure data
.xdata$x:00004984 ; Segment permissions: Read
.xdata$x:00004984 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004984                 assume cs:_xdata$x
.xdata$x:00004984                 ;org 4984h
.xdata$x:00004984 __unwindtable$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z db 0FFh
.xdata$x:00004984                                         ; DATA XREF: .xdata$x:00004994o
.xdata$x:00004985                 db 0FFh
.xdata$x:00004986                 db 0FFh
.xdata$x:00004987                 db 0FFh
.xdata$x:00004988                 dd offset __unwindfunclet$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z$0
.xdata$x:0000498C __ehfuncinfo$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z db  22h ; "
.xdata$x:0000498C                                         ; DATA XREF: __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z+11o
.xdata$x:0000498D                 db    5
.xdata$x:0000498E                 db  93h ; ô
.xdata$x:0000498F                 db  19h
.xdata$x:00004990                 db    1
.xdata$x:00004991                 db    0
.xdata$x:00004992                 db    0
.xdata$x:00004993                 db    0
.xdata$x:00004994                 dd offset __unwindtable$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
.xdata$x:00004998                 db    0
.xdata$x:00004999                 db    0
.xdata$x:0000499A                 db    0
.xdata$x:0000499B                 db    0
.xdata$x:0000499C                 db    0
.xdata$x:0000499D                 db    0
.xdata$x:0000499E                 db    0
.xdata$x:0000499F                 db    0
.xdata$x:000049A0                 db    0
.xdata$x:000049A1                 db    0
.xdata$x:000049A2                 db    0
.xdata$x:000049A3                 db    0
.xdata$x:000049A4                 db    0
.xdata$x:000049A5                 db    0
.xdata$x:000049A6                 db    0
.xdata$x:000049A7                 db    0
.xdata$x:000049A8                 db    0
.xdata$x:000049A9                 db    0
.xdata$x:000049AA                 db    0
.xdata$x:000049AB                 db    0
.xdata$x:000049AC                 db    1
.xdata$x:000049AD                 db    0
.xdata$x:000049AE                 db    0
.xdata$x:000049AF                 db    0
.xdata$x:000049B0 __unwindtable$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z db 0FFh
.xdata$x:000049B0                                         ; DATA XREF: .xdata$x:000049C0o
.xdata$x:000049B1                 db 0FFh
.xdata$x:000049B2                 db 0FFh
.xdata$x:000049B3                 db 0FFh
.xdata$x:000049B4                 dd offset __unwindfunclet$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z$0
.xdata$x:000049B8 __ehfuncinfo$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z db  22h ; "
.xdata$x:000049B8                                         ; DATA XREF: __ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z+11o
.xdata$x:000049B9                 db    5
.xdata$x:000049BA                 db  93h ; ô
.xdata$x:000049BB                 db  19h
.xdata$x:000049BC                 db    1
.xdata$x:000049BD                 db    0
.xdata$x:000049BE                 db    0
.xdata$x:000049BF                 db    0
.xdata$x:000049C0                 dd offset __unwindtable$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
.xdata$x:000049C4                 db    0
.xdata$x:000049C5                 db    0
.xdata$x:000049C6                 db    0
.xdata$x:000049C7                 db    0
.xdata$x:000049C8                 db    0
.xdata$x:000049C9                 db    0
.xdata$x:000049CA                 db    0
.xdata$x:000049CB                 db    0
.xdata$x:000049CC                 db    0
.xdata$x:000049CD                 db    0
.xdata$x:000049CE                 db    0
.xdata$x:000049CF                 db    0
.xdata$x:000049D0                 db    0
.xdata$x:000049D1                 db    0
.xdata$x:000049D2                 db    0
.xdata$x:000049D3                 db    0
.xdata$x:000049D4                 db    0
.xdata$x:000049D5                 db    0
.xdata$x:000049D6                 db    0
.xdata$x:000049D7                 db    0
.xdata$x:000049D8                 db    1
.xdata$x:000049D9                 db    0
.xdata$x:000049DA                 db    0
.xdata$x:000049DB                 db    0
.xdata$x:000049DC __unwindtable$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z db 0FFh
.xdata$x:000049DC                                         ; DATA XREF: .xdata$x:000049FCo
.xdata$x:000049DD                 db 0FFh
.xdata$x:000049DE                 db 0FFh
.xdata$x:000049DF                 db 0FFh
.xdata$x:000049E0                 dd offset __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$0
.xdata$x:000049E4                 align 8
.xdata$x:000049E8                 dd offset __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$1
.xdata$x:000049EC                 db    1
.xdata$x:000049ED                 db    0
.xdata$x:000049EE                 db    0
.xdata$x:000049EF                 db    0
.xdata$x:000049F0                 dd offset __unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$2
.xdata$x:000049F4 __ehfuncinfo$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z db  22h ; "
.xdata$x:000049F4                                         ; DATA XREF: __ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z+14o
.xdata$x:000049F5                 db    5
.xdata$x:000049F6                 db  93h ; ô
.xdata$x:000049F7                 db  19h
.xdata$x:000049F8                 db    3
.xdata$x:000049F9                 db    0
.xdata$x:000049FA                 db    0
.xdata$x:000049FB                 db    0
.xdata$x:000049FC                 dd offset __unwindtable$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
.xdata$x:00004A00                 db    0
.xdata$x:00004A01                 db    0
.xdata$x:00004A02                 db    0
.xdata$x:00004A03                 db    0
.xdata$x:00004A04                 db    0
.xdata$x:00004A05                 db    0
.xdata$x:00004A06                 db    0
.xdata$x:00004A07                 db    0
.xdata$x:00004A08                 db    0
.xdata$x:00004A09                 db    0
.xdata$x:00004A0A                 db    0
.xdata$x:00004A0B                 db    0
.xdata$x:00004A0C                 db    0
.xdata$x:00004A0D                 db    0
.xdata$x:00004A0E                 db    0
.xdata$x:00004A0F                 db    0
.xdata$x:00004A10                 db    0
.xdata$x:00004A11                 db    0
.xdata$x:00004A12                 db    0
.xdata$x:00004A13                 db    0
.xdata$x:00004A14                 db    1
.xdata$x:00004A15                 db    0
.xdata$x:00004A16                 db    0
.xdata$x:00004A17                 db    0
.xdata$x:00004A18 __unwindtable$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z db 0FFh
.xdata$x:00004A18                                         ; DATA XREF: .xdata$x:00004A28o
.xdata$x:00004A19                 db 0FFh
.xdata$x:00004A1A                 db 0FFh
.xdata$x:00004A1B                 db 0FFh
.xdata$x:00004A1C                 dd offset __unwindfunclet$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z$0
.xdata$x:00004A20 __ehfuncinfo$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z db  22h ; "
.xdata$x:00004A20                                         ; DATA XREF: __ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z+14o
.xdata$x:00004A21                 db    5
.xdata$x:00004A22                 db  93h ; ô
.xdata$x:00004A23                 db  19h
.xdata$x:00004A24                 db    1
.xdata$x:00004A25                 db    0
.xdata$x:00004A26                 db    0
.xdata$x:00004A27                 db    0
.xdata$x:00004A28                 dd offset __unwindtable$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
.xdata$x:00004A2C                 align 20h
.xdata$x:00004A40                 db    1
.xdata$x:00004A41                 db    0
.xdata$x:00004A42                 db    0
.xdata$x:00004A43                 db    0
.xdata$x:00004A44 __unwindtable$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z db 0FFh
.xdata$x:00004A44                                         ; DATA XREF: .xdata$x:00004A54o
.xdata$x:00004A45                 db 0FFh
.xdata$x:00004A46                 db 0FFh
.xdata$x:00004A47                 db 0FFh
.xdata$x:00004A48                 dd offset __unwindfunclet$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z$0
.xdata$x:00004A4C __ehfuncinfo$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z db  22h ; "
.xdata$x:00004A4C                                         ; DATA XREF: __ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z+11o
.xdata$x:00004A4D                 db    5
.xdata$x:00004A4E                 db  93h ; ô
.xdata$x:00004A4F                 db  19h
.xdata$x:00004A50                 db    1
.xdata$x:00004A51                 db    0
.xdata$x:00004A52                 db    0
.xdata$x:00004A53                 db    0
.xdata$x:00004A54                 dd offset __unwindtable$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
.xdata$x:00004A58                 db    0
.xdata$x:00004A59                 db    0
.xdata$x:00004A5A                 db    0
.xdata$x:00004A5B                 db    0
.xdata$x:00004A5C                 db    0
.xdata$x:00004A5D                 db    0
.xdata$x:00004A5E                 db    0
.xdata$x:00004A5F                 db    0
.xdata$x:00004A60                 db    0
.xdata$x:00004A61                 db    0
.xdata$x:00004A62                 db    0
.xdata$x:00004A63                 db    0
.xdata$x:00004A64                 db    0
.xdata$x:00004A65                 db    0
.xdata$x:00004A66                 db    0
.xdata$x:00004A67                 db    0
.xdata$x:00004A68                 db    0
.xdata$x:00004A69                 db    0
.xdata$x:00004A6A                 db    0
.xdata$x:00004A6B                 db    0
.xdata$x:00004A6C                 db    1
.xdata$x:00004A6D                 db    0
.xdata$x:00004A6E                 db    0
.xdata$x:00004A6F                 db    0
.xdata$x:00004A70 __ehfuncinfo$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z db  22h ; "
.xdata$x:00004A70                                         ; DATA XREF: __ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z+14o
.xdata$x:00004A71                 db    5
.xdata$x:00004A72                 db  93h ; ô
.xdata$x:00004A73                 db  19h
.xdata$x:00004A74                 db    6
.xdata$x:00004A75                 db    0
.xdata$x:00004A76                 db    0
.xdata$x:00004A77                 db    0
.xdata$x:00004A78                 dd offset __unwindtable$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
.xdata$x:00004A7C                 db    0
.xdata$x:00004A7D                 db    0
.xdata$x:00004A7E                 db    0
.xdata$x:00004A7F                 db    0
.xdata$x:00004A80                 db    0
.xdata$x:00004A81                 db    0
.xdata$x:00004A82                 db    0
.xdata$x:00004A83                 db    0
.xdata$x:00004A84                 db    0
.xdata$x:00004A85                 db    0
.xdata$x:00004A86                 db    0
.xdata$x:00004A87                 db    0
.xdata$x:00004A88                 db    0
.xdata$x:00004A89                 db    0
.xdata$x:00004A8A                 db    0
.xdata$x:00004A8B                 db    0
.xdata$x:00004A8C                 db    0
.xdata$x:00004A8D                 db    0
.xdata$x:00004A8E                 db    0
.xdata$x:00004A8F                 db    0
.xdata$x:00004A90                 db    1
.xdata$x:00004A91                 db    0
.xdata$x:00004A92                 db    0
.xdata$x:00004A93                 db    0
.xdata$x:00004A94 __unwindtable$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z db 0FFh
.xdata$x:00004A94                                         ; DATA XREF: .xdata$x:00004A78o
.xdata$x:00004A95                 db 0FFh
.xdata$x:00004A96                 db 0FFh
.xdata$x:00004A97                 db 0FFh
.xdata$x:00004A98                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$0
.xdata$x:00004A9C                 align 10h
.xdata$x:00004AA0                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$1
.xdata$x:00004AA4                 db    1
.xdata$x:00004AA5                 db    0
.xdata$x:00004AA6                 db    0
.xdata$x:00004AA7                 db    0
.xdata$x:00004AA8                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$2
.xdata$x:00004AAC                 db    2
.xdata$x:00004AAD                 db    0
.xdata$x:00004AAE                 db    0
.xdata$x:00004AAF                 db    0
.xdata$x:00004AB0                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$3
.xdata$x:00004AB4                 db    3
.xdata$x:00004AB5                 db    0
.xdata$x:00004AB6                 db    0
.xdata$x:00004AB7                 db    0
.xdata$x:00004AB8                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4
.xdata$x:00004ABC                 db    3
.xdata$x:00004ABD                 db    0
.xdata$x:00004ABE                 db    0
.xdata$x:00004ABF                 db    0
.xdata$x:00004AC0                 dd offset __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$5
.xdata$x:00004AC4 __ehfuncinfo$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db  22h ; "
.xdata$x:00004AC4                                         ; DATA XREF: __ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z+14o
.xdata$x:00004AC5                 db    5
.xdata$x:00004AC6                 db  93h ; ô
.xdata$x:00004AC7                 db  19h
.xdata$x:00004AC8                 db  0Ah
.xdata$x:00004AC9                 db    0
.xdata$x:00004ACA                 db    0
.xdata$x:00004ACB                 db    0
.xdata$x:00004ACC                 dd offset __unwindtable$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.xdata$x:00004AD0                 db    0
.xdata$x:00004AD1                 db    0
.xdata$x:00004AD2                 db    0
.xdata$x:00004AD3                 db    0
.xdata$x:00004AD4                 db    0
.xdata$x:00004AD5                 db    0
.xdata$x:00004AD6                 db    0
.xdata$x:00004AD7                 db    0
.xdata$x:00004AD8                 db    0
.xdata$x:00004AD9                 db    0
.xdata$x:00004ADA                 db    0
.xdata$x:00004ADB                 db    0
.xdata$x:00004ADC                 db    0
.xdata$x:00004ADD                 db    0
.xdata$x:00004ADE                 db    0
.xdata$x:00004ADF                 db    0
.xdata$x:00004AE0                 db    0
.xdata$x:00004AE1                 db    0
.xdata$x:00004AE2                 db    0
.xdata$x:00004AE3                 db    0
.xdata$x:00004AE4                 db    1
.xdata$x:00004AE5                 db    0
.xdata$x:00004AE6                 db    0
.xdata$x:00004AE7                 db    0
.xdata$x:00004AE8 __unwindtable$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db 0FFh
.xdata$x:00004AE8                                         ; DATA XREF: .xdata$x:00004ACCo
.xdata$x:00004AE9                 db 0FFh
.xdata$x:00004AEA                 db 0FFh
.xdata$x:00004AEB                 db 0FFh
.xdata$x:00004AEC                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
.xdata$x:00004AF0                 db    0
.xdata$x:00004AF1                 db    0
.xdata$x:00004AF2                 db    0
.xdata$x:00004AF3                 db    0
.xdata$x:00004AF4                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
.xdata$x:00004AF8                 db    1
.xdata$x:00004AF9                 db    0
.xdata$x:00004AFA                 db    0
.xdata$x:00004AFB                 db    0
.xdata$x:00004AFC                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
.xdata$x:00004B00                 db    2
.xdata$x:00004B01                 db    0
.xdata$x:00004B02                 db    0
.xdata$x:00004B03                 db    0
.xdata$x:00004B04                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3
.xdata$x:00004B08                 db    3
.xdata$x:00004B09                 db    0
.xdata$x:00004B0A                 db    0
.xdata$x:00004B0B                 db    0
.xdata$x:00004B0C                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$4
.xdata$x:00004B10                 db    4
.xdata$x:00004B11                 db    0
.xdata$x:00004B12                 db    0
.xdata$x:00004B13                 db    0
.xdata$x:00004B14                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$5
.xdata$x:00004B18                 db    5
.xdata$x:00004B19                 db    0
.xdata$x:00004B1A                 db    0
.xdata$x:00004B1B                 db    0
.xdata$x:00004B1C                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$6
.xdata$x:00004B20                 db    6
.xdata$x:00004B21                 db    0
.xdata$x:00004B22                 db    0
.xdata$x:00004B23                 db    0
.xdata$x:00004B24                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$7
.xdata$x:00004B28                 db    6
.xdata$x:00004B29                 db    0
.xdata$x:00004B2A                 db    0
.xdata$x:00004B2B                 db    0
.xdata$x:00004B2C                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$8
.xdata$x:00004B30                 db    8
.xdata$x:00004B31                 db    0
.xdata$x:00004B32                 db    0
.xdata$x:00004B33                 db    0
.xdata$x:00004B34                 dd offset __unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$9
.xdata$x:00004B38 __unwindtable$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db 0FFh
.xdata$x:00004B38                                         ; DATA XREF: .xdata$x:00004B58o
.xdata$x:00004B39                 db 0FFh
.xdata$x:00004B3A                 db 0FFh
.xdata$x:00004B3B                 db 0FFh
.xdata$x:00004B3C                 dd offset __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
.xdata$x:00004B40                 db    0
.xdata$x:00004B41                 db    0
.xdata$x:00004B42                 db    0
.xdata$x:00004B43                 db    0
.xdata$x:00004B44                 dd offset __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
.xdata$x:00004B48                 db    1
.xdata$x:00004B49                 db    0
.xdata$x:00004B4A                 db    0
.xdata$x:00004B4B                 db    0
.xdata$x:00004B4C                 dd offset __unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
.xdata$x:00004B50 __ehfuncinfo$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db  22h ; "
.xdata$x:00004B50                                         ; DATA XREF: __ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z+1Eo
.xdata$x:00004B51                 db    5
.xdata$x:00004B52                 db  93h ; ô
.xdata$x:00004B53                 db  19h
.xdata$x:00004B54                 db    3
.xdata$x:00004B55                 db    0
.xdata$x:00004B56                 db    0
.xdata$x:00004B57                 db    0
.xdata$x:00004B58                 dd offset __unwindtable$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.xdata$x:00004B5C                 db    0
.xdata$x:00004B5D                 db    0
.xdata$x:00004B5E                 db    0
.xdata$x:00004B5F                 db    0
.xdata$x:00004B60                 db    0
.xdata$x:00004B61                 db    0
.xdata$x:00004B62                 db    0
.xdata$x:00004B63                 db    0
.xdata$x:00004B64                 db    0
.xdata$x:00004B65                 db    0
.xdata$x:00004B66                 db    0
.xdata$x:00004B67                 db    0
.xdata$x:00004B68                 db    0
.xdata$x:00004B69                 db    0
.xdata$x:00004B6A                 db    0
.xdata$x:00004B6B                 db    0
.xdata$x:00004B6C                 db    0
.xdata$x:00004B6D                 db    0
.xdata$x:00004B6E                 db    0
.xdata$x:00004B6F                 db    0
.xdata$x:00004B70                 db    1
.xdata$x:00004B71                 db    0
.xdata$x:00004B72                 db    0
.xdata$x:00004B73                 db    0
.xdata$x:00004B74 __unwindtable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db 0FFh
.xdata$x:00004B74                                         ; DATA XREF: .xdata$x:00004BC0o
.xdata$x:00004B75                 db 0FFh
.xdata$x:00004B76                 db 0FFh
.xdata$x:00004B77                 db 0FFh
.xdata$x:00004B78                 db    0
.xdata$x:00004B79                 db    0
.xdata$x:00004B7A                 db    0
.xdata$x:00004B7B                 db    0
.xdata$x:00004B7C                 db 0FFh
.xdata$x:00004B7D                 db 0FFh
.xdata$x:00004B7E                 db 0FFh
.xdata$x:00004B7F                 db 0FFh
.xdata$x:00004B80                 db    0
.xdata$x:00004B81                 db    0
.xdata$x:00004B82                 db    0
.xdata$x:00004B83                 db    0
.xdata$x:00004B84 __tryblocktable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db    0
.xdata$x:00004B84                                         ; DATA XREF: .xdata$x:00004BC8o
.xdata$x:00004B85                 db    0
.xdata$x:00004B86                 db    0
.xdata$x:00004B87                 db    0
.xdata$x:00004B88                 db    0
.xdata$x:00004B89                 db    0
.xdata$x:00004B8A                 db    0
.xdata$x:00004B8B                 db    0
.xdata$x:00004B8C                 db    1
.xdata$x:00004B8D                 db    0
.xdata$x:00004B8E                 db    0
.xdata$x:00004B8F                 db    0
.xdata$x:00004B90                 db    2
.xdata$x:00004B91                 db    0
.xdata$x:00004B92                 db    0
.xdata$x:00004B93                 db    0
.xdata$x:00004B94                 dd offset __catchsym$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3
.xdata$x:00004B98 __catchsym$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3 db    8
.xdata$x:00004B98                                         ; DATA XREF: .xdata$x:00004B94o
.xdata$x:00004B99                 db    0
.xdata$x:00004B9A                 db    0
.xdata$x:00004B9B                 db    0
.xdata$x:00004B9C                 dd offset ??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8 ; NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'
.xdata$x:00004BA0                 db    0
.xdata$x:00004BA1                 db    0
.xdata$x:00004BA2                 db    0
.xdata$x:00004BA3                 db    0
.xdata$x:00004BA4                 dd offset __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
.xdata$x:00004BA8                 db    8
.xdata$x:00004BA9                 db    0
.xdata$x:00004BAA                 db    0
.xdata$x:00004BAB                 db    0
.xdata$x:00004BAC                 dd offset ??_R0?AVCInArchiveException@N7z@NArchive@@@8 ; NArchive::N7z::CInArchiveException `RTTI Type Descriptor'
.xdata$x:00004BB0                 db    0
.xdata$x:00004BB1                 db    0
.xdata$x:00004BB2                 db    0
.xdata$x:00004BB3                 db    0
.xdata$x:00004BB4                 dd offset __catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
.xdata$x:00004BB8 __ehfuncinfo$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z db  22h ; "
.xdata$x:00004BB8                                         ; DATA XREF: __ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z+11o
.xdata$x:00004BB9                 db    5
.xdata$x:00004BBA                 db  93h ; ô
.xdata$x:00004BBB                 db  19h
.xdata$x:00004BBC                 db    2
.xdata$x:00004BBD                 db    0
.xdata$x:00004BBE                 db    0
.xdata$x:00004BBF                 db    0
.xdata$x:00004BC0                 dd offset __unwindtable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.xdata$x:00004BC4                 db    1
.xdata$x:00004BC5                 db    0
.xdata$x:00004BC6                 db    0
.xdata$x:00004BC7                 db    0
.xdata$x:00004BC8                 dd offset __tryblocktable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
.xdata$x:00004BCC                 db    0
.xdata$x:00004BCD                 db    0
.xdata$x:00004BCE                 db    0
.xdata$x:00004BCF                 db    0
.xdata$x:00004BD0                 db    0
.xdata$x:00004BD1                 db    0
.xdata$x:00004BD2                 db    0
.xdata$x:00004BD3                 db    0
.xdata$x:00004BD4                 db    0
.xdata$x:00004BD5                 db    0
.xdata$x:00004BD6                 db    0
.xdata$x:00004BD7                 db    0
.xdata$x:00004BD8                 db    1
.xdata$x:00004BD9                 db    0
.xdata$x:00004BDA                 db    0
.xdata$x:00004BDB                 db    0
.xdata$x:00004BDB _xdata$x        ends
.xdata$x:00004BDB
.text:00004BDC ; ===========================================================================
.text:00004BDC
.text:00004BDC ; Segment type: Pure code
.text:00004BDC ; Segment permissions: Read/Execute
.text:00004BDC _text           segment para public 'CODE' use32
.text:00004BDC                 assume cs:_text
.text:00004BDC                 ;org 4BDCh
.text:00004BDC ; COMDAT (pick any)
.text:00004BDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BDC
.text:00004BDC ; =============== S U B R O U T I N E =======================================
.text:00004BDC
.text:00004BDC ; Attributes: bp-based frame
.text:00004BDC
.text:00004BDC ; unsigned __int64 __thiscall NArchive::N7z::CInArchive::ReadID(NArchive::N7z::CInArchive *__hidden this)
.text:00004BDC                 public ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ
.text:00004BDC ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ proc near
.text:00004BDC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)+21p
.text:00004BDC                                         ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)+21p ...
.text:00004BDC
.text:00004BDC var_4           = dword ptr -4
.text:00004BDC
.text:00004BDC                 push    ebp
.text:00004BDD                 mov     ebp, esp
.text:00004BDF                 push    ecx
.text:00004BE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BE7                 mov     [ebp+var_4], ecx
.text:00004BEA                 mov     eax, [ebp+var_4]
.text:00004BED                 mov     ecx, [eax+38h]  ; this
.text:00004BF0                 call    ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber(void)
.text:00004BF5                 add     esp, 4
.text:00004BF8                 cmp     ebp, esp
.text:00004BFA                 call    __RTC_CheckEsp
.text:00004BFF                 mov     esp, ebp
.text:00004C01                 pop     ebp
.text:00004C02                 retn
.text:00004C02 ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ endp
.text:00004C02
.text:00004C02 ; ---------------------------------------------------------------------------
.text:00004C03                 align 4
.text:00004C03 _text           ends
.text:00004C03
.text:00004C04 ; ===========================================================================
.text:00004C04
.text:00004C04 ; Segment type: Pure code
.text:00004C04 ; Segment permissions: Read/Execute
.text:00004C04 _text           segment para public 'CODE' use32
.text:00004C04                 assume cs:_text
.text:00004C04                 ;org 4C04h
.text:00004C04 ; COMDAT (pick any)
.text:00004C04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C04
.text:00004C04 ; =============== S U B R O U T I N E =======================================
.text:00004C04
.text:00004C04 ; Attributes: bp-based frame
.text:00004C04
.text:00004C04 ; void __thiscall NArchive::N7z::CInArchive::SkipData(NArchive::N7z::CInArchive *__hidden this)
.text:00004C04                 public ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ
.text:00004C04 ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ proc near
.text:00004C04                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadArchiveProperties(NArchive::N7z::CInArchiveInfo &)+39p
.text:00004C04                                         ; NArchive::N7z::CInArchive::WaitId(unsigned __int64)+4Ep ...
.text:00004C04
.text:00004C04 var_4           = dword ptr -4
.text:00004C04
.text:00004C04                 push    ebp
.text:00004C05                 mov     ebp, esp
.text:00004C07                 push    ecx
.text:00004C08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C0F                 mov     [ebp+var_4], ecx
.text:00004C12                 mov     eax, [ebp+var_4]
.text:00004C15                 mov     ecx, [eax+38h]  ; this
.text:00004C18                 call    ?SkipData@CInByte2@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInByte2::SkipData(void)
.text:00004C1D                 add     esp, 4
.text:00004C20                 cmp     ebp, esp
.text:00004C22                 call    __RTC_CheckEsp
.text:00004C27                 mov     esp, ebp
.text:00004C29                 pop     ebp
.text:00004C2A                 retn
.text:00004C2A ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ endp
.text:00004C2A
.text:00004C2A ; ---------------------------------------------------------------------------
.text:00004C2B                 align 4
.text:00004C2B _text           ends
.text:00004C2B
.text:00004C2C ; ===========================================================================
.text:00004C2C
.text:00004C2C ; Segment type: Pure code
.text:00004C2C ; Segment permissions: Read/Execute
.text:00004C2C _text           segment para public 'CODE' use32
.text:00004C2C                 assume cs:_text
.text:00004C2C                 ;org 4C2Ch
.text:00004C2C ; COMDAT (pick any)
.text:00004C2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C2C
.text:00004C2C ; =============== S U B R O U T I N E =======================================
.text:00004C2C
.text:00004C2C ; Attributes: bp-based frame
.text:00004C2C
.text:00004C2C ; int __thiscall NArchive::N7z::CFolder::FindBond_for_PackStream(NArchive::N7z::CFolder *this, unsigned int)
.text:00004C2C                 public ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z
.text:00004C2C ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z proc near
.text:00004C2C                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+25Ep
.text:00004C2C
.text:00004C2C var_8           = dword ptr -8
.text:00004C2C var_4           = dword ptr -4
.text:00004C2C arg_0           = dword ptr  8
.text:00004C2C
.text:00004C2C                 push    ebp
.text:00004C2D                 mov     ebp, esp
.text:00004C2F                 sub     esp, 8
.text:00004C32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C40                 mov     [ebp+var_4], ecx
.text:00004C43                 mov     [ebp+var_8], 0
.text:00004C4A                 jmp     short loc_4C55
.text:00004C4C ; ---------------------------------------------------------------------------
.text:00004C4C
.text:00004C4C loc_4C4C:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint):loc_4C80j
.text:00004C4C                 mov     eax, [ebp+var_8]
.text:00004C4F                 add     eax, 1
.text:00004C52                 mov     [ebp+var_8], eax
.text:00004C55
.text:00004C55 loc_4C55:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+1Ej
.text:00004C55                 mov     ecx, [ebp+var_4]
.text:00004C58                 add     ecx, 8
.text:00004C5B                 call    ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size(void)
.text:00004C60                 cmp     [ebp+var_8], eax
.text:00004C63                 jnb     short loc_4C82
.text:00004C65                 mov     ecx, [ebp+var_4]
.text:00004C68                 add     ecx, 8
.text:00004C6B                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *(void)
.text:00004C70                 mov     ecx, [ebp+var_8]
.text:00004C73                 mov     edx, [eax+ecx*8]
.text:00004C76                 cmp     edx, [ebp+arg_0]
.text:00004C79                 jnz     short loc_4C80
.text:00004C7B                 mov     eax, [ebp+var_8]
.text:00004C7E                 jmp     short loc_4C85
.text:00004C80 ; ---------------------------------------------------------------------------
.text:00004C80
.text:00004C80 loc_4C80:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+4Dj
.text:00004C80                 jmp     short loc_4C4C
.text:00004C82 ; ---------------------------------------------------------------------------
.text:00004C82
.text:00004C82 loc_4C82:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+37j
.text:00004C82                 or      eax, 0FFFFFFFFh
.text:00004C85
.text:00004C85 loc_4C85:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+52j
.text:00004C85                 add     esp, 8
.text:00004C88                 cmp     ebp, esp
.text:00004C8A                 call    __RTC_CheckEsp
.text:00004C8F                 mov     esp, ebp
.text:00004C91                 pop     ebp
.text:00004C92                 retn    4
.text:00004C92 ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z endp
.text:00004C92
.text:00004C92 ; ---------------------------------------------------------------------------
.text:00004C95                 align 4
.text:00004C95 _text           ends
.text:00004C95
.text:00004C98 ; ===========================================================================
.text:00004C98
.text:00004C98 ; Segment type: Pure code
.text:00004C98 ; Segment permissions: Read/Execute
.text:00004C98 _text           segment para public 'CODE' use32
.text:00004C98                 assume cs:_text
.text:00004C98                 ;org 4C98h
.text:00004C98 ; COMDAT (pick any)
.text:00004C98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C98
.text:00004C98 ; =============== S U B R O U T I N E =======================================
.text:00004C98
.text:00004C98 ; Attributes: bp-based frame
.text:00004C98
.text:00004C98 ; const unsigned __int8 *__thiscall NArchive::N7z::CInByte2::GetPtr(NArchive::N7z::CInByte2 *__hidden this)
.text:00004C98                 public ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ
.text:00004C98 ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ proc near
.text:00004C98                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+B7p
.text:00004C98                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+84p ...
.text:00004C98
.text:00004C98 var_4           = dword ptr -4
.text:00004C98
.text:00004C98                 push    ebp
.text:00004C99                 mov     ebp, esp
.text:00004C9B                 push    ecx
.text:00004C9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CA3                 mov     [ebp+var_4], ecx
.text:00004CA6                 mov     eax, [ebp+var_4]
.text:00004CA9                 mov     eax, [eax]
.text:00004CAB                 mov     ecx, [ebp+var_4]
.text:00004CAE                 add     eax, [ecx+8]
.text:00004CB1                 mov     esp, ebp
.text:00004CB3                 pop     ebp
.text:00004CB4                 retn
.text:00004CB4 ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ endp
.text:00004CB4
.text:00004CB4 ; ---------------------------------------------------------------------------
.text:00004CB5                 align 4
.text:00004CB5 _text           ends
.text:00004CB5
.text:00004CB8 ; ===========================================================================
.text:00004CB8
.text:00004CB8 ; Segment type: Pure code
.text:00004CB8 ; Segment permissions: Read/Execute
.text:00004CB8 _text           segment para public 'CODE' use32
.text:00004CB8                 assume cs:_text
.text:00004CB8                 ;org 4CB8h
.text:00004CB8 ; COMDAT (pick any)
.text:00004CB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CB8
.text:00004CB8 ; =============== S U B R O U T I N E =======================================
.text:00004CB8
.text:00004CB8 ; Attributes: bp-based frame
.text:00004CB8
.text:00004CB8 ; void __thiscall NArchive::N7z::CInByte2::SkipDataNoCheck(NArchive::N7z::CInByte2 *this, unsigned __int64)
.text:00004CB8                 public ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z
.text:00004CB8 ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z proc near
.text:00004CB8                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+118p
.text:00004CB8                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+258p ...
.text:00004CB8
.text:00004CB8 var_4           = dword ptr -4
.text:00004CB8 arg_0           = qword ptr  8
.text:00004CB8
.text:00004CB8                 push    ebp
.text:00004CB9                 mov     ebp, esp
.text:00004CBB                 push    ecx
.text:00004CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC3                 mov     [ebp+var_4], ecx
.text:00004CC6                 mov     eax, dword ptr [ebp+arg_0]
.text:00004CC9                 mov     ecx, [ebp+var_4]
.text:00004CCC                 add     eax, [ecx+8]
.text:00004CCF                 mov     edx, [ebp+var_4]
.text:00004CD2                 mov     [edx+8], eax
.text:00004CD5                 mov     esp, ebp
.text:00004CD7                 pop     ebp
.text:00004CD8                 retn    8
.text:00004CD8 ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z endp
.text:00004CD8
.text:00004CD8 ; ---------------------------------------------------------------------------
.text:00004CDB                 align 4
.text:00004CDB _text           ends
.text:00004CDB
.xdata$x:00004CDC ; ===========================================================================
.xdata$x:00004CDC
.xdata$x:00004CDC ; Segment type: Pure data
.xdata$x:00004CDC ; Segment permissions: Read
.xdata$x:00004CDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004CDC                 assume cs:_xdata$x
.xdata$x:00004CDC                 ;org 4CDCh
.xdata$x:00004CDC ; COMDAT (pick any)
.xdata$x:00004CDC                 public __TI1H
.xdata$x:00004CDC __TI1H          db    0                 ; DATA XREF: NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+86o
.xdata$x:00004CDD                 db    0
.xdata$x:00004CDE                 db    0
.xdata$x:00004CDF                 db    0
.xdata$x:00004CE0                 db    0
.xdata$x:00004CE1                 db    0
.xdata$x:00004CE2                 db    0
.xdata$x:00004CE3                 db    0
.xdata$x:00004CE4                 db    0
.xdata$x:00004CE5                 db    0
.xdata$x:00004CE6                 db    0
.xdata$x:00004CE7                 db    0
.xdata$x:00004CE8                 dd offset __CTA1H
.xdata$x:00004CE8 _xdata$x        ends
.xdata$x:00004CE8
.xdata$x:00004CEC ; ===========================================================================
.xdata$x:00004CEC
.xdata$x:00004CEC ; Segment type: Pure data
.xdata$x:00004CEC ; Segment permissions: Read
.xdata$x:00004CEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004CEC                 assume cs:_xdata$x
.xdata$x:00004CEC                 ;org 4CECh
.xdata$x:00004CEC ; COMDAT (pick any)
.xdata$x:00004CEC                 public __CTA1H
.xdata$x:00004CEC __CTA1H         db    1                 ; DATA XREF: .xdata$x:00004CE8o
.xdata$x:00004CED                 db    0
.xdata$x:00004CEE                 db    0
.xdata$x:00004CEF                 db    0
.xdata$x:00004CF0                 dd offset __CT??_R0H@84
.xdata$x:00004CF0 _xdata$x        ends
.xdata$x:00004CF0
.xdata$x:00004CF4 ; ===========================================================================
.xdata$x:00004CF4
.xdata$x:00004CF4 ; Segment type: Pure data
.xdata$x:00004CF4 ; Segment permissions: Read
.xdata$x:00004CF4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004CF4                 assume cs:_xdata$x
.xdata$x:00004CF4                 ;org 4CF4h
.xdata$x:00004CF4 ; COMDAT (pick any)
.xdata$x:00004CF4                 public __CT??_R0H@84
.xdata$x:00004CF4 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00004CF0o
.xdata$x:00004CF5                 db    0
.xdata$x:00004CF6                 db    0
.xdata$x:00004CF7                 db    0
.xdata$x:00004CF8                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00004CFC                 align 10h
.xdata$x:00004D00                 db 0FFh
.xdata$x:00004D01                 db 0FFh
.xdata$x:00004D02                 db 0FFh
.xdata$x:00004D03                 db 0FFh
.xdata$x:00004D04                 db    0
.xdata$x:00004D05                 db    0
.xdata$x:00004D06                 db    0
.xdata$x:00004D07                 db    0
.xdata$x:00004D08                 db    4
.xdata$x:00004D09                 db    0
.xdata$x:00004D0A                 db    0
.xdata$x:00004D0B                 db    0
.xdata$x:00004D0C                 db    0
.xdata$x:00004D0D                 db    0
.xdata$x:00004D0E                 db    0
.xdata$x:00004D0F                 db    0
.xdata$x:00004D0F _xdata$x        ends
.xdata$x:00004D0F
.data:00004D10 ; ===========================================================================
.data:00004D10
.data:00004D10 ; Segment type: Pure data
.data:00004D10 ; Segment permissions: Read/Write
.data:00004D10 _data           segment dword public 'DATA' use32
.data:00004D10                 assume cs:_data
.data:00004D10                 ;org 4D10h
.data:00004D10 ; COMDAT (pick any)
.data:00004D10                 public ??_R0H@8
.data:00004D10 ; int `RTTI Type Descriptor'
.data:00004D10 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00004CF8o
.data:00004D10                                         ; const type_info::`vftable'
.data:00004D14                 align 8
.data:00004D18                 db  2Eh ; .
.data:00004D19                 db  48h ; H
.data:00004D1A                 db    0
.data:00004D1B                 align 4
.data:00004D1B _data           ends
.data:00004D1B
.text:00004D1C ; ===========================================================================
.text:00004D1C
.text:00004D1C ; Segment type: Pure code
.text:00004D1C ; Segment permissions: Read/Execute
.text:00004D1C _text           segment para public 'CODE' use32
.text:00004D1C                 assume cs:_text
.text:00004D1C                 ;org 4D1Ch
.text:00004D1C ; COMDAT (pick any)
.text:00004D1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D1C
.text:00004D1C ; =============== S U B R O U T I N E =======================================
.text:00004D1C
.text:00004D1C ; Attributes: bp-based frame
.text:00004D1C
.text:00004D1C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text:00004D1C                 public _wmemcpy
.text:00004D1C _wmemcpy        proc near               ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+C0p
.text:00004D1C
.text:00004D1C Dst             = dword ptr  8
.text:00004D1C Src             = dword ptr  0Ch
.text:00004D1C arg_8           = dword ptr  10h
.text:00004D1C
.text:00004D1C                 push    ebp
.text:00004D1D                 mov     ebp, esp
.text:00004D1F                 mov     eax, [ebp+arg_8]
.text:00004D22                 shl     eax, 1
.text:00004D24                 push    eax             ; Size
.text:00004D25                 mov     ecx, [ebp+Src]
.text:00004D28                 push    ecx             ; Src
.text:00004D29                 mov     edx, [ebp+Dst]
.text:00004D2C                 push    edx             ; Dst
.text:00004D2D                 call    _memcpy
.text:00004D32                 add     esp, 0Ch
.text:00004D35                 cmp     ebp, esp
.text:00004D37                 call    __RTC_CheckEsp
.text:00004D3C                 pop     ebp
.text:00004D3D                 retn
.text:00004D3D _wmemcpy        endp
.text:00004D3D
.text:00004D3D ; ---------------------------------------------------------------------------
.text:00004D3E                 align 10h
.text:00004D3E _text           ends
.text:00004D3E
.text:00004D40 ; ===========================================================================
.text:00004D40
.text:00004D40 ; Segment type: Pure code
.text:00004D40 ; Segment permissions: Read/Execute
.text:00004D40 _text           segment para public 'CODE' use32
.text:00004D40                 assume cs:_text
.text:00004D40                 ;org 4D40h
.text:00004D40 ; COMDAT (pick any)
.text:00004D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D40
.text:00004D40 ; =============== S U B R O U T I N E =======================================
.text:00004D40
.text:00004D40 ; Attributes: bp-based frame
.text:00004D40
.text:00004D40 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00004D40                 public ?Empty@UString@@QAEXXZ
.text:00004D40 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+20p
.text:00004D40
.text:00004D40 var_4           = dword ptr -4
.text:00004D40
.text:00004D40                 push    ebp
.text:00004D41                 mov     ebp, esp
.text:00004D43                 push    ecx
.text:00004D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D4B                 mov     [ebp+var_4], ecx
.text:00004D4E                 mov     eax, [ebp+var_4]
.text:00004D51                 mov     dword ptr [eax+4], 0
.text:00004D58                 mov     ecx, [ebp+var_4]
.text:00004D5B                 mov     edx, [ecx]
.text:00004D5D                 xor     eax, eax
.text:00004D5F                 mov     [edx], ax
.text:00004D62                 mov     esp, ebp
.text:00004D64                 pop     ebp
.text:00004D65                 retn
.text:00004D65 ?Empty@UString@@QAEXXZ endp
.text:00004D65
.text:00004D65 ; ---------------------------------------------------------------------------
.text:00004D66                 align 4
.text:00004D66 _text           ends
.text:00004D66
.text:00004D68 ; ===========================================================================
.text:00004D68
.text:00004D68 ; Segment type: Pure code
.text:00004D68 ; Segment permissions: Read/Execute
.text:00004D68 _text           segment para public 'CODE' use32
.text:00004D68                 assume cs:_text
.text:00004D68                 ;org 4D68h
.text:00004D68 ; COMDAT (pick any)
.text:00004D68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D68
.text:00004D68 ; =============== S U B R O U T I N E =======================================
.text:00004D68
.text:00004D68 ; Attributes: bp-based frame
.text:00004D68
.text:00004D68 ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:00004D68                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:00004D68 ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+95p
.text:00004D68
.text:00004D68 var_4           = dword ptr -4
.text:00004D68 arg_0           = dword ptr  8
.text:00004D68
.text:00004D68                 push    ebp
.text:00004D69                 mov     ebp, esp
.text:00004D6B                 push    ecx
.text:00004D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D73                 mov     [ebp+var_4], ecx
.text:00004D76                 mov     eax, [ebp+var_4]
.text:00004D79                 mov     ecx, [ebp+arg_0]
.text:00004D7C                 cmp     ecx, [eax+8]
.text:00004D7F                 jbe     short loc_4D8D
.text:00004D81                 mov     edx, [ebp+arg_0]
.text:00004D84                 push    edx             ; unsigned int
.text:00004D85                 mov     ecx, [ebp+var_4] ; this
.text:00004D88                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:00004D8D
.text:00004D8D loc_4D8D:                               ; CODE XREF: UString::GetBuf(uint)+17j
.text:00004D8D                 mov     eax, [ebp+var_4]
.text:00004D90                 mov     eax, [eax]
.text:00004D92                 add     esp, 4
.text:00004D95                 cmp     ebp, esp
.text:00004D97                 call    __RTC_CheckEsp
.text:00004D9C                 mov     esp, ebp
.text:00004D9E                 pop     ebp
.text:00004D9F                 retn    4
.text:00004D9F ?GetBuf@UString@@QAEPA_WI@Z endp
.text:00004D9F
.text:00004D9F ; ---------------------------------------------------------------------------
.text:00004DA2                 align 4
.text:00004DA2 _text           ends
.text:00004DA2
.text:00004DA4 ; ===========================================================================
.text:00004DA4
.text:00004DA4 ; Segment type: Pure code
.text:00004DA4 ; Segment permissions: Read/Execute
.text:00004DA4 _text           segment para public 'CODE' use32
.text:00004DA4                 assume cs:_text
.text:00004DA4                 ;org 4DA4h
.text:00004DA4 ; COMDAT (pick any)
.text:00004DA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DA4
.text:00004DA4 ; =============== S U B R O U T I N E =======================================
.text:00004DA4
.text:00004DA4 ; Attributes: bp-based frame
.text:00004DA4
.text:00004DA4 ; void __thiscall UString::ReleaseBuf_SetLen(UString *this, unsigned int)
.text:00004DA4                 public ?ReleaseBuf_SetLen@UString@@QAEXI@Z
.text:00004DA4 ?ReleaseBuf_SetLen@UString@@QAEXI@Z proc near
.text:00004DA4                                         ; CODE XREF: NArchive::N7z::CDatabase::GetPath(uint,UString &)+D2p
.text:00004DA4
.text:00004DA4 var_4           = dword ptr -4
.text:00004DA4 arg_0           = dword ptr  8
.text:00004DA4
.text:00004DA4                 push    ebp
.text:00004DA5                 mov     ebp, esp
.text:00004DA7                 push    ecx
.text:00004DA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DAF                 mov     [ebp+var_4], ecx
.text:00004DB2                 mov     eax, [ebp+var_4]
.text:00004DB5                 mov     ecx, [ebp+arg_0]
.text:00004DB8                 mov     [eax+4], ecx
.text:00004DBB                 mov     esp, ebp
.text:00004DBD                 pop     ebp
.text:00004DBE                 retn    4
.text:00004DBE ?ReleaseBuf_SetLen@UString@@QAEXI@Z endp
.text:00004DBE
.text:00004DBE ; ---------------------------------------------------------------------------
.text:00004DC1                 align 4
.text:00004DC1 _text           ends
.text:00004DC1
.text:00004DC4 ; ===========================================================================
.text:00004DC4
.text:00004DC4 ; Segment type: Pure code
.text:00004DC4 ; Segment permissions: Read/Execute
.text:00004DC4 _text           segment para public 'CODE' use32
.text:00004DC4                 assume cs:_text
.text:00004DC4                 ;org 4DC4h
.text:00004DC4 ; COMDAT (pick any)
.text:00004DC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DC4
.text:00004DC4 ; =============== S U B R O U T I N E =======================================
.text:00004DC4
.text:00004DC4 ; Attributes: bp-based frame
.text:00004DC4
.text:00004DC4 ; unsigned int __thiscall NArchive::N7z::CInArchive::ReadUInt32(NArchive::N7z::CInArchive *__hidden this)
.text:00004DC4                 public ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ
.text:00004DC4 ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ proc near
.text:00004DC4                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+8Ap
.text:00004DC4                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+42Cp ...
.text:00004DC4
.text:00004DC4 var_4           = dword ptr -4
.text:00004DC4
.text:00004DC4                 push    ebp
.text:00004DC5                 mov     ebp, esp
.text:00004DC7                 push    ecx
.text:00004DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DCF                 mov     [ebp+var_4], ecx
.text:00004DD2                 mov     eax, [ebp+var_4]
.text:00004DD5                 mov     ecx, [eax+38h]  ; this
.text:00004DD8                 call    ?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadUInt32(void)
.text:00004DDD                 add     esp, 4
.text:00004DE0                 cmp     ebp, esp
.text:00004DE2                 call    __RTC_CheckEsp
.text:00004DE7                 mov     esp, ebp
.text:00004DE9                 pop     ebp
.text:00004DEA                 retn
.text:00004DEA ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ endp
.text:00004DEA
.text:00004DEA ; ---------------------------------------------------------------------------
.text:00004DEB                 align 4
.text:00004DEB _text           ends
.text:00004DEB
.text:00004DEC ; ===========================================================================
.text:00004DEC
.text:00004DEC ; Segment type: Pure code
.text:00004DEC ; Segment permissions: Read/Execute
.text:00004DEC _text           segment para public 'CODE' use32
.text:00004DEC                 assume cs:_text
.text:00004DEC                 ;org 4DECh
.text:00004DEC ; COMDAT (pick any)
.text:00004DEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DEC
.text:00004DEC ; =============== S U B R O U T I N E =======================================
.text:00004DEC
.text:00004DEC ; Attributes: bp-based frame
.text:00004DEC
.text:00004DEC ; unsigned __int64 __thiscall NArchive::N7z::CInArchive::ReadNumber(NArchive::N7z::CInArchive *__hidden this)
.text:00004DEC                 public ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ
.text:00004DEC ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ proc near
.text:00004DEC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+B1p
.text:00004DEC                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+6DEp ...
.text:00004DEC
.text:00004DEC var_4           = dword ptr -4
.text:00004DEC
.text:00004DEC                 push    ebp
.text:00004DED                 mov     ebp, esp
.text:00004DEF                 push    ecx
.text:00004DF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DF7                 mov     [ebp+var_4], ecx
.text:00004DFA                 mov     eax, [ebp+var_4]
.text:00004DFD                 mov     ecx, [eax+38h]  ; this
.text:00004E00                 call    ?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber(void)
.text:00004E05                 add     esp, 4
.text:00004E08                 cmp     ebp, esp
.text:00004E0A                 call    __RTC_CheckEsp
.text:00004E0F                 mov     esp, ebp
.text:00004E11                 pop     ebp
.text:00004E12                 retn
.text:00004E12 ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ endp
.text:00004E12
.text:00004E12 ; ---------------------------------------------------------------------------
.text:00004E13                 align 4
.text:00004E13 _text           ends
.text:00004E13
.text:00004E14 ; ===========================================================================
.text:00004E14
.text:00004E14 ; Segment type: Pure code
.text:00004E14 ; Segment permissions: Read/Execute
.text:00004E14 _text           segment para public 'CODE' use32
.text:00004E14                 assume cs:_text
.text:00004E14                 ;org 4E14h
.text:00004E14 ; COMDAT (pick any)
.text:00004E14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E14
.text:00004E14 ; =============== S U B R O U T I N E =======================================
.text:00004E14
.text:00004E14 ; Attributes: bp-based frame
.text:00004E14
.text:00004E14 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00004E14                 public ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004E14 ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004E14                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+129p
.text:00004E14                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+62p ...
.text:00004E14
.text:00004E14 var_10          = dword ptr -10h
.text:00004E14 var_C           = dword ptr -0Ch
.text:00004E14 var_4           = dword ptr -4
.text:00004E14
.text:00004E14                 push    ebp
.text:00004E15                 mov     ebp, esp
.text:00004E17                 push    0FFFFFFFFh
.text:00004E19                 push    offset __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004E1E                 mov     eax, large fs:0
.text:00004E24                 push    eax
.text:00004E25                 push    ecx
.text:00004E26                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004E2D                 mov     eax, dword ptr ds:___security_cookie
.text:00004E32                 xor     eax, ebp
.text:00004E34                 push    eax
.text:00004E35                 lea     eax, [ebp+var_C]
.text:00004E38                 mov     large fs:0, eax
.text:00004E3E                 mov     [ebp+var_10], ecx
.text:00004E41                 mov     ecx, [ebp+var_10]
.text:00004E44                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00004E49                 mov     [ebp+var_4], 0
.text:00004E50                 mov     ecx, [ebp+var_10]
.text:00004E53                 add     ecx, 0Ch
.text:00004E56                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004E5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E62                 mov     eax, [ebp+var_10]
.text:00004E65                 mov     ecx, [ebp+var_C]
.text:00004E68                 mov     large fs:0, ecx
.text:00004E6F                 pop     ecx
.text:00004E70                 add     esp, 10h
.text:00004E73                 cmp     ebp, esp
.text:00004E75                 call    __RTC_CheckEsp
.text:00004E7A                 mov     esp, ebp
.text:00004E7C                 pop     ebp
.text:00004E7D                 retn
.text:00004E7D ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00004E7D
.text:00004E7D ; ---------------------------------------------------------------------------
.text:00004E7E                 align 10h
.text:00004E7E _text           ends
.text:00004E7E
.text$x:00004E80 ; ===========================================================================
.text$x:00004E80
.text$x:00004E80 ; Segment type: Pure code
.text$x:00004E80 ; Segment permissions: Read/Execute
.text$x:00004E80 _text$x         segment para public 'CODE' use32
.text$x:00004E80                 assume cs:_text$x
.text$x:00004E80                 ;org 4E80h
.text$x:00004E80 ; COMDAT (pick associative to section at 4E14)
.text$x:00004E80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004E80
.text$x:00004E80 ; =============== S U B R O U T I N E =======================================
.text$x:00004E80
.text$x:00004E80
.text$x:00004E80 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004E80                                         ; DATA XREF: .xdata$x:00004EA8o
.text$x:00004E80                 mov     ecx, [ebp-10h]
.text$x:00004E83                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00004E83 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004E83
.text$x:00004E88
.text$x:00004E88 ; =============== S U B R O U T I N E =======================================
.text$x:00004E88
.text$x:00004E88
.text$x:00004E88 __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00004E88                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+5o
.text$x:00004E88
.text$x:00004E88 arg_4           = dword ptr  8
.text$x:00004E88
.text$x:00004E88                 mov     edx, [esp+arg_4]
.text$x:00004E8C                 lea     eax, [edx+0Ch]
.text$x:00004E8F                 mov     ecx, [edx-8]
.text$x:00004E92                 xor     ecx, eax
.text$x:00004E94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E99                 mov     eax, offset __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00004E9E                 jmp     ___CxxFrameHandler3
.text$x:00004E9E __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00004E9E
.text$x:00004E9E ; ---------------------------------------------------------------------------
.text$x:00004EA3                 align 4
.text$x:00004EA3 _text$x         ends
.text$x:00004EA3
.xdata$x:00004EA4 ; ===========================================================================
.xdata$x:00004EA4
.xdata$x:00004EA4 ; Segment type: Pure data
.xdata$x:00004EA4 ; Segment permissions: Read
.xdata$x:00004EA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004EA4                 assume cs:_xdata$x
.xdata$x:00004EA4                 ;org 4EA4h
.xdata$x:00004EA4 ; COMDAT (pick associative to section at 4E14)
.xdata$x:00004EA4 __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004EA4                                         ; DATA XREF: .xdata$x:00004EB4o
.xdata$x:00004EA5                 db 0FFh
.xdata$x:00004EA6                 db 0FFh
.xdata$x:00004EA7                 db 0FFh
.xdata$x:00004EA8                 dd offset __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004EAC __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004EAC                                         ; DATA XREF: __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004EAD                 db    5
.xdata$x:00004EAE                 db  93h ; ô
.xdata$x:00004EAF                 db  19h
.xdata$x:00004EB0                 db    1
.xdata$x:00004EB1                 db    0
.xdata$x:00004EB2                 db    0
.xdata$x:00004EB3                 db    0
.xdata$x:00004EB4                 dd offset __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00004EB8                 db    0
.xdata$x:00004EB9                 db    0
.xdata$x:00004EBA                 db    0
.xdata$x:00004EBB                 db    0
.xdata$x:00004EBC                 db    0
.xdata$x:00004EBD                 db    0
.xdata$x:00004EBE                 db    0
.xdata$x:00004EBF                 db    0
.xdata$x:00004EC0                 db    0
.xdata$x:00004EC1                 db    0
.xdata$x:00004EC2                 db    0
.xdata$x:00004EC3                 db    0
.xdata$x:00004EC4                 db    0
.xdata$x:00004EC5                 db    0
.xdata$x:00004EC6                 db    0
.xdata$x:00004EC7                 db    0
.xdata$x:00004EC8                 db    0
.xdata$x:00004EC9                 db    0
.xdata$x:00004ECA                 db    0
.xdata$x:00004ECB                 db    0
.xdata$x:00004ECC                 db    1
.xdata$x:00004ECD                 db    0
.xdata$x:00004ECE                 db    0
.xdata$x:00004ECF                 db    0
.xdata$x:00004ECF _xdata$x        ends
.xdata$x:00004ECF
.text:00004ED0 ; ===========================================================================
.text:00004ED0
.text:00004ED0 ; Segment type: Pure code
.text:00004ED0 ; Segment permissions: Read/Execute
.text:00004ED0 _text           segment para public 'CODE' use32
.text:00004ED0                 assume cs:_text
.text:00004ED0                 ;org 4ED0h
.text:00004ED0 ; COMDAT (pick any)
.text:00004ED0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004ED0
.text:00004ED0 ; =============== S U B R O U T I N E =======================================
.text:00004ED0
.text:00004ED0 ; Attributes: bp-based frame
.text:00004ED0
.text:00004ED0 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00004ED0                 public ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004ED0 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00004ED0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+14Fp
.text:00004ED0                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+273p ...
.text:00004ED0
.text:00004ED0 var_10          = dword ptr -10h
.text:00004ED0 var_C           = dword ptr -0Ch
.text:00004ED0 var_4           = dword ptr -4
.text:00004ED0
.text:00004ED0                 push    ebp
.text:00004ED1                 mov     ebp, esp
.text:00004ED3                 push    0FFFFFFFFh
.text:00004ED5                 push    offset __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00004EDA                 mov     eax, large fs:0
.text:00004EE0                 push    eax
.text:00004EE1                 push    ecx
.text:00004EE2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004EE9                 mov     eax, dword ptr ds:___security_cookie
.text:00004EEE                 xor     eax, ebp
.text:00004EF0                 push    eax
.text:00004EF1                 lea     eax, [ebp+var_C]
.text:00004EF4                 mov     large fs:0, eax
.text:00004EFA                 mov     [ebp+var_10], ecx
.text:00004EFD                 mov     [ebp+var_4], 0
.text:00004F04                 mov     ecx, [ebp+var_10]
.text:00004F07                 add     ecx, 0Ch
.text:00004F0A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00004F0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F16                 mov     ecx, [ebp+var_10]
.text:00004F19                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004F1E                 mov     ecx, [ebp+var_C]
.text:00004F21                 mov     large fs:0, ecx
.text:00004F28                 pop     ecx
.text:00004F29                 add     esp, 10h
.text:00004F2C                 cmp     ebp, esp
.text:00004F2E                 call    __RTC_CheckEsp
.text:00004F33                 mov     esp, ebp
.text:00004F35                 pop     ebp
.text:00004F36                 retn
.text:00004F36 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00004F36
.text:00004F36 ; ---------------------------------------------------------------------------
.text:00004F37                 align 4
.text:00004F37 _text           ends
.text:00004F37
.text$x:00004F38 ; ===========================================================================
.text$x:00004F38
.text$x:00004F38 ; Segment type: Pure code
.text$x:00004F38 ; Segment permissions: Read/Execute
.text$x:00004F38 _text$x         segment para public 'CODE' use32
.text$x:00004F38                 assume cs:_text$x
.text$x:00004F38                 ;org 4F38h
.text$x:00004F38 ; COMDAT (pick associative to section at 4ED0)
.text$x:00004F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004F38
.text$x:00004F38 ; =============== S U B R O U T I N E =======================================
.text$x:00004F38
.text$x:00004F38
.text$x:00004F38 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004F38                                         ; DATA XREF: .xdata$x:00004F60o
.text$x:00004F38                 mov     ecx, [ebp-10h]
.text$x:00004F3B                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00004F3B __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004F3B
.text$x:00004F40
.text$x:00004F40 ; =============== S U B R O U T I N E =======================================
.text$x:00004F40
.text$x:00004F40
.text$x:00004F40 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00004F40                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+5o
.text$x:00004F40
.text$x:00004F40 arg_4           = dword ptr  8
.text$x:00004F40
.text$x:00004F40                 mov     edx, [esp+arg_4]
.text$x:00004F44                 lea     eax, [edx+0Ch]
.text$x:00004F47                 mov     ecx, [edx-8]
.text$x:00004F4A                 xor     ecx, eax
.text$x:00004F4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F51                 mov     eax, offset __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00004F56                 jmp     ___CxxFrameHandler3
.text$x:00004F56 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00004F56
.text$x:00004F56 ; ---------------------------------------------------------------------------
.text$x:00004F5B                 align 4
.text$x:00004F5B _text$x         ends
.text$x:00004F5B
.xdata$x:00004F5C ; ===========================================================================
.xdata$x:00004F5C
.xdata$x:00004F5C ; Segment type: Pure data
.xdata$x:00004F5C ; Segment permissions: Read
.xdata$x:00004F5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004F5C                 assume cs:_xdata$x
.xdata$x:00004F5C                 ;org 4F5Ch
.xdata$x:00004F5C ; COMDAT (pick associative to section at 4ED0)
.xdata$x:00004F5C __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004F5C                                         ; DATA XREF: .xdata$x:00004F6Co
.xdata$x:00004F5D                 db 0FFh
.xdata$x:00004F5E                 db 0FFh
.xdata$x:00004F5F                 db 0FFh
.xdata$x:00004F60                 dd offset __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004F64 __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004F64                                         ; DATA XREF: __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004F65                 db    5
.xdata$x:00004F66                 db  93h ; ô
.xdata$x:00004F67                 db  19h
.xdata$x:00004F68                 db    1
.xdata$x:00004F69                 db    0
.xdata$x:00004F6A                 db    0
.xdata$x:00004F6B                 db    0
.xdata$x:00004F6C                 dd offset __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00004F70                 db    0
.xdata$x:00004F71                 db    0
.xdata$x:00004F72                 db    0
.xdata$x:00004F73                 db    0
.xdata$x:00004F74                 db    0
.xdata$x:00004F75                 db    0
.xdata$x:00004F76                 db    0
.xdata$x:00004F77                 db    0
.xdata$x:00004F78                 db    0
.xdata$x:00004F79                 db    0
.xdata$x:00004F7A                 db    0
.xdata$x:00004F7B                 db    0
.xdata$x:00004F7C                 db    0
.xdata$x:00004F7D                 db    0
.xdata$x:00004F7E                 db    0
.xdata$x:00004F7F                 db    0
.xdata$x:00004F80                 db    0
.xdata$x:00004F81                 db    0
.xdata$x:00004F82                 db    0
.xdata$x:00004F83                 db    0
.xdata$x:00004F84                 db    1
.xdata$x:00004F85                 db    0
.xdata$x:00004F86                 db    0
.xdata$x:00004F87                 db    0
.xdata$x:00004F87 _xdata$x        ends
.xdata$x:00004F87
.text:00004F88 ; ===========================================================================
.text:00004F88
.text:00004F88 ; Segment type: Pure code
.text:00004F88 ; Segment permissions: Read/Execute
.text:00004F88 _text           segment para public 'CODE' use32
.text:00004F88                 assume cs:_text
.text:00004F88                 ;org 4F88h
.text:00004F88 ; COMDAT (pick any)
.text:00004F88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F88
.text:00004F88 ; =============== S U B R O U T I N E =======================================
.text:00004F88
.text:00004F88 ; Attributes: bp-based frame
.text:00004F88
.text:00004F88 ; _DWORD __thiscall NArchive::N7z::CStreamSwitch::CStreamSwitch(NArchive::N7z::CStreamSwitch *__hidden this)
.text:00004F88                 public ??0CStreamSwitch@N7z@NArchive@@QAE@XZ
.text:00004F88 ??0CStreamSwitch@N7z@NArchive@@QAE@XZ proc near
.text:00004F88                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+62p
.text:00004F88                                         ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+4Dp ...
.text:00004F88
.text:00004F88 var_4           = dword ptr -4
.text:00004F88
.text:00004F88                 push    ebp
.text:00004F89                 mov     ebp, esp
.text:00004F8B                 push    ecx
.text:00004F8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F93                 mov     [ebp+var_4], ecx
.text:00004F96                 mov     eax, [ebp+var_4]
.text:00004F99                 mov     byte ptr [eax+4], 0
.text:00004F9D                 mov     ecx, [ebp+var_4]
.text:00004FA0                 mov     byte ptr [ecx+5], 0
.text:00004FA4                 mov     eax, [ebp+var_4]
.text:00004FA7                 mov     esp, ebp
.text:00004FA9                 pop     ebp
.text:00004FAA                 retn
.text:00004FAA ??0CStreamSwitch@N7z@NArchive@@QAE@XZ endp
.text:00004FAA
.text:00004FAA ; ---------------------------------------------------------------------------
.text:00004FAB                 align 4
.text:00004FAB _text           ends
.text:00004FAB
.text:00004FAC ; ===========================================================================
.text:00004FAC
.text:00004FAC ; Segment type: Pure code
.text:00004FAC ; Segment permissions: Read/Execute
.text:00004FAC _text           segment para public 'CODE' use32
.text:00004FAC                 assume cs:_text
.text:00004FAC                 ;org 4FACh
.text:00004FAC ; COMDAT (pick any)
.text:00004FAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FAC
.text:00004FAC ; =============== S U B R O U T I N E =======================================
.text:00004FAC
.text:00004FAC ; Attributes: bp-based frame
.text:00004FAC
.text:00004FAC ; _DWORD __thiscall NArchive::N7z::CStreamSwitch::~CStreamSwitch(NArchive::N7z::CStreamSwitch *__hidden this)
.text:00004FAC                 public ??1CStreamSwitch@N7z@NArchive@@QAE@XZ
.text:00004FAC ??1CStreamSwitch@N7z@NArchive@@QAE@XZ proc near
.text:00004FAC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+695p
.text:00004FAC                                         ; NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+F7p ...
.text:00004FAC
.text:00004FAC var_4           = dword ptr -4
.text:00004FAC
.text:00004FAC                 push    ebp
.text:00004FAD                 mov     ebp, esp
.text:00004FAF                 push    ecx
.text:00004FB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FB7                 mov     [ebp+var_4], ecx
.text:00004FBA                 mov     ecx, [ebp+var_4] ; this
.text:00004FBD                 call    ?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove(void)
.text:00004FC2                 add     esp, 4
.text:00004FC5                 cmp     ebp, esp
.text:00004FC7                 call    __RTC_CheckEsp
.text:00004FCC                 mov     esp, ebp
.text:00004FCE                 pop     ebp
.text:00004FCF                 retn
.text:00004FCF ??1CStreamSwitch@N7z@NArchive@@QAE@XZ endp
.text:00004FCF
.text:00004FCF _text           ends
.text:00004FCF
.text:00004FD0 ; ===========================================================================
.text:00004FD0
.text:00004FD0 ; Segment type: Pure code
.text:00004FD0 ; Segment permissions: Read/Execute
.text:00004FD0 _text           segment para public 'CODE' use32
.text:00004FD0                 assume cs:_text
.text:00004FD0                 ;org 4FD0h
.text:00004FD0 ; COMDAT (pick any)
.text:00004FD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FD0
.text:00004FD0 ; =============== S U B R O U T I N E =======================================
.text:00004FD0
.text:00004FD0 ; Attributes: bp-based frame
.text:00004FD0
.text:00004FD0 ; void __thiscall NArchive::N7z::CUInt32DefVector::ClearAndSetSize(NArchive::N7z::CUInt32DefVector *this, unsigned int)
.text:00004FD0                 public ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z
.text:00004FD0 ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z proc near
.text:00004FD0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+324p
.text:00004FD0                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+4ADp
.text:00004FD0
.text:00004FD0 var_4           = dword ptr -4
.text:00004FD0 arg_0           = dword ptr  8
.text:00004FD0
.text:00004FD0                 push    ebp
.text:00004FD1                 mov     ebp, esp
.text:00004FD3                 push    ecx
.text:00004FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FDB                 mov     [ebp+var_4], ecx
.text:00004FDE                 mov     eax, [ebp+arg_0]
.text:00004FE1                 push    eax
.text:00004FE2                 mov     ecx, [ebp+var_4]
.text:00004FE5                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:00004FEA                 mov     ecx, [ebp+arg_0]
.text:00004FED                 push    ecx
.text:00004FEE                 mov     ecx, [ebp+var_4]
.text:00004FF1                 add     ecx, 0Ch
.text:00004FF4                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:00004FF9                 add     esp, 4
.text:00004FFC                 cmp     ebp, esp
.text:00004FFE                 call    __RTC_CheckEsp
.text:00005003                 mov     esp, ebp
.text:00005005                 pop     ebp
.text:00005006                 retn    4
.text:00005006 ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z endp
.text:00005006
.text:00005006 ; ---------------------------------------------------------------------------
.text:00005009                 align 4
.text:00005009 _text           ends
.text:00005009
.text:0000500C ; ===========================================================================
.text:0000500C
.text:0000500C ; Segment type: Pure code
.text:0000500C ; Segment permissions: Read/Execute
.text:0000500C _text           segment para public 'CODE' use32
.text:0000500C                 assume cs:_text
.text:0000500C                 ;org 500Ch
.text:0000500C ; COMDAT (pick any)
.text:0000500C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000500C
.text:0000500C ; =============== S U B R O U T I N E =======================================
.text:0000500C
.text:0000500C ; Attributes: bp-based frame
.text:0000500C
.text:0000500C ; bool __thiscall NArchive::N7z::CUInt32DefVector::ValidAndDefined(NArchive::N7z::CUInt32DefVector *this, unsigned int)
.text:0000500C                 public ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z
.text:0000500C ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z proc near
.text:0000500C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+2C1p
.text:0000500C                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+37Cp ...
.text:0000500C
.text:0000500C var_8           = dword ptr -8
.text:0000500C var_4           = dword ptr -4
.text:0000500C arg_0           = dword ptr  8
.text:0000500C
.text:0000500C                 push    ebp
.text:0000500D                 mov     ebp, esp
.text:0000500F                 sub     esp, 8
.text:00005012                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005019                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005020                 mov     [ebp+var_4], ecx
.text:00005023                 mov     ecx, [ebp+var_4]
.text:00005026                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000502B                 cmp     [ebp+arg_0], eax
.text:0000502E                 jnb     short loc_504C
.text:00005030                 mov     eax, [ebp+arg_0]
.text:00005033                 push    eax
.text:00005034                 mov     ecx, [ebp+var_4]
.text:00005037                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000503C                 movzx   ecx, byte ptr [eax]
.text:0000503F                 test    ecx, ecx
.text:00005041                 jz      short loc_504C
.text:00005043                 mov     [ebp+var_8], 1
.text:0000504A                 jmp     short loc_5053
.text:0000504C ; ---------------------------------------------------------------------------
.text:0000504C
.text:0000504C loc_504C:                               ; CODE XREF: NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+22j
.text:0000504C                                         ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+35j
.text:0000504C                 mov     [ebp+var_8], 0
.text:00005053
.text:00005053 loc_5053:                               ; CODE XREF: NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+3Ej
.text:00005053                 mov     al, byte ptr [ebp+var_8]
.text:00005056                 add     esp, 8
.text:00005059                 cmp     ebp, esp
.text:0000505B                 call    __RTC_CheckEsp
.text:00005060                 mov     esp, ebp
.text:00005062                 pop     ebp
.text:00005063                 retn    4
.text:00005063 ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z endp
.text:00005063
.text:00005063 ; ---------------------------------------------------------------------------
.text:00005066                 align 4
.text:00005066 _text           ends
.text:00005066
.text:00005068 ; ===========================================================================
.text:00005068
.text:00005068 ; Segment type: Pure code
.text:00005068 ; Segment permissions: Read/Execute
.text:00005068 _text           segment para public 'CODE' use32
.text:00005068                 assume cs:_text
.text:00005068                 ;org 5068h
.text:00005068 ; COMDAT (pick any)
.text:00005068                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005068
.text:00005068 ; =============== S U B R O U T I N E =======================================
.text:00005068
.text:00005068 ; Attributes: bp-based frame
.text:00005068
.text:00005068 ; unsigned __int64 __thiscall NArchive::N7z::CFolders::GetFolderUnpackSize(NArchive::N7z::CFolders *this, unsigned int)
.text:00005068                 public ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z
.text:00005068 ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z proc near
.text:00005068                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+1D2p
.text:00005068                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+268p ...
.text:00005068
.text:00005068 var_4           = dword ptr -4
.text:00005068 arg_0           = dword ptr  8
.text:00005068
.text:00005068                 push    ebp
.text:00005069                 mov     ebp, esp
.text:0000506B                 push    ecx
.text:0000506C                 push    esi
.text:0000506D                 push    edi
.text:0000506E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005075                 mov     [ebp+var_4], ecx
.text:00005078                 mov     ecx, [ebp+var_4]
.text:0000507B                 add     ecx, 28h ; '('
.text:0000507E                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00005083                 mov     esi, eax
.text:00005085                 mov     ecx, [ebp+var_4]
.text:00005088                 add     ecx, 2Ch ; ','
.text:0000508B                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00005090                 mov     edi, eax
.text:00005092                 mov     ecx, [ebp+var_4]
.text:00005095                 add     ecx, 34h ; '4'
.text:00005098                 call    ??B?$CObjArray@E@@QBEPBEXZ ; CObjArray<uchar>::operator uchar const *(void)
.text:0000509D                 mov     ecx, [ebp+arg_0]
.text:000050A0                 movzx   edx, byte ptr [eax+ecx]
.text:000050A4                 mov     eax, [ebp+arg_0]
.text:000050A7                 add     edx, [edi+eax*4]
.text:000050AA                 mov     eax, [esi+edx*8]
.text:000050AD                 mov     edx, [esi+edx*8+4]
.text:000050B1                 pop     edi
.text:000050B2                 pop     esi
.text:000050B3                 add     esp, 4
.text:000050B6                 cmp     ebp, esp
.text:000050B8                 call    __RTC_CheckEsp
.text:000050BD                 mov     esp, ebp
.text:000050BF                 pop     ebp
.text:000050C0                 retn    4
.text:000050C0 ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z endp
.text:000050C0
.text:000050C0 ; ---------------------------------------------------------------------------
.text:000050C3                 align 4
.text:000050C3 _text           ends
.text:000050C3
.text:000050C4 ; ===========================================================================
.text:000050C4
.text:000050C4 ; Segment type: Pure code
.text:000050C4 ; Segment permissions: Read/Execute
.text:000050C4 _text           segment para public 'CODE' use32
.text:000050C4                 assume cs:_text
.text:000050C4                 ;org 50C4h
.text:000050C4 ; COMDAT (pick any)
.text:000050C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050C4
.text:000050C4 ; =============== S U B R O U T I N E =======================================
.text:000050C4
.text:000050C4 ; Attributes: bp-based frame
.text:000050C4
.text:000050C4 ; unsigned __int64 __thiscall NArchive::N7z::CInArchive::ReadUInt64(NArchive::N7z::CInArchive *__hidden this)
.text:000050C4                 public ?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ
.text:000050C4 ?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ proc near
.text:000050C4                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+CDp
.text:000050C4
.text:000050C4 var_4           = dword ptr -4
.text:000050C4
.text:000050C4                 push    ebp
.text:000050C5                 mov     ebp, esp
.text:000050C7                 push    ecx
.text:000050C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050CF                 mov     [ebp+var_4], ecx
.text:000050D2                 mov     eax, [ebp+var_4]
.text:000050D5                 mov     ecx, [eax+38h]  ; this
.text:000050D8                 call    ?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadUInt64(void)
.text:000050DD                 add     esp, 4
.text:000050E0                 cmp     ebp, esp
.text:000050E2                 call    __RTC_CheckEsp
.text:000050E7                 mov     esp, ebp
.text:000050E9                 pop     ebp
.text:000050EA                 retn
.text:000050EA ?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ endp
.text:000050EA
.text:000050EA ; ---------------------------------------------------------------------------
.text:000050EB                 align 4
.text:000050EB _text           ends
.text:000050EB
.text:000050EC ; ===========================================================================
.text:000050EC
.text:000050EC ; Segment type: Pure code
.text:000050EC ; Segment permissions: Read/Execute
.text:000050EC _text           segment para public 'CODE' use32
.text:000050EC                 assume cs:_text
.text:000050EC                 ;org 50ECh
.text:000050EC ; COMDAT (pick any)
.text:000050EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050EC
.text:000050EC ; =============== S U B R O U T I N E =======================================
.text:000050EC
.text:000050EC ; Attributes: bp-based frame
.text:000050EC
.text:000050EC ; void __thiscall CBufPtrSeqOutStream::Init(CBufPtrSeqOutStream *this, unsigned __int8 *, unsigned int)
.text:000050EC                 public ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z
.text:000050EC ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z proc near
.text:000050EC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1CAp
.text:000050EC
.text:000050EC var_4           = dword ptr -4
.text:000050EC arg_0           = dword ptr  8
.text:000050EC arg_4           = dword ptr  0Ch
.text:000050EC
.text:000050EC                 push    ebp
.text:000050ED                 mov     ebp, esp
.text:000050EF                 push    ecx
.text:000050F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050F7                 mov     [ebp+var_4], ecx
.text:000050FA                 mov     eax, [ebp+var_4]
.text:000050FD                 mov     ecx, [ebp+arg_0]
.text:00005100                 mov     [eax+8], ecx
.text:00005103                 mov     edx, [ebp+var_4]
.text:00005106                 mov     dword ptr [edx+10h], 0
.text:0000510D                 mov     eax, [ebp+var_4]
.text:00005110                 mov     ecx, [ebp+arg_4]
.text:00005113                 mov     [eax+0Ch], ecx
.text:00005116                 mov     esp, ebp
.text:00005118                 pop     ebp
.text:00005119                 retn    8
.text:00005119 ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z endp
.text:00005119
.text:00005119 _text           ends
.text:00005119
.text:0000511C ; ===========================================================================
.text:0000511C
.text:0000511C ; Segment type: Pure code
.text:0000511C ; Segment permissions: Read/Execute
.text:0000511C _text           segment para public 'CODE' use32
.text:0000511C                 assume cs:_text
.text:0000511C                 ;org 511Ch
.text:0000511C ; COMDAT (pick any)
.text:0000511C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000511C
.text:0000511C ; =============== S U B R O U T I N E =======================================
.text:0000511C
.text:0000511C ; Attributes: bp-based frame
.text:0000511C
.text:0000511C ; _DWORD __thiscall NArchive::N7z::CFolders::CFolders(NArchive::N7z::CFolders *__hidden this)
.text:0000511C                 public ??0CFolders@N7z@NArchive@@QAE@XZ
.text:0000511C ??0CFolders@N7z@NArchive@@QAE@XZ proc near
.text:0000511C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+44p
.text:0000511C
.text:0000511C var_10          = dword ptr -10h
.text:0000511C var_C           = dword ptr -0Ch
.text:0000511C var_4           = dword ptr -4
.text:0000511C
.text:0000511C                 push    ebp
.text:0000511D                 mov     ebp, esp
.text:0000511F                 push    0FFFFFFFFh
.text:00005121                 push    offset __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ
.text:00005126                 mov     eax, large fs:0
.text:0000512C                 push    eax
.text:0000512D                 push    ecx
.text:0000512E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005135                 mov     eax, dword ptr ds:___security_cookie
.text:0000513A                 xor     eax, ebp
.text:0000513C                 push    eax
.text:0000513D                 lea     eax, [ebp+var_C]
.text:00005140                 mov     large fs:0, eax
.text:00005146                 mov     [ebp+var_10], ecx
.text:00005149                 mov     ecx, [ebp+var_10]
.text:0000514C                 add     ecx, 8
.text:0000514F                 call    ??0?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:00005154                 mov     [ebp+var_4], 0
.text:0000515B                 mov     ecx, [ebp+var_10]
.text:0000515E                 add     ecx, 0Ch        ; this
.text:00005161                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:00005166                 mov     byte ptr [ebp+var_4], 1
.text:0000516A                 mov     ecx, [ebp+var_10]
.text:0000516D                 add     ecx, 24h ; '$'
.text:00005170                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00005175                 mov     byte ptr [ebp+var_4], 2
.text:00005179                 mov     ecx, [ebp+var_10]
.text:0000517C                 add     ecx, 28h ; '('
.text:0000517F                 call    ??0?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:00005184                 mov     byte ptr [ebp+var_4], 3
.text:00005188                 mov     ecx, [ebp+var_10]
.text:0000518B                 add     ecx, 2Ch ; ','
.text:0000518E                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00005193                 mov     byte ptr [ebp+var_4], 4
.text:00005197                 mov     ecx, [ebp+var_10]
.text:0000519A                 add     ecx, 30h ; '0'
.text:0000519D                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:000051A2                 mov     byte ptr [ebp+var_4], 5
.text:000051A6                 mov     ecx, [ebp+var_10]
.text:000051A9                 add     ecx, 34h ; '4'
.text:000051AC                 call    ??0?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::CObjArray<uchar>(void)
.text:000051B1                 mov     byte ptr [ebp+var_4], 6
.text:000051B5                 mov     ecx, [ebp+var_10]
.text:000051B8                 add     ecx, 38h ; '8'
.text:000051BB                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:000051C0                 mov     byte ptr [ebp+var_4], 7
.text:000051C4                 mov     ecx, [ebp+var_10]
.text:000051C7                 add     ecx, 3Ch ; '<'
.text:000051CA                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:000051CF                 mov     byte ptr [ebp+var_4], 8
.text:000051D3                 mov     ecx, [ebp+var_10]
.text:000051D6                 add     ecx, 44h ; 'D'  ; this
.text:000051D9                 call    ??0CParsedMethods@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CParsedMethods::CParsedMethods(void)
.text:000051DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000051E5                 mov     eax, [ebp+var_10]
.text:000051E8                 mov     ecx, [ebp+var_C]
.text:000051EB                 mov     large fs:0, ecx
.text:000051F2                 pop     ecx
.text:000051F3                 add     esp, 10h
.text:000051F6                 cmp     ebp, esp
.text:000051F8                 call    __RTC_CheckEsp
.text:000051FD                 mov     esp, ebp
.text:000051FF                 pop     ebp
.text:00005200                 retn
.text:00005200 ??0CFolders@N7z@NArchive@@QAE@XZ endp
.text:00005200
.text:00005200 ; ---------------------------------------------------------------------------
.text:00005201                 align 4
.text:00005201 _text           ends
.text:00005201
.text$x:00005204 ; ===========================================================================
.text$x:00005204
.text$x:00005204 ; Segment type: Pure code
.text$x:00005204 ; Segment permissions: Read/Execute
.text$x:00005204 _text$x         segment para public 'CODE' use32
.text$x:00005204                 assume cs:_text$x
.text$x:00005204                 ;org 5204h
.text$x:00005204 ; COMDAT (pick associative to section at 511C)
.text$x:00005204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005204
.text$x:00005204 ; =============== S U B R O U T I N E =======================================
.text$x:00005204
.text$x:00005204
.text$x:00005204 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00005204                                         ; DATA XREF: .xdata$x:000052ACo
.text$x:00005204                 mov     ecx, [ebp-10h]
.text$x:00005207                 add     ecx, 8
.text$x:0000520A                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:0000520A __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000520A
.text$x:0000520F
.text$x:0000520F ; =============== S U B R O U T I N E =======================================
.text$x:0000520F
.text$x:0000520F
.text$x:0000520F __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000520F                                         ; DATA XREF: .xdata$x:000052B4o
.text$x:0000520F                 mov     ecx, [ebp-10h]
.text$x:00005212                 add     ecx, 0Ch        ; this
.text$x:00005215                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00005215 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00005215
.text$x:0000521A
.text$x:0000521A ; =============== S U B R O U T I N E =======================================
.text$x:0000521A
.text$x:0000521A
.text$x:0000521A __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:0000521A                                         ; DATA XREF: .xdata$x:000052BCo
.text$x:0000521A                 mov     ecx, [ebp-10h]
.text$x:0000521D                 add     ecx, 24h ; '$'
.text$x:00005220                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005220 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00005220
.text$x:00005225
.text$x:00005225 ; =============== S U B R O U T I N E =======================================
.text$x:00005225
.text$x:00005225
.text$x:00005225 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00005225                                         ; DATA XREF: .xdata$x:000052C4o
.text$x:00005225                 mov     ecx, [ebp-10h]
.text$x:00005228                 add     ecx, 28h ; '('
.text$x:0000522B                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:0000522B __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3 endp
.text$x:0000522B
.text$x:00005230
.text$x:00005230 ; =============== S U B R O U T I N E =======================================
.text$x:00005230
.text$x:00005230
.text$x:00005230 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00005230                                         ; DATA XREF: .xdata$x:000052CCo
.text$x:00005230                 mov     ecx, [ebp-10h]
.text$x:00005233                 add     ecx, 2Ch ; ','
.text$x:00005236                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005236 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00005236
.text$x:0000523B
.text$x:0000523B ; =============== S U B R O U T I N E =======================================
.text$x:0000523B
.text$x:0000523B
.text$x:0000523B __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:0000523B                                         ; DATA XREF: .xdata$x:000052D4o
.text$x:0000523B                 mov     ecx, [ebp-10h]
.text$x:0000523E                 add     ecx, 30h ; '0'
.text$x:00005241                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005241 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5 endp
.text$x:00005241
.text$x:00005246
.text$x:00005246 ; =============== S U B R O U T I N E =======================================
.text$x:00005246
.text$x:00005246
.text$x:00005246 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00005246                                         ; DATA XREF: .xdata$x:000052DCo
.text$x:00005246                 mov     ecx, [ebp-10h]
.text$x:00005249                 add     ecx, 34h ; '4'
.text$x:0000524C                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:0000524C __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6 endp
.text$x:0000524C
.text$x:00005251
.text$x:00005251 ; =============== S U B R O U T I N E =======================================
.text$x:00005251
.text$x:00005251
.text$x:00005251 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:00005251                                         ; DATA XREF: .xdata$x:000052E4o
.text$x:00005251                 mov     ecx, [ebp-10h]
.text$x:00005254                 add     ecx, 38h ; '8'
.text$x:00005257                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005257 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7 endp
.text$x:00005257
.text$x:0000525C
.text$x:0000525C ; =============== S U B R O U T I N E =======================================
.text$x:0000525C
.text$x:0000525C
.text$x:0000525C __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:0000525C                                         ; DATA XREF: .xdata$x:000052ECo
.text$x:0000525C                 mov     ecx, [ebp-10h]
.text$x:0000525F                 add     ecx, 3Ch ; '<'
.text$x:00005262                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00005262 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8 endp
.text$x:00005262
.text$x:00005267
.text$x:00005267 ; =============== S U B R O U T I N E =======================================
.text$x:00005267
.text$x:00005267
.text$x:00005267 __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00005267                                         ; DATA XREF: NArchive::N7z::CFolders::CFolders(void)+5o
.text$x:00005267
.text$x:00005267 arg_4           = dword ptr  8
.text$x:00005267
.text$x:00005267                 mov     edx, [esp+arg_4]
.text$x:0000526B                 lea     eax, [edx+0Ch]
.text$x:0000526E                 mov     ecx, [edx-8]
.text$x:00005271                 xor     ecx, eax
.text$x:00005273                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005278                 mov     eax, offset __ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ
.text$x:0000527D                 jmp     ___CxxFrameHandler3
.text$x:0000527D __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ endp
.text$x:0000527D
.text$x:0000527D ; ---------------------------------------------------------------------------
.text$x:00005282                 align 4
.text$x:00005282 _text$x         ends
.text$x:00005282
.xdata$x:00005284 ; ===========================================================================
.xdata$x:00005284
.xdata$x:00005284 ; Segment type: Pure data
.xdata$x:00005284 ; Segment permissions: Read
.xdata$x:00005284 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005284                 assume cs:_xdata$x
.xdata$x:00005284                 ;org 5284h
.xdata$x:00005284 ; COMDAT (pick associative to section at 511C)
.xdata$x:00005284 __ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005284                                         ; DATA XREF: __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00005285                 db    5
.xdata$x:00005286                 db  93h ; ô
.xdata$x:00005287                 db  19h
.xdata$x:00005288                 db    9
.xdata$x:00005289                 db    0
.xdata$x:0000528A                 db    0
.xdata$x:0000528B                 db    0
.xdata$x:0000528C                 dd offset __unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00005290                 db    0
.xdata$x:00005291                 db    0
.xdata$x:00005292                 db    0
.xdata$x:00005293                 db    0
.xdata$x:00005294                 db    0
.xdata$x:00005295                 db    0
.xdata$x:00005296                 db    0
.xdata$x:00005297                 db    0
.xdata$x:00005298                 db    0
.xdata$x:00005299                 db    0
.xdata$x:0000529A                 db    0
.xdata$x:0000529B                 db    0
.xdata$x:0000529C                 db    0
.xdata$x:0000529D                 db    0
.xdata$x:0000529E                 db    0
.xdata$x:0000529F                 db    0
.xdata$x:000052A0                 db    0
.xdata$x:000052A1                 db    0
.xdata$x:000052A2                 db    0
.xdata$x:000052A3                 db    0
.xdata$x:000052A4                 db    1
.xdata$x:000052A5                 db    0
.xdata$x:000052A6                 db    0
.xdata$x:000052A7                 db    0
.xdata$x:000052A8 __unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000052A8                                         ; DATA XREF: .xdata$x:0000528Co
.xdata$x:000052A9                 db 0FFh
.xdata$x:000052AA                 db 0FFh
.xdata$x:000052AB                 db 0FFh
.xdata$x:000052AC                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:000052B0                 db    0
.xdata$x:000052B1                 db    0
.xdata$x:000052B2                 db    0
.xdata$x:000052B3                 db    0
.xdata$x:000052B4                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:000052B8                 db    1
.xdata$x:000052B9                 db    0
.xdata$x:000052BA                 db    0
.xdata$x:000052BB                 db    0
.xdata$x:000052BC                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2
.xdata$x:000052C0                 db    2
.xdata$x:000052C1                 db    0
.xdata$x:000052C2                 db    0
.xdata$x:000052C3                 db    0
.xdata$x:000052C4                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3
.xdata$x:000052C8                 db    3
.xdata$x:000052C9                 db    0
.xdata$x:000052CA                 db    0
.xdata$x:000052CB                 db    0
.xdata$x:000052CC                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4
.xdata$x:000052D0                 db    4
.xdata$x:000052D1                 db    0
.xdata$x:000052D2                 db    0
.xdata$x:000052D3                 db    0
.xdata$x:000052D4                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5
.xdata$x:000052D8                 db    5
.xdata$x:000052D9                 db    0
.xdata$x:000052DA                 db    0
.xdata$x:000052DB                 db    0
.xdata$x:000052DC                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6
.xdata$x:000052E0                 db    6
.xdata$x:000052E1                 db    0
.xdata$x:000052E2                 db    0
.xdata$x:000052E3                 db    0
.xdata$x:000052E4                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7
.xdata$x:000052E8                 db    7
.xdata$x:000052E9                 db    0
.xdata$x:000052EA                 db    0
.xdata$x:000052EB                 db    0
.xdata$x:000052EC                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8
.xdata$x:000052EC _xdata$x        ends
.xdata$x:000052EC
.text:000052F0 ; ===========================================================================
.text:000052F0
.text:000052F0 ; Segment type: Pure code
.text:000052F0 ; Segment permissions: Read/Execute
.text:000052F0 _text           segment para public 'CODE' use32
.text:000052F0                 assume cs:_text
.text:000052F0                 ;org 52F0h
.text:000052F0 ; COMDAT (pick any)
.text:000052F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052F0
.text:000052F0 ; =============== S U B R O U T I N E =======================================
.text:000052F0
.text:000052F0 ; Attributes: bp-based frame
.text:000052F0
.text:000052F0 ; _DWORD __thiscall NArchive::N7z::CParsedMethods::CParsedMethods(NArchive::N7z::CParsedMethods *__hidden this)
.text:000052F0                 public ??0CParsedMethods@N7z@NArchive@@QAE@XZ
.text:000052F0 ??0CParsedMethods@N7z@NArchive@@QAE@XZ proc near
.text:000052F0                                         ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+BDp
.text:000052F0
.text:000052F0 var_4           = dword ptr -4
.text:000052F0
.text:000052F0                 push    ebp
.text:000052F1                 mov     ebp, esp
.text:000052F3                 push    ecx
.text:000052F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052FB                 mov     [ebp+var_4], ecx
.text:000052FE                 mov     eax, [ebp+var_4]
.text:00005301                 mov     byte ptr [eax], 0
.text:00005304                 mov     ecx, [ebp+var_4]
.text:00005307                 mov     dword ptr [ecx+4], 0
.text:0000530E                 mov     ecx, [ebp+var_4]
.text:00005311                 add     ecx, 8
.text:00005314                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00005319                 mov     eax, [ebp+var_4]
.text:0000531C                 add     esp, 4
.text:0000531F                 cmp     ebp, esp
.text:00005321                 call    __RTC_CheckEsp
.text:00005326                 mov     esp, ebp
.text:00005328                 pop     ebp
.text:00005329                 retn
.text:00005329 ??0CParsedMethods@N7z@NArchive@@QAE@XZ endp
.text:00005329
.text:00005329 ; ---------------------------------------------------------------------------
.text:0000532A                 align 4
.text:0000532A _text           ends
.text:0000532A
.text:0000532C ; ===========================================================================
.text:0000532C
.text:0000532C ; Segment type: Pure code
.text:0000532C ; Segment permissions: Read/Execute
.text:0000532C _text           segment para public 'CODE' use32
.text:0000532C                 assume cs:_text
.text:0000532C                 ;org 532Ch
.text:0000532C ; COMDAT (pick any)
.text:0000532C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000532C
.text:0000532C ; =============== S U B R O U T I N E =======================================
.text:0000532C
.text:0000532C ; Attributes: bp-based frame
.text:0000532C
.text:0000532C ; _DWORD __thiscall NArchive::N7z::CFolders::~CFolders(NArchive::N7z::CFolders *__hidden this)
.text:0000532C                 public ??1CFolders@N7z@NArchive@@QAE@XZ
.text:0000532C ??1CFolders@N7z@NArchive@@QAE@XZ proc near
.text:0000532C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+28Ep
.text:0000532C                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+35Cp ...
.text:0000532C
.text:0000532C var_10          = dword ptr -10h
.text:0000532C var_C           = dword ptr -0Ch
.text:0000532C var_4           = dword ptr -4
.text:0000532C
.text:0000532C                 push    ebp
.text:0000532D                 mov     ebp, esp
.text:0000532F                 push    0FFFFFFFFh
.text:00005331                 push    offset __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ
.text:00005336                 mov     eax, large fs:0
.text:0000533C                 push    eax
.text:0000533D                 push    ecx
.text:0000533E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005345                 mov     eax, dword ptr ds:___security_cookie
.text:0000534A                 xor     eax, ebp
.text:0000534C                 push    eax
.text:0000534D                 lea     eax, [ebp+var_C]
.text:00005350                 mov     large fs:0, eax
.text:00005356                 mov     [ebp+var_10], ecx
.text:00005359                 mov     [ebp+var_4], 8
.text:00005360                 mov     ecx, [ebp+var_10]
.text:00005363                 add     ecx, 44h ; 'D'  ; this
.text:00005366                 call    ??1CParsedMethods@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CParsedMethods::~CParsedMethods(void)
.text:0000536B                 mov     byte ptr [ebp+var_4], 7
.text:0000536F                 mov     ecx, [ebp+var_10]
.text:00005372                 add     ecx, 3Ch ; '<'
.text:00005375                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000537A                 mov     byte ptr [ebp+var_4], 6
.text:0000537E                 mov     ecx, [ebp+var_10]
.text:00005381                 add     ecx, 38h ; '8'
.text:00005384                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00005389                 mov     byte ptr [ebp+var_4], 5
.text:0000538D                 mov     ecx, [ebp+var_10]
.text:00005390                 add     ecx, 34h ; '4'
.text:00005393                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00005398                 mov     byte ptr [ebp+var_4], 4
.text:0000539C                 mov     ecx, [ebp+var_10]
.text:0000539F                 add     ecx, 30h ; '0'
.text:000053A2                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:000053A7                 mov     byte ptr [ebp+var_4], 3
.text:000053AB                 mov     ecx, [ebp+var_10]
.text:000053AE                 add     ecx, 2Ch ; ','
.text:000053B1                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:000053B6                 mov     byte ptr [ebp+var_4], 2
.text:000053BA                 mov     ecx, [ebp+var_10]
.text:000053BD                 add     ecx, 28h ; '('
.text:000053C0                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:000053C5                 mov     byte ptr [ebp+var_4], 1
.text:000053C9                 mov     ecx, [ebp+var_10]
.text:000053CC                 add     ecx, 24h ; '$'
.text:000053CF                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:000053D4                 mov     byte ptr [ebp+var_4], 0
.text:000053D8                 mov     ecx, [ebp+var_10]
.text:000053DB                 add     ecx, 0Ch        ; this
.text:000053DE                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:000053E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053EA                 mov     ecx, [ebp+var_10]
.text:000053ED                 add     ecx, 8
.text:000053F0                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:000053F5                 mov     ecx, [ebp+var_C]
.text:000053F8                 mov     large fs:0, ecx
.text:000053FF                 pop     ecx
.text:00005400                 add     esp, 10h
.text:00005403                 cmp     ebp, esp
.text:00005405                 call    __RTC_CheckEsp
.text:0000540A                 mov     esp, ebp
.text:0000540C                 pop     ebp
.text:0000540D                 retn
.text:0000540D ??1CFolders@N7z@NArchive@@QAE@XZ endp
.text:0000540D
.text:0000540D ; ---------------------------------------------------------------------------
.text:0000540E                 align 10h
.text:0000540E _text           ends
.text:0000540E
.text$x:00005410 ; ===========================================================================
.text$x:00005410
.text$x:00005410 ; Segment type: Pure code
.text$x:00005410 ; Segment permissions: Read/Execute
.text$x:00005410 _text$x         segment para public 'CODE' use32
.text$x:00005410                 assume cs:_text$x
.text$x:00005410                 ;org 5410h
.text$x:00005410 ; COMDAT (pick associative to section at 532C)
.text$x:00005410                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005410
.text$x:00005410 ; =============== S U B R O U T I N E =======================================
.text$x:00005410
.text$x:00005410
.text$x:00005410 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00005410                                         ; DATA XREF: .xdata$x:000054B8o
.text$x:00005410                 mov     ecx, [ebp-10h]
.text$x:00005413                 add     ecx, 8
.text$x:00005416                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:00005416 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00005416
.text$x:0000541B
.text$x:0000541B ; =============== S U B R O U T I N E =======================================
.text$x:0000541B
.text$x:0000541B
.text$x:0000541B __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000541B                                         ; DATA XREF: .xdata$x:000054C0o
.text$x:0000541B                 mov     ecx, [ebp-10h]
.text$x:0000541E                 add     ecx, 0Ch        ; this
.text$x:00005421                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00005421 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00005421
.text$x:00005426
.text$x:00005426 ; =============== S U B R O U T I N E =======================================
.text$x:00005426
.text$x:00005426
.text$x:00005426 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00005426                                         ; DATA XREF: .xdata$x:000054C8o
.text$x:00005426                 mov     ecx, [ebp-10h]
.text$x:00005429                 add     ecx, 24h ; '$'
.text$x:0000542C                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:0000542C __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2 endp
.text$x:0000542C
.text$x:00005431
.text$x:00005431 ; =============== S U B R O U T I N E =======================================
.text$x:00005431
.text$x:00005431
.text$x:00005431 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00005431                                         ; DATA XREF: .xdata$x:000054D0o
.text$x:00005431                 mov     ecx, [ebp-10h]
.text$x:00005434                 add     ecx, 28h ; '('
.text$x:00005437                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:00005437 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00005437
.text$x:0000543C
.text$x:0000543C ; =============== S U B R O U T I N E =======================================
.text$x:0000543C
.text$x:0000543C
.text$x:0000543C __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:0000543C                                         ; DATA XREF: .xdata$x:000054D8o
.text$x:0000543C                 mov     ecx, [ebp-10h]
.text$x:0000543F                 add     ecx, 2Ch ; ','
.text$x:00005442                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005442 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00005442
.text$x:00005447
.text$x:00005447 ; =============== S U B R O U T I N E =======================================
.text$x:00005447
.text$x:00005447
.text$x:00005447 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:00005447                                         ; DATA XREF: .xdata$x:000054E0o
.text$x:00005447                 mov     ecx, [ebp-10h]
.text$x:0000544A                 add     ecx, 30h ; '0'
.text$x:0000544D                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:0000544D __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5 endp
.text$x:0000544D
.text$x:00005452
.text$x:00005452 ; =============== S U B R O U T I N E =======================================
.text$x:00005452
.text$x:00005452
.text$x:00005452 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00005452                                         ; DATA XREF: .xdata$x:000054E8o
.text$x:00005452                 mov     ecx, [ebp-10h]
.text$x:00005455                 add     ecx, 34h ; '4'
.text$x:00005458                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:00005458 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6 endp
.text$x:00005458
.text$x:0000545D
.text$x:0000545D ; =============== S U B R O U T I N E =======================================
.text$x:0000545D
.text$x:0000545D
.text$x:0000545D __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:0000545D                                         ; DATA XREF: .xdata$x:000054F0o
.text$x:0000545D                 mov     ecx, [ebp-10h]
.text$x:00005460                 add     ecx, 38h ; '8'
.text$x:00005463                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00005463 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7 endp
.text$x:00005463
.text$x:00005468
.text$x:00005468 ; =============== S U B R O U T I N E =======================================
.text$x:00005468
.text$x:00005468
.text$x:00005468 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:00005468                                         ; DATA XREF: .xdata$x:000054F8o
.text$x:00005468                 mov     ecx, [ebp-10h]
.text$x:0000546B                 add     ecx, 3Ch ; '<'
.text$x:0000546E                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:0000546E __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8 endp
.text$x:0000546E
.text$x:00005473
.text$x:00005473 ; =============== S U B R O U T I N E =======================================
.text$x:00005473
.text$x:00005473
.text$x:00005473 __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00005473                                         ; DATA XREF: NArchive::N7z::CFolders::~CFolders(void)+5o
.text$x:00005473
.text$x:00005473 arg_4           = dword ptr  8
.text$x:00005473
.text$x:00005473                 mov     edx, [esp+arg_4]
.text$x:00005477                 lea     eax, [edx+0Ch]
.text$x:0000547A                 mov     ecx, [edx-8]
.text$x:0000547D                 xor     ecx, eax
.text$x:0000547F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005484                 mov     eax, offset __ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ
.text$x:00005489                 jmp     ___CxxFrameHandler3
.text$x:00005489 __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ endp
.text$x:00005489
.text$x:00005489 ; ---------------------------------------------------------------------------
.text$x:0000548E                 align 10h
.text$x:0000548E _text$x         ends
.text$x:0000548E
.xdata$x:00005490 ; ===========================================================================
.xdata$x:00005490
.xdata$x:00005490 ; Segment type: Pure data
.xdata$x:00005490 ; Segment permissions: Read
.xdata$x:00005490 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005490                 assume cs:_xdata$x
.xdata$x:00005490                 ;org 5490h
.xdata$x:00005490 ; COMDAT (pick associative to section at 532C)
.xdata$x:00005490 __ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005490                                         ; DATA XREF: __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00005491                 db    5
.xdata$x:00005492                 db  93h ; ô
.xdata$x:00005493                 db  19h
.xdata$x:00005494                 db    9
.xdata$x:00005495                 db    0
.xdata$x:00005496                 db    0
.xdata$x:00005497                 db    0
.xdata$x:00005498                 dd offset __unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ
.xdata$x:0000549C                 db    0
.xdata$x:0000549D                 db    0
.xdata$x:0000549E                 db    0
.xdata$x:0000549F                 db    0
.xdata$x:000054A0                 db    0
.xdata$x:000054A1                 db    0
.xdata$x:000054A2                 db    0
.xdata$x:000054A3                 db    0
.xdata$x:000054A4                 db    0
.xdata$x:000054A5                 db    0
.xdata$x:000054A6                 db    0
.xdata$x:000054A7                 db    0
.xdata$x:000054A8                 db    0
.xdata$x:000054A9                 db    0
.xdata$x:000054AA                 db    0
.xdata$x:000054AB                 db    0
.xdata$x:000054AC                 db    0
.xdata$x:000054AD                 db    0
.xdata$x:000054AE                 db    0
.xdata$x:000054AF                 db    0
.xdata$x:000054B0                 db    1
.xdata$x:000054B1                 db    0
.xdata$x:000054B2                 db    0
.xdata$x:000054B3                 db    0
.xdata$x:000054B4 __unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000054B4                                         ; DATA XREF: .xdata$x:00005498o
.xdata$x:000054B5                 db 0FFh
.xdata$x:000054B6                 db 0FFh
.xdata$x:000054B7                 db 0FFh
.xdata$x:000054B8                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:000054BC                 align 10h
.xdata$x:000054C0                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:000054C4                 db    1
.xdata$x:000054C5                 db    0
.xdata$x:000054C6                 db    0
.xdata$x:000054C7                 db    0
.xdata$x:000054C8                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2
.xdata$x:000054CC                 db    2
.xdata$x:000054CD                 db    0
.xdata$x:000054CE                 db    0
.xdata$x:000054CF                 db    0
.xdata$x:000054D0                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3
.xdata$x:000054D4                 db    3
.xdata$x:000054D5                 db    0
.xdata$x:000054D6                 db    0
.xdata$x:000054D7                 db    0
.xdata$x:000054D8                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4
.xdata$x:000054DC                 db    4
.xdata$x:000054DD                 db    0
.xdata$x:000054DE                 db    0
.xdata$x:000054DF                 db    0
.xdata$x:000054E0                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5
.xdata$x:000054E4                 db    5
.xdata$x:000054E5                 db    0
.xdata$x:000054E6                 db    0
.xdata$x:000054E7                 db    0
.xdata$x:000054E8                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6
.xdata$x:000054EC                 db    6
.xdata$x:000054ED                 db    0
.xdata$x:000054EE                 db    0
.xdata$x:000054EF                 db    0
.xdata$x:000054F0                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7
.xdata$x:000054F4                 db    7
.xdata$x:000054F5                 db    0
.xdata$x:000054F6                 db    0
.xdata$x:000054F7                 db    0
.xdata$x:000054F8                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8
.xdata$x:000054F8 _xdata$x        ends
.xdata$x:000054F8
.text:000054FC ; ===========================================================================
.text:000054FC
.text:000054FC ; Segment type: Pure code
.text:000054FC ; Segment permissions: Read/Execute
.text:000054FC _text           segment para public 'CODE' use32
.text:000054FC                 assume cs:_text
.text:000054FC                 ;org 54FCh
.text:000054FC ; COMDAT (pick any)
.text:000054FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054FC
.text:000054FC ; =============== S U B R O U T I N E =======================================
.text:000054FC
.text:000054FC ; Attributes: bp-based frame
.text:000054FC
.text:000054FC ; _DWORD __thiscall NArchive::N7z::CDecoder::~CDecoder(NArchive::N7z::CDecoder *__hidden this)
.text:000054FC                 public ??1CDecoder@N7z@NArchive@@QAE@XZ
.text:000054FC ??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text:000054FC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+264p
.text:000054FC                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+332p ...
.text:000054FC
.text:000054FC var_10          = dword ptr -10h
.text:000054FC var_C           = dword ptr -0Ch
.text:000054FC var_4           = dword ptr -4
.text:000054FC
.text:000054FC                 push    ebp
.text:000054FD                 mov     ebp, esp
.text:000054FF                 push    0FFFFFFFFh
.text:00005501                 push    offset __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
.text:00005506                 mov     eax, large fs:0
.text:0000550C                 push    eax
.text:0000550D                 push    ecx
.text:0000550E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005515                 mov     eax, dword ptr ds:___security_cookie
.text:0000551A                 xor     eax, ebp
.text:0000551C                 push    eax
.text:0000551D                 lea     eax, [ebp+var_C]
.text:00005520                 mov     large fs:0, eax
.text:00005526                 mov     [ebp+var_10], ecx
.text:00005529                 mov     [ebp+var_4], 0
.text:00005530                 mov     ecx, [ebp+var_10]
.text:00005533                 add     ecx, 60h ; '`'
.text:00005536                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:0000553B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005542                 mov     ecx, [ebp+var_10]
.text:00005545                 add     ecx, 4          ; this
.text:00005548                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:0000554D                 mov     ecx, [ebp+var_C]
.text:00005550                 mov     large fs:0, ecx
.text:00005557                 pop     ecx
.text:00005558                 add     esp, 10h
.text:0000555B                 cmp     ebp, esp
.text:0000555D                 call    __RTC_CheckEsp
.text:00005562                 mov     esp, ebp
.text:00005564                 pop     ebp
.text:00005565                 retn
.text:00005565 ??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text:00005565
.text:00005565 ; ---------------------------------------------------------------------------
.text:00005566                 align 4
.text:00005566 _text           ends
.text:00005566
.text$x:00005568 ; ===========================================================================
.text$x:00005568
.text$x:00005568 ; Segment type: Pure code
.text$x:00005568 ; Segment permissions: Read/Execute
.text$x:00005568 _text$x         segment para public 'CODE' use32
.text$x:00005568                 assume cs:_text$x
.text$x:00005568                 ;org 5568h
.text$x:00005568 ; COMDAT (pick associative to section at 54FC)
.text$x:00005568                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005568
.text$x:00005568 ; =============== S U B R O U T I N E =======================================
.text$x:00005568
.text$x:00005568
.text$x:00005568 __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00005568                                         ; DATA XREF: .xdata$x:00005594o
.text$x:00005568                 mov     ecx, [ebp-10h]
.text$x:0000556B                 add     ecx, 4          ; this
.text$x:0000556E                 jmp     ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text$x:0000556E __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000556E
.text$x:00005573
.text$x:00005573 ; =============== S U B R O U T I N E =======================================
.text$x:00005573
.text$x:00005573
.text$x:00005573 __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text$x:00005573                                         ; DATA XREF: NArchive::N7z::CDecoder::~CDecoder(void)+5o
.text$x:00005573
.text$x:00005573 arg_4           = dword ptr  8
.text$x:00005573
.text$x:00005573                 mov     edx, [esp+arg_4]
.text$x:00005577                 lea     eax, [edx+0Ch]
.text$x:0000557A                 mov     ecx, [edx-8]
.text$x:0000557D                 xor     ecx, eax
.text$x:0000557F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005584                 mov     eax, offset __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
.text$x:00005589                 jmp     ___CxxFrameHandler3
.text$x:00005589 __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text$x:00005589
.text$x:00005589 ; ---------------------------------------------------------------------------
.text$x:0000558E                 align 10h
.text$x:0000558E _text$x         ends
.text$x:0000558E
.xdata$x:00005590 ; ===========================================================================
.xdata$x:00005590
.xdata$x:00005590 ; Segment type: Pure data
.xdata$x:00005590 ; Segment permissions: Read
.xdata$x:00005590 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005590                 assume cs:_xdata$x
.xdata$x:00005590                 ;org 5590h
.xdata$x:00005590 ; COMDAT (pick associative to section at 54FC)
.xdata$x:00005590 __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005590                                         ; DATA XREF: .xdata$x:000055A0o
.xdata$x:00005591                 db 0FFh
.xdata$x:00005592                 db 0FFh
.xdata$x:00005593                 db 0FFh
.xdata$x:00005594                 dd offset __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00005598 __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005598                                         ; DATA XREF: __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00005599                 db    5
.xdata$x:0000559A                 db  93h ; ô
.xdata$x:0000559B                 db  19h
.xdata$x:0000559C                 db    1
.xdata$x:0000559D                 db    0
.xdata$x:0000559E                 db    0
.xdata$x:0000559F                 db    0
.xdata$x:000055A0                 dd offset __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
.xdata$x:000055A4                 db    0
.xdata$x:000055A5                 db    0
.xdata$x:000055A6                 db    0
.xdata$x:000055A7                 db    0
.xdata$x:000055A8                 db    0
.xdata$x:000055A9                 db    0
.xdata$x:000055AA                 db    0
.xdata$x:000055AB                 db    0
.xdata$x:000055AC                 db    0
.xdata$x:000055AD                 db    0
.xdata$x:000055AE                 db    0
.xdata$x:000055AF                 db    0
.xdata$x:000055B0                 db    0
.xdata$x:000055B1                 db    0
.xdata$x:000055B2                 db    0
.xdata$x:000055B3                 db    0
.xdata$x:000055B4                 db    0
.xdata$x:000055B5                 db    0
.xdata$x:000055B6                 db    0
.xdata$x:000055B7                 db    0
.xdata$x:000055B8                 db    1
.xdata$x:000055B9                 db    0
.xdata$x:000055BA                 db    0
.xdata$x:000055BB                 db    0
.xdata$x:000055BB _xdata$x        ends
.xdata$x:000055BB
.text:000055BC ; ===========================================================================
.text:000055BC
.text:000055BC ; Segment type: Pure code
.text:000055BC ; Segment permissions: Read/Execute
.text:000055BC _text           segment para public 'CODE' use32
.text:000055BC                 assume cs:_text
.text:000055BC                 ;org 55BCh
.text:000055BC ; COMDAT (pick any)
.text:000055BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055BC
.text:000055BC ; =============== S U B R O U T I N E =======================================
.text:000055BC
.text:000055BC ; Attributes: bp-based frame
.text:000055BC
.text:000055BC ; public: __thiscall CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)
.text:000055BC                 public ??0CBufPtrSeqOutStream@@QAE@XZ
.text:000055BC ??0CBufPtrSeqOutStream@@QAE@XZ proc near
.text:000055BC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+168p
.text:000055BC
.text:000055BC var_4           = dword ptr -4
.text:000055BC
.text:000055BC                 push    ebp
.text:000055BD                 mov     ebp, esp
.text:000055BF                 push    ecx
.text:000055C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055C7                 mov     [ebp+var_4], ecx
.text:000055CA                 mov     ecx, [ebp+var_4] ; this
.text:000055CD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000055D2                 mov     ecx, [ebp+var_4]
.text:000055D5                 add     ecx, 4          ; this
.text:000055D8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000055DD                 mov     eax, [ebp+var_4]
.text:000055E0                 mov     dword ptr [eax], offset ??_7CBufPtrSeqOutStream@@6B@ ; const CBufPtrSeqOutStream::`vftable'
.text:000055E6                 mov     eax, [ebp+var_4]
.text:000055E9                 add     esp, 4
.text:000055EC                 cmp     ebp, esp
.text:000055EE                 call    __RTC_CheckEsp
.text:000055F3                 mov     esp, ebp
.text:000055F5                 pop     ebp
.text:000055F6                 retn
.text:000055F6 ??0CBufPtrSeqOutStream@@QAE@XZ endp
.text:000055F6
.text:000055F6 ; ---------------------------------------------------------------------------
.text:000055F7                 align 4
.text:000055F7 _text           ends
.text:000055F7
.rdata:000055F8 ; ===========================================================================
.rdata:000055F8
.rdata:000055F8 ; Segment type: Pure data
.rdata:000055F8 ; Segment permissions: Read
.rdata:000055F8 _rdata          segment dword public 'DATA' use32
.rdata:000055F8                 assume cs:_rdata
.rdata:000055F8                 ;org 55F8h
.rdata:000055F8 ; COMDAT (pick largest)
.rdata:000055F8                 dd offset ??_R4CBufPtrSeqOutStream@@6B@ ; const CBufPtrSeqOutStream::`RTTI Complete Object Locator'
.rdata:000055FC                 public ??_7CBufPtrSeqOutStream@@6B@
.rdata:000055FC ; const CBufPtrSeqOutStream::`vftable'
.rdata:000055FC ??_7CBufPtrSeqOutStream@@6B@ dd offset ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000055FC                                         ; DATA XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+24o
.rdata:000055FC                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00005600                 dd offset ?AddRef@CBufPtrSeqOutStream@@UAGKXZ ; CBufPtrSeqOutStream::AddRef(void)
.rdata:00005604                 dd offset ?Release@CBufPtrSeqOutStream@@UAGKXZ ; CBufPtrSeqOutStream::Release(void)
.rdata:00005608                 dd offset ?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z ; CBufPtrSeqOutStream::Write(void const *,uint,uint *)
.rdata:00005608 _rdata          ends
.rdata:00005608
.rdata$r:0000560C ; ===========================================================================
.rdata$r:0000560C
.rdata$r:0000560C ; Segment type: Pure data
.rdata$r:0000560C ; Segment permissions: Read
.rdata$r:0000560C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000560C                 assume cs:_rdata$r
.rdata$r:0000560C                 ;org 560Ch
.rdata$r:0000560C ; COMDAT (pick any)
.rdata$r:0000560C                 public ??_R4CBufPtrSeqOutStream@@6B@
.rdata$r:0000560C ; const CBufPtrSeqOutStream::`RTTI Complete Object Locator'
.rdata$r:0000560C ??_R4CBufPtrSeqOutStream@@6B@ db    0   ; DATA XREF: .rdata:000055F8o
.rdata$r:0000560D                 db    0
.rdata$r:0000560E                 db    0
.rdata$r:0000560F                 db    0
.rdata$r:00005610                 db    0
.rdata$r:00005611                 db    0
.rdata$r:00005612                 db    0
.rdata$r:00005613                 db    0
.rdata$r:00005614                 db    0
.rdata$r:00005615                 db    0
.rdata$r:00005616                 db    0
.rdata$r:00005617                 db    0
.rdata$r:00005618                 dd offset ??_R0?AVCBufPtrSeqOutStream@@@8 ; CBufPtrSeqOutStream `RTTI Type Descriptor'
.rdata$r:0000561C                 dd offset ??_R3CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000561C _rdata$r        ends
.rdata$r:0000561C
.data:00005620 ; ===========================================================================
.data:00005620
.data:00005620 ; Segment type: Pure data
.data:00005620 ; Segment permissions: Read/Write
.data:00005620 _data           segment dword public 'DATA' use32
.data:00005620                 assume cs:_data
.data:00005620                 ;org 5620h
.data:00005620 ; COMDAT (pick any)
.data:00005620                 public ??_R0?AVCBufPtrSeqOutStream@@@8
.data:00005620 ; class CBufPtrSeqOutStream `RTTI Type Descriptor'
.data:00005620 ??_R0?AVCBufPtrSeqOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00005620                                         ; DATA XREF: .rdata$r:00005618o
.data:00005620                                         ; .rdata$r:CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005620                                         ; const type_info::`vftable'
.data:00005624                 align 8
.data:00005628 a_?avcbufptrseq db '.?AVCBufPtrSeqOutStream@@',0
.data:00005642                 align 4
.data:00005642 _data           ends
.data:00005642
.rdata$r:00005644 ; ===========================================================================
.rdata$r:00005644
.rdata$r:00005644 ; Segment type: Pure data
.rdata$r:00005644 ; Segment permissions: Read
.rdata$r:00005644 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005644                 assume cs:_rdata$r
.rdata$r:00005644                 ;org 5644h
.rdata$r:00005644 ; COMDAT (pick any)
.rdata$r:00005644                 public ??_R3CBufPtrSeqOutStream@@8
.rdata$r:00005644 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005644 ??_R3CBufPtrSeqOutStream@@8 db    0     ; DATA XREF: .rdata$r:0000561Co
.rdata$r:00005644                                         ; .rdata$r:00005680o
.rdata$r:00005645                 db    0
.rdata$r:00005646                 db    0
.rdata$r:00005647                 db    0
.rdata$r:00005648                 db    1
.rdata$r:00005649                 db    0
.rdata$r:0000564A                 db    0
.rdata$r:0000564B                 db    0
.rdata$r:0000564C                 db    4
.rdata$r:0000564D                 db    0
.rdata$r:0000564E                 db    0
.rdata$r:0000564F                 db    0
.rdata$r:00005650                 dd offset ??_R2CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
.rdata$r:00005650 _rdata$r        ends
.rdata$r:00005650
.rdata$r:00005654 ; ===========================================================================
.rdata$r:00005654
.rdata$r:00005654 ; Segment type: Pure data
.rdata$r:00005654 ; Segment permissions: Read
.rdata$r:00005654 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005654                 assume cs:_rdata$r
.rdata$r:00005654                 ;org 5654h
.rdata$r:00005654 ; COMDAT (pick any)
.rdata$r:00005654                 public ??_R2CBufPtrSeqOutStream@@8
.rdata$r:00005654 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
.rdata$r:00005654 ??_R2CBufPtrSeqOutStream@@8 dd offset ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
.rdata$r:00005654                                         ; DATA XREF: .rdata$r:00005650o
.rdata$r:00005654                                         ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005658                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000565C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005660                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005664                 db    0
.rdata$r:00005665                 align 4
.rdata$r:00005665 _rdata$r        ends
.rdata$r:00005665
.rdata$r:00005668 ; ===========================================================================
.rdata$r:00005668
.rdata$r:00005668 ; Segment type: Pure data
.rdata$r:00005668 ; Segment permissions: Read
.rdata$r:00005668 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005668                 assume cs:_rdata$r
.rdata$r:00005668                 ;org 5668h
.rdata$r:00005668 ; COMDAT (pick any)
.rdata$r:00005668                 public ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
.rdata$r:00005668 ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005668 ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 dd offset ??_R0?AVCBufPtrSeqOutStream@@@8
.rdata$r:00005668                                         ; DATA XREF: .rdata$r:CBufPtrSeqOutStream::`RTTI Base Class Array'o
.rdata$r:00005668                                         ; CBufPtrSeqOutStream `RTTI Type Descriptor'
.rdata$r:0000566C                 db    3
.rdata$r:0000566D                 db    0
.rdata$r:0000566E                 db    0
.rdata$r:0000566F                 db    0
.rdata$r:00005670                 db    0
.rdata$r:00005671                 db    0
.rdata$r:00005672                 db    0
.rdata$r:00005673                 db    0
.rdata$r:00005674                 db 0FFh
.rdata$r:00005675                 db 0FFh
.rdata$r:00005676                 db 0FFh
.rdata$r:00005677                 db 0FFh
.rdata$r:00005678                 db    0
.rdata$r:00005679                 db    0
.rdata$r:0000567A                 db    0
.rdata$r:0000567B                 db    0
.rdata$r:0000567C                 db  40h ; @
.rdata$r:0000567D                 db    0
.rdata$r:0000567E                 db    0
.rdata$r:0000567F                 db    0
.rdata$r:00005680                 dd offset ??_R3CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005680 _rdata$r        ends
.rdata$r:00005680
.rdata$r:00005684 ; ===========================================================================
.rdata$r:00005684
.rdata$r:00005684 ; Segment type: Pure data
.rdata$r:00005684 ; Segment permissions: Read
.rdata$r:00005684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005684                 assume cs:_rdata$r
.rdata$r:00005684                 ;org 5684h
.rdata$r:00005684 ; COMDAT (pick any)
.rdata$r:00005684                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00005684 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005684 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00005684                                         ; DATA XREF: .rdata$r:00005658o
.rdata$r:00005684                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00005684                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00005688                 db    1
.rdata$r:00005689                 db    0
.rdata$r:0000568A                 db    0
.rdata$r:0000568B                 db    0
.rdata$r:0000568C                 db    0
.rdata$r:0000568D                 db    0
.rdata$r:0000568E                 db    0
.rdata$r:0000568F                 db    0
.rdata$r:00005690                 db 0FFh
.rdata$r:00005691                 db 0FFh
.rdata$r:00005692                 db 0FFh
.rdata$r:00005693                 db 0FFh
.rdata$r:00005694                 db    0
.rdata$r:00005695                 db    0
.rdata$r:00005696                 db    0
.rdata$r:00005697                 db    0
.rdata$r:00005698                 db  40h ; @
.rdata$r:00005699                 db    0
.rdata$r:0000569A                 db    0
.rdata$r:0000569B                 db    0
.rdata$r:0000569C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000569C _rdata$r        ends
.rdata$r:0000569C
.data:000056A0 ; ===========================================================================
.data:000056A0
.data:000056A0 ; Segment type: Pure data
.data:000056A0 ; Segment permissions: Read/Write
.data:000056A0 _data           segment dword public 'DATA' use32
.data:000056A0                 assume cs:_data
.data:000056A0                 ;org 56A0h
.data:000056A0 ; COMDAT (pick any)
.data:000056A0                 public ??_R0?AUISequentialOutStream@@@8
.data:000056A0 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000056A0 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000056A0                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000056A0                                         ; .rdata$r:00005808o
.data:000056A0                                         ; const type_info::`vftable'
.data:000056A4                 align 8
.data:000056A8 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:000056C3                 align 4
.data:000056C3 _data           ends
.data:000056C3
.rdata$r:000056C4 ; ===========================================================================
.rdata$r:000056C4
.rdata$r:000056C4 ; Segment type: Pure data
.rdata$r:000056C4 ; Segment permissions: Read
.rdata$r:000056C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056C4                 assume cs:_rdata$r
.rdata$r:000056C4                 ;org 56C4h
.rdata$r:000056C4 ; COMDAT (pick any)
.rdata$r:000056C4                 public ??_R3ISequentialOutStream@@8
.rdata$r:000056C4 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056C4 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:0000569Co
.rdata$r:000056C4                                         ; .rdata$r:0000580Co
.rdata$r:000056C5                 db    0
.rdata$r:000056C6                 db    0
.rdata$r:000056C7                 db    0
.rdata$r:000056C8                 db    0
.rdata$r:000056C9                 db    0
.rdata$r:000056CA                 db    0
.rdata$r:000056CB                 db    0
.rdata$r:000056CC                 db    2
.rdata$r:000056CD                 db    0
.rdata$r:000056CE                 db    0
.rdata$r:000056CF                 db    0
.rdata$r:000056D0                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000056D0 _rdata$r        ends
.rdata$r:000056D0
.rdata$r:000056D4 ; ===========================================================================
.rdata$r:000056D4
.rdata$r:000056D4 ; Segment type: Pure data
.rdata$r:000056D4 ; Segment permissions: Read
.rdata$r:000056D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056D4                 assume cs:_rdata$r
.rdata$r:000056D4                 ;org 56D4h
.rdata$r:000056D4 ; COMDAT (pick any)
.rdata$r:000056D4                 public ??_R2ISequentialOutStream@@8
.rdata$r:000056D4 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000056D4 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000056D4                                         ; DATA XREF: .rdata$r:000056D0o
.rdata$r:000056D4                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000056D8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000056DC                 db    0
.rdata$r:000056DD                 align 10h
.rdata$r:000056DD _rdata$r        ends
.rdata$r:000056DD
.rdata$r:000056E0 ; ===========================================================================
.rdata$r:000056E0
.rdata$r:000056E0 ; Segment type: Pure data
.rdata$r:000056E0 ; Segment permissions: Read
.rdata$r:000056E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056E0                 assume cs:_rdata$r
.rdata$r:000056E0                 ;org 56E0h
.rdata$r:000056E0 ; COMDAT (pick any)
.rdata$r:000056E0                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000056E0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000056E0 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000056E0                                         ; DATA XREF: .rdata$r:0000565Co
.rdata$r:000056E0                                         ; .rdata$r:000056D8o ...
.rdata$r:000056E0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000056E4                 db    0
.rdata$r:000056E5                 db    0
.rdata$r:000056E6                 db    0
.rdata$r:000056E7                 db    0
.rdata$r:000056E8                 db    0
.rdata$r:000056E9                 db    0
.rdata$r:000056EA                 db    0
.rdata$r:000056EB                 db    0
.rdata$r:000056EC                 db 0FFh
.rdata$r:000056ED                 db 0FFh
.rdata$r:000056EE                 db 0FFh
.rdata$r:000056EF                 db 0FFh
.rdata$r:000056F0                 db    0
.rdata$r:000056F1                 db    0
.rdata$r:000056F2                 db    0
.rdata$r:000056F3                 db    0
.rdata$r:000056F4                 db  40h ; @
.rdata$r:000056F5                 db    0
.rdata$r:000056F6                 db    0
.rdata$r:000056F7                 db    0
.rdata$r:000056F8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056F8 _rdata$r        ends
.rdata$r:000056F8
.data:000056FC ; ===========================================================================
.data:000056FC
.data:000056FC ; Segment type: Pure data
.data:000056FC ; Segment permissions: Read/Write
.data:000056FC _data           segment dword public 'DATA' use32
.data:000056FC                 assume cs:_data
.data:000056FC                 ;org 56FCh
.data:000056FC ; COMDAT (pick any)
.data:000056FC                 public ??_R0?AUIUnknown@@@8
.data:000056FC ; struct IUnknown `RTTI Type Descriptor'
.data:000056FC ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000056FC                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000056FC                                         ; const type_info::`vftable'
.data:00005700                 db    0
.data:00005701                 db    0
.data:00005702                 db    0
.data:00005703                 db    0
.data:00005704                 db  2Eh ; .
.data:00005705                 db  3Fh ; ?
.data:00005706                 db  41h ; A
.data:00005707                 db  55h ; U
.data:00005708                 db  49h ; I
.data:00005709                 db  55h ; U
.data:0000570A                 db  6Eh ; n
.data:0000570B                 db  6Bh ; k
.data:0000570C                 db  6Eh ; n
.data:0000570D                 db  6Fh ; o
.data:0000570E                 db  77h ; w
.data:0000570F                 db  6Eh ; n
.data:00005710                 db  40h ; @
.data:00005711                 db  40h ; @
.data:00005712                 db    0
.data:00005713                 align 4
.data:00005713 _data           ends
.data:00005713
.rdata$r:00005714 ; ===========================================================================
.rdata$r:00005714
.rdata$r:00005714 ; Segment type: Pure data
.rdata$r:00005714 ; Segment permissions: Read
.rdata$r:00005714 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005714                 assume cs:_rdata$r
.rdata$r:00005714                 ;org 5714h
.rdata$r:00005714 ; COMDAT (pick any)
.rdata$r:00005714                 public ??_R3IUnknown@@8
.rdata$r:00005714 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005714 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000056F8o
.rdata$r:00005715                 db    0
.rdata$r:00005716                 db    0
.rdata$r:00005717                 db    0
.rdata$r:00005718                 db    0
.rdata$r:00005719                 db    0
.rdata$r:0000571A                 db    0
.rdata$r:0000571B                 db    0
.rdata$r:0000571C                 db    1
.rdata$r:0000571D                 db    0
.rdata$r:0000571E                 db    0
.rdata$r:0000571F                 db    0
.rdata$r:00005720                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005720 _rdata$r        ends
.rdata$r:00005720
.rdata$r:00005724 ; ===========================================================================
.rdata$r:00005724
.rdata$r:00005724 ; Segment type: Pure data
.rdata$r:00005724 ; Segment permissions: Read
.rdata$r:00005724 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005724                 assume cs:_rdata$r
.rdata$r:00005724                 ;org 5724h
.rdata$r:00005724 ; COMDAT (pick any)
.rdata$r:00005724                 public ??_R2IUnknown@@8
.rdata$r:00005724 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005724 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00005724                                         ; DATA XREF: .rdata$r:00005720o
.rdata$r:00005724                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005728                 db    0
.rdata$r:00005729                 align 4
.rdata$r:00005729 _rdata$r        ends
.rdata$r:00005729
.rdata$r:0000572C ; ===========================================================================
.rdata$r:0000572C
.rdata$r:0000572C ; Segment type: Pure data
.rdata$r:0000572C ; Segment permissions: Read
.rdata$r:0000572C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000572C                 assume cs:_rdata$r
.rdata$r:0000572C                 ;org 572Ch
.rdata$r:0000572C ; COMDAT (pick any)
.rdata$r:0000572C                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:0000572C ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000572C ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000572C                                         ; DATA XREF: .rdata$r:00005660o
.rdata$r:0000572C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00005730                 db    0
.rdata$r:00005731                 db    0
.rdata$r:00005732                 db    0
.rdata$r:00005733                 db    0
.rdata$r:00005734                 db    4
.rdata$r:00005735                 db    0
.rdata$r:00005736                 db    0
.rdata$r:00005737                 db    0
.rdata$r:00005738                 db 0FFh
.rdata$r:00005739                 db 0FFh
.rdata$r:0000573A                 db 0FFh
.rdata$r:0000573B                 db 0FFh
.rdata$r:0000573C                 db    0
.rdata$r:0000573D                 db    0
.rdata$r:0000573E                 db    0
.rdata$r:0000573F                 db    0
.rdata$r:00005740                 db  40h ; @
.rdata$r:00005741                 db    0
.rdata$r:00005742                 db    0
.rdata$r:00005743                 db    0
.rdata$r:00005744                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005744 _rdata$r        ends
.rdata$r:00005744
.data:00005748 ; ===========================================================================
.data:00005748
.data:00005748 ; Segment type: Pure data
.data:00005748 ; Segment permissions: Read/Write
.data:00005748 _data           segment dword public 'DATA' use32
.data:00005748                 assume cs:_data
.data:00005748                 ;org 5748h
.data:00005748 ; COMDAT (pick any)
.data:00005748                 public ??_R0?AVCMyUnknownImp@@@8
.data:00005748 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00005748 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00005748                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005748                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005748                                         ; const type_info::`vftable'
.data:0000574C                 align 10h
.data:00005750 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00005750 _data           ends
.data:00005750
.rdata$r:00005764 ; ===========================================================================
.rdata$r:00005764
.rdata$r:00005764 ; Segment type: Pure data
.rdata$r:00005764 ; Segment permissions: Read
.rdata$r:00005764 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005764                 assume cs:_rdata$r
.rdata$r:00005764                 ;org 5764h
.rdata$r:00005764 ; COMDAT (pick any)
.rdata$r:00005764                 public ??_R3CMyUnknownImp@@8
.rdata$r:00005764 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005764 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00005744o
.rdata$r:00005764                                         ; .rdata$r:00005794o
.rdata$r:00005765                 db    0
.rdata$r:00005766                 db    0
.rdata$r:00005767                 db    0
.rdata$r:00005768                 db    0
.rdata$r:00005769                 db    0
.rdata$r:0000576A                 db    0
.rdata$r:0000576B                 db    0
.rdata$r:0000576C                 db    1
.rdata$r:0000576D                 db    0
.rdata$r:0000576E                 db    0
.rdata$r:0000576F                 db    0
.rdata$r:00005770                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00005770 _rdata$r        ends
.rdata$r:00005770
.rdata$r:00005774 ; ===========================================================================
.rdata$r:00005774
.rdata$r:00005774 ; Segment type: Pure data
.rdata$r:00005774 ; Segment permissions: Read
.rdata$r:00005774 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005774                 assume cs:_rdata$r
.rdata$r:00005774                 ;org 5774h
.rdata$r:00005774 ; COMDAT (pick any)
.rdata$r:00005774                 public ??_R2CMyUnknownImp@@8
.rdata$r:00005774 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00005774 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005774                                         ; DATA XREF: .rdata$r:00005770o
.rdata$r:00005774                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005778                 db    0
.rdata$r:00005779                 align 4
.rdata$r:00005779 _rdata$r        ends
.rdata$r:00005779
.rdata$r:0000577C ; ===========================================================================
.rdata$r:0000577C
.rdata$r:0000577C ; Segment type: Pure data
.rdata$r:0000577C ; Segment permissions: Read
.rdata$r:0000577C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000577C                 assume cs:_rdata$r
.rdata$r:0000577C                 ;org 577Ch
.rdata$r:0000577C ; COMDAT (pick any)
.rdata$r:0000577C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000577C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000577C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000577C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000577C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00005780                 db    0
.rdata$r:00005781                 db    0
.rdata$r:00005782                 db    0
.rdata$r:00005783                 db    0
.rdata$r:00005784                 db    0
.rdata$r:00005785                 db    0
.rdata$r:00005786                 db    0
.rdata$r:00005787                 db    0
.rdata$r:00005788                 db 0FFh
.rdata$r:00005789                 db 0FFh
.rdata$r:0000578A                 db 0FFh
.rdata$r:0000578B                 db 0FFh
.rdata$r:0000578C                 db    0
.rdata$r:0000578D                 db    0
.rdata$r:0000578E                 db    0
.rdata$r:0000578F                 db    0
.rdata$r:00005790                 db  40h ; @
.rdata$r:00005791                 db    0
.rdata$r:00005792                 db    0
.rdata$r:00005793                 db    0
.rdata$r:00005794                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005794 _rdata$r        ends
.rdata$r:00005794
.text:00005798 ; ===========================================================================
.text:00005798
.text:00005798 ; Segment type: Pure code
.text:00005798 ; Segment permissions: Read/Execute
.text:00005798 _text           segment para public 'CODE' use32
.text:00005798                 assume cs:_text
.text:00005798                 ;org 5798h
.text:00005798 ; COMDAT (pick any)
.text:00005798                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005798
.text:00005798 ; =============== S U B R O U T I N E =======================================
.text:00005798
.text:00005798 ; Attributes: bp-based frame
.text:00005798
.text:00005798 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00005798                 public ??0CMyUnknownImp@@QAE@XZ
.text:00005798 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+1Cp
.text:00005798
.text:00005798 var_4           = dword ptr -4
.text:00005798
.text:00005798                 push    ebp
.text:00005799                 mov     ebp, esp
.text:0000579B                 push    ecx
.text:0000579C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057A3                 mov     [ebp+var_4], ecx
.text:000057A6                 mov     eax, [ebp+var_4]
.text:000057A9                 mov     dword ptr [eax], 0
.text:000057AF                 mov     eax, [ebp+var_4]
.text:000057B2                 mov     esp, ebp
.text:000057B4                 pop     ebp
.text:000057B5                 retn
.text:000057B5 ??0CMyUnknownImp@@QAE@XZ endp
.text:000057B5
.text:000057B5 ; ---------------------------------------------------------------------------
.text:000057B6                 align 4
.text:000057B6 _text           ends
.text:000057B6
.text:000057B8 ; ===========================================================================
.text:000057B8
.text:000057B8 ; Segment type: Pure code
.text:000057B8 ; Segment permissions: Read/Execute
.text:000057B8 _text           segment para public 'CODE' use32
.text:000057B8                 assume cs:_text
.text:000057B8                 ;org 57B8h
.text:000057B8 ; COMDAT (pick any)
.text:000057B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057B8
.text:000057B8 ; =============== S U B R O U T I N E =======================================
.text:000057B8
.text:000057B8 ; Attributes: bp-based frame
.text:000057B8
.text:000057B8 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000057B8                 public ??0ISequentialOutStream@@QAE@XZ
.text:000057B8 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000057B8                                         ; CODE XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+11p
.text:000057B8
.text:000057B8 var_4           = dword ptr -4
.text:000057B8
.text:000057B8                 push    ebp
.text:000057B9                 mov     ebp, esp
.text:000057BB                 push    ecx
.text:000057BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057C3                 mov     [ebp+var_4], ecx
.text:000057C6                 mov     ecx, [ebp+var_4]
.text:000057C9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000057CE                 mov     eax, [ebp+var_4]
.text:000057D1                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:000057D7                 mov     eax, [ebp+var_4]
.text:000057DA                 add     esp, 4
.text:000057DD                 cmp     ebp, esp
.text:000057DF                 call    __RTC_CheckEsp
.text:000057E4                 mov     esp, ebp
.text:000057E6                 pop     ebp
.text:000057E7                 retn
.text:000057E7 ??0ISequentialOutStream@@QAE@XZ endp
.text:000057E7
.text:000057E7 _text           ends
.text:000057E7
.rdata:000057E8 ; ===========================================================================
.rdata:000057E8
.rdata:000057E8 ; Segment type: Pure data
.rdata:000057E8 ; Segment permissions: Read
.rdata:000057E8 _rdata          segment dword public 'DATA' use32
.rdata:000057E8                 assume cs:_rdata
.rdata:000057E8                 ;org 57E8h
.rdata:000057E8 ; COMDAT (pick largest)
.rdata:000057E8                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:000057EC                 public ??_7ISequentialOutStream@@6B@
.rdata:000057EC ; const ISequentialOutStream::`vftable'
.rdata:000057EC ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:000057EC                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:000057F0                 dd offset __purecall
.rdata:000057F4                 dd offset __purecall
.rdata:000057F8                 dd offset __purecall
.rdata:000057F8 _rdata          ends
.rdata:000057F8
.rdata$r:000057FC ; ===========================================================================
.rdata$r:000057FC
.rdata$r:000057FC ; Segment type: Pure data
.rdata$r:000057FC ; Segment permissions: Read
.rdata$r:000057FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000057FC                 assume cs:_rdata$r
.rdata$r:000057FC                 ;org 57FCh
.rdata$r:000057FC ; COMDAT (pick any)
.rdata$r:000057FC                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:000057FC ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:000057FC ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:000057E8o
.rdata$r:000057FD                 db    0
.rdata$r:000057FE                 db    0
.rdata$r:000057FF                 db    0
.rdata$r:00005800                 db    0
.rdata$r:00005801                 db    0
.rdata$r:00005802                 db    0
.rdata$r:00005803                 db    0
.rdata$r:00005804                 db    0
.rdata$r:00005805                 db    0
.rdata$r:00005806                 db    0
.rdata$r:00005807                 db    0
.rdata$r:00005808                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000580C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000580C _rdata$r        ends
.rdata$r:0000580C
.text:00005810 ; ===========================================================================
.text:00005810
.text:00005810 ; Segment type: Pure code
.text:00005810 ; Segment permissions: Read/Execute
.text:00005810 _text           segment para public 'CODE' use32
.text:00005810                 assume cs:_text
.text:00005810                 ;org 5810h
.text:00005810 ; COMDAT (pick any)
.text:00005810                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005810
.text:00005810 ; =============== S U B R O U T I N E =======================================
.text:00005810
.text:00005810 ; Attributes: bp-based frame
.text:00005810
.text:00005810 ; public: __thiscall IUnknown::IUnknown(void)
.text:00005810                 public ??0IUnknown@@QAE@XZ
.text:00005810 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00005810
.text:00005810 var_4           = dword ptr -4
.text:00005810
.text:00005810                 push    ebp
.text:00005811                 mov     ebp, esp
.text:00005813                 push    ecx
.text:00005814                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000581B                 mov     [ebp+var_4], ecx
.text:0000581E                 mov     eax, [ebp+var_4]
.text:00005821                 mov     esp, ebp
.text:00005823                 pop     ebp
.text:00005824                 retn
.text:00005824 ??0IUnknown@@QAE@XZ endp
.text:00005824
.text:00005824 ; ---------------------------------------------------------------------------
.text:00005825                 align 4
.text:00005825 _text           ends
.text:00005825
.text:00005828 ; ===========================================================================
.text:00005828
.text:00005828 ; Segment type: Pure code
.text:00005828 ; Segment permissions: Read/Execute
.text:00005828 _text           segment para public 'CODE' use32
.text:00005828                 assume cs:_text
.text:00005828                 ;org 5828h
.text:00005828 ; COMDAT (pick any)
.text:00005828                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005828
.text:00005828 ; =============== S U B R O U T I N E =======================================
.text:00005828
.text:00005828 ; Attributes: bp-based frame
.text:00005828
.text:00005828 ; __int32 __stdcall CBufPtrSeqOutStream::QueryInterface(CBufPtrSeqOutStream *this, const struct _GUID *Buf1, void **)
.text:00005828                 public ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:00005828 ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005828                                         ; DATA XREF: .rdata:const CBufPtrSeqOutStream::`vftable'o
.text:00005828
.text:00005828 this            = dword ptr  8
.text:00005828 Buf1            = dword ptr  0Ch
.text:00005828 arg_8           = dword ptr  10h
.text:00005828
.text:00005828                 push    ebp
.text:00005829                 mov     ebp, esp
.text:0000582B                 mov     eax, [ebp+arg_8]
.text:0000582E                 mov     dword ptr [eax], 0
.text:00005834                 push    offset _IID_IUnknown ; Buf2
.text:00005839                 mov     ecx, [ebp+Buf1]
.text:0000583C                 push    ecx             ; Buf1
.text:0000583D                 call    ___@8           ; __(x,x)
.text:00005842                 test    eax, eax
.text:00005844                 jz      short loc_5850
.text:00005846                 mov     edx, [ebp+arg_8]
.text:00005849                 mov     eax, [ebp+this]
.text:0000584C                 mov     [edx], eax
.text:0000584E                 jmp     short loc_5873
.text:00005850 ; ---------------------------------------------------------------------------
.text:00005850
.text:00005850 loc_5850:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00005850                 push    offset _IID_ISequentialOutStream ; Buf2
.text:00005855                 mov     ecx, [ebp+Buf1]
.text:00005858                 push    ecx             ; Buf1
.text:00005859                 call    ___@8           ; __(x,x)
.text:0000585E                 test    eax, eax
.text:00005860                 jz      short loc_586C
.text:00005862                 mov     edx, [ebp+arg_8]
.text:00005865                 mov     eax, [ebp+this]
.text:00005868                 mov     [edx], eax
.text:0000586A                 jmp     short loc_5873
.text:0000586C ; ---------------------------------------------------------------------------
.text:0000586C
.text:0000586C loc_586C:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:0000586C                 mov     eax, 80004002h
.text:00005871                 jmp     short loc_5884
.text:00005873 ; ---------------------------------------------------------------------------
.text:00005873
.text:00005873 loc_5873:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00005873                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:00005873                 mov     ecx, [ebp+this]
.text:00005876                 mov     edx, [ecx+4]
.text:00005879                 add     edx, 1
.text:0000587C                 mov     eax, [ebp+this]
.text:0000587F                 mov     [eax+4], edx
.text:00005882                 xor     eax, eax
.text:00005884
.text:00005884 loc_5884:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:00005884                 cmp     ebp, esp
.text:00005886                 call    __RTC_CheckEsp
.text:0000588B                 pop     ebp
.text:0000588C                 retn    0Ch
.text:0000588C ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000588C
.text:0000588C ; ---------------------------------------------------------------------------
.text:0000588F                 align 10h
.text:0000588F _text           ends
.text:0000588F
.text:00005890 ; ===========================================================================
.text:00005890
.text:00005890 ; Segment type: Pure code
.text:00005890 ; Segment permissions: Read/Execute
.text:00005890 _text           segment para public 'CODE' use32
.text:00005890                 assume cs:_text
.text:00005890                 ;org 5890h
.text:00005890 ; COMDAT (pick any)
.text:00005890                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005890
.text:00005890 ; =============== S U B R O U T I N E =======================================
.text:00005890
.text:00005890 ; Attributes: bp-based frame
.text:00005890
.text:00005890 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00005890                 public ___@8
.text:00005890 ___@8           proc near               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:00005890                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+31p
.text:00005890
.text:00005890 Buf1            = dword ptr  8
.text:00005890 Buf2            = dword ptr  0Ch
.text:00005890
.text:00005890                 push    ebp
.text:00005891                 mov     ebp, esp
.text:00005893                 mov     eax, [ebp+Buf2]
.text:00005896                 push    eax             ; Buf2
.text:00005897                 mov     ecx, [ebp+Buf1]
.text:0000589A                 push    ecx             ; Buf1
.text:0000589B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000058A0                 cmp     ebp, esp
.text:000058A2                 call    __RTC_CheckEsp
.text:000058A7                 pop     ebp
.text:000058A8                 retn    8
.text:000058A8 ___@8           endp
.text:000058A8
.text:000058A8 ; ---------------------------------------------------------------------------
.text:000058AB                 align 4
.text:000058AB _text           ends
.text:000058AB
.text:000058AC ; ===========================================================================
.text:000058AC
.text:000058AC ; Segment type: Pure code
.text:000058AC ; Segment permissions: Read/Execute
.text:000058AC _text           segment para public 'CODE' use32
.text:000058AC                 assume cs:_text
.text:000058AC                 ;org 58ACh
.text:000058AC ; COMDAT (pick any)
.text:000058AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058AC
.text:000058AC ; =============== S U B R O U T I N E =======================================
.text:000058AC
.text:000058AC ; Attributes: bp-based frame
.text:000058AC
.text:000058AC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000058AC                 public _IsEqualGUID@8
.text:000058AC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000058AC
.text:000058AC Buf1            = dword ptr  8
.text:000058AC Buf2            = dword ptr  0Ch
.text:000058AC
.text:000058AC                 push    ebp
.text:000058AD                 mov     ebp, esp
.text:000058AF                 push    10h             ; Size
.text:000058B1                 mov     eax, [ebp+Buf2]
.text:000058B4                 push    eax             ; Buf2
.text:000058B5                 mov     ecx, [ebp+Buf1]
.text:000058B8                 push    ecx             ; Buf1
.text:000058B9                 call    _memcmp
.text:000058BE                 add     esp, 0Ch
.text:000058C1                 neg     eax
.text:000058C3                 sbb     eax, eax
.text:000058C5                 add     eax, 1
.text:000058C8                 cmp     ebp, esp
.text:000058CA                 call    __RTC_CheckEsp
.text:000058CF                 pop     ebp
.text:000058D0                 retn    8
.text:000058D0 _IsEqualGUID@8  endp
.text:000058D0
.text:000058D0 ; ---------------------------------------------------------------------------
.text:000058D3                 align 4
.text:000058D3 _text           ends
.text:000058D3
.text:000058D4 ; ===========================================================================
.text:000058D4
.text:000058D4 ; Segment type: Pure code
.text:000058D4 ; Segment permissions: Read/Execute
.text:000058D4 _text           segment para public 'CODE' use32
.text:000058D4                 assume cs:_text
.text:000058D4                 ;org 58D4h
.text:000058D4 ; COMDAT (pick any)
.text:000058D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058D4
.text:000058D4 ; =============== S U B R O U T I N E =======================================
.text:000058D4
.text:000058D4 ; Attributes: bp-based frame
.text:000058D4
.text:000058D4 ; unsigned __int32 __stdcall CBufPtrSeqOutStream::AddRef(CBufPtrSeqOutStream *this)
.text:000058D4                 public ?AddRef@CBufPtrSeqOutStream@@UAGKXZ
.text:000058D4 ?AddRef@CBufPtrSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00005600o
.text:000058D4
.text:000058D4 var_4           = dword ptr -4
.text:000058D4 this            = dword ptr  8
.text:000058D4
.text:000058D4                 push    ebp
.text:000058D5                 mov     ebp, esp
.text:000058D7                 push    ecx
.text:000058D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058DF                 mov     eax, [ebp+this]
.text:000058E2                 mov     ecx, [eax+4]
.text:000058E5                 add     ecx, 1
.text:000058E8                 mov     [ebp+var_4], ecx
.text:000058EB                 mov     edx, [ebp+this]
.text:000058EE                 mov     eax, [ebp+var_4]
.text:000058F1                 mov     [edx+4], eax
.text:000058F4                 mov     eax, [ebp+var_4]
.text:000058F7                 mov     esp, ebp
.text:000058F9                 pop     ebp
.text:000058FA                 retn    4
.text:000058FA ?AddRef@CBufPtrSeqOutStream@@UAGKXZ endp
.text:000058FA
.text:000058FA ; ---------------------------------------------------------------------------
.text:000058FD                 align 10h
.text:000058FD _text           ends
.text:000058FD
.text:00005900 ; ===========================================================================
.text:00005900
.text:00005900 ; Segment type: Pure code
.text:00005900 ; Segment permissions: Read/Execute
.text:00005900 _text           segment para public 'CODE' use32
.text:00005900                 assume cs:_text
.text:00005900                 ;org 5900h
.text:00005900 ; COMDAT (pick any)
.text:00005900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005900
.text:00005900 ; =============== S U B R O U T I N E =======================================
.text:00005900
.text:00005900 ; Attributes: bp-based frame
.text:00005900
.text:00005900 ; unsigned __int32 __stdcall CBufPtrSeqOutStream::Release(CBufPtrSeqOutStream *this)
.text:00005900                 public ?Release@CBufPtrSeqOutStream@@UAGKXZ
.text:00005900 ?Release@CBufPtrSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00005604o
.text:00005900
.text:00005900 var_8           = dword ptr -8
.text:00005900 var_4           = dword ptr -4
.text:00005900 this            = dword ptr  8
.text:00005900
.text:00005900                 push    ebp
.text:00005901                 mov     ebp, esp
.text:00005903                 sub     esp, 8
.text:00005906                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000590D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005914                 mov     eax, [ebp+this]
.text:00005917                 mov     ecx, [eax+4]
.text:0000591A                 sub     ecx, 1
.text:0000591D                 mov     [ebp+var_8], ecx
.text:00005920                 mov     edx, [ebp+this]
.text:00005923                 mov     eax, [ebp+var_8]
.text:00005926                 mov     [edx+4], eax
.text:00005929                 cmp     [ebp+var_8], 0
.text:0000592D                 jz      short loc_5937
.text:0000592F                 mov     ecx, [ebp+this]
.text:00005932                 mov     eax, [ecx+4]
.text:00005935                 jmp     short loc_594B
.text:00005937 ; ---------------------------------------------------------------------------
.text:00005937
.text:00005937 loc_5937:                               ; CODE XREF: CBufPtrSeqOutStream::Release(void)+2Dj
.text:00005937                 mov     edx, [ebp+this]
.text:0000593A                 mov     [ebp+var_4], edx
.text:0000593D                 mov     eax, [ebp+var_4]
.text:00005940                 push    eax             ; void *
.text:00005941                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005946                 add     esp, 4
.text:00005949                 xor     eax, eax
.text:0000594B
.text:0000594B loc_594B:                               ; CODE XREF: CBufPtrSeqOutStream::Release(void)+35j
.text:0000594B                 add     esp, 8
.text:0000594E                 cmp     ebp, esp
.text:00005950                 call    __RTC_CheckEsp
.text:00005955                 mov     esp, ebp
.text:00005957                 pop     ebp
.text:00005958                 retn    4
.text:00005958 ?Release@CBufPtrSeqOutStream@@UAGKXZ endp
.text:00005958
.text:00005958 ; ---------------------------------------------------------------------------
.text:0000595B                 align 4
.text:0000595B _text           ends
.text:0000595B
.text:0000595C ; ===========================================================================
.text:0000595C
.text:0000595C ; Segment type: Pure code
.text:0000595C ; Segment permissions: Read/Execute
.text:0000595C _text           segment para public 'CODE' use32
.text:0000595C                 assume cs:_text
.text:0000595C                 ;org 595Ch
.text:0000595C ; COMDAT (pick any)
.text:0000595C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000595C
.text:0000595C ; =============== S U B R O U T I N E =======================================
.text:0000595C
.text:0000595C ; Attributes: bp-based frame
.text:0000595C
.text:0000595C ; _DWORD __thiscall NArchive::N7z::CParsedMethods::~CParsedMethods(NArchive::N7z::CParsedMethods *__hidden this)
.text:0000595C                 public ??1CParsedMethods@N7z@NArchive@@QAE@XZ
.text:0000595C ??1CParsedMethods@N7z@NArchive@@QAE@XZ proc near
.text:0000595C                                         ; CODE XREF: NArchive::N7z::CFolders::~CFolders(void)+3Ap
.text:0000595C
.text:0000595C var_4           = dword ptr -4
.text:0000595C
.text:0000595C                 push    ebp
.text:0000595D                 mov     ebp, esp
.text:0000595F                 push    ecx
.text:00005960                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005967                 mov     [ebp+var_4], ecx
.text:0000596A                 mov     ecx, [ebp+var_4]
.text:0000596D                 add     ecx, 8
.text:00005970                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00005975                 add     esp, 4
.text:00005978                 cmp     ebp, esp
.text:0000597A                 call    __RTC_CheckEsp
.text:0000597F                 mov     esp, ebp
.text:00005981                 pop     ebp
.text:00005982                 retn
.text:00005982 ??1CParsedMethods@N7z@NArchive@@QAE@XZ endp
.text:00005982
.text:00005982 ; ---------------------------------------------------------------------------
.text:00005983                 align 4
.text:00005983 _text           ends
.text:00005983
.text:00005984 ; ===========================================================================
.text:00005984
.text:00005984 ; Segment type: Pure code
.text:00005984 ; Segment permissions: Read/Execute
.text:00005984 _text           segment para public 'CODE' use32
.text:00005984                 assume cs:_text
.text:00005984                 ;org 5984h
.text:00005984 ; COMDAT (pick any)
.text:00005984                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005984
.text:00005984 ; =============== S U B R O U T I N E =======================================
.text:00005984
.text:00005984 ; Attributes: bp-based frame
.text:00005984
.text:00005984 ; _DWORD __thiscall NArchive::N7z::CBindInfoEx::~CBindInfoEx(NArchive::N7z::CBindInfoEx *__hidden this)
.text:00005984                 public ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00005984 ??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text:00005984                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+4Cp
.text:00005984                                         ; __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0+6j
.text:00005984
.text:00005984 var_10          = dword ptr -10h
.text:00005984 var_C           = dword ptr -0Ch
.text:00005984 var_4           = dword ptr -4
.text:00005984
.text:00005984                 push    ebp
.text:00005985                 mov     ebp, esp
.text:00005987                 push    0FFFFFFFFh
.text:00005989                 push    offset __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:0000598E                 mov     eax, large fs:0
.text:00005994                 push    eax
.text:00005995                 push    ecx
.text:00005996                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000599D                 mov     eax, dword ptr ds:___security_cookie
.text:000059A2                 xor     eax, ebp
.text:000059A4                 push    eax
.text:000059A5                 lea     eax, [ebp+var_C]
.text:000059A8                 mov     large fs:0, eax
.text:000059AE                 mov     [ebp+var_10], ecx
.text:000059B1                 mov     [ebp+var_4], 0
.text:000059B8                 mov     ecx, [ebp+var_10]
.text:000059BB                 add     ecx, 40h ; '@'
.text:000059BE                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000059C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000059CA                 mov     ecx, [ebp+var_10] ; this
.text:000059CD                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:000059D2                 mov     ecx, [ebp+var_C]
.text:000059D5                 mov     large fs:0, ecx
.text:000059DC                 pop     ecx
.text:000059DD                 add     esp, 10h
.text:000059E0                 cmp     ebp, esp
.text:000059E2                 call    __RTC_CheckEsp
.text:000059E7                 mov     esp, ebp
.text:000059E9                 pop     ebp
.text:000059EA                 retn
.text:000059EA ??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text:000059EA
.text:000059EA ; ---------------------------------------------------------------------------
.text:000059EB                 align 4
.text:000059EB _text           ends
.text:000059EB
.text$x:000059EC ; ===========================================================================
.text$x:000059EC
.text$x:000059EC ; Segment type: Pure code
.text$x:000059EC ; Segment permissions: Read/Execute
.text$x:000059EC _text$x         segment para public 'CODE' use32
.text$x:000059EC                 assume cs:_text$x
.text$x:000059EC                 ;org 59ECh
.text$x:000059EC ; COMDAT (pick associative to section at 5984)
.text$x:000059EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000059EC
.text$x:000059EC ; =============== S U B R O U T I N E =======================================
.text$x:000059EC
.text$x:000059EC
.text$x:000059EC __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000059EC                                         ; DATA XREF: .xdata$x:00005A14o
.text$x:000059EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000059EF                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:000059EF __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000059EF
.text$x:000059F4
.text$x:000059F4 ; =============== S U B R O U T I N E =======================================
.text$x:000059F4
.text$x:000059F4
.text$x:000059F4 __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text$x:000059F4                                         ; DATA XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+5o
.text$x:000059F4
.text$x:000059F4 arg_4           = dword ptr  8
.text$x:000059F4
.text$x:000059F4                 mov     edx, [esp+arg_4]
.text$x:000059F8                 lea     eax, [edx+0Ch]
.text$x:000059FB                 mov     ecx, [edx-8]
.text$x:000059FE                 xor     ecx, eax
.text$x:00005A00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A05                 mov     eax, offset __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text$x:00005A0A                 jmp     ___CxxFrameHandler3
.text$x:00005A0A __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text$x:00005A0A
.text$x:00005A0A ; ---------------------------------------------------------------------------
.text$x:00005A0F                 align 10h
.text$x:00005A0F _text$x         ends
.text$x:00005A0F
.xdata$x:00005A10 ; ===========================================================================
.xdata$x:00005A10
.xdata$x:00005A10 ; Segment type: Pure data
.xdata$x:00005A10 ; Segment permissions: Read
.xdata$x:00005A10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005A10                 assume cs:_xdata$x
.xdata$x:00005A10                 ;org 5A10h
.xdata$x:00005A10 ; COMDAT (pick associative to section at 5984)
.xdata$x:00005A10 __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005A10                                         ; DATA XREF: .xdata$x:00005A20o
.xdata$x:00005A11                 db 0FFh
.xdata$x:00005A12                 db 0FFh
.xdata$x:00005A13                 db 0FFh
.xdata$x:00005A14                 dd offset __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:00005A18 __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005A18                                         ; DATA XREF: __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00005A19                 db    5
.xdata$x:00005A1A                 db  93h ; ô
.xdata$x:00005A1B                 db  19h
.xdata$x:00005A1C                 db    1
.xdata$x:00005A1D                 db    0
.xdata$x:00005A1E                 db    0
.xdata$x:00005A1F                 db    0
.xdata$x:00005A20                 dd offset __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.xdata$x:00005A24                 db    0
.xdata$x:00005A25                 db    0
.xdata$x:00005A26                 db    0
.xdata$x:00005A27                 db    0
.xdata$x:00005A28                 db    0
.xdata$x:00005A29                 db    0
.xdata$x:00005A2A                 db    0
.xdata$x:00005A2B                 db    0
.xdata$x:00005A2C                 db    0
.xdata$x:00005A2D                 db    0
.xdata$x:00005A2E                 db    0
.xdata$x:00005A2F                 db    0
.xdata$x:00005A30                 db    0
.xdata$x:00005A31                 db    0
.xdata$x:00005A32                 db    0
.xdata$x:00005A33                 db    0
.xdata$x:00005A34                 db    0
.xdata$x:00005A35                 db    0
.xdata$x:00005A36                 db    0
.xdata$x:00005A37                 db    0
.xdata$x:00005A38                 db    1
.xdata$x:00005A39                 db    0
.xdata$x:00005A3A                 db    0
.xdata$x:00005A3B                 db    0
.xdata$x:00005A3B _xdata$x        ends
.xdata$x:00005A3B
.text:00005A3C ; ===========================================================================
.text:00005A3C
.text:00005A3C ; Segment type: Pure code
.text:00005A3C ; Segment permissions: Read/Execute
.text:00005A3C _text           segment para public 'CODE' use32
.text:00005A3C                 assume cs:_text
.text:00005A3C                 ;org 5A3Ch
.text:00005A3C ; COMDAT (pick any)
.text:00005A3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A3C
.text:00005A3C ; =============== S U B R O U T I N E =======================================
.text:00005A3C
.text:00005A3C ; Attributes: bp-based frame
.text:00005A3C
.text:00005A3C ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00005A3C                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00005A3C ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00005A3C                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+49p
.text:00005A3C                                         ; __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0+3j
.text:00005A3C
.text:00005A3C var_10          = dword ptr -10h
.text:00005A3C var_C           = dword ptr -0Ch
.text:00005A3C var_4           = dword ptr -4
.text:00005A3C
.text:00005A3C                 push    ebp
.text:00005A3D                 mov     ebp, esp
.text:00005A3F                 push    0FFFFFFFFh
.text:00005A41                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00005A46                 mov     eax, large fs:0
.text:00005A4C                 push    eax
.text:00005A4D                 push    ecx
.text:00005A4E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005A55                 mov     eax, dword ptr ds:___security_cookie
.text:00005A5A                 xor     eax, ebp
.text:00005A5C                 push    eax
.text:00005A5D                 lea     eax, [ebp+var_C]
.text:00005A60                 mov     large fs:0, eax
.text:00005A66                 mov     [ebp+var_10], ecx
.text:00005A69                 mov     [ebp+var_4], 3
.text:00005A70                 mov     ecx, [ebp+var_10]
.text:00005A73                 add     ecx, 34h ; '4'
.text:00005A76                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005A7B                 mov     byte ptr [ebp+var_4], 2
.text:00005A7F                 mov     ecx, [ebp+var_10]
.text:00005A82                 add     ecx, 28h ; '('
.text:00005A85                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005A8A                 mov     byte ptr [ebp+var_4], 1
.text:00005A8E                 mov     ecx, [ebp+var_10]
.text:00005A91                 add     ecx, 18h
.text:00005A94                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005A99                 mov     byte ptr [ebp+var_4], 0
.text:00005A9D                 mov     ecx, [ebp+var_10]
.text:00005AA0                 add     ecx, 0Ch
.text:00005AA3                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:00005AA8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005AAF                 mov     ecx, [ebp+var_10]
.text:00005AB2                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00005AB7                 mov     ecx, [ebp+var_C]
.text:00005ABA                 mov     large fs:0, ecx
.text:00005AC1                 pop     ecx
.text:00005AC2                 add     esp, 10h
.text:00005AC5                 cmp     ebp, esp
.text:00005AC7                 call    __RTC_CheckEsp
.text:00005ACC                 mov     esp, ebp
.text:00005ACE                 pop     ebp
.text:00005ACF                 retn
.text:00005ACF ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00005ACF
.text:00005ACF _text           ends
.text:00005ACF
.text$x:00005AD0 ; ===========================================================================
.text$x:00005AD0
.text$x:00005AD0 ; Segment type: Pure code
.text$x:00005AD0 ; Segment permissions: Read/Execute
.text$x:00005AD0 _text$x         segment para public 'CODE' use32
.text$x:00005AD0                 assume cs:_text$x
.text$x:00005AD0                 ;org 5AD0h
.text$x:00005AD0 ; COMDAT (pick associative to section at 5A3C)
.text$x:00005AD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005AD0
.text$x:00005AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AD0
.text$x:00005AD0
.text$x:00005AD0 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00005AD0                                         ; DATA XREF: .xdata$x:00005B18o
.text$x:00005AD0                 mov     ecx, [ebp-10h]
.text$x:00005AD3                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:00005AD3 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00005AD3
.text$x:00005AD8
.text$x:00005AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AD8
.text$x:00005AD8
.text$x:00005AD8 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00005AD8                                         ; DATA XREF: .xdata$x:00005B20o
.text$x:00005AD8                 mov     ecx, [ebp-10h]
.text$x:00005ADB                 add     ecx, 0Ch
.text$x:00005ADE                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:00005ADE __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00005ADE
.text$x:00005AE3
.text$x:00005AE3 ; =============== S U B R O U T I N E =======================================
.text$x:00005AE3
.text$x:00005AE3
.text$x:00005AE3 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00005AE3                                         ; DATA XREF: .xdata$x:00005B28o
.text$x:00005AE3                 mov     ecx, [ebp-10h]
.text$x:00005AE6                 add     ecx, 18h
.text$x:00005AE9                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00005AE9 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00005AE9
.text$x:00005AEE
.text$x:00005AEE ; =============== S U B R O U T I N E =======================================
.text$x:00005AEE
.text$x:00005AEE
.text$x:00005AEE __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00005AEE                                         ; DATA XREF: .xdata$x:00005B30o
.text$x:00005AEE                 mov     ecx, [ebp-10h]
.text$x:00005AF1                 add     ecx, 28h ; '('
.text$x:00005AF4                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00005AF4 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00005AF4
.text$x:00005AF9
.text$x:00005AF9 ; =============== S U B R O U T I N E =======================================
.text$x:00005AF9
.text$x:00005AF9
.text$x:00005AF9 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:00005AF9                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:00005AF9
.text$x:00005AF9 arg_4           = dword ptr  8
.text$x:00005AF9
.text$x:00005AF9                 mov     edx, [esp+arg_4]
.text$x:00005AFD                 lea     eax, [edx+0Ch]
.text$x:00005B00                 mov     ecx, [edx-8]
.text$x:00005B03                 xor     ecx, eax
.text$x:00005B05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B0A                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:00005B0F                 jmp     ___CxxFrameHandler3
.text$x:00005B0F __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:00005B0F
.text$x:00005B0F _text$x         ends
.text$x:00005B0F
.xdata$x:00005B14 ; ===========================================================================
.xdata$x:00005B14
.xdata$x:00005B14 ; Segment type: Pure data
.xdata$x:00005B14 ; Segment permissions: Read
.xdata$x:00005B14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005B14                 assume cs:_xdata$x
.xdata$x:00005B14                 ;org 5B14h
.xdata$x:00005B14 ; COMDAT (pick associative to section at 5A3C)
.xdata$x:00005B14 __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00005B14                                         ; DATA XREF: .xdata$x:00005B3Co
.xdata$x:00005B15                 db 0FFh
.xdata$x:00005B16                 db 0FFh
.xdata$x:00005B17                 db 0FFh
.xdata$x:00005B18                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:00005B1C                 align 10h
.xdata$x:00005B20                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00005B24                 db    1
.xdata$x:00005B25                 db    0
.xdata$x:00005B26                 db    0
.xdata$x:00005B27                 db    0
.xdata$x:00005B28                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:00005B2C                 db    2
.xdata$x:00005B2D                 db    0
.xdata$x:00005B2E                 db    0
.xdata$x:00005B2F                 db    0
.xdata$x:00005B30                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00005B34 __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00005B34                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00005B35                 db    5
.xdata$x:00005B36                 db  93h ; ô
.xdata$x:00005B37                 db  19h
.xdata$x:00005B38                 db    4
.xdata$x:00005B39                 db    0
.xdata$x:00005B3A                 db    0
.xdata$x:00005B3B                 db    0
.xdata$x:00005B3C                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00005B40                 db    0
.xdata$x:00005B41                 db    0
.xdata$x:00005B42                 db    0
.xdata$x:00005B43                 db    0
.xdata$x:00005B44                 db    0
.xdata$x:00005B45                 db    0
.xdata$x:00005B46                 db    0
.xdata$x:00005B47                 db    0
.xdata$x:00005B48                 db    0
.xdata$x:00005B49                 db    0
.xdata$x:00005B4A                 db    0
.xdata$x:00005B4B                 db    0
.xdata$x:00005B4C                 db    0
.xdata$x:00005B4D                 db    0
.xdata$x:00005B4E                 db    0
.xdata$x:00005B4F                 db    0
.xdata$x:00005B50                 db    0
.xdata$x:00005B51                 db    0
.xdata$x:00005B52                 db    0
.xdata$x:00005B53                 db    0
.xdata$x:00005B54                 db    1
.xdata$x:00005B55                 db    0
.xdata$x:00005B56                 db    0
.xdata$x:00005B57                 db    0
.xdata$x:00005B57 _xdata$x        ends
.xdata$x:00005B57
.text:00005B58 ; ===========================================================================
.text:00005B58
.text:00005B58 ; Segment type: Pure code
.text:00005B58 ; Segment permissions: Read/Execute
.text:00005B58 _text           segment para public 'CODE' use32
.text:00005B58                 assume cs:_text
.text:00005B58                 ;org 5B58h
.text:00005B58 ; COMDAT (pick any)
.text:00005B58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B58
.text:00005B58 ; =============== S U B R O U T I N E =======================================
.text:00005B58
.text:00005B58 ; Attributes: bp-based frame
.text:00005B58
.text:00005B58 ; void __thiscall NArchive::N7z::CInByte2::SkipRem(NArchive::N7z::CInByte2 *__hidden this)
.text:00005B58                 public ?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ
.text:00005B58 ?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ proc near
.text:00005B58                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+82Cp
.text:00005B58
.text:00005B58 var_4           = dword ptr -4
.text:00005B58
.text:00005B58                 push    ebp
.text:00005B59                 mov     ebp, esp
.text:00005B5B                 push    ecx
.text:00005B5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B63                 mov     [ebp+var_4], ecx
.text:00005B66                 mov     eax, [ebp+var_4]
.text:00005B69                 mov     ecx, [ebp+var_4]
.text:00005B6C                 mov     edx, [ecx+4]
.text:00005B6F                 mov     [eax+8], edx
.text:00005B72                 mov     esp, ebp
.text:00005B74                 pop     ebp
.text:00005B75                 retn
.text:00005B75 ?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ endp
.text:00005B75
.text:00005B75 ; ---------------------------------------------------------------------------
.text:00005B76                 align 4
.text:00005B76 _text           ends
.text:00005B76
.text:00005B78 ; ===========================================================================
.text:00005B78
.text:00005B78 ; Segment type: Pure code
.text:00005B78 ; Segment permissions: Read/Execute
.text:00005B78 _text           segment para public 'CODE' use32
.text:00005B78                 assume cs:_text
.text:00005B78                 ;org 5B78h
.text:00005B78 ; COMDAT (pick any)
.text:00005B78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B78
.text:00005B78 ; =============== S U B R O U T I N E =======================================
.text:00005B78
.text:00005B78 ; Attributes: bp-based frame
.text:00005B78
.text:00005B78 ; void __thiscall NArchive::N7z::CInArchive::ReadBytes(NArchive::N7z::CInArchive *this, unsigned __int8 *Dst, unsigned int)
.text:00005B78                 public ?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z
.text:00005B78 ?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z proc near
.text:00005B78                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+3F5p
.text:00005B78
.text:00005B78 var_4           = dword ptr -4
.text:00005B78 Dst             = dword ptr  8
.text:00005B78 arg_4           = dword ptr  0Ch
.text:00005B78
.text:00005B78                 push    ebp
.text:00005B79                 mov     ebp, esp
.text:00005B7B                 push    ecx
.text:00005B7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B83                 mov     [ebp+var_4], ecx
.text:00005B86                 mov     eax, [ebp+arg_4]
.text:00005B89                 push    eax             ; unsigned int
.text:00005B8A                 mov     ecx, [ebp+Dst]
.text:00005B8D                 push    ecx             ; Dst
.text:00005B8E                 mov     edx, [ebp+var_4]
.text:00005B91                 mov     ecx, [edx+38h]  ; this
.text:00005B94                 call    ?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)
.text:00005B99                 add     esp, 4
.text:00005B9C                 cmp     ebp, esp
.text:00005B9E                 call    __RTC_CheckEsp
.text:00005BA3                 mov     esp, ebp
.text:00005BA5                 pop     ebp
.text:00005BA6                 retn    8
.text:00005BA6 ?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z endp
.text:00005BA6
.text:00005BA6 ; ---------------------------------------------------------------------------
.text:00005BA9                 align 4
.text:00005BA9 _text           ends
.text:00005BA9
.text:00005BAC ; ===========================================================================
.text:00005BAC
.text:00005BAC ; Segment type: Pure code
.text:00005BAC ; Segment permissions: Read/Execute
.text:00005BAC _text           segment para public 'CODE' use32
.text:00005BAC                 assume cs:_text
.text:00005BAC                 ;org 5BACh
.text:00005BAC ; COMDAT (pick any)
.text:00005BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BAC
.text:00005BAC ; =============== S U B R O U T I N E =======================================
.text:00005BAC
.text:00005BAC ; Attributes: bp-based frame
.text:00005BAC
.text:00005BAC ; void __thiscall NArchive::N7z::CDbEx::Clear(NArchive::N7z::CDbEx *__hidden this)
.text:00005BAC                 public ?Clear@CDbEx@N7z@NArchive@@QAEXXZ
.text:00005BAC ?Clear@CDbEx@N7z@NArchive@@QAEXXZ proc near
.text:00005BAC                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+47p
.text:00005BAC
.text:00005BAC var_4           = dword ptr -4
.text:00005BAC
.text:00005BAC                 push    ebp
.text:00005BAD                 mov     ebp, esp
.text:00005BAF                 push    ecx
.text:00005BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BB7                 mov     [ebp+var_4], ecx
.text:00005BBA                 mov     eax, [ebp+var_4]
.text:00005BBD                 mov     byte ptr [eax+130h], 0
.text:00005BC4                 mov     ecx, [ebp+var_4]
.text:00005BC7                 mov     byte ptr [ecx+131h], 0
.text:00005BCE                 mov     edx, [ebp+var_4]
.text:00005BD1                 mov     byte ptr [edx+132h], 0
.text:00005BD8                 mov     eax, [ebp+var_4]
.text:00005BDB                 mov     byte ptr [eax+133h], 0
.text:00005BE2                 mov     ecx, [ebp+var_4]
.text:00005BE5                 mov     byte ptr [ecx+134h], 0
.text:00005BEC                 mov     edx, [ebp+var_4]
.text:00005BEF                 mov     byte ptr [edx+136h], 0
.text:00005BF6                 mov     eax, [ebp+var_4]
.text:00005BF9                 mov     byte ptr [eax+135h], 0
.text:00005C00                 mov     ecx, [ebp+var_4] ; this
.text:00005C03                 call    ?Clear@CDatabase@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CDatabase::Clear(void)
.text:00005C08                 mov     ecx, [ebp+var_4]
.text:00005C0B                 add     ecx, 0E0h ; 'a' ; this
.text:00005C11                 call    ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInArchiveInfo::Clear(void)
.text:00005C16                 mov     ecx, [ebp+var_4]
.text:00005C19                 add     ecx, 118h
.text:00005C1F                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005C24                 mov     ecx, [ebp+var_4]
.text:00005C27                 add     ecx, 11Ch
.text:00005C2D                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005C32                 mov     ecx, [ebp+var_4]
.text:00005C35                 mov     dword ptr [ecx+120h], 0
.text:00005C3F                 mov     dword ptr [ecx+124h], 0
.text:00005C49                 mov     edx, [ebp+var_4]
.text:00005C4C                 mov     dword ptr [edx+128h], 0
.text:00005C56                 mov     dword ptr [edx+12Ch], 0
.text:00005C60                 add     esp, 4
.text:00005C63                 cmp     ebp, esp
.text:00005C65                 call    __RTC_CheckEsp
.text:00005C6A                 mov     esp, ebp
.text:00005C6C                 pop     ebp
.text:00005C6D                 retn
.text:00005C6D ?Clear@CDbEx@N7z@NArchive@@QAEXXZ endp
.text:00005C6D
.text:00005C6D ; ---------------------------------------------------------------------------
.text:00005C6E                 align 10h
.text:00005C6E _text           ends
.text:00005C6E
.text:00005C70 ; ===========================================================================
.text:00005C70
.text:00005C70 ; Segment type: Pure code
.text:00005C70 ; Segment permissions: Read/Execute
.text:00005C70 _text           segment para public 'CODE' use32
.text:00005C70                 assume cs:_text
.text:00005C70                 ;org 5C70h
.text:00005C70 ; COMDAT (pick any)
.text:00005C70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C70
.text:00005C70 ; =============== S U B R O U T I N E =======================================
.text:00005C70
.text:00005C70 ; Attributes: bp-based frame
.text:00005C70
.text:00005C70 ; void __thiscall NArchive::N7z::CDatabase::Clear(NArchive::N7z::CDatabase *__hidden this)
.text:00005C70                 public ?Clear@CDatabase@N7z@NArchive@@QAEXXZ
.text:00005C70 ?Clear@CDatabase@N7z@NArchive@@QAEXXZ proc near
.text:00005C70                                         ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+57p
.text:00005C70
.text:00005C70 var_4           = dword ptr -4
.text:00005C70
.text:00005C70                 push    ebp
.text:00005C71                 mov     ebp, esp
.text:00005C73                 push    ecx
.text:00005C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C7B                 mov     [ebp+var_4], ecx
.text:00005C7E                 mov     ecx, [ebp+var_4] ; this
.text:00005C81                 call    ?Clear@CFolders@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFolders::Clear(void)
.text:00005C86                 mov     ecx, [ebp+var_4]
.text:00005C89                 add     ecx, 0D0h ; '-'
.text:00005C8F                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00005C94                 mov     ecx, [ebp+var_4]
.text:00005C97                 add     ecx, 0D8h ; '+'
.text:00005C9D                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005CA2                 mov     ecx, [ebp+var_4]
.text:00005CA5                 add     ecx, 58h ; 'X'
.text:00005CA8                 call    ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear(void)
.text:00005CAD                 mov     ecx, [ebp+var_4]
.text:00005CB0                 add     ecx, 64h ; 'd'  ; this
.text:00005CB3                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00005CB8                 mov     ecx, [ebp+var_4]
.text:00005CBB                 add     ecx, 7Ch ; '|'  ; this
.text:00005CBE                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00005CC3                 mov     ecx, [ebp+var_4]
.text:00005CC6                 add     ecx, 94h ; 'ö'  ; this
.text:00005CCC                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00005CD1                 mov     ecx, [ebp+var_4]
.text:00005CD4                 add     ecx, 0ACh ; '¼' ; this
.text:00005CDA                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00005CDF                 mov     ecx, [ebp+var_4]
.text:00005CE2                 add     ecx, 0C4h ; '-'
.text:00005CE8                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00005CED                 add     esp, 4
.text:00005CF0                 cmp     ebp, esp
.text:00005CF2                 call    __RTC_CheckEsp
.text:00005CF7                 mov     esp, ebp
.text:00005CF9                 pop     ebp
.text:00005CFA                 retn
.text:00005CFA ?Clear@CDatabase@N7z@NArchive@@QAEXXZ endp
.text:00005CFA
.text:00005CFA ; ---------------------------------------------------------------------------
.text:00005CFB                 align 4
.text:00005CFB _text           ends
.text:00005CFB
.text:00005CFC ; ===========================================================================
.text:00005CFC
.text:00005CFC ; Segment type: Pure code
.text:00005CFC ; Segment permissions: Read/Execute
.text:00005CFC _text           segment para public 'CODE' use32
.text:00005CFC                 assume cs:_text
.text:00005CFC                 ;org 5CFCh
.text:00005CFC ; COMDAT (pick any)
.text:00005CFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CFC
.text:00005CFC ; =============== S U B R O U T I N E =======================================
.text:00005CFC
.text:00005CFC ; Attributes: bp-based frame
.text:00005CFC
.text:00005CFC ; void __thiscall NArchive::N7z::CUInt64DefVector::Clear(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00005CFC                 public ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ
.text:00005CFC ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ proc near
.text:00005CFC                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+43p
.text:00005CFC                                         ; NArchive::N7z::CDatabase::Clear(void)+4Ep ...
.text:00005CFC
.text:00005CFC var_4           = dword ptr -4
.text:00005CFC
.text:00005CFC                 push    ebp
.text:00005CFD                 mov     ebp, esp
.text:00005CFF                 push    ecx
.text:00005D00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D07                 mov     [ebp+var_4], ecx
.text:00005D0A                 mov     ecx, [ebp+var_4]
.text:00005D0D                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00005D12                 mov     ecx, [ebp+var_4]
.text:00005D15                 add     ecx, 0Ch
.text:00005D18                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00005D1D                 add     esp, 4
.text:00005D20                 cmp     ebp, esp
.text:00005D22                 call    __RTC_CheckEsp
.text:00005D27                 mov     esp, ebp
.text:00005D29                 pop     ebp
.text:00005D2A                 retn
.text:00005D2A ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ endp
.text:00005D2A
.text:00005D2A ; ---------------------------------------------------------------------------
.text:00005D2B                 align 4
.text:00005D2B _text           ends
.text:00005D2B
.text:00005D2C ; ===========================================================================
.text:00005D2C
.text:00005D2C ; Segment type: Pure code
.text:00005D2C ; Segment permissions: Read/Execute
.text:00005D2C _text           segment para public 'CODE' use32
.text:00005D2C                 assume cs:_text
.text:00005D2C                 ;org 5D2Ch
.text:00005D2C ; COMDAT (pick any)
.text:00005D2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D2C
.text:00005D2C ; =============== S U B R O U T I N E =======================================
.text:00005D2C
.text:00005D2C ; Attributes: bp-based frame
.text:00005D2C
.text:00005D2C ; void __thiscall NArchive::N7z::CFolders::Clear(NArchive::N7z::CFolders *__hidden this)
.text:00005D2C                 public ?Clear@CFolders@N7z@NArchive@@QAEXXZ
.text:00005D2C ?Clear@CFolders@N7z@NArchive@@QAEXXZ proc near
.text:00005D2C                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+11p
.text:00005D2C
.text:00005D2C var_4           = dword ptr -4
.text:00005D2C
.text:00005D2C                 push    ebp
.text:00005D2D                 mov     ebp, esp
.text:00005D2F                 push    ecx
.text:00005D30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D37                 mov     [ebp+var_4], ecx
.text:00005D3A                 mov     eax, [ebp+var_4]
.text:00005D3D                 mov     dword ptr [eax], 0
.text:00005D43                 mov     ecx, [ebp+var_4]
.text:00005D46                 add     ecx, 8
.text:00005D49                 call    ?Free@?$CObjArray@_K@@QAEXXZ ; CObjArray<unsigned __int64>::Free(void)
.text:00005D4E                 mov     ecx, [ebp+var_4]
.text:00005D51                 mov     dword ptr [ecx+4], 0
.text:00005D58                 mov     ecx, [ebp+var_4]
.text:00005D5B                 add     ecx, 0Ch        ; this
.text:00005D5E                 call    ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::Clear(void)
.text:00005D63                 mov     ecx, [ebp+var_4]
.text:00005D66                 add     ecx, 24h ; '$'
.text:00005D69                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005D6E                 mov     ecx, [ebp+var_4]
.text:00005D71                 add     ecx, 28h ; '('
.text:00005D74                 call    ?Free@?$CObjArray@_K@@QAEXXZ ; CObjArray<unsigned __int64>::Free(void)
.text:00005D79                 mov     ecx, [ebp+var_4]
.text:00005D7C                 add     ecx, 2Ch ; ','
.text:00005D7F                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005D84                 mov     ecx, [ebp+var_4]
.text:00005D87                 add     ecx, 30h ; '0'
.text:00005D8A                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005D8F                 mov     ecx, [ebp+var_4]
.text:00005D92                 add     ecx, 34h ; '4'
.text:00005D95                 call    ?Free@?$CObjArray@E@@QAEXXZ ; CObjArray<uchar>::Free(void)
.text:00005D9A                 mov     ecx, [ebp+var_4]
.text:00005D9D                 add     ecx, 38h ; '8'
.text:00005DA0                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:00005DA5                 mov     ecx, [ebp+var_4]
.text:00005DA8                 add     ecx, 3Ch ; '<'
.text:00005DAB                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00005DB0                 add     esp, 4
.text:00005DB3                 cmp     ebp, esp
.text:00005DB5                 call    __RTC_CheckEsp
.text:00005DBA                 mov     esp, ebp
.text:00005DBC                 pop     ebp
.text:00005DBD                 retn
.text:00005DBD ?Clear@CFolders@N7z@NArchive@@QAEXXZ endp
.text:00005DBD
.text:00005DBD ; ---------------------------------------------------------------------------
.text:00005DBE                 align 10h
.text:00005DBE _text           ends
.text:00005DBE
.text:00005DC0 ; ===========================================================================
.text:00005DC0
.text:00005DC0 ; Segment type: Pure code
.text:00005DC0 ; Segment permissions: Read/Execute
.text:00005DC0 _text           segment para public 'CODE' use32
.text:00005DC0                 assume cs:_text
.text:00005DC0                 ;org 5DC0h
.text:00005DC0 ; COMDAT (pick any)
.text:00005DC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DC0
.text:00005DC0 ; =============== S U B R O U T I N E =======================================
.text:00005DC0
.text:00005DC0 ; Attributes: bp-based frame
.text:00005DC0
.text:00005DC0 ; void __thiscall NArchive::N7z::CUInt32DefVector::Clear(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00005DC0                 public ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ
.text:00005DC0 ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ proc near
.text:00005DC0                                         ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+32p
.text:00005DC0
.text:00005DC0 var_4           = dword ptr -4
.text:00005DC0
.text:00005DC0                 push    ebp
.text:00005DC1                 mov     ebp, esp
.text:00005DC3                 push    ecx
.text:00005DC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DCB                 mov     [ebp+var_4], ecx
.text:00005DCE                 mov     ecx, [ebp+var_4]
.text:00005DD1                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00005DD6                 mov     ecx, [ebp+var_4]
.text:00005DD9                 add     ecx, 0Ch
.text:00005DDC                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:00005DE1                 add     esp, 4
.text:00005DE4                 cmp     ebp, esp
.text:00005DE6                 call    __RTC_CheckEsp
.text:00005DEB                 mov     esp, ebp
.text:00005DED                 pop     ebp
.text:00005DEE                 retn
.text:00005DEE ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ endp
.text:00005DEE
.text:00005DEE ; ---------------------------------------------------------------------------
.text:00005DEF                 align 10h
.text:00005DEF _text           ends
.text:00005DEF
.text:00005DF0 ; ===========================================================================
.text:00005DF0
.text:00005DF0 ; Segment type: Pure code
.text:00005DF0 ; Segment permissions: Read/Execute
.text:00005DF0 _text           segment para public 'CODE' use32
.text:00005DF0                 assume cs:_text
.text:00005DF0                 ;org 5DF0h
.text:00005DF0 ; COMDAT (pick any)
.text:00005DF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DF0
.text:00005DF0 ; =============== S U B R O U T I N E =======================================
.text:00005DF0
.text:00005DF0 ; Attributes: bp-based frame
.text:00005DF0
.text:00005DF0 ; void __thiscall NArchive::N7z::CInArchiveInfo::Clear(NArchive::N7z::CInArchiveInfo *__hidden this)
.text:00005DF0                 public ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ
.text:00005DF0 ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ proc near
.text:00005DF0                                         ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+65p
.text:00005DF0
.text:00005DF0 var_4           = dword ptr -4
.text:00005DF0
.text:00005DF0                 push    ebp
.text:00005DF1                 mov     ebp, esp
.text:00005DF3                 push    ecx
.text:00005DF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DFB                 mov     [ebp+var_4], ecx
.text:00005DFE                 mov     eax, [ebp+var_4]
.text:00005E01                 mov     dword ptr [eax+8], 0
.text:00005E08                 mov     dword ptr [eax+0Ch], 0
.text:00005E0F                 mov     ecx, [ebp+var_4]
.text:00005E12                 mov     dword ptr [ecx+10h], 0
.text:00005E19                 mov     dword ptr [ecx+14h], 0
.text:00005E20                 mov     edx, [ebp+var_4]
.text:00005E23                 mov     dword ptr [edx+18h], 0
.text:00005E2A                 mov     dword ptr [edx+1Ch], 0
.text:00005E31                 mov     eax, [ebp+var_4]
.text:00005E34                 mov     dword ptr [eax+20h], 0
.text:00005E3B                 mov     dword ptr [eax+24h], 0
.text:00005E42                 mov     ecx, [ebp+var_4]
.text:00005E45                 add     ecx, 28h ; '('
.text:00005E48                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00005E4D                 add     esp, 4
.text:00005E50                 cmp     ebp, esp
.text:00005E52                 call    __RTC_CheckEsp
.text:00005E57                 mov     esp, ebp
.text:00005E59                 pop     ebp
.text:00005E5A                 retn
.text:00005E5A ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ endp
.text:00005E5A
.text:00005E5A ; ---------------------------------------------------------------------------
.text:00005E5B                 align 4
.text:00005E5B _text           ends
.text:00005E5B
.text:00005E5C ; ===========================================================================
.text:00005E5C
.text:00005E5C ; Segment type: Pure code
.text:00005E5C ; Segment permissions: Read/Execute
.text:00005E5C _text           segment para public 'CODE' use32
.text:00005E5C                 assume cs:_text
.text:00005E5C                 ;org 5E5Ch
.text:00005E5C ; COMDAT (pick any)
.text:00005E5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E5C
.text:00005E5C ; =============== S U B R O U T I N E =======================================
.text:00005E5C
.text:00005E5C ; Attributes: bp-based frame
.text:00005E5C
.text:00005E5C ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00005E5C                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00005E5C ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+199p
.text:00005E5C                                         ; NArchive::N7z::CDatabase::Clear(void)+1Fp ...
.text:00005E5C
.text:00005E5C var_8           = dword ptr -8
.text:00005E5C var_4           = dword ptr -4
.text:00005E5C
.text:00005E5C                 push    ebp
.text:00005E5D                 mov     ebp, esp
.text:00005E5F                 sub     esp, 8
.text:00005E62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005E69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E70                 mov     [ebp+var_4], ecx
.text:00005E73                 mov     eax, [ebp+var_4]
.text:00005E76                 cmp     dword ptr [eax], 0
.text:00005E79                 jz      short loc_5E98
.text:00005E7B                 mov     ecx, [ebp+var_4]
.text:00005E7E                 mov     edx, [ecx]
.text:00005E80                 mov     [ebp+var_8], edx
.text:00005E83                 mov     eax, [ebp+var_8]
.text:00005E86                 push    eax             ; void *
.text:00005E87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005E8C                 add     esp, 4
.text:00005E8F                 mov     ecx, [ebp+var_4]
.text:00005E92                 mov     dword ptr [ecx], 0
.text:00005E98
.text:00005E98 loc_5E98:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00005E98                 mov     edx, [ebp+var_4]
.text:00005E9B                 mov     dword ptr [edx+4], 0
.text:00005EA2                 add     esp, 8
.text:00005EA5                 cmp     ebp, esp
.text:00005EA7                 call    __RTC_CheckEsp
.text:00005EAC                 mov     esp, ebp
.text:00005EAE                 pop     ebp
.text:00005EAF                 retn
.text:00005EAF ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00005EAF
.text:00005EAF _text           ends
.text:00005EAF
.text:00005EB0 ; ===========================================================================
.text:00005EB0
.text:00005EB0 ; Segment type: Pure code
.text:00005EB0 ; Segment permissions: Read/Execute
.text:00005EB0 _text           segment para public 'CODE' use32
.text:00005EB0                 assume cs:_text
.text:00005EB0                 ;org 5EB0h
.text:00005EB0 ; COMDAT (pick any)
.text:00005EB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EB0
.text:00005EB0 ; =============== S U B R O U T I N E =======================================
.text:00005EB0
.text:00005EB0 ; Attributes: bp-based frame
.text:00005EB0
.text:00005EB0 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00005EB0                 public ??0?$CBuffer@E@@QAE@XZ
.text:00005EB0 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+AEp
.text:00005EB0                                         ; CObjectVector<CBuffer<uchar>>::AddNew(void)+59p ...
.text:00005EB0
.text:00005EB0 var_4           = dword ptr -4
.text:00005EB0
.text:00005EB0                 push    ebp
.text:00005EB1                 mov     ebp, esp
.text:00005EB3                 push    ecx
.text:00005EB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EBB                 mov     [ebp+var_4], ecx
.text:00005EBE                 mov     eax, [ebp+var_4]
.text:00005EC1                 mov     dword ptr [eax], 0
.text:00005EC7                 mov     ecx, [ebp+var_4]
.text:00005ECA                 mov     dword ptr [ecx+4], 0
.text:00005ED1                 mov     eax, [ebp+var_4]
.text:00005ED4                 mov     esp, ebp
.text:00005ED6                 pop     ebp
.text:00005ED7                 retn
.text:00005ED7 ??0?$CBuffer@E@@QAE@XZ endp
.text:00005ED7
.text:00005ED7 _text           ends
.text:00005ED7
.text:00005ED8 ; ===========================================================================
.text:00005ED8
.text:00005ED8 ; Segment type: Pure code
.text:00005ED8 ; Segment permissions: Read/Execute
.text:00005ED8 _text           segment para public 'CODE' use32
.text:00005ED8                 assume cs:_text
.text:00005ED8                 ;org 5ED8h
.text:00005ED8 ; COMDAT (pick any)
.text:00005ED8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005ED8
.text:00005ED8 ; =============== S U B R O U T I N E =======================================
.text:00005ED8
.text:00005ED8 ; Attributes: bp-based frame
.text:00005ED8
.text:00005ED8 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(unsigned int)
.text:00005ED8                 public ??0?$CBuffer@E@@QAE@I@Z
.text:00005ED8 ??0?$CBuffer@E@@QAE@I@Z proc near       ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5AEp
.text:00005ED8
.text:00005ED8 var_8           = dword ptr -8
.text:00005ED8 var_4           = dword ptr -4
.text:00005ED8 arg_0           = dword ptr  8
.text:00005ED8
.text:00005ED8                 push    ebp
.text:00005ED9                 mov     ebp, esp
.text:00005EDB                 sub     esp, 8
.text:00005EDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005EE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EEC                 mov     [ebp+var_4], ecx
.text:00005EEF                 mov     eax, [ebp+var_4]
.text:00005EF2                 mov     dword ptr [eax], 0
.text:00005EF8                 mov     ecx, [ebp+var_4]
.text:00005EFB                 mov     dword ptr [ecx+4], 0
.text:00005F02                 mov     edx, [ebp+arg_0]
.text:00005F05                 push    edx             ; unsigned int
.text:00005F06                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005F0B                 add     esp, 4
.text:00005F0E                 mov     [ebp+var_8], eax
.text:00005F11                 mov     eax, [ebp+var_4]
.text:00005F14                 mov     ecx, [ebp+var_8]
.text:00005F17                 mov     [eax], ecx
.text:00005F19                 mov     edx, [ebp+var_4]
.text:00005F1C                 mov     eax, [ebp+arg_0]
.text:00005F1F                 mov     [edx+4], eax
.text:00005F22                 mov     eax, [ebp+var_4]
.text:00005F25                 add     esp, 8
.text:00005F28                 cmp     ebp, esp
.text:00005F2A                 call    __RTC_CheckEsp
.text:00005F2F                 mov     esp, ebp
.text:00005F31                 pop     ebp
.text:00005F32                 retn    4
.text:00005F32 ??0?$CBuffer@E@@QAE@I@Z endp
.text:00005F32
.text:00005F32 ; ---------------------------------------------------------------------------
.text:00005F35                 align 4
.text:00005F35 _text           ends
.text:00005F35
.text:00005F38 ; ===========================================================================
.text:00005F38
.text:00005F38 ; Segment type: Pure code
.text:00005F38 ; Segment permissions: Read/Execute
.text:00005F38 _text           segment para public 'CODE' use32
.text:00005F38                 assume cs:_text
.text:00005F38                 ;org 5F38h
.text:00005F38 ; COMDAT (pick any)
.text:00005F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F38
.text:00005F38 ; =============== S U B R O U T I N E =======================================
.text:00005F38
.text:00005F38 ; Attributes: bp-based frame
.text:00005F38
.text:00005F38 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00005F38                 public ??1?$CBuffer@E@@QAE@XZ
.text:00005F38 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+603p
.text:00005F38                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+74Ep ...
.text:00005F38
.text:00005F38 var_8           = dword ptr -8
.text:00005F38 var_4           = dword ptr -4
.text:00005F38
.text:00005F38                 push    ebp
.text:00005F39                 mov     ebp, esp
.text:00005F3B                 sub     esp, 8
.text:00005F3E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005F45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F4C                 mov     [ebp+var_4], ecx
.text:00005F4F                 mov     eax, [ebp+var_4]
.text:00005F52                 mov     ecx, [eax]
.text:00005F54                 mov     [ebp+var_8], ecx
.text:00005F57                 mov     edx, [ebp+var_8]
.text:00005F5A                 push    edx             ; void *
.text:00005F5B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005F60                 add     esp, 4
.text:00005F63                 add     esp, 8
.text:00005F66                 cmp     ebp, esp
.text:00005F68                 call    __RTC_CheckEsp
.text:00005F6D                 mov     esp, ebp
.text:00005F6F                 pop     ebp
.text:00005F70                 retn
.text:00005F70 ??1?$CBuffer@E@@QAE@XZ endp
.text:00005F70
.text:00005F70 ; ---------------------------------------------------------------------------
.text:00005F71                 align 4
.text:00005F71 _text           ends
.text:00005F71
.text:00005F74 ; ===========================================================================
.text:00005F74
.text:00005F74 ; Segment type: Pure code
.text:00005F74 ; Segment permissions: Read/Execute
.text:00005F74 _text           segment para public 'CODE' use32
.text:00005F74                 assume cs:_text
.text:00005F74                 ;org 5F74h
.text:00005F74 ; COMDAT (pick any)
.text:00005F74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F74
.text:00005F74 ; =============== S U B R O U T I N E =======================================
.text:00005F74
.text:00005F74 ; Attributes: bp-based frame
.text:00005F74
.text:00005F74 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00005F74                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00005F74 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+183p
.text:00005F74                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1BEp ...
.text:00005F74
.text:00005F74 var_4           = dword ptr -4
.text:00005F74
.text:00005F74                 push    ebp
.text:00005F75                 mov     ebp, esp
.text:00005F77                 push    ecx
.text:00005F78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F7F                 mov     [ebp+var_4], ecx
.text:00005F82                 mov     eax, [ebp+var_4]
.text:00005F85                 mov     eax, [eax]
.text:00005F87                 mov     esp, ebp
.text:00005F89                 pop     ebp
.text:00005F8A                 retn
.text:00005F8A ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00005F8A
.text:00005F8A ; ---------------------------------------------------------------------------
.text:00005F8B                 align 4
.text:00005F8B _text           ends
.text:00005F8B
.text:00005F8C ; ===========================================================================
.text:00005F8C
.text:00005F8C ; Segment type: Pure code
.text:00005F8C ; Segment permissions: Read/Execute
.text:00005F8C _text           segment para public 'CODE' use32
.text:00005F8C                 assume cs:_text
.text:00005F8C                 ;org 5F8Ch
.text:00005F8C ; COMDAT (pick any)
.text:00005F8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F8C
.text:00005F8C ; =============== S U B R O U T I N E =======================================
.text:00005F8C
.text:00005F8C ; Attributes: bp-based frame
.text:00005F8C
.text:00005F8C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00005F8C                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00005F8C ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)+1Cp
.text:00005F8C                                         ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+56p ...
.text:00005F8C
.text:00005F8C var_4           = dword ptr -4
.text:00005F8C
.text:00005F8C                 push    ebp
.text:00005F8D                 mov     ebp, esp
.text:00005F8F                 push    ecx
.text:00005F90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F97                 mov     [ebp+var_4], ecx
.text:00005F9A                 mov     eax, [ebp+var_4]
.text:00005F9D                 mov     eax, [eax]
.text:00005F9F                 mov     esp, ebp
.text:00005FA1                 pop     ebp
.text:00005FA2                 retn
.text:00005FA2 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00005FA2
.text:00005FA2 ; ---------------------------------------------------------------------------
.text:00005FA3                 align 4
.text:00005FA3 _text           ends
.text:00005FA3
.text:00005FA4 ; ===========================================================================
.text:00005FA4
.text:00005FA4 ; Segment type: Pure code
.text:00005FA4 ; Segment permissions: Read/Execute
.text:00005FA4 _text           segment para public 'CODE' use32
.text:00005FA4                 assume cs:_text
.text:00005FA4                 ;org 5FA4h
.text:00005FA4 ; COMDAT (pick any)
.text:00005FA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FA4
.text:00005FA4 ; =============== S U B R O U T I N E =======================================
.text:00005FA4
.text:00005FA4 ; Attributes: bp-based frame
.text:00005FA4
.text:00005FA4 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00005FA4                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00005FA4 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CBuffer<uchar> const &)+13p
.text:00005FA4
.text:00005FA4 var_4           = dword ptr -4
.text:00005FA4
.text:00005FA4                 push    ebp
.text:00005FA5                 mov     ebp, esp
.text:00005FA7                 push    ecx
.text:00005FA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FAF                 mov     [ebp+var_4], ecx
.text:00005FB2                 mov     eax, [ebp+var_4]
.text:00005FB5                 mov     eax, [eax+4]
.text:00005FB8                 mov     esp, ebp
.text:00005FBA                 pop     ebp
.text:00005FBB                 retn
.text:00005FBB ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00005FBB
.text:00005FBB _text           ends
.text:00005FBB
.text:00005FBC ; ===========================================================================
.text:00005FBC
.text:00005FBC ; Segment type: Pure code
.text:00005FBC ; Segment permissions: Read/Execute
.text:00005FBC _text           segment para public 'CODE' use32
.text:00005FBC                 assume cs:_text
.text:00005FBC                 ;org 5FBCh
.text:00005FBC ; COMDAT (pick any)
.text:00005FBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FBC
.text:00005FBC ; =============== S U B R O U T I N E =======================================
.text:00005FBC
.text:00005FBC ; Attributes: bp-based frame
.text:00005FBC
.text:00005FBC ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00005FBC                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00005FBC ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+174p
.text:00005FBC                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+140p ...
.text:00005FBC
.text:00005FBC var_8           = dword ptr -8
.text:00005FBC var_4           = dword ptr -4
.text:00005FBC arg_0           = dword ptr  8
.text:00005FBC
.text:00005FBC                 push    ebp
.text:00005FBD                 mov     ebp, esp
.text:00005FBF                 sub     esp, 8
.text:00005FC2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005FC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FD0                 mov     [ebp+var_4], ecx
.text:00005FD3                 mov     eax, [ebp+var_4]
.text:00005FD6                 mov     ecx, [ebp+arg_0]
.text:00005FD9                 cmp     ecx, [eax+4]
.text:00005FDC                 jz      short loc_600C
.text:00005FDE                 mov     ecx, [ebp+var_4]
.text:00005FE1                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00005FE6                 cmp     [ebp+arg_0], 0
.text:00005FEA                 jz      short loc_600C
.text:00005FEC                 mov     edx, [ebp+arg_0]
.text:00005FEF                 push    edx             ; unsigned int
.text:00005FF0                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005FF5                 add     esp, 4
.text:00005FF8                 mov     [ebp+var_8], eax
.text:00005FFB                 mov     eax, [ebp+var_4]
.text:00005FFE                 mov     ecx, [ebp+var_8]
.text:00006001                 mov     [eax], ecx
.text:00006003                 mov     edx, [ebp+var_4]
.text:00006006                 mov     eax, [ebp+arg_0]
.text:00006009                 mov     [edx+4], eax
.text:0000600C
.text:0000600C loc_600C:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:0000600C                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:0000600C                 add     esp, 8
.text:0000600F                 cmp     ebp, esp
.text:00006011                 call    __RTC_CheckEsp
.text:00006016                 mov     esp, ebp
.text:00006018                 pop     ebp
.text:00006019                 retn    4
.text:00006019 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00006019
.text:00006019 _text           ends
.text:00006019
.text:0000601C ; ===========================================================================
.text:0000601C
.text:0000601C ; Segment type: Pure code
.text:0000601C ; Segment permissions: Read/Execute
.text:0000601C _text           segment para public 'CODE' use32
.text:0000601C                 assume cs:_text
.text:0000601C                 ;org 601Ch
.text:0000601C ; COMDAT (pick any)
.text:0000601C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000601C
.text:0000601C ; =============== S U B R O U T I N E =======================================
.text:0000601C
.text:0000601C ; Attributes: bp-based frame
.text:0000601C
.text:0000601C ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:0000601C                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:0000601C ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:0000601C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+66Ep
.text:0000601C
.text:0000601C var_4           = dword ptr -4
.text:0000601C Src             = dword ptr  8
.text:0000601C Size            = dword ptr  0Ch
.text:0000601C
.text:0000601C                 push    ebp
.text:0000601D                 mov     ebp, esp
.text:0000601F                 push    ecx
.text:00006020                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006027                 mov     [ebp+var_4], ecx
.text:0000602A                 mov     eax, [ebp+Size]
.text:0000602D                 push    eax
.text:0000602E                 mov     ecx, [ebp+var_4]
.text:00006031                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00006036                 cmp     [ebp+Size], 0
.text:0000603A                 jz      short loc_6052
.text:0000603C                 mov     ecx, [ebp+Size]
.text:0000603F                 push    ecx             ; Size
.text:00006040                 mov     edx, [ebp+Src]
.text:00006043                 push    edx             ; Src
.text:00006044                 mov     eax, [ebp+var_4]
.text:00006047                 mov     ecx, [eax]
.text:00006049                 push    ecx             ; Dst
.text:0000604A                 call    _memcpy
.text:0000604F                 add     esp, 0Ch
.text:00006052
.text:00006052 loc_6052:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:00006052                 add     esp, 4
.text:00006055                 cmp     ebp, esp
.text:00006057                 call    __RTC_CheckEsp
.text:0000605C                 mov     esp, ebp
.text:0000605E                 pop     ebp
.text:0000605F                 retn    8
.text:0000605F ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:0000605F
.text:0000605F ; ---------------------------------------------------------------------------
.text:00006062                 align 4
.text:00006062 _text           ends
.text:00006062
.text:00006064 ; ===========================================================================
.text:00006064
.text:00006064 ; Segment type: Pure code
.text:00006064 ; Segment permissions: Read/Execute
.text:00006064 _text           segment para public 'CODE' use32
.text:00006064                 assume cs:_text
.text:00006064                 ;org 6064h
.text:00006064 ; COMDAT (pick any)
.text:00006064                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006064
.text:00006064 ; =============== S U B R O U T I N E =======================================
.text:00006064
.text:00006064 ; Attributes: bp-based frame
.text:00006064
.text:00006064 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00006064                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00006064 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00006064                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+3Ap
.text:00006064
.text:00006064 var_4           = dword ptr -4
.text:00006064
.text:00006064                 push    ebp
.text:00006065                 mov     ebp, esp
.text:00006067                 push    ecx
.text:00006068                 push    esi
.text:00006069                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006070                 mov     [ebp+var_4], ecx
.text:00006073                 mov     eax, [ebp+var_4]
.text:00006076                 cmp     dword ptr [eax], 0
.text:00006079                 jz      short loc_6096
.text:0000607B                 mov     ecx, [ebp+var_4]
.text:0000607E                 mov     edx, [ecx]
.text:00006080                 mov     eax, [ebp+var_4]
.text:00006083                 mov     ecx, [eax]
.text:00006085                 mov     edx, [edx]
.text:00006087                 mov     esi, esp
.text:00006089                 push    ecx
.text:0000608A                 mov     eax, [edx+8]
.text:0000608D                 call    eax
.text:0000608F                 cmp     esi, esp
.text:00006091                 call    __RTC_CheckEsp
.text:00006096
.text:00006096 loc_6096:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:00006096                 pop     esi
.text:00006097                 add     esp, 4
.text:0000609A                 cmp     ebp, esp
.text:0000609C                 call    __RTC_CheckEsp
.text:000060A1                 mov     esp, ebp
.text:000060A3                 pop     ebp
.text:000060A4                 retn
.text:000060A4 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:000060A4
.text:000060A4 ; ---------------------------------------------------------------------------
.text:000060A5                 align 4
.text:000060A5 _text           ends
.text:000060A5
.text:000060A8 ; ===========================================================================
.text:000060A8
.text:000060A8 ; Segment type: Pure code
.text:000060A8 ; Segment permissions: Read/Execute
.text:000060A8 _text           segment para public 'CODE' use32
.text:000060A8                 assume cs:_text
.text:000060A8                 ;org 60A8h
.text:000060A8 ; COMDAT (pick any)
.text:000060A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060A8
.text:000060A8 ; =============== S U B R O U T I N E =======================================
.text:000060A8
.text:000060A8 ; Attributes: bp-based frame
.text:000060A8
.text:000060A8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000060A8                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000060A8 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000060A8                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1A8p
.text:000060A8
.text:000060A8 var_4           = dword ptr -4
.text:000060A8 arg_0           = dword ptr  8
.text:000060A8
.text:000060A8                 push    ebp
.text:000060A9                 mov     ebp, esp
.text:000060AB                 push    ecx
.text:000060AC                 push    esi
.text:000060AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060B4                 mov     [ebp+var_4], ecx
.text:000060B7                 mov     eax, [ebp+var_4]
.text:000060BA                 mov     ecx, [ebp+arg_0]
.text:000060BD                 mov     [eax], ecx
.text:000060BF                 cmp     [ebp+arg_0], 0
.text:000060C3                 jz      short loc_60DC
.text:000060C5                 mov     edx, [ebp+arg_0]
.text:000060C8                 mov     eax, [edx]
.text:000060CA                 mov     esi, esp
.text:000060CC                 mov     ecx, [ebp+arg_0]
.text:000060CF                 push    ecx
.text:000060D0                 mov     edx, [eax+4]
.text:000060D3                 call    edx
.text:000060D5                 cmp     esi, esp
.text:000060D7                 call    __RTC_CheckEsp
.text:000060DC
.text:000060DC loc_60DC:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000060DC                 mov     eax, [ebp+var_4]
.text:000060DF                 pop     esi
.text:000060E0                 add     esp, 4
.text:000060E3                 cmp     ebp, esp
.text:000060E5                 call    __RTC_CheckEsp
.text:000060EA                 mov     esp, ebp
.text:000060EC                 pop     ebp
.text:000060ED                 retn    4
.text:000060ED ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000060ED
.text:000060ED _text           ends
.text:000060ED
.text:000060F0 ; ===========================================================================
.text:000060F0
.text:000060F0 ; Segment type: Pure code
.text:000060F0 ; Segment permissions: Read/Execute
.text:000060F0 _text           segment para public 'CODE' use32
.text:000060F0                 assume cs:_text
.text:000060F0                 ;org 60F0h
.text:000060F0 ; COMDAT (pick any)
.text:000060F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060F0
.text:000060F0 ; =============== S U B R O U T I N E =======================================
.text:000060F0
.text:000060F0 ; Attributes: bp-based frame
.text:000060F0
.text:000060F0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000060F0                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000060F0 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000060F0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+255p
.text:000060F0                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+2F0p ...
.text:000060F0
.text:000060F0 var_4           = dword ptr -4
.text:000060F0
.text:000060F0                 push    ebp
.text:000060F1                 mov     ebp, esp
.text:000060F3                 push    ecx
.text:000060F4                 push    esi
.text:000060F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060FC                 mov     [ebp+var_4], ecx
.text:000060FF                 mov     eax, [ebp+var_4]
.text:00006102                 cmp     dword ptr [eax], 0
.text:00006105                 jz      short loc_6122
.text:00006107                 mov     ecx, [ebp+var_4]
.text:0000610A                 mov     edx, [ecx]
.text:0000610C                 mov     eax, [ebp+var_4]
.text:0000610F                 mov     ecx, [eax]
.text:00006111                 mov     edx, [edx]
.text:00006113                 mov     esi, esp
.text:00006115                 push    ecx
.text:00006116                 mov     eax, [edx+8]
.text:00006119                 call    eax
.text:0000611B                 cmp     esi, esp
.text:0000611D                 call    __RTC_CheckEsp
.text:00006122
.text:00006122 loc_6122:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00006122                 pop     esi
.text:00006123                 add     esp, 4
.text:00006126                 cmp     ebp, esp
.text:00006128                 call    __RTC_CheckEsp
.text:0000612D                 mov     esp, ebp
.text:0000612F                 pop     ebp
.text:00006130                 retn
.text:00006130 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00006130
.text:00006130 ; ---------------------------------------------------------------------------
.text:00006131                 align 4
.text:00006131 _text           ends
.text:00006131
.text:00006134 ; ===========================================================================
.text:00006134
.text:00006134 ; Segment type: Pure code
.text:00006134 ; Segment permissions: Read/Execute
.text:00006134 _text           segment para public 'CODE' use32
.text:00006134                 assume cs:_text
.text:00006134                 ;org 6134h
.text:00006134 ; COMDAT (pick any)
.text:00006134                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006134
.text:00006134 ; =============== S U B R O U T I N E =======================================
.text:00006134
.text:00006134 ; Attributes: bp-based frame
.text:00006134
.text:00006134 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00006134                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00006134 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00006134                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1EDp
.text:00006134
.text:00006134 var_4           = dword ptr -4
.text:00006134
.text:00006134                 push    ebp
.text:00006135                 mov     ebp, esp
.text:00006137                 push    ecx
.text:00006138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000613F                 mov     [ebp+var_4], ecx
.text:00006142                 mov     eax, [ebp+var_4]
.text:00006145                 mov     eax, [eax]
.text:00006147                 mov     esp, ebp
.text:00006149                 pop     ebp
.text:0000614A                 retn
.text:0000614A ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000614A
.text:0000614A ; ---------------------------------------------------------------------------
.text:0000614B                 align 4
.text:0000614B _text           ends
.text:0000614B
.text:0000614C ; ===========================================================================
.text:0000614C
.text:0000614C ; Segment type: Pure code
.text:0000614C ; Segment permissions: Read/Execute
.text:0000614C _text           segment para public 'CODE' use32
.text:0000614C                 assume cs:_text
.text:0000614C                 ;org 614Ch
.text:0000614C ; COMDAT (pick any)
.text:0000614C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000614C
.text:0000614C ; =============== S U B R O U T I N E =======================================
.text:0000614C
.text:0000614C ; Attributes: bp-based frame
.text:0000614C
.text:0000614C ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:0000614C                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:0000614C ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:0000614C                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+76p
.text:0000614C                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:0000614C
.text:0000614C var_8           = dword ptr -8
.text:0000614C var_4           = dword ptr -4
.text:0000614C
.text:0000614C                 push    ebp
.text:0000614D                 mov     ebp, esp
.text:0000614F                 sub     esp, 8
.text:00006152                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006159                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006160                 mov     [ebp+var_4], ecx
.text:00006163                 mov     eax, [ebp+var_4]
.text:00006166                 mov     ecx, [eax]
.text:00006168                 mov     [ebp+var_8], ecx
.text:0000616B                 mov     edx, [ebp+var_8]
.text:0000616E                 push    edx             ; void *
.text:0000616F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006174                 add     esp, 4
.text:00006177                 add     esp, 8
.text:0000617A                 cmp     ebp, esp
.text:0000617C                 call    __RTC_CheckEsp
.text:00006181                 mov     esp, ebp
.text:00006183                 pop     ebp
.text:00006184                 retn
.text:00006184 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00006184
.text:00006184 ; ---------------------------------------------------------------------------
.text:00006185                 align 4
.text:00006185 _text           ends
.text:00006185
.text:00006188 ; ===========================================================================
.text:00006188
.text:00006188 ; Segment type: Pure code
.text:00006188 ; Segment permissions: Read/Execute
.text:00006188 _text           segment para public 'CODE' use32
.text:00006188                 assume cs:_text
.text:00006188                 ;org 6188h
.text:00006188 ; COMDAT (pick any)
.text:00006188                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006188
.text:00006188 ; =============== S U B R O U T I N E =======================================
.text:00006188
.text:00006188 ; Attributes: bp-based frame
.text:00006188
.text:00006188 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:00006188                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:00006188 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:00006188                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+67p
.text:00006188                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:00006188
.text:00006188 var_8           = dword ptr -8
.text:00006188 var_4           = dword ptr -4
.text:00006188
.text:00006188                 push    ebp
.text:00006189                 mov     ebp, esp
.text:0000618B                 sub     esp, 8
.text:0000618E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006195                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000619C                 mov     [ebp+var_4], ecx
.text:0000619F                 mov     eax, [ebp+var_4]
.text:000061A2                 mov     ecx, [eax]
.text:000061A4                 mov     [ebp+var_8], ecx
.text:000061A7                 mov     edx, [ebp+var_8]
.text:000061AA                 push    edx             ; void *
.text:000061AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061B0                 add     esp, 4
.text:000061B3                 add     esp, 8
.text:000061B6                 cmp     ebp, esp
.text:000061B8                 call    __RTC_CheckEsp
.text:000061BD                 mov     esp, ebp
.text:000061BF                 pop     ebp
.text:000061C0                 retn
.text:000061C0 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:000061C0
.text:000061C0 ; ---------------------------------------------------------------------------
.text:000061C1                 align 4
.text:000061C1 _text           ends
.text:000061C1
.text:000061C4 ; ===========================================================================
.text:000061C4
.text:000061C4 ; Segment type: Pure code
.text:000061C4 ; Segment permissions: Read/Execute
.text:000061C4 _text           segment para public 'CODE' use32
.text:000061C4                 assume cs:_text
.text:000061C4                 ;org 61C4h
.text:000061C4 ; COMDAT (pick any)
.text:000061C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061C4
.text:000061C4 ; =============== S U B R O U T I N E =======================================
.text:000061C4
.text:000061C4 ; Attributes: bp-based frame
.text:000061C4
.text:000061C4 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:000061C4                 public ??0?$CRecordVector@I@@QAE@XZ
.text:000061C4 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+42p
.text:000061C4
.text:000061C4 var_4           = dword ptr -4
.text:000061C4
.text:000061C4                 push    ebp
.text:000061C5                 mov     ebp, esp
.text:000061C7                 push    ecx
.text:000061C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061CF                 mov     [ebp+var_4], ecx
.text:000061D2                 mov     eax, [ebp+var_4]
.text:000061D5                 mov     dword ptr [eax], 0
.text:000061DB                 mov     ecx, [ebp+var_4]
.text:000061DE                 mov     dword ptr [ecx+4], 0
.text:000061E5                 mov     edx, [ebp+var_4]
.text:000061E8                 mov     dword ptr [edx+8], 0
.text:000061EF                 mov     eax, [ebp+var_4]
.text:000061F2                 mov     esp, ebp
.text:000061F4                 pop     ebp
.text:000061F5                 retn
.text:000061F5 ??0?$CRecordVector@I@@QAE@XZ endp
.text:000061F5
.text:000061F5 ; ---------------------------------------------------------------------------
.text:000061F6                 align 4
.text:000061F6 _text           ends
.text:000061F6
.text:000061F8 ; ===========================================================================
.text:000061F8
.text:000061F8 ; Segment type: Pure code
.text:000061F8 ; Segment permissions: Read/Execute
.text:000061F8 _text           segment para public 'CODE' use32
.text:000061F8                 assume cs:_text
.text:000061F8                 ;org 61F8h
.text:000061F8 ; COMDAT (pick any)
.text:000061F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061F8
.text:000061F8 ; =============== S U B R O U T I N E =======================================
.text:000061F8
.text:000061F8 ; Attributes: bp-based frame
.text:000061F8
.text:000061F8 ; public: void __thiscall CRecordVector<unsigned int>::ClearAndSetSize(unsigned int)
.text:000061F8                 public ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
.text:000061F8 ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z proc near
.text:000061F8                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+37p
.text:000061F8                                         ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize(uint)+24p
.text:000061F8
.text:000061F8 var_4           = dword ptr -4
.text:000061F8 arg_0           = dword ptr  8
.text:000061F8
.text:000061F8                 push    ebp
.text:000061F9                 mov     ebp, esp
.text:000061FB                 push    ecx
.text:000061FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006203                 mov     [ebp+var_4], ecx
.text:00006206                 mov     eax, [ebp+arg_0]
.text:00006209                 push    eax
.text:0000620A                 mov     ecx, [ebp+var_4]
.text:0000620D                 call    ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndReserve(uint)
.text:00006212                 mov     ecx, [ebp+var_4]
.text:00006215                 mov     edx, [ebp+arg_0]
.text:00006218                 mov     [ecx+4], edx
.text:0000621B                 add     esp, 4
.text:0000621E                 cmp     ebp, esp
.text:00006220                 call    __RTC_CheckEsp
.text:00006225                 mov     esp, ebp
.text:00006227                 pop     ebp
.text:00006228                 retn    4
.text:00006228 ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z endp
.text:00006228
.text:00006228 ; ---------------------------------------------------------------------------
.text:0000622B                 align 4
.text:0000622B _text           ends
.text:0000622B
.text:0000622C ; ===========================================================================
.text:0000622C
.text:0000622C ; Segment type: Pure code
.text:0000622C ; Segment permissions: Read/Execute
.text:0000622C _text           segment para public 'CODE' use32
.text:0000622C                 assume cs:_text
.text:0000622C                 ;org 622Ch
.text:0000622C ; COMDAT (pick any)
.text:0000622C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000622C
.text:0000622C ; =============== S U B R O U T I N E =======================================
.text:0000622C
.text:0000622C ; Attributes: bp-based frame
.text:0000622C
.text:0000622C ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:0000622C                 public ??1?$CRecordVector@I@@QAE@XZ
.text:0000622C ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+3Ap
.text:0000622C                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+3Ap ...
.text:0000622C
.text:0000622C var_8           = dword ptr -8
.text:0000622C var_4           = dword ptr -4
.text:0000622C
.text:0000622C                 push    ebp
.text:0000622D                 mov     ebp, esp
.text:0000622F                 sub     esp, 8
.text:00006232                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006239                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006240                 mov     [ebp+var_4], ecx
.text:00006243                 mov     eax, [ebp+var_4]
.text:00006246                 mov     ecx, [eax]
.text:00006248                 mov     [ebp+var_8], ecx
.text:0000624B                 mov     edx, [ebp+var_8]
.text:0000624E                 push    edx             ; void *
.text:0000624F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006254                 add     esp, 4
.text:00006257                 add     esp, 8
.text:0000625A                 cmp     ebp, esp
.text:0000625C                 call    __RTC_CheckEsp
.text:00006261                 mov     esp, ebp
.text:00006263                 pop     ebp
.text:00006264                 retn
.text:00006264 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00006264
.text:00006264 ; ---------------------------------------------------------------------------
.text:00006265                 align 4
.text:00006265 _text           ends
.text:00006265
.text:00006268 ; ===========================================================================
.text:00006268
.text:00006268 ; Segment type: Pure code
.text:00006268 ; Segment permissions: Read/Execute
.text:00006268 _text           segment para public 'CODE' use32
.text:00006268                 assume cs:_text
.text:00006268                 ;org 6268h
.text:00006268 ; COMDAT (pick any)
.text:00006268                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006268
.text:00006268 ; =============== S U B R O U T I N E =======================================
.text:00006268
.text:00006268 ; Attributes: bp-based frame
.text:00006268
.text:00006268 ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:00006268                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:00006268 ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:00006268                                         ; CODE XREF: NArchive::N7z::CUInt32DefVector::Clear(void)+1Cp
.text:00006268                                         ; CRecordVector<uint>::ClearAndReserve(uint)+21p
.text:00006268
.text:00006268 var_4           = dword ptr -4
.text:00006268
.text:00006268                 push    ebp
.text:00006269                 mov     ebp, esp
.text:0000626B                 push    ecx
.text:0000626C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006273                 mov     [ebp+var_4], ecx
.text:00006276                 mov     eax, [ebp+var_4]
.text:00006279                 mov     dword ptr [eax+4], 0
.text:00006280                 mov     esp, ebp
.text:00006282                 pop     ebp
.text:00006283                 retn
.text:00006283 ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:00006283
.text:00006283 _text           ends
.text:00006283
.text:00006284 ; ===========================================================================
.text:00006284
.text:00006284 ; Segment type: Pure code
.text:00006284 ; Segment permissions: Read/Execute
.text:00006284 _text           segment para public 'CODE' use32
.text:00006284                 assume cs:_text
.text:00006284                 ;org 6284h
.text:00006284 ; COMDAT (pick any)
.text:00006284                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006284
.text:00006284 ; =============== S U B R O U T I N E =======================================
.text:00006284
.text:00006284 ; Attributes: bp-based frame
.text:00006284
.text:00006284 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:00006284                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:00006284 ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:00006284                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+44p
.text:00006284                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+3A1p ...
.text:00006284
.text:00006284 var_4           = dword ptr -4
.text:00006284 arg_0           = dword ptr  8
.text:00006284
.text:00006284                 push    ebp
.text:00006285                 mov     ebp, esp
.text:00006287                 push    ecx
.text:00006288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000628F                 mov     [ebp+var_4], ecx
.text:00006292                 mov     eax, [ebp+var_4]
.text:00006295                 mov     ecx, [eax]
.text:00006297                 mov     edx, [ebp+arg_0]
.text:0000629A                 lea     eax, [ecx+edx*4]
.text:0000629D                 mov     esp, ebp
.text:0000629F                 pop     ebp
.text:000062A0                 retn    4
.text:000062A0 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:000062A0
.text:000062A0 ; ---------------------------------------------------------------------------
.text:000062A3                 align 4
.text:000062A3 _text           ends
.text:000062A3
.text:000062A4 ; ===========================================================================
.text:000062A4
.text:000062A4 ; Segment type: Pure code
.text:000062A4 ; Segment permissions: Read/Execute
.text:000062A4 _text           segment para public 'CODE' use32
.text:000062A4                 assume cs:_text
.text:000062A4                 ;org 62A4h
.text:000062A4 ; COMDAT (pick any)
.text:000062A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000062A4
.text:000062A4 ; =============== S U B R O U T I N E =======================================
.text:000062A4
.text:000062A4 ; Attributes: bp-based frame
.text:000062A4
.text:000062A4 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000062A4                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:000062A4 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+53p
.text:000062A4                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+143p ...
.text:000062A4
.text:000062A4 var_4           = dword ptr -4
.text:000062A4
.text:000062A4                 push    ebp
.text:000062A5                 mov     ebp, esp
.text:000062A7                 push    ecx
.text:000062A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062AF                 mov     [ebp+var_4], ecx
.text:000062B2                 mov     eax, [ebp+var_4]
.text:000062B5                 mov     dword ptr [eax], 0
.text:000062BB                 mov     ecx, [ebp+var_4]
.text:000062BE                 mov     dword ptr [ecx+4], 0
.text:000062C5                 mov     edx, [ebp+var_4]
.text:000062C8                 mov     dword ptr [edx+8], 0
.text:000062CF                 mov     eax, [ebp+var_4]
.text:000062D2                 mov     esp, ebp
.text:000062D4                 pop     ebp
.text:000062D5                 retn
.text:000062D5 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:000062D5
.text:000062D5 ; ---------------------------------------------------------------------------
.text:000062D6                 align 4
.text:000062D6 _text           ends
.text:000062D6
.text:000062D8 ; ===========================================================================
.text:000062D8
.text:000062D8 ; Segment type: Pure code
.text:000062D8 ; Segment permissions: Read/Execute
.text:000062D8 _text           segment para public 'CODE' use32
.text:000062D8                 assume cs:_text
.text:000062D8                 ;org 62D8h
.text:000062D8 ; COMDAT (pick any)
.text:000062D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000062D8
.text:000062D8 ; =============== S U B R O U T I N E =======================================
.text:000062D8
.text:000062D8 ; Attributes: bp-based frame
.text:000062D8
.text:000062D8 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:000062D8                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:000062D8 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:000062D8                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+263p
.text:000062D8                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+31Bp ...
.text:000062D8
.text:000062D8 var_4           = dword ptr -4
.text:000062D8
.text:000062D8                 push    ebp
.text:000062D9                 mov     ebp, esp
.text:000062DB                 push    ecx
.text:000062DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062E3                 mov     [ebp+var_4], ecx
.text:000062E6                 mov     eax, [ebp+var_4]
.text:000062E9                 mov     eax, [eax+4]
.text:000062EC                 mov     esp, ebp
.text:000062EE                 pop     ebp
.text:000062EF                 retn
.text:000062EF ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:000062EF
.text:000062EF _text           ends
.text:000062EF
.text:000062F0 ; ===========================================================================
.text:000062F0
.text:000062F0 ; Segment type: Pure code
.text:000062F0 ; Segment permissions: Read/Execute
.text:000062F0 _text           segment para public 'CODE' use32
.text:000062F0                 assume cs:_text
.text:000062F0                 ;org 62F0h
.text:000062F0 ; COMDAT (pick any)
.text:000062F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000062F0
.text:000062F0 ; =============== S U B R O U T I N E =======================================
.text:000062F0
.text:000062F0 ; Attributes: bp-based frame
.text:000062F0
.text:000062F0 ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndSetSize(unsigned int)
.text:000062F0                 public ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
.text:000062F0 ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z proc near
.text:000062F0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+73p
.text:000062F0
.text:000062F0 var_4           = dword ptr -4
.text:000062F0 arg_0           = dword ptr  8
.text:000062F0
.text:000062F0                 push    ebp
.text:000062F1                 mov     ebp, esp
.text:000062F3                 push    ecx
.text:000062F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062FB                 mov     [ebp+var_4], ecx
.text:000062FE                 mov     eax, [ebp+arg_0]
.text:00006301                 push    eax
.text:00006302                 mov     ecx, [ebp+var_4]
.text:00006305                 call    ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)
.text:0000630A                 mov     ecx, [ebp+var_4]
.text:0000630D                 mov     edx, [ebp+arg_0]
.text:00006310                 mov     [ecx+4], edx
.text:00006313                 add     esp, 4
.text:00006316                 cmp     ebp, esp
.text:00006318                 call    __RTC_CheckEsp
.text:0000631D                 mov     esp, ebp
.text:0000631F                 pop     ebp
.text:00006320                 retn    4
.text:00006320 ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z endp
.text:00006320
.text:00006320 ; ---------------------------------------------------------------------------
.text:00006323                 align 4
.text:00006323 _text           ends
.text:00006323
.text:00006324 ; ===========================================================================
.text:00006324
.text:00006324 ; Segment type: Pure code
.text:00006324 ; Segment permissions: Read/Execute
.text:00006324 _text           segment para public 'CODE' use32
.text:00006324                 assume cs:_text
.text:00006324                 ;org 6324h
.text:00006324 ; COMDAT (pick any)
.text:00006324                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006324
.text:00006324 ; =============== S U B R O U T I N E =======================================
.text:00006324
.text:00006324 ; Attributes: bp-based frame
.text:00006324
.text:00006324 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00006324                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00006324 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+27Fp
.text:00006324                                         ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+34Dp ...
.text:00006324
.text:00006324 var_8           = dword ptr -8
.text:00006324 var_4           = dword ptr -4
.text:00006324
.text:00006324                 push    ebp
.text:00006325                 mov     ebp, esp
.text:00006327                 sub     esp, 8
.text:0000632A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006331                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006338                 mov     [ebp+var_4], ecx
.text:0000633B                 mov     eax, [ebp+var_4]
.text:0000633E                 mov     ecx, [eax]
.text:00006340                 mov     [ebp+var_8], ecx
.text:00006343                 mov     edx, [ebp+var_8]
.text:00006346                 push    edx             ; void *
.text:00006347                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000634C                 add     esp, 4
.text:0000634F                 add     esp, 8
.text:00006352                 cmp     ebp, esp
.text:00006354                 call    __RTC_CheckEsp
.text:00006359                 mov     esp, ebp
.text:0000635B                 pop     ebp
.text:0000635C                 retn
.text:0000635C ??1?$CRecordVector@_K@@QAE@XZ endp
.text:0000635C
.text:0000635C ; ---------------------------------------------------------------------------
.text:0000635D                 align 10h
.text:0000635D _text           ends
.text:0000635D
.text:00006360 ; ===========================================================================
.text:00006360
.text:00006360 ; Segment type: Pure code
.text:00006360 ; Segment permissions: Read/Execute
.text:00006360 _text           segment para public 'CODE' use32
.text:00006360                 assume cs:_text
.text:00006360                 ;org 6360h
.text:00006360 ; COMDAT (pick any)
.text:00006360                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006360
.text:00006360 ; =============== S U B R O U T I N E =======================================
.text:00006360
.text:00006360 ; Attributes: bp-based frame
.text:00006360
.text:00006360 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00006360                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00006360 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00006360                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::Clear(void)+1Cp
.text:00006360                                         ; NArchive::N7z::CInArchiveInfo::Clear(void)+58p ...
.text:00006360
.text:00006360 var_4           = dword ptr -4
.text:00006360
.text:00006360                 push    ebp
.text:00006361                 mov     ebp, esp
.text:00006363                 push    ecx
.text:00006364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000636B                 mov     [ebp+var_4], ecx
.text:0000636E                 mov     eax, [ebp+var_4]
.text:00006371                 mov     dword ptr [eax+4], 0
.text:00006378                 mov     esp, ebp
.text:0000637A                 pop     ebp
.text:0000637B                 retn
.text:0000637B ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:0000637B
.text:0000637B _text           ends
.text:0000637B
.text:0000637C ; ===========================================================================
.text:0000637C
.text:0000637C ; Segment type: Pure code
.text:0000637C ; Segment permissions: Read/Execute
.text:0000637C _text           segment para public 'CODE' use32
.text:0000637C                 assume cs:_text
.text:0000637C                 ;org 637Ch
.text:0000637C ; COMDAT (pick any)
.text:0000637C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000637C
.text:0000637C ; =============== S U B R O U T I N E =======================================
.text:0000637C
.text:0000637C ; Attributes: bp-based frame
.text:0000637C
.text:0000637C ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000637C                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:0000637C ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:0000637C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+19Bp
.text:0000637C                                         ; NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+205p ...
.text:0000637C
.text:0000637C var_8           = dword ptr -8
.text:0000637C var_4           = dword ptr -4
.text:0000637C arg_0           = dword ptr  8
.text:0000637C arg_4           = dword ptr  0Ch
.text:0000637C
.text:0000637C                 push    ebp
.text:0000637D                 mov     ebp, esp
.text:0000637F                 sub     esp, 8
.text:00006382                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006389                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006390                 mov     [ebp+var_4], ecx
.text:00006393                 mov     ecx, [ebp+var_4]
.text:00006396                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000639B                 mov     eax, [ebp+var_4]
.text:0000639E                 mov     ecx, [eax+4]
.text:000063A1                 mov     edx, [ebp+var_4]
.text:000063A4                 mov     eax, [edx]
.text:000063A6                 mov     edx, [ebp+arg_0]
.text:000063A9                 mov     [eax+ecx*8], edx
.text:000063AC                 mov     edx, [ebp+arg_4]
.text:000063AF                 mov     [eax+ecx*8+4], edx
.text:000063B3                 mov     eax, [ebp+var_4]
.text:000063B6                 mov     ecx, [eax+4]
.text:000063B9                 mov     [ebp+var_8], ecx
.text:000063BC                 mov     edx, [ebp+var_4]
.text:000063BF                 mov     eax, [edx+4]
.text:000063C2                 add     eax, 1
.text:000063C5                 mov     ecx, [ebp+var_4]
.text:000063C8                 mov     [ecx+4], eax
.text:000063CB                 mov     eax, [ebp+var_8]
.text:000063CE                 add     esp, 8
.text:000063D1                 cmp     ebp, esp
.text:000063D3                 call    __RTC_CheckEsp
.text:000063D8                 mov     esp, ebp
.text:000063DA                 pop     ebp
.text:000063DB                 retn    8
.text:000063DB ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:000063DB
.text:000063DB ; ---------------------------------------------------------------------------
.text:000063DE                 align 10h
.text:000063DE _text           ends
.text:000063DE
.text:000063E0 ; ===========================================================================
.text:000063E0
.text:000063E0 ; Segment type: Pure code
.text:000063E0 ; Segment permissions: Read/Execute
.text:000063E0 _text           segment para public 'CODE' use32
.text:000063E0                 assume cs:_text
.text:000063E0                 ;org 63E0h
.text:000063E0 ; COMDAT (pick any)
.text:000063E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063E0
.text:000063E0 ; =============== S U B R O U T I N E =======================================
.text:000063E0
.text:000063E0 ; Attributes: bp-based frame
.text:000063E0
.text:000063E0 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:000063E0                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:000063E0 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:000063E0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUInt64DefVector(CObjectVector<CBuffer<uchar>> const &,NArchive::N7z::CUInt64DefVector &,uint)+80p
.text:000063E0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+96Fp ...
.text:000063E0
.text:000063E0 var_4           = dword ptr -4
.text:000063E0 arg_0           = dword ptr  8
.text:000063E0
.text:000063E0                 push    ebp
.text:000063E1                 mov     ebp, esp
.text:000063E3                 push    ecx
.text:000063E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063EB                 mov     [ebp+var_4], ecx
.text:000063EE                 mov     eax, [ebp+var_4]
.text:000063F1                 mov     ecx, [eax]
.text:000063F3                 mov     edx, [ebp+arg_0]
.text:000063F6                 lea     eax, [ecx+edx*8]
.text:000063F9                 mov     esp, ebp
.text:000063FB                 pop     ebp
.text:000063FC                 retn    4
.text:000063FC ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:000063FC
.text:000063FC ; ---------------------------------------------------------------------------
.text:000063FF                 align 10h
.text:000063FF _text           ends
.text:000063FF
.text:00006400 ; ===========================================================================
.text:00006400
.text:00006400 ; Segment type: Pure code
.text:00006400 ; Segment permissions: Read/Execute
.text:00006400 _text           segment para public 'CODE' use32
.text:00006400                 assume cs:_text
.text:00006400                 ;org 6400h
.text:00006400 ; COMDAT (pick any)
.text:00006400                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006400
.text:00006400 ; =============== S U B R O U T I N E =======================================
.text:00006400
.text:00006400 ; Attributes: bp-based frame
.text:00006400
.text:00006400 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)
.text:00006400                 public ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z
.text:00006400 ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:00006400                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+283p
.text:00006400
.text:00006400 var_18          = dword ptr -18h
.text:00006400 var_14          = dword ptr -14h
.text:00006400 var_10          = dword ptr -10h
.text:00006400 var_C           = dword ptr -0Ch
.text:00006400 var_8           = dword ptr -8
.text:00006400 var_4           = dword ptr -4
.text:00006400 arg_0           = dword ptr  8
.text:00006400 arg_4           = dword ptr  0Ch
.text:00006400
.text:00006400                 push    ebp
.text:00006401                 mov     ebp, esp
.text:00006403                 sub     esp, 18h
.text:00006406                 mov     eax, 0CCCCCCCCh
.text:0000640B                 mov     [ebp+var_18], eax
.text:0000640E                 mov     [ebp+var_14], eax
.text:00006411                 mov     [ebp+var_10], eax
.text:00006414                 mov     [ebp+var_C], eax
.text:00006417                 mov     [ebp+var_8], eax
.text:0000641A                 mov     [ebp+var_4], eax
.text:0000641D                 mov     [ebp+var_4], ecx
.text:00006420                 mov     [ebp+var_8], 0
.text:00006427                 mov     eax, [ebp+var_4]
.text:0000642A                 mov     ecx, [eax+4]
.text:0000642D                 mov     [ebp+var_C], ecx
.text:00006430
.text:00006430 loc_6430:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64):loc_6492j
.text:00006430                 mov     edx, [ebp+var_8]
.text:00006433                 cmp     edx, [ebp+var_C]
.text:00006436                 jz      short loc_6494
.text:00006438                 mov     eax, [ebp+var_8]
.text:0000643B                 add     eax, [ebp+var_C]
.text:0000643E                 shr     eax, 1
.text:00006440                 mov     [ebp+var_10], eax
.text:00006443                 mov     ecx, [ebp+var_10]
.text:00006446                 push    ecx
.text:00006447                 mov     ecx, [ebp+var_4]
.text:0000644A                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000644F                 mov     edx, [eax]
.text:00006451                 mov     [ebp+var_18], edx
.text:00006454                 mov     eax, [eax+4]
.text:00006457                 mov     [ebp+var_14], eax
.text:0000645A                 mov     ecx, [ebp+arg_0]
.text:0000645D                 cmp     ecx, [ebp+var_18]
.text:00006460                 jnz     short loc_646F
.text:00006462                 mov     edx, [ebp+arg_4]
.text:00006465                 cmp     edx, [ebp+var_14]
.text:00006468                 jnz     short loc_646F
.text:0000646A                 mov     eax, [ebp+var_10]
.text:0000646D                 jmp     short loc_64AB
.text:0000646F ; ---------------------------------------------------------------------------
.text:0000646F
.text:0000646F loc_646F:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+60j
.text:0000646F                                         ; CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+68j
.text:0000646F                 mov     eax, [ebp+arg_4]
.text:00006472                 cmp     eax, [ebp+var_14]
.text:00006475                 ja      short loc_6489
.text:00006477                 jb      short loc_6481
.text:00006479                 mov     ecx, [ebp+arg_0]
.text:0000647C                 cmp     ecx, [ebp+var_18]
.text:0000647F                 jnb     short loc_6489
.text:00006481
.text:00006481 loc_6481:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+77j
.text:00006481                 mov     edx, [ebp+var_10]
.text:00006484                 mov     [ebp+var_C], edx
.text:00006487                 jmp     short loc_6492
.text:00006489 ; ---------------------------------------------------------------------------
.text:00006489
.text:00006489 loc_6489:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+75j
.text:00006489                                         ; CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+7Fj
.text:00006489                 mov     eax, [ebp+var_10]
.text:0000648C                 add     eax, 1
.text:0000648F                 mov     [ebp+var_8], eax
.text:00006492
.text:00006492 loc_6492:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+87j
.text:00006492                 jmp     short loc_6430
.text:00006494 ; ---------------------------------------------------------------------------
.text:00006494
.text:00006494 loc_6494:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+36j
.text:00006494                 mov     ecx, [ebp+arg_4]
.text:00006497                 push    ecx
.text:00006498                 mov     edx, [ebp+arg_0]
.text:0000649B                 push    edx
.text:0000649C                 mov     eax, [ebp+var_C]
.text:0000649F                 push    eax
.text:000064A0                 mov     ecx, [ebp+var_4]
.text:000064A3                 call    ?Insert@?$CRecordVector@_K@@QAEXI_K@Z ; CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)
.text:000064A8                 mov     eax, [ebp+var_C]
.text:000064AB
.text:000064AB loc_64AB:                               ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+6Dj
.text:000064AB                 add     esp, 18h
.text:000064AE                 cmp     ebp, esp
.text:000064B0                 call    __RTC_CheckEsp
.text:000064B5                 mov     esp, ebp
.text:000064B7                 pop     ebp
.text:000064B8                 retn    8
.text:000064B8 ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z endp
.text:000064B8
.text:000064B8 ; ---------------------------------------------------------------------------
.text:000064BB                 align 4
.text:000064BB _text           ends
.text:000064BB
.text:000064BC ; ===========================================================================
.text:000064BC
.text:000064BC ; Segment type: Pure code
.text:000064BC ; Segment permissions: Read/Execute
.text:000064BC _text           segment para public 'CODE' use32
.text:000064BC                 assume cs:_text
.text:000064BC                 ;org 64BCh
.text:000064BC ; COMDAT (pick any)
.text:000064BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000064BC
.text:000064BC ; =============== S U B R O U T I N E =======================================
.text:000064BC
.text:000064BC ; Attributes: bp-based frame
.text:000064BC
.text:000064BC ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:000064BC                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:000064BC ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+DDp
.text:000064BC                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+E9p ...
.text:000064BC
.text:000064BC var_4           = dword ptr -4
.text:000064BC
.text:000064BC                 push    ebp
.text:000064BD                 mov     ebp, esp
.text:000064BF                 push    ecx
.text:000064C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064C7                 mov     [ebp+var_4], ecx
.text:000064CA                 mov     eax, [ebp+var_4]
.text:000064CD                 mov     dword ptr [eax], 0
.text:000064D3                 mov     ecx, [ebp+var_4]
.text:000064D6                 mov     dword ptr [ecx+4], 0
.text:000064DD                 mov     edx, [ebp+var_4]
.text:000064E0                 mov     dword ptr [edx+8], 0
.text:000064E7                 mov     eax, [ebp+var_4]
.text:000064EA                 mov     esp, ebp
.text:000064EC                 pop     ebp
.text:000064ED                 retn
.text:000064ED ??0?$CRecordVector@_N@@QAE@XZ endp
.text:000064ED
.text:000064ED ; ---------------------------------------------------------------------------
.text:000064EE                 align 10h
.text:000064EE _text           ends
.text:000064EE
.text:000064F0 ; ===========================================================================
.text:000064F0
.text:000064F0 ; Segment type: Pure code
.text:000064F0 ; Segment permissions: Read/Execute
.text:000064F0 _text           segment para public 'CODE' use32
.text:000064F0                 assume cs:_text
.text:000064F0                 ;org 64F0h
.text:000064F0 ; COMDAT (pick any)
.text:000064F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000064F0
.text:000064F0 ; =============== S U B R O U T I N E =======================================
.text:000064F0
.text:000064F0 ; Attributes: bp-based frame
.text:000064F0
.text:000064F0 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:000064F0                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:000064F0 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:000064F0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadSubStreamsInfo(NArchive::N7z::CFolders &,CRecordVector<unsigned __int64> &,NArchive::N7z::CUInt32DefVector &)+48Ap
.text:000064F0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+65Dp ...
.text:000064F0
.text:000064F0 var_4           = dword ptr -4
.text:000064F0
.text:000064F0                 push    ebp
.text:000064F1                 mov     ebp, esp
.text:000064F3                 push    ecx
.text:000064F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064FB                 mov     [ebp+var_4], ecx
.text:000064FE                 mov     eax, [ebp+var_4]
.text:00006501                 mov     eax, [eax+4]
.text:00006504                 mov     esp, ebp
.text:00006506                 pop     ebp
.text:00006507                 retn
.text:00006507 ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:00006507
.text:00006507 _text           ends
.text:00006507
.text:00006508 ; ===========================================================================
.text:00006508
.text:00006508 ; Segment type: Pure code
.text:00006508 ; Segment permissions: Read/Execute
.text:00006508 _text           segment para public 'CODE' use32
.text:00006508                 assume cs:_text
.text:00006508                 ;org 6508h
.text:00006508 ; COMDAT (pick any)
.text:00006508                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006508
.text:00006508 ; =============== S U B R O U T I N E =======================================
.text:00006508
.text:00006508 ; Attributes: bp-based frame
.text:00006508
.text:00006508 ; public: bool __thiscall CRecordVector<bool>::IsEmpty(void)const
.text:00006508                 public ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ
.text:00006508 ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ proc near
.text:00006508                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+227p
.text:00006508
.text:00006508 var_4           = dword ptr -4
.text:00006508
.text:00006508                 push    ebp
.text:00006509                 mov     ebp, esp
.text:0000650B                 push    ecx
.text:0000650C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006513                 mov     [ebp+var_4], ecx
.text:00006516                 mov     eax, [ebp+var_4]
.text:00006519                 xor     ecx, ecx
.text:0000651B                 cmp     dword ptr [eax+4], 0
.text:0000651F                 setz    cl
.text:00006522                 mov     al, cl
.text:00006524                 mov     esp, ebp
.text:00006526                 pop     ebp
.text:00006527                 retn
.text:00006527 ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ endp
.text:00006527
.text:00006527 _text           ends
.text:00006527
.text:00006528 ; ===========================================================================
.text:00006528
.text:00006528 ; Segment type: Pure code
.text:00006528 ; Segment permissions: Read/Execute
.text:00006528 _text           segment para public 'CODE' use32
.text:00006528                 assume cs:_text
.text:00006528                 ;org 6528h
.text:00006528 ; COMDAT (pick any)
.text:00006528                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006528
.text:00006528 ; =============== S U B R O U T I N E =======================================
.text:00006528
.text:00006528 ; Attributes: bp-based frame
.text:00006528
.text:00006528 ; public: void __thiscall CRecordVector<bool>::ClearAndSetSize(unsigned int)
.text:00006528                 public ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
.text:00006528 ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z proc near
.text:00006528                                         ; CODE XREF: NArchive::N7z::BoolVector_Fill_False(CRecordVector<bool> &,uint)+1Bp
.text:00006528                                         ; NArchive::N7z::CInArchive::ReadBoolVector(uint,CRecordVector<bool> &)+21p ...
.text:00006528
.text:00006528 var_4           = dword ptr -4
.text:00006528 arg_0           = dword ptr  8
.text:00006528
.text:00006528                 push    ebp
.text:00006529                 mov     ebp, esp
.text:0000652B                 push    ecx
.text:0000652C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006533                 mov     [ebp+var_4], ecx
.text:00006536                 mov     eax, [ebp+arg_0]
.text:00006539                 push    eax
.text:0000653A                 mov     ecx, [ebp+var_4]
.text:0000653D                 call    ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve(uint)
.text:00006542                 mov     ecx, [ebp+var_4]
.text:00006545                 mov     edx, [ebp+arg_0]
.text:00006548                 mov     [ecx+4], edx
.text:0000654B                 add     esp, 4
.text:0000654E                 cmp     ebp, esp
.text:00006550                 call    __RTC_CheckEsp
.text:00006555                 mov     esp, ebp
.text:00006557                 pop     ebp
.text:00006558                 retn    4
.text:00006558 ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z endp
.text:00006558
.text:00006558 ; ---------------------------------------------------------------------------
.text:0000655B                 align 4
.text:0000655B _text           ends
.text:0000655B
.text:0000655C ; ===========================================================================
.text:0000655C
.text:0000655C ; Segment type: Pure code
.text:0000655C ; Segment permissions: Read/Execute
.text:0000655C _text           segment para public 'CODE' use32
.text:0000655C                 assume cs:_text
.text:0000655C                 ;org 655Ch
.text:0000655C ; COMDAT (pick any)
.text:0000655C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000655C
.text:0000655C ; =============== S U B R O U T I N E =======================================
.text:0000655C
.text:0000655C ; Attributes: bp-based frame
.text:0000655C
.text:0000655C ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000655C                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:0000655C ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+67Ap
.text:0000655C                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+686p ...
.text:0000655C
.text:0000655C var_8           = dword ptr -8
.text:0000655C var_4           = dword ptr -4
.text:0000655C
.text:0000655C                 push    ebp
.text:0000655D                 mov     ebp, esp
.text:0000655F                 sub     esp, 8
.text:00006562                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006569                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006570                 mov     [ebp+var_4], ecx
.text:00006573                 mov     eax, [ebp+var_4]
.text:00006576                 mov     ecx, [eax]
.text:00006578                 mov     [ebp+var_8], ecx
.text:0000657B                 mov     edx, [ebp+var_8]
.text:0000657E                 push    edx             ; void *
.text:0000657F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006584                 add     esp, 4
.text:00006587                 add     esp, 8
.text:0000658A                 cmp     ebp, esp
.text:0000658C                 call    __RTC_CheckEsp
.text:00006591                 mov     esp, ebp
.text:00006593                 pop     ebp
.text:00006594                 retn
.text:00006594 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00006594
.text:00006594 ; ---------------------------------------------------------------------------
.text:00006595                 align 4
.text:00006595 _text           ends
.text:00006595
.text:00006598 ; ===========================================================================
.text:00006598
.text:00006598 ; Segment type: Pure code
.text:00006598 ; Segment permissions: Read/Execute
.text:00006598 _text           segment para public 'CODE' use32
.text:00006598                 assume cs:_text
.text:00006598                 ;org 6598h
.text:00006598 ; COMDAT (pick any)
.text:00006598                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006598
.text:00006598 ; =============== S U B R O U T I N E =======================================
.text:00006598
.text:00006598 ; Attributes: bp-based frame
.text:00006598
.text:00006598 ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00006598                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00006598 ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00006598                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+78p
.text:00006598                                         ; NArchive::N7z::CUInt64DefVector::Clear(void)+11p ...
.text:00006598
.text:00006598 var_4           = dword ptr -4
.text:00006598
.text:00006598                 push    ebp
.text:00006599                 mov     ebp, esp
.text:0000659B                 push    ecx
.text:0000659C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065A3                 mov     [ebp+var_4], ecx
.text:000065A6                 mov     eax, [ebp+var_4]
.text:000065A9                 mov     dword ptr [eax+4], 0
.text:000065B0                 mov     esp, ebp
.text:000065B2                 pop     ebp
.text:000065B3                 retn
.text:000065B3 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:000065B3
.text:000065B3 _text           ends
.text:000065B3
.text:000065B4 ; ===========================================================================
.text:000065B4
.text:000065B4 ; Segment type: Pure code
.text:000065B4 ; Segment permissions: Read/Execute
.text:000065B4 _text           segment para public 'CODE' use32
.text:000065B4                 assume cs:_text
.text:000065B4                 ;org 65B4h
.text:000065B4 ; COMDAT (pick any)
.text:000065B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065B4
.text:000065B4 ; =============== S U B R O U T I N E =======================================
.text:000065B4
.text:000065B4 ; Attributes: bp-based frame
.text:000065B4
.text:000065B4 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:000065B4                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:000065B4 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:000065B4                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+A5Ap
.text:000065B4
.text:000065B4 var_8           = dword ptr -8
.text:000065B4 var_4           = dword ptr -4
.text:000065B4 arg_0           = byte ptr  8
.text:000065B4
.text:000065B4                 push    ebp
.text:000065B5                 mov     ebp, esp
.text:000065B7                 sub     esp, 8
.text:000065BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000065C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065C8                 mov     [ebp+var_4], ecx
.text:000065CB                 mov     ecx, [ebp+var_4]
.text:000065CE                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:000065D3                 mov     eax, [ebp+var_4]
.text:000065D6                 mov     ecx, [eax]
.text:000065D8                 mov     edx, [ebp+var_4]
.text:000065DB                 mov     eax, [edx+4]
.text:000065DE                 mov     dl, [ebp+arg_0]
.text:000065E1                 mov     [ecx+eax], dl
.text:000065E4                 mov     eax, [ebp+var_4]
.text:000065E7                 mov     ecx, [eax+4]
.text:000065EA                 mov     [ebp+var_8], ecx
.text:000065ED                 mov     edx, [ebp+var_4]
.text:000065F0                 mov     eax, [edx+4]
.text:000065F3                 add     eax, 1
.text:000065F6                 mov     ecx, [ebp+var_4]
.text:000065F9                 mov     [ecx+4], eax
.text:000065FC                 mov     eax, [ebp+var_8]
.text:000065FF                 add     esp, 8
.text:00006602                 cmp     ebp, esp
.text:00006604                 call    __RTC_CheckEsp
.text:00006609                 mov     esp, ebp
.text:0000660B                 pop     ebp
.text:0000660C                 retn    4
.text:0000660C ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:0000660C
.text:0000660C ; ---------------------------------------------------------------------------
.text:0000660F                 align 10h
.text:0000660F _text           ends
.text:0000660F
.text:00006610 ; ===========================================================================
.text:00006610
.text:00006610 ; Segment type: Pure code
.text:00006610 ; Segment permissions: Read/Execute
.text:00006610 _text           segment para public 'CODE' use32
.text:00006610                 assume cs:_text
.text:00006610                 ;org 6610h
.text:00006610 ; COMDAT (pick any)
.text:00006610                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006610
.text:00006610 ; =============== S U B R O U T I N E =======================================
.text:00006610
.text:00006610 ; Attributes: bp-based frame
.text:00006610
.text:00006610 ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:00006610                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:00006610 ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:00006610                                         ; CODE XREF: NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+2Bp
.text:00006610
.text:00006610 var_4           = dword ptr -4
.text:00006610 arg_0           = dword ptr  8
.text:00006610
.text:00006610                 push    ebp
.text:00006611                 mov     ebp, esp
.text:00006613                 push    ecx
.text:00006614                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000661B                 mov     [ebp+var_4], ecx
.text:0000661E                 mov     eax, [ebp+var_4]
.text:00006621                 mov     eax, [eax]
.text:00006623                 add     eax, [ebp+arg_0]
.text:00006626                 mov     esp, ebp
.text:00006628                 pop     ebp
.text:00006629                 retn    4
.text:00006629 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:00006629
.text:00006629 _text           ends
.text:00006629
.text:0000662C ; ===========================================================================
.text:0000662C
.text:0000662C ; Segment type: Pure code
.text:0000662C ; Segment permissions: Read/Execute
.text:0000662C _text           segment para public 'CODE' use32
.text:0000662C                 assume cs:_text
.text:0000662C                 ;org 662Ch
.text:0000662C ; COMDAT (pick any)
.text:0000662C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000662C
.text:0000662C ; =============== S U B R O U T I N E =======================================
.text:0000662C
.text:0000662C ; Attributes: bp-based frame
.text:0000662C
.text:0000662C ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:0000662C                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:0000662C ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:0000662C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHashDigests(uint,NArchive::N7z::CUInt32DefVector &)+51p
.text:0000662C                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+466p ...
.text:0000662C
.text:0000662C var_4           = dword ptr -4
.text:0000662C arg_0           = dword ptr  8
.text:0000662C
.text:0000662C                 push    ebp
.text:0000662D                 mov     ebp, esp
.text:0000662F                 push    ecx
.text:00006630                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006637                 mov     [ebp+var_4], ecx
.text:0000663A                 mov     eax, [ebp+var_4]
.text:0000663D                 mov     eax, [eax]
.text:0000663F                 add     eax, [ebp+arg_0]
.text:00006642                 mov     esp, ebp
.text:00006644                 pop     ebp
.text:00006645                 retn    4
.text:00006645 ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:00006645
.text:00006645 _text           ends
.text:00006645
.text:00006648 ; ===========================================================================
.text:00006648
.text:00006648 ; Segment type: Pure code
.text:00006648 ; Segment permissions: Read/Execute
.text:00006648 _text           segment para public 'CODE' use32
.text:00006648                 assume cs:_text
.text:00006648                 ;org 6648h
.text:00006648 ; COMDAT (pick any)
.text:00006648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006648
.text:00006648 ; =============== S U B R O U T I N E =======================================
.text:00006648
.text:00006648 ; Attributes: bp-based frame
.text:00006648
.text:00006648 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo *(void)
.text:00006648                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
.text:00006648 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ proc near
.text:00006648                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+66p
.text:00006648
.text:00006648 var_4           = dword ptr -4
.text:00006648
.text:00006648                 push    ebp
.text:00006649                 mov     ebp, esp
.text:0000664B                 push    ecx
.text:0000664C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006653                 mov     [ebp+var_4], ecx
.text:00006656                 mov     eax, [ebp+var_4]
.text:00006659                 mov     eax, [eax]
.text:0000665B                 mov     esp, ebp
.text:0000665D                 pop     ebp
.text:0000665E                 retn
.text:0000665E ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ endp
.text:0000665E
.text:0000665E ; ---------------------------------------------------------------------------
.text:0000665F                 align 10h
.text:0000665F _text           ends
.text:0000665F
.text:00006660 ; ===========================================================================
.text:00006660
.text:00006660 ; Segment type: Pure code
.text:00006660 ; Segment permissions: Read/Execute
.text:00006660 _text           segment para public 'CODE' use32
.text:00006660                 assume cs:_text
.text:00006660                 ;org 6660h
.text:00006660 ; COMDAT (pick any)
.text:00006660                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006660
.text:00006660 ; =============== S U B R O U T I N E =======================================
.text:00006660
.text:00006660 ; Attributes: bp-based frame
.text:00006660
.text:00006660 ; public: void __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::SetSize(unsigned int)
.text:00006660                 public ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text:00006660 ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z proc near
.text:00006660                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+39p
.text:00006660
.text:00006660 var_30          = dword ptr -30h
.text:00006660 var_2C          = dword ptr -2Ch
.text:00006660 var_28          = dword ptr -28h
.text:00006660 var_24          = dword ptr -24h
.text:00006660 var_20          = dword ptr -20h
.text:00006660 var_1C          = dword ptr -1Ch
.text:00006660 var_18          = dword ptr -18h
.text:00006660 var_14          = dword ptr -14h
.text:00006660 var_10          = dword ptr -10h
.text:00006660 var_C           = dword ptr -0Ch
.text:00006660 var_4           = dword ptr -4
.text:00006660 arg_0           = dword ptr  8
.text:00006660
.text:00006660                 push    ebp
.text:00006661                 mov     ebp, esp
.text:00006663                 push    0FFFFFFFFh
.text:00006665                 push    offset __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text:0000666A                 mov     eax, large fs:0
.text:00006670                 push    eax
.text:00006671                 sub     esp, 24h
.text:00006674                 mov     eax, 0CCCCCCCCh
.text:00006679                 mov     [ebp+var_30], eax
.text:0000667C                 mov     [ebp+var_2C], eax
.text:0000667F                 mov     [ebp+var_28], eax
.text:00006682                 mov     [ebp+var_24], eax
.text:00006685                 mov     [ebp+var_20], eax
.text:00006688                 mov     [ebp+var_1C], eax
.text:0000668B                 mov     [ebp+var_18], eax
.text:0000668E                 mov     [ebp+var_14], eax
.text:00006691                 mov     [ebp+var_10], eax
.text:00006694                 mov     eax, dword ptr ds:___security_cookie
.text:00006699                 xor     eax, ebp
.text:0000669B                 push    eax
.text:0000669C                 lea     eax, [ebp+var_C]
.text:0000669F                 mov     large fs:0, eax
.text:000066A5                 mov     [ebp+var_10], ecx
.text:000066A8                 mov     eax, [ebp+var_10]
.text:000066AB                 mov     ecx, [ebp+arg_0]
.text:000066AE                 cmp     ecx, [eax+4]
.text:000066B1                 jnz     short loc_66B8
.text:000066B3                 jmp     loc_678B
.text:000066B8 ; ---------------------------------------------------------------------------
.text:000066B8
.text:000066B8 loc_66B8:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+51j
.text:000066B8                 mov     [ebp+var_14], 0
.text:000066BF                 cmp     [ebp+arg_0], 0
.text:000066C3                 jz      loc_6750
.text:000066C9                 mov     edx, [ebp+arg_0]
.text:000066CC                 mov     [ebp+var_18], edx
.text:000066CF                 xor     ecx, ecx
.text:000066D1                 mov     eax, [ebp+var_18]
.text:000066D4                 mov     edx, 18h
.text:000066D9                 mul     edx
.text:000066DB                 seto    cl
.text:000066DE                 neg     ecx
.text:000066E0                 or      ecx, eax
.text:000066E2                 xor     eax, eax
.text:000066E4                 add     ecx, 4
.text:000066E7                 setb    al
.text:000066EA                 neg     eax
.text:000066EC                 or      eax, ecx
.text:000066EE                 push    eax             ; unsigned int
.text:000066EF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000066F4                 add     esp, 4
.text:000066F7                 mov     [ebp+var_20], eax
.text:000066FA                 mov     [ebp+var_4], 0
.text:00006701                 cmp     [ebp+var_20], 0
.text:00006705                 jz      short loc_6736
.text:00006707                 mov     ecx, [ebp+var_20]
.text:0000670A                 mov     edx, [ebp+var_18]
.text:0000670D                 mov     [ecx], edx
.text:0000670F                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:00006714                 push    offset ??0CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::CCoderInfo(void)
.text:00006719                 mov     eax, [ebp+var_18]
.text:0000671C                 push    eax
.text:0000671D                 push    18h
.text:0000671F                 mov     ecx, [ebp+var_20]
.text:00006722                 add     ecx, 4
.text:00006725                 push    ecx
.text:00006726                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:0000672B                 mov     edx, [ebp+var_20]
.text:0000672E                 add     edx, 4
.text:00006731                 mov     [ebp+var_2C], edx
.text:00006734                 jmp     short loc_673D
.text:00006736 ; ---------------------------------------------------------------------------
.text:00006736
.text:00006736 loc_6736:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+A5j
.text:00006736                 mov     [ebp+var_2C], 0
.text:0000673D
.text:0000673D loc_673D:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+D4j
.text:0000673D                 mov     eax, [ebp+var_2C]
.text:00006740                 mov     [ebp+var_1C], eax
.text:00006743                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000674A                 mov     ecx, [ebp+var_1C]
.text:0000674D                 mov     [ebp+var_14], ecx
.text:00006750
.text:00006750 loc_6750:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+63j
.text:00006750                 mov     edx, [ebp+var_10]
.text:00006753                 mov     eax, [edx]
.text:00006755                 mov     [ebp+var_28], eax
.text:00006758                 mov     ecx, [ebp+var_28]
.text:0000675B                 mov     [ebp+var_24], ecx
.text:0000675E                 cmp     [ebp+var_24], 0
.text:00006762                 jz      short loc_6773
.text:00006764                 push    3
.text:00006766                 mov     ecx, [ebp+var_24]
.text:00006769                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:0000676E                 mov     [ebp+var_30], eax
.text:00006771                 jmp     short loc_677A
.text:00006773 ; ---------------------------------------------------------------------------
.text:00006773
.text:00006773 loc_6773:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+102j
.text:00006773                 mov     [ebp+var_30], 0
.text:0000677A
.text:0000677A loc_677A:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+111j
.text:0000677A                 mov     edx, [ebp+var_10]
.text:0000677D                 mov     eax, [ebp+var_14]
.text:00006780                 mov     [edx], eax
.text:00006782                 mov     ecx, [ebp+var_10]
.text:00006785                 mov     edx, [ebp+arg_0]
.text:00006788                 mov     [ecx+4], edx
.text:0000678B
.text:0000678B loc_678B:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+53j
.text:0000678B                 mov     ecx, [ebp+var_C]
.text:0000678E                 mov     large fs:0, ecx
.text:00006795                 pop     ecx
.text:00006796                 add     esp, 30h
.text:00006799                 cmp     ebp, esp
.text:0000679B                 call    __RTC_CheckEsp
.text:000067A0                 mov     esp, ebp
.text:000067A2                 pop     ebp
.text:000067A3                 retn    4
.text:000067A3 ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z endp
.text:000067A3
.text:000067A3 ; ---------------------------------------------------------------------------
.text:000067A6                 align 4
.text:000067A6 _text           ends
.text:000067A6
.text$x:000067A8 ; ===========================================================================
.text$x:000067A8
.text$x:000067A8 ; Segment type: Pure code
.text$x:000067A8 ; Segment permissions: Read/Execute
.text$x:000067A8 _text$x         segment para public 'CODE' use32
.text$x:000067A8                 assume cs:_text$x
.text$x:000067A8                 ;org 67A8h
.text$x:000067A8 ; COMDAT (pick associative to section at 6660)
.text$x:000067A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000067A8
.text$x:000067A8 ; =============== S U B R O U T I N E =======================================
.text$x:000067A8
.text$x:000067A8
.text$x:000067A8 __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0 proc near
.text$x:000067A8                                         ; DATA XREF: .xdata$x:000067D4o
.text$x:000067A8                 mov     eax, [ebp-20h]
.text$x:000067AB                 push    eax             ; void *
.text$x:000067AC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000067B1                 pop     ecx
.text$x:000067B2                 retn
.text$x:000067B2 __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0 endp
.text$x:000067B2
.text$x:000067B3
.text$x:000067B3 ; =============== S U B R O U T I N E =======================================
.text$x:000067B3
.text$x:000067B3
.text$x:000067B3 __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z proc near
.text$x:000067B3                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+5o
.text$x:000067B3
.text$x:000067B3 arg_4           = dword ptr  8
.text$x:000067B3
.text$x:000067B3                 mov     edx, [esp+arg_4]
.text$x:000067B7                 lea     eax, [edx+0Ch]
.text$x:000067BA                 mov     ecx, [edx-28h]
.text$x:000067BD                 xor     ecx, eax
.text$x:000067BF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000067C4                 mov     eax, offset __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text$x:000067C9                 jmp     ___CxxFrameHandler3
.text$x:000067C9 __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z endp
.text$x:000067C9
.text$x:000067C9 ; ---------------------------------------------------------------------------
.text$x:000067CE                 align 10h
.text$x:000067CE _text$x         ends
.text$x:000067CE
.xdata$x:000067D0 ; ===========================================================================
.xdata$x:000067D0
.xdata$x:000067D0 ; Segment type: Pure data
.xdata$x:000067D0 ; Segment permissions: Read
.xdata$x:000067D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000067D0                 assume cs:_xdata$x
.xdata$x:000067D0                 ;org 67D0h
.xdata$x:000067D0 ; COMDAT (pick associative to section at 6660)
.xdata$x:000067D0 __unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z db 0FFh
.xdata$x:000067D0                                         ; DATA XREF: .xdata$x:000067E0o
.xdata$x:000067D1                 db 0FFh
.xdata$x:000067D2                 db 0FFh
.xdata$x:000067D3                 db 0FFh
.xdata$x:000067D4                 dd offset __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0
.xdata$x:000067D8 __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z db  22h ; "
.xdata$x:000067D8                                         ; DATA XREF: __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z+11o
.xdata$x:000067D9                 db    5
.xdata$x:000067DA                 db  93h ; ô
.xdata$x:000067DB                 db  19h
.xdata$x:000067DC                 db    1
.xdata$x:000067DD                 db    0
.xdata$x:000067DE                 db    0
.xdata$x:000067DF                 db    0
.xdata$x:000067E0                 dd offset __unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.xdata$x:000067E4                 db    0
.xdata$x:000067E5                 db    0
.xdata$x:000067E6                 db    0
.xdata$x:000067E7                 db    0
.xdata$x:000067E8                 db    0
.xdata$x:000067E9                 db    0
.xdata$x:000067EA                 db    0
.xdata$x:000067EB                 db    0
.xdata$x:000067EC                 db    0
.xdata$x:000067ED                 db    0
.xdata$x:000067EE                 db    0
.xdata$x:000067EF                 db    0
.xdata$x:000067F0                 db    0
.xdata$x:000067F1                 db    0
.xdata$x:000067F2                 db    0
.xdata$x:000067F3                 db    0
.xdata$x:000067F4                 db    0
.xdata$x:000067F5                 db    0
.xdata$x:000067F6                 db    0
.xdata$x:000067F7                 db    0
.xdata$x:000067F8                 db    1
.xdata$x:000067F9                 db    0
.xdata$x:000067FA                 db    0
.xdata$x:000067FB                 db    0
.xdata$x:000067FB _xdata$x        ends
.xdata$x:000067FB
.text:000067FC ; ===========================================================================
.text:000067FC
.text:000067FC ; Segment type: Pure code
.text:000067FC ; Segment permissions: Read/Execute
.text:000067FC _text           segment para public 'CODE' use32
.text:000067FC                 assume cs:_text
.text:000067FC                 ;org 67FCh
.text:000067FC ; COMDAT (pick any)
.text:000067FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067FC
.text:000067FC ; =============== S U B R O U T I N E =======================================
.text:000067FC
.text:000067FC ; Attributes: bp-based frame
.text:000067FC
.text:000067FC ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond *(void)
.text:000067FC                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
.text:000067FC ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ proc near
.text:000067FC                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1E7p
.text:000067FC
.text:000067FC var_4           = dword ptr -4
.text:000067FC
.text:000067FC                 push    ebp
.text:000067FD                 mov     ebp, esp
.text:000067FF                 push    ecx
.text:00006800                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006807                 mov     [ebp+var_4], ecx
.text:0000680A                 mov     eax, [ebp+var_4]
.text:0000680D                 mov     eax, [eax]
.text:0000680F                 mov     esp, ebp
.text:00006811                 pop     ebp
.text:00006812                 retn
.text:00006812 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ endp
.text:00006812
.text:00006812 ; ---------------------------------------------------------------------------
.text:00006813                 align 4
.text:00006813 _text           ends
.text:00006813
.text:00006814 ; ===========================================================================
.text:00006814
.text:00006814 ; Segment type: Pure code
.text:00006814 ; Segment permissions: Read/Execute
.text:00006814 _text           segment para public 'CODE' use32
.text:00006814                 assume cs:_text
.text:00006814                 ;org 6814h
.text:00006814 ; COMDAT (pick any)
.text:00006814                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006814
.text:00006814 ; =============== S U B R O U T I N E =======================================
.text:00006814
.text:00006814 ; Attributes: bp-based frame
.text:00006814
.text:00006814 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond const *(void)const
.text:00006814                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
.text:00006814 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ proc near
.text:00006814                                         ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+3Fp
.text:00006814
.text:00006814 var_4           = dword ptr -4
.text:00006814
.text:00006814                 push    ebp
.text:00006815                 mov     ebp, esp
.text:00006817                 push    ecx
.text:00006818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000681F                 mov     [ebp+var_4], ecx
.text:00006822                 mov     eax, [ebp+var_4]
.text:00006825                 mov     eax, [eax]
.text:00006827                 mov     esp, ebp
.text:00006829                 pop     ebp
.text:0000682A                 retn
.text:0000682A ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ endp
.text:0000682A
.text:0000682A ; ---------------------------------------------------------------------------
.text:0000682B                 align 4
.text:0000682B _text           ends
.text:0000682B
.text:0000682C ; ===========================================================================
.text:0000682C
.text:0000682C ; Segment type: Pure code
.text:0000682C ; Segment permissions: Read/Execute
.text:0000682C _text           segment para public 'CODE' use32
.text:0000682C                 assume cs:_text
.text:0000682C                 ;org 682Ch
.text:0000682C ; COMDAT (pick any)
.text:0000682C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000682C
.text:0000682C ; =============== S U B R O U T I N E =======================================
.text:0000682C
.text:0000682C ; Attributes: bp-based frame
.text:0000682C
.text:0000682C ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CBond>::Size(void)const
.text:0000682C                 public ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
.text:0000682C ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ proc near
.text:0000682C                                         ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+2Fp
.text:0000682C
.text:0000682C var_4           = dword ptr -4
.text:0000682C
.text:0000682C                 push    ebp
.text:0000682D                 mov     ebp, esp
.text:0000682F                 push    ecx
.text:00006830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006837                 mov     [ebp+var_4], ecx
.text:0000683A                 mov     eax, [ebp+var_4]
.text:0000683D                 mov     eax, [eax+4]
.text:00006840                 mov     esp, ebp
.text:00006842                 pop     ebp
.text:00006843                 retn
.text:00006843 ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ endp
.text:00006843
.text:00006843 _text           ends
.text:00006843
.text:00006844 ; ===========================================================================
.text:00006844
.text:00006844 ; Segment type: Pure code
.text:00006844 ; Segment permissions: Read/Execute
.text:00006844 _text           segment para public 'CODE' use32
.text:00006844                 assume cs:_text
.text:00006844                 ;org 6844h
.text:00006844 ; COMDAT (pick any)
.text:00006844                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006844
.text:00006844 ; =============== S U B R O U T I N E =======================================
.text:00006844
.text:00006844 ; Attributes: bp-based frame
.text:00006844
.text:00006844 ; public: void __thiscall CObjArray2<struct NArchive::N7z::CBond>::SetSize(unsigned int)
.text:00006844                 public ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z
.text:00006844 ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z proc near
.text:00006844                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+1C2p
.text:00006844
.text:00006844 var_10          = dword ptr -10h
.text:00006844 var_C           = dword ptr -0Ch
.text:00006844 var_8           = dword ptr -8
.text:00006844 var_4           = dword ptr -4
.text:00006844 arg_0           = dword ptr  8
.text:00006844
.text:00006844                 push    ebp
.text:00006845                 mov     ebp, esp
.text:00006847                 sub     esp, 10h
.text:0000684A                 mov     eax, 0CCCCCCCCh
.text:0000684F                 mov     [ebp+var_10], eax
.text:00006852                 mov     [ebp+var_C], eax
.text:00006855                 mov     [ebp+var_8], eax
.text:00006858                 mov     [ebp+var_4], eax
.text:0000685B                 mov     [ebp+var_4], ecx
.text:0000685E                 mov     eax, [ebp+var_4]
.text:00006861                 mov     ecx, [ebp+arg_0]
.text:00006864                 cmp     ecx, [eax+4]
.text:00006867                 jnz     short loc_686B
.text:00006869                 jmp     short loc_68C2
.text:0000686B ; ---------------------------------------------------------------------------
.text:0000686B
.text:0000686B loc_686B:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+23j
.text:0000686B                 mov     [ebp+var_8], 0
.text:00006872                 cmp     [ebp+arg_0], 0
.text:00006876                 jz      short loc_689D
.text:00006878                 xor     ecx, ecx
.text:0000687A                 mov     eax, [ebp+arg_0]
.text:0000687D                 mov     edx, 8
.text:00006882                 mul     edx
.text:00006884                 seto    cl
.text:00006887                 neg     ecx
.text:00006889                 or      ecx, eax
.text:0000688B                 push    ecx             ; unsigned int
.text:0000688C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006891                 add     esp, 4
.text:00006894                 mov     [ebp+var_C], eax
.text:00006897                 mov     eax, [ebp+var_C]
.text:0000689A                 mov     [ebp+var_8], eax
.text:0000689D
.text:0000689D loc_689D:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+32j
.text:0000689D                 mov     ecx, [ebp+var_4]
.text:000068A0                 mov     edx, [ecx]
.text:000068A2                 mov     [ebp+var_10], edx
.text:000068A5                 mov     eax, [ebp+var_10]
.text:000068A8                 push    eax             ; void *
.text:000068A9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000068AE                 add     esp, 4
.text:000068B1                 mov     ecx, [ebp+var_4]
.text:000068B4                 mov     edx, [ebp+var_8]
.text:000068B7                 mov     [ecx], edx
.text:000068B9                 mov     eax, [ebp+var_4]
.text:000068BC                 mov     ecx, [ebp+arg_0]
.text:000068BF                 mov     [eax+4], ecx
.text:000068C2
.text:000068C2 loc_68C2:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+25j
.text:000068C2                 add     esp, 10h
.text:000068C5                 cmp     ebp, esp
.text:000068C7                 call    __RTC_CheckEsp
.text:000068CC                 mov     esp, ebp
.text:000068CE                 pop     ebp
.text:000068CF                 retn    4
.text:000068CF ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z endp
.text:000068CF
.text:000068CF ; ---------------------------------------------------------------------------
.text:000068D2                 align 4
.text:000068D2 _text           ends
.text:000068D2
.text:000068D4 ; ===========================================================================
.text:000068D4
.text:000068D4 ; Segment type: Pure code
.text:000068D4 ; Segment permissions: Read/Execute
.text:000068D4 _text           segment para public 'CODE' use32
.text:000068D4                 assume cs:_text
.text:000068D4                 ;org 68D4h
.text:000068D4 ; COMDAT (pick any)
.text:000068D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068D4
.text:000068D4 ; =============== S U B R O U T I N E =======================================
.text:000068D4
.text:000068D4 ; Attributes: bp-based frame
.text:000068D4
.text:000068D4 ; public: __thiscall CObjArray2<unsigned int>::operator unsigned int *(void)
.text:000068D4                 public ??B?$CObjArray2@I@@QAEPAIXZ
.text:000068D4 ??B?$CObjArray2@I@@QAEPAIXZ proc near   ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+26Dp
.text:000068D4                                         ; NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+2B4p
.text:000068D4
.text:000068D4 var_4           = dword ptr -4
.text:000068D4
.text:000068D4                 push    ebp
.text:000068D5                 mov     ebp, esp
.text:000068D7                 push    ecx
.text:000068D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068DF                 mov     [ebp+var_4], ecx
.text:000068E2                 mov     eax, [ebp+var_4]
.text:000068E5                 mov     eax, [eax]
.text:000068E7                 mov     esp, ebp
.text:000068E9                 pop     ebp
.text:000068EA                 retn
.text:000068EA ??B?$CObjArray2@I@@QAEPAIXZ endp
.text:000068EA
.text:000068EA ; ---------------------------------------------------------------------------
.text:000068EB                 align 4
.text:000068EB _text           ends
.text:000068EB
.text:000068EC ; ===========================================================================
.text:000068EC
.text:000068EC ; Segment type: Pure code
.text:000068EC ; Segment permissions: Read/Execute
.text:000068EC _text           segment para public 'CODE' use32
.text:000068EC                 assume cs:_text
.text:000068EC                 ;org 68ECh
.text:000068EC ; COMDAT (pick any)
.text:000068EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068EC
.text:000068EC ; =============== S U B R O U T I N E =======================================
.text:000068EC
.text:000068EC ; Attributes: bp-based frame
.text:000068EC
.text:000068EC ; public: void __thiscall CObjArray2<unsigned int>::SetSize(unsigned int)
.text:000068EC                 public ?SetSize@?$CObjArray2@I@@QAEXI@Z
.text:000068EC ?SetSize@?$CObjArray2@I@@QAEXI@Z proc near
.text:000068EC                                         ; CODE XREF: NArchive::N7z::CInByte2::ParseFolder(NArchive::N7z::CFolder &)+232p
.text:000068EC
.text:000068EC var_10          = dword ptr -10h
.text:000068EC var_C           = dword ptr -0Ch
.text:000068EC var_8           = dword ptr -8
.text:000068EC var_4           = dword ptr -4
.text:000068EC arg_0           = dword ptr  8
.text:000068EC
.text:000068EC                 push    ebp
.text:000068ED                 mov     ebp, esp
.text:000068EF                 sub     esp, 10h
.text:000068F2                 mov     eax, 0CCCCCCCCh
.text:000068F7                 mov     [ebp+var_10], eax
.text:000068FA                 mov     [ebp+var_C], eax
.text:000068FD                 mov     [ebp+var_8], eax
.text:00006900                 mov     [ebp+var_4], eax
.text:00006903                 mov     [ebp+var_4], ecx
.text:00006906                 mov     eax, [ebp+var_4]
.text:00006909                 mov     ecx, [ebp+arg_0]
.text:0000690C                 cmp     ecx, [eax+4]
.text:0000690F                 jnz     short loc_6913
.text:00006911                 jmp     short loc_696A
.text:00006913 ; ---------------------------------------------------------------------------
.text:00006913
.text:00006913 loc_6913:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+23j
.text:00006913                 mov     [ebp+var_8], 0
.text:0000691A                 cmp     [ebp+arg_0], 0
.text:0000691E                 jz      short loc_6945
.text:00006920                 xor     ecx, ecx
.text:00006922                 mov     eax, [ebp+arg_0]
.text:00006925                 mov     edx, 4
.text:0000692A                 mul     edx
.text:0000692C                 seto    cl
.text:0000692F                 neg     ecx
.text:00006931                 or      ecx, eax
.text:00006933                 push    ecx             ; unsigned int
.text:00006934                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006939                 add     esp, 4
.text:0000693C                 mov     [ebp+var_C], eax
.text:0000693F                 mov     eax, [ebp+var_C]
.text:00006942                 mov     [ebp+var_8], eax
.text:00006945
.text:00006945 loc_6945:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+32j
.text:00006945                 mov     ecx, [ebp+var_4]
.text:00006948                 mov     edx, [ecx]
.text:0000694A                 mov     [ebp+var_10], edx
.text:0000694D                 mov     eax, [ebp+var_10]
.text:00006950                 push    eax             ; void *
.text:00006951                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006956                 add     esp, 4
.text:00006959                 mov     ecx, [ebp+var_4]
.text:0000695C                 mov     edx, [ebp+var_8]
.text:0000695F                 mov     [ecx], edx
.text:00006961                 mov     eax, [ebp+var_4]
.text:00006964                 mov     ecx, [ebp+arg_0]
.text:00006967                 mov     [eax+4], ecx
.text:0000696A
.text:0000696A loc_696A:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+25j
.text:0000696A                 add     esp, 10h
.text:0000696D                 cmp     ebp, esp
.text:0000696F                 call    __RTC_CheckEsp
.text:00006974                 mov     esp, ebp
.text:00006976                 pop     ebp
.text:00006977                 retn    4
.text:00006977 ?SetSize@?$CObjArray2@I@@QAEXI@Z endp
.text:00006977
.text:00006977 ; ---------------------------------------------------------------------------
.text:0000697A                 align 4
.text:0000697A _text           ends
.text:0000697A
.text:0000697C ; ===========================================================================
.text:0000697C
.text:0000697C ; Segment type: Pure code
.text:0000697C ; Segment permissions: Read/Execute
.text:0000697C _text           segment para public 'CODE' use32
.text:0000697C                 assume cs:_text
.text:0000697C                 ;org 697Ch
.text:0000697C ; COMDAT (pick any)
.text:0000697C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000697C
.text:0000697C ; =============== S U B R O U T I N E =======================================
.text:0000697C
.text:0000697C ; Attributes: bp-based frame
.text:0000697C
.text:0000697C ; public: void __thiscall CObjArray<unsigned __int64>::Free(void)
.text:0000697C                 public ?Free@?$CObjArray@_K@@QAEXXZ
.text:0000697C ?Free@?$CObjArray@_K@@QAEXXZ proc near  ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+1Dp
.text:0000697C                                         ; NArchive::N7z::CFolders::Clear(void)+48p
.text:0000697C
.text:0000697C var_8           = dword ptr -8
.text:0000697C var_4           = dword ptr -4
.text:0000697C
.text:0000697C                 push    ebp
.text:0000697D                 mov     ebp, esp
.text:0000697F                 sub     esp, 8
.text:00006982                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006989                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006990                 mov     [ebp+var_4], ecx
.text:00006993                 mov     eax, [ebp+var_4]
.text:00006996                 mov     ecx, [eax]
.text:00006998                 mov     [ebp+var_8], ecx
.text:0000699B                 mov     edx, [ebp+var_8]
.text:0000699E                 push    edx             ; void *
.text:0000699F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069A4                 add     esp, 4
.text:000069A7                 mov     eax, [ebp+var_4]
.text:000069AA                 mov     dword ptr [eax], 0
.text:000069B0                 add     esp, 8
.text:000069B3                 cmp     ebp, esp
.text:000069B5                 call    __RTC_CheckEsp
.text:000069BA                 mov     esp, ebp
.text:000069BC                 pop     ebp
.text:000069BD                 retn
.text:000069BD ?Free@?$CObjArray@_K@@QAEXXZ endp
.text:000069BD
.text:000069BD ; ---------------------------------------------------------------------------
.text:000069BE                 align 10h
.text:000069BE _text           ends
.text:000069BE
.text:000069C0 ; ===========================================================================
.text:000069C0
.text:000069C0 ; Segment type: Pure code
.text:000069C0 ; Segment permissions: Read/Execute
.text:000069C0 _text           segment para public 'CODE' use32
.text:000069C0                 assume cs:_text
.text:000069C0                 ;org 69C0h
.text:000069C0 ; COMDAT (pick any)
.text:000069C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000069C0
.text:000069C0 ; =============== S U B R O U T I N E =======================================
.text:000069C0
.text:000069C0 ; Attributes: bp-based frame
.text:000069C0
.text:000069C0 ; public: __thiscall CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:000069C0                 public ??0?$CObjArray@_K@@QAE@XZ
.text:000069C0 ??0?$CObjArray@_K@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+33p
.text:000069C0                                         ; NArchive::N7z::CFolders::CFolders(void)+63p
.text:000069C0
.text:000069C0 var_4           = dword ptr -4
.text:000069C0
.text:000069C0                 push    ebp
.text:000069C1                 mov     ebp, esp
.text:000069C3                 push    ecx
.text:000069C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069CB                 mov     [ebp+var_4], ecx
.text:000069CE                 mov     eax, [ebp+var_4]
.text:000069D1                 mov     dword ptr [eax], 0
.text:000069D7                 mov     eax, [ebp+var_4]
.text:000069DA                 mov     esp, ebp
.text:000069DC                 pop     ebp
.text:000069DD                 retn
.text:000069DD ??0?$CObjArray@_K@@QAE@XZ endp
.text:000069DD
.text:000069DD ; ---------------------------------------------------------------------------
.text:000069DE                 align 10h
.text:000069DE _text           ends
.text:000069DE
.text:000069E0 ; ===========================================================================
.text:000069E0
.text:000069E0 ; Segment type: Pure code
.text:000069E0 ; Segment permissions: Read/Execute
.text:000069E0 _text           segment para public 'CODE' use32
.text:000069E0                 assume cs:_text
.text:000069E0                 ;org 69E0h
.text:000069E0 ; COMDAT (pick any)
.text:000069E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000069E0
.text:000069E0 ; =============== S U B R O U T I N E =======================================
.text:000069E0
.text:000069E0 ; Attributes: bp-based frame
.text:000069E0
.text:000069E0 ; public: __thiscall CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:000069E0                 public ??1?$CObjArray@_K@@QAE@XZ
.text:000069E0 ??1?$CObjArray@_K@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0+6j
.text:000069E0                                         ; __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3+6j ...
.text:000069E0
.text:000069E0 var_8           = dword ptr -8
.text:000069E0 var_4           = dword ptr -4
.text:000069E0
.text:000069E0                 push    ebp
.text:000069E1                 mov     ebp, esp
.text:000069E3                 sub     esp, 8
.text:000069E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000069ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069F4                 mov     [ebp+var_4], ecx
.text:000069F7                 mov     eax, [ebp+var_4]
.text:000069FA                 mov     ecx, [eax]
.text:000069FC                 mov     [ebp+var_8], ecx
.text:000069FF                 mov     edx, [ebp+var_8]
.text:00006A02                 push    edx             ; void *
.text:00006A03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A08                 add     esp, 4
.text:00006A0B                 add     esp, 8
.text:00006A0E                 cmp     ebp, esp
.text:00006A10                 call    __RTC_CheckEsp
.text:00006A15                 mov     esp, ebp
.text:00006A17                 pop     ebp
.text:00006A18                 retn
.text:00006A18 ??1?$CObjArray@_K@@QAE@XZ endp
.text:00006A18
.text:00006A18 ; ---------------------------------------------------------------------------
.text:00006A19                 align 4
.text:00006A19 _text           ends
.text:00006A19
.text:00006A1C ; ===========================================================================
.text:00006A1C
.text:00006A1C ; Segment type: Pure code
.text:00006A1C ; Segment permissions: Read/Execute
.text:00006A1C _text           segment para public 'CODE' use32
.text:00006A1C                 assume cs:_text
.text:00006A1C                 ;org 6A1Ch
.text:00006A1C ; COMDAT (pick any)
.text:00006A1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A1C
.text:00006A1C ; =============== S U B R O U T I N E =======================================
.text:00006A1C
.text:00006A1C ; Attributes: bp-based frame
.text:00006A1C
.text:00006A1C ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00006A1C                 public ??B?$CObjArray@_K@@QAEPA_KXZ
.text:00006A1C ??B?$CObjArray@_K@@QAEPA_KXZ proc near  ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+99p
.text:00006A1C                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+EDp ...
.text:00006A1C
.text:00006A1C var_4           = dword ptr -4
.text:00006A1C
.text:00006A1C                 push    ebp
.text:00006A1D                 mov     ebp, esp
.text:00006A1F                 push    ecx
.text:00006A20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A27                 mov     [ebp+var_4], ecx
.text:00006A2A                 mov     eax, [ebp+var_4]
.text:00006A2D                 mov     eax, [eax]
.text:00006A2F                 mov     esp, ebp
.text:00006A31                 pop     ebp
.text:00006A32                 retn
.text:00006A32 ??B?$CObjArray@_K@@QAEPA_KXZ endp
.text:00006A32
.text:00006A32 ; ---------------------------------------------------------------------------
.text:00006A33                 align 4
.text:00006A33 _text           ends
.text:00006A33
.text:00006A34 ; ===========================================================================
.text:00006A34
.text:00006A34 ; Segment type: Pure code
.text:00006A34 ; Segment permissions: Read/Execute
.text:00006A34 _text           segment para public 'CODE' use32
.text:00006A34                 assume cs:_text
.text:00006A34                 ;org 6A34h
.text:00006A34 ; COMDAT (pick any)
.text:00006A34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A34
.text:00006A34 ; =============== S U B R O U T I N E =======================================
.text:00006A34
.text:00006A34 ; Attributes: bp-based frame
.text:00006A34
.text:00006A34 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)const
.text:00006A34                 public ??B?$CObjArray@_K@@QBEPB_KXZ
.text:00006A34 ??B?$CObjArray@_K@@QBEPB_KXZ proc near  ; CODE XREF: NArchive::N7z::CFolders::GetFolderUnpackSize(uint)+16p
.text:00006A34
.text:00006A34 var_4           = dword ptr -4
.text:00006A34
.text:00006A34                 push    ebp
.text:00006A35                 mov     ebp, esp
.text:00006A37                 push    ecx
.text:00006A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A3F                 mov     [ebp+var_4], ecx
.text:00006A42                 mov     eax, [ebp+var_4]
.text:00006A45                 mov     eax, [eax]
.text:00006A47                 mov     esp, ebp
.text:00006A49                 pop     ebp
.text:00006A4A                 retn
.text:00006A4A ??B?$CObjArray@_K@@QBEPB_KXZ endp
.text:00006A4A
.text:00006A4A ; ---------------------------------------------------------------------------
.text:00006A4B                 align 4
.text:00006A4B _text           ends
.text:00006A4B
.text:00006A4C ; ===========================================================================
.text:00006A4C
.text:00006A4C ; Segment type: Pure code
.text:00006A4C ; Segment permissions: Read/Execute
.text:00006A4C _text           segment para public 'CODE' use32
.text:00006A4C                 assume cs:_text
.text:00006A4C                 ;org 6A4Ch
.text:00006A4C ; COMDAT (pick any)
.text:00006A4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A4C
.text:00006A4C ; =============== S U B R O U T I N E =======================================
.text:00006A4C
.text:00006A4C ; Attributes: bp-based frame
.text:00006A4C
.text:00006A4C ; public: void __thiscall CObjArray<unsigned __int64>::Alloc(unsigned int)
.text:00006A4C                 public ?Alloc@?$CObjArray@_K@@QAEXI@Z
.text:00006A4C ?Alloc@?$CObjArray@_K@@QAEXI@Z proc near
.text:00006A4C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+5Ep
.text:00006A4C                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+6B0p ...
.text:00006A4C
.text:00006A4C var_C           = dword ptr -0Ch
.text:00006A4C var_8           = dword ptr -8
.text:00006A4C var_4           = dword ptr -4
.text:00006A4C arg_0           = dword ptr  8
.text:00006A4C
.text:00006A4C                 push    ebp
.text:00006A4D                 mov     ebp, esp
.text:00006A4F                 sub     esp, 0Ch
.text:00006A52                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006A59                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006A60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A67                 mov     [ebp+var_4], ecx
.text:00006A6A                 mov     eax, [ebp+var_4]
.text:00006A6D                 mov     ecx, [eax]
.text:00006A6F                 mov     [ebp+var_8], ecx
.text:00006A72                 mov     edx, [ebp+var_8]
.text:00006A75                 push    edx             ; void *
.text:00006A76                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A7B                 add     esp, 4
.text:00006A7E                 mov     eax, [ebp+var_4]
.text:00006A81                 mov     dword ptr [eax], 0
.text:00006A87                 xor     ecx, ecx
.text:00006A89                 mov     eax, [ebp+arg_0]
.text:00006A8C                 mov     edx, 8
.text:00006A91                 mul     edx
.text:00006A93                 seto    cl
.text:00006A96                 neg     ecx
.text:00006A98                 or      ecx, eax
.text:00006A9A                 push    ecx             ; unsigned int
.text:00006A9B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006AA0                 add     esp, 4
.text:00006AA3                 mov     [ebp+var_C], eax
.text:00006AA6                 mov     eax, [ebp+var_4]
.text:00006AA9                 mov     ecx, [ebp+var_C]
.text:00006AAC                 mov     [eax], ecx
.text:00006AAE                 add     esp, 0Ch
.text:00006AB1                 cmp     ebp, esp
.text:00006AB3                 call    __RTC_CheckEsp
.text:00006AB8                 mov     esp, ebp
.text:00006ABA                 pop     ebp
.text:00006ABB                 retn    4
.text:00006ABB ?Alloc@?$CObjArray@_K@@QAEXI@Z endp
.text:00006ABB
.text:00006ABB ; ---------------------------------------------------------------------------
.text:00006ABE                 align 10h
.text:00006ABE _text           ends
.text:00006ABE
.text:00006AC0 ; ===========================================================================
.text:00006AC0
.text:00006AC0 ; Segment type: Pure code
.text:00006AC0 ; Segment permissions: Read/Execute
.text:00006AC0 _text           segment para public 'CODE' use32
.text:00006AC0                 assume cs:_text
.text:00006AC0                 ;org 6AC0h
.text:00006AC0 ; COMDAT (pick any)
.text:00006AC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006AC0
.text:00006AC0 ; =============== S U B R O U T I N E =======================================
.text:00006AC0
.text:00006AC0 ; Attributes: bp-based frame
.text:00006AC0
.text:00006AC0 ; public: void __thiscall CObjArray<unsigned int>::Free(void)
.text:00006AC0                 public ?Free@?$CObjArray@I@@QAEXXZ
.text:00006AC0 ?Free@?$CObjArray@I@@QAEXXZ proc near   ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+73p
.text:00006AC0                                         ; NArchive::N7z::CDbEx::Clear(void)+81p ...
.text:00006AC0
.text:00006AC0 var_8           = dword ptr -8
.text:00006AC0 var_4           = dword ptr -4
.text:00006AC0
.text:00006AC0                 push    ebp
.text:00006AC1                 mov     ebp, esp
.text:00006AC3                 sub     esp, 8
.text:00006AC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006ACD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AD4                 mov     [ebp+var_4], ecx
.text:00006AD7                 mov     eax, [ebp+var_4]
.text:00006ADA                 mov     ecx, [eax]
.text:00006ADC                 mov     [ebp+var_8], ecx
.text:00006ADF                 mov     edx, [ebp+var_8]
.text:00006AE2                 push    edx             ; void *
.text:00006AE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006AE8                 add     esp, 4
.text:00006AEB                 mov     eax, [ebp+var_4]
.text:00006AEE                 mov     dword ptr [eax], 0
.text:00006AF4                 add     esp, 8
.text:00006AF7                 cmp     ebp, esp
.text:00006AF9                 call    __RTC_CheckEsp
.text:00006AFE                 mov     esp, ebp
.text:00006B00                 pop     ebp
.text:00006B01                 retn
.text:00006B01 ?Free@?$CObjArray@I@@QAEXXZ endp
.text:00006B01
.text:00006B01 ; ---------------------------------------------------------------------------
.text:00006B02                 align 4
.text:00006B02 _text           ends
.text:00006B02
.text:00006B04 ; ===========================================================================
.text:00006B04
.text:00006B04 ; Segment type: Pure code
.text:00006B04 ; Segment permissions: Read/Execute
.text:00006B04 _text           segment para public 'CODE' use32
.text:00006B04                 assume cs:_text
.text:00006B04                 ;org 6B04h
.text:00006B04 ; COMDAT (pick any)
.text:00006B04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B04
.text:00006B04 ; =============== S U B R O U T I N E =======================================
.text:00006B04
.text:00006B04 ; Attributes: bp-based frame
.text:00006B04
.text:00006B04 ; public: __thiscall CObjArray<unsigned int>::CObjArray<unsigned int>(void)
.text:00006B04                 public ??0?$CObjArray@I@@QAE@XZ
.text:00006B04 ??0?$CObjArray@I@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+54p
.text:00006B04                                         ; NArchive::N7z::CFolders::CFolders(void)+72p ...
.text:00006B04
.text:00006B04 var_4           = dword ptr -4
.text:00006B04
.text:00006B04                 push    ebp
.text:00006B05                 mov     ebp, esp
.text:00006B07                 push    ecx
.text:00006B08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B0F                 mov     [ebp+var_4], ecx
.text:00006B12                 mov     eax, [ebp+var_4]
.text:00006B15                 mov     dword ptr [eax], 0
.text:00006B1B                 mov     eax, [ebp+var_4]
.text:00006B1E                 mov     esp, ebp
.text:00006B20                 pop     ebp
.text:00006B21                 retn
.text:00006B21 ??0?$CObjArray@I@@QAE@XZ endp
.text:00006B21
.text:00006B21 ; ---------------------------------------------------------------------------
.text:00006B22                 align 4
.text:00006B22 _text           ends
.text:00006B22
.text:00006B24 ; ===========================================================================
.text:00006B24
.text:00006B24 ; Segment type: Pure code
.text:00006B24 ; Segment permissions: Read/Execute
.text:00006B24 _text           segment para public 'CODE' use32
.text:00006B24                 assume cs:_text
.text:00006B24                 ;org 6B24h
.text:00006B24 ; COMDAT (pick any)
.text:00006B24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B24
.text:00006B24 ; =============== S U B R O U T I N E =======================================
.text:00006B24
.text:00006B24 ; Attributes: bp-based frame
.text:00006B24
.text:00006B24 ; public: __thiscall CObjArray<unsigned int>::~CObjArray<unsigned int>(void)
.text:00006B24                 public ??1?$CObjArray@I@@QAE@XZ
.text:00006B24 ??1?$CObjArray@I@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2+6j
.text:00006B24                                         ; __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4+6j ...
.text:00006B24
.text:00006B24 var_8           = dword ptr -8
.text:00006B24 var_4           = dword ptr -4
.text:00006B24
.text:00006B24                 push    ebp
.text:00006B25                 mov     ebp, esp
.text:00006B27                 sub     esp, 8
.text:00006B2A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006B31                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B38                 mov     [ebp+var_4], ecx
.text:00006B3B                 mov     eax, [ebp+var_4]
.text:00006B3E                 mov     ecx, [eax]
.text:00006B40                 mov     [ebp+var_8], ecx
.text:00006B43                 mov     edx, [ebp+var_8]
.text:00006B46                 push    edx             ; void *
.text:00006B47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006B4C                 add     esp, 4
.text:00006B4F                 add     esp, 8
.text:00006B52                 cmp     ebp, esp
.text:00006B54                 call    __RTC_CheckEsp
.text:00006B59                 mov     esp, ebp
.text:00006B5B                 pop     ebp
.text:00006B5C                 retn
.text:00006B5C ??1?$CObjArray@I@@QAE@XZ endp
.text:00006B5C
.text:00006B5C ; ---------------------------------------------------------------------------
.text:00006B5D                 align 10h
.text:00006B5D _text           ends
.text:00006B5D
.text:00006B60 ; ===========================================================================
.text:00006B60
.text:00006B60 ; Segment type: Pure code
.text:00006B60 ; Segment permissions: Read/Execute
.text:00006B60 _text           segment para public 'CODE' use32
.text:00006B60                 assume cs:_text
.text:00006B60                 ;org 6B60h
.text:00006B60 ; COMDAT (pick any)
.text:00006B60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B60
.text:00006B60 ; =============== S U B R O U T I N E =======================================
.text:00006B60
.text:00006B60 ; Attributes: bp-based frame
.text:00006B60
.text:00006B60 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int *(void)
.text:00006B60                 public ??B?$CObjArray@I@@QAEPAIXZ
.text:00006B60 ??B?$CObjArray@I@@QAEPAIXZ proc near    ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+144p
.text:00006B60                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+5B3p ...
.text:00006B60
.text:00006B60 var_4           = dword ptr -4
.text:00006B60
.text:00006B60                 push    ebp
.text:00006B61                 mov     ebp, esp
.text:00006B63                 push    ecx
.text:00006B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B6B                 mov     [ebp+var_4], ecx
.text:00006B6E                 mov     eax, [ebp+var_4]
.text:00006B71                 mov     eax, [eax]
.text:00006B73                 mov     esp, ebp
.text:00006B75                 pop     ebp
.text:00006B76                 retn
.text:00006B76 ??B?$CObjArray@I@@QAEPAIXZ endp
.text:00006B76
.text:00006B76 ; ---------------------------------------------------------------------------
.text:00006B77                 align 4
.text:00006B77 _text           ends
.text:00006B77
.text:00006B78 ; ===========================================================================
.text:00006B78
.text:00006B78 ; Segment type: Pure code
.text:00006B78 ; Segment permissions: Read/Execute
.text:00006B78 _text           segment para public 'CODE' use32
.text:00006B78                 assume cs:_text
.text:00006B78                 ;org 6B78h
.text:00006B78 ; COMDAT (pick any)
.text:00006B78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B78
.text:00006B78 ; =============== S U B R O U T I N E =======================================
.text:00006B78
.text:00006B78 ; Attributes: bp-based frame
.text:00006B78
.text:00006B78 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int const *(void)const
.text:00006B78                 public ??B?$CObjArray@I@@QBEPBIXZ
.text:00006B78 ??B?$CObjArray@I@@QBEPBIXZ proc near    ; CODE XREF: NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+2Cp
.text:00006B78                                         ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)+40p ...
.text:00006B78
.text:00006B78 var_4           = dword ptr -4
.text:00006B78
.text:00006B78                 push    ebp
.text:00006B79                 mov     ebp, esp
.text:00006B7B                 push    ecx
.text:00006B7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B83                 mov     [ebp+var_4], ecx
.text:00006B86                 mov     eax, [ebp+var_4]
.text:00006B89                 mov     eax, [eax]
.text:00006B8B                 mov     esp, ebp
.text:00006B8D                 pop     ebp
.text:00006B8E                 retn
.text:00006B8E ??B?$CObjArray@I@@QBEPBIXZ endp
.text:00006B8E
.text:00006B8E ; ---------------------------------------------------------------------------
.text:00006B8F                 align 10h
.text:00006B8F _text           ends
.text:00006B8F
.text:00006B90 ; ===========================================================================
.text:00006B90
.text:00006B90 ; Segment type: Pure code
.text:00006B90 ; Segment permissions: Read/Execute
.text:00006B90 _text           segment para public 'CODE' use32
.text:00006B90                 assume cs:_text
.text:00006B90                 ;org 6B90h
.text:00006B90 ; COMDAT (pick any)
.text:00006B90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B90
.text:00006B90 ; =============== S U B R O U T I N E =======================================
.text:00006B90
.text:00006B90 ; Attributes: bp-based frame
.text:00006B90
.text:00006B90 ; public: void __thiscall CObjArray<unsigned int>::Alloc(unsigned int)
.text:00006B90                 public ?Alloc@?$CObjArray@I@@QAEXI@Z
.text:00006B90 ?Alloc@?$CObjArray@I@@QAEXI@Z proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+A2p
.text:00006B90                                         ; NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+C3p ...
.text:00006B90
.text:00006B90 var_C           = dword ptr -0Ch
.text:00006B90 var_8           = dword ptr -8
.text:00006B90 var_4           = dword ptr -4
.text:00006B90 arg_0           = dword ptr  8
.text:00006B90
.text:00006B90                 push    ebp
.text:00006B91                 mov     ebp, esp
.text:00006B93                 sub     esp, 0Ch
.text:00006B96                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006B9D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006BA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BAB                 mov     [ebp+var_4], ecx
.text:00006BAE                 mov     eax, [ebp+var_4]
.text:00006BB1                 mov     ecx, [eax]
.text:00006BB3                 mov     [ebp+var_8], ecx
.text:00006BB6                 mov     edx, [ebp+var_8]
.text:00006BB9                 push    edx             ; void *
.text:00006BBA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006BBF                 add     esp, 4
.text:00006BC2                 mov     eax, [ebp+var_4]
.text:00006BC5                 mov     dword ptr [eax], 0
.text:00006BCB                 xor     ecx, ecx
.text:00006BCD                 mov     eax, [ebp+arg_0]
.text:00006BD0                 mov     edx, 4
.text:00006BD5                 mul     edx
.text:00006BD7                 seto    cl
.text:00006BDA                 neg     ecx
.text:00006BDC                 or      ecx, eax
.text:00006BDE                 push    ecx             ; unsigned int
.text:00006BDF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006BE4                 add     esp, 4
.text:00006BE7                 mov     [ebp+var_C], eax
.text:00006BEA                 mov     eax, [ebp+var_4]
.text:00006BED                 mov     ecx, [ebp+var_C]
.text:00006BF0                 mov     [eax], ecx
.text:00006BF2                 add     esp, 0Ch
.text:00006BF5                 cmp     ebp, esp
.text:00006BF7                 call    __RTC_CheckEsp
.text:00006BFC                 mov     esp, ebp
.text:00006BFE                 pop     ebp
.text:00006BFF                 retn    4
.text:00006BFF ?Alloc@?$CObjArray@I@@QAEXI@Z endp
.text:00006BFF
.text:00006BFF ; ---------------------------------------------------------------------------
.text:00006C02                 align 4
.text:00006C02 _text           ends
.text:00006C02
.text:00006C04 ; ===========================================================================
.text:00006C04
.text:00006C04 ; Segment type: Pure code
.text:00006C04 ; Segment permissions: Read/Execute
.text:00006C04 _text           segment para public 'CODE' use32
.text:00006C04                 assume cs:_text
.text:00006C04                 ;org 6C04h
.text:00006C04 ; COMDAT (pick any)
.text:00006C04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C04
.text:00006C04 ; =============== S U B R O U T I N E =======================================
.text:00006C04
.text:00006C04 ; Attributes: bp-based frame
.text:00006C04
.text:00006C04 ; public: void __thiscall CObjArray<unsigned char>::Free(void)
.text:00006C04                 public ?Free@?$CObjArray@E@@QAEXXZ
.text:00006C04 ?Free@?$CObjArray@E@@QAEXXZ proc near   ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+69p
.text:00006C04
.text:00006C04 var_8           = dword ptr -8
.text:00006C04 var_4           = dword ptr -4
.text:00006C04
.text:00006C04                 push    ebp
.text:00006C05                 mov     ebp, esp
.text:00006C07                 sub     esp, 8
.text:00006C0A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C18                 mov     [ebp+var_4], ecx
.text:00006C1B                 mov     eax, [ebp+var_4]
.text:00006C1E                 mov     ecx, [eax]
.text:00006C20                 mov     [ebp+var_8], ecx
.text:00006C23                 mov     edx, [ebp+var_8]
.text:00006C26                 push    edx             ; void *
.text:00006C27                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C2C                 add     esp, 4
.text:00006C2F                 mov     eax, [ebp+var_4]
.text:00006C32                 mov     dword ptr [eax], 0
.text:00006C38                 add     esp, 8
.text:00006C3B                 cmp     ebp, esp
.text:00006C3D                 call    __RTC_CheckEsp
.text:00006C42                 mov     esp, ebp
.text:00006C44                 pop     ebp
.text:00006C45                 retn
.text:00006C45 ?Free@?$CObjArray@E@@QAEXXZ endp
.text:00006C45
.text:00006C45 ; ---------------------------------------------------------------------------
.text:00006C46                 align 4
.text:00006C46 _text           ends
.text:00006C46
.text:00006C48 ; ===========================================================================
.text:00006C48
.text:00006C48 ; Segment type: Pure code
.text:00006C48 ; Segment permissions: Read/Execute
.text:00006C48 _text           segment para public 'CODE' use32
.text:00006C48                 assume cs:_text
.text:00006C48                 ;org 6C48h
.text:00006C48 ; COMDAT (pick any)
.text:00006C48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C48
.text:00006C48 ; =============== S U B R O U T I N E =======================================
.text:00006C48
.text:00006C48 ; Attributes: bp-based frame
.text:00006C48
.text:00006C48 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:00006C48                 public ??0?$CObjArray@E@@QAE@I@Z
.text:00006C48 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+AAp
.text:00006C48
.text:00006C48 var_8           = dword ptr -8
.text:00006C48 var_4           = dword ptr -4
.text:00006C48 arg_0           = dword ptr  8
.text:00006C48
.text:00006C48                 push    ebp
.text:00006C49                 mov     ebp, esp
.text:00006C4B                 sub     esp, 8
.text:00006C4E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C5C                 mov     [ebp+var_4], ecx
.text:00006C5F                 mov     eax, [ebp+var_4]
.text:00006C62                 mov     dword ptr [eax], 0
.text:00006C68                 cmp     [ebp+arg_0], 0
.text:00006C6C                 jz      short loc_6C85
.text:00006C6E                 mov     ecx, [ebp+arg_0]
.text:00006C71                 push    ecx             ; unsigned int
.text:00006C72                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006C77                 add     esp, 4
.text:00006C7A                 mov     [ebp+var_8], eax
.text:00006C7D                 mov     edx, [ebp+var_4]
.text:00006C80                 mov     eax, [ebp+var_8]
.text:00006C83                 mov     [edx], eax
.text:00006C85
.text:00006C85 loc_6C85:                               ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:00006C85                 mov     eax, [ebp+var_4]
.text:00006C88                 add     esp, 8
.text:00006C8B                 cmp     ebp, esp
.text:00006C8D                 call    __RTC_CheckEsp
.text:00006C92                 mov     esp, ebp
.text:00006C94                 pop     ebp
.text:00006C95                 retn    4
.text:00006C95 ??0?$CObjArray@E@@QAE@I@Z endp
.text:00006C95
.text:00006C95 _text           ends
.text:00006C95
.text:00006C98 ; ===========================================================================
.text:00006C98
.text:00006C98 ; Segment type: Pure code
.text:00006C98 ; Segment permissions: Read/Execute
.text:00006C98 _text           segment para public 'CODE' use32
.text:00006C98                 assume cs:_text
.text:00006C98                 ;org 6C98h
.text:00006C98 ; COMDAT (pick any)
.text:00006C98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C98
.text:00006C98 ; =============== S U B R O U T I N E =======================================
.text:00006C98
.text:00006C98 ; Attributes: bp-based frame
.text:00006C98
.text:00006C98 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(void)
.text:00006C98                 public ??0?$CObjArray@E@@QAE@XZ
.text:00006C98 ??0?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+90p
.text:00006C98
.text:00006C98 var_4           = dword ptr -4
.text:00006C98
.text:00006C98                 push    ebp
.text:00006C99                 mov     ebp, esp
.text:00006C9B                 push    ecx
.text:00006C9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CA3                 mov     [ebp+var_4], ecx
.text:00006CA6                 mov     eax, [ebp+var_4]
.text:00006CA9                 mov     dword ptr [eax], 0
.text:00006CAF                 mov     eax, [ebp+var_4]
.text:00006CB2                 mov     esp, ebp
.text:00006CB4                 pop     ebp
.text:00006CB5                 retn
.text:00006CB5 ??0?$CObjArray@E@@QAE@XZ endp
.text:00006CB5
.text:00006CB5 ; ---------------------------------------------------------------------------
.text:00006CB6                 align 4
.text:00006CB6 _text           ends
.text:00006CB6
.text:00006CB8 ; ===========================================================================
.text:00006CB8
.text:00006CB8 ; Segment type: Pure code
.text:00006CB8 ; Segment permissions: Read/Execute
.text:00006CB8 _text           segment para public 'CODE' use32
.text:00006CB8                 assume cs:_text
.text:00006CB8                 ;org 6CB8h
.text:00006CB8 ; COMDAT (pick any)
.text:00006CB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CB8
.text:00006CB8 ; =============== S U B R O U T I N E =======================================
.text:00006CB8
.text:00006CB8 ; Attributes: bp-based frame
.text:00006CB8
.text:00006CB8 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00006CB8                 public ??1?$CObjArray@E@@QAE@XZ
.text:00006CB8 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+139p
.text:00006CB8                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+191p ...
.text:00006CB8
.text:00006CB8 var_8           = dword ptr -8
.text:00006CB8 var_4           = dword ptr -4
.text:00006CB8
.text:00006CB8                 push    ebp
.text:00006CB9                 mov     ebp, esp
.text:00006CBB                 sub     esp, 8
.text:00006CBE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006CC5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CCC                 mov     [ebp+var_4], ecx
.text:00006CCF                 mov     eax, [ebp+var_4]
.text:00006CD2                 mov     ecx, [eax]
.text:00006CD4                 mov     [ebp+var_8], ecx
.text:00006CD7                 mov     edx, [ebp+var_8]
.text:00006CDA                 push    edx             ; void *
.text:00006CDB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006CE0                 add     esp, 4
.text:00006CE3                 add     esp, 8
.text:00006CE6                 cmp     ebp, esp
.text:00006CE8                 call    __RTC_CheckEsp
.text:00006CED                 mov     esp, ebp
.text:00006CEF                 pop     ebp
.text:00006CF0                 retn
.text:00006CF0 ??1?$CObjArray@E@@QAE@XZ endp
.text:00006CF0
.text:00006CF0 ; ---------------------------------------------------------------------------
.text:00006CF1                 align 4
.text:00006CF1 _text           ends
.text:00006CF1
.text:00006CF4 ; ===========================================================================
.text:00006CF4
.text:00006CF4 ; Segment type: Pure code
.text:00006CF4 ; Segment permissions: Read/Execute
.text:00006CF4 _text           segment para public 'CODE' use32
.text:00006CF4                 assume cs:_text
.text:00006CF4                 ;org 6CF4h
.text:00006CF4 ; COMDAT (pick any)
.text:00006CF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CF4
.text:00006CF4 ; =============== S U B R O U T I N E =======================================
.text:00006CF4
.text:00006CF4 ; Attributes: bp-based frame
.text:00006CF4
.text:00006CF4 ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:00006CF4                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:00006CF4 ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+C2p
.text:00006CF4                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+15Ap ...
.text:00006CF4
.text:00006CF4 var_4           = dword ptr -4
.text:00006CF4
.text:00006CF4                 push    ebp
.text:00006CF5                 mov     ebp, esp
.text:00006CF7                 push    ecx
.text:00006CF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CFF                 mov     [ebp+var_4], ecx
.text:00006D02                 mov     eax, [ebp+var_4]
.text:00006D05                 mov     eax, [eax]
.text:00006D07                 mov     esp, ebp
.text:00006D09                 pop     ebp
.text:00006D0A                 retn
.text:00006D0A ??B?$CObjArray@E@@QAEPAEXZ endp
.text:00006D0A
.text:00006D0A ; ---------------------------------------------------------------------------
.text:00006D0B                 align 4
.text:00006D0B _text           ends
.text:00006D0B
.text:00006D0C ; ===========================================================================
.text:00006D0C
.text:00006D0C ; Segment type: Pure code
.text:00006D0C ; Segment permissions: Read/Execute
.text:00006D0C _text           segment para public 'CODE' use32
.text:00006D0C                 assume cs:_text
.text:00006D0C                 ;org 6D0Ch
.text:00006D0C ; COMDAT (pick any)
.text:00006D0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D0C
.text:00006D0C ; =============== S U B R O U T I N E =======================================
.text:00006D0C
.text:00006D0C ; Attributes: bp-based frame
.text:00006D0C
.text:00006D0C ; public: __thiscall CObjArray<unsigned char>::operator unsigned char const *(void)const
.text:00006D0C                 public ??B?$CObjArray@E@@QBEPBEXZ
.text:00006D0C ??B?$CObjArray@E@@QBEPBEXZ proc near    ; CODE XREF: NArchive::N7z::CFolders::GetFolderUnpackSize(uint)+30p
.text:00006D0C
.text:00006D0C var_4           = dword ptr -4
.text:00006D0C
.text:00006D0C                 push    ebp
.text:00006D0D                 mov     ebp, esp
.text:00006D0F                 push    ecx
.text:00006D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D17                 mov     [ebp+var_4], ecx
.text:00006D1A                 mov     eax, [ebp+var_4]
.text:00006D1D                 mov     eax, [eax]
.text:00006D1F                 mov     esp, ebp
.text:00006D21                 pop     ebp
.text:00006D22                 retn
.text:00006D22 ??B?$CObjArray@E@@QBEPBEXZ endp
.text:00006D22
.text:00006D22 ; ---------------------------------------------------------------------------
.text:00006D23                 align 4
.text:00006D23 _text           ends
.text:00006D23
.text:00006D24 ; ===========================================================================
.text:00006D24
.text:00006D24 ; Segment type: Pure code
.text:00006D24 ; Segment permissions: Read/Execute
.text:00006D24 _text           segment para public 'CODE' use32
.text:00006D24                 assume cs:_text
.text:00006D24                 ;org 6D24h
.text:00006D24 ; COMDAT (pick any)
.text:00006D24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D24
.text:00006D24 ; =============== S U B R O U T I N E =======================================
.text:00006D24
.text:00006D24 ; Attributes: bp-based frame
.text:00006D24
.text:00006D24 ; public: void __thiscall CObjArray<unsigned char>::Alloc(unsigned int)
.text:00006D24                 public ?Alloc@?$CObjArray@E@@QAEXI@Z
.text:00006D24 ?Alloc@?$CObjArray@E@@QAEXI@Z proc near ; CODE XREF: NArchive::N7z::CInArchive::ReadUnpackInfo(CObjectVector<CBuffer<uchar>> const *,NArchive::N7z::CFolders &)+B1p
.text:00006D24
.text:00006D24 var_C           = dword ptr -0Ch
.text:00006D24 var_8           = dword ptr -8
.text:00006D24 var_4           = dword ptr -4
.text:00006D24 arg_0           = dword ptr  8
.text:00006D24
.text:00006D24                 push    ebp
.text:00006D25                 mov     ebp, esp
.text:00006D27                 sub     esp, 0Ch
.text:00006D2A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006D31                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D3F                 mov     [ebp+var_4], ecx
.text:00006D42                 mov     eax, [ebp+var_4]
.text:00006D45                 mov     ecx, [eax]
.text:00006D47                 mov     [ebp+var_8], ecx
.text:00006D4A                 mov     edx, [ebp+var_8]
.text:00006D4D                 push    edx             ; void *
.text:00006D4E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006D53                 add     esp, 4
.text:00006D56                 mov     eax, [ebp+var_4]
.text:00006D59                 mov     dword ptr [eax], 0
.text:00006D5F                 mov     ecx, [ebp+arg_0]
.text:00006D62                 push    ecx             ; unsigned int
.text:00006D63                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006D68                 add     esp, 4
.text:00006D6B                 mov     [ebp+var_C], eax
.text:00006D6E                 mov     edx, [ebp+var_4]
.text:00006D71                 mov     eax, [ebp+var_C]
.text:00006D74                 mov     [edx], eax
.text:00006D76                 add     esp, 0Ch
.text:00006D79                 cmp     ebp, esp
.text:00006D7B                 call    __RTC_CheckEsp
.text:00006D80                 mov     esp, ebp
.text:00006D82                 pop     ebp
.text:00006D83                 retn    4
.text:00006D83 ?Alloc@?$CObjArray@E@@QAEXI@Z endp
.text:00006D83
.text:00006D83 ; ---------------------------------------------------------------------------
.text:00006D86                 align 4
.text:00006D86 _text           ends
.text:00006D86
.text:00006D88 ; ===========================================================================
.text:00006D88
.text:00006D88 ; Segment type: Pure code
.text:00006D88 ; Segment permissions: Read/Execute
.text:00006D88 _text           segment para public 'CODE' use32
.text:00006D88                 assume cs:_text
.text:00006D88                 ;org 6D88h
.text:00006D88 ; COMDAT (pick any)
.text:00006D88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D88
.text:00006D88 ; =============== S U B R O U T I N E =======================================
.text:00006D88
.text:00006D88 ; Attributes: bp-based frame
.text:00006D88
.text:00006D88 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:00006D88                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:00006D88 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:00006D88                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+400p
.text:00006D88                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+442p ...
.text:00006D88
.text:00006D88 var_4           = dword ptr -4
.text:00006D88
.text:00006D88                 push    ebp
.text:00006D89                 mov     ebp, esp
.text:00006D8B                 push    ecx
.text:00006D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D93                 mov     [ebp+var_4], ecx
.text:00006D96                 mov     eax, [ebp+var_4]
.text:00006D99                 mov     eax, [eax+4]
.text:00006D9C                 mov     esp, ebp
.text:00006D9E                 pop     ebp
.text:00006D9F                 retn
.text:00006D9F ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:00006D9F
.text:00006D9F _text           ends
.text:00006D9F
.text:00006DA0 ; ===========================================================================
.text:00006DA0
.text:00006DA0 ; Segment type: Pure code
.text:00006DA0 ; Segment permissions: Read/Execute
.text:00006DA0 _text           segment para public 'CODE' use32
.text:00006DA0                 assume cs:_text
.text:00006DA0                 ;org 6DA0h
.text:00006DA0 ; COMDAT (pick any)
.text:00006DA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DA0
.text:00006DA0 ; =============== S U B R O U T I N E =======================================
.text:00006DA0
.text:00006DA0 ; Attributes: bp-based frame
.text:00006DA0
.text:00006DA0 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::ClearAndSetSize(unsigned int)
.text:00006DA0                 public ?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
.text:00006DA0 ?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z proc near
.text:00006DA0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1F5p
.text:00006DA0
.text:00006DA0 var_4           = dword ptr -4
.text:00006DA0 arg_0           = dword ptr  8
.text:00006DA0
.text:00006DA0                 push    ebp
.text:00006DA1                 mov     ebp, esp
.text:00006DA3                 push    ecx
.text:00006DA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DAB                 mov     [ebp+var_4], ecx
.text:00006DAE                 mov     eax, [ebp+arg_0]
.text:00006DB1                 push    eax
.text:00006DB2                 mov     ecx, [ebp+var_4]
.text:00006DB5                 call    ?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)
.text:00006DBA                 mov     ecx, [ebp+var_4]
.text:00006DBD                 mov     edx, [ebp+arg_0]
.text:00006DC0                 mov     [ecx+4], edx
.text:00006DC3                 add     esp, 4
.text:00006DC6                 cmp     ebp, esp
.text:00006DC8                 call    __RTC_CheckEsp
.text:00006DCD                 mov     esp, ebp
.text:00006DCF                 pop     ebp
.text:00006DD0                 retn    4
.text:00006DD0 ?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z endp
.text:00006DD0
.text:00006DD0 ; ---------------------------------------------------------------------------
.text:00006DD3                 align 4
.text:00006DD3 _text           ends
.text:00006DD3
.text:00006DD4 ; ===========================================================================
.text:00006DD4
.text:00006DD4 ; Segment type: Pure code
.text:00006DD4 ; Segment permissions: Read/Execute
.text:00006DD4 _text           segment para public 'CODE' use32
.text:00006DD4                 assume cs:_text
.text:00006DD4                 ;org 6DD4h
.text:00006DD4 ; COMDAT (pick any)
.text:00006DD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DD4
.text:00006DD4 ; =============== S U B R O U T I N E =======================================
.text:00006DD4
.text:00006DD4 ; Attributes: bp-based frame
.text:00006DD4
.text:00006DD4 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Clear(void)
.text:00006DD4                 public ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.text:00006DD4 ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ proc near
.text:00006DD4                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+1C7p
.text:00006DD4                                         ; NArchive::N7z::CDatabase::Clear(void)+38p ...
.text:00006DD4
.text:00006DD4 var_4           = dword ptr -4
.text:00006DD4
.text:00006DD4                 push    ebp
.text:00006DD5                 mov     ebp, esp
.text:00006DD7                 push    ecx
.text:00006DD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DDF                 mov     [ebp+var_4], ecx
.text:00006DE2                 mov     eax, [ebp+var_4]
.text:00006DE5                 mov     dword ptr [eax+4], 0
.text:00006DEC                 mov     esp, ebp
.text:00006DEE                 pop     ebp
.text:00006DEF                 retn
.text:00006DEF ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ endp
.text:00006DEF
.text:00006DEF _text           ends
.text:00006DEF
.text:00006DF0 ; ===========================================================================
.text:00006DF0
.text:00006DF0 ; Segment type: Pure code
.text:00006DF0 ; Segment permissions: Read/Execute
.text:00006DF0 _text           segment para public 'CODE' use32
.text:00006DF0                 assume cs:_text
.text:00006DF0                 ;org 6DF0h
.text:00006DF0 ; COMDAT (pick any)
.text:00006DF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DF0
.text:00006DF0 ; =============== S U B R O U T I N E =======================================
.text:00006DF0
.text:00006DF0 ; Attributes: bp-based frame
.text:00006DF0
.text:00006DF0 ; public: struct NArchive::N7z::CFileItem & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)
.text:00006DF0                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z
.text:00006DF0 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z proc near
.text:00006DF0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+5C5p
.text:00006DF0                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+90Bp ...
.text:00006DF0
.text:00006DF0 var_4           = dword ptr -4
.text:00006DF0 arg_0           = dword ptr  8
.text:00006DF0
.text:00006DF0                 push    ebp
.text:00006DF1                 mov     ebp, esp
.text:00006DF3                 push    ecx
.text:00006DF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DFB                 mov     [ebp+var_4], ecx
.text:00006DFE                 mov     eax, [ebp+arg_0]
.text:00006E01                 imul    eax, 18h
.text:00006E04                 mov     ecx, [ebp+var_4]
.text:00006E07                 add     eax, [ecx]
.text:00006E09                 mov     esp, ebp
.text:00006E0B                 pop     ebp
.text:00006E0C                 retn    4
.text:00006E0C ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z endp
.text:00006E0C
.text:00006E0C ; ---------------------------------------------------------------------------
.text:00006E0F                 align 10h
.text:00006E0F _text           ends
.text:00006E0F
.text:00006E10 ; ===========================================================================
.text:00006E10
.text:00006E10 ; Segment type: Pure code
.text:00006E10 ; Segment permissions: Read/Execute
.text:00006E10 _text           segment para public 'CODE' use32
.text:00006E10                 assume cs:_text
.text:00006E10                 ;org 6E10h
.text:00006E10 ; COMDAT (pick any)
.text:00006E10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E10
.text:00006E10 ; =============== S U B R O U T I N E =======================================
.text:00006E10
.text:00006E10 ; Attributes: bp-based frame
.text:00006E10
.text:00006E10 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00006E10                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00006E10 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00006E10                                         ; CODE XREF: NArchive::N7z::CInArchive::Close(void)+1Bp
.text:00006E10
.text:00006E10 var_4           = dword ptr -4
.text:00006E10
.text:00006E10                 push    ebp
.text:00006E11                 mov     ebp, esp
.text:00006E13                 push    ecx
.text:00006E14                 push    esi
.text:00006E15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E1C                 mov     [ebp+var_4], ecx
.text:00006E1F                 mov     eax, [ebp+var_4]
.text:00006E22                 cmp     dword ptr [eax], 0
.text:00006E25                 jz      short loc_6E4B
.text:00006E27                 mov     ecx, [ebp+var_4]
.text:00006E2A                 mov     edx, [ecx]
.text:00006E2C                 mov     eax, [ebp+var_4]
.text:00006E2F                 mov     ecx, [eax]
.text:00006E31                 mov     edx, [edx]
.text:00006E33                 mov     esi, esp
.text:00006E35                 push    ecx
.text:00006E36                 mov     eax, [edx+8]
.text:00006E39                 call    eax
.text:00006E3B                 cmp     esi, esp
.text:00006E3D                 call    __RTC_CheckEsp
.text:00006E42                 mov     ecx, [ebp+var_4]
.text:00006E45                 mov     dword ptr [ecx], 0
.text:00006E4B
.text:00006E4B loc_6E4B:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:00006E4B                 pop     esi
.text:00006E4C                 add     esp, 4
.text:00006E4F                 cmp     ebp, esp
.text:00006E51                 call    __RTC_CheckEsp
.text:00006E56                 mov     esp, ebp
.text:00006E58                 pop     ebp
.text:00006E59                 retn
.text:00006E59 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:00006E59
.text:00006E59 ; ---------------------------------------------------------------------------
.text:00006E5A                 align 4
.text:00006E5A _text           ends
.text:00006E5A
.text:00006E5C ; ===========================================================================
.text:00006E5C
.text:00006E5C ; Segment type: Pure code
.text:00006E5C ; Segment permissions: Read/Execute
.text:00006E5C _text           segment para public 'CODE' use32
.text:00006E5C                 assume cs:_text
.text:00006E5C                 ;org 6E5Ch
.text:00006E5C ; COMDAT (pick any)
.text:00006E5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E5C
.text:00006E5C ; =============== S U B R O U T I N E =======================================
.text:00006E5C
.text:00006E5C ; Attributes: bp-based frame
.text:00006E5C
.text:00006E5C ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00006E5C                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00006E5C ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00006E5C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+213p
.text:00006E5C                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+258p ...
.text:00006E5C
.text:00006E5C var_4           = dword ptr -4
.text:00006E5C
.text:00006E5C                 push    ebp
.text:00006E5D                 mov     ebp, esp
.text:00006E5F                 push    ecx
.text:00006E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E67                 mov     [ebp+var_4], ecx
.text:00006E6A                 mov     eax, [ebp+var_4]
.text:00006E6D                 mov     eax, [eax]
.text:00006E6F                 mov     esp, ebp
.text:00006E71                 pop     ebp
.text:00006E72                 retn
.text:00006E72 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00006E72
.text:00006E72 ; ---------------------------------------------------------------------------
.text:00006E73                 align 4
.text:00006E73 _text           ends
.text:00006E73
.text:00006E74 ; ===========================================================================
.text:00006E74
.text:00006E74 ; Segment type: Pure code
.text:00006E74 ; Segment permissions: Read/Execute
.text:00006E74 _text           segment para public 'CODE' use32
.text:00006E74                 assume cs:_text
.text:00006E74                 ;org 6E74h
.text:00006E74 ; COMDAT (pick any)
.text:00006E74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E74
.text:00006E74 ; =============== S U B R O U T I N E =======================================
.text:00006E74
.text:00006E74 ; Attributes: bp-based frame
.text:00006E74
.text:00006E74 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00006E74                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00006E74 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00006E74                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+F9p
.text:00006E74                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+146p ...
.text:00006E74
.text:00006E74 var_4           = dword ptr -4
.text:00006E74
.text:00006E74                 push    ebp
.text:00006E75                 mov     ebp, esp
.text:00006E77                 push    ecx
.text:00006E78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E7F                 mov     [ebp+var_4], ecx
.text:00006E82                 mov     eax, [ebp+var_4]
.text:00006E85                 mov     eax, [eax]
.text:00006E87                 mov     esp, ebp
.text:00006E89                 pop     ebp
.text:00006E8A                 retn
.text:00006E8A ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00006E8A
.text:00006E8A ; ---------------------------------------------------------------------------
.text:00006E8B                 align 4
.text:00006E8B _text           ends
.text:00006E8B
.text:00006E8C ; ===========================================================================
.text:00006E8C
.text:00006E8C ; Segment type: Pure code
.text:00006E8C ; Segment permissions: Read/Execute
.text:00006E8C _text           segment para public 'CODE' use32
.text:00006E8C                 assume cs:_text
.text:00006E8C                 ;org 6E8Ch
.text:00006E8C ; COMDAT (pick any)
.text:00006E8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E8C
.text:00006E8C ; =============== S U B R O U T I N E =======================================
.text:00006E8C
.text:00006E8C ; Attributes: bp-based frame
.text:00006E8C
.text:00006E8C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00006E8C                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00006E8C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00006E8C                                         ; CODE XREF: NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)+F7p
.text:00006E8C
.text:00006E8C var_4           = dword ptr -4
.text:00006E8C arg_0           = dword ptr  8
.text:00006E8C
.text:00006E8C                 push    ebp
.text:00006E8D                 mov     ebp, esp
.text:00006E8F                 push    ecx
.text:00006E90                 push    esi
.text:00006E91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E98                 mov     [ebp+var_4], ecx
.text:00006E9B                 cmp     [ebp+arg_0], 0
.text:00006E9F                 jz      short loc_6EB8
.text:00006EA1                 mov     eax, [ebp+arg_0]
.text:00006EA4                 mov     ecx, [eax]
.text:00006EA6                 mov     esi, esp
.text:00006EA8                 mov     edx, [ebp+arg_0]
.text:00006EAB                 push    edx
.text:00006EAC                 mov     eax, [ecx+4]
.text:00006EAF                 call    eax
.text:00006EB1                 cmp     esi, esp
.text:00006EB3                 call    __RTC_CheckEsp
.text:00006EB8
.text:00006EB8 loc_6EB8:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00006EB8                 mov     ecx, [ebp+var_4]
.text:00006EBB                 cmp     dword ptr [ecx], 0
.text:00006EBE                 jz      short loc_6EDB
.text:00006EC0                 mov     edx, [ebp+var_4]
.text:00006EC3                 mov     eax, [edx]
.text:00006EC5                 mov     ecx, [ebp+var_4]
.text:00006EC8                 mov     edx, [ecx]
.text:00006ECA                 mov     eax, [eax]
.text:00006ECC                 mov     esi, esp
.text:00006ECE                 push    edx
.text:00006ECF                 mov     ecx, [eax+8]
.text:00006ED2                 call    ecx
.text:00006ED4                 cmp     esi, esp
.text:00006ED6                 call    __RTC_CheckEsp
.text:00006EDB
.text:00006EDB loc_6EDB:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00006EDB                 mov     edx, [ebp+var_4]
.text:00006EDE                 mov     eax, [ebp+arg_0]
.text:00006EE1                 mov     [edx], eax
.text:00006EE3                 mov     eax, [ebp+arg_0]
.text:00006EE6                 pop     esi
.text:00006EE7                 add     esp, 4
.text:00006EEA                 cmp     ebp, esp
.text:00006EEC                 call    __RTC_CheckEsp
.text:00006EF1                 mov     esp, ebp
.text:00006EF3                 pop     ebp
.text:00006EF4                 retn    4
.text:00006EF4 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00006EF4
.text:00006EF4 ; ---------------------------------------------------------------------------
.text:00006EF7                 align 4
.text:00006EF7 _text           ends
.text:00006EF7
.text:00006EF8 ; ===========================================================================
.text:00006EF8
.text:00006EF8 ; Segment type: Pure code
.text:00006EF8 ; Segment permissions: Read/Execute
.text:00006EF8 _text           segment para public 'CODE' use32
.text:00006EF8                 assume cs:_text
.text:00006EF8                 ;org 6EF8h
.text:00006EF8 ; COMDAT (pick any)
.text:00006EF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006EF8
.text:00006EF8 ; =============== S U B R O U T I N E =======================================
.text:00006EF8
.text:00006EF8 ; Attributes: bp-based frame
.text:00006EF8
.text:00006EF8 ; public: unsigned int __thiscall CObjectVector<class CBuffer<unsigned char>>::Size(void)const
.text:00006EF8                 public ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
.text:00006EF8 ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ proc near
.text:00006EF8                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+47p
.text:00006EF8                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+764p ...
.text:00006EF8
.text:00006EF8 var_4           = dword ptr -4
.text:00006EF8
.text:00006EF8                 push    ebp
.text:00006EF9                 mov     ebp, esp
.text:00006EFB                 push    ecx
.text:00006EFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F03                 mov     [ebp+var_4], ecx
.text:00006F06                 mov     ecx, [ebp+var_4]
.text:00006F09                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006F0E                 add     esp, 4
.text:00006F11                 cmp     ebp, esp
.text:00006F13                 call    __RTC_CheckEsp
.text:00006F18                 mov     esp, ebp
.text:00006F1A                 pop     ebp
.text:00006F1B                 retn
.text:00006F1B ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ endp
.text:00006F1B
.text:00006F1B _text           ends
.text:00006F1B
.text:00006F1C ; ===========================================================================
.text:00006F1C
.text:00006F1C ; Segment type: Pure code
.text:00006F1C ; Segment permissions: Read/Execute
.text:00006F1C _text           segment para public 'CODE' use32
.text:00006F1C                 assume cs:_text
.text:00006F1C                 ;org 6F1Ch
.text:00006F1C ; COMDAT (pick any)
.text:00006F1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F1C
.text:00006F1C ; =============== S U B R O U T I N E =======================================
.text:00006F1C
.text:00006F1C ; Attributes: bp-based frame
.text:00006F1C
.text:00006F1C ; public: __thiscall CObjectVector<class CBuffer<unsigned char>>::CObjectVector<class CBuffer<unsigned char>>(void)
.text:00006F1C                 public ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:00006F1C ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text:00006F1C                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7Dp
.text:00006F1C                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+678p
.text:00006F1C
.text:00006F1C var_4           = dword ptr -4
.text:00006F1C
.text:00006F1C                 push    ebp
.text:00006F1D                 mov     ebp, esp
.text:00006F1F                 push    ecx
.text:00006F20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F27                 mov     [ebp+var_4], ecx
.text:00006F2A                 mov     ecx, [ebp+var_4]
.text:00006F2D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006F32                 mov     eax, [ebp+var_4]
.text:00006F35                 add     esp, 4
.text:00006F38                 cmp     ebp, esp
.text:00006F3A                 call    __RTC_CheckEsp
.text:00006F3F                 mov     esp, ebp
.text:00006F41                 pop     ebp
.text:00006F42                 retn
.text:00006F42 ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text:00006F42
.text:00006F42 ; ---------------------------------------------------------------------------
.text:00006F43                 align 4
.text:00006F43 _text           ends
.text:00006F43
.text:00006F44 ; ===========================================================================
.text:00006F44
.text:00006F44 ; Segment type: Pure code
.text:00006F44 ; Segment permissions: Read/Execute
.text:00006F44 _text           segment para public 'CODE' use32
.text:00006F44                 assume cs:_text
.text:00006F44                 ;org 6F44h
.text:00006F44 ; COMDAT (pick any)
.text:00006F44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F44
.text:00006F44 ; =============== S U B R O U T I N E =======================================
.text:00006F44
.text:00006F44 ; Attributes: bp-based frame
.text:00006F44
.text:00006F44 ; public: class CBuffer<unsigned char> const & __thiscall CObjectVector<class CBuffer<unsigned char>>::operator[](unsigned int)const
.text:00006F44                 public ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
.text:00006F44 ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z proc near
.text:00006F44                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,CObjectVector<CBuffer<uchar>> const *)+5Dp
.text:00006F44
.text:00006F44 var_4           = dword ptr -4
.text:00006F44 arg_0           = dword ptr  8
.text:00006F44
.text:00006F44                 push    ebp
.text:00006F45                 mov     ebp, esp
.text:00006F47                 push    ecx
.text:00006F48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F4F                 mov     [ebp+var_4], ecx
.text:00006F52                 mov     eax, [ebp+arg_0]
.text:00006F55                 push    eax
.text:00006F56                 mov     ecx, [ebp+var_4]
.text:00006F59                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006F5E                 mov     eax, [eax]
.text:00006F60                 add     esp, 4
.text:00006F63                 cmp     ebp, esp
.text:00006F65                 call    __RTC_CheckEsp
.text:00006F6A                 mov     esp, ebp
.text:00006F6C                 pop     ebp
.text:00006F6D                 retn    4
.text:00006F6D ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z endp
.text:00006F6D
.text:00006F6D _text           ends
.text:00006F6D
.text:00006F70 ; ===========================================================================
.text:00006F70
.text:00006F70 ; Segment type: Pure code
.text:00006F70 ; Segment permissions: Read/Execute
.text:00006F70 _text           segment para public 'CODE' use32
.text:00006F70                 assume cs:_text
.text:00006F70                 ;org 6F70h
.text:00006F70 ; COMDAT (pick any)
.text:00006F70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F70
.text:00006F70 ; =============== S U B R O U T I N E =======================================
.text:00006F70
.text:00006F70 ; Attributes: bp-based frame
.text:00006F70
.text:00006F70 ; public: class CBuffer<unsigned char> & __thiscall CObjectVector<class CBuffer<unsigned char>>::Front(void)
.text:00006F70                 public ?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
.text:00006F70 ?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ proc near
.text:00006F70                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+7D8p
.text:00006F70
.text:00006F70 var_4           = dword ptr -4
.text:00006F70
.text:00006F70                 push    ebp
.text:00006F71                 mov     ebp, esp
.text:00006F73                 push    ecx
.text:00006F74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F7B                 mov     [ebp+var_4], ecx
.text:00006F7E                 push    0
.text:00006F80                 mov     ecx, [ebp+var_4]
.text:00006F83                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00006F88                 add     esp, 4
.text:00006F8B                 cmp     ebp, esp
.text:00006F8D                 call    __RTC_CheckEsp
.text:00006F92                 mov     esp, ebp
.text:00006F94                 pop     ebp
.text:00006F95                 retn
.text:00006F95 ?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ endp
.text:00006F95
.text:00006F95 ; ---------------------------------------------------------------------------
.text:00006F96                 align 4
.text:00006F96 _text           ends
.text:00006F96
.text:00006F98 ; ===========================================================================
.text:00006F98
.text:00006F98 ; Segment type: Pure code
.text:00006F98 ; Segment permissions: Read/Execute
.text:00006F98 _text           segment para public 'CODE' use32
.text:00006F98                 assume cs:_text
.text:00006F98                 ;org 6F98h
.text:00006F98 ; COMDAT (pick any)
.text:00006F98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F98
.text:00006F98 ; =============== S U B R O U T I N E =======================================
.text:00006F98
.text:00006F98 ; Attributes: bp-based frame
.text:00006F98
.text:00006F98 ; public: class CBuffer<unsigned char> & __thiscall CObjectVector<class CBuffer<unsigned char>>::AddNew(void)
.text:00006F98                 public ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
.text:00006F98 ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ proc near
.text:00006F98                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+CCp
.text:00006F98
.text:00006F98 var_20          = dword ptr -20h
.text:00006F98 var_1C          = dword ptr -1Ch
.text:00006F98 var_18          = dword ptr -18h
.text:00006F98 var_14          = dword ptr -14h
.text:00006F98 var_10          = dword ptr -10h
.text:00006F98 var_C           = dword ptr -0Ch
.text:00006F98 var_4           = dword ptr -4
.text:00006F98
.text:00006F98                 push    ebp
.text:00006F99                 mov     ebp, esp
.text:00006F9B                 push    0FFFFFFFFh
.text:00006F9D                 push    offset __ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
.text:00006FA2                 mov     eax, large fs:0
.text:00006FA8                 push    eax
.text:00006FA9                 sub     esp, 14h
.text:00006FAC                 mov     eax, 0CCCCCCCCh
.text:00006FB1                 mov     [ebp+var_20], eax
.text:00006FB4                 mov     [ebp+var_1C], eax
.text:00006FB7                 mov     [ebp+var_18], eax
.text:00006FBA                 mov     [ebp+var_14], eax
.text:00006FBD                 mov     [ebp+var_10], eax
.text:00006FC0                 mov     eax, dword ptr ds:___security_cookie
.text:00006FC5                 xor     eax, ebp
.text:00006FC7                 push    eax
.text:00006FC8                 lea     eax, [ebp+var_C]
.text:00006FCB                 mov     large fs:0, eax
.text:00006FD1                 mov     [ebp+var_10], ecx
.text:00006FD4                 push    8               ; unsigned int
.text:00006FD6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006FDB                 add     esp, 4
.text:00006FDE                 mov     [ebp+var_1C], eax
.text:00006FE1                 mov     [ebp+var_4], 0
.text:00006FE8                 cmp     [ebp+var_1C], 0
.text:00006FEC                 jz      short loc_6FFB
.text:00006FEE                 mov     ecx, [ebp+var_1C]
.text:00006FF1                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00006FF6                 mov     [ebp+var_20], eax
.text:00006FF9                 jmp     short loc_7002
.text:00006FFB ; ---------------------------------------------------------------------------
.text:00006FFB
.text:00006FFB loc_6FFB:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::AddNew(void)+54j
.text:00006FFB                 mov     [ebp+var_20], 0
.text:00007002
.text:00007002 loc_7002:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::AddNew(void)+61j
.text:00007002                 mov     eax, [ebp+var_20]
.text:00007005                 mov     [ebp+var_18], eax
.text:00007008                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000700F                 mov     ecx, [ebp+var_18]
.text:00007012                 mov     [ebp+var_14], ecx
.text:00007015                 mov     edx, [ebp+var_14]
.text:00007018                 push    edx
.text:00007019                 mov     ecx, [ebp+var_10]
.text:0000701C                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00007021                 mov     eax, [ebp+var_14]
.text:00007024                 mov     ecx, [ebp+var_C]
.text:00007027                 mov     large fs:0, ecx
.text:0000702E                 pop     ecx
.text:0000702F                 add     esp, 20h
.text:00007032                 cmp     ebp, esp
.text:00007034                 call    __RTC_CheckEsp
.text:00007039                 mov     esp, ebp
.text:0000703B                 pop     ebp
.text:0000703C                 retn
.text:0000703C ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ endp
.text:0000703C
.text:0000703C ; ---------------------------------------------------------------------------
.text:0000703D                 align 10h
.text:0000703D _text           ends
.text:0000703D
.text$x:00007040 ; ===========================================================================
.text$x:00007040
.text$x:00007040 ; Segment type: Pure code
.text$x:00007040 ; Segment permissions: Read/Execute
.text$x:00007040 _text$x         segment para public 'CODE' use32
.text$x:00007040                 assume cs:_text$x
.text$x:00007040                 ;org 7040h
.text$x:00007040 ; COMDAT (pick associative to section at 6F98)
.text$x:00007040                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007040
.text$x:00007040 ; =============== S U B R O U T I N E =======================================
.text$x:00007040
.text$x:00007040
.text$x:00007040 __unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0 proc near
.text$x:00007040                                         ; DATA XREF: .xdata$x:0000706Co
.text$x:00007040                 mov     eax, [ebp-1Ch]
.text$x:00007043                 push    eax             ; void *
.text$x:00007044                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007049                 pop     ecx
.text$x:0000704A                 retn
.text$x:0000704A __unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0 endp
.text$x:0000704A
.text$x:0000704B
.text$x:0000704B ; =============== S U B R O U T I N E =======================================
.text$x:0000704B
.text$x:0000704B
.text$x:0000704B __ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ proc near
.text$x:0000704B                                         ; DATA XREF: CObjectVector<CBuffer<uchar>>::AddNew(void)+5o
.text$x:0000704B
.text$x:0000704B arg_4           = dword ptr  8
.text$x:0000704B
.text$x:0000704B                 mov     edx, [esp+arg_4]
.text$x:0000704F                 lea     eax, [edx+0Ch]
.text$x:00007052                 mov     ecx, [edx-18h]
.text$x:00007055                 xor     ecx, eax
.text$x:00007057                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000705C                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
.text$x:00007061                 jmp     ___CxxFrameHandler3
.text$x:00007061 __ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ endp
.text$x:00007061
.text$x:00007061 ; ---------------------------------------------------------------------------
.text$x:00007066                 align 4
.text$x:00007066 _text$x         ends
.text$x:00007066
.xdata$x:00007068 ; ===========================================================================
.xdata$x:00007068
.xdata$x:00007068 ; Segment type: Pure data
.xdata$x:00007068 ; Segment permissions: Read
.xdata$x:00007068 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007068                 assume cs:_xdata$x
.xdata$x:00007068                 ;org 7068h
.xdata$x:00007068 ; COMDAT (pick associative to section at 6F98)
.xdata$x:00007068 __unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ db 0FFh
.xdata$x:00007068                                         ; DATA XREF: .xdata$x:00007078o
.xdata$x:00007069                 db 0FFh
.xdata$x:0000706A                 db 0FFh
.xdata$x:0000706B                 db 0FFh
.xdata$x:0000706C                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0
.xdata$x:00007070 __ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ db  22h ; "
.xdata$x:00007070                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ+11o
.xdata$x:00007071                 db    5
.xdata$x:00007072                 db  93h ; ô
.xdata$x:00007073                 db  19h
.xdata$x:00007074                 db    1
.xdata$x:00007075                 db    0
.xdata$x:00007076                 db    0
.xdata$x:00007077                 db    0
.xdata$x:00007078                 dd offset __unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
.xdata$x:0000707C                 db    0
.xdata$x:0000707D                 db    0
.xdata$x:0000707E                 db    0
.xdata$x:0000707F                 db    0
.xdata$x:00007080                 db    0
.xdata$x:00007081                 db    0
.xdata$x:00007082                 db    0
.xdata$x:00007083                 db    0
.xdata$x:00007084                 db    0
.xdata$x:00007085                 db    0
.xdata$x:00007086                 db    0
.xdata$x:00007087                 db    0
.xdata$x:00007088                 db    0
.xdata$x:00007089                 db    0
.xdata$x:0000708A                 db    0
.xdata$x:0000708B                 db    0
.xdata$x:0000708C                 db    0
.xdata$x:0000708D                 db    0
.xdata$x:0000708E                 db    0
.xdata$x:0000708F                 db    0
.xdata$x:00007090                 db    1
.xdata$x:00007091                 db    0
.xdata$x:00007092                 db    0
.xdata$x:00007093                 db    0
.xdata$x:00007093 _xdata$x        ends
.xdata$x:00007093
.text:00007094 ; ===========================================================================
.text:00007094
.text:00007094 ; Segment type: Pure code
.text:00007094 ; Segment permissions: Read/Execute
.text:00007094 _text           segment para public 'CODE' use32
.text:00007094                 assume cs:_text
.text:00007094                 ;org 7094h
.text:00007094 ; COMDAT (pick any)
.text:00007094                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007094
.text:00007094 ; =============== S U B R O U T I N E =======================================
.text:00007094
.text:00007094 ; Attributes: bp-based frame
.text:00007094
.text:00007094 ; public: __thiscall CObjectVector<class CBuffer<unsigned char>>::~CObjectVector<class CBuffer<unsigned char>>(void)
.text:00007094                 public ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:00007094 ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text:00007094                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+F5p
.text:00007094                                         ; NArchive::N7z::CInArchive::ReadHeader(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+AC2p ...
.text:00007094
.text:00007094 var_20          = dword ptr -20h
.text:00007094 var_1C          = dword ptr -1Ch
.text:00007094 var_18          = dword ptr -18h
.text:00007094 var_14          = dword ptr -14h
.text:00007094 var_10          = dword ptr -10h
.text:00007094 var_C           = dword ptr -0Ch
.text:00007094 var_4           = dword ptr -4
.text:00007094
.text:00007094                 push    ebp
.text:00007095                 mov     ebp, esp
.text:00007097                 push    0FFFFFFFFh
.text:00007099                 push    offset __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:0000709E                 mov     eax, large fs:0
.text:000070A4                 push    eax
.text:000070A5                 sub     esp, 14h
.text:000070A8                 mov     eax, 0CCCCCCCCh
.text:000070AD                 mov     [ebp+var_20], eax
.text:000070B0                 mov     [ebp+var_1C], eax
.text:000070B3                 mov     [ebp+var_18], eax
.text:000070B6                 mov     [ebp+var_14], eax
.text:000070B9                 mov     [ebp+var_10], eax
.text:000070BC                 mov     eax, dword ptr ds:___security_cookie
.text:000070C1                 xor     eax, ebp
.text:000070C3                 push    eax
.text:000070C4                 lea     eax, [ebp+var_C]
.text:000070C7                 mov     large fs:0, eax
.text:000070CD                 mov     [ebp+var_10], ecx
.text:000070D0                 mov     [ebp+var_4], 0
.text:000070D7                 mov     ecx, [ebp+var_10]
.text:000070DA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000070DF                 mov     [ebp+var_14], eax
.text:000070E2
.text:000070E2 loc_70E2:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void):loc_7124j
.text:000070E2                 cmp     [ebp+var_14], 0
.text:000070E6                 jz      short loc_7126
.text:000070E8                 mov     eax, [ebp+var_14]
.text:000070EB                 sub     eax, 1
.text:000070EE                 mov     [ebp+var_14], eax
.text:000070F1                 mov     ecx, [ebp+var_14]
.text:000070F4                 push    ecx
.text:000070F5                 mov     ecx, [ebp+var_10]
.text:000070F8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000070FD                 mov     edx, [eax]
.text:000070FF                 mov     [ebp+var_1C], edx
.text:00007102                 mov     eax, [ebp+var_1C]
.text:00007105                 mov     [ebp+var_18], eax
.text:00007108                 cmp     [ebp+var_18], 0
.text:0000710C                 jz      short loc_711D
.text:0000710E                 push    1
.text:00007110                 mov     ecx, [ebp+var_18]
.text:00007113                 call    ??_G?$CBuffer@E@@QAEPAXI@Z ; CBuffer<uchar>::`scalar deleting destructor'(uint)
.text:00007118                 mov     [ebp+var_20], eax
.text:0000711B                 jmp     short loc_7124
.text:0000711D ; ---------------------------------------------------------------------------
.text:0000711D
.text:0000711D loc_711D:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+78j
.text:0000711D                 mov     [ebp+var_20], 0
.text:00007124
.text:00007124 loc_7124:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+87j
.text:00007124                 jmp     short loc_70E2
.text:00007126 ; ---------------------------------------------------------------------------
.text:00007126
.text:00007126 loc_7126:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+52j
.text:00007126                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000712D                 mov     ecx, [ebp+var_10]
.text:00007130                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007135                 mov     ecx, [ebp+var_C]
.text:00007138                 mov     large fs:0, ecx
.text:0000713F                 pop     ecx
.text:00007140                 add     esp, 20h
.text:00007143                 cmp     ebp, esp
.text:00007145                 call    __RTC_CheckEsp
.text:0000714A                 mov     esp, ebp
.text:0000714C                 pop     ebp
.text:0000714D                 retn
.text:0000714D ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text:0000714D
.text:0000714D ; ---------------------------------------------------------------------------
.text:0000714E                 align 10h
.text:0000714E _text           ends
.text:0000714E
.text$x:00007150 ; ===========================================================================
.text$x:00007150
.text$x:00007150 ; Segment type: Pure code
.text$x:00007150 ; Segment permissions: Read/Execute
.text$x:00007150 _text$x         segment para public 'CODE' use32
.text$x:00007150                 assume cs:_text$x
.text$x:00007150                 ;org 7150h
.text$x:00007150 ; COMDAT (pick associative to section at 7094)
.text$x:00007150                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007150
.text$x:00007150 ; =============== S U B R O U T I N E =======================================
.text$x:00007150
.text$x:00007150
.text$x:00007150 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 proc near
.text$x:00007150                                         ; DATA XREF: .xdata$x:00007178o
.text$x:00007150                 mov     ecx, [ebp-10h]
.text$x:00007153                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00007153 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 endp
.text$x:00007153
.text$x:00007158
.text$x:00007158 ; =============== S U B R O U T I N E =======================================
.text$x:00007158
.text$x:00007158
.text$x:00007158 __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text$x:00007158                                         ; DATA XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+5o
.text$x:00007158
.text$x:00007158 arg_4           = dword ptr  8
.text$x:00007158
.text$x:00007158                 mov     edx, [esp+arg_4]
.text$x:0000715C                 lea     eax, [edx+0Ch]
.text$x:0000715F                 mov     ecx, [edx-18h]
.text$x:00007162                 xor     ecx, eax
.text$x:00007164                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007169                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text$x:0000716E                 jmp     ___CxxFrameHandler3
.text$x:0000716E __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text$x:0000716E
.text$x:0000716E ; ---------------------------------------------------------------------------
.text$x:00007173                 align 4
.text$x:00007173 _text$x         ends
.text$x:00007173
.xdata$x:00007174 ; ===========================================================================
.xdata$x:00007174
.xdata$x:00007174 ; Segment type: Pure data
.xdata$x:00007174 ; Segment permissions: Read
.xdata$x:00007174 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007174                 assume cs:_xdata$x
.xdata$x:00007174                 ;org 7174h
.xdata$x:00007174 ; COMDAT (pick associative to section at 7094)
.xdata$x:00007174 __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db 0FFh
.xdata$x:00007174                                         ; DATA XREF: .xdata$x:00007184o
.xdata$x:00007175                 db 0FFh
.xdata$x:00007176                 db 0FFh
.xdata$x:00007177                 db 0FFh
.xdata$x:00007178                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
.xdata$x:0000717C __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db  22h ; "
.xdata$x:0000717C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ+11o
.xdata$x:0000717D                 db    5
.xdata$x:0000717E                 db  93h ; ô
.xdata$x:0000717F                 db  19h
.xdata$x:00007180                 db    1
.xdata$x:00007181                 db    0
.xdata$x:00007182                 db    0
.xdata$x:00007183                 db    0
.xdata$x:00007184                 dd offset __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.xdata$x:00007188                 db    0
.xdata$x:00007189                 db    0
.xdata$x:0000718A                 db    0
.xdata$x:0000718B                 db    0
.xdata$x:0000718C                 db    0
.xdata$x:0000718D                 db    0
.xdata$x:0000718E                 db    0
.xdata$x:0000718F                 db    0
.xdata$x:00007190                 db    0
.xdata$x:00007191                 db    0
.xdata$x:00007192                 db    0
.xdata$x:00007193                 db    0
.xdata$x:00007194                 db    0
.xdata$x:00007195                 db    0
.xdata$x:00007196                 db    0
.xdata$x:00007197                 db    0
.xdata$x:00007198                 db    0
.xdata$x:00007199                 db    0
.xdata$x:0000719A                 db    0
.xdata$x:0000719B                 db    0
.xdata$x:0000719C                 db    1
.xdata$x:0000719D                 db    0
.xdata$x:0000719E                 db    0
.xdata$x:0000719F                 db    0
.xdata$x:0000719F _xdata$x        ends
.xdata$x:0000719F
.text:000071A0 ; ===========================================================================
.text:000071A0
.text:000071A0 ; Segment type: Pure code
.text:000071A0 ; Segment permissions: Read/Execute
.text:000071A0 _text           segment para public 'CODE' use32
.text:000071A0                 assume cs:_text
.text:000071A0                 ;org 71A0h
.text:000071A0 ; COMDAT (pick any)
.text:000071A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071A0
.text:000071A0 ; =============== S U B R O U T I N E =======================================
.text:000071A0
.text:000071A0 ; Attributes: bp-based frame
.text:000071A0
.text:000071A0 ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:000071A0                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:000071A0 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:000071A0                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+109p
.text:000071A0
.text:000071A0 var_4           = dword ptr -4
.text:000071A0 arg_0           = dword ptr  8
.text:000071A0
.text:000071A0                 push    ebp
.text:000071A1                 mov     ebp, esp
.text:000071A3                 push    ecx
.text:000071A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071AB                 mov     [ebp+var_4], ecx
.text:000071AE                 mov     eax, [ebp+arg_0]
.text:000071B1                 and     eax, 2
.text:000071B4                 jz      short loc_71EC
.text:000071B6                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:000071BB                 mov     ecx, [ebp+var_4]
.text:000071BE                 mov     edx, [ecx-4]
.text:000071C1                 push    edx
.text:000071C2                 push    18h
.text:000071C4                 mov     eax, [ebp+var_4]
.text:000071C7                 push    eax
.text:000071C8                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:000071CD                 mov     ecx, [ebp+arg_0]
.text:000071D0                 and     ecx, 1
.text:000071D3                 jz      short loc_71E4
.text:000071D5                 mov     edx, [ebp+var_4]
.text:000071D8                 sub     edx, 4
.text:000071DB                 push    edx             ; void *
.text:000071DC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000071E1                 add     esp, 4
.text:000071E4
.text:000071E4 loc_71E4:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:000071E4                 mov     eax, [ebp+var_4]
.text:000071E7                 sub     eax, 4
.text:000071EA                 jmp     short loc_720B
.text:000071EC ; ---------------------------------------------------------------------------
.text:000071EC
.text:000071EC loc_71EC:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:000071EC                 mov     ecx, [ebp+var_4] ; this
.text:000071EF                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:000071F4                 mov     eax, [ebp+arg_0]
.text:000071F7                 and     eax, 1
.text:000071FA                 jz      short loc_7208
.text:000071FC                 mov     ecx, [ebp+var_4]
.text:000071FF                 push    ecx             ; void *
.text:00007200                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007205                 add     esp, 4
.text:00007208
.text:00007208 loc_7208:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:00007208                 mov     eax, [ebp+var_4]
.text:0000720B
.text:0000720B loc_720B:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:0000720B                 add     esp, 4
.text:0000720E                 cmp     ebp, esp
.text:00007210                 call    __RTC_CheckEsp
.text:00007215                 mov     esp, ebp
.text:00007217                 pop     ebp
.text:00007218                 retn    4
.text:00007218 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:00007218
.text:00007218 ; ---------------------------------------------------------------------------
.text:0000721B                 align 4
.text:0000721B _text           ends
.text:0000721B
.text:0000721C ; ===========================================================================
.text:0000721C
.text:0000721C ; Segment type: Pure code
.text:0000721C ; Segment permissions: Read/Execute
.text:0000721C _text           segment para public 'CODE' use32
.text:0000721C                 assume cs:_text
.text:0000721C                 ;org 721Ch
.text:0000721C ; COMDAT (pick any)
.text:0000721C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000721C
.text:0000721C ; =============== S U B R O U T I N E =======================================
.text:0000721C
.text:0000721C ; Attributes: bp-based frame
.text:0000721C
.text:0000721C ; _DWORD __thiscall NArchive::N7z::CCoderInfo::CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:0000721C                 public ??0CCoderInfo@N7z@NArchive@@QAE@XZ
.text:0000721C ??0CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:0000721C                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+B4o
.text:0000721C
.text:0000721C var_4           = dword ptr -4
.text:0000721C
.text:0000721C                 push    ebp
.text:0000721D                 mov     ebp, esp
.text:0000721F                 push    ecx
.text:00007220                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007227                 mov     [ebp+var_4], ecx
.text:0000722A                 mov     ecx, [ebp+var_4]
.text:0000722D                 add     ecx, 8
.text:00007230                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00007235                 mov     eax, [ebp+var_4]
.text:00007238                 add     esp, 4
.text:0000723B                 cmp     ebp, esp
.text:0000723D                 call    __RTC_CheckEsp
.text:00007242                 mov     esp, ebp
.text:00007244                 pop     ebp
.text:00007245                 retn
.text:00007245 ??0CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:00007245
.text:00007245 ; ---------------------------------------------------------------------------
.text:00007246                 align 4
.text:00007246 _text           ends
.text:00007246
.text:00007248 ; ===========================================================================
.text:00007248
.text:00007248 ; Segment type: Pure code
.text:00007248 ; Segment permissions: Read/Execute
.text:00007248 _text           segment para public 'CODE' use32
.text:00007248                 assume cs:_text
.text:00007248                 ;org 7248h
.text:00007248 ; COMDAT (pick any)
.text:00007248                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007248
.text:00007248 ; =============== S U B R O U T I N E =======================================
.text:00007248
.text:00007248 ; Attributes: bp-based frame
.text:00007248
.text:00007248 ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:00007248                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:00007248 ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:00007248                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:00007248                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+AFo ...
.text:00007248
.text:00007248 var_4           = dword ptr -4
.text:00007248
.text:00007248                 push    ebp
.text:00007249                 mov     ebp, esp
.text:0000724B                 push    ecx
.text:0000724C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007253                 mov     [ebp+var_4], ecx
.text:00007256                 mov     ecx, [ebp+var_4]
.text:00007259                 add     ecx, 8
.text:0000725C                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00007261                 add     esp, 4
.text:00007264                 cmp     ebp, esp
.text:00007266                 call    __RTC_CheckEsp
.text:0000726B                 mov     esp, ebp
.text:0000726D                 pop     ebp
.text:0000726E                 retn
.text:0000726E ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:0000726E
.text:0000726E ; ---------------------------------------------------------------------------
.text:0000726F                 align 10h
.text:0000726F _text           ends
.text:0000726F
.text:00007270 ; ===========================================================================
.text:00007270
.text:00007270 ; Segment type: Pure code
.text:00007270 ; Segment permissions: Read/Execute
.text:00007270 _text           segment para public 'CODE' use32
.text:00007270                 assume cs:_text
.text:00007270                 ;org 7270h
.text:00007270 ; COMDAT (pick any)
.text:00007270                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007270
.text:00007270 ; =============== S U B R O U T I N E =======================================
.text:00007270
.text:00007270 ; Attributes: bp-based frame
.text:00007270
.text:00007270 ; public: void * __thiscall CBuffer<unsigned char>::`scalar deleting destructor'(unsigned int)
.text:00007270                 public ??_G?$CBuffer@E@@QAEPAXI@Z
.text:00007270 ??_G?$CBuffer@E@@QAEPAXI@Z proc near    ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+7Fp
.text:00007270
.text:00007270 var_4           = dword ptr -4
.text:00007270 arg_0           = dword ptr  8
.text:00007270
.text:00007270                 push    ebp
.text:00007271                 mov     ebp, esp
.text:00007273                 push    ecx
.text:00007274                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000727B                 mov     [ebp+var_4], ecx
.text:0000727E                 mov     ecx, [ebp+var_4]
.text:00007281                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00007286                 mov     eax, [ebp+arg_0]
.text:00007289                 and     eax, 1
.text:0000728C                 jz      short loc_729A
.text:0000728E                 mov     ecx, [ebp+var_4]
.text:00007291                 push    ecx             ; void *
.text:00007292                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007297                 add     esp, 4
.text:0000729A
.text:0000729A loc_729A:                               ; CODE XREF: CBuffer<uchar>::`scalar deleting destructor'(uint)+1Cj
.text:0000729A                 mov     eax, [ebp+var_4]
.text:0000729D                 add     esp, 4
.text:000072A0                 cmp     ebp, esp
.text:000072A2                 call    __RTC_CheckEsp
.text:000072A7                 mov     esp, ebp
.text:000072A9                 pop     ebp
.text:000072AA                 retn    4
.text:000072AA ??_G?$CBuffer@E@@QAEPAXI@Z endp
.text:000072AA
.text:000072AA ; ---------------------------------------------------------------------------
.text:000072AD                 align 10h
.text:000072AD _text           ends
.text:000072AD
.text:000072B0 ; ===========================================================================
.text:000072B0
.text:000072B0 ; Segment type: Pure code
.text:000072B0 ; Segment permissions: Read/Execute
.text:000072B0 _text           segment para public 'CODE' use32
.text:000072B0                 assume cs:_text
.text:000072B0                 ;org 72B0h
.text:000072B0 ; COMDAT (pick any)
.text:000072B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000072B0
.text:000072B0 ; =============== S U B R O U T I N E =======================================
.text:000072B0
.text:000072B0 ; Attributes: bp-based frame
.text:000072B0
.text:000072B0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000072B0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000072B0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000072B0                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::CObjectVector<CBuffer<uchar>>(void)+11p
.text:000072B0
.text:000072B0 var_4           = dword ptr -4
.text:000072B0
.text:000072B0                 push    ebp
.text:000072B1                 mov     ebp, esp
.text:000072B3                 push    ecx
.text:000072B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072BB                 mov     [ebp+var_4], ecx
.text:000072BE                 mov     eax, [ebp+var_4]
.text:000072C1                 mov     dword ptr [eax], 0
.text:000072C7                 mov     ecx, [ebp+var_4]
.text:000072CA                 mov     dword ptr [ecx+4], 0
.text:000072D1                 mov     edx, [ebp+var_4]
.text:000072D4                 mov     dword ptr [edx+8], 0
.text:000072DB                 mov     eax, [ebp+var_4]
.text:000072DE                 mov     esp, ebp
.text:000072E0                 pop     ebp
.text:000072E1                 retn
.text:000072E1 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:000072E1
.text:000072E1 ; ---------------------------------------------------------------------------
.text:000072E2                 align 4
.text:000072E2 _text           ends
.text:000072E2
.text:000072E4 ; ===========================================================================
.text:000072E4
.text:000072E4 ; Segment type: Pure code
.text:000072E4 ; Segment permissions: Read/Execute
.text:000072E4 _text           segment para public 'CODE' use32
.text:000072E4                 assume cs:_text
.text:000072E4                 ;org 72E4h
.text:000072E4 ; COMDAT (pick any)
.text:000072E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000072E4
.text:000072E4 ; =============== S U B R O U T I N E =======================================
.text:000072E4
.text:000072E4 ; Attributes: bp-based frame
.text:000072E4
.text:000072E4 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000072E4                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000072E4 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000072E4                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::Size(void)+11p
.text:000072E4                                         ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+46p
.text:000072E4
.text:000072E4 var_4           = dword ptr -4
.text:000072E4
.text:000072E4                 push    ebp
.text:000072E5                 mov     ebp, esp
.text:000072E7                 push    ecx
.text:000072E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072EF                 mov     [ebp+var_4], ecx
.text:000072F2                 mov     eax, [ebp+var_4]
.text:000072F5                 mov     eax, [eax+4]
.text:000072F8                 mov     esp, ebp
.text:000072FA                 pop     ebp
.text:000072FB                 retn
.text:000072FB ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000072FB
.text:000072FB _text           ends
.text:000072FB
.text:000072FC ; ===========================================================================
.text:000072FC
.text:000072FC ; Segment type: Pure code
.text:000072FC ; Segment permissions: Read/Execute
.text:000072FC _text           segment para public 'CODE' use32
.text:000072FC                 assume cs:_text
.text:000072FC                 ;org 72FCh
.text:000072FC ; COMDAT (pick any)
.text:000072FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000072FC
.text:000072FC ; =============== S U B R O U T I N E =======================================
.text:000072FC
.text:000072FC ; Attributes: bp-based frame
.text:000072FC
.text:000072FC ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000072FC                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:000072FC ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:000072FC                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+9Cp
.text:000072FC                                         ; __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0+3j
.text:000072FC
.text:000072FC var_8           = dword ptr -8
.text:000072FC var_4           = dword ptr -4
.text:000072FC
.text:000072FC                 push    ebp
.text:000072FD                 mov     ebp, esp
.text:000072FF                 sub     esp, 8
.text:00007302                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007309                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007310                 mov     [ebp+var_4], ecx
.text:00007313                 mov     eax, [ebp+var_4]
.text:00007316                 mov     ecx, [eax]
.text:00007318                 mov     [ebp+var_8], ecx
.text:0000731B                 mov     edx, [ebp+var_8]
.text:0000731E                 push    edx             ; void *
.text:0000731F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007324                 add     esp, 4
.text:00007327                 add     esp, 8
.text:0000732A                 cmp     ebp, esp
.text:0000732C                 call    __RTC_CheckEsp
.text:00007331                 mov     esp, ebp
.text:00007333                 pop     ebp
.text:00007334                 retn
.text:00007334 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00007334
.text:00007334 ; ---------------------------------------------------------------------------
.text:00007335                 align 4
.text:00007335 _text           ends
.text:00007335
.text:00007338 ; ===========================================================================
.text:00007338
.text:00007338 ; Segment type: Pure code
.text:00007338 ; Segment permissions: Read/Execute
.text:00007338 _text           segment para public 'CODE' use32
.text:00007338                 assume cs:_text
.text:00007338                 ;org 7338h
.text:00007338 ; COMDAT (pick any)
.text:00007338                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007338
.text:00007338 ; =============== S U B R O U T I N E =======================================
.text:00007338
.text:00007338 ; Attributes: bp-based frame
.text:00007338
.text:00007338 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00007338                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00007338 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00007338                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::AddNew(void)+84p
.text:00007338
.text:00007338 var_8           = dword ptr -8
.text:00007338 var_4           = dword ptr -4
.text:00007338 arg_0           = dword ptr  8
.text:00007338
.text:00007338                 push    ebp
.text:00007339                 mov     ebp, esp
.text:0000733B                 sub     esp, 8
.text:0000733E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007345                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000734C                 mov     [ebp+var_4], ecx
.text:0000734F                 mov     ecx, [ebp+var_4]
.text:00007352                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00007357                 mov     eax, [ebp+var_4]
.text:0000735A                 mov     ecx, [eax+4]
.text:0000735D                 mov     edx, [ebp+var_4]
.text:00007360                 mov     eax, [edx]
.text:00007362                 mov     edx, [ebp+arg_0]
.text:00007365                 mov     [eax+ecx*4], edx
.text:00007368                 mov     eax, [ebp+var_4]
.text:0000736B                 mov     ecx, [eax+4]
.text:0000736E                 mov     [ebp+var_8], ecx
.text:00007371                 mov     edx, [ebp+var_4]
.text:00007374                 mov     eax, [edx+4]
.text:00007377                 add     eax, 1
.text:0000737A                 mov     ecx, [ebp+var_4]
.text:0000737D                 mov     [ecx+4], eax
.text:00007380                 mov     eax, [ebp+var_8]
.text:00007383                 add     esp, 8
.text:00007386                 cmp     ebp, esp
.text:00007388                 call    __RTC_CheckEsp
.text:0000738D                 mov     esp, ebp
.text:0000738F                 pop     ebp
.text:00007390                 retn    4
.text:00007390 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00007390
.text:00007390 ; ---------------------------------------------------------------------------
.text:00007393                 align 4
.text:00007393 _text           ends
.text:00007393
.text:00007394 ; ===========================================================================
.text:00007394
.text:00007394 ; Segment type: Pure code
.text:00007394 ; Segment permissions: Read/Execute
.text:00007394 _text           segment para public 'CODE' use32
.text:00007394                 assume cs:_text
.text:00007394                 ;org 7394h
.text:00007394 ; COMDAT (pick any)
.text:00007394                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007394
.text:00007394 ; =============== S U B R O U T I N E =======================================
.text:00007394
.text:00007394 ; Attributes: bp-based frame
.text:00007394
.text:00007394 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00007394                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00007394 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00007394                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::operator[](uint)+15p
.text:00007394
.text:00007394 var_4           = dword ptr -4
.text:00007394 arg_0           = dword ptr  8
.text:00007394
.text:00007394                 push    ebp
.text:00007395                 mov     ebp, esp
.text:00007397                 push    ecx
.text:00007398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000739F                 mov     [ebp+var_4], ecx
.text:000073A2                 mov     eax, [ebp+var_4]
.text:000073A5                 mov     ecx, [eax]
.text:000073A7                 mov     edx, [ebp+arg_0]
.text:000073AA                 lea     eax, [ecx+edx*4]
.text:000073AD                 mov     esp, ebp
.text:000073AF                 pop     ebp
.text:000073B0                 retn    4
.text:000073B0 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000073B0
.text:000073B0 ; ---------------------------------------------------------------------------
.text:000073B3                 align 4
.text:000073B3 _text           ends
.text:000073B3
.text:000073B4 ; ===========================================================================
.text:000073B4
.text:000073B4 ; Segment type: Pure code
.text:000073B4 ; Segment permissions: Read/Execute
.text:000073B4 _text           segment para public 'CODE' use32
.text:000073B4                 assume cs:_text
.text:000073B4                 ;org 73B4h
.text:000073B4 ; COMDAT (pick any)
.text:000073B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000073B4
.text:000073B4 ; =============== S U B R O U T I N E =======================================
.text:000073B4
.text:000073B4 ; Attributes: bp-based frame
.text:000073B4
.text:000073B4 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:000073B4                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:000073B4 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:000073B4                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+64p
.text:000073B4                                         ; CObjectVector<CBuffer<uchar>>::operator[](uint)+15p
.text:000073B4
.text:000073B4 var_4           = dword ptr -4
.text:000073B4 arg_0           = dword ptr  8
.text:000073B4
.text:000073B4                 push    ebp
.text:000073B5                 mov     ebp, esp
.text:000073B7                 push    ecx
.text:000073B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073BF                 mov     [ebp+var_4], ecx
.text:000073C2                 mov     eax, [ebp+var_4]
.text:000073C5                 mov     ecx, [eax]
.text:000073C7                 mov     edx, [ebp+arg_0]
.text:000073CA                 lea     eax, [ecx+edx*4]
.text:000073CD                 mov     esp, ebp
.text:000073CF                 pop     ebp
.text:000073D0                 retn    4
.text:000073D0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000073D0
.text:000073D0 ; ---------------------------------------------------------------------------
.text:000073D3                 align 4
.text:000073D3 _text           ends
.text:000073D3
.text:000073D4 ; ===========================================================================
.text:000073D4
.text:000073D4 ; Segment type: Pure code
.text:000073D4 ; Segment permissions: Read/Execute
.text:000073D4 _text           segment para public 'CODE' use32
.text:000073D4                 assume cs:_text
.text:000073D4                 ;org 73D4h
.text:000073D4 ; COMDAT (pick any)
.text:000073D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000073D4
.text:000073D4 ; =============== S U B R O U T I N E =======================================
.text:000073D4
.text:000073D4 ; Attributes: bp-based frame
.text:000073D4
.text:000073D4 ; public: void __thiscall CRecordVector<unsigned int>::ClearAndReserve(unsigned int)
.text:000073D4                 public ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
.text:000073D4 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z proc near
.text:000073D4                                         ; CODE XREF: CRecordVector<uint>::ClearAndSetSize(uint)+15p
.text:000073D4
.text:000073D4 var_C           = dword ptr -0Ch
.text:000073D4 var_8           = dword ptr -8
.text:000073D4 var_4           = dword ptr -4
.text:000073D4 arg_0           = dword ptr  8
.text:000073D4
.text:000073D4                 push    ebp
.text:000073D5                 mov     ebp, esp
.text:000073D7                 sub     esp, 0Ch
.text:000073DA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000073E1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000073E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073EF                 mov     [ebp+var_4], ecx
.text:000073F2                 mov     ecx, [ebp+var_4]
.text:000073F5                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:000073FA                 mov     eax, [ebp+var_4]
.text:000073FD                 mov     ecx, [ebp+arg_0]
.text:00007400                 cmp     ecx, [eax+8]
.text:00007403                 jbe     short loc_745C
.text:00007405                 mov     edx, [ebp+var_4]
.text:00007408                 mov     eax, [edx]
.text:0000740A                 mov     [ebp+var_8], eax
.text:0000740D                 mov     ecx, [ebp+var_8]
.text:00007410                 push    ecx             ; void *
.text:00007411                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007416                 add     esp, 4
.text:00007419                 mov     edx, [ebp+var_4]
.text:0000741C                 mov     dword ptr [edx], 0
.text:00007422                 mov     eax, [ebp+var_4]
.text:00007425                 mov     dword ptr [eax+8], 0
.text:0000742C                 xor     ecx, ecx
.text:0000742E                 mov     eax, [ebp+arg_0]
.text:00007431                 mov     edx, 4
.text:00007436                 mul     edx
.text:00007438                 seto    cl
.text:0000743B                 neg     ecx
.text:0000743D                 or      ecx, eax
.text:0000743F                 push    ecx             ; unsigned int
.text:00007440                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007445                 add     esp, 4
.text:00007448                 mov     [ebp+var_C], eax
.text:0000744B                 mov     eax, [ebp+var_4]
.text:0000744E                 mov     ecx, [ebp+var_C]
.text:00007451                 mov     [eax], ecx
.text:00007453                 mov     edx, [ebp+var_4]
.text:00007456                 mov     eax, [ebp+arg_0]
.text:00007459                 mov     [edx+8], eax
.text:0000745C
.text:0000745C loc_745C:                               ; CODE XREF: CRecordVector<uint>::ClearAndReserve(uint)+2Fj
.text:0000745C                 add     esp, 0Ch
.text:0000745F                 cmp     ebp, esp
.text:00007461                 call    __RTC_CheckEsp
.text:00007466                 mov     esp, ebp
.text:00007468                 pop     ebp
.text:00007469                 retn    4
.text:00007469 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z endp
.text:00007469
.text:00007469 _text           ends
.text:00007469
.text:0000746C ; ===========================================================================
.text:0000746C
.text:0000746C ; Segment type: Pure code
.text:0000746C ; Segment permissions: Read/Execute
.text:0000746C _text           segment para public 'CODE' use32
.text:0000746C                 assume cs:_text
.text:0000746C                 ;org 746Ch
.text:0000746C ; COMDAT (pick any)
.text:0000746C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000746C
.text:0000746C ; =============== S U B R O U T I N E =======================================
.text:0000746C
.text:0000746C ; Attributes: bp-based frame
.text:0000746C
.text:0000746C ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000746C                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:0000746C ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:0000746C                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:0000746C                                         ; CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)+11p
.text:0000746C
.text:0000746C var_14          = dword ptr -14h
.text:0000746C var_10          = dword ptr -10h
.text:0000746C Dst             = dword ptr -0Ch
.text:0000746C var_8           = dword ptr -8
.text:0000746C var_4           = dword ptr -4
.text:0000746C
.text:0000746C                 push    ebp
.text:0000746D                 mov     ebp, esp
.text:0000746F                 sub     esp, 14h
.text:00007472                 mov     eax, 0CCCCCCCCh
.text:00007477                 mov     [ebp+var_14], eax
.text:0000747A                 mov     [ebp+var_10], eax
.text:0000747D                 mov     [ebp+Dst], eax
.text:00007480                 mov     [ebp+var_8], eax
.text:00007483                 mov     [ebp+var_4], eax
.text:00007486                 mov     [ebp+var_4], ecx
.text:00007489                 mov     eax, [ebp+var_4]
.text:0000748C                 mov     ecx, [ebp+var_4]
.text:0000748F                 mov     edx, [eax+4]
.text:00007492                 cmp     edx, [ecx+8]
.text:00007495                 jnz     loc_7520
.text:0000749B                 mov     eax, [ebp+var_4]
.text:0000749E                 mov     ecx, [eax+8]
.text:000074A1                 shr     ecx, 2
.text:000074A4                 mov     edx, [ebp+var_4]
.text:000074A7                 mov     eax, [edx+8]
.text:000074AA                 lea     ecx, [eax+ecx+1]
.text:000074AE                 mov     [ebp+var_8], ecx
.text:000074B1                 xor     ecx, ecx
.text:000074B3                 mov     eax, [ebp+var_8]
.text:000074B6                 mov     edx, 8
.text:000074BB                 mul     edx
.text:000074BD                 seto    cl
.text:000074C0                 neg     ecx
.text:000074C2                 or      ecx, eax
.text:000074C4                 push    ecx             ; unsigned int
.text:000074C5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000074CA                 add     esp, 4
.text:000074CD                 mov     [ebp+var_10], eax
.text:000074D0                 mov     eax, [ebp+var_10]
.text:000074D3                 mov     [ebp+Dst], eax
.text:000074D6                 mov     ecx, [ebp+var_4]
.text:000074D9                 cmp     dword ptr [ecx+4], 0
.text:000074DD                 jz      short loc_74FB
.text:000074DF                 mov     edx, [ebp+var_4]
.text:000074E2                 mov     eax, [edx+4]
.text:000074E5                 shl     eax, 3
.text:000074E8                 push    eax             ; Size
.text:000074E9                 mov     ecx, [ebp+var_4]
.text:000074EC                 mov     edx, [ecx]
.text:000074EE                 push    edx             ; Src
.text:000074EF                 mov     eax, [ebp+Dst]
.text:000074F2                 push    eax             ; Dst
.text:000074F3                 call    _memcpy
.text:000074F8                 add     esp, 0Ch
.text:000074FB
.text:000074FB loc_74FB:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:000074FB                 mov     ecx, [ebp+var_4]
.text:000074FE                 mov     edx, [ecx]
.text:00007500                 mov     [ebp+var_14], edx
.text:00007503                 mov     eax, [ebp+var_14]
.text:00007506                 push    eax             ; void *
.text:00007507                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000750C                 add     esp, 4
.text:0000750F                 mov     ecx, [ebp+var_4]
.text:00007512                 mov     edx, [ebp+Dst]
.text:00007515                 mov     [ecx], edx
.text:00007517                 mov     eax, [ebp+var_4]
.text:0000751A                 mov     ecx, [ebp+var_8]
.text:0000751D                 mov     [eax+8], ecx
.text:00007520
.text:00007520 loc_7520:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:00007520                 add     esp, 14h
.text:00007523                 cmp     ebp, esp
.text:00007525                 call    __RTC_CheckEsp
.text:0000752A                 mov     esp, ebp
.text:0000752C                 pop     ebp
.text:0000752D                 retn
.text:0000752D ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:0000752D
.text:0000752D ; ---------------------------------------------------------------------------
.text:0000752E                 align 10h
.text:0000752E _text           ends
.text:0000752E
.text:00007530 ; ===========================================================================
.text:00007530
.text:00007530 ; Segment type: Pure code
.text:00007530 ; Segment permissions: Read/Execute
.text:00007530 _text           segment para public 'CODE' use32
.text:00007530                 assume cs:_text
.text:00007530                 ;org 7530h
.text:00007530 ; COMDAT (pick any)
.text:00007530                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007530
.text:00007530 ; =============== S U B R O U T I N E =======================================
.text:00007530
.text:00007530 ; Attributes: bp-based frame
.text:00007530
.text:00007530 ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndReserve(unsigned int)
.text:00007530                 public ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
.text:00007530 ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00007530                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndSetSize(uint)+15p
.text:00007530
.text:00007530 var_C           = dword ptr -0Ch
.text:00007530 var_8           = dword ptr -8
.text:00007530 var_4           = dword ptr -4
.text:00007530 arg_0           = dword ptr  8
.text:00007530
.text:00007530                 push    ebp
.text:00007531                 mov     ebp, esp
.text:00007533                 sub     esp, 0Ch
.text:00007536                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000753D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007544                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000754B                 mov     [ebp+var_4], ecx
.text:0000754E                 mov     ecx, [ebp+var_4]
.text:00007551                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00007556                 mov     eax, [ebp+var_4]
.text:00007559                 mov     ecx, [ebp+arg_0]
.text:0000755C                 cmp     ecx, [eax+8]
.text:0000755F                 jbe     short loc_75B8
.text:00007561                 mov     edx, [ebp+var_4]
.text:00007564                 mov     eax, [edx]
.text:00007566                 mov     [ebp+var_8], eax
.text:00007569                 mov     ecx, [ebp+var_8]
.text:0000756C                 push    ecx             ; void *
.text:0000756D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007572                 add     esp, 4
.text:00007575                 mov     edx, [ebp+var_4]
.text:00007578                 mov     dword ptr [edx], 0
.text:0000757E                 mov     eax, [ebp+var_4]
.text:00007581                 mov     dword ptr [eax+8], 0
.text:00007588                 xor     ecx, ecx
.text:0000758A                 mov     eax, [ebp+arg_0]
.text:0000758D                 mov     edx, 8
.text:00007592                 mul     edx
.text:00007594                 seto    cl
.text:00007597                 neg     ecx
.text:00007599                 or      ecx, eax
.text:0000759B                 push    ecx             ; unsigned int
.text:0000759C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000075A1                 add     esp, 4
.text:000075A4                 mov     [ebp+var_C], eax
.text:000075A7                 mov     eax, [ebp+var_4]
.text:000075AA                 mov     ecx, [ebp+var_C]
.text:000075AD                 mov     [eax], ecx
.text:000075AF                 mov     edx, [ebp+var_4]
.text:000075B2                 mov     eax, [ebp+arg_0]
.text:000075B5                 mov     [edx+8], eax
.text:000075B8
.text:000075B8 loc_75B8:                               ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+2Fj
.text:000075B8                 add     esp, 0Ch
.text:000075BB                 cmp     ebp, esp
.text:000075BD                 call    __RTC_CheckEsp
.text:000075C2                 mov     esp, ebp
.text:000075C4                 pop     ebp
.text:000075C5                 retn    4
.text:000075C5 ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:000075C5
.text:000075C5 _text           ends
.text:000075C5
.text:000075C8 ; ===========================================================================
.text:000075C8
.text:000075C8 ; Segment type: Pure code
.text:000075C8 ; Segment permissions: Read/Execute
.text:000075C8 _text           segment para public 'CODE' use32
.text:000075C8                 assume cs:_text
.text:000075C8                 ;org 75C8h
.text:000075C8 ; COMDAT (pick any)
.text:000075C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000075C8
.text:000075C8 ; =============== S U B R O U T I N E =======================================
.text:000075C8
.text:000075C8 ; Attributes: bp-based frame
.text:000075C8
.text:000075C8 ; public: void __thiscall CRecordVector<unsigned __int64>::Insert(unsigned int, unsigned __int64)
.text:000075C8                 public ?Insert@?$CRecordVector@_K@@QAEXI_K@Z
.text:000075C8 ?Insert@?$CRecordVector@_K@@QAEXI_K@Z proc near
.text:000075C8                                         ; CODE XREF: CRecordVector<unsigned __int64>::AddToUniqueSorted(unsigned __int64)+A3p
.text:000075C8
.text:000075C8 var_4           = dword ptr -4
.text:000075C8 arg_0           = dword ptr  8
.text:000075C8 arg_4           = dword ptr  0Ch
.text:000075C8 arg_8           = dword ptr  10h
.text:000075C8
.text:000075C8                 push    ebp
.text:000075C9                 mov     ebp, esp
.text:000075CB                 push    ecx
.text:000075CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075D3                 mov     [ebp+var_4], ecx
.text:000075D6                 mov     ecx, [ebp+var_4]
.text:000075D9                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:000075DE                 mov     eax, [ebp+arg_0]
.text:000075E1                 push    eax
.text:000075E2                 mov     ecx, [ebp+arg_0]
.text:000075E5                 add     ecx, 1
.text:000075E8                 push    ecx
.text:000075E9                 mov     ecx, [ebp+var_4]
.text:000075EC                 call    ?MoveItems@?$CRecordVector@_K@@AAEXII@Z ; CRecordVector<unsigned __int64>::MoveItems(uint,uint)
.text:000075F1                 mov     edx, [ebp+var_4]
.text:000075F4                 mov     eax, [edx]
.text:000075F6                 mov     ecx, [ebp+arg_0]
.text:000075F9                 mov     edx, [ebp+arg_4]
.text:000075FC                 mov     [eax+ecx*8], edx
.text:000075FF                 mov     edx, [ebp+arg_8]
.text:00007602                 mov     [eax+ecx*8+4], edx
.text:00007606                 mov     eax, [ebp+var_4]
.text:00007609                 mov     ecx, [eax+4]
.text:0000760C                 add     ecx, 1
.text:0000760F                 mov     edx, [ebp+var_4]
.text:00007612                 mov     [edx+4], ecx
.text:00007615                 add     esp, 4
.text:00007618                 cmp     ebp, esp
.text:0000761A                 call    __RTC_CheckEsp
.text:0000761F                 mov     esp, ebp
.text:00007621                 pop     ebp
.text:00007622                 retn    0Ch
.text:00007622 ?Insert@?$CRecordVector@_K@@QAEXI_K@Z endp
.text:00007622
.text:00007622 ; ---------------------------------------------------------------------------
.text:00007625                 align 4
.text:00007625 _text           ends
.text:00007625
.text:00007628 ; ===========================================================================
.text:00007628
.text:00007628 ; Segment type: Pure code
.text:00007628 ; Segment permissions: Read/Execute
.text:00007628 _text           segment para public 'CODE' use32
.text:00007628                 assume cs:_text
.text:00007628                 ;org 7628h
.text:00007628 ; COMDAT (pick any)
.text:00007628                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007628
.text:00007628 ; =============== S U B R O U T I N E =======================================
.text:00007628
.text:00007628 ; Attributes: bp-based frame
.text:00007628
.text:00007628 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00007628                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00007628 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00007628                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00007628
.text:00007628 var_14          = dword ptr -14h
.text:00007628 var_10          = dword ptr -10h
.text:00007628 Dst             = dword ptr -0Ch
.text:00007628 var_8           = dword ptr -8
.text:00007628 var_4           = dword ptr -4
.text:00007628
.text:00007628                 push    ebp
.text:00007629                 mov     ebp, esp
.text:0000762B                 sub     esp, 14h
.text:0000762E                 mov     eax, 0CCCCCCCCh
.text:00007633                 mov     [ebp+var_14], eax
.text:00007636                 mov     [ebp+var_10], eax
.text:00007639                 mov     [ebp+Dst], eax
.text:0000763C                 mov     [ebp+var_8], eax
.text:0000763F                 mov     [ebp+var_4], eax
.text:00007642                 mov     [ebp+var_4], ecx
.text:00007645                 mov     eax, [ebp+var_4]
.text:00007648                 mov     ecx, [ebp+var_4]
.text:0000764B                 mov     edx, [eax+4]
.text:0000764E                 cmp     edx, [ecx+8]
.text:00007651                 jnz     short loc_76C5
.text:00007653                 mov     eax, [ebp+var_4]
.text:00007656                 mov     ecx, [eax+8]
.text:00007659                 shr     ecx, 2
.text:0000765C                 mov     edx, [ebp+var_4]
.text:0000765F                 mov     eax, [edx+8]
.text:00007662                 lea     ecx, [eax+ecx+1]
.text:00007666                 mov     [ebp+var_8], ecx
.text:00007669                 mov     edx, [ebp+var_8]
.text:0000766C                 push    edx             ; unsigned int
.text:0000766D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007672                 add     esp, 4
.text:00007675                 mov     [ebp+var_10], eax
.text:00007678                 mov     eax, [ebp+var_10]
.text:0000767B                 mov     [ebp+Dst], eax
.text:0000767E                 mov     ecx, [ebp+var_4]
.text:00007681                 cmp     dword ptr [ecx+4], 0
.text:00007685                 jz      short loc_76A0
.text:00007687                 mov     edx, [ebp+var_4]
.text:0000768A                 mov     eax, [edx+4]
.text:0000768D                 push    eax             ; Size
.text:0000768E                 mov     ecx, [ebp+var_4]
.text:00007691                 mov     edx, [ecx]
.text:00007693                 push    edx             ; Src
.text:00007694                 mov     eax, [ebp+Dst]
.text:00007697                 push    eax             ; Dst
.text:00007698                 call    _memcpy
.text:0000769D                 add     esp, 0Ch
.text:000076A0
.text:000076A0 loc_76A0:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:000076A0                 mov     ecx, [ebp+var_4]
.text:000076A3                 mov     edx, [ecx]
.text:000076A5                 mov     [ebp+var_14], edx
.text:000076A8                 mov     eax, [ebp+var_14]
.text:000076AB                 push    eax             ; void *
.text:000076AC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000076B1                 add     esp, 4
.text:000076B4                 mov     ecx, [ebp+var_4]
.text:000076B7                 mov     edx, [ebp+Dst]
.text:000076BA                 mov     [ecx], edx
.text:000076BC                 mov     eax, [ebp+var_4]
.text:000076BF                 mov     ecx, [ebp+var_8]
.text:000076C2                 mov     [eax+8], ecx
.text:000076C5
.text:000076C5 loc_76C5:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:000076C5                 add     esp, 14h
.text:000076C8                 cmp     ebp, esp
.text:000076CA                 call    __RTC_CheckEsp
.text:000076CF                 mov     esp, ebp
.text:000076D1                 pop     ebp
.text:000076D2                 retn
.text:000076D2 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:000076D2
.text:000076D2 ; ---------------------------------------------------------------------------
.text:000076D3                 align 4
.text:000076D3 _text           ends
.text:000076D3
.text:000076D4 ; ===========================================================================
.text:000076D4
.text:000076D4 ; Segment type: Pure code
.text:000076D4 ; Segment permissions: Read/Execute
.text:000076D4 _text           segment para public 'CODE' use32
.text:000076D4                 assume cs:_text
.text:000076D4                 ;org 76D4h
.text:000076D4 ; COMDAT (pick any)
.text:000076D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000076D4
.text:000076D4 ; =============== S U B R O U T I N E =======================================
.text:000076D4
.text:000076D4 ; Attributes: bp-based frame
.text:000076D4
.text:000076D4 ; public: void __thiscall CRecordVector<bool>::ClearAndReserve(unsigned int)
.text:000076D4                 public ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
.text:000076D4 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z proc near
.text:000076D4                                         ; CODE XREF: CRecordVector<bool>::ClearAndSetSize(uint)+15p
.text:000076D4
.text:000076D4 var_C           = dword ptr -0Ch
.text:000076D4 var_8           = dword ptr -8
.text:000076D4 var_4           = dword ptr -4
.text:000076D4 arg_0           = dword ptr  8
.text:000076D4
.text:000076D4                 push    ebp
.text:000076D5                 mov     ebp, esp
.text:000076D7                 sub     esp, 0Ch
.text:000076DA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000076E1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000076E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076EF                 mov     [ebp+var_4], ecx
.text:000076F2                 mov     ecx, [ebp+var_4]
.text:000076F5                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:000076FA                 mov     eax, [ebp+var_4]
.text:000076FD                 mov     ecx, [ebp+arg_0]
.text:00007700                 cmp     ecx, [eax+8]
.text:00007703                 jbe     short loc_774C
.text:00007705                 mov     edx, [ebp+var_4]
.text:00007708                 mov     eax, [edx]
.text:0000770A                 mov     [ebp+var_8], eax
.text:0000770D                 mov     ecx, [ebp+var_8]
.text:00007710                 push    ecx             ; void *
.text:00007711                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007716                 add     esp, 4
.text:00007719                 mov     edx, [ebp+var_4]
.text:0000771C                 mov     dword ptr [edx], 0
.text:00007722                 mov     eax, [ebp+var_4]
.text:00007725                 mov     dword ptr [eax+8], 0
.text:0000772C                 mov     ecx, [ebp+arg_0]
.text:0000772F                 push    ecx             ; unsigned int
.text:00007730                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007735                 add     esp, 4
.text:00007738                 mov     [ebp+var_C], eax
.text:0000773B                 mov     edx, [ebp+var_4]
.text:0000773E                 mov     eax, [ebp+var_C]
.text:00007741                 mov     [edx], eax
.text:00007743                 mov     ecx, [ebp+var_4]
.text:00007746                 mov     edx, [ebp+arg_0]
.text:00007749                 mov     [ecx+8], edx
.text:0000774C
.text:0000774C loc_774C:                               ; CODE XREF: CRecordVector<bool>::ClearAndReserve(uint)+2Fj
.text:0000774C                 add     esp, 0Ch
.text:0000774F                 cmp     ebp, esp
.text:00007751                 call    __RTC_CheckEsp
.text:00007756                 mov     esp, ebp
.text:00007758                 pop     ebp
.text:00007759                 retn    4
.text:00007759 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z endp
.text:00007759
.text:00007759 _text           ends
.text:00007759
.text:0000775C ; ===========================================================================
.text:0000775C
.text:0000775C ; Segment type: Pure code
.text:0000775C ; Segment permissions: Read/Execute
.text:0000775C _text           segment para public 'CODE' use32
.text:0000775C                 assume cs:_text
.text:0000775C                 ;org 775Ch
.text:0000775C ; COMDAT (pick any)
.text:0000775C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000775C
.text:0000775C ; =============== S U B R O U T I N E =======================================
.text:0000775C
.text:0000775C ; Attributes: bp-based frame
.text:0000775C
.text:0000775C ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::ClearAndReserve(unsigned int)
.text:0000775C                 public ?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
.text:0000775C ?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z proc near
.text:0000775C                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize(uint)+15p
.text:0000775C
.text:0000775C var_24          = dword ptr -24h
.text:0000775C var_20          = dword ptr -20h
.text:0000775C var_1C          = dword ptr -1Ch
.text:0000775C var_18          = dword ptr -18h
.text:0000775C var_14          = dword ptr -14h
.text:0000775C var_10          = dword ptr -10h
.text:0000775C var_C           = dword ptr -0Ch
.text:0000775C var_4           = dword ptr -4
.text:0000775C arg_0           = dword ptr  8
.text:0000775C
.text:0000775C                 push    ebp
.text:0000775D                 mov     ebp, esp
.text:0000775F                 push    0FFFFFFFFh
.text:00007761                 push    offset __ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
.text:00007766                 mov     eax, large fs:0
.text:0000776C                 push    eax
.text:0000776D                 sub     esp, 18h
.text:00007770                 mov     eax, 0CCCCCCCCh
.text:00007775                 mov     [ebp+var_24], eax
.text:00007778                 mov     [ebp+var_20], eax
.text:0000777B                 mov     [ebp+var_1C], eax
.text:0000777E                 mov     [ebp+var_18], eax
.text:00007781                 mov     [ebp+var_14], eax
.text:00007784                 mov     [ebp+var_10], eax
.text:00007787                 mov     eax, dword ptr ds:___security_cookie
.text:0000778C                 xor     eax, ebp
.text:0000778E                 push    eax
.text:0000778F                 lea     eax, [ebp+var_C]
.text:00007792                 mov     large fs:0, eax
.text:00007798                 mov     [ebp+var_10], ecx
.text:0000779B                 mov     ecx, [ebp+var_10]
.text:0000779E                 call    ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear(void)
.text:000077A3                 mov     eax, [ebp+var_10]
.text:000077A6                 mov     ecx, [ebp+arg_0]
.text:000077A9                 cmp     ecx, [eax+8]
.text:000077AC                 jbe     loc_784C
.text:000077B2                 mov     edx, [ebp+var_10]
.text:000077B5                 mov     eax, [edx]
.text:000077B7                 mov     [ebp+var_14], eax
.text:000077BA                 mov     ecx, [ebp+var_14]
.text:000077BD                 push    ecx             ; void *
.text:000077BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000077C3                 add     esp, 4
.text:000077C6                 mov     edx, [ebp+var_10]
.text:000077C9                 mov     dword ptr [edx], 0
.text:000077CF                 mov     eax, [ebp+var_10]
.text:000077D2                 mov     dword ptr [eax+8], 0
.text:000077D9                 mov     ecx, [ebp+arg_0]
.text:000077DC                 mov     [ebp+var_18], ecx
.text:000077DF                 xor     ecx, ecx
.text:000077E1                 mov     eax, [ebp+var_18]
.text:000077E4                 mov     edx, 18h
.text:000077E9                 mul     edx
.text:000077EB                 seto    cl
.text:000077EE                 neg     ecx
.text:000077F0                 or      ecx, eax
.text:000077F2                 push    ecx             ; unsigned int
.text:000077F3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000077F8                 add     esp, 4
.text:000077FB                 mov     [ebp+var_20], eax
.text:000077FE                 mov     [ebp+var_4], 0
.text:00007805                 cmp     [ebp+var_20], 0
.text:00007809                 jz      short loc_7827
.text:0000780B                 push    offset ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:00007810                 mov     eax, [ebp+var_18]
.text:00007813                 push    eax
.text:00007814                 push    18h
.text:00007816                 mov     ecx, [ebp+var_20]
.text:00007819                 push    ecx
.text:0000781A                 call    ??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
.text:0000781F                 mov     edx, [ebp+var_20]
.text:00007822                 mov     [ebp+var_24], edx
.text:00007825                 jmp     short loc_782E
.text:00007827 ; ---------------------------------------------------------------------------
.text:00007827
.text:00007827 loc_7827:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+ADj
.text:00007827                 mov     [ebp+var_24], 0
.text:0000782E
.text:0000782E loc_782E:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+C9j
.text:0000782E                 mov     eax, [ebp+var_24]
.text:00007831                 mov     [ebp+var_1C], eax
.text:00007834                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000783B                 mov     ecx, [ebp+var_10]
.text:0000783E                 mov     edx, [ebp+var_1C]
.text:00007841                 mov     [ecx], edx
.text:00007843                 mov     eax, [ebp+var_10]
.text:00007846                 mov     ecx, [ebp+arg_0]
.text:00007849                 mov     [eax+8], ecx
.text:0000784C
.text:0000784C loc_784C:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+50j
.text:0000784C                 mov     ecx, [ebp+var_C]
.text:0000784F                 mov     large fs:0, ecx
.text:00007856                 pop     ecx
.text:00007857                 add     esp, 24h
.text:0000785A                 cmp     ebp, esp
.text:0000785C                 call    __RTC_CheckEsp
.text:00007861                 mov     esp, ebp
.text:00007863                 pop     ebp
.text:00007864                 retn    4
.text:00007864 ?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z endp
.text:00007864
.text:00007864 ; ---------------------------------------------------------------------------
.text:00007867                 align 4
.text:00007867 _text           ends
.text:00007867
.text$x:00007868 ; ===========================================================================
.text$x:00007868
.text$x:00007868 ; Segment type: Pure code
.text$x:00007868 ; Segment permissions: Read/Execute
.text$x:00007868 _text$x         segment para public 'CODE' use32
.text$x:00007868                 assume cs:_text$x
.text$x:00007868                 ;org 7868h
.text$x:00007868 ; COMDAT (pick associative to section at 775C)
.text$x:00007868                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007868
.text$x:00007868 ; =============== S U B R O U T I N E =======================================
.text$x:00007868
.text$x:00007868
.text$x:00007868 __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z$0 proc near
.text$x:00007868                                         ; DATA XREF: .xdata$x:00007894o
.text$x:00007868                 mov     eax, [ebp-20h]
.text$x:0000786B                 push    eax             ; void *
.text$x:0000786C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007871                 pop     ecx
.text$x:00007872                 retn
.text$x:00007872 __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z$0 endp
.text$x:00007872
.text$x:00007873
.text$x:00007873 ; =============== S U B R O U T I N E =======================================
.text$x:00007873
.text$x:00007873
.text$x:00007873 __ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z proc near
.text$x:00007873                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+5o
.text$x:00007873
.text$x:00007873 arg_4           = dword ptr  8
.text$x:00007873
.text$x:00007873                 mov     edx, [esp+arg_4]
.text$x:00007877                 lea     eax, [edx+0Ch]
.text$x:0000787A                 mov     ecx, [edx-1Ch]
.text$x:0000787D                 xor     ecx, eax
.text$x:0000787F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007884                 mov     eax, offset __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
.text$x:00007889                 jmp     ___CxxFrameHandler3
.text$x:00007889 __ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z endp
.text$x:00007889
.text$x:00007889 ; ---------------------------------------------------------------------------
.text$x:0000788E                 align 10h
.text$x:0000788E _text$x         ends
.text$x:0000788E
.xdata$x:00007890 ; ===========================================================================
.xdata$x:00007890
.xdata$x:00007890 ; Segment type: Pure data
.xdata$x:00007890 ; Segment permissions: Read
.xdata$x:00007890 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007890                 assume cs:_xdata$x
.xdata$x:00007890                 ;org 7890h
.xdata$x:00007890 ; COMDAT (pick associative to section at 775C)
.xdata$x:00007890 __unwindtable$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z db 0FFh
.xdata$x:00007890                                         ; DATA XREF: .xdata$x:000078A0o
.xdata$x:00007891                 db 0FFh
.xdata$x:00007892                 db 0FFh
.xdata$x:00007893                 db 0FFh
.xdata$x:00007894                 dd offset __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z$0
.xdata$x:00007898 __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z db  22h ; "
.xdata$x:00007898                                         ; DATA XREF: __ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z+11o
.xdata$x:00007899                 db    5
.xdata$x:0000789A                 db  93h ; ô
.xdata$x:0000789B                 db  19h
.xdata$x:0000789C                 db    1
.xdata$x:0000789D                 db    0
.xdata$x:0000789E                 db    0
.xdata$x:0000789F                 db    0
.xdata$x:000078A0                 dd offset __unwindtable$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
.xdata$x:000078A4                 db    0
.xdata$x:000078A5                 db    0
.xdata$x:000078A6                 db    0
.xdata$x:000078A7                 db    0
.xdata$x:000078A8                 db    0
.xdata$x:000078A9                 db    0
.xdata$x:000078AA                 db    0
.xdata$x:000078AB                 db    0
.xdata$x:000078AC                 db    0
.xdata$x:000078AD                 db    0
.xdata$x:000078AE                 db    0
.xdata$x:000078AF                 db    0
.xdata$x:000078B0                 db    0
.xdata$x:000078B1                 db    0
.xdata$x:000078B2                 db    0
.xdata$x:000078B3                 db    0
.xdata$x:000078B4                 db    0
.xdata$x:000078B5                 db    0
.xdata$x:000078B6                 db    0
.xdata$x:000078B7                 db    0
.xdata$x:000078B8                 db    1
.xdata$x:000078B9                 db    0
.xdata$x:000078BA                 db    0
.xdata$x:000078BB                 db    0
.xdata$x:000078BB _xdata$x        ends
.xdata$x:000078BB
.text:000078BC ; ===========================================================================
.text:000078BC
.text:000078BC ; Segment type: Pure code
.text:000078BC ; Segment permissions: Read/Execute
.text:000078BC _text           segment para public 'CODE' use32
.text:000078BC                 assume cs:_text
.text:000078BC                 ;org 78BCh
.text:000078BC ; COMDAT (pick any)
.text:000078BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078BC
.text:000078BC ; =============== S U B R O U T I N E =======================================
.text:000078BC
.text:000078BC ; Attributes: bp-based frame
.text:000078BC
.text:000078BC ; _DWORD __thiscall NArchive::N7z::CFileItem::CFileItem(NArchive::N7z::CFileItem *__hidden this)
.text:000078BC                 public ??0CFileItem@N7z@NArchive@@QAE@XZ
.text:000078BC ??0CFileItem@N7z@NArchive@@QAE@XZ proc near
.text:000078BC                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+AFo
.text:000078BC
.text:000078BC var_4           = dword ptr -4
.text:000078BC
.text:000078BC                 push    ebp
.text:000078BD                 mov     ebp, esp
.text:000078BF                 push    ecx
.text:000078C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078C7                 mov     [ebp+var_4], ecx
.text:000078CA                 mov     eax, [ebp+var_4]
.text:000078CD                 mov     byte ptr [eax+10h], 1
.text:000078D1                 mov     ecx, [ebp+var_4]
.text:000078D4                 mov     byte ptr [ecx+11h], 0
.text:000078D8                 mov     edx, [ebp+var_4]
.text:000078DB                 mov     byte ptr [edx+12h], 0
.text:000078DF                 mov     eax, [ebp+var_4]
.text:000078E2                 mov     byte ptr [eax+13h], 0
.text:000078E6                 mov     eax, [ebp+var_4]
.text:000078E9                 mov     esp, ebp
.text:000078EB                 pop     ebp
.text:000078EC                 retn
.text:000078EC ??0CFileItem@N7z@NArchive@@QAE@XZ endp
.text:000078EC
.text:000078EC ; ---------------------------------------------------------------------------
.text:000078ED                 align 10h
.text:000078ED _text           ends
.text:000078ED
.text:000078F0 ; ===========================================================================
.text:000078F0
.text:000078F0 ; Segment type: Pure code
.text:000078F0 ; Segment permissions: Read/Execute
.text:000078F0 _text           segment para public 'CODE' use32
.text:000078F0                 assume cs:_text
.text:000078F0                 ;org 78F0h
.text:000078F0 ; COMDAT (pick any)
.text:000078F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078F0
.text:000078F0 ; =============== S U B R O U T I N E =======================================
.text:000078F0
.text:000078F0 ; Attributes: bp-based frame
.text:000078F0
.text:000078F0 ; public: class CBuffer<unsigned char> & __thiscall CObjectVector<class CBuffer<unsigned char>>::operator[](unsigned int)
.text:000078F0                 public ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z
.text:000078F0 ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z proc near
.text:000078F0                                         ; CODE XREF: CObjectVector<CBuffer<uchar>>::Front(void)+13p
.text:000078F0
.text:000078F0 var_4           = dword ptr -4
.text:000078F0 arg_0           = dword ptr  8
.text:000078F0
.text:000078F0                 push    ebp
.text:000078F1                 mov     ebp, esp
.text:000078F3                 push    ecx
.text:000078F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078FB                 mov     [ebp+var_4], ecx
.text:000078FE                 mov     eax, [ebp+arg_0]
.text:00007901                 push    eax
.text:00007902                 mov     ecx, [ebp+var_4]
.text:00007905                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000790A                 mov     eax, [eax]
.text:0000790C                 add     esp, 4
.text:0000790F                 cmp     ebp, esp
.text:00007911                 call    __RTC_CheckEsp
.text:00007916                 mov     esp, ebp
.text:00007918                 pop     ebp
.text:00007919                 retn    4
.text:00007919 ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z endp
.text:00007919
.text:00007919 _text           ends
.text:00007919
.text:0000791C ; ===========================================================================
.text:0000791C
.text:0000791C ; Segment type: Pure code
.text:0000791C ; Segment permissions: Read/Execute
.text:0000791C _text           segment para public 'CODE' use32
.text:0000791C                 assume cs:_text
.text:0000791C                 ;org 791Ch
.text:0000791C ; COMDAT (pick any)
.text:0000791C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000791C
.text:0000791C ; =============== S U B R O U T I N E =======================================
.text:0000791C
.text:0000791C ; Attributes: bp-based frame
.text:0000791C
.text:0000791C ; void __stdcall `vector constructor iterator'(void *, unsigned int, int, void * (__thiscall *)(void *))
.text:0000791C                 public ??_H@YGXPAXIHP6EPAX0@Z@Z
.text:0000791C ??_H@YGXPAXIHP6EPAX0@Z@Z proc near      ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve(uint)+BEp
.text:0000791C
.text:0000791C arg_0           = dword ptr  8
.text:0000791C arg_4           = dword ptr  0Ch
.text:0000791C arg_8           = dword ptr  10h
.text:0000791C arg_C           = dword ptr  14h
.text:0000791C
.text:0000791C                 push    ebp
.text:0000791D                 mov     ebp, esp
.text:0000791F                 push    esi
.text:00007920
.text:00007920 loc_7920:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+27j
.text:00007920                 mov     eax, [ebp+arg_8]
.text:00007923                 sub     eax, 1
.text:00007926                 mov     [ebp+arg_8], eax
.text:00007929                 js      short loc_7945
.text:0000792B                 mov     esi, esp
.text:0000792D                 mov     ecx, [ebp+arg_0]
.text:00007930                 call    [ebp+arg_C]
.text:00007933                 cmp     esi, esp
.text:00007935                 call    __RTC_CheckEsp
.text:0000793A                 mov     ecx, [ebp+arg_0]
.text:0000793D                 add     ecx, [ebp+arg_4]
.text:00007940                 mov     [ebp+arg_0], ecx
.text:00007943                 jmp     short loc_7920
.text:00007945 ; ---------------------------------------------------------------------------
.text:00007945
.text:00007945 loc_7945:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+Dj
.text:00007945                 pop     esi
.text:00007946                 cmp     ebp, esp
.text:00007948                 call    __RTC_CheckEsp
.text:0000794D                 pop     ebp
.text:0000794E                 retn    10h
.text:0000794E ??_H@YGXPAXIHP6EPAX0@Z@Z endp
.text:0000794E
.text:0000794E ; ---------------------------------------------------------------------------
.text:00007951                 align 4
.text:00007951 _text           ends
.text:00007951
.text:00007954 ; ===========================================================================
.text:00007954
.text:00007954 ; Segment type: Pure code
.text:00007954 ; Segment permissions: Read/Execute
.text:00007954 _text           segment para public 'CODE' use32
.text:00007954                 assume cs:_text
.text:00007954                 ;org 7954h
.text:00007954 ; COMDAT (pick any)
.text:00007954                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007954
.text:00007954 ; =============== S U B R O U T I N E =======================================
.text:00007954
.text:00007954 ; Attributes: bp-based frame
.text:00007954
.text:00007954 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00007954                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00007954 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00007954                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00007954
.text:00007954 var_14          = dword ptr -14h
.text:00007954 var_10          = dword ptr -10h
.text:00007954 Dst             = dword ptr -0Ch
.text:00007954 var_8           = dword ptr -8
.text:00007954 var_4           = dword ptr -4
.text:00007954
.text:00007954                 push    ebp
.text:00007955                 mov     ebp, esp
.text:00007957                 sub     esp, 14h
.text:0000795A                 mov     eax, 0CCCCCCCCh
.text:0000795F                 mov     [ebp+var_14], eax
.text:00007962                 mov     [ebp+var_10], eax
.text:00007965                 mov     [ebp+Dst], eax
.text:00007968                 mov     [ebp+var_8], eax
.text:0000796B                 mov     [ebp+var_4], eax
.text:0000796E                 mov     [ebp+var_4], ecx
.text:00007971                 mov     eax, [ebp+var_4]
.text:00007974                 mov     ecx, [ebp+var_4]
.text:00007977                 mov     edx, [eax+4]
.text:0000797A                 cmp     edx, [ecx+8]
.text:0000797D                 jnz     loc_7A08
.text:00007983                 mov     eax, [ebp+var_4]
.text:00007986                 mov     ecx, [eax+8]
.text:00007989                 shr     ecx, 2
.text:0000798C                 mov     edx, [ebp+var_4]
.text:0000798F                 mov     eax, [edx+8]
.text:00007992                 lea     ecx, [eax+ecx+1]
.text:00007996                 mov     [ebp+var_8], ecx
.text:00007999                 xor     ecx, ecx
.text:0000799B                 mov     eax, [ebp+var_8]
.text:0000799E                 mov     edx, 4
.text:000079A3                 mul     edx
.text:000079A5                 seto    cl
.text:000079A8                 neg     ecx
.text:000079AA                 or      ecx, eax
.text:000079AC                 push    ecx             ; unsigned int
.text:000079AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000079B2                 add     esp, 4
.text:000079B5                 mov     [ebp+var_10], eax
.text:000079B8                 mov     eax, [ebp+var_10]
.text:000079BB                 mov     [ebp+Dst], eax
.text:000079BE                 mov     ecx, [ebp+var_4]
.text:000079C1                 cmp     dword ptr [ecx+4], 0
.text:000079C5                 jz      short loc_79E3
.text:000079C7                 mov     edx, [ebp+var_4]
.text:000079CA                 mov     eax, [edx+4]
.text:000079CD                 shl     eax, 2
.text:000079D0                 push    eax             ; Size
.text:000079D1                 mov     ecx, [ebp+var_4]
.text:000079D4                 mov     edx, [ecx]
.text:000079D6                 push    edx             ; Src
.text:000079D7                 mov     eax, [ebp+Dst]
.text:000079DA                 push    eax             ; Dst
.text:000079DB                 call    _memcpy
.text:000079E0                 add     esp, 0Ch
.text:000079E3
.text:000079E3 loc_79E3:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:000079E3                 mov     ecx, [ebp+var_4]
.text:000079E6                 mov     edx, [ecx]
.text:000079E8                 mov     [ebp+var_14], edx
.text:000079EB                 mov     eax, [ebp+var_14]
.text:000079EE                 push    eax             ; void *
.text:000079EF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000079F4                 add     esp, 4
.text:000079F7                 mov     ecx, [ebp+var_4]
.text:000079FA                 mov     edx, [ebp+Dst]
.text:000079FD                 mov     [ecx], edx
.text:000079FF                 mov     eax, [ebp+var_4]
.text:00007A02                 mov     ecx, [ebp+var_8]
.text:00007A05                 mov     [eax+8], ecx
.text:00007A08
.text:00007A08 loc_7A08:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00007A08                 add     esp, 14h
.text:00007A0B                 cmp     ebp, esp
.text:00007A0D                 call    __RTC_CheckEsp
.text:00007A12                 mov     esp, ebp
.text:00007A14                 pop     ebp
.text:00007A15                 retn
.text:00007A15 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00007A15
.text:00007A15 ; ---------------------------------------------------------------------------
.text:00007A16                 align 4
.text:00007A16 _text           ends
.text:00007A16
.text:00007A18 ; ===========================================================================
.text:00007A18
.text:00007A18 ; Segment type: Pure code
.text:00007A18 ; Segment permissions: Read/Execute
.text:00007A18 _text           segment para public 'CODE' use32
.text:00007A18                 assume cs:_text
.text:00007A18                 ;org 7A18h
.text:00007A18 ; COMDAT (pick any)
.text:00007A18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007A18
.text:00007A18 ; =============== S U B R O U T I N E =======================================
.text:00007A18
.text:00007A18 ; Attributes: bp-based frame
.text:00007A18
.text:00007A18 ; private: void __thiscall CRecordVector<unsigned __int64>::MoveItems(unsigned int, unsigned int)
.text:00007A18                 public ?MoveItems@?$CRecordVector@_K@@AAEXII@Z
.text:00007A18 ?MoveItems@?$CRecordVector@_K@@AAEXII@Z proc near
.text:00007A18                                         ; CODE XREF: CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)+24p
.text:00007A18
.text:00007A18 var_4           = dword ptr -4
.text:00007A18 arg_0           = dword ptr  8
.text:00007A18 arg_4           = dword ptr  0Ch
.text:00007A18
.text:00007A18                 push    ebp
.text:00007A19                 mov     ebp, esp
.text:00007A1B                 push    ecx
.text:00007A1C                 push    esi
.text:00007A1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A24                 mov     [ebp+var_4], ecx
.text:00007A27                 mov     eax, [ebp+var_4]
.text:00007A2A                 mov     ecx, [eax+4]
.text:00007A2D                 sub     ecx, [ebp+arg_4]
.text:00007A30                 shl     ecx, 3
.text:00007A33                 mov     esi, esp
.text:00007A35                 push    ecx             ; Size
.text:00007A36                 mov     edx, [ebp+var_4]
.text:00007A39                 mov     eax, [edx]
.text:00007A3B                 mov     ecx, [ebp+arg_4]
.text:00007A3E                 lea     edx, [eax+ecx*8]
.text:00007A41                 push    edx             ; Src
.text:00007A42                 mov     eax, [ebp+var_4]
.text:00007A45                 mov     ecx, [eax]
.text:00007A47                 mov     edx, [ebp+arg_0]
.text:00007A4A                 lea     eax, [ecx+edx*8]
.text:00007A4D                 push    eax             ; Dst
.text:00007A4E                 call    dword ptr ds:__imp__memmove
.text:00007A54                 add     esp, 0Ch
.text:00007A57                 cmp     esi, esp
.text:00007A59                 call    __RTC_CheckEsp
.text:00007A5E                 pop     esi
.text:00007A5F                 add     esp, 4
.text:00007A62                 cmp     ebp, esp
.text:00007A64                 call    __RTC_CheckEsp
.text:00007A69                 mov     esp, ebp
.text:00007A6B                 pop     ebp
.text:00007A6C                 retn    8
.text:00007A6C ?MoveItems@?$CRecordVector@_K@@AAEXII@Z endp
.text:00007A6C
.text:00007A6C _text           ends
.text:00007A6C
UNDEF:00007A70 ; ===========================================================================
UNDEF:00007A70
UNDEF:00007A70 ; Segment type: Externs
UNDEF:00007A70 ; UNDEF
UNDEF:00007A70                 extrn __RTC_CheckEsp:near
UNDEF:00007A70                                         ; CODE XREF: NArchive::N7z::CStreamSwitch::Remove(void)+51p
UNDEF:00007A70                                         ; NArchive::N7z::CStreamSwitch::Set(NArchive::N7z::CInArchive *,uchar const *,uint,bool)+45p ...
UNDEF:00007A74                 extrn __RTC_Shutdown:near
UNDEF:00007A74                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00007A78                 extrn __RTC_InitBase:near
UNDEF:00007A78                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00007A7C ; __stdcall _CxxThrowException(x, x)
UNDEF:00007A7C                 extrn __CxxThrowException@8:near
UNDEF:00007A7C                                         ; CODE XREF: NArchive::N7z::ThrowException(void)+1Fp
UNDEF:00007A7C                                         ; NArchive::N7z::ThrowUnsupported(void)+1Ap ...
UNDEF:00007A80 ; const type_info::`vftable'
UNDEF:00007A80                 extrn ??_7type_info@@6B@:near
UNDEF:00007A80                                         ; DATA XREF: .data:NArchive::N7z::CInArchiveException `RTTI Type Descriptor'o
UNDEF:00007A80                                         ; .data:NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'o ...
UNDEF:00007A84 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00007A84                 extrn _memcpy:near      ; CODE XREF: NArchive::N7z::CInByte2::ReadBytes(uchar *,uint)+40p
UNDEF:00007A84                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+C8p ...
UNDEF:00007A88 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00007A88                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00007A88                                         ; CODE XREF: NArchive::N7z::CInByte2::ReadNumber(void)+72p
UNDEF:00007A88                                         ; NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+34Fp ...
UNDEF:00007A8C                 extrn __allshl:near     ; CODE XREF: NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+F6p
UNDEF:00007A8C                                         ; NArchive::N7z::ReadNumberSpec(uchar const *,uint,uint &)+13Cp ...
UNDEF:00007A90 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00007A90                 extrn __imp__memmove:near
UNDEF:00007A90                                         ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+321p
UNDEF:00007A90                                         ; CRecordVector<unsigned __int64>::MoveItems(uint,uint)+36p
UNDEF:00007A90                                         ; DATA XREF: ...
UNDEF:00007A94 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00007A94                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00007A94                                         ; CODE XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+48p
UNDEF:00007A94                                         ; NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+25Ep ...
UNDEF:00007A98                 extrn ___security_cookie:near
UNDEF:00007A98                                         ; DATA XREF: NArchive::N7z::CInArchive::FindAndReadSignature(IInStream *,unsigned __int64 const *)+27r
UNDEF:00007A98                                         ; NArchive::N7z::CInArchive::ReadPackInfo(NArchive::N7z::CFolders &)+26r ...
UNDEF:00007A9C                 extrn ___CxxFrameHandler3:near
UNDEF:00007A9C                                         ; CODE XREF: __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z+16j
UNDEF:00007A9C                                         ; __ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z+16j ...
UNDEF:00007AA0 ; __fastcall __security_check_cookie(x)
UNDEF:00007AA0                 extrn @__security_check_cookie@4:near
UNDEF:00007AA0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadDatabase2(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)+8B5p
UNDEF:00007AA0                                         ; __ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z+Cp ...
UNDEF:00007AA4 ; __fastcall CrcCalc(x, x)
UNDEF:00007AA4                 extrn @CrcCalc@8:near   ; CODE XREF: NArchive::N7z::TestSignature(uchar const *)+5Fp
UNDEF:00007AA4                                         ; NArchive::N7z::TestSignature2(uchar const *)+70p ...
UNDEF:00007AA8 ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:00007AA8                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:00007AA8                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:00007AAC ; __int32 NWindows::NCOM::PropVarEm_Alloc_Bstr(NWindows::NCOM *__hidden this, struct tagPROPVARIANT *, unsigned int)
UNDEF:00007AAC                 extrn ?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z:near
UNDEF:00007AAC                                         ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+A7p
UNDEF:00007AB0 ; __int32 NWindows::NCOM::PropVariant_Clear(NWindows::NCOM *__hidden this, struct tagPROPVARIANT *)
UNDEF:00007AB0                 extrn ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z:near
UNDEF:00007AB0                                         ; CODE XREF: NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)+2Ap
UNDEF:00007AB4 ; void __cdecl operator delete(void *)
UNDEF:00007AB4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4+7p
UNDEF:00007AB4                                         ; CBufPtrSeqOutStream::Release(void)+41p ...
UNDEF:00007AB8 ; __int32 __thiscall NArchive::N7z::CDecoder::Decode(NArchive::N7z::CDecoder *__hidden this, struct IInStream *, unsigned __int64, const struct NArchive::N7z::CFolders *, unsigned int, const unsigned __int64 *, struct ISequentialOutStream *, struct ICompressProgressInfo *, struct ISequentialInStream **, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *, bool, unsigned int)
UNDEF:00007AB8                 extrn ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:near
UNDEF:00007AB8                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+21Fp
UNDEF:00007ABC ; void *__cdecl operator new(unsigned int)
UNDEF:00007ABC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+147p
UNDEF:00007ABC                                         ; CBuffer<uchar>::CBuffer<uchar>(uint)+2Ep ...
UNDEF:00007AC0 ; _DWORD __thiscall NArchive::N7z::CDecoder::CDecoder(NArchive::N7z::CDecoder *__hidden this, bool)
UNDEF:00007AC0                 extrn ??0CDecoder@N7z@NArchive@@QAE@_N@Z:near
UNDEF:00007AC0                                         ; CODE XREF: NArchive::N7z::CInArchive::ReadAndDecodePackedStreams(unsigned __int64,unsigned __int64 &,CObjectVector<CBuffer<uchar>> &,ICryptoGetTextPassword *,bool &,bool &,UString &)+96p
UNDEF:00007AC4 ; public: virtual long __stdcall CBufPtrSeqOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00007AC4                 extrn ?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00007AC4                                         ; DATA XREF: .rdata:00005608o
UNDEF:00007AC8                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialOutStream::`vftable'o
UNDEF:00007AC8                                         ; .rdata:000057F0o ...
UNDEF:00007ACC                 extrn _IID_ISequentialOutStream:near
UNDEF:00007ACC                                         ; DATA XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *):loc_5850o
UNDEF:00007AD0 ; const IID IID_IUnknown
UNDEF:00007AD0                 extrn _IID_IUnknown:near
UNDEF:00007AD0                                         ; DATA XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00007AD4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00007AD4                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00007AD8 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:00007AD8                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:00007AD8                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+C6p
UNDEF:00007ADC ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00007ADC                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00007ADC                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:00007ADC
UNDEF:00007ADC