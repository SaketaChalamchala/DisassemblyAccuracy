.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C1153EB6DE862CAEEAC59DFF10C9F48B
.text:00000000 ; Input CRC32 : 5CB5CBB1
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipOut.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall NArchive::NZip::COutArchive::Create(NArchive::NZip::COutArchive *this, struct IOutStream *)
.text:00000000                 public ?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z
.text:00000000 ?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000015                 mov     [ebp+var_4], ecx
.text:00000018                 mov     eax, [ebp+var_4]
.text:0000001B                 mov     dword ptr [eax+38h], 0
.text:00000022                 mov     dword ptr [eax+3Ch], 0
.text:00000029                 push    10000h          ; unsigned int
.text:0000002E                 mov     ecx, [ebp+var_4]
.text:00000031                 add     ecx, 8          ; this
.text:00000034                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00000039                 movzx   ecx, al
.text:0000003C                 test    ecx, ecx
.text:0000003E                 jnz     short loc_47
.text:00000040                 mov     eax, 8007000Eh
.text:00000045                 jmp     short loc_9C
.text:00000047 ; ---------------------------------------------------------------------------
.text:00000047
.text:00000047 loc_47:                                 ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+3Ej
.text:00000047                 mov     edx, [ebp+arg_0]
.text:0000004A                 push    edx
.text:0000004B                 mov     ecx, [ebp+var_4]
.text:0000004E                 call    ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=(IOutStream *)
.text:00000053                 mov     eax, [ebp+arg_0]
.text:00000056                 push    eax             ; struct ISequentialOutStream *
.text:00000057                 mov     ecx, [ebp+var_4]
.text:0000005A                 add     ecx, 8          ; this
.text:0000005D                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00000062                 mov     ecx, [ebp+var_4]
.text:00000065                 add     ecx, 8          ; this
.text:00000068                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:0000006D                 mov     ecx, [ebp+var_4]
.text:00000070                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000075                 mov     [ebp+var_8], eax
.text:00000078                 mov     ecx, [ebp+var_4]
.text:0000007B                 add     ecx, 30h ; '0'
.text:0000007E                 mov     esi, esp
.text:00000080                 push    ecx
.text:00000081                 push    1
.text:00000083                 push    0
.text:00000085                 push    0
.text:00000087                 mov     edx, [ebp+var_8]
.text:0000008A                 push    edx
.text:0000008B                 mov     eax, [ebp+var_8]
.text:0000008E                 mov     ecx, [eax]
.text:00000090                 mov     edx, [ecx+10h]
.text:00000093                 call    edx
.text:00000095                 cmp     esi, esp
.text:00000097                 call    __RTC_CheckEsp
.text:0000009C
.text:0000009C loc_9C:                                 ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+45j
.text:0000009C                 pop     esi
.text:0000009D                 add     esp, 8
.text:000000A0                 cmp     ebp, esp
.text:000000A2                 call    __RTC_CheckEsp
.text:000000A7                 mov     esp, ebp
.text:000000A9                 pop     ebp
.text:000000AA                 retn    4
.text:000000AA ?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z endp
.text:000000AA
.text:000000AA ; ---------------------------------------------------------------------------
.text:000000AD                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; void __thiscall NArchive::NZip::COutArchive::MoveCurPos(NArchive::NZip::COutArchive *this, unsigned __int64)
.text:000000B0                 public ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z
.text:000000B0 ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z proc near
.text:000000B0                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+1D9p
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = qword ptr  8
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_4], ecx
.text:000000BE                 mov     eax, [ebp+var_4]
.text:000000C1                 mov     ecx, [eax+38h]
.text:000000C4                 add     ecx, dword ptr [ebp+arg_0]
.text:000000C7                 mov     edx, [eax+3Ch]
.text:000000CA                 adc     edx, dword ptr [ebp+arg_0+4]
.text:000000CD                 mov     eax, [ebp+var_4]
.text:000000D0                 mov     [eax+38h], ecx
.text:000000D3                 mov     [eax+3Ch], edx
.text:000000D6                 mov     esp, ebp
.text:000000D8                 pop     ebp
.text:000000D9                 retn    8
.text:000000D9 ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z endp
.text:000000D9
.text:000000D9 ; ---------------------------------------------------------------------------
.text:000000DC                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; void __thiscall NArchive::NZip::COutArchive::SeekToRelatPos(NArchive::NZip::COutArchive *this, unsigned __int64)
.text:000000E0                 public ?SeekToRelatPos@COutArchive@NZip@NArchive@@AAEX_K@Z
.text:000000E0 ?SeekToRelatPos@COutArchive@NZip@NArchive@@AAEX_K@Z proc near
.text:000000E0                                         ; CODE XREF: NArchive::NZip::COutArchive::SeekToCurPos(void)+1Cp
.text:000000E0
.text:000000E0 var_14          = dword ptr -14h
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_8           = dword ptr -8
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = qword ptr  8
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 sub     esp, 14h
.text:000000E6                 push    esi
.text:000000E7                 mov     eax, 0CCCCCCCCh
.text:000000EC                 mov     [ebp+var_14], eax
.text:000000EF                 mov     [ebp+var_10], eax
.text:000000F2                 mov     [ebp+var_C], eax
.text:000000F5                 mov     [ebp+var_8], eax
.text:000000F8                 mov     [ebp+var_4], eax
.text:000000FB                 mov     [ebp+var_4], ecx
.text:000000FE                 mov     ecx, [ebp+var_4]
.text:00000101                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:00000106                 mov     [ebp+var_14], eax
.text:00000109                 mov     esi, esp
.text:0000010B                 push    0
.text:0000010D                 push    0
.text:0000010F                 mov     eax, [ebp+var_4]
.text:00000112                 mov     ecx, [eax+30h]
.text:00000115                 add     ecx, dword ptr [ebp+arg_0]
.text:00000118                 mov     edx, [eax+34h]
.text:0000011B                 adc     edx, dword ptr [ebp+arg_0+4]
.text:0000011E                 push    edx
.text:0000011F                 push    ecx
.text:00000120                 mov     eax, [ebp+var_14]
.text:00000123                 push    eax
.text:00000124                 mov     ecx, [ebp+var_14]
.text:00000127                 mov     edx, [ecx]
.text:00000129                 mov     eax, [edx+10h]
.text:0000012C                 call    eax
.text:0000012E                 cmp     esi, esp
.text:00000130                 call    __RTC_CheckEsp
.text:00000135                 mov     [ebp+var_8], eax
.text:00000138                 cmp     [ebp+var_8], 0
.text:0000013C                 jz      short loc_15D
.text:0000013E                 mov     ecx, [ebp+var_8]
.text:00000141                 push    ecx             ; __int32
.text:00000142                 lea     ecx, [ebp+var_10] ; this
.text:00000145                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:0000014A                 mov     edx, [eax]
.text:0000014C                 mov     [ebp+var_C], edx
.text:0000014F                 push    offset __TI1?AUCSystemException@@
.text:00000154                 lea     eax, [ebp+var_C]
.text:00000157                 push    eax
.text:00000158                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000015D ; ---------------------------------------------------------------------------
.text:0000015D
.text:0000015D loc_15D:                                ; CODE XREF: NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)+5Cj
.text:0000015D                 pop     esi
.text:0000015E                 add     esp, 14h
.text:00000161                 cmp     ebp, esp
.text:00000163                 call    __RTC_CheckEsp
.text:00000168                 mov     esp, ebp
.text:0000016A                 pop     ebp
.text:0000016B                 retn    8
.text:0000016B ?SeekToRelatPos@COutArchive@NZip@NArchive@@AAEX_K@Z endp
.text:0000016B
.text:0000016B ; ---------------------------------------------------------------------------
.text:0000016E                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; void __thiscall NArchive::NZip::COutArchive::PrepareWriteCompressedDataZip64(NArchive::NZip::COutArchive *this, unsigned int, bool, bool)
.text:00000170                 public ?PrepareWriteCompressedDataZip64@COutArchive@NZip@NArchive@@AAEXI_N0@Z
.text:00000170 ?PrepareWriteCompressedDataZip64@COutArchive@NZip@NArchive@@AAEXI_N0@Z proc near
.text:00000170                                         ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)+41p
.text:00000170                                         ; NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+61p
.text:00000170
.text:00000170 var_4           = dword ptr -4
.text:00000170 arg_0           = dword ptr  8
.text:00000170 arg_4           = byte ptr  0Ch
.text:00000170 arg_8           = byte ptr  10h
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 push    ecx
.text:00000174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000017B                 mov     [ebp+var_4], ecx
.text:0000017E                 mov     eax, [ebp+var_4]
.text:00000181                 mov     cl, [ebp+arg_4]
.text:00000184                 mov     [eax+48h], cl
.text:00000187                 movzx   edx, [ebp+arg_4]
.text:0000018B                 neg     edx
.text:0000018D                 sbb     edx, edx
.text:0000018F                 and     edx, 14h
.text:00000192                 mov     eax, [ebp+var_4]
.text:00000195                 mov     [eax+44h], edx
.text:00000198                 movzx   ecx, [ebp+arg_8]
.text:0000019C                 test    ecx, ecx
.text:0000019E                 jz      short loc_1AF
.text:000001A0                 mov     edx, [ebp+var_4]
.text:000001A3                 mov     eax, [edx+44h]
.text:000001A6                 add     eax, 0Bh
.text:000001A9                 mov     ecx, [ebp+var_4]
.text:000001AC                 mov     [ecx+44h], eax
.text:000001AF
.text:000001AF loc_1AF:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedDataZip64(uint,bool,bool)+2Ej
.text:000001AF                 mov     edx, [ebp+var_4]
.text:000001B2                 mov     eax, [edx+44h]
.text:000001B5                 mov     ecx, [ebp+arg_0]
.text:000001B8                 lea     edx, [ecx+eax+1Eh]
.text:000001BC                 mov     eax, [ebp+var_4]
.text:000001BF                 mov     [eax+40h], edx
.text:000001C2                 mov     esp, ebp
.text:000001C4                 pop     ebp
.text:000001C5                 retn    0Ch
.text:000001C5 ?PrepareWriteCompressedDataZip64@COutArchive@NZip@NArchive@@AAEXI_N0@Z endp
.text:000001C5
.text:000001C5 ; ---------------------------------------------------------------------------
.text:000001C8                 align 10h
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; void __thiscall NArchive::NZip::COutArchive::PrepareWriteCompressedData(NArchive::NZip::COutArchive *this, unsigned int, unsigned __int64, bool)
.text:000001D0                 public ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z
.text:000001D0 ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z proc near
.text:000001D0
.text:000001D0 var_8           = dword ptr -8
.text:000001D0 var_4           = dword ptr -4
.text:000001D0 arg_0           = dword ptr  8
.text:000001D0 arg_4           = qword ptr  0Ch
.text:000001D0 arg_C           = byte ptr  14h
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 sub     esp, 8
.text:000001D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001E4                 mov     [ebp+var_4], ecx
.text:000001E7                 cmp     dword ptr [ebp+arg_4+4], 0
.text:000001EB                 ja      short loc_1F6
.text:000001ED                 cmp     dword ptr [ebp+arg_4], 0F8000000h
.text:000001F4                 jb      short loc_1FC
.text:000001F6
.text:000001F6 loc_1F6:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)+1Bj
.text:000001F6                 mov     byte ptr [ebp+var_8+3], 1
.text:000001FA                 jmp     short loc_200
.text:000001FC ; ---------------------------------------------------------------------------
.text:000001FC
.text:000001FC loc_1FC:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)+24j
.text:000001FC                 mov     byte ptr [ebp+var_8+3], 0
.text:00000200
.text:00000200 loc_200:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData(uint,unsigned __int64,bool)+2Aj
.text:00000200                 movzx   eax, [ebp+arg_C]
.text:00000204                 push    eax             ; bool
.text:00000205                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000209                 push    ecx             ; bool
.text:0000020A                 mov     edx, [ebp+arg_0]
.text:0000020D                 push    edx             ; unsigned int
.text:0000020E                 mov     ecx, [ebp+var_4] ; this
.text:00000211                 call    ?PrepareWriteCompressedDataZip64@COutArchive@NZip@NArchive@@AAEXI_N0@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedDataZip64(uint,bool,bool)
.text:00000216                 add     esp, 8
.text:00000219                 cmp     ebp, esp
.text:0000021B                 call    __RTC_CheckEsp
.text:00000220                 mov     esp, ebp
.text:00000222                 pop     ebp
.text:00000223                 retn    10h
.text:00000223 ?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z endp
.text:00000223
.text:00000223 ; ---------------------------------------------------------------------------
.text:00000226                 align 10h
.text:00000230
.text:00000230 ; =============== S U B R O U T I N E =======================================
.text:00000230
.text:00000230 ; Attributes: bp-based frame
.text:00000230
.text:00000230 ; void __thiscall NArchive::NZip::COutArchive::PrepareWriteCompressedData2(NArchive::NZip::COutArchive *this, unsigned int, unsigned __int64, unsigned __int64, bool)
.text:00000230                 public ?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z
.text:00000230 ?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z proc near
.text:00000230
.text:00000230 var_C           = dword ptr -0Ch
.text:00000230 var_8           = dword ptr -8
.text:00000230 var_4           = dword ptr -4
.text:00000230 arg_0           = dword ptr  8
.text:00000230 arg_4           = qword ptr  0Ch
.text:00000230 arg_C           = qword ptr  14h
.text:00000230 arg_14          = byte ptr  1Ch
.text:00000230
.text:00000230                 push    ebp
.text:00000231                 mov     ebp, esp
.text:00000233                 sub     esp, 0Ch
.text:00000236                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000023D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000244                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000024B                 mov     [ebp+var_4], ecx
.text:0000024E                 cmp     dword ptr [ebp+arg_4+4], 0
.text:00000252                 ja      short loc_273
.text:00000254                 jb      short loc_25C
.text:00000256                 cmp     dword ptr [ebp+arg_4], 0FFFFFFFFh
.text:0000025A                 jnb     short loc_273
.text:0000025C
.text:0000025C loc_25C:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+24j
.text:0000025C                 cmp     dword ptr [ebp+arg_C+4], 0
.text:00000260                 ja      short loc_273
.text:00000262                 jb      short loc_26A
.text:00000264                 cmp     dword ptr [ebp+arg_C], 0FFFFFFFFh
.text:00000268                 jnb     short loc_273
.text:0000026A
.text:0000026A loc_26A:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+32j
.text:0000026A                 mov     [ebp+var_C], 0
.text:00000271                 jmp     short loc_27A
.text:00000273 ; ---------------------------------------------------------------------------
.text:00000273
.text:00000273 loc_273:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+22j
.text:00000273                                         ; NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+2Aj ...
.text:00000273                 mov     [ebp+var_C], 1
.text:0000027A
.text:0000027A loc_27A:                                ; CODE XREF: NArchive::NZip::COutArchive::PrepareWriteCompressedData2(uint,unsigned __int64,unsigned __int64,bool)+41j
.text:0000027A                 mov     al, byte ptr [ebp+var_C]
.text:0000027D                 mov     byte ptr [ebp+var_8+3], al
.text:00000280                 movzx   ecx, [ebp+arg_14]
.text:00000284                 push    ecx             ; bool
.text:00000285                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00000289                 push    edx             ; bool
.text:0000028A                 mov     eax, [ebp+arg_0]
.text:0000028D                 push    eax             ; unsigned int
.text:0000028E                 mov     ecx, [ebp+var_4] ; this
.text:00000291                 call    ?PrepareWriteCompressedDataZip64@COutArchive@NZip@NArchive@@AAEXI_N0@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedDataZip64(uint,bool,bool)
.text:00000296                 add     esp, 0Ch
.text:00000299                 cmp     ebp, esp
.text:0000029B                 call    __RTC_CheckEsp
.text:000002A0                 mov     esp, ebp
.text:000002A2                 pop     ebp
.text:000002A3                 retn    18h
.text:000002A3 ?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z endp
.text:000002A3
.text:000002A3 ; ---------------------------------------------------------------------------
.text:000002A6                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; void __thiscall NArchive::NZip::COutArchive::WriteBytes(NArchive::NZip::COutArchive *this, const void *, unsigned int)
.text:000002B0                 public ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z
.text:000002B0 ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z proc near
.text:000002B0                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+96p
.text:000002B0                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+16Ap ...
.text:000002B0
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 arg_0           = dword ptr  8
.text:000002B0 arg_4           = dword ptr  0Ch
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 push    ecx
.text:000002B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002BB                 mov     [ebp+var_4], ecx
.text:000002BE                 mov     eax, [ebp+arg_4]
.text:000002C1                 push    eax             ; unsigned int
.text:000002C2                 mov     ecx, [ebp+arg_0]
.text:000002C5                 push    ecx             ; void *
.text:000002C6                 mov     ecx, [ebp+var_4]
.text:000002C9                 add     ecx, 8          ; this
.text:000002CC                 call    ?WriteBytes@COutBuffer@@QAEXPBXI@Z ; COutBuffer::WriteBytes(void const *,uint)
.text:000002D1                 mov     edx, [ebp+arg_4]
.text:000002D4                 xor     eax, eax
.text:000002D6                 mov     ecx, [ebp+var_4]
.text:000002D9                 add     edx, [ecx+38h]
.text:000002DC                 adc     eax, [ecx+3Ch]
.text:000002DF                 mov     ecx, [ebp+var_4]
.text:000002E2                 mov     [ecx+38h], edx
.text:000002E5                 mov     [ecx+3Ch], eax
.text:000002E8                 add     esp, 4
.text:000002EB                 cmp     ebp, esp
.text:000002ED                 call    __RTC_CheckEsp
.text:000002F2                 mov     esp, ebp
.text:000002F4                 pop     ebp
.text:000002F5                 retn    8
.text:000002F5 ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z endp
.text:000002F5
.text:000002F5 ; ---------------------------------------------------------------------------
.text:000002F8                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; void __thiscall NArchive::NZip::COutArchive::Write8(NArchive::NZip::COutArchive *this, unsigned __int8)
.text:00000300                 public ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z
.text:00000300 ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z proc near
.text:00000300                                         ; CODE XREF: NArchive::NZip::COutArchive::Write16(ushort)+37p
.text:00000300                                         ; NArchive::NZip::COutArchive::Write32(uint)+37p ...
.text:00000300
.text:00000300 var_4           = dword ptr -4
.text:00000300 arg_0           = byte ptr  8
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 push    ecx
.text:00000304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000030B                 mov     [ebp+var_4], ecx
.text:0000030E                 movzx   eax, [ebp+arg_0]
.text:00000312                 push    eax             ; unsigned __int8
.text:00000313                 mov     ecx, [ebp+var_4]
.text:00000316                 add     ecx, 8          ; this
.text:00000319                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:0000031E                 mov     ecx, [ebp+var_4]
.text:00000321                 mov     edx, [ecx+38h]
.text:00000324                 add     edx, 1
.text:00000327                 mov     eax, [ecx+3Ch]
.text:0000032A                 adc     eax, 0
.text:0000032D                 mov     ecx, [ebp+var_4]
.text:00000330                 mov     [ecx+38h], edx
.text:00000333                 mov     [ecx+3Ch], eax
.text:00000336                 add     esp, 4
.text:00000339                 cmp     ebp, esp
.text:0000033B                 call    __RTC_CheckEsp
.text:00000340                 mov     esp, ebp
.text:00000342                 pop     ebp
.text:00000343                 retn    4
.text:00000343 ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z endp
.text:00000343
.text:00000343 ; ---------------------------------------------------------------------------
.text:00000346                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; void __thiscall NArchive::NZip::COutArchive::Write16(NArchive::NZip::COutArchive *this, unsigned __int16)
.text:00000350                 public ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z
.text:00000350 ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z proc near
.text:00000350                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+62p
.text:00000350                                         ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+76p ...
.text:00000350
.text:00000350 var_8           = dword ptr -8
.text:00000350 var_4           = dword ptr -4
.text:00000350 arg_0           = word ptr  8
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 sub     esp, 8
.text:00000356                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000035D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000364                 mov     [ebp+var_4], ecx
.text:00000367                 mov     [ebp+var_8], 0
.text:0000036E                 jmp     short loc_379
.text:00000370 ; ---------------------------------------------------------------------------
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: NArchive::NZip::COutArchive::Write16(ushort)+48j
.text:00000370                 mov     eax, [ebp+var_8]
.text:00000373                 add     eax, 1
.text:00000376                 mov     [ebp+var_8], eax
.text:00000379
.text:00000379 loc_379:                                ; CODE XREF: NArchive::NZip::COutArchive::Write16(ushort)+1Ej
.text:00000379                 cmp     [ebp+var_8], 2
.text:0000037D                 jge     short loc_39A
.text:0000037F                 movzx   ecx, byte ptr [ebp+arg_0]
.text:00000383                 push    ecx             ; unsigned __int8
.text:00000384                 mov     ecx, [ebp+var_4] ; this
.text:00000387                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:0000038C                 mov     dx, [ebp+arg_0]
.text:00000390                 shr     dx, 8
.text:00000394                 mov     [ebp+arg_0], dx
.text:00000398                 jmp     short loc_370
.text:0000039A ; ---------------------------------------------------------------------------
.text:0000039A
.text:0000039A loc_39A:                                ; CODE XREF: NArchive::NZip::COutArchive::Write16(ushort)+2Dj
.text:0000039A                 add     esp, 8
.text:0000039D                 cmp     ebp, esp
.text:0000039F                 call    __RTC_CheckEsp
.text:000003A4                 mov     esp, ebp
.text:000003A6                 pop     ebp
.text:000003A7                 retn    4
.text:000003A7 ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z endp
.text:000003A7
.text:000003A7 ; ---------------------------------------------------------------------------
.text:000003AA                 align 10h
.text:000003B0
.text:000003B0 ; =============== S U B R O U T I N E =======================================
.text:000003B0
.text:000003B0 ; Attributes: bp-based frame
.text:000003B0
.text:000003B0 ; void __thiscall NArchive::NZip::COutArchive::Write32(NArchive::NZip::COutArchive *this, unsigned int)
.text:000003B0                 public ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z
.text:000003B0 ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z proc near
.text:000003B0                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)+7Bp
.text:000003B0                                         ; NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)+8Ap ...
.text:000003B0
.text:000003B0 var_8           = dword ptr -8
.text:000003B0 var_4           = dword ptr -4
.text:000003B0 arg_0           = dword ptr  8
.text:000003B0
.text:000003B0                 push    ebp
.text:000003B1                 mov     ebp, esp
.text:000003B3                 sub     esp, 8
.text:000003B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000003BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003C4                 mov     [ebp+var_4], ecx
.text:000003C7                 mov     [ebp+var_8], 0
.text:000003CE                 jmp     short loc_3D9
.text:000003D0 ; ---------------------------------------------------------------------------
.text:000003D0
.text:000003D0 loc_3D0:                                ; CODE XREF: NArchive::NZip::COutArchive::Write32(uint)+45j
.text:000003D0                 mov     eax, [ebp+var_8]
.text:000003D3                 add     eax, 1
.text:000003D6                 mov     [ebp+var_8], eax
.text:000003D9
.text:000003D9 loc_3D9:                                ; CODE XREF: NArchive::NZip::COutArchive::Write32(uint)+1Ej
.text:000003D9                 cmp     [ebp+var_8], 4
.text:000003DD                 jge     short loc_3F7
.text:000003DF                 movzx   ecx, byte ptr [ebp+arg_0]
.text:000003E3                 push    ecx             ; unsigned __int8
.text:000003E4                 mov     ecx, [ebp+var_4] ; this
.text:000003E7                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:000003EC                 mov     edx, [ebp+arg_0]
.text:000003EF                 shr     edx, 8
.text:000003F2                 mov     [ebp+arg_0], edx
.text:000003F5                 jmp     short loc_3D0
.text:000003F7 ; ---------------------------------------------------------------------------
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: NArchive::NZip::COutArchive::Write32(uint)+2Dj
.text:000003F7                 add     esp, 8
.text:000003FA                 cmp     ebp, esp
.text:000003FC                 call    __RTC_CheckEsp
.text:00000401                 mov     esp, ebp
.text:00000403                 pop     ebp
.text:00000404                 retn    4
.text:00000404 ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z endp
.text:00000404
.text:00000404 ; ---------------------------------------------------------------------------
.text:00000407                 align 10h
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; void __thiscall NArchive::NZip::COutArchive::Write64(NArchive::NZip::COutArchive *this, unsigned __int64)
.text:00000410                 public ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z
.text:00000410 ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z proc near
.text:00000410                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+199p
.text:00000410                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+1ACp ...
.text:00000410
.text:00000410 var_8           = dword ptr -8
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = qword ptr  8
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 sub     esp, 8
.text:00000416                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000041D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000424                 mov     [ebp+var_4], ecx
.text:00000427                 mov     [ebp+var_8], 0
.text:0000042E                 jmp     short loc_439
.text:00000430 ; ---------------------------------------------------------------------------
.text:00000430
.text:00000430 loc_430:                                ; CODE XREF: NArchive::NZip::COutArchive::Write64(unsigned __int64)+4Fj
.text:00000430                 mov     eax, [ebp+var_8]
.text:00000433                 add     eax, 1
.text:00000436                 mov     [ebp+var_8], eax
.text:00000439
.text:00000439 loc_439:                                ; CODE XREF: NArchive::NZip::COutArchive::Write64(unsigned __int64)+1Ej
.text:00000439                 cmp     [ebp+var_8], 8
.text:0000043D                 jge     short loc_461
.text:0000043F                 movzx   ecx, byte ptr [ebp+arg_0]
.text:00000443                 push    ecx             ; unsigned __int8
.text:00000444                 mov     ecx, [ebp+var_4] ; this
.text:00000447                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:0000044C                 mov     eax, dword ptr [ebp+arg_0]
.text:0000044F                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00000452                 mov     cl, 8
.text:00000454                 call    __aullshr
.text:00000459                 mov     dword ptr [ebp+arg_0], eax
.text:0000045C                 mov     dword ptr [ebp+arg_0+4], edx
.text:0000045F                 jmp     short loc_430
.text:00000461 ; ---------------------------------------------------------------------------
.text:00000461
.text:00000461 loc_461:                                ; CODE XREF: NArchive::NZip::COutArchive::Write64(unsigned __int64)+2Dj
.text:00000461                 add     esp, 8
.text:00000464                 cmp     ebp, esp
.text:00000466                 call    __RTC_CheckEsp
.text:0000046B                 mov     esp, ebp
.text:0000046D                 pop     ebp
.text:0000046E                 retn    8
.text:0000046E ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z endp
.text:0000046E
.text:0000046E ; ---------------------------------------------------------------------------
.text:00000471                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; void __thiscall NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::COutArchive *this, const struct NArchive::NZip::CExtraBlock *)
.text:00000480                 public ?WriteExtra@COutArchive@NZip@NArchive@@AAEXABUCExtraBlock@23@@Z
.text:00000480 ?WriteExtra@COutArchive@NZip@NArchive@@AAEXABUCExtraBlock@23@@Z proc near
.text:00000480                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+1BBp
.text:00000480                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+355p
.text:00000480
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 0Ch
.text:00000486                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000048D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000049B                 mov     [ebp+var_4], ecx
.text:0000049E                 mov     ecx, [ebp+arg_0]
.text:000004A1                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:000004A6                 test    eax, eax
.text:000004A8                 jz      short loc_51D
.text:000004AA                 mov     [ebp+var_8], 0
.text:000004B1                 jmp     short loc_4BC
.text:000004B3 ; ---------------------------------------------------------------------------
.text:000004B3
.text:000004B3 loc_4B3:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+9Bj
.text:000004B3                 mov     eax, [ebp+var_8]
.text:000004B6                 add     eax, 1
.text:000004B9                 mov     [ebp+var_8], eax
.text:000004BC
.text:000004BC loc_4BC:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+31j
.text:000004BC                 mov     ecx, [ebp+arg_0]
.text:000004BF                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:000004C4                 cmp     [ebp+var_8], eax
.text:000004C7                 jnb     short loc_51D
.text:000004C9                 mov     ecx, [ebp+var_8]
.text:000004CC                 push    ecx
.text:000004CD                 mov     ecx, [ebp+arg_0]
.text:000004D0                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:000004D5                 mov     [ebp+var_C], eax
.text:000004D8                 mov     edx, [ebp+var_C]
.text:000004DB                 movzx   eax, word ptr [edx]
.text:000004DE                 push    eax             ; unsigned __int16
.text:000004DF                 mov     ecx, [ebp+var_4] ; this
.text:000004E2                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000004E7                 mov     ecx, [ebp+var_C]
.text:000004EA                 add     ecx, 4
.text:000004ED                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000004F2                 push    eax             ; unsigned __int16
.text:000004F3                 mov     ecx, [ebp+var_4] ; this
.text:000004F6                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000004FB                 mov     ecx, [ebp+var_C]
.text:000004FE                 add     ecx, 4
.text:00000501                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000506                 push    eax             ; unsigned int
.text:00000507                 mov     ecx, [ebp+var_C]
.text:0000050A                 add     ecx, 4
.text:0000050D                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000512                 push    eax             ; void *
.text:00000513                 mov     ecx, [ebp+var_4] ; this
.text:00000516                 call    ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z ; NArchive::NZip::COutArchive::WriteBytes(void const *,uint)
.text:0000051B                 jmp     short loc_4B3
.text:0000051D ; ---------------------------------------------------------------------------
.text:0000051D
.text:0000051D loc_51D:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+28j
.text:0000051D                                         ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+47j
.text:0000051D                 add     esp, 0Ch
.text:00000520                 cmp     ebp, esp
.text:00000522                 call    __RTC_CheckEsp
.text:00000527                 mov     esp, ebp
.text:00000529                 pop     ebp
.text:0000052A                 retn    4
.text:0000052A ?WriteExtra@COutArchive@NZip@NArchive@@AAEXABUCExtraBlock@23@@Z endp
.text:0000052A
.text:0000052A ; ---------------------------------------------------------------------------
.text:0000052D                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; void __thiscall NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::COutArchive *this, const struct NArchive::NZip::CLocalItem *, bool)
.text:00000530                 public ?WriteCommonItemInfo@COutArchive@NZip@NArchive@@AAEXABVCLocalItem@23@_N@Z
.text:00000530 ?WriteCommonItemInfo@COutArchive@NZip@NArchive@@AAEXABVCLocalItem@23@_N@Z proc near
.text:00000530                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+92p
.text:00000530                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+10Dp
.text:00000530
.text:00000530 var_8           = dword ptr -8
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530 arg_4           = byte ptr  0Ch
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 sub     esp, 8
.text:00000536                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000053D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000544                 mov     [ebp+var_4], ecx
.text:00000547                 mov     eax, [ebp+arg_0]
.text:0000054A                 mov     cl, [eax+4]
.text:0000054D                 mov     byte ptr [ebp+var_8+3], cl
.text:00000550                 movzx   edx, [ebp+arg_4]
.text:00000554                 test    edx, edx
.text:00000556                 jz      short loc_565
.text:00000558                 movzx   eax, byte ptr [ebp+var_8+3]
.text:0000055C                 cmp     eax, 2Dh ; '-'
.text:0000055F                 jge     short loc_565
.text:00000561                 mov     byte ptr [ebp+var_8+3], 2Dh ; '-'
.text:00000565
.text:00000565 loc_565:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)+26j
.text:00000565                                         ; NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)+2Fj
.text:00000565                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000569                 push    ecx             ; unsigned __int8
.text:0000056A                 mov     ecx, [ebp+var_4] ; this
.text:0000056D                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:00000572                 mov     edx, [ebp+arg_0]
.text:00000575                 movzx   eax, byte ptr [edx+5]
.text:00000579                 push    eax             ; unsigned __int8
.text:0000057A                 mov     ecx, [ebp+var_4] ; this
.text:0000057D                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:00000582                 mov     ecx, [ebp+arg_0]
.text:00000585                 movzx   edx, word ptr [ecx]
.text:00000588                 push    edx             ; unsigned __int16
.text:00000589                 mov     ecx, [ebp+var_4] ; this
.text:0000058C                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000591                 mov     eax, [ebp+arg_0]
.text:00000594                 movzx   ecx, word ptr [eax+2]
.text:00000598                 push    ecx             ; unsigned __int16
.text:00000599                 mov     ecx, [ebp+var_4] ; this
.text:0000059C                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000005A1                 mov     edx, [ebp+arg_0]
.text:000005A4                 mov     eax, [edx+18h]
.text:000005A7                 push    eax             ; unsigned int
.text:000005A8                 mov     ecx, [ebp+var_4] ; this
.text:000005AB                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000005B0                 mov     ecx, [ebp+arg_0]
.text:000005B3                 mov     edx, [ecx+1Ch]
.text:000005B6                 push    edx             ; unsigned int
.text:000005B7                 mov     ecx, [ebp+var_4] ; this
.text:000005BA                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000005BF                 add     esp, 8
.text:000005C2                 cmp     ebp, esp
.text:000005C4                 call    __RTC_CheckEsp
.text:000005C9                 mov     esp, ebp
.text:000005CB                 pop     ebp
.text:000005CC                 retn    8
.text:000005CC ?WriteCommonItemInfo@COutArchive@NZip@NArchive@@AAEXABVCLocalItem@23@_N@Z endp
.text:000005CC
.text:000005CC ; ---------------------------------------------------------------------------
.text:000005CF                 align 10h
.text:000005D0
.text:000005D0 ; =============== S U B R O U T I N E =======================================
.text:000005D0
.text:000005D0 ; Attributes: bp-based frame
.text:000005D0
.text:000005D0 ; void __thiscall NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::COutArchive *this, const struct NArchive::NZip::CLocalItem *)
.text:000005D0                 public ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z
.text:000005D0 ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z proc near
.text:000005D0
.text:000005D0 var_28          = dword ptr -28h
.text:000005D0 var_24          = dword ptr -24h
.text:000005D0 var_20          = dword ptr -20h
.text:000005D0 var_1C          = dword ptr -1Ch
.text:000005D0 var_18          = dword ptr -18h
.text:000005D0 var_14          = byte ptr -14h
.text:000005D0 var_10          = dword ptr -10h
.text:000005D0 var_C           = word ptr -0Ch
.text:000005D0 var_5           = byte ptr -5
.text:000005D0 var_4           = dword ptr -4
.text:000005D0 arg_0           = dword ptr  8
.text:000005D0
.text:000005D0                 push    ebp
.text:000005D1                 mov     ebp, esp
.text:000005D3                 sub     esp, 28h
.text:000005D6                 push    esi
.text:000005D7                 push    edi
.text:000005D8                 push    ecx
.text:000005D9                 lea     edi, [ebp+var_28]
.text:000005DC                 mov     ecx, 0Ah
.text:000005E1                 mov     eax, 0CCCCCCCCh
.text:000005E6                 rep stosd
.text:000005E8                 pop     ecx
.text:000005E9                 mov     [ebp+var_4], ecx
.text:000005EC                 mov     ecx, [ebp+var_4] ; this
.text:000005EF                 call    ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::COutArchive::SeekToCurPos(void)
.text:000005F4                 mov     eax, [ebp+var_4]
.text:000005F7                 movzx   ecx, byte ptr [eax+48h]
.text:000005FB                 test    ecx, ecx
.text:000005FD                 jnz     short loc_63C
.text:000005FF                 mov     edx, [ebp+arg_0]
.text:00000602                 mov     [ebp+var_18], edx
.text:00000605                 mov     eax, [ebp+var_18]
.text:00000608                 cmp     dword ptr [eax+14h], 0
.text:0000060C                 ja      short loc_63C
.text:0000060E                 jb      short loc_619
.text:00000610                 mov     ecx, [ebp+var_18]
.text:00000613                 cmp     dword ptr [ecx+10h], 0FFFFFFFFh
.text:00000617                 jnb     short loc_63C
.text:00000619
.text:00000619 loc_619:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+3Ej
.text:00000619                 mov     edx, [ebp+arg_0]
.text:0000061C                 mov     [ebp+var_1C], edx
.text:0000061F                 mov     eax, [ebp+var_1C]
.text:00000622                 cmp     dword ptr [eax+0Ch], 0
.text:00000626                 ja      short loc_63C
.text:00000628                 jb      short loc_633
.text:0000062A                 mov     ecx, [ebp+var_1C]
.text:0000062D                 cmp     dword ptr [ecx+8], 0FFFFFFFFh
.text:00000631                 jnb     short loc_63C
.text:00000633
.text:00000633 loc_633:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+58j
.text:00000633                 mov     [ebp+var_20], 0
.text:0000063A                 jmp     short loc_643
.text:0000063C ; ---------------------------------------------------------------------------
.text:0000063C
.text:0000063C loc_63C:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+2Dj
.text:0000063C                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+3Cj ...
.text:0000063C                 mov     [ebp+var_20], 1
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+6Aj
.text:00000643                 mov     dl, byte ptr [ebp+var_20]
.text:00000646                 mov     [ebp+var_5], dl
.text:00000649                 push    4034B50h        ; unsigned int
.text:0000064E                 mov     ecx, [ebp+var_4] ; this
.text:00000651                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000656                 movzx   eax, [ebp+var_5]
.text:0000065A                 push    eax             ; bool
.text:0000065B                 mov     ecx, [ebp+arg_0]
.text:0000065E                 push    ecx             ; struct NArchive::NZip::CLocalItem *
.text:0000065F                 mov     ecx, [ebp+var_4] ; this
.text:00000662                 call    ?WriteCommonItemInfo@COutArchive@NZip@NArchive@@AAEXABVCLocalItem@23@_N@Z ; NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)
.text:00000667                 movzx   edx, [ebp+var_5]
.text:0000066B                 test    edx, edx
.text:0000066D                 jz      short loc_678
.text:0000066F                 mov     [ebp+var_24], 0FFFFFFFFh
.text:00000676                 jmp     short loc_681
.text:00000678 ; ---------------------------------------------------------------------------
.text:00000678
.text:00000678 loc_678:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+9Dj
.text:00000678                 mov     eax, [ebp+arg_0]
.text:0000067B                 mov     ecx, [eax+10h]
.text:0000067E                 mov     [ebp+var_24], ecx
.text:00000681
.text:00000681 loc_681:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+A6j
.text:00000681                 mov     edx, [ebp+var_24]
.text:00000684                 push    edx             ; unsigned int
.text:00000685                 mov     ecx, [ebp+var_4] ; this
.text:00000688                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:0000068D                 movzx   eax, [ebp+var_5]
.text:00000691                 test    eax, eax
.text:00000693                 jz      short loc_69E
.text:00000695                 mov     [ebp+var_28], 0FFFFFFFFh
.text:0000069C                 jmp     short loc_6A7
.text:0000069E ; ---------------------------------------------------------------------------
.text:0000069E
.text:0000069E loc_69E:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+C3j
.text:0000069E                 mov     ecx, [ebp+arg_0]
.text:000006A1                 mov     edx, [ecx+8]
.text:000006A4                 mov     [ebp+var_28], edx
.text:000006A7
.text:000006A7 loc_6A7:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+CCj
.text:000006A7                 mov     eax, [ebp+var_28]
.text:000006AA                 push    eax             ; unsigned int
.text:000006AB                 mov     ecx, [ebp+var_4] ; this
.text:000006AE                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000006B3                 mov     ecx, [ebp+arg_0]
.text:000006B6                 add     ecx, 20h ; ' '  ; this
.text:000006B9                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000006BE                 push    eax             ; unsigned __int16
.text:000006BF                 mov     ecx, [ebp+var_4] ; this
.text:000006C2                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000006C7                 movzx   esi, [ebp+var_5]
.text:000006CB                 neg     esi
.text:000006CD                 sbb     esi, esi
.text:000006CF                 and     esi, 14h
.text:000006D2                 mov     ecx, [ebp+arg_0]
.text:000006D5                 add     ecx, 2Ch ; ','  ; this
.text:000006D8                 call    ?GetSize@CExtraBlock@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CExtraBlock::GetSize(void)
.text:000006DD                 add     esi, eax
.text:000006DF                 mov     [ebp+var_C], si
.text:000006E3                 movzx   ecx, [ebp+var_C]
.text:000006E7                 mov     edx, [ebp+var_4]
.text:000006EA                 cmp     ecx, [edx+44h]
.text:000006ED                 jz      short loc_70F
.text:000006EF                 push    80004005h       ; __int32
.text:000006F4                 lea     ecx, [ebp+var_14] ; this
.text:000006F7                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:000006FC                 mov     eax, [eax]
.text:000006FE                 mov     [ebp+var_10], eax
.text:00000701                 push    offset __TI1?AUCSystemException@@
.text:00000706                 lea     ecx, [ebp+var_10]
.text:00000709                 push    ecx
.text:0000070A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000070F ; ---------------------------------------------------------------------------
.text:0000070F
.text:0000070F loc_70F:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+11Dj
.text:0000070F                 mov     edx, [ebp+var_4]
.text:00000712                 movzx   eax, word ptr [edx+44h]
.text:00000716                 push    eax             ; unsigned __int16
.text:00000717                 mov     ecx, [ebp+var_4] ; this
.text:0000071A                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:0000071F                 mov     ecx, [ebp+arg_0]
.text:00000722                 add     ecx, 20h ; ' '  ; this
.text:00000725                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000072A                 push    eax             ; unsigned int
.text:0000072B                 mov     ecx, [ebp+arg_0]
.text:0000072E                 add     ecx, 20h ; ' '
.text:00000731                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000736                 push    eax             ; void *
.text:00000737                 mov     ecx, [ebp+var_4] ; this
.text:0000073A                 call    ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z ; NArchive::NZip::COutArchive::WriteBytes(void const *,uint)
.text:0000073F                 movzx   ecx, [ebp+var_5]
.text:00000743                 test    ecx, ecx
.text:00000745                 jz      short loc_781
.text:00000747                 push    1               ; unsigned __int16
.text:00000749                 mov     ecx, [ebp+var_4] ; this
.text:0000074C                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000751                 push    10h             ; unsigned __int16
.text:00000753                 mov     ecx, [ebp+var_4] ; this
.text:00000756                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:0000075B                 mov     edx, [ebp+arg_0]
.text:0000075E                 mov     eax, [edx+0Ch]
.text:00000761                 push    eax
.text:00000762                 mov     ecx, [edx+8]
.text:00000765                 push    ecx             ; unsigned __int64
.text:00000766                 mov     ecx, [ebp+var_4] ; this
.text:00000769                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:0000076E                 mov     edx, [ebp+arg_0]
.text:00000771                 mov     eax, [edx+14h]
.text:00000774                 push    eax
.text:00000775                 mov     ecx, [edx+10h]
.text:00000778                 push    ecx             ; unsigned __int64
.text:00000779                 mov     ecx, [ebp+var_4] ; this
.text:0000077C                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000781
.text:00000781 loc_781:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+175j
.text:00000781                 mov     edx, [ebp+arg_0]
.text:00000784                 add     edx, 2Ch ; ','
.text:00000787                 push    edx             ; struct NArchive::NZip::CExtraBlock *
.text:00000788                 mov     ecx, [ebp+var_4] ; this
.text:0000078B                 call    ?WriteExtra@COutArchive@NZip@NArchive@@AAEXABUCExtraBlock@23@@Z ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)
.text:00000790                 mov     ecx, [ebp+var_4]
.text:00000793                 add     ecx, 8          ; this
.text:00000796                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:0000079B                 mov     eax, [ebp+arg_0]
.text:0000079E                 mov     ecx, [eax+14h]
.text:000007A1                 push    ecx
.text:000007A2                 mov     edx, [eax+10h]
.text:000007A5                 push    edx             ; unsigned __int64
.text:000007A6                 mov     ecx, [ebp+var_4] ; this
.text:000007A9                 call    ?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::COutArchive::MoveCurPos(unsigned __int64)
.text:000007AE                 pop     edi
.text:000007AF                 pop     esi
.text:000007B0                 add     esp, 28h
.text:000007B3                 cmp     ebp, esp
.text:000007B5                 call    __RTC_CheckEsp
.text:000007BA                 mov     esp, ebp
.text:000007BC                 pop     ebp
.text:000007BD                 retn    4
.text:000007BD ?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z endp
.text:000007BD
.text:000007C0
.text:000007C0 ; =============== S U B R O U T I N E =======================================
.text:000007C0
.text:000007C0 ; Attributes: bp-based frame
.text:000007C0
.text:000007C0 ; void __thiscall NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::COutArchive *this, const struct NArchive::NZip::CItemOut *)
.text:000007C0                 public ?WriteCentralHeader@COutArchive@NZip@NArchive@@AAEXABVCItemOut@23@@Z
.text:000007C0 ?WriteCentralHeader@COutArchive@NZip@NArchive@@AAEXABVCItemOut@23@@Z proc near
.text:000007C0                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+60p
.text:000007C0
.text:000007C0 var_40          = dword ptr -40h
.text:000007C0 var_3C          = dword ptr -3Ch
.text:000007C0 var_38          = dword ptr -38h
.text:000007C0 var_34          = dword ptr -34h
.text:000007C0 var_30          = dword ptr -30h
.text:000007C0 var_2C          = dword ptr -2Ch
.text:000007C0 var_28          = dword ptr -28h
.text:000007C0 var_24          = dword ptr -24h
.text:000007C0 var_20          = dword ptr -20h
.text:000007C0 var_1C          = dword ptr -1Ch
.text:000007C0 var_18          = dword ptr -18h
.text:000007C0 var_14          = word ptr -14h
.text:000007C0 var_10          = word ptr -10h
.text:000007C0 var_C           = word ptr -0Ch
.text:000007C0 var_8           = byte ptr -8
.text:000007C0 var_7           = byte ptr -7
.text:000007C0 var_6           = byte ptr -6
.text:000007C0 var_5           = byte ptr -5
.text:000007C0 var_4           = dword ptr -4
.text:000007C0 arg_0           = dword ptr  8
.text:000007C0
.text:000007C0                 push    ebp
.text:000007C1                 mov     ebp, esp
.text:000007C3                 sub     esp, 40h
.text:000007C6                 push    esi
.text:000007C7                 push    edi
.text:000007C8                 push    ecx
.text:000007C9                 lea     edi, [ebp+var_40]
.text:000007CC                 mov     ecx, 10h
.text:000007D1                 mov     eax, 0CCCCCCCCh
.text:000007D6                 rep stosd
.text:000007D8                 pop     ecx
.text:000007D9                 mov     [ebp+var_4], ecx
.text:000007DC                 mov     eax, [ebp+arg_0]
.text:000007DF                 mov     [ebp+var_18], eax
.text:000007E2                 mov     ecx, [ebp+var_18]
.text:000007E5                 cmp     dword ptr [ecx+0Ch], 0
.text:000007E9                 ja      short loc_7F4
.text:000007EB                 mov     edx, [ebp+var_18]
.text:000007EE                 cmp     dword ptr [edx+8], 0FFFFFFFFh
.text:000007F2                 jb      short loc_7FD
.text:000007F4
.text:000007F4 loc_7F4:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+29j
.text:000007F4                 mov     [ebp+var_1C], 1
.text:000007FB                 jmp     short loc_804
.text:000007FD ; ---------------------------------------------------------------------------
.text:000007FD
.text:000007FD loc_7FD:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+32j
.text:000007FD                 mov     [ebp+var_1C], 0
.text:00000804
.text:00000804 loc_804:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+3Bj
.text:00000804                 mov     al, byte ptr [ebp+var_1C]
.text:00000807                 mov     [ebp+var_5], al
.text:0000080A                 mov     ecx, [ebp+arg_0]
.text:0000080D                 mov     [ebp+var_20], ecx
.text:00000810                 mov     edx, [ebp+var_20]
.text:00000813                 cmp     dword ptr [edx+14h], 0
.text:00000817                 ja      short loc_822
.text:00000819                 mov     eax, [ebp+var_20]
.text:0000081C                 cmp     dword ptr [eax+10h], 0FFFFFFFFh
.text:00000820                 jb      short loc_82B
.text:00000822
.text:00000822 loc_822:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+57j
.text:00000822                 mov     [ebp+var_24], 1
.text:00000829                 jmp     short loc_832
.text:0000082B ; ---------------------------------------------------------------------------
.text:0000082B
.text:0000082B loc_82B:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+60j
.text:0000082B                 mov     [ebp+var_24], 0
.text:00000832
.text:00000832 loc_832:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+69j
.text:00000832                 mov     cl, byte ptr [ebp+var_24]
.text:00000835                 mov     [ebp+var_6], cl
.text:00000838                 mov     edx, [ebp+arg_0]
.text:0000083B                 mov     [ebp+var_28], edx
.text:0000083E                 mov     eax, [ebp+var_28]
.text:00000841                 cmp     dword ptr [eax+44h], 0
.text:00000845                 ja      short loc_850
.text:00000847                 mov     ecx, [ebp+var_28]
.text:0000084A                 cmp     dword ptr [ecx+40h], 0FFFFFFFFh
.text:0000084E                 jb      short loc_859
.text:00000850
.text:00000850 loc_850:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+85j
.text:00000850                 mov     [ebp+var_2C], 1
.text:00000857                 jmp     short loc_860
.text:00000859 ; ---------------------------------------------------------------------------
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+8Ej
.text:00000859                 mov     [ebp+var_2C], 0
.text:00000860
.text:00000860 loc_860:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+97j
.text:00000860                 mov     dl, byte ptr [ebp+var_2C]
.text:00000863                 mov     [ebp+var_7], dl
.text:00000866                 movzx   eax, [ebp+var_6]
.text:0000086A                 test    eax, eax
.text:0000086C                 jnz     short loc_887
.text:0000086E                 movzx   ecx, [ebp+var_5]
.text:00000872                 test    ecx, ecx
.text:00000874                 jnz     short loc_887
.text:00000876                 movzx   edx, [ebp+var_7]
.text:0000087A                 test    edx, edx
.text:0000087C                 jnz     short loc_887
.text:0000087E                 mov     [ebp+var_30], 0
.text:00000885                 jmp     short loc_88E
.text:00000887 ; ---------------------------------------------------------------------------
.text:00000887
.text:00000887 loc_887:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+ACj
.text:00000887                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+B4j ...
.text:00000887                 mov     [ebp+var_30], 1
.text:0000088E
.text:0000088E loc_88E:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+C5j
.text:0000088E                 mov     al, byte ptr [ebp+var_30]
.text:00000891                 mov     [ebp+var_8], al
.text:00000894                 push    2014B50h        ; unsigned int
.text:00000899                 mov     ecx, [ebp+var_4] ; this
.text:0000089C                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000008A1                 mov     ecx, [ebp+arg_0]
.text:000008A4                 movzx   edx, byte ptr [ecx+38h]
.text:000008A8                 push    edx             ; unsigned __int8
.text:000008A9                 mov     ecx, [ebp+var_4] ; this
.text:000008AC                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:000008B1                 mov     eax, [ebp+arg_0]
.text:000008B4                 movzx   ecx, byte ptr [eax+39h]
.text:000008B8                 push    ecx             ; unsigned __int8
.text:000008B9                 mov     ecx, [ebp+var_4] ; this
.text:000008BC                 call    ?Write8@COutArchive@NZip@NArchive@@AAEXE@Z ; NArchive::NZip::COutArchive::Write8(uchar)
.text:000008C1                 movzx   edx, [ebp+var_8]
.text:000008C5                 push    edx             ; bool
.text:000008C6                 mov     eax, [ebp+arg_0]
.text:000008C9                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:000008CA                 mov     ecx, [ebp+var_4] ; this
.text:000008CD                 call    ?WriteCommonItemInfo@COutArchive@NZip@NArchive@@AAEXABVCLocalItem@23@_N@Z ; NArchive::NZip::COutArchive::WriteCommonItemInfo(NArchive::NZip::CLocalItem const &,bool)
.text:000008D2                 movzx   ecx, [ebp+var_6]
.text:000008D6                 test    ecx, ecx
.text:000008D8                 jz      short loc_8E3
.text:000008DA                 mov     [ebp+var_34], 0FFFFFFFFh
.text:000008E1                 jmp     short loc_8EC
.text:000008E3 ; ---------------------------------------------------------------------------
.text:000008E3
.text:000008E3 loc_8E3:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+118j
.text:000008E3                 mov     edx, [ebp+arg_0]
.text:000008E6                 mov     eax, [edx+10h]
.text:000008E9                 mov     [ebp+var_34], eax
.text:000008EC
.text:000008EC loc_8EC:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+121j
.text:000008EC                 mov     ecx, [ebp+var_34]
.text:000008EF                 push    ecx             ; unsigned int
.text:000008F0                 mov     ecx, [ebp+var_4] ; this
.text:000008F3                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000008F8                 movzx   edx, [ebp+var_5]
.text:000008FC                 test    edx, edx
.text:000008FE                 jz      short loc_909
.text:00000900                 mov     [ebp+var_38], 0FFFFFFFFh
.text:00000907                 jmp     short loc_912
.text:00000909 ; ---------------------------------------------------------------------------
.text:00000909
.text:00000909 loc_909:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+13Ej
.text:00000909                 mov     eax, [ebp+arg_0]
.text:0000090C                 mov     ecx, [eax+8]
.text:0000090F                 mov     [ebp+var_38], ecx
.text:00000912
.text:00000912 loc_912:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+147j
.text:00000912                 mov     edx, [ebp+var_38]
.text:00000915                 push    edx             ; unsigned int
.text:00000916                 mov     ecx, [ebp+var_4] ; this
.text:00000919                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:0000091E                 mov     ecx, [ebp+arg_0]
.text:00000921                 add     ecx, 20h ; ' '  ; this
.text:00000924                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000929                 push    eax             ; unsigned __int16
.text:0000092A                 mov     ecx, [ebp+var_4] ; this
.text:0000092D                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000932                 movzx   eax, [ebp+var_5]
.text:00000936                 neg     eax
.text:00000938                 sbb     eax, eax
.text:0000093A                 and     eax, 8
.text:0000093D                 movzx   ecx, [ebp+var_6]
.text:00000941                 neg     ecx
.text:00000943                 sbb     ecx, ecx
.text:00000945                 and     ecx, 8
.text:00000948                 add     eax, ecx
.text:0000094A                 movzx   edx, [ebp+var_7]
.text:0000094E                 neg     edx
.text:00000950                 sbb     edx, edx
.text:00000952                 and     edx, 8
.text:00000955                 add     eax, edx
.text:00000957                 mov     [ebp+var_C], ax
.text:0000095B                 mov     eax, 20h ; ' '
.text:00000960                 mov     [ebp+var_10], ax
.text:00000964                 movzx   ecx, [ebp+var_8]
.text:00000968                 test    ecx, ecx
.text:0000096A                 jz      short loc_978
.text:0000096C                 movzx   edx, [ebp+var_C]
.text:00000970                 add     edx, 4
.text:00000973                 mov     [ebp+var_3C], edx
.text:00000976                 jmp     short loc_97F
.text:00000978 ; ---------------------------------------------------------------------------
.text:00000978
.text:00000978 loc_978:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+1AAj
.text:00000978                 mov     [ebp+var_3C], 0
.text:0000097F
.text:0000097F loc_97F:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+1B6j
.text:0000097F                 mov     eax, [ebp+arg_0]
.text:00000982                 movzx   esi, byte ptr [eax+78h]
.text:00000986                 neg     esi
.text:00000988                 sbb     esi, esi
.text:0000098A                 and     esi, 24h
.text:0000098D                 add     esi, [ebp+var_3C]
.text:00000990                 mov     ecx, [ebp+arg_0]
.text:00000993                 add     ecx, 48h ; 'H'  ; this
.text:00000996                 call    ?GetSize@CExtraBlock@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CExtraBlock::GetSize(void)
.text:0000099B                 add     esi, eax
.text:0000099D                 mov     [ebp+var_14], si
.text:000009A1                 movzx   ecx, [ebp+var_14]
.text:000009A5                 push    ecx             ; unsigned __int16
.text:000009A6                 mov     ecx, [ebp+var_4] ; this
.text:000009A9                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000009AE                 mov     ecx, [ebp+arg_0]
.text:000009B1                 add     ecx, 54h ; 'T'
.text:000009B4                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000009B9                 push    eax             ; unsigned __int16
.text:000009BA                 mov     ecx, [ebp+var_4] ; this
.text:000009BD                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000009C2                 push    0               ; unsigned __int16
.text:000009C4                 mov     ecx, [ebp+var_4] ; this
.text:000009C7                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000009CC                 mov     edx, [ebp+arg_0]
.text:000009CF                 movzx   eax, word ptr [edx+3Ah]
.text:000009D3                 push    eax             ; unsigned __int16
.text:000009D4                 mov     ecx, [ebp+var_4] ; this
.text:000009D7                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:000009DC                 mov     ecx, [ebp+arg_0]
.text:000009DF                 mov     edx, [ecx+3Ch]
.text:000009E2                 push    edx             ; unsigned int
.text:000009E3                 mov     ecx, [ebp+var_4] ; this
.text:000009E6                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000009EB                 movzx   eax, [ebp+var_7]
.text:000009EF                 test    eax, eax
.text:000009F1                 jz      short loc_9FC
.text:000009F3                 mov     [ebp+var_40], 0FFFFFFFFh
.text:000009FA                 jmp     short loc_A05
.text:000009FC ; ---------------------------------------------------------------------------
.text:000009FC
.text:000009FC loc_9FC:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+231j
.text:000009FC                 mov     ecx, [ebp+arg_0]
.text:000009FF                 mov     edx, [ecx+40h]
.text:00000A02                 mov     [ebp+var_40], edx
.text:00000A05
.text:00000A05 loc_A05:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+23Aj
.text:00000A05                 mov     eax, [ebp+var_40]
.text:00000A08                 push    eax             ; unsigned int
.text:00000A09                 mov     ecx, [ebp+var_4] ; this
.text:00000A0C                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000A11                 mov     ecx, [ebp+arg_0]
.text:00000A14                 add     ecx, 20h ; ' '  ; this
.text:00000A17                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000A1C                 push    eax             ; unsigned int
.text:00000A1D                 mov     ecx, [ebp+arg_0]
.text:00000A20                 add     ecx, 20h ; ' '
.text:00000A23                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000A28                 push    eax             ; void *
.text:00000A29                 mov     ecx, [ebp+var_4] ; this
.text:00000A2C                 call    ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z ; NArchive::NZip::COutArchive::WriteBytes(void const *,uint)
.text:00000A31                 movzx   ecx, [ebp+var_8]
.text:00000A35                 test    ecx, ecx
.text:00000A37                 jz      short loc_AA1
.text:00000A39                 push    1               ; unsigned __int16
.text:00000A3B                 mov     ecx, [ebp+var_4] ; this
.text:00000A3E                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000A43                 movzx   edx, [ebp+var_C]
.text:00000A47                 push    edx             ; unsigned __int16
.text:00000A48                 mov     ecx, [ebp+var_4] ; this
.text:00000A4B                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000A50                 movzx   eax, [ebp+var_5]
.text:00000A54                 test    eax, eax
.text:00000A56                 jz      short loc_A6B
.text:00000A58                 mov     ecx, [ebp+arg_0]
.text:00000A5B                 mov     edx, [ecx+0Ch]
.text:00000A5E                 push    edx
.text:00000A5F                 mov     eax, [ecx+8]
.text:00000A62                 push    eax             ; unsigned __int64
.text:00000A63                 mov     ecx, [ebp+var_4] ; this
.text:00000A66                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000A6B
.text:00000A6B loc_A6B:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+296j
.text:00000A6B                 movzx   ecx, [ebp+var_6]
.text:00000A6F                 test    ecx, ecx
.text:00000A71                 jz      short loc_A86
.text:00000A73                 mov     edx, [ebp+arg_0]
.text:00000A76                 mov     eax, [edx+14h]
.text:00000A79                 push    eax
.text:00000A7A                 mov     ecx, [edx+10h]
.text:00000A7D                 push    ecx             ; unsigned __int64
.text:00000A7E                 mov     ecx, [ebp+var_4] ; this
.text:00000A81                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000A86
.text:00000A86 loc_A86:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+2B1j
.text:00000A86                 movzx   edx, [ebp+var_7]
.text:00000A8A                 test    edx, edx
.text:00000A8C                 jz      short loc_AA1
.text:00000A8E                 mov     eax, [ebp+arg_0]
.text:00000A91                 mov     ecx, [eax+44h]
.text:00000A94                 push    ecx
.text:00000A95                 mov     edx, [eax+40h]
.text:00000A98                 push    edx             ; unsigned __int64
.text:00000A99                 mov     ecx, [ebp+var_4] ; this
.text:00000A9C                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000AA1
.text:00000AA1 loc_AA1:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+277j
.text:00000AA1                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+2CCj
.text:00000AA1                 mov     eax, [ebp+arg_0]
.text:00000AA4                 movzx   ecx, byte ptr [eax+78h]
.text:00000AA8                 test    ecx, ecx
.text:00000AAA                 jz      short loc_B0B
.text:00000AAC                 push    0Ah             ; unsigned __int16
.text:00000AAE                 mov     ecx, [ebp+var_4] ; this
.text:00000AB1                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000AB6                 push    20h ; ' '       ; unsigned __int16
.text:00000AB8                 mov     ecx, [ebp+var_4] ; this
.text:00000ABB                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000AC0                 push    0               ; unsigned int
.text:00000AC2                 mov     ecx, [ebp+var_4] ; this
.text:00000AC5                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000ACA                 push    1               ; unsigned __int16
.text:00000ACC                 mov     ecx, [ebp+var_4] ; this
.text:00000ACF                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000AD4                 push    18h             ; unsigned __int16
.text:00000AD6                 mov     ecx, [ebp+var_4] ; this
.text:00000AD9                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000ADE                 mov     edx, [ebp+arg_0]
.text:00000AE1                 add     edx, 60h ; '`'
.text:00000AE4                 push    edx             ; struct _FILETIME *
.text:00000AE5                 mov     ecx, [ebp+var_4] ; this
.text:00000AE8                 call    ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z ; NArchive::NZip::COutArchive::WriteNtfsTime(_FILETIME const &)
.text:00000AED                 mov     eax, [ebp+arg_0]
.text:00000AF0                 add     eax, 68h ; 'h'
.text:00000AF3                 push    eax             ; struct _FILETIME *
.text:00000AF4                 mov     ecx, [ebp+var_4] ; this
.text:00000AF7                 call    ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z ; NArchive::NZip::COutArchive::WriteNtfsTime(_FILETIME const &)
.text:00000AFC                 mov     ecx, [ebp+arg_0]
.text:00000AFF                 add     ecx, 70h ; 'p'
.text:00000B02                 push    ecx             ; struct _FILETIME *
.text:00000B03                 mov     ecx, [ebp+var_4] ; this
.text:00000B06                 call    ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z ; NArchive::NZip::COutArchive::WriteNtfsTime(_FILETIME const &)
.text:00000B0B
.text:00000B0B loc_B0B:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+2EAj
.text:00000B0B                 mov     edx, [ebp+arg_0]
.text:00000B0E                 add     edx, 48h ; 'H'
.text:00000B11                 push    edx             ; struct NArchive::NZip::CExtraBlock *
.text:00000B12                 mov     ecx, [ebp+var_4] ; this
.text:00000B15                 call    ?WriteExtra@COutArchive@NZip@NArchive@@AAEXABUCExtraBlock@23@@Z ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)
.text:00000B1A                 mov     ecx, [ebp+arg_0]
.text:00000B1D                 add     ecx, 54h ; 'T'
.text:00000B20                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000B25                 test    eax, eax
.text:00000B27                 jbe     short loc_B49
.text:00000B29                 mov     ecx, [ebp+arg_0]
.text:00000B2C                 add     ecx, 54h ; 'T'
.text:00000B2F                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000B34                 push    eax             ; unsigned int
.text:00000B35                 mov     ecx, [ebp+arg_0]
.text:00000B38                 add     ecx, 54h ; 'T'
.text:00000B3B                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000B40                 push    eax             ; void *
.text:00000B41                 mov     ecx, [ebp+var_4] ; this
.text:00000B44                 call    ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z ; NArchive::NZip::COutArchive::WriteBytes(void const *,uint)
.text:00000B49
.text:00000B49 loc_B49:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+367j
.text:00000B49                 pop     edi
.text:00000B4A                 pop     esi
.text:00000B4B                 add     esp, 40h
.text:00000B4E                 cmp     ebp, esp
.text:00000B50                 call    __RTC_CheckEsp
.text:00000B55                 mov     esp, ebp
.text:00000B57                 pop     ebp
.text:00000B58                 retn    4
.text:00000B58 ?WriteCentralHeader@COutArchive@NZip@NArchive@@AAEXABVCItemOut@23@@Z endp
.text:00000B58
.text:00000B58 ; ---------------------------------------------------------------------------
.text:00000B5B                 align 10h
.text:00000B60
.text:00000B60 ; =============== S U B R O U T I N E =======================================
.text:00000B60
.text:00000B60 ; Attributes: bp-based frame
.text:00000B60
.text:00000B60 ; public: void __thiscall NArchive::NZip::COutArchive::WriteCentralDir(class CObjectVector<class NArchive::NZip::CItemOut> const &, class CBuffer<unsigned char> const *)
.text:00000B60                 public ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z
.text:00000B60 ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z proc near
.text:00000B60
.text:00000B60 var_48          = dword ptr -48h
.text:00000B60 var_44          = dword ptr -44h
.text:00000B60 var_40          = dword ptr -40h
.text:00000B60 var_3C          = dword ptr -3Ch
.text:00000B60 var_38          = dword ptr -38h
.text:00000B60 var_34          = dword ptr -34h
.text:00000B60 var_30          = dword ptr -30h
.text:00000B60 var_2C          = dword ptr -2Ch
.text:00000B60 var_28          = dword ptr -28h
.text:00000B60 var_24          = byte ptr -24h
.text:00000B60 var_23          = byte ptr -23h
.text:00000B60 var_22          = byte ptr -22h
.text:00000B60 var_21          = byte ptr -21h
.text:00000B60 var_20          = qword ptr -20h
.text:00000B60 var_18          = qword ptr -18h
.text:00000B60 var_10          = dword ptr -10h
.text:00000B60 var_C           = qword ptr -0Ch
.text:00000B60 var_4           = dword ptr -4
.text:00000B60 arg_0           = dword ptr  8
.text:00000B60 arg_4           = dword ptr  0Ch
.text:00000B60
.text:00000B60                 push    ebp
.text:00000B61                 mov     ebp, esp
.text:00000B63                 sub     esp, 48h
.text:00000B66                 push    edi
.text:00000B67                 push    ecx
.text:00000B68                 lea     edi, [ebp+var_48]
.text:00000B6B                 mov     ecx, 12h
.text:00000B70                 mov     eax, 0CCCCCCCCh
.text:00000B75                 rep stosd
.text:00000B77                 pop     ecx
.text:00000B78                 mov     [ebp+var_4], ecx
.text:00000B7B                 mov     ecx, [ebp+var_4] ; this
.text:00000B7E                 call    ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::COutArchive::SeekToCurPos(void)
.text:00000B83                 mov     ecx, [ebp+var_4] ; this
.text:00000B86                 call    ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos(void)
.text:00000B8B                 mov     dword ptr [ebp+var_C], eax
.text:00000B8E                 mov     dword ptr [ebp+var_C+4], edx
.text:00000B91                 mov     [ebp+var_10], 0
.text:00000B98                 jmp     short loc_BA3
.text:00000B9A ; ---------------------------------------------------------------------------
.text:00000B9A
.text:00000B9A loc_B9A:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+65j
.text:00000B9A                 mov     eax, [ebp+var_10]
.text:00000B9D                 add     eax, 1
.text:00000BA0                 mov     [ebp+var_10], eax
.text:00000BA3
.text:00000BA3 loc_BA3:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+38j
.text:00000BA3                 mov     ecx, [ebp+arg_0]
.text:00000BA6                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000BAB                 cmp     [ebp+var_10], eax
.text:00000BAE                 jnb     short loc_BC7
.text:00000BB0                 mov     ecx, [ebp+var_10]
.text:00000BB3                 push    ecx
.text:00000BB4                 mov     ecx, [ebp+arg_0]
.text:00000BB7                 call    ??A?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEABVCItemOut@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemOut>::operator[](uint)
.text:00000BBC                 push    eax             ; struct NArchive::NZip::CItemOut *
.text:00000BBD                 mov     ecx, [ebp+var_4] ; this
.text:00000BC0                 call    ?WriteCentralHeader@COutArchive@NZip@NArchive@@AAEXABVCItemOut@23@@Z ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)
.text:00000BC5                 jmp     short loc_B9A
.text:00000BC7 ; ---------------------------------------------------------------------------
.text:00000BC7
.text:00000BC7 loc_BC7:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+4Ej
.text:00000BC7                 mov     ecx, [ebp+var_4] ; this
.text:00000BCA                 call    ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos(void)
.text:00000BCF                 mov     dword ptr [ebp+var_18], eax
.text:00000BD2                 mov     dword ptr [ebp+var_18+4], edx
.text:00000BD5                 mov     edx, dword ptr [ebp+var_18]
.text:00000BD8                 sub     edx, dword ptr [ebp+var_C]
.text:00000BDB                 mov     eax, dword ptr [ebp+var_18+4]
.text:00000BDE                 sbb     eax, dword ptr [ebp+var_C+4]
.text:00000BE1                 mov     dword ptr [ebp+var_20], edx
.text:00000BE4                 mov     dword ptr [ebp+var_20+4], eax
.text:00000BE7                 cmp     dword ptr [ebp+var_C+4], 0
.text:00000BEB                 ja      short loc_BF3
.text:00000BED                 cmp     dword ptr [ebp+var_C], 0FFFFFFFFh
.text:00000BF1                 jb      short loc_BFC
.text:00000BF3
.text:00000BF3 loc_BF3:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+8Bj
.text:00000BF3                 mov     [ebp+var_2C], 1
.text:00000BFA                 jmp     short loc_C03
.text:00000BFC ; ---------------------------------------------------------------------------
.text:00000BFC
.text:00000BFC loc_BFC:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+91j
.text:00000BFC                 mov     [ebp+var_2C], 0
.text:00000C03
.text:00000C03 loc_C03:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+9Aj
.text:00000C03                 mov     cl, byte ptr [ebp+var_2C]
.text:00000C06                 mov     [ebp+var_21], cl
.text:00000C09                 cmp     dword ptr [ebp+var_20+4], 0
.text:00000C0D                 ja      short loc_C15
.text:00000C0F                 cmp     dword ptr [ebp+var_20], 0FFFFFFFFh
.text:00000C13                 jb      short loc_C1E
.text:00000C15
.text:00000C15 loc_C15:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+ADj
.text:00000C15                 mov     [ebp+var_30], 1
.text:00000C1C                 jmp     short loc_C25
.text:00000C1E ; ---------------------------------------------------------------------------
.text:00000C1E
.text:00000C1E loc_C1E:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+B3j
.text:00000C1E                 mov     [ebp+var_30], 0
.text:00000C25
.text:00000C25 loc_C25:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+BCj
.text:00000C25                 mov     dl, byte ptr [ebp+var_30]
.text:00000C28                 mov     [ebp+var_22], dl
.text:00000C2B                 mov     ecx, [ebp+arg_0]
.text:00000C2E                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000C33                 cmp     eax, 0FFFFh
.text:00000C38                 sbb     eax, eax
.text:00000C3A                 add     eax, 1
.text:00000C3D                 mov     [ebp+var_23], al
.text:00000C40                 movzx   ecx, [ebp+var_21]
.text:00000C44                 test    ecx, ecx
.text:00000C46                 jnz     short loc_C61
.text:00000C48                 movzx   edx, [ebp+var_22]
.text:00000C4C                 test    edx, edx
.text:00000C4E                 jnz     short loc_C61
.text:00000C50                 movzx   eax, [ebp+var_23]
.text:00000C54                 test    eax, eax
.text:00000C56                 jnz     short loc_C61
.text:00000C58                 mov     [ebp+var_34], 0
.text:00000C5F                 jmp     short loc_C68
.text:00000C61 ; ---------------------------------------------------------------------------
.text:00000C61
.text:00000C61 loc_C61:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+E6j
.text:00000C61                                         ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+EEj ...
.text:00000C61                 mov     [ebp+var_34], 1
.text:00000C68
.text:00000C68 loc_C68:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+FFj
.text:00000C68                 mov     cl, byte ptr [ebp+var_34]
.text:00000C6B                 mov     [ebp+var_24], cl
.text:00000C6E                 movzx   edx, [ebp+var_24]
.text:00000C72                 test    edx, edx
.text:00000C74                 jz      loc_D34
.text:00000C7A                 push    6064B50h        ; unsigned int
.text:00000C7F                 mov     ecx, [ebp+var_4] ; this
.text:00000C82                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000C87                 push    0
.text:00000C89                 push    2Ch ; ','       ; unsigned __int64
.text:00000C8B                 mov     ecx, [ebp+var_4] ; this
.text:00000C8E                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000C93                 push    2Dh ; '-'       ; unsigned __int16
.text:00000C95                 mov     ecx, [ebp+var_4] ; this
.text:00000C98                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000C9D                 push    2Dh ; '-'       ; unsigned __int16
.text:00000C9F                 mov     ecx, [ebp+var_4] ; this
.text:00000CA2                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000CA7                 push    0               ; unsigned int
.text:00000CA9                 mov     ecx, [ebp+var_4] ; this
.text:00000CAC                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000CB1                 push    0               ; unsigned int
.text:00000CB3                 mov     ecx, [ebp+var_4] ; this
.text:00000CB6                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000CBB                 mov     ecx, [ebp+arg_0]
.text:00000CBE                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000CC3                 xor     ecx, ecx
.text:00000CC5                 push    ecx
.text:00000CC6                 push    eax             ; unsigned __int64
.text:00000CC7                 mov     ecx, [ebp+var_4] ; this
.text:00000CCA                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000CCF                 mov     ecx, [ebp+arg_0]
.text:00000CD2                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000CD7                 xor     edx, edx
.text:00000CD9                 push    edx
.text:00000CDA                 push    eax             ; unsigned __int64
.text:00000CDB                 mov     ecx, [ebp+var_4] ; this
.text:00000CDE                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000CE3                 mov     eax, dword ptr [ebp+var_20+4]
.text:00000CE6                 push    eax
.text:00000CE7                 mov     ecx, dword ptr [ebp+var_20]
.text:00000CEA                 push    ecx             ; unsigned __int64
.text:00000CEB                 mov     ecx, [ebp+var_4] ; this
.text:00000CEE                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000CF3                 mov     edx, dword ptr [ebp+var_C+4]
.text:00000CF6                 push    edx
.text:00000CF7                 mov     eax, dword ptr [ebp+var_C]
.text:00000CFA                 push    eax             ; unsigned __int64
.text:00000CFB                 mov     ecx, [ebp+var_4] ; this
.text:00000CFE                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000D03                 push    7064B50h        ; unsigned int
.text:00000D08                 mov     ecx, [ebp+var_4] ; this
.text:00000D0B                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000D10                 push    0               ; unsigned int
.text:00000D12                 mov     ecx, [ebp+var_4] ; this
.text:00000D15                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000D1A                 mov     ecx, dword ptr [ebp+var_18+4]
.text:00000D1D                 push    ecx
.text:00000D1E                 mov     edx, dword ptr [ebp+var_18]
.text:00000D21                 push    edx             ; unsigned __int64
.text:00000D22                 mov     ecx, [ebp+var_4] ; this
.text:00000D25                 call    ?Write64@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::Write64(unsigned __int64)
.text:00000D2A                 push    1               ; unsigned int
.text:00000D2C                 mov     ecx, [ebp+var_4] ; this
.text:00000D2F                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000D34
.text:00000D34 loc_D34:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+114j
.text:00000D34                 push    6054B50h        ; unsigned int
.text:00000D39                 mov     ecx, [ebp+var_4] ; this
.text:00000D3C                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000D41                 push    0               ; unsigned __int16
.text:00000D43                 mov     ecx, [ebp+var_4] ; this
.text:00000D46                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000D4B                 push    0               ; unsigned __int16
.text:00000D4D                 mov     ecx, [ebp+var_4] ; this
.text:00000D50                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000D55                 movzx   eax, [ebp+var_23]
.text:00000D59                 test    eax, eax
.text:00000D5B                 jz      short loc_D66
.text:00000D5D                 mov     [ebp+var_38], 0FFFFh
.text:00000D64                 jmp     short loc_D71
.text:00000D66 ; ---------------------------------------------------------------------------
.text:00000D66
.text:00000D66 loc_D66:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+1FBj
.text:00000D66                 mov     ecx, [ebp+arg_0]
.text:00000D69                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000D6E                 mov     [ebp+var_38], eax
.text:00000D71
.text:00000D71 loc_D71:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+204j
.text:00000D71                 movzx   ecx, word ptr [ebp+var_38]
.text:00000D75                 push    ecx             ; unsigned __int16
.text:00000D76                 mov     ecx, [ebp+var_4] ; this
.text:00000D79                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000D7E                 movzx   edx, [ebp+var_23]
.text:00000D82                 test    edx, edx
.text:00000D84                 jz      short loc_D8F
.text:00000D86                 mov     [ebp+var_3C], 0FFFFh
.text:00000D8D                 jmp     short loc_D9A
.text:00000D8F ; ---------------------------------------------------------------------------
.text:00000D8F
.text:00000D8F loc_D8F:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+224j
.text:00000D8F                 mov     ecx, [ebp+arg_0]
.text:00000D92                 call    ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)
.text:00000D97                 mov     [ebp+var_3C], eax
.text:00000D9A
.text:00000D9A loc_D9A:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+22Dj
.text:00000D9A                 movzx   eax, word ptr [ebp+var_3C]
.text:00000D9E                 push    eax             ; unsigned __int16
.text:00000D9F                 mov     ecx, [ebp+var_4] ; this
.text:00000DA2                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000DA7                 movzx   ecx, [ebp+var_22]
.text:00000DAB                 test    ecx, ecx
.text:00000DAD                 jz      short loc_DB8
.text:00000DAF                 mov     [ebp+var_40], 0FFFFFFFFh
.text:00000DB6                 jmp     short loc_DBE
.text:00000DB8 ; ---------------------------------------------------------------------------
.text:00000DB8
.text:00000DB8 loc_DB8:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+24Dj
.text:00000DB8                 mov     edx, dword ptr [ebp+var_20]
.text:00000DBB                 mov     [ebp+var_40], edx
.text:00000DBE
.text:00000DBE loc_DBE:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+256j
.text:00000DBE                 mov     eax, [ebp+var_40]
.text:00000DC1                 push    eax             ; unsigned int
.text:00000DC2                 mov     ecx, [ebp+var_4] ; this
.text:00000DC5                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000DCA                 movzx   ecx, [ebp+var_21]
.text:00000DCE                 test    ecx, ecx
.text:00000DD0                 jz      short loc_DDB
.text:00000DD2                 mov     [ebp+var_44], 0FFFFFFFFh
.text:00000DD9                 jmp     short loc_DE1
.text:00000DDB ; ---------------------------------------------------------------------------
.text:00000DDB
.text:00000DDB loc_DDB:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+270j
.text:00000DDB                 mov     edx, dword ptr [ebp+var_C]
.text:00000DDE                 mov     [ebp+var_44], edx
.text:00000DE1
.text:00000DE1 loc_DE1:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+279j
.text:00000DE1                 mov     eax, [ebp+var_44]
.text:00000DE4                 push    eax             ; unsigned int
.text:00000DE5                 mov     ecx, [ebp+var_4] ; this
.text:00000DE8                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00000DED                 cmp     [ebp+arg_4], 0
.text:00000DF1                 jz      short loc_E00
.text:00000DF3                 mov     ecx, [ebp+arg_4]
.text:00000DF6                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000DFB                 mov     [ebp+var_48], eax
.text:00000DFE                 jmp     short loc_E07
.text:00000E00 ; ---------------------------------------------------------------------------
.text:00000E00
.text:00000E00 loc_E00:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+291j
.text:00000E00                 mov     [ebp+var_48], 0
.text:00000E07
.text:00000E07 loc_E07:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+29Ej
.text:00000E07                 mov     ecx, [ebp+var_48]
.text:00000E0A                 mov     [ebp+var_28], ecx
.text:00000E0D                 movzx   edx, word ptr [ebp+var_28]
.text:00000E11                 push    edx             ; unsigned __int16
.text:00000E12                 mov     ecx, [ebp+var_4] ; this
.text:00000E15                 call    ?Write16@COutArchive@NZip@NArchive@@AAEXG@Z ; NArchive::NZip::COutArchive::Write16(ushort)
.text:00000E1A                 cmp     [ebp+var_28], 0
.text:00000E1E                 jbe     short loc_E35
.text:00000E20                 mov     eax, [ebp+var_28]
.text:00000E23                 push    eax             ; unsigned int
.text:00000E24                 mov     ecx, [ebp+arg_4]
.text:00000E27                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000E2C                 push    eax             ; void *
.text:00000E2D                 mov     ecx, [ebp+var_4] ; this
.text:00000E30                 call    ?WriteBytes@COutArchive@NZip@NArchive@@AAEXPBXI@Z ; NArchive::NZip::COutArchive::WriteBytes(void const *,uint)
.text:00000E35
.text:00000E35 loc_E35:                                ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+2BEj
.text:00000E35                 mov     ecx, [ebp+var_4]
.text:00000E38                 add     ecx, 8          ; this
.text:00000E3B                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00000E40                 pop     edi
.text:00000E41                 add     esp, 48h
.text:00000E44                 cmp     ebp, esp
.text:00000E46                 call    __RTC_CheckEsp
.text:00000E4B                 mov     esp, ebp
.text:00000E4D                 pop     ebp
.text:00000E4E                 retn    8
.text:00000E4E ?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z endp
.text:00000E4E
.text:00000E4E ; ---------------------------------------------------------------------------
.text:00000E51                 align 10h
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; void __thiscall NArchive::NZip::COutArchive::CreateStreamForCompressing(NArchive::NZip::COutArchive *this, struct IOutStream **)
.text:00000E60                 public ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z
.text:00000E60 ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z proc near
.text:00000E60
.text:00000E60 var_2C          = dword ptr -2Ch
.text:00000E60 var_28          = dword ptr -28h
.text:00000E60 var_24          = dword ptr -24h
.text:00000E60 var_20          = dword ptr -20h
.text:00000E60 var_1C          = dword ptr -1Ch
.text:00000E60 var_18          = dword ptr -18h
.text:00000E60 var_14          = dword ptr -14h
.text:00000E60 var_10          = dword ptr -10h
.text:00000E60 var_C           = dword ptr -0Ch
.text:00000E60 var_4           = dword ptr -4
.text:00000E60 arg_0           = dword ptr  8
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 push    0FFFFFFFFh
.text:00000E65                 push    offset __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z
.text:00000E6A                 mov     eax, large fs:0
.text:00000E70                 push    eax
.text:00000E71                 sub     esp, 20h
.text:00000E74                 push    esi
.text:00000E75                 mov     eax, 0CCCCCCCCh
.text:00000E7A                 mov     [ebp+var_2C], eax
.text:00000E7D                 mov     [ebp+var_28], eax
.text:00000E80                 mov     [ebp+var_24], eax
.text:00000E83                 mov     [ebp+var_20], eax
.text:00000E86                 mov     [ebp+var_1C], eax
.text:00000E89                 mov     [ebp+var_18], eax
.text:00000E8C                 mov     [ebp+var_14], eax
.text:00000E8F                 mov     [ebp+var_10], eax
.text:00000E92                 mov     eax, dword ptr ds:___security_cookie
.text:00000E97                 xor     eax, ebp
.text:00000E99                 push    eax
.text:00000E9A                 lea     eax, [ebp+var_C]
.text:00000E9D                 mov     large fs:0, eax
.text:00000EA3                 mov     [ebp+var_10], ecx
.text:00000EA6                 push    18h             ; unsigned int
.text:00000EA8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000EAD                 add     esp, 4
.text:00000EB0                 mov     [ebp+var_28], eax
.text:00000EB3                 mov     [ebp+var_4], 0
.text:00000EBA                 cmp     [ebp+var_28], 0
.text:00000EBE                 jz      short loc_ECD
.text:00000EC0                 mov     ecx, [ebp+var_28]
.text:00000EC3                 call    ??0COffsetOutStream@@QAE@XZ ; COffsetOutStream::COffsetOutStream(void)
.text:00000EC8                 mov     [ebp+var_2C], eax
.text:00000ECB                 jmp     short loc_ED4
.text:00000ECD ; ---------------------------------------------------------------------------
.text:00000ECD
.text:00000ECD loc_ECD:                                ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+5Ej
.text:00000ECD                 mov     [ebp+var_2C], 0
.text:00000ED4
.text:00000ED4 loc_ED4:                                ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+6Bj
.text:00000ED4                 mov     eax, [ebp+var_2C]
.text:00000ED7                 mov     [ebp+var_24], eax
.text:00000EDA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EE1                 mov     ecx, [ebp+var_24]
.text:00000EE4                 mov     [ebp+var_14], ecx
.text:00000EE7                 mov     edx, [ebp+var_14]
.text:00000EEA                 push    edx
.text:00000EEB                 lea     ecx, [ebp+var_1C]
.text:00000EEE                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@PAUIOutStream@@@Z ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(IOutStream *)
.text:00000EF3                 mov     [ebp+var_4], 1
.text:00000EFA                 mov     eax, [ebp+var_10]
.text:00000EFD                 mov     ecx, [ebp+var_10]
.text:00000F00                 mov     edx, [eax+30h]
.text:00000F03                 add     edx, [ecx+38h]
.text:00000F06                 mov     eax, [eax+34h]
.text:00000F09                 adc     eax, [ecx+3Ch]
.text:00000F0C                 mov     ecx, [ebp+var_10]
.text:00000F0F                 mov     ecx, [ecx+40h]
.text:00000F12                 xor     esi, esi
.text:00000F14                 add     edx, ecx
.text:00000F16                 adc     eax, esi
.text:00000F18                 push    eax
.text:00000F19                 push    edx             ; unsigned __int64
.text:00000F1A                 mov     ecx, [ebp+var_10]
.text:00000F1D                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00000F22                 push    eax             ; struct IOutStream *
.text:00000F23                 mov     ecx, [ebp+var_14] ; this
.text:00000F26                 call    ?Init@COffsetOutStream@@QAEJPAUIOutStream@@_K@Z ; COffsetOutStream::Init(IOutStream *,unsigned __int64)
.text:00000F2B                 lea     ecx, [ebp+var_1C]
.text:00000F2E                 call    ?Detach@?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::Detach(void)
.text:00000F33                 mov     edx, [ebp+arg_0]
.text:00000F36                 mov     [edx], eax
.text:00000F38                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F3F                 lea     ecx, [ebp+var_1C]
.text:00000F42                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00000F47                 push    edx
.text:00000F48                 mov     ecx, ebp
.text:00000F4A                 push    eax
.text:00000F4B                 lea     edx, $LN10
.text:00000F51                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F56                 pop     eax
.text:00000F57                 pop     edx
.text:00000F58                 mov     ecx, [ebp+var_C]
.text:00000F5B                 mov     large fs:0, ecx
.text:00000F62                 pop     ecx
.text:00000F63                 pop     esi
.text:00000F64                 add     esp, 2Ch
.text:00000F67                 cmp     ebp, esp
.text:00000F69                 call    __RTC_CheckEsp
.text:00000F6E                 mov     esp, ebp
.text:00000F70                 pop     ebp
.text:00000F71                 retn    4
.text:00000F71 ?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z endp
.text:00000F71
.text:00000F71 ; ---------------------------------------------------------------------------
.text:00000F74 $LN10           dd 1                    ; DATA XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+EBo
.text:00000F78                 dd offset $LN9
.text:00000F7C $LN9            dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000F78o
.text:00000F84                 dd offset $LN7          ; "tempStream"
.text:00000F88 $LN7            db 'tempStream',0       ; DATA XREF: .text:00000F84o
.text:00000F93                 align 10h
.text:00000FA0
.text:00000FA0 ; =============== S U B R O U T I N E =======================================
.text:00000FA0
.text:00000FA0 ; Attributes: bp-based frame
.text:00000FA0
.text:00000FA0 ; void __thiscall NArchive::NZip::COutArchive::SeekToCurPos(NArchive::NZip::COutArchive *__hidden this)
.text:00000FA0                 public ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ
.text:00000FA0 ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ proc near
.text:00000FA0                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+1Fp
.text:00000FA0                                         ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+1Ep
.text:00000FA0
.text:00000FA0 var_4           = dword ptr -4
.text:00000FA0
.text:00000FA0                 push    ebp
.text:00000FA1                 mov     ebp, esp
.text:00000FA3                 push    ecx
.text:00000FA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FAB                 mov     [ebp+var_4], ecx
.text:00000FAE                 mov     eax, [ebp+var_4]
.text:00000FB1                 mov     ecx, [eax+3Ch]
.text:00000FB4                 push    ecx
.text:00000FB5                 mov     edx, [eax+38h]
.text:00000FB8                 push    edx             ; unsigned __int64
.text:00000FB9                 mov     ecx, [ebp+var_4] ; this
.text:00000FBC                 call    ?SeekToRelatPos@COutArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)
.text:00000FC1                 add     esp, 4
.text:00000FC4                 cmp     ebp, esp
.text:00000FC6                 call    __RTC_CheckEsp
.text:00000FCB                 mov     esp, ebp
.text:00000FCD                 pop     ebp
.text:00000FCE                 retn
.text:00000FCE ?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ endp
.text:00000FCE
.text:00000FCE ; ---------------------------------------------------------------------------
.text:00000FCF                 align 10h
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; void __thiscall NArchive::NZip::COutArchive::CreateStreamForCopying(NArchive::NZip::COutArchive *this, struct ISequentialOutStream **)
.text:00000FD0                 public ?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z
.text:00000FD0 ?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z proc near
.text:00000FD0
.text:00000FD0 var_1C          = dword ptr -1Ch
.text:00000FD0 var_18          = dword ptr -18h
.text:00000FD0 var_14          = dword ptr -14h
.text:00000FD0 var_10          = dword ptr -10h
.text:00000FD0 var_C           = dword ptr -0Ch
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0 arg_0           = dword ptr  8
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 push    0FFFFFFFFh
.text:00000FD5                 push    offset __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z
.text:00000FDA                 mov     eax, large fs:0
.text:00000FE0                 push    eax
.text:00000FE1                 sub     esp, 10h
.text:00000FE4                 mov     eax, 0CCCCCCCCh
.text:00000FE9                 mov     [ebp+var_1C], eax
.text:00000FEC                 mov     [ebp+var_18], eax
.text:00000FEF                 mov     [ebp+var_14], eax
.text:00000FF2                 mov     [ebp+var_10], eax
.text:00000FF5                 mov     eax, dword ptr ds:___security_cookie
.text:00000FFA                 xor     eax, ebp
.text:00000FFC                 push    eax
.text:00000FFD                 lea     eax, [ebp+var_C]
.text:00001000                 mov     large fs:0, eax
.text:00001006                 mov     [ebp+var_10], ecx
.text:00001009                 mov     ecx, [ebp+var_10]
.text:0000100C                 call    ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *(void)
.text:00001011                 push    eax
.text:00001012                 lea     ecx, [ebp+var_18]
.text:00001015                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:0000101A                 mov     [ebp+var_4], 0
.text:00001021                 lea     ecx, [ebp+var_18]
.text:00001024                 call    ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach(void)
.text:00001029                 mov     ecx, [ebp+arg_0]
.text:0000102C                 mov     [ecx], eax
.text:0000102E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001035                 lea     ecx, [ebp+var_18]
.text:00001038                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000103D                 push    edx
.text:0000103E                 mov     ecx, ebp
.text:00001040                 push    eax
.text:00001041                 lea     edx, $LN7_0
.text:00001047                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000104C                 pop     eax
.text:0000104D                 pop     edx
.text:0000104E                 mov     ecx, [ebp+var_C]
.text:00001051                 mov     large fs:0, ecx
.text:00001058                 pop     ecx
.text:00001059                 add     esp, 1Ch
.text:0000105C                 cmp     ebp, esp
.text:0000105E                 call    __RTC_CheckEsp
.text:00001063                 mov     esp, ebp
.text:00001065                 pop     ebp
.text:00001066                 retn    4
.text:00001066 ?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z endp
.text:00001066
.text:00001066 ; ---------------------------------------------------------------------------
.text:00001069                 align 4
.text:0000106C $LN7_0          dd 1                    ; DATA XREF: NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+71o
.text:00001070                 dd offset $LN6
.text:00001074 $LN6            dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001070o
.text:0000107C                 dd offset $LN4          ; "tempStream"
.text:00001080 $LN4            db 'tempStream',0       ; DATA XREF: .text:0000107Co
.text:0000108B                 align 4
.text:0000108B _text           ends
.text:0000108B
.rtc$TMZ:0000108C ; ===========================================================================
.rtc$TMZ:0000108C
.rtc$TMZ:0000108C ; Segment type: Pure data
.rtc$TMZ:0000108C ; Segment permissions: Read
.rtc$TMZ:0000108C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000108C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000108C                 ;org 108Ch
.rtc$TMZ:0000108C ; COMDAT (pick any)
.rtc$TMZ:0000108C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000108C _rtc$TMZ        ends
.rtc$TMZ:0000108C
.rtc$IMZ:00001090 ; ===========================================================================
.rtc$IMZ:00001090
.rtc$IMZ:00001090 ; Segment type: Pure data
.rtc$IMZ:00001090 ; Segment permissions: Read
.rtc$IMZ:00001090 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001090                 assume cs:_rtc$IMZ
.rtc$IMZ:00001090                 ;org 1090h
.rtc$IMZ:00001090 ; COMDAT (pick any)
.rtc$IMZ:00001090 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001090 _rtc$IMZ        ends
.rtc$IMZ:00001090
.text:00001094 ; ===========================================================================
.text:00001094
.text:00001094 ; Segment type: Pure code
.text:00001094 ; Segment permissions: Read/Execute
.text:00001094 _text           segment para public 'CODE' use32
.text:00001094                 assume cs:_text
.text:00001094                 ;org 1094h
.text:00001094 ; COMDAT (pick any)
.text:00001094                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001094
.text:00001094 ; =============== S U B R O U T I N E =======================================
.text:00001094
.text:00001094 ; Attributes: bp-based frame
.text:00001094
.text:00001094 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00001094                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00001094 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00001094                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+5Dp
.text:00001094
.text:00001094 var_4           = dword ptr -4
.text:00001094 arg_0           = dword ptr  8
.text:00001094
.text:00001094                 push    ebp
.text:00001095                 mov     ebp, esp
.text:00001097                 push    ecx
.text:00001098                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000109F                 mov     [ebp+var_4], ecx
.text:000010A2                 mov     eax, [ebp+var_4]
.text:000010A5                 mov     ecx, [ebp+arg_0]
.text:000010A8                 mov     [eax+14h], ecx
.text:000010AB                 mov     esp, ebp
.text:000010AD                 pop     ebp
.text:000010AE                 retn    4
.text:000010AE ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:000010AE
.text:000010AE ; ---------------------------------------------------------------------------
.text:000010B1                 align 4
.text:000010B1 _text           ends
.text:000010B1
.xdata$x:000010B4 ; ===========================================================================
.xdata$x:000010B4
.xdata$x:000010B4 ; Segment type: Pure data
.xdata$x:000010B4 ; Segment permissions: Read
.xdata$x:000010B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010B4                 assume cs:_xdata$x
.xdata$x:000010B4                 ;org 10B4h
.xdata$x:000010B4 ; COMDAT (pick any)
.xdata$x:000010B4                 public __TI1?AUCSystemException@@
.xdata$x:000010B4 __TI1?AUCSystemException@@ db    0      ; DATA XREF: NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)+6Fo
.xdata$x:000010B4                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+131o
.xdata$x:000010B5                 db    0
.xdata$x:000010B6                 db    0
.xdata$x:000010B7                 db    0
.xdata$x:000010B8                 db    0
.xdata$x:000010B9                 db    0
.xdata$x:000010BA                 db    0
.xdata$x:000010BB                 db    0
.xdata$x:000010BC                 db    0
.xdata$x:000010BD                 db    0
.xdata$x:000010BE                 db    0
.xdata$x:000010BF                 db    0
.xdata$x:000010C0                 dd offset __CTA1?AUCSystemException@@
.xdata$x:000010C0 _xdata$x        ends
.xdata$x:000010C0
.xdata$x:000010C4 ; ===========================================================================
.xdata$x:000010C4
.xdata$x:000010C4 ; Segment type: Pure data
.xdata$x:000010C4 ; Segment permissions: Read
.xdata$x:000010C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010C4                 assume cs:_xdata$x
.xdata$x:000010C4                 ;org 10C4h
.xdata$x:000010C4 ; COMDAT (pick any)
.xdata$x:000010C4                 public __CTA1?AUCSystemException@@
.xdata$x:000010C4 __CTA1?AUCSystemException@@ db    1     ; DATA XREF: .xdata$x:000010C0o
.xdata$x:000010C5                 db    0
.xdata$x:000010C6                 db    0
.xdata$x:000010C7                 db    0
.xdata$x:000010C8                 dd offset __CT??_R0?AUCSystemException@@@84
.xdata$x:000010C8 _xdata$x        ends
.xdata$x:000010C8
.xdata$x:000010CC ; ===========================================================================
.xdata$x:000010CC
.xdata$x:000010CC ; Segment type: Pure data
.xdata$x:000010CC ; Segment permissions: Read
.xdata$x:000010CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010CC                 assume cs:_xdata$x
.xdata$x:000010CC                 ;org 10CCh
.xdata$x:000010CC ; COMDAT (pick any)
.xdata$x:000010CC                 public __CT??_R0?AUCSystemException@@@84
.xdata$x:000010CC __CT??_R0?AUCSystemException@@@84 db    0 ; DATA XREF: .xdata$x:000010C8o
.xdata$x:000010CD                 db    0
.xdata$x:000010CE                 db    0
.xdata$x:000010CF                 db    0
.xdata$x:000010D0                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:000010D4                 align 8
.xdata$x:000010D8                 db 0FFh
.xdata$x:000010D9                 db 0FFh
.xdata$x:000010DA                 db 0FFh
.xdata$x:000010DB                 db 0FFh
.xdata$x:000010DC                 db    0
.xdata$x:000010DD                 db    0
.xdata$x:000010DE                 db    0
.xdata$x:000010DF                 db    0
.xdata$x:000010E0                 db    4
.xdata$x:000010E1                 db    0
.xdata$x:000010E2                 db    0
.xdata$x:000010E3                 db    0
.xdata$x:000010E4                 db    0
.xdata$x:000010E5                 db    0
.xdata$x:000010E6                 db    0
.xdata$x:000010E7                 db    0
.xdata$x:000010E7 _xdata$x        ends
.xdata$x:000010E7
.data:000010E8 ; ===========================================================================
.data:000010E8
.data:000010E8 ; Segment type: Pure data
.data:000010E8 ; Segment permissions: Read/Write
.data:000010E8 _data           segment dword public 'DATA' use32
.data:000010E8                 assume cs:_data
.data:000010E8                 ;org 10E8h
.data:000010E8 ; COMDAT (pick any)
.data:000010E8                 public ??_R0?AUCSystemException@@@8
.data:000010E8 ; struct CSystemException `RTTI Type Descriptor'
.data:000010E8 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:000010E8                                         ; DATA XREF: .xdata$x:000010D0o
.data:000010E8                                         ; const type_info::`vftable'
.data:000010EC                 align 10h
.data:000010F0 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:00001107                 align 4
.data:00001107 _data           ends
.data:00001107
.text:00001108 ; ===========================================================================
.text:00001108
.text:00001108 ; Segment type: Pure code
.text:00001108 ; Segment permissions: Read/Execute
.text:00001108 _text           segment para public 'CODE' use32
.text:00001108                 assume cs:_text
.text:00001108                 ;org 1108h
.text:00001108 ; COMDAT (pick any)
.text:00001108                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001108
.text:00001108 ; =============== S U B R O U T I N E =======================================
.text:00001108
.text:00001108 ; Attributes: bp-based frame
.text:00001108
.text:00001108 ; _DWORD __thiscall CSystemException::CSystemException(CSystemException *this, __int32)
.text:00001108                 public ??0CSystemException@@QAE@J@Z
.text:00001108 ??0CSystemException@@QAE@J@Z proc near  ; CODE XREF: NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)+65p
.text:00001108                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+127p
.text:00001108
.text:00001108 var_4           = dword ptr -4
.text:00001108 arg_0           = dword ptr  8
.text:00001108
.text:00001108                 push    ebp
.text:00001109                 mov     ebp, esp
.text:0000110B                 push    ecx
.text:0000110C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001113                 mov     [ebp+var_4], ecx
.text:00001116                 mov     eax, [ebp+var_4]
.text:00001119                 mov     ecx, [ebp+arg_0]
.text:0000111C                 mov     [eax], ecx
.text:0000111E                 mov     eax, [ebp+var_4]
.text:00001121                 mov     esp, ebp
.text:00001123                 pop     ebp
.text:00001124                 retn    4
.text:00001124 ??0CSystemException@@QAE@J@Z endp
.text:00001124
.text:00001124 ; ---------------------------------------------------------------------------
.text:00001127                 align 4
.text:00001127 _text           ends
.text:00001127
.text:00001128 ; ===========================================================================
.text:00001128
.text:00001128 ; Segment type: Pure code
.text:00001128 ; Segment permissions: Read/Execute
.text:00001128 _text           segment para public 'CODE' use32
.text:00001128                 assume cs:_text
.text:00001128                 ;org 1128h
.text:00001128 ; COMDAT (pick any)
.text:00001128                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001128
.text:00001128 ; =============== S U B R O U T I N E =======================================
.text:00001128
.text:00001128 ; Attributes: bp-based frame
.text:00001128
.text:00001128 ; void __thiscall COutBuffer::WriteBytes(COutBuffer *this, const void *, unsigned int)
.text:00001128                 public ?WriteBytes@COutBuffer@@QAEXPBXI@Z
.text:00001128 ?WriteBytes@COutBuffer@@QAEXPBXI@Z proc near
.text:00001128                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteBytes(void const *,uint)+1Cp
.text:00001128
.text:00001128 var_8           = dword ptr -8
.text:00001128 var_4           = dword ptr -4
.text:00001128 arg_0           = dword ptr  8
.text:00001128 arg_4           = dword ptr  0Ch
.text:00001128
.text:00001128                 push    ebp
.text:00001129                 mov     ebp, esp
.text:0000112B                 sub     esp, 8
.text:0000112E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001135                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000113C                 mov     [ebp+var_4], ecx
.text:0000113F                 mov     [ebp+var_8], 0
.text:00001146                 jmp     short loc_1151
.text:00001148 ; ---------------------------------------------------------------------------
.text:00001148
.text:00001148 loc_1148:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+43j
.text:00001148                 mov     eax, [ebp+var_8]
.text:0000114B                 add     eax, 1
.text:0000114E                 mov     [ebp+var_8], eax
.text:00001151
.text:00001151 loc_1151:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+1Ej
.text:00001151                 mov     ecx, [ebp+var_8]
.text:00001154                 cmp     ecx, [ebp+arg_4]
.text:00001157                 jnb     short loc_116D
.text:00001159                 mov     edx, [ebp+arg_0]
.text:0000115C                 add     edx, [ebp+var_8]
.text:0000115F                 movzx   eax, byte ptr [edx]
.text:00001162                 push    eax             ; unsigned __int8
.text:00001163                 mov     ecx, [ebp+var_4] ; this
.text:00001166                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:0000116B                 jmp     short loc_1148
.text:0000116D ; ---------------------------------------------------------------------------
.text:0000116D
.text:0000116D loc_116D:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+2Fj
.text:0000116D                 add     esp, 8
.text:00001170                 cmp     ebp, esp
.text:00001172                 call    __RTC_CheckEsp
.text:00001177                 mov     esp, ebp
.text:00001179                 pop     ebp
.text:0000117A                 retn    8
.text:0000117A ?WriteBytes@COutBuffer@@QAEXPBXI@Z endp
.text:0000117A
.text:0000117A ; ---------------------------------------------------------------------------
.text:0000117D                 align 10h
.text:0000117D _text           ends
.text:0000117D
.text:00001180 ; ===========================================================================
.text:00001180
.text:00001180 ; Segment type: Pure code
.text:00001180 ; Segment permissions: Read/Execute
.text:00001180 _text           segment para public 'CODE' use32
.text:00001180                 assume cs:_text
.text:00001180                 ;org 1180h
.text:00001180 ; COMDAT (pick any)
.text:00001180                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00001180                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00001180 ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00001180                                         ; CODE XREF: NArchive::NZip::COutArchive::Write8(uchar)+19p
.text:00001180                                         ; COutBuffer::WriteBytes(void const *,uint)+3Ep
.text:00001180
.text:00001180 var_4           = dword ptr -4
.text:00001180 arg_0           = byte ptr  8
.text:00001180
.text:00001180                 push    ebp
.text:00001181                 mov     ebp, esp
.text:00001183                 push    ecx
.text:00001184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000118B                 mov     [ebp+var_4], ecx
.text:0000118E                 mov     eax, [ebp+var_4]
.text:00001191                 mov     ecx, [eax]
.text:00001193                 mov     edx, [ebp+var_4]
.text:00001196                 mov     eax, [edx+4]
.text:00001199                 mov     dl, [ebp+arg_0]
.text:0000119C                 mov     [ecx+eax], dl
.text:0000119F                 mov     eax, [ebp+var_4]
.text:000011A2                 mov     ecx, [eax+4]
.text:000011A5                 add     ecx, 1
.text:000011A8                 mov     edx, [ebp+var_4]
.text:000011AB                 mov     [edx+4], ecx
.text:000011AE                 mov     eax, [ebp+var_4]
.text:000011B1                 mov     ecx, [ebp+var_4]
.text:000011B4                 mov     edx, [eax+4]
.text:000011B7                 cmp     edx, [ecx+8]
.text:000011BA                 jnz     short loc_11C4
.text:000011BC                 mov     ecx, [ebp+var_4] ; this
.text:000011BF                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:000011C4
.text:000011C4 loc_11C4:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:000011C4                 add     esp, 4
.text:000011C7                 cmp     ebp, esp
.text:000011C9                 call    __RTC_CheckEsp
.text:000011CE                 mov     esp, ebp
.text:000011D0                 pop     ebp
.text:000011D1                 retn    4
.text:000011D1 ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:000011D1
.text:000011D1 _text           ends
.text:000011D1
.text:000011D4 ; ===========================================================================
.text:000011D4
.text:000011D4 ; Segment type: Pure code
.text:000011D4 ; Segment permissions: Read/Execute
.text:000011D4 _text           segment para public 'CODE' use32
.text:000011D4                 assume cs:_text
.text:000011D4                 ;org 11D4h
.text:000011D4 ; COMDAT (pick any)
.text:000011D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011D4
.text:000011D4 ; =============== S U B R O U T I N E =======================================
.text:000011D4
.text:000011D4 ; Attributes: bp-based frame
.text:000011D4
.text:000011D4 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:000011D4                 public ?Len@AString@@QBEIXZ
.text:000011D4 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+E9p
.text:000011D4                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+155p ...
.text:000011D4
.text:000011D4 var_4           = dword ptr -4
.text:000011D4
.text:000011D4                 push    ebp
.text:000011D5                 mov     ebp, esp
.text:000011D7                 push    ecx
.text:000011D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011DF                 mov     [ebp+var_4], ecx
.text:000011E2                 mov     eax, [ebp+var_4]
.text:000011E5                 mov     eax, [eax+4]
.text:000011E8                 mov     esp, ebp
.text:000011EA                 pop     ebp
.text:000011EB                 retn
.text:000011EB ?Len@AString@@QBEIXZ endp
.text:000011EB
.text:000011EB _text           ends
.text:000011EB
.text:000011EC ; ===========================================================================
.text:000011EC
.text:000011EC ; Segment type: Pure code
.text:000011EC ; Segment permissions: Read/Execute
.text:000011EC _text           segment para public 'CODE' use32
.text:000011EC                 assume cs:_text
.text:000011EC                 ;org 11ECh
.text:000011EC ; COMDAT (pick any)
.text:000011EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011EC
.text:000011EC ; =============== S U B R O U T I N E =======================================
.text:000011EC
.text:000011EC ; Attributes: bp-based frame
.text:000011EC
.text:000011EC ; public: __thiscall AString::operator char const *(void)const
.text:000011EC                 public ??BAString@@QBEPBDXZ
.text:000011EC ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+161p
.text:000011EC                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+263p
.text:000011EC
.text:000011EC var_4           = dword ptr -4
.text:000011EC
.text:000011EC                 push    ebp
.text:000011ED                 mov     ebp, esp
.text:000011EF                 push    ecx
.text:000011F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011F7                 mov     [ebp+var_4], ecx
.text:000011FA                 mov     eax, [ebp+var_4]
.text:000011FD                 mov     eax, [eax]
.text:000011FF                 mov     esp, ebp
.text:00001201                 pop     ebp
.text:00001202                 retn
.text:00001202 ??BAString@@QBEPBDXZ endp
.text:00001202
.text:00001202 ; ---------------------------------------------------------------------------
.text:00001203                 align 4
.text:00001203 _text           ends
.text:00001203
.text:00001204 ; ===========================================================================
.text:00001204
.text:00001204 ; Segment type: Pure code
.text:00001204 ; Segment permissions: Read/Execute
.text:00001204 _text           segment para public 'CODE' use32
.text:00001204                 assume cs:_text
.text:00001204                 ;org 1204h
.text:00001204 ; COMDAT (pick any)
.text:00001204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001204
.text:00001204 ; =============== S U B R O U T I N E =======================================
.text:00001204
.text:00001204 ; Attributes: bp-based frame
.text:00001204
.text:00001204 ; unsigned int __thiscall NArchive::NZip::CExtraBlock::GetSize(NArchive::NZip::CExtraBlock *__hidden this)
.text:00001204                 public ?GetSize@CExtraBlock@NZip@NArchive@@QBEIXZ
.text:00001204 ?GetSize@CExtraBlock@NZip@NArchive@@QBEIXZ proc near
.text:00001204                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+108p
.text:00001204                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+1D6p
.text:00001204
.text:00001204 var_C           = dword ptr -0Ch
.text:00001204 var_8           = dword ptr -8
.text:00001204 var_4           = dword ptr -4
.text:00001204
.text:00001204                 push    ebp
.text:00001205                 mov     ebp, esp
.text:00001207                 sub     esp, 0Ch
.text:0000120A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001211                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001218                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000121F                 mov     [ebp+var_4], ecx
.text:00001222                 mov     [ebp+var_8], 0
.text:00001229                 mov     [ebp+var_C], 0
.text:00001230                 jmp     short loc_123B
.text:00001232 ; ---------------------------------------------------------------------------
.text:00001232
.text:00001232 loc_1232:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetSize(void)+64j
.text:00001232                 mov     eax, [ebp+var_C]
.text:00001235                 add     eax, 1
.text:00001238                 mov     [ebp+var_C], eax
.text:0000123B
.text:0000123B loc_123B:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetSize(void)+2Cj
.text:0000123B                 mov     ecx, [ebp+var_4]
.text:0000123E                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00001243                 cmp     [ebp+var_C], eax
.text:00001246                 jnb     short loc_126A
.text:00001248                 mov     ecx, [ebp+var_C]
.text:0000124B                 push    ecx
.text:0000124C                 mov     ecx, [ebp+var_4]
.text:0000124F                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00001254                 add     eax, 4
.text:00001257                 mov     ecx, eax
.text:00001259                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000125E                 mov     edx, [ebp+var_8]
.text:00001261                 lea     eax, [edx+eax+4]
.text:00001265                 mov     [ebp+var_8], eax
.text:00001268                 jmp     short loc_1232
.text:0000126A ; ---------------------------------------------------------------------------
.text:0000126A
.text:0000126A loc_126A:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetSize(void)+42j
.text:0000126A                 mov     eax, [ebp+var_8]
.text:0000126D                 add     esp, 0Ch
.text:00001270                 cmp     ebp, esp
.text:00001272                 call    __RTC_CheckEsp
.text:00001277                 mov     esp, ebp
.text:00001279                 pop     ebp
.text:0000127A                 retn
.text:0000127A ?GetSize@CExtraBlock@NZip@NArchive@@QBEIXZ endp
.text:0000127A
.text:0000127A ; ---------------------------------------------------------------------------
.text:0000127B                 align 4
.text:0000127B _text           ends
.text:0000127B
.text:0000127C ; ===========================================================================
.text:0000127C
.text:0000127C ; Segment type: Pure code
.text:0000127C ; Segment permissions: Read/Execute
.text:0000127C _text           segment para public 'CODE' use32
.text:0000127C                 assume cs:_text
.text:0000127C                 ;org 127Ch
.text:0000127C ; COMDAT (pick any)
.text:0000127C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000127C
.text:0000127C ; =============== S U B R O U T I N E =======================================
.text:0000127C
.text:0000127C ; Attributes: bp-based frame
.text:0000127C
.text:0000127C ; void __thiscall NArchive::NZip::COutArchive::WriteNtfsTime(NArchive::NZip::COutArchive *this, const struct _FILETIME *)
.text:0000127C                 public ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z
.text:0000127C ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z proc near
.text:0000127C                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+328p
.text:0000127C                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+337p ...
.text:0000127C
.text:0000127C var_4           = dword ptr -4
.text:0000127C arg_0           = dword ptr  8
.text:0000127C
.text:0000127C                 push    ebp
.text:0000127D                 mov     ebp, esp
.text:0000127F                 push    ecx
.text:00001280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001287                 mov     [ebp+var_4], ecx
.text:0000128A                 mov     eax, [ebp+arg_0]
.text:0000128D                 mov     ecx, [eax]
.text:0000128F                 push    ecx             ; unsigned int
.text:00001290                 mov     ecx, [ebp+var_4] ; this
.text:00001293                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:00001298                 mov     edx, [ebp+arg_0]
.text:0000129B                 mov     eax, [edx+4]
.text:0000129E                 push    eax             ; unsigned int
.text:0000129F                 mov     ecx, [ebp+var_4] ; this
.text:000012A2                 call    ?Write32@COutArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::COutArchive::Write32(uint)
.text:000012A7                 add     esp, 4
.text:000012AA                 cmp     ebp, esp
.text:000012AC                 call    __RTC_CheckEsp
.text:000012B1                 mov     esp, ebp
.text:000012B3                 pop     ebp
.text:000012B4                 retn    4
.text:000012B4 ?WriteNtfsTime@COutArchive@NZip@NArchive@@AAEXABU_FILETIME@@@Z endp
.text:000012B4
.text:000012B4 ; ---------------------------------------------------------------------------
.text:000012B7                 align 4
.text:000012B7 _text           ends
.text:000012B7
.text:000012B8 ; ===========================================================================
.text:000012B8
.text:000012B8 ; Segment type: Pure code
.text:000012B8 ; Segment permissions: Read/Execute
.text:000012B8 _text           segment para public 'CODE' use32
.text:000012B8                 assume cs:_text
.text:000012B8                 ;org 12B8h
.text:000012B8 ; COMDAT (pick any)
.text:000012B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000012B8
.text:000012B8 ; =============== S U B R O U T I N E =======================================
.text:000012B8
.text:000012B8 ; Attributes: bp-based frame
.text:000012B8
.text:000012B8 ; unsigned __int64 __thiscall NArchive::NZip::COutArchive::GetCurPos(NArchive::NZip::COutArchive *__hidden this)
.text:000012B8                 public ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ
.text:000012B8 ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ proc near
.text:000012B8                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+26p
.text:000012B8                                         ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+6Ap
.text:000012B8
.text:000012B8 var_4           = dword ptr -4
.text:000012B8
.text:000012B8                 push    ebp
.text:000012B9                 mov     ebp, esp
.text:000012BB                 push    ecx
.text:000012BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012C3                 mov     [ebp+var_4], ecx
.text:000012C6                 mov     ecx, [ebp+var_4]
.text:000012C9                 mov     eax, [ecx+38h]
.text:000012CC                 mov     edx, [ecx+3Ch]
.text:000012CF                 mov     esp, ebp
.text:000012D1                 pop     ebp
.text:000012D2                 retn
.text:000012D2 ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ endp
.text:000012D2
.text:000012D2 ; ---------------------------------------------------------------------------
.text:000012D3                 align 4
.text:000012D3 _text           ends
.text:000012D3
.text$x:000012D4 ; ===========================================================================
.text$x:000012D4
.text$x:000012D4 ; Segment type: Pure code
.text$x:000012D4 ; Segment permissions: Read/Execute
.text$x:000012D4 _text$x         segment para public 'CODE' use32
.text$x:000012D4                 assume cs:_text$x
.text$x:000012D4                 ;org 12D4h
.text$x:000012D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000012D4
.text$x:000012D4 ; =============== S U B R O U T I N E =======================================
.text$x:000012D4
.text$x:000012D4
.text$x:000012D4 __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$0 proc near
.text$x:000012D4                                         ; DATA XREF: .xdata$x:0000132Co
.text$x:000012D4                 mov     eax, [ebp-28h]
.text$x:000012D7                 push    eax             ; void *
.text$x:000012D8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000012DD                 pop     ecx
.text$x:000012DE                 retn
.text$x:000012DE __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$0 endp
.text$x:000012DE
.text$x:000012DF
.text$x:000012DF ; =============== S U B R O U T I N E =======================================
.text$x:000012DF
.text$x:000012DF
.text$x:000012DF __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$1 proc near
.text$x:000012DF                                         ; DATA XREF: .xdata$x:00001334o
.text$x:000012DF                 lea     ecx, [ebp-1Ch]
.text$x:000012E2                 jmp     ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text$x:000012E2 __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$1 endp
.text$x:000012E2
.text$x:000012E7
.text$x:000012E7 ; =============== S U B R O U T I N E =======================================
.text$x:000012E7
.text$x:000012E7
.text$x:000012E7 __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z proc near
.text$x:000012E7                                         ; DATA XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+5o
.text$x:000012E7
.text$x:000012E7 arg_4           = dword ptr  8
.text$x:000012E7
.text$x:000012E7                 mov     edx, [esp+arg_4]
.text$x:000012EB                 lea     eax, [edx+0Ch]
.text$x:000012EE                 mov     ecx, [edx-28h]
.text$x:000012F1                 xor     ecx, eax
.text$x:000012F3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000012F8                 mov     eax, offset __ehfuncinfo$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z
.text$x:000012FD                 jmp     ___CxxFrameHandler3
.text$x:000012FD __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z endp
.text$x:000012FD
.text$x:00001302
.text$x:00001302 ; =============== S U B R O U T I N E =======================================
.text$x:00001302
.text$x:00001302
.text$x:00001302 __unwindfunclet$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z$0 proc near
.text$x:00001302                                         ; DATA XREF: .xdata$x:00001360o
.text$x:00001302                 lea     ecx, [ebp-18h]
.text$x:00001305                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001305 __unwindfunclet$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z$0 endp
.text$x:00001305
.text$x:0000130A
.text$x:0000130A ; =============== S U B R O U T I N E =======================================
.text$x:0000130A
.text$x:0000130A
.text$x:0000130A __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z proc near
.text$x:0000130A                                         ; DATA XREF: NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+5o
.text$x:0000130A
.text$x:0000130A arg_4           = dword ptr  8
.text$x:0000130A
.text$x:0000130A                 mov     edx, [esp+arg_4]
.text$x:0000130E                 lea     eax, [edx+0Ch]
.text$x:00001311                 mov     ecx, [edx-14h]
.text$x:00001314                 xor     ecx, eax
.text$x:00001316                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000131B                 mov     eax, offset __ehfuncinfo$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z
.text$x:00001320                 jmp     ___CxxFrameHandler3
.text$x:00001320 __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z endp
.text$x:00001320
.text$x:00001320 ; ---------------------------------------------------------------------------
.text$x:00001325                 align 4
.text$x:00001325 _text$x         ends
.text$x:00001325
.xdata$x:00001328 ; ===========================================================================
.xdata$x:00001328
.xdata$x:00001328 ; Segment type: Pure data
.xdata$x:00001328 ; Segment permissions: Read
.xdata$x:00001328 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001328                 assume cs:_xdata$x
.xdata$x:00001328                 ;org 1328h
.xdata$x:00001328 __unwindtable$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z db 0FFh
.xdata$x:00001328                                         ; DATA XREF: .xdata$x:00001340o
.xdata$x:00001329                 db 0FFh
.xdata$x:0000132A                 db 0FFh
.xdata$x:0000132B                 db 0FFh
.xdata$x:0000132C                 dd offset __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$0
.xdata$x:00001330                 db 0FFh
.xdata$x:00001331                 db 0FFh
.xdata$x:00001332                 db 0FFh
.xdata$x:00001333                 db 0FFh
.xdata$x:00001334                 dd offset __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$1
.xdata$x:00001338 __ehfuncinfo$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z db  22h ; "
.xdata$x:00001338                                         ; DATA XREF: __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z+11o
.xdata$x:00001339                 db    5
.xdata$x:0000133A                 db  93h ; ô
.xdata$x:0000133B                 db  19h
.xdata$x:0000133C                 db    2
.xdata$x:0000133D                 db    0
.xdata$x:0000133E                 db    0
.xdata$x:0000133F                 db    0
.xdata$x:00001340                 dd offset __unwindtable$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z
.xdata$x:00001344                 db    0
.xdata$x:00001345                 db    0
.xdata$x:00001346                 db    0
.xdata$x:00001347                 db    0
.xdata$x:00001348                 db    0
.xdata$x:00001349                 db    0
.xdata$x:0000134A                 db    0
.xdata$x:0000134B                 db    0
.xdata$x:0000134C                 db    0
.xdata$x:0000134D                 db    0
.xdata$x:0000134E                 db    0
.xdata$x:0000134F                 db    0
.xdata$x:00001350                 db    0
.xdata$x:00001351                 db    0
.xdata$x:00001352                 db    0
.xdata$x:00001353                 db    0
.xdata$x:00001354                 db    0
.xdata$x:00001355                 db    0
.xdata$x:00001356                 db    0
.xdata$x:00001357                 db    0
.xdata$x:00001358                 db    1
.xdata$x:00001359                 db    0
.xdata$x:0000135A                 db    0
.xdata$x:0000135B                 db    0
.xdata$x:0000135C __unwindtable$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z db 0FFh
.xdata$x:0000135C                                         ; DATA XREF: .xdata$x:0000136Co
.xdata$x:0000135D                 db 0FFh
.xdata$x:0000135E                 db 0FFh
.xdata$x:0000135F                 db 0FFh
.xdata$x:00001360                 dd offset __unwindfunclet$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z$0
.xdata$x:00001364 __ehfuncinfo$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z db  22h ; "
.xdata$x:00001364                                         ; DATA XREF: __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z+11o
.xdata$x:00001365                 db    5
.xdata$x:00001366                 db  93h ; ô
.xdata$x:00001367                 db  19h
.xdata$x:00001368                 db    1
.xdata$x:00001369                 db    0
.xdata$x:0000136A                 db    0
.xdata$x:0000136B                 db    0
.xdata$x:0000136C                 dd offset __unwindtable$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z
.xdata$x:00001370                 db    0
.xdata$x:00001371                 db    0
.xdata$x:00001372                 db    0
.xdata$x:00001373                 db    0
.xdata$x:00001374                 db    0
.xdata$x:00001375                 db    0
.xdata$x:00001376                 db    0
.xdata$x:00001377                 db    0
.xdata$x:00001378                 db    0
.xdata$x:00001379                 db    0
.xdata$x:0000137A                 db    0
.xdata$x:0000137B                 db    0
.xdata$x:0000137C                 db    0
.xdata$x:0000137D                 db    0
.xdata$x:0000137E                 db    0
.xdata$x:0000137F                 db    0
.xdata$x:00001380                 db    0
.xdata$x:00001381                 db    0
.xdata$x:00001382                 db    0
.xdata$x:00001383                 db    0
.xdata$x:00001384                 db    1
.xdata$x:00001385                 db    0
.xdata$x:00001386                 db    0
.xdata$x:00001387                 db    0
.xdata$x:00001387 _xdata$x        ends
.xdata$x:00001387
.text:00001388 ; ===========================================================================
.text:00001388
.text:00001388 ; Segment type: Pure code
.text:00001388 ; Segment permissions: Read/Execute
.text:00001388 _text           segment para public 'CODE' use32
.text:00001388                 assume cs:_text
.text:00001388                 ;org 1388h
.text:00001388 ; COMDAT (pick any)
.text:00001388                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001388
.text:00001388 ; =============== S U B R O U T I N E =======================================
.text:00001388
.text:00001388 ; Attributes: bp-based frame
.text:00001388
.text:00001388 ; public: __thiscall COffsetOutStream::COffsetOutStream(void)
.text:00001388                 public ??0COffsetOutStream@@QAE@XZ
.text:00001388 ??0COffsetOutStream@@QAE@XZ proc near   ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+63p
.text:00001388
.text:00001388 var_4           = dword ptr -4
.text:00001388
.text:00001388                 push    ebp
.text:00001389                 mov     ebp, esp
.text:0000138B                 push    ecx
.text:0000138C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001393                 mov     [ebp+var_4], ecx
.text:00001396                 mov     ecx, [ebp+var_4] ; this
.text:00001399                 call    ??0IOutStream@@QAE@XZ ; IOutStream::IOutStream(void)
.text:0000139E                 mov     ecx, [ebp+var_4]
.text:000013A1                 add     ecx, 4          ; this
.text:000013A4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000013A9                 mov     eax, [ebp+var_4]
.text:000013AC                 mov     dword ptr [eax], offset ??_7COffsetOutStream@@6B@ ; const COffsetOutStream::`vftable'
.text:000013B2                 mov     ecx, [ebp+var_4]
.text:000013B5                 add     ecx, 10h
.text:000013B8                 call    ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(void)
.text:000013BD                 mov     eax, [ebp+var_4]
.text:000013C0                 add     esp, 4
.text:000013C3                 cmp     ebp, esp
.text:000013C5                 call    __RTC_CheckEsp
.text:000013CA                 mov     esp, ebp
.text:000013CC                 pop     ebp
.text:000013CD                 retn
.text:000013CD ??0COffsetOutStream@@QAE@XZ endp
.text:000013CD
.text:000013CD ; ---------------------------------------------------------------------------
.text:000013CE                 align 10h
.text:000013CE _text           ends
.text:000013CE
.rdata:000013D0 ; ===========================================================================
.rdata:000013D0
.rdata:000013D0 ; Segment type: Pure data
.rdata:000013D0 ; Segment permissions: Read
.rdata:000013D0 _rdata          segment dword public 'DATA' use32
.rdata:000013D0                 assume cs:_rdata
.rdata:000013D0                 ;org 13D0h
.rdata:000013D0 ; COMDAT (pick largest)
.rdata:000013D0                 dd offset ??_R4COffsetOutStream@@6B@ ; const COffsetOutStream::`RTTI Complete Object Locator'
.rdata:000013D4                 public ??_7COffsetOutStream@@6B@
.rdata:000013D4 ; const COffsetOutStream::`vftable'
.rdata:000013D4 ??_7COffsetOutStream@@6B@ dd offset ?QueryInterface@COffsetOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000013D4                                         ; DATA XREF: COffsetOutStream::COffsetOutStream(void)+24o
.rdata:000013D4                                         ; COffsetOutStream::QueryInterface(_GUID const &,void * *)
.rdata:000013D8                 dd offset ?AddRef@COffsetOutStream@@UAGKXZ ; COffsetOutStream::AddRef(void)
.rdata:000013DC                 dd offset ?Release@COffsetOutStream@@UAGKXZ ; COffsetOutStream::Release(void)
.rdata:000013E0                 dd offset ?Write@COffsetOutStream@@UAGJPBXIPAI@Z ; COffsetOutStream::Write(void const *,uint,uint *)
.rdata:000013E4                 dd offset ?Seek@COffsetOutStream@@UAGJ_JIPA_K@Z ; COffsetOutStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:000013E8                 dd offset ?SetSize@COffsetOutStream@@UAGJ_K@Z ; COffsetOutStream::SetSize(unsigned __int64)
.rdata:000013E8 _rdata          ends
.rdata:000013E8
.rdata$r:000013EC ; ===========================================================================
.rdata$r:000013EC
.rdata$r:000013EC ; Segment type: Pure data
.rdata$r:000013EC ; Segment permissions: Read
.rdata$r:000013EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013EC                 assume cs:_rdata$r
.rdata$r:000013EC                 ;org 13ECh
.rdata$r:000013EC ; COMDAT (pick any)
.rdata$r:000013EC                 public ??_R4COffsetOutStream@@6B@
.rdata$r:000013EC ; const COffsetOutStream::`RTTI Complete Object Locator'
.rdata$r:000013EC ??_R4COffsetOutStream@@6B@ db    0      ; DATA XREF: .rdata:000013D0o
.rdata$r:000013ED                 db    0
.rdata$r:000013EE                 db    0
.rdata$r:000013EF                 db    0
.rdata$r:000013F0                 db    0
.rdata$r:000013F1                 db    0
.rdata$r:000013F2                 db    0
.rdata$r:000013F3                 db    0
.rdata$r:000013F4                 db    0
.rdata$r:000013F5                 db    0
.rdata$r:000013F6                 db    0
.rdata$r:000013F7                 db    0
.rdata$r:000013F8                 dd offset ??_R0?AVCOffsetOutStream@@@8 ; COffsetOutStream `RTTI Type Descriptor'
.rdata$r:000013FC                 dd offset ??_R3COffsetOutStream@@8 ; COffsetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013FC _rdata$r        ends
.rdata$r:000013FC
.data:00001400 ; ===========================================================================
.data:00001400
.data:00001400 ; Segment type: Pure data
.data:00001400 ; Segment permissions: Read/Write
.data:00001400 _data           segment dword public 'DATA' use32
.data:00001400                 assume cs:_data
.data:00001400                 ;org 1400h
.data:00001400 ; COMDAT (pick any)
.data:00001400                 public ??_R0?AVCOffsetOutStream@@@8
.data:00001400 ; class COffsetOutStream `RTTI Type Descriptor'
.data:00001400 ??_R0?AVCOffsetOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001400                                         ; DATA XREF: .rdata$r:000013F8o
.data:00001400                                         ; .rdata$r:COffsetOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001400                                         ; const type_info::`vftable'
.data:00001404                 align 8
.data:00001408 a_?avcoffsetout db '.?AVCOffsetOutStream@@',0
.data:0000141F                 align 10h
.data:0000141F _data           ends
.data:0000141F
.rdata$r:00001420 ; ===========================================================================
.rdata$r:00001420
.rdata$r:00001420 ; Segment type: Pure data
.rdata$r:00001420 ; Segment permissions: Read
.rdata$r:00001420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001420                 assume cs:_rdata$r
.rdata$r:00001420                 ;org 1420h
.rdata$r:00001420 ; COMDAT (pick any)
.rdata$r:00001420                 public ??_R3COffsetOutStream@@8
.rdata$r:00001420 ; COffsetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001420 ??_R3COffsetOutStream@@8 db    0        ; DATA XREF: .rdata$r:000013FCo
.rdata$r:00001420                                         ; .rdata$r:00001460o
.rdata$r:00001421                 db    0
.rdata$r:00001422                 db    0
.rdata$r:00001423                 db    0
.rdata$r:00001424                 db    1
.rdata$r:00001425                 db    0
.rdata$r:00001426                 db    0
.rdata$r:00001427                 db    0
.rdata$r:00001428                 db    5
.rdata$r:00001429                 db    0
.rdata$r:0000142A                 db    0
.rdata$r:0000142B                 db    0
.rdata$r:0000142C                 dd offset ??_R2COffsetOutStream@@8 ; COffsetOutStream::`RTTI Base Class Array'
.rdata$r:0000142C _rdata$r        ends
.rdata$r:0000142C
.rdata$r:00001430 ; ===========================================================================
.rdata$r:00001430
.rdata$r:00001430 ; Segment type: Pure data
.rdata$r:00001430 ; Segment permissions: Read
.rdata$r:00001430 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001430                 assume cs:_rdata$r
.rdata$r:00001430                 ;org 1430h
.rdata$r:00001430 ; COMDAT (pick any)
.rdata$r:00001430                 public ??_R2COffsetOutStream@@8
.rdata$r:00001430 ; COffsetOutStream::`RTTI Base Class Array'
.rdata$r:00001430 ??_R2COffsetOutStream@@8 dd offset ??_R1A@?0A@EA@COffsetOutStream@@8
.rdata$r:00001430                                         ; DATA XREF: .rdata$r:0000142Co
.rdata$r:00001430                                         ; COffsetOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001434                 dd offset ??_R1A@?0A@EA@IOutStream@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001438                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000143C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001440                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001444                 db    0
.rdata$r:00001445                 align 4
.rdata$r:00001445 _rdata$r        ends
.rdata$r:00001445
.rdata$r:00001448 ; ===========================================================================
.rdata$r:00001448
.rdata$r:00001448 ; Segment type: Pure data
.rdata$r:00001448 ; Segment permissions: Read
.rdata$r:00001448 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001448                 assume cs:_rdata$r
.rdata$r:00001448                 ;org 1448h
.rdata$r:00001448 ; COMDAT (pick any)
.rdata$r:00001448                 public ??_R1A@?0A@EA@COffsetOutStream@@8
.rdata$r:00001448 ; COffsetOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001448 ??_R1A@?0A@EA@COffsetOutStream@@8 dd offset ??_R0?AVCOffsetOutStream@@@8
.rdata$r:00001448                                         ; DATA XREF: .rdata$r:COffsetOutStream::`RTTI Base Class Array'o
.rdata$r:00001448                                         ; COffsetOutStream `RTTI Type Descriptor'
.rdata$r:0000144C                 db    4
.rdata$r:0000144D                 db    0
.rdata$r:0000144E                 db    0
.rdata$r:0000144F                 db    0
.rdata$r:00001450                 db    0
.rdata$r:00001451                 db    0
.rdata$r:00001452                 db    0
.rdata$r:00001453                 db    0
.rdata$r:00001454                 db 0FFh
.rdata$r:00001455                 db 0FFh
.rdata$r:00001456                 db 0FFh
.rdata$r:00001457                 db 0FFh
.rdata$r:00001458                 db    0
.rdata$r:00001459                 db    0
.rdata$r:0000145A                 db    0
.rdata$r:0000145B                 db    0
.rdata$r:0000145C                 db  40h ; @
.rdata$r:0000145D                 db    0
.rdata$r:0000145E                 db    0
.rdata$r:0000145F                 db    0
.rdata$r:00001460                 dd offset ??_R3COffsetOutStream@@8 ; COffsetOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001460 _rdata$r        ends
.rdata$r:00001460
.rdata$r:00001464 ; ===========================================================================
.rdata$r:00001464
.rdata$r:00001464 ; Segment type: Pure data
.rdata$r:00001464 ; Segment permissions: Read
.rdata$r:00001464 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001464                 assume cs:_rdata$r
.rdata$r:00001464                 ;org 1464h
.rdata$r:00001464 ; COMDAT (pick any)
.rdata$r:00001464                 public ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:00001464 ; IOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001464 ??_R1A@?0A@EA@IOutStream@@8 dd offset ??_R0?AUIOutStream@@@8
.rdata$r:00001464                                         ; DATA XREF: .rdata$r:00001434o
.rdata$r:00001464                                         ; .rdata$r:IOutStream::`RTTI Base Class Array'o
.rdata$r:00001464                                         ; IOutStream `RTTI Type Descriptor'
.rdata$r:00001468                 db    2
.rdata$r:00001469                 db    0
.rdata$r:0000146A                 db    0
.rdata$r:0000146B                 db    0
.rdata$r:0000146C                 db    0
.rdata$r:0000146D                 db    0
.rdata$r:0000146E                 db    0
.rdata$r:0000146F                 db    0
.rdata$r:00001470                 db 0FFh
.rdata$r:00001471                 db 0FFh
.rdata$r:00001472                 db 0FFh
.rdata$r:00001473                 db 0FFh
.rdata$r:00001474                 db    0
.rdata$r:00001475                 db    0
.rdata$r:00001476                 db    0
.rdata$r:00001477                 db    0
.rdata$r:00001478                 db  40h ; @
.rdata$r:00001479                 db    0
.rdata$r:0000147A                 db    0
.rdata$r:0000147B                 db    0
.rdata$r:0000147C                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000147C _rdata$r        ends
.rdata$r:0000147C
.data:00001480 ; ===========================================================================
.data:00001480
.data:00001480 ; Segment type: Pure data
.data:00001480 ; Segment permissions: Read/Write
.data:00001480 _data           segment dword public 'DATA' use32
.data:00001480                 assume cs:_data
.data:00001480                 ;org 1480h
.data:00001480 ; COMDAT (pick any)
.data:00001480                 public ??_R0?AUIOutStream@@@8
.data:00001480 ; struct IOutStream `RTTI Type Descriptor'
.data:00001480 ??_R0?AUIOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001480                                         ; DATA XREF: .rdata$r:IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001480                                         ; .rdata$r:000017E0o
.data:00001480                                         ; const type_info::`vftable'
.data:00001484                 align 8
.data:00001488 a_?auioutstream db '.?AUIOutStream@@',0
.data:00001499                 align 4
.data:00001499 _data           ends
.data:00001499
.rdata$r:0000149C ; ===========================================================================
.rdata$r:0000149C
.rdata$r:0000149C ; Segment type: Pure data
.rdata$r:0000149C ; Segment permissions: Read
.rdata$r:0000149C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000149C                 assume cs:_rdata$r
.rdata$r:0000149C                 ;org 149Ch
.rdata$r:0000149C ; COMDAT (pick any)
.rdata$r:0000149C                 public ??_R3IOutStream@@8
.rdata$r:0000149C ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000149C ??_R3IOutStream@@8 db    0              ; DATA XREF: .rdata$r:0000147Co
.rdata$r:0000149C                                         ; .rdata$r:000017E4o
.rdata$r:0000149D                 db    0
.rdata$r:0000149E                 db    0
.rdata$r:0000149F                 db    0
.rdata$r:000014A0                 db    0
.rdata$r:000014A1                 db    0
.rdata$r:000014A2                 db    0
.rdata$r:000014A3                 db    0
.rdata$r:000014A4                 db    3
.rdata$r:000014A5                 db    0
.rdata$r:000014A6                 db    0
.rdata$r:000014A7                 db    0
.rdata$r:000014A8                 dd offset ??_R2IOutStream@@8 ; IOutStream::`RTTI Base Class Array'
.rdata$r:000014A8 _rdata$r        ends
.rdata$r:000014A8
.rdata$r:000014AC ; ===========================================================================
.rdata$r:000014AC
.rdata$r:000014AC ; Segment type: Pure data
.rdata$r:000014AC ; Segment permissions: Read
.rdata$r:000014AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014AC                 assume cs:_rdata$r
.rdata$r:000014AC                 ;org 14ACh
.rdata$r:000014AC ; COMDAT (pick any)
.rdata$r:000014AC                 public ??_R2IOutStream@@8
.rdata$r:000014AC ; IOutStream::`RTTI Base Class Array'
.rdata$r:000014AC ??_R2IOutStream@@8 dd offset ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:000014AC                                         ; DATA XREF: .rdata$r:000014A8o
.rdata$r:000014AC                                         ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000014B0                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000014B4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000014B8                 db    0
.rdata$r:000014B9                 align 4
.rdata$r:000014B9 _rdata$r        ends
.rdata$r:000014B9
.rdata$r:000014BC ; ===========================================================================
.rdata$r:000014BC
.rdata$r:000014BC ; Segment type: Pure data
.rdata$r:000014BC ; Segment permissions: Read
.rdata$r:000014BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014BC                 assume cs:_rdata$r
.rdata$r:000014BC                 ;org 14BCh
.rdata$r:000014BC ; COMDAT (pick any)
.rdata$r:000014BC                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000014BC ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000014BC ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000014BC                                         ; DATA XREF: .rdata$r:00001438o
.rdata$r:000014BC                                         ; .rdata$r:000014B0o ...
.rdata$r:000014BC                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000014C0                 db    1
.rdata$r:000014C1                 db    0
.rdata$r:000014C2                 db    0
.rdata$r:000014C3                 db    0
.rdata$r:000014C4                 db    0
.rdata$r:000014C5                 db    0
.rdata$r:000014C6                 db    0
.rdata$r:000014C7                 db    0
.rdata$r:000014C8                 db 0FFh
.rdata$r:000014C9                 db 0FFh
.rdata$r:000014CA                 db 0FFh
.rdata$r:000014CB                 db 0FFh
.rdata$r:000014CC                 db    0
.rdata$r:000014CD                 db    0
.rdata$r:000014CE                 db    0
.rdata$r:000014CF                 db    0
.rdata$r:000014D0                 db  40h ; @
.rdata$r:000014D1                 db    0
.rdata$r:000014D2                 db    0
.rdata$r:000014D3                 db    0
.rdata$r:000014D4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000014D4 _rdata$r        ends
.rdata$r:000014D4
.data:000014D8 ; ===========================================================================
.data:000014D8
.data:000014D8 ; Segment type: Pure data
.data:000014D8 ; Segment permissions: Read/Write
.data:000014D8 _data           segment dword public 'DATA' use32
.data:000014D8                 assume cs:_data
.data:000014D8                 ;org 14D8h
.data:000014D8 ; COMDAT (pick any)
.data:000014D8                 public ??_R0?AUISequentialOutStream@@@8
.data:000014D8 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000014D8 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000014D8                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000014D8                                         ; .rdata$r:00001838o
.data:000014D8                                         ; const type_info::`vftable'
.data:000014DC                 align 10h
.data:000014E0 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:000014FB                 align 4
.data:000014FB _data           ends
.data:000014FB
.rdata$r:000014FC ; ===========================================================================
.rdata$r:000014FC
.rdata$r:000014FC ; Segment type: Pure data
.rdata$r:000014FC ; Segment permissions: Read
.rdata$r:000014FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000014FC                 assume cs:_rdata$r
.rdata$r:000014FC                 ;org 14FCh
.rdata$r:000014FC ; COMDAT (pick any)
.rdata$r:000014FC                 public ??_R3ISequentialOutStream@@8
.rdata$r:000014FC ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000014FC ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000014D4o
.rdata$r:000014FC                                         ; .rdata$r:0000183Co
.rdata$r:000014FD                 db    0
.rdata$r:000014FE                 db    0
.rdata$r:000014FF                 db    0
.rdata$r:00001500                 db    0
.rdata$r:00001501                 db    0
.rdata$r:00001502                 db    0
.rdata$r:00001503                 db    0
.rdata$r:00001504                 db    2
.rdata$r:00001505                 db    0
.rdata$r:00001506                 db    0
.rdata$r:00001507                 db    0
.rdata$r:00001508                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001508 _rdata$r        ends
.rdata$r:00001508
.rdata$r:0000150C ; ===========================================================================
.rdata$r:0000150C
.rdata$r:0000150C ; Segment type: Pure data
.rdata$r:0000150C ; Segment permissions: Read
.rdata$r:0000150C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000150C                 assume cs:_rdata$r
.rdata$r:0000150C                 ;org 150Ch
.rdata$r:0000150C ; COMDAT (pick any)
.rdata$r:0000150C                 public ??_R2ISequentialOutStream@@8
.rdata$r:0000150C ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000150C ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000150C                                         ; DATA XREF: .rdata$r:00001508o
.rdata$r:0000150C                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001510                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001514                 db    0
.rdata$r:00001515                 align 4
.rdata$r:00001515 _rdata$r        ends
.rdata$r:00001515
.rdata$r:00001518 ; ===========================================================================
.rdata$r:00001518
.rdata$r:00001518 ; Segment type: Pure data
.rdata$r:00001518 ; Segment permissions: Read
.rdata$r:00001518 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001518                 assume cs:_rdata$r
.rdata$r:00001518                 ;org 1518h
.rdata$r:00001518 ; COMDAT (pick any)
.rdata$r:00001518                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001518 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001518 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001518                                         ; DATA XREF: .rdata$r:0000143Co
.rdata$r:00001518                                         ; .rdata$r:000014B4o ...
.rdata$r:00001518                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000151C                 db    0
.rdata$r:0000151D                 db    0
.rdata$r:0000151E                 db    0
.rdata$r:0000151F                 db    0
.rdata$r:00001520                 db    0
.rdata$r:00001521                 db    0
.rdata$r:00001522                 db    0
.rdata$r:00001523                 db    0
.rdata$r:00001524                 db 0FFh
.rdata$r:00001525                 db 0FFh
.rdata$r:00001526                 db 0FFh
.rdata$r:00001527                 db 0FFh
.rdata$r:00001528                 db    0
.rdata$r:00001529                 db    0
.rdata$r:0000152A                 db    0
.rdata$r:0000152B                 db    0
.rdata$r:0000152C                 db  40h ; @
.rdata$r:0000152D                 db    0
.rdata$r:0000152E                 db    0
.rdata$r:0000152F                 db    0
.rdata$r:00001530                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001530 _rdata$r        ends
.rdata$r:00001530
.data:00001534 ; ===========================================================================
.data:00001534
.data:00001534 ; Segment type: Pure data
.data:00001534 ; Segment permissions: Read/Write
.data:00001534 _data           segment dword public 'DATA' use32
.data:00001534                 assume cs:_data
.data:00001534                 ;org 1534h
.data:00001534 ; COMDAT (pick any)
.data:00001534                 public ??_R0?AUIUnknown@@@8
.data:00001534 ; struct IUnknown `RTTI Type Descriptor'
.data:00001534 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001534                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001534                                         ; const type_info::`vftable'
.data:00001538                 db    0
.data:00001539                 db    0
.data:0000153A                 db    0
.data:0000153B                 db    0
.data:0000153C                 db  2Eh ; .
.data:0000153D                 db  3Fh ; ?
.data:0000153E                 db  41h ; A
.data:0000153F                 db  55h ; U
.data:00001540                 db  49h ; I
.data:00001541                 db  55h ; U
.data:00001542                 db  6Eh ; n
.data:00001543                 db  6Bh ; k
.data:00001544                 db  6Eh ; n
.data:00001545                 db  6Fh ; o
.data:00001546                 db  77h ; w
.data:00001547                 db  6Eh ; n
.data:00001548                 db  40h ; @
.data:00001549                 db  40h ; @
.data:0000154A                 db    0
.data:0000154B                 align 4
.data:0000154B _data           ends
.data:0000154B
.rdata$r:0000154C ; ===========================================================================
.rdata$r:0000154C
.rdata$r:0000154C ; Segment type: Pure data
.rdata$r:0000154C ; Segment permissions: Read
.rdata$r:0000154C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000154C                 assume cs:_rdata$r
.rdata$r:0000154C                 ;org 154Ch
.rdata$r:0000154C ; COMDAT (pick any)
.rdata$r:0000154C                 public ??_R3IUnknown@@8
.rdata$r:0000154C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000154C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00001530o
.rdata$r:0000154D                 db    0
.rdata$r:0000154E                 db    0
.rdata$r:0000154F                 db    0
.rdata$r:00001550                 db    0
.rdata$r:00001551                 db    0
.rdata$r:00001552                 db    0
.rdata$r:00001553                 db    0
.rdata$r:00001554                 db    1
.rdata$r:00001555                 db    0
.rdata$r:00001556                 db    0
.rdata$r:00001557                 db    0
.rdata$r:00001558                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001558 _rdata$r        ends
.rdata$r:00001558
.rdata$r:0000155C ; ===========================================================================
.rdata$r:0000155C
.rdata$r:0000155C ; Segment type: Pure data
.rdata$r:0000155C ; Segment permissions: Read
.rdata$r:0000155C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000155C                 assume cs:_rdata$r
.rdata$r:0000155C                 ;org 155Ch
.rdata$r:0000155C ; COMDAT (pick any)
.rdata$r:0000155C                 public ??_R2IUnknown@@8
.rdata$r:0000155C ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000155C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000155C                                         ; DATA XREF: .rdata$r:00001558o
.rdata$r:0000155C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001560                 db    0
.rdata$r:00001561                 align 4
.rdata$r:00001561 _rdata$r        ends
.rdata$r:00001561
.rdata$r:00001564 ; ===========================================================================
.rdata$r:00001564
.rdata$r:00001564 ; Segment type: Pure data
.rdata$r:00001564 ; Segment permissions: Read
.rdata$r:00001564 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001564                 assume cs:_rdata$r
.rdata$r:00001564                 ;org 1564h
.rdata$r:00001564 ; COMDAT (pick any)
.rdata$r:00001564                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00001564 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001564 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001564                                         ; DATA XREF: .rdata$r:00001440o
.rdata$r:00001564                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001568                 db    0
.rdata$r:00001569                 db    0
.rdata$r:0000156A                 db    0
.rdata$r:0000156B                 db    0
.rdata$r:0000156C                 db    4
.rdata$r:0000156D                 db    0
.rdata$r:0000156E                 db    0
.rdata$r:0000156F                 db    0
.rdata$r:00001570                 db 0FFh
.rdata$r:00001571                 db 0FFh
.rdata$r:00001572                 db 0FFh
.rdata$r:00001573                 db 0FFh
.rdata$r:00001574                 db    0
.rdata$r:00001575                 db    0
.rdata$r:00001576                 db    0
.rdata$r:00001577                 db    0
.rdata$r:00001578                 db  40h ; @
.rdata$r:00001579                 db    0
.rdata$r:0000157A                 db    0
.rdata$r:0000157B                 db    0
.rdata$r:0000157C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000157C _rdata$r        ends
.rdata$r:0000157C
.data:00001580 ; ===========================================================================
.data:00001580
.data:00001580 ; Segment type: Pure data
.data:00001580 ; Segment permissions: Read/Write
.data:00001580 _data           segment dword public 'DATA' use32
.data:00001580                 assume cs:_data
.data:00001580                 ;org 1580h
.data:00001580 ; COMDAT (pick any)
.data:00001580                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001580 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001580 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001580                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001580                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001580                                         ; const type_info::`vftable'
.data:00001584                 align 8
.data:00001588 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001588 _data           ends
.data:00001588
.rdata$r:0000159C ; ===========================================================================
.rdata$r:0000159C
.rdata$r:0000159C ; Segment type: Pure data
.rdata$r:0000159C ; Segment permissions: Read
.rdata$r:0000159C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000159C                 assume cs:_rdata$r
.rdata$r:0000159C                 ;org 159Ch
.rdata$r:0000159C ; COMDAT (pick any)
.rdata$r:0000159C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000159C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000159C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000157Co
.rdata$r:0000159C                                         ; .rdata$r:000015CCo
.rdata$r:0000159D                 db    0
.rdata$r:0000159E                 db    0
.rdata$r:0000159F                 db    0
.rdata$r:000015A0                 db    0
.rdata$r:000015A1                 db    0
.rdata$r:000015A2                 db    0
.rdata$r:000015A3                 db    0
.rdata$r:000015A4                 db    1
.rdata$r:000015A5                 db    0
.rdata$r:000015A6                 db    0
.rdata$r:000015A7                 db    0
.rdata$r:000015A8                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000015A8 _rdata$r        ends
.rdata$r:000015A8
.rdata$r:000015AC ; ===========================================================================
.rdata$r:000015AC
.rdata$r:000015AC ; Segment type: Pure data
.rdata$r:000015AC ; Segment permissions: Read
.rdata$r:000015AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015AC                 assume cs:_rdata$r
.rdata$r:000015AC                 ;org 15ACh
.rdata$r:000015AC ; COMDAT (pick any)
.rdata$r:000015AC                 public ??_R2CMyUnknownImp@@8
.rdata$r:000015AC ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000015AC ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000015AC                                         ; DATA XREF: .rdata$r:000015A8o
.rdata$r:000015AC                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015B0                 db    0
.rdata$r:000015B1                 align 4
.rdata$r:000015B1 _rdata$r        ends
.rdata$r:000015B1
.rdata$r:000015B4 ; ===========================================================================
.rdata$r:000015B4
.rdata$r:000015B4 ; Segment type: Pure data
.rdata$r:000015B4 ; Segment permissions: Read
.rdata$r:000015B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015B4                 assume cs:_rdata$r
.rdata$r:000015B4                 ;org 15B4h
.rdata$r:000015B4 ; COMDAT (pick any)
.rdata$r:000015B4                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000015B4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000015B4 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000015B4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000015B4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000015B8                 align 10h
.rdata$r:000015C0                 db 0FFh
.rdata$r:000015C1                 db 0FFh
.rdata$r:000015C2                 db 0FFh
.rdata$r:000015C3                 db 0FFh
.rdata$r:000015C4                 db    0
.rdata$r:000015C5                 db    0
.rdata$r:000015C6                 db    0
.rdata$r:000015C7                 db    0
.rdata$r:000015C8                 db  40h ; @
.rdata$r:000015C9                 db    0
.rdata$r:000015CA                 db    0
.rdata$r:000015CB                 db    0
.rdata$r:000015CC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015CC _rdata$r        ends
.rdata$r:000015CC
.text:000015D0 ; ===========================================================================
.text:000015D0
.text:000015D0 ; Segment type: Pure code
.text:000015D0 ; Segment permissions: Read/Execute
.text:000015D0 _text           segment para public 'CODE' use32
.text:000015D0                 assume cs:_text
.text:000015D0                 ;org 15D0h
.text:000015D0 ; COMDAT (pick any)
.text:000015D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000015D0
.text:000015D0 ; =============== S U B R O U T I N E =======================================
.text:000015D0
.text:000015D0 ; Attributes: bp-based frame
.text:000015D0
.text:000015D0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000015D0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000015D0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: COffsetOutStream::COffsetOutStream(void)+1Cp
.text:000015D0
.text:000015D0 var_4           = dword ptr -4
.text:000015D0
.text:000015D0                 push    ebp
.text:000015D1                 mov     ebp, esp
.text:000015D3                 push    ecx
.text:000015D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015DB                 mov     [ebp+var_4], ecx
.text:000015DE                 mov     eax, [ebp+var_4]
.text:000015E1                 mov     dword ptr [eax], 0
.text:000015E7                 mov     eax, [ebp+var_4]
.text:000015EA                 mov     esp, ebp
.text:000015EC                 pop     ebp
.text:000015ED                 retn
.text:000015ED ??0CMyUnknownImp@@QAE@XZ endp
.text:000015ED
.text:000015ED ; ---------------------------------------------------------------------------
.text:000015EE                 align 10h
.text:000015EE _text           ends
.text:000015EE
.text:000015F0 ; ===========================================================================
.text:000015F0
.text:000015F0 ; Segment type: Pure code
.text:000015F0 ; Segment permissions: Read/Execute
.text:000015F0 _text           segment para public 'CODE' use32
.text:000015F0                 assume cs:_text
.text:000015F0                 ;org 15F0h
.text:000015F0 ; COMDAT (pick any)
.text:000015F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000015F0
.text:000015F0 ; =============== S U B R O U T I N E =======================================
.text:000015F0
.text:000015F0 ; Attributes: bp-based frame
.text:000015F0
.text:000015F0 ; __int32 __stdcall COffsetOutStream::QueryInterface(COffsetOutStream *this, const struct _GUID *Buf1, void **)
.text:000015F0                 public ?QueryInterface@COffsetOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:000015F0 ?QueryInterface@COffsetOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000015F0                                         ; DATA XREF: .rdata:const COffsetOutStream::`vftable'o
.text:000015F0
.text:000015F0 this            = dword ptr  8
.text:000015F0 Buf1            = dword ptr  0Ch
.text:000015F0 arg_8           = dword ptr  10h
.text:000015F0
.text:000015F0                 push    ebp
.text:000015F1                 mov     ebp, esp
.text:000015F3                 mov     eax, [ebp+arg_8]
.text:000015F6                 mov     dword ptr [eax], 0
.text:000015FC                 push    offset _IID_IUnknown ; Buf2
.text:00001601                 mov     ecx, [ebp+Buf1]
.text:00001604                 push    ecx             ; Buf1
.text:00001605                 call    ___@8           ; __(x,x)
.text:0000160A                 test    eax, eax
.text:0000160C                 jz      short loc_1618
.text:0000160E                 mov     edx, [ebp+arg_8]
.text:00001611                 mov     eax, [ebp+this]
.text:00001614                 mov     [edx], eax
.text:00001616                 jmp     short loc_161F
.text:00001618 ; ---------------------------------------------------------------------------
.text:00001618
.text:00001618 loc_1618:                               ; CODE XREF: COffsetOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001618                 mov     eax, 80004002h
.text:0000161D                 jmp     short loc_1630
.text:0000161F ; ---------------------------------------------------------------------------
.text:0000161F
.text:0000161F loc_161F:                               ; CODE XREF: COffsetOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000161F                 mov     ecx, [ebp+this]
.text:00001622                 mov     edx, [ecx+4]
.text:00001625                 add     edx, 1
.text:00001628                 mov     eax, [ebp+this]
.text:0000162B                 mov     [eax+4], edx
.text:0000162E                 xor     eax, eax
.text:00001630
.text:00001630 loc_1630:                               ; CODE XREF: COffsetOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00001630                 cmp     ebp, esp
.text:00001632                 call    __RTC_CheckEsp
.text:00001637                 pop     ebp
.text:00001638                 retn    0Ch
.text:00001638 ?QueryInterface@COffsetOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001638
.text:00001638 ; ---------------------------------------------------------------------------
.text:0000163B                 align 4
.text:0000163B _text           ends
.text:0000163B
.text:0000163C ; ===========================================================================
.text:0000163C
.text:0000163C ; Segment type: Pure code
.text:0000163C ; Segment permissions: Read/Execute
.text:0000163C _text           segment para public 'CODE' use32
.text:0000163C                 assume cs:_text
.text:0000163C                 ;org 163Ch
.text:0000163C ; COMDAT (pick any)
.text:0000163C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000163C
.text:0000163C ; =============== S U B R O U T I N E =======================================
.text:0000163C
.text:0000163C ; Attributes: bp-based frame
.text:0000163C
.text:0000163C ; unsigned __int32 __stdcall COffsetOutStream::AddRef(COffsetOutStream *this)
.text:0000163C                 public ?AddRef@COffsetOutStream@@UAGKXZ
.text:0000163C ?AddRef@COffsetOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:000013D8o
.text:0000163C
.text:0000163C var_4           = dword ptr -4
.text:0000163C this            = dword ptr  8
.text:0000163C
.text:0000163C                 push    ebp
.text:0000163D                 mov     ebp, esp
.text:0000163F                 push    ecx
.text:00001640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001647                 mov     eax, [ebp+this]
.text:0000164A                 mov     ecx, [eax+4]
.text:0000164D                 add     ecx, 1
.text:00001650                 mov     [ebp+var_4], ecx
.text:00001653                 mov     edx, [ebp+this]
.text:00001656                 mov     eax, [ebp+var_4]
.text:00001659                 mov     [edx+4], eax
.text:0000165C                 mov     eax, [ebp+var_4]
.text:0000165F                 mov     esp, ebp
.text:00001661                 pop     ebp
.text:00001662                 retn    4
.text:00001662 ?AddRef@COffsetOutStream@@UAGKXZ endp
.text:00001662
.text:00001662 ; ---------------------------------------------------------------------------
.text:00001665                 align 4
.text:00001665 _text           ends
.text:00001665
.text:00001668 ; ===========================================================================
.text:00001668
.text:00001668 ; Segment type: Pure code
.text:00001668 ; Segment permissions: Read/Execute
.text:00001668 _text           segment para public 'CODE' use32
.text:00001668                 assume cs:_text
.text:00001668                 ;org 1668h
.text:00001668 ; COMDAT (pick any)
.text:00001668                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001668
.text:00001668 ; =============== S U B R O U T I N E =======================================
.text:00001668
.text:00001668 ; Attributes: bp-based frame
.text:00001668
.text:00001668 ; unsigned __int32 __stdcall COffsetOutStream::Release(COffsetOutStream *this)
.text:00001668                 public ?Release@COffsetOutStream@@UAGKXZ
.text:00001668 ?Release@COffsetOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:000013DCo
.text:00001668
.text:00001668 var_10          = dword ptr -10h
.text:00001668 var_C           = dword ptr -0Ch
.text:00001668 var_8           = dword ptr -8
.text:00001668 var_4           = dword ptr -4
.text:00001668 this            = dword ptr  8
.text:00001668
.text:00001668                 push    ebp
.text:00001669                 mov     ebp, esp
.text:0000166B                 sub     esp, 10h
.text:0000166E                 mov     eax, 0CCCCCCCCh
.text:00001673                 mov     [ebp+var_10], eax
.text:00001676                 mov     [ebp+var_C], eax
.text:00001679                 mov     [ebp+var_8], eax
.text:0000167C                 mov     [ebp+var_4], eax
.text:0000167F                 mov     eax, [ebp+this]
.text:00001682                 mov     ecx, [eax+4]
.text:00001685                 sub     ecx, 1
.text:00001688                 mov     [ebp+var_C], ecx
.text:0000168B                 mov     edx, [ebp+this]
.text:0000168E                 mov     eax, [ebp+var_C]
.text:00001691                 mov     [edx+4], eax
.text:00001694                 cmp     [ebp+var_C], 0
.text:00001698                 jz      short loc_16A2
.text:0000169A                 mov     ecx, [ebp+this]
.text:0000169D                 mov     eax, [ecx+4]
.text:000016A0                 jmp     short loc_16CC
.text:000016A2 ; ---------------------------------------------------------------------------
.text:000016A2
.text:000016A2 loc_16A2:                               ; CODE XREF: COffsetOutStream::Release(void)+30j
.text:000016A2                 mov     edx, [ebp+this]
.text:000016A5                 mov     [ebp+var_8], edx
.text:000016A8                 mov     eax, [ebp+var_8]
.text:000016AB                 mov     [ebp+var_4], eax
.text:000016AE                 cmp     [ebp+var_4], 0
.text:000016B2                 jz      short loc_16C3
.text:000016B4                 push    1
.text:000016B6                 mov     ecx, [ebp+var_4]
.text:000016B9                 call    ??_GCOffsetOutStream@@QAEPAXI@Z ; COffsetOutStream::`scalar deleting destructor'(uint)
.text:000016BE                 mov     [ebp+var_10], eax
.text:000016C1                 jmp     short loc_16CA
.text:000016C3 ; ---------------------------------------------------------------------------
.text:000016C3
.text:000016C3 loc_16C3:                               ; CODE XREF: COffsetOutStream::Release(void)+4Aj
.text:000016C3                 mov     [ebp+var_10], 0
.text:000016CA
.text:000016CA loc_16CA:                               ; CODE XREF: COffsetOutStream::Release(void)+59j
.text:000016CA                 xor     eax, eax
.text:000016CC
.text:000016CC loc_16CC:                               ; CODE XREF: COffsetOutStream::Release(void)+38j
.text:000016CC                 add     esp, 10h
.text:000016CF                 cmp     ebp, esp
.text:000016D1                 call    __RTC_CheckEsp
.text:000016D6                 mov     esp, ebp
.text:000016D8                 pop     ebp
.text:000016D9                 retn    4
.text:000016D9 ?Release@COffsetOutStream@@UAGKXZ endp
.text:000016D9
.text:000016D9 _text           ends
.text:000016D9
.text:000016DC ; ===========================================================================
.text:000016DC
.text:000016DC ; Segment type: Pure code
.text:000016DC ; Segment permissions: Read/Execute
.text:000016DC _text           segment para public 'CODE' use32
.text:000016DC                 assume cs:_text
.text:000016DC                 ;org 16DCh
.text:000016DC ; COMDAT (pick any)
.text:000016DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000016DC
.text:000016DC ; =============== S U B R O U T I N E =======================================
.text:000016DC
.text:000016DC ; Attributes: bp-based frame
.text:000016DC
.text:000016DC ; public: void * __thiscall COffsetOutStream::`scalar deleting destructor'(unsigned int)
.text:000016DC                 public ??_GCOffsetOutStream@@QAEPAXI@Z
.text:000016DC ??_GCOffsetOutStream@@QAEPAXI@Z proc near
.text:000016DC                                         ; CODE XREF: COffsetOutStream::Release(void)+51p
.text:000016DC
.text:000016DC var_4           = dword ptr -4
.text:000016DC arg_0           = dword ptr  8
.text:000016DC
.text:000016DC                 push    ebp
.text:000016DD                 mov     ebp, esp
.text:000016DF                 push    ecx
.text:000016E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016E7                 mov     [ebp+var_4], ecx
.text:000016EA                 mov     ecx, [ebp+var_4] ; this
.text:000016ED                 call    ??1COffsetOutStream@@QAE@XZ ; COffsetOutStream::~COffsetOutStream(void)
.text:000016F2                 mov     eax, [ebp+arg_0]
.text:000016F5                 and     eax, 1
.text:000016F8                 jz      short loc_1706
.text:000016FA                 mov     ecx, [ebp+var_4]
.text:000016FD                 push    ecx             ; void *
.text:000016FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001703                 add     esp, 4
.text:00001706
.text:00001706 loc_1706:                               ; CODE XREF: COffsetOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00001706                 mov     eax, [ebp+var_4]
.text:00001709                 add     esp, 4
.text:0000170C                 cmp     ebp, esp
.text:0000170E                 call    __RTC_CheckEsp
.text:00001713                 mov     esp, ebp
.text:00001715                 pop     ebp
.text:00001716                 retn    4
.text:00001716 ??_GCOffsetOutStream@@QAEPAXI@Z endp
.text:00001716
.text:00001716 ; ---------------------------------------------------------------------------
.text:00001719                 align 4
.text:00001719 _text           ends
.text:00001719
.text:0000171C ; ===========================================================================
.text:0000171C
.text:0000171C ; Segment type: Pure code
.text:0000171C ; Segment permissions: Read/Execute
.text:0000171C _text           segment para public 'CODE' use32
.text:0000171C                 assume cs:_text
.text:0000171C                 ;org 171Ch
.text:0000171C ; COMDAT (pick any)
.text:0000171C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000171C
.text:0000171C ; =============== S U B R O U T I N E =======================================
.text:0000171C
.text:0000171C ; Attributes: bp-based frame
.text:0000171C
.text:0000171C ; _DWORD __thiscall COffsetOutStream::~COffsetOutStream(COffsetOutStream *__hidden this)
.text:0000171C                 public ??1COffsetOutStream@@QAE@XZ
.text:0000171C ??1COffsetOutStream@@QAE@XZ proc near   ; CODE XREF: COffsetOutStream::`scalar deleting destructor'(uint)+11p
.text:0000171C
.text:0000171C var_4           = dword ptr -4
.text:0000171C
.text:0000171C                 push    ebp
.text:0000171D                 mov     ebp, esp
.text:0000171F                 push    ecx
.text:00001720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001727                 mov     [ebp+var_4], ecx
.text:0000172A                 mov     ecx, [ebp+var_4]
.text:0000172D                 add     ecx, 10h
.text:00001730                 call    ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)
.text:00001735                 add     esp, 4
.text:00001738                 cmp     ebp, esp
.text:0000173A                 call    __RTC_CheckEsp
.text:0000173F                 mov     esp, ebp
.text:00001741                 pop     ebp
.text:00001742                 retn
.text:00001742 ??1COffsetOutStream@@QAE@XZ endp
.text:00001742
.text:00001742 ; ---------------------------------------------------------------------------
.text:00001743                 align 4
.text:00001743 _text           ends
.text:00001743
.text:00001744 ; ===========================================================================
.text:00001744
.text:00001744 ; Segment type: Pure code
.text:00001744 ; Segment permissions: Read/Execute
.text:00001744 _text           segment para public 'CODE' use32
.text:00001744                 assume cs:_text
.text:00001744                 ;org 1744h
.text:00001744 ; COMDAT (pick any)
.text:00001744                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001744
.text:00001744 ; =============== S U B R O U T I N E =======================================
.text:00001744
.text:00001744 ; Attributes: bp-based frame
.text:00001744
.text:00001744 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001744                 public ___@8
.text:00001744 ___@8           proc near               ; CODE XREF: COffsetOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:00001744
.text:00001744 Buf1            = dword ptr  8
.text:00001744 Buf2            = dword ptr  0Ch
.text:00001744
.text:00001744                 push    ebp
.text:00001745                 mov     ebp, esp
.text:00001747                 mov     eax, [ebp+Buf2]
.text:0000174A                 push    eax             ; Buf2
.text:0000174B                 mov     ecx, [ebp+Buf1]
.text:0000174E                 push    ecx             ; Buf1
.text:0000174F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001754                 cmp     ebp, esp
.text:00001756                 call    __RTC_CheckEsp
.text:0000175B                 pop     ebp
.text:0000175C                 retn    8
.text:0000175C ___@8           endp
.text:0000175C
.text:0000175C ; ---------------------------------------------------------------------------
.text:0000175F                 align 10h
.text:0000175F _text           ends
.text:0000175F
.text:00001760 ; ===========================================================================
.text:00001760
.text:00001760 ; Segment type: Pure code
.text:00001760 ; Segment permissions: Read/Execute
.text:00001760 _text           segment para public 'CODE' use32
.text:00001760                 assume cs:_text
.text:00001760                 ;org 1760h
.text:00001760 ; COMDAT (pick any)
.text:00001760                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001760
.text:00001760 ; =============== S U B R O U T I N E =======================================
.text:00001760
.text:00001760 ; Attributes: bp-based frame
.text:00001760
.text:00001760 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001760                 public _IsEqualGUID@8
.text:00001760 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001760
.text:00001760 Buf1            = dword ptr  8
.text:00001760 Buf2            = dword ptr  0Ch
.text:00001760
.text:00001760                 push    ebp
.text:00001761                 mov     ebp, esp
.text:00001763                 push    10h             ; Size
.text:00001765                 mov     eax, [ebp+Buf2]
.text:00001768                 push    eax             ; Buf2
.text:00001769                 mov     ecx, [ebp+Buf1]
.text:0000176C                 push    ecx             ; Buf1
.text:0000176D                 call    _memcmp
.text:00001772                 add     esp, 0Ch
.text:00001775                 neg     eax
.text:00001777                 sbb     eax, eax
.text:00001779                 add     eax, 1
.text:0000177C                 cmp     ebp, esp
.text:0000177E                 call    __RTC_CheckEsp
.text:00001783                 pop     ebp
.text:00001784                 retn    8
.text:00001784 _IsEqualGUID@8  endp
.text:00001784
.text:00001784 ; ---------------------------------------------------------------------------
.text:00001787                 align 4
.text:00001787 _text           ends
.text:00001787
.text:00001788 ; ===========================================================================
.text:00001788
.text:00001788 ; Segment type: Pure code
.text:00001788 ; Segment permissions: Read/Execute
.text:00001788 _text           segment para public 'CODE' use32
.text:00001788                 assume cs:_text
.text:00001788                 ;org 1788h
.text:00001788 ; COMDAT (pick any)
.text:00001788                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001788
.text:00001788 ; =============== S U B R O U T I N E =======================================
.text:00001788
.text:00001788 ; Attributes: bp-based frame
.text:00001788
.text:00001788 ; _DWORD __thiscall IOutStream::IOutStream(IOutStream *__hidden this)
.text:00001788                 public ??0IOutStream@@QAE@XZ
.text:00001788 ??0IOutStream@@QAE@XZ proc near         ; CODE XREF: COffsetOutStream::COffsetOutStream(void)+11p
.text:00001788
.text:00001788 var_4           = dword ptr -4
.text:00001788
.text:00001788                 push    ebp
.text:00001789                 mov     ebp, esp
.text:0000178B                 push    ecx
.text:0000178C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001793                 mov     [ebp+var_4], ecx
.text:00001796                 mov     ecx, [ebp+var_4] ; this
.text:00001799                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:0000179E                 mov     eax, [ebp+var_4]
.text:000017A1                 mov     dword ptr [eax], offset ??_7IOutStream@@6B@ ; const IOutStream::`vftable'
.text:000017A7                 mov     eax, [ebp+var_4]
.text:000017AA                 add     esp, 4
.text:000017AD                 cmp     ebp, esp
.text:000017AF                 call    __RTC_CheckEsp
.text:000017B4                 mov     esp, ebp
.text:000017B6                 pop     ebp
.text:000017B7                 retn
.text:000017B7 ??0IOutStream@@QAE@XZ endp
.text:000017B7
.text:000017B7 _text           ends
.text:000017B7
.rdata:000017B8 ; ===========================================================================
.rdata:000017B8
.rdata:000017B8 ; Segment type: Pure data
.rdata:000017B8 ; Segment permissions: Read
.rdata:000017B8 _rdata          segment dword public 'DATA' use32
.rdata:000017B8                 assume cs:_rdata
.rdata:000017B8                 ;org 17B8h
.rdata:000017B8 ; COMDAT (pick largest)
.rdata:000017B8                 dd offset ??_R4IOutStream@@6B@ ; const IOutStream::`RTTI Complete Object Locator'
.rdata:000017BC                 public ??_7IOutStream@@6B@
.rdata:000017BC ; const IOutStream::`vftable'
.rdata:000017BC ??_7IOutStream@@6B@ dd offset __purecall
.rdata:000017BC                                         ; DATA XREF: IOutStream::IOutStream(void)+19o
.rdata:000017C0                 dd offset __purecall
.rdata:000017C4                 dd offset __purecall
.rdata:000017C8                 dd offset __purecall
.rdata:000017CC                 dd offset __purecall
.rdata:000017D0                 dd offset __purecall
.rdata:000017D0 _rdata          ends
.rdata:000017D0
.rdata$r:000017D4 ; ===========================================================================
.rdata$r:000017D4
.rdata$r:000017D4 ; Segment type: Pure data
.rdata$r:000017D4 ; Segment permissions: Read
.rdata$r:000017D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017D4                 assume cs:_rdata$r
.rdata$r:000017D4                 ;org 17D4h
.rdata$r:000017D4 ; COMDAT (pick any)
.rdata$r:000017D4                 public ??_R4IOutStream@@6B@
.rdata$r:000017D4 ; const IOutStream::`RTTI Complete Object Locator'
.rdata$r:000017D4 ??_R4IOutStream@@6B@ db    0            ; DATA XREF: .rdata:000017B8o
.rdata$r:000017D5                 db    0
.rdata$r:000017D6                 db    0
.rdata$r:000017D7                 db    0
.rdata$r:000017D8                 db    0
.rdata$r:000017D9                 db    0
.rdata$r:000017DA                 db    0
.rdata$r:000017DB                 db    0
.rdata$r:000017DC                 db    0
.rdata$r:000017DD                 db    0
.rdata$r:000017DE                 db    0
.rdata$r:000017DF                 db    0
.rdata$r:000017E0                 dd offset ??_R0?AUIOutStream@@@8 ; IOutStream `RTTI Type Descriptor'
.rdata$r:000017E4                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017E4 _rdata$r        ends
.rdata$r:000017E4
.text:000017E8 ; ===========================================================================
.text:000017E8
.text:000017E8 ; Segment type: Pure code
.text:000017E8 ; Segment permissions: Read/Execute
.text:000017E8 _text           segment para public 'CODE' use32
.text:000017E8                 assume cs:_text
.text:000017E8                 ;org 17E8h
.text:000017E8 ; COMDAT (pick any)
.text:000017E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000017E8
.text:000017E8 ; =============== S U B R O U T I N E =======================================
.text:000017E8
.text:000017E8 ; Attributes: bp-based frame
.text:000017E8
.text:000017E8 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000017E8                 public ??0ISequentialOutStream@@QAE@XZ
.text:000017E8 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000017E8                                         ; CODE XREF: IOutStream::IOutStream(void)+11p
.text:000017E8
.text:000017E8 var_4           = dword ptr -4
.text:000017E8
.text:000017E8                 push    ebp
.text:000017E9                 mov     ebp, esp
.text:000017EB                 push    ecx
.text:000017EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017F3                 mov     [ebp+var_4], ecx
.text:000017F6                 mov     ecx, [ebp+var_4]
.text:000017F9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000017FE                 mov     eax, [ebp+var_4]
.text:00001801                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00001807                 mov     eax, [ebp+var_4]
.text:0000180A                 add     esp, 4
.text:0000180D                 cmp     ebp, esp
.text:0000180F                 call    __RTC_CheckEsp
.text:00001814                 mov     esp, ebp
.text:00001816                 pop     ebp
.text:00001817                 retn
.text:00001817 ??0ISequentialOutStream@@QAE@XZ endp
.text:00001817
.text:00001817 _text           ends
.text:00001817
.rdata:00001818 ; ===========================================================================
.rdata:00001818
.rdata:00001818 ; Segment type: Pure data
.rdata:00001818 ; Segment permissions: Read
.rdata:00001818 _rdata          segment dword public 'DATA' use32
.rdata:00001818                 assume cs:_rdata
.rdata:00001818                 ;org 1818h
.rdata:00001818 ; COMDAT (pick largest)
.rdata:00001818                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:0000181C                 public ??_7ISequentialOutStream@@6B@
.rdata:0000181C ; const ISequentialOutStream::`vftable'
.rdata:0000181C ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:0000181C                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00001820                 dd offset __purecall
.rdata:00001824                 dd offset __purecall
.rdata:00001828                 dd offset __purecall
.rdata:00001828 _rdata          ends
.rdata:00001828
.rdata$r:0000182C ; ===========================================================================
.rdata$r:0000182C
.rdata$r:0000182C ; Segment type: Pure data
.rdata$r:0000182C ; Segment permissions: Read
.rdata$r:0000182C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000182C                 assume cs:_rdata$r
.rdata$r:0000182C                 ;org 182Ch
.rdata$r:0000182C ; COMDAT (pick any)
.rdata$r:0000182C                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:0000182C ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:0000182C ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00001818o
.rdata$r:0000182D                 db    0
.rdata$r:0000182E                 db    0
.rdata$r:0000182F                 db    0
.rdata$r:00001830                 db    0
.rdata$r:00001831                 db    0
.rdata$r:00001832                 db    0
.rdata$r:00001833                 db    0
.rdata$r:00001834                 db    0
.rdata$r:00001835                 db    0
.rdata$r:00001836                 db    0
.rdata$r:00001837                 db    0
.rdata$r:00001838                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000183C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000183C _rdata$r        ends
.rdata$r:0000183C
.text:00001840 ; ===========================================================================
.text:00001840
.text:00001840 ; Segment type: Pure code
.text:00001840 ; Segment permissions: Read/Execute
.text:00001840 _text           segment para public 'CODE' use32
.text:00001840                 assume cs:_text
.text:00001840                 ;org 1840h
.text:00001840 ; COMDAT (pick any)
.text:00001840                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001840
.text:00001840 ; =============== S U B R O U T I N E =======================================
.text:00001840
.text:00001840 ; Attributes: bp-based frame
.text:00001840
.text:00001840 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001840                 public ??0IUnknown@@QAE@XZ
.text:00001840 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00001840
.text:00001840 var_4           = dword ptr -4
.text:00001840
.text:00001840                 push    ebp
.text:00001841                 mov     ebp, esp
.text:00001843                 push    ecx
.text:00001844                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000184B                 mov     [ebp+var_4], ecx
.text:0000184E                 mov     eax, [ebp+var_4]
.text:00001851                 mov     esp, ebp
.text:00001853                 pop     ebp
.text:00001854                 retn
.text:00001854 ??0IUnknown@@QAE@XZ endp
.text:00001854
.text:00001854 ; ---------------------------------------------------------------------------
.text:00001855                 align 4
.text:00001855 _text           ends
.text:00001855
.text:00001858 ; ===========================================================================
.text:00001858
.text:00001858 ; Segment type: Pure code
.text:00001858 ; Segment permissions: Read/Execute
.text:00001858 _text           segment para public 'CODE' use32
.text:00001858                 assume cs:_text
.text:00001858                 ;org 1858h
.text:00001858 ; COMDAT (pick any)
.text:00001858                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001858
.text:00001858 ; =============== S U B R O U T I N E =======================================
.text:00001858
.text:00001858 ; Attributes: bp-based frame
.text:00001858
.text:00001858 ; public: __thiscall CMyComPtr<struct IOutStream>::CMyComPtr<struct IOutStream>(void)
.text:00001858                 public ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:00001858 ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:00001858                                         ; CODE XREF: COffsetOutStream::COffsetOutStream(void)+30p
.text:00001858
.text:00001858 var_4           = dword ptr -4
.text:00001858
.text:00001858                 push    ebp
.text:00001859                 mov     ebp, esp
.text:0000185B                 push    ecx
.text:0000185C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001863                 mov     [ebp+var_4], ecx
.text:00001866                 mov     eax, [ebp+var_4]
.text:00001869                 mov     dword ptr [eax], 0
.text:0000186F                 mov     eax, [ebp+var_4]
.text:00001872                 mov     esp, ebp
.text:00001874                 pop     ebp
.text:00001875                 retn
.text:00001875 ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:00001875
.text:00001875 ; ---------------------------------------------------------------------------
.text:00001876                 align 4
.text:00001876 _text           ends
.text:00001876
.text:00001878 ; ===========================================================================
.text:00001878
.text:00001878 ; Segment type: Pure code
.text:00001878 ; Segment permissions: Read/Execute
.text:00001878 _text           segment para public 'CODE' use32
.text:00001878                 assume cs:_text
.text:00001878                 ;org 1878h
.text:00001878 ; COMDAT (pick any)
.text:00001878                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001878
.text:00001878 ; =============== S U B R O U T I N E =======================================
.text:00001878
.text:00001878 ; Attributes: bp-based frame
.text:00001878
.text:00001878 ; public: __thiscall CMyComPtr<struct IOutStream>::CMyComPtr<struct IOutStream>(struct IOutStream *)
.text:00001878                 public ??0?$CMyComPtr@UIOutStream@@@@QAE@PAUIOutStream@@@Z
.text:00001878 ??0?$CMyComPtr@UIOutStream@@@@QAE@PAUIOutStream@@@Z proc near
.text:00001878                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+8Ep
.text:00001878
.text:00001878 var_4           = dword ptr -4
.text:00001878 arg_0           = dword ptr  8
.text:00001878
.text:00001878                 push    ebp
.text:00001879                 mov     ebp, esp
.text:0000187B                 push    ecx
.text:0000187C                 push    esi
.text:0000187D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001884                 mov     [ebp+var_4], ecx
.text:00001887                 mov     eax, [ebp+var_4]
.text:0000188A                 mov     ecx, [ebp+arg_0]
.text:0000188D                 mov     [eax], ecx
.text:0000188F                 cmp     [ebp+arg_0], 0
.text:00001893                 jz      short loc_18AC
.text:00001895                 mov     edx, [ebp+arg_0]
.text:00001898                 mov     eax, [edx]
.text:0000189A                 mov     esi, esp
.text:0000189C                 mov     ecx, [ebp+arg_0]
.text:0000189F                 push    ecx
.text:000018A0                 mov     edx, [eax+4]
.text:000018A3                 call    edx
.text:000018A5                 cmp     esi, esp
.text:000018A7                 call    __RTC_CheckEsp
.text:000018AC
.text:000018AC loc_18AC:                               ; CODE XREF: CMyComPtr<IOutStream>::CMyComPtr<IOutStream>(IOutStream *)+1Bj
.text:000018AC                 mov     eax, [ebp+var_4]
.text:000018AF                 pop     esi
.text:000018B0                 add     esp, 4
.text:000018B3                 cmp     ebp, esp
.text:000018B5                 call    __RTC_CheckEsp
.text:000018BA                 mov     esp, ebp
.text:000018BC                 pop     ebp
.text:000018BD                 retn    4
.text:000018BD ??0?$CMyComPtr@UIOutStream@@@@QAE@PAUIOutStream@@@Z endp
.text:000018BD
.text:000018BD _text           ends
.text:000018BD
.text:000018C0 ; ===========================================================================
.text:000018C0
.text:000018C0 ; Segment type: Pure code
.text:000018C0 ; Segment permissions: Read/Execute
.text:000018C0 _text           segment para public 'CODE' use32
.text:000018C0                 assume cs:_text
.text:000018C0                 ;org 18C0h
.text:000018C0 ; COMDAT (pick any)
.text:000018C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000018C0
.text:000018C0 ; =============== S U B R O U T I N E =======================================
.text:000018C0
.text:000018C0 ; Attributes: bp-based frame
.text:000018C0
.text:000018C0 ; public: __thiscall CMyComPtr<struct IOutStream>::~CMyComPtr<struct IOutStream>(void)
.text:000018C0                 public ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
.text:000018C0 ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ proc near
.text:000018C0                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+E2p
.text:000018C0                                         ; __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$1+3j ...
.text:000018C0
.text:000018C0 var_4           = dword ptr -4
.text:000018C0
.text:000018C0                 push    ebp
.text:000018C1                 mov     ebp, esp
.text:000018C3                 push    ecx
.text:000018C4                 push    esi
.text:000018C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018CC                 mov     [ebp+var_4], ecx
.text:000018CF                 mov     eax, [ebp+var_4]
.text:000018D2                 cmp     dword ptr [eax], 0
.text:000018D5                 jz      short loc_18F2
.text:000018D7                 mov     ecx, [ebp+var_4]
.text:000018DA                 mov     edx, [ecx]
.text:000018DC                 mov     eax, [ebp+var_4]
.text:000018DF                 mov     ecx, [eax]
.text:000018E1                 mov     edx, [edx]
.text:000018E3                 mov     esi, esp
.text:000018E5                 push    ecx
.text:000018E6                 mov     eax, [edx+8]
.text:000018E9                 call    eax
.text:000018EB                 cmp     esi, esp
.text:000018ED                 call    __RTC_CheckEsp
.text:000018F2
.text:000018F2 loc_18F2:                               ; CODE XREF: CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>(void)+15j
.text:000018F2                 pop     esi
.text:000018F3                 add     esp, 4
.text:000018F6                 cmp     ebp, esp
.text:000018F8                 call    __RTC_CheckEsp
.text:000018FD                 mov     esp, ebp
.text:000018FF                 pop     ebp
.text:00001900                 retn
.text:00001900 ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ endp
.text:00001900
.text:00001900 ; ---------------------------------------------------------------------------
.text:00001901                 align 4
.text:00001901 _text           ends
.text:00001901
.text:00001904 ; ===========================================================================
.text:00001904
.text:00001904 ; Segment type: Pure code
.text:00001904 ; Segment permissions: Read/Execute
.text:00001904 _text           segment para public 'CODE' use32
.text:00001904                 assume cs:_text
.text:00001904                 ;org 1904h
.text:00001904 ; COMDAT (pick any)
.text:00001904                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001904
.text:00001904 ; =============== S U B R O U T I N E =======================================
.text:00001904
.text:00001904 ; Attributes: bp-based frame
.text:00001904
.text:00001904 ; public: __thiscall CMyComPtr<struct IOutStream>::operator struct IOutStream *(void)const
.text:00001904                 public ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:00001904 ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:00001904                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+BDp
.text:00001904                                         ; NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+3Cp
.text:00001904
.text:00001904 var_4           = dword ptr -4
.text:00001904
.text:00001904                 push    ebp
.text:00001905                 mov     ebp, esp
.text:00001907                 push    ecx
.text:00001908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000190F                 mov     [ebp+var_4], ecx
.text:00001912                 mov     eax, [ebp+var_4]
.text:00001915                 mov     eax, [eax]
.text:00001917                 mov     esp, ebp
.text:00001919                 pop     ebp
.text:0000191A                 retn
.text:0000191A ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:0000191A
.text:0000191A ; ---------------------------------------------------------------------------
.text:0000191B                 align 4
.text:0000191B _text           ends
.text:0000191B
.text:0000191C ; ===========================================================================
.text:0000191C
.text:0000191C ; Segment type: Pure code
.text:0000191C ; Segment permissions: Read/Execute
.text:0000191C _text           segment para public 'CODE' use32
.text:0000191C                 assume cs:_text
.text:0000191C                 ;org 191Ch
.text:0000191C ; COMDAT (pick any)
.text:0000191C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000191C
.text:0000191C ; =============== S U B R O U T I N E =======================================
.text:0000191C
.text:0000191C ; Attributes: bp-based frame
.text:0000191C
.text:0000191C ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator->(void)const
.text:0000191C                 public ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:0000191C ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:0000191C                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+70p
.text:0000191C                                         ; NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)+21p
.text:0000191C
.text:0000191C var_4           = dword ptr -4
.text:0000191C
.text:0000191C                 push    ebp
.text:0000191D                 mov     ebp, esp
.text:0000191F                 push    ecx
.text:00001920                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001927                 mov     [ebp+var_4], ecx
.text:0000192A                 mov     eax, [ebp+var_4]
.text:0000192D                 mov     eax, [eax]
.text:0000192F                 mov     esp, ebp
.text:00001931                 pop     ebp
.text:00001932                 retn
.text:00001932 ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:00001932
.text:00001932 ; ---------------------------------------------------------------------------
.text:00001933                 align 4
.text:00001933 _text           ends
.text:00001933
.text:00001934 ; ===========================================================================
.text:00001934
.text:00001934 ; Segment type: Pure code
.text:00001934 ; Segment permissions: Read/Execute
.text:00001934 _text           segment para public 'CODE' use32
.text:00001934                 assume cs:_text
.text:00001934                 ;org 1934h
.text:00001934 ; COMDAT (pick any)
.text:00001934                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001934
.text:00001934 ; =============== S U B R O U T I N E =======================================
.text:00001934
.text:00001934 ; Attributes: bp-based frame
.text:00001934
.text:00001934 ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator=(struct IOutStream *)
.text:00001934                 public ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z
.text:00001934 ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z proc near
.text:00001934                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+4Ep
.text:00001934
.text:00001934 var_4           = dword ptr -4
.text:00001934 arg_0           = dword ptr  8
.text:00001934
.text:00001934                 push    ebp
.text:00001935                 mov     ebp, esp
.text:00001937                 push    ecx
.text:00001938                 push    esi
.text:00001939                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001940                 mov     [ebp+var_4], ecx
.text:00001943                 cmp     [ebp+arg_0], 0
.text:00001947                 jz      short loc_1960
.text:00001949                 mov     eax, [ebp+arg_0]
.text:0000194C                 mov     ecx, [eax]
.text:0000194E                 mov     esi, esp
.text:00001950                 mov     edx, [ebp+arg_0]
.text:00001953                 push    edx
.text:00001954                 mov     eax, [ecx+4]
.text:00001957                 call    eax
.text:00001959                 cmp     esi, esp
.text:0000195B                 call    __RTC_CheckEsp
.text:00001960
.text:00001960 loc_1960:                               ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+13j
.text:00001960                 mov     ecx, [ebp+var_4]
.text:00001963                 cmp     dword ptr [ecx], 0
.text:00001966                 jz      short loc_1983
.text:00001968                 mov     edx, [ebp+var_4]
.text:0000196B                 mov     eax, [edx]
.text:0000196D                 mov     ecx, [ebp+var_4]
.text:00001970                 mov     edx, [ecx]
.text:00001972                 mov     eax, [eax]
.text:00001974                 mov     esi, esp
.text:00001976                 push    edx
.text:00001977                 mov     ecx, [eax+8]
.text:0000197A                 call    ecx
.text:0000197C                 cmp     esi, esp
.text:0000197E                 call    __RTC_CheckEsp
.text:00001983
.text:00001983 loc_1983:                               ; CODE XREF: CMyComPtr<IOutStream>::operator=(IOutStream *)+32j
.text:00001983                 mov     edx, [ebp+var_4]
.text:00001986                 mov     eax, [ebp+arg_0]
.text:00001989                 mov     [edx], eax
.text:0000198B                 mov     eax, [ebp+arg_0]
.text:0000198E                 pop     esi
.text:0000198F                 add     esp, 4
.text:00001992                 cmp     ebp, esp
.text:00001994                 call    __RTC_CheckEsp
.text:00001999                 mov     esp, ebp
.text:0000199B                 pop     ebp
.text:0000199C                 retn    4
.text:0000199C ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z endp
.text:0000199C
.text:0000199C ; ---------------------------------------------------------------------------
.text:0000199F                 align 10h
.text:0000199F _text           ends
.text:0000199F
.text:000019A0 ; ===========================================================================
.text:000019A0
.text:000019A0 ; Segment type: Pure code
.text:000019A0 ; Segment permissions: Read/Execute
.text:000019A0 _text           segment para public 'CODE' use32
.text:000019A0                 assume cs:_text
.text:000019A0                 ;org 19A0h
.text:000019A0 ; COMDAT (pick any)
.text:000019A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019A0
.text:000019A0 ; =============== S U B R O U T I N E =======================================
.text:000019A0
.text:000019A0 ; Attributes: bp-based frame
.text:000019A0
.text:000019A0 ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::Detach(void)
.text:000019A0                 public ?Detach@?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@XZ
.text:000019A0 ?Detach@?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@XZ proc near
.text:000019A0                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+CEp
.text:000019A0
.text:000019A0 var_8           = dword ptr -8
.text:000019A0 var_4           = dword ptr -4
.text:000019A0
.text:000019A0                 push    ebp
.text:000019A1                 mov     ebp, esp
.text:000019A3                 sub     esp, 8
.text:000019A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000019AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019B4                 mov     [ebp+var_4], ecx
.text:000019B7                 mov     eax, [ebp+var_4]
.text:000019BA                 mov     ecx, [eax]
.text:000019BC                 mov     [ebp+var_8], ecx
.text:000019BF                 mov     edx, [ebp+var_4]
.text:000019C2                 mov     dword ptr [edx], 0
.text:000019C8                 mov     eax, [ebp+var_8]
.text:000019CB                 mov     esp, ebp
.text:000019CD                 pop     ebp
.text:000019CE                 retn
.text:000019CE ?Detach@?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@XZ endp
.text:000019CE
.text:000019CE ; ---------------------------------------------------------------------------
.text:000019CF                 align 10h
.text:000019CF _text           ends
.text:000019CF
.text:000019D0 ; ===========================================================================
.text:000019D0
.text:000019D0 ; Segment type: Pure code
.text:000019D0 ; Segment permissions: Read/Execute
.text:000019D0 _text           segment para public 'CODE' use32
.text:000019D0                 assume cs:_text
.text:000019D0                 ;org 19D0h
.text:000019D0 ; COMDAT (pick any)
.text:000019D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019D0
.text:000019D0 ; =============== S U B R O U T I N E =======================================
.text:000019D0
.text:000019D0 ; Attributes: bp-based frame
.text:000019D0
.text:000019D0 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:000019D0                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:000019D0 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+8Dp
.text:000019D0                                         ; NArchive::NZip::COutArchive::WriteCentralHeader(NArchive::NZip::CItemOut const &)+37Bp ...
.text:000019D0
.text:000019D0 var_4           = dword ptr -4
.text:000019D0
.text:000019D0                 push    ebp
.text:000019D1                 mov     ebp, esp
.text:000019D3                 push    ecx
.text:000019D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019DB                 mov     [ebp+var_4], ecx
.text:000019DE                 mov     eax, [ebp+var_4]
.text:000019E1                 mov     eax, [eax]
.text:000019E3                 mov     esp, ebp
.text:000019E5                 pop     ebp
.text:000019E6                 retn
.text:000019E6 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:000019E6
.text:000019E6 ; ---------------------------------------------------------------------------
.text:000019E7                 align 4
.text:000019E7 _text           ends
.text:000019E7
.text:000019E8 ; ===========================================================================
.text:000019E8
.text:000019E8 ; Segment type: Pure code
.text:000019E8 ; Segment permissions: Read/Execute
.text:000019E8 _text           segment para public 'CODE' use32
.text:000019E8                 assume cs:_text
.text:000019E8                 ;org 19E8h
.text:000019E8 ; COMDAT (pick any)
.text:000019E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019E8
.text:000019E8 ; =============== S U B R O U T I N E =======================================
.text:000019E8
.text:000019E8 ; Attributes: bp-based frame
.text:000019E8
.text:000019E8 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:000019E8                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:000019E8 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+6Dp
.text:000019E8                                         ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+81p ...
.text:000019E8
.text:000019E8 var_4           = dword ptr -4
.text:000019E8
.text:000019E8                 push    ebp
.text:000019E9                 mov     ebp, esp
.text:000019EB                 push    ecx
.text:000019EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019F3                 mov     [ebp+var_4], ecx
.text:000019F6                 mov     eax, [ebp+var_4]
.text:000019F9                 mov     eax, [eax+4]
.text:000019FC                 mov     esp, ebp
.text:000019FE                 pop     ebp
.text:000019FF                 retn
.text:000019FF ?Size@?$CBuffer@E@@QBEIXZ endp
.text:000019FF
.text:000019FF _text           ends
.text:000019FF
.text:00001A00 ; ===========================================================================
.text:00001A00
.text:00001A00 ; Segment type: Pure code
.text:00001A00 ; Segment permissions: Read/Execute
.text:00001A00 _text           segment para public 'CODE' use32
.text:00001A00                 assume cs:_text
.text:00001A00                 ;org 1A00h
.text:00001A00 ; COMDAT (pick any)
.text:00001A00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A00
.text:00001A00 ; =============== S U B R O U T I N E =======================================
.text:00001A00
.text:00001A00 ; Attributes: bp-based frame
.text:00001A00
.text:00001A00 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Size(void)const
.text:00001A00                 public ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
.text:00001A00 ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ proc near
.text:00001A00                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+21p
.text:00001A00                                         ; NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+3Fp ...
.text:00001A00
.text:00001A00 var_4           = dword ptr -4
.text:00001A00
.text:00001A00                 push    ebp
.text:00001A01                 mov     ebp, esp
.text:00001A03                 push    ecx
.text:00001A04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A0B                 mov     [ebp+var_4], ecx
.text:00001A0E                 mov     ecx, [ebp+var_4]
.text:00001A11                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001A16                 add     esp, 4
.text:00001A19                 cmp     ebp, esp
.text:00001A1B                 call    __RTC_CheckEsp
.text:00001A20                 mov     esp, ebp
.text:00001A22                 pop     ebp
.text:00001A23                 retn
.text:00001A23 ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ endp
.text:00001A23
.text:00001A23 _text           ends
.text:00001A23
.text:00001A24 ; ===========================================================================
.text:00001A24
.text:00001A24 ; Segment type: Pure code
.text:00001A24 ; Segment permissions: Read/Execute
.text:00001A24 _text           segment para public 'CODE' use32
.text:00001A24                 assume cs:_text
.text:00001A24                 ;org 1A24h
.text:00001A24 ; COMDAT (pick any)
.text:00001A24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A24
.text:00001A24 ; =============== S U B R O U T I N E =======================================
.text:00001A24
.text:00001A24 ; Attributes: bp-based frame
.text:00001A24
.text:00001A24 ; public: struct NArchive::NZip::CExtraSubBlock const & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator[](unsigned int)const
.text:00001A24                 public ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
.text:00001A24 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z proc near
.text:00001A24                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteExtra(NArchive::NZip::CExtraBlock const &)+50p
.text:00001A24                                         ; NArchive::NZip::CExtraBlock::GetSize(void)+4Bp
.text:00001A24
.text:00001A24 var_4           = dword ptr -4
.text:00001A24 arg_0           = dword ptr  8
.text:00001A24
.text:00001A24                 push    ebp
.text:00001A25                 mov     ebp, esp
.text:00001A27                 push    ecx
.text:00001A28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A2F                 mov     [ebp+var_4], ecx
.text:00001A32                 mov     eax, [ebp+arg_0]
.text:00001A35                 push    eax
.text:00001A36                 mov     ecx, [ebp+var_4]
.text:00001A39                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00001A3E                 mov     eax, [eax]
.text:00001A40                 add     esp, 4
.text:00001A43                 cmp     ebp, esp
.text:00001A45                 call    __RTC_CheckEsp
.text:00001A4A                 mov     esp, ebp
.text:00001A4C                 pop     ebp
.text:00001A4D                 retn    4
.text:00001A4D ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z endp
.text:00001A4D
.text:00001A4D _text           ends
.text:00001A4D
.text:00001A50 ; ===========================================================================
.text:00001A50
.text:00001A50 ; Segment type: Pure code
.text:00001A50 ; Segment permissions: Read/Execute
.text:00001A50 _text           segment para public 'CODE' use32
.text:00001A50                 assume cs:_text
.text:00001A50                 ;org 1A50h
.text:00001A50 ; COMDAT (pick any)
.text:00001A50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A50
.text:00001A50 ; =============== S U B R O U T I N E =======================================
.text:00001A50
.text:00001A50 ; Attributes: bp-based frame
.text:00001A50
.text:00001A50 ; public: unsigned int __thiscall CObjectVector<class NArchive::NZip::CItemOut>::Size(void)const
.text:00001A50                 public ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ
.text:00001A50 ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ proc near
.text:00001A50                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+46p
.text:00001A50                                         ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+CEp ...
.text:00001A50
.text:00001A50 var_4           = dword ptr -4
.text:00001A50
.text:00001A50                 push    ebp
.text:00001A51                 mov     ebp, esp
.text:00001A53                 push    ecx
.text:00001A54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A5B                 mov     [ebp+var_4], ecx
.text:00001A5E                 mov     ecx, [ebp+var_4]
.text:00001A61                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001A66                 add     esp, 4
.text:00001A69                 cmp     ebp, esp
.text:00001A6B                 call    __RTC_CheckEsp
.text:00001A70                 mov     esp, ebp
.text:00001A72                 pop     ebp
.text:00001A73                 retn
.text:00001A73 ?Size@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEIXZ endp
.text:00001A73
.text:00001A73 _text           ends
.text:00001A73
.text:00001A74 ; ===========================================================================
.text:00001A74
.text:00001A74 ; Segment type: Pure code
.text:00001A74 ; Segment permissions: Read/Execute
.text:00001A74 _text           segment para public 'CODE' use32
.text:00001A74                 assume cs:_text
.text:00001A74                 ;org 1A74h
.text:00001A74 ; COMDAT (pick any)
.text:00001A74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A74
.text:00001A74 ; =============== S U B R O U T I N E =======================================
.text:00001A74
.text:00001A74 ; Attributes: bp-based frame
.text:00001A74
.text:00001A74 ; public: class NArchive::NZip::CItemOut const & __thiscall CObjectVector<class NArchive::NZip::CItemOut>::operator[](unsigned int)const
.text:00001A74                 public ??A?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEABVCItemOut@NZip@NArchive@@I@Z
.text:00001A74 ??A?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEABVCItemOut@NZip@NArchive@@I@Z proc near
.text:00001A74                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+57p
.text:00001A74
.text:00001A74 var_4           = dword ptr -4
.text:00001A74 arg_0           = dword ptr  8
.text:00001A74
.text:00001A74                 push    ebp
.text:00001A75                 mov     ebp, esp
.text:00001A77                 push    ecx
.text:00001A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A7F                 mov     [ebp+var_4], ecx
.text:00001A82                 mov     eax, [ebp+arg_0]
.text:00001A85                 push    eax
.text:00001A86                 mov     ecx, [ebp+var_4]
.text:00001A89                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00001A8E                 mov     eax, [eax]
.text:00001A90                 add     esp, 4
.text:00001A93                 cmp     ebp, esp
.text:00001A95                 call    __RTC_CheckEsp
.text:00001A9A                 mov     esp, ebp
.text:00001A9C                 pop     ebp
.text:00001A9D                 retn    4
.text:00001A9D ??A?$CObjectVector@VCItemOut@NZip@NArchive@@@@QBEABVCItemOut@NZip@NArchive@@I@Z endp
.text:00001A9D
.text:00001A9D _text           ends
.text:00001A9D
.text:00001AA0 ; ===========================================================================
.text:00001AA0
.text:00001AA0 ; Segment type: Pure code
.text:00001AA0 ; Segment permissions: Read/Execute
.text:00001AA0 _text           segment para public 'CODE' use32
.text:00001AA0                 assume cs:_text
.text:00001AA0                 ;org 1AA0h
.text:00001AA0 ; COMDAT (pick any)
.text:00001AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001AA0
.text:00001AA0 ; =============== S U B R O U T I N E =======================================
.text:00001AA0
.text:00001AA0 ; Attributes: bp-based frame
.text:00001AA0
.text:00001AA0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:00001AA0                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:00001AA0 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:00001AA0                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+45p
.text:00001AA0
.text:00001AA0 var_4           = dword ptr -4
.text:00001AA0 arg_0           = dword ptr  8
.text:00001AA0
.text:00001AA0                 push    ebp
.text:00001AA1                 mov     ebp, esp
.text:00001AA3                 push    ecx
.text:00001AA4                 push    esi
.text:00001AA5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AAC                 mov     [ebp+var_4], ecx
.text:00001AAF                 mov     eax, [ebp+var_4]
.text:00001AB2                 mov     ecx, [ebp+arg_0]
.text:00001AB5                 mov     [eax], ecx
.text:00001AB7                 cmp     [ebp+arg_0], 0
.text:00001ABB                 jz      short loc_1AD4
.text:00001ABD                 mov     edx, [ebp+arg_0]
.text:00001AC0                 mov     eax, [edx]
.text:00001AC2                 mov     esi, esp
.text:00001AC4                 mov     ecx, [ebp+arg_0]
.text:00001AC7                 push    ecx
.text:00001AC8                 mov     edx, [eax+4]
.text:00001ACB                 call    edx
.text:00001ACD                 cmp     esi, esp
.text:00001ACF                 call    __RTC_CheckEsp
.text:00001AD4
.text:00001AD4 loc_1AD4:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:00001AD4                 mov     eax, [ebp+var_4]
.text:00001AD7                 pop     esi
.text:00001AD8                 add     esp, 4
.text:00001ADB                 cmp     ebp, esp
.text:00001ADD                 call    __RTC_CheckEsp
.text:00001AE2                 mov     esp, ebp
.text:00001AE4                 pop     ebp
.text:00001AE5                 retn    4
.text:00001AE5 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00001AE5
.text:00001AE5 _text           ends
.text:00001AE5
.text:00001AE8 ; ===========================================================================
.text:00001AE8
.text:00001AE8 ; Segment type: Pure code
.text:00001AE8 ; Segment permissions: Read/Execute
.text:00001AE8 _text           segment para public 'CODE' use32
.text:00001AE8                 assume cs:_text
.text:00001AE8                 ;org 1AE8h
.text:00001AE8 ; COMDAT (pick any)
.text:00001AE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001AE8
.text:00001AE8 ; =============== S U B R O U T I N E =======================================
.text:00001AE8
.text:00001AE8 ; Attributes: bp-based frame
.text:00001AE8
.text:00001AE8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00001AE8                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00001AE8 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00001AE8                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+68p
.text:00001AE8                                         ; __unwindfunclet$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z$0+3j
.text:00001AE8
.text:00001AE8 var_4           = dword ptr -4
.text:00001AE8
.text:00001AE8                 push    ebp
.text:00001AE9                 mov     ebp, esp
.text:00001AEB                 push    ecx
.text:00001AEC                 push    esi
.text:00001AED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AF4                 mov     [ebp+var_4], ecx
.text:00001AF7                 mov     eax, [ebp+var_4]
.text:00001AFA                 cmp     dword ptr [eax], 0
.text:00001AFD                 jz      short loc_1B1A
.text:00001AFF                 mov     ecx, [ebp+var_4]
.text:00001B02                 mov     edx, [ecx]
.text:00001B04                 mov     eax, [ebp+var_4]
.text:00001B07                 mov     ecx, [eax]
.text:00001B09                 mov     edx, [edx]
.text:00001B0B                 mov     esi, esp
.text:00001B0D                 push    ecx
.text:00001B0E                 mov     eax, [edx+8]
.text:00001B11                 call    eax
.text:00001B13                 cmp     esi, esp
.text:00001B15                 call    __RTC_CheckEsp
.text:00001B1A
.text:00001B1A loc_1B1A:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00001B1A                 pop     esi
.text:00001B1B                 add     esp, 4
.text:00001B1E                 cmp     ebp, esp
.text:00001B20                 call    __RTC_CheckEsp
.text:00001B25                 mov     esp, ebp
.text:00001B27                 pop     ebp
.text:00001B28                 retn
.text:00001B28 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00001B28
.text:00001B28 ; ---------------------------------------------------------------------------
.text:00001B29                 align 4
.text:00001B29 _text           ends
.text:00001B29
.text:00001B2C ; ===========================================================================
.text:00001B2C
.text:00001B2C ; Segment type: Pure code
.text:00001B2C ; Segment permissions: Read/Execute
.text:00001B2C _text           segment para public 'CODE' use32
.text:00001B2C                 assume cs:_text
.text:00001B2C                 ;org 1B2Ch
.text:00001B2C ; COMDAT (pick any)
.text:00001B2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B2C
.text:00001B2C ; =============== S U B R O U T I N E =======================================
.text:00001B2C
.text:00001B2C ; Attributes: bp-based frame
.text:00001B2C
.text:00001B2C ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::Detach(void)
.text:00001B2C                 public ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
.text:00001B2C ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ proc near
.text:00001B2C                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+54p
.text:00001B2C
.text:00001B2C var_8           = dword ptr -8
.text:00001B2C var_4           = dword ptr -4
.text:00001B2C
.text:00001B2C                 push    ebp
.text:00001B2D                 mov     ebp, esp
.text:00001B2F                 sub     esp, 8
.text:00001B32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001B39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B40                 mov     [ebp+var_4], ecx
.text:00001B43                 mov     eax, [ebp+var_4]
.text:00001B46                 mov     ecx, [eax]
.text:00001B48                 mov     [ebp+var_8], ecx
.text:00001B4B                 mov     edx, [ebp+var_4]
.text:00001B4E                 mov     dword ptr [edx], 0
.text:00001B54                 mov     eax, [ebp+var_8]
.text:00001B57                 mov     esp, ebp
.text:00001B59                 pop     ebp
.text:00001B5A                 retn
.text:00001B5A ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ endp
.text:00001B5A
.text:00001B5A ; ---------------------------------------------------------------------------
.text:00001B5B                 align 4
.text:00001B5B _text           ends
.text:00001B5B
.text:00001B5C ; ===========================================================================
.text:00001B5C
.text:00001B5C ; Segment type: Pure code
.text:00001B5C ; Segment permissions: Read/Execute
.text:00001B5C _text           segment para public 'CODE' use32
.text:00001B5C                 assume cs:_text
.text:00001B5C                 ;org 1B5Ch
.text:00001B5C ; COMDAT (pick any)
.text:00001B5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B5C
.text:00001B5C ; =============== S U B R O U T I N E =======================================
.text:00001B5C
.text:00001B5C ; Attributes: bp-based frame
.text:00001B5C
.text:00001B5C ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00001B5C                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00001B5C ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00001B5C                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)+11p
.text:00001B5C                                         ; CObjectVector<NArchive::NZip::CItemOut>::Size(void)+11p
.text:00001B5C
.text:00001B5C var_4           = dword ptr -4
.text:00001B5C
.text:00001B5C                 push    ebp
.text:00001B5D                 mov     ebp, esp
.text:00001B5F                 push    ecx
.text:00001B60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B67                 mov     [ebp+var_4], ecx
.text:00001B6A                 mov     eax, [ebp+var_4]
.text:00001B6D                 mov     eax, [eax+4]
.text:00001B70                 mov     esp, ebp
.text:00001B72                 pop     ebp
.text:00001B73                 retn
.text:00001B73 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00001B73
.text:00001B73 _text           ends
.text:00001B73
.text:00001B74 ; ===========================================================================
.text:00001B74
.text:00001B74 ; Segment type: Pure code
.text:00001B74 ; Segment permissions: Read/Execute
.text:00001B74 _text           segment para public 'CODE' use32
.text:00001B74                 assume cs:_text
.text:00001B74                 ;org 1B74h
.text:00001B74 ; COMDAT (pick any)
.text:00001B74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B74
.text:00001B74 ; =============== S U B R O U T I N E =======================================
.text:00001B74
.text:00001B74 ; Attributes: bp-based frame
.text:00001B74
.text:00001B74 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00001B74                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00001B74 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00001B74                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)+15p
.text:00001B74                                         ; CObjectVector<NArchive::NZip::CItemOut>::operator[](uint)+15p
.text:00001B74
.text:00001B74 var_4           = dword ptr -4
.text:00001B74 arg_0           = dword ptr  8
.text:00001B74
.text:00001B74                 push    ebp
.text:00001B75                 mov     ebp, esp
.text:00001B77                 push    ecx
.text:00001B78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B7F                 mov     [ebp+var_4], ecx
.text:00001B82                 mov     eax, [ebp+var_4]
.text:00001B85                 mov     ecx, [eax]
.text:00001B87                 mov     edx, [ebp+arg_0]
.text:00001B8A                 lea     eax, [ecx+edx*4]
.text:00001B8D                 mov     esp, ebp
.text:00001B8F                 pop     ebp
.text:00001B90                 retn    4
.text:00001B90 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00001B90
.text:00001B90 _text           ends
.text:00001B90
UNDEF:00001BA0 ; ===========================================================================
UNDEF:00001BA0
UNDEF:00001BA0 ; Segment type: Externs
UNDEF:00001BA0 ; UNDEF
UNDEF:00001BA0 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00001BA0                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00001BA0                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+68p
UNDEF:00001BA4 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00001BA4                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00001BA4                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+34p
UNDEF:00001BA8                 extrn __RTC_CheckEsp:near
UNDEF:00001BA8                                         ; CODE XREF: NArchive::NZip::COutArchive::Create(IOutStream *)+97p
UNDEF:00001BA8                                         ; NArchive::NZip::COutArchive::Create(IOutStream *)+A2p ...
UNDEF:00001BAC                 extrn __RTC_Shutdown:near
UNDEF:00001BAC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001BB0                 extrn __RTC_InitBase:near
UNDEF:00001BB0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001BB4 ; __stdcall _CxxThrowException(x, x)
UNDEF:00001BB4                 extrn __CxxThrowException@8:near
UNDEF:00001BB4                                         ; CODE XREF: NArchive::NZip::COutArchive::SeekToRelatPos(unsigned __int64)+78p
UNDEF:00001BB4                                         ; NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+13Ap
UNDEF:00001BB8 ; const type_info::`vftable'
UNDEF:00001BB8                 extrn ??_7type_info@@6B@:near
UNDEF:00001BB8                                         ; DATA XREF: .data:CSystemException `RTTI Type Descriptor'o
UNDEF:00001BB8                                         ; .data:COffsetOutStream `RTTI Type Descriptor'o ...
UNDEF:00001BBC ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00001BBC                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00001BBC                                         ; CODE XREF: NArchive::NZip::COutArchive::WriteLocalHeader(NArchive::NZip::CLocalItem const &)+1C6p
UNDEF:00001BBC                                         ; NArchive::NZip::COutArchive::WriteCentralDir(CObjectVector<NArchive::NZip::CItemOut> const &,CBuffer<uchar> const *)+2DBp ...
UNDEF:00001BC0                 extrn __aullshr:near    ; CODE XREF: NArchive::NZip::COutArchive::Write64(unsigned __int64)+44p
UNDEF:00001BC4 ; void __cdecl operator delete(void *)
UNDEF:00001BC4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z$0+4p
UNDEF:00001BC4                                         ; COffsetOutStream::`scalar deleting destructor'(uint)+22p
UNDEF:00001BC8 ; __int32 __thiscall COffsetOutStream::Init(COffsetOutStream *__hidden this, struct IOutStream *, unsigned __int64)
UNDEF:00001BC8                 extrn ?Init@COffsetOutStream@@QAEJPAUIOutStream@@_K@Z:near
UNDEF:00001BC8                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+C6p
UNDEF:00001BCC ; void *__cdecl operator new(unsigned int)
UNDEF:00001BCC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+48p
UNDEF:00001BD0                 extrn ___security_cookie:near
UNDEF:00001BD0                                         ; DATA XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+32r
UNDEF:00001BD0                                         ; NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+25r
UNDEF:00001BD4                 extrn ___CxxFrameHandler3:near
UNDEF:00001BD4                                         ; CODE XREF: __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z+16j
UNDEF:00001BD4                                         ; __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z+16j
UNDEF:00001BD8 ; __fastcall __security_check_cookie(x)
UNDEF:00001BD8                 extrn @__security_check_cookie@4:near
UNDEF:00001BD8                                         ; CODE XREF: __ehhandler$?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z+Cp
UNDEF:00001BD8                                         ; __ehhandler$?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z+Cp
UNDEF:00001BDC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001BDC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001BDC                                         ; CODE XREF: NArchive::NZip::COutArchive::CreateStreamForCompressing(IOutStream * *)+F1p
UNDEF:00001BDC                                         ; NArchive::NZip::COutArchive::CreateStreamForCopying(ISequentialOutStream * *)+77p
UNDEF:00001BE0 ; public: virtual long __stdcall COffsetOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00001BE0                 extrn ?Write@COffsetOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00001BE0                                         ; DATA XREF: .rdata:000013E0o
UNDEF:00001BE4 ; public: virtual long __stdcall COffsetOutStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:00001BE4                 extrn ?Seek@COffsetOutStream@@UAGJ_JIPA_K@Z:near
UNDEF:00001BE4                                         ; DATA XREF: .rdata:000013E4o
UNDEF:00001BE8 ; public: virtual long __stdcall COffsetOutStream::SetSize(unsigned __int64)
UNDEF:00001BE8                 extrn ?SetSize@COffsetOutStream@@UAGJ_K@Z:near
UNDEF:00001BE8                                         ; DATA XREF: .rdata:000013E8o
UNDEF:00001BEC ; const IID IID_IUnknown
UNDEF:00001BEC                 extrn _IID_IUnknown:near
UNDEF:00001BEC                                         ; DATA XREF: COffsetOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00001BF0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001BF0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001BF4                 extrn __purecall:near   ; DATA XREF: .rdata:const IOutStream::`vftable'o
UNDEF:00001BF4                                         ; .rdata:000017C0o ...
UNDEF:00001BF4
UNDEF:00001BF4
UNDEF:00001BF4                 end