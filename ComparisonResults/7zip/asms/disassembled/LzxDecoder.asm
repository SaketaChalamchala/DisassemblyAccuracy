.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C1E183C520BB56BB998AE539F9C618E5
.text:00000000 ; Input CRC32 : C2235B00
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzxDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NLzx::CDecoder::CDecoder(NCompress::NLzx::CDecoder *this, bool)
.text:00000000                 public ??0CDecoder@NLzx@NCompress@@QAE@_N@Z
.text:00000000 ??0CDecoder@NLzx@NCompress@@QAE@_N@Z proc near
.text:00000000
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = byte ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$??0CDecoder@NLzx@NCompress@@QAE@_N@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 10h
.text:00000014                 mov     eax, 0CCCCCCCCh
.text:00000019                 mov     [ebp+var_1C], eax
.text:0000001C                 mov     [ebp+var_18], eax
.text:0000001F                 mov     [ebp+var_14], eax
.text:00000022                 mov     [ebp+var_10], eax
.text:00000025                 mov     eax, dword ptr ds:___security_cookie
.text:0000002A                 xor     eax, ebp
.text:0000002C                 push    eax
.text:0000002D                 lea     eax, [ebp+var_C]
.text:00000030                 mov     large fs:0, eax
.text:00000036                 mov     [ebp+var_10], ecx
.text:00000039                 mov     ecx, [ebp+var_10] ; this
.text:0000003C
.text:0000003C loc_3C:                                 ; DATA XREF: .xdata$x:00001214o
.text:0000003C                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000041                 mov     ecx, [ebp+var_10]
.text:00000044                 add     ecx, 4          ; this
.text:00000047                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000004C                 mov     eax, [ebp+var_10]
.text:0000004F                 mov     dword ptr [eax], offset ??_7CDecoder@NLzx@NCompress@@6B@ ; const NCompress::NLzx::CDecoder::`vftable'
.text:00000055                 mov     ecx, [ebp+var_10]
.text:00000058                 add     ecx, 8          ; this
.text:0000005B                 call    ??0CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::NBitStream::CDecoder::CDecoder(void)
.text:00000060                 mov     [ebp+var_4], 0
.text:00000067                 mov     ecx, [ebp+var_10]
.text:0000006A                 add     ecx, 38h ; '8'
.text:0000006D                 call    ??0CLzOutWindow@@QAE@XZ ; CLzOutWindow::CLzOutWindow(void)
.text:00000072                 mov     byte ptr [ebp+var_4], 1
.text:00000076                 mov     ecx, [ebp+var_10]
.text:00000079                 add     ecx, 1CB8h
.text:0000007F                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000084                 mov     byte ptr [ebp+var_4], 2
.text:00000088                 mov     ecx, [ebp+var_10]
.text:0000008B                 mov     byte ptr [ecx+1CC0h], 0
.text:00000092                 mov     edx, [ebp+var_10]
.text:00000095                 mov     byte ptr [edx+1CC8h], 0
.text:0000009C                 mov     eax, [ebp+var_10]
.text:0000009F                 mov     cl, [ebp+arg_0]
.text:000000A2                 mov     [eax+1CC9h], cl
.text:000000A8                 push    801Ch           ; unsigned int
.text:000000AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000000B2                 add     esp, 4
.text:000000B5                 mov     [ebp+var_18], eax
.text:000000B8                 mov     byte ptr [ebp+var_4], 3
.text:000000BC                 cmp     [ebp+var_18], 0
.text:000000C0                 jz      short loc_CF
.text:000000C2                 mov     ecx, [ebp+var_18] ; this
.text:000000C5                 call    ??0Cx86ConvertOutStream@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::Cx86ConvertOutStream::Cx86ConvertOutStream(void)
.text:000000CA                 mov     [ebp+var_1C], eax
.text:000000CD                 jmp     short loc_D6
.text:000000CF ; ---------------------------------------------------------------------------
.text:000000CF
.text:000000CF loc_CF:                                 ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+C0j
.text:000000CF                 mov     [ebp+var_1C], 0
.text:000000D6
.text:000000D6 loc_D6:                                 ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+CDj
.text:000000D6                 mov     edx, [ebp+var_1C]
.text:000000D9                 mov     [ebp+var_14], edx
.text:000000DC                 mov     byte ptr [ebp+var_4], 2
.text:000000E0                 mov     eax, [ebp+var_10]
.text:000000E3                 mov     ecx, [ebp+var_14]
.text:000000E6                 mov     [eax+1CB4h], ecx
.text:000000EC                 mov     edx, [ebp+var_10]
.text:000000EF                 mov     eax, [edx+1CB4h]
.text:000000F5                 push    eax
.text:000000F6                 mov     ecx, [ebp+var_10]
.text:000000F9                 add     ecx, 1CB8h
.text:000000FF                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00000104                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000010B                 mov     eax, [ebp+var_10]
.text:0000010E                 mov     ecx, [ebp+var_C]
.text:00000111                 mov     large fs:0, ecx
.text:00000118                 pop     ecx
.text:00000119                 add     esp, 1Ch
.text:0000011C                 cmp     ebp, esp
.text:0000011E                 call    __RTC_CheckEsp
.text:00000123                 mov     esp, ebp
.text:00000125                 pop     ebp
.text:00000126                 retn    4
.text:00000126 ??0CDecoder@NLzx@NCompress@@QAE@_N@Z endp
.text:00000126
.text:00000126 ; ---------------------------------------------------------------------------
.text:00000129                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; __int32 __stdcall NCompress::NLzx::CDecoder::Flush(NCompress::NLzx::CDecoder *this)
.text:00000130                 public ?Flush@CDecoder@NLzx@NCompress@@UAGJXZ
.text:00000130 ?Flush@CDecoder@NLzx@NCompress@@UAGJXZ proc near
.text:00000130                                         ; DATA XREF: .rdata:00001168o
.text:00000130
.text:00000130 var_4           = dword ptr -4
.text:00000130 this            = dword ptr  8
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 push    ecx
.text:00000134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000013B                 mov     ecx, [ebp+this]
.text:0000013E                 add     ecx, 38h ; '8'  ; this
.text:00000141                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00000146                 mov     [ebp+var_4], eax
.text:00000149                 cmp     [ebp+var_4], 0
.text:0000014D                 jz      short loc_154
.text:0000014F                 mov     eax, [ebp+var_4]
.text:00000152                 jmp     short loc_162
.text:00000154 ; ---------------------------------------------------------------------------
.text:00000154
.text:00000154 loc_154:                                ; CODE XREF: NCompress::NLzx::CDecoder::Flush(void)+1Dj
.text:00000154                 mov     eax, [ebp+this]
.text:00000157                 mov     ecx, [eax+1CB4h] ; this
.text:0000015D                 call    ?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ ; NCompress::NLzx::Cx86ConvertOutStream::Flush(void)
.text:00000162
.text:00000162 loc_162:                                ; CODE XREF: NCompress::NLzx::CDecoder::Flush(void)+22j
.text:00000162                 add     esp, 4
.text:00000165                 cmp     ebp, esp
.text:00000167                 call    __RTC_CheckEsp
.text:0000016C                 mov     esp, ebp
.text:0000016E                 pop     ebp
.text:0000016F                 retn    4
.text:0000016F ?Flush@CDecoder@NLzx@NCompress@@UAGJXZ endp
.text:0000016F
.text:0000016F ; ---------------------------------------------------------------------------
.text:00000172                 align 10h
.text:00000180
.text:00000180 ; =============== S U B R O U T I N E =======================================
.text:00000180
.text:00000180 ; Attributes: bp-based frame
.text:00000180
.text:00000180 ; unsigned int __thiscall NCompress::NLzx::CDecoder::ReadBits(NCompress::NLzx::CDecoder *this, unsigned int)
.text:00000180                 public ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z
.text:00000180 ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z proc near
.text:00000180                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+42p
.text:00000180                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+E1p ...
.text:00000180
.text:00000180 var_4           = dword ptr -4
.text:00000180 arg_0           = dword ptr  8
.text:00000180
.text:00000180                 push    ebp
.text:00000181                 mov     ebp, esp
.text:00000183                 push    ecx
.text:00000184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000018B                 mov     [ebp+var_4], ecx
.text:0000018E                 mov     eax, [ebp+arg_0]
.text:00000191                 push    eax             ; unsigned int
.text:00000192                 mov     ecx, [ebp+var_4]
.text:00000195                 add     ecx, 8          ; this
.text:00000198                 call    ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)
.text:0000019D                 add     esp, 4
.text:000001A0                 cmp     ebp, esp
.text:000001A2                 call    __RTC_CheckEsp
.text:000001A7                 mov     esp, ebp
.text:000001A9                 pop     ebp
.text:000001AA                 retn    4
.text:000001AA ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z endp
.text:000001AA
.text:000001AA ; ---------------------------------------------------------------------------
.text:000001AD                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; bool __thiscall NCompress::NLzx::CDecoder::ReadTable(NCompress::NLzx::CDecoder *this, unsigned __int8 *, unsigned __int8 *, unsigned int)
.text:000001B0                 public ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z
.text:000001B0 ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z proc near
.text:000001B0                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+2A0p
.text:000001B0                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+2CEp ...
.text:000001B0
.text:000001B0 var_34          = dword ptr -34h
.text:000001B0 var_2D          = byte ptr -2Dh
.text:000001B0 var_2C          = dword ptr -2Ch
.text:000001B0 var_28          = dword ptr -28h
.text:000001B0 var_20          = byte ptr -20h
.text:000001B0 var_8           = dword ptr -8
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = dword ptr  8
.text:000001B0 arg_4           = dword ptr  0Ch
.text:000001B0 arg_8           = dword ptr  10h
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 sub     esp, 34h
.text:000001B6                 push    edi
.text:000001B7                 push    ecx
.text:000001B8                 lea     edi, [ebp+var_34]
.text:000001BB                 mov     ecx, 0Dh
.text:000001C0                 mov     eax, 0CCCCCCCCh
.text:000001C5                 rep stosd
.text:000001C7                 pop     ecx
.text:000001C8                 mov     eax, dword ptr ds:___security_cookie
.text:000001CD                 xor     eax, ebp
.text:000001CF                 mov     [ebp+var_4], eax
.text:000001D2                 mov     [ebp+var_8], ecx
.text:000001D5                 mov     [ebp+var_28], 0
.text:000001DC                 jmp     short loc_1E7
.text:000001DE ; ---------------------------------------------------------------------------
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+4Ej
.text:000001DE                 mov     eax, [ebp+var_28]
.text:000001E1                 add     eax, 1
.text:000001E4                 mov     [ebp+var_28], eax
.text:000001E7
.text:000001E7 loc_1E7:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+2Cj
.text:000001E7                 cmp     [ebp+var_28], 14h
.text:000001EB                 jnb     short loc_200
.text:000001ED                 push    4               ; unsigned int
.text:000001EF                 mov     ecx, [ebp+var_8] ; this
.text:000001F2                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000001F7                 mov     ecx, [ebp+var_28]
.text:000001FA                 mov     [ebp+ecx+var_20], al
.text:000001FE                 jmp     short loc_1DE
.text:00000200 ; ---------------------------------------------------------------------------
.text:00000200
.text:00000200 loc_200:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+3Bj
.text:00000200                 lea     edx, [ebp+var_20]
.text:00000203                 push    edx
.text:00000204                 mov     ecx, [ebp+var_8]
.text:00000207                 add     ecx, 1650h
.text:0000020D                 call    ?SetCodeLengths@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)
.text:00000212                 movzx   eax, al
.text:00000215                 test    eax, eax
.text:00000217                 jnz     short loc_220
.text:00000219                 xor     al, al
.text:0000021B                 jmp     loc_336
.text:00000220 ; ---------------------------------------------------------------------------
.text:00000220
.text:00000220 loc_220:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+67j
.text:00000220                 mov     [ebp+var_2C], 0
.text:00000227                 mov     [ebp+var_2D], 0
.text:0000022B                 mov     [ebp+var_28], 0
.text:00000232
.text:00000232 loc_232:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+BCj
.text:00000232                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint):loc_32Fj
.text:00000232                 mov     ecx, [ebp+var_28]
.text:00000235                 cmp     ecx, [ebp+arg_8]
.text:00000238                 jnb     loc_334
.text:0000023E                 cmp     [ebp+var_2C], 0
.text:00000242                 jz      short loc_26E
.text:00000244                 mov     edx, [ebp+arg_4]
.text:00000247                 add     edx, [ebp+var_28]
.text:0000024A                 mov     al, [ebp+var_2D]
.text:0000024D                 mov     [edx], al
.text:0000024F                 mov     ecx, [ebp+arg_0]
.text:00000252                 add     ecx, [ebp+var_28]
.text:00000255                 mov     dl, [ebp+var_2D]
.text:00000258                 mov     [ecx], dl
.text:0000025A                 mov     eax, [ebp+var_28]
.text:0000025D                 add     eax, 1
.text:00000260                 mov     [ebp+var_28], eax
.text:00000263                 mov     ecx, [ebp+var_2C]
.text:00000266                 sub     ecx, 1
.text:00000269                 mov     [ebp+var_2C], ecx
.text:0000026C                 jmp     short loc_232
.text:0000026E ; ---------------------------------------------------------------------------
.text:0000026E
.text:0000026E loc_26E:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+92j
.text:0000026E                 mov     edx, [ebp+var_8]
.text:00000271                 add     edx, 8
.text:00000274                 push    edx             ; NCompress::NLzx::NBitStream::CDecoder *
.text:00000275                 mov     ecx, [ebp+var_8]
.text:00000278                 add     ecx, 1650h
.text:0000027E                 call    ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z ; NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00000283                 mov     [ebp+var_34], eax
.text:00000286                 cmp     [ebp+var_34], 11h
.text:0000028A                 jnz     short loc_2A5
.text:0000028C                 push    4               ; unsigned int
.text:0000028E                 mov     ecx, [ebp+var_8] ; this
.text:00000291                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:00000296                 add     eax, 4
.text:00000299                 mov     [ebp+var_2C], eax
.text:0000029C                 mov     [ebp+var_2D], 0
.text:000002A0                 jmp     loc_32F
.text:000002A5 ; ---------------------------------------------------------------------------
.text:000002A5
.text:000002A5 loc_2A5:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+DAj
.text:000002A5                 cmp     [ebp+var_34], 12h
.text:000002A9                 jnz     short loc_2C1
.text:000002AB                 push    5               ; unsigned int
.text:000002AD                 mov     ecx, [ebp+var_8] ; this
.text:000002B0                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000002B5                 add     eax, 14h
.text:000002B8                 mov     [ebp+var_2C], eax
.text:000002BB                 mov     [ebp+var_2D], 0
.text:000002BF                 jmp     short loc_32F
.text:000002C1 ; ---------------------------------------------------------------------------
.text:000002C1
.text:000002C1 loc_2C1:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+F9j
.text:000002C1                 cmp     [ebp+var_34], 13h
.text:000002C5                 jz      short loc_2CD
.text:000002C7                 cmp     [ebp+var_34], 10h
.text:000002CB                 ja      short loc_32B
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+115j
.text:000002CD                 cmp     [ebp+var_34], 10h
.text:000002D1                 ja      short loc_2DC
.text:000002D3                 mov     [ebp+var_2C], 1
.text:000002DA                 jmp     short loc_30E
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DC
.text:000002DC loc_2DC:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+121j
.text:000002DC                 push    1               ; unsigned int
.text:000002DE                 mov     ecx, [ebp+var_8] ; this
.text:000002E1                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000002E6                 add     eax, 4
.text:000002E9                 mov     [ebp+var_2C], eax
.text:000002EC                 mov     eax, [ebp+var_8]
.text:000002EF                 add     eax, 8
.text:000002F2                 push    eax             ; NCompress::NLzx::NBitStream::CDecoder *
.text:000002F3                 mov     ecx, [ebp+var_8]
.text:000002F6                 add     ecx, 1650h
.text:000002FC                 call    ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z ; NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00000301                 mov     [ebp+var_34], eax
.text:00000304                 cmp     [ebp+var_34], 10h
.text:00000308                 jbe     short loc_30E
.text:0000030A                 xor     al, al
.text:0000030C                 jmp     short loc_336
.text:0000030E ; ---------------------------------------------------------------------------
.text:0000030E
.text:0000030E loc_30E:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+12Aj
.text:0000030E                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+158j
.text:0000030E                 mov     ecx, [ebp+arg_0]
.text:00000311                 add     ecx, [ebp+var_28]
.text:00000314                 movzx   eax, byte ptr [ecx]
.text:00000317                 add     eax, 11h
.text:0000031A                 sub     eax, [ebp+var_34]
.text:0000031D                 xor     edx, edx
.text:0000031F                 mov     ecx, 11h
.text:00000324                 div     ecx
.text:00000326                 mov     [ebp+var_2D], dl
.text:00000329                 jmp     short loc_32F
.text:0000032B ; ---------------------------------------------------------------------------
.text:0000032B
.text:0000032B loc_32B:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+11Bj
.text:0000032B                 xor     al, al
.text:0000032D                 jmp     short loc_336
.text:0000032F ; ---------------------------------------------------------------------------
.text:0000032F
.text:0000032F loc_32F:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+F0j
.text:0000032F                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+10Fj ...
.text:0000032F                 jmp     loc_232
.text:00000334 ; ---------------------------------------------------------------------------
.text:00000334
.text:00000334 loc_334:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+88j
.text:00000334                 mov     al, 1
.text:00000336
.text:00000336 loc_336:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+6Bj
.text:00000336                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+15Cj ...
.text:00000336                 push    edx
.text:00000337                 mov     ecx, ebp
.text:00000339                 push    eax
.text:0000033A                 lea     edx, $LN23
.text:00000340                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000345                 pop     eax
.text:00000346                 pop     edx
.text:00000347                 pop     edi
.text:00000348                 mov     ecx, [ebp+var_4]
.text:0000034B                 xor     ecx, ebp
.text:0000034D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000352                 add     esp, 34h
.text:00000355                 cmp     ebp, esp
.text:00000357                 call    __RTC_CheckEsp
.text:0000035C                 mov     esp, ebp
.text:0000035E                 pop     ebp
.text:0000035F                 retn    0Ch
.text:0000035F ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z endp
.text:0000035F
.text:0000035F ; ---------------------------------------------------------------------------
.text:00000362                 align 4
.text:00000364 $LN23           dd 1                    ; DATA XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+18Ao
.text:00000368                 dd offset $LN22
.text:0000036C $LN22           dd 0FFFFFFE0h, 14h      ; DATA XREF: .text:00000368o
.text:00000374                 dd offset $LN21         ; "levelLevels"
.text:00000378 $LN21           db 'levelLevels',0      ; DATA XREF: .text:00000374o
.text:00000384                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; bool __thiscall NCompress::NLzx::CDecoder::ReadTables(NCompress::NLzx::CDecoder *__hidden this)
.text:00000390                 public ?ReadTables@CDecoder@NLzx@NCompress@@AAE_NXZ
.text:00000390 ?ReadTables@CDecoder@NLzx@NCompress@@AAE_NXZ proc near
.text:00000390                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+197p
.text:00000390
.text:00000390 var_2BC         = dword ptr -2BCh
.text:00000390 var_2B8         = dword ptr -2B8h
.text:00000390 var_2B4         = dword ptr -2B4h
.text:00000390 var_2B0         = dword ptr -2B0h
.text:00000390 var_2AC         = dword ptr -2ACh
.text:00000390 var_2A8         = dword ptr -2A8h
.text:00000390 var_2A4         = dword ptr -2A4h
.text:00000390 var_29C         = byte ptr -29Ch
.text:00000390 var_19C         = byte ptr -19Ch
.text:00000390 var_8           = dword ptr -8
.text:00000390 var_4           = dword ptr -4
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 sub     esp, 2BCh
.text:00000399                 push    edi
.text:0000039A                 push    ecx
.text:0000039B                 lea     edi, [ebp+var_2BC]
.text:000003A1                 mov     ecx, 0AFh ; '»'
.text:000003A6                 mov     eax, 0CCCCCCCCh
.text:000003AB                 rep stosd
.text:000003AD                 pop     ecx
.text:000003AE                 mov     eax, dword ptr ds:___security_cookie
.text:000003B3                 xor     eax, ebp
.text:000003B5                 mov     [ebp+var_4], eax
.text:000003B8                 mov     [ebp+var_8], ecx
.text:000003BB                 mov     eax, [ebp+var_8]
.text:000003BE                 movzx   ecx, byte ptr [eax+1CC8h]
.text:000003C5                 test    ecx, ecx
.text:000003C7                 jz      short loc_3D4
.text:000003C9                 mov     ecx, [ebp+var_8]
.text:000003CC                 add     ecx, 8          ; this
.text:000003CF                 call    ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ ; NCompress::NLzx::NBitStream::CDecoder::DirectReadByte(void)
.text:000003D4
.text:000003D4 loc_3D4:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+37j
.text:000003D4                 mov     ecx, [ebp+var_8]
.text:000003D7                 add     ecx, 8          ; this
.text:000003DA                 call    ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ ; NCompress::NLzx::NBitStream::CDecoder::Normalize(void)
.text:000003DF                 push    3               ; unsigned int
.text:000003E1                 mov     ecx, [ebp+var_8] ; this
.text:000003E4                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000003E9                 mov     [ebp+var_2A4], eax
.text:000003EF                 cmp     [ebp+var_2A4], 3
.text:000003F6                 jbe     short loc_3FF
.text:000003F8                 xor     al, al
.text:000003FA                 jmp     loc_70B
.text:000003FF ; ---------------------------------------------------------------------------
.text:000003FF
.text:000003FF loc_3FF:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+66j
.text:000003FF                 mov     edx, [ebp+var_8]
.text:00000402                 movzx   eax, byte ptr [edx+1CC9h]
.text:00000409                 test    eax, eax
.text:0000040B                 jz      short loc_440
.text:0000040D                 push    1               ; unsigned int
.text:0000040F                 mov     ecx, [ebp+var_8] ; this
.text:00000412                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:00000417                 cmp     eax, 1
.text:0000041A                 jnz     short loc_42B
.text:0000041C                 mov     ecx, [ebp+var_8]
.text:0000041F                 mov     dword ptr [ecx+1CBCh], 8000h
.text:00000429                 jmp     short loc_43E
.text:0000042B ; ---------------------------------------------------------------------------
.text:0000042B
.text:0000042B loc_42B:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+8Aj
.text:0000042B                 push    10h             ; unsigned int
.text:0000042D                 mov     ecx, [ebp+var_8] ; this
.text:00000430                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:00000435                 mov     edx, [ebp+var_8]
.text:00000438                 mov     [edx+1CBCh], eax
.text:0000043E
.text:0000043E loc_43E:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+99j
.text:0000043E                 jmp     short loc_456
.text:00000440 ; ---------------------------------------------------------------------------
.text:00000440
.text:00000440 loc_440:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+7Bj
.text:00000440                 push    18h             ; unsigned int
.text:00000442                 mov     ecx, [ebp+var_8]
.text:00000445                 add     ecx, 8          ; this
.text:00000448                 call    ?ReadBitsBig@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBitsBig(uint)
.text:0000044D                 mov     ecx, [ebp+var_8]
.text:00000450                 mov     [ecx+1CBCh], eax
.text:00000456
.text:00000456 loc_456:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void):loc_43Ej
.text:00000456                 xor     edx, edx
.text:00000458                 cmp     [ebp+var_2A4], 3
.text:0000045F                 setz    dl
.text:00000462                 mov     eax, [ebp+var_8]
.text:00000465                 mov     [eax+70h], dl
.text:00000468                 mov     ecx, [ebp+var_8]
.text:0000046B                 movzx   edx, byte ptr [ecx+70h]
.text:0000046F                 test    edx, edx
.text:00000471                 jz      short loc_48D
.text:00000473                 mov     eax, [ebp+var_8]
.text:00000476                 mov     ecx, [eax+1CBCh]
.text:0000047C                 and     ecx, 1
.text:0000047F                 jz      short loc_48D
.text:00000481                 mov     [ebp+var_2BC], 1
.text:0000048B                 jmp     short loc_497
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+E1j
.text:0000048D                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+EFj
.text:0000048D                 mov     [ebp+var_2BC], 0
.text:00000497
.text:00000497 loc_497:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+FBj
.text:00000497                 mov     edx, [ebp+var_8]
.text:0000049A                 mov     al, byte ptr [ebp+var_2BC]
.text:000004A0                 mov     [edx+1CC8h], al
.text:000004A6                 mov     ecx, [ebp+var_8]
.text:000004A9                 movzx   edx, byte ptr [ecx+70h]
.text:000004AD                 test    edx, edx
.text:000004AF                 jz      loc_59A
.text:000004B5                 mov     ecx, [ebp+var_8]
.text:000004B8                 add     ecx, 8          ; this
.text:000004BB                 call    ?GetBitPosition@CDecoder@NBitStream@NLzx@NCompress@@QBEIXZ ; NCompress::NLzx::NBitStream::CDecoder::GetBitPosition(void)
.text:000004C0                 mov     ecx, 10h
.text:000004C5                 sub     ecx, eax
.text:000004C7                 push    ecx             ; unsigned int
.text:000004C8                 mov     ecx, [ebp+var_8] ; this
.text:000004CB                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000004D0                 mov     edx, [ebp+var_8]
.text:000004D3                 add     edx, 60h ; '`'
.text:000004D6                 push    edx             ; unsigned int *
.text:000004D7                 mov     ecx, [ebp+var_8]
.text:000004DA                 add     ecx, 8          ; this
.text:000004DD                 call    ?ReadUInt32@CDecoder@NBitStream@NLzx@NCompress@@QAE_NAAI@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadUInt32(uint &)
.text:000004E2                 movzx   eax, al
.text:000004E5                 test    eax, eax
.text:000004E7                 jnz     short loc_4F0
.text:000004E9                 xor     al, al
.text:000004EB                 jmp     loc_70B
.text:000004F0 ; ---------------------------------------------------------------------------
.text:000004F0
.text:000004F0 loc_4F0:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+157j
.text:000004F0                 mov     ecx, [ebp+var_8]
.text:000004F3                 mov     edx, [ecx+60h]
.text:000004F6                 sub     edx, 1
.text:000004F9                 mov     eax, [ebp+var_8]
.text:000004FC                 mov     [eax+60h], edx
.text:000004FF                 mov     [ebp+var_2A8], 1
.text:00000509                 jmp     short loc_51A
.text:0000050B ; ---------------------------------------------------------------------------
.text:0000050B
.text:0000050B loc_50B:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+1FEj
.text:0000050B                 mov     ecx, [ebp+var_2A8]
.text:00000511                 add     ecx, 1
.text:00000514                 mov     [ebp+var_2A8], ecx
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+179j
.text:0000051A                 cmp     [ebp+var_2A8], 3
.text:00000521                 jnb     short loc_593
.text:00000523                 mov     [ebp+var_2AC], 0
.text:0000052D                 mov     [ebp+var_2B0], 0
.text:00000537                 jmp     short loc_548
.text:00000539 ; ---------------------------------------------------------------------------
.text:00000539
.text:00000539 loc_539:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+1E6j
.text:00000539                 mov     edx, [ebp+var_2B0]
.text:0000053F                 add     edx, 1
.text:00000542                 mov     [ebp+var_2B0], edx
.text:00000548
.text:00000548 loc_548:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+1A7j
.text:00000548                 cmp     [ebp+var_2B0], 4
.text:0000054F                 jnb     short loc_578
.text:00000551                 mov     ecx, [ebp+var_8]
.text:00000554                 add     ecx, 8          ; this
.text:00000557                 call    ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ ; NCompress::NLzx::NBitStream::CDecoder::DirectReadByte(void)
.text:0000055C                 movzx   eax, al
.text:0000055F                 mov     ecx, [ebp+var_2B0]
.text:00000565                 shl     ecx, 3
.text:00000568                 shl     eax, cl
.text:0000056A                 or      eax, [ebp+var_2AC]
.text:00000570                 mov     [ebp+var_2AC], eax
.text:00000576                 jmp     short loc_539
.text:00000578 ; ---------------------------------------------------------------------------
.text:00000578
.text:00000578 loc_578:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+1BFj
.text:00000578                 mov     ecx, [ebp+var_2AC]
.text:0000057E                 sub     ecx, 1
.text:00000581                 mov     edx, [ebp+var_2A8]
.text:00000587                 mov     eax, [ebp+var_8]
.text:0000058A                 mov     [eax+edx*4+60h], ecx
.text:0000058E                 jmp     loc_50B
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+191j
.text:00000593                 mov     al, 1
.text:00000595                 jmp     loc_70B
.text:0000059A ; ---------------------------------------------------------------------------
.text:0000059A
.text:0000059A loc_59A:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+11Fj
.text:0000059A                 xor     ecx, ecx
.text:0000059C                 cmp     [ebp+var_2A4], 2
.text:000005A3                 setz    cl
.text:000005A6                 mov     edx, [ebp+var_8]
.text:000005A9                 mov     [edx+71h], cl
.text:000005AC                 mov     eax, [ebp+var_8]
.text:000005AF                 movzx   ecx, byte ptr [eax+71h]
.text:000005B3                 test    ecx, ecx
.text:000005B5                 jz      short loc_617
.text:000005B7                 mov     [ebp+var_2B4], 0
.text:000005C1                 jmp     short loc_5D2
.text:000005C3 ; ---------------------------------------------------------------------------
.text:000005C3
.text:000005C3 loc_5C3:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+262j
.text:000005C3                 mov     edx, [ebp+var_2B4]
.text:000005C9                 add     edx, 1
.text:000005CC                 mov     [ebp+var_2B4], edx
.text:000005D2
.text:000005D2 loc_5D2:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+231j
.text:000005D2                 cmp     [ebp+var_2B4], 8
.text:000005D9                 jnb     short loc_5F4
.text:000005DB                 push    3               ; unsigned int
.text:000005DD                 mov     ecx, [ebp+var_8] ; this
.text:000005E0                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000005E5                 mov     ecx, [ebp+var_2B4]
.text:000005EB                 mov     [ebp+ecx+var_29C], al
.text:000005F2                 jmp     short loc_5C3
.text:000005F4 ; ---------------------------------------------------------------------------
.text:000005F4
.text:000005F4 loc_5F4:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+249j
.text:000005F4                 lea     edx, [ebp+var_29C]
.text:000005FA                 push    edx
.text:000005FB                 mov     ecx, [ebp+var_8]
.text:000005FE                 add     ecx, 13A8h
.text:00000604                 call    ?SetCodeLengths@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)
.text:00000609                 movzx   eax, al
.text:0000060C                 test    eax, eax
.text:0000060E                 jnz     short loc_617
.text:00000610                 xor     al, al
.text:00000612                 jmp     loc_70B
.text:00000617 ; ---------------------------------------------------------------------------
.text:00000617
.text:00000617 loc_617:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+225j
.text:00000617                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+27Ej
.text:00000617                 push    100h            ; unsigned int
.text:0000061C                 lea     ecx, [ebp+var_29C]
.text:00000622                 push    ecx             ; unsigned __int8 *
.text:00000623                 mov     edx, [ebp+var_8]
.text:00000626                 add     edx, 1928h
.text:0000062C                 push    edx             ; unsigned __int8 *
.text:0000062D                 mov     ecx, [ebp+var_8] ; this
.text:00000630                 call    ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)
.text:00000635                 movzx   eax, al
.text:00000638                 test    eax, eax
.text:0000063A                 jnz     short loc_643
.text:0000063C                 xor     al, al
.text:0000063E                 jmp     loc_70B
.text:00000643 ; ---------------------------------------------------------------------------
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+2AAj
.text:00000643                 mov     ecx, [ebp+var_8]
.text:00000646                 mov     edx, [ecx+6Ch]
.text:00000649                 push    edx             ; unsigned int
.text:0000064A                 lea     eax, [ebp+var_19C]
.text:00000650                 push    eax             ; unsigned __int8 *
.text:00000651                 mov     ecx, [ebp+var_8]
.text:00000654                 add     ecx, 1A28h
.text:0000065A                 push    ecx             ; unsigned __int8 *
.text:0000065B                 mov     ecx, [ebp+var_8] ; this
.text:0000065E                 call    ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)
.text:00000663                 movzx   edx, al
.text:00000666                 test    edx, edx
.text:00000668                 jnz     short loc_671
.text:0000066A                 xor     al, al
.text:0000066C                 jmp     loc_70B
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+2D8j
.text:00000671                 mov     eax, [ebp+var_8]
.text:00000674                 mov     ecx, [eax+6Ch]
.text:00000677                 add     ecx, 100h
.text:0000067D                 mov     [ebp+var_2B8], ecx
.text:00000683                 jmp     short loc_694
.text:00000685 ; ---------------------------------------------------------------------------
.text:00000685
.text:00000685 loc_685:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+31Ej
.text:00000685                 mov     edx, [ebp+var_2B8]
.text:0000068B                 add     edx, 1
.text:0000068E                 mov     [ebp+var_2B8], edx
.text:00000694
.text:00000694 loc_694:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+2F3j
.text:00000694                 cmp     [ebp+var_2B8], 290h
.text:0000069E                 jnb     short loc_6B0
.text:000006A0                 mov     eax, [ebp+var_2B8]
.text:000006A6                 mov     [ebp+eax+var_29C], 0
.text:000006AE                 jmp     short loc_685
.text:000006B0 ; ---------------------------------------------------------------------------
.text:000006B0
.text:000006B0 loc_6B0:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+30Ej
.text:000006B0                 lea     ecx, [ebp+var_29C]
.text:000006B6                 push    ecx
.text:000006B7                 mov     ecx, [ebp+var_8]
.text:000006BA                 add     ecx, 74h ; 't'
.text:000006BD                 call    ?SetCodeLengths@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)
.text:000006C2                 movzx   edx, al
.text:000006C5                 test    edx, edx
.text:000006C7                 jnz     short loc_6CD
.text:000006C9                 xor     al, al
.text:000006CB                 jmp     short loc_70B
.text:000006CD ; ---------------------------------------------------------------------------
.text:000006CD
.text:000006CD loc_6CD:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+337j
.text:000006CD                 push    0F9h ; '·'      ; unsigned int
.text:000006D2                 lea     eax, [ebp+var_29C]
.text:000006D8                 push    eax             ; unsigned __int8 *
.text:000006D9                 mov     ecx, [ebp+var_8]
.text:000006DC                 add     ecx, 1BB8h
.text:000006E2                 push    ecx             ; unsigned __int8 *
.text:000006E3                 mov     ecx, [ebp+var_8] ; this
.text:000006E6                 call    ?ReadTable@CDecoder@NLzx@NCompress@@AAE_NPAE0I@Z ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)
.text:000006EB                 movzx   edx, al
.text:000006EE                 test    edx, edx
.text:000006F0                 jnz     short loc_6F6
.text:000006F2                 xor     al, al
.text:000006F4                 jmp     short loc_70B
.text:000006F6 ; ---------------------------------------------------------------------------
.text:000006F6
.text:000006F6 loc_6F6:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+360j
.text:000006F6                 lea     eax, [ebp+var_29C]
.text:000006FC                 push    eax
.text:000006FD                 mov     ecx, [ebp+var_8]
.text:00000700                 add     ecx, 0D3Ch
.text:00000706                 call    ?SetCodeLengths@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)
.text:0000070B
.text:0000070B loc_70B:                                ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+6Aj
.text:0000070B                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+15Bj ...
.text:0000070B                 push    edx
.text:0000070C                 mov     ecx, ebp
.text:0000070E                 push    eax
.text:0000070F                 lea     edx, $LN33
.text:00000715                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000071A                 pop     eax
.text:0000071B                 pop     edx
.text:0000071C                 pop     edi
.text:0000071D                 mov     ecx, [ebp+var_4]
.text:00000720                 xor     ecx, ebp
.text:00000722                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000727                 add     esp, 2BCh
.text:0000072D                 cmp     ebp, esp
.text:0000072F                 call    __RTC_CheckEsp
.text:00000734                 mov     esp, ebp
.text:00000736                 pop     ebp
.text:00000737                 retn
.text:00000737 ?ReadTables@CDecoder@NLzx@NCompress@@AAE_NXZ endp
.text:00000737
.text:00000737 ; ---------------------------------------------------------------------------
.text:00000738 $LN33           dd 1                    ; DATA XREF: NCompress::NLzx::CDecoder::ReadTables(void)+37Fo
.text:0000073C                 dd offset $LN32
.text:00000740 $LN32           dd 0FFFFFD64h, 290h     ; DATA XREF: .text:0000073Co
.text:00000748                 dd offset $LN31         ; "newLevels"
.text:0000074C $LN31           db 'newLevels',0        ; DATA XREF: .text:00000748o
.text:00000756                 align 10h
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; void __thiscall NCompress::NLzx::CDecoder::ClearPrevLevels(NCompress::NLzx::CDecoder *__hidden this)
.text:00000760                 public ?ClearPrevLevels@CDecoder@NLzx@NCompress@@AAEXXZ
.text:00000760 ?ClearPrevLevels@CDecoder@NLzx@NCompress@@AAEXXZ proc near
.text:00000760                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+93p
.text:00000760
.text:00000760 var_8           = dword ptr -8
.text:00000760 var_4           = dword ptr -4
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 sub     esp, 8
.text:00000766                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000076D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000774                 mov     [ebp+var_4], ecx
.text:00000777                 mov     [ebp+var_8], 0
.text:0000077E                 jmp     short loc_789
.text:00000780 ; ---------------------------------------------------------------------------
.text:00000780
.text:00000780 loc_780:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+3Fj
.text:00000780                 mov     eax, [ebp+var_8]
.text:00000783                 add     eax, 1
.text:00000786                 mov     [ebp+var_8], eax
.text:00000789
.text:00000789 loc_789:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+1Ej
.text:00000789                 cmp     [ebp+var_8], 290h
.text:00000790                 jnb     short loc_7A1
.text:00000792                 mov     ecx, [ebp+var_4]
.text:00000795                 add     ecx, [ebp+var_8]
.text:00000798                 mov     byte ptr [ecx+1928h], 0
.text:0000079F                 jmp     short loc_780
.text:000007A1 ; ---------------------------------------------------------------------------
.text:000007A1
.text:000007A1 loc_7A1:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+30j
.text:000007A1                 mov     [ebp+var_8], 0
.text:000007A8                 jmp     short loc_7B3
.text:000007AA ; ---------------------------------------------------------------------------
.text:000007AA
.text:000007AA loc_7AA:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+69j
.text:000007AA                 mov     edx, [ebp+var_8]
.text:000007AD                 add     edx, 1
.text:000007B0                 mov     [ebp+var_8], edx
.text:000007B3
.text:000007B3 loc_7B3:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+48j
.text:000007B3                 cmp     [ebp+var_8], 0F9h ; '·'
.text:000007BA                 jnb     short loc_7CB
.text:000007BC                 mov     eax, [ebp+var_4]
.text:000007BF                 add     eax, [ebp+var_8]
.text:000007C2                 mov     byte ptr [eax+1BB8h], 0
.text:000007C9                 jmp     short loc_7AA
.text:000007CB ; ---------------------------------------------------------------------------
.text:000007CB
.text:000007CB loc_7CB:                                ; CODE XREF: NCompress::NLzx::CDecoder::ClearPrevLevels(void)+5Aj
.text:000007CB                 mov     esp, ebp
.text:000007CD                 pop     ebp
.text:000007CE                 retn
.text:000007CE ?ClearPrevLevels@CDecoder@NLzx@NCompress@@AAEXXZ endp
.text:000007CE
.text:000007CE ; ---------------------------------------------------------------------------
.text:000007CF                 align 10h
.text:000007D0
.text:000007D0 ; =============== S U B R O U T I N E =======================================
.text:000007D0
.text:000007D0 ; Attributes: bp-based frame
.text:000007D0
.text:000007D0 ; __int32 __thiscall NCompress::NLzx::CDecoder::CodeSpec(NCompress::NLzx::CDecoder *this, unsigned int)
.text:000007D0                 public ?CodeSpec@CDecoder@NLzx@NCompress@@AAEJI@Z
.text:000007D0 ?CodeSpec@CDecoder@NLzx@NCompress@@AAEJI@Z proc near
.text:000007D0                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+141p
.text:000007D0
.text:000007D0 var_40          = dword ptr -40h
.text:000007D0 var_3C          = dword ptr -3Ch
.text:000007D0 var_38          = dword ptr -38h
.text:000007D0 var_34          = dword ptr -34h
.text:000007D0 var_30          = dword ptr -30h
.text:000007D0 var_2C          = dword ptr -2Ch
.text:000007D0 var_28          = dword ptr -28h
.text:000007D0 var_24          = dword ptr -24h
.text:000007D0 var_20          = dword ptr -20h
.text:000007D0 var_1C          = dword ptr -1Ch
.text:000007D0 var_18          = dword ptr -18h
.text:000007D0 var_14          = dword ptr -14h
.text:000007D0 var_10          = dword ptr -10h
.text:000007D0 var_9           = byte ptr -9
.text:000007D0 var_8           = dword ptr -8
.text:000007D0 var_4           = dword ptr -4
.text:000007D0 arg_0           = dword ptr  8
.text:000007D0
.text:000007D0                 push    ebp
.text:000007D1                 mov     ebp, esp
.text:000007D3                 sub     esp, 40h
.text:000007D6                 push    edi
.text:000007D7                 push    ecx
.text:000007D8                 lea     edi, [ebp+var_40]
.text:000007DB                 mov     ecx, 10h
.text:000007E0                 mov     eax, 0CCCCCCCCh
.text:000007E5                 rep stosd
.text:000007E7                 pop     ecx
.text:000007E8                 mov     [ebp+var_4], ecx
.text:000007EB                 mov     eax, [ebp+var_4]
.text:000007EE                 cmp     dword ptr [eax+1CC4h], 0FFFFFFFEh
.text:000007F5                 jnz     loc_8FB
.text:000007FB                 mov     ecx, [ebp+var_4]
.text:000007FE                 mov     dword ptr [ecx+1CC4h], 0
.text:00000808                 mov     ecx, [ebp+var_4]
.text:0000080B                 add     ecx, 8          ; this
.text:0000080E                 call    ?Init@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ ; NCompress::NLzx::NBitStream::CDecoder::Init(void)
.text:00000813                 mov     edx, [ebp+var_4]
.text:00000816                 movzx   eax, byte ptr [edx+1CC0h]
.text:0000081D                 test    eax, eax
.text:0000081F                 jz      short loc_82C
.text:00000821                 mov     ecx, [ebp+var_4]
.text:00000824                 movzx   edx, byte ptr [ecx+70h]
.text:00000828                 test    edx, edx
.text:0000082A                 jnz     short loc_837
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+4Fj
.text:0000082C                 mov     ecx, [ebp+var_4]
.text:0000082F                 add     ecx, 8          ; this
.text:00000832                 call    ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ ; NCompress::NLzx::NBitStream::CDecoder::Normalize(void)
.text:00000837
.text:00000837 loc_837:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+5Aj
.text:00000837                 mov     eax, [ebp+var_4]
.text:0000083A                 movzx   ecx, byte ptr [eax+1CC0h]
.text:00000841                 test    ecx, ecx
.text:00000843                 jnz     loc_8FB
.text:00000849                 mov     edx, [ebp+var_4]
.text:0000084C                 mov     byte ptr [edx+1CC8h], 0
.text:00000853                 mov     eax, [ebp+var_4]
.text:00000856                 mov     dword ptr [eax+1CBCh], 0
.text:00000860                 mov     ecx, [ebp+var_4] ; this
.text:00000863                 call    ?ClearPrevLevels@CDecoder@NLzx@NCompress@@AAEXXZ ; NCompress::NLzx::CDecoder::ClearPrevLevels(void)
.text:00000868                 mov     [ebp+var_8], 0B71B00h
.text:0000086F                 mov     [ebp+var_9], 1
.text:00000873                 mov     ecx, [ebp+var_4]
.text:00000876                 movzx   edx, byte ptr [ecx+1CC9h]
.text:0000087D                 test    edx, edx
.text:0000087F                 jnz     short loc_8BC
.text:00000881                 push    1               ; unsigned int
.text:00000883                 mov     ecx, [ebp+var_4] ; this
.text:00000886                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:0000088B                 neg     eax
.text:0000088D                 sbb     eax, eax
.text:0000088F                 neg     eax
.text:00000891                 mov     [ebp+var_9], al
.text:00000894                 movzx   eax, [ebp+var_9]
.text:00000898                 test    eax, eax
.text:0000089A                 jz      short loc_8BC
.text:0000089C                 push    10h             ; unsigned int
.text:0000089E                 mov     ecx, [ebp+var_4] ; this
.text:000008A1                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000008A6                 shl     eax, 10h
.text:000008A9                 mov     [ebp+var_8], eax
.text:000008AC                 push    10h             ; unsigned int
.text:000008AE                 mov     ecx, [ebp+var_4] ; this
.text:000008B1                 call    ?ReadBits@CDecoder@NLzx@NCompress@@AAEII@Z ; NCompress::NLzx::CDecoder::ReadBits(uint)
.text:000008B6                 or      eax, [ebp+var_8]
.text:000008B9                 mov     [ebp+var_8], eax
.text:000008BC
.text:000008BC loc_8BC:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+AFj
.text:000008BC                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+CAj
.text:000008BC                 mov     ecx, [ebp+var_8]
.text:000008BF                 push    ecx             ; unsigned int
.text:000008C0                 movzx   edx, [ebp+var_9]
.text:000008C4                 push    edx             ; bool
.text:000008C5                 mov     eax, [ebp+var_4]
.text:000008C8                 mov     ecx, [eax+1CB4h] ; this
.text:000008CE                 call    ?Init@Cx86ConvertOutStream@NLzx@NCompress@@QAEX_NI@Z ; NCompress::NLzx::Cx86ConvertOutStream::Init(bool,uint)
.text:000008D3                 mov     [ebp+var_10], 0
.text:000008DA                 jmp     short loc_8E5
.text:000008DC ; ---------------------------------------------------------------------------
.text:000008DC
.text:000008DC loc_8DC:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+129j
.text:000008DC                 mov     ecx, [ebp+var_10]
.text:000008DF                 add     ecx, 1
.text:000008E2                 mov     [ebp+var_10], ecx
.text:000008E5
.text:000008E5 loc_8E5:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+10Aj
.text:000008E5                 cmp     [ebp+var_10], 3
.text:000008E9                 jnb     short loc_8FB
.text:000008EB                 mov     edx, [ebp+var_10]
.text:000008EE                 mov     eax, [ebp+var_4]
.text:000008F1                 mov     dword ptr [eax+edx*4+60h], 0
.text:000008F9                 jmp     short loc_8DC
.text:000008FB ; ---------------------------------------------------------------------------
.text:000008FB
.text:000008FB loc_8FB:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+25j
.text:000008FB                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+73j ...
.text:000008FB                 mov     ecx, [ebp+var_4]
.text:000008FE                 cmp     dword ptr [ecx+1CC4h], 0
.text:00000905                 jle     short loc_94E
.text:00000907                 cmp     [ebp+arg_0], 0
.text:0000090B                 jbe     short loc_94E
.text:0000090D                 mov     edx, [ebp+var_4]
.text:00000910                 mov     eax, [edx+60h]
.text:00000913                 push    eax             ; unsigned int
.text:00000914                 mov     ecx, [ebp+var_4]
.text:00000917                 add     ecx, 38h ; '8'  ; this
.text:0000091A                 call    ?GetByte@CLzOutWindow@@QBEEI@Z ; CLzOutWindow::GetByte(uint)
.text:0000091F                 movzx   ecx, al
.text:00000922                 push    ecx             ; unsigned __int8
.text:00000923                 mov     ecx, [ebp+var_4]
.text:00000926                 add     ecx, 38h ; '8'  ; this
.text:00000929                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:0000092E                 mov     edx, [ebp+var_4]
.text:00000931                 mov     eax, [edx+1CC4h]
.text:00000937                 sub     eax, 1
.text:0000093A                 mov     ecx, [ebp+var_4]
.text:0000093D                 mov     [ecx+1CC4h], eax
.text:00000943                 mov     edx, [ebp+arg_0]
.text:00000946                 sub     edx, 1
.text:00000949                 mov     [ebp+arg_0], edx
.text:0000094C                 jmp     short loc_8FB
.text:0000094E ; ---------------------------------------------------------------------------
.text:0000094E
.text:0000094E loc_94E:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+135j
.text:0000094E                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+13Bj ...
.text:0000094E                 cmp     [ebp+arg_0], 0
.text:00000952                 jbe     loc_C18
.text:00000958                 mov     eax, [ebp+var_4]
.text:0000095B                 cmp     dword ptr [eax+1CBCh], 0
.text:00000962                 jnz     short loc_97D
.text:00000964                 mov     ecx, [ebp+var_4] ; this
.text:00000967                 call    ?ReadTables@CDecoder@NLzx@NCompress@@AAE_NXZ ; NCompress::NLzx::CDecoder::ReadTables(void)
.text:0000096C                 movzx   ecx, al
.text:0000096F                 test    ecx, ecx
.text:00000971                 jnz     short loc_97D
.text:00000973                 mov     eax, 1
.text:00000978                 jmp     loc_C1A
.text:0000097D ; ---------------------------------------------------------------------------
.text:0000097D
.text:0000097D loc_97D:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+192j
.text:0000097D                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+1A1j
.text:0000097D                 mov     edx, [ebp+arg_0]
.text:00000980                 push    edx
.text:00000981                 mov     eax, [ebp+var_4]
.text:00000984                 mov     ecx, [eax+1CBCh]
.text:0000098A                 push    ecx
.text:0000098B                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00000990                 mov     [ebp+var_14], eax
.text:00000993                 mov     edx, [ebp+arg_0]
.text:00000996                 sub     edx, [ebp+var_14]
.text:00000999                 mov     [ebp+arg_0], edx
.text:0000099C                 mov     eax, [ebp+var_4]
.text:0000099F                 mov     ecx, [eax+1CBCh]
.text:000009A5                 sub     ecx, [ebp+var_14]
.text:000009A8                 mov     edx, [ebp+var_4]
.text:000009AB                 mov     [edx+1CBCh], ecx
.text:000009B1                 mov     eax, [ebp+var_4]
.text:000009B4                 movzx   ecx, byte ptr [eax+70h]
.text:000009B8                 test    ecx, ecx
.text:000009BA                 jz      short loc_9EC
.text:000009BC
.text:000009BC loc_9BC:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+215j
.text:000009BC                 cmp     [ebp+var_14], 0
.text:000009C0                 jbe     short loc_9E7
.text:000009C2                 mov     ecx, [ebp+var_4]
.text:000009C5                 add     ecx, 8          ; this
.text:000009C8                 call    ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ ; NCompress::NLzx::NBitStream::CDecoder::DirectReadByte(void)
.text:000009CD                 movzx   edx, al
.text:000009D0                 push    edx             ; unsigned __int8
.text:000009D1                 mov     ecx, [ebp+var_4]
.text:000009D4                 add     ecx, 38h ; '8'  ; this
.text:000009D7                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:000009DC                 mov     eax, [ebp+var_14]
.text:000009DF                 sub     eax, 1
.text:000009E2                 mov     [ebp+var_14], eax
.text:000009E5                 jmp     short loc_9BC
.text:000009E7 ; ---------------------------------------------------------------------------
.text:000009E7
.text:000009E7 loc_9E7:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+1F0j
.text:000009E7                 jmp     loc_C13
.text:000009EC ; ---------------------------------------------------------------------------
.text:000009EC
.text:000009EC loc_9EC:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+1EAj
.text:000009EC                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint):loc_C0Ej
.text:000009EC                 cmp     [ebp+var_14], 0
.text:000009F0                 jbe     loc_C13
.text:000009F6                 mov     ecx, [ebp+var_4]
.text:000009F9                 add     ecx, 8
.text:000009FC                 push    ecx             ; NCompress::NLzx::NBitStream::CDecoder *
.text:000009FD                 mov     ecx, [ebp+var_4]
.text:00000A00                 add     ecx, 74h ; 't'
.text:00000A03                 call    ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z ; NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00000A08                 mov     [ebp+var_18], eax
.text:00000A0B                 cmp     [ebp+var_18], 100h
.text:00000A12                 jnb     short loc_A32
.text:00000A14                 movzx   edx, byte ptr [ebp+var_18]
.text:00000A18                 push    edx             ; unsigned __int8
.text:00000A19                 mov     ecx, [ebp+var_4]
.text:00000A1C                 add     ecx, 38h ; '8'  ; this
.text:00000A1F                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:00000A24                 mov     eax, [ebp+var_14]
.text:00000A27                 sub     eax, 1
.text:00000A2A                 mov     [ebp+var_14], eax
.text:00000A2D                 jmp     loc_C0E
.text:00000A32 ; ---------------------------------------------------------------------------
.text:00000A32
.text:00000A32 loc_A32:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+242j
.text:00000A32                 mov     ecx, [ebp+var_18]
.text:00000A35                 sub     ecx, 100h
.text:00000A3B                 mov     [ebp+var_1C], ecx
.text:00000A3E                 mov     edx, [ebp+var_4]
.text:00000A41                 mov     eax, [ebp+var_1C]
.text:00000A44                 cmp     eax, [edx+6Ch]
.text:00000A47                 jb      short loc_A53
.text:00000A49                 mov     eax, 1
.text:00000A4E                 jmp     loc_C1A
.text:00000A53 ; ---------------------------------------------------------------------------
.text:00000A53
.text:00000A53 loc_A53:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+277j
.text:00000A53                 mov     ecx, [ebp+var_1C]
.text:00000A56                 shr     ecx, 3
.text:00000A59                 mov     [ebp+var_20], ecx
.text:00000A5C                 mov     eax, [ebp+var_1C]
.text:00000A5F                 xor     edx, edx
.text:00000A61                 mov     ecx, 8
.text:00000A66                 div     ecx
.text:00000A68                 mov     [ebp+var_24], edx
.text:00000A6B                 mov     edx, [ebp+var_24]
.text:00000A6E                 add     edx, 2
.text:00000A71                 mov     [ebp+var_28], edx
.text:00000A74                 cmp     [ebp+var_24], 7
.text:00000A78                 jnz     short loc_AAE
.text:00000A7A                 mov     eax, [ebp+var_4]
.text:00000A7D                 add     eax, 8
.text:00000A80                 push    eax             ; NCompress::NLzx::NBitStream::CDecoder *
.text:00000A81                 mov     ecx, [ebp+var_4]
.text:00000A84                 add     ecx, 0D3Ch
.text:00000A8A                 call    ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z ; NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00000A8F                 mov     [ebp+var_2C], eax
.text:00000A92                 cmp     [ebp+var_2C], 0F9h ; '·'
.text:00000A99                 jb      short loc_AA5
.text:00000A9B                 mov     eax, 1
.text:00000AA0                 jmp     loc_C1A
.text:00000AA5 ; ---------------------------------------------------------------------------
.text:00000AA5
.text:00000AA5 loc_AA5:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+2C9j
.text:00000AA5                 mov     ecx, [ebp+var_28]
.text:00000AA8                 add     ecx, [ebp+var_2C]
.text:00000AAB                 mov     [ebp+var_28], ecx
.text:00000AAE
.text:00000AAE loc_AAE:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+2A8j
.text:00000AAE                 cmp     [ebp+var_20], 3
.text:00000AB2                 jnb     short loc_ADF
.text:00000AB4                 mov     edx, [ebp+var_20]
.text:00000AB7                 mov     eax, [ebp+var_4]
.text:00000ABA                 mov     ecx, [eax+edx*4+60h]
.text:00000ABE                 mov     [ebp+var_30], ecx
.text:00000AC1                 mov     edx, [ebp+var_20]
.text:00000AC4                 mov     eax, [ebp+var_4]
.text:00000AC7                 mov     ecx, [ebp+var_4]
.text:00000ACA                 mov     ecx, [ecx+60h]
.text:00000ACD                 mov     [eax+edx*4+60h], ecx
.text:00000AD1                 mov     edx, [ebp+var_4]
.text:00000AD4                 mov     eax, [ebp+var_30]
.text:00000AD7                 mov     [edx+60h], eax
.text:00000ADA                 jmp     loc_BAE
.text:00000ADF ; ---------------------------------------------------------------------------
.text:00000ADF
.text:00000ADF loc_ADF:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+2E2j
.text:00000ADF                 cmp     [ebp+var_20], 26h ; '&'
.text:00000AE3                 jnb     short loc_B03
.text:00000AE5                 mov     ecx, [ebp+var_20]
.text:00000AE8                 shr     ecx, 1
.text:00000AEA                 sub     ecx, 1
.text:00000AED                 mov     [ebp+var_38], ecx
.text:00000AF0                 mov     edx, [ebp+var_20]
.text:00000AF3                 and     edx, 1
.text:00000AF6                 or      edx, 2
.text:00000AF9                 mov     ecx, [ebp+var_38]
.text:00000AFC                 shl     edx, cl
.text:00000AFE                 mov     [ebp+var_34], edx
.text:00000B01                 jmp     short loc_B16
.text:00000B03 ; ---------------------------------------------------------------------------
.text:00000B03
.text:00000B03 loc_B03:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+313j
.text:00000B03                 mov     [ebp+var_38], 11h
.text:00000B0A                 mov     eax, [ebp+var_20]
.text:00000B0D                 sub     eax, 22h ; '"'
.text:00000B10                 shl     eax, 11h
.text:00000B13                 mov     [ebp+var_34], eax
.text:00000B16
.text:00000B16 loc_B16:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+331j
.text:00000B16                 mov     ecx, [ebp+var_4]
.text:00000B19                 movzx   edx, byte ptr [ecx+71h]
.text:00000B1D                 test    edx, edx
.text:00000B1F                 jz      short loc_B75
.text:00000B21                 cmp     [ebp+var_38], 3
.text:00000B25                 jb      short loc_B75
.text:00000B27                 mov     eax, [ebp+var_38]
.text:00000B2A                 sub     eax, 3
.text:00000B2D                 push    eax             ; unsigned int
.text:00000B2E                 mov     ecx, [ebp+var_4]
.text:00000B31                 add     ecx, 8          ; this
.text:00000B34                 call    ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)
.text:00000B39                 mov     ecx, [ebp+var_34]
.text:00000B3C                 lea     edx, [ecx+eax*8]
.text:00000B3F                 mov     [ebp+var_34], edx
.text:00000B42                 mov     eax, [ebp+var_4]
.text:00000B45                 add     eax, 8
.text:00000B48                 push    eax             ; NCompress::NLzx::NBitStream::CDecoder *
.text:00000B49                 mov     ecx, [ebp+var_4]
.text:00000B4C                 add     ecx, 13A8h
.text:00000B52                 call    ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z ; NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00000B57                 mov     [ebp+var_3C], eax
.text:00000B5A                 cmp     [ebp+var_3C], 8
.text:00000B5E                 jb      short loc_B6A
.text:00000B60                 mov     eax, 1
.text:00000B65                 jmp     loc_C1A
.text:00000B6A ; ---------------------------------------------------------------------------
.text:00000B6A
.text:00000B6A loc_B6A:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+38Ej
.text:00000B6A                 mov     ecx, [ebp+var_34]
.text:00000B6D                 add     ecx, [ebp+var_3C]
.text:00000B70                 mov     [ebp+var_34], ecx
.text:00000B73                 jmp     short loc_B8A
.text:00000B75 ; ---------------------------------------------------------------------------
.text:00000B75
.text:00000B75 loc_B75:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+34Fj
.text:00000B75                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+355j
.text:00000B75                 mov     edx, [ebp+var_38]
.text:00000B78                 push    edx             ; unsigned int
.text:00000B79                 mov     ecx, [ebp+var_4]
.text:00000B7C                 add     ecx, 8          ; this
.text:00000B7F                 call    ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)
.text:00000B84                 add     eax, [ebp+var_34]
.text:00000B87                 mov     [ebp+var_34], eax
.text:00000B8A
.text:00000B8A loc_B8A:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+3A3j
.text:00000B8A                 mov     eax, [ebp+var_4]
.text:00000B8D                 mov     ecx, [ebp+var_4]
.text:00000B90                 mov     edx, [ecx+64h]
.text:00000B93                 mov     [eax+68h], edx
.text:00000B96                 mov     eax, [ebp+var_4]
.text:00000B99                 mov     ecx, [ebp+var_4]
.text:00000B9C                 mov     edx, [ecx+60h]
.text:00000B9F                 mov     [eax+64h], edx
.text:00000BA2                 mov     eax, [ebp+var_34]
.text:00000BA5                 sub     eax, 3
.text:00000BA8                 mov     ecx, [ebp+var_4]
.text:00000BAB                 mov     [ecx+60h], eax
.text:00000BAE
.text:00000BAE loc_BAE:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+30Aj
.text:00000BAE                 mov     edx, [ebp+var_28]
.text:00000BB1                 mov     [ebp+var_40], edx
.text:00000BB4                 mov     eax, [ebp+var_40]
.text:00000BB7                 cmp     eax, [ebp+var_14]
.text:00000BBA                 jbe     short loc_BC2
.text:00000BBC                 mov     ecx, [ebp+var_14]
.text:00000BBF                 mov     [ebp+var_40], ecx
.text:00000BC2
.text:00000BC2 loc_BC2:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+3EAj
.text:00000BC2                 mov     edx, [ebp+var_40]
.text:00000BC5                 push    edx             ; unsigned int
.text:00000BC6                 mov     eax, [ebp+var_4]
.text:00000BC9                 mov     ecx, [eax+60h]
.text:00000BCC                 push    ecx             ; unsigned int
.text:00000BCD                 mov     ecx, [ebp+var_4]
.text:00000BD0                 add     ecx, 38h ; '8'  ; this
.text:00000BD3                 call    ?CopyBlock@CLzOutWindow@@QAE_NII@Z ; CLzOutWindow::CopyBlock(uint,uint)
.text:00000BD8                 movzx   edx, al
.text:00000BDB                 test    edx, edx
.text:00000BDD                 jnz     short loc_BE6
.text:00000BDF                 mov     eax, 1
.text:00000BE4                 jmp     short loc_C1A
.text:00000BE6 ; ---------------------------------------------------------------------------
.text:00000BE6
.text:00000BE6 loc_BE6:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+40Dj
.text:00000BE6                 mov     eax, [ebp+var_28]
.text:00000BE9                 sub     eax, [ebp+var_40]
.text:00000BEC                 mov     [ebp+var_28], eax
.text:00000BEF                 mov     ecx, [ebp+var_14]
.text:00000BF2                 sub     ecx, [ebp+var_40]
.text:00000BF5                 mov     [ebp+var_14], ecx
.text:00000BF8                 cmp     [ebp+var_28], 0
.text:00000BFC                 jz      short loc_C0E
.text:00000BFE                 mov     edx, [ebp+var_4]
.text:00000C01                 mov     eax, [ebp+var_28]
.text:00000C04                 mov     [edx+1CC4h], eax
.text:00000C0A                 xor     eax, eax
.text:00000C0C                 jmp     short loc_C1A
.text:00000C0E ; ---------------------------------------------------------------------------
.text:00000C0E
.text:00000C0E loc_C0E:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+25Dj
.text:00000C0E                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+42Cj
.text:00000C0E                 jmp     loc_9EC
.text:00000C13 ; ---------------------------------------------------------------------------
.text:00000C13
.text:00000C13 loc_C13:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint):loc_9E7j
.text:00000C13                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+220j
.text:00000C13                 jmp     loc_94E
.text:00000C18 ; ---------------------------------------------------------------------------
.text:00000C18
.text:00000C18 loc_C18:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+182j
.text:00000C18                 xor     eax, eax
.text:00000C1A
.text:00000C1A loc_C1A:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+1A8j
.text:00000C1A                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+27Ej ...
.text:00000C1A                 pop     edi
.text:00000C1B                 add     esp, 40h
.text:00000C1E                 cmp     ebp, esp
.text:00000C20                 call    __RTC_CheckEsp
.text:00000C25                 mov     esp, ebp
.text:00000C27                 pop     ebp
.text:00000C28                 retn    4
.text:00000C28 ?CodeSpec@CDecoder@NLzx@NCompress@@AAEJI@Z endp
.text:00000C28
.text:00000C28 ; ---------------------------------------------------------------------------
.text:00000C2B                 align 10h
.text:00000C30
.text:00000C30 ; =============== S U B R O U T I N E =======================================
.text:00000C30
.text:00000C30 ; Attributes: bp-based frame
.text:00000C30
.text:00000C30 ; __int32 __thiscall NCompress::NLzx::CDecoder::CodeReal(NCompress::NLzx::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000C30                 public ?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000C30 ?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000C30                                         ; CODE XREF: NCompress::NLzx::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+61p
.text:00000C30
.text:00000C30 var_7C          = dword ptr -7Ch
.text:00000C30 var_78          = dword ptr -78h
.text:00000C30 var_74          = dword ptr -74h
.text:00000C30 var_70          = dword ptr -70h
.text:00000C30 var_6C          = dword ptr -6Ch
.text:00000C30 var_68          = dword ptr -68h
.text:00000C30 var_60          = dword ptr -60h
.text:00000C30 var_5C          = dword ptr -5Ch
.text:00000C30 var_50          = dword ptr -50h
.text:00000C30 var_4C          = dword ptr -4Ch
.text:00000C30 var_44          = dword ptr -44h
.text:00000C30 var_40          = dword ptr -40h
.text:00000C30 var_3C          = dword ptr -3Ch
.text:00000C30 var_38          = dword ptr -38h
.text:00000C30 var_34          = dword ptr -34h
.text:00000C30 var_30          = dword ptr -30h
.text:00000C30 var_28          = byte ptr -28h
.text:00000C30 var_24          = byte ptr -24h
.text:00000C30 var_1C          = dword ptr -1Ch
.text:00000C30 var_18          = dword ptr -18h
.text:00000C30 var_14          = dword ptr -14h
.text:00000C30 var_10          = dword ptr -10h
.text:00000C30 var_C           = dword ptr -0Ch
.text:00000C30 var_4           = dword ptr -4
.text:00000C30 arg_0           = dword ptr  8
.text:00000C30 arg_4           = dword ptr  0Ch
.text:00000C30 arg_C           = dword ptr  14h
.text:00000C30 arg_10          = dword ptr  18h
.text:00000C30
.text:00000C30                 push    ebp
.text:00000C31                 mov     ebp, esp
.text:00000C33                 push    0FFFFFFFFh
.text:00000C35                 push    offset __ehhandler$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000C3A                 mov     eax, large fs:0
.text:00000C40                 push    eax
.text:00000C41                 sub     esp, 70h
.text:00000C44                 push    esi
.text:00000C45                 push    edi
.text:00000C46                 push    ecx
.text:00000C47                 lea     edi, [ebp+var_7C]
.text:00000C4A                 mov     ecx, 1Ch
.text:00000C4F                 mov     eax, 0CCCCCCCCh
.text:00000C54                 rep stosd
.text:00000C56                 pop     ecx
.text:00000C57                 mov     eax, dword ptr ds:___security_cookie
.text:00000C5C                 xor     eax, ebp
.text:00000C5E                 push    eax
.text:00000C5F                 lea     eax, [ebp+var_C]
.text:00000C62                 mov     large fs:0, eax
.text:00000C68                 mov     [ebp+var_10], ecx
.text:00000C6B                 cmp     [ebp+arg_C], 0
.text:00000C6F                 jnz     short loc_C7B
.text:00000C71                 mov     eax, 80070057h
.text:00000C76                 jmp     loc_E41
.text:00000C7B ; ---------------------------------------------------------------------------
.text:00000C7B
.text:00000C7B loc_C7B:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Fj
.text:00000C7B                 mov     eax, [ebp+arg_C]
.text:00000C7E                 mov     ecx, [eax]
.text:00000C80                 mov     [ebp+var_18], ecx
.text:00000C83                 mov     edx, [eax+4]
.text:00000C86                 mov     [ebp+var_14], edx
.text:00000C89                 mov     eax, [ebp+arg_0]
.text:00000C8C                 push    eax             ; struct ISequentialInStream *
.text:00000C8D                 mov     ecx, [ebp+var_10]
.text:00000C90                 add     ecx, 8          ; this
.text:00000C93                 call    ?SetStream@CDecoder@NBitStream@NLzx@NCompress@@QAEXPAUISequentialInStream@@@Z ; NCompress::NLzx::NBitStream::CDecoder::SetStream(ISequentialInStream *)
.text:00000C98                 mov     ecx, [ebp+arg_4]
.text:00000C9B                 push    ecx             ; struct ISequentialOutStream *
.text:00000C9C                 mov     edx, [ebp+var_10]
.text:00000C9F                 mov     ecx, [edx+1CB4h] ; this
.text:00000CA5                 call    ?SetStream@Cx86ConvertOutStream@NLzx@NCompress@@QAEXPAUISequentialOutStream@@@Z ; NCompress::NLzx::Cx86ConvertOutStream::SetStream(ISequentialOutStream *)
.text:00000CAA                 mov     ecx, [ebp+var_10]
.text:00000CAD                 add     ecx, 1CB8h
.text:00000CB3                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000CB8                 push    eax             ; struct ISequentialOutStream *
.text:00000CB9                 mov     ecx, [ebp+var_10]
.text:00000CBC                 add     ecx, 38h ; '8'  ; this
.text:00000CBF                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00000CC4                 mov     esi, esp
.text:00000CC6                 mov     eax, [ebp+arg_C]
.text:00000CC9                 push    eax
.text:00000CCA                 mov     ecx, [ebp+var_10]
.text:00000CCD                 mov     edx, [ecx]
.text:00000CCF                 mov     eax, [ebp+var_10]
.text:00000CD2                 push    eax
.text:00000CD3                 mov     ecx, [edx+14h]
.text:00000CD6                 call    ecx
.text:00000CD8                 cmp     esi, esp
.text:00000CDA                 call    __RTC_CheckEsp
.text:00000CDF                 mov     [ebp+var_1C], eax
.text:00000CE2                 cmp     [ebp+var_1C], 0
.text:00000CE6                 jz      short loc_CF0
.text:00000CE8                 mov     eax, [ebp+var_1C]
.text:00000CEB                 jmp     loc_E41
.text:00000CF0 ; ---------------------------------------------------------------------------
.text:00000CF0
.text:00000CF0 loc_CF0:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B6j
.text:00000CF0                 mov     edx, [ebp+var_10]
.text:00000CF3                 push    edx             ; struct NCompress::NLzx::CDecoder *
.text:00000CF4                 lea     ecx, [ebp+var_28] ; this
.text:00000CF7                 call    ??0CDecoderFlusher@NLzx@NCompress@@QAE@PAVCDecoder@12@@Z ; NCompress::NLzx::CDecoderFlusher::CDecoderFlusher(NCompress::NLzx::CDecoder *)
.text:00000CFC                 mov     [ebp+var_4], 0
.text:00000D03                 mov     ecx, [ebp+var_10]
.text:00000D06                 add     ecx, 38h ; '8'  ; this
.text:00000D09                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000D0E                 mov     [ebp+var_34], eax
.text:00000D11                 mov     [ebp+var_30], edx
.text:00000D14
.text:00000D14 loc_D14:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_E0Cj
.text:00000D14                 mov     [ebp+var_38], 40000h
.text:00000D1B                 mov     ecx, [ebp+var_10]
.text:00000D1E                 add     ecx, 38h ; '8'  ; this
.text:00000D21                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000D26                 sub     eax, [ebp+var_34]
.text:00000D29                 sbb     edx, [ebp+var_30]
.text:00000D2C                 mov     ecx, [ebp+var_18]
.text:00000D2F                 sub     ecx, eax
.text:00000D31                 mov     eax, [ebp+var_14]
.text:00000D34                 sbb     eax, edx
.text:00000D36                 mov     [ebp+var_40], ecx
.text:00000D39                 mov     [ebp+var_3C], eax
.text:00000D3C                 mov     ecx, [ebp+var_38]
.text:00000D3F                 xor     edx, edx
.text:00000D41                 mov     [ebp+var_7C], ecx
.text:00000D44                 mov     [ebp+var_78], edx
.text:00000D47                 mov     eax, [ebp+var_78]
.text:00000D4A                 cmp     eax, [ebp+var_3C]
.text:00000D4D                 jb      short loc_D5F
.text:00000D4F                 ja      short loc_D59
.text:00000D51                 mov     ecx, [ebp+var_7C]
.text:00000D54                 cmp     ecx, [ebp+var_40]
.text:00000D57                 jbe     short loc_D5F
.text:00000D59
.text:00000D59 loc_D59:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Fj
.text:00000D59                 mov     edx, [ebp+var_40]
.text:00000D5C                 mov     [ebp+var_38], edx
.text:00000D5F
.text:00000D5F loc_D5F:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Dj
.text:00000D5F                                         ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+127j
.text:00000D5F                 cmp     [ebp+var_38], 0
.text:00000D63                 jnz     short loc_D6A
.text:00000D65                 jmp     loc_E11
.text:00000D6A ; ---------------------------------------------------------------------------
.text:00000D6A
.text:00000D6A loc_D6A:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+133j
.text:00000D6A                 mov     eax, [ebp+var_38]
.text:00000D6D                 push    eax             ; unsigned int
.text:00000D6E                 mov     ecx, [ebp+var_10] ; this
.text:00000D71                 call    ?CodeSpec@CDecoder@NLzx@NCompress@@AAEJI@Z ; NCompress::NLzx::CDecoder::CodeSpec(uint)
.text:00000D76                 mov     [ebp+var_44], eax
.text:00000D79                 cmp     [ebp+var_44], 0
.text:00000D7D                 jz      short loc_D9C
.text:00000D7F                 mov     ecx, [ebp+var_44]
.text:00000D82                 mov     [ebp+var_6C], ecx
.text:00000D85                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D8C                 lea     ecx, [ebp+var_28] ; this
.text:00000D8F                 call    ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(void)
.text:00000D94                 mov     eax, [ebp+var_6C]
.text:00000D97                 jmp     loc_E41
.text:00000D9C ; ---------------------------------------------------------------------------
.text:00000D9C
.text:00000D9C loc_D9C:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+14Dj
.text:00000D9C                 cmp     [ebp+arg_10], 0
.text:00000DA0                 jz      short loc_E0C
.text:00000DA2                 mov     ecx, [ebp+var_10]
.text:00000DA5                 add     ecx, 8          ; this
.text:00000DA8                 call    ?GetProcessedSize@CDecoder@NBitStream@NLzx@NCompress@@QBE_KXZ ; NCompress::NLzx::NBitStream::CDecoder::GetProcessedSize(void)
.text:00000DAD                 mov     [ebp+var_50], eax
.text:00000DB0                 mov     [ebp+var_4C], edx
.text:00000DB3                 mov     ecx, [ebp+var_10]
.text:00000DB6                 add     ecx, 38h ; '8'  ; this
.text:00000DB9                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000DBE                 sub     eax, [ebp+var_34]
.text:00000DC1                 sbb     edx, [ebp+var_30]
.text:00000DC4                 mov     [ebp+var_60], eax
.text:00000DC7                 mov     [ebp+var_5C], edx
.text:00000DCA                 mov     esi, esp
.text:00000DCC                 lea     edx, [ebp+var_60]
.text:00000DCF                 push    edx
.text:00000DD0                 lea     eax, [ebp+var_50]
.text:00000DD3                 push    eax
.text:00000DD4                 mov     ecx, [ebp+arg_10]
.text:00000DD7                 mov     edx, [ecx]
.text:00000DD9                 mov     eax, [ebp+arg_10]
.text:00000DDC                 push    eax
.text:00000DDD                 mov     ecx, [edx+0Ch]
.text:00000DE0                 call    ecx
.text:00000DE2                 cmp     esi, esp
.text:00000DE4                 call    __RTC_CheckEsp
.text:00000DE9                 mov     [ebp+var_68], eax
.text:00000DEC                 cmp     [ebp+var_68], 0
.text:00000DF0                 jz      short loc_E0C
.text:00000DF2                 mov     edx, [ebp+var_68]
.text:00000DF5                 mov     [ebp+var_70], edx
.text:00000DF8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000DFF                 lea     ecx, [ebp+var_28] ; this
.text:00000E02                 call    ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(void)
.text:00000E07                 mov     eax, [ebp+var_70]
.text:00000E0A                 jmp     short loc_E41
.text:00000E0C ; ---------------------------------------------------------------------------
.text:00000E0C
.text:00000E0C loc_E0C:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+170j
.text:00000E0C                                         ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C0j
.text:00000E0C                 jmp     loc_D14
.text:00000E11 ; ---------------------------------------------------------------------------
.text:00000E11
.text:00000E11 loc_E11:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+135j
.text:00000E11                 mov     [ebp+var_24], 0
.text:00000E15                 mov     eax, [ebp+var_10]
.text:00000E18                 mov     ecx, [eax]
.text:00000E1A                 mov     esi, esp
.text:00000E1C                 mov     edx, [ebp+var_10]
.text:00000E1F                 push    edx
.text:00000E20                 mov     eax, [ecx+10h]
.text:00000E23                 call    eax
.text:00000E25                 cmp     esi, esp
.text:00000E27                 call    __RTC_CheckEsp
.text:00000E2C                 mov     [ebp+var_74], eax
.text:00000E2F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E36                 lea     ecx, [ebp+var_28] ; this
.text:00000E39                 call    ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(void)
.text:00000E3E                 mov     eax, [ebp+var_74]
.text:00000E41
.text:00000E41 loc_E41:                                ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+46j
.text:00000E41                                         ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BBj ...
.text:00000E41                 push    edx
.text:00000E42                 mov     ecx, ebp
.text:00000E44                 push    eax
.text:00000E45                 lea     edx, $LN19
.text:00000E4B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E50                 pop     eax
.text:00000E51                 pop     edx
.text:00000E52                 mov     ecx, [ebp+var_C]
.text:00000E55                 mov     large fs:0, ecx
.text:00000E5C                 pop     ecx
.text:00000E5D                 pop     edi
.text:00000E5E                 pop     esi
.text:00000E5F                 add     esp, 7Ch
.text:00000E62                 cmp     ebp, esp
.text:00000E64                 call    __RTC_CheckEsp
.text:00000E69                 mov     esp, ebp
.text:00000E6B                 pop     ebp
.text:00000E6C                 retn    14h
.text:00000E6C ?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000E6C
.text:00000E6C ; ---------------------------------------------------------------------------
.text:00000E6F                 align 10h
.text:00000E70 $LN19           dd 3                    ; DATA XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+215o
.text:00000E74                 dd offset $LN18
.text:00000E78 $LN18           dd 0FFFFFFD8h, 8        ; DATA XREF: .text:00000E74o
.text:00000E80                 dd offset $LN14         ; "flusher"
.text:00000E84                 dd 0FFFFFFB0h, 8
.text:00000E8C                 dd offset $LN15         ; "inSize"
.text:00000E90                 dd 0FFFFFFA0h, 8
.text:00000E98                 dd offset $LN16         ; "nowPos64"
.text:00000E9C $LN16           db 'nowPos64',0         ; DATA XREF: .text:00000E98o
.text:00000EA5 $LN15           db 'inSize',0           ; DATA XREF: .text:00000E8Co
.text:00000EAC $LN14           db 'flusher',0          ; DATA XREF: .text:00000E80o
.text:00000EB4                 align 10h
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; __int32 __cdecl NCompress::NLzx::CDecoder::Code(NCompress::NLzx::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000EC0                 public ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000EC0 ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000EC0                                         ; DATA XREF: .rdata:00001164o
.text:00000EC0
.text:00000EC0 var_28          = dword ptr -28h
.text:00000EC0 var_24          = dword ptr -24h
.text:00000EC0 var_20          = dword ptr -20h
.text:00000EC0 var_1C          = dword ptr -1Ch
.text:00000EC0 var_18          = dword ptr -18h
.text:00000EC0 var_14          = dword ptr -14h
.text:00000EC0 var_10          = dword ptr -10h
.text:00000EC0 var_C           = dword ptr -0Ch
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0 this            = dword ptr  8
.text:00000EC0 arg_4           = dword ptr  0Ch
.text:00000EC0 arg_8           = dword ptr  10h
.text:00000EC0 arg_C           = dword ptr  14h
.text:00000EC0 arg_10          = dword ptr  18h
.text:00000EC0 arg_14          = dword ptr  1Ch
.text:00000EC0
.text:00000EC0 ; FUNCTION CHUNK AT .text:00000F76 SIZE 0000002F BYTES
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 push    0FFFFFFFFh
.text:00000EC5                 push    offset __ehhandler$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000ECA                 mov     eax, large fs:0
.text:00000ED0                 push    eax
.text:00000ED1                 push    ecx
.text:00000ED2                 sub     esp, 18h
.text:00000ED5                 push    ebx
.text:00000ED6                 push    esi
.text:00000ED7                 push    edi
.text:00000ED8                 mov     eax, 0CCCCCCCCh
.text:00000EDD                 mov     [ebp+var_28], eax
.text:00000EE0                 mov     [ebp+var_24], eax
.text:00000EE3                 mov     [ebp+var_20], eax
.text:00000EE6                 mov     [ebp+var_1C], eax
.text:00000EE9                 mov     [ebp+var_18], eax
.text:00000EEC                 mov     [ebp+var_14], eax
.text:00000EEF                 mov     eax, dword ptr ds:___security_cookie
.text:00000EF4                 xor     eax, ebp
.text:00000EF6                 push    eax
.text:00000EF7                 lea     eax, [ebp+var_C]
.text:00000EFA                 mov     large fs:0, eax
.text:00000F00                 mov     [ebp+var_10], esp
.text:00000F03                 mov     [ebp+var_4], 0
.text:00000F0A                 mov     eax, [ebp+arg_14]
.text:00000F0D                 push    eax             ; struct ICompressProgressInfo *
.text:00000F0E                 mov     ecx, [ebp+arg_10]
.text:00000F11                 push    ecx             ; unsigned __int64 *
.text:00000F12                 mov     edx, [ebp+arg_C]
.text:00000F15                 push    edx             ; unsigned __int64 *
.text:00000F16                 mov     eax, [ebp+arg_8]
.text:00000F19                 push    eax             ; struct ISequentialOutStream *
.text:00000F1A                 mov     ecx, [ebp+arg_4]
.text:00000F1D                 push    ecx             ; struct ISequentialInStream *
.text:00000F1E                 mov     ecx, [ebp+this] ; this
.text:00000F21                 call    ?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00000F26                 mov     [ebp+var_28], eax
.text:00000F29                 mov     eax, [ebp+var_28]
.text:00000F2C                 jmp     short loc_F76
.text:00000F2C ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000F2C
.text:00000F2E
.text:00000F2E ; =============== S U B R O U T I N E =======================================
.text:00000F2E
.text:00000F2E
.text:00000F2E __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:00000F2E                                         ; DATA XREF: .xdata$x:00001210o
.text:00000F2E                 mov     edx, [ebp-18h]
.text:00000F31                 mov     eax, [edx]
.text:00000F33                 mov     [ebp-20h], eax
.text:00000F36                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000F3D                 mov     eax, offset $LN8
.text:00000F42                 retn
.text:00000F42 __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:00000F42
.text:00000F43 ; ---------------------------------------------------------------------------
.text:00000F43                 mov     eax, offset __tryend$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00000F48                 retn
.text:00000F49
.text:00000F49 ; =============== S U B R O U T I N E =======================================
.text:00000F49
.text:00000F49
.text:00000F49 __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00000F49                                         ; DATA XREF: .xdata$x:00001220o
.text:00000F49                 mov     dword ptr [ebp-24h], 1
.text:00000F50                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000F57                 mov     eax, offset $LN10
.text:00000F5C                 retn
.text:00000F5C __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:00000F5C
.text:00000F5D ; ---------------------------------------------------------------------------
.text:00000F5D                 mov     eax, offset __tryend$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00000F62                 retn
.text:00000F63 ; ---------------------------------------------------------------------------
.text:00000F63
.text:00000F63 __tryend$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2:
.text:00000F63                                         ; DATA XREF: .text:00000F43o
.text:00000F63                                         ; .text:00000F5Do
.text:00000F63                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000F6A                 jmp     short loc_F71
.text:00000F6C ; ---------------------------------------------------------------------------
.text:00000F6C
.text:00000F6C $LN10:                                  ; DATA XREF: __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Eo
.text:00000F6C                 mov     eax, [ebp-24h]
.text:00000F6F                 jmp     short loc_F76
.text:00000F71 ; ---------------------------------------------------------------------------
.text:00000F71
.text:00000F71 loc_F71:                                ; CODE XREF: .text:00000F6Aj
.text:00000F71                 jmp     short loc_F76
.text:00000F73 ; ---------------------------------------------------------------------------
.text:00000F73
.text:00000F73 $LN8:                                   ; DATA XREF: __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:00000F73                 mov     eax, [ebp-20h]
.text:00000F76 ; START OF FUNCTION CHUNK FOR ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000F76
.text:00000F76 loc_F76:                                ; CODE XREF: NCompress::NLzx::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Cj
.text:00000F76                                         ; .text:00000F6Fj ...
.text:00000F76                 push    edx
.text:00000F77                 mov     ecx, ebp
.text:00000F79                 push    eax
.text:00000F7A                 lea     edx, $LN16_0
.text:00000F80                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F85                 pop     eax
.text:00000F86                 pop     edx
.text:00000F87                 mov     ecx, [ebp+var_C]
.text:00000F8A                 mov     large fs:0, ecx
.text:00000F91                 pop     ecx
.text:00000F92                 pop     edi
.text:00000F93                 pop     esi
.text:00000F94                 pop     ebx
.text:00000F95                 add     esp, 28h
.text:00000F98                 cmp     ebp, esp
.text:00000F9A                 call    __RTC_CheckEsp
.text:00000F9F                 mov     esp, ebp
.text:00000FA1                 pop     ebp
.text:00000FA2                 retn    18h
.text:00000FA2 ; END OF FUNCTION CHUNK FOR ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000FA2 ; ---------------------------------------------------------------------------
.text:00000FA5                 align 4
.text:00000FA8 $LN16_0         dd 1                    ; DATA XREF: NCompress::NLzx::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BAo
.text:00000FAC                 dd offset $LN15_0
.text:00000FB0 $LN15_0         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000FACo
.text:00000FB8                 dd offset $LN13
.text:00000FBC $LN13           dd 0CCCC0065h           ; DATA XREF: .text:00000FB8o
.text:00000FC0
.text:00000FC0 ; =============== S U B R O U T I N E =======================================
.text:00000FC0
.text:00000FC0 ; Attributes: bp-based frame
.text:00000FC0
.text:00000FC0 ; __int32 __stdcall NCompress::NLzx::CDecoder::SetOutStreamSize(NCompress::NLzx::CDecoder *this, const unsigned __int64 *)
.text:00000FC0                 public ?SetOutStreamSize@CDecoder@NLzx@NCompress@@UAGJPB_K@Z
.text:00000FC0 ?SetOutStreamSize@CDecoder@NLzx@NCompress@@UAGJPB_K@Z proc near
.text:00000FC0                                         ; DATA XREF: .rdata:0000116Co
.text:00000FC0
.text:00000FC0 this            = dword ptr  8
.text:00000FC0 arg_4           = dword ptr  0Ch
.text:00000FC0
.text:00000FC0                 push    ebp
.text:00000FC1                 mov     ebp, esp
.text:00000FC3                 cmp     [ebp+arg_4], 0
.text:00000FC7                 jnz     short loc_FD0
.text:00000FC9                 mov     eax, 80004005h
.text:00000FCE                 jmp     short loc_1015
.text:00000FD0 ; ---------------------------------------------------------------------------
.text:00000FD0
.text:00000FD0 loc_FD0:                                ; CODE XREF: NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)+7j
.text:00000FD0                 mov     eax, [ebp+this]
.text:00000FD3                 movzx   ecx, byte ptr [eax+1CC0h]
.text:00000FDA                 test    ecx, ecx
.text:00000FDC                 jnz     short loc_FF0
.text:00000FDE                 push    0               ; unsigned int
.text:00000FE0                 push    0               ; bool
.text:00000FE2                 mov     edx, [ebp+this]
.text:00000FE5                 mov     ecx, [edx+1CB4h] ; this
.text:00000FEB                 call    ?Init@Cx86ConvertOutStream@NLzx@NCompress@@QAEX_NI@Z ; NCompress::NLzx::Cx86ConvertOutStream::Init(bool,uint)
.text:00000FF0
.text:00000FF0 loc_FF0:                                ; CODE XREF: NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)+1Cj
.text:00000FF0                 mov     eax, [ebp+this]
.text:00000FF3                 mov     dword ptr [eax+1CC4h], 0FFFFFFFEh
.text:00000FFD                 mov     ecx, [ebp+this]
.text:00001000                 movzx   edx, byte ptr [ecx+1CC0h]
.text:00001007                 push    edx             ; bool
.text:00001008                 mov     ecx, [ebp+this]
.text:0000100B                 add     ecx, 38h ; '8'  ; this
.text:0000100E                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:00001013                 xor     eax, eax
.text:00001015
.text:00001015 loc_1015:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)+Ej
.text:00001015                 cmp     ebp, esp
.text:00001017                 call    __RTC_CheckEsp
.text:0000101C                 pop     ebp
.text:0000101D                 retn    8
.text:0000101D ?SetOutStreamSize@CDecoder@NLzx@NCompress@@UAGJPB_K@Z endp
.text:0000101D
.text:00001020
.text:00001020 ; =============== S U B R O U T I N E =======================================
.text:00001020
.text:00001020 ; Attributes: bp-based frame
.text:00001020
.text:00001020 ; __int32 __thiscall NCompress::NLzx::CDecoder::SetParams(NCompress::NLzx::CDecoder *this, unsigned int)
.text:00001020                 public ?SetParams@CDecoder@NLzx@NCompress@@QAEJI@Z
.text:00001020 ?SetParams@CDecoder@NLzx@NCompress@@QAEJI@Z proc near
.text:00001020
.text:00001020 var_8           = dword ptr -8
.text:00001020 var_4           = dword ptr -4
.text:00001020 arg_0           = dword ptr  8
.text:00001020
.text:00001020                 push    ebp
.text:00001021                 mov     ebp, esp
.text:00001023                 sub     esp, 8
.text:00001026                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000102D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001034                 mov     [ebp+var_4], ecx
.text:00001037                 cmp     [ebp+arg_0], 0Fh
.text:0000103B                 jb      short loc_1043
.text:0000103D                 cmp     [ebp+arg_0], 15h
.text:00001041                 jbe     short loc_104A
.text:00001043
.text:00001043 loc_1043:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+1Bj
.text:00001043                 mov     eax, 80070057h
.text:00001048                 jmp     short loc_10BA
.text:0000104A ; ---------------------------------------------------------------------------
.text:0000104A
.text:0000104A loc_104A:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+21j
.text:0000104A                 cmp     [ebp+arg_0], 14h
.text:0000104E                 jnb     short loc_105A
.text:00001050                 mov     eax, [ebp+arg_0]
.text:00001053                 shl     eax, 1
.text:00001055                 mov     [ebp+var_8], eax
.text:00001058                 jmp     short loc_1070
.text:0000105A ; ---------------------------------------------------------------------------
.text:0000105A
.text:0000105A loc_105A:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+2Ej
.text:0000105A                 cmp     [ebp+arg_0], 14h
.text:0000105E                 jnz     short loc_1069
.text:00001060                 mov     [ebp+var_8], 2Ah ; '*'
.text:00001067                 jmp     short loc_1070
.text:00001069 ; ---------------------------------------------------------------------------
.text:00001069
.text:00001069 loc_1069:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+3Ej
.text:00001069                 mov     [ebp+var_8], 32h ; '2'
.text:00001070
.text:00001070 loc_1070:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+38j
.text:00001070                                         ; NCompress::NLzx::CDecoder::SetParams(uint)+47j
.text:00001070                 mov     ecx, [ebp+var_8]
.text:00001073                 shl     ecx, 3
.text:00001076                 mov     edx, [ebp+var_4]
.text:00001079                 mov     [edx+6Ch], ecx
.text:0000107C                 push    200000h         ; unsigned int
.text:00001081                 mov     ecx, [ebp+var_4]
.text:00001084                 add     ecx, 38h ; '8'  ; this
.text:00001087                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:0000108C                 movzx   eax, al
.text:0000108F                 test    eax, eax
.text:00001091                 jnz     short loc_109A
.text:00001093                 mov     eax, 8007000Eh
.text:00001098                 jmp     short loc_10BA
.text:0000109A ; ---------------------------------------------------------------------------
.text:0000109A
.text:0000109A loc_109A:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+71j
.text:0000109A                 push    10000h          ; unsigned int
.text:0000109F                 mov     ecx, [ebp+var_4]
.text:000010A2                 add     ecx, 8          ; this
.text:000010A5                 call    ?Create@CDecoder@NBitStream@NLzx@NCompress@@QAE_NI@Z ; NCompress::NLzx::NBitStream::CDecoder::Create(uint)
.text:000010AA                 movzx   ecx, al
.text:000010AD                 test    ecx, ecx
.text:000010AF                 jnz     short loc_10B8
.text:000010B1                 mov     eax, 8007000Eh
.text:000010B6                 jmp     short loc_10BA
.text:000010B8 ; ---------------------------------------------------------------------------
.text:000010B8
.text:000010B8 loc_10B8:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+8Fj
.text:000010B8                 xor     eax, eax
.text:000010BA
.text:000010BA loc_10BA:                               ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+28j
.text:000010BA                                         ; NCompress::NLzx::CDecoder::SetParams(uint)+78j ...
.text:000010BA                 add     esp, 8
.text:000010BD                 cmp     ebp, esp
.text:000010BF                 call    __RTC_CheckEsp
.text:000010C4                 mov     esp, ebp
.text:000010C6                 pop     ebp
.text:000010C7                 retn    4
.text:000010C7 ?SetParams@CDecoder@NLzx@NCompress@@QAEJI@Z endp
.text:000010C7
.text:000010C7 ; ---------------------------------------------------------------------------
.text:000010CA                 align 4
.text:000010CA _text           ends
.text:000010CA
.text$x:000010CC ; ===========================================================================
.text$x:000010CC
.text$x:000010CC ; Segment type: Pure code
.text$x:000010CC ; Segment permissions: Read/Execute
.text$x:000010CC _text$x         segment para public 'CODE' use32
.text$x:000010CC                 assume cs:_text$x
.text$x:000010CC                 ;org 10CCh
.text$x:000010CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000010CC
.text$x:000010CC ; =============== S U B R O U T I N E =======================================
.text$x:000010CC
.text$x:000010CC
.text$x:000010CC __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$0 proc near
.text$x:000010CC                                         ; DATA XREF: .xdata$x:00001174o
.text$x:000010CC                 mov     ecx, [ebp-10h]
.text$x:000010CF                 add     ecx, 8          ; this
.text$x:000010D2                 jmp     ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::NBitStream::CDecoder::~CDecoder(void)
.text$x:000010D2 __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$0 endp
.text$x:000010D2
.text$x:000010D7
.text$x:000010D7 ; =============== S U B R O U T I N E =======================================
.text$x:000010D7
.text$x:000010D7
.text$x:000010D7 __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$1 proc near
.text$x:000010D7                                         ; DATA XREF: .xdata$x:0000117Co
.text$x:000010D7                 mov     ecx, [ebp-10h]
.text$x:000010DA                 add     ecx, 38h ; '8'  ; this
.text$x:000010DD                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:000010DD __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$1 endp
.text$x:000010DD
.text$x:000010E2
.text$x:000010E2 ; =============== S U B R O U T I N E =======================================
.text$x:000010E2
.text$x:000010E2
.text$x:000010E2 __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$2 proc near
.text$x:000010E2                                         ; DATA XREF: .xdata$x:00001184o
.text$x:000010E2                 mov     ecx, [ebp-10h]
.text$x:000010E5                 add     ecx, 1CB8h
.text$x:000010EB                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000010EB __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$2 endp
.text$x:000010EB
.text$x:000010F0
.text$x:000010F0 ; =============== S U B R O U T I N E =======================================
.text$x:000010F0
.text$x:000010F0
.text$x:000010F0 __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$3 proc near
.text$x:000010F0                                         ; DATA XREF: .xdata$x:0000118Co
.text$x:000010F0                 mov     eax, [ebp-18h]
.text$x:000010F3                 push    eax             ; void *
.text$x:000010F4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000010F9                 pop     ecx
.text$x:000010FA                 retn
.text$x:000010FA __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$3 endp
.text$x:000010FA
.text$x:000010FB
.text$x:000010FB ; =============== S U B R O U T I N E =======================================
.text$x:000010FB
.text$x:000010FB
.text$x:000010FB __ehhandler$??0CDecoder@NLzx@NCompress@@QAE@_N@Z proc near
.text$x:000010FB                                         ; DATA XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+5o
.text$x:000010FB
.text$x:000010FB arg_4           = dword ptr  8
.text$x:000010FB
.text$x:000010FB                 mov     edx, [esp+arg_4]
.text$x:000010FF                 lea     eax, [edx+0Ch]
.text$x:00001102                 mov     ecx, [edx-14h]
.text$x:00001105                 xor     ecx, eax
.text$x:00001107                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000110C                 mov     eax, offset __ehfuncinfo$??0CDecoder@NLzx@NCompress@@QAE@_N@Z
.text$x:00001111                 jmp     ___CxxFrameHandler3
.text$x:00001111 __ehhandler$??0CDecoder@NLzx@NCompress@@QAE@_N@Z endp
.text$x:00001111
.text$x:00001116
.text$x:00001116 ; =============== S U B R O U T I N E =======================================
.text$x:00001116
.text$x:00001116
.text$x:00001116 __unwindfunclet$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00001116                                         ; DATA XREF: .xdata$x:000011B8o
.text$x:00001116                 lea     ecx, [ebp-28h]  ; this
.text$x:00001119                 jmp     ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(void)
.text$x:00001119 __unwindfunclet$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text$x:00001119
.text$x:0000111E
.text$x:0000111E ; =============== S U B R O U T I N E =======================================
.text$x:0000111E
.text$x:0000111E
.text$x:0000111E __ehhandler$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:0000111E                                         ; DATA XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:0000111E
.text$x:0000111E arg_4           = dword ptr  8
.text$x:0000111E
.text$x:0000111E                 mov     edx, [esp+arg_4]
.text$x:00001122                 lea     eax, [edx+0Ch]
.text$x:00001125                 mov     ecx, [edx-7Ch]
.text$x:00001128                 xor     ecx, eax
.text$x:0000112A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000112F                 mov     eax, offset __ehfuncinfo$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00001134                 jmp     ___CxxFrameHandler3
.text$x:00001134 __ehhandler$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00001134
.text$x:00001139
.text$x:00001139 ; =============== S U B R O U T I N E =======================================
.text$x:00001139
.text$x:00001139
.text$x:00001139 __ehhandler$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00001139                                         ; DATA XREF: NCompress::NLzx::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00001139
.text$x:00001139 arg_4           = dword ptr  8
.text$x:00001139
.text$x:00001139                 mov     edx, [esp+arg_4]
.text$x:0000113D                 lea     eax, [edx+0Ch]
.text$x:00001140                 mov     ecx, [edx-2Ch]
.text$x:00001143                 xor     ecx, eax
.text$x:00001145                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000114A                 mov     eax, offset __ehfuncinfo$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:0000114F                 jmp     ___CxxFrameHandler3
.text$x:0000114F __ehhandler$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:0000114F
.text$x:0000114F _text$x         ends
.text$x:0000114F
.rdata:00001154 ; ===========================================================================
.rdata:00001154
.rdata:00001154 ; Segment type: Pure data
.rdata:00001154 ; Segment permissions: Read
.rdata:00001154 _rdata          segment dword public 'DATA' use32
.rdata:00001154                 assume cs:_rdata
.rdata:00001154                 ;org 1154h
.rdata:00001154 ; COMDAT (pick largest)
.rdata:00001154                 dd offset ??_R4CDecoder@NLzx@NCompress@@6B@ ; const NCompress::NLzx::CDecoder::`RTTI Complete Object Locator'
.rdata:00001158                 public ??_7CDecoder@NLzx@NCompress@@6B@
.rdata:00001158 ; const NCompress::NLzx::CDecoder::`vftable'
.rdata:00001158 ??_7CDecoder@NLzx@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001158                                         ; DATA XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+4Fo
.rdata:00001158                                         ; NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:0000115C                 dd offset ?AddRef@CDecoder@NLzx@NCompress@@UAGKXZ ; NCompress::NLzx::CDecoder::AddRef(void)
.rdata:00001160                 dd offset ?Release@CDecoder@NLzx@NCompress@@UAGKXZ ; NCompress::NLzx::CDecoder::Release(void)
.rdata:00001164                 dd offset ?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzx::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00001168                 dd offset ?Flush@CDecoder@NLzx@NCompress@@UAGJXZ ; NCompress::NLzx::CDecoder::Flush(void)
.rdata:0000116C                 dd offset ?SetOutStreamSize@CDecoder@NLzx@NCompress@@UAGJPB_K@Z ; NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:0000116C _rdata          ends
.rdata:0000116C
.xdata$x:00001170 ; ===========================================================================
.xdata$x:00001170
.xdata$x:00001170 ; Segment type: Pure data
.xdata$x:00001170 ; Segment permissions: Read
.xdata$x:00001170 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001170                 assume cs:_xdata$x
.xdata$x:00001170                 ;org 1170h
.xdata$x:00001170 __unwindtable$??0CDecoder@NLzx@NCompress@@QAE@_N@Z db 0FFh
.xdata$x:00001170                                         ; DATA XREF: .xdata$x:00001198o
.xdata$x:00001171                 db 0FFh
.xdata$x:00001172                 db 0FFh
.xdata$x:00001173                 db 0FFh
.xdata$x:00001174                 dd offset __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$0
.xdata$x:00001178                 db    0
.xdata$x:00001179                 db    0
.xdata$x:0000117A                 db    0
.xdata$x:0000117B                 db    0
.xdata$x:0000117C                 dd offset __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$1
.xdata$x:00001180                 db    1
.xdata$x:00001181                 db    0
.xdata$x:00001182                 db    0
.xdata$x:00001183                 db    0
.xdata$x:00001184                 dd offset __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$2
.xdata$x:00001188                 db    2
.xdata$x:00001189                 db    0
.xdata$x:0000118A                 db    0
.xdata$x:0000118B                 db    0
.xdata$x:0000118C                 dd offset __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$3
.xdata$x:00001190 __ehfuncinfo$??0CDecoder@NLzx@NCompress@@QAE@_N@Z db  22h ; "
.xdata$x:00001190                                         ; DATA XREF: __ehhandler$??0CDecoder@NLzx@NCompress@@QAE@_N@Z+11o
.xdata$x:00001191                 db    5
.xdata$x:00001192                 db  93h ; ô
.xdata$x:00001193                 db  19h
.xdata$x:00001194                 db    4
.xdata$x:00001195                 db    0
.xdata$x:00001196                 db    0
.xdata$x:00001197                 db    0
.xdata$x:00001198                 dd offset __unwindtable$??0CDecoder@NLzx@NCompress@@QAE@_N@Z
.xdata$x:0000119C                 db    0
.xdata$x:0000119D                 db    0
.xdata$x:0000119E                 db    0
.xdata$x:0000119F                 db    0
.xdata$x:000011A0                 db    0
.xdata$x:000011A1                 db    0
.xdata$x:000011A2                 db    0
.xdata$x:000011A3                 db    0
.xdata$x:000011A4                 db    0
.xdata$x:000011A5                 db    0
.xdata$x:000011A6                 db    0
.xdata$x:000011A7                 db    0
.xdata$x:000011A8                 db    0
.xdata$x:000011A9                 db    0
.xdata$x:000011AA                 db    0
.xdata$x:000011AB                 db    0
.xdata$x:000011AC                 db    0
.xdata$x:000011AD                 db    0
.xdata$x:000011AE                 db    0
.xdata$x:000011AF                 db    0
.xdata$x:000011B0                 db    1
.xdata$x:000011B1                 db    0
.xdata$x:000011B2                 db    0
.xdata$x:000011B3                 db    0
.xdata$x:000011B4 __unwindtable$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000011B4                                         ; DATA XREF: .xdata$x:000011C4o
.xdata$x:000011B5                 db 0FFh
.xdata$x:000011B6                 db 0FFh
.xdata$x:000011B7                 db 0FFh
.xdata$x:000011B8                 dd offset __unwindfunclet$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:000011BC __ehfuncinfo$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000011BC                                         ; DATA XREF: __ehhandler$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:000011BD                 db    5
.xdata$x:000011BE                 db  93h ; ô
.xdata$x:000011BF                 db  19h
.xdata$x:000011C0                 db    1
.xdata$x:000011C1                 db    0
.xdata$x:000011C2                 db    0
.xdata$x:000011C3                 db    0
.xdata$x:000011C4                 dd offset __unwindtable$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000011C8                 db    0
.xdata$x:000011C9                 db    0
.xdata$x:000011CA                 db    0
.xdata$x:000011CB                 db    0
.xdata$x:000011CC                 db    0
.xdata$x:000011CD                 db    0
.xdata$x:000011CE                 db    0
.xdata$x:000011CF                 db    0
.xdata$x:000011D0                 db    0
.xdata$x:000011D1                 db    0
.xdata$x:000011D2                 db    0
.xdata$x:000011D3                 db    0
.xdata$x:000011D4                 db    0
.xdata$x:000011D5                 db    0
.xdata$x:000011D6                 db    0
.xdata$x:000011D7                 db    0
.xdata$x:000011D8                 db    0
.xdata$x:000011D9                 db    0
.xdata$x:000011DA                 db    0
.xdata$x:000011DB                 db    0
.xdata$x:000011DC                 db    1
.xdata$x:000011DD                 db    0
.xdata$x:000011DE                 db    0
.xdata$x:000011DF                 db    0
.xdata$x:000011E0 __unwindtable$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000011E0                                         ; DATA XREF: .xdata$x:0000122Co
.xdata$x:000011E1                 db 0FFh
.xdata$x:000011E2                 db 0FFh
.xdata$x:000011E3                 db 0FFh
.xdata$x:000011E4                 db    0
.xdata$x:000011E5                 db    0
.xdata$x:000011E6                 db    0
.xdata$x:000011E7                 db    0
.xdata$x:000011E8                 db 0FFh
.xdata$x:000011E9                 db 0FFh
.xdata$x:000011EA                 db 0FFh
.xdata$x:000011EB                 db 0FFh
.xdata$x:000011EC                 db    0
.xdata$x:000011ED                 db    0
.xdata$x:000011EE                 db    0
.xdata$x:000011EF                 db    0
.xdata$x:000011F0 __tryblocktable$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:000011F0                                         ; DATA XREF: .xdata$x:00001234o
.xdata$x:000011F1                 db    0
.xdata$x:000011F2                 db    0
.xdata$x:000011F3                 db    0
.xdata$x:000011F4                 db    0
.xdata$x:000011F5                 db    0
.xdata$x:000011F6                 db    0
.xdata$x:000011F7                 db    0
.xdata$x:000011F8                 db    1
.xdata$x:000011F9                 db    0
.xdata$x:000011FA                 db    0
.xdata$x:000011FB                 db    0
.xdata$x:000011FC                 db    2
.xdata$x:000011FD                 db    0
.xdata$x:000011FE                 db    0
.xdata$x:000011FF                 db    0
.xdata$x:00001200                 dd offset __catchsym$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.xdata$x:00001204 __catchsym$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3 db    9
.xdata$x:00001204                                         ; DATA XREF: .xdata$x:00001200o
.xdata$x:00001205                 db    0
.xdata$x:00001206                 db    0
.xdata$x:00001207                 db    0
.xdata$x:00001208                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:0000120C                 db 0E8h ; F
.xdata$x:0000120D                 db 0FFh
.xdata$x:0000120E                 db 0FFh
.xdata$x:0000120F                 db 0FFh
.xdata$x:00001210                 dd offset __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00001214                 dd offset loc_3C+4
.xdata$x:00001218                 align 10h
.xdata$x:00001220                 dd offset __catch$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00001224 __ehfuncinfo$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00001224                                         ; DATA XREF: __ehhandler$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00001225                 db    5
.xdata$x:00001226                 db  93h ; ô
.xdata$x:00001227                 db  19h
.xdata$x:00001228                 db    2
.xdata$x:00001229                 db    0
.xdata$x:0000122A                 db    0
.xdata$x:0000122B                 db    0
.xdata$x:0000122C                 dd offset __unwindtable$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00001230                 db    1
.xdata$x:00001231                 db    0
.xdata$x:00001232                 db    0
.xdata$x:00001233                 db    0
.xdata$x:00001234                 dd offset __tryblocktable$?Code@CDecoder@NLzx@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00001238                 db    0
.xdata$x:00001239                 db    0
.xdata$x:0000123A                 db    0
.xdata$x:0000123B                 db    0
.xdata$x:0000123C                 db    0
.xdata$x:0000123D                 db    0
.xdata$x:0000123E                 db    0
.xdata$x:0000123F                 db    0
.xdata$x:00001240                 db    0
.xdata$x:00001241                 db    0
.xdata$x:00001242                 db    0
.xdata$x:00001243                 db    0
.xdata$x:00001244                 db    1
.xdata$x:00001245                 db    0
.xdata$x:00001246                 db    0
.xdata$x:00001247                 db    0
.xdata$x:00001247 _xdata$x        ends
.xdata$x:00001247
.rtc$TMZ:00001248 ; ===========================================================================
.rtc$TMZ:00001248
.rtc$TMZ:00001248 ; Segment type: Pure data
.rtc$TMZ:00001248 ; Segment permissions: Read
.rtc$TMZ:00001248 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001248                 assume cs:_rtc$TMZ
.rtc$TMZ:00001248                 ;org 1248h
.rtc$TMZ:00001248 ; COMDAT (pick any)
.rtc$TMZ:00001248 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001248 _rtc$TMZ        ends
.rtc$TMZ:00001248
.rtc$IMZ:0000124C ; ===========================================================================
.rtc$IMZ:0000124C
.rtc$IMZ:0000124C ; Segment type: Pure data
.rtc$IMZ:0000124C ; Segment permissions: Read
.rtc$IMZ:0000124C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000124C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000124C                 ;org 124Ch
.rtc$IMZ:0000124C ; COMDAT (pick any)
.rtc$IMZ:0000124C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000124C _rtc$IMZ        ends
.rtc$IMZ:0000124C
.rdata$r:00001250 ; ===========================================================================
.rdata$r:00001250
.rdata$r:00001250 ; Segment type: Pure data
.rdata$r:00001250 ; Segment permissions: Read
.rdata$r:00001250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001250                 assume cs:_rdata$r
.rdata$r:00001250                 ;org 1250h
.rdata$r:00001250 ; COMDAT (pick any)
.rdata$r:00001250                 public ??_R4CDecoder@NLzx@NCompress@@6B@
.rdata$r:00001250 ; const NCompress::NLzx::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00001250 ??_R4CDecoder@NLzx@NCompress@@6B@ db    0 ; DATA XREF: .rdata:00001154o
.rdata$r:00001251                 db    0
.rdata$r:00001252                 db    0
.rdata$r:00001253                 db    0
.rdata$r:00001254                 db    0
.rdata$r:00001255                 db    0
.rdata$r:00001256                 db    0
.rdata$r:00001257                 db    0
.rdata$r:00001258                 db    0
.rdata$r:00001259                 db    0
.rdata$r:0000125A                 db    0
.rdata$r:0000125B                 db    0
.rdata$r:0000125C                 dd offset ??_R0?AVCDecoder@NLzx@NCompress@@@8 ; NCompress::NLzx::CDecoder `RTTI Type Descriptor'
.rdata$r:00001260                 dd offset ??_R3CDecoder@NLzx@NCompress@@8 ; NCompress::NLzx::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001260 _rdata$r        ends
.rdata$r:00001260
.data:00001264 ; ===========================================================================
.data:00001264
.data:00001264 ; Segment type: Pure data
.data:00001264 ; Segment permissions: Read/Write
.data:00001264 _data           segment dword public 'DATA' use32
.data:00001264                 assume cs:_data
.data:00001264                 ;org 1264h
.data:00001264 ; COMDAT (pick any)
.data:00001264                 public ??_R0?AVCDecoder@NLzx@NCompress@@@8
.data:00001264 ; class NCompress::NLzx::CDecoder `RTTI Type Descriptor'
.data:00001264 ??_R0?AVCDecoder@NLzx@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00001264                                         ; DATA XREF: .rdata$r:0000125Co
.data:00001264                                         ; .rdata$r:NCompress::NLzx::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001264                                         ; const type_info::`vftable'
.data:00001268                 db    0
.data:00001269                 db    0
.data:0000126A                 db    0
.data:0000126B                 db    0
.data:0000126C                 db  2Eh ; .
.data:0000126D                 db  3Fh ; ?
.data:0000126E                 db  41h ; A
.data:0000126F                 db  56h ; V
.data:00001270                 db  43h ; C
.data:00001271                 db  44h ; D
.data:00001272                 db  65h ; e
.data:00001273                 db  63h ; c
.data:00001274                 db  6Fh ; o
.data:00001275                 db  64h ; d
.data:00001276                 db  65h ; e
.data:00001277                 db  72h ; r
.data:00001278                 db  40h ; @
.data:00001279                 db  4Eh ; N
.data:0000127A                 db  4Ch ; L
.data:0000127B                 db  7Ah ; z
.data:0000127C                 db  78h ; x
.data:0000127D                 db  40h ; @
.data:0000127E                 db  4Eh ; N
.data:0000127F                 db  43h ; C
.data:00001280                 db  6Fh ; o
.data:00001281                 db  6Dh ; m
.data:00001282                 db  70h ; p
.data:00001283                 db  72h ; r
.data:00001284                 db  65h ; e
.data:00001285                 db  73h ; s
.data:00001286                 db  73h ; s
.data:00001287                 db  40h ; @
.data:00001288                 db  40h ; @
.data:00001289                 db    0
.data:0000128A                 align 4
.data:0000128A _data           ends
.data:0000128A
.rdata$r:0000128C ; ===========================================================================
.rdata$r:0000128C
.rdata$r:0000128C ; Segment type: Pure data
.rdata$r:0000128C ; Segment permissions: Read
.rdata$r:0000128C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000128C                 assume cs:_rdata$r
.rdata$r:0000128C                 ;org 128Ch
.rdata$r:0000128C ; COMDAT (pick any)
.rdata$r:0000128C                 public ??_R3CDecoder@NLzx@NCompress@@8
.rdata$r:0000128C ; NCompress::NLzx::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000128C ??_R3CDecoder@NLzx@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00001260o
.rdata$r:0000128C                                         ; .rdata$r:000012C8o
.rdata$r:0000128D                 db    0
.rdata$r:0000128E                 db    0
.rdata$r:0000128F                 db    0
.rdata$r:00001290                 db    1
.rdata$r:00001291                 db    0
.rdata$r:00001292                 db    0
.rdata$r:00001293                 db    0
.rdata$r:00001294                 db    4
.rdata$r:00001295                 db    0
.rdata$r:00001296                 db    0
.rdata$r:00001297                 db    0
.rdata$r:00001298                 dd offset ??_R2CDecoder@NLzx@NCompress@@8 ; NCompress::NLzx::CDecoder::`RTTI Base Class Array'
.rdata$r:00001298 _rdata$r        ends
.rdata$r:00001298
.rdata$r:0000129C ; ===========================================================================
.rdata$r:0000129C
.rdata$r:0000129C ; Segment type: Pure data
.rdata$r:0000129C ; Segment permissions: Read
.rdata$r:0000129C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000129C                 assume cs:_rdata$r
.rdata$r:0000129C                 ;org 129Ch
.rdata$r:0000129C ; COMDAT (pick any)
.rdata$r:0000129C                 public ??_R2CDecoder@NLzx@NCompress@@8
.rdata$r:0000129C ; NCompress::NLzx::CDecoder::`RTTI Base Class Array'
.rdata$r:0000129C ??_R2CDecoder@NLzx@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NLzx@NCompress@@8
.rdata$r:0000129C                                         ; DATA XREF: .rdata$r:00001298o
.rdata$r:0000129C                                         ; NCompress::NLzx::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012A0                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012A4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012A8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000012AC                 db    0
.rdata$r:000012AD                 align 10h
.rdata$r:000012AD _rdata$r        ends
.rdata$r:000012AD
.rdata$r:000012B0 ; ===========================================================================
.rdata$r:000012B0
.rdata$r:000012B0 ; Segment type: Pure data
.rdata$r:000012B0 ; Segment permissions: Read
.rdata$r:000012B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012B0                 assume cs:_rdata$r
.rdata$r:000012B0                 ;org 12B0h
.rdata$r:000012B0 ; COMDAT (pick any)
.rdata$r:000012B0                 public ??_R1A@?0A@EA@CDecoder@NLzx@NCompress@@8
.rdata$r:000012B0 ; NCompress::NLzx::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000012B0 ??_R1A@?0A@EA@CDecoder@NLzx@NCompress@@8 dd offset ??_R0?AVCDecoder@NLzx@NCompress@@@8
.rdata$r:000012B0                                         ; DATA XREF: .rdata$r:NCompress::NLzx::CDecoder::`RTTI Base Class Array'o
.rdata$r:000012B0                                         ; NCompress::NLzx::CDecoder `RTTI Type Descriptor'
.rdata$r:000012B4                 db    3
.rdata$r:000012B5                 db    0
.rdata$r:000012B6                 db    0
.rdata$r:000012B7                 db    0
.rdata$r:000012B8                 db    0
.rdata$r:000012B9                 db    0
.rdata$r:000012BA                 db    0
.rdata$r:000012BB                 db    0
.rdata$r:000012BC                 db 0FFh
.rdata$r:000012BD                 db 0FFh
.rdata$r:000012BE                 db 0FFh
.rdata$r:000012BF                 db 0FFh
.rdata$r:000012C0                 db    0
.rdata$r:000012C1                 db    0
.rdata$r:000012C2                 db    0
.rdata$r:000012C3                 db    0
.rdata$r:000012C4                 db  40h ; @
.rdata$r:000012C5                 db    0
.rdata$r:000012C6                 db    0
.rdata$r:000012C7                 db    0
.rdata$r:000012C8                 dd offset ??_R3CDecoder@NLzx@NCompress@@8 ; NCompress::NLzx::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012C8 _rdata$r        ends
.rdata$r:000012C8
.rdata$r:000012CC ; ===========================================================================
.rdata$r:000012CC
.rdata$r:000012CC ; Segment type: Pure data
.rdata$r:000012CC ; Segment permissions: Read
.rdata$r:000012CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012CC                 assume cs:_rdata$r
.rdata$r:000012CC                 ;org 12CCh
.rdata$r:000012CC ; COMDAT (pick any)
.rdata$r:000012CC                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000012CC ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000012CC ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:000012CC                                         ; DATA XREF: .rdata$r:000012A0o
.rdata$r:000012CC                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:000012CC                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000012D0                 db    1
.rdata$r:000012D1                 db    0
.rdata$r:000012D2                 db    0
.rdata$r:000012D3                 db    0
.rdata$r:000012D4                 db    0
.rdata$r:000012D5                 db    0
.rdata$r:000012D6                 db    0
.rdata$r:000012D7                 db    0
.rdata$r:000012D8                 db 0FFh
.rdata$r:000012D9                 db 0FFh
.rdata$r:000012DA                 db 0FFh
.rdata$r:000012DB                 db 0FFh
.rdata$r:000012DC                 db    0
.rdata$r:000012DD                 db    0
.rdata$r:000012DE                 db    0
.rdata$r:000012DF                 db    0
.rdata$r:000012E0                 db  40h ; @
.rdata$r:000012E1                 db    0
.rdata$r:000012E2                 db    0
.rdata$r:000012E3                 db    0
.rdata$r:000012E4                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012E4 _rdata$r        ends
.rdata$r:000012E4
.data:000012E8 ; ===========================================================================
.data:000012E8
.data:000012E8 ; Segment type: Pure data
.data:000012E8 ; Segment permissions: Read/Write
.data:000012E8 _data           segment dword public 'DATA' use32
.data:000012E8                 assume cs:_data
.data:000012E8                 ;org 12E8h
.data:000012E8 ; COMDAT (pick any)
.data:000012E8                 public ??_R0?AUICompressCoder@@@8
.data:000012E8 ; struct ICompressCoder `RTTI Type Descriptor'
.data:000012E8 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:000012E8                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000012E8                                         ; .rdata$r:00001780o
.data:000012E8                                         ; const type_info::`vftable'
.data:000012EC                 align 10h
.data:000012F0 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00001305                 align 4
.data:00001305 _data           ends
.data:00001305
.rdata$r:00001308 ; ===========================================================================
.rdata$r:00001308
.rdata$r:00001308 ; Segment type: Pure data
.rdata$r:00001308 ; Segment permissions: Read
.rdata$r:00001308 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001308                 assume cs:_rdata$r
.rdata$r:00001308                 ;org 1308h
.rdata$r:00001308 ; COMDAT (pick any)
.rdata$r:00001308                 public ??_R3ICompressCoder@@8
.rdata$r:00001308 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001308 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:000012E4o
.rdata$r:00001308                                         ; .rdata$r:00001784o
.rdata$r:00001309                 db    0
.rdata$r:0000130A                 db    0
.rdata$r:0000130B                 db    0
.rdata$r:0000130C                 db    0
.rdata$r:0000130D                 db    0
.rdata$r:0000130E                 db    0
.rdata$r:0000130F                 db    0
.rdata$r:00001310                 db    2
.rdata$r:00001311                 db    0
.rdata$r:00001312                 db    0
.rdata$r:00001313                 db    0
.rdata$r:00001314                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00001314 _rdata$r        ends
.rdata$r:00001314
.rdata$r:00001318 ; ===========================================================================
.rdata$r:00001318
.rdata$r:00001318 ; Segment type: Pure data
.rdata$r:00001318 ; Segment permissions: Read
.rdata$r:00001318 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001318                 assume cs:_rdata$r
.rdata$r:00001318                 ;org 1318h
.rdata$r:00001318 ; COMDAT (pick any)
.rdata$r:00001318                 public ??_R2ICompressCoder@@8
.rdata$r:00001318 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00001318 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00001318                                         ; DATA XREF: .rdata$r:00001314o
.rdata$r:00001318                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000131C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001320                 db    0
.rdata$r:00001321                 align 4
.rdata$r:00001321 _rdata$r        ends
.rdata$r:00001321
.rdata$r:00001324 ; ===========================================================================
.rdata$r:00001324
.rdata$r:00001324 ; Segment type: Pure data
.rdata$r:00001324 ; Segment permissions: Read
.rdata$r:00001324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001324                 assume cs:_rdata$r
.rdata$r:00001324                 ;org 1324h
.rdata$r:00001324 ; COMDAT (pick any)
.rdata$r:00001324                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001324 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001324 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001324                                         ; DATA XREF: .rdata$r:000012A4o
.rdata$r:00001324                                         ; .rdata$r:0000131Co ...
.rdata$r:00001324                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001328                 align 10h
.rdata$r:00001330                 db 0FFh
.rdata$r:00001331                 db 0FFh
.rdata$r:00001332                 db 0FFh
.rdata$r:00001333                 db 0FFh
.rdata$r:00001334                 db    0
.rdata$r:00001335                 db    0
.rdata$r:00001336                 db    0
.rdata$r:00001337                 db    0
.rdata$r:00001338                 db  40h ; @
.rdata$r:00001339                 db    0
.rdata$r:0000133A                 db    0
.rdata$r:0000133B                 db    0
.rdata$r:0000133C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000133C _rdata$r        ends
.rdata$r:0000133C
.data:00001340 ; ===========================================================================
.data:00001340
.data:00001340 ; Segment type: Pure data
.data:00001340 ; Segment permissions: Read/Write
.data:00001340 _data           segment dword public 'DATA' use32
.data:00001340                 assume cs:_data
.data:00001340                 ;org 1340h
.data:00001340 ; COMDAT (pick any)
.data:00001340                 public ??_R0?AUIUnknown@@@8
.data:00001340 ; struct IUnknown `RTTI Type Descriptor'
.data:00001340 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001340                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001340                                         ; const type_info::`vftable'
.data:00001344                 align 8
.data:00001348 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00001357                 align 4
.data:00001357 _data           ends
.data:00001357
.rdata$r:00001358 ; ===========================================================================
.rdata$r:00001358
.rdata$r:00001358 ; Segment type: Pure data
.rdata$r:00001358 ; Segment permissions: Read
.rdata$r:00001358 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001358                 assume cs:_rdata$r
.rdata$r:00001358                 ;org 1358h
.rdata$r:00001358 ; COMDAT (pick any)
.rdata$r:00001358                 public ??_R3IUnknown@@8
.rdata$r:00001358 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001358 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000133Co
.rdata$r:00001359                 db    0
.rdata$r:0000135A                 db    0
.rdata$r:0000135B                 db    0
.rdata$r:0000135C                 db    0
.rdata$r:0000135D                 db    0
.rdata$r:0000135E                 db    0
.rdata$r:0000135F                 db    0
.rdata$r:00001360                 db    1
.rdata$r:00001361                 db    0
.rdata$r:00001362                 db    0
.rdata$r:00001363                 db    0
.rdata$r:00001364                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001364 _rdata$r        ends
.rdata$r:00001364
.rdata$r:00001368 ; ===========================================================================
.rdata$r:00001368
.rdata$r:00001368 ; Segment type: Pure data
.rdata$r:00001368 ; Segment permissions: Read
.rdata$r:00001368 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001368                 assume cs:_rdata$r
.rdata$r:00001368                 ;org 1368h
.rdata$r:00001368 ; COMDAT (pick any)
.rdata$r:00001368                 public ??_R2IUnknown@@8
.rdata$r:00001368 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001368 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001368                                         ; DATA XREF: .rdata$r:00001364o
.rdata$r:00001368                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000136C                 db    0
.rdata$r:0000136D                 align 10h
.rdata$r:0000136D _rdata$r        ends
.rdata$r:0000136D
.rdata$r:00001370 ; ===========================================================================
.rdata$r:00001370
.rdata$r:00001370 ; Segment type: Pure data
.rdata$r:00001370 ; Segment permissions: Read
.rdata$r:00001370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001370                 assume cs:_rdata$r
.rdata$r:00001370                 ;org 1370h
.rdata$r:00001370 ; COMDAT (pick any)
.rdata$r:00001370                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00001370 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001370 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001370                                         ; DATA XREF: .rdata$r:000012A8o
.rdata$r:00001370                                         ; .rdata$r:000018A0o
.rdata$r:00001370                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001374                 align 8
.rdata$r:00001378                 db    4
.rdata$r:00001379                 db    0
.rdata$r:0000137A                 db    0
.rdata$r:0000137B                 db    0
.rdata$r:0000137C                 db 0FFh
.rdata$r:0000137D                 db 0FFh
.rdata$r:0000137E                 db 0FFh
.rdata$r:0000137F                 db 0FFh
.rdata$r:00001380                 db    0
.rdata$r:00001381                 db    0
.rdata$r:00001382                 db    0
.rdata$r:00001383                 db    0
.rdata$r:00001384                 db  40h ; @
.rdata$r:00001385                 db    0
.rdata$r:00001386                 db    0
.rdata$r:00001387                 db    0
.rdata$r:00001388                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001388 _rdata$r        ends
.rdata$r:00001388
.data:0000138C ; ===========================================================================
.data:0000138C
.data:0000138C ; Segment type: Pure data
.data:0000138C ; Segment permissions: Read/Write
.data:0000138C _data           segment dword public 'DATA' use32
.data:0000138C                 assume cs:_data
.data:0000138C                 ;org 138Ch
.data:0000138C ; COMDAT (pick any)
.data:0000138C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000138C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000138C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000138C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000138C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000138C                                         ; const type_info::`vftable'
.data:00001390                 db    0
.data:00001391                 db    0
.data:00001392                 db    0
.data:00001393                 db    0
.data:00001394                 db  2Eh ; .
.data:00001395                 db  3Fh ; ?
.data:00001396                 db  41h ; A
.data:00001397                 db  56h ; V
.data:00001398                 db  43h ; C
.data:00001399                 db  4Dh ; M
.data:0000139A                 db  79h ; y
.data:0000139B                 db  55h ; U
.data:0000139C                 db  6Eh ; n
.data:0000139D                 db  6Bh ; k
.data:0000139E                 db  6Eh ; n
.data:0000139F                 db  6Fh ; o
.data:000013A0                 db  77h ; w
.data:000013A1                 db  6Eh ; n
.data:000013A2                 db  49h ; I
.data:000013A3                 db  6Dh ; m
.data:000013A4                 db  70h ; p
.data:000013A5                 db  40h ; @
.data:000013A6                 db  40h ; @
.data:000013A7                 db    0
.data:000013A7 _data           ends
.data:000013A7
.rdata$r:000013A8 ; ===========================================================================
.rdata$r:000013A8
.rdata$r:000013A8 ; Segment type: Pure data
.rdata$r:000013A8 ; Segment permissions: Read
.rdata$r:000013A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013A8                 assume cs:_rdata$r
.rdata$r:000013A8                 ;org 13A8h
.rdata$r:000013A8 ; COMDAT (pick any)
.rdata$r:000013A8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000013A8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013A8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00001388o
.rdata$r:000013A8                                         ; .rdata$r:000013D8o
.rdata$r:000013A9                 db    0
.rdata$r:000013AA                 db    0
.rdata$r:000013AB                 db    0
.rdata$r:000013AC                 db    0
.rdata$r:000013AD                 db    0
.rdata$r:000013AE                 db    0
.rdata$r:000013AF                 db    0
.rdata$r:000013B0                 db    1
.rdata$r:000013B1                 db    0
.rdata$r:000013B2                 db    0
.rdata$r:000013B3                 db    0
.rdata$r:000013B4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000013B4 _rdata$r        ends
.rdata$r:000013B4
.rdata$r:000013B8 ; ===========================================================================
.rdata$r:000013B8
.rdata$r:000013B8 ; Segment type: Pure data
.rdata$r:000013B8 ; Segment permissions: Read
.rdata$r:000013B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013B8                 assume cs:_rdata$r
.rdata$r:000013B8                 ;org 13B8h
.rdata$r:000013B8 ; COMDAT (pick any)
.rdata$r:000013B8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000013B8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000013B8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000013B8                                         ; DATA XREF: .rdata$r:000013B4o
.rdata$r:000013B8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013BC                 db    0
.rdata$r:000013BD                 align 10h
.rdata$r:000013BD _rdata$r        ends
.rdata$r:000013BD
.rdata$r:000013C0 ; ===========================================================================
.rdata$r:000013C0
.rdata$r:000013C0 ; Segment type: Pure data
.rdata$r:000013C0 ; Segment permissions: Read
.rdata$r:000013C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013C0                 assume cs:_rdata$r
.rdata$r:000013C0                 ;org 13C0h
.rdata$r:000013C0 ; COMDAT (pick any)
.rdata$r:000013C0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000013C0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000013C0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000013C0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000013C0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000013C4                 db    0
.rdata$r:000013C5                 db    0
.rdata$r:000013C6                 db    0
.rdata$r:000013C7                 db    0
.rdata$r:000013C8                 db    0
.rdata$r:000013C9                 db    0
.rdata$r:000013CA                 db    0
.rdata$r:000013CB                 db    0
.rdata$r:000013CC                 db 0FFh
.rdata$r:000013CD                 db 0FFh
.rdata$r:000013CE                 db 0FFh
.rdata$r:000013CF                 db 0FFh
.rdata$r:000013D0                 db    0
.rdata$r:000013D1                 db    0
.rdata$r:000013D2                 db    0
.rdata$r:000013D3                 db    0
.rdata$r:000013D4                 db  40h ; @
.rdata$r:000013D5                 db    0
.rdata$r:000013D6                 db    0
.rdata$r:000013D7                 db    0
.rdata$r:000013D8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013D8 _rdata$r        ends
.rdata$r:000013D8
.text:000013DC ; ===========================================================================
.text:000013DC
.text:000013DC ; Segment type: Pure code
.text:000013DC ; Segment permissions: Read/Execute
.text:000013DC _text           segment para public 'CODE' use32
.text:000013DC                 assume cs:_text
.text:000013DC                 ;org 13DCh
.text:000013DC ; COMDAT (pick any)
.text:000013DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013DC
.text:000013DC ; =============== S U B R O U T I N E =======================================
.text:000013DC
.text:000013DC ; Attributes: bp-based frame
.text:000013DC
.text:000013DC ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000013DC                 public ??0CMyUnknownImp@@QAE@XZ
.text:000013DC ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+47p
.text:000013DC                                         ; NCompress::NLzx::Cx86ConvertOutStream::Cx86ConvertOutStream(void)+1Cp
.text:000013DC
.text:000013DC var_4           = dword ptr -4
.text:000013DC
.text:000013DC                 push    ebp
.text:000013DD                 mov     ebp, esp
.text:000013DF                 push    ecx
.text:000013E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013E7                 mov     [ebp+var_4], ecx
.text:000013EA                 mov     eax, [ebp+var_4]
.text:000013ED                 mov     dword ptr [eax], 0
.text:000013F3                 mov     eax, [ebp+var_4]
.text:000013F6                 mov     esp, ebp
.text:000013F8                 pop     ebp
.text:000013F9                 retn
.text:000013F9 ??0CMyUnknownImp@@QAE@XZ endp
.text:000013F9
.text:000013F9 ; ---------------------------------------------------------------------------
.text:000013FA                 align 4
.text:000013FA _text           ends
.text:000013FA
.text:000013FC ; ===========================================================================
.text:000013FC
.text:000013FC ; Segment type: Pure code
.text:000013FC ; Segment permissions: Read/Execute
.text:000013FC _text           segment para public 'CODE' use32
.text:000013FC                 assume cs:_text
.text:000013FC                 ;org 13FCh
.text:000013FC ; COMDAT (pick any)
.text:000013FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013FC
.text:000013FC ; =============== S U B R O U T I N E =======================================
.text:000013FC
.text:000013FC ; Attributes: bp-based frame
.text:000013FC
.text:000013FC ; _DWORD __thiscall NCompress::NLzx::NBitStream::CDecoder::CDecoder(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:000013FC                 public ??0CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ
.text:000013FC ??0CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ proc near
.text:000013FC                                         ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+5Bp
.text:000013FC
.text:000013FC var_4           = dword ptr -4
.text:000013FC
.text:000013FC                 push    ebp
.text:000013FD                 mov     ebp, esp
.text:000013FF                 push    ecx
.text:00001400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001407                 mov     [ebp+var_4], ecx
.text:0000140A                 mov     ecx, [ebp+var_4]
.text:0000140D                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00001412                 mov     eax, [ebp+var_4]
.text:00001415                 add     esp, 4
.text:00001418                 cmp     ebp, esp
.text:0000141A                 call    __RTC_CheckEsp
.text:0000141F                 mov     esp, ebp
.text:00001421                 pop     ebp
.text:00001422                 retn
.text:00001422 ??0CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ endp
.text:00001422
.text:00001422 ; ---------------------------------------------------------------------------
.text:00001423                 align 4
.text:00001423 _text           ends
.text:00001423
.text:00001424 ; ===========================================================================
.text:00001424
.text:00001424 ; Segment type: Pure code
.text:00001424 ; Segment permissions: Read/Execute
.text:00001424 _text           segment para public 'CODE' use32
.text:00001424                 assume cs:_text
.text:00001424                 ;org 1424h
.text:00001424 ; COMDAT (pick any)
.text:00001424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00001424                 public ??0CInBuffer@@QAE@XZ
.text:00001424 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::CDecoder(void)+11p
.text:00001424
.text:00001424 var_4           = dword ptr -4
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    ecx
.text:00001428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142F                 mov     [ebp+var_4], ecx
.text:00001432                 mov     ecx, [ebp+var_4]
.text:00001435                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:0000143A                 mov     eax, [ebp+var_4]
.text:0000143D                 add     esp, 4
.text:00001440                 cmp     ebp, esp
.text:00001442                 call    __RTC_CheckEsp
.text:00001447                 mov     esp, ebp
.text:00001449                 pop     ebp
.text:0000144A                 retn
.text:0000144A ??0CInBuffer@@QAE@XZ endp
.text:0000144A
.text:0000144A ; ---------------------------------------------------------------------------
.text:0000144B                 align 4
.text:0000144B _text           ends
.text:0000144B
.text:0000144C ; ===========================================================================
.text:0000144C
.text:0000144C ; Segment type: Pure code
.text:0000144C ; Segment permissions: Read/Execute
.text:0000144C _text           segment para public 'CODE' use32
.text:0000144C                 assume cs:_text
.text:0000144C                 ;org 144Ch
.text:0000144C ; COMDAT (pick any)
.text:0000144C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000144C
.text:0000144C ; =============== S U B R O U T I N E =======================================
.text:0000144C
.text:0000144C ; Attributes: bp-based frame
.text:0000144C
.text:0000144C ; __int32 __stdcall NCompress::NLzx::CDecoder::QueryInterface(NCompress::NLzx::CDecoder *this, const struct _GUID *Buf1, void **)
.text:0000144C                 public ?QueryInterface@CDecoder@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:0000144C ?QueryInterface@CDecoder@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000144C                                         ; DATA XREF: .rdata:const NCompress::NLzx::CDecoder::`vftable'o
.text:0000144C
.text:0000144C this            = dword ptr  8
.text:0000144C Buf1            = dword ptr  0Ch
.text:0000144C arg_8           = dword ptr  10h
.text:0000144C
.text:0000144C                 push    ebp
.text:0000144D                 mov     ebp, esp
.text:0000144F                 mov     eax, [ebp+arg_8]
.text:00001452                 mov     dword ptr [eax], 0
.text:00001458                 push    offset _IID_IUnknown ; Buf2
.text:0000145D                 mov     ecx, [ebp+Buf1]
.text:00001460                 push    ecx             ; Buf1
.text:00001461                 call    ___@8           ; __(x,x)
.text:00001466                 test    eax, eax
.text:00001468                 jz      short loc_1474
.text:0000146A                 mov     edx, [ebp+arg_8]
.text:0000146D                 mov     eax, [ebp+this]
.text:00001470                 mov     [edx], eax
.text:00001472                 jmp     short loc_147B
.text:00001474 ; ---------------------------------------------------------------------------
.text:00001474
.text:00001474 loc_1474:                               ; CODE XREF: NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001474                 mov     eax, 80004002h
.text:00001479                 jmp     short loc_148C
.text:0000147B ; ---------------------------------------------------------------------------
.text:0000147B
.text:0000147B loc_147B:                               ; CODE XREF: NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:0000147B                 mov     ecx, [ebp+this]
.text:0000147E                 mov     edx, [ecx+4]
.text:00001481                 add     edx, 1
.text:00001484                 mov     eax, [ebp+this]
.text:00001487                 mov     [eax+4], edx
.text:0000148A                 xor     eax, eax
.text:0000148C
.text:0000148C loc_148C:                               ; CODE XREF: NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000148C                 cmp     ebp, esp
.text:0000148E                 call    __RTC_CheckEsp
.text:00001493                 pop     ebp
.text:00001494                 retn    0Ch
.text:00001494 ?QueryInterface@CDecoder@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001494
.text:00001494 ; ---------------------------------------------------------------------------
.text:00001497                 align 4
.text:00001497 _text           ends
.text:00001497
.text:00001498 ; ===========================================================================
.text:00001498
.text:00001498 ; Segment type: Pure code
.text:00001498 ; Segment permissions: Read/Execute
.text:00001498 _text           segment para public 'CODE' use32
.text:00001498                 assume cs:_text
.text:00001498                 ;org 1498h
.text:00001498 ; COMDAT (pick any)
.text:00001498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001498
.text:00001498 ; =============== S U B R O U T I N E =======================================
.text:00001498
.text:00001498 ; Attributes: bp-based frame
.text:00001498
.text:00001498 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001498                 public ___@8
.text:00001498 ___@8           proc near               ; CODE XREF: NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)+15p
.text:00001498                                         ; NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:00001498
.text:00001498 Buf1            = dword ptr  8
.text:00001498 Buf2            = dword ptr  0Ch
.text:00001498
.text:00001498                 push    ebp
.text:00001499                 mov     ebp, esp
.text:0000149B                 mov     eax, [ebp+Buf2]
.text:0000149E                 push    eax             ; Buf2
.text:0000149F                 mov     ecx, [ebp+Buf1]
.text:000014A2                 push    ecx             ; Buf1
.text:000014A3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000014A8                 cmp     ebp, esp
.text:000014AA                 call    __RTC_CheckEsp
.text:000014AF                 pop     ebp
.text:000014B0                 retn    8
.text:000014B0 ___@8           endp
.text:000014B0
.text:000014B0 ; ---------------------------------------------------------------------------
.text:000014B3                 align 4
.text:000014B3 _text           ends
.text:000014B3
.text:000014B4 ; ===========================================================================
.text:000014B4
.text:000014B4 ; Segment type: Pure code
.text:000014B4 ; Segment permissions: Read/Execute
.text:000014B4 _text           segment para public 'CODE' use32
.text:000014B4                 assume cs:_text
.text:000014B4                 ;org 14B4h
.text:000014B4 ; COMDAT (pick any)
.text:000014B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014B4
.text:000014B4 ; =============== S U B R O U T I N E =======================================
.text:000014B4
.text:000014B4 ; Attributes: bp-based frame
.text:000014B4
.text:000014B4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000014B4                 public _IsEqualGUID@8
.text:000014B4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000014B4
.text:000014B4 Buf1            = dword ptr  8
.text:000014B4 Buf2            = dword ptr  0Ch
.text:000014B4
.text:000014B4                 push    ebp
.text:000014B5                 mov     ebp, esp
.text:000014B7                 push    10h             ; Size
.text:000014B9                 mov     eax, [ebp+Buf2]
.text:000014BC                 push    eax             ; Buf2
.text:000014BD                 mov     ecx, [ebp+Buf1]
.text:000014C0                 push    ecx             ; Buf1
.text:000014C1                 call    _memcmp
.text:000014C6                 add     esp, 0Ch
.text:000014C9                 neg     eax
.text:000014CB                 sbb     eax, eax
.text:000014CD                 add     eax, 1
.text:000014D0                 cmp     ebp, esp
.text:000014D2                 call    __RTC_CheckEsp
.text:000014D7                 pop     ebp
.text:000014D8                 retn    8
.text:000014D8 _IsEqualGUID@8  endp
.text:000014D8
.text:000014D8 ; ---------------------------------------------------------------------------
.text:000014DB                 align 4
.text:000014DB _text           ends
.text:000014DB
.text:000014DC ; ===========================================================================
.text:000014DC
.text:000014DC ; Segment type: Pure code
.text:000014DC ; Segment permissions: Read/Execute
.text:000014DC _text           segment para public 'CODE' use32
.text:000014DC                 assume cs:_text
.text:000014DC                 ;org 14DCh
.text:000014DC ; COMDAT (pick any)
.text:000014DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014DC
.text:000014DC ; =============== S U B R O U T I N E =======================================
.text:000014DC
.text:000014DC ; Attributes: bp-based frame
.text:000014DC
.text:000014DC ; unsigned __int32 __stdcall NCompress::NLzx::CDecoder::AddRef(NCompress::NLzx::CDecoder *this)
.text:000014DC                 public ?AddRef@CDecoder@NLzx@NCompress@@UAGKXZ
.text:000014DC ?AddRef@CDecoder@NLzx@NCompress@@UAGKXZ proc near
.text:000014DC                                         ; DATA XREF: .rdata:0000115Co
.text:000014DC
.text:000014DC var_4           = dword ptr -4
.text:000014DC this            = dword ptr  8
.text:000014DC
.text:000014DC                 push    ebp
.text:000014DD                 mov     ebp, esp
.text:000014DF                 push    ecx
.text:000014E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014E7                 mov     eax, [ebp+this]
.text:000014EA                 mov     ecx, [eax+4]
.text:000014ED                 add     ecx, 1
.text:000014F0                 mov     [ebp+var_4], ecx
.text:000014F3                 mov     edx, [ebp+this]
.text:000014F6                 mov     eax, [ebp+var_4]
.text:000014F9                 mov     [edx+4], eax
.text:000014FC                 mov     eax, [ebp+var_4]
.text:000014FF                 mov     esp, ebp
.text:00001501                 pop     ebp
.text:00001502                 retn    4
.text:00001502 ?AddRef@CDecoder@NLzx@NCompress@@UAGKXZ endp
.text:00001502
.text:00001502 ; ---------------------------------------------------------------------------
.text:00001505                 align 4
.text:00001505 _text           ends
.text:00001505
.text:00001508 ; ===========================================================================
.text:00001508
.text:00001508 ; Segment type: Pure code
.text:00001508 ; Segment permissions: Read/Execute
.text:00001508 _text           segment para public 'CODE' use32
.text:00001508                 assume cs:_text
.text:00001508                 ;org 1508h
.text:00001508 ; COMDAT (pick any)
.text:00001508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001508
.text:00001508 ; =============== S U B R O U T I N E =======================================
.text:00001508
.text:00001508 ; Attributes: bp-based frame
.text:00001508
.text:00001508 ; unsigned __int32 __stdcall NCompress::NLzx::CDecoder::Release(NCompress::NLzx::CDecoder *this)
.text:00001508                 public ?Release@CDecoder@NLzx@NCompress@@UAGKXZ
.text:00001508 ?Release@CDecoder@NLzx@NCompress@@UAGKXZ proc near
.text:00001508                                         ; DATA XREF: .rdata:00001160o
.text:00001508
.text:00001508 var_10          = dword ptr -10h
.text:00001508 var_C           = dword ptr -0Ch
.text:00001508 var_8           = dword ptr -8
.text:00001508 var_4           = dword ptr -4
.text:00001508 this            = dword ptr  8
.text:00001508
.text:00001508                 push    ebp
.text:00001509                 mov     ebp, esp
.text:0000150B                 sub     esp, 10h
.text:0000150E                 mov     eax, 0CCCCCCCCh
.text:00001513                 mov     [ebp+var_10], eax
.text:00001516                 mov     [ebp+var_C], eax
.text:00001519                 mov     [ebp+var_8], eax
.text:0000151C                 mov     [ebp+var_4], eax
.text:0000151F                 mov     eax, [ebp+this]
.text:00001522                 mov     ecx, [eax+4]
.text:00001525                 sub     ecx, 1
.text:00001528                 mov     [ebp+var_C], ecx
.text:0000152B                 mov     edx, [ebp+this]
.text:0000152E                 mov     eax, [ebp+var_C]
.text:00001531                 mov     [edx+4], eax
.text:00001534                 cmp     [ebp+var_C], 0
.text:00001538                 jz      short loc_1542
.text:0000153A                 mov     ecx, [ebp+this]
.text:0000153D                 mov     eax, [ecx+4]
.text:00001540                 jmp     short loc_156C
.text:00001542 ; ---------------------------------------------------------------------------
.text:00001542
.text:00001542 loc_1542:                               ; CODE XREF: NCompress::NLzx::CDecoder::Release(void)+30j
.text:00001542                 mov     edx, [ebp+this]
.text:00001545                 mov     [ebp+var_8], edx
.text:00001548                 mov     eax, [ebp+var_8]
.text:0000154B                 mov     [ebp+var_4], eax
.text:0000154E                 cmp     [ebp+var_4], 0
.text:00001552                 jz      short loc_1563
.text:00001554                 push    1
.text:00001556                 mov     ecx, [ebp+var_4]
.text:00001559                 call    ??_GCDecoder@NLzx@NCompress@@QAEPAXI@Z ; NCompress::NLzx::CDecoder::`scalar deleting destructor'(uint)
.text:0000155E                 mov     [ebp+var_10], eax
.text:00001561                 jmp     short loc_156A
.text:00001563 ; ---------------------------------------------------------------------------
.text:00001563
.text:00001563 loc_1563:                               ; CODE XREF: NCompress::NLzx::CDecoder::Release(void)+4Aj
.text:00001563                 mov     [ebp+var_10], 0
.text:0000156A
.text:0000156A loc_156A:                               ; CODE XREF: NCompress::NLzx::CDecoder::Release(void)+59j
.text:0000156A                 xor     eax, eax
.text:0000156C
.text:0000156C loc_156C:                               ; CODE XREF: NCompress::NLzx::CDecoder::Release(void)+38j
.text:0000156C                 add     esp, 10h
.text:0000156F                 cmp     ebp, esp
.text:00001571                 call    __RTC_CheckEsp
.text:00001576                 mov     esp, ebp
.text:00001578                 pop     ebp
.text:00001579                 retn    4
.text:00001579 ?Release@CDecoder@NLzx@NCompress@@UAGKXZ endp
.text:00001579
.text:00001579 _text           ends
.text:00001579
.text:0000157C ; ===========================================================================
.text:0000157C
.text:0000157C ; Segment type: Pure code
.text:0000157C ; Segment permissions: Read/Execute
.text:0000157C _text           segment para public 'CODE' use32
.text:0000157C                 assume cs:_text
.text:0000157C                 ;org 157Ch
.text:0000157C ; COMDAT (pick any)
.text:0000157C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000157C
.text:0000157C ; =============== S U B R O U T I N E =======================================
.text:0000157C
.text:0000157C ; Attributes: bp-based frame
.text:0000157C
.text:0000157C ; public: void * __thiscall NCompress::NLzx::CDecoder::`scalar deleting destructor'(unsigned int)
.text:0000157C                 public ??_GCDecoder@NLzx@NCompress@@QAEPAXI@Z
.text:0000157C ??_GCDecoder@NLzx@NCompress@@QAEPAXI@Z proc near
.text:0000157C                                         ; CODE XREF: NCompress::NLzx::CDecoder::Release(void)+51p
.text:0000157C
.text:0000157C var_4           = dword ptr -4
.text:0000157C arg_0           = dword ptr  8
.text:0000157C
.text:0000157C                 push    ebp
.text:0000157D                 mov     ebp, esp
.text:0000157F                 push    ecx
.text:00001580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001587                 mov     [ebp+var_4], ecx
.text:0000158A                 mov     ecx, [ebp+var_4] ; this
.text:0000158D                 call    ??1CDecoder@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::CDecoder::~CDecoder(void)
.text:00001592                 mov     eax, [ebp+arg_0]
.text:00001595                 and     eax, 1
.text:00001598                 jz      short loc_15A6
.text:0000159A                 mov     ecx, [ebp+var_4]
.text:0000159D                 push    ecx             ; void *
.text:0000159E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000015A3                 add     esp, 4
.text:000015A6
.text:000015A6 loc_15A6:                               ; CODE XREF: NCompress::NLzx::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:000015A6                 mov     eax, [ebp+var_4]
.text:000015A9                 add     esp, 4
.text:000015AC                 cmp     ebp, esp
.text:000015AE                 call    __RTC_CheckEsp
.text:000015B3                 mov     esp, ebp
.text:000015B5                 pop     ebp
.text:000015B6                 retn    4
.text:000015B6 ??_GCDecoder@NLzx@NCompress@@QAEPAXI@Z endp
.text:000015B6
.text:000015B6 ; ---------------------------------------------------------------------------
.text:000015B9                 align 4
.text:000015B9 _text           ends
.text:000015B9
.text:000015BC ; ===========================================================================
.text:000015BC
.text:000015BC ; Segment type: Pure code
.text:000015BC ; Segment permissions: Read/Execute
.text:000015BC _text           segment para public 'CODE' use32
.text:000015BC                 assume cs:_text
.text:000015BC                 ;org 15BCh
.text:000015BC ; COMDAT (pick any)
.text:000015BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015BC
.text:000015BC ; =============== S U B R O U T I N E =======================================
.text:000015BC
.text:000015BC ; Attributes: bp-based frame
.text:000015BC
.text:000015BC ; _DWORD __thiscall NCompress::NLzx::CDecoder::~CDecoder(NCompress::NLzx::CDecoder *__hidden this)
.text:000015BC                 public ??1CDecoder@NLzx@NCompress@@QAE@XZ
.text:000015BC ??1CDecoder@NLzx@NCompress@@QAE@XZ proc near
.text:000015BC                                         ; CODE XREF: NCompress::NLzx::CDecoder::`scalar deleting destructor'(uint)+11p
.text:000015BC
.text:000015BC var_10          = dword ptr -10h
.text:000015BC var_C           = dword ptr -0Ch
.text:000015BC var_4           = dword ptr -4
.text:000015BC
.text:000015BC                 push    ebp
.text:000015BD                 mov     ebp, esp
.text:000015BF                 push    0FFFFFFFFh
.text:000015C1                 push    offset __ehhandler$??1CDecoder@NLzx@NCompress@@QAE@XZ
.text:000015C6                 mov     eax, large fs:0
.text:000015CC                 push    eax
.text:000015CD                 push    ecx
.text:000015CE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000015D5                 mov     eax, dword ptr ds:___security_cookie
.text:000015DA                 xor     eax, ebp
.text:000015DC                 push    eax
.text:000015DD                 lea     eax, [ebp+var_C]
.text:000015E0                 mov     large fs:0, eax
.text:000015E6                 mov     [ebp+var_10], ecx
.text:000015E9                 mov     [ebp+var_4], 1
.text:000015F0                 mov     ecx, [ebp+var_10]
.text:000015F3                 add     ecx, 1CB8h
.text:000015F9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000015FE                 mov     byte ptr [ebp+var_4], 0
.text:00001602                 mov     ecx, [ebp+var_10]
.text:00001605                 add     ecx, 38h ; '8'  ; this
.text:00001608                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:0000160D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001614                 mov     ecx, [ebp+var_10]
.text:00001617                 add     ecx, 8          ; this
.text:0000161A                 call    ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::NBitStream::CDecoder::~CDecoder(void)
.text:0000161F                 mov     ecx, [ebp+var_C]
.text:00001622                 mov     large fs:0, ecx
.text:00001629                 pop     ecx
.text:0000162A                 add     esp, 10h
.text:0000162D                 cmp     ebp, esp
.text:0000162F                 call    __RTC_CheckEsp
.text:00001634                 mov     esp, ebp
.text:00001636                 pop     ebp
.text:00001637                 retn
.text:00001637 ??1CDecoder@NLzx@NCompress@@QAE@XZ endp
.text:00001637
.text:00001637 _text           ends
.text:00001637
.text$x:00001638 ; ===========================================================================
.text$x:00001638
.text$x:00001638 ; Segment type: Pure code
.text$x:00001638 ; Segment permissions: Read/Execute
.text$x:00001638 _text$x         segment para public 'CODE' use32
.text$x:00001638                 assume cs:_text$x
.text$x:00001638                 ;org 1638h
.text$x:00001638 ; COMDAT (pick associative to section at 15BC)
.text$x:00001638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001638
.text$x:00001638 ; =============== S U B R O U T I N E =======================================
.text$x:00001638
.text$x:00001638
.text$x:00001638 __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$0 proc near
.text$x:00001638                                         ; DATA XREF: .xdata$x:00001670o
.text$x:00001638                 mov     ecx, [ebp-10h]
.text$x:0000163B                 add     ecx, 8          ; this
.text$x:0000163E                 jmp     ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ ; NCompress::NLzx::NBitStream::CDecoder::~CDecoder(void)
.text$x:0000163E __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$0 endp
.text$x:0000163E
.text$x:00001643
.text$x:00001643 ; =============== S U B R O U T I N E =======================================
.text$x:00001643
.text$x:00001643
.text$x:00001643 __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$1 proc near
.text$x:00001643                                         ; DATA XREF: .xdata$x:00001678o
.text$x:00001643                 mov     ecx, [ebp-10h]
.text$x:00001646                 add     ecx, 38h ; '8'  ; this
.text$x:00001649                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00001649 __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$1 endp
.text$x:00001649
.text$x:0000164E
.text$x:0000164E ; =============== S U B R O U T I N E =======================================
.text$x:0000164E
.text$x:0000164E
.text$x:0000164E __ehhandler$??1CDecoder@NLzx@NCompress@@QAE@XZ proc near
.text$x:0000164E                                         ; DATA XREF: NCompress::NLzx::CDecoder::~CDecoder(void)+5o
.text$x:0000164E
.text$x:0000164E arg_4           = dword ptr  8
.text$x:0000164E
.text$x:0000164E                 mov     edx, [esp+arg_4]
.text$x:00001652                 lea     eax, [edx+0Ch]
.text$x:00001655                 mov     ecx, [edx-8]
.text$x:00001658                 xor     ecx, eax
.text$x:0000165A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000165F                 mov     eax, offset __ehfuncinfo$??1CDecoder@NLzx@NCompress@@QAE@XZ
.text$x:00001664                 jmp     ___CxxFrameHandler3
.text$x:00001664 __ehhandler$??1CDecoder@NLzx@NCompress@@QAE@XZ endp
.text$x:00001664
.text$x:00001664 ; ---------------------------------------------------------------------------
.text$x:00001669                 align 4
.text$x:00001669 _text$x         ends
.text$x:00001669
.xdata$x:0000166C ; ===========================================================================
.xdata$x:0000166C
.xdata$x:0000166C ; Segment type: Pure data
.xdata$x:0000166C ; Segment permissions: Read
.xdata$x:0000166C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000166C                 assume cs:_xdata$x
.xdata$x:0000166C                 ;org 166Ch
.xdata$x:0000166C ; COMDAT (pick associative to section at 15BC)
.xdata$x:0000166C __unwindtable$??1CDecoder@NLzx@NCompress@@QAE@XZ db 0FFh
.xdata$x:0000166C                                         ; DATA XREF: .xdata$x:00001684o
.xdata$x:0000166D                 db 0FFh
.xdata$x:0000166E                 db 0FFh
.xdata$x:0000166F                 db 0FFh
.xdata$x:00001670                 dd offset __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$0
.xdata$x:00001674                 align 8
.xdata$x:00001678                 dd offset __unwindfunclet$??1CDecoder@NLzx@NCompress@@QAE@XZ$1
.xdata$x:0000167C __ehfuncinfo$??1CDecoder@NLzx@NCompress@@QAE@XZ db  22h ; "
.xdata$x:0000167C                                         ; DATA XREF: __ehhandler$??1CDecoder@NLzx@NCompress@@QAE@XZ+11o
.xdata$x:0000167D                 db    5
.xdata$x:0000167E                 db  93h ; ô
.xdata$x:0000167F                 db  19h
.xdata$x:00001680                 db    2
.xdata$x:00001681                 db    0
.xdata$x:00001682                 db    0
.xdata$x:00001683                 db    0
.xdata$x:00001684                 dd offset __unwindtable$??1CDecoder@NLzx@NCompress@@QAE@XZ
.xdata$x:00001688                 db    0
.xdata$x:00001689                 db    0
.xdata$x:0000168A                 db    0
.xdata$x:0000168B                 db    0
.xdata$x:0000168C                 db    0
.xdata$x:0000168D                 db    0
.xdata$x:0000168E                 db    0
.xdata$x:0000168F                 db    0
.xdata$x:00001690                 db    0
.xdata$x:00001691                 db    0
.xdata$x:00001692                 db    0
.xdata$x:00001693                 db    0
.xdata$x:00001694                 db    0
.xdata$x:00001695                 db    0
.xdata$x:00001696                 db    0
.xdata$x:00001697                 db    0
.xdata$x:00001698                 db    0
.xdata$x:00001699                 db    0
.xdata$x:0000169A                 db    0
.xdata$x:0000169B                 db    0
.xdata$x:0000169C                 db    1
.xdata$x:0000169D                 db    0
.xdata$x:0000169E                 db    0
.xdata$x:0000169F                 db    0
.xdata$x:0000169F _xdata$x        ends
.xdata$x:0000169F
.text:000016A0 ; ===========================================================================
.text:000016A0
.text:000016A0 ; Segment type: Pure code
.text:000016A0 ; Segment permissions: Read/Execute
.text:000016A0 _text           segment para public 'CODE' use32
.text:000016A0                 assume cs:_text
.text:000016A0                 ;org 16A0h
.text:000016A0 ; COMDAT (pick any)
.text:000016A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016A0
.text:000016A0 ; =============== S U B R O U T I N E =======================================
.text:000016A0
.text:000016A0 ; Attributes: bp-based frame
.text:000016A0
.text:000016A0 ; _DWORD __thiscall NCompress::NLzx::NBitStream::CDecoder::~CDecoder(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:000016A0                 public ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ
.text:000016A0 ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ proc near
.text:000016A0                                         ; CODE XREF: __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$0+6j
.text:000016A0                                         ; NCompress::NLzx::CDecoder::~CDecoder(void)+5Ep ...
.text:000016A0
.text:000016A0 var_4           = dword ptr -4
.text:000016A0
.text:000016A0                 push    ebp
.text:000016A1                 mov     ebp, esp
.text:000016A3                 push    ecx
.text:000016A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016AB                 mov     [ebp+var_4], ecx
.text:000016AE                 mov     ecx, [ebp+var_4] ; this
.text:000016B1                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000016B6                 add     esp, 4
.text:000016B9                 cmp     ebp, esp
.text:000016BB                 call    __RTC_CheckEsp
.text:000016C0                 mov     esp, ebp
.text:000016C2                 pop     ebp
.text:000016C3                 retn
.text:000016C3 ??1CDecoder@NBitStream@NLzx@NCompress@@QAE@XZ endp
.text:000016C3
.text:000016C3 _text           ends
.text:000016C3
.text:000016C4 ; ===========================================================================
.text:000016C4
.text:000016C4 ; Segment type: Pure code
.text:000016C4 ; Segment permissions: Read/Execute
.text:000016C4 _text           segment para public 'CODE' use32
.text:000016C4                 assume cs:_text
.text:000016C4                 ;org 16C4h
.text:000016C4 ; COMDAT (pick any)
.text:000016C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016C4
.text:000016C4 ; =============== S U B R O U T I N E =======================================
.text:000016C4
.text:000016C4 ; Attributes: bp-based frame
.text:000016C4
.text:000016C4 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:000016C4                 public ??1CInBuffer@@QAE@XZ
.text:000016C4 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::~CDecoder(void)+11p
.text:000016C4
.text:000016C4 var_4           = dword ptr -4
.text:000016C4
.text:000016C4                 push    ebp
.text:000016C5                 mov     ebp, esp
.text:000016C7                 push    ecx
.text:000016C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016CF                 mov     [ebp+var_4], ecx
.text:000016D2                 mov     ecx, [ebp+var_4] ; this
.text:000016D5                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:000016DA                 add     esp, 4
.text:000016DD                 cmp     ebp, esp
.text:000016DF                 call    __RTC_CheckEsp
.text:000016E4                 mov     esp, ebp
.text:000016E6                 pop     ebp
.text:000016E7                 retn
.text:000016E7 ??1CInBuffer@@QAE@XZ endp
.text:000016E7
.text:000016E7 _text           ends
.text:000016E7
.text:000016E8 ; ===========================================================================
.text:000016E8
.text:000016E8 ; Segment type: Pure code
.text:000016E8 ; Segment permissions: Read/Execute
.text:000016E8 _text           segment para public 'CODE' use32
.text:000016E8                 assume cs:_text
.text:000016E8                 ;org 16E8h
.text:000016E8 ; COMDAT (pick any)
.text:000016E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016E8
.text:000016E8 ; =============== S U B R O U T I N E =======================================
.text:000016E8
.text:000016E8 ; Attributes: bp-based frame
.text:000016E8
.text:000016E8 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:000016E8                 public ??1CLzOutWindow@@QAE@XZ
.text:000016E8 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$1+6j
.text:000016E8                                         ; NCompress::NLzx::CDecoder::~CDecoder(void)+4Cp ...
.text:000016E8
.text:000016E8 var_4           = dword ptr -4
.text:000016E8
.text:000016E8                 push    ebp
.text:000016E9                 mov     ebp, esp
.text:000016EB                 push    ecx
.text:000016EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016F3                 mov     [ebp+var_4], ecx
.text:000016F6                 mov     ecx, [ebp+var_4] ; this
.text:000016F9                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000016FE                 add     esp, 4
.text:00001701                 cmp     ebp, esp
.text:00001703                 call    __RTC_CheckEsp
.text:00001708                 mov     esp, ebp
.text:0000170A                 pop     ebp
.text:0000170B                 retn
.text:0000170B ??1CLzOutWindow@@QAE@XZ endp
.text:0000170B
.text:0000170B _text           ends
.text:0000170B
.text:0000170C ; ===========================================================================
.text:0000170C
.text:0000170C ; Segment type: Pure code
.text:0000170C ; Segment permissions: Read/Execute
.text:0000170C _text           segment para public 'CODE' use32
.text:0000170C                 assume cs:_text
.text:0000170C                 ;org 170Ch
.text:0000170C ; COMDAT (pick any)
.text:0000170C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000170C
.text:0000170C ; =============== S U B R O U T I N E =======================================
.text:0000170C
.text:0000170C ; Attributes: bp-based frame
.text:0000170C
.text:0000170C ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:0000170C                 public ??1COutBuffer@@QAE@XZ
.text:0000170C ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:0000170C
.text:0000170C var_4           = dword ptr -4
.text:0000170C
.text:0000170C                 push    ebp
.text:0000170D                 mov     ebp, esp
.text:0000170F                 push    ecx
.text:00001710                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001717                 mov     [ebp+var_4], ecx
.text:0000171A                 mov     ecx, [ebp+var_4] ; this
.text:0000171D                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00001722                 add     esp, 4
.text:00001725                 cmp     ebp, esp
.text:00001727                 call    __RTC_CheckEsp
.text:0000172C                 mov     esp, ebp
.text:0000172E                 pop     ebp
.text:0000172F                 retn
.text:0000172F ??1COutBuffer@@QAE@XZ endp
.text:0000172F
.text:0000172F _text           ends
.text:0000172F
.text:00001730 ; ===========================================================================
.text:00001730
.text:00001730 ; Segment type: Pure code
.text:00001730 ; Segment permissions: Read/Execute
.text:00001730 _text           segment para public 'CODE' use32
.text:00001730                 assume cs:_text
.text:00001730                 ;org 1730h
.text:00001730 ; COMDAT (pick any)
.text:00001730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001730
.text:00001730 ; =============== S U B R O U T I N E =======================================
.text:00001730
.text:00001730 ; Attributes: bp-based frame
.text:00001730
.text:00001730 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001730                 public ??0ICompressCoder@@QAE@XZ
.text:00001730 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool):loc_3Cp
.text:00001730
.text:00001730 var_4           = dword ptr -4
.text:00001730
.text:00001730                 push    ebp
.text:00001731                 mov     ebp, esp
.text:00001733                 push    ecx
.text:00001734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000173B                 mov     [ebp+var_4], ecx
.text:0000173E                 mov     ecx, [ebp+var_4]
.text:00001741                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001746                 mov     eax, [ebp+var_4]
.text:00001749                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000174F                 mov     eax, [ebp+var_4]
.text:00001752                 add     esp, 4
.text:00001755                 cmp     ebp, esp
.text:00001757                 call    __RTC_CheckEsp
.text:0000175C                 mov     esp, ebp
.text:0000175E                 pop     ebp
.text:0000175F                 retn
.text:0000175F ??0ICompressCoder@@QAE@XZ endp
.text:0000175F
.text:0000175F _text           ends
.text:0000175F
.rdata:00001760 ; ===========================================================================
.rdata:00001760
.rdata:00001760 ; Segment type: Pure data
.rdata:00001760 ; Segment permissions: Read
.rdata:00001760 _rdata          segment dword public 'DATA' use32
.rdata:00001760                 assume cs:_rdata
.rdata:00001760                 ;org 1760h
.rdata:00001760 ; COMDAT (pick largest)
.rdata:00001760                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00001764                 public ??_7ICompressCoder@@6B@
.rdata:00001764 ; const ICompressCoder::`vftable'
.rdata:00001764 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00001764                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001768                 dd offset __purecall
.rdata:0000176C                 dd offset __purecall
.rdata:00001770                 dd offset __purecall
.rdata:00001770 _rdata          ends
.rdata:00001770
.rdata$r:00001774 ; ===========================================================================
.rdata$r:00001774
.rdata$r:00001774 ; Segment type: Pure data
.rdata$r:00001774 ; Segment permissions: Read
.rdata$r:00001774 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001774                 assume cs:_rdata$r
.rdata$r:00001774                 ;org 1774h
.rdata$r:00001774 ; COMDAT (pick any)
.rdata$r:00001774                 public ??_R4ICompressCoder@@6B@
.rdata$r:00001774 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00001774 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00001760o
.rdata$r:00001775                 db    0
.rdata$r:00001776                 db    0
.rdata$r:00001777                 db    0
.rdata$r:00001778                 db    0
.rdata$r:00001779                 db    0
.rdata$r:0000177A                 db    0
.rdata$r:0000177B                 db    0
.rdata$r:0000177C                 db    0
.rdata$r:0000177D                 db    0
.rdata$r:0000177E                 db    0
.rdata$r:0000177F                 db    0
.rdata$r:00001780                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001784                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001784 _rdata$r        ends
.rdata$r:00001784
.text:00001788 ; ===========================================================================
.text:00001788
.text:00001788 ; Segment type: Pure code
.text:00001788 ; Segment permissions: Read/Execute
.text:00001788 _text           segment para public 'CODE' use32
.text:00001788                 assume cs:_text
.text:00001788                 ;org 1788h
.text:00001788 ; COMDAT (pick any)
.text:00001788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001788
.text:00001788 ; =============== S U B R O U T I N E =======================================
.text:00001788
.text:00001788 ; Attributes: bp-based frame
.text:00001788
.text:00001788 ; public: __thiscall CLzOutWindow::CLzOutWindow(void)
.text:00001788                 public ??0CLzOutWindow@@QAE@XZ
.text:00001788 ??0CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+6Dp
.text:00001788
.text:00001788 var_4           = dword ptr -4
.text:00001788
.text:00001788                 push    ebp
.text:00001789                 mov     ebp, esp
.text:0000178B                 push    ecx
.text:0000178C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001793                 mov     [ebp+var_4], ecx
.text:00001796                 mov     ecx, [ebp+var_4] ; this
.text:00001799                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:0000179E                 mov     eax, [ebp+var_4]
.text:000017A1                 add     esp, 4
.text:000017A4                 cmp     ebp, esp
.text:000017A6                 call    __RTC_CheckEsp
.text:000017AB                 mov     esp, ebp
.text:000017AD                 pop     ebp
.text:000017AE                 retn
.text:000017AE ??0CLzOutWindow@@QAE@XZ endp
.text:000017AE
.text:000017AE ; ---------------------------------------------------------------------------
.text:000017AF                 align 10h
.text:000017AF _text           ends
.text:000017AF
.text:000017B0 ; ===========================================================================
.text:000017B0
.text:000017B0 ; Segment type: Pure code
.text:000017B0 ; Segment permissions: Read/Execute
.text:000017B0 _text           segment para public 'CODE' use32
.text:000017B0                 assume cs:_text
.text:000017B0                 ;org 17B0h
.text:000017B0 ; COMDAT (pick any)
.text:000017B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017B0
.text:000017B0 ; =============== S U B R O U T I N E =======================================
.text:000017B0
.text:000017B0 ; Attributes: bp-based frame
.text:000017B0
.text:000017B0 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:000017B0                 public ??0COutBuffer@@QAE@XZ
.text:000017B0 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::CLzOutWindow(void)+11p
.text:000017B0
.text:000017B0 var_4           = dword ptr -4
.text:000017B0
.text:000017B0                 push    ebp
.text:000017B1                 mov     ebp, esp
.text:000017B3                 push    ecx
.text:000017B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017BB                 mov     [ebp+var_4], ecx
.text:000017BE                 mov     eax, [ebp+var_4]
.text:000017C1                 mov     dword ptr [eax], 0
.text:000017C7                 mov     ecx, [ebp+var_4]
.text:000017CA                 mov     dword ptr [ecx+4], 0
.text:000017D1                 mov     edx, [ebp+var_4]
.text:000017D4                 mov     dword ptr [edx+14h], 0
.text:000017DB                 mov     eax, [ebp+var_4]
.text:000017DE                 mov     dword ptr [eax+20h], 0
.text:000017E5                 mov     eax, [ebp+var_4]
.text:000017E8                 mov     esp, ebp
.text:000017EA                 pop     ebp
.text:000017EB                 retn
.text:000017EB ??0COutBuffer@@QAE@XZ endp
.text:000017EB
.text:000017EB _text           ends
.text:000017EB
.text:000017EC ; ===========================================================================
.text:000017EC
.text:000017EC ; Segment type: Pure code
.text:000017EC ; Segment permissions: Read/Execute
.text:000017EC _text           segment para public 'CODE' use32
.text:000017EC                 assume cs:_text
.text:000017EC                 ;org 17ECh
.text:000017EC ; COMDAT (pick any)
.text:000017EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017EC
.text:000017EC ; =============== S U B R O U T I N E =======================================
.text:000017EC
.text:000017EC ; Attributes: bp-based frame
.text:000017EC
.text:000017EC ; _DWORD __thiscall NCompress::NLzx::Cx86ConvertOutStream::Cx86ConvertOutStream(NCompress::NLzx::Cx86ConvertOutStream *__hidden this)
.text:000017EC                 public ??0Cx86ConvertOutStream@NLzx@NCompress@@QAE@XZ
.text:000017EC ??0Cx86ConvertOutStream@NLzx@NCompress@@QAE@XZ proc near
.text:000017EC                                         ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+C5p
.text:000017EC
.text:000017EC var_4           = dword ptr -4
.text:000017EC
.text:000017EC                 push    ebp
.text:000017ED                 mov     ebp, esp
.text:000017EF                 push    ecx
.text:000017F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017F7                 mov     [ebp+var_4], ecx
.text:000017FA                 mov     ecx, [ebp+var_4] ; this
.text:000017FD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00001802                 mov     ecx, [ebp+var_4]
.text:00001805                 add     ecx, 4          ; this
.text:00001808                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000180D                 mov     eax, [ebp+var_4]
.text:00001810                 mov     dword ptr [eax], offset ??_7Cx86ConvertOutStream@NLzx@NCompress@@6B@ ; const NCompress::NLzx::Cx86ConvertOutStream::`vftable'
.text:00001816                 mov     eax, [ebp+var_4]
.text:00001819                 add     esp, 4
.text:0000181C                 cmp     ebp, esp
.text:0000181E                 call    __RTC_CheckEsp
.text:00001823                 mov     esp, ebp
.text:00001825                 pop     ebp
.text:00001826                 retn
.text:00001826 ??0Cx86ConvertOutStream@NLzx@NCompress@@QAE@XZ endp
.text:00001826
.text:00001826 ; ---------------------------------------------------------------------------
.text:00001827                 align 4
.text:00001827 _text           ends
.text:00001827
.rdata:00001828 ; ===========================================================================
.rdata:00001828
.rdata:00001828 ; Segment type: Pure data
.rdata:00001828 ; Segment permissions: Read
.rdata:00001828 _rdata          segment dword public 'DATA' use32
.rdata:00001828                 assume cs:_rdata
.rdata:00001828                 ;org 1828h
.rdata:00001828 ; COMDAT (pick largest)
.rdata:00001828                 dd offset ??_R4Cx86ConvertOutStream@NLzx@NCompress@@6B@ ; const NCompress::NLzx::Cx86ConvertOutStream::`RTTI Complete Object Locator'
.rdata:0000182C                 public ??_7Cx86ConvertOutStream@NLzx@NCompress@@6B@
.rdata:0000182C ; const NCompress::NLzx::Cx86ConvertOutStream::`vftable'
.rdata:0000182C ??_7Cx86ConvertOutStream@NLzx@NCompress@@6B@ dd offset ?QueryInterface@Cx86ConvertOutStream@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000182C                                         ; DATA XREF: NCompress::NLzx::Cx86ConvertOutStream::Cx86ConvertOutStream(void)+24o
.rdata:0000182C                                         ; NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00001830                 dd offset ?AddRef@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ ; NCompress::NLzx::Cx86ConvertOutStream::AddRef(void)
.rdata:00001834                 dd offset ?Release@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ ; NCompress::NLzx::Cx86ConvertOutStream::Release(void)
.rdata:00001838                 dd offset ?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z ; NCompress::NLzx::Cx86ConvertOutStream::Write(void const *,uint,uint *)
.rdata:00001838 _rdata          ends
.rdata:00001838
.rdata$r:0000183C ; ===========================================================================
.rdata$r:0000183C
.rdata$r:0000183C ; Segment type: Pure data
.rdata$r:0000183C ; Segment permissions: Read
.rdata$r:0000183C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000183C                 assume cs:_rdata$r
.rdata$r:0000183C                 ;org 183Ch
.rdata$r:0000183C ; COMDAT (pick any)
.rdata$r:0000183C                 public ??_R4Cx86ConvertOutStream@NLzx@NCompress@@6B@
.rdata$r:0000183C ; const NCompress::NLzx::Cx86ConvertOutStream::`RTTI Complete Object Locator'
.rdata$r:0000183C ??_R4Cx86ConvertOutStream@NLzx@NCompress@@6B@ db    0
.rdata$r:0000183C                                         ; DATA XREF: .rdata:00001828o
.rdata$r:0000183D                 db    0
.rdata$r:0000183E                 db    0
.rdata$r:0000183F                 db    0
.rdata$r:00001840                 db    0
.rdata$r:00001841                 db    0
.rdata$r:00001842                 db    0
.rdata$r:00001843                 db    0
.rdata$r:00001844                 db    0
.rdata$r:00001845                 db    0
.rdata$r:00001846                 db    0
.rdata$r:00001847                 db    0
.rdata$r:00001848                 dd offset ??_R0?AVCx86ConvertOutStream@NLzx@NCompress@@@8 ; NCompress::NLzx::Cx86ConvertOutStream `RTTI Type Descriptor'
.rdata$r:0000184C                 dd offset ??_R3Cx86ConvertOutStream@NLzx@NCompress@@8 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000184C _rdata$r        ends
.rdata$r:0000184C
.data:00001850 ; ===========================================================================
.data:00001850
.data:00001850 ; Segment type: Pure data
.data:00001850 ; Segment permissions: Read/Write
.data:00001850 _data           segment dword public 'DATA' use32
.data:00001850                 assume cs:_data
.data:00001850                 ;org 1850h
.data:00001850 ; COMDAT (pick any)
.data:00001850                 public ??_R0?AVCx86ConvertOutStream@NLzx@NCompress@@@8
.data:00001850 ; class NCompress::NLzx::Cx86ConvertOutStream `RTTI Type Descriptor'
.data:00001850 ??_R0?AVCx86ConvertOutStream@NLzx@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00001850                                         ; DATA XREF: .rdata$r:00001848o
.data:00001850                                         ; .rdata$r:NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001850                                         ; const type_info::`vftable'
.data:00001854                 align 8
.data:00001858 a_?avcx86conver db '.?AVCx86ConvertOutStream@NLzx@NCompress@@',0
.data:00001882                 align 4
.data:00001882 _data           ends
.data:00001882
.rdata$r:00001884 ; ===========================================================================
.rdata$r:00001884
.rdata$r:00001884 ; Segment type: Pure data
.rdata$r:00001884 ; Segment permissions: Read
.rdata$r:00001884 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001884                 assume cs:_rdata$r
.rdata$r:00001884                 ;org 1884h
.rdata$r:00001884 ; COMDAT (pick any)
.rdata$r:00001884                 public ??_R3Cx86ConvertOutStream@NLzx@NCompress@@8
.rdata$r:00001884 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001884 ??_R3Cx86ConvertOutStream@NLzx@NCompress@@8 db    0
.rdata$r:00001884                                         ; DATA XREF: .rdata$r:0000184Co
.rdata$r:00001884                                         ; .rdata$r:000018C0o
.rdata$r:00001885                 db    0
.rdata$r:00001886                 db    0
.rdata$r:00001887                 db    0
.rdata$r:00001888                 db    1
.rdata$r:00001889                 db    0
.rdata$r:0000188A                 db    0
.rdata$r:0000188B                 db    0
.rdata$r:0000188C                 db    4
.rdata$r:0000188D                 db    0
.rdata$r:0000188E                 db    0
.rdata$r:0000188F                 db    0
.rdata$r:00001890                 dd offset ??_R2Cx86ConvertOutStream@NLzx@NCompress@@8 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Array'
.rdata$r:00001890 _rdata$r        ends
.rdata$r:00001890
.rdata$r:00001894 ; ===========================================================================
.rdata$r:00001894
.rdata$r:00001894 ; Segment type: Pure data
.rdata$r:00001894 ; Segment permissions: Read
.rdata$r:00001894 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001894                 assume cs:_rdata$r
.rdata$r:00001894                 ;org 1894h
.rdata$r:00001894 ; COMDAT (pick any)
.rdata$r:00001894                 public ??_R2Cx86ConvertOutStream@NLzx@NCompress@@8
.rdata$r:00001894 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Array'
.rdata$r:00001894 ??_R2Cx86ConvertOutStream@NLzx@NCompress@@8 dd offset ??_R1A@?0A@EA@Cx86ConvertOutStream@NLzx@NCompress@@8
.rdata$r:00001894                                         ; DATA XREF: .rdata$r:00001890o
.rdata$r:00001894                                         ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001898                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000189C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000018A0                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000018A4                 db    0
.rdata$r:000018A5                 align 4
.rdata$r:000018A5 _rdata$r        ends
.rdata$r:000018A5
.rdata$r:000018A8 ; ===========================================================================
.rdata$r:000018A8
.rdata$r:000018A8 ; Segment type: Pure data
.rdata$r:000018A8 ; Segment permissions: Read
.rdata$r:000018A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018A8                 assume cs:_rdata$r
.rdata$r:000018A8                 ;org 18A8h
.rdata$r:000018A8 ; COMDAT (pick any)
.rdata$r:000018A8                 public ??_R1A@?0A@EA@Cx86ConvertOutStream@NLzx@NCompress@@8
.rdata$r:000018A8 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000018A8 ??_R1A@?0A@EA@Cx86ConvertOutStream@NLzx@NCompress@@8 dd offset ??_R0?AVCx86ConvertOutStream@NLzx@NCompress@@@8
.rdata$r:000018A8                                         ; DATA XREF: .rdata$r:NCompress::NLzx::Cx86ConvertOutStream::`RTTI Base Class Array'o
.rdata$r:000018A8                                         ; NCompress::NLzx::Cx86ConvertOutStream `RTTI Type Descriptor'
.rdata$r:000018AC                 db    3
.rdata$r:000018AD                 db    0
.rdata$r:000018AE                 db    0
.rdata$r:000018AF                 db    0
.rdata$r:000018B0                 db    0
.rdata$r:000018B1                 db    0
.rdata$r:000018B2                 db    0
.rdata$r:000018B3                 db    0
.rdata$r:000018B4                 db 0FFh
.rdata$r:000018B5                 db 0FFh
.rdata$r:000018B6                 db 0FFh
.rdata$r:000018B7                 db 0FFh
.rdata$r:000018B8                 db    0
.rdata$r:000018B9                 db    0
.rdata$r:000018BA                 db    0
.rdata$r:000018BB                 db    0
.rdata$r:000018BC                 db  40h ; @
.rdata$r:000018BD                 db    0
.rdata$r:000018BE                 db    0
.rdata$r:000018BF                 db    0
.rdata$r:000018C0                 dd offset ??_R3Cx86ConvertOutStream@NLzx@NCompress@@8 ; NCompress::NLzx::Cx86ConvertOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018C0 _rdata$r        ends
.rdata$r:000018C0
.rdata$r:000018C4 ; ===========================================================================
.rdata$r:000018C4
.rdata$r:000018C4 ; Segment type: Pure data
.rdata$r:000018C4 ; Segment permissions: Read
.rdata$r:000018C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018C4                 assume cs:_rdata$r
.rdata$r:000018C4                 ;org 18C4h
.rdata$r:000018C4 ; COMDAT (pick any)
.rdata$r:000018C4                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000018C4 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000018C4 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000018C4                                         ; DATA XREF: .rdata$r:00001898o
.rdata$r:000018C4                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:000018C4                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000018C8                 db    1
.rdata$r:000018C9                 db    0
.rdata$r:000018CA                 db    0
.rdata$r:000018CB                 db    0
.rdata$r:000018CC                 db    0
.rdata$r:000018CD                 db    0
.rdata$r:000018CE                 db    0
.rdata$r:000018CF                 db    0
.rdata$r:000018D0                 db 0FFh
.rdata$r:000018D1                 db 0FFh
.rdata$r:000018D2                 db 0FFh
.rdata$r:000018D3                 db 0FFh
.rdata$r:000018D4                 db    0
.rdata$r:000018D5                 db    0
.rdata$r:000018D6                 db    0
.rdata$r:000018D7                 db    0
.rdata$r:000018D8                 db  40h ; @
.rdata$r:000018D9                 db    0
.rdata$r:000018DA                 db    0
.rdata$r:000018DB                 db    0
.rdata$r:000018DC                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018DC _rdata$r        ends
.rdata$r:000018DC
.data:000018E0 ; ===========================================================================
.data:000018E0
.data:000018E0 ; Segment type: Pure data
.data:000018E0 ; Segment permissions: Read/Write
.data:000018E0 _data           segment dword public 'DATA' use32
.data:000018E0                 assume cs:_data
.data:000018E0                 ;org 18E0h
.data:000018E0 ; COMDAT (pick any)
.data:000018E0                 public ??_R0?AUISequentialOutStream@@@8
.data:000018E0 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000018E0 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000018E0                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000018E0                                         ; .rdata$r:00001A5Co
.data:000018E0                                         ; const type_info::`vftable'
.data:000018E4                 align 8
.data:000018E8 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:00001903                 align 4
.data:00001903 _data           ends
.data:00001903
.rdata$r:00001904 ; ===========================================================================
.rdata$r:00001904
.rdata$r:00001904 ; Segment type: Pure data
.rdata$r:00001904 ; Segment permissions: Read
.rdata$r:00001904 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001904                 assume cs:_rdata$r
.rdata$r:00001904                 ;org 1904h
.rdata$r:00001904 ; COMDAT (pick any)
.rdata$r:00001904                 public ??_R3ISequentialOutStream@@8
.rdata$r:00001904 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001904 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000018DCo
.rdata$r:00001904                                         ; .rdata$r:00001A60o
.rdata$r:00001905                 db    0
.rdata$r:00001906                 db    0
.rdata$r:00001907                 db    0
.rdata$r:00001908                 db    0
.rdata$r:00001909                 db    0
.rdata$r:0000190A                 db    0
.rdata$r:0000190B                 db    0
.rdata$r:0000190C                 db    2
.rdata$r:0000190D                 db    0
.rdata$r:0000190E                 db    0
.rdata$r:0000190F                 db    0
.rdata$r:00001910                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001910 _rdata$r        ends
.rdata$r:00001910
.rdata$r:00001914 ; ===========================================================================
.rdata$r:00001914
.rdata$r:00001914 ; Segment type: Pure data
.rdata$r:00001914 ; Segment permissions: Read
.rdata$r:00001914 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001914                 assume cs:_rdata$r
.rdata$r:00001914                 ;org 1914h
.rdata$r:00001914 ; COMDAT (pick any)
.rdata$r:00001914                 public ??_R2ISequentialOutStream@@8
.rdata$r:00001914 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001914 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001914                                         ; DATA XREF: .rdata$r:00001910o
.rdata$r:00001914                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001918                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000191C                 db    0
.rdata$r:0000191D                 align 10h
.rdata$r:0000191D _rdata$r        ends
.rdata$r:0000191D
.text:00001920 ; ===========================================================================
.text:00001920
.text:00001920 ; Segment type: Pure code
.text:00001920 ; Segment permissions: Read/Execute
.text:00001920 _text           segment para public 'CODE' use32
.text:00001920                 assume cs:_text
.text:00001920                 ;org 1920h
.text:00001920 ; COMDAT (pick any)
.text:00001920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001920
.text:00001920 ; =============== S U B R O U T I N E =======================================
.text:00001920
.text:00001920 ; Attributes: bp-based frame
.text:00001920
.text:00001920 ; __int32 __stdcall NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(NCompress::NLzx::Cx86ConvertOutStream *this, const struct _GUID *Buf1, void **)
.text:00001920                 public ?QueryInterface@Cx86ConvertOutStream@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00001920 ?QueryInterface@Cx86ConvertOutStream@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001920                                         ; DATA XREF: .rdata:const NCompress::NLzx::Cx86ConvertOutStream::`vftable'o
.text:00001920
.text:00001920 this            = dword ptr  8
.text:00001920 Buf1            = dword ptr  0Ch
.text:00001920 arg_8           = dword ptr  10h
.text:00001920
.text:00001920                 push    ebp
.text:00001921                 mov     ebp, esp
.text:00001923                 mov     eax, [ebp+arg_8]
.text:00001926                 mov     dword ptr [eax], 0
.text:0000192C                 push    offset _IID_IUnknown ; Buf2
.text:00001931                 mov     ecx, [ebp+Buf1]
.text:00001934                 push    ecx             ; Buf1
.text:00001935                 call    ___@8           ; __(x,x)
.text:0000193A                 test    eax, eax
.text:0000193C                 jz      short loc_1948
.text:0000193E                 mov     edx, [ebp+arg_8]
.text:00001941                 mov     eax, [ebp+this]
.text:00001944                 mov     [edx], eax
.text:00001946                 jmp     short loc_194F
.text:00001948 ; ---------------------------------------------------------------------------
.text:00001948
.text:00001948 loc_1948:                               ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001948                 mov     eax, 80004002h
.text:0000194D                 jmp     short loc_1960
.text:0000194F ; ---------------------------------------------------------------------------
.text:0000194F
.text:0000194F loc_194F:                               ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000194F                 mov     ecx, [ebp+this]
.text:00001952                 mov     edx, [ecx+4]
.text:00001955                 add     edx, 1
.text:00001958                 mov     eax, [ebp+this]
.text:0000195B                 mov     [eax+4], edx
.text:0000195E                 xor     eax, eax
.text:00001960
.text:00001960 loc_1960:                               ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00001960                 cmp     ebp, esp
.text:00001962                 call    __RTC_CheckEsp
.text:00001967                 pop     ebp
.text:00001968                 retn    0Ch
.text:00001968 ?QueryInterface@Cx86ConvertOutStream@NLzx@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001968
.text:00001968 ; ---------------------------------------------------------------------------
.text:0000196B                 align 4
.text:0000196B _text           ends
.text:0000196B
.text:0000196C ; ===========================================================================
.text:0000196C
.text:0000196C ; Segment type: Pure code
.text:0000196C ; Segment permissions: Read/Execute
.text:0000196C _text           segment para public 'CODE' use32
.text:0000196C                 assume cs:_text
.text:0000196C                 ;org 196Ch
.text:0000196C ; COMDAT (pick any)
.text:0000196C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000196C
.text:0000196C ; =============== S U B R O U T I N E =======================================
.text:0000196C
.text:0000196C ; Attributes: bp-based frame
.text:0000196C
.text:0000196C ; unsigned __int32 __stdcall NCompress::NLzx::Cx86ConvertOutStream::AddRef(NCompress::NLzx::Cx86ConvertOutStream *this)
.text:0000196C                 public ?AddRef@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ
.text:0000196C ?AddRef@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ proc near
.text:0000196C                                         ; DATA XREF: .rdata:00001830o
.text:0000196C
.text:0000196C var_4           = dword ptr -4
.text:0000196C this            = dword ptr  8
.text:0000196C
.text:0000196C                 push    ebp
.text:0000196D                 mov     ebp, esp
.text:0000196F                 push    ecx
.text:00001970                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001977                 mov     eax, [ebp+this]
.text:0000197A                 mov     ecx, [eax+4]
.text:0000197D                 add     ecx, 1
.text:00001980                 mov     [ebp+var_4], ecx
.text:00001983                 mov     edx, [ebp+this]
.text:00001986                 mov     eax, [ebp+var_4]
.text:00001989                 mov     [edx+4], eax
.text:0000198C                 mov     eax, [ebp+var_4]
.text:0000198F                 mov     esp, ebp
.text:00001991                 pop     ebp
.text:00001992                 retn    4
.text:00001992 ?AddRef@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ endp
.text:00001992
.text:00001992 ; ---------------------------------------------------------------------------
.text:00001995                 align 4
.text:00001995 _text           ends
.text:00001995
.text:00001998 ; ===========================================================================
.text:00001998
.text:00001998 ; Segment type: Pure code
.text:00001998 ; Segment permissions: Read/Execute
.text:00001998 _text           segment para public 'CODE' use32
.text:00001998                 assume cs:_text
.text:00001998                 ;org 1998h
.text:00001998 ; COMDAT (pick any)
.text:00001998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001998
.text:00001998 ; =============== S U B R O U T I N E =======================================
.text:00001998
.text:00001998 ; Attributes: bp-based frame
.text:00001998
.text:00001998 ; unsigned __int32 __stdcall NCompress::NLzx::Cx86ConvertOutStream::Release(NCompress::NLzx::Cx86ConvertOutStream *this)
.text:00001998                 public ?Release@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ
.text:00001998 ?Release@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ proc near
.text:00001998                                         ; DATA XREF: .rdata:00001834o
.text:00001998
.text:00001998 var_8           = dword ptr -8
.text:00001998 var_4           = dword ptr -4
.text:00001998 this            = dword ptr  8
.text:00001998
.text:00001998                 push    ebp
.text:00001999                 mov     ebp, esp
.text:0000199B                 sub     esp, 8
.text:0000199E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000019A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019AC                 mov     eax, [ebp+this]
.text:000019AF                 mov     ecx, [eax+4]
.text:000019B2                 sub     ecx, 1
.text:000019B5                 mov     [ebp+var_8], ecx
.text:000019B8                 mov     edx, [ebp+this]
.text:000019BB                 mov     eax, [ebp+var_8]
.text:000019BE                 mov     [edx+4], eax
.text:000019C1                 cmp     [ebp+var_8], 0
.text:000019C5                 jz      short loc_19CF
.text:000019C7                 mov     ecx, [ebp+this]
.text:000019CA                 mov     eax, [ecx+4]
.text:000019CD                 jmp     short loc_19E3
.text:000019CF ; ---------------------------------------------------------------------------
.text:000019CF
.text:000019CF loc_19CF:                               ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::Release(void)+2Dj
.text:000019CF                 mov     edx, [ebp+this]
.text:000019D2                 mov     [ebp+var_4], edx
.text:000019D5                 mov     eax, [ebp+var_4]
.text:000019D8                 push    eax             ; void *
.text:000019D9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000019DE                 add     esp, 4
.text:000019E1                 xor     eax, eax
.text:000019E3
.text:000019E3 loc_19E3:                               ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::Release(void)+35j
.text:000019E3                 add     esp, 8
.text:000019E6                 cmp     ebp, esp
.text:000019E8                 call    __RTC_CheckEsp
.text:000019ED                 mov     esp, ebp
.text:000019EF                 pop     ebp
.text:000019F0                 retn    4
.text:000019F0 ?Release@Cx86ConvertOutStream@NLzx@NCompress@@UAGKXZ endp
.text:000019F0
.text:000019F0 ; ---------------------------------------------------------------------------
.text:000019F3                 align 4
.text:000019F3 _text           ends
.text:000019F3
.text:000019F4 ; ===========================================================================
.text:000019F4
.text:000019F4 ; Segment type: Pure code
.text:000019F4 ; Segment permissions: Read/Execute
.text:000019F4 _text           segment para public 'CODE' use32
.text:000019F4                 assume cs:_text
.text:000019F4                 ;org 19F4h
.text:000019F4 ; COMDAT (pick any)
.text:000019F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019F4
.text:000019F4 ; =============== S U B R O U T I N E =======================================
.text:000019F4
.text:000019F4 ; Attributes: bp-based frame
.text:000019F4
.text:000019F4 ; public: __thiscall IUnknown::IUnknown(void)
.text:000019F4                 public ??0IUnknown@@QAE@XZ
.text:000019F4 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:000019F4                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p
.text:000019F4
.text:000019F4 var_4           = dword ptr -4
.text:000019F4
.text:000019F4                 push    ebp
.text:000019F5                 mov     ebp, esp
.text:000019F7                 push    ecx
.text:000019F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019FF                 mov     [ebp+var_4], ecx
.text:00001A02                 mov     eax, [ebp+var_4]
.text:00001A05                 mov     esp, ebp
.text:00001A07                 pop     ebp
.text:00001A08                 retn
.text:00001A08 ??0IUnknown@@QAE@XZ endp
.text:00001A08
.text:00001A08 ; ---------------------------------------------------------------------------
.text:00001A09                 align 4
.text:00001A09 _text           ends
.text:00001A09
.text:00001A0C ; ===========================================================================
.text:00001A0C
.text:00001A0C ; Segment type: Pure code
.text:00001A0C ; Segment permissions: Read/Execute
.text:00001A0C _text           segment para public 'CODE' use32
.text:00001A0C                 assume cs:_text
.text:00001A0C                 ;org 1A0Ch
.text:00001A0C ; COMDAT (pick any)
.text:00001A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A0C
.text:00001A0C ; =============== S U B R O U T I N E =======================================
.text:00001A0C
.text:00001A0C ; Attributes: bp-based frame
.text:00001A0C
.text:00001A0C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00001A0C                 public ??0ISequentialOutStream@@QAE@XZ
.text:00001A0C ??0ISequentialOutStream@@QAE@XZ proc near
.text:00001A0C                                         ; CODE XREF: NCompress::NLzx::Cx86ConvertOutStream::Cx86ConvertOutStream(void)+11p
.text:00001A0C
.text:00001A0C var_4           = dword ptr -4
.text:00001A0C
.text:00001A0C                 push    ebp
.text:00001A0D                 mov     ebp, esp
.text:00001A0F                 push    ecx
.text:00001A10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A17                 mov     [ebp+var_4], ecx
.text:00001A1A                 mov     ecx, [ebp+var_4]
.text:00001A1D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001A22                 mov     eax, [ebp+var_4]
.text:00001A25                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00001A2B                 mov     eax, [ebp+var_4]
.text:00001A2E                 add     esp, 4
.text:00001A31                 cmp     ebp, esp
.text:00001A33                 call    __RTC_CheckEsp
.text:00001A38                 mov     esp, ebp
.text:00001A3A                 pop     ebp
.text:00001A3B                 retn
.text:00001A3B ??0ISequentialOutStream@@QAE@XZ endp
.text:00001A3B
.text:00001A3B _text           ends
.text:00001A3B
.rdata:00001A3C ; ===========================================================================
.rdata:00001A3C
.rdata:00001A3C ; Segment type: Pure data
.rdata:00001A3C ; Segment permissions: Read
.rdata:00001A3C _rdata          segment dword public 'DATA' use32
.rdata:00001A3C                 assume cs:_rdata
.rdata:00001A3C                 ;org 1A3Ch
.rdata:00001A3C ; COMDAT (pick largest)
.rdata:00001A3C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00001A40                 public ??_7ISequentialOutStream@@6B@
.rdata:00001A40 ; const ISequentialOutStream::`vftable'
.rdata:00001A40 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00001A40                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00001A44                 dd offset __purecall
.rdata:00001A48                 dd offset __purecall
.rdata:00001A4C                 dd offset __purecall
.rdata:00001A4C _rdata          ends
.rdata:00001A4C
.rdata$r:00001A50 ; ===========================================================================
.rdata$r:00001A50
.rdata$r:00001A50 ; Segment type: Pure data
.rdata$r:00001A50 ; Segment permissions: Read
.rdata$r:00001A50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A50                 assume cs:_rdata$r
.rdata$r:00001A50                 ;org 1A50h
.rdata$r:00001A50 ; COMDAT (pick any)
.rdata$r:00001A50                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00001A50 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00001A50 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00001A3Co
.rdata$r:00001A51                 db    0
.rdata$r:00001A52                 db    0
.rdata$r:00001A53                 db    0
.rdata$r:00001A54                 db    0
.rdata$r:00001A55                 db    0
.rdata$r:00001A56                 db    0
.rdata$r:00001A57                 db    0
.rdata$r:00001A58                 db    0
.rdata$r:00001A59                 db    0
.rdata$r:00001A5A                 db    0
.rdata$r:00001A5B                 db    0
.rdata$r:00001A5C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001A60                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A60 _rdata$r        ends
.rdata$r:00001A60
.text:00001A64 ; ===========================================================================
.text:00001A64
.text:00001A64 ; Segment type: Pure code
.text:00001A64 ; Segment permissions: Read/Execute
.text:00001A64 _text           segment para public 'CODE' use32
.text:00001A64                 assume cs:_text
.text:00001A64                 ;org 1A64h
.text:00001A64 ; COMDAT (pick any)
.text:00001A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A64
.text:00001A64 ; =============== S U B R O U T I N E =======================================
.text:00001A64
.text:00001A64 ; Attributes: bp-based frame
.text:00001A64
.text:00001A64 ; unsigned int __thiscall NCompress::NLzx::NBitStream::CDecoder::ReadBits(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int)
.text:00001A64                 public ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z
.text:00001A64 ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z proc near
.text:00001A64                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadBits(uint)+18p
.text:00001A64                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+364p ...
.text:00001A64
.text:00001A64 var_8           = dword ptr -8
.text:00001A64 var_4           = dword ptr -4
.text:00001A64 arg_0           = dword ptr  8
.text:00001A64
.text:00001A64                 push    ebp
.text:00001A65                 mov     ebp, esp
.text:00001A67                 sub     esp, 8
.text:00001A6A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001A71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A78                 mov     [ebp+var_4], ecx
.text:00001A7B                 mov     eax, [ebp+arg_0]
.text:00001A7E                 push    eax             ; unsigned int
.text:00001A7F                 mov     ecx, [ebp+var_4] ; this
.text:00001A82                 call    ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z ; NCompress::NLzx::NBitStream::CDecoder::GetValue(uint)
.text:00001A87                 mov     [ebp+var_8], eax
.text:00001A8A                 mov     ecx, [ebp+arg_0]
.text:00001A8D                 push    ecx             ; unsigned int
.text:00001A8E                 mov     ecx, [ebp+var_4] ; this
.text:00001A91                 call    ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z ; NCompress::NLzx::NBitStream::CDecoder::MovePos(uint)
.text:00001A96                 mov     eax, [ebp+var_8]
.text:00001A99                 add     esp, 8
.text:00001A9C                 cmp     ebp, esp
.text:00001A9E                 call    __RTC_CheckEsp
.text:00001AA3                 mov     esp, ebp
.text:00001AA5                 pop     ebp
.text:00001AA6                 retn    4
.text:00001AA6 ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z endp
.text:00001AA6
.text:00001AA6 ; ---------------------------------------------------------------------------
.text:00001AA9                 align 4
.text:00001AA9 _text           ends
.text:00001AA9
.text:00001AAC ; ===========================================================================
.text:00001AAC
.text:00001AAC ; Segment type: Pure code
.text:00001AAC ; Segment permissions: Read/Execute
.text:00001AAC _text           segment para public 'CODE' use32
.text:00001AAC                 assume cs:_text
.text:00001AAC                 ;org 1AACh
.text:00001AAC ; COMDAT (pick any)
.text:00001AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AAC
.text:00001AAC ; =============== S U B R O U T I N E =======================================
.text:00001AAC
.text:00001AAC ; Attributes: bp-based frame
.text:00001AAC
.text:00001AAC ; unsigned int __thiscall NCompress::NLzx::NBitStream::CDecoder::GetValue(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int)
.text:00001AAC                 public ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z
.text:00001AAC ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z proc near
.text:00001AAC                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)+1Ep
.text:00001AAC                                         ; NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+1Fp ...
.text:00001AAC
.text:00001AAC var_4           = dword ptr -4
.text:00001AAC arg_0           = dword ptr  8
.text:00001AAC
.text:00001AAC                 push    ebp
.text:00001AAD                 mov     ebp, esp
.text:00001AAF                 push    ecx
.text:00001AB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AB7                 mov     [ebp+var_4], ecx
.text:00001ABA                 mov     eax, [ebp+var_4]
.text:00001ABD                 mov     ecx, 0Fh
.text:00001AC2                 sub     ecx, [eax+2Ch]
.text:00001AC5                 mov     edx, [ebp+var_4]
.text:00001AC8                 mov     eax, [edx+28h]
.text:00001ACB                 shr     eax, cl
.text:00001ACD                 and     eax, 1FFFFh
.text:00001AD2                 mov     ecx, 11h
.text:00001AD7                 sub     ecx, [ebp+arg_0]
.text:00001ADA                 shr     eax, cl
.text:00001ADC                 mov     esp, ebp
.text:00001ADE                 pop     ebp
.text:00001ADF                 retn    4
.text:00001ADF ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z endp
.text:00001ADF
.text:00001ADF ; ---------------------------------------------------------------------------
.text:00001AE2                 align 4
.text:00001AE2 _text           ends
.text:00001AE2
.text:00001AE4 ; ===========================================================================
.text:00001AE4
.text:00001AE4 ; Segment type: Pure code
.text:00001AE4 ; Segment permissions: Read/Execute
.text:00001AE4 _text           segment para public 'CODE' use32
.text:00001AE4                 assume cs:_text
.text:00001AE4                 ;org 1AE4h
.text:00001AE4 ; COMDAT (pick any)
.text:00001AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AE4
.text:00001AE4 ; =============== S U B R O U T I N E =======================================
.text:00001AE4
.text:00001AE4 ; Attributes: bp-based frame
.text:00001AE4
.text:00001AE4 ; void __thiscall NCompress::NLzx::NBitStream::CDecoder::MovePos(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int)
.text:00001AE4                 public ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z
.text:00001AE4 ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z proc near
.text:00001AE4                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)+2Dp
.text:00001AE4                                         ; NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+71p ...
.text:00001AE4
.text:00001AE4 var_4           = dword ptr -4
.text:00001AE4 arg_0           = dword ptr  8
.text:00001AE4
.text:00001AE4                 push    ebp
.text:00001AE5                 mov     ebp, esp
.text:00001AE7                 push    ecx
.text:00001AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AEF                 mov     [ebp+var_4], ecx
.text:00001AF2                 mov     eax, [ebp+var_4]
.text:00001AF5                 mov     ecx, [eax+2Ch]
.text:00001AF8                 add     ecx, [ebp+arg_0]
.text:00001AFB                 mov     edx, [ebp+var_4]
.text:00001AFE                 mov     [edx+2Ch], ecx
.text:00001B01                 mov     ecx, [ebp+var_4] ; this
.text:00001B04                 call    ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ ; NCompress::NLzx::NBitStream::CDecoder::Normalize(void)
.text:00001B09                 add     esp, 4
.text:00001B0C                 cmp     ebp, esp
.text:00001B0E                 call    __RTC_CheckEsp
.text:00001B13                 mov     esp, ebp
.text:00001B15                 pop     ebp
.text:00001B16                 retn    4
.text:00001B16 ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z endp
.text:00001B16
.text:00001B16 ; ---------------------------------------------------------------------------
.text:00001B19                 align 4
.text:00001B19 _text           ends
.text:00001B19
.text:00001B1C ; ===========================================================================
.text:00001B1C
.text:00001B1C ; Segment type: Pure code
.text:00001B1C ; Segment permissions: Read/Execute
.text:00001B1C _text           segment para public 'CODE' use32
.text:00001B1C                 assume cs:_text
.text:00001B1C                 ;org 1B1Ch
.text:00001B1C ; COMDAT (pick any)
.text:00001B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B1C
.text:00001B1C ; =============== S U B R O U T I N E =======================================
.text:00001B1C
.text:00001B1C ; Attributes: bp-based frame
.text:00001B1C
.text:00001B1C ; void __thiscall NCompress::NLzx::NBitStream::CDecoder::Normalize(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:00001B1C                 public ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ
.text:00001B1C ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ proc near
.text:00001B1C                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+4Ap
.text:00001B1C                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+62p ...
.text:00001B1C
.text:00001B1C var_8           = dword ptr -8
.text:00001B1C var_4           = dword ptr -4
.text:00001B1C
.text:00001B1C                 push    ebp
.text:00001B1D                 mov     ebp, esp
.text:00001B1F                 sub     esp, 8
.text:00001B22                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001B29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B30                 mov     [ebp+var_4], ecx
.text:00001B33                 jmp     short loc_1B44
.text:00001B35 ; ---------------------------------------------------------------------------
.text:00001B35
.text:00001B35 loc_1B35:                               ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Normalize(void)+71j
.text:00001B35                 mov     eax, [ebp+var_4]
.text:00001B38                 mov     ecx, [eax+2Ch]
.text:00001B3B                 sub     ecx, 10h
.text:00001B3E                 mov     edx, [ebp+var_4]
.text:00001B41                 mov     [edx+2Ch], ecx
.text:00001B44
.text:00001B44 loc_1B44:                               ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Normalize(void)+17j
.text:00001B44                 mov     eax, [ebp+var_4]
.text:00001B47                 cmp     dword ptr [eax+2Ch], 10h
.text:00001B4B                 jb      short loc_1B8F
.text:00001B4D                 mov     ecx, [ebp+var_4] ; this
.text:00001B50                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00001B55                 mov     byte ptr [ebp+var_8+3], al
.text:00001B58                 mov     ecx, [ebp+var_4] ; this
.text:00001B5B                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00001B60                 mov     byte ptr [ebp+var_8+2], al
.text:00001B63                 mov     ecx, [ebp+var_4]
.text:00001B66                 mov     edx, [ecx+28h]
.text:00001B69                 shl     edx, 8
.text:00001B6C                 movzx   eax, byte ptr [ebp+var_8+2]
.text:00001B70                 or      edx, eax
.text:00001B72                 mov     ecx, [ebp+var_4]
.text:00001B75                 mov     [ecx+28h], edx
.text:00001B78                 mov     edx, [ebp+var_4]
.text:00001B7B                 mov     eax, [edx+28h]
.text:00001B7E                 shl     eax, 8
.text:00001B81                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00001B85                 or      eax, ecx
.text:00001B87                 mov     edx, [ebp+var_4]
.text:00001B8A                 mov     [edx+28h], eax
.text:00001B8D                 jmp     short loc_1B35
.text:00001B8F ; ---------------------------------------------------------------------------
.text:00001B8F
.text:00001B8F loc_1B8F:                               ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Normalize(void)+2Fj
.text:00001B8F                 add     esp, 8
.text:00001B92                 cmp     ebp, esp
.text:00001B94                 call    __RTC_CheckEsp
.text:00001B99                 mov     esp, ebp
.text:00001B9B                 pop     ebp
.text:00001B9C                 retn
.text:00001B9C ?Normalize@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ endp
.text:00001B9C
.text:00001B9C ; ---------------------------------------------------------------------------
.text:00001B9D                 align 10h
.text:00001B9D _text           ends
.text:00001B9D
.text:00001BA0 ; ===========================================================================
.text:00001BA0
.text:00001BA0 ; Segment type: Pure code
.text:00001BA0 ; Segment permissions: Read/Execute
.text:00001BA0 _text           segment para public 'CODE' use32
.text:00001BA0                 assume cs:_text
.text:00001BA0                 ;org 1BA0h
.text:00001BA0 ; COMDAT (pick any)
.text:00001BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BA0
.text:00001BA0 ; =============== S U B R O U T I N E =======================================
.text:00001BA0
.text:00001BA0 ; Attributes: bp-based frame
.text:00001BA0
.text:00001BA0 ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:00001BA0                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:00001BA0 ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:00001BA0                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Normalize(void)+34p
.text:00001BA0                                         ; NCompress::NLzx::NBitStream::CDecoder::Normalize(void)+3Fp ...
.text:00001BA0
.text:00001BA0 var_8           = dword ptr -8
.text:00001BA0 var_4           = dword ptr -4
.text:00001BA0
.text:00001BA0                 push    ebp
.text:00001BA1                 mov     ebp, esp
.text:00001BA3                 sub     esp, 8
.text:00001BA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001BAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BB4                 mov     [ebp+var_4], ecx
.text:00001BB7                 mov     eax, [ebp+var_4]
.text:00001BBA                 mov     ecx, [ebp+var_4]
.text:00001BBD                 mov     edx, [eax]
.text:00001BBF                 cmp     edx, [ecx+4]
.text:00001BC2                 jb      short loc_1BCE
.text:00001BC4                 mov     ecx, [ebp+var_4] ; this
.text:00001BC7                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00001BCC                 jmp     short loc_1BE8
.text:00001BCE ; ---------------------------------------------------------------------------
.text:00001BCE
.text:00001BCE loc_1BCE:                               ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:00001BCE                 mov     eax, [ebp+var_4]
.text:00001BD1                 mov     ecx, [eax]
.text:00001BD3                 mov     dl, [ecx]
.text:00001BD5                 mov     byte ptr [ebp+var_8+3], dl
.text:00001BD8                 mov     eax, [ebp+var_4]
.text:00001BDB                 mov     ecx, [eax]
.text:00001BDD                 add     ecx, 1
.text:00001BE0                 mov     edx, [ebp+var_4]
.text:00001BE3                 mov     [edx], ecx
.text:00001BE5                 mov     al, byte ptr [ebp+var_8+3]
.text:00001BE8
.text:00001BE8 loc_1BE8:                               ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00001BE8                 add     esp, 8
.text:00001BEB                 cmp     ebp, esp
.text:00001BED                 call    __RTC_CheckEsp
.text:00001BF2                 mov     esp, ebp
.text:00001BF4                 pop     ebp
.text:00001BF5                 retn
.text:00001BF5 ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:00001BF5
.text:00001BF5 ; ---------------------------------------------------------------------------
.text:00001BF6                 align 4
.text:00001BF6 _text           ends
.text:00001BF6
.text:00001BF8 ; ===========================================================================
.text:00001BF8
.text:00001BF8 ; Segment type: Pure code
.text:00001BF8 ; Segment permissions: Read/Execute
.text:00001BF8 _text           segment para public 'CODE' use32
.text:00001BF8                 assume cs:_text
.text:00001BF8                 ;org 1BF8h
.text:00001BF8 ; COMDAT (pick any)
.text:00001BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BF8
.text:00001BF8 ; =============== S U B R O U T I N E =======================================
.text:00001BF8
.text:00001BF8 ; Attributes: bp-based frame
.text:00001BF8
.text:00001BF8 ; unsigned int __thiscall NCompress::NLzx::NBitStream::CDecoder::GetBitPosition(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:00001BF8                 public ?GetBitPosition@CDecoder@NBitStream@NLzx@NCompress@@QBEIXZ
.text:00001BF8 ?GetBitPosition@CDecoder@NBitStream@NLzx@NCompress@@QBEIXZ proc near
.text:00001BF8                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+12Bp
.text:00001BF8
.text:00001BF8 var_4           = dword ptr -4
.text:00001BF8
.text:00001BF8                 push    ebp
.text:00001BF9                 mov     ebp, esp
.text:00001BFB                 push    ecx
.text:00001BFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C03                 mov     [ebp+var_4], ecx
.text:00001C06                 mov     eax, [ebp+var_4]
.text:00001C09                 mov     eax, [eax+2Ch]
.text:00001C0C                 and     eax, 0Fh
.text:00001C0F                 mov     esp, ebp
.text:00001C11                 pop     ebp
.text:00001C12                 retn
.text:00001C12 ?GetBitPosition@CDecoder@NBitStream@NLzx@NCompress@@QBEIXZ endp
.text:00001C12
.text:00001C12 ; ---------------------------------------------------------------------------
.text:00001C13                 align 4
.text:00001C13 _text           ends
.text:00001C13
.text:00001C14 ; ===========================================================================
.text:00001C14
.text:00001C14 ; Segment type: Pure code
.text:00001C14 ; Segment permissions: Read/Execute
.text:00001C14 _text           segment para public 'CODE' use32
.text:00001C14                 assume cs:_text
.text:00001C14                 ;org 1C14h
.text:00001C14 ; COMDAT (pick any)
.text:00001C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C14
.text:00001C14 ; =============== S U B R O U T I N E =======================================
.text:00001C14
.text:00001C14 ; Attributes: bp-based frame
.text:00001C14
.text:00001C14 ; unsigned int __thiscall NCompress::NLzx::NBitStream::CDecoder::ReadBitsBig(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int)
.text:00001C14                 public ?ReadBitsBig@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z
.text:00001C14 ?ReadBitsBig@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z proc near
.text:00001C14                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+B8p
.text:00001C14
.text:00001C14 var_10          = dword ptr -10h
.text:00001C14 var_C           = dword ptr -0Ch
.text:00001C14 var_8           = dword ptr -8
.text:00001C14 var_4           = dword ptr -4
.text:00001C14 arg_0           = dword ptr  8
.text:00001C14
.text:00001C14                 push    ebp
.text:00001C15                 mov     ebp, esp
.text:00001C17                 sub     esp, 10h
.text:00001C1A                 mov     eax, 0CCCCCCCCh
.text:00001C1F                 mov     [ebp+var_10], eax
.text:00001C22                 mov     [ebp+var_C], eax
.text:00001C25                 mov     [ebp+var_8], eax
.text:00001C28                 mov     [ebp+var_4], eax
.text:00001C2B                 mov     [ebp+var_4], ecx
.text:00001C2E                 mov     eax, [ebp+arg_0]
.text:00001C31                 shr     eax, 1
.text:00001C33                 mov     [ebp+var_8], eax
.text:00001C36                 mov     ecx, [ebp+arg_0]
.text:00001C39                 sub     ecx, [ebp+var_8]
.text:00001C3C                 mov     [ebp+var_C], ecx
.text:00001C3F                 mov     edx, [ebp+var_8]
.text:00001C42                 push    edx             ; unsigned int
.text:00001C43                 mov     ecx, [ebp+var_4] ; this
.text:00001C46                 call    ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)
.text:00001C4B                 mov     ecx, [ebp+var_C]
.text:00001C4E                 shl     eax, cl
.text:00001C50                 mov     [ebp+var_10], eax
.text:00001C53                 mov     eax, [ebp+var_C]
.text:00001C56                 push    eax             ; unsigned int
.text:00001C57                 mov     ecx, [ebp+var_4] ; this
.text:00001C5A                 call    ?ReadBits@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z ; NCompress::NLzx::NBitStream::CDecoder::ReadBits(uint)
.text:00001C5F                 add     eax, [ebp+var_10]
.text:00001C62                 add     esp, 10h
.text:00001C65                 cmp     ebp, esp
.text:00001C67                 call    __RTC_CheckEsp
.text:00001C6C                 mov     esp, ebp
.text:00001C6E                 pop     ebp
.text:00001C6F                 retn    4
.text:00001C6F ?ReadBitsBig@CDecoder@NBitStream@NLzx@NCompress@@QAEII@Z endp
.text:00001C6F
.text:00001C6F ; ---------------------------------------------------------------------------
.text:00001C72                 align 4
.text:00001C72 _text           ends
.text:00001C72
.text:00001C74 ; ===========================================================================
.text:00001C74
.text:00001C74 ; Segment type: Pure code
.text:00001C74 ; Segment permissions: Read/Execute
.text:00001C74 _text           segment para public 'CODE' use32
.text:00001C74                 assume cs:_text
.text:00001C74                 ;org 1C74h
.text:00001C74 ; COMDAT (pick any)
.text:00001C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C74
.text:00001C74 ; =============== S U B R O U T I N E =======================================
.text:00001C74
.text:00001C74 ; Attributes: bp-based frame
.text:00001C74
.text:00001C74 ; bool __thiscall NCompress::NLzx::NBitStream::CDecoder::ReadUInt32(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int *)
.text:00001C74                 public ?ReadUInt32@CDecoder@NBitStream@NLzx@NCompress@@QAE_NAAI@Z
.text:00001C74 ?ReadUInt32@CDecoder@NBitStream@NLzx@NCompress@@QAE_NAAI@Z proc near
.text:00001C74                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+14Dp
.text:00001C74
.text:00001C74 var_4           = dword ptr -4
.text:00001C74 arg_0           = dword ptr  8
.text:00001C74
.text:00001C74                 push    ebp
.text:00001C75                 mov     ebp, esp
.text:00001C77                 push    ecx
.text:00001C78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C7F                 mov     [ebp+var_4], ecx
.text:00001C82                 mov     eax, [ebp+var_4]
.text:00001C85                 cmp     dword ptr [eax+2Ch], 0
.text:00001C89                 jz      short loc_1C8F
.text:00001C8B                 xor     al, al
.text:00001C8D                 jmp     short loc_1CC0
.text:00001C8F ; ---------------------------------------------------------------------------
.text:00001C8F
.text:00001C8F loc_1C8F:                               ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::ReadUInt32(uint &)+15j
.text:00001C8F                 mov     ecx, [ebp+var_4]
.text:00001C92                 mov     edx, [ecx+28h]
.text:00001C95                 shr     edx, 10h
.text:00001C98                 and     edx, 0FFFFh
.text:00001C9E                 mov     eax, [ebp+var_4]
.text:00001CA1                 mov     ecx, [eax+28h]
.text:00001CA4                 shl     ecx, 10h
.text:00001CA7                 and     ecx, 0FFFF0000h
.text:00001CAD                 or      edx, ecx
.text:00001CAF                 mov     eax, [ebp+arg_0]
.text:00001CB2                 mov     [eax], edx
.text:00001CB4                 mov     ecx, [ebp+var_4]
.text:00001CB7                 mov     dword ptr [ecx+2Ch], 20h ; ' '
.text:00001CBE                 mov     al, 1
.text:00001CC0
.text:00001CC0 loc_1CC0:                               ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::ReadUInt32(uint &)+19j
.text:00001CC0                 mov     esp, ebp
.text:00001CC2                 pop     ebp
.text:00001CC3                 retn    4
.text:00001CC3 ?ReadUInt32@CDecoder@NBitStream@NLzx@NCompress@@QAE_NAAI@Z endp
.text:00001CC3
.text:00001CC3 ; ---------------------------------------------------------------------------
.text:00001CC6                 align 4
.text:00001CC6 _text           ends
.text:00001CC6
.text:00001CC8 ; ===========================================================================
.text:00001CC8
.text:00001CC8 ; Segment type: Pure code
.text:00001CC8 ; Segment permissions: Read/Execute
.text:00001CC8 _text           segment para public 'CODE' use32
.text:00001CC8                 assume cs:_text
.text:00001CC8                 ;org 1CC8h
.text:00001CC8 ; COMDAT (pick any)
.text:00001CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CC8
.text:00001CC8 ; =============== S U B R O U T I N E =======================================
.text:00001CC8
.text:00001CC8 ; Attributes: bp-based frame
.text:00001CC8
.text:00001CC8 ; unsigned __int8 __thiscall NCompress::NLzx::NBitStream::CDecoder::DirectReadByte(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:00001CC8                 public ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ
.text:00001CC8 ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ proc near
.text:00001CC8                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+3Fp
.text:00001CC8                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+1C7p ...
.text:00001CC8
.text:00001CC8 var_4           = dword ptr -4
.text:00001CC8
.text:00001CC8                 push    ebp
.text:00001CC9                 mov     ebp, esp
.text:00001CCB                 push    ecx
.text:00001CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CD3                 mov     [ebp+var_4], ecx
.text:00001CD6                 mov     ecx, [ebp+var_4] ; this
.text:00001CD9                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00001CDE                 add     esp, 4
.text:00001CE1                 cmp     ebp, esp
.text:00001CE3                 call    __RTC_CheckEsp
.text:00001CE8                 mov     esp, ebp
.text:00001CEA                 pop     ebp
.text:00001CEB                 retn
.text:00001CEB ?DirectReadByte@CDecoder@NBitStream@NLzx@NCompress@@QAEEXZ endp
.text:00001CEB
.text:00001CEB _text           ends
.text:00001CEB
.text:00001CEC ; ===========================================================================
.text:00001CEC
.text:00001CEC ; Segment type: Pure code
.text:00001CEC ; Segment permissions: Read/Execute
.text:00001CEC _text           segment para public 'CODE' use32
.text:00001CEC                 assume cs:_text
.text:00001CEC                 ;org 1CECh
.text:00001CEC ; COMDAT (pick any)
.text:00001CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CEC
.text:00001CEC ; =============== S U B R O U T I N E =======================================
.text:00001CEC
.text:00001CEC ; Attributes: bp-based frame
.text:00001CEC
.text:00001CEC ; bool __thiscall CLzOutWindow::CopyBlock(CLzOutWindow *this, unsigned int, unsigned int)
.text:00001CEC                 public ?CopyBlock@CLzOutWindow@@QAE_NII@Z
.text:00001CEC ?CopyBlock@CLzOutWindow@@QAE_NII@Z proc near
.text:00001CEC                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+403p
.text:00001CEC
.text:00001CEC var_14          = dword ptr -14h
.text:00001CEC var_10          = dword ptr -10h
.text:00001CEC var_C           = dword ptr -0Ch
.text:00001CEC var_8           = dword ptr -8
.text:00001CEC var_4           = dword ptr -4
.text:00001CEC arg_0           = dword ptr  8
.text:00001CEC arg_4           = dword ptr  0Ch
.text:00001CEC
.text:00001CEC                 push    ebp
.text:00001CED                 mov     ebp, esp
.text:00001CEF                 sub     esp, 14h
.text:00001CF2                 push    esi
.text:00001CF3                 mov     eax, 0CCCCCCCCh
.text:00001CF8                 mov     [ebp+var_14], eax
.text:00001CFB                 mov     [ebp+var_10], eax
.text:00001CFE                 mov     [ebp+var_C], eax
.text:00001D01                 mov     [ebp+var_8], eax
.text:00001D04                 mov     [ebp+var_4], eax
.text:00001D07                 mov     [ebp+var_4], ecx
.text:00001D0A                 mov     eax, [ebp+var_4]
.text:00001D0D                 mov     ecx, [eax+4]
.text:00001D10                 sub     ecx, [ebp+arg_0]
.text:00001D13                 sub     ecx, 1
.text:00001D16                 mov     [ebp+var_8], ecx
.text:00001D19                 mov     edx, [ebp+var_4]
.text:00001D1C                 mov     eax, [ebp+arg_0]
.text:00001D1F                 cmp     eax, [edx+4]
.text:00001D22                 jb      short loc_1D4D
.text:00001D24                 mov     ecx, [ebp+var_4]
.text:00001D27                 movzx   edx, byte ptr [ecx+24h]
.text:00001D2B                 test    edx, edx
.text:00001D2D                 jz      short loc_1D3A
.text:00001D2F                 mov     eax, [ebp+var_4]
.text:00001D32                 mov     ecx, [ebp+arg_0]
.text:00001D35                 cmp     ecx, [eax+10h]
.text:00001D38                 jb      short loc_1D41
.text:00001D3A
.text:00001D3A loc_1D3A:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+41j
.text:00001D3A                 xor     al, al
.text:00001D3C                 jmp     loc_1E29
.text:00001D41 ; ---------------------------------------------------------------------------
.text:00001D41
.text:00001D41 loc_1D41:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+4Cj
.text:00001D41                 mov     edx, [ebp+var_4]
.text:00001D44                 mov     eax, [ebp+var_8]
.text:00001D47                 add     eax, [edx+10h]
.text:00001D4A                 mov     [ebp+var_8], eax
.text:00001D4D
.text:00001D4D loc_1D4D:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+36j
.text:00001D4D                 mov     ecx, [ebp+var_4]
.text:00001D50                 mov     edx, [ebp+var_4]
.text:00001D53                 mov     eax, [ecx+8]
.text:00001D56                 sub     eax, [edx+4]
.text:00001D59                 cmp     eax, [ebp+arg_4]
.text:00001D5C                 jbe     short loc_1DBD
.text:00001D5E                 mov     ecx, [ebp+var_4]
.text:00001D61                 mov     edx, [ecx+10h]
.text:00001D64                 sub     edx, [ebp+var_8]
.text:00001D67                 cmp     edx, [ebp+arg_4]
.text:00001D6A                 jbe     short loc_1DBD
.text:00001D6C                 mov     eax, [ebp+var_4]
.text:00001D6F                 mov     ecx, [eax]
.text:00001D71                 add     ecx, [ebp+var_8]
.text:00001D74                 mov     [ebp+var_C], ecx
.text:00001D77                 mov     edx, [ebp+var_4]
.text:00001D7A                 mov     eax, [edx]
.text:00001D7C                 mov     ecx, [ebp+var_4]
.text:00001D7F                 add     eax, [ecx+4]
.text:00001D82                 mov     [ebp+var_10], eax
.text:00001D85                 mov     edx, [ebp+var_4]
.text:00001D88                 mov     eax, [edx+4]
.text:00001D8B                 add     eax, [ebp+arg_4]
.text:00001D8E                 mov     ecx, [ebp+var_4]
.text:00001D91                 mov     [ecx+4], eax
.text:00001D94
.text:00001D94 loc_1D94:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CDj
.text:00001D94                 mov     edx, [ebp+var_10]
.text:00001D97                 mov     eax, [ebp+var_C]
.text:00001D9A                 mov     cl, [eax]
.text:00001D9C                 mov     [edx], cl
.text:00001D9E                 mov     edx, [ebp+var_10]
.text:00001DA1                 add     edx, 1
.text:00001DA4                 mov     [ebp+var_10], edx
.text:00001DA7                 mov     eax, [ebp+var_C]
.text:00001DAA                 add     eax, 1
.text:00001DAD                 mov     [ebp+var_C], eax
.text:00001DB0                 mov     ecx, [ebp+arg_4]
.text:00001DB3                 sub     ecx, 1
.text:00001DB6                 mov     [ebp+arg_4], ecx
.text:00001DB9                 jnz     short loc_1D94
.text:00001DBB                 jmp     short loc_1E27
.text:00001DBD ; ---------------------------------------------------------------------------
.text:00001DBD
.text:00001DBD loc_1DBD:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+70j
.text:00001DBD                                         ; CLzOutWindow::CopyBlock(uint,uint)+7Ej ...
.text:00001DBD                 mov     edx, [ebp+var_4]
.text:00001DC0                 mov     eax, [ebp+var_8]
.text:00001DC3                 cmp     eax, [edx+10h]
.text:00001DC6                 jnz     short loc_1DCF
.text:00001DC8                 mov     [ebp+var_8], 0
.text:00001DCF
.text:00001DCF loc_1DCF:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+DAj
.text:00001DCF                 mov     ecx, [ebp+var_4]
.text:00001DD2                 mov     edx, [ecx+4]
.text:00001DD5                 mov     [ebp+var_14], edx
.text:00001DD8                 mov     eax, [ebp+var_4]
.text:00001DDB                 mov     ecx, [eax]
.text:00001DDD                 mov     edx, [ebp+var_4]
.text:00001DE0                 mov     eax, [edx]
.text:00001DE2                 mov     edx, [ebp+var_14]
.text:00001DE5                 mov     esi, [ebp+var_8]
.text:00001DE8                 mov     cl, [ecx+esi]
.text:00001DEB                 mov     [eax+edx], cl
.text:00001DEE                 mov     edx, [ebp+var_14]
.text:00001DF1                 add     edx, 1
.text:00001DF4                 mov     [ebp+var_14], edx
.text:00001DF7                 mov     eax, [ebp+var_8]
.text:00001DFA                 add     eax, 1
.text:00001DFD                 mov     [ebp+var_8], eax
.text:00001E00                 mov     ecx, [ebp+var_4]
.text:00001E03                 mov     edx, [ebp+var_14]
.text:00001E06                 mov     [ecx+4], edx
.text:00001E09                 mov     eax, [ebp+var_4]
.text:00001E0C                 mov     ecx, [ebp+var_14]
.text:00001E0F                 cmp     ecx, [eax+8]
.text:00001E12                 jnz     short loc_1E1C
.text:00001E14                 mov     ecx, [ebp+var_4] ; this
.text:00001E17                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00001E1C
.text:00001E1C loc_1E1C:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+126j
.text:00001E1C                 mov     edx, [ebp+arg_4]
.text:00001E1F                 sub     edx, 1
.text:00001E22                 mov     [ebp+arg_4], edx
.text:00001E25                 jnz     short loc_1DBD
.text:00001E27
.text:00001E27 loc_1E27:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CFj
.text:00001E27                 mov     al, 1
.text:00001E29
.text:00001E29 loc_1E29:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+50j
.text:00001E29                 pop     esi
.text:00001E2A                 add     esp, 14h
.text:00001E2D                 cmp     ebp, esp
.text:00001E2F                 call    __RTC_CheckEsp
.text:00001E34                 mov     esp, ebp
.text:00001E36                 pop     ebp
.text:00001E37                 retn    8
.text:00001E37 ?CopyBlock@CLzOutWindow@@QAE_NII@Z endp
.text:00001E37
.text:00001E37 ; ---------------------------------------------------------------------------
.text:00001E3A                 align 4
.text:00001E3A _text           ends
.text:00001E3A
.text:00001E3C ; ===========================================================================
.text:00001E3C
.text:00001E3C ; Segment type: Pure code
.text:00001E3C ; Segment permissions: Read/Execute
.text:00001E3C _text           segment para public 'CODE' use32
.text:00001E3C                 assume cs:_text
.text:00001E3C                 ;org 1E3Ch
.text:00001E3C ; COMDAT (pick any)
.text:00001E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E3C
.text:00001E3C ; =============== S U B R O U T I N E =======================================
.text:00001E3C
.text:00001E3C ; Attributes: bp-based frame
.text:00001E3C
.text:00001E3C ; void __thiscall CLzOutWindow::PutByte(CLzOutWindow *this, unsigned __int8)
.text:00001E3C                 public ?PutByte@CLzOutWindow@@QAEXE@Z
.text:00001E3C ?PutByte@CLzOutWindow@@QAEXE@Z proc near
.text:00001E3C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+159p
.text:00001E3C                                         ; NCompress::NLzx::CDecoder::CodeSpec(uint)+207p ...
.text:00001E3C
.text:00001E3C var_8           = dword ptr -8
.text:00001E3C var_4           = dword ptr -4
.text:00001E3C arg_0           = byte ptr  8
.text:00001E3C
.text:00001E3C                 push    ebp
.text:00001E3D                 mov     ebp, esp
.text:00001E3F                 sub     esp, 8
.text:00001E42                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001E49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E50                 mov     [ebp+var_4], ecx
.text:00001E53                 mov     eax, [ebp+var_4]
.text:00001E56                 mov     ecx, [eax+4]
.text:00001E59                 mov     [ebp+var_8], ecx
.text:00001E5C                 mov     edx, [ebp+var_4]
.text:00001E5F                 mov     eax, [edx]
.text:00001E61                 mov     ecx, [ebp+var_8]
.text:00001E64                 mov     dl, [ebp+arg_0]
.text:00001E67                 mov     [eax+ecx], dl
.text:00001E6A                 mov     eax, [ebp+var_8]
.text:00001E6D                 add     eax, 1
.text:00001E70                 mov     [ebp+var_8], eax
.text:00001E73                 mov     ecx, [ebp+var_4]
.text:00001E76                 mov     edx, [ebp+var_8]
.text:00001E79                 mov     [ecx+4], edx
.text:00001E7C                 mov     eax, [ebp+var_4]
.text:00001E7F                 mov     ecx, [ebp+var_8]
.text:00001E82                 cmp     ecx, [eax+8]
.text:00001E85                 jnz     short loc_1E8F
.text:00001E87                 mov     ecx, [ebp+var_4] ; this
.text:00001E8A                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00001E8F
.text:00001E8F loc_1E8F:                               ; CODE XREF: CLzOutWindow::PutByte(uchar)+49j
.text:00001E8F                 add     esp, 8
.text:00001E92                 cmp     ebp, esp
.text:00001E94                 call    __RTC_CheckEsp
.text:00001E99                 mov     esp, ebp
.text:00001E9B                 pop     ebp
.text:00001E9C                 retn    4
.text:00001E9C ?PutByte@CLzOutWindow@@QAEXE@Z endp
.text:00001E9C
.text:00001E9C ; ---------------------------------------------------------------------------
.text:00001E9F                 align 10h
.text:00001E9F _text           ends
.text:00001E9F
.text:00001EA0 ; ===========================================================================
.text:00001EA0
.text:00001EA0 ; Segment type: Pure code
.text:00001EA0 ; Segment permissions: Read/Execute
.text:00001EA0 _text           segment para public 'CODE' use32
.text:00001EA0                 assume cs:_text
.text:00001EA0                 ;org 1EA0h
.text:00001EA0 ; COMDAT (pick any)
.text:00001EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001EA0
.text:00001EA0 ; =============== S U B R O U T I N E =======================================
.text:00001EA0
.text:00001EA0 ; Attributes: bp-based frame
.text:00001EA0
.text:00001EA0 ; unsigned __int8 __thiscall CLzOutWindow::GetByte(CLzOutWindow *this, unsigned int)
.text:00001EA0                 public ?GetByte@CLzOutWindow@@QBEEI@Z
.text:00001EA0 ?GetByte@CLzOutWindow@@QBEEI@Z proc near
.text:00001EA0                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+14Ap
.text:00001EA0
.text:00001EA0 var_8           = dword ptr -8
.text:00001EA0 var_4           = dword ptr -4
.text:00001EA0 arg_0           = dword ptr  8
.text:00001EA0
.text:00001EA0                 push    ebp
.text:00001EA1                 mov     ebp, esp
.text:00001EA3                 sub     esp, 8
.text:00001EA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001EAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EB4                 mov     [ebp+var_4], ecx
.text:00001EB7                 mov     eax, [ebp+var_4]
.text:00001EBA                 mov     ecx, [eax+4]
.text:00001EBD                 sub     ecx, [ebp+arg_0]
.text:00001EC0                 sub     ecx, 1
.text:00001EC3                 mov     [ebp+var_8], ecx
.text:00001EC6                 mov     edx, [ebp+var_4]
.text:00001EC9                 mov     eax, [ebp+arg_0]
.text:00001ECC                 cmp     eax, [edx+4]
.text:00001ECF                 jb      short loc_1EDD
.text:00001ED1                 mov     ecx, [ebp+var_4]
.text:00001ED4                 mov     edx, [ebp+var_8]
.text:00001ED7                 add     edx, [ecx+10h]
.text:00001EDA                 mov     [ebp+var_8], edx
.text:00001EDD
.text:00001EDD loc_1EDD:                               ; CODE XREF: CLzOutWindow::GetByte(uint)+2Fj
.text:00001EDD                 mov     eax, [ebp+var_4]
.text:00001EE0                 mov     ecx, [eax]
.text:00001EE2                 mov     edx, [ebp+var_8]
.text:00001EE5                 mov     al, [ecx+edx]
.text:00001EE8                 mov     esp, ebp
.text:00001EEA                 pop     ebp
.text:00001EEB                 retn    4
.text:00001EEB ?GetByte@CLzOutWindow@@QBEEI@Z endp
.text:00001EEB
.text:00001EEB ; ---------------------------------------------------------------------------
.text:00001EEE                 align 10h
.text:00001EEE _text           ends
.text:00001EEE
.text:00001EF0 ; ===========================================================================
.text:00001EF0
.text:00001EF0 ; Segment type: Pure code
.text:00001EF0 ; Segment permissions: Read/Execute
.text:00001EF0 _text           segment para public 'CODE' use32
.text:00001EF0                 assume cs:_text
.text:00001EF0                 ;org 1EF0h
.text:00001EF0 ; COMDAT (pick any)
.text:00001EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001EF0
.text:00001EF0 ; =============== S U B R O U T I N E =======================================
.text:00001EF0
.text:00001EF0 ; Attributes: bp-based frame
.text:00001EF0
.text:00001EF0 ; void __thiscall NCompress::NLzx::Cx86ConvertOutStream::Init(NCompress::NLzx::Cx86ConvertOutStream *this, bool, unsigned int)
.text:00001EF0                 public ?Init@Cx86ConvertOutStream@NLzx@NCompress@@QAEX_NI@Z
.text:00001EF0 ?Init@Cx86ConvertOutStream@NLzx@NCompress@@QAEX_NI@Z proc near
.text:00001EF0                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+FEp
.text:00001EF0                                         ; NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)+2Bp
.text:00001EF0
.text:00001EF0 var_4           = dword ptr -4
.text:00001EF0 arg_0           = byte ptr  8
.text:00001EF0 arg_4           = dword ptr  0Ch
.text:00001EF0
.text:00001EF0                 push    ebp
.text:00001EF1                 mov     ebp, esp
.text:00001EF3                 push    ecx
.text:00001EF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EFB                 mov     [ebp+var_4], ecx
.text:00001EFE                 mov     eax, [ebp+var_4]
.text:00001F01                 mov     cl, [ebp+arg_0]
.text:00001F04                 mov     [eax+18h], cl
.text:00001F07                 mov     edx, [ebp+var_4]
.text:00001F0A                 mov     eax, [ebp+arg_4]
.text:00001F0D                 mov     [edx+14h], eax
.text:00001F10                 mov     ecx, [ebp+var_4]
.text:00001F13                 mov     dword ptr [ecx+0Ch], 0
.text:00001F1A                 mov     edx, [ebp+var_4]
.text:00001F1D                 mov     dword ptr [edx+10h], 0
.text:00001F24                 mov     esp, ebp
.text:00001F26                 pop     ebp
.text:00001F27                 retn    8
.text:00001F27 ?Init@Cx86ConvertOutStream@NLzx@NCompress@@QAEX_NI@Z endp
.text:00001F27
.text:00001F27 ; ---------------------------------------------------------------------------
.text:00001F2A                 align 4
.text:00001F2A _text           ends
.text:00001F2A
.text:00001F2C ; ===========================================================================
.text:00001F2C
.text:00001F2C ; Segment type: Pure code
.text:00001F2C ; Segment permissions: Read/Execute
.text:00001F2C _text           segment para public 'CODE' use32
.text:00001F2C                 assume cs:_text
.text:00001F2C                 ;org 1F2Ch
.text:00001F2C ; COMDAT (pick any)
.text:00001F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F2C
.text:00001F2C ; =============== S U B R O U T I N E =======================================
.text:00001F2C
.text:00001F2C ; Attributes: bp-based frame
.text:00001F2C
.text:00001F2C ; void __thiscall NCompress::NLzx::NBitStream::CDecoder::Init(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:00001F2C                 public ?Init@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ
.text:00001F2C ?Init@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ proc near
.text:00001F2C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+3Ep
.text:00001F2C
.text:00001F2C var_4           = dword ptr -4
.text:00001F2C
.text:00001F2C                 push    ebp
.text:00001F2D                 mov     ebp, esp
.text:00001F2F                 push    ecx
.text:00001F30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F37                 mov     [ebp+var_4], ecx
.text:00001F3A                 mov     ecx, [ebp+var_4] ; this
.text:00001F3D                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00001F42                 mov     eax, [ebp+var_4]
.text:00001F45                 mov     dword ptr [eax+2Ch], 20h ; ' '
.text:00001F4C                 add     esp, 4
.text:00001F4F                 cmp     ebp, esp
.text:00001F51                 call    __RTC_CheckEsp
.text:00001F56                 mov     esp, ebp
.text:00001F58                 pop     ebp
.text:00001F59                 retn
.text:00001F59 ?Init@CDecoder@NBitStream@NLzx@NCompress@@QAEXXZ endp
.text:00001F59
.text:00001F59 ; ---------------------------------------------------------------------------
.text:00001F5A                 align 4
.text:00001F5A _text           ends
.text:00001F5A
.text:00001F5C ; ===========================================================================
.text:00001F5C
.text:00001F5C ; Segment type: Pure code
.text:00001F5C ; Segment permissions: Read/Execute
.text:00001F5C _text           segment para public 'CODE' use32
.text:00001F5C                 assume cs:_text
.text:00001F5C                 ;org 1F5Ch
.text:00001F5C ; COMDAT (pick any)
.text:00001F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F5C
.text:00001F5C ; =============== S U B R O U T I N E =======================================
.text:00001F5C
.text:00001F5C ; Attributes: bp-based frame
.text:00001F5C
.text:00001F5C ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00001F5C                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00001F5C ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00001F5C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Fp
.text:00001F5C
.text:00001F5C var_4           = dword ptr -4
.text:00001F5C arg_0           = dword ptr  8
.text:00001F5C
.text:00001F5C                 push    ebp
.text:00001F5D                 mov     ebp, esp
.text:00001F5F                 push    ecx
.text:00001F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F67                 mov     [ebp+var_4], ecx
.text:00001F6A                 mov     eax, [ebp+var_4]
.text:00001F6D                 mov     ecx, [ebp+arg_0]
.text:00001F70                 mov     [eax+14h], ecx
.text:00001F73                 mov     esp, ebp
.text:00001F75                 pop     ebp
.text:00001F76                 retn    4
.text:00001F76 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:00001F76
.text:00001F76 ; ---------------------------------------------------------------------------
.text:00001F79                 align 4
.text:00001F79 _text           ends
.text:00001F79
.text:00001F7C ; ===========================================================================
.text:00001F7C
.text:00001F7C ; Segment type: Pure code
.text:00001F7C ; Segment permissions: Read/Execute
.text:00001F7C _text           segment para public 'CODE' use32
.text:00001F7C                 assume cs:_text
.text:00001F7C                 ;org 1F7Ch
.text:00001F7C ; COMDAT (pick any)
.text:00001F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F7C
.text:00001F7C ; =============== S U B R O U T I N E =======================================
.text:00001F7C
.text:00001F7C ; Attributes: bp-based frame
.text:00001F7C
.text:00001F7C ; void __thiscall NCompress::NLzx::Cx86ConvertOutStream::SetStream(NCompress::NLzx::Cx86ConvertOutStream *this, struct ISequentialOutStream *)
.text:00001F7C                 public ?SetStream@Cx86ConvertOutStream@NLzx@NCompress@@QAEXPAUISequentialOutStream@@@Z
.text:00001F7C ?SetStream@Cx86ConvertOutStream@NLzx@NCompress@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00001F7C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+75p
.text:00001F7C
.text:00001F7C var_4           = dword ptr -4
.text:00001F7C arg_0           = dword ptr  8
.text:00001F7C
.text:00001F7C                 push    ebp
.text:00001F7D                 mov     ebp, esp
.text:00001F7F                 push    ecx
.text:00001F80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F87                 mov     [ebp+var_4], ecx
.text:00001F8A                 mov     eax, [ebp+var_4]
.text:00001F8D                 mov     ecx, [ebp+arg_0]
.text:00001F90                 mov     [eax+8], ecx
.text:00001F93                 mov     esp, ebp
.text:00001F95                 pop     ebp
.text:00001F96                 retn    4
.text:00001F96 ?SetStream@Cx86ConvertOutStream@NLzx@NCompress@@QAEXPAUISequentialOutStream@@@Z endp
.text:00001F96
.text:00001F96 ; ---------------------------------------------------------------------------
.text:00001F99                 align 4
.text:00001F99 _text           ends
.text:00001F99
.text:00001F9C ; ===========================================================================
.text:00001F9C
.text:00001F9C ; Segment type: Pure code
.text:00001F9C ; Segment permissions: Read/Execute
.text:00001F9C _text           segment para public 'CODE' use32
.text:00001F9C                 assume cs:_text
.text:00001F9C                 ;org 1F9Ch
.text:00001F9C ; COMDAT (pick any)
.text:00001F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F9C
.text:00001F9C ; =============== S U B R O U T I N E =======================================
.text:00001F9C
.text:00001F9C ; Attributes: bp-based frame
.text:00001F9C
.text:00001F9C ; void __thiscall NCompress::NLzx::NBitStream::CDecoder::SetStream(NCompress::NLzx::NBitStream::CDecoder *this, struct ISequentialInStream *)
.text:00001F9C                 public ?SetStream@CDecoder@NBitStream@NLzx@NCompress@@QAEXPAUISequentialInStream@@@Z
.text:00001F9C ?SetStream@CDecoder@NBitStream@NLzx@NCompress@@QAEXPAUISequentialInStream@@@Z proc near
.text:00001F9C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+63p
.text:00001F9C
.text:00001F9C var_4           = dword ptr -4
.text:00001F9C arg_0           = dword ptr  8
.text:00001F9C
.text:00001F9C                 push    ebp
.text:00001F9D                 mov     ebp, esp
.text:00001F9F                 push    ecx
.text:00001FA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FA7                 mov     [ebp+var_4], ecx
.text:00001FAA                 mov     eax, [ebp+arg_0]
.text:00001FAD                 push    eax             ; struct ISequentialInStream *
.text:00001FAE                 mov     ecx, [ebp+var_4] ; this
.text:00001FB1                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00001FB6                 add     esp, 4
.text:00001FB9                 cmp     ebp, esp
.text:00001FBB                 call    __RTC_CheckEsp
.text:00001FC0                 mov     esp, ebp
.text:00001FC2                 pop     ebp
.text:00001FC3                 retn    4
.text:00001FC3 ?SetStream@CDecoder@NBitStream@NLzx@NCompress@@QAEXPAUISequentialInStream@@@Z endp
.text:00001FC3
.text:00001FC3 ; ---------------------------------------------------------------------------
.text:00001FC6                 align 4
.text:00001FC6 _text           ends
.text:00001FC6
.text:00001FC8 ; ===========================================================================
.text:00001FC8
.text:00001FC8 ; Segment type: Pure code
.text:00001FC8 ; Segment permissions: Read/Execute
.text:00001FC8 _text           segment para public 'CODE' use32
.text:00001FC8                 assume cs:_text
.text:00001FC8                 ;org 1FC8h
.text:00001FC8 ; COMDAT (pick any)
.text:00001FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FC8
.text:00001FC8 ; =============== S U B R O U T I N E =======================================
.text:00001FC8
.text:00001FC8 ; Attributes: bp-based frame
.text:00001FC8
.text:00001FC8 ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:00001FC8                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:00001FC8 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:00001FC8                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::SetStream(ISequentialInStream *)+15p
.text:00001FC8
.text:00001FC8 var_4           = dword ptr -4
.text:00001FC8 arg_0           = dword ptr  8
.text:00001FC8
.text:00001FC8                 push    ebp
.text:00001FC9                 mov     ebp, esp
.text:00001FCB                 push    ecx
.text:00001FCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FD3                 mov     [ebp+var_4], ecx
.text:00001FD6                 mov     eax, [ebp+var_4]
.text:00001FD9                 mov     ecx, [ebp+arg_0]
.text:00001FDC                 mov     [eax+0Ch], ecx
.text:00001FDF                 mov     esp, ebp
.text:00001FE1                 pop     ebp
.text:00001FE2                 retn    4
.text:00001FE2 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00001FE2
.text:00001FE2 ; ---------------------------------------------------------------------------
.text:00001FE5                 align 4
.text:00001FE5 _text           ends
.text:00001FE5
.text:00001FE8 ; ===========================================================================
.text:00001FE8
.text:00001FE8 ; Segment type: Pure code
.text:00001FE8 ; Segment permissions: Read/Execute
.text:00001FE8 _text           segment para public 'CODE' use32
.text:00001FE8                 assume cs:_text
.text:00001FE8                 ;org 1FE8h
.text:00001FE8 ; COMDAT (pick any)
.text:00001FE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FE8
.text:00001FE8 ; =============== S U B R O U T I N E =======================================
.text:00001FE8
.text:00001FE8 ; Attributes: bp-based frame
.text:00001FE8
.text:00001FE8 ; unsigned __int64 __thiscall NCompress::NLzx::NBitStream::CDecoder::GetProcessedSize(NCompress::NLzx::NBitStream::CDecoder *__hidden this)
.text:00001FE8                 public ?GetProcessedSize@CDecoder@NBitStream@NLzx@NCompress@@QBE_KXZ
.text:00001FE8 ?GetProcessedSize@CDecoder@NBitStream@NLzx@NCompress@@QBE_KXZ proc near
.text:00001FE8                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+178p
.text:00001FE8
.text:00001FE8 var_4           = dword ptr -4
.text:00001FE8
.text:00001FE8                 push    ebp
.text:00001FE9                 mov     ebp, esp
.text:00001FEB                 push    ecx
.text:00001FEC                 push    esi
.text:00001FED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FF4                 mov     [ebp+var_4], ecx
.text:00001FF7                 mov     ecx, [ebp+var_4] ; this
.text:00001FFA                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00001FFF                 mov     ecx, [ebp+var_4]
.text:00002002                 mov     esi, 20h ; ' '
.text:00002007                 sub     esi, [ecx+2Ch]
.text:0000200A                 shr     esi, 3
.text:0000200D                 xor     ecx, ecx
.text:0000200F                 sub     eax, esi
.text:00002011                 sbb     edx, ecx
.text:00002013                 pop     esi
.text:00002014                 add     esp, 4
.text:00002017                 cmp     ebp, esp
.text:00002019                 call    __RTC_CheckEsp
.text:0000201E                 mov     esp, ebp
.text:00002020                 pop     ebp
.text:00002021                 retn
.text:00002021 ?GetProcessedSize@CDecoder@NBitStream@NLzx@NCompress@@QBE_KXZ endp
.text:00002021
.text:00002021 ; ---------------------------------------------------------------------------
.text:00002022                 align 4
.text:00002022 _text           ends
.text:00002022
.text:00002024 ; ===========================================================================
.text:00002024
.text:00002024 ; Segment type: Pure code
.text:00002024 ; Segment permissions: Read/Execute
.text:00002024 _text           segment para public 'CODE' use32
.text:00002024                 assume cs:_text
.text:00002024                 ;org 2024h
.text:00002024 ; COMDAT (pick any)
.text:00002024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002024
.text:00002024 ; =============== S U B R O U T I N E =======================================
.text:00002024
.text:00002024 ; Attributes: bp-based frame
.text:00002024
.text:00002024 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00002024                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00002024 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00002024                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::GetProcessedSize(void)+12p
.text:00002024
.text:00002024 var_4           = dword ptr -4
.text:00002024
.text:00002024                 push    ebp
.text:00002025                 mov     ebp, esp
.text:00002027                 push    ecx
.text:00002028                 push    esi
.text:00002029                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002030                 mov     [ebp+var_4], ecx
.text:00002033                 mov     eax, [ebp+var_4]
.text:00002036                 mov     ecx, [eax+20h]
.text:00002039                 xor     esi, esi
.text:0000203B                 mov     edx, [ebp+var_4]
.text:0000203E                 add     ecx, [edx+10h]
.text:00002041                 adc     esi, [edx+14h]
.text:00002044                 mov     eax, [ebp+var_4]
.text:00002047                 mov     edx, [ebp+var_4]
.text:0000204A                 mov     eax, [eax]
.text:0000204C                 sub     eax, [edx+8]
.text:0000204F                 cdq
.text:00002050                 add     ecx, eax
.text:00002052                 adc     esi, edx
.text:00002054                 mov     eax, ecx
.text:00002056                 mov     edx, esi
.text:00002058                 pop     esi
.text:00002059                 mov     esp, ebp
.text:0000205B                 pop     ebp
.text:0000205C                 retn
.text:0000205C ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:0000205C
.text:0000205C ; ---------------------------------------------------------------------------
.text:0000205D                 align 10h
.text:0000205D _text           ends
.text:0000205D
.text:00002060 ; ===========================================================================
.text:00002060
.text:00002060 ; Segment type: Pure code
.text:00002060 ; Segment permissions: Read/Execute
.text:00002060 _text           segment para public 'CODE' use32
.text:00002060                 assume cs:_text
.text:00002060                 ;org 2060h
.text:00002060 ; COMDAT (pick any)
.text:00002060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002060
.text:00002060 ; =============== S U B R O U T I N E =======================================
.text:00002060
.text:00002060 ; Attributes: bp-based frame
.text:00002060
.text:00002060 ; _DWORD __thiscall NCompress::NLzx::CDecoderFlusher::CDecoderFlusher(NCompress::NLzx::CDecoderFlusher *this, struct NCompress::NLzx::CDecoder *)
.text:00002060                 public ??0CDecoderFlusher@NLzx@NCompress@@QAE@PAVCDecoder@12@@Z
.text:00002060 ??0CDecoderFlusher@NLzx@NCompress@@QAE@PAVCDecoder@12@@Z proc near
.text:00002060                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C7p
.text:00002060
.text:00002060 var_4           = dword ptr -4
.text:00002060 arg_0           = dword ptr  8
.text:00002060
.text:00002060                 push    ebp
.text:00002061                 mov     ebp, esp
.text:00002063                 push    ecx
.text:00002064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000206B                 mov     [ebp+var_4], ecx
.text:0000206E                 mov     eax, [ebp+var_4]
.text:00002071                 mov     ecx, [ebp+arg_0]
.text:00002074                 mov     [eax], ecx
.text:00002076                 mov     edx, [ebp+var_4]
.text:00002079                 mov     byte ptr [edx+4], 1
.text:0000207D                 mov     eax, [ebp+var_4]
.text:00002080                 mov     esp, ebp
.text:00002082                 pop     ebp
.text:00002083                 retn    4
.text:00002083 ??0CDecoderFlusher@NLzx@NCompress@@QAE@PAVCDecoder@12@@Z endp
.text:00002083
.text:00002083 ; ---------------------------------------------------------------------------
.text:00002086                 align 4
.text:00002086 _text           ends
.text:00002086
.text:00002088 ; ===========================================================================
.text:00002088
.text:00002088 ; Segment type: Pure code
.text:00002088 ; Segment permissions: Read/Execute
.text:00002088 _text           segment para public 'CODE' use32
.text:00002088                 assume cs:_text
.text:00002088                 ;org 2088h
.text:00002088 ; COMDAT (pick any)
.text:00002088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002088
.text:00002088 ; =============== S U B R O U T I N E =======================================
.text:00002088
.text:00002088 ; Attributes: bp-based frame
.text:00002088
.text:00002088 ; _DWORD __thiscall NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(NCompress::NLzx::CDecoderFlusher *__hidden this)
.text:00002088                 public ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ
.text:00002088 ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ proc near
.text:00002088                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+15Fp
.text:00002088                                         ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1D2p ...
.text:00002088
.text:00002088 var_4           = dword ptr -4
.text:00002088
.text:00002088                 push    ebp
.text:00002089                 mov     ebp, esp
.text:0000208B                 push    ecx
.text:0000208C                 push    esi
.text:0000208D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002094                 mov     [ebp+var_4], ecx
.text:00002097                 mov     eax, [ebp+var_4]
.text:0000209A                 movzx   ecx, byte ptr [eax+4]
.text:0000209E                 test    ecx, ecx
.text:000020A0                 jz      short loc_20BD
.text:000020A2                 mov     edx, [ebp+var_4]
.text:000020A5                 mov     eax, [edx]
.text:000020A7                 mov     ecx, [ebp+var_4]
.text:000020AA                 mov     edx, [ecx]
.text:000020AC                 mov     eax, [eax]
.text:000020AE                 mov     esi, esp
.text:000020B0                 push    edx
.text:000020B1                 mov     ecx, [eax+10h]
.text:000020B4                 call    ecx
.text:000020B6                 cmp     esi, esp
.text:000020B8                 call    __RTC_CheckEsp
.text:000020BD
.text:000020BD loc_20BD:                               ; CODE XREF: NCompress::NLzx::CDecoderFlusher::~CDecoderFlusher(void)+18j
.text:000020BD                 pop     esi
.text:000020BE                 add     esp, 4
.text:000020C1                 cmp     ebp, esp
.text:000020C3                 call    __RTC_CheckEsp
.text:000020C8                 mov     esp, ebp
.text:000020CA                 pop     ebp
.text:000020CB                 retn
.text:000020CB ??1CDecoderFlusher@NLzx@NCompress@@QAE@XZ endp
.text:000020CB
.text:000020CB _text           ends
.text:000020CB
.data:000020CC ; ===========================================================================
.data:000020CC
.data:000020CC ; Segment type: Pure data
.data:000020CC ; Segment permissions: Read/Write
.data:000020CC _data           segment dword public 'DATA' use32
.data:000020CC                 assume cs:_data
.data:000020CC                 ;org 20CCh
.data:000020CC ; COMDAT (pick any)
.data:000020CC                 public ??_R0?AUCOutBufferException@@@8
.data:000020CC ; struct COutBufferException `RTTI Type Descriptor'
.data:000020CC ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:000020CC                                         ; DATA XREF: .xdata$x:00001208o
.data:000020CC                                         ; const type_info::`vftable'
.data:000020D0                 db    0
.data:000020D1                 db    0
.data:000020D2                 db    0
.data:000020D3                 db    0
.data:000020D4                 db  2Eh ; .
.data:000020D5                 db  3Fh ; ?
.data:000020D6                 db  41h ; A
.data:000020D7                 db  55h ; U
.data:000020D8                 db  43h ; C
.data:000020D9                 db  4Fh ; O
.data:000020DA                 db  75h ; u
.data:000020DB                 db  74h ; t
.data:000020DC                 db  42h ; B
.data:000020DD                 db  75h ; u
.data:000020DE                 db  66h ; f
.data:000020DF                 db  66h ; f
.data:000020E0                 db  65h ; e
.data:000020E1                 db  72h ; r
.data:000020E2                 db  45h ; E
.data:000020E3                 db  78h ; x
.data:000020E4                 db  63h ; c
.data:000020E5                 db  65h ; e
.data:000020E6                 db  70h ; p
.data:000020E7                 db  74h ; t
.data:000020E8                 db  69h ; i
.data:000020E9                 db  6Fh ; o
.data:000020EA                 db  6Eh ; n
.data:000020EB                 db  40h ; @
.data:000020EC                 db  40h ; @
.data:000020ED                 db    0
.data:000020EE                 align 10h
.data:000020EE _data           ends
.data:000020EE
.text:000020F0 ; ===========================================================================
.text:000020F0
.text:000020F0 ; Segment type: Pure code
.text:000020F0 ; Segment permissions: Read/Execute
.text:000020F0 _text           segment para public 'CODE' use32
.text:000020F0                 assume cs:_text
.text:000020F0                 ;org 20F0h
.text:000020F0 ; COMDAT (pick any)
.text:000020F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020F0
.text:000020F0 ; =============== S U B R O U T I N E =======================================
.text:000020F0
.text:000020F0 ; Attributes: bp-based frame
.text:000020F0
.text:000020F0 ; bool __thiscall NCompress::NLzx::NBitStream::CDecoder::Create(NCompress::NLzx::NBitStream::CDecoder *this, unsigned int)
.text:000020F0                 public ?Create@CDecoder@NBitStream@NLzx@NCompress@@QAE_NI@Z
.text:000020F0 ?Create@CDecoder@NBitStream@NLzx@NCompress@@QAE_NI@Z proc near
.text:000020F0                                         ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+85p
.text:000020F0
.text:000020F0 var_4           = dword ptr -4
.text:000020F0 arg_0           = dword ptr  8
.text:000020F0
.text:000020F0                 push    ebp
.text:000020F1                 mov     ebp, esp
.text:000020F3                 push    ecx
.text:000020F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020FB                 mov     [ebp+var_4], ecx
.text:000020FE                 mov     eax, [ebp+arg_0]
.text:00002101                 push    eax             ; unsigned int
.text:00002102                 mov     ecx, [ebp+var_4] ; this
.text:00002105                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:0000210A                 add     esp, 4
.text:0000210D                 cmp     ebp, esp
.text:0000210F                 call    __RTC_CheckEsp
.text:00002114                 mov     esp, ebp
.text:00002116                 pop     ebp
.text:00002117                 retn    4
.text:00002117 ?Create@CDecoder@NBitStream@NLzx@NCompress@@QAE_NI@Z endp
.text:00002117
.text:00002117 ; ---------------------------------------------------------------------------
.text:0000211A                 align 4
.text:0000211A _text           ends
.text:0000211A
.text:0000211C ; ===========================================================================
.text:0000211C
.text:0000211C ; Segment type: Pure code
.text:0000211C ; Segment permissions: Read/Execute
.text:0000211C _text           segment para public 'CODE' use32
.text:0000211C                 assume cs:_text
.text:0000211C                 ;org 211Ch
.text:0000211C ; COMDAT (pick any)
.text:0000211C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000211C
.text:0000211C ; =============== S U B R O U T I N E =======================================
.text:0000211C
.text:0000211C ; Attributes: bp-based frame
.text:0000211C
.text:0000211C ; public: bool __thiscall NCompress::NHuffman::CDecoder<16, 656>::SetCodeLengths(unsigned char const *)
.text:0000211C                 public ?SetCodeLengths@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAE_NPBE@Z
.text:0000211C ?SetCodeLengths@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:0000211C                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+32Dp
.text:0000211C
.text:0000211C var_C4          = dword ptr -0C4h
.text:0000211C var_C0          = dword ptr -0C0h
.text:0000211C var_BC          = dword ptr -0BCh
.text:0000211C var_B8          = dword ptr -0B8h
.text:0000211C var_B4          = dword ptr -0B4h
.text:0000211C var_B0          = dword ptr -0B0h
.text:0000211C var_AC          = dword ptr -0ACh
.text:0000211C var_A8          = dword ptr -0A8h
.text:0000211C var_A4          = dword ptr -0A4h
.text:0000211C var_9C          = dword ptr -9Ch
.text:0000211C var_54          = dword ptr -54h
.text:0000211C var_50          = dword ptr -50h
.text:0000211C var_8           = dword ptr -8
.text:0000211C var_4           = dword ptr -4
.text:0000211C arg_0           = dword ptr  8
.text:0000211C
.text:0000211C                 push    ebp
.text:0000211D                 mov     ebp, esp
.text:0000211F                 sub     esp, 0C4h
.text:00002125                 push    edi
.text:00002126                 push    ecx
.text:00002127                 lea     edi, [ebp+var_C4]
.text:0000212D                 mov     ecx, 31h ; '1'
.text:00002132                 mov     eax, 0CCCCCCCCh
.text:00002137                 rep stosd
.text:00002139                 pop     ecx
.text:0000213A                 mov     eax, dword ptr ds:___security_cookie
.text:0000213F                 xor     eax, ebp
.text:00002141                 mov     [ebp+var_4], eax
.text:00002144                 mov     [ebp+var_8], ecx
.text:00002147                 mov     [ebp+var_A4], 1
.text:00002151                 jmp     short loc_2162
.text:00002153 ; ---------------------------------------------------------------------------
.text:00002153
.text:00002153 loc_2153:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+5Dj
.text:00002153                 mov     eax, [ebp+var_A4]
.text:00002159                 add     eax, 1
.text:0000215C                 mov     [ebp+var_A4], eax
.text:00002162
.text:00002162 loc_2162:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+35j
.text:00002162                 cmp     [ebp+var_A4], 10h
.text:00002169                 ja      short loc_217B
.text:0000216B                 mov     ecx, [ebp+var_A4]
.text:00002171                 mov     [ebp+ecx*4+var_50], 0
.text:00002179                 jmp     short loc_2153
.text:0000217B ; ---------------------------------------------------------------------------
.text:0000217B
.text:0000217B loc_217B:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+4Dj
.text:0000217B                 mov     [ebp+var_A8], 0
.text:00002185                 jmp     short loc_2196
.text:00002187 ; ---------------------------------------------------------------------------
.text:00002187
.text:00002187 loc_2187:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+D3j
.text:00002187                 mov     edx, [ebp+var_A8]
.text:0000218D                 add     edx, 1
.text:00002190                 mov     [ebp+var_A8], edx
.text:00002196
.text:00002196 loc_2196:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+69j
.text:00002196                 cmp     [ebp+var_A8], 290h
.text:000021A0                 jnb     short loc_21F1
.text:000021A2                 mov     eax, [ebp+arg_0]
.text:000021A5                 add     eax, [ebp+var_A8]
.text:000021AB                 movzx   ecx, byte ptr [eax]
.text:000021AE                 mov     [ebp+var_AC], ecx
.text:000021B4                 cmp     [ebp+var_AC], 10h
.text:000021BB                 jbe     short loc_21C4
.text:000021BD                 xor     al, al
.text:000021BF                 jmp     loc_23D1
.text:000021C4 ; ---------------------------------------------------------------------------
.text:000021C4
.text:000021C4 loc_21C4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+9Fj
.text:000021C4                 mov     edx, [ebp+var_AC]
.text:000021CA                 mov     eax, [ebp+edx*4+var_50]
.text:000021CE                 add     eax, 1
.text:000021D1                 mov     ecx, [ebp+var_AC]
.text:000021D7                 mov     [ebp+ecx*4+var_50], eax
.text:000021DB                 mov     edx, [ebp+var_A8]
.text:000021E1                 mov     eax, [ebp+var_8]
.text:000021E4                 mov     dword ptr [eax+edx*4+88h], 0FFFFFFFFh
.text:000021EF                 jmp     short loc_2187
.text:000021F1 ; ---------------------------------------------------------------------------
.text:000021F1
.text:000021F1 loc_21F1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+84j
.text:000021F1                 mov     [ebp+var_50], 0
.text:000021F8                 mov     ecx, [ebp+var_8]
.text:000021FB                 mov     dword ptr [ecx], 0
.text:00002201                 mov     edx, [ebp+var_8]
.text:00002204                 mov     dword ptr [edx+44h], 0
.text:0000220B                 mov     [ebp+var_B0], 0
.text:00002215                 mov     [ebp+var_B4], 0
.text:0000221F                 mov     [ebp+var_B8], 10000h
.text:00002229                 mov     [ebp+var_A4], 1
.text:00002233                 jmp     short loc_2244
.text:00002235 ; ---------------------------------------------------------------------------
.text:00002235
.text:00002235 loc_2235:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *):loc_234Cj
.text:00002235                 mov     eax, [ebp+var_A4]
.text:0000223B                 add     eax, 1
.text:0000223E                 mov     [ebp+var_A4], eax
.text:00002244
.text:00002244 loc_2244:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+117j
.text:00002244                 cmp     [ebp+var_A4], 10h
.text:0000224B                 ja      loc_2351
.text:00002251                 mov     ecx, 10h
.text:00002256                 sub     ecx, [ebp+var_A4]
.text:0000225C                 mov     edx, [ebp+var_A4]
.text:00002262                 mov     eax, [ebp+edx*4+var_50]
.text:00002266                 shl     eax, cl
.text:00002268                 add     eax, [ebp+var_B0]
.text:0000226E                 mov     [ebp+var_B0], eax
.text:00002274                 cmp     [ebp+var_B0], 10000h
.text:0000227E                 jbe     short loc_2287
.text:00002280                 xor     al, al
.text:00002282                 jmp     loc_23D1
.text:00002287 ; ---------------------------------------------------------------------------
.text:00002287
.text:00002287 loc_2287:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+162j
.text:00002287                 cmp     [ebp+var_A4], 10h
.text:0000228E                 jnz     short loc_229C
.text:00002290                 mov     [ebp+var_C4], 10000h
.text:0000229A                 jmp     short loc_22A8
.text:0000229C ; ---------------------------------------------------------------------------
.text:0000229C
.text:0000229C loc_229C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+172j
.text:0000229C                 mov     ecx, [ebp+var_B0]
.text:000022A2                 mov     [ebp+var_C4], ecx
.text:000022A8
.text:000022A8 loc_22A8:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+17Ej
.text:000022A8                 mov     edx, [ebp+var_A4]
.text:000022AE                 mov     eax, [ebp+var_8]
.text:000022B1                 mov     ecx, [ebp+var_C4]
.text:000022B7                 mov     [eax+edx*4], ecx
.text:000022BA                 mov     edx, [ebp+var_A4]
.text:000022C0                 mov     eax, [ebp+var_8]
.text:000022C3                 mov     ecx, [eax+edx*4+40h]
.text:000022C7                 mov     edx, [ebp+var_A4]
.text:000022CD                 add     ecx, [ebp+edx*4+var_54]
.text:000022D1                 mov     eax, [ebp+var_A4]
.text:000022D7                 mov     edx, [ebp+var_8]
.text:000022DA                 mov     [edx+eax*4+44h], ecx
.text:000022DE                 mov     eax, [ebp+var_A4]
.text:000022E4                 mov     ecx, [ebp+var_A4]
.text:000022EA                 mov     edx, [ebp+var_8]
.text:000022ED                 mov     ecx, [edx+ecx*4+44h]
.text:000022F1                 mov     [ebp+eax*4+var_9C], ecx
.text:000022F8                 cmp     [ebp+var_A4], 9
.text:000022FF                 ja      short loc_234C
.text:00002301                 mov     edx, [ebp+var_A4]
.text:00002307                 mov     eax, [ebp+var_8]
.text:0000230A                 mov     ecx, [eax+edx*4]
.text:0000230D                 shr     ecx, 7
.text:00002310                 mov     [ebp+var_BC], ecx
.text:00002316                 jmp     short loc_2327
.text:00002318 ; ---------------------------------------------------------------------------
.text:00002318
.text:00002318 loc_2318:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+22Ej
.text:00002318                 mov     edx, [ebp+var_B4]
.text:0000231E                 add     edx, 1
.text:00002321                 mov     [ebp+var_B4], edx
.text:00002327
.text:00002327 loc_2327:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+1FAj
.text:00002327                 mov     eax, [ebp+var_B4]
.text:0000232D                 cmp     eax, [ebp+var_BC]
.text:00002333                 jnb     short loc_234C
.text:00002335                 mov     ecx, [ebp+var_8]
.text:00002338                 add     ecx, [ebp+var_B4]
.text:0000233E                 mov     dl, byte ptr [ebp+var_A4]
.text:00002344                 mov     [ecx+0AC8h], dl
.text:0000234A                 jmp     short loc_2318
.text:0000234C ; ---------------------------------------------------------------------------
.text:0000234C
.text:0000234C loc_234C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+1E3j
.text:0000234C                                         ; NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+217j
.text:0000234C                 jmp     loc_2235
.text:00002351 ; ---------------------------------------------------------------------------
.text:00002351
.text:00002351 loc_2351:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+12Fj
.text:00002351                 mov     [ebp+var_A8], 0
.text:0000235B                 jmp     short loc_236C
.text:0000235D ; ---------------------------------------------------------------------------
.text:0000235D
.text:0000235D loc_235D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *):loc_23CDj
.text:0000235D                 mov     eax, [ebp+var_A8]
.text:00002363                 add     eax, 1
.text:00002366                 mov     [ebp+var_A8], eax
.text:0000236C
.text:0000236C loc_236C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+23Fj
.text:0000236C                 cmp     [ebp+var_A8], 290h
.text:00002376                 jnb     short loc_23CF
.text:00002378                 mov     ecx, [ebp+arg_0]
.text:0000237B                 add     ecx, [ebp+var_A8]
.text:00002381                 movzx   edx, byte ptr [ecx]
.text:00002384                 mov     [ebp+var_C0], edx
.text:0000238A                 cmp     [ebp+var_C0], 0
.text:00002391                 jz      short loc_23CD
.text:00002393                 mov     eax, [ebp+var_C0]
.text:00002399                 mov     ecx, [ebp+eax*4+var_9C]
.text:000023A0                 mov     edx, [ebp+var_8]
.text:000023A3                 mov     eax, [ebp+var_A8]
.text:000023A9                 mov     [edx+ecx*4+88h], eax
.text:000023B0                 mov     ecx, [ebp+var_C0]
.text:000023B6                 mov     edx, [ebp+ecx*4+var_9C]
.text:000023BD                 add     edx, 1
.text:000023C0                 mov     eax, [ebp+var_C0]
.text:000023C6                 mov     [ebp+eax*4+var_9C], edx
.text:000023CD
.text:000023CD loc_23CD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+275j
.text:000023CD                 jmp     short loc_235D
.text:000023CF ; ---------------------------------------------------------------------------
.text:000023CF
.text:000023CF loc_23CF:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+25Aj
.text:000023CF                 mov     al, 1
.text:000023D1
.text:000023D1 loc_23D1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+A3j
.text:000023D1                                         ; NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+166j
.text:000023D1                 push    edx
.text:000023D2                 mov     ecx, ebp
.text:000023D4                 push    eax
.text:000023D5                 lea     edx, $LN27
.text:000023DB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000023E0                 pop     eax
.text:000023E1                 pop     edx
.text:000023E2                 pop     edi
.text:000023E3                 mov     ecx, [ebp+var_4]
.text:000023E6                 xor     ecx, ebp
.text:000023E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000023ED                 mov     esp, ebp
.text:000023EF                 pop     ebp
.text:000023F0                 retn    4
.text:000023F0 ?SetCodeLengths@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:000023F0
.text:000023F0 ; ---------------------------------------------------------------------------
.text:000023F3                 align 4
.text:000023F4 $LN27           dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<16,656>::SetCodeLengths(uchar const *)+2B9o
.text:000023F8                 dd offset $LN26
.text:000023FC $LN26           dd 0FFFFFFB0h, 44h      ; DATA XREF: .text:000023F8o
.text:00002404                 dd offset $LN24         ; "lenCounts"
.text:00002408                 dd 0FFFFFF64h, 44h
.text:00002410                 dd offset $LN25         ; "tmpPositions"
.text:00002414 $LN25           db 'tmpPositions',0     ; DATA XREF: .text:00002410o
.text:00002421 $LN24           db 'lenCounts',0        ; DATA XREF: .text:00002404o
.text:0000242B                 align 4
.text:0000242B _text           ends
.text:0000242B
.text:0000242C ; ===========================================================================
.text:0000242C
.text:0000242C ; Segment type: Pure code
.text:0000242C ; Segment permissions: Read/Execute
.text:0000242C _text           segment para public 'CODE' use32
.text:0000242C                 assume cs:_text
.text:0000242C                 ;org 242Ch
.text:0000242C ; COMDAT (pick any)
.text:0000242C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000242C
.text:0000242C ; =============== S U B R O U T I N E =======================================
.text:0000242C
.text:0000242C ; Attributes: bp-based frame
.text:0000242C
.text:0000242C ; public: bool __thiscall NCompress::NHuffman::CDecoder<16, 249>::SetCodeLengths(unsigned char const *)
.text:0000242C                 public ?SetCodeLengths@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAE_NPBE@Z
.text:0000242C ?SetCodeLengths@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:0000242C                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+376p
.text:0000242C
.text:0000242C var_C4          = dword ptr -0C4h
.text:0000242C var_C0          = dword ptr -0C0h
.text:0000242C var_BC          = dword ptr -0BCh
.text:0000242C var_B8          = dword ptr -0B8h
.text:0000242C var_B4          = dword ptr -0B4h
.text:0000242C var_B0          = dword ptr -0B0h
.text:0000242C var_AC          = dword ptr -0ACh
.text:0000242C var_A8          = dword ptr -0A8h
.text:0000242C var_A4          = dword ptr -0A4h
.text:0000242C var_9C          = dword ptr -9Ch
.text:0000242C var_54          = dword ptr -54h
.text:0000242C var_50          = dword ptr -50h
.text:0000242C var_8           = dword ptr -8
.text:0000242C var_4           = dword ptr -4
.text:0000242C arg_0           = dword ptr  8
.text:0000242C
.text:0000242C                 push    ebp
.text:0000242D                 mov     ebp, esp
.text:0000242F                 sub     esp, 0C4h
.text:00002435                 push    edi
.text:00002436                 push    ecx
.text:00002437                 lea     edi, [ebp+var_C4]
.text:0000243D                 mov     ecx, 31h ; '1'
.text:00002442                 mov     eax, 0CCCCCCCCh
.text:00002447                 rep stosd
.text:00002449                 pop     ecx
.text:0000244A                 mov     eax, dword ptr ds:___security_cookie
.text:0000244F                 xor     eax, ebp
.text:00002451                 mov     [ebp+var_4], eax
.text:00002454                 mov     [ebp+var_8], ecx
.text:00002457                 mov     [ebp+var_A4], 1
.text:00002461                 jmp     short loc_2472
.text:00002463 ; ---------------------------------------------------------------------------
.text:00002463
.text:00002463 loc_2463:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+5Dj
.text:00002463                 mov     eax, [ebp+var_A4]
.text:00002469                 add     eax, 1
.text:0000246C                 mov     [ebp+var_A4], eax
.text:00002472
.text:00002472 loc_2472:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+35j
.text:00002472                 cmp     [ebp+var_A4], 10h
.text:00002479                 ja      short loc_248B
.text:0000247B                 mov     ecx, [ebp+var_A4]
.text:00002481                 mov     [ebp+ecx*4+var_50], 0
.text:00002489                 jmp     short loc_2463
.text:0000248B ; ---------------------------------------------------------------------------
.text:0000248B
.text:0000248B loc_248B:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+4Dj
.text:0000248B                 mov     [ebp+var_A8], 0
.text:00002495                 jmp     short loc_24A6
.text:00002497 ; ---------------------------------------------------------------------------
.text:00002497
.text:00002497 loc_2497:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+D3j
.text:00002497                 mov     edx, [ebp+var_A8]
.text:0000249D                 add     edx, 1
.text:000024A0                 mov     [ebp+var_A8], edx
.text:000024A6
.text:000024A6 loc_24A6:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+69j
.text:000024A6                 cmp     [ebp+var_A8], 0F9h ; '·'
.text:000024B0                 jnb     short loc_2501
.text:000024B2                 mov     eax, [ebp+arg_0]
.text:000024B5                 add     eax, [ebp+var_A8]
.text:000024BB                 movzx   ecx, byte ptr [eax]
.text:000024BE                 mov     [ebp+var_AC], ecx
.text:000024C4                 cmp     [ebp+var_AC], 10h
.text:000024CB                 jbe     short loc_24D4
.text:000024CD                 xor     al, al
.text:000024CF                 jmp     loc_26E1
.text:000024D4 ; ---------------------------------------------------------------------------
.text:000024D4
.text:000024D4 loc_24D4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+9Fj
.text:000024D4                 mov     edx, [ebp+var_AC]
.text:000024DA                 mov     eax, [ebp+edx*4+var_50]
.text:000024DE                 add     eax, 1
.text:000024E1                 mov     ecx, [ebp+var_AC]
.text:000024E7                 mov     [ebp+ecx*4+var_50], eax
.text:000024EB                 mov     edx, [ebp+var_A8]
.text:000024F1                 mov     eax, [ebp+var_8]
.text:000024F4                 mov     dword ptr [eax+edx*4+88h], 0FFFFFFFFh
.text:000024FF                 jmp     short loc_2497
.text:00002501 ; ---------------------------------------------------------------------------
.text:00002501
.text:00002501 loc_2501:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+84j
.text:00002501                 mov     [ebp+var_50], 0
.text:00002508                 mov     ecx, [ebp+var_8]
.text:0000250B                 mov     dword ptr [ecx], 0
.text:00002511                 mov     edx, [ebp+var_8]
.text:00002514                 mov     dword ptr [edx+44h], 0
.text:0000251B                 mov     [ebp+var_B0], 0
.text:00002525                 mov     [ebp+var_B4], 0
.text:0000252F                 mov     [ebp+var_B8], 10000h
.text:00002539                 mov     [ebp+var_A4], 1
.text:00002543                 jmp     short loc_2554
.text:00002545 ; ---------------------------------------------------------------------------
.text:00002545
.text:00002545 loc_2545:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *):loc_265Cj
.text:00002545                 mov     eax, [ebp+var_A4]
.text:0000254B                 add     eax, 1
.text:0000254E                 mov     [ebp+var_A4], eax
.text:00002554
.text:00002554 loc_2554:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+117j
.text:00002554                 cmp     [ebp+var_A4], 10h
.text:0000255B                 ja      loc_2661
.text:00002561                 mov     ecx, 10h
.text:00002566                 sub     ecx, [ebp+var_A4]
.text:0000256C                 mov     edx, [ebp+var_A4]
.text:00002572                 mov     eax, [ebp+edx*4+var_50]
.text:00002576                 shl     eax, cl
.text:00002578                 add     eax, [ebp+var_B0]
.text:0000257E                 mov     [ebp+var_B0], eax
.text:00002584                 cmp     [ebp+var_B0], 10000h
.text:0000258E                 jbe     short loc_2597
.text:00002590                 xor     al, al
.text:00002592                 jmp     loc_26E1
.text:00002597 ; ---------------------------------------------------------------------------
.text:00002597
.text:00002597 loc_2597:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+162j
.text:00002597                 cmp     [ebp+var_A4], 10h
.text:0000259E                 jnz     short loc_25AC
.text:000025A0                 mov     [ebp+var_C4], 10000h
.text:000025AA                 jmp     short loc_25B8
.text:000025AC ; ---------------------------------------------------------------------------
.text:000025AC
.text:000025AC loc_25AC:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+172j
.text:000025AC                 mov     ecx, [ebp+var_B0]
.text:000025B2                 mov     [ebp+var_C4], ecx
.text:000025B8
.text:000025B8 loc_25B8:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+17Ej
.text:000025B8                 mov     edx, [ebp+var_A4]
.text:000025BE                 mov     eax, [ebp+var_8]
.text:000025C1                 mov     ecx, [ebp+var_C4]
.text:000025C7                 mov     [eax+edx*4], ecx
.text:000025CA                 mov     edx, [ebp+var_A4]
.text:000025D0                 mov     eax, [ebp+var_8]
.text:000025D3                 mov     ecx, [eax+edx*4+40h]
.text:000025D7                 mov     edx, [ebp+var_A4]
.text:000025DD                 add     ecx, [ebp+edx*4+var_54]
.text:000025E1                 mov     eax, [ebp+var_A4]
.text:000025E7                 mov     edx, [ebp+var_8]
.text:000025EA                 mov     [edx+eax*4+44h], ecx
.text:000025EE                 mov     eax, [ebp+var_A4]
.text:000025F4                 mov     ecx, [ebp+var_A4]
.text:000025FA                 mov     edx, [ebp+var_8]
.text:000025FD                 mov     ecx, [edx+ecx*4+44h]
.text:00002601                 mov     [ebp+eax*4+var_9C], ecx
.text:00002608                 cmp     [ebp+var_A4], 9
.text:0000260F                 ja      short loc_265C
.text:00002611                 mov     edx, [ebp+var_A4]
.text:00002617                 mov     eax, [ebp+var_8]
.text:0000261A                 mov     ecx, [eax+edx*4]
.text:0000261D                 shr     ecx, 7
.text:00002620                 mov     [ebp+var_BC], ecx
.text:00002626                 jmp     short loc_2637
.text:00002628 ; ---------------------------------------------------------------------------
.text:00002628
.text:00002628 loc_2628:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+22Ej
.text:00002628                 mov     edx, [ebp+var_B4]
.text:0000262E                 add     edx, 1
.text:00002631                 mov     [ebp+var_B4], edx
.text:00002637
.text:00002637 loc_2637:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+1FAj
.text:00002637                 mov     eax, [ebp+var_B4]
.text:0000263D                 cmp     eax, [ebp+var_BC]
.text:00002643                 jnb     short loc_265C
.text:00002645                 mov     ecx, [ebp+var_8]
.text:00002648                 add     ecx, [ebp+var_B4]
.text:0000264E                 mov     dl, byte ptr [ebp+var_A4]
.text:00002654                 mov     [ecx+46Ch], dl
.text:0000265A                 jmp     short loc_2628
.text:0000265C ; ---------------------------------------------------------------------------
.text:0000265C
.text:0000265C loc_265C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+1E3j
.text:0000265C                                         ; NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+217j
.text:0000265C                 jmp     loc_2545
.text:00002661 ; ---------------------------------------------------------------------------
.text:00002661
.text:00002661 loc_2661:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+12Fj
.text:00002661                 mov     [ebp+var_A8], 0
.text:0000266B                 jmp     short loc_267C
.text:0000266D ; ---------------------------------------------------------------------------
.text:0000266D
.text:0000266D loc_266D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *):loc_26DDj
.text:0000266D                 mov     eax, [ebp+var_A8]
.text:00002673                 add     eax, 1
.text:00002676                 mov     [ebp+var_A8], eax
.text:0000267C
.text:0000267C loc_267C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+23Fj
.text:0000267C                 cmp     [ebp+var_A8], 0F9h ; '·'
.text:00002686                 jnb     short loc_26DF
.text:00002688                 mov     ecx, [ebp+arg_0]
.text:0000268B                 add     ecx, [ebp+var_A8]
.text:00002691                 movzx   edx, byte ptr [ecx]
.text:00002694                 mov     [ebp+var_C0], edx
.text:0000269A                 cmp     [ebp+var_C0], 0
.text:000026A1                 jz      short loc_26DD
.text:000026A3                 mov     eax, [ebp+var_C0]
.text:000026A9                 mov     ecx, [ebp+eax*4+var_9C]
.text:000026B0                 mov     edx, [ebp+var_8]
.text:000026B3                 mov     eax, [ebp+var_A8]
.text:000026B9                 mov     [edx+ecx*4+88h], eax
.text:000026C0                 mov     ecx, [ebp+var_C0]
.text:000026C6                 mov     edx, [ebp+ecx*4+var_9C]
.text:000026CD                 add     edx, 1
.text:000026D0                 mov     eax, [ebp+var_C0]
.text:000026D6                 mov     [ebp+eax*4+var_9C], edx
.text:000026DD
.text:000026DD loc_26DD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+275j
.text:000026DD                 jmp     short loc_266D
.text:000026DF ; ---------------------------------------------------------------------------
.text:000026DF
.text:000026DF loc_26DF:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+25Aj
.text:000026DF                 mov     al, 1
.text:000026E1
.text:000026E1 loc_26E1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+A3j
.text:000026E1                                         ; NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+166j
.text:000026E1                 push    edx
.text:000026E2                 mov     ecx, ebp
.text:000026E4                 push    eax
.text:000026E5                 lea     edx, $LN27_0
.text:000026EB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000026F0                 pop     eax
.text:000026F1                 pop     edx
.text:000026F2                 pop     edi
.text:000026F3                 mov     ecx, [ebp+var_4]
.text:000026F6                 xor     ecx, ebp
.text:000026F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000026FD                 mov     esp, ebp
.text:000026FF                 pop     ebp
.text:00002700                 retn    4
.text:00002700 ?SetCodeLengths@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:00002700
.text:00002700 ; ---------------------------------------------------------------------------
.text:00002703                 align 4
.text:00002704 $LN27_0         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<16,249>::SetCodeLengths(uchar const *)+2B9o
.text:00002708                 dd offset $LN26_0
.text:0000270C $LN26_0         dd 0FFFFFFB0h, 44h      ; DATA XREF: .text:00002708o
.text:00002714                 dd offset $LN24_0       ; "lenCounts"
.text:00002718                 dd 0FFFFFF64h, 44h
.text:00002720                 dd offset $LN25_0       ; "tmpPositions"
.text:00002724 $LN25_0         db 'tmpPositions',0     ; DATA XREF: .text:00002720o
.text:00002731 $LN24_0         db 'lenCounts',0        ; DATA XREF: .text:00002714o
.text:0000273B                 align 4
.text:0000273B _text           ends
.text:0000273B
.text:0000273C ; ===========================================================================
.text:0000273C
.text:0000273C ; Segment type: Pure code
.text:0000273C ; Segment permissions: Read/Execute
.text:0000273C _text           segment para public 'CODE' use32
.text:0000273C                 assume cs:_text
.text:0000273C                 ;org 273Ch
.text:0000273C ; COMDAT (pick any)
.text:0000273C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000273C
.text:0000273C ; =============== S U B R O U T I N E =======================================
.text:0000273C
.text:0000273C ; Attributes: bp-based frame
.text:0000273C
.text:0000273C ; public: bool __thiscall NCompress::NHuffman::CDecoder<16, 8>::SetCodeLengths(unsigned char const *)
.text:0000273C                 public ?SetCodeLengths@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAE_NPBE@Z
.text:0000273C ?SetCodeLengths@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:0000273C                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTables(void)+274p
.text:0000273C
.text:0000273C var_C4          = dword ptr -0C4h
.text:0000273C var_C0          = dword ptr -0C0h
.text:0000273C var_BC          = dword ptr -0BCh
.text:0000273C var_B8          = dword ptr -0B8h
.text:0000273C var_B4          = dword ptr -0B4h
.text:0000273C var_B0          = dword ptr -0B0h
.text:0000273C var_AC          = dword ptr -0ACh
.text:0000273C var_A8          = dword ptr -0A8h
.text:0000273C var_A4          = dword ptr -0A4h
.text:0000273C var_9C          = dword ptr -9Ch
.text:0000273C var_54          = dword ptr -54h
.text:0000273C var_50          = dword ptr -50h
.text:0000273C var_8           = dword ptr -8
.text:0000273C var_4           = dword ptr -4
.text:0000273C arg_0           = dword ptr  8
.text:0000273C
.text:0000273C                 push    ebp
.text:0000273D                 mov     ebp, esp
.text:0000273F                 sub     esp, 0C4h
.text:00002745                 push    edi
.text:00002746                 push    ecx
.text:00002747                 lea     edi, [ebp+var_C4]
.text:0000274D                 mov     ecx, 31h ; '1'
.text:00002752                 mov     eax, 0CCCCCCCCh
.text:00002757                 rep stosd
.text:00002759                 pop     ecx
.text:0000275A                 mov     eax, dword ptr ds:___security_cookie
.text:0000275F                 xor     eax, ebp
.text:00002761                 mov     [ebp+var_4], eax
.text:00002764                 mov     [ebp+var_8], ecx
.text:00002767                 mov     [ebp+var_A4], 1
.text:00002771                 jmp     short loc_2782
.text:00002773 ; ---------------------------------------------------------------------------
.text:00002773
.text:00002773 loc_2773:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+5Dj
.text:00002773                 mov     eax, [ebp+var_A4]
.text:00002779                 add     eax, 1
.text:0000277C                 mov     [ebp+var_A4], eax
.text:00002782
.text:00002782 loc_2782:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+35j
.text:00002782                 cmp     [ebp+var_A4], 10h
.text:00002789                 ja      short loc_279B
.text:0000278B                 mov     ecx, [ebp+var_A4]
.text:00002791                 mov     [ebp+ecx*4+var_50], 0
.text:00002799                 jmp     short loc_2773
.text:0000279B ; ---------------------------------------------------------------------------
.text:0000279B
.text:0000279B loc_279B:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+4Dj
.text:0000279B                 mov     [ebp+var_A8], 0
.text:000027A5                 jmp     short loc_27B6
.text:000027A7 ; ---------------------------------------------------------------------------
.text:000027A7
.text:000027A7 loc_27A7:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+D0j
.text:000027A7                 mov     edx, [ebp+var_A8]
.text:000027AD                 add     edx, 1
.text:000027B0                 mov     [ebp+var_A8], edx
.text:000027B6
.text:000027B6 loc_27B6:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+69j
.text:000027B6                 cmp     [ebp+var_A8], 8
.text:000027BD                 jnb     short loc_280E
.text:000027BF                 mov     eax, [ebp+arg_0]
.text:000027C2                 add     eax, [ebp+var_A8]
.text:000027C8                 movzx   ecx, byte ptr [eax]
.text:000027CB                 mov     [ebp+var_AC], ecx
.text:000027D1                 cmp     [ebp+var_AC], 10h
.text:000027D8                 jbe     short loc_27E1
.text:000027DA                 xor     al, al
.text:000027DC                 jmp     loc_29EB
.text:000027E1 ; ---------------------------------------------------------------------------
.text:000027E1
.text:000027E1 loc_27E1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+9Cj
.text:000027E1                 mov     edx, [ebp+var_AC]
.text:000027E7                 mov     eax, [ebp+edx*4+var_50]
.text:000027EB                 add     eax, 1
.text:000027EE                 mov     ecx, [ebp+var_AC]
.text:000027F4                 mov     [ebp+ecx*4+var_50], eax
.text:000027F8                 mov     edx, [ebp+var_A8]
.text:000027FE                 mov     eax, [ebp+var_8]
.text:00002801                 mov     dword ptr [eax+edx*4+88h], 0FFFFFFFFh
.text:0000280C                 jmp     short loc_27A7
.text:0000280E ; ---------------------------------------------------------------------------
.text:0000280E
.text:0000280E loc_280E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+81j
.text:0000280E                 mov     [ebp+var_50], 0
.text:00002815                 mov     ecx, [ebp+var_8]
.text:00002818                 mov     dword ptr [ecx], 0
.text:0000281E                 mov     edx, [ebp+var_8]
.text:00002821                 mov     dword ptr [edx+44h], 0
.text:00002828                 mov     [ebp+var_B0], 0
.text:00002832                 mov     [ebp+var_B4], 0
.text:0000283C                 mov     [ebp+var_B8], 10000h
.text:00002846                 mov     [ebp+var_A4], 1
.text:00002850                 jmp     short loc_2861
.text:00002852 ; ---------------------------------------------------------------------------
.text:00002852
.text:00002852 loc_2852:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *):loc_2969j
.text:00002852                 mov     eax, [ebp+var_A4]
.text:00002858                 add     eax, 1
.text:0000285B                 mov     [ebp+var_A4], eax
.text:00002861
.text:00002861 loc_2861:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+114j
.text:00002861                 cmp     [ebp+var_A4], 10h
.text:00002868                 ja      loc_296E
.text:0000286E                 mov     ecx, 10h
.text:00002873                 sub     ecx, [ebp+var_A4]
.text:00002879                 mov     edx, [ebp+var_A4]
.text:0000287F                 mov     eax, [ebp+edx*4+var_50]
.text:00002883                 shl     eax, cl
.text:00002885                 add     eax, [ebp+var_B0]
.text:0000288B                 mov     [ebp+var_B0], eax
.text:00002891                 cmp     [ebp+var_B0], 10000h
.text:0000289B                 jbe     short loc_28A4
.text:0000289D                 xor     al, al
.text:0000289F                 jmp     loc_29EB
.text:000028A4 ; ---------------------------------------------------------------------------
.text:000028A4
.text:000028A4 loc_28A4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+15Fj
.text:000028A4                 cmp     [ebp+var_A4], 10h
.text:000028AB                 jnz     short loc_28B9
.text:000028AD                 mov     [ebp+var_C4], 10000h
.text:000028B7                 jmp     short loc_28C5
.text:000028B9 ; ---------------------------------------------------------------------------
.text:000028B9
.text:000028B9 loc_28B9:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+16Fj
.text:000028B9                 mov     ecx, [ebp+var_B0]
.text:000028BF                 mov     [ebp+var_C4], ecx
.text:000028C5
.text:000028C5 loc_28C5:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+17Bj
.text:000028C5                 mov     edx, [ebp+var_A4]
.text:000028CB                 mov     eax, [ebp+var_8]
.text:000028CE                 mov     ecx, [ebp+var_C4]
.text:000028D4                 mov     [eax+edx*4], ecx
.text:000028D7                 mov     edx, [ebp+var_A4]
.text:000028DD                 mov     eax, [ebp+var_8]
.text:000028E0                 mov     ecx, [eax+edx*4+40h]
.text:000028E4                 mov     edx, [ebp+var_A4]
.text:000028EA                 add     ecx, [ebp+edx*4+var_54]
.text:000028EE                 mov     eax, [ebp+var_A4]
.text:000028F4                 mov     edx, [ebp+var_8]
.text:000028F7                 mov     [edx+eax*4+44h], ecx
.text:000028FB                 mov     eax, [ebp+var_A4]
.text:00002901                 mov     ecx, [ebp+var_A4]
.text:00002907                 mov     edx, [ebp+var_8]
.text:0000290A                 mov     ecx, [edx+ecx*4+44h]
.text:0000290E                 mov     [ebp+eax*4+var_9C], ecx
.text:00002915                 cmp     [ebp+var_A4], 9
.text:0000291C                 ja      short loc_2969
.text:0000291E                 mov     edx, [ebp+var_A4]
.text:00002924                 mov     eax, [ebp+var_8]
.text:00002927                 mov     ecx, [eax+edx*4]
.text:0000292A                 shr     ecx, 7
.text:0000292D                 mov     [ebp+var_BC], ecx
.text:00002933                 jmp     short loc_2944
.text:00002935 ; ---------------------------------------------------------------------------
.text:00002935
.text:00002935 loc_2935:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+22Bj
.text:00002935                 mov     edx, [ebp+var_B4]
.text:0000293B                 add     edx, 1
.text:0000293E                 mov     [ebp+var_B4], edx
.text:00002944
.text:00002944 loc_2944:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+1F7j
.text:00002944                 mov     eax, [ebp+var_B4]
.text:0000294A                 cmp     eax, [ebp+var_BC]
.text:00002950                 jnb     short loc_2969
.text:00002952                 mov     ecx, [ebp+var_8]
.text:00002955                 add     ecx, [ebp+var_B4]
.text:0000295B                 mov     dl, byte ptr [ebp+var_A4]
.text:00002961                 mov     [ecx+0A8h], dl
.text:00002967                 jmp     short loc_2935
.text:00002969 ; ---------------------------------------------------------------------------
.text:00002969
.text:00002969 loc_2969:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+1E0j
.text:00002969                                         ; NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+214j
.text:00002969                 jmp     loc_2852
.text:0000296E ; ---------------------------------------------------------------------------
.text:0000296E
.text:0000296E loc_296E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+12Cj
.text:0000296E                 mov     [ebp+var_A8], 0
.text:00002978                 jmp     short loc_2989
.text:0000297A ; ---------------------------------------------------------------------------
.text:0000297A
.text:0000297A loc_297A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *):loc_29E7j
.text:0000297A                 mov     eax, [ebp+var_A8]
.text:00002980                 add     eax, 1
.text:00002983                 mov     [ebp+var_A8], eax
.text:00002989
.text:00002989 loc_2989:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+23Cj
.text:00002989                 cmp     [ebp+var_A8], 8
.text:00002990                 jnb     short loc_29E9
.text:00002992                 mov     ecx, [ebp+arg_0]
.text:00002995                 add     ecx, [ebp+var_A8]
.text:0000299B                 movzx   edx, byte ptr [ecx]
.text:0000299E                 mov     [ebp+var_C0], edx
.text:000029A4                 cmp     [ebp+var_C0], 0
.text:000029AB                 jz      short loc_29E7
.text:000029AD                 mov     eax, [ebp+var_C0]
.text:000029B3                 mov     ecx, [ebp+eax*4+var_9C]
.text:000029BA                 mov     edx, [ebp+var_8]
.text:000029BD                 mov     eax, [ebp+var_A8]
.text:000029C3                 mov     [edx+ecx*4+88h], eax
.text:000029CA                 mov     ecx, [ebp+var_C0]
.text:000029D0                 mov     edx, [ebp+ecx*4+var_9C]
.text:000029D7                 add     edx, 1
.text:000029DA                 mov     eax, [ebp+var_C0]
.text:000029E0                 mov     [ebp+eax*4+var_9C], edx
.text:000029E7
.text:000029E7 loc_29E7:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+26Fj
.text:000029E7                 jmp     short loc_297A
.text:000029E9 ; ---------------------------------------------------------------------------
.text:000029E9
.text:000029E9 loc_29E9:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+254j
.text:000029E9                 mov     al, 1
.text:000029EB
.text:000029EB loc_29EB:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+A0j
.text:000029EB                                         ; NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+163j
.text:000029EB                 push    edx
.text:000029EC                 mov     ecx, ebp
.text:000029EE                 push    eax
.text:000029EF                 lea     edx, $LN27_1
.text:000029F5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000029FA                 pop     eax
.text:000029FB                 pop     edx
.text:000029FC                 pop     edi
.text:000029FD                 mov     ecx, [ebp+var_4]
.text:00002A00                 xor     ecx, ebp
.text:00002A02                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002A07                 mov     esp, ebp
.text:00002A09                 pop     ebp
.text:00002A0A                 retn    4
.text:00002A0A ?SetCodeLengths@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:00002A0A
.text:00002A0A ; ---------------------------------------------------------------------------
.text:00002A0D                 align 10h
.text:00002A10 $LN27_1         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<16,8>::SetCodeLengths(uchar const *)+2B3o
.text:00002A14                 dd offset $LN26_1
.text:00002A18 $LN26_1         dd 0FFFFFFB0h, 44h      ; DATA XREF: .text:00002A14o
.text:00002A20                 dd offset $LN24_1       ; "lenCounts"
.text:00002A24                 dd 0FFFFFF64h, 44h
.text:00002A2C                 dd offset $LN25_1       ; "tmpPositions"
.text:00002A30 $LN25_1         db 'tmpPositions',0     ; DATA XREF: .text:00002A2Co
.text:00002A3D $LN24_1         db 'lenCounts',0        ; DATA XREF: .text:00002A20o
.text:00002A47                 align 4
.text:00002A47 _text           ends
.text:00002A47
.text:00002A48 ; ===========================================================================
.text:00002A48
.text:00002A48 ; Segment type: Pure code
.text:00002A48 ; Segment permissions: Read/Execute
.text:00002A48 _text           segment para public 'CODE' use32
.text:00002A48                 assume cs:_text
.text:00002A48                 ;org 2A48h
.text:00002A48 ; COMDAT (pick any)
.text:00002A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A48
.text:00002A48 ; =============== S U B R O U T I N E =======================================
.text:00002A48
.text:00002A48 ; Attributes: bp-based frame
.text:00002A48
.text:00002A48 ; public: bool __thiscall NCompress::NHuffman::CDecoder<16, 20>::SetCodeLengths(unsigned char const *)
.text:00002A48                 public ?SetCodeLengths@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAE_NPBE@Z
.text:00002A48 ?SetCodeLengths@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:00002A48                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+5Dp
.text:00002A48
.text:00002A48 var_C4          = dword ptr -0C4h
.text:00002A48 var_C0          = dword ptr -0C0h
.text:00002A48 var_BC          = dword ptr -0BCh
.text:00002A48 var_B8          = dword ptr -0B8h
.text:00002A48 var_B4          = dword ptr -0B4h
.text:00002A48 var_B0          = dword ptr -0B0h
.text:00002A48 var_AC          = dword ptr -0ACh
.text:00002A48 var_A8          = dword ptr -0A8h
.text:00002A48 var_A4          = dword ptr -0A4h
.text:00002A48 var_9C          = dword ptr -9Ch
.text:00002A48 var_54          = dword ptr -54h
.text:00002A48 var_50          = dword ptr -50h
.text:00002A48 var_8           = dword ptr -8
.text:00002A48 var_4           = dword ptr -4
.text:00002A48 arg_0           = dword ptr  8
.text:00002A48
.text:00002A48                 push    ebp
.text:00002A49                 mov     ebp, esp
.text:00002A4B                 sub     esp, 0C4h
.text:00002A51                 push    edi
.text:00002A52                 push    ecx
.text:00002A53                 lea     edi, [ebp+var_C4]
.text:00002A59                 mov     ecx, 31h ; '1'
.text:00002A5E                 mov     eax, 0CCCCCCCCh
.text:00002A63                 rep stosd
.text:00002A65                 pop     ecx
.text:00002A66                 mov     eax, dword ptr ds:___security_cookie
.text:00002A6B                 xor     eax, ebp
.text:00002A6D                 mov     [ebp+var_4], eax
.text:00002A70                 mov     [ebp+var_8], ecx
.text:00002A73                 mov     [ebp+var_A4], 1
.text:00002A7D                 jmp     short loc_2A8E
.text:00002A7F ; ---------------------------------------------------------------------------
.text:00002A7F
.text:00002A7F loc_2A7F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+5Dj
.text:00002A7F                 mov     eax, [ebp+var_A4]
.text:00002A85                 add     eax, 1
.text:00002A88                 mov     [ebp+var_A4], eax
.text:00002A8E
.text:00002A8E loc_2A8E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+35j
.text:00002A8E                 cmp     [ebp+var_A4], 10h
.text:00002A95                 ja      short loc_2AA7
.text:00002A97                 mov     ecx, [ebp+var_A4]
.text:00002A9D                 mov     [ebp+ecx*4+var_50], 0
.text:00002AA5                 jmp     short loc_2A7F
.text:00002AA7 ; ---------------------------------------------------------------------------
.text:00002AA7
.text:00002AA7 loc_2AA7:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+4Dj
.text:00002AA7                 mov     [ebp+var_A8], 0
.text:00002AB1                 jmp     short loc_2AC2
.text:00002AB3 ; ---------------------------------------------------------------------------
.text:00002AB3
.text:00002AB3 loc_2AB3:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+D0j
.text:00002AB3                 mov     edx, [ebp+var_A8]
.text:00002AB9                 add     edx, 1
.text:00002ABC                 mov     [ebp+var_A8], edx
.text:00002AC2
.text:00002AC2 loc_2AC2:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+69j
.text:00002AC2                 cmp     [ebp+var_A8], 14h
.text:00002AC9                 jnb     short loc_2B1A
.text:00002ACB                 mov     eax, [ebp+arg_0]
.text:00002ACE                 add     eax, [ebp+var_A8]
.text:00002AD4                 movzx   ecx, byte ptr [eax]
.text:00002AD7                 mov     [ebp+var_AC], ecx
.text:00002ADD                 cmp     [ebp+var_AC], 10h
.text:00002AE4                 jbe     short loc_2AED
.text:00002AE6                 xor     al, al
.text:00002AE8                 jmp     loc_2CF7
.text:00002AED ; ---------------------------------------------------------------------------
.text:00002AED
.text:00002AED loc_2AED:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+9Cj
.text:00002AED                 mov     edx, [ebp+var_AC]
.text:00002AF3                 mov     eax, [ebp+edx*4+var_50]
.text:00002AF7                 add     eax, 1
.text:00002AFA                 mov     ecx, [ebp+var_AC]
.text:00002B00                 mov     [ebp+ecx*4+var_50], eax
.text:00002B04                 mov     edx, [ebp+var_A8]
.text:00002B0A                 mov     eax, [ebp+var_8]
.text:00002B0D                 mov     dword ptr [eax+edx*4+88h], 0FFFFFFFFh
.text:00002B18                 jmp     short loc_2AB3
.text:00002B1A ; ---------------------------------------------------------------------------
.text:00002B1A
.text:00002B1A loc_2B1A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+81j
.text:00002B1A                 mov     [ebp+var_50], 0
.text:00002B21                 mov     ecx, [ebp+var_8]
.text:00002B24                 mov     dword ptr [ecx], 0
.text:00002B2A                 mov     edx, [ebp+var_8]
.text:00002B2D                 mov     dword ptr [edx+44h], 0
.text:00002B34                 mov     [ebp+var_B0], 0
.text:00002B3E                 mov     [ebp+var_B4], 0
.text:00002B48                 mov     [ebp+var_B8], 10000h
.text:00002B52                 mov     [ebp+var_A4], 1
.text:00002B5C                 jmp     short loc_2B6D
.text:00002B5E ; ---------------------------------------------------------------------------
.text:00002B5E
.text:00002B5E loc_2B5E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *):loc_2C75j
.text:00002B5E                 mov     eax, [ebp+var_A4]
.text:00002B64                 add     eax, 1
.text:00002B67                 mov     [ebp+var_A4], eax
.text:00002B6D
.text:00002B6D loc_2B6D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+114j
.text:00002B6D                 cmp     [ebp+var_A4], 10h
.text:00002B74                 ja      loc_2C7A
.text:00002B7A                 mov     ecx, 10h
.text:00002B7F                 sub     ecx, [ebp+var_A4]
.text:00002B85                 mov     edx, [ebp+var_A4]
.text:00002B8B                 mov     eax, [ebp+edx*4+var_50]
.text:00002B8F                 shl     eax, cl
.text:00002B91                 add     eax, [ebp+var_B0]
.text:00002B97                 mov     [ebp+var_B0], eax
.text:00002B9D                 cmp     [ebp+var_B0], 10000h
.text:00002BA7                 jbe     short loc_2BB0
.text:00002BA9                 xor     al, al
.text:00002BAB                 jmp     loc_2CF7
.text:00002BB0 ; ---------------------------------------------------------------------------
.text:00002BB0
.text:00002BB0 loc_2BB0:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+15Fj
.text:00002BB0                 cmp     [ebp+var_A4], 10h
.text:00002BB7                 jnz     short loc_2BC5
.text:00002BB9                 mov     [ebp+var_C4], 10000h
.text:00002BC3                 jmp     short loc_2BD1
.text:00002BC5 ; ---------------------------------------------------------------------------
.text:00002BC5
.text:00002BC5 loc_2BC5:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+16Fj
.text:00002BC5                 mov     ecx, [ebp+var_B0]
.text:00002BCB                 mov     [ebp+var_C4], ecx
.text:00002BD1
.text:00002BD1 loc_2BD1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+17Bj
.text:00002BD1                 mov     edx, [ebp+var_A4]
.text:00002BD7                 mov     eax, [ebp+var_8]
.text:00002BDA                 mov     ecx, [ebp+var_C4]
.text:00002BE0                 mov     [eax+edx*4], ecx
.text:00002BE3                 mov     edx, [ebp+var_A4]
.text:00002BE9                 mov     eax, [ebp+var_8]
.text:00002BEC                 mov     ecx, [eax+edx*4+40h]
.text:00002BF0                 mov     edx, [ebp+var_A4]
.text:00002BF6                 add     ecx, [ebp+edx*4+var_54]
.text:00002BFA                 mov     eax, [ebp+var_A4]
.text:00002C00                 mov     edx, [ebp+var_8]
.text:00002C03                 mov     [edx+eax*4+44h], ecx
.text:00002C07                 mov     eax, [ebp+var_A4]
.text:00002C0D                 mov     ecx, [ebp+var_A4]
.text:00002C13                 mov     edx, [ebp+var_8]
.text:00002C16                 mov     ecx, [edx+ecx*4+44h]
.text:00002C1A                 mov     [ebp+eax*4+var_9C], ecx
.text:00002C21                 cmp     [ebp+var_A4], 9
.text:00002C28                 ja      short loc_2C75
.text:00002C2A                 mov     edx, [ebp+var_A4]
.text:00002C30                 mov     eax, [ebp+var_8]
.text:00002C33                 mov     ecx, [eax+edx*4]
.text:00002C36                 shr     ecx, 7
.text:00002C39                 mov     [ebp+var_BC], ecx
.text:00002C3F                 jmp     short loc_2C50
.text:00002C41 ; ---------------------------------------------------------------------------
.text:00002C41
.text:00002C41 loc_2C41:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+22Bj
.text:00002C41                 mov     edx, [ebp+var_B4]
.text:00002C47                 add     edx, 1
.text:00002C4A                 mov     [ebp+var_B4], edx
.text:00002C50
.text:00002C50 loc_2C50:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+1F7j
.text:00002C50                 mov     eax, [ebp+var_B4]
.text:00002C56                 cmp     eax, [ebp+var_BC]
.text:00002C5C                 jnb     short loc_2C75
.text:00002C5E                 mov     ecx, [ebp+var_8]
.text:00002C61                 add     ecx, [ebp+var_B4]
.text:00002C67                 mov     dl, byte ptr [ebp+var_A4]
.text:00002C6D                 mov     [ecx+0D8h], dl
.text:00002C73                 jmp     short loc_2C41
.text:00002C75 ; ---------------------------------------------------------------------------
.text:00002C75
.text:00002C75 loc_2C75:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+1E0j
.text:00002C75                                         ; NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+214j
.text:00002C75                 jmp     loc_2B5E
.text:00002C7A ; ---------------------------------------------------------------------------
.text:00002C7A
.text:00002C7A loc_2C7A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+12Cj
.text:00002C7A                 mov     [ebp+var_A8], 0
.text:00002C84                 jmp     short loc_2C95
.text:00002C86 ; ---------------------------------------------------------------------------
.text:00002C86
.text:00002C86 loc_2C86:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *):loc_2CF3j
.text:00002C86                 mov     eax, [ebp+var_A8]
.text:00002C8C                 add     eax, 1
.text:00002C8F                 mov     [ebp+var_A8], eax
.text:00002C95
.text:00002C95 loc_2C95:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+23Cj
.text:00002C95                 cmp     [ebp+var_A8], 14h
.text:00002C9C                 jnb     short loc_2CF5
.text:00002C9E                 mov     ecx, [ebp+arg_0]
.text:00002CA1                 add     ecx, [ebp+var_A8]
.text:00002CA7                 movzx   edx, byte ptr [ecx]
.text:00002CAA                 mov     [ebp+var_C0], edx
.text:00002CB0                 cmp     [ebp+var_C0], 0
.text:00002CB7                 jz      short loc_2CF3
.text:00002CB9                 mov     eax, [ebp+var_C0]
.text:00002CBF                 mov     ecx, [ebp+eax*4+var_9C]
.text:00002CC6                 mov     edx, [ebp+var_8]
.text:00002CC9                 mov     eax, [ebp+var_A8]
.text:00002CCF                 mov     [edx+ecx*4+88h], eax
.text:00002CD6                 mov     ecx, [ebp+var_C0]
.text:00002CDC                 mov     edx, [ebp+ecx*4+var_9C]
.text:00002CE3                 add     edx, 1
.text:00002CE6                 mov     eax, [ebp+var_C0]
.text:00002CEC                 mov     [ebp+eax*4+var_9C], edx
.text:00002CF3
.text:00002CF3 loc_2CF3:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+26Fj
.text:00002CF3                 jmp     short loc_2C86
.text:00002CF5 ; ---------------------------------------------------------------------------
.text:00002CF5
.text:00002CF5 loc_2CF5:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+254j
.text:00002CF5                 mov     al, 1
.text:00002CF7
.text:00002CF7 loc_2CF7:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+A0j
.text:00002CF7                                         ; NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+163j
.text:00002CF7                 push    edx
.text:00002CF8                 mov     ecx, ebp
.text:00002CFA                 push    eax
.text:00002CFB                 lea     edx, $LN27_2
.text:00002D01                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D06                 pop     eax
.text:00002D07                 pop     edx
.text:00002D08                 pop     edi
.text:00002D09                 mov     ecx, [ebp+var_4]
.text:00002D0C                 xor     ecx, ebp
.text:00002D0E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002D13                 mov     esp, ebp
.text:00002D15                 pop     ebp
.text:00002D16                 retn    4
.text:00002D16 ?SetCodeLengths@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:00002D16
.text:00002D16 ; ---------------------------------------------------------------------------
.text:00002D19                 align 4
.text:00002D1C $LN27_2         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<16,20>::SetCodeLengths(uchar const *)+2B3o
.text:00002D20                 dd offset $LN26_2
.text:00002D24 $LN26_2         dd 0FFFFFFB0h, 44h      ; DATA XREF: .text:00002D20o
.text:00002D2C                 dd offset $LN24_2       ; "lenCounts"
.text:00002D30                 dd 0FFFFFF64h, 44h
.text:00002D38                 dd offset $LN25_2       ; "tmpPositions"
.text:00002D3C $LN25_2         db 'tmpPositions',0     ; DATA XREF: .text:00002D38o
.text:00002D49 $LN24_2         db 'lenCounts',0        ; DATA XREF: .text:00002D2Co
.text:00002D53                 align 4
.text:00002D53 _text           ends
.text:00002D53
.text:00002D54 ; ===========================================================================
.text:00002D54
.text:00002D54 ; Segment type: Pure code
.text:00002D54 ; Segment permissions: Read/Execute
.text:00002D54 _text           segment para public 'CODE' use32
.text:00002D54                 assume cs:_text
.text:00002D54                 ;org 2D54h
.text:00002D54 ; COMDAT (pick any)
.text:00002D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D54
.text:00002D54 ; =============== S U B R O U T I N E =======================================
.text:00002D54
.text:00002D54 ; Attributes: bp-based frame
.text:00002D54
.text:00002D54 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00002D54                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00002D54 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00002D54                                         ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+7Fp
.text:00002D54
.text:00002D54 var_4           = dword ptr -4
.text:00002D54
.text:00002D54                 push    ebp
.text:00002D55                 mov     ebp, esp
.text:00002D57                 push    ecx
.text:00002D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D5F                 mov     [ebp+var_4], ecx
.text:00002D62                 mov     eax, [ebp+var_4]
.text:00002D65                 mov     dword ptr [eax], 0
.text:00002D6B                 mov     eax, [ebp+var_4]
.text:00002D6E                 mov     esp, ebp
.text:00002D70                 pop     ebp
.text:00002D71                 retn
.text:00002D71 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00002D71
.text:00002D71 ; ---------------------------------------------------------------------------
.text:00002D72                 align 4
.text:00002D72 _text           ends
.text:00002D72
.text:00002D74 ; ===========================================================================
.text:00002D74
.text:00002D74 ; Segment type: Pure code
.text:00002D74 ; Segment permissions: Read/Execute
.text:00002D74 _text           segment para public 'CODE' use32
.text:00002D74                 assume cs:_text
.text:00002D74                 ;org 2D74h
.text:00002D74 ; COMDAT (pick any)
.text:00002D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D74
.text:00002D74 ; =============== S U B R O U T I N E =======================================
.text:00002D74
.text:00002D74 ; Attributes: bp-based frame
.text:00002D74
.text:00002D74 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00002D74                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00002D74 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00002D74                                         ; CODE XREF: __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$2+9j
.text:00002D74                                         ; NCompress::NLzx::CDecoder::~CDecoder(void)+3Dp
.text:00002D74
.text:00002D74 var_4           = dword ptr -4
.text:00002D74
.text:00002D74                 push    ebp
.text:00002D75                 mov     ebp, esp
.text:00002D77                 push    ecx
.text:00002D78                 push    esi
.text:00002D79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D80                 mov     [ebp+var_4], ecx
.text:00002D83                 mov     eax, [ebp+var_4]
.text:00002D86                 cmp     dword ptr [eax], 0
.text:00002D89                 jz      short loc_2DA6
.text:00002D8B                 mov     ecx, [ebp+var_4]
.text:00002D8E                 mov     edx, [ecx]
.text:00002D90                 mov     eax, [ebp+var_4]
.text:00002D93                 mov     ecx, [eax]
.text:00002D95                 mov     edx, [edx]
.text:00002D97                 mov     esi, esp
.text:00002D99                 push    ecx
.text:00002D9A                 mov     eax, [edx+8]
.text:00002D9D                 call    eax
.text:00002D9F                 cmp     esi, esp
.text:00002DA1                 call    __RTC_CheckEsp
.text:00002DA6
.text:00002DA6 loc_2DA6:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00002DA6                 pop     esi
.text:00002DA7                 add     esp, 4
.text:00002DAA                 cmp     ebp, esp
.text:00002DAC                 call    __RTC_CheckEsp
.text:00002DB1                 mov     esp, ebp
.text:00002DB3                 pop     ebp
.text:00002DB4                 retn
.text:00002DB4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00002DB4
.text:00002DB4 ; ---------------------------------------------------------------------------
.text:00002DB5                 align 4
.text:00002DB5 _text           ends
.text:00002DB5
.text:00002DB8 ; ===========================================================================
.text:00002DB8
.text:00002DB8 ; Segment type: Pure code
.text:00002DB8 ; Segment permissions: Read/Execute
.text:00002DB8 _text           segment para public 'CODE' use32
.text:00002DB8                 assume cs:_text
.text:00002DB8                 ;org 2DB8h
.text:00002DB8 ; COMDAT (pick any)
.text:00002DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DB8
.text:00002DB8 ; =============== S U B R O U T I N E =======================================
.text:00002DB8
.text:00002DB8 ; Attributes: bp-based frame
.text:00002DB8
.text:00002DB8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00002DB8                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00002DB8 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00002DB8                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+83p
.text:00002DB8
.text:00002DB8 var_4           = dword ptr -4
.text:00002DB8
.text:00002DB8                 push    ebp
.text:00002DB9                 mov     ebp, esp
.text:00002DBB                 push    ecx
.text:00002DBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DC3                 mov     [ebp+var_4], ecx
.text:00002DC6                 mov     eax, [ebp+var_4]
.text:00002DC9                 mov     eax, [eax]
.text:00002DCB                 mov     esp, ebp
.text:00002DCD                 pop     ebp
.text:00002DCE                 retn
.text:00002DCE ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00002DCE
.text:00002DCE ; ---------------------------------------------------------------------------
.text:00002DCF                 align 10h
.text:00002DCF _text           ends
.text:00002DCF
.text:00002DD0 ; ===========================================================================
.text:00002DD0
.text:00002DD0 ; Segment type: Pure code
.text:00002DD0 ; Segment permissions: Read/Execute
.text:00002DD0 _text           segment para public 'CODE' use32
.text:00002DD0                 assume cs:_text
.text:00002DD0                 ;org 2DD0h
.text:00002DD0 ; COMDAT (pick any)
.text:00002DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DD0
.text:00002DD0 ; =============== S U B R O U T I N E =======================================
.text:00002DD0
.text:00002DD0 ; Attributes: bp-based frame
.text:00002DD0
.text:00002DD0 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00002DD0                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00002DD0 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00002DD0                                         ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+FFp
.text:00002DD0
.text:00002DD0 var_4           = dword ptr -4
.text:00002DD0 arg_0           = dword ptr  8
.text:00002DD0
.text:00002DD0                 push    ebp
.text:00002DD1                 mov     ebp, esp
.text:00002DD3                 push    ecx
.text:00002DD4                 push    esi
.text:00002DD5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DDC                 mov     [ebp+var_4], ecx
.text:00002DDF                 cmp     [ebp+arg_0], 0
.text:00002DE3                 jz      short loc_2DFC
.text:00002DE5                 mov     eax, [ebp+arg_0]
.text:00002DE8                 mov     ecx, [eax]
.text:00002DEA                 mov     esi, esp
.text:00002DEC                 mov     edx, [ebp+arg_0]
.text:00002DEF                 push    edx
.text:00002DF0                 mov     eax, [ecx+4]
.text:00002DF3                 call    eax
.text:00002DF5                 cmp     esi, esp
.text:00002DF7                 call    __RTC_CheckEsp
.text:00002DFC
.text:00002DFC loc_2DFC:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00002DFC                 mov     ecx, [ebp+var_4]
.text:00002DFF                 cmp     dword ptr [ecx], 0
.text:00002E02                 jz      short loc_2E1F
.text:00002E04                 mov     edx, [ebp+var_4]
.text:00002E07                 mov     eax, [edx]
.text:00002E09                 mov     ecx, [ebp+var_4]
.text:00002E0C                 mov     edx, [ecx]
.text:00002E0E                 mov     eax, [eax]
.text:00002E10                 mov     esi, esp
.text:00002E12                 push    edx
.text:00002E13                 mov     ecx, [eax+8]
.text:00002E16                 call    ecx
.text:00002E18                 cmp     esi, esp
.text:00002E1A                 call    __RTC_CheckEsp
.text:00002E1F
.text:00002E1F loc_2E1F:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00002E1F                 mov     edx, [ebp+var_4]
.text:00002E22                 mov     eax, [ebp+arg_0]
.text:00002E25                 mov     [edx], eax
.text:00002E27                 mov     eax, [ebp+arg_0]
.text:00002E2A                 pop     esi
.text:00002E2B                 add     esp, 4
.text:00002E2E                 cmp     ebp, esp
.text:00002E30                 call    __RTC_CheckEsp
.text:00002E35                 mov     esp, ebp
.text:00002E37                 pop     ebp
.text:00002E38                 retn    4
.text:00002E38 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00002E38
.text:00002E38 ; ---------------------------------------------------------------------------
.text:00002E3B                 align 4
.text:00002E3B _text           ends
.text:00002E3B
.text:00002E3C ; ===========================================================================
.text:00002E3C
.text:00002E3C ; Segment type: Pure code
.text:00002E3C ; Segment permissions: Read/Execute
.text:00002E3C _text           segment para public 'CODE' use32
.text:00002E3C                 assume cs:_text
.text:00002E3C                 ;org 2E3Ch
.text:00002E3C ; COMDAT (pick any)
.text:00002E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E3C
.text:00002E3C ; =============== S U B R O U T I N E =======================================
.text:00002E3C
.text:00002E3C ; Attributes: bp-based frame
.text:00002E3C
.text:00002E3C ; int __stdcall NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00002E3C                 public ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z
.text:00002E3C ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z proc near
.text:00002E3C                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+CEp
.text:00002E3C                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+14Cp
.text:00002E3C
.text:00002E3C var_10          = dword ptr -10h
.text:00002E3C var_C           = dword ptr -0Ch
.text:00002E3C var_8           = dword ptr -8
.text:00002E3C var_4           = dword ptr -4
.text:00002E3C arg_0           = dword ptr  8
.text:00002E3C
.text:00002E3C                 push    ebp
.text:00002E3D                 mov     ebp, esp
.text:00002E3F                 sub     esp, 10h
.text:00002E42                 mov     eax, 0CCCCCCCCh
.text:00002E47                 mov     [ebp+var_10], eax
.text:00002E4A                 mov     [ebp+var_C], eax
.text:00002E4D                 mov     [ebp+var_8], eax
.text:00002E50                 mov     [ebp+var_4], eax
.text:00002E53                 mov     [ebp+var_4], ecx
.text:00002E56                 push    10h             ; unsigned int
.text:00002E58                 mov     ecx, [ebp+arg_0] ; this
.text:00002E5B                 call    ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z ; NCompress::NLzx::NBitStream::CDecoder::GetValue(uint)
.text:00002E60                 mov     [ebp+var_C], eax
.text:00002E63                 mov     eax, [ebp+var_4]
.text:00002E66                 mov     ecx, [ebp+var_C]
.text:00002E69                 cmp     ecx, [eax+24h]
.text:00002E6C                 jnb     short loc_2E84
.text:00002E6E                 mov     edx, [ebp+var_C]
.text:00002E71                 shr     edx, 7
.text:00002E74                 mov     eax, [ebp+var_4]
.text:00002E77                 movzx   ecx, byte ptr [eax+edx+0D8h]
.text:00002E7F                 mov     [ebp+var_8], ecx
.text:00002E82                 jmp     short loc_2EA6
.text:00002E84 ; ---------------------------------------------------------------------------
.text:00002E84
.text:00002E84 loc_2E84:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+30j
.text:00002E84                 mov     [ebp+var_8], 0Ah
.text:00002E8B                 jmp     short loc_2E96
.text:00002E8D ; ---------------------------------------------------------------------------
.text:00002E8D
.text:00002E8D loc_2E8D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+68j
.text:00002E8D                 mov     edx, [ebp+var_8]
.text:00002E90                 add     edx, 1
.text:00002E93                 mov     [ebp+var_8], edx
.text:00002E96
.text:00002E96 loc_2E96:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+4Fj
.text:00002E96                 mov     eax, [ebp+var_8]
.text:00002E99                 mov     ecx, [ebp+var_4]
.text:00002E9C                 mov     edx, [ebp+var_C]
.text:00002E9F                 cmp     edx, [ecx+eax*4]
.text:00002EA2                 jb      short loc_2EA6
.text:00002EA4                 jmp     short loc_2E8D
.text:00002EA6 ; ---------------------------------------------------------------------------
.text:00002EA6
.text:00002EA6 loc_2EA6:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+46j
.text:00002EA6                                         ; NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+66j
.text:00002EA6                 mov     eax, [ebp+var_8]
.text:00002EA9                 push    eax             ; unsigned int
.text:00002EAA                 mov     ecx, [ebp+arg_0] ; this
.text:00002EAD                 call    ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z ; NCompress::NLzx::NBitStream::CDecoder::MovePos(uint)
.text:00002EB2                 mov     ecx, [ebp+var_8]
.text:00002EB5                 mov     edx, [ebp+var_4]
.text:00002EB8                 mov     eax, [ebp+var_C]
.text:00002EBB                 sub     eax, [edx+ecx*4-4]
.text:00002EBF                 mov     ecx, 10h
.text:00002EC4                 sub     ecx, [ebp+var_8]
.text:00002EC7                 shr     eax, cl
.text:00002EC9                 mov     ecx, [ebp+var_8]
.text:00002ECC                 mov     edx, [ebp+var_4]
.text:00002ECF                 add     eax, [edx+ecx*4+44h]
.text:00002ED3                 mov     [ebp+var_10], eax
.text:00002ED6                 cmp     [ebp+var_10], 14h
.text:00002EDA                 jb      short loc_2EE1
.text:00002EDC                 or      eax, 0FFFFFFFFh
.text:00002EDF                 jmp     short loc_2EEE
.text:00002EE1 ; ---------------------------------------------------------------------------
.text:00002EE1
.text:00002EE1 loc_2EE1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+9Ej
.text:00002EE1                 mov     eax, [ebp+var_10]
.text:00002EE4                 mov     ecx, [ebp+var_4]
.text:00002EE7                 mov     eax, [ecx+eax*4+88h]
.text:00002EEE
.text:00002EEE loc_2EEE:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,20>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A3j
.text:00002EEE                 add     esp, 10h
.text:00002EF1                 cmp     ebp, esp
.text:00002EF3                 call    __RTC_CheckEsp
.text:00002EF8                 mov     esp, ebp
.text:00002EFA                 pop     ebp
.text:00002EFB                 retn    4
.text:00002EFB ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0BE@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z endp
.text:00002EFB
.text:00002EFB ; ---------------------------------------------------------------------------
.text:00002EFE                 align 10h
.text:00002EFE _text           ends
.text:00002EFE
.text:00002F00 ; ===========================================================================
.text:00002F00
.text:00002F00 ; Segment type: Pure code
.text:00002F00 ; Segment permissions: Read/Execute
.text:00002F00 _text           segment para public 'CODE' use32
.text:00002F00                 assume cs:_text
.text:00002F00                 ;org 2F00h
.text:00002F00 ; COMDAT (pick any)
.text:00002F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F00
.text:00002F00 ; =============== S U B R O U T I N E =======================================
.text:00002F00
.text:00002F00 ; Attributes: bp-based frame
.text:00002F00
.text:00002F00 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:00002F00                 public ??$MyMin@I@@YGIII@Z
.text:00002F00 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+1BBp
.text:00002F00
.text:00002F00 var_4           = dword ptr -4
.text:00002F00 arg_0           = dword ptr  8
.text:00002F00 arg_4           = dword ptr  0Ch
.text:00002F00
.text:00002F00                 push    ebp
.text:00002F01                 mov     ebp, esp
.text:00002F03                 push    ecx
.text:00002F04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F0B                 mov     eax, [ebp+arg_0]
.text:00002F0E                 cmp     eax, [ebp+arg_4]
.text:00002F11                 jnb     short loc_2F1B
.text:00002F13                 mov     ecx, [ebp+arg_0]
.text:00002F16                 mov     [ebp+var_4], ecx
.text:00002F19                 jmp     short loc_2F21
.text:00002F1B ; ---------------------------------------------------------------------------
.text:00002F1B
.text:00002F1B loc_2F1B:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:00002F1B                 mov     edx, [ebp+arg_4]
.text:00002F1E                 mov     [ebp+var_4], edx
.text:00002F21
.text:00002F21 loc_2F21:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00002F21                 mov     eax, [ebp+var_4]
.text:00002F24                 mov     esp, ebp
.text:00002F26                 pop     ebp
.text:00002F27                 retn    8
.text:00002F27 ??$MyMin@I@@YGIII@Z endp
.text:00002F27
.text:00002F27 ; ---------------------------------------------------------------------------
.text:00002F2A                 align 4
.text:00002F2A _text           ends
.text:00002F2A
.text:00002F2C ; ===========================================================================
.text:00002F2C
.text:00002F2C ; Segment type: Pure code
.text:00002F2C ; Segment permissions: Read/Execute
.text:00002F2C _text           segment para public 'CODE' use32
.text:00002F2C                 assume cs:_text
.text:00002F2C                 ;org 2F2Ch
.text:00002F2C ; COMDAT (pick any)
.text:00002F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F2C
.text:00002F2C ; =============== S U B R O U T I N E =======================================
.text:00002F2C
.text:00002F2C ; Attributes: bp-based frame
.text:00002F2C
.text:00002F2C ; int __stdcall NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00002F2C                 public ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z
.text:00002F2C ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z proc near
.text:00002F2C                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+233p
.text:00002F2C
.text:00002F2C var_10          = dword ptr -10h
.text:00002F2C var_C           = dword ptr -0Ch
.text:00002F2C var_8           = dword ptr -8
.text:00002F2C var_4           = dword ptr -4
.text:00002F2C arg_0           = dword ptr  8
.text:00002F2C
.text:00002F2C                 push    ebp
.text:00002F2D                 mov     ebp, esp
.text:00002F2F                 sub     esp, 10h
.text:00002F32                 mov     eax, 0CCCCCCCCh
.text:00002F37                 mov     [ebp+var_10], eax
.text:00002F3A                 mov     [ebp+var_C], eax
.text:00002F3D                 mov     [ebp+var_8], eax
.text:00002F40                 mov     [ebp+var_4], eax
.text:00002F43                 mov     [ebp+var_4], ecx
.text:00002F46                 push    10h             ; unsigned int
.text:00002F48                 mov     ecx, [ebp+arg_0] ; this
.text:00002F4B                 call    ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z ; NCompress::NLzx::NBitStream::CDecoder::GetValue(uint)
.text:00002F50                 mov     [ebp+var_C], eax
.text:00002F53                 mov     eax, [ebp+var_4]
.text:00002F56                 mov     ecx, [ebp+var_C]
.text:00002F59                 cmp     ecx, [eax+24h]
.text:00002F5C                 jnb     short loc_2F74
.text:00002F5E                 mov     edx, [ebp+var_C]
.text:00002F61                 shr     edx, 7
.text:00002F64                 mov     eax, [ebp+var_4]
.text:00002F67                 movzx   ecx, byte ptr [eax+edx+0AC8h]
.text:00002F6F                 mov     [ebp+var_8], ecx
.text:00002F72                 jmp     short loc_2F96
.text:00002F74 ; ---------------------------------------------------------------------------
.text:00002F74
.text:00002F74 loc_2F74:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+30j
.text:00002F74                 mov     [ebp+var_8], 0Ah
.text:00002F7B                 jmp     short loc_2F86
.text:00002F7D ; ---------------------------------------------------------------------------
.text:00002F7D
.text:00002F7D loc_2F7D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+68j
.text:00002F7D                 mov     edx, [ebp+var_8]
.text:00002F80                 add     edx, 1
.text:00002F83                 mov     [ebp+var_8], edx
.text:00002F86
.text:00002F86 loc_2F86:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+4Fj
.text:00002F86                 mov     eax, [ebp+var_8]
.text:00002F89                 mov     ecx, [ebp+var_4]
.text:00002F8C                 mov     edx, [ebp+var_C]
.text:00002F8F                 cmp     edx, [ecx+eax*4]
.text:00002F92                 jb      short loc_2F96
.text:00002F94                 jmp     short loc_2F7D
.text:00002F96 ; ---------------------------------------------------------------------------
.text:00002F96
.text:00002F96 loc_2F96:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+46j
.text:00002F96                                         ; NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+66j
.text:00002F96                 mov     eax, [ebp+var_8]
.text:00002F99                 push    eax             ; unsigned int
.text:00002F9A                 mov     ecx, [ebp+arg_0] ; this
.text:00002F9D                 call    ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z ; NCompress::NLzx::NBitStream::CDecoder::MovePos(uint)
.text:00002FA2                 mov     ecx, [ebp+var_8]
.text:00002FA5                 mov     edx, [ebp+var_4]
.text:00002FA8                 mov     eax, [ebp+var_C]
.text:00002FAB                 sub     eax, [edx+ecx*4-4]
.text:00002FAF                 mov     ecx, 10h
.text:00002FB4                 sub     ecx, [ebp+var_8]
.text:00002FB7                 shr     eax, cl
.text:00002FB9                 mov     ecx, [ebp+var_8]
.text:00002FBC                 mov     edx, [ebp+var_4]
.text:00002FBF                 add     eax, [edx+ecx*4+44h]
.text:00002FC3                 mov     [ebp+var_10], eax
.text:00002FC6                 cmp     [ebp+var_10], 290h
.text:00002FCD                 jb      short loc_2FD4
.text:00002FCF                 or      eax, 0FFFFFFFFh
.text:00002FD2                 jmp     short loc_2FE1
.text:00002FD4 ; ---------------------------------------------------------------------------
.text:00002FD4
.text:00002FD4 loc_2FD4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A1j
.text:00002FD4                 mov     eax, [ebp+var_10]
.text:00002FD7                 mov     ecx, [ebp+var_4]
.text:00002FDA                 mov     eax, [ecx+eax*4+88h]
.text:00002FE1
.text:00002FE1 loc_2FE1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,656>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A6j
.text:00002FE1                 add     esp, 10h
.text:00002FE4                 cmp     ebp, esp
.text:00002FE6                 call    __RTC_CheckEsp
.text:00002FEB                 mov     esp, ebp
.text:00002FED                 pop     ebp
.text:00002FEE                 retn    4
.text:00002FEE ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0CJA@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z endp
.text:00002FEE
.text:00002FEE ; ---------------------------------------------------------------------------
.text:00002FF1                 align 4
.text:00002FF1 _text           ends
.text:00002FF1
.text:00002FF4 ; ===========================================================================
.text:00002FF4
.text:00002FF4 ; Segment type: Pure code
.text:00002FF4 ; Segment permissions: Read/Execute
.text:00002FF4 _text           segment para public 'CODE' use32
.text:00002FF4                 assume cs:_text
.text:00002FF4                 ;org 2FF4h
.text:00002FF4 ; COMDAT (pick any)
.text:00002FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FF4
.text:00002FF4 ; =============== S U B R O U T I N E =======================================
.text:00002FF4
.text:00002FF4 ; Attributes: bp-based frame
.text:00002FF4
.text:00002FF4 ; int __stdcall NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:00002FF4                 public ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z
.text:00002FF4 ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z proc near
.text:00002FF4                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+2BAp
.text:00002FF4
.text:00002FF4 var_10          = dword ptr -10h
.text:00002FF4 var_C           = dword ptr -0Ch
.text:00002FF4 var_8           = dword ptr -8
.text:00002FF4 var_4           = dword ptr -4
.text:00002FF4 arg_0           = dword ptr  8
.text:00002FF4
.text:00002FF4                 push    ebp
.text:00002FF5                 mov     ebp, esp
.text:00002FF7                 sub     esp, 10h
.text:00002FFA                 mov     eax, 0CCCCCCCCh
.text:00002FFF                 mov     [ebp+var_10], eax
.text:00003002                 mov     [ebp+var_C], eax
.text:00003005                 mov     [ebp+var_8], eax
.text:00003008                 mov     [ebp+var_4], eax
.text:0000300B                 mov     [ebp+var_4], ecx
.text:0000300E                 push    10h             ; unsigned int
.text:00003010                 mov     ecx, [ebp+arg_0] ; this
.text:00003013                 call    ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z ; NCompress::NLzx::NBitStream::CDecoder::GetValue(uint)
.text:00003018                 mov     [ebp+var_C], eax
.text:0000301B                 mov     eax, [ebp+var_4]
.text:0000301E                 mov     ecx, [ebp+var_C]
.text:00003021                 cmp     ecx, [eax+24h]
.text:00003024                 jnb     short loc_303C
.text:00003026                 mov     edx, [ebp+var_C]
.text:00003029                 shr     edx, 7
.text:0000302C                 mov     eax, [ebp+var_4]
.text:0000302F                 movzx   ecx, byte ptr [eax+edx+46Ch]
.text:00003037                 mov     [ebp+var_8], ecx
.text:0000303A                 jmp     short loc_305E
.text:0000303C ; ---------------------------------------------------------------------------
.text:0000303C
.text:0000303C loc_303C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+30j
.text:0000303C                 mov     [ebp+var_8], 0Ah
.text:00003043                 jmp     short loc_304E
.text:00003045 ; ---------------------------------------------------------------------------
.text:00003045
.text:00003045 loc_3045:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+68j
.text:00003045                 mov     edx, [ebp+var_8]
.text:00003048                 add     edx, 1
.text:0000304B                 mov     [ebp+var_8], edx
.text:0000304E
.text:0000304E loc_304E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+4Fj
.text:0000304E                 mov     eax, [ebp+var_8]
.text:00003051                 mov     ecx, [ebp+var_4]
.text:00003054                 mov     edx, [ebp+var_C]
.text:00003057                 cmp     edx, [ecx+eax*4]
.text:0000305A                 jb      short loc_305E
.text:0000305C                 jmp     short loc_3045
.text:0000305E ; ---------------------------------------------------------------------------
.text:0000305E
.text:0000305E loc_305E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+46j
.text:0000305E                                         ; NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+66j
.text:0000305E                 mov     eax, [ebp+var_8]
.text:00003061                 push    eax             ; unsigned int
.text:00003062                 mov     ecx, [ebp+arg_0] ; this
.text:00003065                 call    ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z ; NCompress::NLzx::NBitStream::CDecoder::MovePos(uint)
.text:0000306A                 mov     ecx, [ebp+var_8]
.text:0000306D                 mov     edx, [ebp+var_4]
.text:00003070                 mov     eax, [ebp+var_C]
.text:00003073                 sub     eax, [edx+ecx*4-4]
.text:00003077                 mov     ecx, 10h
.text:0000307C                 sub     ecx, [ebp+var_8]
.text:0000307F                 shr     eax, cl
.text:00003081                 mov     ecx, [ebp+var_8]
.text:00003084                 mov     edx, [ebp+var_4]
.text:00003087                 add     eax, [edx+ecx*4+44h]
.text:0000308B                 mov     [ebp+var_10], eax
.text:0000308E                 cmp     [ebp+var_10], 0F9h ; '·'
.text:00003095                 jb      short loc_309C
.text:00003097                 or      eax, 0FFFFFFFFh
.text:0000309A                 jmp     short loc_30A9
.text:0000309C ; ---------------------------------------------------------------------------
.text:0000309C
.text:0000309C loc_309C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A1j
.text:0000309C                 mov     eax, [ebp+var_10]
.text:0000309F                 mov     ecx, [ebp+var_4]
.text:000030A2                 mov     eax, [ecx+eax*4+88h]
.text:000030A9
.text:000030A9 loc_30A9:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,249>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A6j
.text:000030A9                 add     esp, 10h
.text:000030AC                 cmp     ebp, esp
.text:000030AE                 call    __RTC_CheckEsp
.text:000030B3                 mov     esp, ebp
.text:000030B5                 pop     ebp
.text:000030B6                 retn    4
.text:000030B6 ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$0PJ@@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z endp
.text:000030B6
.text:000030B6 ; ---------------------------------------------------------------------------
.text:000030B9                 align 4
.text:000030B9 _text           ends
.text:000030B9
.text:000030BC ; ===========================================================================
.text:000030BC
.text:000030BC ; Segment type: Pure code
.text:000030BC ; Segment permissions: Read/Execute
.text:000030BC _text           segment para public 'CODE' use32
.text:000030BC                 assume cs:_text
.text:000030BC                 ;org 30BCh
.text:000030BC ; COMDAT (pick any)
.text:000030BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030BC
.text:000030BC ; =============== S U B R O U T I N E =======================================
.text:000030BC
.text:000030BC ; Attributes: bp-based frame
.text:000030BC
.text:000030BC ; int __stdcall NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)
.text:000030BC                 public ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z
.text:000030BC ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z proc near
.text:000030BC                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeSpec(uint)+382p
.text:000030BC
.text:000030BC var_10          = dword ptr -10h
.text:000030BC var_C           = dword ptr -0Ch
.text:000030BC var_8           = dword ptr -8
.text:000030BC var_4           = dword ptr -4
.text:000030BC arg_0           = dword ptr  8
.text:000030BC
.text:000030BC                 push    ebp
.text:000030BD                 mov     ebp, esp
.text:000030BF                 sub     esp, 10h
.text:000030C2                 mov     eax, 0CCCCCCCCh
.text:000030C7                 mov     [ebp+var_10], eax
.text:000030CA                 mov     [ebp+var_C], eax
.text:000030CD                 mov     [ebp+var_8], eax
.text:000030D0                 mov     [ebp+var_4], eax
.text:000030D3                 mov     [ebp+var_4], ecx
.text:000030D6                 push    10h             ; unsigned int
.text:000030D8                 mov     ecx, [ebp+arg_0] ; this
.text:000030DB                 call    ?GetValue@CDecoder@NBitStream@NLzx@NCompress@@QBEII@Z ; NCompress::NLzx::NBitStream::CDecoder::GetValue(uint)
.text:000030E0                 mov     [ebp+var_C], eax
.text:000030E3                 mov     eax, [ebp+var_4]
.text:000030E6                 mov     ecx, [ebp+var_C]
.text:000030E9                 cmp     ecx, [eax+24h]
.text:000030EC                 jnb     short loc_3104
.text:000030EE                 mov     edx, [ebp+var_C]
.text:000030F1                 shr     edx, 7
.text:000030F4                 mov     eax, [ebp+var_4]
.text:000030F7                 movzx   ecx, byte ptr [eax+edx+0A8h]
.text:000030FF                 mov     [ebp+var_8], ecx
.text:00003102                 jmp     short loc_3126
.text:00003104 ; ---------------------------------------------------------------------------
.text:00003104
.text:00003104 loc_3104:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+30j
.text:00003104                 mov     [ebp+var_8], 0Ah
.text:0000310B                 jmp     short loc_3116
.text:0000310D ; ---------------------------------------------------------------------------
.text:0000310D
.text:0000310D loc_310D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+68j
.text:0000310D                 mov     edx, [ebp+var_8]
.text:00003110                 add     edx, 1
.text:00003113                 mov     [ebp+var_8], edx
.text:00003116
.text:00003116 loc_3116:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+4Fj
.text:00003116                 mov     eax, [ebp+var_8]
.text:00003119                 mov     ecx, [ebp+var_4]
.text:0000311C                 mov     edx, [ebp+var_C]
.text:0000311F                 cmp     edx, [ecx+eax*4]
.text:00003122                 jb      short loc_3126
.text:00003124                 jmp     short loc_310D
.text:00003126 ; ---------------------------------------------------------------------------
.text:00003126
.text:00003126 loc_3126:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+46j
.text:00003126                                         ; NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+66j
.text:00003126                 mov     eax, [ebp+var_8]
.text:00003129                 push    eax             ; unsigned int
.text:0000312A                 mov     ecx, [ebp+arg_0] ; this
.text:0000312D                 call    ?MovePos@CDecoder@NBitStream@NLzx@NCompress@@QAEXI@Z ; NCompress::NLzx::NBitStream::CDecoder::MovePos(uint)
.text:00003132                 mov     ecx, [ebp+var_8]
.text:00003135                 mov     edx, [ebp+var_4]
.text:00003138                 mov     eax, [ebp+var_C]
.text:0000313B                 sub     eax, [edx+ecx*4-4]
.text:0000313F                 mov     ecx, 10h
.text:00003144                 sub     ecx, [ebp+var_8]
.text:00003147                 shr     eax, cl
.text:00003149                 mov     ecx, [ebp+var_8]
.text:0000314C                 mov     edx, [ebp+var_4]
.text:0000314F                 add     eax, [edx+ecx*4+44h]
.text:00003153                 mov     [ebp+var_10], eax
.text:00003156                 cmp     [ebp+var_10], 8
.text:0000315A                 jb      short loc_3161
.text:0000315C                 or      eax, 0FFFFFFFFh
.text:0000315F                 jmp     short loc_316E
.text:00003161 ; ---------------------------------------------------------------------------
.text:00003161
.text:00003161 loc_3161:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+9Ej
.text:00003161                 mov     eax, [ebp+var_10]
.text:00003164                 mov     ecx, [ebp+var_4]
.text:00003167                 mov     eax, [ecx+eax*4+88h]
.text:0000316E
.text:0000316E loc_316E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<16,8>::DecodeSymbol<NCompress::NLzx::NBitStream::CDecoder>(NCompress::NLzx::NBitStream::CDecoder *)+A3j
.text:0000316E                 add     esp, 10h
.text:00003171                 cmp     ebp, esp
.text:00003173                 call    __RTC_CheckEsp
.text:00003178                 mov     esp, ebp
.text:0000317A                 pop     ebp
.text:0000317B                 retn    4
.text:0000317B ??$DecodeSymbol@VCDecoder@NBitStream@NLzx@NCompress@@@?$CDecoder@$0BA@$07@NHuffman@NCompress@@QAEIPAVCDecoder@NBitStream@NLzx@2@@Z endp
.text:0000317B
.text:0000317B _text           ends
.text:0000317B
UNDEF:00003180 ; ===========================================================================
UNDEF:00003180
UNDEF:00003180 ; Segment type: Externs
UNDEF:00003180 ; UNDEF
UNDEF:00003180 ; void __cdecl operator delete(void *)
UNDEF:00003180                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0CDecoder@NLzx@NCompress@@QAE@_N@Z$3+4p
UNDEF:00003180                                         ; NCompress::NLzx::CDecoder::`scalar deleting destructor'(uint)+22p ...
UNDEF:00003184 ; void *__cdecl operator new(unsigned int)
UNDEF:00003184                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+ADp
UNDEF:00003188                 extrn ___security_cookie:near
UNDEF:00003188                                         ; DATA XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+25r
UNDEF:00003188                                         ; NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+18r ...
UNDEF:0000318C                 extrn ___CxxFrameHandler3:near
UNDEF:0000318C                                         ; CODE XREF: __ehhandler$??0CDecoder@NLzx@NCompress@@QAE@_N@Z+16j
UNDEF:0000318C                                         ; __ehhandler$?CodeReal@CDecoder@NLzx@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j ...
UNDEF:00003190 ; __fastcall __security_check_cookie(x)
UNDEF:00003190                 extrn @__security_check_cookie@4:near
UNDEF:00003190                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+19Dp
UNDEF:00003190                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+392p ...
UNDEF:00003194                 extrn __RTC_CheckEsp:near
UNDEF:00003194                                         ; CODE XREF: NCompress::NLzx::CDecoder::CDecoder(bool)+11Ep
UNDEF:00003194                                         ; NCompress::NLzx::CDecoder::Flush(void)+37p ...
UNDEF:00003198                 extrn __RTC_Shutdown:near
UNDEF:00003198                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000319C                 extrn __RTC_InitBase:near
UNDEF:0000319C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000031A0 ; const type_info::`vftable'
UNDEF:000031A0                 extrn ??_7type_info@@6B@:near
UNDEF:000031A0                                         ; DATA XREF: .data:NCompress::NLzx::CDecoder `RTTI Type Descriptor'o
UNDEF:000031A0                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:000031A4 ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:000031A4                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:000031A4                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:000031A8 ; const IID IID_IUnknown
UNDEF:000031A8                 extrn _IID_IUnknown:near
UNDEF:000031A8                                         ; DATA XREF: NCompress::NLzx::CDecoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000031A8                                         ; NCompress::NLzx::Cx86ConvertOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000031AC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000031AC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000031B0 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:000031B0                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:000031B0                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:000031B4 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:000031B4                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:000031B4                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:000031B8                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:000031B8                                         ; .rdata:00001768o ...
UNDEF:000031BC ; public: virtual long __stdcall NCompress::NLzx::Cx86ConvertOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:000031BC                 extrn ?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z:near
UNDEF:000031BC                                         ; DATA XREF: .rdata:00001838o
UNDEF:000031C0 ; __int32 __thiscall NCompress::NLzx::Cx86ConvertOutStream::Flush(NCompress::NLzx::Cx86ConvertOutStream *__hidden this)
UNDEF:000031C0                 extrn ?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ:near
UNDEF:000031C0                                         ; CODE XREF: NCompress::NLzx::CDecoder::Flush(void)+2Dp
UNDEF:000031C4 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:000031C4                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:000031C4                                         ; CODE XREF: NCompress::NLzx::CDecoder::Flush(void)+11p
UNDEF:000031C8 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:000031C8                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:000031C8                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:000031CC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000031CC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000031CC                                         ; CODE XREF: NCompress::NLzx::CDecoder::ReadTable(uchar *,uchar *,uint)+190p
UNDEF:000031CC                                         ; NCompress::NLzx::CDecoder::ReadTables(void)+385p ...
UNDEF:000031D0 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:000031D0                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:000031D0                                         ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+12Bp
UNDEF:000031D0                                         ; CLzOutWindow::PutByte(uchar)+4Ep
UNDEF:000031D4 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:000031D4                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:000031D4                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Init(void)+11p
UNDEF:000031D8 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:000031D8                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:000031D8                                         ; CODE XREF: NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D9p
UNDEF:000031D8                                         ; NCompress::NLzx::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F1p ...
UNDEF:000031DC ; void __thiscall CLzOutWindow::Init(CLzOutWindow *__hidden this, bool)
UNDEF:000031DC                 extrn ?Init@CLzOutWindow@@QAEX_N@Z:near
UNDEF:000031DC                                         ; CODE XREF: NCompress::NLzx::CDecoder::SetOutStreamSize(unsigned __int64 const *)+4Ep
UNDEF:000031E0 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:000031E0                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:000031E0                                         ; CODE XREF: NCompress::NLzx::CDecoder::SetParams(uint)+67p
UNDEF:000031E4 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:000031E4                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:000031E4                                         ; CODE XREF: NCompress::NLzx::NBitStream::CDecoder::Create(uint)+15p
UNDEF:000031E4
UNDEF:000031E4