.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C70B4B4F5F51693CD050CF54CDF46F1D
.text:00000000 ; Input CRC32 : B6685E54
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipCrypto.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall NCrypto::NZip::CCipher::CryptoSetPassword(NCrypto::NZip::CCipher *this, const unsigned __int8 *, unsigned int)
.text:00000000                 public ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z
.text:00000000 ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z proc near
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 10h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_10], eax
.text:0000000E                 mov     [ebp+var_C], eax
.text:00000011                 mov     [ebp+var_8], eax
.text:00000014                 mov     [ebp+var_4], eax
.text:00000017                 mov     [ebp+var_4], 12345678h
.text:0000001E                 mov     [ebp+var_8], 23456789h
.text:00000025                 mov     [ebp+var_C], 34567890h
.text:0000002C                 mov     [ebp+var_10], 0
.text:00000033                 jmp     short loc_3E
.text:00000035 ; ---------------------------------------------------------------------------
.text:00000035
.text:00000035 loc_35:                                 ; CODE XREF: NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)+A1j
.text:00000035                 mov     eax, [ebp+var_10]
.text:00000038                 add     eax, 1
.text:0000003B                 mov     [ebp+var_10], eax
.text:0000003E
.text:0000003E loc_3E:                                 ; CODE XREF: NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)+33j
.text:0000003E                 mov     ecx, [ebp+var_10]
.text:00000041                 cmp     ecx, [ebp+arg_8]
.text:00000044                 jnb     short loc_A3
.text:00000046                 mov     edx, [ebp+arg_4]
.text:00000049                 add     edx, [ebp+var_10]
.text:0000004C                 movzx   eax, byte ptr [edx]
.text:0000004F                 xor     eax, [ebp+var_4]
.text:00000052                 and     eax, 0FFh
.text:00000057                 mov     ecx, [ebp+var_4]
.text:0000005A                 shr     ecx, 8
.text:0000005D                 xor     ecx, dword ptr ds:_g_CrcTable[eax*4]
.text:00000064                 mov     [ebp+var_4], ecx
.text:00000067                 mov     edx, [ebp+var_4]
.text:0000006A                 and     edx, 0FFh
.text:00000070                 add     edx, [ebp+var_8]
.text:00000073                 imul    edx, 8088405h
.text:00000079                 add     edx, 1
.text:0000007C                 mov     [ebp+var_8], edx
.text:0000007F                 mov     eax, [ebp+var_8]
.text:00000082                 shr     eax, 18h
.text:00000085                 movzx   ecx, al
.text:00000088                 xor     ecx, [ebp+var_C]
.text:0000008B                 and     ecx, 0FFh
.text:00000091                 mov     edx, [ebp+var_C]
.text:00000094                 shr     edx, 8
.text:00000097                 xor     edx, dword ptr ds:_g_CrcTable[ecx*4]
.text:0000009E                 mov     [ebp+var_C], edx
.text:000000A1                 jmp     short loc_35
.text:000000A3 ; ---------------------------------------------------------------------------
.text:000000A3
.text:000000A3 loc_A3:                                 ; CODE XREF: NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)+44j
.text:000000A3                 mov     eax, [ebp+this]
.text:000000A6                 mov     ecx, [ebp+var_4]
.text:000000A9                 mov     [eax+14h], ecx
.text:000000AC                 mov     edx, [ebp+this]
.text:000000AF                 mov     eax, [ebp+var_8]
.text:000000B2                 mov     [edx+18h], eax
.text:000000B5                 mov     ecx, [ebp+this]
.text:000000B8                 mov     edx, [ebp+var_C]
.text:000000BB                 mov     [ecx+1Ch], edx
.text:000000BE                 xor     eax, eax
.text:000000C0                 mov     esp, ebp
.text:000000C2                 pop     ebp
.text:000000C3                 retn    0Ch
.text:000000C3 ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z endp
.text:000000C3
.text:000000C3 ; ---------------------------------------------------------------------------
.text:000000C6                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __int32 __stdcall NCrypto::NZip::CCipher::Init(NCrypto::NZip::CCipher *this)
.text:000000D0                 public ?Init@CCipher@NZip@NCrypto@@UAGJXZ
.text:000000D0 ?Init@CCipher@NZip@NCrypto@@UAGJXZ proc near
.text:000000D0
.text:000000D0 this            = dword ptr  8
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 xor     eax, eax
.text:000000D5                 pop     ebp
.text:000000D6                 retn    4
.text:000000D6 ?Init@CCipher@NZip@NCrypto@@UAGJXZ endp
.text:000000D6
.text:000000D6 ; ---------------------------------------------------------------------------
.text:000000D9                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; __int32 __thiscall NCrypto::NZip::CEncoder::WriteHeader_Check16(NCrypto::NZip::CEncoder *this, struct ISequentialOutStream *, unsigned __int16)
.text:000000E0                 public ?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z
.text:000000E0 ?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z proc near
.text:000000E0
.text:000000E0 var_1C          = dword ptr -1Ch
.text:000000E0 var_18          = byte ptr -18h
.text:000000E0 var_14          = dword ptr -14h
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_8           = dword ptr -8
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0 arg_4           = word ptr  0Ch
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 sub     esp, 1Ch
.text:000000E6                 push    esi
.text:000000E7                 mov     eax, 0CCCCCCCCh
.text:000000EC                 mov     [ebp+var_1C], eax
.text:000000EF                 mov     dword ptr [ebp+var_18], eax
.text:000000F2                 mov     [ebp+var_14], eax
.text:000000F5                 mov     [ebp+var_10], eax
.text:000000F8                 mov     [ebp+var_C], eax
.text:000000FB                 mov     [ebp+var_8], eax
.text:000000FE                 mov     [ebp+var_4], eax
.text:00000101                 mov     eax, dword ptr ds:___security_cookie
.text:00000106                 xor     eax, ebp
.text:00000108                 mov     [ebp+var_4], eax
.text:0000010B                 mov     [ebp+var_8], ecx
.text:0000010E                 push    0Bh             ; unsigned int
.text:00000110                 lea     eax, [ebp+var_18]
.text:00000113                 push    eax             ; unsigned __int8 *
.text:00000114                 mov     ecx, offset ?g_RandomGenerator@@3VCRandomGenerator@@A ; this
.text:00000119                 call    ?Generate@CRandomGenerator@@QAEXPAEI@Z ; CRandomGenerator::Generate(uchar *,uint)
.text:0000011E                 movzx   ecx, [ebp+arg_4]
.text:00000122                 sar     ecx, 8
.text:00000125                 mov     byte ptr [ebp+var_10+3], cl
.text:00000128                 mov     ecx, [ebp+var_8] ; this
.text:0000012B                 call    ?RestoreKeys@CCipher@NZip@NCrypto@@IAEXXZ ; NCrypto::NZip::CCipher::RestoreKeys(void)
.text:00000130                 mov     esi, esp
.text:00000132                 push    0Ch
.text:00000134                 lea     edx, [ebp+var_18]
.text:00000137                 push    edx
.text:00000138                 mov     eax, [ebp+var_8]
.text:0000013B                 mov     ecx, [eax]
.text:0000013D                 mov     edx, [ebp+var_8]
.text:00000140                 push    edx
.text:00000141                 mov     eax, [ecx+10h]
.text:00000144                 call    eax
.text:00000146                 cmp     esi, esp
.text:00000148                 call    __RTC_CheckEsp
.text:0000014D                 push    0Ch             ; unsigned int
.text:0000014F                 lea     ecx, [ebp+var_18]
.text:00000152                 push    ecx             ; void *
.text:00000153                 mov     edx, [ebp+arg_0]
.text:00000156                 push    edx             ; struct ISequentialOutStream *
.text:00000157                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000015C                 push    edx
.text:0000015D                 mov     ecx, ebp
.text:0000015F                 push    eax
.text:00000160                 lea     edx, $LN5
.text:00000166                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000016B                 pop     eax
.text:0000016C                 pop     edx
.text:0000016D                 pop     esi
.text:0000016E                 mov     ecx, [ebp+var_4]
.text:00000171                 xor     ecx, ebp
.text:00000173                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000178                 add     esp, 1Ch
.text:0000017B                 cmp     ebp, esp
.text:0000017D                 call    __RTC_CheckEsp
.text:00000182                 mov     esp, ebp
.text:00000184                 pop     ebp
.text:00000185                 retn    8
.text:00000185 ?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z endp
.text:00000185
.text:00000185 ; ---------------------------------------------------------------------------
.text:00000188 $LN5            dd 1                    ; DATA XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+80o
.text:0000018C                 dd offset $LN4
.text:00000190 $LN4            dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:0000018Co
.text:00000198                 dd offset $LN3
.text:0000019C $LN3            dd 0CCCC0068h           ; DATA XREF: .text:00000198o
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; public: virtual unsigned int __stdcall NCrypto::NZip::CEncoder::Filter(unsigned char *, unsigned int)
.text:000001A0                 public ?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z
.text:000001A0 ?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z proc near
.text:000001A0
.text:000001A0 var_18          = dword ptr -18h
.text:000001A0 var_14          = dword ptr -14h
.text:000001A0 var_10          = dword ptr -10h
.text:000001A0 var_C           = dword ptr -0Ch
.text:000001A0 var_8           = dword ptr -8
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0 arg_4           = dword ptr  0Ch
.text:000001A0 arg_8           = dword ptr  10h
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 sub     esp, 18h
.text:000001A6                 mov     eax, 0CCCCCCCCh
.text:000001AB                 mov     [ebp+var_18], eax
.text:000001AE                 mov     [ebp+var_14], eax
.text:000001B1                 mov     [ebp+var_10], eax
.text:000001B4                 mov     [ebp+var_C], eax
.text:000001B7                 mov     [ebp+var_8], eax
.text:000001BA                 mov     [ebp+var_4], eax
.text:000001BD                 mov     eax, [ebp+arg_0]
.text:000001C0                 mov     ecx, [eax+0Ch]
.text:000001C3                 mov     [ebp+var_4], ecx
.text:000001C6                 mov     edx, [ebp+arg_0]
.text:000001C9                 mov     eax, [edx+10h]
.text:000001CC                 mov     [ebp+var_8], eax
.text:000001CF                 mov     ecx, [ebp+arg_0]
.text:000001D2                 mov     edx, [ecx+14h]
.text:000001D5                 mov     [ebp+var_C], edx
.text:000001D8                 mov     [ebp+var_10], 0
.text:000001DF                 jmp     short loc_1EA
.text:000001E1 ; ---------------------------------------------------------------------------
.text:000001E1
.text:000001E1 loc_1E1:                                ; CODE XREF: NCrypto::NZip::CEncoder::Filter(uchar *,uint)+DEj
.text:000001E1                 mov     eax, [ebp+var_10]
.text:000001E4                 add     eax, 1
.text:000001E7                 mov     [ebp+var_10], eax
.text:000001EA
.text:000001EA loc_1EA:                                ; CODE XREF: NCrypto::NZip::CEncoder::Filter(uchar *,uint)+3Fj
.text:000001EA                 mov     ecx, [ebp+var_10]
.text:000001ED                 cmp     ecx, [ebp+arg_8]
.text:000001F0                 jnb     loc_283
.text:000001F6                 mov     edx, [ebp+arg_4]
.text:000001F9                 add     edx, [ebp+var_10]
.text:000001FC                 mov     al, [edx]
.text:000001FE                 mov     byte ptr [ebp+var_14+3], al
.text:00000201                 mov     ecx, [ebp+var_C]
.text:00000204                 or      ecx, 2
.text:00000207                 mov     [ebp+var_18], ecx
.text:0000020A                 movzx   edx, byte ptr [ebp+var_14+3]
.text:0000020E                 mov     eax, [ebp+var_18]
.text:00000211                 xor     eax, 1
.text:00000214                 imul    eax, [ebp+var_18]
.text:00000218                 shr     eax, 8
.text:0000021B                 movzx   ecx, al
.text:0000021E                 xor     edx, ecx
.text:00000220                 mov     eax, [ebp+arg_4]
.text:00000223                 add     eax, [ebp+var_10]
.text:00000226                 mov     [eax], dl
.text:00000228                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:0000022C                 xor     ecx, [ebp+var_4]
.text:0000022F                 and     ecx, 0FFh
.text:00000235                 mov     edx, [ebp+var_4]
.text:00000238                 shr     edx, 8
.text:0000023B                 xor     edx, dword ptr ds:_g_CrcTable[ecx*4]
.text:00000242                 mov     [ebp+var_4], edx
.text:00000245                 mov     eax, [ebp+var_4]
.text:00000248                 and     eax, 0FFh
.text:0000024D                 add     eax, [ebp+var_8]
.text:00000250                 imul    eax, 8088405h
.text:00000256                 add     eax, 1
.text:00000259                 mov     [ebp+var_8], eax
.text:0000025C                 mov     ecx, [ebp+var_8]
.text:0000025F                 shr     ecx, 18h
.text:00000262                 movzx   edx, cl
.text:00000265                 xor     edx, [ebp+var_C]
.text:00000268                 and     edx, 0FFh
.text:0000026E                 mov     eax, [ebp+var_C]
.text:00000271                 shr     eax, 8
.text:00000274                 xor     eax, dword ptr ds:_g_CrcTable[edx*4]
.text:0000027B                 mov     [ebp+var_C], eax
.text:0000027E                 jmp     loc_1E1
.text:00000283 ; ---------------------------------------------------------------------------
.text:00000283
.text:00000283 loc_283:                                ; CODE XREF: NCrypto::NZip::CEncoder::Filter(uchar *,uint)+50j
.text:00000283                 mov     ecx, [ebp+arg_0]
.text:00000286                 mov     edx, [ebp+var_4]
.text:00000289                 mov     [ecx+0Ch], edx
.text:0000028C                 mov     eax, [ebp+arg_0]
.text:0000028F                 mov     ecx, [ebp+var_8]
.text:00000292                 mov     [eax+10h], ecx
.text:00000295                 mov     edx, [ebp+arg_0]
.text:00000298                 mov     eax, [ebp+var_C]
.text:0000029B                 mov     [edx+14h], eax
.text:0000029E                 mov     eax, [ebp+arg_8]
.text:000002A1                 mov     esp, ebp
.text:000002A3                 pop     ebp
.text:000002A4                 retn    0Ch
.text:000002A4 ?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z endp
.text:000002A4
.text:000002A4 ; ---------------------------------------------------------------------------
.text:000002A7                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; __int32 __thiscall NCrypto::NZip::CDecoder::ReadHeader(NCrypto::NZip::CDecoder *this, struct ISequentialInStream *)
.text:000002B0                 public ?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z
.text:000002B0 ?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z proc near
.text:000002B0
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 arg_0           = dword ptr  8
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 push    ecx
.text:000002B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002BB                 mov     [ebp+var_4], ecx
.text:000002BE                 push    0Ch             ; unsigned int
.text:000002C0                 mov     eax, [ebp+var_4]
.text:000002C3                 add     eax, 24h ; '$'
.text:000002C6                 push    eax             ; void *
.text:000002C7                 mov     ecx, [ebp+arg_0]
.text:000002CA                 push    ecx             ; struct ISequentialInStream *
.text:000002CB                 call    ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FAIL(ISequentialInStream *,void *,uint)
.text:000002D0                 add     esp, 4
.text:000002D3                 cmp     ebp, esp
.text:000002D5                 call    __RTC_CheckEsp
.text:000002DA                 mov     esp, ebp
.text:000002DC                 pop     ebp
.text:000002DD                 retn    4
.text:000002DD ?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z endp
.text:000002DD
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; void __thiscall NCrypto::NZip::CDecoder::Init_BeforeDecode(NCrypto::NZip::CDecoder *__hidden this)
.text:000002E0                 public ?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ
.text:000002E0 ?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ proc near
.text:000002E0
.text:000002E0 var_4           = dword ptr -4
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 push    ecx
.text:000002E4                 push    esi
.text:000002E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002EC                 mov     [ebp+var_4], ecx
.text:000002EF                 mov     ecx, [ebp+var_4] ; this
.text:000002F2                 call    ?RestoreKeys@CCipher@NZip@NCrypto@@IAEXXZ ; NCrypto::NZip::CCipher::RestoreKeys(void)
.text:000002F7                 mov     esi, esp
.text:000002F9                 push    0Ch
.text:000002FB                 mov     eax, [ebp+var_4]
.text:000002FE                 add     eax, 24h ; '$'
.text:00000301                 push    eax
.text:00000302                 mov     ecx, [ebp+var_4]
.text:00000305                 mov     edx, [ecx]
.text:00000307                 mov     eax, [ebp+var_4]
.text:0000030A                 push    eax
.text:0000030B                 mov     ecx, [edx+10h]
.text:0000030E                 call    ecx
.text:00000310                 cmp     esi, esp
.text:00000312                 call    __RTC_CheckEsp
.text:00000317                 pop     esi
.text:00000318                 add     esp, 4
.text:0000031B                 cmp     ebp, esp
.text:0000031D                 call    __RTC_CheckEsp
.text:00000322                 mov     esp, ebp
.text:00000324                 pop     ebp
.text:00000325                 retn
.text:00000325 ?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ endp
.text:00000325
.text:00000325 ; ---------------------------------------------------------------------------
.text:00000326                 align 10h
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; public: virtual unsigned int __stdcall NCrypto::NZip::CDecoder::Filter(unsigned char *, unsigned int)
.text:00000330                 public ?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z
.text:00000330 ?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z proc near
.text:00000330
.text:00000330 var_18          = dword ptr -18h
.text:00000330 var_14          = dword ptr -14h
.text:00000330 var_10          = dword ptr -10h
.text:00000330 var_C           = dword ptr -0Ch
.text:00000330 var_8           = dword ptr -8
.text:00000330 var_4           = dword ptr -4
.text:00000330 arg_0           = dword ptr  8
.text:00000330 arg_4           = dword ptr  0Ch
.text:00000330 arg_8           = dword ptr  10h
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 sub     esp, 18h
.text:00000336                 mov     eax, 0CCCCCCCCh
.text:0000033B                 mov     [ebp+var_18], eax
.text:0000033E                 mov     [ebp+var_14], eax
.text:00000341                 mov     [ebp+var_10], eax
.text:00000344                 mov     [ebp+var_C], eax
.text:00000347                 mov     [ebp+var_8], eax
.text:0000034A                 mov     [ebp+var_4], eax
.text:0000034D                 mov     eax, [ebp+arg_0]
.text:00000350                 mov     ecx, [eax+0Ch]
.text:00000353                 mov     [ebp+var_4], ecx
.text:00000356                 mov     edx, [ebp+arg_0]
.text:00000359                 mov     eax, [edx+10h]
.text:0000035C                 mov     [ebp+var_8], eax
.text:0000035F                 mov     ecx, [ebp+arg_0]
.text:00000362                 mov     edx, [ecx+14h]
.text:00000365                 mov     [ebp+var_C], edx
.text:00000368                 mov     [ebp+var_10], 0
.text:0000036F                 jmp     short loc_37A
.text:00000371 ; ---------------------------------------------------------------------------
.text:00000371
.text:00000371 loc_371:                                ; CODE XREF: NCrypto::NZip::CDecoder::Filter(uchar *,uint)+DEj
.text:00000371                 mov     eax, [ebp+var_10]
.text:00000374                 add     eax, 1
.text:00000377                 mov     [ebp+var_10], eax
.text:0000037A
.text:0000037A loc_37A:                                ; CODE XREF: NCrypto::NZip::CDecoder::Filter(uchar *,uint)+3Fj
.text:0000037A                 mov     ecx, [ebp+var_10]
.text:0000037D                 cmp     ecx, [ebp+arg_8]
.text:00000380                 jnb     loc_413
.text:00000386                 mov     edx, [ebp+var_C]
.text:00000389                 or      edx, 2
.text:0000038C                 mov     [ebp+var_14], edx
.text:0000038F                 mov     eax, [ebp+arg_4]
.text:00000392                 add     eax, [ebp+var_10]
.text:00000395                 movzx   ecx, byte ptr [eax]
.text:00000398                 mov     edx, [ebp+var_14]
.text:0000039B                 xor     edx, 1
.text:0000039E                 imul    edx, [ebp+var_14]
.text:000003A2                 shr     edx, 8
.text:000003A5                 movzx   eax, dl
.text:000003A8                 xor     ecx, eax
.text:000003AA                 mov     byte ptr [ebp+var_18+3], cl
.text:000003AD                 movzx   ecx, byte ptr [ebp+var_18+3]
.text:000003B1                 xor     ecx, [ebp+var_4]
.text:000003B4                 and     ecx, 0FFh
.text:000003BA                 mov     edx, [ebp+var_4]
.text:000003BD                 shr     edx, 8
.text:000003C0                 xor     edx, dword ptr ds:_g_CrcTable[ecx*4]
.text:000003C7                 mov     [ebp+var_4], edx
.text:000003CA                 mov     eax, [ebp+var_4]
.text:000003CD                 and     eax, 0FFh
.text:000003D2                 add     eax, [ebp+var_8]
.text:000003D5                 imul    eax, 8088405h
.text:000003DB                 add     eax, 1
.text:000003DE                 mov     [ebp+var_8], eax
.text:000003E1                 mov     ecx, [ebp+var_8]
.text:000003E4                 shr     ecx, 18h
.text:000003E7                 movzx   edx, cl
.text:000003EA                 xor     edx, [ebp+var_C]
.text:000003ED                 and     edx, 0FFh
.text:000003F3                 mov     eax, [ebp+var_C]
.text:000003F6                 shr     eax, 8
.text:000003F9                 xor     eax, dword ptr ds:_g_CrcTable[edx*4]
.text:00000400                 mov     [ebp+var_C], eax
.text:00000403                 mov     ecx, [ebp+arg_4]
.text:00000406                 add     ecx, [ebp+var_10]
.text:00000409                 mov     dl, byte ptr [ebp+var_18+3]
.text:0000040C                 mov     [ecx], dl
.text:0000040E                 jmp     loc_371
.text:00000413 ; ---------------------------------------------------------------------------
.text:00000413
.text:00000413 loc_413:                                ; CODE XREF: NCrypto::NZip::CDecoder::Filter(uchar *,uint)+50j
.text:00000413                 mov     eax, [ebp+arg_0]
.text:00000416                 mov     ecx, [ebp+var_4]
.text:00000419                 mov     [eax+0Ch], ecx
.text:0000041C                 mov     edx, [ebp+arg_0]
.text:0000041F                 mov     eax, [ebp+var_8]
.text:00000422                 mov     [edx+10h], eax
.text:00000425                 mov     ecx, [ebp+arg_0]
.text:00000428                 mov     edx, [ebp+var_C]
.text:0000042B                 mov     [ecx+14h], edx
.text:0000042E                 mov     eax, [ebp+arg_8]
.text:00000431                 mov     esp, ebp
.text:00000433                 pop     ebp
.text:00000434                 retn    0Ch
.text:00000434 ?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z endp
.text:00000434
.text:00000434 ; ---------------------------------------------------------------------------
.text:00000437                 align 4
.text:00000437 _text           ends
.text:00000437
.rtc$TMZ:00000438 ; ===========================================================================
.rtc$TMZ:00000438
.rtc$TMZ:00000438 ; Segment type: Pure data
.rtc$TMZ:00000438 ; Segment permissions: Read
.rtc$TMZ:00000438 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000438                 assume cs:_rtc$TMZ
.rtc$TMZ:00000438                 ;org 438h
.rtc$TMZ:00000438 ; COMDAT (pick any)
.rtc$TMZ:00000438 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000438 _rtc$TMZ        ends
.rtc$TMZ:00000438
.rtc$IMZ:0000043C ; ===========================================================================
.rtc$IMZ:0000043C
.rtc$IMZ:0000043C ; Segment type: Pure data
.rtc$IMZ:0000043C ; Segment permissions: Read
.rtc$IMZ:0000043C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000043C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000043C                 ;org 43Ch
.rtc$IMZ:0000043C ; COMDAT (pick any)
.rtc$IMZ:0000043C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000043C _rtc$IMZ        ends
.rtc$IMZ:0000043C
.text:00000440 ; ===========================================================================
.text:00000440
.text:00000440 ; Segment type: Pure code
.text:00000440 ; Segment permissions: Read/Execute
.text:00000440 _text           segment para public 'CODE' use32
.text:00000440                 assume cs:_text
.text:00000440                 ;org 440h
.text:00000440 ; COMDAT (pick any)
.text:00000440                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; void __thiscall NCrypto::NZip::CCipher::RestoreKeys(NCrypto::NZip::CCipher *__hidden this)
.text:00000440                 public ?RestoreKeys@CCipher@NZip@NCrypto@@IAEXXZ
.text:00000440 ?RestoreKeys@CCipher@NZip@NCrypto@@IAEXXZ proc near
.text:00000440                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+4Bp
.text:00000440                                         ; NCrypto::NZip::CDecoder::Init_BeforeDecode(void)+12p
.text:00000440
.text:00000440 var_4           = dword ptr -4
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 push    ecx
.text:00000444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044B                 mov     [ebp+var_4], ecx
.text:0000044E                 mov     eax, [ebp+var_4]
.text:00000451                 mov     ecx, [ebp+var_4]
.text:00000454                 mov     edx, [ecx+18h]
.text:00000457                 mov     [eax+0Ch], edx
.text:0000045A                 mov     eax, [ebp+var_4]
.text:0000045D                 mov     ecx, [ebp+var_4]
.text:00000460                 mov     edx, [ecx+1Ch]
.text:00000463                 mov     [eax+10h], edx
.text:00000466                 mov     eax, [ebp+var_4]
.text:00000469                 mov     ecx, [ebp+var_4]
.text:0000046C                 mov     edx, [ecx+20h]
.text:0000046F                 mov     [eax+14h], edx
.text:00000472                 mov     esp, ebp
.text:00000474                 pop     ebp
.text:00000475                 retn
.text:00000475 ?RestoreKeys@CCipher@NZip@NCrypto@@IAEXXZ endp
.text:00000475
.text:00000475 _text           ends
.text:00000475
UNDEF:00000480 ; ===========================================================================
UNDEF:00000480
UNDEF:00000480 ; Segment type: Externs
UNDEF:00000480 ; UNDEF
UNDEF:00000480                 extrn _g_CrcTable:near  ; DATA XREF: NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)+5Dr
UNDEF:00000480                                         ; NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)+97r ...
UNDEF:00000484                 extrn __RTC_Shutdown:near
UNDEF:00000484                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000488                 extrn __RTC_InitBase:near
UNDEF:00000488                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000048C ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:0000048C                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:0000048C                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+77p
UNDEF:00000490 ; void __thiscall CRandomGenerator::Generate(CRandomGenerator *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00000490                 extrn ?Generate@CRandomGenerator@@QAEXPAEI@Z:near
UNDEF:00000490                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+39p
UNDEF:00000494 ; CRandomGenerator g_RandomGenerator
UNDEF:00000494                 extrn ?g_RandomGenerator@@3VCRandomGenerator@@A:near
UNDEF:00000494                                         ; DATA XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+34o
UNDEF:00000498                 extrn ___security_cookie:near
UNDEF:00000498                                         ; DATA XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+21r
UNDEF:0000049C ; __fastcall __security_check_cookie(x)
UNDEF:0000049C                 extrn @__security_check_cookie@4:near
UNDEF:0000049C                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+93p
UNDEF:000004A0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000004A0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000004A0                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+86p
UNDEF:000004A4                 extrn __RTC_CheckEsp:near
UNDEF:000004A4                                         ; CODE XREF: NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+68p
UNDEF:000004A4                                         ; NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)+9Dp ...
UNDEF:000004A8 ; __int32 __stdcall ReadStream_FAIL(struct ISequentialInStream *, void *, unsigned int)
UNDEF:000004A8                 extrn ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:000004A8                                         ; CODE XREF: NCrypto::NZip::CDecoder::ReadHeader(ISequentialInStream *)+1Bp
UNDEF:000004A8
UNDEF:000004A8
UNDEF:000004A8                 end