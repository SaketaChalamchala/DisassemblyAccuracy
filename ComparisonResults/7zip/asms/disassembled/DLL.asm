.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 0B464EFE11BA9B18C95036461B6A7A84
.rdata:00000000 ; Input CRC32 : B08798B8
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DLL.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67146:                               ; DATA XREF: NWindows::NDLL::GetModuleDirPrefix(void):loc_433o
.rdata:00000000                 unicode 0, <.\>,0
.rdata:00000006                 align 4
.rdata:00000006 _rdata          ends
.rdata:00000006
.text:00000008 ; ===========================================================================
.text:00000008
.text:00000008 ; Segment type: Pure code
.text:00000008 ; Segment permissions: Read/Execute
.text:00000008 _text           segment para public 'CODE' use32
.text:00000008                 assume cs:_text
.text:00000008                 ;org 8
.text:00000008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000008
.text:00000008 ; =============== S U B R O U T I N E =======================================
.text:00000008
.text:00000008 ; Attributes: bp-based frame
.text:00000008
.text:00000008 ; bool __thiscall NWindows::NDLL::CLibrary::Free(NWindows::NDLL::CLibrary *__hidden this)
.text:00000008                 public ?Free@CLibrary@NDLL@NWindows@@QAE_NXZ
.text:00000008 ?Free@CLibrary@NDLL@NWindows@@QAE_NXZ proc near
.text:00000008                                         ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+1Ep
.text:00000008                                         ; NWindows::NDLL::CLibrary::Load(wchar_t const *)+1Ep
.text:00000008
.text:00000008 var_4           = dword ptr -4
.text:00000008
.text:00000008                 push    ebp
.text:00000009                 mov     ebp, esp
.text:0000000B                 push    ecx
.text:0000000C                 push    esi
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     eax, [ebp+var_4]
.text:0000001A                 cmp     dword ptr [eax], 0
.text:0000001D                 jnz     short loc_23
.text:0000001F                 mov     al, 1
.text:00000021                 jmp     short loc_4B
.text:00000023 ; ---------------------------------------------------------------------------
.text:00000023
.text:00000023 loc_23:                                 ; CODE XREF: NWindows::NDLL::CLibrary::Free(void)+15j
.text:00000023                 mov     esi, esp
.text:00000025                 mov     ecx, [ebp+var_4]
.text:00000028                 mov     edx, [ecx]
.text:0000002A                 push    edx             ; hLibModule
.text:0000002B                 call    dword ptr ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
.text:00000031                 cmp     esi, esp
.text:00000033                 call    __RTC_CheckEsp
.text:00000038                 test    eax, eax
.text:0000003A                 jnz     short loc_40
.text:0000003C                 xor     al, al
.text:0000003E                 jmp     short loc_4B
.text:00000040 ; ---------------------------------------------------------------------------
.text:00000040
.text:00000040 loc_40:                                 ; CODE XREF: NWindows::NDLL::CLibrary::Free(void)+32j
.text:00000040                 mov     eax, [ebp+var_4]
.text:00000043                 mov     dword ptr [eax], 0
.text:00000049                 mov     al, 1
.text:0000004B
.text:0000004B loc_4B:                                 ; CODE XREF: NWindows::NDLL::CLibrary::Free(void)+19j
.text:0000004B                                         ; NWindows::NDLL::CLibrary::Free(void)+36j
.text:0000004B                 pop     esi
.text:0000004C                 add     esp, 4
.text:0000004F                 cmp     ebp, esp
.text:00000051                 call    __RTC_CheckEsp
.text:00000056                 mov     esp, ebp
.text:00000058                 pop     ebp
.text:00000059                 retn
.text:00000059 ?Free@CLibrary@NDLL@NWindows@@QAE_NXZ endp
.text:00000059
.text:00000059 ; ---------------------------------------------------------------------------
.text:0000005A                 db 0Eh dup(0CCh)
.text:00000068
.text:00000068 ; =============== S U B R O U T I N E =======================================
.text:00000068
.text:00000068 ; Attributes: bp-based frame
.text:00000068
.text:00000068 ; bool __thiscall NWindows::NDLL::CLibrary::LoadEx(NWindows::NDLL::CLibrary *this, LPCWSTR lpLibFileName, unsigned __int32)
.text:00000068                 public ?LoadEx@CLibrary@NDLL@NWindows@@QAE_NPB_WK@Z
.text:00000068 ?LoadEx@CLibrary@NDLL@NWindows@@QAE_NPB_WK@Z proc near
.text:00000068
.text:00000068 hFile           = dword ptr -10h
.text:00000068 var_C           = dword ptr -0Ch
.text:00000068 var_8           = dword ptr -8
.text:00000068 var_4           = dword ptr -4
.text:00000068 lpLibFileName   = dword ptr  8
.text:00000068 dwFlags         = dword ptr  0Ch
.text:00000068
.text:00000068                 push    ebp
.text:00000069                 mov     ebp, esp
.text:0000006B                 sub     esp, 10h
.text:0000006E                 push    esi
.text:0000006F                 mov     eax, 0CCCCCCCCh
.text:00000074                 mov     [ebp+hFile], eax
.text:00000077                 mov     [ebp+var_C], eax
.text:0000007A                 mov     [ebp+var_8], eax
.text:0000007D                 mov     [ebp+var_4], eax
.text:00000080                 mov     [ebp+var_4], ecx
.text:00000083                 mov     ecx, [ebp+var_4] ; this
.text:00000086                 call    ?Free@CLibrary@NDLL@NWindows@@QAE_NXZ ; NWindows::NDLL::CLibrary::Free(void)
.text:0000008B                 movzx   eax, al
.text:0000008E                 test    eax, eax
.text:00000090                 jnz     short loc_96
.text:00000092                 xor     al, al
.text:00000094                 jmp     short loc_105
.text:00000096 ; ---------------------------------------------------------------------------
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+28j
.text:00000096                 movzx   ecx, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000009D                 test    ecx, ecx
.text:0000009F                 jnz     short loc_DA
.text:000000A1                 mov     esi, esp
.text:000000A3                 mov     edx, [ebp+dwFlags]
.text:000000A6                 push    edx             ; dwFlags
.text:000000A7                 push    0               ; hFile
.text:000000A9                 mov     eax, [ebp+lpLibFileName]
.text:000000AC                 push    eax             ; dwFlags
.text:000000AD                 lea     ecx, [ebp+hFile]
.text:000000B0                 push    ecx             ; hFile
.text:000000B1                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:000000B6                 mov     ecx, eax
.text:000000B8                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000000BD                 push    eax             ; lpLibFileName
.text:000000BE                 call    dword ptr ds:__imp__LoadLibraryExA@12 ; LoadLibraryExA(x,x,x)
.text:000000C4                 cmp     esi, esp
.text:000000C6                 call    __RTC_CheckEsp
.text:000000CB                 mov     edx, [ebp+var_4]
.text:000000CE                 mov     [edx], eax
.text:000000D0                 lea     ecx, [ebp+hFile] ; this
.text:000000D3                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000000D8                 jmp     short loc_F8
.text:000000DA ; ---------------------------------------------------------------------------
.text:000000DA
.text:000000DA loc_DA:                                 ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+37j
.text:000000DA                 mov     esi, esp
.text:000000DC                 mov     eax, [ebp+dwFlags]
.text:000000DF                 push    eax             ; dwFlags
.text:000000E0                 push    0               ; hFile
.text:000000E2                 mov     ecx, [ebp+lpLibFileName]
.text:000000E5                 push    ecx             ; lpLibFileName
.text:000000E6                 call    dword ptr ds:__imp__LoadLibraryExW@12 ; LoadLibraryExW(x,x,x)
.text:000000EC                 cmp     esi, esp
.text:000000EE                 call    __RTC_CheckEsp
.text:000000F3                 mov     edx, [ebp+var_4]
.text:000000F6                 mov     [edx], eax
.text:000000F8
.text:000000F8 loc_F8:                                 ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+70j
.text:000000F8                 mov     eax, [ebp+var_4]
.text:000000FB                 xor     ecx, ecx
.text:000000FD                 cmp     dword ptr [eax], 0
.text:00000100                 setnz   cl
.text:00000103                 mov     al, cl
.text:00000105
.text:00000105 loc_105:                                ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+2Cj
.text:00000105                 pop     esi
.text:00000106                 add     esp, 10h
.text:00000109                 cmp     ebp, esp
.text:0000010B                 call    __RTC_CheckEsp
.text:00000110                 mov     esp, ebp
.text:00000112                 pop     ebp
.text:00000113                 retn    8
.text:00000113 ?LoadEx@CLibrary@NDLL@NWindows@@QAE_NPB_WK@Z endp
.text:00000113
.text:00000113 ; ---------------------------------------------------------------------------
.text:00000116                 align 4
.text:00000118
.text:00000118 ; =============== S U B R O U T I N E =======================================
.text:00000118
.text:00000118 ; Attributes: bp-based frame
.text:00000118
.text:00000118 ; bool __thiscall NWindows::NDLL::CLibrary::Load(NWindows::NDLL::CLibrary *this, const wchar_t *)
.text:00000118                 public ?Load@CLibrary@NDLL@NWindows@@QAE_NPB_W@Z
.text:00000118 ?Load@CLibrary@NDLL@NWindows@@QAE_NPB_W@Z proc near
.text:00000118
.text:00000118 var_10          = dword ptr -10h
.text:00000118 var_C           = dword ptr -0Ch
.text:00000118 var_8           = dword ptr -8
.text:00000118 var_4           = dword ptr -4
.text:00000118 lpLibFileName   = dword ptr  8
.text:00000118
.text:00000118                 push    ebp
.text:00000119                 mov     ebp, esp
.text:0000011B                 sub     esp, 10h
.text:0000011E                 push    esi
.text:0000011F                 mov     eax, 0CCCCCCCCh
.text:00000124                 mov     [ebp+var_10], eax
.text:00000127                 mov     [ebp+var_C], eax
.text:0000012A                 mov     [ebp+var_8], eax
.text:0000012D                 mov     [ebp+var_4], eax
.text:00000130                 mov     [ebp+var_4], ecx
.text:00000133                 mov     ecx, [ebp+var_4] ; this
.text:00000136                 call    ?Free@CLibrary@NDLL@NWindows@@QAE_NXZ ; NWindows::NDLL::CLibrary::Free(void)
.text:0000013B                 movzx   eax, al
.text:0000013E                 test    eax, eax
.text:00000140                 jnz     short loc_146
.text:00000142                 xor     al, al
.text:00000144                 jmp     short loc_1A7
.text:00000146 ; ---------------------------------------------------------------------------
.text:00000146
.text:00000146 loc_146:                                ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+28j
.text:00000146                 movzx   ecx, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000014D                 test    ecx, ecx
.text:0000014F                 jnz     short loc_184
.text:00000151                 mov     edx, [ebp+lpLibFileName]
.text:00000154                 push    edx
.text:00000155                 lea     eax, [ebp+var_10]
.text:00000158                 push    eax
.text:00000159                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:0000015E                 mov     ecx, eax
.text:00000160                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000165                 mov     esi, esp
.text:00000167                 push    eax             ; lpLibFileName
.text:00000168                 call    dword ptr ds:__imp__LoadLibraryA@4 ; LoadLibraryA(x)
.text:0000016E                 cmp     esi, esp
.text:00000170                 call    __RTC_CheckEsp
.text:00000175                 mov     ecx, [ebp+var_4]
.text:00000178                 mov     [ecx], eax
.text:0000017A                 lea     ecx, [ebp+var_10] ; this
.text:0000017D                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000182                 jmp     short loc_19C
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+37j
.text:00000184                 mov     esi, esp
.text:00000186                 mov     edx, [ebp+lpLibFileName]
.text:00000189                 push    edx             ; lpLibFileName
.text:0000018A                 call    dword ptr ds:__imp__LoadLibraryW@4 ; LoadLibraryW(x)
.text:00000190                 cmp     esi, esp
.text:00000192                 call    __RTC_CheckEsp
.text:00000197                 mov     ecx, [ebp+var_4]
.text:0000019A                 mov     [ecx], eax
.text:0000019C
.text:0000019C loc_19C:                                ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+6Aj
.text:0000019C                 mov     edx, [ebp+var_4]
.text:0000019F                 xor     eax, eax
.text:000001A1                 cmp     dword ptr [edx], 0
.text:000001A4                 setnz   al
.text:000001A7
.text:000001A7 loc_1A7:                                ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+2Cj
.text:000001A7                 pop     esi
.text:000001A8                 add     esp, 10h
.text:000001AB                 cmp     ebp, esp
.text:000001AD                 call    __RTC_CheckEsp
.text:000001B2                 mov     esp, ebp
.text:000001B4                 pop     ebp
.text:000001B5                 retn    4
.text:000001B5 ?Load@CLibrary@NDLL@NWindows@@QAE_NPB_W@Z endp
.text:000001B5
.text:000001B8
.text:000001B8 ; =============== S U B R O U T I N E =======================================
.text:000001B8
.text:000001B8 ; Attributes: bp-based frame
.text:000001B8
.text:000001B8 ; bool __stdcall NWindows::NDLL::MyGetModuleFileName(NWindows::NDLL *this, struct UString *)
.text:000001B8                 public ?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z
.text:000001B8 ?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z proc near
.text:000001B8                                         ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+59p
.text:000001B8
.text:000001B8 var_360         = dword ptr -360h
.text:000001B8 var_35C         = dword ptr -35Ch
.text:000001B8 var_358         = byte ptr -358h
.text:000001B8 var_34C         = byte ptr -34Ch
.text:000001B8 var_340         = dword ptr -340h
.text:000001B8 var_338         = word ptr -338h
.text:000001B8 var_128         = dword ptr -128h
.text:000001B8 Filename        = byte ptr -120h
.text:000001B8 hModule         = dword ptr -14h
.text:000001B8 var_10          = dword ptr -10h
.text:000001B8 var_C           = dword ptr -0Ch
.text:000001B8 var_4           = dword ptr -4
.text:000001B8 this            = dword ptr  8
.text:000001B8
.text:000001B8                 push    ebp
.text:000001B9                 mov     ebp, esp
.text:000001BB                 push    0FFFFFFFFh
.text:000001BD                 push    offset __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z
.text:000001C2                 mov     eax, large fs:0
.text:000001C8                 push    eax
.text:000001C9                 sub     esp, 354h
.text:000001CF                 push    esi
.text:000001D0                 push    edi
.text:000001D1                 lea     edi, [ebp+var_360]
.text:000001D7                 mov     ecx, 0D5h ; '+'
.text:000001DC                 mov     eax, 0CCCCCCCCh
.text:000001E1                 rep stosd
.text:000001E3                 mov     eax, dword ptr ds:___security_cookie
.text:000001E8                 xor     eax, ebp
.text:000001EA                 mov     [ebp+var_10], eax
.text:000001ED                 push    eax
.text:000001EE                 lea     eax, [ebp+var_C]
.text:000001F1                 mov     large fs:0, eax
.text:000001F7                 mov     eax, dword ptr ds:?g_hInstance@@3PAUHINSTANCE__@@A ; HINSTANCE__ * g_hInstance
.text:000001FC                 mov     [ebp+hModule], eax
.text:000001FF                 mov     ecx, [ebp+this] ; this
.text:00000202                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000207                 movzx   ecx, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000020E                 test    ecx, ecx
.text:00000210                 jnz     loc_2CF
.text:00000216                 mov     [ebp+Filename], 0
.text:0000021D                 mov     esi, esp
.text:0000021F                 push    105h            ; nSize
.text:00000224                 lea     edx, [ebp+Filename]
.text:0000022A                 push    edx             ; lpFilename
.text:0000022B                 mov     eax, [ebp+hModule]
.text:0000022E                 push    eax             ; hModule
.text:0000022F                 call    dword ptr ds:__imp__GetModuleFileNameA@12 ; GetModuleFileNameA(x,x,x)
.text:00000235                 cmp     esi, esp
.text:00000237                 call    __RTC_CheckEsp
.text:0000023C                 mov     [ebp+var_128], eax
.text:00000242                 cmp     [ebp+var_128], 104h
.text:0000024C                 ja      short loc_2CD
.text:0000024E                 cmp     [ebp+var_128], 0
.text:00000255                 jz      short loc_2CD
.text:00000257                 lea     ecx, [ebp+Filename]
.text:0000025D                 push    ecx             ; char *
.text:0000025E                 lea     ecx, [ebp+var_34C] ; this
.text:00000264                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000269                 mov     [ebp+var_4], 0
.text:00000270                 lea     edx, [ebp+var_34C]
.text:00000276                 push    edx
.text:00000277                 lea     eax, [ebp+var_358]
.text:0000027D                 push    eax
.text:0000027E                 call    ?fas2fs@@YG?AVUString@@ABVAString@@@Z ; fas2fs(AString const &)
.text:00000283                 mov     [ebp+var_35C], eax
.text:00000289                 mov     ecx, [ebp+var_35C]
.text:0000028F                 mov     [ebp+var_360], ecx
.text:00000295                 mov     byte ptr [ebp+var_4], 1
.text:00000299                 mov     edx, [ebp+var_360]
.text:0000029F                 push    edx
.text:000002A0                 mov     ecx, [ebp+this]
.text:000002A3                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000002A8                 mov     byte ptr [ebp+var_4], 0
.text:000002AC                 lea     ecx, [ebp+var_358] ; this
.text:000002B2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002BE                 lea     ecx, [ebp+var_34C] ; this
.text:000002C4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000002C9                 mov     al, 1
.text:000002CB                 jmp     short loc_327
.text:000002CD ; ---------------------------------------------------------------------------
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+94j
.text:000002CD                                         ; NWindows::NDLL::MyGetModuleFileName(UString &)+9Dj
.text:000002CD                 jmp     short loc_325
.text:000002CF ; ---------------------------------------------------------------------------
.text:000002CF
.text:000002CF loc_2CF:                                ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+58j
.text:000002CF                 xor     eax, eax
.text:000002D1                 mov     [ebp+var_338], ax
.text:000002D8                 mov     esi, esp
.text:000002DA                 push    105h            ; nSize
.text:000002DF                 lea     ecx, [ebp+var_338]
.text:000002E5                 push    ecx             ; lpFilename
.text:000002E6                 mov     edx, [ebp+hModule]
.text:000002E9                 push    edx             ; hModule
.text:000002EA                 call    dword ptr ds:__imp__GetModuleFileNameW@12 ; GetModuleFileNameW(x,x,x)
.text:000002F0                 cmp     esi, esp
.text:000002F2                 call    __RTC_CheckEsp
.text:000002F7                 mov     [ebp+var_340], eax
.text:000002FD                 cmp     [ebp+var_340], 104h
.text:00000307                 ja      short loc_325
.text:00000309                 cmp     [ebp+var_340], 0
.text:00000310                 jz      short loc_325
.text:00000312                 lea     eax, [ebp+var_338]
.text:00000318                 push    eax
.text:00000319                 mov     ecx, [ebp+this]
.text:0000031C                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000321                 mov     al, 1
.text:00000323                 jmp     short loc_327
.text:00000325 ; ---------------------------------------------------------------------------
.text:00000325
.text:00000325 loc_325:                                ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &):loc_2CDj
.text:00000325                                         ; NWindows::NDLL::MyGetModuleFileName(UString &)+14Fj ...
.text:00000325                 xor     al, al
.text:00000327
.text:00000327 loc_327:                                ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+113j
.text:00000327                                         ; NWindows::NDLL::MyGetModuleFileName(UString &)+16Bj
.text:00000327                 push    edx
.text:00000328                 mov     ecx, ebp
.text:0000032A                 push    eax
.text:0000032B                 lea     edx, $LN13
.text:00000331                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000336                 pop     eax
.text:00000337                 pop     edx
.text:00000338                 mov     ecx, [ebp+var_C]
.text:0000033B                 mov     large fs:0, ecx
.text:00000342                 pop     ecx
.text:00000343                 pop     edi
.text:00000344                 pop     esi
.text:00000345                 mov     ecx, [ebp+var_10]
.text:00000348                 xor     ecx, ebp
.text:0000034A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000034F                 add     esp, 360h
.text:00000355                 cmp     ebp, esp
.text:00000357                 call    __RTC_CheckEsp
.text:0000035C                 mov     esp, ebp
.text:0000035E                 pop     ebp
.text:0000035F                 retn    4
.text:0000035F ?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z endp
.text:0000035F
.text:0000035F ; ---------------------------------------------------------------------------
.text:00000362                 align 4
.text:00000364 $LN13           dd 2                    ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+173o
.text:00000368                 dd offset $LN12
.text:0000036C $LN12           dd 0FFFFFEE0h, 106h     ; DATA XREF: .text:00000368o
.text:00000374                 dd offset $LN9
.text:00000378                 dd 0FFFFFCC8h, 20Ch
.text:00000380                 dd offset $LN10
.text:00000384 ; ---------------------------------------------------------------------------
.text:00000384
.text:00000384 $LN10:                                  ; DATA XREF: .text:00000380o
.text:00000384                 jnb     short $+2
.text:00000386
.text:00000386 $LN9:                                   ; CODE XREF: .text:$LN10j
.text:00000386                                         ; DATA XREF: .text:00000374o
.text:00000386                 jnb     short $+2       ; NWindows::NDLL::GetModuleDirPrefix(void)
.text:00000388
.text:00000388 ; =============== S U B R O U T I N E =======================================
.text:00000388
.text:00000388 ; Attributes: bp-based frame
.text:00000388
.text:00000388 ; class UString __stdcall NWindows::NDLL::GetModuleDirPrefix(void)
.text:00000388                 public ?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ
.text:00000388 ?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ proc near
.text:00000388                                         ; CODE XREF: .text:$LN9j
.text:00000388
.text:00000388 var_28          = dword ptr -28h
.text:00000388 var_24          = dword ptr -24h
.text:00000388 var_20          = dword ptr -20h
.text:00000388 var_1C          = dword ptr -1Ch
.text:00000388 var_18          = dword ptr -18h
.text:00000388 var_14          = dword ptr -14h
.text:00000388 var_10          = dword ptr -10h
.text:00000388 var_C           = dword ptr -0Ch
.text:00000388 var_4           = dword ptr -4
.text:00000388 arg_0           = dword ptr  8
.text:00000388
.text:00000388                 push    ebp
.text:00000389                 mov     ebp, esp
.text:0000038B                 push    0FFFFFFFFh
.text:0000038D                 push    offset __ehhandler$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ
.text:00000392                 mov     eax, large fs:0
.text:00000398                 push    eax
.text:00000399                 sub     esp, 1Ch
.text:0000039C                 mov     eax, 0CCCCCCCCh
.text:000003A1                 mov     [ebp+var_28], eax
.text:000003A4                 mov     [ebp+var_24], eax
.text:000003A7                 mov     [ebp+var_20], eax
.text:000003AA                 mov     [ebp+var_1C], eax
.text:000003AD                 mov     [ebp+var_18], eax
.text:000003B0                 mov     [ebp+var_14], eax
.text:000003B3                 mov     [ebp+var_10], eax
.text:000003B6                 mov     eax, dword ptr ds:___security_cookie
.text:000003BB                 xor     eax, ebp
.text:000003BD                 push    eax             ; struct UString *
.text:000003BE                 lea     eax, [ebp+var_C]
.text:000003C1                 mov     large fs:0, eax
.text:000003C7                 mov     [ebp+var_28], 0
.text:000003CE                 lea     ecx, [ebp+var_1C]
.text:000003D1                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000003D6                 mov     [ebp+var_4], 1
.text:000003DD                 lea     eax, [ebp+var_1C]
.text:000003E0                 push    eax             ; this
.text:000003E1                 call    ?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z ; NWindows::NDLL::MyGetModuleFileName(UString &)
.text:000003E6                 movzx   ecx, al
.text:000003E9                 test    ecx, ecx
.text:000003EB                 jz      short loc_433
.text:000003ED                 lea     ecx, [ebp+var_1C] ; this
.text:000003F0                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:000003F5                 mov     [ebp+var_24], eax
.text:000003F8                 cmp     [ebp+var_24], 0
.text:000003FC                 jl      short loc_433
.text:000003FE                 mov     edx, [ebp+var_24]
.text:00000401                 add     edx, 1
.text:00000404                 push    edx             ; unsigned int
.text:00000405                 lea     ecx, [ebp+var_1C] ; this
.text:00000408                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:0000040D                 lea     eax, [ebp+var_1C]
.text:00000410                 push    eax
.text:00000411                 mov     ecx, [ebp+arg_0]
.text:00000414                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000419                 mov     ecx, [ebp+var_28]
.text:0000041C                 or      ecx, 1
.text:0000041F                 mov     [ebp+var_28], ecx
.text:00000422                 mov     byte ptr [ebp+var_4], 0
.text:00000426                 lea     ecx, [ebp+var_1C] ; this
.text:00000429                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000042E                 mov     eax, [ebp+arg_0]
.text:00000431                 jmp     short loc_458
.text:00000433 ; ---------------------------------------------------------------------------
.text:00000433
.text:00000433 loc_433:                                ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+63j
.text:00000433                                         ; NWindows::NDLL::GetModuleDirPrefix(void)+74j
.text:00000433                 push    offset $SG67146 ; ".\\"
.text:00000438                 mov     ecx, [ebp+arg_0]
.text:0000043B                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000440                 mov     edx, [ebp+var_28]
.text:00000443                 or      edx, 1
.text:00000446                 mov     [ebp+var_28], edx
.text:00000449                 mov     byte ptr [ebp+var_4], 0
.text:0000044D                 lea     ecx, [ebp+var_1C] ; this
.text:00000450                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000455                 mov     eax, [ebp+arg_0]
.text:00000458
.text:00000458 loc_458:                                ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+A9j
.text:00000458                 push    edx
.text:00000459                 mov     ecx, ebp
.text:0000045B                 push    eax
.text:0000045C                 lea     edx, $LN11
.text:00000462                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000467                 pop     eax
.text:00000468                 pop     edx
.text:00000469                 mov     ecx, [ebp+var_C]
.text:0000046C                 mov     large fs:0, ecx
.text:00000473                 pop     ecx
.text:00000474                 add     esp, 28h
.text:00000477                 cmp     ebp, esp
.text:00000479                 call    __RTC_CheckEsp
.text:0000047E                 mov     esp, ebp
.text:00000480                 pop     ebp
.text:00000481                 retn    4
.text:00000481 ?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ endp
.text:00000481
.text:00000481 ; ---------------------------------------------------------------------------
.text:00000484 $LN11           dd 1                    ; DATA XREF: NWindows::NDLL::GetModuleDirPrefix(void)+D4o
.text:00000488                 dd offset $LN10_0
.text:0000048C $LN10_0         dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00000488o
.text:00000494                 dd offset $LN8
.text:00000498 $LN8            db 73h, 0               ; DATA XREF: .text:00000494o
.text:0000049A                 align 4
.text:0000049A _text           ends
.text:0000049A
.rtc$TMZ:0000049C ; ===========================================================================
.rtc$TMZ:0000049C
.rtc$TMZ:0000049C ; Segment type: Pure data
.rtc$TMZ:0000049C ; Segment permissions: Read
.rtc$TMZ:0000049C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000049C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000049C                 ;org 49Ch
.rtc$TMZ:0000049C ; COMDAT (pick any)
.rtc$TMZ:0000049C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000049C _rtc$TMZ        ends
.rtc$TMZ:0000049C
.rtc$IMZ:000004A0 ; ===========================================================================
.rtc$IMZ:000004A0
.rtc$IMZ:000004A0 ; Segment type: Pure data
.rtc$IMZ:000004A0 ; Segment permissions: Read
.rtc$IMZ:000004A0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000004A0                 assume cs:_rtc$IMZ
.rtc$IMZ:000004A0                 ;org 4A0h
.rtc$IMZ:000004A0 ; COMDAT (pick any)
.rtc$IMZ:000004A0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000004A0 _rtc$IMZ        ends
.rtc$IMZ:000004A0
.text:000004A4 ; ===========================================================================
.text:000004A4
.text:000004A4 ; Segment type: Pure code
.text:000004A4 ; Segment permissions: Read/Execute
.text:000004A4 _text           segment para public 'CODE' use32
.text:000004A4                 assume cs:_text
.text:000004A4                 ;org 4A4h
.text:000004A4 ; COMDAT (pick any)
.text:000004A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004A4
.text:000004A4 ; =============== S U B R O U T I N E =======================================
.text:000004A4
.text:000004A4 ; Attributes: bp-based frame
.text:000004A4
.text:000004A4 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000004A4                 public ??1AString@@QAE@XZ
.text:000004A4 ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+6Bp
.text:000004A4                                         ; NWindows::NDLL::CLibrary::Load(wchar_t const *)+65p ...
.text:000004A4
.text:000004A4 var_8           = dword ptr -8
.text:000004A4 var_4           = dword ptr -4
.text:000004A4
.text:000004A4                 push    ebp
.text:000004A5                 mov     ebp, esp
.text:000004A7                 sub     esp, 8
.text:000004AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004B8                 mov     [ebp+var_4], ecx
.text:000004BB                 mov     eax, [ebp+var_4]
.text:000004BE                 mov     ecx, [eax]
.text:000004C0                 mov     [ebp+var_8], ecx
.text:000004C3                 mov     edx, [ebp+var_8]
.text:000004C6                 push    edx             ; void *
.text:000004C7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000004CC                 add     esp, 4
.text:000004CF                 add     esp, 8
.text:000004D2                 cmp     ebp, esp
.text:000004D4                 call    __RTC_CheckEsp
.text:000004D9                 mov     esp, ebp
.text:000004DB                 pop     ebp
.text:000004DC                 retn
.text:000004DC ??1AString@@QAE@XZ endp
.text:000004DC
.text:000004DC ; ---------------------------------------------------------------------------
.text:000004DD                 align 10h
.text:000004DD _text           ends
.text:000004DD
.text:000004E0 ; ===========================================================================
.text:000004E0
.text:000004E0 ; Segment type: Pure code
.text:000004E0 ; Segment permissions: Read/Execute
.text:000004E0 _text           segment para public 'CODE' use32
.text:000004E0                 assume cs:_text
.text:000004E0                 ;org 4E0h
.text:000004E0 ; COMDAT (pick any)
.text:000004E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 ; public: __thiscall AString::operator char const *(void)const
.text:000004E0                 public ??BAString@@QBEPBDXZ
.text:000004E0 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+50p
.text:000004E0                                         ; NWindows::NDLL::CLibrary::Load(wchar_t const *)+48p
.text:000004E0
.text:000004E0 var_4           = dword ptr -4
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 push    ecx
.text:000004E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004EB                 mov     [ebp+var_4], ecx
.text:000004EE                 mov     eax, [ebp+var_4]
.text:000004F1                 mov     eax, [eax]
.text:000004F3                 mov     esp, ebp
.text:000004F5                 pop     ebp
.text:000004F6                 retn
.text:000004F6 ??BAString@@QBEPBDXZ endp
.text:000004F6
.text:000004F6 ; ---------------------------------------------------------------------------
.text:000004F7                 align 4
.text:000004F7 _text           ends
.text:000004F7
.text$x:000004F8 ; ===========================================================================
.text$x:000004F8
.text$x:000004F8 ; Segment type: Pure code
.text$x:000004F8 ; Segment permissions: Read/Execute
.text$x:000004F8 _text$x         segment para public 'CODE' use32
.text$x:000004F8                 assume cs:_text$x
.text$x:000004F8                 ;org 4F8h
.text$x:000004F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000004F8
.text$x:000004F8 ; =============== S U B R O U T I N E =======================================
.text$x:000004F8
.text$x:000004F8
.text$x:000004F8 __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$0 proc near
.text$x:000004F8                                         ; DATA XREF: .xdata$x:00000578o
.text$x:000004F8                 lea     ecx, [ebp-34Ch] ; this
.text$x:000004FE                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000004FE __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$0 endp
.text$x:000004FE
.text$x:00000503
.text$x:00000503 ; =============== S U B R O U T I N E =======================================
.text$x:00000503
.text$x:00000503
.text$x:00000503 __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$1 proc near
.text$x:00000503                                         ; DATA XREF: .xdata$x:00000580o
.text$x:00000503                 lea     ecx, [ebp-358h] ; this
.text$x:00000509                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000509 __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$1 endp
.text$x:00000509
.text$x:0000050E
.text$x:0000050E ; =============== S U B R O U T I N E =======================================
.text$x:0000050E
.text$x:0000050E
.text$x:0000050E __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z proc near
.text$x:0000050E                                         ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+5o
.text$x:0000050E
.text$x:0000050E arg_4           = dword ptr  8
.text$x:0000050E
.text$x:0000050E                 mov     edx, [esp+arg_4]
.text$x:00000512                 lea     eax, [edx+0Ch]
.text$x:00000515                 mov     ecx, [edx-360h]
.text$x:0000051B                 xor     ecx, eax
.text$x:0000051D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000522                 mov     ecx, [edx-4]
.text$x:00000525                 xor     ecx, eax
.text$x:00000527                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000052C                 mov     eax, offset __ehfuncinfo$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z
.text$x:00000531                 jmp     ___CxxFrameHandler3
.text$x:00000531 __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z endp
.text$x:00000531
.text$x:00000536
.text$x:00000536 ; =============== S U B R O U T I N E =======================================
.text$x:00000536
.text$x:00000536
.text$x:00000536 __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$0 proc near
.text$x:00000536                                         ; DATA XREF: .xdata$x:000005B4o
.text$x:00000536                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000539                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000539 __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$0 endp
.text$x:00000539
.text$x:0000053E
.text$x:0000053E ; =============== S U B R O U T I N E =======================================
.text$x:0000053E
.text$x:0000053E
.text$x:0000053E __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$1 proc near
.text$x:0000053E                                         ; DATA XREF: .xdata$x:000005ACo
.text$x:0000053E                 mov     eax, [ebp-28h]
.text$x:00000541                 and     eax, 1
.text$x:00000544                 jz      locret_556
.text$x:0000054A                 and     dword ptr [ebp-28h], 0FFFFFFFEh
.text$x:0000054E                 mov     ecx, [ebp+8]    ; this
.text$x:00000551                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000556 ; ---------------------------------------------------------------------------
.text$x:00000556
.text$x:00000556 locret_556:                             ; CODE XREF: __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$1+6j
.text$x:00000556                 retn
.text$x:00000556 __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$1 endp
.text$x:00000556
.text$x:00000557
.text$x:00000557 ; =============== S U B R O U T I N E =======================================
.text$x:00000557
.text$x:00000557
.text$x:00000557 __ehhandler$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ proc near
.text$x:00000557                                         ; DATA XREF: NWindows::NDLL::GetModuleDirPrefix(void)+5o
.text$x:00000557
.text$x:00000557 arg_4           = dword ptr  8
.text$x:00000557
.text$x:00000557                 mov     edx, [esp+arg_4]
.text$x:0000055B                 lea     eax, [edx+0Ch]
.text$x:0000055E                 mov     ecx, [edx-20h]
.text$x:00000561                 xor     ecx, eax
.text$x:00000563                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000568                 mov     eax, offset __ehfuncinfo$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ
.text$x:0000056D                 jmp     ___CxxFrameHandler3
.text$x:0000056D __ehhandler$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ endp
.text$x:0000056D
.text$x:0000056D ; ---------------------------------------------------------------------------
.text$x:00000572                 align 4
.text$x:00000572 _text$x         ends
.text$x:00000572
.xdata$x:00000574 ; ===========================================================================
.xdata$x:00000574
.xdata$x:00000574 ; Segment type: Pure data
.xdata$x:00000574 ; Segment permissions: Read
.xdata$x:00000574 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000574                 assume cs:_xdata$x
.xdata$x:00000574                 ;org 574h
.xdata$x:00000574 __unwindtable$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z db 0FFh
.xdata$x:00000574                                         ; DATA XREF: .xdata$x:0000058Co
.xdata$x:00000575                 db 0FFh
.xdata$x:00000576                 db 0FFh
.xdata$x:00000577                 db 0FFh
.xdata$x:00000578                 dd offset __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$0
.xdata$x:0000057C                 align 10h
.xdata$x:00000580                 dd offset __unwindfunclet$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z$1
.xdata$x:00000584 __ehfuncinfo$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z db  22h ; "
.xdata$x:00000584                                         ; DATA XREF: __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z+1Eo
.xdata$x:00000585                 db    5
.xdata$x:00000586                 db  93h ; ô
.xdata$x:00000587                 db  19h
.xdata$x:00000588                 db    2
.xdata$x:00000589                 db    0
.xdata$x:0000058A                 db    0
.xdata$x:0000058B                 db    0
.xdata$x:0000058C                 dd offset __unwindtable$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z
.xdata$x:00000590                 db    0
.xdata$x:00000591                 db    0
.xdata$x:00000592                 db    0
.xdata$x:00000593                 db    0
.xdata$x:00000594                 db    0
.xdata$x:00000595                 db    0
.xdata$x:00000596                 db    0
.xdata$x:00000597                 db    0
.xdata$x:00000598                 db    0
.xdata$x:00000599                 db    0
.xdata$x:0000059A                 db    0
.xdata$x:0000059B                 db    0
.xdata$x:0000059C                 db    0
.xdata$x:0000059D                 db    0
.xdata$x:0000059E                 db    0
.xdata$x:0000059F                 db    0
.xdata$x:000005A0                 db    0
.xdata$x:000005A1                 db    0
.xdata$x:000005A2                 db    0
.xdata$x:000005A3                 db    0
.xdata$x:000005A4                 db    1
.xdata$x:000005A5                 db    0
.xdata$x:000005A6                 db    0
.xdata$x:000005A7                 db    0
.xdata$x:000005A8 __unwindtable$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ db 0FFh
.xdata$x:000005A8                                         ; DATA XREF: .xdata$x:000005C0o
.xdata$x:000005A9                 db 0FFh
.xdata$x:000005AA                 db 0FFh
.xdata$x:000005AB                 db 0FFh
.xdata$x:000005AC                 dd offset __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$1
.xdata$x:000005B0                 db    0
.xdata$x:000005B1                 db    0
.xdata$x:000005B2                 db    0
.xdata$x:000005B3                 db    0
.xdata$x:000005B4                 dd offset __unwindfunclet$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ$0
.xdata$x:000005B8 __ehfuncinfo$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ db  22h ; "
.xdata$x:000005B8                                         ; DATA XREF: __ehhandler$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ+11o
.xdata$x:000005B9                 db    5
.xdata$x:000005BA                 db  93h ; ô
.xdata$x:000005BB                 db  19h
.xdata$x:000005BC                 db    2
.xdata$x:000005BD                 db    0
.xdata$x:000005BE                 db    0
.xdata$x:000005BF                 db    0
.xdata$x:000005C0                 dd offset __unwindtable$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ
.xdata$x:000005C4                 db    0
.xdata$x:000005C5                 db    0
.xdata$x:000005C6                 db    0
.xdata$x:000005C7                 db    0
.xdata$x:000005C8                 db    0
.xdata$x:000005C9                 db    0
.xdata$x:000005CA                 db    0
.xdata$x:000005CB                 db    0
.xdata$x:000005CC                 db    0
.xdata$x:000005CD                 db    0
.xdata$x:000005CE                 db    0
.xdata$x:000005CF                 db    0
.xdata$x:000005D0                 db    0
.xdata$x:000005D1                 db    0
.xdata$x:000005D2                 db    0
.xdata$x:000005D3                 db    0
.xdata$x:000005D4                 db    0
.xdata$x:000005D5                 db    0
.xdata$x:000005D6                 db    0
.xdata$x:000005D7                 db    0
.xdata$x:000005D8                 db    1
.xdata$x:000005D9                 db    0
.xdata$x:000005DA                 db    0
.xdata$x:000005DB                 db    0
.xdata$x:000005DB _xdata$x        ends
.xdata$x:000005DB
.text:000005DC ; ===========================================================================
.text:000005DC
.text:000005DC ; Segment type: Pure code
.text:000005DC ; Segment permissions: Read/Execute
.text:000005DC _text           segment para public 'CODE' use32
.text:000005DC                 assume cs:_text
.text:000005DC                 ;org 5DCh
.text:000005DC ; COMDAT (pick any)
.text:000005DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005DC
.text:000005DC ; =============== S U B R O U T I N E =======================================
.text:000005DC
.text:000005DC ; Attributes: bp-based frame
.text:000005DC
.text:000005DC ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000005DC                 public ??1UString@@QAE@XZ
.text:000005DC ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+FAp
.text:000005DC                                         ; NWindows::NDLL::GetModuleDirPrefix(void)+A1p ...
.text:000005DC
.text:000005DC var_8           = dword ptr -8
.text:000005DC var_4           = dword ptr -4
.text:000005DC
.text:000005DC                 push    ebp
.text:000005DD                 mov     ebp, esp
.text:000005DF                 sub     esp, 8
.text:000005E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005F0                 mov     [ebp+var_4], ecx
.text:000005F3                 mov     eax, [ebp+var_4]
.text:000005F6                 mov     ecx, [eax]
.text:000005F8                 mov     [ebp+var_8], ecx
.text:000005FB                 mov     edx, [ebp+var_8]
.text:000005FE                 push    edx             ; void *
.text:000005FF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000604                 add     esp, 4
.text:00000607                 add     esp, 8
.text:0000060A                 cmp     ebp, esp
.text:0000060C                 call    __RTC_CheckEsp
.text:00000611                 mov     esp, ebp
.text:00000613                 pop     ebp
.text:00000614                 retn
.text:00000614 ??1UString@@QAE@XZ endp
.text:00000614
.text:00000614 ; ---------------------------------------------------------------------------
.text:00000615                 align 4
.text:00000615 _text           ends
.text:00000615
.text:00000618 ; ===========================================================================
.text:00000618
.text:00000618 ; Segment type: Pure code
.text:00000618 ; Segment permissions: Read/Execute
.text:00000618 _text           segment para public 'CODE' use32
.text:00000618                 assume cs:_text
.text:00000618                 ;org 618h
.text:00000618 ; COMDAT (pick any)
.text:00000618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000618
.text:00000618 ; =============== S U B R O U T I N E =======================================
.text:00000618
.text:00000618 ; Attributes: bp-based frame
.text:00000618
.text:00000618 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00000618                 public ?Empty@UString@@QAEXXZ
.text:00000618 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+4Ap
.text:00000618
.text:00000618 var_4           = dword ptr -4
.text:00000618
.text:00000618                 push    ebp
.text:00000619                 mov     ebp, esp
.text:0000061B                 push    ecx
.text:0000061C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000623                 mov     [ebp+var_4], ecx
.text:00000626                 mov     eax, [ebp+var_4]
.text:00000629                 mov     dword ptr [eax+4], 0
.text:00000630                 mov     ecx, [ebp+var_4]
.text:00000633                 mov     edx, [ecx]
.text:00000635                 xor     eax, eax
.text:00000637                 mov     [edx], ax
.text:0000063A                 mov     esp, ebp
.text:0000063C                 pop     ebp
.text:0000063D                 retn
.text:0000063D ?Empty@UString@@QAEXXZ endp
.text:0000063D
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063E                 align 10h
.text:0000063E _text           ends
.text:0000063E
.text:00000640 ; ===========================================================================
.text:00000640
.text:00000640 ; Segment type: Pure code
.text:00000640 ; Segment permissions: Read/Execute
.text:00000640 _text           segment para public 'CODE' use32
.text:00000640                 assume cs:_text
.text:00000640                 ;org 640h
.text:00000640 ; COMDAT (pick any)
.text:00000640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000640
.text:00000640 ; =============== S U B R O U T I N E =======================================
.text:00000640
.text:00000640 ; Attributes: bp-based frame
.text:00000640
.text:00000640 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:00000640                 public ?DeleteFrom@UString@@QAEXI@Z
.text:00000640 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+80p
.text:00000640
.text:00000640 var_4           = dword ptr -4
.text:00000640 arg_0           = dword ptr  8
.text:00000640
.text:00000640                 push    ebp
.text:00000641                 mov     ebp, esp
.text:00000643                 push    ecx
.text:00000644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000064B                 mov     [ebp+var_4], ecx
.text:0000064E                 mov     eax, [ebp+var_4]
.text:00000651                 mov     ecx, [ebp+arg_0]
.text:00000654                 cmp     ecx, [eax+4]
.text:00000657                 jnb     short loc_670
.text:00000659                 mov     edx, [ebp+var_4]
.text:0000065C                 mov     eax, [ebp+arg_0]
.text:0000065F                 mov     [edx+4], eax
.text:00000662                 mov     ecx, [ebp+var_4]
.text:00000665                 mov     edx, [ecx]
.text:00000667                 xor     eax, eax
.text:00000669                 mov     ecx, [ebp+arg_0]
.text:0000066C                 mov     [edx+ecx*2], ax
.text:00000670
.text:00000670 loc_670:                                ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:00000670                 mov     esp, ebp
.text:00000672                 pop     ebp
.text:00000673                 retn    4
.text:00000673 ?DeleteFrom@UString@@QAEXI@Z endp
.text:00000673
.text:00000673 _text           ends
.text:00000673
UNDEF:00000680 ; ===========================================================================
UNDEF:00000680
UNDEF:00000680 ; Segment type: Externs
UNDEF:00000680 ; UNDEF
UNDEF:00000680 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
UNDEF:00000680                 extrn __imp__FreeLibrary@4:near
UNDEF:00000680                                         ; CODE XREF: NWindows::NDLL::CLibrary::Free(void)+23p
UNDEF:00000680                                         ; DATA XREF: NWindows::NDLL::CLibrary::Free(void)+23r
UNDEF:00000684                 extrn __RTC_CheckEsp:near
UNDEF:00000684                                         ; CODE XREF: NWindows::NDLL::CLibrary::Free(void)+2Bp
UNDEF:00000684                                         ; NWindows::NDLL::CLibrary::Free(void)+49p ...
UNDEF:00000688                 extrn __RTC_Shutdown:near
UNDEF:00000688                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000068C                 extrn __RTC_InitBase:near
UNDEF:0000068C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000690 ; HMODULE __stdcall LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
UNDEF:00000690                 extrn __imp__LoadLibraryExW@12:near
UNDEF:00000690                                         ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+7Ep
UNDEF:00000690                                         ; DATA XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+7Er
UNDEF:00000694 ; HMODULE __stdcall LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
UNDEF:00000694                 extrn __imp__LoadLibraryExA@12:near
UNDEF:00000694                                         ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+56p
UNDEF:00000694                                         ; DATA XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+56r
UNDEF:00000698 ; struct AString __stdcall __high fs2fas(const wchar_t *)
UNDEF:00000698                 extrn ?fs2fas@@YG?AVAString@@PB_W@Z:near
UNDEF:00000698                                         ; CODE XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong)+49p
UNDEF:00000698                                         ; NWindows::NDLL::CLibrary::Load(wchar_t const *)+41p
UNDEF:0000069C ; bool g_IsNT
UNDEF:0000069C                 extrn ?g_IsNT@@3_NA:near
UNDEF:0000069C                                         ; DATA XREF: NWindows::NDLL::CLibrary::LoadEx(wchar_t const *,ulong):loc_96r
UNDEF:0000069C                                         ; NWindows::NDLL::CLibrary::Load(wchar_t const *):loc_146r ...
UNDEF:000006A0 ; void __cdecl operator delete(void *)
UNDEF:000006A0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:000006A0                                         ; UString::~UString(void)+23p
UNDEF:000006A4 ; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
UNDEF:000006A4                 extrn __imp__LoadLibraryW@4:near
UNDEF:000006A4                                         ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+72p
UNDEF:000006A4                                         ; DATA XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+72r
UNDEF:000006A8 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
UNDEF:000006A8                 extrn __imp__LoadLibraryA@4:near
UNDEF:000006A8                                         ; CODE XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+50p
UNDEF:000006A8                                         ; DATA XREF: NWindows::NDLL::CLibrary::Load(wchar_t const *)+50r
UNDEF:000006AC ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:000006AC                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:000006AC                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+164p
UNDEF:000006B0 ; DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
UNDEF:000006B0                 extrn __imp__GetModuleFileNameW@12:near
UNDEF:000006B0                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+132p
UNDEF:000006B0                                         ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+132r
UNDEF:000006B4 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000006B4                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000006B4                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+EBp
UNDEF:000006B8 ; struct UString __stdcall __high fas2fs(const struct AString *)
UNDEF:000006B8                 extrn ?fas2fs@@YG?AVUString@@ABVAString@@@Z:near
UNDEF:000006B8                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+C6p
UNDEF:000006BC ; _DWORD __thiscall AString::AString(AString *__hidden this, const char *)
UNDEF:000006BC                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:000006BC                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+ACp
UNDEF:000006C0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
UNDEF:000006C0                 extrn __imp__GetModuleFileNameA@12:near
UNDEF:000006C0                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+77p
UNDEF:000006C0                                         ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+77r
UNDEF:000006C4 ; struct HINSTANCE__ * g_hInstance
UNDEF:000006C4                 extrn ?g_hInstance@@3PAUHINSTANCE__@@A:near
UNDEF:000006C4                                         ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+3Fr
UNDEF:000006C8                 extrn ___security_cookie:near
UNDEF:000006C8                                         ; DATA XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+2Br
UNDEF:000006C8                                         ; NWindows::NDLL::GetModuleDirPrefix(void)+2Er
UNDEF:000006CC                 extrn ___CxxFrameHandler3:near
UNDEF:000006CC                                         ; CODE XREF: __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z+23j
UNDEF:000006CC                                         ; __ehhandler$?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ+16j
UNDEF:000006D0 ; __fastcall __security_check_cookie(x)
UNDEF:000006D0                 extrn @__security_check_cookie@4:near
UNDEF:000006D0                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+192p
UNDEF:000006D0                                         ; __ehhandler$?MyGetModuleFileName@NDLL@NWindows@@YG_NAAVUString@@@Z+Fp ...
UNDEF:000006D4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000006D4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000006D4                                         ; CODE XREF: NWindows::NDLL::MyGetModuleFileName(UString &)+179p
UNDEF:000006D4                                         ; NWindows::NDLL::GetModuleDirPrefix(void)+DAp
UNDEF:000006D8 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000006D8                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000006D8                                         ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+B3p
UNDEF:000006DC ; public: __thiscall UString::UString(class UString const &)
UNDEF:000006DC                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:000006DC                                         ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+8Cp
UNDEF:000006E0 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:000006E0                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:000006E0                                         ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+68p
UNDEF:000006E4 ; public: __thiscall UString::UString(void)
UNDEF:000006E4                 extrn ??0UString@@QAE@XZ:near
UNDEF:000006E4                                         ; CODE XREF: NWindows::NDLL::GetModuleDirPrefix(void)+49p
UNDEF:000006E4
UNDEF:000006E4
UNDEF:000006E4                 end