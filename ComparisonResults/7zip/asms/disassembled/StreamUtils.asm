.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 9C4C1519016D6B597FA6DFA1A10DC873
.text:00000000 ; Input CRC32 : 6B640D7B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\StreamUtils.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
.text:00000000                 public ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z
.text:00000000 ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z proc near
.text:00000000                                         ; CODE XREF: ReadStream_FALSE(ISequentialInStream *,void *,uint)+29p
.text:00000000                                         ; ReadStream_FAIL(ISequentialInStream *,void *,uint)+29p
.text:00000000
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 20h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_20], eax
.text:0000000F                 mov     [ebp+var_1C], eax
.text:00000012                 mov     [ebp+var_18], eax
.text:00000015                 mov     [ebp+var_14], eax
.text:00000018                 mov     [ebp+var_10], eax
.text:0000001B                 mov     [ebp+var_C], eax
.text:0000001E                 mov     [ebp+var_8], eax
.text:00000021                 mov     [ebp+var_4], eax
.text:00000024                 mov     eax, [ebp+arg_8]
.text:00000027                 mov     ecx, [eax]
.text:00000029                 mov     [ebp+var_4], ecx
.text:0000002C                 mov     edx, [ebp+arg_8]
.text:0000002F                 mov     dword ptr [edx], 0
.text:00000035
.text:00000035 loc_35:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *):loc_BDj
.text:00000035                 cmp     [ebp+var_4], 0
.text:00000039                 jz      loc_C2
.text:0000003F                 cmp     [ebp+var_4], 80000000h
.text:00000046                 jnb     short loc_50
.text:00000048                 mov     eax, [ebp+var_4]
.text:0000004B                 mov     [ebp+var_20], eax
.text:0000004E                 jmp     short loc_57
.text:00000050 ; ---------------------------------------------------------------------------
.text:00000050
.text:00000050 loc_50:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+46j
.text:00000050                 mov     [ebp+var_20], 80000000h
.text:00000057
.text:00000057 loc_57:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+4Ej
.text:00000057                 mov     ecx, [ebp+var_20]
.text:0000005A                 mov     [ebp+var_8], ecx
.text:0000005D                 mov     esi, esp
.text:0000005F                 lea     edx, [ebp+var_10]
.text:00000062                 push    edx
.text:00000063                 mov     eax, [ebp+var_8]
.text:00000066                 push    eax
.text:00000067                 mov     ecx, [ebp+arg_4]
.text:0000006A                 push    ecx
.text:0000006B                 mov     edx, [ebp+arg_0]
.text:0000006E                 mov     eax, [edx]
.text:00000070                 mov     ecx, [ebp+arg_0]
.text:00000073                 push    ecx
.text:00000074                 mov     edx, [eax+0Ch]
.text:00000077                 call    edx
.text:00000079                 cmp     esi, esp
.text:0000007B                 call    __RTC_CheckEsp
.text:00000080                 mov     [ebp+var_18], eax
.text:00000083                 mov     eax, [ebp+arg_8]
.text:00000086                 mov     ecx, [eax]
.text:00000088                 add     ecx, [ebp+var_10]
.text:0000008B                 mov     edx, [ebp+arg_8]
.text:0000008E                 mov     [edx], ecx
.text:00000090                 mov     eax, [ebp+arg_4]
.text:00000093                 add     eax, [ebp+var_10]
.text:00000096                 mov     [ebp+arg_4], eax
.text:00000099                 mov     ecx, [ebp+var_4]
.text:0000009C                 sub     ecx, [ebp+var_10]
.text:0000009F                 mov     [ebp+var_4], ecx
.text:000000A2                 mov     edx, [ebp+var_18]
.text:000000A5                 mov     [ebp+var_1C], edx
.text:000000A8                 cmp     [ebp+var_1C], 0
.text:000000AC                 jz      short loc_B3
.text:000000AE                 mov     eax, [ebp+var_1C]
.text:000000B1                 jmp     short loc_C4
.text:000000B3 ; ---------------------------------------------------------------------------
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+ACj
.text:000000B3                 cmp     [ebp+var_10], 0
.text:000000B7                 jnz     short loc_BD
.text:000000B9                 xor     eax, eax
.text:000000BB                 jmp     short loc_C4
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+B7j
.text:000000BD                 jmp     loc_35
.text:000000C2 ; ---------------------------------------------------------------------------
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+39j
.text:000000C2                 xor     eax, eax
.text:000000C4
.text:000000C4 loc_C4:                                 ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+B1j
.text:000000C4                                         ; ReadStream(ISequentialInStream *,void *,uint *)+BBj
.text:000000C4                 push    edx
.text:000000C5                 mov     ecx, ebp
.text:000000C7                 push    eax
.text:000000C8                 lea     edx, $LN11
.text:000000CE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000D3                 pop     eax
.text:000000D4                 pop     edx
.text:000000D5                 pop     esi
.text:000000D6                 add     esp, 20h
.text:000000D9                 cmp     ebp, esp
.text:000000DB                 call    __RTC_CheckEsp
.text:000000E0                 mov     esp, ebp
.text:000000E2                 pop     ebp
.text:000000E3                 retn    0Ch
.text:000000E3 ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z endp
.text:000000E3
.text:000000E3 ; ---------------------------------------------------------------------------
.text:000000E6                 align 4
.text:000000E8 $LN11           dd 1                    ; DATA XREF: ReadStream(ISequentialInStream *,void *,uint *)+C8o
.text:000000EC                 dd offset $LN10
.text:000000F0 $LN10           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000000ECo
.text:000000F8                 dd offset $LN9          ; "processedSizeLoc"
.text:000000FC $LN9            db 'processedSizeLoc',0 ; DATA XREF: .text:000000F8o
.text:0000010D                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
.text:00000110                 public ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z
.text:00000110 ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z proc near
.text:00000110
.text:00000110 var_10          = dword ptr -10h
.text:00000110 var_C           = dword ptr -0Ch
.text:00000110 var_8           = dword ptr -8
.text:00000110 var_4           = dword ptr -4
.text:00000110 arg_0           = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110 arg_8           = dword ptr  10h
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 10h
.text:00000116                 mov     eax, 0CCCCCCCCh
.text:0000011B                 mov     [ebp+var_10], eax
.text:0000011E                 mov     [ebp+var_C], eax
.text:00000121                 mov     [ebp+var_8], eax
.text:00000124                 mov     [ebp+var_4], eax
.text:00000127                 mov     eax, [ebp+arg_8]
.text:0000012A                 mov     [ebp+var_8], eax
.text:0000012D                 lea     ecx, [ebp+var_8]
.text:00000130                 push    ecx             ; unsigned int *
.text:00000131                 mov     edx, [ebp+arg_4]
.text:00000134                 push    edx             ; void *
.text:00000135                 mov     eax, [ebp+arg_0]
.text:00000138                 push    eax             ; struct ISequentialInStream *
.text:00000139                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:0000013E                 mov     [ebp+var_10], eax
.text:00000141                 cmp     [ebp+var_10], 0
.text:00000145                 jz      short loc_14C
.text:00000147                 mov     eax, [ebp+var_10]
.text:0000014A                 jmp     short loc_157
.text:0000014C ; ---------------------------------------------------------------------------
.text:0000014C
.text:0000014C loc_14C:                                ; CODE XREF: ReadStream_FALSE(ISequentialInStream *,void *,uint)+35j
.text:0000014C                 mov     ecx, [ebp+arg_8]
.text:0000014F                 xor     eax, eax
.text:00000151                 cmp     ecx, [ebp+var_8]
.text:00000154                 setnz   al
.text:00000157
.text:00000157 loc_157:                                ; CODE XREF: ReadStream_FALSE(ISequentialInStream *,void *,uint)+3Aj
.text:00000157                 push    edx
.text:00000158                 mov     ecx, ebp
.text:0000015A                 push    eax
.text:0000015B                 lea     edx, $LN6
.text:00000161                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000166                 pop     eax
.text:00000167                 pop     edx
.text:00000168                 add     esp, 10h
.text:0000016B                 cmp     ebp, esp
.text:0000016D                 call    __RTC_CheckEsp
.text:00000172                 mov     esp, ebp
.text:00000174                 pop     ebp
.text:00000175                 retn    0Ch
.text:00000175 ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z endp
.text:00000175
.text:00000175 ; ---------------------------------------------------------------------------
.text:00000178 $LN6            dd 1                    ; DATA XREF: ReadStream_FALSE(ISequentialInStream *,void *,uint)+4Bo
.text:0000017C                 dd offset $LN5
.text:00000180 $LN5            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000017Co
.text:00000188                 dd offset $LN4          ; "processedSize"
.text:0000018C $LN4            db 'processedSize',0    ; DATA XREF: .text:00000188o
.text:0000019A                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; __int32 __stdcall ReadStream_FAIL(struct ISequentialInStream *, void *, unsigned int)
.text:000001A0                 public ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z
.text:000001A0 ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z proc near
.text:000001A0
.text:000001A0 var_10          = dword ptr -10h
.text:000001A0 var_C           = dword ptr -0Ch
.text:000001A0 var_8           = dword ptr -8
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0 arg_4           = dword ptr  0Ch
.text:000001A0 arg_8           = dword ptr  10h
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 sub     esp, 10h
.text:000001A6                 mov     eax, 0CCCCCCCCh
.text:000001AB                 mov     [ebp+var_10], eax
.text:000001AE                 mov     [ebp+var_C], eax
.text:000001B1                 mov     [ebp+var_8], eax
.text:000001B4                 mov     [ebp+var_4], eax
.text:000001B7                 mov     eax, [ebp+arg_8]
.text:000001BA                 mov     [ebp+var_8], eax
.text:000001BD                 lea     ecx, [ebp+var_8]
.text:000001C0                 push    ecx             ; unsigned int *
.text:000001C1                 mov     edx, [ebp+arg_4]
.text:000001C4                 push    edx             ; void *
.text:000001C5                 mov     eax, [ebp+arg_0]
.text:000001C8                 push    eax             ; struct ISequentialInStream *
.text:000001C9                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:000001CE                 mov     [ebp+var_10], eax
.text:000001D1                 cmp     [ebp+var_10], 0
.text:000001D5                 jz      short loc_1DC
.text:000001D7                 mov     eax, [ebp+var_10]
.text:000001DA                 jmp     short loc_1EB
.text:000001DC ; ---------------------------------------------------------------------------
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: ReadStream_FAIL(ISequentialInStream *,void *,uint)+35j
.text:000001DC                 mov     eax, [ebp+arg_8]
.text:000001DF                 sub     eax, [ebp+var_8]
.text:000001E2                 neg     eax
.text:000001E4                 sbb     eax, eax
.text:000001E6                 and     eax, 80004005h
.text:000001EB
.text:000001EB loc_1EB:                                ; CODE XREF: ReadStream_FAIL(ISequentialInStream *,void *,uint)+3Aj
.text:000001EB                 push    edx
.text:000001EC                 mov     ecx, ebp
.text:000001EE                 push    eax
.text:000001EF                 lea     edx, $LN6_0
.text:000001F5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001FA                 pop     eax
.text:000001FB                 pop     edx
.text:000001FC                 add     esp, 10h
.text:000001FF                 cmp     ebp, esp
.text:00000201                 call    __RTC_CheckEsp
.text:00000206                 mov     esp, ebp
.text:00000208                 pop     ebp
.text:00000209                 retn    0Ch
.text:00000209 ?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z endp
.text:00000209
.text:00000209 ; ---------------------------------------------------------------------------
.text:0000020C $LN6_0          dd 1                    ; DATA XREF: ReadStream_FAIL(ISequentialInStream *,void *,uint)+4Fo
.text:00000210                 dd offset $LN5_0
.text:00000214 $LN5_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000210o
.text:0000021C                 dd offset $LN4_0        ; "processedSize"
.text:00000220 $LN4_0          db 'processedSize',0    ; DATA XREF: .text:0000021Co
.text:0000022E                 align 10h
.text:00000230
.text:00000230 ; =============== S U B R O U T I N E =======================================
.text:00000230
.text:00000230 ; Attributes: bp-based frame
.text:00000230
.text:00000230 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
.text:00000230                 public ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z
.text:00000230 ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z proc near
.text:00000230
.text:00000230 var_1C          = dword ptr -1Ch
.text:00000230 var_18          = dword ptr -18h
.text:00000230 var_14          = dword ptr -14h
.text:00000230 var_10          = dword ptr -10h
.text:00000230 var_C           = dword ptr -0Ch
.text:00000230 var_8           = dword ptr -8
.text:00000230 var_4           = dword ptr -4
.text:00000230 arg_0           = dword ptr  8
.text:00000230 arg_4           = dword ptr  0Ch
.text:00000230 arg_8           = dword ptr  10h
.text:00000230
.text:00000230                 push    ebp
.text:00000231                 mov     ebp, esp
.text:00000233                 sub     esp, 1Ch
.text:00000236                 push    esi
.text:00000237                 mov     eax, 0CCCCCCCCh
.text:0000023C                 mov     [ebp+var_1C], eax
.text:0000023F                 mov     [ebp+var_18], eax
.text:00000242                 mov     [ebp+var_14], eax
.text:00000245                 mov     [ebp+var_10], eax
.text:00000248                 mov     [ebp+var_C], eax
.text:0000024B                 mov     [ebp+var_8], eax
.text:0000024E                 mov     [ebp+var_4], eax
.text:00000251
.text:00000251 loc_251:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint):loc_2CBj
.text:00000251                 cmp     [ebp+arg_8], 0
.text:00000255                 jz      short loc_2CD
.text:00000257                 cmp     [ebp+arg_8], 80000000h
.text:0000025E                 jnb     short loc_268
.text:00000260                 mov     eax, [ebp+arg_8]
.text:00000263                 mov     [ebp+var_1C], eax
.text:00000266                 jmp     short loc_26F
.text:00000268 ; ---------------------------------------------------------------------------
.text:00000268
.text:00000268 loc_268:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+2Ej
.text:00000268                 mov     [ebp+var_1C], 80000000h
.text:0000026F
.text:0000026F loc_26F:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+36j
.text:0000026F                 mov     ecx, [ebp+var_1C]
.text:00000272                 mov     [ebp+var_4], ecx
.text:00000275                 mov     esi, esp
.text:00000277                 lea     edx, [ebp+var_C]
.text:0000027A                 push    edx
.text:0000027B                 mov     eax, [ebp+var_4]
.text:0000027E                 push    eax
.text:0000027F                 mov     ecx, [ebp+arg_4]
.text:00000282                 push    ecx
.text:00000283                 mov     edx, [ebp+arg_0]
.text:00000286                 mov     eax, [edx]
.text:00000288                 mov     ecx, [ebp+arg_0]
.text:0000028B                 push    ecx
.text:0000028C                 mov     edx, [eax+0Ch]
.text:0000028F                 call    edx
.text:00000291                 cmp     esi, esp
.text:00000293                 call    __RTC_CheckEsp
.text:00000298                 mov     [ebp+var_14], eax
.text:0000029B                 mov     eax, [ebp+arg_4]
.text:0000029E                 add     eax, [ebp+var_C]
.text:000002A1                 mov     [ebp+arg_4], eax
.text:000002A4                 mov     ecx, [ebp+arg_8]
.text:000002A7                 sub     ecx, [ebp+var_C]
.text:000002AA                 mov     [ebp+arg_8], ecx
.text:000002AD                 mov     edx, [ebp+var_14]
.text:000002B0                 mov     [ebp+var_18], edx
.text:000002B3                 cmp     [ebp+var_18], 0
.text:000002B7                 jz      short loc_2BE
.text:000002B9                 mov     eax, [ebp+var_18]
.text:000002BC                 jmp     short loc_2CF
.text:000002BE ; ---------------------------------------------------------------------------
.text:000002BE
.text:000002BE loc_2BE:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+87j
.text:000002BE                 cmp     [ebp+var_C], 0
.text:000002C2                 jnz     short loc_2CB
.text:000002C4                 mov     eax, 80004005h
.text:000002C9                 jmp     short loc_2CF
.text:000002CB ; ---------------------------------------------------------------------------
.text:000002CB
.text:000002CB loc_2CB:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+92j
.text:000002CB                 jmp     short loc_251
.text:000002CD ; ---------------------------------------------------------------------------
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+25j
.text:000002CD                 xor     eax, eax
.text:000002CF
.text:000002CF loc_2CF:                                ; CODE XREF: WriteStream(ISequentialOutStream *,void const *,uint)+8Cj
.text:000002CF                                         ; WriteStream(ISequentialOutStream *,void const *,uint)+99j
.text:000002CF                 push    edx
.text:000002D0                 mov     ecx, ebp
.text:000002D2                 push    eax
.text:000002D3                 lea     edx, $LN11_0
.text:000002D9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002DE                 pop     eax
.text:000002DF                 pop     edx
.text:000002E0                 pop     esi
.text:000002E1                 add     esp, 1Ch
.text:000002E4                 cmp     ebp, esp
.text:000002E6                 call    __RTC_CheckEsp
.text:000002EB                 mov     esp, ebp
.text:000002ED                 pop     ebp
.text:000002EE                 retn    0Ch
.text:000002EE ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z endp
.text:000002EE
.text:000002EE ; ---------------------------------------------------------------------------
.text:000002F1                 align 4
.text:000002F4 $LN11_0         dd 1                    ; DATA XREF: WriteStream(ISequentialOutStream *,void const *,uint)+A3o
.text:000002F8                 dd offset $LN10_0
.text:000002FC $LN10_0         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000002F8o
.text:00000304                 dd offset $LN9_0        ; "processedSizeLoc"
.text:00000308 $LN9_0          db 'processedSizeLoc',0 ; DATA XREF: .text:00000304o
.text:00000319                 align 4
.text:00000319 _text           ends
.text:00000319
.rtc$TMZ:0000031C ; ===========================================================================
.rtc$TMZ:0000031C
.rtc$TMZ:0000031C ; Segment type: Pure data
.rtc$TMZ:0000031C ; Segment permissions: Read
.rtc$TMZ:0000031C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000031C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000031C                 ;org 31Ch
.rtc$TMZ:0000031C ; COMDAT (pick any)
.rtc$TMZ:0000031C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000031C _rtc$TMZ        ends
.rtc$TMZ:0000031C
.rtc$IMZ:00000320 ; ===========================================================================
.rtc$IMZ:00000320
.rtc$IMZ:00000320 ; Segment type: Pure data
.rtc$IMZ:00000320 ; Segment permissions: Read
.rtc$IMZ:00000320 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000320                 assume cs:_rtc$IMZ
.rtc$IMZ:00000320                 ;org 320h
.rtc$IMZ:00000320 ; COMDAT (pick any)
.rtc$IMZ:00000320 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000320 _rtc$IMZ        ends
.rtc$IMZ:00000320
UNDEF:00000330 ; ===========================================================================
UNDEF:00000330
UNDEF:00000330 ; Segment type: Externs
UNDEF:00000330 ; UNDEF
UNDEF:00000330 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000330                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000330                                         ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+CEp
UNDEF:00000330                                         ; ReadStream_FALSE(ISequentialInStream *,void *,uint)+51p ...
UNDEF:00000334                 extrn __RTC_CheckEsp:near
UNDEF:00000334                                         ; CODE XREF: ReadStream(ISequentialInStream *,void *,uint *)+7Bp
UNDEF:00000334                                         ; ReadStream(ISequentialInStream *,void *,uint *)+DBp ...
UNDEF:00000338                 extrn __RTC_Shutdown:near
UNDEF:00000338                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000033C                 extrn __RTC_InitBase:near
UNDEF:0000033C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000033C
UNDEF:0000033C
UNDEF:0000033C                 end