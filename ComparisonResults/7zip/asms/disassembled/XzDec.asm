.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 3F59617214F4F54CBAEB9727D4EE88B3
.text:00000000 ; Input CRC32 : E3A42A8E
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzDec.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Xz_ReadVarInt(x, x, x)
.text:00000000                 public _Xz_ReadVarInt@12
.text:00000000 _Xz_ReadVarInt@12 proc near             ; CODE XREF: XzBlock_Parse(x,x)+8Fp
.text:00000000                                         ; XzBlock_Parse(x,x)+115p ...
.text:00000000
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 14h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_14], eax
.text:0000000E                 mov     [ebp+var_10], eax
.text:00000011                 mov     [ebp+var_C], eax
.text:00000014                 mov     [ebp+var_8], eax
.text:00000017                 mov     [ebp+var_4], eax
.text:0000001A                 mov     eax, [ebp+arg_8]
.text:0000001D                 mov     dword ptr [eax], 0
.text:00000023                 mov     dword ptr [eax+4], 0
.text:0000002A                 cmp     [ebp+arg_4], 9
.text:0000002E                 jbe     short loc_39
.text:00000030                 mov     [ebp+var_10], 9
.text:00000037                 jmp     short loc_3F
.text:00000039 ; ---------------------------------------------------------------------------
.text:00000039
.text:00000039 loc_39:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+2Ej
.text:00000039                 mov     ecx, [ebp+arg_4]
.text:0000003C                 mov     [ebp+var_10], ecx
.text:0000003F
.text:0000003F loc_3F:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+37j
.text:0000003F                 mov     edx, [ebp+var_10]
.text:00000042                 mov     [ebp+var_8], edx
.text:00000045                 mov     [ebp+var_4], 0
.text:0000004C
.text:0000004C loc_4C:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x):loc_B8j
.text:0000004C                 mov     eax, [ebp+var_4]
.text:0000004F                 cmp     eax, [ebp+var_8]
.text:00000052                 jnb     short loc_BA
.text:00000054                 mov     ecx, [ebp+arg_0]
.text:00000057                 add     ecx, [ebp+var_4]
.text:0000005A                 mov     dl, [ecx]
.text:0000005C                 mov     byte ptr [ebp+var_C+3], dl
.text:0000005F                 movzx   eax, byte ptr [ebp+var_C+3]
.text:00000063                 and     eax, 7Fh
.text:00000066                 cdq
.text:00000067                 mov     ecx, [ebp+var_4]
.text:0000006A                 imul    ecx, 7
.text:0000006D                 call    __allshl
.text:00000072                 mov     ecx, [ebp+arg_8]
.text:00000075                 or      eax, [ecx]
.text:00000077                 or      edx, [ecx+4]
.text:0000007A                 mov     ecx, [ebp+arg_8]
.text:0000007D                 mov     [ecx], eax
.text:0000007F                 mov     [ecx+4], edx
.text:00000082                 mov     edx, [ebp+var_4]
.text:00000085                 add     edx, 1
.text:00000088                 mov     [ebp+var_4], edx
.text:0000008B                 movzx   eax, byte ptr [ebp+var_C+3]
.text:0000008F                 and     eax, 80h
.text:00000094                 jnz     short loc_B8
.text:00000096                 movzx   ecx, byte ptr [ebp+var_C+3]
.text:0000009A                 test    ecx, ecx
.text:0000009C                 jnz     short loc_AD
.text:0000009E                 cmp     [ebp+var_4], 1
.text:000000A2                 jz      short loc_AD
.text:000000A4                 mov     [ebp+var_14], 0
.text:000000AB                 jmp     short loc_B3
.text:000000AD ; ---------------------------------------------------------------------------
.text:000000AD
.text:000000AD loc_AD:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+9Cj
.text:000000AD                                         ; Xz_ReadVarInt(x,x,x)+A2j
.text:000000AD                 mov     edx, [ebp+var_4]
.text:000000B0                 mov     [ebp+var_14], edx
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+ABj
.text:000000B3                 mov     eax, [ebp+var_14]
.text:000000B6                 jmp     short loc_BC
.text:000000B8 ; ---------------------------------------------------------------------------
.text:000000B8
.text:000000B8 loc_B8:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+94j
.text:000000B8                 jmp     short loc_4C
.text:000000BA ; ---------------------------------------------------------------------------
.text:000000BA
.text:000000BA loc_BA:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+52j
.text:000000BA                 xor     eax, eax
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: Xz_ReadVarInt(x,x,x)+B6j
.text:000000BC                 add     esp, 14h
.text:000000BF                 cmp     ebp, esp
.text:000000C1                 call    __RTC_CheckEsp
.text:000000C6                 mov     esp, ebp
.text:000000C8                 pop     ebp
.text:000000C9                 retn    0Ch
.text:000000C9 _Xz_ReadVarInt@12 endp
.text:000000C9
.text:000000C9 ; ---------------------------------------------------------------------------
.text:000000CC                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __stdcall BraState_SetFromMethod(x, x, x, x, x)
.text:000000D0                 public _BraState_SetFromMethod@20
.text:000000D0 _BraState_SetFromMethod@20 proc near    ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+8Bp
.text:000000D0
.text:000000D0 var_4           = dword ptr -4
.text:000000D0 arg_0           = dword ptr  8
.text:000000D0 arg_4           = dword ptr  0Ch
.text:000000D0 arg_8           = dword ptr  10h
.text:000000D0 arg_C           = dword ptr  14h
.text:000000D0 arg_10          = dword ptr  18h
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    ecx
.text:000000D4                 push    esi
.text:000000D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000DC                 cmp     [ebp+arg_4], 3
.text:000000E0                 jnz     short loc_E8
.text:000000E2                 cmp     [ebp+arg_8], 0
.text:000000E6                 jz      short loc_137
.text:000000E8
.text:000000E8 loc_E8:                                 ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+10j
.text:000000E8                 cmp     [ebp+arg_4], 4
.text:000000EC                 jnz     short loc_F4
.text:000000EE                 cmp     [ebp+arg_8], 0
.text:000000F2                 jz      short loc_137
.text:000000F4
.text:000000F4 loc_F4:                                 ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+1Cj
.text:000000F4                 cmp     [ebp+arg_4], 5
.text:000000F8                 jnz     short loc_100
.text:000000FA                 cmp     [ebp+arg_8], 0
.text:000000FE                 jz      short loc_137
.text:00000100
.text:00000100 loc_100:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+28j
.text:00000100                 cmp     [ebp+arg_4], 6
.text:00000104                 jnz     short loc_10C
.text:00000106                 cmp     [ebp+arg_8], 0
.text:0000010A                 jz      short loc_137
.text:0000010C
.text:0000010C loc_10C:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+34j
.text:0000010C                 cmp     [ebp+arg_4], 7
.text:00000110                 jnz     short loc_118
.text:00000112                 cmp     [ebp+arg_8], 0
.text:00000116                 jz      short loc_137
.text:00000118
.text:00000118 loc_118:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+40j
.text:00000118                 cmp     [ebp+arg_4], 8
.text:0000011C                 jnz     short loc_124
.text:0000011E                 cmp     [ebp+arg_8], 0
.text:00000122                 jz      short loc_137
.text:00000124
.text:00000124 loc_124:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+4Cj
.text:00000124                 cmp     [ebp+arg_4], 9
.text:00000128                 jnz     short loc_130
.text:0000012A                 cmp     [ebp+arg_8], 0
.text:0000012E                 jz      short loc_137
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+58j
.text:00000130                 mov     eax, 4
.text:00000135                 jmp     short loc_1AD
.text:00000137 ; ---------------------------------------------------------------------------
.text:00000137
.text:00000137 loc_137:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+16j
.text:00000137                                         ; BraState_SetFromMethod(x,x,x,x,x)+22j ...
.text:00000137                 mov     eax, [ebp+arg_0]
.text:0000013A                 mov     dword ptr [eax], 0
.text:00000140                 mov     esi, esp
.text:00000142                 push    4120h
.text:00000147                 mov     ecx, [ebp+arg_10]
.text:0000014A                 push    ecx
.text:0000014B                 mov     edx, [ebp+arg_10]
.text:0000014E                 mov     eax, [edx]
.text:00000150                 call    eax
.text:00000152                 cmp     esi, esp
.text:00000154                 call    __RTC_CheckEsp
.text:00000159                 mov     [ebp+var_4], eax
.text:0000015C                 cmp     [ebp+var_4], 0
.text:00000160                 jnz     short loc_169
.text:00000162                 mov     eax, 2
.text:00000167                 jmp     short loc_1AD
.text:00000169 ; ---------------------------------------------------------------------------
.text:00000169
.text:00000169 loc_169:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+90j
.text:00000169                 mov     ecx, [ebp+arg_4]
.text:0000016C                 mov     edx, [ebp+var_4]
.text:0000016F                 mov     [edx+0Ch], ecx
.text:00000172                 mov     eax, [ebp+var_4]
.text:00000175                 mov     ecx, [ebp+arg_C]
.text:00000178                 mov     [eax+10h], ecx
.text:0000017B                 mov     edx, [ebp+arg_0]
.text:0000017E                 mov     eax, [ebp+var_4]
.text:00000181                 mov     [edx], eax
.text:00000183                 mov     ecx, [ebp+arg_0]
.text:00000186                 mov     dword ptr [ecx+4], offset _BraState_Free@8 ; BraState_Free(x,x)
.text:0000018D                 mov     edx, [ebp+arg_0]
.text:00000190                 mov     dword ptr [edx+8], offset _BraState_SetProps@16 ; BraState_SetProps(x,x,x,x)
.text:00000197                 mov     eax, [ebp+arg_0]
.text:0000019A                 mov     dword ptr [eax+0Ch], offset _BraState_Init@4 ; BraState_Init(x)
.text:000001A1                 mov     ecx, [ebp+arg_0]
.text:000001A4                 mov     dword ptr [ecx+10h], offset _BraState_Code@32 ; BraState_Code(x,x,x,x,x,x,x,x)
.text:000001AB                 xor     eax, eax
.text:000001AD
.text:000001AD loc_1AD:                                ; CODE XREF: BraState_SetFromMethod(x,x,x,x,x)+65j
.text:000001AD                                         ; BraState_SetFromMethod(x,x,x,x,x)+97j
.text:000001AD                 pop     esi
.text:000001AE                 add     esp, 4
.text:000001B1                 cmp     ebp, esp
.text:000001B3                 call    __RTC_CheckEsp
.text:000001B8                 mov     esp, ebp
.text:000001BA                 pop     ebp
.text:000001BB                 retn    14h
.text:000001BB _BraState_SetFromMethod@20 endp
.text:000001BB
.text:000001BB ; ---------------------------------------------------------------------------
.text:000001BE                 align 10h
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; __stdcall BraState_Free(x, x)
.text:000001C0 _BraState_Free@8 proc near              ; DATA XREF: BraState_SetFromMethod(x,x,x,x,x)+B6o
.text:000001C0
.text:000001C0 arg_0           = dword ptr  8
.text:000001C0 arg_4           = dword ptr  0Ch
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 push    esi
.text:000001C4                 mov     esi, esp
.text:000001C6                 mov     eax, [ebp+arg_0]
.text:000001C9                 push    eax
.text:000001CA                 mov     ecx, [ebp+arg_4]
.text:000001CD                 push    ecx
.text:000001CE                 mov     edx, [ebp+arg_4]
.text:000001D1                 mov     eax, [edx+4]
.text:000001D4                 call    eax
.text:000001D6                 cmp     esi, esp
.text:000001D8                 call    __RTC_CheckEsp
.text:000001DD                 pop     esi
.text:000001DE                 cmp     ebp, esp
.text:000001E0                 call    __RTC_CheckEsp
.text:000001E5                 pop     ebp
.text:000001E6                 retn    8
.text:000001E6 _BraState_Free@8 endp
.text:000001E6
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E9                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; __stdcall BraState_SetProps(x, x, x, x)
.text:000001F0 _BraState_SetProps@16 proc near         ; DATA XREF: BraState_SetFromMethod(x,x,x,x,x)+C0o
.text:000001F0
.text:000001F0 var_C           = dword ptr -0Ch
.text:000001F0 var_8           = dword ptr -8
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0 arg_8           = dword ptr  10h
.text:000001F0 arg_C           = dword ptr  14h
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 0Ch
.text:000001F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000001FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000204                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000020B                 mov     eax, [ebp+arg_0]
.text:0000020E                 mov     [ebp+var_4], eax
.text:00000211                 mov     ecx, [ebp+arg_C]
.text:00000214                 mov     [ebp+arg_C], ecx
.text:00000217                 mov     edx, [ebp+var_4]
.text:0000021A                 mov     dword ptr [edx+18h], 0
.text:00000221                 mov     eax, [ebp+var_4]
.text:00000224                 cmp     dword ptr [eax+0Ch], 3
.text:00000228                 jnz     short loc_24B
.text:0000022A                 cmp     [ebp+arg_8], 1
.text:0000022E                 jz      short loc_23A
.text:00000230                 mov     eax, 4
.text:00000235                 jmp     loc_2C6
.text:0000023A ; ---------------------------------------------------------------------------
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+3Ej
.text:0000023A                 mov     ecx, [ebp+arg_4]
.text:0000023D                 movzx   edx, byte ptr [ecx]
.text:00000240                 add     edx, 1
.text:00000243                 mov     eax, [ebp+var_4]
.text:00000246                 mov     [eax+14h], edx
.text:00000249                 jmp     short loc_2C4
.text:0000024B ; ---------------------------------------------------------------------------
.text:0000024B
.text:0000024B loc_24B:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+38j
.text:0000024B                 cmp     [ebp+arg_8], 4
.text:0000024F                 jnz     short loc_2B7
.text:00000251                 mov     ecx, [ebp+arg_4]
.text:00000254                 mov     edx, [ecx]
.text:00000256                 mov     [ebp+var_8], edx
.text:00000259                 mov     eax, [ebp+var_4]
.text:0000025C                 mov     ecx, [eax+0Ch]
.text:0000025F                 mov     [ebp+var_C], ecx
.text:00000262                 mov     edx, [ebp+var_C]
.text:00000265                 sub     edx, 5
.text:00000268                 mov     [ebp+var_C], edx
.text:0000026B                 cmp     [ebp+var_C], 4  ; switch 5 cases
.text:0000026F                 ja      short loc_2AC   ; jumptable 00000274 default case
.text:00000271                 mov     eax, [ebp+var_C]
.text:00000274                 jmp     ds:$LN17[eax*4] ; switch jump
.text:0000027B ; ---------------------------------------------------------------------------
.text:0000027B
.text:0000027B $LN8:                                   ; CODE XREF: BraState_SetProps(x,x,x,x)+84j
.text:0000027B                                         ; DATA XREF: .text:$LN17o
.text:0000027B                 mov     ecx, [ebp+var_8] ; jumptable 00000274 cases 0,2,4
.text:0000027E                 and     ecx, 3
.text:00000281                 jz      short loc_28A
.text:00000283                 mov     eax, 4
.text:00000288                 jmp     short loc_2C6
.text:0000028A ; ---------------------------------------------------------------------------
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+91j
.text:0000028A                 jmp     short loc_2AC   ; jumptable 00000274 default case
.text:0000028C ; ---------------------------------------------------------------------------
.text:0000028C
.text:0000028C $LN6:                                   ; CODE XREF: BraState_SetProps(x,x,x,x)+84j
.text:0000028C                                         ; DATA XREF: .text:$LN17o
.text:0000028C                 mov     edx, [ebp+var_8] ; jumptable 00000274 case 3
.text:0000028F                 and     edx, 1
.text:00000292                 jz      short loc_29B
.text:00000294                 mov     eax, 4
.text:00000299                 jmp     short loc_2C6
.text:0000029B ; ---------------------------------------------------------------------------
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+A2j
.text:0000029B                 jmp     short loc_2AC   ; jumptable 00000274 default case
.text:0000029D ; ---------------------------------------------------------------------------
.text:0000029D
.text:0000029D $LN4:                                   ; CODE XREF: BraState_SetProps(x,x,x,x)+84j
.text:0000029D                                         ; DATA XREF: .text:$LN17o
.text:0000029D                 mov     eax, [ebp+var_8] ; jumptable 00000274 case 1
.text:000002A0                 and     eax, 0Fh
.text:000002A3                 jz      short loc_2AC   ; jumptable 00000274 default case
.text:000002A5                 mov     eax, 4
.text:000002AA                 jmp     short loc_2C6
.text:000002AC ; ---------------------------------------------------------------------------
.text:000002AC
.text:000002AC loc_2AC:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+7Fj
.text:000002AC                                         ; BraState_SetProps(x,x,x,x):loc_28Aj ...
.text:000002AC                 mov     ecx, [ebp+var_4] ; jumptable 00000274 default case
.text:000002AF                 mov     edx, [ebp+var_8]
.text:000002B2                 mov     [ecx+18h], edx
.text:000002B5                 jmp     short loc_2C4
.text:000002B7 ; ---------------------------------------------------------------------------
.text:000002B7
.text:000002B7 loc_2B7:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+5Fj
.text:000002B7                 cmp     [ebp+arg_8], 0
.text:000002BB                 jz      short loc_2C4
.text:000002BD                 mov     eax, 4
.text:000002C2                 jmp     short loc_2C6
.text:000002C4 ; ---------------------------------------------------------------------------
.text:000002C4
.text:000002C4 loc_2C4:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+59j
.text:000002C4                                         ; BraState_SetProps(x,x,x,x)+C5j ...
.text:000002C4                 xor     eax, eax
.text:000002C6
.text:000002C6 loc_2C6:                                ; CODE XREF: BraState_SetProps(x,x,x,x)+45j
.text:000002C6                                         ; BraState_SetProps(x,x,x,x)+98j ...
.text:000002C6                 mov     esp, ebp
.text:000002C8                 pop     ebp
.text:000002C9                 retn    10h
.text:000002C9 _BraState_SetProps@16 endp
.text:000002C9
.text:000002C9 ; ---------------------------------------------------------------------------
.text:000002CC $LN17           dd offset $LN8          ; DATA XREF: BraState_SetProps(x,x,x,x)+84r
.text:000002CC                 dd offset $LN4          ; jump table for switch statement
.text:000002CC                 dd offset $LN8
.text:000002CC                 dd offset $LN6
.text:000002CC                 dd offset $LN8
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __stdcall BraState_Init(x)
.text:000002E0 _BraState_Init@4 proc near              ; DATA XREF: BraState_SetFromMethod(x,x,x,x,x)+CAo
.text:000002E0
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 push    ecx
.text:000002E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002EB                 mov     eax, [ebp+arg_0]
.text:000002EE                 mov     [ebp+var_4], eax
.text:000002F1                 mov     ecx, [ebp+var_4]
.text:000002F4                 mov     dword ptr [ecx+8], 0
.text:000002FB                 mov     edx, [ebp+var_4]
.text:000002FE                 mov     dword ptr [edx+4], 0
.text:00000305                 mov     eax, [ebp+var_4]
.text:00000308                 mov     dword ptr [eax], 0
.text:0000030E                 mov     ecx, [ebp+var_4]
.text:00000311                 mov     dword ptr [ecx+1Ch], 0
.text:00000318                 mov     edx, [ebp+var_4]
.text:0000031B                 cmp     dword ptr [edx+0Ch], 3
.text:0000031F                 jnz     short loc_32D
.text:00000321                 mov     eax, [ebp+var_4]
.text:00000324                 add     eax, 20h ; ' '
.text:00000327                 push    eax
.text:00000328                 call    _Delta_Init@4   ; Delta_Init(x)
.text:0000032D
.text:0000032D loc_32D:                                ; CODE XREF: BraState_Init(x)+3Fj
.text:0000032D                 add     esp, 4
.text:00000330                 cmp     ebp, esp
.text:00000332                 call    __RTC_CheckEsp
.text:00000337                 mov     esp, ebp
.text:00000339                 pop     ebp
.text:0000033A                 retn    4
.text:0000033A _BraState_Init@4 endp
.text:0000033A
.text:0000033A ; ---------------------------------------------------------------------------
.text:0000033D                 align 10h
.text:00000340
.text:00000340 ; =============== S U B R O U T I N E =======================================
.text:00000340
.text:00000340 ; Attributes: bp-based frame
.text:00000340
.text:00000340 ; int __stdcall BraState_Code(int, void *Dst, int, void *Src, int, int, int, int)
.text:00000340 _BraState_Code@32 proc near             ; DATA XREF: BraState_SetFromMethod(x,x,x,x,x)+D4o
.text:00000340
.text:00000340 var_18          = dword ptr -18h
.text:00000340 var_14          = dword ptr -14h
.text:00000340 Size            = dword ptr -10h
.text:00000340 var_C           = dword ptr -0Ch
.text:00000340 var_8           = dword ptr -8
.text:00000340 var_4           = dword ptr -4
.text:00000340 arg_0           = dword ptr  8
.text:00000340 Dst             = dword ptr  0Ch
.text:00000340 arg_8           = dword ptr  10h
.text:00000340 Src             = dword ptr  14h
.text:00000340 arg_10          = dword ptr  18h
.text:00000340 arg_14          = dword ptr  1Ch
.text:00000340 arg_18          = dword ptr  20h
.text:00000340 arg_1C          = dword ptr  24h
.text:00000340
.text:00000340                 push    ebp
.text:00000341                 mov     ebp, esp
.text:00000343                 sub     esp, 18h
.text:00000346                 push    esi
.text:00000347                 mov     eax, 0CCCCCCCCh
.text:0000034C                 mov     [ebp+var_18], eax
.text:0000034F                 mov     [ebp+var_14], eax
.text:00000352                 mov     [ebp+Size], eax
.text:00000355                 mov     [ebp+var_C], eax
.text:00000358                 mov     [ebp+var_8], eax
.text:0000035B                 mov     [ebp+var_4], eax
.text:0000035E                 mov     eax, [ebp+arg_0]
.text:00000361                 mov     [ebp+var_4], eax
.text:00000364                 mov     ecx, [ebp+arg_8]
.text:00000367                 mov     edx, [ecx]
.text:00000369                 mov     [ebp+var_8], edx
.text:0000036C                 mov     eax, [ebp+arg_10]
.text:0000036F                 mov     ecx, [eax]
.text:00000371                 mov     [ebp+var_C], ecx
.text:00000374                 mov     edx, [ebp+arg_8]
.text:00000377                 mov     dword ptr [edx], 0
.text:0000037D                 mov     eax, [ebp+arg_10]
.text:00000380                 mov     dword ptr [eax], 0
.text:00000386                 mov     ecx, [ebp+arg_18]
.text:00000389                 mov     [ebp+arg_18], ecx
.text:0000038C                 mov     edx, [ebp+arg_1C]
.text:0000038F                 mov     dword ptr [edx], 0
.text:00000395
.text:00000395 loc_395:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+D4j
.text:00000395                                         ; BraState_Code(x,x,x,x,x,x,x,x):loc_6C0j
.text:00000395                 cmp     [ebp+var_8], 0
.text:00000399                 jbe     loc_6C5
.text:0000039F                 mov     eax, [ebp+var_4]
.text:000003A2                 mov     ecx, [ebp+var_4]
.text:000003A5                 mov     edx, [eax]
.text:000003A7                 cmp     edx, [ecx+4]
.text:000003AA                 jz      short loc_419
.text:000003AC                 mov     eax, [ebp+var_4]
.text:000003AF                 mov     ecx, [ebp+var_4]
.text:000003B2                 mov     edx, [eax+4]
.text:000003B5                 sub     edx, [ecx]
.text:000003B7                 mov     [ebp+Size], edx
.text:000003BA                 mov     eax, [ebp+Size]
.text:000003BD                 cmp     eax, [ebp+var_8]
.text:000003C0                 jbe     short loc_3C8
.text:000003C2                 mov     ecx, [ebp+var_8]
.text:000003C5                 mov     [ebp+Size], ecx
.text:000003C8
.text:000003C8 loc_3C8:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+80j
.text:000003C8                 mov     edx, [ebp+Size]
.text:000003CB                 push    edx             ; Size
.text:000003CC                 mov     eax, [ebp+var_4]
.text:000003CF                 mov     ecx, [eax]
.text:000003D1                 mov     edx, [ebp+var_4]
.text:000003D4                 lea     eax, [edx+ecx+120h]
.text:000003DB                 push    eax             ; Src
.text:000003DC                 mov     ecx, [ebp+Dst]
.text:000003DF                 push    ecx             ; Dst
.text:000003E0                 call    _memcpy
.text:000003E5                 add     esp, 0Ch
.text:000003E8                 mov     edx, [ebp+var_4]
.text:000003EB                 mov     eax, [edx]
.text:000003ED                 add     eax, [ebp+Size]
.text:000003F0                 mov     ecx, [ebp+var_4]
.text:000003F3                 mov     [ecx], eax
.text:000003F5                 mov     edx, [ebp+arg_8]
.text:000003F8                 mov     eax, [edx]
.text:000003FA                 add     eax, [ebp+Size]
.text:000003FD                 mov     ecx, [ebp+arg_8]
.text:00000400                 mov     [ecx], eax
.text:00000402                 mov     edx, [ebp+Dst]
.text:00000405                 add     edx, [ebp+Size]
.text:00000408                 mov     [ebp+Dst], edx
.text:0000040B                 mov     eax, [ebp+var_8]
.text:0000040E                 sub     eax, [ebp+Size]
.text:00000411                 mov     [ebp+var_8], eax
.text:00000414                 jmp     loc_395
.text:00000419 ; ---------------------------------------------------------------------------
.text:00000419
.text:00000419 loc_419:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+6Aj
.text:00000419                 mov     ecx, [ebp+var_4]
.text:0000041C                 mov     edx, [ebp+var_4]
.text:0000041F                 mov     eax, [ecx+8]
.text:00000422                 sub     eax, [edx]
.text:00000424                 mov     ecx, [ebp+var_4]
.text:00000427                 mov     [ecx+8], eax
.text:0000042A                 mov     esi, esp
.text:0000042C                 mov     edx, [ebp+var_4]
.text:0000042F                 mov     eax, [edx+8]
.text:00000432                 push    eax             ; Size
.text:00000433                 mov     ecx, [ebp+var_4]
.text:00000436                 mov     edx, [ecx]
.text:00000438                 mov     eax, [ebp+var_4]
.text:0000043B                 lea     ecx, [eax+edx+120h]
.text:00000442                 push    ecx             ; Src
.text:00000443                 mov     edx, [ebp+var_4]
.text:00000446                 add     edx, 120h
.text:0000044C                 push    edx             ; Dst
.text:0000044D                 call    dword ptr ds:__imp__memmove
.text:00000453                 add     esp, 0Ch
.text:00000456                 cmp     esi, esp
.text:00000458                 call    __RTC_CheckEsp
.text:0000045D                 mov     eax, [ebp+var_4]
.text:00000460                 mov     dword ptr [eax], 0
.text:00000466                 mov     ecx, [ebp+var_4]
.text:00000469                 mov     dword ptr [ecx+4], 0
.text:00000470                 mov     edx, [ebp+var_4]
.text:00000473                 mov     eax, 4000h
.text:00000478                 sub     eax, [edx+8]
.text:0000047B                 mov     [ebp+var_14], eax
.text:0000047E                 mov     ecx, [ebp+var_14]
.text:00000481                 cmp     ecx, [ebp+var_C]
.text:00000484                 jbe     short loc_48C
.text:00000486                 mov     edx, [ebp+var_C]
.text:00000489                 mov     [ebp+var_14], edx
.text:0000048C
.text:0000048C loc_48C:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+144j
.text:0000048C                 mov     eax, [ebp+var_14]
.text:0000048F                 push    eax             ; Size
.text:00000490                 mov     ecx, [ebp+Src]
.text:00000493                 push    ecx             ; Src
.text:00000494                 mov     edx, [ebp+var_4]
.text:00000497                 mov     eax, [edx+8]
.text:0000049A                 mov     ecx, [ebp+var_4]
.text:0000049D                 lea     edx, [ecx+eax+120h]
.text:000004A4                 push    edx             ; Dst
.text:000004A5                 call    _memcpy
.text:000004AA                 add     esp, 0Ch
.text:000004AD                 mov     eax, [ebp+arg_10]
.text:000004B0                 mov     ecx, [eax]
.text:000004B2                 add     ecx, [ebp+var_14]
.text:000004B5                 mov     edx, [ebp+arg_10]
.text:000004B8                 mov     [edx], ecx
.text:000004BA                 mov     eax, [ebp+Src]
.text:000004BD                 add     eax, [ebp+var_14]
.text:000004C0                 mov     [ebp+Src], eax
.text:000004C3                 mov     ecx, [ebp+var_C]
.text:000004C6                 sub     ecx, [ebp+var_14]
.text:000004C9                 mov     [ebp+var_C], ecx
.text:000004CC                 mov     edx, [ebp+var_4]
.text:000004CF                 mov     eax, [edx+8]
.text:000004D2                 add     eax, [ebp+var_14]
.text:000004D5                 mov     ecx, [ebp+var_4]
.text:000004D8                 mov     [ecx+8], eax
.text:000004DB                 mov     edx, [ebp+var_4]
.text:000004DE                 cmp     dword ptr [edx+8], 0
.text:000004E2                 jnz     short loc_4E9
.text:000004E4                 jmp     loc_6C5
.text:000004E9 ; ---------------------------------------------------------------------------
.text:000004E9
.text:000004E9 loc_4E9:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1A2j
.text:000004E9                 mov     eax, [ebp+var_4]
.text:000004EC                 mov     ecx, [eax+0Ch]
.text:000004EF                 mov     [ebp+var_18], ecx
.text:000004F2                 mov     edx, [ebp+var_18]
.text:000004F5                 sub     edx, 3
.text:000004F8                 mov     [ebp+var_18], edx
.text:000004FB                 cmp     [ebp+var_18], 6 ; switch 7 cases
.text:000004FF                 ja      loc_68A         ; jumptable 00000508 default case
.text:00000505                 mov     eax, [ebp+var_18]
.text:00000508                 jmp     ds:$LN25[eax*4] ; switch jump
.text:0000050F ; ---------------------------------------------------------------------------
.text:0000050F
.text:0000050F $LN13:                                  ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:0000050F                                         ; DATA XREF: .text:$LN25o
.text:0000050F                 mov     ecx, [ebp+var_4] ; jumptable 00000508 case 0
.text:00000512                 cmp     dword ptr [ecx+10h], 0
.text:00000516                 jz      short loc_53E
.text:00000518                 mov     edx, [ebp+var_4]
.text:0000051B                 mov     eax, [edx+8]
.text:0000051E                 push    eax
.text:0000051F                 mov     ecx, [ebp+var_4]
.text:00000522                 add     ecx, 120h
.text:00000528                 push    ecx
.text:00000529                 mov     edx, [ebp+var_4]
.text:0000052C                 mov     eax, [edx+14h]
.text:0000052F                 push    eax
.text:00000530                 mov     ecx, [ebp+var_4]
.text:00000533                 add     ecx, 20h ; ' '
.text:00000536                 push    ecx
.text:00000537                 call    _Delta_Encode@16 ; Delta_Encode(x,x,x,x)
.text:0000053C                 jmp     short loc_562
.text:0000053E ; ---------------------------------------------------------------------------
.text:0000053E
.text:0000053E loc_53E:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1D6j
.text:0000053E                 mov     edx, [ebp+var_4]
.text:00000541                 mov     eax, [edx+8]
.text:00000544                 push    eax
.text:00000545                 mov     ecx, [ebp+var_4]
.text:00000548                 add     ecx, 120h
.text:0000054E                 push    ecx
.text:0000054F                 mov     edx, [ebp+var_4]
.text:00000552                 mov     eax, [edx+14h]
.text:00000555                 push    eax
.text:00000556                 mov     ecx, [ebp+var_4]
.text:00000559                 add     ecx, 20h ; ' '
.text:0000055C                 push    ecx
.text:0000055D                 call    _Delta_Decode@16 ; Delta_Decode(x,x,x,x)
.text:00000562
.text:00000562 loc_562:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1FCj
.text:00000562                 mov     edx, [ebp+var_4]
.text:00000565                 mov     eax, [ebp+var_4]
.text:00000568                 mov     ecx, [eax+8]
.text:0000056B                 mov     [edx+4], ecx
.text:0000056E                 jmp     loc_691
.text:00000573 ; ---------------------------------------------------------------------------
.text:00000573
.text:00000573 $LN10:                                  ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:00000573                                         ; DATA XREF: .text:$LN25o
.text:00000573                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 1
.text:00000576                 mov     eax, [edx+10h]
.text:00000579                 push    eax
.text:0000057A                 mov     ecx, [ebp+var_4]
.text:0000057D                 add     ecx, 1Ch
.text:00000580                 push    ecx
.text:00000581                 mov     edx, [ebp+var_4]
.text:00000584                 mov     eax, [edx+18h]
.text:00000587                 push    eax
.text:00000588                 mov     ecx, [ebp+var_4]
.text:0000058B                 mov     edx, [ecx+8]
.text:0000058E                 push    edx
.text:0000058F                 mov     eax, [ebp+var_4]
.text:00000592                 add     eax, 120h
.text:00000597                 push    eax
.text:00000598                 call    _x86_Convert@20 ; x86_Convert(x,x,x,x,x)
.text:0000059D                 mov     ecx, [ebp+var_4]
.text:000005A0                 mov     [ecx+4], eax
.text:000005A3                 jmp     loc_691
.text:000005A8 ; ---------------------------------------------------------------------------
.text:000005A8
.text:000005A8 $LN9:                                   ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:000005A8                                         ; DATA XREF: .text:$LN25o
.text:000005A8                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 2
.text:000005AB                 mov     eax, [edx+10h]
.text:000005AE                 push    eax
.text:000005AF                 mov     ecx, [ebp+var_4]
.text:000005B2                 mov     edx, [ecx+18h]
.text:000005B5                 push    edx
.text:000005B6                 mov     eax, [ebp+var_4]
.text:000005B9                 mov     ecx, [eax+8]
.text:000005BC                 push    ecx
.text:000005BD                 mov     edx, [ebp+var_4]
.text:000005C0                 add     edx, 120h
.text:000005C6                 push    edx
.text:000005C7                 call    _PPC_Convert@16 ; PPC_Convert(x,x,x,x)
.text:000005CC                 mov     ecx, [ebp+var_4]
.text:000005CF                 mov     [ecx+4], eax
.text:000005D2                 jmp     loc_691
.text:000005D7 ; ---------------------------------------------------------------------------
.text:000005D7
.text:000005D7 $LN8_0:                                 ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:000005D7                                         ; DATA XREF: .text:$LN25o
.text:000005D7                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 3
.text:000005DA                 mov     eax, [edx+10h]
.text:000005DD                 push    eax
.text:000005DE                 mov     ecx, [ebp+var_4]
.text:000005E1                 mov     edx, [ecx+18h]
.text:000005E4                 push    edx
.text:000005E5                 mov     eax, [ebp+var_4]
.text:000005E8                 mov     ecx, [eax+8]
.text:000005EB                 push    ecx
.text:000005EC                 mov     edx, [ebp+var_4]
.text:000005EF                 add     edx, 120h
.text:000005F5                 push    edx
.text:000005F6                 call    _IA64_Convert@16 ; IA64_Convert(x,x,x,x)
.text:000005FB                 mov     ecx, [ebp+var_4]
.text:000005FE                 mov     [ecx+4], eax
.text:00000601                 jmp     loc_691
.text:00000606 ; ---------------------------------------------------------------------------
.text:00000606
.text:00000606 $LN7:                                   ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:00000606                                         ; DATA XREF: .text:$LN25o
.text:00000606                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 4
.text:00000609                 mov     eax, [edx+10h]
.text:0000060C                 push    eax
.text:0000060D                 mov     ecx, [ebp+var_4]
.text:00000610                 mov     edx, [ecx+18h]
.text:00000613                 push    edx
.text:00000614                 mov     eax, [ebp+var_4]
.text:00000617                 mov     ecx, [eax+8]
.text:0000061A                 push    ecx
.text:0000061B                 mov     edx, [ebp+var_4]
.text:0000061E                 add     edx, 120h
.text:00000624                 push    edx
.text:00000625                 call    _ARM_Convert@16 ; ARM_Convert(x,x,x,x)
.text:0000062A                 mov     ecx, [ebp+var_4]
.text:0000062D                 mov     [ecx+4], eax
.text:00000630                 jmp     short loc_691
.text:00000632 ; ---------------------------------------------------------------------------
.text:00000632
.text:00000632 $LN6_0:                                 ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:00000632                                         ; DATA XREF: .text:$LN25o
.text:00000632                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 5
.text:00000635                 mov     eax, [edx+10h]
.text:00000638                 push    eax
.text:00000639                 mov     ecx, [ebp+var_4]
.text:0000063C                 mov     edx, [ecx+18h]
.text:0000063F                 push    edx
.text:00000640                 mov     eax, [ebp+var_4]
.text:00000643                 mov     ecx, [eax+8]
.text:00000646                 push    ecx
.text:00000647                 mov     edx, [ebp+var_4]
.text:0000064A                 add     edx, 120h
.text:00000650                 push    edx
.text:00000651                 call    _ARMT_Convert@16 ; ARMT_Convert(x,x,x,x)
.text:00000656                 mov     ecx, [ebp+var_4]
.text:00000659                 mov     [ecx+4], eax
.text:0000065C                 jmp     short loc_691
.text:0000065E ; ---------------------------------------------------------------------------
.text:0000065E
.text:0000065E $LN5:                                   ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8j
.text:0000065E                                         ; DATA XREF: .text:$LN25o
.text:0000065E                 mov     edx, [ebp+var_4] ; jumptable 00000508 case 6
.text:00000661                 mov     eax, [edx+10h]
.text:00000664                 push    eax
.text:00000665                 mov     ecx, [ebp+var_4]
.text:00000668                 mov     edx, [ecx+18h]
.text:0000066B                 push    edx
.text:0000066C                 mov     eax, [ebp+var_4]
.text:0000066F                 mov     ecx, [eax+8]
.text:00000672                 push    ecx
.text:00000673                 mov     edx, [ebp+var_4]
.text:00000676                 add     edx, 120h
.text:0000067C                 push    edx
.text:0000067D                 call    _SPARC_Convert@16 ; SPARC_Convert(x,x,x,x)
.text:00000682                 mov     ecx, [ebp+var_4]
.text:00000685                 mov     [ecx+4], eax
.text:00000688                 jmp     short loc_691
.text:0000068A ; ---------------------------------------------------------------------------
.text:0000068A
.text:0000068A loc_68A:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1BFj
.text:0000068A                 mov     eax, 4          ; jumptable 00000508 default case
.text:0000068F                 jmp     short loc_6E9
.text:00000691 ; ---------------------------------------------------------------------------
.text:00000691
.text:00000691 loc_691:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+22Ej
.text:00000691                                         ; BraState_Code(x,x,x,x,x,x,x,x)+263j ...
.text:00000691                 mov     edx, [ebp+var_4]
.text:00000694                 mov     eax, [edx+18h]
.text:00000697                 mov     ecx, [ebp+var_4]
.text:0000069A                 add     eax, [ecx+4]
.text:0000069D                 mov     edx, [ebp+var_4]
.text:000006A0                 mov     [edx+18h], eax
.text:000006A3                 mov     eax, [ebp+var_4]
.text:000006A6                 cmp     dword ptr [eax+4], 0
.text:000006AA                 jnz     short loc_6C0
.text:000006AC                 cmp     [ebp+arg_14], 0
.text:000006B0                 jnz     short loc_6B4
.text:000006B2                 jmp     short loc_6C5
.text:000006B4 ; ---------------------------------------------------------------------------
.text:000006B4
.text:000006B4 loc_6B4:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+370j
.text:000006B4                 mov     ecx, [ebp+var_4]
.text:000006B7                 mov     edx, [ebp+var_4]
.text:000006BA                 mov     eax, [edx+8]
.text:000006BD                 mov     [ecx+4], eax
.text:000006C0
.text:000006C0 loc_6C0:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+36Aj
.text:000006C0                 jmp     loc_395
.text:000006C5 ; ---------------------------------------------------------------------------
.text:000006C5
.text:000006C5 loc_6C5:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+59j
.text:000006C5                                         ; BraState_Code(x,x,x,x,x,x,x,x)+1A4j ...
.text:000006C5                 mov     ecx, [ebp+var_4]
.text:000006C8                 mov     edx, [ebp+var_4]
.text:000006CB                 mov     eax, [ecx+8]
.text:000006CE                 cmp     eax, [edx]
.text:000006D0                 jnz     short loc_6E7
.text:000006D2                 cmp     [ebp+var_C], 0
.text:000006D6                 jnz     short loc_6E7
.text:000006D8                 cmp     [ebp+arg_14], 0
.text:000006DC                 jz      short loc_6E7
.text:000006DE                 mov     ecx, [ebp+arg_1C]
.text:000006E1                 mov     dword ptr [ecx], 1
.text:000006E7
.text:000006E7 loc_6E7:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+390j
.text:000006E7                                         ; BraState_Code(x,x,x,x,x,x,x,x)+396j ...
.text:000006E7                 xor     eax, eax
.text:000006E9
.text:000006E9 loc_6E9:                                ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+34Fj
.text:000006E9                 pop     esi
.text:000006EA                 add     esp, 18h
.text:000006ED                 cmp     ebp, esp
.text:000006EF                 call    __RTC_CheckEsp
.text:000006F4                 mov     esp, ebp
.text:000006F6                 pop     ebp
.text:000006F7                 retn    20h
.text:000006F7 _BraState_Code@32 endp
.text:000006F7
.text:000006F7 ; ---------------------------------------------------------------------------
.text:000006FA                 align 4
.text:000006FC $LN25           dd offset $LN13         ; DATA XREF: BraState_Code(x,x,x,x,x,x,x,x)+1C8r
.text:000006FC                 dd offset $LN10         ; jump table for switch statement
.text:000006FC                 dd offset $LN9
.text:000006FC                 dd offset $LN8_0
.text:000006FC                 dd offset $LN7
.text:000006FC                 dd offset $LN6_0
.text:000006FC                 dd offset $LN5
.text:00000718                 align 10h
.text:00000720
.text:00000720 ; =============== S U B R O U T I N E =======================================
.text:00000720
.text:00000720 ; Attributes: bp-based frame
.text:00000720
.text:00000720 ; __stdcall MixCoder_Construct(x, x)
.text:00000720                 public _MixCoder_Construct@8
.text:00000720 _MixCoder_Construct@8 proc near         ; CODE XREF: XzUnpacker_Construct(x,x)+Ep
.text:00000720
.text:00000720 var_4           = dword ptr -4
.text:00000720 arg_0           = dword ptr  8
.text:00000720 arg_4           = dword ptr  0Ch
.text:00000720
.text:00000720                 push    ebp
.text:00000721                 mov     ebp, esp
.text:00000723                 push    ecx
.text:00000724                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000072B                 mov     eax, [ebp+arg_0]
.text:0000072E                 mov     ecx, [ebp+arg_4]
.text:00000731                 mov     [eax], ecx
.text:00000733                 mov     edx, [ebp+arg_0]
.text:00000736                 mov     dword ptr [edx+4], 0
.text:0000073D                 mov     eax, [ebp+arg_0]
.text:00000740                 mov     dword ptr [eax+8], 0
.text:00000747                 mov     [ebp+var_4], 0
.text:0000074E                 jmp     short loc_759
.text:00000750 ; ---------------------------------------------------------------------------
.text:00000750
.text:00000750 loc_750:                                ; CODE XREF: MixCoder_Construct(x,x)+50j
.text:00000750                 mov     ecx, [ebp+var_4]
.text:00000753                 add     ecx, 1
.text:00000756                 mov     [ebp+var_4], ecx
.text:00000759
.text:00000759 loc_759:                                ; CODE XREF: MixCoder_Construct(x,x)+2Ej
.text:00000759                 cmp     [ebp+var_4], 4
.text:0000075D                 jnb     short loc_772
.text:0000075F                 mov     edx, [ebp+var_4]
.text:00000762                 imul    edx, 14h
.text:00000765                 mov     eax, [ebp+arg_0]
.text:00000768                 mov     dword ptr [eax+edx+50h], 0
.text:00000770                 jmp     short loc_750
.text:00000772 ; ---------------------------------------------------------------------------
.text:00000772
.text:00000772 loc_772:                                ; CODE XREF: MixCoder_Construct(x,x)+3Dj
.text:00000772                 mov     esp, ebp
.text:00000774                 pop     ebp
.text:00000775                 retn    8
.text:00000775 _MixCoder_Construct@8 endp
.text:00000775
.text:00000775 ; ---------------------------------------------------------------------------
.text:00000778                 align 10h
.text:00000780
.text:00000780 ; =============== S U B R O U T I N E =======================================
.text:00000780
.text:00000780 ; Attributes: bp-based frame
.text:00000780
.text:00000780 ; __stdcall MixCoder_Free(x)
.text:00000780                 public _MixCoder_Free@4
.text:00000780 _MixCoder_Free@4 proc near              ; CODE XREF: XzDec_Init(x,x)+BCp
.text:00000780                                         ; XzUnpacker_Free(x)+Ap
.text:00000780
.text:00000780 var_8           = dword ptr -8
.text:00000780 var_4           = dword ptr -4
.text:00000780 arg_0           = dword ptr  8
.text:00000780
.text:00000780                 push    ebp
.text:00000781                 mov     ebp, esp
.text:00000783                 sub     esp, 8
.text:00000786                 push    esi
.text:00000787                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000078E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000795                 mov     [ebp+var_4], 0
.text:0000079C                 jmp     short loc_7A7
.text:0000079E ; ---------------------------------------------------------------------------
.text:0000079E
.text:0000079E loc_79E:                                ; CODE XREF: MixCoder_Free(x):loc_7EFj
.text:0000079E                 mov     eax, [ebp+var_4]
.text:000007A1                 add     eax, 1
.text:000007A4                 mov     [ebp+var_4], eax
.text:000007A7
.text:000007A7 loc_7A7:                                ; CODE XREF: MixCoder_Free(x)+1Cj
.text:000007A7                 mov     ecx, [ebp+arg_0]
.text:000007AA                 mov     edx, [ebp+var_4]
.text:000007AD                 cmp     edx, [ecx+8]
.text:000007B0                 jnb     short loc_7F1
.text:000007B2                 mov     eax, [ebp+var_4]
.text:000007B5                 imul    eax, 14h
.text:000007B8                 mov     ecx, [ebp+arg_0]
.text:000007BB                 lea     edx, [ecx+eax+50h]
.text:000007BF                 mov     [ebp+var_8], edx
.text:000007C2                 mov     eax, [ebp+arg_0]
.text:000007C5                 cmp     dword ptr [eax], 0
.text:000007C8                 jz      short loc_7EF
.text:000007CA                 mov     ecx, [ebp+var_8]
.text:000007CD                 cmp     dword ptr [ecx], 0
.text:000007D0                 jz      short loc_7EF
.text:000007D2                 mov     esi, esp
.text:000007D4                 mov     edx, [ebp+arg_0]
.text:000007D7                 mov     eax, [edx]
.text:000007D9                 push    eax
.text:000007DA                 mov     ecx, [ebp+var_8]
.text:000007DD                 mov     edx, [ecx]
.text:000007DF                 push    edx
.text:000007E0                 mov     eax, [ebp+var_8]
.text:000007E3                 mov     ecx, [eax+4]
.text:000007E6                 call    ecx
.text:000007E8                 cmp     esi, esp
.text:000007EA                 call    __RTC_CheckEsp
.text:000007EF
.text:000007EF loc_7EF:                                ; CODE XREF: MixCoder_Free(x)+48j
.text:000007EF                                         ; MixCoder_Free(x)+50j
.text:000007EF                 jmp     short loc_79E
.text:000007F1 ; ---------------------------------------------------------------------------
.text:000007F1
.text:000007F1 loc_7F1:                                ; CODE XREF: MixCoder_Free(x)+30j
.text:000007F1                 mov     edx, [ebp+arg_0]
.text:000007F4                 mov     dword ptr [edx+8], 0
.text:000007FB                 mov     eax, [ebp+arg_0]
.text:000007FE                 cmp     dword ptr [eax+4], 0
.text:00000802                 jz      short loc_82E
.text:00000804                 mov     esi, esp
.text:00000806                 mov     ecx, [ebp+arg_0]
.text:00000809                 mov     edx, [ecx+4]
.text:0000080C                 push    edx
.text:0000080D                 mov     eax, [ebp+arg_0]
.text:00000810                 mov     ecx, [eax]
.text:00000812                 push    ecx
.text:00000813                 mov     edx, [ebp+arg_0]
.text:00000816                 mov     eax, [edx]
.text:00000818                 mov     ecx, [eax+4]
.text:0000081B                 call    ecx
.text:0000081D                 cmp     esi, esp
.text:0000081F                 call    __RTC_CheckEsp
.text:00000824                 mov     edx, [ebp+arg_0]
.text:00000827                 mov     dword ptr [edx+4], 0
.text:0000082E
.text:0000082E loc_82E:                                ; CODE XREF: MixCoder_Free(x)+82j
.text:0000082E                 pop     esi
.text:0000082F                 add     esp, 8
.text:00000832                 cmp     ebp, esp
.text:00000834                 call    __RTC_CheckEsp
.text:00000839                 mov     esp, ebp
.text:0000083B                 pop     ebp
.text:0000083C                 retn    4
.text:0000083C _MixCoder_Free@4 endp
.text:0000083C
.text:0000083C ; ---------------------------------------------------------------------------
.text:0000083F                 align 10h
.text:00000840
.text:00000840 ; =============== S U B R O U T I N E =======================================
.text:00000840
.text:00000840 ; Attributes: bp-based frame
.text:00000840
.text:00000840 ; __stdcall MixCoder_Init(x)
.text:00000840                 public _MixCoder_Init@4
.text:00000840 _MixCoder_Init@4 proc near              ; CODE XREF: XzDec_Init(x,x)+1A3p
.text:00000840
.text:00000840 var_8           = dword ptr -8
.text:00000840 var_4           = dword ptr -4
.text:00000840 arg_0           = dword ptr  8
.text:00000840
.text:00000840                 push    ebp
.text:00000841                 mov     ebp, esp
.text:00000843                 sub     esp, 8
.text:00000846                 push    esi
.text:00000847                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000084E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000855                 mov     [ebp+var_4], 0
.text:0000085C                 jmp     short loc_867
.text:0000085E ; ---------------------------------------------------------------------------
.text:0000085E
.text:0000085E loc_85E:                                ; CODE XREF: MixCoder_Init(x)+57j
.text:0000085E                 mov     eax, [ebp+var_4]
.text:00000861                 add     eax, 1
.text:00000864                 mov     [ebp+var_4], eax
.text:00000867
.text:00000867 loc_867:                                ; CODE XREF: MixCoder_Init(x)+1Cj
.text:00000867                 cmp     [ebp+var_4], 3
.text:0000086B                 jnb     short loc_899
.text:0000086D                 mov     ecx, [ebp+var_4]
.text:00000870                 mov     edx, [ebp+arg_0]
.text:00000873                 mov     dword ptr [edx+ecx*4+24h], 0
.text:0000087B                 mov     eax, [ebp+var_4]
.text:0000087E                 mov     ecx, [ebp+arg_0]
.text:00000881                 mov     dword ptr [ecx+eax*4+18h], 0
.text:00000889                 mov     edx, [ebp+var_4]
.text:0000088C                 mov     eax, [ebp+arg_0]
.text:0000088F                 mov     dword ptr [eax+edx*4+0Ch], 0
.text:00000897                 jmp     short loc_85E
.text:00000899 ; ---------------------------------------------------------------------------
.text:00000899
.text:00000899 loc_899:                                ; CODE XREF: MixCoder_Init(x)+2Bj
.text:00000899                 mov     [ebp+var_4], 0
.text:000008A0                 jmp     short loc_8AB
.text:000008A2 ; ---------------------------------------------------------------------------
.text:000008A2
.text:000008A2 loc_8A2:                                ; CODE XREF: MixCoder_Init(x)+9Dj
.text:000008A2                 mov     ecx, [ebp+var_4]
.text:000008A5                 add     ecx, 1
.text:000008A8                 mov     [ebp+var_4], ecx
.text:000008AB
.text:000008AB loc_8AB:                                ; CODE XREF: MixCoder_Init(x)+60j
.text:000008AB                 mov     edx, [ebp+arg_0]
.text:000008AE                 mov     eax, [ebp+var_4]
.text:000008B1                 cmp     eax, [edx+8]
.text:000008B4                 jnb     short loc_8DF
.text:000008B6                 mov     ecx, [ebp+var_4]
.text:000008B9                 imul    ecx, 14h
.text:000008BC                 mov     edx, [ebp+arg_0]
.text:000008BF                 lea     eax, [edx+ecx+50h]
.text:000008C3                 mov     [ebp+var_8], eax
.text:000008C6                 mov     esi, esp
.text:000008C8                 mov     ecx, [ebp+var_8]
.text:000008CB                 mov     edx, [ecx]
.text:000008CD                 push    edx
.text:000008CE                 mov     eax, [ebp+var_8]
.text:000008D1                 mov     ecx, [eax+0Ch]
.text:000008D4                 call    ecx
.text:000008D6                 cmp     esi, esp
.text:000008D8                 call    __RTC_CheckEsp
.text:000008DD                 jmp     short loc_8A2
.text:000008DF ; ---------------------------------------------------------------------------
.text:000008DF
.text:000008DF loc_8DF:                                ; CODE XREF: MixCoder_Init(x)+74j
.text:000008DF                 pop     esi
.text:000008E0                 add     esp, 8
.text:000008E3                 cmp     ebp, esp
.text:000008E5                 call    __RTC_CheckEsp
.text:000008EA                 mov     esp, ebp
.text:000008EC                 pop     ebp
.text:000008ED                 retn    4
.text:000008ED _MixCoder_Init@4 endp
.text:000008ED
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; __stdcall MixCoder_SetFromMethod(x, x, x, x)
.text:000008F0                 public _MixCoder_SetFromMethod@16
.text:000008F0 _MixCoder_SetFromMethod@16 proc near    ; CODE XREF: XzDec_Init(x,x)+10Cp
.text:000008F0
.text:000008F0 var_C           = dword ptr -0Ch
.text:000008F0 var_8           = dword ptr -8
.text:000008F0 var_4           = dword ptr -4
.text:000008F0 arg_0           = dword ptr  8
.text:000008F0 arg_4           = dword ptr  0Ch
.text:000008F0 arg_8           = dword ptr  10h
.text:000008F0 arg_C           = dword ptr  14h
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 sub     esp, 0Ch
.text:000008F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000008FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000090B                 mov     eax, [ebp+arg_4]
.text:0000090E                 imul    eax, 14h
.text:00000911                 mov     ecx, [ebp+arg_0]
.text:00000914                 lea     edx, [ecx+eax+50h]
.text:00000918                 mov     [ebp+var_4], edx
.text:0000091B                 mov     eax, [ebp+arg_4]
.text:0000091E                 mov     ecx, [ebp+arg_0]
.text:00000921                 mov     edx, [ebp+arg_8]
.text:00000924                 mov     [ecx+eax*8+30h], edx
.text:00000928                 mov     edx, [ebp+arg_C]
.text:0000092B                 mov     [ecx+eax*8+34h], edx
.text:0000092F                 mov     eax, [ebp+arg_8]
.text:00000932                 mov     [ebp+var_C], eax
.text:00000935                 mov     ecx, [ebp+arg_C]
.text:00000938                 mov     [ebp+var_8], ecx
.text:0000093B                 cmp     [ebp+var_C], 21h ; '!'
.text:0000093F                 jnz     short loc_947
.text:00000941                 cmp     [ebp+var_8], 0
.text:00000945                 jz      short loc_949
.text:00000947
.text:00000947 loc_947:                                ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+4Fj
.text:00000947                 jmp     short loc_95A
.text:00000949 ; ---------------------------------------------------------------------------
.text:00000949
.text:00000949 loc_949:                                ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+55j
.text:00000949                 mov     edx, [ebp+arg_0]
.text:0000094C                 mov     eax, [edx]
.text:0000094E                 push    eax
.text:0000094F                 mov     ecx, [ebp+var_4]
.text:00000952                 push    ecx
.text:00000953                 call    _Lzma2State_SetFromMethod@8 ; Lzma2State_SetFromMethod(x,x)
.text:00000958                 jmp     short loc_980
.text:0000095A ; ---------------------------------------------------------------------------
.text:0000095A
.text:0000095A loc_95A:                                ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x):loc_947j
.text:0000095A                 cmp     [ebp+arg_4], 0
.text:0000095E                 jnz     short loc_967
.text:00000960                 mov     eax, 4
.text:00000965                 jmp     short loc_980
.text:00000967 ; ---------------------------------------------------------------------------
.text:00000967
.text:00000967 loc_967:                                ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+6Ej
.text:00000967                 mov     edx, [ebp+arg_0]
.text:0000096A                 mov     eax, [edx]
.text:0000096C                 push    eax
.text:0000096D                 push    0
.text:0000096F                 mov     ecx, [ebp+arg_C]
.text:00000972                 push    ecx
.text:00000973                 mov     edx, [ebp+arg_8]
.text:00000976                 push    edx
.text:00000977                 mov     eax, [ebp+var_4]
.text:0000097A                 push    eax
.text:0000097B                 call    _BraState_SetFromMethod@20 ; BraState_SetFromMethod(x,x,x,x,x)
.text:00000980
.text:00000980 loc_980:                                ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+68j
.text:00000980                                         ; MixCoder_SetFromMethod(x,x,x,x)+75j
.text:00000980                 add     esp, 0Ch
.text:00000983                 cmp     ebp, esp
.text:00000985                 call    __RTC_CheckEsp
.text:0000098A                 mov     esp, ebp
.text:0000098C                 pop     ebp
.text:0000098D                 retn    10h
.text:0000098D _MixCoder_SetFromMethod@16 endp
.text:0000098D
.text:00000990
.text:00000990 ; =============== S U B R O U T I N E =======================================
.text:00000990
.text:00000990 ; Attributes: bp-based frame
.text:00000990
.text:00000990 ; __stdcall Lzma2State_SetFromMethod(x, x)
.text:00000990 _Lzma2State_SetFromMethod@8 proc near   ; CODE XREF: MixCoder_SetFromMethod(x,x,x,x)+63p
.text:00000990
.text:00000990 var_4           = dword ptr -4
.text:00000990 arg_0           = dword ptr  8
.text:00000990 arg_4           = dword ptr  0Ch
.text:00000990
.text:00000990                 push    ebp
.text:00000991                 mov     ebp, esp
.text:00000993                 push    ecx
.text:00000994                 push    esi
.text:00000995                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000099C                 mov     esi, esp
.text:0000099E                 push    8Ch ; 'î'
.text:000009A3                 mov     eax, [ebp+arg_4]
.text:000009A6                 push    eax
.text:000009A7                 mov     ecx, [ebp+arg_4]
.text:000009AA                 mov     edx, [ecx]
.text:000009AC                 call    edx
.text:000009AE                 cmp     esi, esp
.text:000009B0                 call    __RTC_CheckEsp
.text:000009B5                 mov     [ebp+var_4], eax
.text:000009B8                 mov     eax, [ebp+arg_0]
.text:000009BB                 mov     ecx, [ebp+var_4]
.text:000009BE                 mov     [eax], ecx
.text:000009C0                 cmp     [ebp+var_4], 0
.text:000009C4                 jnz     short loc_9CD
.text:000009C6                 mov     eax, 2
.text:000009CB                 jmp     short loc_A0B
.text:000009CD ; ---------------------------------------------------------------------------
.text:000009CD
.text:000009CD loc_9CD:                                ; CODE XREF: Lzma2State_SetFromMethod(x,x)+34j
.text:000009CD                 mov     edx, [ebp+arg_0]
.text:000009D0                 mov     dword ptr [edx+4], offset _Lzma2State_Free@8 ; Lzma2State_Free(x,x)
.text:000009D7                 mov     eax, [ebp+arg_0]
.text:000009DA                 mov     dword ptr [eax+8], offset _Lzma2State_SetProps@16 ; Lzma2State_SetProps(x,x,x,x)
.text:000009E1                 mov     ecx, [ebp+arg_0]
.text:000009E4                 mov     dword ptr [ecx+0Ch], offset _Lzma2State_Init@4 ; Lzma2State_Init(x)
.text:000009EB                 mov     edx, [ebp+arg_0]
.text:000009EE                 mov     dword ptr [edx+10h], offset _Lzma2State_Code@32 ; Lzma2State_Code(x,x,x,x,x,x,x,x)
.text:000009F5                 mov     eax, [ebp+var_4]
.text:000009F8                 mov     dword ptr [eax+14h], 0
.text:000009FF                 mov     ecx, [ebp+var_4]
.text:00000A02                 mov     dword ptr [ecx+10h], 0
.text:00000A09                 xor     eax, eax
.text:00000A0B
.text:00000A0B loc_A0B:                                ; CODE XREF: Lzma2State_SetFromMethod(x,x)+3Bj
.text:00000A0B                 pop     esi
.text:00000A0C                 add     esp, 4
.text:00000A0F                 cmp     ebp, esp
.text:00000A11                 call    __RTC_CheckEsp
.text:00000A16                 mov     esp, ebp
.text:00000A18                 pop     ebp
.text:00000A19                 retn    8
.text:00000A19 _Lzma2State_SetFromMethod@8 endp
.text:00000A19
.text:00000A19 ; ---------------------------------------------------------------------------
.text:00000A1C                 align 10h
.text:00000A20
.text:00000A20 ; =============== S U B R O U T I N E =======================================
.text:00000A20
.text:00000A20 ; Attributes: bp-based frame
.text:00000A20
.text:00000A20 ; __stdcall Lzma2State_Free(x, x)
.text:00000A20 _Lzma2State_Free@8 proc near            ; DATA XREF: Lzma2State_SetFromMethod(x,x)+40o
.text:00000A20
.text:00000A20 arg_0           = dword ptr  8
.text:00000A20 arg_4           = dword ptr  0Ch
.text:00000A20
.text:00000A20                 push    ebp
.text:00000A21                 mov     ebp, esp
.text:00000A23                 push    esi
.text:00000A24                 mov     eax, [ebp+arg_4]
.text:00000A27                 push    eax
.text:00000A28                 mov     ecx, [ebp+arg_0]
.text:00000A2B                 push    ecx
.text:00000A2C                 call    _LzmaDec_Free@8 ; LzmaDec_Free(x,x)
.text:00000A31                 mov     esi, esp
.text:00000A33                 mov     edx, [ebp+arg_0]
.text:00000A36                 push    edx
.text:00000A37                 mov     eax, [ebp+arg_4]
.text:00000A3A                 push    eax
.text:00000A3B                 mov     ecx, [ebp+arg_4]
.text:00000A3E                 mov     edx, [ecx+4]
.text:00000A41                 call    edx
.text:00000A43                 cmp     esi, esp
.text:00000A45                 call    __RTC_CheckEsp
.text:00000A4A                 pop     esi
.text:00000A4B                 cmp     ebp, esp
.text:00000A4D                 call    __RTC_CheckEsp
.text:00000A52                 pop     ebp
.text:00000A53                 retn    8
.text:00000A53 _Lzma2State_Free@8 endp
.text:00000A53
.text:00000A53 ; ---------------------------------------------------------------------------
.text:00000A56                 align 10h
.text:00000A60
.text:00000A60 ; =============== S U B R O U T I N E =======================================
.text:00000A60
.text:00000A60 ; Attributes: bp-based frame
.text:00000A60
.text:00000A60 ; __stdcall Lzma2State_SetProps(x, x, x, x)
.text:00000A60 _Lzma2State_SetProps@16 proc near       ; DATA XREF: Lzma2State_SetFromMethod(x,x)+4Ao
.text:00000A60
.text:00000A60 arg_0           = dword ptr  8
.text:00000A60 arg_4           = dword ptr  0Ch
.text:00000A60 arg_8           = dword ptr  10h
.text:00000A60 arg_C           = dword ptr  14h
.text:00000A60
.text:00000A60                 push    ebp
.text:00000A61                 mov     ebp, esp
.text:00000A63                 cmp     [ebp+arg_8], 1
.text:00000A67                 jz      short loc_A70
.text:00000A69                 mov     eax, 4
.text:00000A6E                 jmp     short loc_A84
.text:00000A70 ; ---------------------------------------------------------------------------
.text:00000A70
.text:00000A70 loc_A70:                                ; CODE XREF: Lzma2State_SetProps(x,x,x,x)+7j
.text:00000A70                 mov     eax, [ebp+arg_C]
.text:00000A73                 push    eax
.text:00000A74                 mov     ecx, [ebp+arg_4]
.text:00000A77                 movzx   edx, byte ptr [ecx]
.text:00000A7A                 push    edx
.text:00000A7B                 mov     eax, [ebp+arg_0]
.text:00000A7E                 push    eax
.text:00000A7F                 call    _Lzma2Dec_Allocate@12 ; Lzma2Dec_Allocate(x,x,x)
.text:00000A84
.text:00000A84 loc_A84:                                ; CODE XREF: Lzma2State_SetProps(x,x,x,x)+Ej
.text:00000A84                 cmp     ebp, esp
.text:00000A86                 call    __RTC_CheckEsp
.text:00000A8B                 pop     ebp
.text:00000A8C                 retn    10h
.text:00000A8C _Lzma2State_SetProps@16 endp
.text:00000A8C
.text:00000A8C ; ---------------------------------------------------------------------------
.text:00000A8F                 align 10h
.text:00000A90
.text:00000A90 ; =============== S U B R O U T I N E =======================================
.text:00000A90
.text:00000A90 ; Attributes: bp-based frame
.text:00000A90
.text:00000A90 ; __stdcall Lzma2State_Init(x)
.text:00000A90 _Lzma2State_Init@4 proc near            ; DATA XREF: Lzma2State_SetFromMethod(x,x)+54o
.text:00000A90
.text:00000A90 arg_0           = dword ptr  8
.text:00000A90
.text:00000A90                 push    ebp
.text:00000A91                 mov     ebp, esp
.text:00000A93                 mov     eax, [ebp+arg_0]
.text:00000A96                 push    eax
.text:00000A97                 call    _Lzma2Dec_Init@4 ; Lzma2Dec_Init(x)
.text:00000A9C                 cmp     ebp, esp
.text:00000A9E                 call    __RTC_CheckEsp
.text:00000AA3                 pop     ebp
.text:00000AA4                 retn    4
.text:00000AA4 _Lzma2State_Init@4 endp
.text:00000AA4
.text:00000AA4 ; ---------------------------------------------------------------------------
.text:00000AA7                 align 10h
.text:00000AB0
.text:00000AB0 ; =============== S U B R O U T I N E =======================================
.text:00000AB0
.text:00000AB0 ; Attributes: bp-based frame
.text:00000AB0
.text:00000AB0 ; __stdcall Lzma2State_Code(x, x, x, x, x, x, x, x)
.text:00000AB0 _Lzma2State_Code@32 proc near           ; DATA XREF: Lzma2State_SetFromMethod(x,x)+5Eo
.text:00000AB0
.text:00000AB0 var_10          = dword ptr -10h
.text:00000AB0 var_C           = dword ptr -0Ch
.text:00000AB0 var_8           = dword ptr -8
.text:00000AB0 var_4           = dword ptr -4
.text:00000AB0 arg_0           = dword ptr  8
.text:00000AB0 arg_4           = dword ptr  0Ch
.text:00000AB0 arg_8           = dword ptr  10h
.text:00000AB0 arg_C           = dword ptr  14h
.text:00000AB0 arg_10          = dword ptr  18h
.text:00000AB0 arg_14          = dword ptr  1Ch
.text:00000AB0 arg_18          = dword ptr  20h
.text:00000AB0 arg_1C          = dword ptr  24h
.text:00000AB0
.text:00000AB0                 push    ebp
.text:00000AB1                 mov     ebp, esp
.text:00000AB3                 sub     esp, 10h
.text:00000AB6                 mov     eax, 0CCCCCCCCh
.text:00000ABB                 mov     [ebp+var_10], eax
.text:00000ABE                 mov     [ebp+var_C], eax
.text:00000AC1                 mov     [ebp+var_8], eax
.text:00000AC4                 mov     [ebp+var_4], eax
.text:00000AC7                 lea     eax, [ebp+var_8]
.text:00000ACA                 push    eax
.text:00000ACB                 mov     ecx, [ebp+arg_18]
.text:00000ACE                 push    ecx
.text:00000ACF                 mov     edx, [ebp+arg_10]
.text:00000AD2                 push    edx
.text:00000AD3                 mov     eax, [ebp+arg_C]
.text:00000AD6                 push    eax
.text:00000AD7                 mov     ecx, [ebp+arg_8]
.text:00000ADA                 push    ecx
.text:00000ADB                 mov     edx, [ebp+arg_4]
.text:00000ADE                 push    edx
.text:00000ADF                 mov     eax, [ebp+arg_0]
.text:00000AE2                 push    eax
.text:00000AE3                 call    _Lzma2Dec_DecodeToBuf@28 ; Lzma2Dec_DecodeToBuf(x,x,x,x,x,x,x)
.text:00000AE8                 mov     [ebp+var_10], eax
.text:00000AEB                 mov     ecx, [ebp+arg_14]
.text:00000AEE                 mov     [ebp+arg_14], ecx
.text:00000AF1                 xor     edx, edx
.text:00000AF3                 cmp     [ebp+var_8], 1
.text:00000AF7                 setz    dl
.text:00000AFA                 mov     eax, [ebp+arg_1C]
.text:00000AFD                 mov     [eax], edx
.text:00000AFF                 mov     eax, [ebp+var_10]
.text:00000B02                 push    edx
.text:00000B03                 mov     ecx, ebp
.text:00000B05                 push    eax
.text:00000B06                 lea     edx, $LN5_0
.text:00000B0C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B11                 pop     eax
.text:00000B12                 pop     edx
.text:00000B13                 add     esp, 10h
.text:00000B16                 cmp     ebp, esp
.text:00000B18                 call    __RTC_CheckEsp
.text:00000B1D                 mov     esp, ebp
.text:00000B1F                 pop     ebp
.text:00000B20                 retn    20h
.text:00000B20 _Lzma2State_Code@32 endp
.text:00000B20
.text:00000B20 ; ---------------------------------------------------------------------------
.text:00000B23                 align 4
.text:00000B24 $LN5_0          dd 1                    ; DATA XREF: Lzma2State_Code(x,x,x,x,x,x,x,x)+56o
.text:00000B28                 dd offset $LN4_0
.text:00000B2C $LN4_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000B28o
.text:00000B34                 dd offset $LN3          ; "status"
.text:00000B38 $LN3            db 'status',0           ; DATA XREF: .text:00000B34o
.text:00000B3F                 align 10h
.text:00000B40
.text:00000B40 ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40 ; Attributes: bp-based frame
.text:00000B40
.text:00000B40 ; __stdcall MixCoder_Code(x, x, x, x, x, x, x, x)
.text:00000B40                 public _MixCoder_Code@32
.text:00000B40 _MixCoder_Code@32 proc near             ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+B8p
.text:00000B40
.text:00000B40 var_4C          = byte ptr -4Ch
.text:00000B40 var_48          = dword ptr -48h
.text:00000B40 var_40          = dword ptr -40h
.text:00000B40 var_3C          = dword ptr -3Ch
.text:00000B40 var_34          = dword ptr -34h
.text:00000B40 var_28          = dword ptr -28h
.text:00000B40 var_20          = dword ptr -20h
.text:00000B40 var_1C          = dword ptr -1Ch
.text:00000B40 var_18          = dword ptr -18h
.text:00000B40 var_14          = dword ptr -14h
.text:00000B40 var_10          = dword ptr -10h
.text:00000B40 var_C           = dword ptr -0Ch
.text:00000B40 var_8           = dword ptr -8
.text:00000B40 var_4           = dword ptr -4
.text:00000B40 arg_0           = dword ptr  8
.text:00000B40 arg_4           = dword ptr  0Ch
.text:00000B40 arg_8           = dword ptr  10h
.text:00000B40 arg_C           = dword ptr  14h
.text:00000B40 arg_10          = dword ptr  18h
.text:00000B40 arg_14          = dword ptr  1Ch
.text:00000B40 arg_18          = dword ptr  20h
.text:00000B40 arg_1C          = dword ptr  24h
.text:00000B40
.text:00000B40                 push    ebp
.text:00000B41                 mov     ebp, esp
.text:00000B43                 sub     esp, 4Ch
.text:00000B46                 push    esi
.text:00000B47                 push    edi
.text:00000B48                 lea     edi, [ebp+var_4C]
.text:00000B4B                 mov     ecx, 13h
.text:00000B50                 mov     eax, 0CCCCCCCCh
.text:00000B55                 rep stosd
.text:00000B57                 mov     eax, [ebp+arg_8]
.text:00000B5A                 mov     ecx, [eax]
.text:00000B5C                 mov     [ebp+var_4], ecx
.text:00000B5F                 mov     edx, [ebp+arg_10]
.text:00000B62                 mov     eax, [edx]
.text:00000B64                 mov     [ebp+var_8], eax
.text:00000B67                 mov     [ebp+var_C], 1
.text:00000B6E                 mov     ecx, [ebp+arg_8]
.text:00000B71                 mov     dword ptr [ecx], 0
.text:00000B77                 mov     edx, [ebp+arg_10]
.text:00000B7A                 mov     dword ptr [edx], 0
.text:00000B80                 mov     eax, [ebp+arg_1C]
.text:00000B83                 mov     dword ptr [eax], 2
.text:00000B89                 mov     ecx, [ebp+arg_0]
.text:00000B8C                 cmp     dword ptr [ecx+4], 0
.text:00000B90                 jnz     short loc_BC8
.text:00000B92                 mov     esi, esp
.text:00000B94                 push    60000h
.text:00000B99                 mov     edx, [ebp+arg_0]
.text:00000B9C                 mov     eax, [edx]
.text:00000B9E                 push    eax
.text:00000B9F                 mov     ecx, [ebp+arg_0]
.text:00000BA2                 mov     edx, [ecx]
.text:00000BA4                 mov     eax, [edx]
.text:00000BA6                 call    eax
.text:00000BA8                 cmp     esi, esp
.text:00000BAA                 call    __RTC_CheckEsp
.text:00000BAF                 mov     ecx, [ebp+arg_0]
.text:00000BB2                 mov     [ecx+4], eax
.text:00000BB5                 mov     edx, [ebp+arg_0]
.text:00000BB8                 cmp     dword ptr [edx+4], 0
.text:00000BBC                 jnz     short loc_BC8
.text:00000BBE                 mov     eax, 2
.text:00000BC3                 jmp     loc_DCA
.text:00000BC8 ; ---------------------------------------------------------------------------
.text:00000BC8
.text:00000BC8 loc_BC8:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+50j
.text:00000BC8                                         ; MixCoder_Code(x,x,x,x,x,x,x,x)+7Cj
.text:00000BC8                 mov     eax, [ebp+arg_0]
.text:00000BCB                 cmp     dword ptr [eax+8], 1
.text:00000BCF                 jz      short loc_BD8
.text:00000BD1                 mov     [ebp+arg_18], 0
.text:00000BD8
.text:00000BD8 loc_BD8:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+8Fj
.text:00000BD8                                         ; MixCoder_Code(x,x,x,x,x,x,x,x):loc_DB4j
.text:00000BD8                 mov     [ebp+var_10], 0
.text:00000BDF                 mov     [ebp+var_14], 0
.text:00000BE6                 jmp     short loc_BF1
.text:00000BE8 ; ---------------------------------------------------------------------------
.text:00000BE8
.text:00000BE8 loc_BE8:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+168j
.text:00000BE8                                         ; MixCoder_Code(x,x,x,x,x,x,x,x):loc_DA7j
.text:00000BE8                 mov     ecx, [ebp+var_14]
.text:00000BEB                 add     ecx, 1
.text:00000BEE                 mov     [ebp+var_14], ecx
.text:00000BF1
.text:00000BF1 loc_BF1:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+A6j
.text:00000BF1                 mov     edx, [ebp+arg_0]
.text:00000BF4                 mov     eax, [ebp+var_14]
.text:00000BF7                 cmp     eax, [edx+8]
.text:00000BFA                 jnb     loc_DAC
.text:00000C00                 mov     ecx, [ebp+var_14]
.text:00000C03                 imul    ecx, 14h
.text:00000C06                 mov     edx, [ebp+arg_0]
.text:00000C09                 lea     eax, [edx+ecx+50h]
.text:00000C0D                 mov     [ebp+var_1C], eax
.text:00000C10                 cmp     [ebp+var_14], 0
.text:00000C14                 jnz     short loc_C2F
.text:00000C16                 mov     ecx, [ebp+arg_C]
.text:00000C19                 mov     [ebp+var_3C], ecx
.text:00000C1C                 mov     edx, [ebp+arg_10]
.text:00000C1F                 mov     eax, [ebp+var_8]
.text:00000C22                 sub     eax, [edx]
.text:00000C24                 mov     [ebp+var_34], eax
.text:00000C27                 mov     ecx, [ebp+arg_14]
.text:00000C2A                 mov     [ebp+var_40], ecx
.text:00000C2D                 jmp     short loc_C71
.text:00000C2F ; ---------------------------------------------------------------------------
.text:00000C2F
.text:00000C2F loc_C2F:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+D4j
.text:00000C2F                 mov     edx, [ebp+var_14]
.text:00000C32                 sub     edx, 1
.text:00000C35                 shl     edx, 11h
.text:00000C38                 mov     eax, [ebp+arg_0]
.text:00000C3B                 mov     ecx, [eax+4]
.text:00000C3E                 add     ecx, edx
.text:00000C40                 mov     edx, [ebp+var_14]
.text:00000C43                 mov     eax, [ebp+arg_0]
.text:00000C46                 add     ecx, [eax+edx*4+14h]
.text:00000C4A                 mov     [ebp+var_3C], ecx
.text:00000C4D                 mov     ecx, [ebp+var_14]
.text:00000C50                 mov     edx, [ebp+arg_0]
.text:00000C53                 mov     eax, [ebp+var_14]
.text:00000C56                 mov     esi, [ebp+arg_0]
.text:00000C59                 mov     ecx, [edx+ecx*4+20h]
.text:00000C5D                 sub     ecx, [esi+eax*4+14h]
.text:00000C61                 mov     [ebp+var_34], ecx
.text:00000C64                 mov     edx, [ebp+var_14]
.text:00000C67                 mov     eax, [ebp+arg_0]
.text:00000C6A                 mov     ecx, [eax+edx*4+8]
.text:00000C6E                 mov     [ebp+var_40], ecx
.text:00000C71
.text:00000C71 loc_C71:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+EDj
.text:00000C71                 mov     edx, [ebp+arg_0]
.text:00000C74                 mov     eax, [edx+8]
.text:00000C77                 sub     eax, 1
.text:00000C7A                 cmp     [ebp+var_14], eax
.text:00000C7D                 jnz     short loc_C92
.text:00000C7F                 mov     ecx, [ebp+arg_4]
.text:00000C82                 mov     [ebp+var_20], ecx
.text:00000C85                 mov     edx, [ebp+arg_8]
.text:00000C88                 mov     eax, [ebp+var_4]
.text:00000C8B                 sub     eax, [edx]
.text:00000C8D                 mov     [ebp+var_28], eax
.text:00000C90                 jmp     short loc_CC3
.text:00000C92 ; ---------------------------------------------------------------------------
.text:00000C92
.text:00000C92 loc_C92:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+13Dj
.text:00000C92                 mov     ecx, [ebp+var_14]
.text:00000C95                 mov     edx, [ebp+arg_0]
.text:00000C98                 mov     eax, [ebp+var_14]
.text:00000C9B                 mov     esi, [ebp+arg_0]
.text:00000C9E                 mov     ecx, [edx+ecx*4+18h]
.text:00000CA2                 cmp     ecx, [esi+eax*4+24h]
.text:00000CA6                 jz      short loc_CAD
.text:00000CA8                 jmp     loc_BE8
.text:00000CAD ; ---------------------------------------------------------------------------
.text:00000CAD
.text:00000CAD loc_CAD:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+166j
.text:00000CAD                 mov     edx, [ebp+var_14]
.text:00000CB0                 shl     edx, 11h
.text:00000CB3                 mov     eax, [ebp+arg_0]
.text:00000CB6                 add     edx, [eax+4]
.text:00000CB9                 mov     [ebp+var_20], edx
.text:00000CBC                 mov     [ebp+var_28], 20000h
.text:00000CC3
.text:00000CC3 loc_CC3:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+150j
.text:00000CC3                 mov     esi, esp
.text:00000CC5                 lea     ecx, [ebp+var_48]
.text:00000CC8                 push    ecx
.text:00000CC9                 mov     edx, [ebp+arg_18]
.text:00000CCC                 push    edx
.text:00000CCD                 mov     eax, [ebp+var_40]
.text:00000CD0                 push    eax
.text:00000CD1                 lea     ecx, [ebp+var_34]
.text:00000CD4                 push    ecx
.text:00000CD5                 mov     edx, [ebp+var_3C]
.text:00000CD8                 push    edx
.text:00000CD9                 lea     eax, [ebp+var_28]
.text:00000CDC                 push    eax
.text:00000CDD                 mov     ecx, [ebp+var_20]
.text:00000CE0                 push    ecx
.text:00000CE1                 mov     edx, [ebp+var_1C]
.text:00000CE4                 mov     eax, [edx]
.text:00000CE6                 push    eax
.text:00000CE7                 mov     ecx, [ebp+var_1C]
.text:00000CEA                 mov     edx, [ecx+10h]
.text:00000CED                 call    edx
.text:00000CEF                 cmp     esi, esp
.text:00000CF1                 call    __RTC_CheckEsp
.text:00000CF6                 mov     [ebp+var_18], eax
.text:00000CF9                 cmp     [ebp+var_48], 0
.text:00000CFD                 jnz     short loc_D06
.text:00000CFF                 mov     [ebp+var_C], 0
.text:00000D06
.text:00000D06 loc_D06:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+1BDj
.text:00000D06                 cmp     [ebp+var_14], 0
.text:00000D0A                 jnz     short loc_D24
.text:00000D0C                 mov     eax, [ebp+arg_10]
.text:00000D0F                 mov     ecx, [eax]
.text:00000D11                 add     ecx, [ebp+var_34]
.text:00000D14                 mov     edx, [ebp+arg_10]
.text:00000D17                 mov     [edx], ecx
.text:00000D19                 mov     eax, [ebp+arg_C]
.text:00000D1C                 add     eax, [ebp+var_34]
.text:00000D1F                 mov     [ebp+arg_C], eax
.text:00000D22                 jmp     short loc_D3B
.text:00000D24 ; ---------------------------------------------------------------------------
.text:00000D24
.text:00000D24 loc_D24:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+1CAj
.text:00000D24                 mov     ecx, [ebp+var_14]
.text:00000D27                 mov     edx, [ebp+arg_0]
.text:00000D2A                 mov     eax, [edx+ecx*4+14h]
.text:00000D2E                 add     eax, [ebp+var_34]
.text:00000D31                 mov     ecx, [ebp+var_14]
.text:00000D34                 mov     edx, [ebp+arg_0]
.text:00000D37                 mov     [edx+ecx*4+14h], eax
.text:00000D3B
.text:00000D3B loc_D3B:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+1E2j
.text:00000D3B                 mov     eax, [ebp+arg_0]
.text:00000D3E                 mov     ecx, [eax+8]
.text:00000D41                 sub     ecx, 1
.text:00000D44                 cmp     [ebp+var_14], ecx
.text:00000D47                 jnz     short loc_D61
.text:00000D49                 mov     edx, [ebp+arg_8]
.text:00000D4C                 mov     eax, [edx]
.text:00000D4E                 add     eax, [ebp+var_28]
.text:00000D51                 mov     ecx, [ebp+arg_8]
.text:00000D54                 mov     [ecx], eax
.text:00000D56                 mov     edx, [ebp+arg_4]
.text:00000D59                 add     edx, [ebp+var_28]
.text:00000D5C                 mov     [ebp+arg_4], edx
.text:00000D5F                 jmp     short loc_D89
.text:00000D61 ; ---------------------------------------------------------------------------
.text:00000D61
.text:00000D61 loc_D61:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+207j
.text:00000D61                 mov     eax, [ebp+var_14]
.text:00000D64                 mov     ecx, [ebp+arg_0]
.text:00000D67                 mov     edx, [ebp+var_28]
.text:00000D6A                 mov     [ecx+eax*4+24h], edx
.text:00000D6E                 mov     eax, [ebp+var_14]
.text:00000D71                 mov     ecx, [ebp+arg_0]
.text:00000D74                 mov     dword ptr [ecx+eax*4+18h], 0
.text:00000D7C                 mov     edx, [ebp+var_14]
.text:00000D7F                 mov     eax, [ebp+arg_0]
.text:00000D82                 mov     ecx, [ebp+var_48]
.text:00000D85                 mov     [eax+edx*4+0Ch], ecx
.text:00000D89
.text:00000D89 loc_D89:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+21Fj
.text:00000D89                 cmp     [ebp+var_18], 0
.text:00000D8D                 jz      short loc_D94
.text:00000D8F                 mov     eax, [ebp+var_18]
.text:00000D92                 jmp     short loc_DCA
.text:00000D94 ; ---------------------------------------------------------------------------
.text:00000D94
.text:00000D94 loc_D94:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+24Dj
.text:00000D94                 cmp     [ebp+var_28], 0
.text:00000D98                 jnz     short loc_DA0
.text:00000D9A                 cmp     [ebp+var_34], 0
.text:00000D9E                 jz      short loc_DA7
.text:00000DA0
.text:00000DA0 loc_DA0:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+258j
.text:00000DA0                 mov     [ebp+var_10], 1
.text:00000DA7
.text:00000DA7 loc_DA7:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+25Ej
.text:00000DA7                 jmp     loc_BE8
.text:00000DAC ; ---------------------------------------------------------------------------
.text:00000DAC
.text:00000DAC loc_DAC:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+BAj
.text:00000DAC                 cmp     [ebp+var_10], 0
.text:00000DB0                 jnz     short loc_DB4
.text:00000DB2                 jmp     short loc_DB9
.text:00000DB4 ; ---------------------------------------------------------------------------
.text:00000DB4
.text:00000DB4 loc_DB4:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+270j
.text:00000DB4                 jmp     loc_BD8
.text:00000DB9 ; ---------------------------------------------------------------------------
.text:00000DB9
.text:00000DB9 loc_DB9:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+272j
.text:00000DB9                 cmp     [ebp+var_C], 0
.text:00000DBD                 jz      short loc_DC8
.text:00000DBF                 mov     edx, [ebp+arg_1C]
.text:00000DC2                 mov     dword ptr [edx], 1
.text:00000DC8
.text:00000DC8 loc_DC8:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+27Dj
.text:00000DC8                 xor     eax, eax
.text:00000DCA
.text:00000DCA loc_DCA:                                ; CODE XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+83j
.text:00000DCA                                         ; MixCoder_Code(x,x,x,x,x,x,x,x)+252j
.text:00000DCA                 push    edx
.text:00000DCB                 mov     ecx, ebp
.text:00000DCD                 push    eax
.text:00000DCE                 lea     edx, $LN30
.text:00000DD4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000DD9                 pop     eax
.text:00000DDA                 pop     edx
.text:00000DDB                 pop     edi
.text:00000DDC                 pop     esi
.text:00000DDD                 add     esp, 4Ch
.text:00000DE0                 cmp     ebp, esp
.text:00000DE2                 call    __RTC_CheckEsp
.text:00000DE7                 mov     esp, ebp
.text:00000DE9                 pop     ebp
.text:00000DEA                 retn    20h
.text:00000DEA _MixCoder_Code@32 endp
.text:00000DEA
.text:00000DEA ; ---------------------------------------------------------------------------
.text:00000DED                 align 10h
.text:00000DF0 $LN30           dd 3                    ; DATA XREF: MixCoder_Code(x,x,x,x,x,x,x,x)+28Eo
.text:00000DF4                 dd offset $LN29
.text:00000DF8 $LN29           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:00000DF4o
.text:00000E00                 dd offset $LN26         ; "destLenCur"
.text:00000E04                 db 0CCh
.text:00000E05                 db 3 dup(0FFh)
.text:00000E08                 dd 4
.text:00000E0C                 dd offset $LN27         ; "srcLenCur"
.text:00000E10                 dd 0FFFFFFB8h, 4
.text:00000E18                 dd offset $LN28         ; "encodingWasFinished"
.text:00000E1C $LN28           db 'encodingWasFinished',0 ; DATA XREF: .text:00000E18o
.text:00000E30 $LN27           db 'srcLenCur',0        ; DATA XREF: .text:00000E0Co
.text:00000E3A $LN26           db 'destLenCur',0       ; DATA XREF: .text:00000E00o
.text:00000E45                 align 10h
.text:00000E50
.text:00000E50 ; =============== S U B R O U T I N E =======================================
.text:00000E50
.text:00000E50 ; Attributes: bp-based frame
.text:00000E50
.text:00000E50 ; __stdcall Xz_ParseHeader(x, x)
.text:00000E50                 public _Xz_ParseHeader@8
.text:00000E50 _Xz_ParseHeader@8 proc near             ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+2DBp
.text:00000E50
.text:00000E50 arg_0           = dword ptr  8
.text:00000E50 arg_4           = dword ptr  0Ch
.text:00000E50
.text:00000E50                 push    ebp
.text:00000E51                 mov     ebp, esp
.text:00000E53                 mov     eax, [ebp+arg_4]
.text:00000E56                 movzx   ecx, byte ptr [eax+6]
.text:00000E5A                 shl     ecx, 8
.text:00000E5D                 mov     edx, [ebp+arg_4]
.text:00000E60                 movzx   eax, byte ptr [edx+7]
.text:00000E64                 or      ecx, eax
.text:00000E66                 mov     edx, [ebp+arg_0]
.text:00000E69                 mov     [edx], cx
.text:00000E6C                 mov     ecx, [ebp+arg_4]
.text:00000E6F                 add     ecx, 6
.text:00000E72                 mov     edx, 2
.text:00000E77                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000E7C                 mov     ecx, [ebp+arg_4]
.text:00000E7F                 cmp     eax, [ecx+8]
.text:00000E82                 jz      short loc_E8B
.text:00000E84                 mov     eax, 11h
.text:00000E89                 jmp     short loc_EA1
.text:00000E8B ; ---------------------------------------------------------------------------
.text:00000E8B
.text:00000E8B loc_E8B:                                ; CODE XREF: Xz_ParseHeader(x,x)+32j
.text:00000E8B                 mov     edx, [ebp+arg_0]
.text:00000E8E                 movzx   eax, word ptr [edx]
.text:00000E91                 xor     ecx, ecx
.text:00000E93                 cmp     eax, 0Fh
.text:00000E96                 setle   cl
.text:00000E99                 sub     ecx, 1
.text:00000E9C                 and     ecx, 4
.text:00000E9F                 mov     eax, ecx
.text:00000EA1
.text:00000EA1 loc_EA1:                                ; CODE XREF: Xz_ParseHeader(x,x)+39j
.text:00000EA1                 cmp     ebp, esp
.text:00000EA3                 call    __RTC_CheckEsp
.text:00000EA8                 pop     ebp
.text:00000EA9                 retn    8
.text:00000EA9 _Xz_ParseHeader@8 endp
.text:00000EA9
.text:00000EA9 ; ---------------------------------------------------------------------------
.text:00000EAC                 align 10h
.text:00000EB0
.text:00000EB0 ; =============== S U B R O U T I N E =======================================
.text:00000EB0
.text:00000EB0 ; Attributes: bp-based frame
.text:00000EB0
.text:00000EB0 ; __stdcall XzBlock_Parse(x, x)
.text:00000EB0                 public _XzBlock_Parse@8
.text:00000EB0 _XzBlock_Parse@8 proc near              ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+4EBp
.text:00000EB0
.text:00000EB0 var_4C          = dword ptr -4Ch
.text:00000EB0 var_48          = dword ptr -48h
.text:00000EB0 var_44          = dword ptr -44h
.text:00000EB0 var_40          = dword ptr -40h
.text:00000EB0 var_3C          = dword ptr -3Ch
.text:00000EB0 var_38          = dword ptr -38h
.text:00000EB0 var_34          = dword ptr -34h
.text:00000EB0 var_30          = dword ptr -30h
.text:00000EB0 Size            = dword ptr -28h
.text:00000EB0 var_24          = dword ptr -24h
.text:00000EB0 var_1C          = dword ptr -1Ch
.text:00000EB0 var_18          = dword ptr -18h
.text:00000EB0 var_14          = dword ptr -14h
.text:00000EB0 var_10          = dword ptr -10h
.text:00000EB0 var_C           = dword ptr -0Ch
.text:00000EB0 var_8           = dword ptr -8
.text:00000EB0 var_4           = dword ptr -4
.text:00000EB0 arg_0           = dword ptr  8
.text:00000EB0 arg_4           = dword ptr  0Ch
.text:00000EB0
.text:00000EB0                 push    ebp
.text:00000EB1                 mov     ebp, esp
.text:00000EB3                 sub     esp, 4Ch
.text:00000EB6                 push    edi
.text:00000EB7                 lea     edi, [ebp+var_4C]
.text:00000EBA                 mov     ecx, 13h
.text:00000EBF                 mov     eax, 0CCCCCCCCh
.text:00000EC4                 rep stosd
.text:00000EC6                 mov     eax, [ebp+arg_4]
.text:00000EC9                 movzx   ecx, byte ptr [eax]
.text:00000ECC                 shl     ecx, 2
.text:00000ECF                 mov     [ebp+var_10], ecx
.text:00000ED2                 mov     edx, [ebp+var_10]
.text:00000ED5                 mov     ecx, [ebp+arg_4]
.text:00000ED8                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000EDD                 mov     edx, [ebp+arg_4]
.text:00000EE0                 add     edx, [ebp+var_10]
.text:00000EE3                 cmp     eax, [edx]
.text:00000EE5                 jz      short loc_EF1
.text:00000EE7                 mov     eax, 10h
.text:00000EEC                 jmp     loc_112D
.text:00000EF1 ; ---------------------------------------------------------------------------
.text:00000EF1
.text:00000EF1 loc_EF1:                                ; CODE XREF: XzBlock_Parse(x,x)+35j
.text:00000EF1                 mov     [ebp+var_4], 1
.text:00000EF8                 mov     eax, [ebp+var_4]
.text:00000EFB                 cmp     eax, [ebp+var_10]
.text:00000EFE                 jnz     short loc_F0A
.text:00000F00                 mov     eax, 10h
.text:00000F05                 jmp     loc_112D
.text:00000F0A ; ---------------------------------------------------------------------------
.text:00000F0A
.text:00000F0A loc_F0A:                                ; CODE XREF: XzBlock_Parse(x,x)+4Ej
.text:00000F0A                 mov     ecx, [ebp+arg_4]
.text:00000F0D                 add     ecx, [ebp+var_4]
.text:00000F10                 mov     edx, [ebp+arg_0]
.text:00000F13                 mov     al, [ecx]
.text:00000F15                 mov     [edx+10h], al
.text:00000F18                 mov     ecx, [ebp+var_4]
.text:00000F1B                 add     ecx, 1
.text:00000F1E                 mov     [ebp+var_4], ecx
.text:00000F21                 mov     edx, [ebp+arg_0]
.text:00000F24                 movzx   eax, byte ptr [edx+10h]
.text:00000F28                 and     eax, 40h
.text:00000F2B                 jz      short loc_FA1
.text:00000F2D                 mov     ecx, [ebp+arg_0]
.text:00000F30                 push    ecx
.text:00000F31                 mov     edx, [ebp+var_10]
.text:00000F34                 sub     edx, [ebp+var_4]
.text:00000F37                 push    edx
.text:00000F38                 mov     eax, [ebp+arg_4]
.text:00000F3B                 add     eax, [ebp+var_4]
.text:00000F3E                 push    eax
.text:00000F3F                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:00000F44                 mov     [ebp+var_14], eax
.text:00000F47                 cmp     [ebp+var_14], 0
.text:00000F4B                 jnz     short loc_F57
.text:00000F4D                 mov     eax, 10h
.text:00000F52                 jmp     loc_112D
.text:00000F57 ; ---------------------------------------------------------------------------
.text:00000F57
.text:00000F57 loc_F57:                                ; CODE XREF: XzBlock_Parse(x,x)+9Bj
.text:00000F57                 mov     ecx, [ebp+var_4]
.text:00000F5A                 add     ecx, [ebp+var_14]
.text:00000F5D                 mov     [ebp+var_4], ecx
.text:00000F60                 mov     edx, [ebp+arg_0]
.text:00000F63                 mov     [ebp+var_38], edx
.text:00000F66                 mov     eax, [ebp+var_38]
.text:00000F69                 mov     ecx, [ebp+var_38]
.text:00000F6C                 mov     edx, [eax]
.text:00000F6E                 or      edx, [ecx+4]
.text:00000F71                 jz      short loc_F97
.text:00000F73                 mov     eax, [ebp+var_10]
.text:00000F76                 xor     ecx, ecx
.text:00000F78                 mov     edx, [ebp+arg_0]
.text:00000F7B                 add     eax, [edx]
.text:00000F7D                 adc     ecx, [edx+4]
.text:00000F80                 mov     [ebp+var_40], eax
.text:00000F83                 mov     [ebp+var_3C], ecx
.text:00000F86                 cmp     [ebp+var_3C], 80000000h
.text:00000F8D                 jb      short loc_FA1
.text:00000F8F                 ja      short loc_F97
.text:00000F91                 cmp     [ebp+var_40], 0
.text:00000F95                 jb      short loc_FA1
.text:00000F97
.text:00000F97 loc_F97:                                ; CODE XREF: XzBlock_Parse(x,x)+C1j
.text:00000F97                                         ; XzBlock_Parse(x,x)+DFj
.text:00000F97                 mov     eax, 10h
.text:00000F9C                 jmp     loc_112D
.text:00000FA1 ; ---------------------------------------------------------------------------
.text:00000FA1
.text:00000FA1 loc_FA1:                                ; CODE XREF: XzBlock_Parse(x,x)+7Bj
.text:00000FA1                                         ; XzBlock_Parse(x,x)+DDj ...
.text:00000FA1                 mov     eax, [ebp+arg_0]
.text:00000FA4                 movzx   ecx, byte ptr [eax+10h]
.text:00000FA8                 and     ecx, 80h
.text:00000FAE                 jz      short loc_FE6
.text:00000FB0                 mov     edx, [ebp+arg_0]
.text:00000FB3                 add     edx, 8
.text:00000FB6                 push    edx
.text:00000FB7                 mov     eax, [ebp+var_10]
.text:00000FBA                 sub     eax, [ebp+var_4]
.text:00000FBD                 push    eax
.text:00000FBE                 mov     ecx, [ebp+arg_4]
.text:00000FC1                 add     ecx, [ebp+var_4]
.text:00000FC4                 push    ecx
.text:00000FC5                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:00000FCA                 mov     [ebp+var_18], eax
.text:00000FCD                 cmp     [ebp+var_18], 0
.text:00000FD1                 jnz     short loc_FDD
.text:00000FD3                 mov     eax, 10h
.text:00000FD8                 jmp     loc_112D
.text:00000FDD ; ---------------------------------------------------------------------------
.text:00000FDD
.text:00000FDD loc_FDD:                                ; CODE XREF: XzBlock_Parse(x,x)+121j
.text:00000FDD                 mov     edx, [ebp+var_4]
.text:00000FE0                 add     edx, [ebp+var_18]
.text:00000FE3                 mov     [ebp+var_4], edx
.text:00000FE6
.text:00000FE6 loc_FE6:                                ; CODE XREF: XzBlock_Parse(x,x)+FEj
.text:00000FE6                 mov     eax, [ebp+arg_0]
.text:00000FE9                 movzx   ecx, byte ptr [eax+10h]
.text:00000FED                 and     ecx, 3
.text:00000FF0                 add     ecx, 1
.text:00000FF3                 mov     [ebp+var_8], ecx
.text:00000FF6                 mov     [ebp+var_C], 0
.text:00000FFD                 jmp     short loc_1008
.text:00000FFF ; ---------------------------------------------------------------------------
.text:00000FFF
.text:00000FFF loc_FFF:                                ; CODE XREF: XzBlock_Parse(x,x)+239j
.text:00000FFF                 mov     edx, [ebp+var_C]
.text:00001002                 add     edx, 1
.text:00001005                 mov     [ebp+var_C], edx
.text:00001008
.text:00001008 loc_1008:                               ; CODE XREF: XzBlock_Parse(x,x)+14Dj
.text:00001008                 mov     eax, [ebp+var_C]
.text:0000100B                 cmp     eax, [ebp+var_8]
.text:0000100E                 jnb     loc_10EE
.text:00001014                 mov     ecx, [ebp+var_C]
.text:00001017                 shl     ecx, 5
.text:0000101A                 mov     edx, [ebp+arg_0]
.text:0000101D                 lea     eax, [edx+ecx+18h]
.text:00001021                 mov     [ebp+var_1C], eax
.text:00001024                 mov     ecx, [ebp+var_1C]
.text:00001027                 push    ecx
.text:00001028                 mov     edx, [ebp+var_10]
.text:0000102B                 sub     edx, [ebp+var_4]
.text:0000102E                 push    edx
.text:0000102F                 mov     eax, [ebp+arg_4]
.text:00001032                 add     eax, [ebp+var_4]
.text:00001035                 push    eax
.text:00001036                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:0000103B                 mov     [ebp+var_30], eax
.text:0000103E                 cmp     [ebp+var_30], 0
.text:00001042                 jnz     short loc_104E
.text:00001044                 mov     eax, 10h
.text:00001049                 jmp     loc_112D
.text:0000104E ; ---------------------------------------------------------------------------
.text:0000104E
.text:0000104E loc_104E:                               ; CODE XREF: XzBlock_Parse(x,x)+192j
.text:0000104E                 mov     ecx, [ebp+var_4]
.text:00001051                 add     ecx, [ebp+var_30]
.text:00001054                 mov     [ebp+var_4], ecx
.text:00001057                 lea     edx, [ebp+Size]
.text:0000105A                 push    edx
.text:0000105B                 mov     eax, [ebp+var_10]
.text:0000105E                 sub     eax, [ebp+var_4]
.text:00001061                 push    eax
.text:00001062                 mov     ecx, [ebp+arg_4]
.text:00001065                 add     ecx, [ebp+var_4]
.text:00001068                 push    ecx
.text:00001069                 call    _Xz_ReadVarInt@12 ; Xz_ReadVarInt(x,x,x)
.text:0000106E                 mov     [ebp+var_34], eax
.text:00001071                 cmp     [ebp+var_34], 0
.text:00001075                 jnz     short loc_1081
.text:00001077                 mov     eax, 10h
.text:0000107C                 jmp     loc_112D
.text:00001081 ; ---------------------------------------------------------------------------
.text:00001081
.text:00001081 loc_1081:                               ; CODE XREF: XzBlock_Parse(x,x)+1C5j
.text:00001081                 mov     edx, [ebp+var_4]
.text:00001084                 add     edx, [ebp+var_34]
.text:00001087                 mov     [ebp+var_4], edx
.text:0000108A                 mov     eax, [ebp+var_10]
.text:0000108D                 sub     eax, [ebp+var_4]
.text:00001090                 xor     ecx, ecx
.text:00001092                 mov     [ebp+var_48], eax
.text:00001095                 mov     [ebp+var_44], ecx
.text:00001098                 mov     edx, [ebp+var_24]
.text:0000109B                 cmp     edx, [ebp+var_44]
.text:0000109E                 ja      short loc_10B6
.text:000010A0                 jb      short loc_10AA
.text:000010A2                 mov     eax, [ebp+Size]
.text:000010A5                 cmp     eax, [ebp+var_48]
.text:000010A8                 ja      short loc_10B6
.text:000010AA
.text:000010AA loc_10AA:                               ; CODE XREF: XzBlock_Parse(x,x)+1F0j
.text:000010AA                 cmp     [ebp+var_24], 0
.text:000010AE                 ja      short loc_10B6
.text:000010B0                 cmp     [ebp+Size], 14h
.text:000010B4                 jbe     short loc_10BD
.text:000010B6
.text:000010B6 loc_10B6:                               ; CODE XREF: XzBlock_Parse(x,x)+1EEj
.text:000010B6                                         ; XzBlock_Parse(x,x)+1F8j ...
.text:000010B6                 mov     eax, 10h
.text:000010BB                 jmp     short loc_112D
.text:000010BD ; ---------------------------------------------------------------------------
.text:000010BD
.text:000010BD loc_10BD:                               ; CODE XREF: XzBlock_Parse(x,x)+204j
.text:000010BD                 mov     ecx, [ebp+Size]
.text:000010C0                 mov     edx, [ebp+var_1C]
.text:000010C3                 mov     [edx+8], ecx
.text:000010C6                 mov     eax, [ebp+Size]
.text:000010C9                 push    eax             ; Size
.text:000010CA                 mov     ecx, [ebp+arg_4]
.text:000010CD                 add     ecx, [ebp+var_4]
.text:000010D0                 push    ecx             ; Src
.text:000010D1                 mov     edx, [ebp+var_1C]
.text:000010D4                 add     edx, 0Ch
.text:000010D7                 push    edx             ; Dst
.text:000010D8                 call    _memcpy
.text:000010DD                 add     esp, 0Ch
.text:000010E0                 mov     eax, [ebp+Size]
.text:000010E3                 add     eax, [ebp+var_4]
.text:000010E6                 mov     [ebp+var_4], eax
.text:000010E9                 jmp     loc_FFF
.text:000010EE ; ---------------------------------------------------------------------------
.text:000010EE
.text:000010EE loc_10EE:                               ; CODE XREF: XzBlock_Parse(x,x)+15Ej
.text:000010EE                                         ; XzBlock_Parse(x,x):loc_1129j
.text:000010EE                 mov     ecx, [ebp+var_4]
.text:000010F1                 cmp     ecx, [ebp+var_10]
.text:000010F4                 jnb     short loc_112B
.text:000010F6                 mov     edx, [ebp+arg_4]
.text:000010F9                 add     edx, [ebp+var_4]
.text:000010FC                 movzx   eax, byte ptr [edx]
.text:000010FF                 mov     ecx, [ebp+var_4]
.text:00001102                 add     ecx, 1
.text:00001105                 mov     [ebp+var_4], ecx
.text:00001108                 test    eax, eax
.text:0000110A                 jz      short loc_1115
.text:0000110C                 mov     [ebp+var_4C], 1
.text:00001113                 jmp     short loc_111C
.text:00001115 ; ---------------------------------------------------------------------------
.text:00001115
.text:00001115 loc_1115:                               ; CODE XREF: XzBlock_Parse(x,x)+25Aj
.text:00001115                 mov     [ebp+var_4C], 0
.text:0000111C
.text:0000111C loc_111C:                               ; CODE XREF: XzBlock_Parse(x,x)+263j
.text:0000111C                 cmp     [ebp+var_4C], 0
.text:00001120                 jz      short loc_1129
.text:00001122                 mov     eax, 10h
.text:00001127                 jmp     short loc_112D
.text:00001129 ; ---------------------------------------------------------------------------
.text:00001129
.text:00001129 loc_1129:                               ; CODE XREF: XzBlock_Parse(x,x)+270j
.text:00001129                 jmp     short loc_10EE
.text:0000112B ; ---------------------------------------------------------------------------
.text:0000112B
.text:0000112B loc_112B:                               ; CODE XREF: XzBlock_Parse(x,x)+244j
.text:0000112B                 xor     eax, eax
.text:0000112D
.text:0000112D loc_112D:                               ; CODE XREF: XzBlock_Parse(x,x)+3Cj
.text:0000112D                                         ; XzBlock_Parse(x,x)+55j ...
.text:0000112D                 push    edx
.text:0000112E                 mov     ecx, ebp
.text:00001130                 push    eax
.text:00001131                 lea     edx, $LN28_0
.text:00001137                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000113C                 pop     eax
.text:0000113D                 pop     edx
.text:0000113E                 pop     edi
.text:0000113F                 add     esp, 4Ch
.text:00001142                 cmp     ebp, esp
.text:00001144                 call    __RTC_CheckEsp
.text:00001149                 mov     esp, ebp
.text:0000114B                 pop     ebp
.text:0000114C                 retn    8
.text:0000114C _XzBlock_Parse@8 endp
.text:0000114C
.text:0000114C ; ---------------------------------------------------------------------------
.text:0000114F                 align 10h
.text:00001150 $LN28_0         dd 1                    ; DATA XREF: XzBlock_Parse(x,x)+281o
.text:00001154                 dd offset $LN27_0
.text:00001158 $LN27_0         dd 0FFFFFFD8h, 8        ; DATA XREF: .text:00001154o
.text:00001160                 dd offset $LN26_0       ; "size"
.text:00001164 $LN26_0         db 'size',0             ; DATA XREF: .text:00001160o
.text:00001169                 align 10h
.text:00001170
.text:00001170 ; =============== S U B R O U T I N E =======================================
.text:00001170
.text:00001170 ; Attributes: bp-based frame
.text:00001170
.text:00001170 ; __stdcall XzDec_Init(x, x)
.text:00001170                 public _XzDec_Init@8
.text:00001170 _XzDec_Init@8   proc near               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+56Ep
.text:00001170
.text:00001170 var_30          = dword ptr -30h
.text:00001170 var_2C          = dword ptr -2Ch
.text:00001170 var_28          = dword ptr -28h
.text:00001170 var_24          = dword ptr -24h
.text:00001170 var_20          = dword ptr -20h
.text:00001170 var_1C          = dword ptr -1Ch
.text:00001170 var_18          = dword ptr -18h
.text:00001170 var_14          = dword ptr -14h
.text:00001170 var_10          = dword ptr -10h
.text:00001170 var_C           = dword ptr -0Ch
.text:00001170 var_8           = dword ptr -8
.text:00001170 var_4           = dword ptr -4
.text:00001170 arg_0           = dword ptr  8
.text:00001170 arg_4           = dword ptr  0Ch
.text:00001170
.text:00001170                 push    ebp
.text:00001171                 mov     ebp, esp
.text:00001173                 sub     esp, 30h
.text:00001176                 push    esi
.text:00001177                 push    edi
.text:00001178                 lea     edi, [ebp+var_30]
.text:0000117B                 mov     ecx, 0Ch
.text:00001180                 mov     eax, 0CCCCCCCCh
.text:00001185                 rep stosd
.text:00001187                 mov     [ebp+var_8], 1
.text:0000118E                 mov     eax, [ebp+arg_4]
.text:00001191                 movzx   ecx, byte ptr [eax+10h]
.text:00001195                 and     ecx, 3
.text:00001198                 add     ecx, 1
.text:0000119B                 mov     [ebp+var_C], ecx
.text:0000119E                 mov     edx, [ebp+arg_0]
.text:000011A1                 mov     eax, [ebp+var_C]
.text:000011A4                 cmp     eax, [edx+8]
.text:000011A7                 jnz     short loc_1222
.text:000011A9                 mov     [ebp+var_4], 0
.text:000011B0                 jmp     short loc_11BB
.text:000011B2 ; ---------------------------------------------------------------------------
.text:000011B2
.text:000011B2 loc_11B2:                               ; CODE XREF: XzDec_Init(x,x):loc_1212j
.text:000011B2                 mov     ecx, [ebp+var_4]
.text:000011B5                 add     ecx, 1
.text:000011B8                 mov     [ebp+var_4], ecx
.text:000011BB
.text:000011BB loc_11BB:                               ; CODE XREF: XzDec_Init(x,x)+40j
.text:000011BB                 mov     edx, [ebp+var_4]
.text:000011BE                 cmp     edx, [ebp+var_C]
.text:000011C1                 jnb     short loc_1214
.text:000011C3                 mov     eax, [ebp+var_C]
.text:000011C6                 sub     eax, 1
.text:000011C9                 sub     eax, [ebp+var_4]
.text:000011CC                 shl     eax, 5
.text:000011CF                 mov     ecx, [ebp+var_4]
.text:000011D2                 mov     edx, [ebp+arg_0]
.text:000011D5                 mov     esi, [ebp+arg_4]
.text:000011D8                 mov     [ebp+var_24], edx
.text:000011DB                 mov     [ebp+var_28], ecx
.text:000011DE                 mov     [ebp+var_2C], esi
.text:000011E1                 mov     [ebp+var_30], eax
.text:000011E4                 mov     eax, [ebp+var_28]
.text:000011E7                 mov     ecx, [ebp+var_24]
.text:000011EA                 mov     edx, [ebp+var_30]
.text:000011ED                 mov     esi, [ebp+var_2C]
.text:000011F0                 mov     eax, [ecx+eax*8+30h]
.text:000011F4                 cmp     eax, [esi+edx+18h]
.text:000011F8                 jnz     short loc_1210
.text:000011FA                 mov     ecx, [ebp+var_28]
.text:000011FD                 mov     edx, [ebp+var_24]
.text:00001200                 mov     eax, [ebp+var_30]
.text:00001203                 mov     esi, [ebp+var_2C]
.text:00001206                 mov     ecx, [edx+ecx*8+34h]
.text:0000120A                 cmp     ecx, [esi+eax+1Ch]
.text:0000120E                 jz      short loc_1212
.text:00001210
.text:00001210 loc_1210:                               ; CODE XREF: XzDec_Init(x,x)+88j
.text:00001210                 jmp     short loc_1214
.text:00001212 ; ---------------------------------------------------------------------------
.text:00001212
.text:00001212 loc_1212:                               ; CODE XREF: XzDec_Init(x,x)+9Ej
.text:00001212                 jmp     short loc_11B2
.text:00001214 ; ---------------------------------------------------------------------------
.text:00001214
.text:00001214 loc_1214:                               ; CODE XREF: XzDec_Init(x,x)+51j
.text:00001214                                         ; XzDec_Init(x,x):loc_1210j
.text:00001214                 mov     edx, [ebp+var_4]
.text:00001217                 xor     eax, eax
.text:00001219                 cmp     edx, [ebp+var_C]
.text:0000121C                 setnz   al
.text:0000121F                 mov     [ebp+var_8], eax
.text:00001222
.text:00001222 loc_1222:                               ; CODE XREF: XzDec_Init(x,x)+37j
.text:00001222                 cmp     [ebp+var_8], 0
.text:00001226                 jz      short loc_1294
.text:00001228                 mov     ecx, [ebp+arg_0]
.text:0000122B                 push    ecx
.text:0000122C                 call    _MixCoder_Free@4 ; MixCoder_Free(x)
.text:00001231                 mov     edx, [ebp+arg_0]
.text:00001234                 mov     eax, [ebp+var_C]
.text:00001237                 mov     [edx+8], eax
.text:0000123A                 mov     [ebp+var_4], 0
.text:00001241                 jmp     short loc_124C
.text:00001243 ; ---------------------------------------------------------------------------
.text:00001243
.text:00001243 loc_1243:                               ; CODE XREF: XzDec_Init(x,x):loc_1292j
.text:00001243                 mov     ecx, [ebp+var_4]
.text:00001246                 add     ecx, 1
.text:00001249                 mov     [ebp+var_4], ecx
.text:0000124C
.text:0000124C loc_124C:                               ; CODE XREF: XzDec_Init(x,x)+D1j
.text:0000124C                 mov     edx, [ebp+var_4]
.text:0000124F                 cmp     edx, [ebp+var_C]
.text:00001252                 jnb     short loc_1294
.text:00001254                 mov     eax, [ebp+var_C]
.text:00001257                 sub     eax, 1
.text:0000125A                 sub     eax, [ebp+var_4]
.text:0000125D                 shl     eax, 5
.text:00001260                 mov     ecx, [ebp+arg_4]
.text:00001263                 lea     edx, [ecx+eax+18h]
.text:00001267                 mov     [ebp+var_10], edx
.text:0000126A                 mov     eax, [ebp+var_10]
.text:0000126D                 mov     ecx, [eax+4]
.text:00001270                 push    ecx
.text:00001271                 mov     edx, [eax]
.text:00001273                 push    edx
.text:00001274                 mov     eax, [ebp+var_4]
.text:00001277                 push    eax
.text:00001278                 mov     ecx, [ebp+arg_0]
.text:0000127B                 push    ecx
.text:0000127C                 call    _MixCoder_SetFromMethod@16 ; MixCoder_SetFromMethod(x,x,x,x)
.text:00001281                 mov     [ebp+var_14], eax
.text:00001284                 cmp     [ebp+var_14], 0
.text:00001288                 jz      short loc_1292
.text:0000128A                 mov     eax, [ebp+var_14]
.text:0000128D                 jmp     loc_131A
.text:00001292 ; ---------------------------------------------------------------------------
.text:00001292
.text:00001292 loc_1292:                               ; CODE XREF: XzDec_Init(x,x)+118j
.text:00001292                 jmp     short loc_1243
.text:00001294 ; ---------------------------------------------------------------------------
.text:00001294
.text:00001294 loc_1294:                               ; CODE XREF: XzDec_Init(x,x)+B6j
.text:00001294                                         ; XzDec_Init(x,x)+E2j
.text:00001294                 mov     [ebp+var_4], 0
.text:0000129B                 jmp     short loc_12A6
.text:0000129D ; ---------------------------------------------------------------------------
.text:0000129D
.text:0000129D loc_129D:                               ; CODE XREF: XzDec_Init(x,x):loc_130Dj
.text:0000129D                 mov     edx, [ebp+var_4]
.text:000012A0                 add     edx, 1
.text:000012A3                 mov     [ebp+var_4], edx
.text:000012A6
.text:000012A6 loc_12A6:                               ; CODE XREF: XzDec_Init(x,x)+12Bj
.text:000012A6                 mov     eax, [ebp+var_4]
.text:000012A9                 cmp     eax, [ebp+var_C]
.text:000012AC                 jnb     short loc_130F
.text:000012AE                 mov     ecx, [ebp+var_C]
.text:000012B1                 sub     ecx, 1
.text:000012B4                 sub     ecx, [ebp+var_4]
.text:000012B7                 shl     ecx, 5
.text:000012BA                 mov     edx, [ebp+arg_4]
.text:000012BD                 lea     eax, [edx+ecx+18h]
.text:000012C1                 mov     [ebp+var_18], eax
.text:000012C4                 mov     ecx, [ebp+var_4]
.text:000012C7                 imul    ecx, 14h
.text:000012CA                 mov     edx, [ebp+arg_0]
.text:000012CD                 lea     eax, [edx+ecx+50h]
.text:000012D1                 mov     [ebp+var_1C], eax
.text:000012D4                 mov     esi, esp
.text:000012D6                 mov     ecx, [ebp+arg_0]
.text:000012D9                 mov     edx, [ecx]
.text:000012DB                 push    edx
.text:000012DC                 mov     eax, [ebp+var_18]
.text:000012DF                 mov     ecx, [eax+8]
.text:000012E2                 push    ecx
.text:000012E3                 mov     edx, [ebp+var_18]
.text:000012E6                 add     edx, 0Ch
.text:000012E9                 push    edx
.text:000012EA                 mov     eax, [ebp+var_1C]
.text:000012ED                 mov     ecx, [eax]
.text:000012EF                 push    ecx
.text:000012F0                 mov     edx, [ebp+var_1C]
.text:000012F3                 mov     eax, [edx+8]
.text:000012F6                 call    eax
.text:000012F8                 cmp     esi, esp
.text:000012FA                 call    __RTC_CheckEsp
.text:000012FF                 mov     [ebp+var_20], eax
.text:00001302                 cmp     [ebp+var_20], 0
.text:00001306                 jz      short loc_130D
.text:00001308                 mov     eax, [ebp+var_20]
.text:0000130B                 jmp     short loc_131A
.text:0000130D ; ---------------------------------------------------------------------------
.text:0000130D
.text:0000130D loc_130D:                               ; CODE XREF: XzDec_Init(x,x)+196j
.text:0000130D                 jmp     short loc_129D
.text:0000130F ; ---------------------------------------------------------------------------
.text:0000130F
.text:0000130F loc_130F:                               ; CODE XREF: XzDec_Init(x,x)+13Cj
.text:0000130F                 mov     ecx, [ebp+arg_0]
.text:00001312                 push    ecx
.text:00001313                 call    _MixCoder_Init@4 ; MixCoder_Init(x)
.text:00001318                 xor     eax, eax
.text:0000131A
.text:0000131A loc_131A:                               ; CODE XREF: XzDec_Init(x,x)+11Dj
.text:0000131A                                         ; XzDec_Init(x,x)+19Bj
.text:0000131A                 pop     edi
.text:0000131B                 pop     esi
.text:0000131C                 add     esp, 30h
.text:0000131F                 cmp     ebp, esp
.text:00001321                 call    __RTC_CheckEsp
.text:00001326                 mov     esp, ebp
.text:00001328                 pop     ebp
.text:00001329                 retn    8
.text:00001329 _XzDec_Init@8   endp
.text:00001329
.text:00001329 ; ---------------------------------------------------------------------------
.text:0000132C                 align 10h
.text:00001330
.text:00001330 ; =============== S U B R O U T I N E =======================================
.text:00001330
.text:00001330 ; Attributes: bp-based frame
.text:00001330
.text:00001330 ; __stdcall XzUnpacker_Init(x)
.text:00001330                 public _XzUnpacker_Init@4
.text:00001330 _XzUnpacker_Init@4 proc near            ; CODE XREF: XzUnpacker_Construct(x,x)+17p
.text:00001330
.text:00001330 arg_0           = dword ptr  8
.text:00001330
.text:00001330                 push    ebp
.text:00001331                 mov     ebp, esp
.text:00001333                 mov     eax, [ebp+arg_0]
.text:00001336                 mov     dword ptr [eax], 0
.text:0000133C                 mov     ecx, [ebp+arg_0]
.text:0000133F                 mov     dword ptr [ecx+4], 0
.text:00001346                 mov     edx, [ebp+arg_0]
.text:00001349                 mov     dword ptr [edx+48h], 0
.text:00001350                 mov     dword ptr [edx+4Ch], 0
.text:00001357                 mov     eax, [ebp+arg_0]
.text:0000135A                 mov     dword ptr [eax+50h], 0
.text:00001361                 mov     dword ptr [eax+54h], 0
.text:00001368                 mov     ecx, [ebp+arg_0]
.text:0000136B                 mov     dword ptr [ecx+58h], 0
.text:00001372                 mov     dword ptr [ecx+5Ch], 0
.text:00001379                 mov     edx, [ebp+arg_0]
.text:0000137C                 mov     dword ptr [edx+40h], 0
.text:00001383                 mov     dword ptr [edx+44h], 0
.text:0000138A                 pop     ebp
.text:0000138B                 retn    4
.text:0000138B _XzUnpacker_Init@4 endp
.text:0000138B
.text:0000138B ; ---------------------------------------------------------------------------
.text:0000138E                 align 10h
.text:00001390
.text:00001390 ; =============== S U B R O U T I N E =======================================
.text:00001390
.text:00001390 ; Attributes: bp-based frame
.text:00001390
.text:00001390 ; __stdcall XzUnpacker_Construct(x, x)
.text:00001390                 public _XzUnpacker_Construct@8
.text:00001390 _XzUnpacker_Construct@8 proc near
.text:00001390
.text:00001390 arg_0           = dword ptr  8
.text:00001390 arg_4           = dword ptr  0Ch
.text:00001390
.text:00001390                 push    ebp
.text:00001391                 mov     ebp, esp
.text:00001393                 mov     eax, [ebp+arg_4]
.text:00001396                 push    eax
.text:00001397                 mov     ecx, [ebp+arg_0]
.text:0000139A                 add     ecx, 68h ; 'h'
.text:0000139D                 push    ecx
.text:0000139E                 call    _MixCoder_Construct@8 ; MixCoder_Construct(x,x)
.text:000013A3                 mov     edx, [ebp+arg_0]
.text:000013A6                 push    edx
.text:000013A7                 call    _XzUnpacker_Init@4 ; XzUnpacker_Init(x)
.text:000013AC                 cmp     ebp, esp
.text:000013AE                 call    __RTC_CheckEsp
.text:000013B3                 pop     ebp
.text:000013B4                 retn    8
.text:000013B4 _XzUnpacker_Construct@8 endp
.text:000013B4
.text:000013B4 ; ---------------------------------------------------------------------------
.text:000013B7                 align 10h
.text:000013C0
.text:000013C0 ; =============== S U B R O U T I N E =======================================
.text:000013C0
.text:000013C0 ; Attributes: bp-based frame
.text:000013C0
.text:000013C0 ; __stdcall XzUnpacker_Free(x)
.text:000013C0                 public _XzUnpacker_Free@4
.text:000013C0 _XzUnpacker_Free@4 proc near
.text:000013C0
.text:000013C0 arg_0           = dword ptr  8
.text:000013C0
.text:000013C0                 push    ebp
.text:000013C1                 mov     ebp, esp
.text:000013C3                 mov     eax, [ebp+arg_0]
.text:000013C6                 add     eax, 68h ; 'h'
.text:000013C9                 push    eax
.text:000013CA                 call    _MixCoder_Free@4 ; MixCoder_Free(x)
.text:000013CF                 cmp     ebp, esp
.text:000013D1                 call    __RTC_CheckEsp
.text:000013D6                 pop     ebp
.text:000013D7                 retn    4
.text:000013D7 _XzUnpacker_Free@4 endp
.text:000013D7
.text:000013D7 ; ---------------------------------------------------------------------------
.text:000013DA                 align 10h
.text:000013E0
.text:000013E0 ; =============== S U B R O U T I N E =======================================
.text:000013E0
.text:000013E0 ; Attributes: bp-based frame
.text:000013E0
.text:000013E0 ; int __stdcall XzUnpacker_Code(int, int, int, void *Src, int, int, int)
.text:000013E0                 public _XzUnpacker_Code@28
.text:000013E0 _XzUnpacker_Code@28 proc near
.text:000013E0
.text:000013E0 var_120         = dword ptr -120h
.text:000013E0 var_11C         = dword ptr -11Ch
.text:000013E0 var_118         = dword ptr -118h
.text:000013E0 var_114         = dword ptr -114h
.text:000013E0 var_110         = dword ptr -110h
.text:000013E0 var_10C         = dword ptr -10Ch
.text:000013E0 var_108         = dword ptr -108h
.text:000013E0 var_104         = dword ptr -104h
.text:000013E0 var_100         = dword ptr -100h
.text:000013E0 var_FC          = dword ptr -0FCh
.text:000013E0 var_F8          = dword ptr -0F8h
.text:000013E0 var_F4          = dword ptr -0F4h
.text:000013E0 var_EC          = byte ptr -0ECh
.text:000013E0 var_C5          = byte ptr -0C5h
.text:000013E0 var_C4          = dword ptr -0C4h
.text:000013E0 var_C0          = dword ptr -0C0h
.text:000013E0 Buf1            = byte ptr -0B8h
.text:000013E0 var_74          = dword ptr -74h
.text:000013E0 var_70          = dword ptr -70h
.text:000013E0 var_6C          = dword ptr -6Ch
.text:000013E0 var_68          = dword ptr -68h
.text:000013E0 Size            = dword ptr -64h
.text:000013E0 var_60          = dword ptr -60h
.text:000013E0 var_5C          = dword ptr -5Ch
.text:000013E0 var_54          = byte ptr -54h
.text:000013E0 var_30          = dword ptr -30h
.text:000013E0 var_2C          = dword ptr -2Ch
.text:000013E0 var_24          = dword ptr -24h
.text:000013E0 var_18          = dword ptr -18h
.text:000013E0 var_10          = dword ptr -10h
.text:000013E0 var_C           = dword ptr -0Ch
.text:000013E0 var_8           = dword ptr -8
.text:000013E0 var_4           = dword ptr -4
.text:000013E0 arg_0           = dword ptr  8
.text:000013E0 arg_4           = dword ptr  0Ch
.text:000013E0 arg_8           = dword ptr  10h
.text:000013E0 Src             = dword ptr  14h
.text:000013E0 arg_10          = dword ptr  18h
.text:000013E0 arg_14          = dword ptr  1Ch
.text:000013E0 arg_18          = dword ptr  20h
.text:000013E0
.text:000013E0                 push    ebp
.text:000013E1                 mov     ebp, esp
.text:000013E3                 sub     esp, 120h
.text:000013E9                 push    esi
.text:000013EA                 push    edi
.text:000013EB                 lea     edi, [ebp+var_120]
.text:000013F1                 mov     ecx, 48h ; 'H'
.text:000013F6                 mov     eax, 0CCCCCCCCh
.text:000013FB                 rep stosd
.text:000013FD                 mov     eax, dword ptr ds:___security_cookie
.text:00001402                 xor     eax, ebp
.text:00001404                 mov     [ebp+var_4], eax
.text:00001407                 mov     eax, [ebp+arg_8]
.text:0000140A                 mov     ecx, [eax]
.text:0000140C                 mov     [ebp+var_8], ecx
.text:0000140F                 mov     edx, [ebp+arg_10]
.text:00001412                 mov     eax, [edx]
.text:00001414                 mov     [ebp+var_C], eax
.text:00001417                 mov     ecx, [ebp+arg_8]
.text:0000141A                 mov     dword ptr [ecx], 0
.text:00001420                 mov     edx, [ebp+arg_10]
.text:00001423                 mov     dword ptr [edx], 0
.text:00001429                 mov     eax, [ebp+arg_18]
.text:0000142C                 mov     dword ptr [eax], 0
.text:00001432
.text:00001432 loc_1432:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x):loc_15F8j
.text:00001432                                         ; XzUnpacker_Code(x,x,x,x,x,x,x):$LN47j
.text:00001432                 mov     ecx, [ebp+arg_10]
.text:00001435                 mov     edx, [ebp+var_C]
.text:00001438                 sub     edx, [ecx]
.text:0000143A                 mov     [ebp+var_10], edx
.text:0000143D                 mov     eax, [ebp+arg_0]
.text:00001440                 cmp     dword ptr [eax], 6
.text:00001443                 jnz     loc_15FD
.text:00001449                 mov     ecx, [ebp+arg_8]
.text:0000144C                 mov     edx, [ebp+var_8]
.text:0000144F                 sub     edx, [ecx]
.text:00001451                 mov     [ebp+var_18], edx
.text:00001454                 mov     eax, [ebp+arg_10]
.text:00001457                 mov     ecx, [ebp+var_C]
.text:0000145A                 sub     ecx, [eax]
.text:0000145C                 mov     [ebp+var_24], ecx
.text:0000145F                 jnz     short loc_1477
.text:00001461                 cmp     [ebp+var_18], 0
.text:00001465                 jnz     short loc_1477
.text:00001467                 mov     edx, [ebp+arg_18]
.text:0000146A                 mov     dword ptr [edx], 2
.text:00001470                 xor     eax, eax
.text:00001472                 jmp     loc_1F2A
.text:00001477 ; ---------------------------------------------------------------------------
.text:00001477
.text:00001477 loc_1477:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+7Fj
.text:00001477                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+85j
.text:00001477                 mov     eax, [ebp+arg_18]
.text:0000147A                 push    eax
.text:0000147B                 mov     ecx, [ebp+arg_14]
.text:0000147E                 push    ecx
.text:0000147F                 push    0
.text:00001481                 lea     edx, [ebp+var_24]
.text:00001484                 push    edx
.text:00001485                 mov     eax, [ebp+Src]
.text:00001488                 push    eax
.text:00001489                 lea     ecx, [ebp+var_18]
.text:0000148C                 push    ecx
.text:0000148D                 mov     edx, [ebp+arg_4]
.text:00001490                 push    edx
.text:00001491                 mov     eax, [ebp+arg_0]
.text:00001494                 add     eax, 68h ; 'h'
.text:00001497                 push    eax
.text:00001498                 call    _MixCoder_Code@32 ; MixCoder_Code(x,x,x,x,x,x,x,x)
.text:0000149D                 mov     [ebp+var_2C], eax
.text:000014A0                 mov     ecx, [ebp+var_18]
.text:000014A3                 push    ecx
.text:000014A4                 mov     edx, [ebp+arg_4]
.text:000014A7                 push    edx
.text:000014A8                 mov     eax, [ebp+arg_0]
.text:000014AB                 add     eax, 1A0h
.text:000014B0                 push    eax
.text:000014B1                 call    _XzCheck_Update@12 ; XzCheck_Update(x,x,x)
.text:000014B6                 mov     ecx, [ebp+arg_10]
.text:000014B9                 mov     edx, [ecx]
.text:000014BB                 add     edx, [ebp+var_24]
.text:000014BE                 mov     eax, [ebp+arg_10]
.text:000014C1                 mov     [eax], edx
.text:000014C3                 mov     ecx, [ebp+Src]
.text:000014C6                 add     ecx, [ebp+var_24]
.text:000014C9                 mov     [ebp+Src], ecx
.text:000014CC                 mov     edx, [ebp+var_24]
.text:000014CF                 xor     eax, eax
.text:000014D1                 mov     ecx, [ebp+arg_0]
.text:000014D4                 add     edx, [ecx+18h]
.text:000014D7                 adc     eax, [ecx+1Ch]
.text:000014DA                 mov     ecx, [ebp+arg_0]
.text:000014DD                 mov     [ecx+18h], edx
.text:000014E0                 mov     [ecx+1Ch], eax
.text:000014E3                 mov     edx, [ebp+arg_8]
.text:000014E6                 mov     eax, [edx]
.text:000014E8                 add     eax, [ebp+var_18]
.text:000014EB                 mov     ecx, [ebp+arg_8]
.text:000014EE                 mov     [ecx], eax
.text:000014F0                 mov     edx, [ebp+arg_4]
.text:000014F3                 add     edx, [ebp+var_18]
.text:000014F6                 mov     [ebp+arg_4], edx
.text:000014F9                 mov     eax, [ebp+var_18]
.text:000014FC                 xor     ecx, ecx
.text:000014FE                 mov     edx, [ebp+arg_0]
.text:00001501                 add     eax, [edx+20h]
.text:00001504                 adc     ecx, [edx+24h]
.text:00001507                 mov     edx, [ebp+arg_0]
.text:0000150A                 mov     [edx+20h], eax
.text:0000150D                 mov     [edx+24h], ecx
.text:00001510                 mov     eax, [ebp+var_2C]
.text:00001513                 mov     [ebp+var_30], eax
.text:00001516                 cmp     [ebp+var_30], 0
.text:0000151A                 jz      short loc_1524
.text:0000151C                 mov     eax, [ebp+var_30]
.text:0000151F                 jmp     loc_1F2A
.text:00001524 ; ---------------------------------------------------------------------------
.text:00001524
.text:00001524 loc_1524:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+13Aj
.text:00001524                 mov     ecx, [ebp+arg_18]
.text:00001527                 cmp     dword ptr [ecx], 1
.text:0000152A                 jnz     loc_15E5
.text:00001530                 mov     edx, [ebp+arg_0]
.text:00001533                 mov     esi, [edx+14h]
.text:00001536                 xor     edi, edi
.text:00001538                 mov     eax, [ebp+arg_0]
.text:0000153B                 add     esi, [eax+18h]
.text:0000153E                 adc     edi, [eax+1Ch]
.text:00001541                 mov     ecx, [ebp+arg_0]
.text:00001544                 movzx   edx, word ptr [ecx+10h]
.text:00001548                 push    edx
.text:00001549                 call    _XzFlags_GetCheckSize@4 ; XzFlags_GetCheckSize(x)
.text:0000154E                 xor     ecx, ecx
.text:00001550                 add     esi, eax
.text:00001552                 adc     edi, ecx
.text:00001554                 push    edi
.text:00001555                 push    esi
.text:00001556                 lea     edx, [ebp+var_54]
.text:00001559                 push    edx
.text:0000155A                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:0000155F                 mov     [ebp+var_5C], eax
.text:00001562                 mov     eax, [ebp+arg_0]
.text:00001565                 mov     ecx, [eax+24h]
.text:00001568                 push    ecx
.text:00001569                 mov     edx, [eax+20h]
.text:0000156C                 push    edx
.text:0000156D                 mov     eax, [ebp+var_5C]
.text:00001570                 lea     ecx, [ebp+eax+var_54]
.text:00001574                 push    ecx
.text:00001575                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:0000157A                 add     eax, [ebp+var_5C]
.text:0000157D                 mov     [ebp+var_5C], eax
.text:00001580                 mov     edx, [ebp+var_5C]
.text:00001583                 push    edx
.text:00001584                 lea     eax, [ebp+var_54]
.text:00001587                 push    eax
.text:00001588                 mov     ecx, [ebp+arg_0]
.text:0000158B                 add     ecx, 218h
.text:00001591                 push    ecx
.text:00001592                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00001597                 mov     edx, [ebp+var_5C]
.text:0000159A                 xor     eax, eax
.text:0000159C                 mov     ecx, [ebp+arg_0]
.text:0000159F                 add     edx, [ecx+30h]
.text:000015A2                 adc     eax, [ecx+34h]
.text:000015A5                 mov     ecx, [ebp+arg_0]
.text:000015A8                 mov     [ecx+30h], edx
.text:000015AB                 mov     [ecx+34h], eax
.text:000015AE                 mov     edx, [ebp+arg_0]
.text:000015B1                 mov     eax, [edx+28h]
.text:000015B4                 add     eax, 1
.text:000015B7                 mov     ecx, [edx+2Ch]
.text:000015BA                 adc     ecx, 0
.text:000015BD                 mov     edx, [ebp+arg_0]
.text:000015C0                 mov     [edx+28h], eax
.text:000015C3                 mov     [edx+2Ch], ecx
.text:000015C6                 mov     eax, [ebp+arg_0]
.text:000015C9                 mov     dword ptr [eax], 7
.text:000015CF                 mov     ecx, [ebp+arg_0]
.text:000015D2                 mov     dword ptr [ecx+4], 0
.text:000015D9                 mov     edx, [ebp+arg_0]
.text:000015DC                 mov     dword ptr [edx+8], 0
.text:000015E3                 jmp     short loc_15F8
.text:000015E5 ; ---------------------------------------------------------------------------
.text:000015E5
.text:000015E5 loc_15E5:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+14Aj
.text:000015E5                 cmp     [ebp+var_24], 0
.text:000015E9                 jnz     short loc_15F8
.text:000015EB                 cmp     [ebp+var_18], 0
.text:000015EF                 jnz     short loc_15F8
.text:000015F1                 xor     eax, eax
.text:000015F3                 jmp     loc_1F2A
.text:000015F8 ; ---------------------------------------------------------------------------
.text:000015F8
.text:000015F8 loc_15F8:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+203j
.text:000015F8                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+209j ...
.text:000015F8                 jmp     loc_1432
.text:000015FD ; ---------------------------------------------------------------------------
.text:000015FD
.text:000015FD loc_15FD:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+63j
.text:000015FD                 cmp     [ebp+var_10], 0
.text:00001601                 jnz     short loc_1613
.text:00001603                 mov     eax, [ebp+arg_18]
.text:00001606                 mov     dword ptr [eax], 3
.text:0000160C                 xor     eax, eax
.text:0000160E                 jmp     loc_1F2A
.text:00001613 ; ---------------------------------------------------------------------------
.text:00001613
.text:00001613 loc_1613:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+221j
.text:00001613                 mov     ecx, [ebp+arg_0]
.text:00001616                 mov     edx, [ecx]
.text:00001618                 mov     [ebp+var_F8], edx
.text:0000161E                 cmp     [ebp+var_F8], 7 ; switch 8 cases
.text:00001625                 ja      $LN47           ; jumptable 00001631 default case
.text:0000162B                 mov     eax, [ebp+var_F8]
.text:00001631                 jmp     ds:$LN74[eax*4] ; switch jump
.text:00001638 ; ---------------------------------------------------------------------------
.text:00001638
.text:00001638 $LN46:                                  ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001638                                         ; DATA XREF: .text:$LN74o
.text:00001638                 mov     ecx, [ebp+arg_0] ; jumptable 00001631 case 0
.text:0000163B                 cmp     dword ptr [ecx+4], 0Ch
.text:0000163F                 jnb     short loc_16AA
.text:00001641                 mov     edx, [ebp+arg_0]
.text:00001644                 cmp     dword ptr [edx+4], 6
.text:00001648                 jnb     short loc_166B
.text:0000164A                 mov     eax, [ebp+Src]
.text:0000164D                 movzx   ecx, byte ptr [eax]
.text:00001650                 mov     edx, [ebp+arg_0]
.text:00001653                 mov     eax, [edx+4]
.text:00001656                 movzx   edx, byte ptr ds:_XZ_SIG[eax]
.text:0000165D                 cmp     ecx, edx
.text:0000165F                 jz      short loc_166B
.text:00001661                 mov     eax, 11h
.text:00001666                 jmp     loc_1F2A
.text:0000166B ; ---------------------------------------------------------------------------
.text:0000166B
.text:0000166B loc_166B:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+268j
.text:0000166B                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+27Fj
.text:0000166B                 mov     eax, [ebp+arg_0]
.text:0000166E                 mov     ecx, [eax+4]
.text:00001671                 mov     edx, [ebp+arg_0]
.text:00001674                 mov     eax, [ebp+Src]
.text:00001677                 mov     al, [eax]
.text:00001679                 mov     [edx+ecx+2A0h], al
.text:00001680                 mov     ecx, [ebp+arg_0]
.text:00001683                 mov     edx, [ecx+4]
.text:00001686                 add     edx, 1
.text:00001689                 mov     eax, [ebp+arg_0]
.text:0000168C                 mov     [eax+4], edx
.text:0000168F                 mov     ecx, [ebp+Src]
.text:00001692                 add     ecx, 1
.text:00001695                 mov     [ebp+Src], ecx
.text:00001698                 mov     edx, [ebp+arg_10]
.text:0000169B                 mov     eax, [edx]
.text:0000169D                 add     eax, 1
.text:000016A0                 mov     ecx, [ebp+arg_10]
.text:000016A3                 mov     [ecx], eax
.text:000016A5                 jmp     loc_172C
.text:000016AA ; ---------------------------------------------------------------------------
.text:000016AA
.text:000016AA loc_16AA:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+25Fj
.text:000016AA                 mov     edx, [ebp+arg_0]
.text:000016AD                 add     edx, 2A0h
.text:000016B3                 push    edx
.text:000016B4                 mov     eax, [ebp+arg_0]
.text:000016B7                 add     eax, 10h
.text:000016BA                 push    eax
.text:000016BB                 call    _Xz_ParseHeader@8 ; Xz_ParseHeader(x,x)
.text:000016C0                 mov     [ebp+var_60], eax
.text:000016C3                 cmp     [ebp+var_60], 0
.text:000016C7                 jz      short loc_16D1
.text:000016C9                 mov     eax, [ebp+var_60]
.text:000016CC                 jmp     loc_1F2A
.text:000016D1 ; ---------------------------------------------------------------------------
.text:000016D1
.text:000016D1 loc_16D1:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+2E7j
.text:000016D1                 mov     ecx, [ebp+arg_0]
.text:000016D4                 mov     edx, [ecx+48h]
.text:000016D7                 add     edx, 1
.text:000016DA                 mov     eax, [ecx+4Ch]
.text:000016DD                 adc     eax, 0
.text:000016E0                 mov     ecx, [ebp+arg_0]
.text:000016E3                 mov     [ecx+48h], edx
.text:000016E6                 mov     [ecx+4Ch], eax
.text:000016E9                 mov     edx, [ebp+arg_0]
.text:000016EC                 mov     dword ptr [edx], 5
.text:000016F2                 mov     eax, [ebp+arg_0]
.text:000016F5                 add     eax, 218h
.text:000016FA                 push    eax
.text:000016FB                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:00001700                 mov     ecx, [ebp+arg_0]
.text:00001703                 mov     dword ptr [ecx+30h], 0
.text:0000170A                 mov     dword ptr [ecx+34h], 0
.text:00001711                 mov     edx, [ebp+arg_0]
.text:00001714                 mov     dword ptr [edx+28h], 0
.text:0000171B                 mov     dword ptr [edx+2Ch], 0
.text:00001722                 mov     eax, [ebp+arg_0]
.text:00001725                 mov     dword ptr [eax+4], 0
.text:0000172C
.text:0000172C loc_172C:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+2C5j
.text:0000172C                 jmp     $LN47           ; jumptable 00001631 default case
.text:00001731 ; ---------------------------------------------------------------------------
.text:00001731
.text:00001731 $LN41:                                  ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001731                                         ; DATA XREF: .text:$LN74o
.text:00001731                 mov     ecx, [ebp+arg_0] ; jumptable 00001631 case 5
.text:00001734                 cmp     dword ptr [ecx+4], 0
.text:00001738                 jnz     loc_1841
.text:0000173E                 mov     edx, [ebp+arg_0]
.text:00001741                 mov     eax, [edx+4]
.text:00001744                 mov     ecx, [ebp+arg_0]
.text:00001747                 mov     edx, [ebp+Src]
.text:0000174A                 mov     dl, [edx]
.text:0000174C                 mov     [ecx+eax+2A0h], dl
.text:00001753                 mov     eax, [ebp+arg_0]
.text:00001756                 mov     ecx, [eax+4]
.text:00001759                 add     ecx, 1
.text:0000175C                 mov     edx, [ebp+arg_0]
.text:0000175F                 mov     [edx+4], ecx
.text:00001762                 mov     eax, [ebp+Src]
.text:00001765                 add     eax, 1
.text:00001768                 mov     [ebp+Src], eax
.text:0000176B                 mov     ecx, [ebp+arg_10]
.text:0000176E                 mov     edx, [ecx]
.text:00001770                 add     edx, 1
.text:00001773                 mov     eax, [ebp+arg_10]
.text:00001776                 mov     [eax], edx
.text:00001778                 mov     ecx, [ebp+arg_0]
.text:0000177B                 movzx   edx, byte ptr [ecx+2A0h]
.text:00001782                 test    edx, edx
.text:00001784                 jnz     loc_1825
.text:0000178A                 mov     eax, [ebp+arg_0]
.text:0000178D                 mov     ecx, [eax+2Ch]
.text:00001790                 push    ecx
.text:00001791                 mov     edx, [eax+28h]
.text:00001794                 push    edx
.text:00001795                 mov     eax, [ebp+arg_0]
.text:00001798                 add     eax, 2A1h
.text:0000179D                 push    eax
.text:0000179E                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:000017A3                 add     eax, 1
.text:000017A6                 mov     ecx, [ebp+arg_0]
.text:000017A9                 mov     [ecx+0Ch], eax
.text:000017AC                 mov     edx, [ebp+arg_0]
.text:000017AF                 mov     eax, [edx+0Ch]
.text:000017B2                 xor     ecx, ecx
.text:000017B4                 mov     edx, [ebp+arg_0]
.text:000017B7                 mov     [edx+38h], eax
.text:000017BA                 mov     [edx+3Ch], ecx
.text:000017BD                 mov     eax, [ebp+arg_0]
.text:000017C0                 mov     ecx, [eax+0Ch]
.text:000017C3                 xor     edx, edx
.text:000017C5                 mov     eax, [ebp+arg_0]
.text:000017C8                 add     ecx, [eax+30h]
.text:000017CB                 adc     edx, [eax+34h]
.text:000017CE                 mov     eax, [ebp+arg_0]
.text:000017D1                 mov     [eax+30h], ecx
.text:000017D4                 mov     [eax+34h], edx
.text:000017D7                 mov     ecx, [ebp+arg_0]
.text:000017DA                 add     ecx, 280h
.text:000017E0                 push    ecx
.text:000017E1                 mov     edx, [ebp+arg_0]
.text:000017E4                 add     edx, 218h
.text:000017EA                 push    edx
.text:000017EB                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:000017F0                 mov     eax, [ebp+arg_0]
.text:000017F3                 add     eax, 218h
.text:000017F8                 push    eax
.text:000017F9                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:000017FE                 mov     ecx, [ebp+arg_0]
.text:00001801                 mov     edx, [ecx+0Ch]
.text:00001804                 push    edx
.text:00001805                 mov     edx, [ebp+arg_0]
.text:00001808                 add     edx, 2A0h
.text:0000180E                 or      ecx, 0FFFFFFFFh
.text:00001811                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00001816                 mov     ecx, [ebp+arg_0]
.text:00001819                 mov     [ecx+60h], eax
.text:0000181C                 mov     edx, [ebp+arg_0]
.text:0000181F                 mov     dword ptr [edx], 1
.text:00001825
.text:00001825 loc_1825:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+3A4j
.text:00001825                 mov     eax, [ebp+arg_0]
.text:00001828                 movzx   ecx, byte ptr [eax+2A0h]
.text:0000182F                 lea     edx, ds:4[ecx*4]
.text:00001836                 mov     eax, [ebp+arg_0]
.text:00001839                 mov     [eax+14h], edx
.text:0000183C                 jmp     loc_1964
.text:00001841 ; ---------------------------------------------------------------------------
.text:00001841
.text:00001841 loc_1841:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+358j
.text:00001841                 mov     ecx, [ebp+arg_0]
.text:00001844                 mov     edx, [ebp+arg_0]
.text:00001847                 mov     eax, [ecx+4]
.text:0000184A                 cmp     eax, [edx+14h]
.text:0000184D                 jz      short loc_18B7
.text:0000184F                 mov     ecx, [ebp+arg_0]
.text:00001852                 mov     edx, [ebp+arg_0]
.text:00001855                 mov     eax, [ecx+14h]
.text:00001858                 sub     eax, [edx+4]
.text:0000185B                 mov     [ebp+Size], eax
.text:0000185E                 mov     ecx, [ebp+Size]
.text:00001861                 cmp     ecx, [ebp+var_10]
.text:00001864                 jbe     short loc_186C
.text:00001866                 mov     edx, [ebp+var_10]
.text:00001869                 mov     [ebp+Size], edx
.text:0000186C
.text:0000186C loc_186C:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+484j
.text:0000186C                 mov     eax, [ebp+Size]
.text:0000186F                 push    eax             ; Size
.text:00001870                 mov     ecx, [ebp+Src]
.text:00001873                 push    ecx             ; Src
.text:00001874                 mov     edx, [ebp+arg_0]
.text:00001877                 mov     eax, [edx+4]
.text:0000187A                 mov     ecx, [ebp+arg_0]
.text:0000187D                 lea     edx, [ecx+eax+2A0h]
.text:00001884                 push    edx             ; Dst
.text:00001885                 call    _memcpy
.text:0000188A                 add     esp, 0Ch
.text:0000188D                 mov     eax, [ebp+arg_0]
.text:00001890                 mov     ecx, [eax+4]
.text:00001893                 add     ecx, [ebp+Size]
.text:00001896                 mov     edx, [ebp+arg_0]
.text:00001899                 mov     [edx+4], ecx
.text:0000189C                 mov     eax, [ebp+arg_10]
.text:0000189F                 mov     ecx, [eax]
.text:000018A1                 add     ecx, [ebp+Size]
.text:000018A4                 mov     edx, [ebp+arg_10]
.text:000018A7                 mov     [edx], ecx
.text:000018A9                 mov     eax, [ebp+Src]
.text:000018AC                 add     eax, [ebp+Size]
.text:000018AF                 mov     [ebp+Src], eax
.text:000018B2                 jmp     loc_1964
.text:000018B7 ; ---------------------------------------------------------------------------
.text:000018B7
.text:000018B7 loc_18B7:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+46Dj
.text:000018B7                 mov     ecx, [ebp+arg_0]
.text:000018BA                 add     ecx, 2A0h
.text:000018C0                 push    ecx
.text:000018C1                 mov     edx, [ebp+arg_0]
.text:000018C4                 add     edx, 108h
.text:000018CA                 push    edx
.text:000018CB                 call    _XzBlock_Parse@8 ; XzBlock_Parse(x,x)
.text:000018D0                 mov     [ebp+var_68], eax
.text:000018D3                 cmp     [ebp+var_68], 0
.text:000018D7                 jz      short loc_18E1
.text:000018D9                 mov     eax, [ebp+var_68]
.text:000018DC                 jmp     loc_1F2A
.text:000018E1 ; ---------------------------------------------------------------------------
.text:000018E1
.text:000018E1 loc_18E1:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+4F7j
.text:000018E1                 mov     eax, [ebp+arg_0]
.text:000018E4                 mov     ecx, [eax+58h]
.text:000018E7                 add     ecx, 1
.text:000018EA                 mov     edx, [eax+5Ch]
.text:000018ED                 adc     edx, 0
.text:000018F0                 mov     eax, [ebp+arg_0]
.text:000018F3                 mov     [eax+58h], ecx
.text:000018F6                 mov     [eax+5Ch], edx
.text:000018F9                 mov     ecx, [ebp+arg_0]
.text:000018FC                 mov     dword ptr [ecx], 6
.text:00001902                 mov     edx, [ebp+arg_0]
.text:00001905                 mov     dword ptr [edx+18h], 0
.text:0000190C                 mov     dword ptr [edx+1Ch], 0
.text:00001913                 mov     eax, [ebp+arg_0]
.text:00001916                 mov     dword ptr [eax+20h], 0
.text:0000191D                 mov     dword ptr [eax+24h], 0
.text:00001924                 mov     ecx, [ebp+arg_0]
.text:00001927                 movzx   edx, word ptr [ecx+10h]
.text:0000192B                 and     edx, 0Fh
.text:0000192E                 push    edx
.text:0000192F                 mov     eax, [ebp+arg_0]
.text:00001932                 add     eax, 1A0h
.text:00001937                 push    eax
.text:00001938                 call    _XzCheck_Init@8 ; XzCheck_Init(x,x)
.text:0000193D                 mov     ecx, [ebp+arg_0]
.text:00001940                 add     ecx, 108h
.text:00001946                 push    ecx
.text:00001947                 mov     edx, [ebp+arg_0]
.text:0000194A                 add     edx, 68h ; 'h'
.text:0000194D                 push    edx
.text:0000194E                 call    _XzDec_Init@8   ; XzDec_Init(x,x)
.text:00001953                 mov     [ebp+var_6C], eax
.text:00001956                 cmp     [ebp+var_6C], 0
.text:0000195A                 jz      short loc_1964
.text:0000195C                 mov     eax, [ebp+var_6C]
.text:0000195F                 jmp     loc_1F2A
.text:00001964 ; ---------------------------------------------------------------------------
.text:00001964
.text:00001964 loc_1964:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+45Cj
.text:00001964                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+4D2j ...
.text:00001964                 jmp     $LN47           ; jumptable 00001631 default case
.text:00001969 ; ---------------------------------------------------------------------------
.text:00001969
.text:00001969 $LN32:                                  ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001969                                         ; DATA XREF: .text:$LN74o
.text:00001969                 mov     eax, [ebp+arg_0] ; jumptable 00001631 case 7
.text:0000196C                 mov     ecx, [eax+8]
.text:0000196F                 xor     edx, edx
.text:00001971                 mov     eax, [ebp+arg_0]
.text:00001974                 add     ecx, [eax+18h]
.text:00001977                 adc     edx, [eax+1Ch]
.text:0000197A                 and     ecx, 3
.text:0000197D                 and     edx, 0
.text:00001980                 mov     [ebp+var_100], ecx
.text:00001986                 mov     [ebp+var_FC], edx
.text:0000198C                 mov     ecx, [ebp+var_100]
.text:00001992                 or      ecx, [ebp+var_FC]
.text:00001998                 jz      short loc_19F7
.text:0000199A                 mov     edx, [ebp+arg_10]
.text:0000199D                 mov     eax, [edx]
.text:0000199F                 add     eax, 1
.text:000019A2                 mov     ecx, [ebp+arg_10]
.text:000019A5                 mov     [ecx], eax
.text:000019A7                 mov     edx, [ebp+arg_0]
.text:000019AA                 mov     eax, [edx+8]
.text:000019AD                 add     eax, 1
.text:000019B0                 mov     ecx, [ebp+arg_0]
.text:000019B3                 mov     [ecx+8], eax
.text:000019B6                 mov     edx, [ebp+Src]
.text:000019B9                 movzx   eax, byte ptr [edx]
.text:000019BC                 mov     ecx, [ebp+Src]
.text:000019BF                 add     ecx, 1
.text:000019C2                 mov     [ebp+Src], ecx
.text:000019C5                 test    eax, eax
.text:000019C7                 jz      short loc_19D5
.text:000019C9                 mov     [ebp+var_104], 1
.text:000019D3                 jmp     short loc_19DF
.text:000019D5 ; ---------------------------------------------------------------------------
.text:000019D5
.text:000019D5 loc_19D5:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+5E7j
.text:000019D5                 mov     [ebp+var_104], 0
.text:000019DF
.text:000019DF loc_19DF:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+5F3j
.text:000019DF                 cmp     [ebp+var_104], 0
.text:000019E6                 jz      short loc_19F2
.text:000019E8                 mov     eax, 3
.text:000019ED                 jmp     loc_1F2A
.text:000019F2 ; ---------------------------------------------------------------------------
.text:000019F2
.text:000019F2 loc_19F2:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+606j
.text:000019F2                 jmp     loc_1AC2
.text:000019F7 ; ---------------------------------------------------------------------------
.text:000019F7
.text:000019F7 loc_19F7:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+5B8j
.text:000019F7                 mov     edx, [ebp+arg_0]
.text:000019FA                 movzx   eax, word ptr [edx+10h]
.text:000019FE                 push    eax
.text:000019FF                 call    _XzFlags_GetCheckSize@4 ; XzFlags_GetCheckSize(x)
.text:00001A04                 mov     [ebp+var_70], eax
.text:00001A07                 mov     ecx, [ebp+arg_0]
.text:00001A0A                 mov     edx, [ebp+var_70]
.text:00001A0D                 sub     edx, [ecx+4]
.text:00001A10                 mov     [ebp+var_74], edx
.text:00001A13                 jz      short loc_1A6B
.text:00001A15                 mov     eax, [ebp+var_74]
.text:00001A18                 cmp     eax, [ebp+var_10]
.text:00001A1B                 jbe     short loc_1A23
.text:00001A1D                 mov     ecx, [ebp+var_10]
.text:00001A20                 mov     [ebp+var_74], ecx
.text:00001A23
.text:00001A23 loc_1A23:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+63Bj
.text:00001A23                 mov     edx, [ebp+var_74]
.text:00001A26                 push    edx             ; Size
.text:00001A27                 mov     eax, [ebp+Src]
.text:00001A2A                 push    eax             ; Src
.text:00001A2B                 mov     ecx, [ebp+arg_0]
.text:00001A2E                 mov     edx, [ecx+4]
.text:00001A31                 mov     eax, [ebp+arg_0]
.text:00001A34                 lea     ecx, [eax+edx+2A0h]
.text:00001A3B                 push    ecx             ; Dst
.text:00001A3C                 call    _memcpy
.text:00001A41                 add     esp, 0Ch
.text:00001A44                 mov     edx, [ebp+arg_0]
.text:00001A47                 mov     eax, [edx+4]
.text:00001A4A                 add     eax, [ebp+var_74]
.text:00001A4D                 mov     ecx, [ebp+arg_0]
.text:00001A50                 mov     [ecx+4], eax
.text:00001A53                 mov     edx, [ebp+arg_10]
.text:00001A56                 mov     eax, [edx]
.text:00001A58                 add     eax, [ebp+var_74]
.text:00001A5B                 mov     ecx, [ebp+arg_10]
.text:00001A5E                 mov     [ecx], eax
.text:00001A60                 mov     edx, [ebp+Src]
.text:00001A63                 add     edx, [ebp+var_74]
.text:00001A66                 mov     [ebp+Src], edx
.text:00001A69                 jmp     short loc_1AC2
.text:00001A6B ; ---------------------------------------------------------------------------
.text:00001A6B
.text:00001A6B loc_1A6B:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+633j
.text:00001A6B                 mov     eax, [ebp+arg_0]
.text:00001A6E                 mov     dword ptr [eax], 5
.text:00001A74                 mov     ecx, [ebp+arg_0]
.text:00001A77                 mov     dword ptr [ecx+4], 0
.text:00001A7E                 lea     edx, [ebp+Buf1]
.text:00001A84                 push    edx
.text:00001A85                 mov     eax, [ebp+arg_0]
.text:00001A88                 add     eax, 1A0h
.text:00001A8D                 push    eax
.text:00001A8E                 call    _XzCheck_Final@8 ; XzCheck_Final(x,x)
.text:00001A93                 test    eax, eax
.text:00001A95                 jz      short loc_1AC2
.text:00001A97                 mov     ecx, [ebp+var_70]
.text:00001A9A                 push    ecx             ; Size
.text:00001A9B                 mov     edx, [ebp+arg_0]
.text:00001A9E                 add     edx, 2A0h
.text:00001AA4                 push    edx             ; Buf2
.text:00001AA5                 lea     eax, [ebp+Buf1]
.text:00001AAB                 push    eax             ; Buf1
.text:00001AAC                 call    _memcmp
.text:00001AB1                 add     esp, 0Ch
.text:00001AB4                 test    eax, eax
.text:00001AB6                 jz      short loc_1AC2
.text:00001AB8                 mov     eax, 3
.text:00001ABD                 jmp     loc_1F2A
.text:00001AC2 ; ---------------------------------------------------------------------------
.text:00001AC2
.text:00001AC2 loc_1AC2:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x):loc_19F2j
.text:00001AC2                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+689j ...
.text:00001AC2                 jmp     $LN47           ; jumptable 00001631 default case
.text:00001AC7 ; ---------------------------------------------------------------------------
.text:00001AC7
.text:00001AC7 $LN24:                                  ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001AC7                                         ; DATA XREF: .text:$LN74o
.text:00001AC7                 mov     ecx, [ebp+arg_0] ; jumptable 00001631 case 1
.text:00001ACA                 mov     edx, [ebp+arg_0]
.text:00001ACD                 mov     eax, [ecx+4]
.text:00001AD0                 cmp     eax, [edx+0Ch]
.text:00001AD3                 jnb     short loc_1B43
.text:00001AD5                 mov     ecx, [ebp+arg_10]
.text:00001AD8                 mov     edx, [ecx]
.text:00001ADA                 add     edx, 1
.text:00001ADD                 mov     eax, [ebp+arg_10]
.text:00001AE0                 mov     [eax], edx
.text:00001AE2                 mov     ecx, [ebp+arg_0]
.text:00001AE5                 mov     edx, [ecx+4]
.text:00001AE8                 mov     eax, [ebp+arg_0]
.text:00001AEB                 movzx   ecx, byte ptr [eax+edx+2A0h]
.text:00001AF3                 mov     edx, [ebp+Src]
.text:00001AF6                 movzx   eax, byte ptr [edx]
.text:00001AF9                 mov     edx, [ebp+arg_0]
.text:00001AFC                 mov     edx, [edx+4]
.text:00001AFF                 add     edx, 1
.text:00001B02                 mov     esi, [ebp+arg_0]
.text:00001B05                 mov     [esi+4], edx
.text:00001B08                 mov     edx, [ebp+Src]
.text:00001B0B                 add     edx, 1
.text:00001B0E                 mov     [ebp+Src], edx
.text:00001B11                 cmp     eax, ecx
.text:00001B13                 jz      short loc_1B21
.text:00001B15                 mov     [ebp+var_108], 1
.text:00001B1F                 jmp     short loc_1B2B
.text:00001B21 ; ---------------------------------------------------------------------------
.text:00001B21
.text:00001B21 loc_1B21:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+733j
.text:00001B21                 mov     [ebp+var_108], 0
.text:00001B2B
.text:00001B2B loc_1B2B:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+73Fj
.text:00001B2B                 cmp     [ebp+var_108], 0
.text:00001B32                 jz      short loc_1B3E
.text:00001B34                 mov     eax, 3
.text:00001B39                 jmp     loc_1F2A
.text:00001B3E ; ---------------------------------------------------------------------------
.text:00001B3E
.text:00001B3E loc_1B3E:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+752j
.text:00001B3E                 jmp     loc_1D65
.text:00001B43 ; ---------------------------------------------------------------------------
.text:00001B43
.text:00001B43 loc_1B43:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+6F3j
.text:00001B43                 mov     eax, [ebp+arg_0]
.text:00001B46                 mov     ecx, [ebp+arg_0]
.text:00001B49                 mov     [ebp+var_10C], eax
.text:00001B4F                 mov     [ebp+var_110], ecx
.text:00001B55                 mov     edx, [ebp+var_10C]
.text:00001B5B                 mov     eax, [ebp+var_110]
.text:00001B61                 mov     ecx, [edx+3Ch]
.text:00001B64                 cmp     ecx, [eax+34h]
.text:00001B67                 ja      loc_1C3E
.text:00001B6D                 jb      short loc_1B87
.text:00001B6F                 mov     edx, [ebp+var_10C]
.text:00001B75                 mov     eax, [ebp+var_110]
.text:00001B7B                 mov     ecx, [edx+38h]
.text:00001B7E                 cmp     ecx, [eax+30h]
.text:00001B81                 jnb     loc_1C3E
.text:00001B87
.text:00001B87 loc_1B87:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+78Dj
.text:00001B87                 mov     edx, [ebp+arg_0]
.text:00001B8A                 mov     eax, [ebp+arg_0]
.text:00001B8D                 mov     ecx, [edx+30h]
.text:00001B90                 sub     ecx, [eax+38h]
.text:00001B93                 mov     edx, [edx+34h]
.text:00001B96                 sbb     edx, [eax+3Ch]
.text:00001B99                 mov     [ebp+var_C4], ecx
.text:00001B9F                 mov     [ebp+var_C0], edx
.text:00001BA5                 mov     eax, [ebp+var_10]
.text:00001BA8                 xor     ecx, ecx
.text:00001BAA                 mov     [ebp+var_118], eax
.text:00001BB0                 mov     [ebp+var_114], ecx
.text:00001BB6                 mov     edx, [ebp+var_114]
.text:00001BBC                 cmp     edx, [ebp+var_C0]
.text:00001BC2                 jb      short loc_1BDD
.text:00001BC4                 ja      short loc_1BD4
.text:00001BC6                 mov     eax, [ebp+var_118]
.text:00001BCC                 cmp     eax, [ebp+var_C4]
.text:00001BD2                 jbe     short loc_1BDD
.text:00001BD4
.text:00001BD4 loc_1BD4:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+7E4j
.text:00001BD4                 mov     ecx, [ebp+var_C4]
.text:00001BDA                 mov     [ebp+var_10], ecx
.text:00001BDD
.text:00001BDD loc_1BDD:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+7E2j
.text:00001BDD                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+7F2j
.text:00001BDD                 mov     edx, [ebp+var_10]
.text:00001BE0                 push    edx
.text:00001BE1                 mov     edx, [ebp+Src]
.text:00001BE4                 mov     eax, [ebp+arg_0]
.text:00001BE7                 mov     ecx, [eax+60h]
.text:00001BEA                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00001BEF                 mov     ecx, [ebp+arg_0]
.text:00001BF2                 mov     [ecx+60h], eax
.text:00001BF5                 mov     edx, [ebp+var_10]
.text:00001BF8                 push    edx
.text:00001BF9                 mov     eax, [ebp+Src]
.text:00001BFC                 push    eax
.text:00001BFD                 mov     ecx, [ebp+arg_0]
.text:00001C00                 add     ecx, 218h
.text:00001C06                 push    ecx
.text:00001C07                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00001C0C                 mov     edx, [ebp+arg_10]
.text:00001C0F                 mov     eax, [edx]
.text:00001C11                 add     eax, [ebp+var_10]
.text:00001C14                 mov     ecx, [ebp+arg_10]
.text:00001C17                 mov     [ecx], eax
.text:00001C19                 mov     edx, [ebp+Src]
.text:00001C1C                 add     edx, [ebp+var_10]
.text:00001C1F                 mov     [ebp+Src], edx
.text:00001C22                 mov     eax, [ebp+var_10]
.text:00001C25                 xor     ecx, ecx
.text:00001C27                 mov     edx, [ebp+arg_0]
.text:00001C2A                 add     eax, [edx+38h]
.text:00001C2D                 adc     ecx, [edx+3Ch]
.text:00001C30                 mov     edx, [ebp+arg_0]
.text:00001C33                 mov     [edx+38h], eax
.text:00001C36                 mov     [edx+3Ch], ecx
.text:00001C39                 jmp     loc_1D65
.text:00001C3E ; ---------------------------------------------------------------------------
.text:00001C3E
.text:00001C3E loc_1C3E:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+787j
.text:00001C3E                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+7A1j
.text:00001C3E                 mov     eax, [ebp+arg_0]
.text:00001C41                 mov     ecx, [eax+38h]
.text:00001C44                 and     ecx, 3
.text:00001C47                 mov     edx, [eax+3Ch]
.text:00001C4A                 and     edx, 0
.text:00001C4D                 mov     [ebp+var_120], ecx
.text:00001C53                 mov     [ebp+var_11C], edx
.text:00001C59                 mov     eax, [ebp+var_120]
.text:00001C5F                 or      eax, [ebp+var_11C]
.text:00001C65                 jz      loc_1CFC
.text:00001C6B                 mov     ecx, [ebp+Src]
.text:00001C6E                 mov     dl, [ecx]
.text:00001C70                 mov     [ebp+var_C5], dl
.text:00001C76                 mov     eax, [ebp+Src]
.text:00001C79                 add     eax, 1
.text:00001C7C                 mov     [ebp+Src], eax
.text:00001C7F                 movzx   ecx, [ebp+var_C5]
.text:00001C86                 mov     edx, [ebp+arg_0]
.text:00001C89                 xor     ecx, [edx+60h]
.text:00001C8C                 and     ecx, 0FFh
.text:00001C92                 mov     eax, [ebp+arg_0]
.text:00001C95                 mov     edx, [eax+60h]
.text:00001C98                 shr     edx, 8
.text:00001C9B                 xor     edx, dword ptr ds:_g_CrcTable[ecx*4]
.text:00001CA2                 mov     eax, [ebp+arg_0]
.text:00001CA5                 mov     [eax+60h], edx
.text:00001CA8                 mov     ecx, [ebp+arg_10]
.text:00001CAB                 mov     edx, [ecx]
.text:00001CAD                 add     edx, 1
.text:00001CB0                 mov     eax, [ebp+arg_10]
.text:00001CB3                 mov     [eax], edx
.text:00001CB5                 mov     ecx, [ebp+arg_0]
.text:00001CB8                 mov     edx, [ecx+38h]
.text:00001CBB                 add     edx, 1
.text:00001CBE                 mov     eax, [ecx+3Ch]
.text:00001CC1                 adc     eax, 0
.text:00001CC4                 mov     ecx, [ebp+arg_0]
.text:00001CC7                 mov     [ecx+38h], edx
.text:00001CCA                 mov     [ecx+3Ch], eax
.text:00001CCD                 mov     edx, [ebp+arg_0]
.text:00001CD0                 mov     eax, [edx+30h]
.text:00001CD3                 add     eax, 1
.text:00001CD6                 mov     ecx, [edx+34h]
.text:00001CD9                 adc     ecx, 0
.text:00001CDC                 mov     edx, [ebp+arg_0]
.text:00001CDF                 mov     [edx+30h], eax
.text:00001CE2                 mov     [edx+34h], ecx
.text:00001CE5                 movzx   eax, [ebp+var_C5]
.text:00001CEC                 test    eax, eax
.text:00001CEE                 jz      short loc_1CFA
.text:00001CF0                 mov     eax, 3
.text:00001CF5                 jmp     loc_1F2A
.text:00001CFA ; ---------------------------------------------------------------------------
.text:00001CFA
.text:00001CFA loc_1CFA:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+90Ej
.text:00001CFA                 jmp     short loc_1D65
.text:00001CFC ; ---------------------------------------------------------------------------
.text:00001CFC
.text:00001CFC loc_1CFC:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+885j
.text:00001CFC                 mov     ecx, [ebp+arg_0]
.text:00001CFF                 mov     dword ptr [ecx], 2
.text:00001D05                 mov     edx, [ebp+arg_0]
.text:00001D08                 mov     eax, [edx+30h]
.text:00001D0B                 add     eax, 4
.text:00001D0E                 mov     ecx, [edx+34h]
.text:00001D11                 adc     ecx, 0
.text:00001D14                 mov     edx, [ebp+arg_0]
.text:00001D17                 mov     [edx+30h], eax
.text:00001D1A                 mov     [edx+34h], ecx
.text:00001D1D                 mov     eax, [ebp+arg_0]
.text:00001D20                 mov     dword ptr [eax+4], 0
.text:00001D27                 lea     ecx, [ebp+var_EC]
.text:00001D2D                 push    ecx
.text:00001D2E                 mov     edx, [ebp+arg_0]
.text:00001D31                 add     edx, 218h
.text:00001D37                 push    edx
.text:00001D38                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00001D3D                 push    20h ; ' '       ; Size
.text:00001D3F                 mov     eax, [ebp+arg_0]
.text:00001D42                 add     eax, 280h
.text:00001D47                 push    eax             ; Buf2
.text:00001D48                 lea     ecx, [ebp+var_EC]
.text:00001D4E                 push    ecx             ; Buf1
.text:00001D4F                 call    _memcmp
.text:00001D54                 add     esp, 0Ch
.text:00001D57                 test    eax, eax
.text:00001D59                 jz      short loc_1D65
.text:00001D5B                 mov     eax, 3
.text:00001D60                 jmp     loc_1F2A
.text:00001D65 ; ---------------------------------------------------------------------------
.text:00001D65
.text:00001D65 loc_1D65:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x):loc_1B3Ej
.text:00001D65                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+859j ...
.text:00001D65                 jmp     $LN47           ; jumptable 00001631 default case
.text:00001D6A ; ---------------------------------------------------------------------------
.text:00001D6A
.text:00001D6A $LN13_0:                                ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001D6A                                         ; DATA XREF: .text:$LN74o
.text:00001D6A                 mov     edx, [ebp+arg_0] ; jumptable 00001631 case 2
.text:00001D6D                 cmp     dword ptr [edx+4], 4
.text:00001D71                 jnb     short loc_1DAF
.text:00001D73                 mov     eax, [ebp+arg_10]
.text:00001D76                 mov     ecx, [eax]
.text:00001D78                 add     ecx, 1
.text:00001D7B                 mov     edx, [ebp+arg_10]
.text:00001D7E                 mov     [edx], ecx
.text:00001D80                 mov     eax, [ebp+arg_0]
.text:00001D83                 mov     ecx, [eax+4]
.text:00001D86                 mov     edx, [ebp+arg_0]
.text:00001D89                 mov     eax, [ebp+Src]
.text:00001D8C                 mov     al, [eax]
.text:00001D8E                 mov     [edx+ecx+2A0h], al
.text:00001D95                 mov     ecx, [ebp+arg_0]
.text:00001D98                 mov     edx, [ecx+4]
.text:00001D9B                 add     edx, 1
.text:00001D9E                 mov     eax, [ebp+arg_0]
.text:00001DA1                 mov     [eax+4], edx
.text:00001DA4                 mov     ecx, [ebp+Src]
.text:00001DA7                 add     ecx, 1
.text:00001DAA                 mov     [ebp+Src], ecx
.text:00001DAD                 jmp     short loc_1DE0
.text:00001DAF ; ---------------------------------------------------------------------------
.text:00001DAF
.text:00001DAF loc_1DAF:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+991j
.text:00001DAF                 mov     edx, [ebp+arg_0]
.text:00001DB2                 mov     dword ptr [edx], 3
.text:00001DB8                 mov     eax, [ebp+arg_0]
.text:00001DBB                 mov     dword ptr [eax+4], 0
.text:00001DC2                 mov     ecx, [ebp+arg_0]
.text:00001DC5                 mov     edx, [ecx+60h]
.text:00001DC8                 xor     edx, 0FFFFFFFFh
.text:00001DCB                 mov     eax, [ebp+arg_0]
.text:00001DCE                 cmp     edx, [eax+2A0h]
.text:00001DD4                 jz      short loc_1DE0
.text:00001DD6                 mov     eax, 3
.text:00001DDB                 jmp     loc_1F2A
.text:00001DE0 ; ---------------------------------------------------------------------------
.text:00001DE0
.text:00001DE0 loc_1DE0:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+9CDj
.text:00001DE0                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+9F4j
.text:00001DE0                 jmp     $LN47           ; jumptable 00001631 default case
.text:00001DE5 ; ---------------------------------------------------------------------------
.text:00001DE5
.text:00001DE5 $LN9_0:                                 ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001DE5                                         ; DATA XREF: .text:$LN74o
.text:00001DE5                 mov     ecx, [ebp+arg_0] ; jumptable 00001631 case 3
.text:00001DE8                 mov     edx, 0Ch
.text:00001DED                 sub     edx, [ecx+4]
.text:00001DF0                 mov     [ebp+var_F4], edx
.text:00001DF6                 mov     eax, [ebp+var_F4]
.text:00001DFC                 cmp     eax, [ebp+var_10]
.text:00001DFF                 jbe     short loc_1E0A
.text:00001E01                 mov     ecx, [ebp+var_10]
.text:00001E04                 mov     [ebp+var_F4], ecx
.text:00001E0A
.text:00001E0A loc_1E0A:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+A1Fj
.text:00001E0A                 mov     edx, [ebp+var_F4]
.text:00001E10                 push    edx             ; Size
.text:00001E11                 mov     eax, [ebp+Src]
.text:00001E14                 push    eax             ; Src
.text:00001E15                 mov     ecx, [ebp+arg_0]
.text:00001E18                 mov     edx, [ecx+4]
.text:00001E1B                 mov     eax, [ebp+arg_0]
.text:00001E1E                 lea     ecx, [eax+edx+2A0h]
.text:00001E25                 push    ecx             ; Dst
.text:00001E26                 call    _memcpy
.text:00001E2B                 add     esp, 0Ch
.text:00001E2E                 mov     edx, [ebp+arg_0]
.text:00001E31                 mov     eax, [edx+4]
.text:00001E34                 add     eax, [ebp+var_F4]
.text:00001E3A                 mov     ecx, [ebp+arg_0]
.text:00001E3D                 mov     [ecx+4], eax
.text:00001E40                 mov     edx, [ebp+arg_10]
.text:00001E43                 mov     eax, [edx]
.text:00001E45                 add     eax, [ebp+var_F4]
.text:00001E4B                 mov     ecx, [ebp+arg_10]
.text:00001E4E                 mov     [ecx], eax
.text:00001E50                 mov     edx, [ebp+Src]
.text:00001E53                 add     edx, [ebp+var_F4]
.text:00001E59                 mov     [ebp+Src], edx
.text:00001E5C                 mov     eax, [ebp+arg_0]
.text:00001E5F                 cmp     dword ptr [eax+4], 0Ch
.text:00001E63                 jnz     short loc_1EC4
.text:00001E65                 mov     ecx, [ebp+arg_0]
.text:00001E68                 mov     dword ptr [ecx], 4
.text:00001E6E                 mov     edx, [ebp+arg_0]
.text:00001E71                 mov     eax, [edx+50h]
.text:00001E74                 add     eax, 1
.text:00001E77                 mov     ecx, [edx+54h]
.text:00001E7A                 adc     ecx, 0
.text:00001E7D                 mov     edx, [ebp+arg_0]
.text:00001E80                 mov     [edx+50h], eax
.text:00001E83                 mov     [edx+54h], ecx
.text:00001E86                 mov     eax, [ebp+arg_0]
.text:00001E89                 mov     dword ptr [eax+40h], 0
.text:00001E90                 mov     dword ptr [eax+44h], 0
.text:00001E97                 mov     ecx, [ebp+arg_0]
.text:00001E9A                 add     ecx, 2A0h
.text:00001EA0                 push    ecx
.text:00001EA1                 mov     edx, [ebp+arg_0]
.text:00001EA4                 mov     eax, [edx+34h]
.text:00001EA7                 push    eax
.text:00001EA8                 mov     ecx, [edx+30h]
.text:00001EAB                 push    ecx
.text:00001EAC                 mov     edx, [ebp+arg_0]
.text:00001EAF                 movzx   eax, word ptr [edx+10h]
.text:00001EB3                 push    eax
.text:00001EB4                 call    _Xz_CheckFooter@16 ; Xz_CheckFooter(x,x,x,x)
.text:00001EB9                 test    eax, eax
.text:00001EBB                 jnz     short loc_1EC4
.text:00001EBD                 mov     eax, 3
.text:00001EC2                 jmp     short loc_1F2A
.text:00001EC4 ; ---------------------------------------------------------------------------
.text:00001EC4
.text:00001EC4 loc_1EC4:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+A83j
.text:00001EC4                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+ADBj
.text:00001EC4                 jmp     short $LN47     ; jumptable 00001631 default case
.text:00001EC6 ; ---------------------------------------------------------------------------
.text:00001EC6
.text:00001EC6 $LN5_1:                                 ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251j
.text:00001EC6                                         ; DATA XREF: .text:$LN74o
.text:00001EC6                 mov     ecx, [ebp+Src]  ; jumptable 00001631 case 4
.text:00001EC9                 movzx   edx, byte ptr [ecx]
.text:00001ECC                 test    edx, edx
.text:00001ECE                 jz      short loc_1EF7
.text:00001ED0                 mov     eax, [ebp+arg_0]
.text:00001ED3                 mov     ecx, [eax+40h]
.text:00001ED6                 and     ecx, 3
.text:00001ED9                 jz      short loc_1EE2
.text:00001EDB                 mov     eax, 11h
.text:00001EE0                 jmp     short loc_1F2A
.text:00001EE2 ; ---------------------------------------------------------------------------
.text:00001EE2
.text:00001EE2 loc_1EE2:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+AF9j
.text:00001EE2                 mov     edx, [ebp+arg_0]
.text:00001EE5                 mov     dword ptr [edx+4], 0
.text:00001EEC                 mov     eax, [ebp+arg_0]
.text:00001EEF                 mov     dword ptr [eax], 0
.text:00001EF5                 jmp     short $LN47     ; jumptable 00001631 default case
.text:00001EF7 ; ---------------------------------------------------------------------------
.text:00001EF7
.text:00001EF7 loc_1EF7:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+AEEj
.text:00001EF7                 mov     ecx, [ebp+arg_10]
.text:00001EFA                 mov     edx, [ecx]
.text:00001EFC                 add     edx, 1
.text:00001EFF                 mov     eax, [ebp+arg_10]
.text:00001F02                 mov     [eax], edx
.text:00001F04                 mov     ecx, [ebp+Src]
.text:00001F07                 add     ecx, 1
.text:00001F0A                 mov     [ebp+Src], ecx
.text:00001F0D                 mov     edx, [ebp+arg_0]
.text:00001F10                 mov     eax, [edx+40h]
.text:00001F13                 add     eax, 1
.text:00001F16                 mov     ecx, [edx+44h]
.text:00001F19                 adc     ecx, 0
.text:00001F1C                 mov     edx, [ebp+arg_0]
.text:00001F1F                 mov     [edx+40h], eax
.text:00001F22                 mov     [edx+44h], ecx
.text:00001F25
.text:00001F25 $LN47:                                  ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+245j
.text:00001F25                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+251j ...
.text:00001F25                 jmp     loc_1432        ; jumptable 00001631 default case
.text:00001F2A ; ---------------------------------------------------------------------------
.text:00001F2A
.text:00001F2A loc_1F2A:                               ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+92j
.text:00001F2A                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+13Fj ...
.text:00001F2A                 push    edx
.text:00001F2B                 mov     ecx, ebp
.text:00001F2D                 push    eax
.text:00001F2E                 lea     edx, $LN73
.text:00001F34                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F39                 pop     eax
.text:00001F3A                 pop     edx
.text:00001F3B                 pop     edi
.text:00001F3C                 pop     esi
.text:00001F3D                 mov     ecx, [ebp+var_4]
.text:00001F40                 xor     ecx, ebp
.text:00001F42                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001F47                 add     esp, 120h
.text:00001F4D                 cmp     ebp, esp
.text:00001F4F                 call    __RTC_CheckEsp
.text:00001F54                 mov     esp, ebp
.text:00001F56                 pop     ebp
.text:00001F57                 retn    1Ch
.text:00001F57 _XzUnpacker_Code@28 endp
.text:00001F57
.text:00001F57 ; ---------------------------------------------------------------------------
.text:00001F5A                 align 4
.text:00001F5C $LN73           dd 5                    ; DATA XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+B4Eo
.text:00001F60                 dd offset $LN72
.text:00001F64 $LN72           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001F60o
.text:00001F6C                 dd offset $LN67         ; "destLen2"
.text:00001F70                 dd 0FFFFFFDCh, 4
.text:00001F78                 dd offset $LN68         ; "srcLen2"
.text:00001F7C                 dd 0FFFFFFACh, 20h
.text:00001F84                 dd offset $LN69         ; "temp"
.text:00001F88                 dd 0FFFFFF48h, 40h
.text:00001F90                 dd offset $LN70         ; "digest"
.text:00001F94                 dd 0FFFFFF14h, 20h
.text:00001F9C                 dd offset $LN71         ; "digest"
.text:00001FA0 $LN71           db 'digest',0           ; DATA XREF: .text:00001F9Co
.text:00001FA7 $LN70           db 'digest',0           ; DATA XREF: .text:00001F90o
.text:00001FAE $LN69           db 'temp',0             ; DATA XREF: .text:00001F84o
.text:00001FB3 $LN68           db 'srcLen2',0          ; DATA XREF: .text:00001F78o
.text:00001FBB $LN67           db 'destLen2',0         ; DATA XREF: .text:00001F6Co
.text:00001FC4 $LN74           dd offset $LN46         ; DATA XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+251r
.text:00001FC4                 dd offset $LN24         ; jump table for switch statement
.text:00001FC4                 dd offset $LN13_0
.text:00001FC4                 dd offset $LN9_0
.text:00001FC4                 dd offset $LN5_1
.text:00001FC4                 dd offset $LN41
.text:00001FC4                 dd offset $LN47
.text:00001FC4                 dd offset $LN32
.text:00001FE4                 align 10h
.text:00001FF0
.text:00001FF0 ; =============== S U B R O U T I N E =======================================
.text:00001FF0
.text:00001FF0 ; Attributes: bp-based frame
.text:00001FF0
.text:00001FF0 ; __stdcall Xz_CheckFooter(x, x, x, x)
.text:00001FF0 _Xz_CheckFooter@16 proc near            ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+AD4p
.text:00001FF0
.text:00001FF0 var_C           = dword ptr -0Ch
.text:00001FF0 var_8           = dword ptr -8
.text:00001FF0 var_4           = dword ptr -4
.text:00001FF0 arg_0           = word ptr  8
.text:00001FF0 arg_4           = dword ptr  0Ch
.text:00001FF0 arg_8           = dword ptr  10h
.text:00001FF0 arg_C           = dword ptr  14h
.text:00001FF0
.text:00001FF0                 push    ebp
.text:00001FF1                 mov     ebp, esp
.text:00001FF3                 sub     esp, 0Ch
.text:00001FF6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001FFD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000200B                 mov     eax, [ebp+arg_C]
.text:0000200E                 mov     eax, [eax+4]
.text:00002011                 xor     edx, edx
.text:00002013                 add     eax, 1
.text:00002016                 adc     edx, 0
.text:00002019                 mov     cl, 2
.text:0000201B                 call    __allshl
.text:00002020                 mov     [ebp+var_8], eax
.text:00002023                 mov     [ebp+var_4], edx
.text:00002026                 mov     ecx, [ebp+arg_4]
.text:00002029                 cmp     ecx, [ebp+var_8]
.text:0000202C                 jnz     short loc_208E
.text:0000202E                 mov     edx, [ebp+arg_8]
.text:00002031                 cmp     edx, [ebp+var_4]
.text:00002034                 jnz     short loc_208E
.text:00002036                 mov     ecx, [ebp+arg_C]
.text:00002039                 add     ecx, 4
.text:0000203C                 mov     edx, 6
.text:00002041                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00002046                 mov     ecx, [ebp+arg_C]
.text:00002049                 cmp     [ecx], eax
.text:0000204B                 jnz     short loc_208E
.text:0000204D                 movzx   edx, [ebp+arg_0]
.text:00002051                 mov     eax, [ebp+arg_C]
.text:00002054                 movzx   ecx, byte ptr [eax+8]
.text:00002058                 shl     ecx, 8
.text:0000205B                 mov     eax, [ebp+arg_C]
.text:0000205E                 movzx   eax, byte ptr [eax+9]
.text:00002062                 or      ecx, eax
.text:00002064                 movzx   ecx, cx
.text:00002067                 cmp     edx, ecx
.text:00002069                 jnz     short loc_208E
.text:0000206B                 push    2               ; Size
.text:0000206D                 push    offset _XZ_FOOTER_SIG ; Buf2
.text:00002072                 mov     edx, [ebp+arg_C]
.text:00002075                 add     edx, 0Ah
.text:00002078                 push    edx             ; Buf1
.text:00002079                 call    _memcmp
.text:0000207E                 add     esp, 0Ch
.text:00002081                 test    eax, eax
.text:00002083                 jnz     short loc_208E
.text:00002085                 mov     [ebp+var_C], 1
.text:0000208C                 jmp     short loc_2095
.text:0000208E ; ---------------------------------------------------------------------------
.text:0000208E
.text:0000208E loc_208E:                               ; CODE XREF: Xz_CheckFooter(x,x,x,x)+3Cj
.text:0000208E                                         ; Xz_CheckFooter(x,x,x,x)+44j ...
.text:0000208E                 mov     [ebp+var_C], 0
.text:00002095
.text:00002095 loc_2095:                               ; CODE XREF: Xz_CheckFooter(x,x,x,x)+9Cj
.text:00002095                 mov     eax, [ebp+var_C]
.text:00002098                 add     esp, 0Ch
.text:0000209B                 cmp     ebp, esp
.text:0000209D                 call    __RTC_CheckEsp
.text:000020A2                 mov     esp, ebp
.text:000020A4                 pop     ebp
.text:000020A5                 retn    10h
.text:000020A5 _Xz_CheckFooter@16 endp
.text:000020A5
.text:000020A5 ; ---------------------------------------------------------------------------
.text:000020A8                 align 10h
.text:000020B0
.text:000020B0 ; =============== S U B R O U T I N E =======================================
.text:000020B0
.text:000020B0 ; Attributes: bp-based frame
.text:000020B0
.text:000020B0 ; __stdcall XzUnpacker_IsStreamWasFinished(x)
.text:000020B0                 public _XzUnpacker_IsStreamWasFinished@4
.text:000020B0 _XzUnpacker_IsStreamWasFinished@4 proc near
.text:000020B0
.text:000020B0 var_4           = dword ptr -4
.text:000020B0 arg_0           = dword ptr  8
.text:000020B0
.text:000020B0                 push    ebp
.text:000020B1                 mov     ebp, esp
.text:000020B3                 push    ecx
.text:000020B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020BB                 mov     eax, [ebp+arg_0]
.text:000020BE                 cmp     dword ptr [eax], 4
.text:000020C1                 jnz     short loc_20D7
.text:000020C3                 mov     ecx, [ebp+arg_0]
.text:000020C6                 mov     edx, [ecx+40h]
.text:000020C9                 and     edx, 3
.text:000020CC                 jnz     short loc_20D7
.text:000020CE                 mov     [ebp+var_4], 1
.text:000020D5                 jmp     short loc_20DE
.text:000020D7 ; ---------------------------------------------------------------------------
.text:000020D7
.text:000020D7 loc_20D7:                               ; CODE XREF: XzUnpacker_IsStreamWasFinished(x)+11j
.text:000020D7                                         ; XzUnpacker_IsStreamWasFinished(x)+1Cj
.text:000020D7                 mov     [ebp+var_4], 0
.text:000020DE
.text:000020DE loc_20DE:                               ; CODE XREF: XzUnpacker_IsStreamWasFinished(x)+25j
.text:000020DE                 mov     eax, [ebp+var_4]
.text:000020E1                 mov     esp, ebp
.text:000020E3                 pop     ebp
.text:000020E4                 retn    4
.text:000020E4 _XzUnpacker_IsStreamWasFinished@4 endp
.text:000020E4
.text:000020E4 ; ---------------------------------------------------------------------------
.text:000020E7                 align 10h
.text:000020F0
.text:000020F0 ; =============== S U B R O U T I N E =======================================
.text:000020F0
.text:000020F0 ; Attributes: bp-based frame
.text:000020F0
.text:000020F0 ; __stdcall XzUnpacker_GetExtraSize(x)
.text:000020F0                 public _XzUnpacker_GetExtraSize@4
.text:000020F0 _XzUnpacker_GetExtraSize@4 proc near
.text:000020F0
.text:000020F0 var_8           = dword ptr -8
.text:000020F0 var_4           = dword ptr -4
.text:000020F0 arg_0           = dword ptr  8
.text:000020F0
.text:000020F0                 push    ebp
.text:000020F1                 mov     ebp, esp
.text:000020F3                 sub     esp, 8
.text:000020F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000020FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002104                 mov     [ebp+var_8], 0
.text:0000210B                 mov     [ebp+var_4], 0
.text:00002112                 mov     eax, [ebp+arg_0]
.text:00002115                 cmp     dword ptr [eax], 4
.text:00002118                 jnz     short loc_2131
.text:0000211A                 mov     ecx, [ebp+arg_0]
.text:0000211D                 mov     edx, [ebp+var_8]
.text:00002120                 add     edx, [ecx+40h]
.text:00002123                 mov     eax, [ebp+var_4]
.text:00002126                 adc     eax, [ecx+44h]
.text:00002129                 mov     [ebp+var_8], edx
.text:0000212C                 mov     [ebp+var_4], eax
.text:0000212F                 jmp     short loc_2156
.text:00002131 ; ---------------------------------------------------------------------------
.text:00002131
.text:00002131 loc_2131:                               ; CODE XREF: XzUnpacker_GetExtraSize(x)+28j
.text:00002131                 mov     ecx, [ebp+arg_0]
.text:00002134                 cmp     dword ptr [ecx], 0
.text:00002137                 jnz     short loc_2156
.text:00002139                 mov     edx, [ebp+arg_0]
.text:0000213C                 mov     eax, [edx+4]
.text:0000213F                 xor     ecx, ecx
.text:00002141                 mov     edx, [ebp+arg_0]
.text:00002144                 add     eax, [edx+40h]
.text:00002147                 adc     ecx, [edx+44h]
.text:0000214A                 add     eax, [ebp+var_8]
.text:0000214D                 adc     ecx, [ebp+var_4]
.text:00002150                 mov     [ebp+var_8], eax
.text:00002153                 mov     [ebp+var_4], ecx
.text:00002156
.text:00002156 loc_2156:                               ; CODE XREF: XzUnpacker_GetExtraSize(x)+3Fj
.text:00002156                                         ; XzUnpacker_GetExtraSize(x)+47j
.text:00002156                 mov     eax, [ebp+var_8]
.text:00002159                 mov     edx, [ebp+var_4]
.text:0000215C                 mov     esp, ebp
.text:0000215E                 pop     ebp
.text:0000215F                 retn    4
.text:0000215F _XzUnpacker_GetExtraSize@4 endp
.text:0000215F
.text:0000215F ; ---------------------------------------------------------------------------
.text:00002162                 align 4
.text:00002162 _text           ends
.text:00002162
.rtc$TMZ:00002164 ; ===========================================================================
.rtc$TMZ:00002164
.rtc$TMZ:00002164 ; Segment type: Pure data
.rtc$TMZ:00002164 ; Segment permissions: Read
.rtc$TMZ:00002164 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002164                 assume cs:_rtc$TMZ
.rtc$TMZ:00002164                 ;org 2164h
.rtc$TMZ:00002164 ; COMDAT (pick any)
.rtc$TMZ:00002164 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002164 _rtc$TMZ        ends
.rtc$TMZ:00002164
.rtc$IMZ:00002168 ; ===========================================================================
.rtc$IMZ:00002168
.rtc$IMZ:00002168 ; Segment type: Pure data
.rtc$IMZ:00002168 ; Segment permissions: Read
.rtc$IMZ:00002168 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002168                 assume cs:_rtc$IMZ
.rtc$IMZ:00002168                 ;org 2168h
.rtc$IMZ:00002168 ; COMDAT (pick any)
.rtc$IMZ:00002168 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002168 _rtc$IMZ        ends
.rtc$IMZ:00002168
UNDEF:00002170 ; ===========================================================================
UNDEF:00002170
UNDEF:00002170 ; Segment type: Externs
UNDEF:00002170 ; UNDEF
UNDEF:00002170                 extrn __RTC_CheckEsp:near
UNDEF:00002170                                         ; CODE XREF: Xz_ReadVarInt(x,x,x)+C1p
UNDEF:00002170                                         ; BraState_SetFromMethod(x,x,x,x,x)+84p ...
UNDEF:00002174                 extrn __allshl:near     ; CODE XREF: Xz_ReadVarInt(x,x,x)+6Dp
UNDEF:00002174                                         ; Xz_CheckFooter(x,x,x,x)+2Bp
UNDEF:00002178                 extrn __RTC_Shutdown:near
UNDEF:00002178                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000217C                 extrn __RTC_InitBase:near
UNDEF:0000217C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002180 ; __stdcall Delta_Init(x)
UNDEF:00002180                 extrn _Delta_Init@4:near ; CODE XREF: BraState_Init(x)+48p
UNDEF:00002184 ; __stdcall SPARC_Convert(x, x, x, x)
UNDEF:00002184                 extrn _SPARC_Convert@16:near
UNDEF:00002184                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+33Dp
UNDEF:00002188 ; __stdcall ARMT_Convert(x, x, x, x)
UNDEF:00002188                 extrn _ARMT_Convert@16:near
UNDEF:00002188                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+311p
UNDEF:0000218C ; __stdcall ARM_Convert(x, x, x, x)
UNDEF:0000218C                 extrn _ARM_Convert@16:near
UNDEF:0000218C                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+2E5p
UNDEF:00002190 ; __stdcall IA64_Convert(x, x, x, x)
UNDEF:00002190                 extrn _IA64_Convert@16:near
UNDEF:00002190                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+2B6p
UNDEF:00002194 ; __stdcall PPC_Convert(x, x, x, x)
UNDEF:00002194                 extrn _PPC_Convert@16:near
UNDEF:00002194                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+287p
UNDEF:00002198 ; __stdcall x86_Convert(x, x, x, x, x)
UNDEF:00002198                 extrn _x86_Convert@20:near
UNDEF:00002198                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+258p
UNDEF:0000219C ; __stdcall Delta_Decode(x, x, x, x)
UNDEF:0000219C                 extrn _Delta_Decode@16:near
UNDEF:0000219C                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+21Dp
UNDEF:000021A0 ; __stdcall Delta_Encode(x, x, x, x)
UNDEF:000021A0                 extrn _Delta_Encode@16:near
UNDEF:000021A0                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+1F7p
UNDEF:000021A4 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000021A4                 extrn __imp__memmove:near
UNDEF:000021A4                                         ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+10Dp
UNDEF:000021A4                                         ; DATA XREF: BraState_Code(x,x,x,x,x,x,x,x)+10Dr
UNDEF:000021A8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000021A8                 extrn _memcpy:near      ; CODE XREF: BraState_Code(x,x,x,x,x,x,x,x)+A0p
UNDEF:000021A8                                         ; BraState_Code(x,x,x,x,x,x,x,x)+165p ...
UNDEF:000021AC ; __stdcall LzmaDec_Free(x, x)
UNDEF:000021AC                 extrn _LzmaDec_Free@8:near
UNDEF:000021AC                                         ; CODE XREF: Lzma2State_Free(x,x)+Cp
UNDEF:000021B0 ; __stdcall Lzma2Dec_Allocate(x, x, x)
UNDEF:000021B0                 extrn _Lzma2Dec_Allocate@12:near
UNDEF:000021B0                                         ; CODE XREF: Lzma2State_SetProps(x,x,x,x)+1Fp
UNDEF:000021B4 ; __stdcall Lzma2Dec_Init(x)
UNDEF:000021B4                 extrn _Lzma2Dec_Init@4:near
UNDEF:000021B4                                         ; CODE XREF: Lzma2State_Init(x)+7p
UNDEF:000021B8 ; __stdcall Lzma2Dec_DecodeToBuf(x, x, x, x, x, x, x)
UNDEF:000021B8                 extrn _Lzma2Dec_DecodeToBuf@28:near
UNDEF:000021B8                                         ; CODE XREF: Lzma2State_Code(x,x,x,x,x,x,x,x)+33p
UNDEF:000021BC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000021BC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000021BC                                         ; CODE XREF: Lzma2State_Code(x,x,x,x,x,x,x,x)+5Cp
UNDEF:000021BC                                         ; MixCoder_Code(x,x,x,x,x,x,x,x)+294p ...
UNDEF:000021C0 ; __fastcall CrcCalc(x, x)
UNDEF:000021C0                 extrn @CrcCalc@8:near   ; CODE XREF: Xz_ParseHeader(x,x)+27p
UNDEF:000021C0                                         ; XzBlock_Parse(x,x)+28p ...
UNDEF:000021C4                 extrn _g_CrcTable:near  ; DATA XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+8BBr
UNDEF:000021C8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000021C8                 extrn _memcmp:near      ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+6CCp
UNDEF:000021C8                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+96Fp ...
UNDEF:000021CC ; __stdcall XzCheck_Final(x, x)
UNDEF:000021CC                 extrn _XzCheck_Final@8:near
UNDEF:000021CC                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+6AEp
UNDEF:000021D0 ; __stdcall XzCheck_Init(x, x)
UNDEF:000021D0                 extrn _XzCheck_Init@8:near
UNDEF:000021D0                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+558p
UNDEF:000021D4 ; __fastcall CrcUpdate(x, x, x)
UNDEF:000021D4                 extrn @CrcUpdate@12:near
UNDEF:000021D4                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+431p
UNDEF:000021D4                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+80Ap
UNDEF:000021D8 ; __stdcall Sha256_Final(x, x)
UNDEF:000021D8                 extrn _Sha256_Final@8:near
UNDEF:000021D8                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+40Bp
UNDEF:000021D8                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+958p
UNDEF:000021DC ; __stdcall Sha256_Init(x)
UNDEF:000021DC                 extrn _Sha256_Init@4:near
UNDEF:000021DC                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+31Bp
UNDEF:000021DC                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+419p
UNDEF:000021E0                 extrn _XZ_SIG:near      ; DATA XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+276r
UNDEF:000021E4 ; __stdcall Sha256_Update(x, x, x)
UNDEF:000021E4                 extrn _Sha256_Update@12:near
UNDEF:000021E4                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+1B2p
UNDEF:000021E4                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+827p
UNDEF:000021E8 ; __stdcall Xz_WriteVarInt(x, x, x)
UNDEF:000021E8                 extrn _Xz_WriteVarInt@12:near
UNDEF:000021E8                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+17Ap
UNDEF:000021E8                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+195p ...
UNDEF:000021EC ; __stdcall XzFlags_GetCheckSize(x)
UNDEF:000021EC                 extrn _XzFlags_GetCheckSize@4:near
UNDEF:000021EC                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+169p
UNDEF:000021EC                                         ; XzUnpacker_Code(x,x,x,x,x,x,x)+61Fp
UNDEF:000021F0 ; __stdcall XzCheck_Update(x, x, x)
UNDEF:000021F0                 extrn _XzCheck_Update@12:near
UNDEF:000021F0                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+D1p
UNDEF:000021F4                 extrn ___security_cookie:near
UNDEF:000021F4                                         ; DATA XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+1Dr
UNDEF:000021F8 ; __fastcall __security_check_cookie(x)
UNDEF:000021F8                 extrn @__security_check_cookie@4:near
UNDEF:000021F8                                         ; CODE XREF: XzUnpacker_Code(x,x,x,x,x,x,x)+B62p
UNDEF:000021FC                 extrn _XZ_FOOTER_SIG:near
UNDEF:000021FC                                         ; DATA XREF: Xz_CheckFooter(x,x,x,x)+7Do
UNDEF:000021FC
UNDEF:000021FC
UNDEF:000021FC                 end