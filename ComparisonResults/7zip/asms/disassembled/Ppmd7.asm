.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : D7DCE0A643FDDCB67CD2EC7BBBA2A001
.rdata:00000000 ; Input CRC32 : 9D84D5BE
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Ppmd7.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000                 public _PPMD7_kExpEscape
.rdata:00000000 _PPMD7_kExpEscape db  19h
.rdata:00000001                 db  0Eh
.rdata:00000002                 db    9
.rdata:00000003                 db    7
.rdata:00000004                 db    5
.rdata:00000005                 db    5
.rdata:00000006                 db    4
.rdata:00000007                 db    4
.rdata:00000008                 db    4
.rdata:00000009                 db    3
.rdata:0000000A                 db    3
.rdata:0000000B                 db    3
.rdata:0000000C                 db    2
.rdata:0000000D                 db    2
.rdata:0000000E                 db    2
.rdata:0000000F                 db    2
.rdata:00000010 _kInitBinEsc    dw 3CDDh                ; DATA XREF: RestartModel(x)+1F0r
.rdata:00000012                 db  3Fh ; ?
.rdata:00000013                 db  1Fh
.rdata:00000014                 db 0BFh ; +
.rdata:00000015                 db  59h ; Y
.rdata:00000016                 db 0F3h ; =
.rdata:00000017                 db  48h ; H
.rdata:00000018                 db 0A1h ; Ã­
.rdata:00000019                 db  64h ; d
.rdata:0000001A                 db 0BCh ; +
.rdata:0000001B                 db  5Ah ; Z
.rdata:0000001C                 db  32h ; 2
.rdata:0000001D                 db  66h ; f
.rdata:0000001E                 db  51h ; Q
.rdata:0000001F                 db  60h ; `
.rdata:0000001F _rdata          ends
.rdata:0000001F
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; __stdcall Ppmd7_Construct(x)
.text:00000020                 public _Ppmd7_Construct@4
.text:00000020 _Ppmd7_Construct@4 proc near
.text:00000020
.text:00000020 var_14          = dword ptr -14h
.text:00000020 var_10          = dword ptr -10h
.text:00000020 var_C           = dword ptr -0Ch
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 14h
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 mov     [ebp+var_14], eax
.text:0000002E                 mov     [ebp+var_10], eax
.text:00000031                 mov     [ebp+var_C], eax
.text:00000034                 mov     [ebp+var_8], eax
.text:00000037                 mov     [ebp+var_4], eax
.text:0000003A                 mov     eax, [ebp+arg_0]
.text:0000003D                 mov     dword ptr [eax+30h], 0
.text:00000044                 mov     [ebp+var_4], 0
.text:0000004B                 mov     [ebp+var_8], 0
.text:00000052                 jmp     short loc_5D
.text:00000054 ; ---------------------------------------------------------------------------
.text:00000054
.text:00000054 loc_54:                                 ; CODE XREF: Ppmd7_Construct(x)+90j
.text:00000054                 mov     ecx, [ebp+var_4]
.text:00000057                 add     ecx, 1
.text:0000005A                 mov     [ebp+var_4], ecx
.text:0000005D
.text:0000005D loc_5D:                                 ; CODE XREF: Ppmd7_Construct(x)+32j
.text:0000005D                 cmp     [ebp+var_4], 26h ; '&'
.text:00000061                 jnb     short loc_B2
.text:00000063                 cmp     [ebp+var_4], 0Ch
.text:00000067                 jb      short loc_72
.text:00000069                 mov     [ebp+var_14], 4
.text:00000070                 jmp     short loc_7E
.text:00000072 ; ---------------------------------------------------------------------------
.text:00000072
.text:00000072 loc_72:                                 ; CODE XREF: Ppmd7_Construct(x)+47j
.text:00000072                 mov     edx, [ebp+var_4]
.text:00000075                 shr     edx, 2
.text:00000078                 add     edx, 1
.text:0000007B                 mov     [ebp+var_14], edx
.text:0000007E
.text:0000007E loc_7E:                                 ; CODE XREF: Ppmd7_Construct(x)+50j
.text:0000007E                 mov     eax, [ebp+var_14]
.text:00000081                 mov     [ebp+var_10], eax
.text:00000084
.text:00000084 loc_84:                                 ; CODE XREF: Ppmd7_Construct(x)+82j
.text:00000084                 mov     ecx, [ebp+arg_0]
.text:00000087                 add     ecx, [ebp+var_8]
.text:0000008A                 mov     dl, byte ptr [ebp+var_4]
.text:0000008D                 mov     [ecx+6Eh], dl
.text:00000090                 mov     eax, [ebp+var_8]
.text:00000093                 add     eax, 1
.text:00000096                 mov     [ebp+var_8], eax
.text:00000099                 mov     ecx, [ebp+var_10]
.text:0000009C                 sub     ecx, 1
.text:0000009F                 mov     [ebp+var_10], ecx
.text:000000A2                 jnz     short loc_84
.text:000000A4                 mov     edx, [ebp+arg_0]
.text:000000A7                 add     edx, [ebp+var_4]
.text:000000AA                 mov     al, byte ptr [ebp+var_8]
.text:000000AD                 mov     [edx+48h], al
.text:000000B0                 jmp     short loc_54
.text:000000B2 ; ---------------------------------------------------------------------------
.text:000000B2
.text:000000B2 loc_B2:                                 ; CODE XREF: Ppmd7_Construct(x)+41j
.text:000000B2                 mov     ecx, [ebp+arg_0]
.text:000000B5                 mov     byte ptr [ecx+288h], 0
.text:000000BC                 mov     edx, [ebp+arg_0]
.text:000000BF                 mov     byte ptr [edx+289h], 2
.text:000000C6                 push    9               ; Size
.text:000000C8                 push    4               ; Val
.text:000000CA                 mov     eax, [ebp+arg_0]
.text:000000CD                 add     eax, 28Ah
.text:000000D2                 push    eax             ; Dst
.text:000000D3                 call    _memset
.text:000000D8                 add     esp, 0Ch
.text:000000DB                 push    0F5h ; ')'      ; Size
.text:000000E0                 push    6               ; Val
.text:000000E2                 mov     ecx, [ebp+arg_0]
.text:000000E5                 add     ecx, 293h
.text:000000EB                 push    ecx             ; Dst
.text:000000EC                 call    _memset
.text:000000F1                 add     esp, 0Ch
.text:000000F4                 mov     [ebp+var_4], 0
.text:000000FB                 jmp     short loc_106
.text:000000FD ; ---------------------------------------------------------------------------
.text:000000FD
.text:000000FD loc_FD:                                 ; CODE XREF: Ppmd7_Construct(x)+FBj
.text:000000FD                 mov     edx, [ebp+var_4]
.text:00000100                 add     edx, 1
.text:00000103                 mov     [ebp+var_4], edx
.text:00000106
.text:00000106 loc_106:                                ; CODE XREF: Ppmd7_Construct(x)+DBj
.text:00000106                 cmp     [ebp+var_4], 3
.text:0000010A                 jnb     short loc_11D
.text:0000010C                 mov     eax, [ebp+arg_0]
.text:0000010F                 add     eax, [ebp+var_4]
.text:00000112                 mov     cl, byte ptr [ebp+var_4]
.text:00000115                 mov     [eax+188h], cl
.text:0000011B                 jmp     short loc_FD
.text:0000011D ; ---------------------------------------------------------------------------
.text:0000011D
.text:0000011D loc_11D:                                ; CODE XREF: Ppmd7_Construct(x)+EAj
.text:0000011D                 mov     edx, [ebp+var_4]
.text:00000120                 mov     [ebp+var_C], edx
.text:00000123                 mov     [ebp+var_8], 1
.text:0000012A                 jmp     short loc_135
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: Ppmd7_Construct(x):loc_16Aj
.text:0000012C                 mov     eax, [ebp+var_4]
.text:0000012F                 add     eax, 1
.text:00000132                 mov     [ebp+var_4], eax
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: Ppmd7_Construct(x)+10Aj
.text:00000135                 cmp     [ebp+var_4], 100h
.text:0000013C                 jnb     short loc_16C
.text:0000013E                 mov     ecx, [ebp+arg_0]
.text:00000141                 add     ecx, [ebp+var_4]
.text:00000144                 mov     dl, byte ptr [ebp+var_C]
.text:00000147                 mov     [ecx+188h], dl
.text:0000014D                 mov     eax, [ebp+var_8]
.text:00000150                 sub     eax, 1
.text:00000153                 mov     [ebp+var_8], eax
.text:00000156                 jnz     short loc_16A
.text:00000158                 mov     ecx, [ebp+var_C]
.text:0000015B                 add     ecx, 1
.text:0000015E                 mov     [ebp+var_C], ecx
.text:00000161                 mov     edx, [ebp+var_C]
.text:00000164                 sub     edx, 2
.text:00000167                 mov     [ebp+var_8], edx
.text:0000016A
.text:0000016A loc_16A:                                ; CODE XREF: Ppmd7_Construct(x)+136j
.text:0000016A                 jmp     short loc_12C
.text:0000016C ; ---------------------------------------------------------------------------
.text:0000016C
.text:0000016C loc_16C:                                ; CODE XREF: Ppmd7_Construct(x)+11Cj
.text:0000016C                 push    40h ; '@'       ; Size
.text:0000016E                 push    0               ; Val
.text:00000170                 mov     eax, [ebp+arg_0]
.text:00000173                 add     eax, 388h
.text:00000178                 push    eax             ; Dst
.text:00000179                 call    _memset
.text:0000017E                 add     esp, 0Ch
.text:00000181                 push    0C0h ; '+'      ; Size
.text:00000186                 push    8               ; Val
.text:00000188                 mov     ecx, [ebp+arg_0]
.text:0000018B                 add     ecx, 3C8h
.text:00000191                 push    ecx             ; Dst
.text:00000192                 call    _memset
.text:00000197                 add     esp, 0Ch
.text:0000019A                 add     esp, 14h
.text:0000019D                 cmp     ebp, esp
.text:0000019F                 call    __RTC_CheckEsp
.text:000001A4                 mov     esp, ebp
.text:000001A6                 pop     ebp
.text:000001A7                 retn    4
.text:000001A7 _Ppmd7_Construct@4 endp
.text:000001A7
.text:000001A7 ; ---------------------------------------------------------------------------
.text:000001AA                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; __stdcall Ppmd7_Free(x, x)
.text:000001B0                 public _Ppmd7_Free@8
.text:000001B0 _Ppmd7_Free@8   proc near               ; CODE XREF: Ppmd7_Alloc(x,x,x)+28p
.text:000001B0
.text:000001B0 arg_0           = dword ptr  8
.text:000001B0 arg_4           = dword ptr  0Ch
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    esi
.text:000001B4                 mov     esi, esp
.text:000001B6                 mov     eax, [ebp+arg_0]
.text:000001B9                 mov     ecx, [eax+30h]
.text:000001BC                 push    ecx
.text:000001BD                 mov     edx, [ebp+arg_4]
.text:000001C0                 push    edx
.text:000001C1                 mov     eax, [ebp+arg_4]
.text:000001C4                 mov     ecx, [eax+4]
.text:000001C7                 call    ecx
.text:000001C9                 cmp     esi, esp
.text:000001CB                 call    __RTC_CheckEsp
.text:000001D0                 mov     edx, [ebp+arg_0]
.text:000001D3                 mov     dword ptr [edx+28h], 0
.text:000001DA                 mov     eax, [ebp+arg_0]
.text:000001DD                 mov     dword ptr [eax+30h], 0
.text:000001E4                 pop     esi
.text:000001E5                 cmp     ebp, esp
.text:000001E7                 call    __RTC_CheckEsp
.text:000001EC                 pop     ebp
.text:000001ED                 retn    8
.text:000001ED _Ppmd7_Free@8   endp
.text:000001ED
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; __stdcall Ppmd7_Alloc(x, x, x)
.text:000001F0                 public _Ppmd7_Alloc@12
.text:000001F0 _Ppmd7_Alloc@12 proc near
.text:000001F0
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0 arg_8           = dword ptr  10h
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 push    ecx
.text:000001F4                 push    esi
.text:000001F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001FC                 mov     eax, [ebp+arg_0]
.text:000001FF                 cmp     dword ptr [eax+30h], 0
.text:00000203                 jz      short loc_210
.text:00000205                 mov     ecx, [ebp+arg_0]
.text:00000208                 mov     edx, [ecx+28h]
.text:0000020B                 cmp     edx, [ebp+arg_4]
.text:0000020E                 jz      short loc_26B
.text:00000210
.text:00000210 loc_210:                                ; CODE XREF: Ppmd7_Alloc(x,x,x)+13j
.text:00000210                 mov     eax, [ebp+arg_8]
.text:00000213                 push    eax
.text:00000214                 mov     ecx, [ebp+arg_0]
.text:00000217                 push    ecx
.text:00000218                 call    _Ppmd7_Free@8   ; Ppmd7_Free(x,x)
.text:0000021D                 mov     edx, 4
.text:00000222                 sub     edx, [ebp+arg_4]
.text:00000225                 and     edx, 3
.text:00000228                 mov     eax, [ebp+arg_0]
.text:0000022B                 mov     [eax+44h], edx
.text:0000022E                 mov     ecx, [ebp+arg_0]
.text:00000231                 mov     edx, [ecx+44h]
.text:00000234                 add     edx, [ebp+arg_4]
.text:00000237                 mov     esi, esp
.text:00000239                 push    edx
.text:0000023A                 mov     eax, [ebp+arg_8]
.text:0000023D                 push    eax
.text:0000023E                 mov     ecx, [ebp+arg_8]
.text:00000241                 mov     edx, [ecx]
.text:00000243                 call    edx
.text:00000245                 cmp     esi, esp
.text:00000247                 call    __RTC_CheckEsp
.text:0000024C                 mov     [ebp+var_4], eax
.text:0000024F                 mov     eax, [ebp+arg_0]
.text:00000252                 mov     ecx, [ebp+var_4]
.text:00000255                 mov     [eax+30h], ecx
.text:00000258                 cmp     [ebp+var_4], 0
.text:0000025C                 jnz     short loc_262
.text:0000025E                 xor     eax, eax
.text:00000260                 jmp     short loc_270
.text:00000262 ; ---------------------------------------------------------------------------
.text:00000262
.text:00000262 loc_262:                                ; CODE XREF: Ppmd7_Alloc(x,x,x)+6Cj
.text:00000262                 mov     edx, [ebp+arg_0]
.text:00000265                 mov     eax, [ebp+arg_4]
.text:00000268                 mov     [edx+28h], eax
.text:0000026B
.text:0000026B loc_26B:                                ; CODE XREF: Ppmd7_Alloc(x,x,x)+1Ej
.text:0000026B                 mov     eax, 1
.text:00000270
.text:00000270 loc_270:                                ; CODE XREF: Ppmd7_Alloc(x,x,x)+70j
.text:00000270                 pop     esi
.text:00000271                 add     esp, 4
.text:00000274                 cmp     ebp, esp
.text:00000276                 call    __RTC_CheckEsp
.text:0000027B                 mov     esp, ebp
.text:0000027D                 pop     ebp
.text:0000027E                 retn    0Ch
.text:0000027E _Ppmd7_Alloc@12 endp
.text:0000027E
.text:0000027E ; ---------------------------------------------------------------------------
.text:00000281                 align 10h
.text:00000290
.text:00000290 ; =============== S U B R O U T I N E =======================================
.text:00000290
.text:00000290 ; Attributes: bp-based frame
.text:00000290
.text:00000290 ; __stdcall Ppmd7_Init(x, x)
.text:00000290                 public _Ppmd7_Init@8
.text:00000290 _Ppmd7_Init@8   proc near
.text:00000290
.text:00000290 arg_0           = dword ptr  8
.text:00000290 arg_4           = dword ptr  0Ch
.text:00000290
.text:00000290                 push    ebp
.text:00000291                 mov     ebp, esp
.text:00000293                 mov     eax, [ebp+arg_0]
.text:00000296                 mov     ecx, [ebp+arg_4]
.text:00000299                 mov     [eax+18h], ecx
.text:0000029C                 mov     edx, [ebp+arg_0]
.text:0000029F                 push    edx
.text:000002A0                 call    _RestartModel@4 ; RestartModel(x)
.text:000002A5                 mov     eax, [ebp+arg_0]
.text:000002A8                 mov     byte ptr [eax+48Ah], 7
.text:000002AF                 xor     ecx, ecx
.text:000002B1                 mov     edx, [ebp+arg_0]
.text:000002B4                 mov     [edx+488h], cx
.text:000002BB                 mov     eax, [ebp+arg_0]
.text:000002BE                 mov     byte ptr [eax+48Bh], 40h ; '@'
.text:000002C5                 cmp     ebp, esp
.text:000002C7                 call    __RTC_CheckEsp
.text:000002CC                 pop     ebp
.text:000002CD                 retn    8
.text:000002CD _Ppmd7_Init@8   endp
.text:000002CD
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 ; __stdcall RestartModel(x)
.text:000002D0 _RestartModel@4 proc near               ; CODE XREF: Ppmd7_Init(x,x)+10p
.text:000002D0                                         ; UpdateModel(x)+157p ...
.text:000002D0
.text:000002D0 var_2C          = dword ptr -2Ch
.text:000002D0 var_28          = dword ptr -28h
.text:000002D0 var_24          = dword ptr -24h
.text:000002D0 var_20          = dword ptr -20h
.text:000002D0 var_1C          = dword ptr -1Ch
.text:000002D0 var_18          = word ptr -18h
.text:000002D0 var_14          = dword ptr -14h
.text:000002D0 var_10          = dword ptr -10h
.text:000002D0 var_C           = dword ptr -0Ch
.text:000002D0 var_8           = dword ptr -8
.text:000002D0 var_4           = dword ptr -4
.text:000002D0 arg_0           = dword ptr  8
.text:000002D0
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 sub     esp, 2Ch
.text:000002D6                 push    edi
.text:000002D7                 lea     edi, [ebp+var_2C]
.text:000002DA                 mov     ecx, 0Bh
.text:000002DF                 mov     eax, 0CCCCCCCCh
.text:000002E4                 rep stosd
.text:000002E6                 push    98h ; 'Ã¿'       ; Size
.text:000002EB                 push    0               ; Val
.text:000002ED                 mov     eax, [ebp+arg_0]
.text:000002F0                 add     eax, 0F0h ; '='
.text:000002F5                 push    eax             ; Dst
.text:000002F6                 call    _memset
.text:000002FB                 add     esp, 0Ch
.text:000002FE                 mov     ecx, [ebp+arg_0]
.text:00000301                 mov     edx, [ecx+30h]
.text:00000304                 mov     eax, [ebp+arg_0]
.text:00000307                 add     edx, [eax+44h]
.text:0000030A                 mov     ecx, [ebp+arg_0]
.text:0000030D                 mov     [ecx+3Ch], edx
.text:00000310                 mov     edx, [ebp+arg_0]
.text:00000313                 mov     eax, [edx+3Ch]
.text:00000316                 mov     ecx, [ebp+arg_0]
.text:00000319                 add     eax, [ecx+28h]
.text:0000031C                 mov     edx, [ebp+arg_0]
.text:0000031F                 mov     [edx+38h], eax
.text:00000322                 mov     eax, [ebp+arg_0]
.text:00000325                 mov     eax, [eax+28h]
.text:00000328                 shr     eax, 3
.text:0000032B                 xor     edx, edx
.text:0000032D                 mov     ecx, 0Ch
.text:00000332                 div     ecx
.text:00000334                 imul    eax, 7
.text:00000337                 imul    eax, 0Ch
.text:0000033A                 mov     edx, [ebp+arg_0]
.text:0000033D                 mov     ecx, [edx+38h]
.text:00000340                 sub     ecx, eax
.text:00000342                 mov     [ebp+var_20], ecx
.text:00000345                 mov     edx, [ebp+arg_0]
.text:00000348                 mov     eax, [ebp+var_20]
.text:0000034B                 mov     [edx+40h], eax
.text:0000034E                 mov     ecx, [ebp+arg_0]
.text:00000351                 mov     edx, [ebp+var_20]
.text:00000354                 mov     [ecx+34h], edx
.text:00000357                 mov     eax, [ebp+arg_0]
.text:0000035A                 mov     dword ptr [eax+2Ch], 0
.text:00000361                 mov     ecx, [ebp+arg_0]
.text:00000364                 mov     edx, [ebp+arg_0]
.text:00000367                 mov     eax, [edx+18h]
.text:0000036A                 mov     [ecx+0Ch], eax
.text:0000036D                 mov     ecx, [ebp+arg_0]
.text:00000370                 cmp     dword ptr [ecx+18h], 0Ch
.text:00000374                 jnb     short loc_381
.text:00000376                 mov     edx, [ebp+arg_0]
.text:00000379                 mov     eax, [edx+18h]
.text:0000037C                 mov     [ebp+var_24], eax
.text:0000037F                 jmp     short loc_388
.text:00000381 ; ---------------------------------------------------------------------------
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: RestartModel(x)+A4j
.text:00000381                 mov     [ebp+var_24], 0Ch
.text:00000388
.text:00000388 loc_388:                                ; CODE XREF: RestartModel(x)+AFj
.text:00000388                 mov     ecx, [ebp+var_24]
.text:0000038B                 neg     ecx
.text:0000038D                 sub     ecx, 1
.text:00000390                 mov     [ebp+var_28], ecx
.text:00000393                 mov     edx, [ebp+arg_0]
.text:00000396                 mov     eax, [ebp+var_28]
.text:00000399                 mov     [edx+24h], eax
.text:0000039C                 mov     ecx, [ebp+arg_0]
.text:0000039F                 mov     edx, [ebp+var_28]
.text:000003A2                 mov     [ecx+20h], edx
.text:000003A5                 mov     eax, [ebp+arg_0]
.text:000003A8                 mov     dword ptr [eax+14h], 0
.text:000003AF                 mov     ecx, [ebp+arg_0]
.text:000003B2                 mov     edx, [ecx+38h]
.text:000003B5                 sub     edx, 0Ch
.text:000003B8                 mov     [ebp+var_2C], edx
.text:000003BB                 mov     eax, [ebp+arg_0]
.text:000003BE                 mov     ecx, [ebp+var_2C]
.text:000003C1                 mov     [eax+38h], ecx
.text:000003C4                 mov     edx, [ebp+arg_0]
.text:000003C7                 mov     eax, [ebp+var_2C]
.text:000003CA                 mov     [edx+4], eax
.text:000003CD                 mov     ecx, [ebp+arg_0]
.text:000003D0                 mov     edx, [ebp+var_2C]
.text:000003D3                 mov     [ecx], edx
.text:000003D5                 mov     eax, [ebp+arg_0]
.text:000003D8                 mov     ecx, [eax]
.text:000003DA                 mov     dword ptr [ecx+8], 0
.text:000003E1                 mov     edx, [ebp+arg_0]
.text:000003E4                 mov     eax, [edx]
.text:000003E6                 mov     ecx, 100h
.text:000003EB                 mov     [eax], cx
.text:000003EE                 mov     edx, [ebp+arg_0]
.text:000003F1                 mov     eax, [edx]
.text:000003F3                 mov     ecx, 101h
.text:000003F8                 mov     [eax+2], cx
.text:000003FC                 mov     edx, [ebp+arg_0]
.text:000003FF                 mov     eax, [ebp+arg_0]
.text:00000402                 mov     ecx, [eax+34h]
.text:00000405                 mov     [edx+8], ecx
.text:00000408                 mov     edx, [ebp+arg_0]
.text:0000040B                 mov     eax, [edx+34h]
.text:0000040E                 add     eax, 600h
.text:00000413                 mov     ecx, [ebp+arg_0]
.text:00000416                 mov     [ecx+34h], eax
.text:00000419                 mov     edx, [ebp+arg_0]
.text:0000041C                 mov     eax, [edx]
.text:0000041E                 mov     ecx, [ebp+arg_0]
.text:00000421                 mov     edx, [ecx+8]
.text:00000424                 mov     [eax+4], edx
.text:00000427                 mov     [ebp+var_4], 0
.text:0000042E                 jmp     short loc_439
.text:00000430 ; ---------------------------------------------------------------------------
.text:00000430
.text:00000430 loc_430:                                ; CODE XREF: RestartModel(x)+19Bj
.text:00000430                 mov     eax, [ebp+var_4]
.text:00000433                 add     eax, 1
.text:00000436                 mov     [ebp+var_4], eax
.text:00000439
.text:00000439 loc_439:                                ; CODE XREF: RestartModel(x)+15Ej
.text:00000439                 cmp     [ebp+var_4], 100h
.text:00000440                 jnb     short loc_46D
.text:00000442                 mov     ecx, [ebp+var_4]
.text:00000445                 imul    ecx, 6
.text:00000448                 mov     edx, [ebp+arg_0]
.text:0000044B                 add     ecx, [edx+8]
.text:0000044E                 mov     [ebp+var_10], ecx
.text:00000451                 mov     eax, [ebp+var_10]
.text:00000454                 mov     cl, byte ptr [ebp+var_4]
.text:00000457                 mov     [eax], cl
.text:00000459                 mov     edx, [ebp+var_10]
.text:0000045C                 mov     byte ptr [edx+1], 1
.text:00000460                 push    0
.text:00000462                 mov     eax, [ebp+var_10]
.text:00000465                 push    eax
.text:00000466                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:0000046B                 jmp     short loc_430
.text:0000046D ; ---------------------------------------------------------------------------
.text:0000046D
.text:0000046D loc_46D:                                ; CODE XREF: RestartModel(x)+170j
.text:0000046D                 mov     [ebp+var_4], 0
.text:00000474                 jmp     short loc_47F
.text:00000476 ; ---------------------------------------------------------------------------
.text:00000476
.text:00000476 loc_476:                                ; CODE XREF: RestartModel(x):loc_507j
.text:00000476                 mov     ecx, [ebp+var_4]
.text:00000479                 add     ecx, 1
.text:0000047C                 mov     [ebp+var_4], ecx
.text:0000047F
.text:0000047F loc_47F:                                ; CODE XREF: RestartModel(x)+1A4j
.text:0000047F                 cmp     [ebp+var_4], 80h ; 'Ã'
.text:00000486                 jnb     loc_50C
.text:0000048C                 mov     [ebp+var_8], 0
.text:00000493                 jmp     short loc_49E
.text:00000495 ; ---------------------------------------------------------------------------
.text:00000495
.text:00000495 loc_495:                                ; CODE XREF: RestartModel(x):loc_505j
.text:00000495                 mov     edx, [ebp+var_8]
.text:00000498                 add     edx, 1
.text:0000049B                 mov     [ebp+var_8], edx
.text:0000049E
.text:0000049E loc_49E:                                ; CODE XREF: RestartModel(x)+1C3j
.text:0000049E                 cmp     [ebp+var_8], 8
.text:000004A2                 jnb     short loc_507
.text:000004A4                 mov     eax, [ebp+var_4]
.text:000004A7                 shl     eax, 7
.text:000004AA                 mov     ecx, [ebp+arg_0]
.text:000004AD                 lea     edx, [ecx+eax+0ACCh]
.text:000004B4                 mov     eax, [ebp+var_8]
.text:000004B7                 lea     ecx, [edx+eax*2]
.text:000004BA                 mov     [ebp+var_14], ecx
.text:000004BD                 mov     edx, [ebp+var_8]
.text:000004C0                 movzx   eax, _kInitBinEsc[edx*2]
.text:000004C8                 mov     ecx, [ebp+var_4]
.text:000004CB                 add     ecx, 2
.text:000004CE                 xor     edx, edx
.text:000004D0                 div     ecx
.text:000004D2                 mov     edx, 4000h
.text:000004D7                 sub     edx, eax
.text:000004D9                 mov     [ebp+var_18], dx
.text:000004DD                 mov     [ebp+var_C], 0
.text:000004E4                 jmp     short loc_4EF
.text:000004E6 ; ---------------------------------------------------------------------------
.text:000004E6
.text:000004E6 loc_4E6:                                ; CODE XREF: RestartModel(x)+233j
.text:000004E6                 mov     eax, [ebp+var_C]
.text:000004E9                 add     eax, 8
.text:000004EC                 mov     [ebp+var_C], eax
.text:000004EF
.text:000004EF loc_4EF:                                ; CODE XREF: RestartModel(x)+214j
.text:000004EF                 cmp     [ebp+var_C], 40h ; '@'
.text:000004F3                 jnb     short loc_505
.text:000004F5                 mov     ecx, [ebp+var_C]
.text:000004F8                 mov     edx, [ebp+var_14]
.text:000004FB                 mov     ax, [ebp+var_18]
.text:000004FF                 mov     [edx+ecx*2], ax
.text:00000503                 jmp     short loc_4E6
.text:00000505 ; ---------------------------------------------------------------------------
.text:00000505
.text:00000505 loc_505:                                ; CODE XREF: RestartModel(x)+223j
.text:00000505                 jmp     short loc_495
.text:00000507 ; ---------------------------------------------------------------------------
.text:00000507
.text:00000507 loc_507:                                ; CODE XREF: RestartModel(x)+1D2j
.text:00000507                 jmp     loc_476
.text:0000050C ; ---------------------------------------------------------------------------
.text:0000050C
.text:0000050C loc_50C:                                ; CODE XREF: RestartModel(x)+1B6j
.text:0000050C                 mov     [ebp+var_4], 0
.text:00000513                 jmp     short loc_51E
.text:00000515 ; ---------------------------------------------------------------------------
.text:00000515
.text:00000515 loc_515:                                ; CODE XREF: RestartModel(x):loc_578j
.text:00000515                 mov     ecx, [ebp+var_4]
.text:00000518                 add     ecx, 1
.text:0000051B                 mov     [ebp+var_4], ecx
.text:0000051E
.text:0000051E loc_51E:                                ; CODE XREF: RestartModel(x)+243j
.text:0000051E                 cmp     [ebp+var_4], 19h
.text:00000522                 jnb     short loc_57A
.text:00000524                 mov     [ebp+var_8], 0
.text:0000052B                 jmp     short loc_536
.text:0000052D ; ---------------------------------------------------------------------------
.text:0000052D
.text:0000052D loc_52D:                                ; CODE XREF: RestartModel(x)+2A6j
.text:0000052D                 mov     edx, [ebp+var_8]
.text:00000530                 add     edx, 1
.text:00000533                 mov     [ebp+var_8], edx
.text:00000536
.text:00000536 loc_536:                                ; CODE XREF: RestartModel(x)+25Bj
.text:00000536                 cmp     [ebp+var_8], 10h
.text:0000053A                 jnb     short loc_578
.text:0000053C                 mov     eax, [ebp+var_4]
.text:0000053F                 shl     eax, 6
.text:00000542                 mov     ecx, [ebp+arg_0]
.text:00000545                 lea     edx, [ecx+eax+48Ch]
.text:0000054C                 mov     eax, [ebp+var_8]
.text:0000054F                 lea     ecx, [edx+eax*4]
.text:00000552                 mov     [ebp+var_1C], ecx
.text:00000555                 mov     edx, [ebp+var_1C]
.text:00000558                 mov     byte ptr [edx+2], 3
.text:0000055C                 mov     eax, [ebp+var_4]
.text:0000055F                 imul    eax, 5
.text:00000562                 lea     ecx, ds:50h[eax*8]
.text:00000569                 mov     edx, [ebp+var_1C]
.text:0000056C                 mov     [edx], cx
.text:0000056F                 mov     eax, [ebp+var_1C]
.text:00000572                 mov     byte ptr [eax+3], 4
.text:00000576                 jmp     short loc_52D
.text:00000578 ; ---------------------------------------------------------------------------
.text:00000578
.text:00000578 loc_578:                                ; CODE XREF: RestartModel(x)+26Aj
.text:00000578                 jmp     short loc_515
.text:0000057A ; ---------------------------------------------------------------------------
.text:0000057A
.text:0000057A loc_57A:                                ; CODE XREF: RestartModel(x)+252j
.text:0000057A                 pop     edi
.text:0000057B                 add     esp, 2Ch
.text:0000057E                 cmp     ebp, esp
.text:00000580                 call    __RTC_CheckEsp
.text:00000585                 mov     esp, ebp
.text:00000587                 pop     ebp
.text:00000588                 retn    4
.text:00000588 _RestartModel@4 endp
.text:00000588
.text:00000588 ; ---------------------------------------------------------------------------
.text:0000058B                 align 10h
.text:00000590
.text:00000590 ; =============== S U B R O U T I N E =======================================
.text:00000590
.text:00000590 ; Attributes: bp-based frame
.text:00000590
.text:00000590 ; __stdcall SetSuccessor(x, x)
.text:00000590 _SetSuccessor@8 proc near               ; CODE XREF: RestartModel(x)+196p
.text:00000590                                         ; UpdateModel(x)+16Ep ...
.text:00000590
.text:00000590 arg_0           = dword ptr  8
.text:00000590 arg_4           = dword ptr  0Ch
.text:00000590
.text:00000590                 push    ebp
.text:00000591                 mov     ebp, esp
.text:00000593                 mov     eax, [ebp+arg_4]
.text:00000596                 and     eax, 0FFFFh
.text:0000059B                 mov     ecx, [ebp+arg_0]
.text:0000059E                 mov     [ecx+2], ax
.text:000005A2                 mov     edx, [ebp+arg_4]
.text:000005A5                 shr     edx, 10h
.text:000005A8                 and     edx, 0FFFFh
.text:000005AE                 mov     eax, [ebp+arg_0]
.text:000005B1                 mov     [eax+4], dx
.text:000005B5                 pop     ebp
.text:000005B6                 retn    8
.text:000005B6 _SetSuccessor@8 endp
.text:000005B6
.text:000005B6 ; ---------------------------------------------------------------------------
.text:000005B9                 align 10h
.text:000005C0
.text:000005C0 ; =============== S U B R O U T I N E =======================================
.text:000005C0
.text:000005C0 ; Attributes: bp-based frame
.text:000005C0
.text:000005C0 ; __stdcall Ppmd7_MakeEscFreq(x, x, x)
.text:000005C0                 public _Ppmd7_MakeEscFreq@12
.text:000005C0 _Ppmd7_MakeEscFreq@12 proc near
.text:000005C0
.text:000005C0 var_C           = dword ptr -0Ch
.text:000005C0 var_8           = dword ptr -8
.text:000005C0 var_4           = dword ptr -4
.text:000005C0 arg_0           = dword ptr  8
.text:000005C0 arg_4           = dword ptr  0Ch
.text:000005C0 arg_8           = dword ptr  10h
.text:000005C0
.text:000005C0                 push    ebp
.text:000005C1                 mov     ebp, esp
.text:000005C3                 sub     esp, 0Ch
.text:000005C6                 push    ebx
.text:000005C7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005DC                 mov     eax, [ebp+arg_0]
.text:000005DF                 mov     ecx, [eax]
.text:000005E1                 movzx   edx, word ptr [ecx]
.text:000005E4                 sub     edx, [ebp+arg_4]
.text:000005E7                 mov     [ebp+var_8], edx
.text:000005EA                 mov     eax, [ebp+arg_0]
.text:000005ED                 mov     ecx, [eax]
.text:000005EF                 movzx   edx, word ptr [ecx]
.text:000005F2                 cmp     edx, 100h
.text:000005F8                 jz      loc_6A7
.text:000005FE                 mov     eax, [ebp+arg_0]
.text:00000601                 add     eax, [ebp+var_8]
.text:00000604                 movzx   ecx, byte ptr [eax+187h]
.text:0000060B                 shl     ecx, 6
.text:0000060E                 mov     edx, [ebp+arg_0]
.text:00000611                 lea     eax, [edx+ecx+48Ch]
.text:00000618                 mov     ecx, [ebp+arg_0]
.text:0000061B                 mov     edx, [ecx]
.text:0000061D                 mov     ecx, [edx+8]
.text:00000620                 movzx   edx, word ptr [ecx]
.text:00000623                 mov     ecx, [ebp+arg_0]
.text:00000626                 mov     ecx, [ecx]
.text:00000628                 movzx   ecx, word ptr [ecx]
.text:0000062B                 sub     edx, ecx
.text:0000062D                 cmp     [ebp+var_8], edx
.text:00000630                 sbb     edx, edx
.text:00000632                 neg     edx
.text:00000634                 lea     eax, [eax+edx*4]
.text:00000637                 mov     ecx, [ebp+arg_0]
.text:0000063A                 mov     edx, [ecx]
.text:0000063C                 movzx   ecx, word ptr [edx+2]
.text:00000640                 mov     edx, [ebp+arg_0]
.text:00000643                 mov     edx, [edx]
.text:00000645                 movzx   edx, word ptr [edx]
.text:00000648                 imul    edx, 0Bh
.text:0000064B                 xor     ebx, ebx
.text:0000064D                 cmp     ecx, edx
.text:0000064F                 setl    bl
.text:00000652                 shl     ebx, 1
.text:00000654                 lea     eax, [eax+ebx*4]
.text:00000657                 mov     ecx, [ebp+arg_4]
.text:0000065A                 cmp     [ebp+var_8], ecx
.text:0000065D                 sbb     edx, edx
.text:0000065F                 neg     edx
.text:00000661                 shl     edx, 2
.text:00000664                 lea     eax, [eax+edx*4]
.text:00000667                 mov     ecx, [ebp+arg_0]
.text:0000066A                 mov     edx, [ecx+1Ch]
.text:0000066D                 lea     eax, [eax+edx*4]
.text:00000670                 mov     [ebp+var_4], eax
.text:00000673                 mov     ecx, [ebp+var_4]
.text:00000676                 movzx   edx, word ptr [ecx]
.text:00000679                 mov     eax, [ebp+var_4]
.text:0000067C                 movzx   ecx, byte ptr [eax+2]
.text:00000680                 sar     edx, cl
.text:00000682                 mov     [ebp+var_C], edx
.text:00000685                 mov     ecx, [ebp+var_4]
.text:00000688                 movzx   edx, word ptr [ecx]
.text:0000068B                 sub     edx, [ebp+var_C]
.text:0000068E                 mov     eax, [ebp+var_4]
.text:00000691                 mov     [eax], dx
.text:00000694                 xor     ecx, ecx
.text:00000696                 cmp     [ebp+var_C], 0
.text:0000069A                 setz    cl
.text:0000069D                 add     ecx, [ebp+var_C]
.text:000006A0                 mov     edx, [ebp+arg_8]
.text:000006A3                 mov     [edx], ecx
.text:000006A5                 jmp     short loc_6BB
.text:000006A7 ; ---------------------------------------------------------------------------
.text:000006A7
.text:000006A7 loc_6A7:                                ; CODE XREF: Ppmd7_MakeEscFreq(x,x,x)+38j
.text:000006A7                 mov     eax, [ebp+arg_0]
.text:000006AA                 add     eax, 488h
.text:000006AF                 mov     [ebp+var_4], eax
.text:000006B2                 mov     ecx, [ebp+arg_8]
.text:000006B5                 mov     dword ptr [ecx], 1
.text:000006BB
.text:000006BB loc_6BB:                                ; CODE XREF: Ppmd7_MakeEscFreq(x,x,x)+E5j
.text:000006BB                 mov     eax, [ebp+var_4]
.text:000006BE                 pop     ebx
.text:000006BF                 mov     esp, ebp
.text:000006C1                 pop     ebp
.text:000006C2                 retn    0Ch
.text:000006C2 _Ppmd7_MakeEscFreq@12 endp
.text:000006C2
.text:000006C2 ; ---------------------------------------------------------------------------
.text:000006C5                 align 10h
.text:000006D0
.text:000006D0 ; =============== S U B R O U T I N E =======================================
.text:000006D0
.text:000006D0 ; Attributes: bp-based frame
.text:000006D0
.text:000006D0 ; __stdcall Ppmd7_Update1(x)
.text:000006D0                 public _Ppmd7_Update1@4
.text:000006D0 _Ppmd7_Update1@4 proc near
.text:000006D0
.text:000006D0 var_4           = dword ptr -4
.text:000006D0 arg_0           = dword ptr  8
.text:000006D0
.text:000006D0                 push    ebp
.text:000006D1                 mov     ebp, esp
.text:000006D3                 push    ecx
.text:000006D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006DB                 mov     eax, [ebp+arg_0]
.text:000006DE                 mov     ecx, [eax+8]
.text:000006E1                 mov     [ebp+var_4], ecx
.text:000006E4                 mov     edx, [ebp+var_4]
.text:000006E7                 movzx   eax, byte ptr [edx+1]
.text:000006EB                 add     eax, 4
.text:000006EE                 mov     ecx, [ebp+var_4]
.text:000006F1                 mov     [ecx+1], al
.text:000006F4                 mov     edx, [ebp+arg_0]
.text:000006F7                 mov     eax, [edx]
.text:000006F9                 movzx   ecx, word ptr [eax+2]
.text:000006FD                 add     ecx, 4
.text:00000700                 mov     edx, [ebp+arg_0]
.text:00000703                 mov     eax, [edx]
.text:00000705                 mov     [eax+2], cx
.text:00000709                 mov     ecx, [ebp+var_4]
.text:0000070C                 movzx   edx, byte ptr [ecx+1]
.text:00000710                 mov     eax, [ebp+var_4]
.text:00000713                 movzx   ecx, byte ptr [eax-5]
.text:00000717                 cmp     edx, ecx
.text:00000719                 jle     short loc_752
.text:0000071B                 mov     edx, [ebp+var_4]
.text:0000071E                 sub     edx, 6
.text:00000721                 push    edx
.text:00000722                 mov     eax, [ebp+var_4]
.text:00000725                 push    eax
.text:00000726                 call    _SwapStates@8   ; SwapStates(x,x)
.text:0000072B                 mov     ecx, [ebp+var_4]
.text:0000072E                 sub     ecx, 6
.text:00000731                 mov     [ebp+var_4], ecx
.text:00000734                 mov     edx, [ebp+arg_0]
.text:00000737                 mov     eax, [ebp+var_4]
.text:0000073A                 mov     [edx+8], eax
.text:0000073D                 mov     ecx, [ebp+var_4]
.text:00000740                 movzx   edx, byte ptr [ecx+1]
.text:00000744                 cmp     edx, 7Ch ; '|'
.text:00000747                 jle     short loc_752
.text:00000749                 mov     eax, [ebp+arg_0]
.text:0000074C                 push    eax
.text:0000074D                 call    _Rescale@4      ; Rescale(x)
.text:00000752
.text:00000752 loc_752:                                ; CODE XREF: Ppmd7_Update1(x)+49j
.text:00000752                                         ; Ppmd7_Update1(x)+77j
.text:00000752                 mov     ecx, [ebp+arg_0]
.text:00000755                 push    ecx
.text:00000756                 call    _NextContext@4  ; NextContext(x)
.text:0000075B                 add     esp, 4
.text:0000075E                 cmp     ebp, esp
.text:00000760                 call    __RTC_CheckEsp
.text:00000765                 mov     esp, ebp
.text:00000767                 pop     ebp
.text:00000768                 retn    4
.text:00000768 _Ppmd7_Update1@4 endp
.text:00000768
.text:00000768 ; ---------------------------------------------------------------------------
.text:0000076B                 align 10h
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; __stdcall SwapStates(x, x)
.text:00000770 _SwapStates@8   proc near               ; CODE XREF: Ppmd7_Update1(x)+56p
.text:00000770                                         ; UpdateModel(x)+E8p
.text:00000770
.text:00000770 var_10          = dword ptr -10h
.text:00000770 var_C           = dword ptr -0Ch
.text:00000770 var_8           = dword ptr -8
.text:00000770 var_4           = dword ptr -4
.text:00000770 arg_0           = dword ptr  8
.text:00000770 arg_4           = dword ptr  0Ch
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 sub     esp, 10h
.text:00000776                 mov     eax, 0CCCCCCCCh
.text:0000077B                 mov     [ebp+var_10], eax
.text:0000077E                 mov     [ebp+var_C], eax
.text:00000781                 mov     [ebp+var_8], eax
.text:00000784                 mov     [ebp+var_4], eax
.text:00000787                 mov     eax, [ebp+arg_0]
.text:0000078A                 mov     ecx, [eax]
.text:0000078C                 mov     [ebp+var_C], ecx
.text:0000078F                 mov     dx, [eax+4]
.text:00000793                 mov     word ptr [ebp+var_8], dx
.text:00000797                 mov     eax, [ebp+arg_4]
.text:0000079A                 mov     ecx, [ebp+arg_0]
.text:0000079D                 mov     edx, [eax]
.text:0000079F                 mov     [ecx], edx
.text:000007A1                 mov     ax, [eax+4]
.text:000007A5                 mov     [ecx+4], ax
.text:000007A9                 mov     ecx, [ebp+arg_4]
.text:000007AC                 mov     edx, [ebp+var_C]
.text:000007AF                 mov     [ecx], edx
.text:000007B1                 mov     ax, word ptr [ebp+var_8]
.text:000007B5                 mov     [ecx+4], ax
.text:000007B9                 push    edx
.text:000007BA                 mov     ecx, ebp
.text:000007BC                 push    eax
.text:000007BD                 lea     edx, $LN5
.text:000007C3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007C8                 pop     eax
.text:000007C9                 pop     edx
.text:000007CA                 mov     esp, ebp
.text:000007CC                 pop     ebp
.text:000007CD                 retn    8
.text:000007CD _SwapStates@8   endp
.text:000007CD
.text:000007CD ; ---------------------------------------------------------------------------
.text:000007D0 $LN5            dd 1                    ; DATA XREF: SwapStates(x,x)+4Do
.text:000007D4                 dd offset $LN4
.text:000007D8 $LN4            dd 0FFFFFFF4h, 6        ; DATA XREF: .text:000007D4o
.text:000007E0                 dd offset $LN3
.text:000007E4 $LN3            dd 706D74h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000007E0o
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; __stdcall Rescale(x)
.text:000007F0 _Rescale@4      proc near               ; CODE XREF: Ppmd7_Update1(x)+7Dp
.text:000007F0                                         ; Ppmd7_Update1_0(x)+7Dp ...
.text:000007F0
.text:000007F0 var_5C          = dword ptr -5Ch
.text:000007F0 var_54          = dword ptr -54h
.text:000007F0 var_50          = word ptr -50h
.text:000007F0 var_48          = dword ptr -48h
.text:000007F0 var_44          = dword ptr -44h
.text:000007F0 var_40          = dword ptr -40h
.text:000007F0 var_38          = dword ptr -38h
.text:000007F0 var_34          = word ptr -34h
.text:000007F0 var_2C          = dword ptr -2Ch
.text:000007F0 var_24          = dword ptr -24h
.text:000007F0 var_20          = word ptr -20h
.text:000007F0 var_18          = dword ptr -18h
.text:000007F0 var_14          = dword ptr -14h
.text:000007F0 var_10          = dword ptr -10h
.text:000007F0 var_C           = dword ptr -0Ch
.text:000007F0 var_8           = dword ptr -8
.text:000007F0 var_4           = dword ptr -4
.text:000007F0 arg_0           = dword ptr  8
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 sub     esp, 5Ch
.text:000007F6                 push    edi
.text:000007F7                 lea     edi, [ebp+var_5C]
.text:000007FA                 mov     ecx, 17h
.text:000007FF                 mov     eax, 0CCCCCCCCh
.text:00000804                 rep stosd
.text:00000806                 mov     eax, [ebp+arg_0]
.text:00000809                 mov     ecx, [eax]
.text:0000080B                 mov     edx, [ecx+4]
.text:0000080E                 mov     [ebp+var_14], edx
.text:00000811                 mov     eax, [ebp+arg_0]
.text:00000814                 mov     ecx, [eax+8]
.text:00000817                 mov     [ebp+var_18], ecx
.text:0000081A                 mov     edx, [ebp+var_18]
.text:0000081D                 mov     eax, [edx]
.text:0000081F                 mov     [ebp+var_24], eax
.text:00000822                 mov     cx, [edx+4]
.text:00000826                 mov     [ebp+var_20], cx
.text:0000082A                 jmp     short loc_835
.text:0000082C ; ---------------------------------------------------------------------------
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: Rescale(x)+62j
.text:0000082C                 mov     edx, [ebp+var_18]
.text:0000082F                 sub     edx, 6
.text:00000832                 mov     [ebp+var_18], edx
.text:00000835
.text:00000835 loc_835:                                ; CODE XREF: Rescale(x)+3Aj
.text:00000835                 mov     eax, [ebp+var_18]
.text:00000838                 cmp     eax, [ebp+var_14]
.text:0000083B                 jz      short loc_854
.text:0000083D                 mov     ecx, [ebp+var_18]
.text:00000840                 sub     ecx, 6
.text:00000843                 mov     edx, [ebp+var_18]
.text:00000846                 mov     eax, [ecx]
.text:00000848                 mov     [edx], eax
.text:0000084A                 mov     cx, [ecx+4]
.text:0000084E                 mov     [edx+4], cx
.text:00000852                 jmp     short loc_82C
.text:00000854 ; ---------------------------------------------------------------------------
.text:00000854
.text:00000854 loc_854:                                ; CODE XREF: Rescale(x)+4Bj
.text:00000854                 mov     edx, [ebp+var_18]
.text:00000857                 mov     eax, [ebp+var_24]
.text:0000085A                 mov     [edx], eax
.text:0000085C                 mov     cx, [ebp+var_20]
.text:00000860                 mov     [edx+4], cx
.text:00000864                 mov     edx, [ebp+arg_0]
.text:00000867                 mov     eax, [edx]
.text:00000869                 movzx   ecx, word ptr [eax+2]
.text:0000086D                 mov     edx, [ebp+var_18]
.text:00000870                 movzx   eax, byte ptr [edx+1]
.text:00000874                 sub     ecx, eax
.text:00000876                 mov     [ebp+var_10], ecx
.text:00000879                 mov     ecx, [ebp+var_18]
.text:0000087C                 movzx   edx, byte ptr [ecx+1]
.text:00000880                 add     edx, 4
.text:00000883                 mov     eax, [ebp+var_18]
.text:00000886                 mov     [eax+1], dl
.text:00000889                 mov     ecx, [ebp+arg_0]
.text:0000088C                 xor     edx, edx
.text:0000088E                 cmp     dword ptr [ecx+0Ch], 0
.text:00000892                 setnz   dl
.text:00000895                 mov     [ebp+var_8], edx
.text:00000898                 mov     eax, [ebp+var_18]
.text:0000089B                 movzx   ecx, byte ptr [eax+1]
.text:0000089F                 add     ecx, [ebp+var_8]
.text:000008A2                 shr     ecx, 1
.text:000008A4                 mov     edx, [ebp+var_18]
.text:000008A7                 mov     [edx+1], cl
.text:000008AA                 mov     eax, [ebp+var_18]
.text:000008AD                 movzx   ecx, byte ptr [eax+1]
.text:000008B1                 mov     [ebp+var_C], ecx
.text:000008B4                 mov     edx, [ebp+arg_0]
.text:000008B7                 mov     eax, [edx]
.text:000008B9                 movzx   ecx, word ptr [eax]
.text:000008BC                 sub     ecx, 1
.text:000008BF                 mov     [ebp+var_4], ecx
.text:000008C2
.text:000008C2 loc_8C2:                                ; CODE XREF: Rescale(x)+17Fj
.text:000008C2                 mov     edx, [ebp+var_18]
.text:000008C5                 add     edx, 6
.text:000008C8                 mov     [ebp+var_18], edx
.text:000008CB                 mov     eax, [ebp+var_18]
.text:000008CE                 movzx   ecx, byte ptr [eax+1]
.text:000008D2                 mov     edx, [ebp+var_10]
.text:000008D5                 sub     edx, ecx
.text:000008D7                 mov     [ebp+var_10], edx
.text:000008DA                 mov     eax, [ebp+var_18]
.text:000008DD                 movzx   ecx, byte ptr [eax+1]
.text:000008E1                 add     ecx, [ebp+var_8]
.text:000008E4                 shr     ecx, 1
.text:000008E6                 mov     edx, [ebp+var_18]
.text:000008E9                 mov     [edx+1], cl
.text:000008EC                 mov     eax, [ebp+var_18]
.text:000008EF                 movzx   ecx, byte ptr [eax+1]
.text:000008F3                 add     ecx, [ebp+var_C]
.text:000008F6                 mov     [ebp+var_C], ecx
.text:000008F9                 mov     edx, [ebp+var_18]
.text:000008FC                 movzx   eax, byte ptr [edx+1]
.text:00000900                 mov     ecx, [ebp+var_18]
.text:00000903                 movzx   edx, byte ptr [ecx-5]
.text:00000907                 cmp     eax, edx
.text:00000909                 jle     short loc_966
.text:0000090B                 mov     eax, [ebp+var_18]
.text:0000090E                 mov     [ebp+var_2C], eax
.text:00000911                 mov     ecx, [ebp+var_2C]
.text:00000914                 mov     edx, [ecx]
.text:00000916                 mov     [ebp+var_38], edx
.text:00000919                 mov     ax, [ecx+4]
.text:0000091D                 mov     [ebp+var_34], ax
.text:00000921
.text:00000921 loc_921:                                ; CODE XREF: Rescale(x)+164j
.text:00000921                 mov     ecx, [ebp+var_2C]
.text:00000924                 sub     ecx, 6
.text:00000927                 mov     edx, [ebp+var_2C]
.text:0000092A                 mov     eax, [ecx]
.text:0000092C                 mov     [edx], eax
.text:0000092E                 mov     cx, [ecx+4]
.text:00000932                 mov     [edx+4], cx
.text:00000936                 mov     edx, [ebp+var_2C]
.text:00000939                 sub     edx, 6
.text:0000093C                 mov     [ebp+var_2C], edx
.text:0000093F                 mov     eax, [ebp+var_2C]
.text:00000942                 cmp     eax, [ebp+var_14]
.text:00000945                 jz      short loc_956
.text:00000947                 movzx   ecx, byte ptr [ebp+var_38+1]
.text:0000094B                 mov     edx, [ebp+var_2C]
.text:0000094E                 movzx   eax, byte ptr [edx-5]
.text:00000952                 cmp     ecx, eax
.text:00000954                 jg      short loc_921
.text:00000956
.text:00000956 loc_956:                                ; CODE XREF: Rescale(x)+155j
.text:00000956                 mov     ecx, [ebp+var_2C]
.text:00000959                 mov     edx, [ebp+var_38]
.text:0000095C                 mov     [ecx], edx
.text:0000095E                 mov     ax, [ebp+var_34]
.text:00000962                 mov     [ecx+4], ax
.text:00000966
.text:00000966 loc_966:                                ; CODE XREF: Rescale(x)+119j
.text:00000966                 mov     ecx, [ebp+var_4]
.text:00000969                 sub     ecx, 1
.text:0000096C                 mov     [ebp+var_4], ecx
.text:0000096F                 jnz     loc_8C2
.text:00000975                 mov     edx, [ebp+var_18]
.text:00000978                 movzx   eax, byte ptr [edx+1]
.text:0000097C                 test    eax, eax
.text:0000097E                 jnz     loc_A86
.text:00000984                 mov     ecx, [ebp+arg_0]
.text:00000987                 mov     edx, [ecx]
.text:00000989                 movzx   eax, word ptr [edx]
.text:0000098C                 mov     [ebp+var_40], eax
.text:0000098F
.text:0000098F loc_98F:                                ; CODE XREF: Rescale(x)+1BAj
.text:0000098F                 mov     ecx, [ebp+var_4]
.text:00000992                 add     ecx, 1
.text:00000995                 mov     [ebp+var_4], ecx
.text:00000998                 mov     edx, [ebp+var_18]
.text:0000099B                 sub     edx, 6
.text:0000099E                 mov     [ebp+var_18], edx
.text:000009A1                 mov     eax, [ebp+var_18]
.text:000009A4                 movzx   ecx, byte ptr [eax+1]
.text:000009A8                 test    ecx, ecx
.text:000009AA                 jz      short loc_98F
.text:000009AC                 mov     edx, [ebp+var_10]
.text:000009AF                 add     edx, [ebp+var_4]
.text:000009B2                 mov     [ebp+var_10], edx
.text:000009B5                 mov     eax, [ebp+arg_0]
.text:000009B8                 mov     ecx, [eax]
.text:000009BA                 movzx   edx, word ptr [ecx]
.text:000009BD                 sub     edx, [ebp+var_4]
.text:000009C0                 mov     eax, [ebp+arg_0]
.text:000009C3                 mov     ecx, [eax]
.text:000009C5                 mov     [ecx], dx
.text:000009C8                 mov     edx, [ebp+arg_0]
.text:000009CB                 mov     eax, [edx]
.text:000009CD                 movzx   ecx, word ptr [eax]
.text:000009D0                 cmp     ecx, 1
.text:000009D3                 jnz     short loc_A46
.text:000009D5                 mov     edx, [ebp+var_14]
.text:000009D8                 mov     eax, [edx]
.text:000009DA                 mov     [ebp+var_54], eax
.text:000009DD                 mov     cx, [edx+4]
.text:000009E1                 mov     [ebp+var_50], cx
.text:000009E5
.text:000009E5 loc_9E5:                                ; CODE XREF: Rescale(x)+210j
.text:000009E5                 movzx   edx, byte ptr [ebp+var_54+1]
.text:000009E9                 movzx   eax, byte ptr [ebp+var_54+1]
.text:000009ED                 sar     eax, 1
.text:000009EF                 sub     edx, eax
.text:000009F1                 mov     byte ptr [ebp+var_54+1], dl
.text:000009F4                 mov     ecx, [ebp+var_10]
.text:000009F7                 shr     ecx, 1
.text:000009F9                 mov     [ebp+var_10], ecx
.text:000009FC                 cmp     [ebp+var_10], 1
.text:00000A00                 ja      short loc_9E5
.text:00000A02                 mov     edx, [ebp+var_40]
.text:00000A05                 add     edx, 1
.text:00000A08                 shr     edx, 1
.text:00000A0A                 mov     eax, [ebp+arg_0]
.text:00000A0D                 movzx   ecx, byte ptr [eax+edx+6Dh]
.text:00000A12                 push    ecx
.text:00000A13                 mov     edx, [ebp+var_14]
.text:00000A16                 push    edx
.text:00000A17                 mov     eax, [ebp+arg_0]
.text:00000A1A                 push    eax
.text:00000A1B                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000A20                 mov     ecx, [ebp+arg_0]
.text:00000A23                 mov     edx, [ecx]
.text:00000A25                 add     edx, 2
.text:00000A28                 mov     [ebp+var_5C], edx
.text:00000A2B                 mov     eax, [ebp+arg_0]
.text:00000A2E                 mov     ecx, [ebp+var_5C]
.text:00000A31                 mov     [eax+8], ecx
.text:00000A34                 mov     edx, [ebp+var_5C]
.text:00000A37                 mov     eax, [ebp+var_54]
.text:00000A3A                 mov     [edx], eax
.text:00000A3C                 mov     cx, [ebp+var_50]
.text:00000A40                 mov     [edx+4], cx
.text:00000A44                 jmp     short loc_AAA
.text:00000A46 ; ---------------------------------------------------------------------------
.text:00000A46
.text:00000A46 loc_A46:                                ; CODE XREF: Rescale(x)+1E3j
.text:00000A46                 mov     edx, [ebp+var_40]
.text:00000A49                 add     edx, 1
.text:00000A4C                 shr     edx, 1
.text:00000A4E                 mov     [ebp+var_44], edx
.text:00000A51                 mov     eax, [ebp+arg_0]
.text:00000A54                 mov     ecx, [eax]
.text:00000A56                 movzx   edx, word ptr [ecx]
.text:00000A59                 add     edx, 1
.text:00000A5C                 sar     edx, 1
.text:00000A5E                 mov     [ebp+var_48], edx
.text:00000A61                 mov     eax, [ebp+var_44]
.text:00000A64                 cmp     eax, [ebp+var_48]
.text:00000A67                 jz      short loc_A86
.text:00000A69                 mov     ecx, [ebp+var_48]
.text:00000A6C                 push    ecx
.text:00000A6D                 mov     edx, [ebp+var_44]
.text:00000A70                 push    edx
.text:00000A71                 mov     eax, [ebp+var_14]
.text:00000A74                 push    eax
.text:00000A75                 mov     ecx, [ebp+arg_0]
.text:00000A78                 push    ecx
.text:00000A79                 call    _ShrinkUnits@16 ; ShrinkUnits(x,x,x,x)
.text:00000A7E                 mov     edx, [ebp+arg_0]
.text:00000A81                 mov     ecx, [edx]
.text:00000A83                 mov     [ecx+4], eax
.text:00000A86
.text:00000A86 loc_A86:                                ; CODE XREF: Rescale(x)+18Ej
.text:00000A86                                         ; Rescale(x)+277j
.text:00000A86                 mov     edx, [ebp+var_C]
.text:00000A89                 add     edx, [ebp+var_10]
.text:00000A8C                 mov     eax, [ebp+var_10]
.text:00000A8F                 shr     eax, 1
.text:00000A91                 sub     edx, eax
.text:00000A93                 mov     ecx, [ebp+arg_0]
.text:00000A96                 mov     eax, [ecx]
.text:00000A98                 mov     [eax+2], dx
.text:00000A9C                 mov     ecx, [ebp+arg_0]
.text:00000A9F                 mov     edx, [ecx]
.text:00000AA1                 mov     eax, [ebp+arg_0]
.text:00000AA4                 mov     ecx, [edx+4]
.text:00000AA7                 mov     [eax+8], ecx
.text:00000AAA
.text:00000AAA loc_AAA:                                ; CODE XREF: Rescale(x)+254j
.text:00000AAA                 push    edx
.text:00000AAB                 mov     ecx, ebp
.text:00000AAD                 push    eax
.text:00000AAE                 lea     edx, $LN27
.text:00000AB4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AB9                 pop     eax
.text:00000ABA                 pop     edx
.text:00000ABB                 pop     edi
.text:00000ABC                 add     esp, 5Ch
.text:00000ABF                 cmp     ebp, esp
.text:00000AC1                 call    __RTC_CheckEsp
.text:00000AC6                 mov     esp, ebp
.text:00000AC8                 pop     ebp
.text:00000AC9                 retn    4
.text:00000AC9 _Rescale@4      endp
.text:00000AC9
.text:00000AC9 ; ---------------------------------------------------------------------------
.text:00000ACC $LN27           dd 3                    ; DATA XREF: Rescale(x)+2BEo
.text:00000AD0                 dd offset $LN26
.text:00000AD4 $LN26           dd 0FFFFFFDCh, 6        ; DATA XREF: .text:00000AD0o
.text:00000ADC                 dd offset $LN23
.text:00000AE0                 dd 0FFFFFFC8h, 6
.text:00000AE8                 dd offset $LN24
.text:00000AEC                 dd 0FFFFFFACh, 6
.text:00000AF4                 dd offset $LN25
.text:00000AF8 $LN25           dd 706D74h              ; DATA XREF: .text:00000AF4o
.text:00000AFC $LN24           dd 706D74h              ; DATA XREF: .text:00000AE8o
.text:00000B00 $LN23           dd 706D74h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000ADCo
.text:00000B10
.text:00000B10 ; =============== S U B R O U T I N E =======================================
.text:00000B10
.text:00000B10 ; Attributes: bp-based frame
.text:00000B10
.text:00000B10 ; __stdcall InsertNode(x, x, x)
.text:00000B10 _InsertNode@12  proc near               ; CODE XREF: Rescale(x)+22Bp
.text:00000B10                                         ; ShrinkUnits(x,x,x,x)+C4p ...
.text:00000B10
.text:00000B10 arg_0           = dword ptr  8
.text:00000B10 arg_4           = dword ptr  0Ch
.text:00000B10 arg_8           = dword ptr  10h
.text:00000B10
.text:00000B10                 push    ebp
.text:00000B11                 mov     ebp, esp
.text:00000B13                 mov     eax, [ebp+arg_4]
.text:00000B16                 mov     ecx, [ebp+arg_8]
.text:00000B19                 mov     edx, [ebp+arg_0]
.text:00000B1C                 mov     ecx, [edx+ecx*4+0F0h]
.text:00000B23                 mov     [eax], ecx
.text:00000B25                 mov     edx, [ebp+arg_8]
.text:00000B28                 mov     eax, [ebp+arg_0]
.text:00000B2B                 mov     ecx, [ebp+arg_4]
.text:00000B2E                 mov     [eax+edx*4+0F0h], ecx
.text:00000B35                 pop     ebp
.text:00000B36                 retn    0Ch
.text:00000B36 _InsertNode@12  endp
.text:00000B36
.text:00000B36 ; ---------------------------------------------------------------------------
.text:00000B39                 align 10h
.text:00000B40
.text:00000B40 ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40 ; Attributes: bp-based frame
.text:00000B40
.text:00000B40 ; __stdcall ShrinkUnits(x, x, x, x)
.text:00000B40 _ShrinkUnits@16 proc near               ; CODE XREF: Rescale(x)+289p
.text:00000B40
.text:00000B40 var_18          = dword ptr -18h
.text:00000B40 var_14          = dword ptr -14h
.text:00000B40 var_10          = dword ptr -10h
.text:00000B40 var_C           = dword ptr -0Ch
.text:00000B40 var_8           = dword ptr -8
.text:00000B40 var_4           = dword ptr -4
.text:00000B40 arg_0           = dword ptr  8
.text:00000B40 arg_4           = dword ptr  0Ch
.text:00000B40 arg_8           = dword ptr  10h
.text:00000B40 arg_C           = dword ptr  14h
.text:00000B40
.text:00000B40                 push    ebp
.text:00000B41                 mov     ebp, esp
.text:00000B43                 sub     esp, 18h
.text:00000B46                 mov     eax, 0CCCCCCCCh
.text:00000B4B                 mov     [ebp+var_18], eax
.text:00000B4E                 mov     [ebp+var_14], eax
.text:00000B51                 mov     [ebp+var_10], eax
.text:00000B54                 mov     [ebp+var_C], eax
.text:00000B57                 mov     [ebp+var_8], eax
.text:00000B5A                 mov     [ebp+var_4], eax
.text:00000B5D                 mov     eax, [ebp+arg_0]
.text:00000B60                 add     eax, [ebp+arg_8]
.text:00000B63                 movzx   ecx, byte ptr [eax+6Dh]
.text:00000B67                 mov     [ebp+var_4], ecx
.text:00000B6A                 mov     edx, [ebp+arg_0]
.text:00000B6D                 add     edx, [ebp+arg_C]
.text:00000B70                 movzx   eax, byte ptr [edx+6Dh]
.text:00000B74                 mov     [ebp+var_8], eax
.text:00000B77                 mov     ecx, [ebp+var_4]
.text:00000B7A                 cmp     ecx, [ebp+var_8]
.text:00000B7D                 jnz     short loc_B87
.text:00000B7F                 mov     eax, [ebp+arg_4]
.text:00000B82                 jmp     loc_C26
.text:00000B87 ; ---------------------------------------------------------------------------
.text:00000B87
.text:00000B87 loc_B87:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+3Dj
.text:00000B87                 mov     edx, [ebp+var_8]
.text:00000B8A                 mov     eax, [ebp+arg_0]
.text:00000B8D                 cmp     dword ptr [eax+edx*4+0F0h], 0
.text:00000B95                 jz      short loc_C0E
.text:00000B97                 mov     ecx, [ebp+var_8]
.text:00000B9A                 push    ecx
.text:00000B9B                 mov     edx, [ebp+arg_0]
.text:00000B9E                 push    edx
.text:00000B9F                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00000BA4                 mov     [ebp+var_C], eax
.text:00000BA7                 mov     eax, [ebp+var_C]
.text:00000BAA                 mov     [ebp+var_10], eax
.text:00000BAD                 mov     ecx, [ebp+arg_4]
.text:00000BB0                 mov     [ebp+var_14], ecx
.text:00000BB3                 mov     edx, [ebp+arg_C]
.text:00000BB6                 mov     [ebp+var_18], edx
.text:00000BB9
.text:00000BB9 loc_BB9:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+B6j
.text:00000BB9                 mov     eax, [ebp+var_10]
.text:00000BBC                 mov     ecx, [ebp+var_14]
.text:00000BBF                 mov     edx, [ecx]
.text:00000BC1                 mov     [eax], edx
.text:00000BC3                 mov     eax, [ebp+var_10]
.text:00000BC6                 mov     ecx, [ebp+var_14]
.text:00000BC9                 mov     edx, [ecx+4]
.text:00000BCC                 mov     [eax+4], edx
.text:00000BCF                 mov     eax, [ebp+var_10]
.text:00000BD2                 mov     ecx, [ebp+var_14]
.text:00000BD5                 mov     edx, [ecx+8]
.text:00000BD8                 mov     [eax+8], edx
.text:00000BDB                 mov     eax, [ebp+var_14]
.text:00000BDE                 add     eax, 0Ch
.text:00000BE1                 mov     [ebp+var_14], eax
.text:00000BE4                 mov     ecx, [ebp+var_10]
.text:00000BE7                 add     ecx, 0Ch
.text:00000BEA                 mov     [ebp+var_10], ecx
.text:00000BED                 mov     edx, [ebp+var_18]
.text:00000BF0                 sub     edx, 1
.text:00000BF3                 mov     [ebp+var_18], edx
.text:00000BF6                 jnz     short loc_BB9
.text:00000BF8                 mov     eax, [ebp+var_4]
.text:00000BFB                 push    eax
.text:00000BFC                 mov     ecx, [ebp+arg_4]
.text:00000BFF                 push    ecx
.text:00000C00                 mov     edx, [ebp+arg_0]
.text:00000C03                 push    edx
.text:00000C04                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000C09                 mov     eax, [ebp+var_C]
.text:00000C0C                 jmp     short loc_C26
.text:00000C0E ; ---------------------------------------------------------------------------
.text:00000C0E
.text:00000C0E loc_C0E:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+55j
.text:00000C0E                 mov     eax, [ebp+var_8]
.text:00000C11                 push    eax
.text:00000C12                 mov     ecx, [ebp+var_4]
.text:00000C15                 push    ecx
.text:00000C16                 mov     edx, [ebp+arg_4]
.text:00000C19                 push    edx
.text:00000C1A                 mov     eax, [ebp+arg_0]
.text:00000C1D                 push    eax
.text:00000C1E                 call    _SplitBlock@16  ; SplitBlock(x,x,x,x)
.text:00000C23                 mov     eax, [ebp+arg_4]
.text:00000C26
.text:00000C26 loc_C26:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+42j
.text:00000C26                                         ; ShrinkUnits(x,x,x,x)+CCj
.text:00000C26                 add     esp, 18h
.text:00000C29                 cmp     ebp, esp
.text:00000C2B                 call    __RTC_CheckEsp
.text:00000C30                 mov     esp, ebp
.text:00000C32                 pop     ebp
.text:00000C33                 retn    10h
.text:00000C33 _ShrinkUnits@16 endp
.text:00000C33
.text:00000C33 ; ---------------------------------------------------------------------------
.text:00000C36                 align 10h
.text:00000C40
.text:00000C40 ; =============== S U B R O U T I N E =======================================
.text:00000C40
.text:00000C40 ; Attributes: bp-based frame
.text:00000C40
.text:00000C40 ; __stdcall RemoveNode(x, x)
.text:00000C40 _RemoveNode@8   proc near               ; CODE XREF: ShrinkUnits(x,x,x,x)+5Fp
.text:00000C40                                         ; AllocUnits(x,x)+2Cp ...
.text:00000C40
.text:00000C40 var_4           = dword ptr -4
.text:00000C40 arg_0           = dword ptr  8
.text:00000C40 arg_4           = dword ptr  0Ch
.text:00000C40
.text:00000C40                 push    ebp
.text:00000C41                 mov     ebp, esp
.text:00000C43                 push    ecx
.text:00000C44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C4B                 mov     eax, [ebp+arg_4]
.text:00000C4E                 mov     ecx, [ebp+arg_0]
.text:00000C51                 mov     edx, [ecx+eax*4+0F0h]
.text:00000C58                 mov     [ebp+var_4], edx
.text:00000C5B                 mov     eax, [ebp+arg_4]
.text:00000C5E                 mov     ecx, [ebp+arg_0]
.text:00000C61                 mov     edx, [ebp+var_4]
.text:00000C64                 mov     edx, [edx]
.text:00000C66                 mov     [ecx+eax*4+0F0h], edx
.text:00000C6D                 mov     eax, [ebp+var_4]
.text:00000C70                 mov     esp, ebp
.text:00000C72                 pop     ebp
.text:00000C73                 retn    8
.text:00000C73 _RemoveNode@8   endp
.text:00000C73
.text:00000C73 ; ---------------------------------------------------------------------------
.text:00000C76                 align 10h
.text:00000C80
.text:00000C80 ; =============== S U B R O U T I N E =======================================
.text:00000C80
.text:00000C80 ; Attributes: bp-based frame
.text:00000C80
.text:00000C80 ; __stdcall SplitBlock(x, x, x, x)
.text:00000C80 _SplitBlock@16  proc near               ; CODE XREF: ShrinkUnits(x,x,x,x)+DEp
.text:00000C80                                         ; AllocUnitsRare(x,x)+ECp
.text:00000C80
.text:00000C80 var_C           = dword ptr -0Ch
.text:00000C80 var_8           = dword ptr -8
.text:00000C80 var_4           = dword ptr -4
.text:00000C80 arg_0           = dword ptr  8
.text:00000C80 arg_4           = dword ptr  0Ch
.text:00000C80 arg_8           = dword ptr  10h
.text:00000C80 arg_C           = dword ptr  14h
.text:00000C80
.text:00000C80                 push    ebp
.text:00000C81                 mov     ebp, esp
.text:00000C83                 sub     esp, 0Ch
.text:00000C86                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000C8D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9B                 mov     eax, [ebp+arg_0]
.text:00000C9E                 add     eax, [ebp+arg_8]
.text:00000CA1                 movzx   ecx, byte ptr [eax+48h]
.text:00000CA5                 mov     edx, [ebp+arg_0]
.text:00000CA8                 add     edx, [ebp+arg_C]
.text:00000CAB                 movzx   eax, byte ptr [edx+48h]
.text:00000CAF                 sub     ecx, eax
.text:00000CB1                 mov     [ebp+var_8], ecx
.text:00000CB4                 mov     ecx, [ebp+arg_0]
.text:00000CB7                 add     ecx, [ebp+arg_C]
.text:00000CBA                 movzx   edx, byte ptr [ecx+48h]
.text:00000CBE                 imul    edx, 0Ch
.text:00000CC1                 add     edx, [ebp+arg_4]
.text:00000CC4                 mov     [ebp+arg_4], edx
.text:00000CC7                 mov     eax, [ebp+arg_0]
.text:00000CCA                 add     eax, [ebp+var_8]
.text:00000CCD                 movzx   ecx, byte ptr [eax+6Dh]
.text:00000CD1                 mov     [ebp+var_4], ecx
.text:00000CD4                 mov     edx, [ebp+arg_0]
.text:00000CD7                 add     edx, [ebp+var_4]
.text:00000CDA                 movzx   eax, byte ptr [edx+48h]
.text:00000CDE                 cmp     eax, [ebp+var_8]
.text:00000CE1                 jz      short loc_D16
.text:00000CE3                 mov     ecx, [ebp+var_4]
.text:00000CE6                 sub     ecx, 1
.text:00000CE9                 mov     [ebp+var_4], ecx
.text:00000CEC                 mov     edx, [ebp+arg_0]
.text:00000CEF                 add     edx, [ebp+var_4]
.text:00000CF2                 movzx   eax, byte ptr [edx+48h]
.text:00000CF6                 mov     [ebp+var_C], eax
.text:00000CF9                 mov     ecx, [ebp+var_8]
.text:00000CFC                 sub     ecx, [ebp+var_C]
.text:00000CFF                 sub     ecx, 1
.text:00000D02                 push    ecx
.text:00000D03                 mov     edx, [ebp+var_C]
.text:00000D06                 imul    edx, 0Ch
.text:00000D09                 add     edx, [ebp+arg_4]
.text:00000D0C                 push    edx
.text:00000D0D                 mov     eax, [ebp+arg_0]
.text:00000D10                 push    eax
.text:00000D11                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000D16
.text:00000D16 loc_D16:                                ; CODE XREF: SplitBlock(x,x,x,x)+61j
.text:00000D16                 mov     ecx, [ebp+var_4]
.text:00000D19                 push    ecx
.text:00000D1A                 mov     edx, [ebp+arg_4]
.text:00000D1D                 push    edx
.text:00000D1E                 mov     eax, [ebp+arg_0]
.text:00000D21                 push    eax
.text:00000D22                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000D27                 add     esp, 0Ch
.text:00000D2A                 cmp     ebp, esp
.text:00000D2C                 call    __RTC_CheckEsp
.text:00000D31                 mov     esp, ebp
.text:00000D33                 pop     ebp
.text:00000D34                 retn    10h
.text:00000D34 _SplitBlock@16  endp
.text:00000D34
.text:00000D34 ; ---------------------------------------------------------------------------
.text:00000D37                 align 10h
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; __stdcall NextContext(x)
.text:00000D40 _NextContext@4  proc near               ; CODE XREF: Ppmd7_Update1(x)+86p
.text:00000D40                                         ; Ppmd7_Update1_0(x)+86p ...
.text:00000D40
.text:00000D40 var_4           = dword ptr -4
.text:00000D40 arg_0           = dword ptr  8
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 push    ecx
.text:00000D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D4B                 mov     eax, [ebp+arg_0]
.text:00000D4E                 mov     ecx, [eax+8]
.text:00000D51                 movzx   edx, word ptr [ecx+2]
.text:00000D55                 mov     eax, [ebp+arg_0]
.text:00000D58                 mov     ecx, [eax+8]
.text:00000D5B                 movzx   eax, word ptr [ecx+4]
.text:00000D5F                 shl     eax, 10h
.text:00000D62                 or      edx, eax
.text:00000D64                 mov     [ebp+var_4], edx
.text:00000D67                 mov     ecx, [ebp+arg_0]
.text:00000D6A                 cmp     dword ptr [ecx+0Ch], 0
.text:00000D6E                 jnz     short loc_D8E
.text:00000D70                 mov     edx, [ebp+arg_0]
.text:00000D73                 mov     eax, [ebp+var_4]
.text:00000D76                 cmp     eax, [edx+3Ch]
.text:00000D79                 jbe     short loc_D8E
.text:00000D7B                 mov     ecx, [ebp+arg_0]
.text:00000D7E                 mov     edx, [ebp+var_4]
.text:00000D81                 mov     [ecx+4], edx
.text:00000D84                 mov     eax, [ebp+arg_0]
.text:00000D87                 mov     ecx, [ebp+var_4]
.text:00000D8A                 mov     [eax], ecx
.text:00000D8C                 jmp     short loc_D97
.text:00000D8E ; ---------------------------------------------------------------------------
.text:00000D8E
.text:00000D8E loc_D8E:                                ; CODE XREF: NextContext(x)+2Ej
.text:00000D8E                                         ; NextContext(x)+39j
.text:00000D8E                 mov     edx, [ebp+arg_0]
.text:00000D91                 push    edx
.text:00000D92                 call    _UpdateModel@4  ; UpdateModel(x)
.text:00000D97
.text:00000D97 loc_D97:                                ; CODE XREF: NextContext(x)+4Cj
.text:00000D97                 add     esp, 4
.text:00000D9A                 cmp     ebp, esp
.text:00000D9C                 call    __RTC_CheckEsp
.text:00000DA1                 mov     esp, ebp
.text:00000DA3                 pop     ebp
.text:00000DA4                 retn    4
.text:00000DA4 _NextContext@4  endp
.text:00000DA4
.text:00000DA4 ; ---------------------------------------------------------------------------
.text:00000DA7                 align 10h
.text:00000DB0
.text:00000DB0 ; =============== S U B R O U T I N E =======================================
.text:00000DB0
.text:00000DB0 ; Attributes: bp-based frame
.text:00000DB0
.text:00000DB0 ; __stdcall UpdateModel(x)
.text:00000DB0 _UpdateModel@4  proc near               ; CODE XREF: NextContext(x)+52p
.text:00000DB0                                         ; Ppmd7_Update2(x)+5Ep
.text:00000DB0
.text:00000DB0 var_58          = dword ptr -58h
.text:00000DB0 var_54          = dword ptr -54h
.text:00000DB0 var_50          = dword ptr -50h
.text:00000DB0 var_4C          = dword ptr -4Ch
.text:00000DB0 var_48          = dword ptr -48h
.text:00000DB0 var_44          = dword ptr -44h
.text:00000DB0 var_40          = dword ptr -40h
.text:00000DB0 var_3C          = dword ptr -3Ch
.text:00000DB0 var_38          = dword ptr -38h
.text:00000DB0 var_34          = dword ptr -34h
.text:00000DB0 var_30          = dword ptr -30h
.text:00000DB0 var_2C          = dword ptr -2Ch
.text:00000DB0 var_28          = dword ptr -28h
.text:00000DB0 var_24          = dword ptr -24h
.text:00000DB0 var_20          = dword ptr -20h
.text:00000DB0 var_1C          = dword ptr -1Ch
.text:00000DB0 var_18          = dword ptr -18h
.text:00000DB0 var_14          = dword ptr -14h
.text:00000DB0 var_10          = dword ptr -10h
.text:00000DB0 var_C           = dword ptr -0Ch
.text:00000DB0 var_8           = dword ptr -8
.text:00000DB0 var_4           = dword ptr -4
.text:00000DB0 arg_0           = dword ptr  8
.text:00000DB0
.text:00000DB0                 push    ebp
.text:00000DB1                 mov     ebp, esp
.text:00000DB3                 sub     esp, 58h
.text:00000DB6                 push    esi
.text:00000DB7                 push    edi
.text:00000DB8                 lea     edi, [ebp+var_58]
.text:00000DBB                 mov     ecx, 16h
.text:00000DC0                 mov     eax, 0CCCCCCCCh
.text:00000DC5                 rep stosd
.text:00000DC7                 mov     eax, [ebp+arg_0]
.text:00000DCA                 mov     ecx, [eax+8]
.text:00000DCD                 movzx   edx, word ptr [ecx+2]
.text:00000DD1                 mov     eax, [ebp+arg_0]
.text:00000DD4                 mov     ecx, [eax+8]
.text:00000DD7                 movzx   eax, word ptr [ecx+4]
.text:00000DDB                 shl     eax, 10h
.text:00000DDE                 or      edx, eax
.text:00000DE0                 mov     [ebp+var_8], edx
.text:00000DE3                 mov     ecx, [ebp+arg_0]
.text:00000DE6                 mov     edx, [ecx+8]
.text:00000DE9                 movzx   eax, byte ptr [edx+1]
.text:00000DED                 cmp     eax, 1Fh
.text:00000DF0                 jge     loc_ED3
.text:00000DF6                 mov     ecx, [ebp+arg_0]
.text:00000DF9                 mov     edx, [ecx]
.text:00000DFB                 cmp     dword ptr [edx+8], 0
.text:00000DFF                 jz      loc_ED3
.text:00000E05                 mov     eax, [ebp+arg_0]
.text:00000E08                 mov     ecx, [eax]
.text:00000E0A                 mov     edx, [ecx+8]
.text:00000E0D                 mov     [ebp+var_C], edx
.text:00000E10                 mov     eax, [ebp+var_C]
.text:00000E13                 movzx   ecx, word ptr [eax]
.text:00000E16                 cmp     ecx, 1
.text:00000E19                 jnz     short loc_E43
.text:00000E1B                 mov     edx, [ebp+var_C]
.text:00000E1E                 add     edx, 2
.text:00000E21                 mov     [ebp+var_18], edx
.text:00000E24                 mov     eax, [ebp+var_18]
.text:00000E27                 movzx   ecx, byte ptr [eax+1]
.text:00000E2B                 cmp     ecx, 20h ; ' '
.text:00000E2E                 jge     short loc_E3E
.text:00000E30                 mov     edx, [ebp+var_18]
.text:00000E33                 mov     al, [edx+1]
.text:00000E36                 add     al, 1
.text:00000E38                 mov     ecx, [ebp+var_18]
.text:00000E3B                 mov     [ecx+1], al
.text:00000E3E
.text:00000E3E loc_E3E:                                ; CODE XREF: UpdateModel(x)+7Ej
.text:00000E3E                 jmp     loc_ED3
.text:00000E43 ; ---------------------------------------------------------------------------
.text:00000E43
.text:00000E43 loc_E43:                                ; CODE XREF: UpdateModel(x)+69j
.text:00000E43                 mov     edx, [ebp+var_C]
.text:00000E46                 mov     eax, [edx+4]
.text:00000E49                 mov     [ebp+var_1C], eax
.text:00000E4C                 mov     ecx, [ebp+var_1C]
.text:00000E4F                 movzx   edx, byte ptr [ecx]
.text:00000E52                 mov     eax, [ebp+arg_0]
.text:00000E55                 mov     ecx, [eax+8]
.text:00000E58                 movzx   eax, byte ptr [ecx]
.text:00000E5B                 cmp     edx, eax
.text:00000E5D                 jz      short loc_EA6
.text:00000E5F
.text:00000E5F loc_E5F:                                ; CODE XREF: UpdateModel(x)+C9j
.text:00000E5F                 mov     ecx, [ebp+var_1C]
.text:00000E62                 add     ecx, 6
.text:00000E65                 mov     [ebp+var_1C], ecx
.text:00000E68                 mov     edx, [ebp+var_1C]
.text:00000E6B                 movzx   eax, byte ptr [edx]
.text:00000E6E                 mov     ecx, [ebp+arg_0]
.text:00000E71                 mov     edx, [ecx+8]
.text:00000E74                 movzx   ecx, byte ptr [edx]
.text:00000E77                 cmp     eax, ecx
.text:00000E79                 jnz     short loc_E5F
.text:00000E7B                 mov     edx, [ebp+var_1C]
.text:00000E7E                 movzx   eax, byte ptr [edx+1]
.text:00000E82                 mov     ecx, [ebp+var_1C]
.text:00000E85                 movzx   edx, byte ptr [ecx-5]
.text:00000E89                 cmp     eax, edx
.text:00000E8B                 jl      short loc_EA6
.text:00000E8D                 mov     eax, [ebp+var_1C]
.text:00000E90                 sub     eax, 6
.text:00000E93                 push    eax
.text:00000E94                 mov     ecx, [ebp+var_1C]
.text:00000E97                 push    ecx
.text:00000E98                 call    _SwapStates@8   ; SwapStates(x,x)
.text:00000E9D                 mov     edx, [ebp+var_1C]
.text:00000EA0                 sub     edx, 6
.text:00000EA3                 mov     [ebp+var_1C], edx
.text:00000EA6
.text:00000EA6 loc_EA6:                                ; CODE XREF: UpdateModel(x)+ADj
.text:00000EA6                                         ; UpdateModel(x)+DBj
.text:00000EA6                 mov     eax, [ebp+var_1C]
.text:00000EA9                 movzx   ecx, byte ptr [eax+1]
.text:00000EAD                 cmp     ecx, 73h ; 's'
.text:00000EB0                 jge     short loc_ED3
.text:00000EB2                 mov     edx, [ebp+var_1C]
.text:00000EB5                 movzx   eax, byte ptr [edx+1]
.text:00000EB9                 add     eax, 2
.text:00000EBC                 mov     ecx, [ebp+var_1C]
.text:00000EBF                 mov     [ecx+1], al
.text:00000EC2                 mov     edx, [ebp+var_C]
.text:00000EC5                 movzx   eax, word ptr [edx+2]
.text:00000EC9                 add     eax, 2
.text:00000ECC                 mov     ecx, [ebp+var_C]
.text:00000ECF                 mov     [ecx+2], ax
.text:00000ED3
.text:00000ED3 loc_ED3:                                ; CODE XREF: UpdateModel(x)+40j
.text:00000ED3                                         ; UpdateModel(x)+4Fj ...
.text:00000ED3                 mov     edx, [ebp+arg_0]
.text:00000ED6                 cmp     dword ptr [edx+0Ch], 0
.text:00000EDA                 jnz     short loc_F28
.text:00000EDC                 push    1
.text:00000EDE                 mov     eax, [ebp+arg_0]
.text:00000EE1                 push    eax
.text:00000EE2                 call    _CreateSuccessors@8 ; CreateSuccessors(x,x)
.text:00000EE7                 mov     [ebp+var_54], eax
.text:00000EEA                 mov     ecx, [ebp+arg_0]
.text:00000EED                 mov     edx, [ebp+var_54]
.text:00000EF0                 mov     [ecx+4], edx
.text:00000EF3                 mov     eax, [ebp+arg_0]
.text:00000EF6                 mov     ecx, [ebp+var_54]
.text:00000EF9                 mov     [eax], ecx
.text:00000EFB                 mov     edx, [ebp+arg_0]
.text:00000EFE                 cmp     dword ptr [edx], 0
.text:00000F01                 jnz     short loc_F11
.text:00000F03                 mov     eax, [ebp+arg_0]
.text:00000F06                 push    eax
.text:00000F07                 call    _RestartModel@4 ; RestartModel(x)
.text:00000F0C                 jmp     loc_12F3
.text:00000F11 ; ---------------------------------------------------------------------------
.text:00000F11
.text:00000F11 loc_F11:                                ; CODE XREF: UpdateModel(x)+151j
.text:00000F11                 mov     ecx, [ebp+arg_0]
.text:00000F14                 mov     edx, [ecx]
.text:00000F16                 push    edx
.text:00000F17                 mov     eax, [ebp+arg_0]
.text:00000F1A                 mov     ecx, [eax+8]
.text:00000F1D                 push    ecx
.text:00000F1E                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00000F23                 jmp     loc_12F3
.text:00000F28 ; ---------------------------------------------------------------------------
.text:00000F28
.text:00000F28 loc_F28:                                ; CODE XREF: UpdateModel(x)+12Aj
.text:00000F28                 mov     edx, [ebp+arg_0]
.text:00000F2B                 mov     eax, [edx+8]
.text:00000F2E                 mov     ecx, [ebp+arg_0]
.text:00000F31                 mov     edx, [ecx+3Ch]
.text:00000F34                 mov     al, [eax]
.text:00000F36                 mov     [edx], al
.text:00000F38                 mov     ecx, [ebp+arg_0]
.text:00000F3B                 mov     edx, [ecx+3Ch]
.text:00000F3E                 add     edx, 1
.text:00000F41                 mov     eax, [ebp+arg_0]
.text:00000F44                 mov     [eax+3Ch], edx
.text:00000F47                 mov     ecx, [ebp+arg_0]
.text:00000F4A                 mov     edx, [ecx+3Ch]
.text:00000F4D                 mov     [ebp+var_4], edx
.text:00000F50                 mov     eax, [ebp+arg_0]
.text:00000F53                 mov     ecx, [ebp+arg_0]
.text:00000F56                 mov     edx, [eax+3Ch]
.text:00000F59                 cmp     edx, [ecx+40h]
.text:00000F5C                 jb      short loc_F6C
.text:00000F5E                 mov     eax, [ebp+arg_0]
.text:00000F61                 push    eax
.text:00000F62                 call    _RestartModel@4 ; RestartModel(x)
.text:00000F67                 jmp     loc_12F3
.text:00000F6C ; ---------------------------------------------------------------------------
.text:00000F6C
.text:00000F6C loc_F6C:                                ; CODE XREF: UpdateModel(x)+1ACj
.text:00000F6C                 cmp     [ebp+var_8], 0
.text:00000F70                 jz      short loc_FE3
.text:00000F72                 mov     ecx, [ebp+var_8]
.text:00000F75                 cmp     ecx, [ebp+var_4]
.text:00000F78                 ja      short loc_FA2
.text:00000F7A                 push    0
.text:00000F7C                 mov     edx, [ebp+arg_0]
.text:00000F7F                 push    edx
.text:00000F80                 call    _CreateSuccessors@8 ; CreateSuccessors(x,x)
.text:00000F85                 mov     [ebp+var_20], eax
.text:00000F88                 cmp     [ebp+var_20], 0
.text:00000F8C                 jnz     short loc_F9C
.text:00000F8E                 mov     eax, [ebp+arg_0]
.text:00000F91                 push    eax
.text:00000F92                 call    _RestartModel@4 ; RestartModel(x)
.text:00000F97                 jmp     loc_12F3
.text:00000F9C ; ---------------------------------------------------------------------------
.text:00000F9C
.text:00000F9C loc_F9C:                                ; CODE XREF: UpdateModel(x)+1DCj
.text:00000F9C                 mov     ecx, [ebp+var_20]
.text:00000F9F                 mov     [ebp+var_8], ecx
.text:00000FA2
.text:00000FA2 loc_FA2:                                ; CODE XREF: UpdateModel(x)+1C8j
.text:00000FA2                 mov     edx, [ebp+arg_0]
.text:00000FA5                 mov     eax, [edx+0Ch]
.text:00000FA8                 sub     eax, 1
.text:00000FAB                 mov     [ebp+var_58], eax
.text:00000FAE                 mov     ecx, [ebp+arg_0]
.text:00000FB1                 mov     edx, [ebp+var_58]
.text:00000FB4                 mov     [ecx+0Ch], edx
.text:00000FB7                 cmp     [ebp+var_58], 0
.text:00000FBB                 jnz     short loc_FE1
.text:00000FBD                 mov     eax, [ebp+var_8]
.text:00000FC0                 mov     [ebp+var_4], eax
.text:00000FC3                 mov     ecx, [ebp+arg_0]
.text:00000FC6                 mov     edx, [ebp+arg_0]
.text:00000FC9                 mov     eax, [ecx+4]
.text:00000FCC                 xor     ecx, ecx
.text:00000FCE                 cmp     eax, [edx]
.text:00000FD0                 setnz   cl
.text:00000FD3                 mov     edx, [ebp+arg_0]
.text:00000FD6                 mov     eax, [edx+3Ch]
.text:00000FD9                 sub     eax, ecx
.text:00000FDB                 mov     ecx, [ebp+arg_0]
.text:00000FDE                 mov     [ecx+3Ch], eax
.text:00000FE1
.text:00000FE1 loc_FE1:                                ; CODE XREF: UpdateModel(x)+20Bj
.text:00000FE1                 jmp     short loc_FFB
.text:00000FE3 ; ---------------------------------------------------------------------------
.text:00000FE3
.text:00000FE3 loc_FE3:                                ; CODE XREF: UpdateModel(x)+1C0j
.text:00000FE3                 mov     edx, [ebp+var_4]
.text:00000FE6                 push    edx
.text:00000FE7                 mov     eax, [ebp+arg_0]
.text:00000FEA                 mov     ecx, [eax+8]
.text:00000FED                 push    ecx
.text:00000FEE                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00000FF3                 mov     edx, [ebp+arg_0]
.text:00000FF6                 mov     eax, [edx]
.text:00000FF8                 mov     [ebp+var_8], eax
.text:00000FFB
.text:00000FFB loc_FFB:                                ; CODE XREF: UpdateModel(x):loc_FE1j
.text:00000FFB                 mov     ecx, [ebp+arg_0]
.text:00000FFE                 mov     edx, [ecx]
.text:00001000                 movzx   eax, word ptr [edx]
.text:00001003                 mov     [ebp+var_14], eax
.text:00001006                 mov     ecx, [ebp+arg_0]
.text:00001009                 mov     edx, [ecx+8]
.text:0000100C                 movzx   eax, byte ptr [edx+1]
.text:00001010                 sub     eax, 1
.text:00001013                 mov     ecx, [ebp+arg_0]
.text:00001016                 mov     edx, [ecx]
.text:00001018                 movzx   ecx, word ptr [edx+2]
.text:0000101C                 sub     ecx, [ebp+var_14]
.text:0000101F                 sub     ecx, eax
.text:00001021                 mov     [ebp+var_10], ecx
.text:00001024                 mov     edx, [ebp+arg_0]
.text:00001027                 mov     eax, [edx+4]
.text:0000102A                 mov     [ebp+var_C], eax
.text:0000102D                 jmp     short loc_1038
.text:0000102F ; ---------------------------------------------------------------------------
.text:0000102F
.text:0000102F loc_102F:                               ; CODE XREF: UpdateModel(x)+52Dj
.text:0000102F                 mov     ecx, [ebp+var_C]
.text:00001032                 mov     edx, [ecx+8]
.text:00001035                 mov     [ebp+var_C], edx
.text:00001038
.text:00001038 loc_1038:                               ; CODE XREF: UpdateModel(x)+27Dj
.text:00001038                 mov     eax, [ebp+arg_0]
.text:0000103B                 mov     ecx, [ebp+var_C]
.text:0000103E                 cmp     ecx, [eax]
.text:00001040                 jz      loc_12E2
.text:00001046                 mov     edx, [ebp+var_C]
.text:00001049                 movzx   eax, word ptr [edx]
.text:0000104C                 mov     [ebp+var_24], eax
.text:0000104F                 cmp     [ebp+var_24], 1
.text:00001053                 jz      loc_1170
.text:00001059                 mov     ecx, [ebp+var_24]
.text:0000105C                 and     ecx, 1
.text:0000105F                 jnz     loc_1128
.text:00001065                 mov     edx, [ebp+var_24]
.text:00001068                 shr     edx, 1
.text:0000106A                 mov     [ebp+var_30], edx
.text:0000106D                 mov     eax, [ebp+arg_0]
.text:00001070                 add     eax, [ebp+var_30]
.text:00001073                 movzx   ecx, byte ptr [eax+6Dh]
.text:00001077                 mov     [ebp+var_34], ecx
.text:0000107A                 mov     edx, [ebp+arg_0]
.text:0000107D                 add     edx, [ebp+var_30]
.text:00001080                 movzx   eax, byte ptr [edx+6Eh]
.text:00001084                 cmp     [ebp+var_34], eax
.text:00001087                 jz      loc_1128
.text:0000108D                 mov     ecx, [ebp+var_34]
.text:00001090                 add     ecx, 1
.text:00001093                 push    ecx
.text:00001094                 mov     edx, [ebp+arg_0]
.text:00001097                 push    edx
.text:00001098                 call    _AllocUnits@8   ; AllocUnits(x,x)
.text:0000109D                 mov     [ebp+var_38], eax
.text:000010A0                 cmp     [ebp+var_38], 0
.text:000010A4                 jnz     short loc_10B4
.text:000010A6                 mov     eax, [ebp+arg_0]
.text:000010A9                 push    eax
.text:000010AA                 call    _RestartModel@4 ; RestartModel(x)
.text:000010AF                 jmp     loc_12F3
.text:000010B4 ; ---------------------------------------------------------------------------
.text:000010B4
.text:000010B4 loc_10B4:                               ; CODE XREF: UpdateModel(x)+2F4j
.text:000010B4                 mov     ecx, [ebp+var_C]
.text:000010B7                 mov     edx, [ecx+4]
.text:000010BA                 mov     [ebp+var_3C], edx
.text:000010BD                 mov     eax, [ebp+var_38]
.text:000010C0                 mov     [ebp+var_40], eax
.text:000010C3                 mov     ecx, [ebp+var_3C]
.text:000010C6                 mov     [ebp+var_44], ecx
.text:000010C9                 mov     edx, [ebp+var_30]
.text:000010CC                 mov     [ebp+var_48], edx
.text:000010CF
.text:000010CF loc_10CF:                               ; CODE XREF: UpdateModel(x)+35Cj
.text:000010CF                 mov     eax, [ebp+var_40]
.text:000010D2                 mov     ecx, [ebp+var_44]
.text:000010D5                 mov     edx, [ecx]
.text:000010D7                 mov     [eax], edx
.text:000010D9                 mov     eax, [ebp+var_40]
.text:000010DC                 mov     ecx, [ebp+var_44]
.text:000010DF                 mov     edx, [ecx+4]
.text:000010E2                 mov     [eax+4], edx
.text:000010E5                 mov     eax, [ebp+var_40]
.text:000010E8                 mov     ecx, [ebp+var_44]
.text:000010EB                 mov     edx, [ecx+8]
.text:000010EE                 mov     [eax+8], edx
.text:000010F1                 mov     eax, [ebp+var_44]
.text:000010F4                 add     eax, 0Ch
.text:000010F7                 mov     [ebp+var_44], eax
.text:000010FA                 mov     ecx, [ebp+var_40]
.text:000010FD                 add     ecx, 0Ch
.text:00001100                 mov     [ebp+var_40], ecx
.text:00001103                 mov     edx, [ebp+var_48]
.text:00001106                 sub     edx, 1
.text:00001109                 mov     [ebp+var_48], edx
.text:0000110C                 jnz     short loc_10CF
.text:0000110E                 mov     eax, [ebp+var_34]
.text:00001111                 push    eax
.text:00001112                 mov     ecx, [ebp+var_3C]
.text:00001115                 push    ecx
.text:00001116                 mov     edx, [ebp+arg_0]
.text:00001119                 push    edx
.text:0000111A                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:0000111F                 mov     eax, [ebp+var_C]
.text:00001122                 mov     ecx, [ebp+var_38]
.text:00001125                 mov     [eax+4], ecx
.text:00001128
.text:00001128 loc_1128:                               ; CODE XREF: UpdateModel(x)+2AFj
.text:00001128                                         ; UpdateModel(x)+2D7j
.text:00001128                 mov     edx, [ebp+var_C]
.text:0000112B                 movzx   eax, word ptr [edx+2]
.text:0000112F                 mov     ecx, [ebp+var_24]
.text:00001132                 shl     ecx, 1
.text:00001134                 cmp     ecx, [ebp+var_14]
.text:00001137                 sbb     edx, edx
.text:00001139                 neg     edx
.text:0000113B                 add     eax, edx
.text:0000113D                 mov     ecx, [ebp+var_24]
.text:00001140                 shl     ecx, 2
.text:00001143                 cmp     [ebp+var_14], ecx
.text:00001146                 sbb     edx, edx
.text:00001148                 add     edx, 1
.text:0000114B                 mov     ecx, [ebp+var_C]
.text:0000114E                 movzx   ecx, word ptr [ecx+2]
.text:00001152                 mov     esi, [ebp+var_24]
.text:00001155                 shl     esi, 3
.text:00001158                 cmp     esi, ecx
.text:0000115A                 sbb     ecx, ecx
.text:0000115C                 add     ecx, 1
.text:0000115F                 and     edx, ecx
.text:00001161                 lea     edx, [eax+edx*2]
.text:00001164                 mov     eax, [ebp+var_C]
.text:00001167                 mov     [eax+2], dx
.text:0000116B                 jmp     loc_11F5
.text:00001170 ; ---------------------------------------------------------------------------
.text:00001170
.text:00001170 loc_1170:                               ; CODE XREF: UpdateModel(x)+2A3j
.text:00001170                 push    0
.text:00001172                 mov     ecx, [ebp+arg_0]
.text:00001175                 push    ecx
.text:00001176                 call    _AllocUnits@8   ; AllocUnits(x,x)
.text:0000117B                 mov     [ebp+var_4C], eax
.text:0000117E                 cmp     [ebp+var_4C], 0
.text:00001182                 jnz     short loc_1192
.text:00001184                 mov     edx, [ebp+arg_0]
.text:00001187                 push    edx
.text:00001188                 call    _RestartModel@4 ; RestartModel(x)
.text:0000118D                 jmp     loc_12F3
.text:00001192 ; ---------------------------------------------------------------------------
.text:00001192
.text:00001192 loc_1192:                               ; CODE XREF: UpdateModel(x)+3D2j
.text:00001192                 mov     eax, [ebp+var_C]
.text:00001195                 add     eax, 2
.text:00001198                 mov     ecx, [ebp+var_4C]
.text:0000119B                 mov     edx, [eax]
.text:0000119D                 mov     [ecx], edx
.text:0000119F                 mov     ax, [eax+4]
.text:000011A3                 mov     [ecx+4], ax
.text:000011A7                 mov     ecx, [ebp+var_C]
.text:000011AA                 mov     edx, [ebp+var_4C]
.text:000011AD                 mov     [ecx+4], edx
.text:000011B0                 mov     eax, [ebp+var_4C]
.text:000011B3                 movzx   ecx, byte ptr [eax+1]
.text:000011B7                 cmp     ecx, 1Eh
.text:000011BA                 jge     short loc_11CC
.text:000011BC                 mov     edx, [ebp+var_4C]
.text:000011BF                 mov     al, [edx+1]
.text:000011C2                 shl     al, 1
.text:000011C4                 mov     ecx, [ebp+var_4C]
.text:000011C7                 mov     [ecx+1], al
.text:000011CA                 jmp     short loc_11D3
.text:000011CC ; ---------------------------------------------------------------------------
.text:000011CC
.text:000011CC loc_11CC:                               ; CODE XREF: UpdateModel(x)+40Aj
.text:000011CC                 mov     edx, [ebp+var_4C]
.text:000011CF                 mov     byte ptr [edx+1], 78h ; 'x'
.text:000011D3
.text:000011D3 loc_11D3:                               ; CODE XREF: UpdateModel(x)+41Aj
.text:000011D3                 mov     eax, [ebp+var_4C]
.text:000011D6                 movzx   ecx, byte ptr [eax+1]
.text:000011DA                 mov     edx, [ebp+arg_0]
.text:000011DD                 add     ecx, [edx+10h]
.text:000011E0                 mov     eax, 3
.text:000011E5                 cmp     eax, [ebp+var_14]
.text:000011E8                 sbb     edx, edx
.text:000011EA                 neg     edx
.text:000011EC                 add     ecx, edx
.text:000011EE                 mov     eax, [ebp+var_C]
.text:000011F1                 mov     [eax+2], cx
.text:000011F5
.text:000011F5 loc_11F5:                               ; CODE XREF: UpdateModel(x)+3BBj
.text:000011F5                 mov     ecx, [ebp+arg_0]
.text:000011F8                 mov     edx, [ecx+8]
.text:000011FB                 movzx   eax, byte ptr [edx+1]
.text:000011FF                 shl     eax, 1
.text:00001201                 mov     ecx, [ebp+var_C]
.text:00001204                 movzx   edx, word ptr [ecx+2]
.text:00001208                 add     edx, 6
.text:0000120B                 imul    eax, edx
.text:0000120E                 mov     [ebp+var_28], eax
.text:00001211                 mov     eax, [ebp+var_C]
.text:00001214                 movzx   ecx, word ptr [eax+2]
.text:00001218                 add     ecx, [ebp+var_10]
.text:0000121B                 mov     [ebp+var_2C], ecx
.text:0000121E                 mov     edx, [ebp+var_2C]
.text:00001221                 imul    edx, 6
.text:00001224                 cmp     [ebp+var_28], edx
.text:00001227                 jnb     short loc_125B
.text:00001229                 mov     eax, [ebp+var_28]
.text:0000122C                 cmp     [ebp+var_2C], eax
.text:0000122F                 sbb     ecx, ecx
.text:00001231                 neg     ecx
.text:00001233                 mov     edx, [ebp+var_2C]
.text:00001236                 shl     edx, 2
.text:00001239                 cmp     [ebp+var_28], edx
.text:0000123C                 sbb     eax, eax
.text:0000123E                 add     eax, 1
.text:00001241                 lea     ecx, [ecx+eax+1]
.text:00001245                 mov     [ebp+var_28], ecx
.text:00001248                 mov     edx, [ebp+var_C]
.text:0000124B                 movzx   eax, word ptr [edx+2]
.text:0000124F                 add     eax, 3
.text:00001252                 mov     ecx, [ebp+var_C]
.text:00001255                 mov     [ecx+2], ax
.text:00001259                 jmp     short loc_129F
.text:0000125B ; ---------------------------------------------------------------------------
.text:0000125B
.text:0000125B loc_125B:                               ; CODE XREF: UpdateModel(x)+477j
.text:0000125B                 mov     edx, [ebp+var_2C]
.text:0000125E                 imul    edx, 9
.text:00001261                 cmp     [ebp+var_28], edx
.text:00001264                 sbb     eax, eax
.text:00001266                 add     eax, 1
.text:00001269                 mov     ecx, [ebp+var_2C]
.text:0000126C                 imul    ecx, 0Ch
.text:0000126F                 cmp     [ebp+var_28], ecx
.text:00001272                 sbb     edx, edx
.text:00001274                 add     edx, 1
.text:00001277                 lea     eax, [eax+edx+4]
.text:0000127B                 mov     ecx, [ebp+var_2C]
.text:0000127E                 imul    ecx, 0Fh
.text:00001281                 cmp     [ebp+var_28], ecx
.text:00001284                 sbb     edx, edx
.text:00001286                 add     edx, 1
.text:00001289                 add     eax, edx
.text:0000128B                 mov     [ebp+var_28], eax
.text:0000128E                 mov     eax, [ebp+var_C]
.text:00001291                 movzx   ecx, word ptr [eax+2]
.text:00001295                 add     ecx, [ebp+var_28]
.text:00001298                 mov     edx, [ebp+var_C]
.text:0000129B                 mov     [edx+2], cx
.text:0000129F
.text:0000129F loc_129F:                               ; CODE XREF: UpdateModel(x)+4A9j
.text:0000129F                 mov     eax, [ebp+var_24]
.text:000012A2                 imul    eax, 6
.text:000012A5                 mov     ecx, [ebp+var_C]
.text:000012A8                 add     eax, [ecx+4]
.text:000012AB                 mov     [ebp+var_50], eax
.text:000012AE                 mov     edx, [ebp+var_4]
.text:000012B1                 push    edx
.text:000012B2                 mov     eax, [ebp+var_50]
.text:000012B5                 push    eax
.text:000012B6                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:000012BB                 mov     ecx, [ebp+arg_0]
.text:000012BE                 mov     edx, [ecx+8]
.text:000012C1                 mov     eax, [ebp+var_50]
.text:000012C4                 mov     cl, [edx]
.text:000012C6                 mov     [eax], cl
.text:000012C8                 mov     edx, [ebp+var_50]
.text:000012CB                 mov     al, byte ptr [ebp+var_28]
.text:000012CE                 mov     [edx+1], al
.text:000012D1                 mov     ecx, [ebp+var_24]
.text:000012D4                 add     ecx, 1
.text:000012D7                 mov     edx, [ebp+var_C]
.text:000012DA                 mov     [edx], cx
.text:000012DD                 jmp     loc_102F
.text:000012E2 ; ---------------------------------------------------------------------------
.text:000012E2
.text:000012E2 loc_12E2:                               ; CODE XREF: UpdateModel(x)+290j
.text:000012E2                 mov     eax, [ebp+arg_0]
.text:000012E5                 mov     ecx, [ebp+var_8]
.text:000012E8                 mov     [eax], ecx
.text:000012EA                 mov     edx, [ebp+arg_0]
.text:000012ED                 mov     eax, [ebp+var_8]
.text:000012F0                 mov     [edx+4], eax
.text:000012F3
.text:000012F3 loc_12F3:                               ; CODE XREF: UpdateModel(x)+15Cj
.text:000012F3                                         ; UpdateModel(x)+173j ...
.text:000012F3                 pop     edi
.text:000012F4                 pop     esi
.text:000012F5                 add     esp, 58h
.text:000012F8                 cmp     ebp, esp
.text:000012FA                 call    __RTC_CheckEsp
.text:000012FF                 mov     esp, ebp
.text:00001301                 pop     ebp
.text:00001302                 retn    4
.text:00001302 _UpdateModel@4  endp
.text:00001302
.text:00001302 ; ---------------------------------------------------------------------------
.text:00001305                 align 10h
.text:00001310
.text:00001310 ; =============== S U B R O U T I N E =======================================
.text:00001310
.text:00001310 ; Attributes: bp-based frame
.text:00001310
.text:00001310 ; __stdcall AllocUnits(x, x)
.text:00001310 _AllocUnits@8   proc near               ; CODE XREF: UpdateModel(x)+2E8p
.text:00001310                                         ; UpdateModel(x)+3C6p
.text:00001310
.text:00001310 var_8           = dword ptr -8
.text:00001310 var_4           = dword ptr -4
.text:00001310 arg_0           = dword ptr  8
.text:00001310 arg_4           = dword ptr  0Ch
.text:00001310
.text:00001310                 push    ebp
.text:00001311                 mov     ebp, esp
.text:00001313                 sub     esp, 8
.text:00001316                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000131D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001324                 mov     eax, [ebp+arg_4]
.text:00001327                 mov     ecx, [ebp+arg_0]
.text:0000132A                 cmp     dword ptr [ecx+eax*4+0F0h], 0
.text:00001332                 jz      short loc_1343
.text:00001334                 mov     edx, [ebp+arg_4]
.text:00001337                 push    edx
.text:00001338                 mov     eax, [ebp+arg_0]
.text:0000133B                 push    eax
.text:0000133C                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00001341                 jmp     short loc_138E
.text:00001343 ; ---------------------------------------------------------------------------
.text:00001343
.text:00001343 loc_1343:                               ; CODE XREF: AllocUnits(x,x)+22j
.text:00001343                 mov     ecx, [ebp+arg_0]
.text:00001346                 add     ecx, [ebp+arg_4]
.text:00001349                 movzx   edx, byte ptr [ecx+48h]
.text:0000134D                 imul    edx, 0Ch
.text:00001350                 mov     [ebp+var_4], edx
.text:00001353                 mov     eax, [ebp+arg_0]
.text:00001356                 mov     ecx, [ebp+arg_0]
.text:00001359                 mov     edx, [eax+38h]
.text:0000135C                 sub     edx, [ecx+34h]
.text:0000135F                 cmp     [ebp+var_4], edx
.text:00001362                 ja      short loc_1381
.text:00001364                 mov     eax, [ebp+arg_0]
.text:00001367                 mov     ecx, [eax+34h]
.text:0000136A                 mov     [ebp+var_8], ecx
.text:0000136D                 mov     edx, [ebp+arg_0]
.text:00001370                 mov     eax, [edx+34h]
.text:00001373                 add     eax, [ebp+var_4]
.text:00001376                 mov     ecx, [ebp+arg_0]
.text:00001379                 mov     [ecx+34h], eax
.text:0000137C                 mov     eax, [ebp+var_8]
.text:0000137F                 jmp     short loc_138E
.text:00001381 ; ---------------------------------------------------------------------------
.text:00001381
.text:00001381 loc_1381:                               ; CODE XREF: AllocUnits(x,x)+52j
.text:00001381                 mov     edx, [ebp+arg_4]
.text:00001384                 push    edx
.text:00001385                 mov     eax, [ebp+arg_0]
.text:00001388                 push    eax
.text:00001389                 call    _AllocUnitsRare@8 ; AllocUnitsRare(x,x)
.text:0000138E
.text:0000138E loc_138E:                               ; CODE XREF: AllocUnits(x,x)+31j
.text:0000138E                                         ; AllocUnits(x,x)+6Fj
.text:0000138E                 add     esp, 8
.text:00001391                 cmp     ebp, esp
.text:00001393                 call    __RTC_CheckEsp
.text:00001398                 mov     esp, ebp
.text:0000139A                 pop     ebp
.text:0000139B                 retn    8
.text:0000139B _AllocUnits@8   endp
.text:0000139B
.text:0000139B ; ---------------------------------------------------------------------------
.text:0000139E                 align 10h
.text:000013A0
.text:000013A0 ; =============== S U B R O U T I N E =======================================
.text:000013A0
.text:000013A0 ; Attributes: bp-based frame
.text:000013A0
.text:000013A0 ; __stdcall AllocUnitsRare(x, x)
.text:000013A0 _AllocUnitsRare@8 proc near             ; CODE XREF: AllocUnits(x,x)+79p
.text:000013A0                                         ; CreateSuccessors(x,x)+28Ap
.text:000013A0
.text:000013A0 var_14          = dword ptr -14h
.text:000013A0 var_10          = dword ptr -10h
.text:000013A0 var_C           = dword ptr -0Ch
.text:000013A0 var_8           = dword ptr -8
.text:000013A0 var_4           = dword ptr -4
.text:000013A0 arg_0           = dword ptr  8
.text:000013A0 arg_4           = dword ptr  0Ch
.text:000013A0
.text:000013A0                 push    ebp
.text:000013A1                 mov     ebp, esp
.text:000013A3                 sub     esp, 14h
.text:000013A6                 mov     eax, 0CCCCCCCCh
.text:000013AB                 mov     [ebp+var_14], eax
.text:000013AE                 mov     [ebp+var_10], eax
.text:000013B1                 mov     [ebp+var_C], eax
.text:000013B4                 mov     [ebp+var_8], eax
.text:000013B7                 mov     [ebp+var_4], eax
.text:000013BA                 mov     eax, [ebp+arg_0]
.text:000013BD                 cmp     dword ptr [eax+2Ch], 0
.text:000013C1                 jnz     short loc_13EE
.text:000013C3                 mov     ecx, [ebp+arg_0]
.text:000013C6                 push    ecx
.text:000013C7                 call    _GlueFreeBlocks@4 ; GlueFreeBlocks(x)
.text:000013CC                 mov     edx, [ebp+arg_4]
.text:000013CF                 mov     eax, [ebp+arg_0]
.text:000013D2                 cmp     dword ptr [eax+edx*4+0F0h], 0
.text:000013DA                 jz      short loc_13EE
.text:000013DC                 mov     ecx, [ebp+arg_4]
.text:000013DF                 push    ecx
.text:000013E0                 mov     edx, [ebp+arg_0]
.text:000013E3                 push    edx
.text:000013E4                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:000013E9                 jmp     loc_1494
.text:000013EE ; ---------------------------------------------------------------------------
.text:000013EE
.text:000013EE loc_13EE:                               ; CODE XREF: AllocUnitsRare(x,x)+21j
.text:000013EE                                         ; AllocUnitsRare(x,x)+3Aj
.text:000013EE                 mov     eax, [ebp+arg_4]
.text:000013F1                 mov     [ebp+var_4], eax
.text:000013F4
.text:000013F4 loc_13F4:                               ; CODE XREF: AllocUnitsRare(x,x)+CAj
.text:000013F4                 mov     ecx, [ebp+var_4]
.text:000013F7                 add     ecx, 1
.text:000013FA                 mov     [ebp+var_4], ecx
.text:000013FD                 cmp     [ebp+var_4], 26h ; '&'
.text:00001401                 jnz     short loc_145C
.text:00001403                 mov     edx, [ebp+arg_0]
.text:00001406                 add     edx, [ebp+arg_4]
.text:00001409                 movzx   eax, byte ptr [edx+48h]
.text:0000140D                 imul    eax, 0Ch
.text:00001410                 mov     [ebp+var_C], eax
.text:00001413                 mov     ecx, [ebp+arg_0]
.text:00001416                 mov     edx, [ecx+2Ch]
.text:00001419                 sub     edx, 1
.text:0000141C                 mov     eax, [ebp+arg_0]
.text:0000141F                 mov     [eax+2Ch], edx
.text:00001422                 mov     ecx, [ebp+arg_0]
.text:00001425                 mov     edx, [ebp+arg_0]
.text:00001428                 mov     eax, [ecx+40h]
.text:0000142B                 sub     eax, [edx+3Ch]
.text:0000142E                 cmp     eax, [ebp+var_C]
.text:00001431                 jbe     short loc_1450
.text:00001433                 mov     ecx, [ebp+arg_0]
.text:00001436                 mov     edx, [ecx+40h]
.text:00001439                 sub     edx, [ebp+var_C]
.text:0000143C                 mov     [ebp+var_10], edx
.text:0000143F                 mov     eax, [ebp+arg_0]
.text:00001442                 mov     ecx, [ebp+var_10]
.text:00001445                 mov     [eax+40h], ecx
.text:00001448                 mov     edx, [ebp+var_10]
.text:0000144B                 mov     [ebp+var_14], edx
.text:0000144E                 jmp     short loc_1457
.text:00001450 ; ---------------------------------------------------------------------------
.text:00001450
.text:00001450 loc_1450:                               ; CODE XREF: AllocUnitsRare(x,x)+91j
.text:00001450                 mov     [ebp+var_14], 0
.text:00001457
.text:00001457 loc_1457:                               ; CODE XREF: AllocUnitsRare(x,x)+AEj
.text:00001457                 mov     eax, [ebp+var_14]
.text:0000145A                 jmp     short loc_1494
.text:0000145C ; ---------------------------------------------------------------------------
.text:0000145C
.text:0000145C loc_145C:                               ; CODE XREF: AllocUnitsRare(x,x)+61j
.text:0000145C                 mov     eax, [ebp+var_4]
.text:0000145F                 mov     ecx, [ebp+arg_0]
.text:00001462                 cmp     dword ptr [ecx+eax*4+0F0h], 0
.text:0000146A                 jz      short loc_13F4
.text:0000146C                 mov     edx, [ebp+var_4]
.text:0000146F                 push    edx
.text:00001470                 mov     eax, [ebp+arg_0]
.text:00001473                 push    eax
.text:00001474                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00001479                 mov     [ebp+var_8], eax
.text:0000147C                 mov     ecx, [ebp+arg_4]
.text:0000147F                 push    ecx
.text:00001480                 mov     edx, [ebp+var_4]
.text:00001483                 push    edx
.text:00001484                 mov     eax, [ebp+var_8]
.text:00001487                 push    eax
.text:00001488                 mov     ecx, [ebp+arg_0]
.text:0000148B                 push    ecx
.text:0000148C                 call    _SplitBlock@16  ; SplitBlock(x,x,x,x)
.text:00001491                 mov     eax, [ebp+var_8]
.text:00001494
.text:00001494 loc_1494:                               ; CODE XREF: AllocUnitsRare(x,x)+49j
.text:00001494                                         ; AllocUnitsRare(x,x)+BAj
.text:00001494                 add     esp, 14h
.text:00001497                 cmp     ebp, esp
.text:00001499                 call    __RTC_CheckEsp
.text:0000149E                 mov     esp, ebp
.text:000014A0                 pop     ebp
.text:000014A1                 retn    8
.text:000014A1 _AllocUnitsRare@8 endp
.text:000014A1
.text:000014A1 ; ---------------------------------------------------------------------------
.text:000014A4                 align 10h
.text:000014B0
.text:000014B0 ; =============== S U B R O U T I N E =======================================
.text:000014B0
.text:000014B0 ; Attributes: bp-based frame
.text:000014B0
.text:000014B0 ; __stdcall GlueFreeBlocks(x)
.text:000014B0 _GlueFreeBlocks@4 proc near             ; CODE XREF: AllocUnitsRare(x,x)+27p
.text:000014B0
.text:000014B0 var_48          = dword ptr -48h
.text:000014B0 var_44          = dword ptr -44h
.text:000014B0 var_40          = dword ptr -40h
.text:000014B0 var_3C          = dword ptr -3Ch
.text:000014B0 var_38          = dword ptr -38h
.text:000014B0 var_34          = dword ptr -34h
.text:000014B0 var_30          = dword ptr -30h
.text:000014B0 var_2C          = dword ptr -2Ch
.text:000014B0 var_28          = dword ptr -28h
.text:000014B0 var_24          = word ptr -24h
.text:000014B0 var_20          = dword ptr -20h
.text:000014B0 var_1C          = dword ptr -1Ch
.text:000014B0 var_18          = dword ptr -18h
.text:000014B0 var_10          = byte ptr -10h
.text:000014B0 arg_0           = dword ptr  8
.text:000014B0
.text:000014B0                 push    ebp
.text:000014B1                 mov     ebp, esp
.text:000014B3                 sub     esp, 48h
.text:000014B6                 push    edi
.text:000014B7                 lea     edi, [ebp+var_48]
.text:000014BA                 mov     ecx, 12h
.text:000014BF                 mov     eax, 0CCCCCCCCh
.text:000014C4                 rep stosd
.text:000014C6                 lea     eax, [ebp+var_10]
.text:000014C9                 mov     [ebp+var_18], eax
.text:000014CC                 mov     ecx, [ebp+var_18]
.text:000014CF                 mov     [ebp+var_1C], ecx
.text:000014D2                 mov     edx, [ebp+arg_0]
.text:000014D5                 mov     dword ptr [edx+2Ch], 0FFh
.text:000014DC                 mov     [ebp+var_20], 0
.text:000014E3                 jmp     short loc_14EE
.text:000014E5 ; ---------------------------------------------------------------------------
.text:000014E5
.text:000014E5 loc_14E5:                               ; CODE XREF: GlueFreeBlocks(x):loc_1565j
.text:000014E5                 mov     eax, [ebp+var_20]
.text:000014E8                 add     eax, 1
.text:000014EB                 mov     [ebp+var_20], eax
.text:000014EE
.text:000014EE loc_14EE:                               ; CODE XREF: GlueFreeBlocks(x)+33j
.text:000014EE                 cmp     [ebp+var_20], 26h ; '&'
.text:000014F2                 jnb     short loc_156A
.text:000014F4                 mov     ecx, [ebp+arg_0]
.text:000014F7                 add     ecx, [ebp+var_20]
.text:000014FA                 movzx   dx, byte ptr [ecx+48h]
.text:000014FF                 mov     [ebp+var_24], dx
.text:00001503                 mov     eax, [ebp+var_20]
.text:00001506                 mov     ecx, [ebp+arg_0]
.text:00001509                 mov     edx, [ecx+eax*4+0F0h]
.text:00001510                 mov     [ebp+var_28], edx
.text:00001513                 mov     eax, [ebp+var_20]
.text:00001516                 mov     ecx, [ebp+arg_0]
.text:00001519                 mov     dword ptr [ecx+eax*4+0F0h], 0
.text:00001524
.text:00001524 loc_1524:                               ; CODE XREF: GlueFreeBlocks(x)+B3j
.text:00001524                 cmp     [ebp+var_28], 0
.text:00001528                 jz      short loc_1565
.text:0000152A                 mov     edx, [ebp+var_28]
.text:0000152D                 mov     [ebp+var_2C], edx
.text:00001530                 mov     eax, [ebp+var_2C]
.text:00001533                 mov     ecx, [ebp+var_1C]
.text:00001536                 mov     [eax+4], ecx
.text:00001539                 mov     edx, [ebp+var_1C]
.text:0000153C                 mov     eax, [ebp+var_28]
.text:0000153F                 mov     [edx+8], eax
.text:00001542                 mov     ecx, [ebp+var_28]
.text:00001545                 mov     [ebp+var_1C], ecx
.text:00001548                 mov     edx, [ebp+var_2C]
.text:0000154B                 mov     eax, [edx]
.text:0000154D                 mov     [ebp+var_28], eax
.text:00001550                 xor     ecx, ecx
.text:00001552                 mov     edx, [ebp+var_2C]
.text:00001555                 mov     [edx], cx
.text:00001558                 mov     eax, [ebp+var_2C]
.text:0000155B                 mov     cx, [ebp+var_24]
.text:0000155F                 mov     [eax+2], cx
.text:00001563                 jmp     short loc_1524
.text:00001565 ; ---------------------------------------------------------------------------
.text:00001565
.text:00001565 loc_1565:                               ; CODE XREF: GlueFreeBlocks(x)+78j
.text:00001565                 jmp     loc_14E5
.text:0000156A ; ---------------------------------------------------------------------------
.text:0000156A
.text:0000156A loc_156A:                               ; CODE XREF: GlueFreeBlocks(x)+42j
.text:0000156A                 mov     edx, 1
.text:0000156F                 mov     eax, [ebp+var_18]
.text:00001572                 mov     [eax], dx
.text:00001575                 mov     ecx, [ebp+var_18]
.text:00001578                 mov     edx, [ebp+var_1C]
.text:0000157B                 mov     [ecx+4], edx
.text:0000157E                 mov     eax, [ebp+var_1C]
.text:00001581                 mov     ecx, [ebp+var_18]
.text:00001584                 mov     [eax+8], ecx
.text:00001587                 mov     edx, [ebp+arg_0]
.text:0000158A                 mov     eax, [ebp+arg_0]
.text:0000158D                 mov     ecx, [edx+34h]
.text:00001590                 cmp     ecx, [eax+38h]
.text:00001593                 jz      short loc_15A3
.text:00001595                 mov     edx, [ebp+arg_0]
.text:00001598                 mov     eax, [edx+34h]
.text:0000159B                 mov     ecx, 1
.text:000015A0                 mov     [eax], cx
.text:000015A3
.text:000015A3 loc_15A3:                               ; CODE XREF: GlueFreeBlocks(x)+E3j
.text:000015A3                                         ; GlueFreeBlocks(x)+16Dj
.text:000015A3                 mov     edx, [ebp+var_1C]
.text:000015A6                 cmp     edx, [ebp+var_18]
.text:000015A9                 jz      short loc_161F
.text:000015AB                 mov     eax, [ebp+var_1C]
.text:000015AE                 mov     [ebp+var_30], eax
.text:000015B1                 mov     ecx, [ebp+var_30]
.text:000015B4                 movzx   edx, word ptr [ecx+2]
.text:000015B8                 mov     [ebp+var_34], edx
.text:000015BB
.text:000015BB loc_15BB:                               ; CODE XREF: GlueFreeBlocks(x)+162j
.text:000015BB                 mov     eax, [ebp+var_34]
.text:000015BE                 imul    eax, 0Ch
.text:000015C1                 add     eax, [ebp+var_1C]
.text:000015C4                 mov     [ebp+var_38], eax
.text:000015C7                 mov     ecx, [ebp+var_38]
.text:000015CA                 movzx   edx, word ptr [ecx+2]
.text:000015CE                 add     edx, [ebp+var_34]
.text:000015D1                 mov     [ebp+var_34], edx
.text:000015D4                 mov     eax, [ebp+var_38]
.text:000015D7                 movzx   ecx, word ptr [eax]
.text:000015DA                 test    ecx, ecx
.text:000015DC                 jnz     short loc_15E7
.text:000015DE                 cmp     [ebp+var_34], 10000h
.text:000015E5                 jb      short loc_15E9
.text:000015E7
.text:000015E7 loc_15E7:                               ; CODE XREF: GlueFreeBlocks(x)+12Cj
.text:000015E7                 jmp     short loc_1614
.text:000015E9 ; ---------------------------------------------------------------------------
.text:000015E9
.text:000015E9 loc_15E9:                               ; CODE XREF: GlueFreeBlocks(x)+135j
.text:000015E9                 mov     edx, [ebp+var_38]
.text:000015EC                 mov     eax, [edx+8]
.text:000015EF                 mov     ecx, [ebp+var_38]
.text:000015F2                 mov     edx, [ecx+4]
.text:000015F5                 mov     [eax+4], edx
.text:000015F8                 mov     eax, [ebp+var_38]
.text:000015FB                 mov     ecx, [eax+4]
.text:000015FE                 mov     edx, [ebp+var_38]
.text:00001601                 mov     eax, [edx+8]
.text:00001604                 mov     [ecx+8], eax
.text:00001607                 mov     ecx, [ebp+var_30]
.text:0000160A                 mov     dx, word ptr [ebp+var_34]
.text:0000160E                 mov     [ecx+2], dx
.text:00001612                 jmp     short loc_15BB
.text:00001614 ; ---------------------------------------------------------------------------
.text:00001614
.text:00001614 loc_1614:                               ; CODE XREF: GlueFreeBlocks(x):loc_15E7j
.text:00001614                 mov     eax, [ebp+var_30]
.text:00001617                 mov     ecx, [eax+4]
.text:0000161A                 mov     [ebp+var_1C], ecx
.text:0000161D                 jmp     short loc_15A3
.text:0000161F ; ---------------------------------------------------------------------------
.text:0000161F
.text:0000161F loc_161F:                               ; CODE XREF: GlueFreeBlocks(x)+F9j
.text:0000161F                 mov     edx, [ebp+var_18]
.text:00001622                 mov     eax, [edx+4]
.text:00001625                 mov     [ebp+var_1C], eax
.text:00001628
.text:00001628 loc_1628:                               ; CODE XREF: GlueFreeBlocks(x)+237j
.text:00001628                 mov     ecx, [ebp+var_1C]
.text:0000162B                 cmp     ecx, [ebp+var_18]
.text:0000162E                 jz      loc_16EC
.text:00001634                 mov     edx, [ebp+var_1C]
.text:00001637                 mov     [ebp+var_3C], edx
.text:0000163A                 mov     eax, [ebp+var_3C]
.text:0000163D                 mov     ecx, [eax+4]
.text:00001640                 mov     [ebp+var_44], ecx
.text:00001643                 mov     edx, [ebp+var_3C]
.text:00001646                 movzx   eax, word ptr [edx+2]
.text:0000164A                 mov     [ebp+var_40], eax
.text:0000164D                 jmp     short loc_1667
.text:0000164F ; ---------------------------------------------------------------------------
.text:0000164F
.text:0000164F loc_164F:                               ; CODE XREF: GlueFreeBlocks(x)+1CFj
.text:0000164F                 mov     ecx, [ebp+var_40]
.text:00001652                 sub     ecx, 80h ; 'Ã'
.text:00001658                 mov     [ebp+var_40], ecx
.text:0000165B                 mov     edx, [ebp+var_3C]
.text:0000165E                 add     edx, 600h
.text:00001664                 mov     [ebp+var_3C], edx
.text:00001667
.text:00001667 loc_1667:                               ; CODE XREF: GlueFreeBlocks(x)+19Dj
.text:00001667                 cmp     [ebp+var_40], 80h ; 'Ã'
.text:0000166E                 jbe     short loc_1681
.text:00001670                 push    25h ; '%'
.text:00001672                 mov     eax, [ebp+var_3C]
.text:00001675                 push    eax
.text:00001676                 mov     ecx, [ebp+arg_0]
.text:00001679                 push    ecx
.text:0000167A                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:0000167F                 jmp     short loc_164F
.text:00001681 ; ---------------------------------------------------------------------------
.text:00001681
.text:00001681 loc_1681:                               ; CODE XREF: GlueFreeBlocks(x)+1BEj
.text:00001681                 mov     edx, [ebp+arg_0]
.text:00001684                 add     edx, [ebp+var_40]
.text:00001687                 movzx   eax, byte ptr [edx+6Dh]
.text:0000168B                 mov     [ebp+var_20], eax
.text:0000168E                 mov     ecx, [ebp+arg_0]
.text:00001691                 add     ecx, [ebp+var_20]
.text:00001694                 movzx   edx, byte ptr [ecx+48h]
.text:00001698                 cmp     edx, [ebp+var_40]
.text:0000169B                 jz      short loc_16D0
.text:0000169D                 mov     eax, [ebp+var_20]
.text:000016A0                 sub     eax, 1
.text:000016A3                 mov     [ebp+var_20], eax
.text:000016A6                 mov     ecx, [ebp+arg_0]
.text:000016A9                 add     ecx, [ebp+var_20]
.text:000016AC                 movzx   edx, byte ptr [ecx+48h]
.text:000016B0                 mov     [ebp+var_48], edx
.text:000016B3                 mov     eax, [ebp+var_40]
.text:000016B6                 sub     eax, [ebp+var_48]
.text:000016B9                 sub     eax, 1
.text:000016BC                 push    eax
.text:000016BD                 mov     ecx, [ebp+var_48]
.text:000016C0                 imul    ecx, 0Ch
.text:000016C3                 add     ecx, [ebp+var_3C]
.text:000016C6                 push    ecx
.text:000016C7                 mov     edx, [ebp+arg_0]
.text:000016CA                 push    edx
.text:000016CB                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000016D0
.text:000016D0 loc_16D0:                               ; CODE XREF: GlueFreeBlocks(x)+1EBj
.text:000016D0                 mov     eax, [ebp+var_20]
.text:000016D3                 push    eax
.text:000016D4                 mov     ecx, [ebp+var_3C]
.text:000016D7                 push    ecx
.text:000016D8                 mov     edx, [ebp+arg_0]
.text:000016DB                 push    edx
.text:000016DC                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000016E1                 mov     eax, [ebp+var_44]
.text:000016E4                 mov     [ebp+var_1C], eax
.text:000016E7                 jmp     loc_1628
.text:000016EC ; ---------------------------------------------------------------------------
.text:000016EC
.text:000016EC loc_16EC:                               ; CODE XREF: GlueFreeBlocks(x)+17Ej
.text:000016EC                 push    edx
.text:000016ED                 mov     ecx, ebp
.text:000016EF                 push    eax
.text:000016F0                 lea     edx, $LN23_0
.text:000016F6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000016FB                 pop     eax
.text:000016FC                 pop     edx
.text:000016FD                 pop     edi
.text:000016FE                 add     esp, 48h
.text:00001701                 cmp     ebp, esp
.text:00001703                 call    __RTC_CheckEsp
.text:00001708                 mov     esp, ebp
.text:0000170A                 pop     ebp
.text:0000170B                 retn    4
.text:0000170B _GlueFreeBlocks@4 endp
.text:0000170B
.text:0000170B ; ---------------------------------------------------------------------------
.text:0000170E                 align 10h
.text:00001710 $LN23_0         dd 1                    ; DATA XREF: GlueFreeBlocks(x)+240o
.text:00001714                 dd offset $LN22
.text:00001718 $LN22           dd 0FFFFFFF0h, 0Ch      ; DATA XREF: .text:00001714o
.text:00001720                 dd offset $LN21         ; "headItem"
.text:00001724 $LN21           db 'headItem',0         ; DATA XREF: .text:00001720o
.text:0000172D                 align 10h
.text:00001730
.text:00001730 ; =============== S U B R O U T I N E =======================================
.text:00001730
.text:00001730 ; Attributes: bp-based frame
.text:00001730
.text:00001730 ; __stdcall CreateSuccessors(x, x)
.text:00001730 _CreateSuccessors@8 proc near           ; CODE XREF: UpdateModel(x)+132p
.text:00001730                                         ; UpdateModel(x)+1D0p
.text:00001730
.text:00001730 var_144         = dword ptr -144h
.text:00001730 var_140         = dword ptr -140h
.text:00001730 var_13C         = dword ptr -13Ch
.text:00001730 var_138         = dword ptr -138h
.text:00001730 var_134         = dword ptr -134h
.text:00001730 var_130         = dword ptr -130h
.text:00001730 var_12C         = dword ptr -12Ch
.text:00001730 var_128         = dword ptr -128h
.text:00001730 var_124         = dword ptr -124h
.text:00001730 var_11C         = dword ptr -11Ch
.text:00001730 var_18          = dword ptr -18h
.text:00001730 var_14          = dword ptr -14h
.text:00001730 var_C           = dword ptr -0Ch
.text:00001730 var_8           = word ptr -8
.text:00001730 arg_0           = dword ptr  8
.text:00001730 arg_4           = dword ptr  0Ch
.text:00001730
.text:00001730                 push    ebp
.text:00001731                 mov     ebp, esp
.text:00001733                 sub     esp, 144h
.text:00001739                 push    edi
.text:0000173A                 lea     edi, [ebp+var_144]
.text:00001740                 mov     ecx, 51h ; 'Q'
.text:00001745                 mov     eax, 0CCCCCCCCh
.text:0000174A                 rep stosd
.text:0000174C                 mov     eax, [ebp+arg_0]
.text:0000174F                 mov     ecx, [eax]
.text:00001751                 mov     [ebp+var_14], ecx
.text:00001754                 mov     edx, [ebp+arg_0]
.text:00001757                 mov     eax, [edx+8]
.text:0000175A                 movzx   ecx, word ptr [eax+2]
.text:0000175E                 mov     edx, [ebp+arg_0]
.text:00001761                 mov     eax, [edx+8]
.text:00001764                 movzx   edx, word ptr [eax+4]
.text:00001768                 shl     edx, 10h
.text:0000176B                 or      ecx, edx
.text:0000176D                 mov     [ebp+var_18], ecx
.text:00001770                 mov     [ebp+var_124], 0
.text:0000177A                 cmp     [ebp+arg_4], 0
.text:0000177E                 jnz     short loc_17A2
.text:00001780                 mov     eax, [ebp+var_124]
.text:00001786                 mov     ecx, [ebp+arg_0]
.text:00001789                 mov     edx, [ecx+8]
.text:0000178C                 mov     [ebp+eax*4+var_11C], edx
.text:00001793                 mov     eax, [ebp+var_124]
.text:00001799                 add     eax, 1
.text:0000179C                 mov     [ebp+var_124], eax
.text:000017A2
.text:000017A2 loc_17A2:                               ; CODE XREF: CreateSuccessors(x,x)+4Ej
.text:000017A2                                         ; CreateSuccessors(x,x)+13Ej
.text:000017A2                 mov     ecx, [ebp+var_14]
.text:000017A5                 cmp     dword ptr [ecx+8], 0
.text:000017A9                 jz      loc_1873
.text:000017AF                 mov     edx, [ebp+var_14]
.text:000017B2                 mov     eax, [edx+8]
.text:000017B5                 mov     [ebp+var_14], eax
.text:000017B8                 mov     ecx, [ebp+var_14]
.text:000017BB                 movzx   edx, word ptr [ecx]
.text:000017BE                 cmp     edx, 1
.text:000017C1                 jz      short loc_17FA
.text:000017C3                 mov     eax, [ebp+var_14]
.text:000017C6                 mov     ecx, [eax+4]
.text:000017C9                 mov     [ebp+var_12C], ecx
.text:000017CF                 jmp     short loc_17E0
.text:000017D1 ; ---------------------------------------------------------------------------
.text:000017D1
.text:000017D1 loc_17D1:                               ; CODE XREF: CreateSuccessors(x,x)+C6j
.text:000017D1                 mov     edx, [ebp+var_12C]
.text:000017D7                 add     edx, 6
.text:000017DA                 mov     [ebp+var_12C], edx
.text:000017E0
.text:000017E0 loc_17E0:                               ; CODE XREF: CreateSuccessors(x,x)+9Fj
.text:000017E0                 mov     eax, [ebp+var_12C]
.text:000017E6                 movzx   ecx, byte ptr [eax]
.text:000017E9                 mov     edx, [ebp+arg_0]
.text:000017EC                 mov     eax, [edx+8]
.text:000017EF                 movzx   edx, byte ptr [eax]
.text:000017F2                 cmp     ecx, edx
.text:000017F4                 jz      short loc_17F8
.text:000017F6                 jmp     short loc_17D1
.text:000017F8 ; ---------------------------------------------------------------------------
.text:000017F8
.text:000017F8 loc_17F8:                               ; CODE XREF: CreateSuccessors(x,x)+C4j
.text:000017F8                 jmp     short loc_1806
.text:000017FA ; ---------------------------------------------------------------------------
.text:000017FA
.text:000017FA loc_17FA:                               ; CODE XREF: CreateSuccessors(x,x)+91j
.text:000017FA                 mov     eax, [ebp+var_14]
.text:000017FD                 add     eax, 2
.text:00001800                 mov     [ebp+var_12C], eax
.text:00001806
.text:00001806 loc_1806:                               ; CODE XREF: CreateSuccessors(x,x):loc_17F8j
.text:00001806                 mov     ecx, [ebp+var_12C]
.text:0000180C                 movzx   edx, word ptr [ecx+2]
.text:00001810                 mov     eax, [ebp+var_12C]
.text:00001816                 movzx   ecx, word ptr [eax+4]
.text:0000181A                 shl     ecx, 10h
.text:0000181D                 or      edx, ecx
.text:0000181F                 mov     [ebp+var_128], edx
.text:00001825                 mov     edx, [ebp+var_128]
.text:0000182B                 cmp     edx, [ebp+var_18]
.text:0000182E                 jz      short loc_184C
.text:00001830                 mov     eax, [ebp+var_128]
.text:00001836                 mov     [ebp+var_14], eax
.text:00001839                 cmp     [ebp+var_124], 0
.text:00001840                 jnz     short loc_184A
.text:00001842                 mov     eax, [ebp+var_14]
.text:00001845                 jmp     loc_1A44
.text:0000184A ; ---------------------------------------------------------------------------
.text:0000184A
.text:0000184A loc_184A:                               ; CODE XREF: CreateSuccessors(x,x)+110j
.text:0000184A                 jmp     short loc_1873
.text:0000184C ; ---------------------------------------------------------------------------
.text:0000184C
.text:0000184C loc_184C:                               ; CODE XREF: CreateSuccessors(x,x)+FEj
.text:0000184C                 mov     ecx, [ebp+var_124]
.text:00001852                 mov     edx, [ebp+var_12C]
.text:00001858                 mov     [ebp+ecx*4+var_11C], edx
.text:0000185F                 mov     eax, [ebp+var_124]
.text:00001865                 add     eax, 1
.text:00001868                 mov     [ebp+var_124], eax
.text:0000186E                 jmp     loc_17A2
.text:00001873 ; ---------------------------------------------------------------------------
.text:00001873
.text:00001873 loc_1873:                               ; CODE XREF: CreateSuccessors(x,x)+79j
.text:00001873                                         ; CreateSuccessors(x,x):loc_184Aj
.text:00001873                 mov     ecx, [ebp+var_18]
.text:00001876                 mov     dl, [ecx]
.text:00001878                 mov     byte ptr [ebp+var_C], dl
.text:0000187B                 mov     eax, [ebp+var_18]
.text:0000187E                 add     eax, 1
.text:00001881                 push    eax
.text:00001882                 lea     ecx, [ebp+var_C]
.text:00001885                 push    ecx
.text:00001886                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:0000188B                 mov     edx, [ebp+var_14]
.text:0000188E                 movzx   eax, word ptr [edx]
.text:00001891                 cmp     eax, 1
.text:00001894                 jnz     short loc_18A4
.text:00001896                 mov     ecx, [ebp+var_14]
.text:00001899                 mov     dl, [ecx+3]
.text:0000189C                 mov     byte ptr [ebp+var_C+1], dl
.text:0000189F                 jmp     loc_195E
.text:000018A4 ; ---------------------------------------------------------------------------
.text:000018A4
.text:000018A4 loc_18A4:                               ; CODE XREF: CreateSuccessors(x,x)+164j
.text:000018A4                 mov     eax, [ebp+var_14]
.text:000018A7                 mov     ecx, [eax+4]
.text:000018AA                 mov     [ebp+var_138], ecx
.text:000018B0                 jmp     short loc_18C1
.text:000018B2 ; ---------------------------------------------------------------------------
.text:000018B2
.text:000018B2 loc_18B2:                               ; CODE XREF: CreateSuccessors(x,x)+1A2j
.text:000018B2                 mov     edx, [ebp+var_138]
.text:000018B8                 add     edx, 6
.text:000018BB                 mov     [ebp+var_138], edx
.text:000018C1
.text:000018C1 loc_18C1:                               ; CODE XREF: CreateSuccessors(x,x)+180j
.text:000018C1                 mov     eax, [ebp+var_138]
.text:000018C7                 movzx   ecx, byte ptr [eax]
.text:000018CA                 movzx   edx, byte ptr [ebp+var_C]
.text:000018CE                 cmp     ecx, edx
.text:000018D0                 jz      short loc_18D4
.text:000018D2                 jmp     short loc_18B2
.text:000018D4 ; ---------------------------------------------------------------------------
.text:000018D4
.text:000018D4 loc_18D4:                               ; CODE XREF: CreateSuccessors(x,x)+1A0j
.text:000018D4                 mov     eax, [ebp+var_138]
.text:000018DA                 movzx   ecx, byte ptr [eax+1]
.text:000018DE                 sub     ecx, 1
.text:000018E1                 mov     [ebp+var_130], ecx
.text:000018E7                 mov     edx, [ebp+var_14]
.text:000018EA                 movzx   eax, word ptr [edx+2]
.text:000018EE                 mov     ecx, [ebp+var_14]
.text:000018F1                 movzx   edx, word ptr [ecx]
.text:000018F4                 sub     eax, edx
.text:000018F6                 sub     eax, [ebp+var_130]
.text:000018FC                 mov     [ebp+var_134], eax
.text:00001902                 mov     eax, [ebp+var_130]
.text:00001908                 shl     eax, 1
.text:0000190A                 cmp     eax, [ebp+var_134]
.text:00001910                 ja      short loc_192D
.text:00001912                 mov     ecx, [ebp+var_130]
.text:00001918                 imul    ecx, 5
.text:0000191B                 cmp     [ebp+var_134], ecx
.text:00001921                 sbb     edx, edx
.text:00001923                 neg     edx
.text:00001925                 mov     [ebp+var_140], edx
.text:0000192B                 jmp     short loc_1952
.text:0000192D ; ---------------------------------------------------------------------------
.text:0000192D
.text:0000192D loc_192D:                               ; CODE XREF: CreateSuccessors(x,x)+1E0j
.text:0000192D                 mov     eax, [ebp+var_134]
.text:00001933                 imul    eax, 3
.text:00001936                 mov     ecx, [ebp+var_130]
.text:0000193C                 lea     eax, [eax+ecx*2-1]
.text:00001940                 mov     ecx, [ebp+var_134]
.text:00001946                 shl     ecx, 1
.text:00001948                 xor     edx, edx
.text:0000194A                 div     ecx
.text:0000194C                 mov     [ebp+var_140], eax
.text:00001952
.text:00001952 loc_1952:                               ; CODE XREF: CreateSuccessors(x,x)+1FBj
.text:00001952                 mov     edx, [ebp+var_140]
.text:00001958                 add     edx, 1
.text:0000195B                 mov     byte ptr [ebp+var_C+1], dl
.text:0000195E
.text:0000195E loc_195E:                               ; CODE XREF: CreateSuccessors(x,x)+16Fj
.text:0000195E                                         ; CreateSuccessors(x,x)+30Bj
.text:0000195E                 mov     eax, [ebp+arg_0]
.text:00001961                 mov     ecx, [ebp+arg_0]
.text:00001964                 mov     edx, [eax+38h]
.text:00001967                 cmp     edx, [ecx+34h]
.text:0000196A                 jz      short loc_1995
.text:0000196C                 mov     eax, [ebp+arg_0]
.text:0000196F                 mov     ecx, [eax+38h]
.text:00001972                 sub     ecx, 0Ch
.text:00001975                 mov     [ebp+var_144], ecx
.text:0000197B                 mov     edx, [ebp+arg_0]
.text:0000197E                 mov     eax, [ebp+var_144]
.text:00001984                 mov     [edx+38h], eax
.text:00001987                 mov     ecx, [ebp+var_144]
.text:0000198D                 mov     [ebp+var_13C], ecx
.text:00001993                 jmp     short loc_19D2
.text:00001995 ; ---------------------------------------------------------------------------
.text:00001995
.text:00001995 loc_1995:                               ; CODE XREF: CreateSuccessors(x,x)+23Aj
.text:00001995                 mov     edx, [ebp+arg_0]
.text:00001998                 cmp     dword ptr [edx+0F0h], 0
.text:0000199F                 jz      short loc_19B4
.text:000019A1                 push    0
.text:000019A3                 mov     eax, [ebp+arg_0]
.text:000019A6                 push    eax
.text:000019A7                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:000019AC                 mov     [ebp+var_13C], eax
.text:000019B2                 jmp     short loc_19D2
.text:000019B4 ; ---------------------------------------------------------------------------
.text:000019B4
.text:000019B4 loc_19B4:                               ; CODE XREF: CreateSuccessors(x,x)+26Fj
.text:000019B4                 push    0
.text:000019B6                 mov     ecx, [ebp+arg_0]
.text:000019B9                 push    ecx
.text:000019BA                 call    _AllocUnitsRare@8 ; AllocUnitsRare(x,x)
.text:000019BF                 mov     [ebp+var_13C], eax
.text:000019C5                 cmp     [ebp+var_13C], 0
.text:000019CC                 jnz     short loc_19D2
.text:000019CE                 xor     eax, eax
.text:000019D0                 jmp     short loc_1A44
.text:000019D2 ; ---------------------------------------------------------------------------
.text:000019D2
.text:000019D2 loc_19D2:                               ; CODE XREF: CreateSuccessors(x,x)+263j
.text:000019D2                                         ; CreateSuccessors(x,x)+282j ...
.text:000019D2                 mov     edx, 1
.text:000019D7                 mov     eax, [ebp+var_13C]
.text:000019DD                 mov     [eax], dx
.text:000019E0                 mov     ecx, [ebp+var_13C]
.text:000019E6                 add     ecx, 2
.text:000019E9                 mov     edx, [ebp+var_C]
.text:000019EC                 mov     [ecx], edx
.text:000019EE                 mov     ax, [ebp+var_8]
.text:000019F2                 mov     [ecx+4], ax
.text:000019F6                 mov     ecx, [ebp+var_13C]
.text:000019FC                 mov     edx, [ebp+var_14]
.text:000019FF                 mov     [ecx+8], edx
.text:00001A02                 mov     eax, [ebp+var_124]
.text:00001A08                 sub     eax, 1
.text:00001A0B                 mov     [ebp+var_124], eax
.text:00001A11                 mov     ecx, [ebp+var_13C]
.text:00001A17                 push    ecx
.text:00001A18                 mov     edx, [ebp+var_124]
.text:00001A1E                 mov     eax, [ebp+edx*4+var_11C]
.text:00001A25                 push    eax
.text:00001A26                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001A2B                 mov     ecx, [ebp+var_13C]
.text:00001A31                 mov     [ebp+var_14], ecx
.text:00001A34                 cmp     [ebp+var_124], 0
.text:00001A3B                 jnz     loc_195E
.text:00001A41                 mov     eax, [ebp+var_14]
.text:00001A44
.text:00001A44 loc_1A44:                               ; CODE XREF: CreateSuccessors(x,x)+115j
.text:00001A44                                         ; CreateSuccessors(x,x)+2A0j
.text:00001A44                 push    edx
.text:00001A45                 mov     ecx, ebp
.text:00001A47                 push    eax
.text:00001A48                 lea     edx, $LN31
.text:00001A4E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A53                 pop     eax
.text:00001A54                 pop     edx
.text:00001A55                 pop     edi
.text:00001A56                 add     esp, 144h
.text:00001A5C                 cmp     ebp, esp
.text:00001A5E                 call    __RTC_CheckEsp
.text:00001A63                 mov     esp, ebp
.text:00001A65                 pop     ebp
.text:00001A66                 retn    8
.text:00001A66 _CreateSuccessors@8 endp
.text:00001A66
.text:00001A66 ; ---------------------------------------------------------------------------
.text:00001A69                 align 4
.text:00001A6C $LN31           dd 2                    ; DATA XREF: CreateSuccessors(x,x)+318o
.text:00001A70                 dd offset $LN30
.text:00001A74 $LN30           dd 0FFFFFFF4h, 6        ; DATA XREF: .text:00001A70o
.text:00001A7C                 dd offset $LN28         ; "upState"
.text:00001A80                 dd 0FFFFFEE4h, 100h
.text:00001A88                 dd offset $LN29
.text:00001A8C $LN29           db 70h, 73h, 0          ; DATA XREF: .text:00001A88o
.text:00001A8F $LN28           db 'upState',0          ; DATA XREF: .text:00001A7Co
.text:00001A97                 align 10h
.text:00001AA0
.text:00001AA0 ; =============== S U B R O U T I N E =======================================
.text:00001AA0
.text:00001AA0 ; Attributes: bp-based frame
.text:00001AA0
.text:00001AA0 ; __stdcall Ppmd7_Update1_0(x)
.text:00001AA0                 public _Ppmd7_Update1_0@4
.text:00001AA0 _Ppmd7_Update1_0@4 proc near
.text:00001AA0
.text:00001AA0 var_4           = dword ptr -4
.text:00001AA0 arg_0           = dword ptr  8
.text:00001AA0
.text:00001AA0                 push    ebp
.text:00001AA1                 mov     ebp, esp
.text:00001AA3                 push    ecx
.text:00001AA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AAB                 mov     eax, [ebp+arg_0]
.text:00001AAE                 mov     ecx, [eax+8]
.text:00001AB1                 movzx   edx, byte ptr [ecx+1]
.text:00001AB5                 shl     edx, 1
.text:00001AB7                 mov     eax, [ebp+arg_0]
.text:00001ABA                 mov     ecx, [eax]
.text:00001ABC                 movzx   eax, word ptr [ecx+2]
.text:00001AC0                 xor     ecx, ecx
.text:00001AC2                 cmp     edx, eax
.text:00001AC4                 setnle  cl
.text:00001AC7                 mov     edx, [ebp+arg_0]
.text:00001ACA                 mov     [edx+14h], ecx
.text:00001ACD                 mov     eax, [ebp+arg_0]
.text:00001AD0                 mov     ecx, [eax+20h]
.text:00001AD3                 mov     edx, [ebp+arg_0]
.text:00001AD6                 add     ecx, [edx+14h]
.text:00001AD9                 mov     eax, [ebp+arg_0]
.text:00001ADC                 mov     [eax+20h], ecx
.text:00001ADF                 mov     ecx, [ebp+arg_0]
.text:00001AE2                 mov     edx, [ecx]
.text:00001AE4                 movzx   eax, word ptr [edx+2]
.text:00001AE8                 add     eax, 4
.text:00001AEB                 mov     ecx, [ebp+arg_0]
.text:00001AEE                 mov     edx, [ecx]
.text:00001AF0                 mov     [edx+2], ax
.text:00001AF4                 mov     eax, [ebp+arg_0]
.text:00001AF7                 mov     ecx, [eax+8]
.text:00001AFA                 movzx   edx, byte ptr [ecx+1]
.text:00001AFE                 add     edx, 4
.text:00001B01                 mov     [ebp+var_4], edx
.text:00001B04                 mov     eax, [ebp+arg_0]
.text:00001B07                 mov     ecx, [eax+8]
.text:00001B0A                 mov     dl, byte ptr [ebp+var_4]
.text:00001B0D                 mov     [ecx+1], dl
.text:00001B10                 movzx   eax, byte ptr [ebp+var_4]
.text:00001B14                 cmp     eax, 7Ch ; '|'
.text:00001B17                 jle     short loc_1B22
.text:00001B19                 mov     ecx, [ebp+arg_0]
.text:00001B1C                 push    ecx
.text:00001B1D                 call    _Rescale@4      ; Rescale(x)
.text:00001B22
.text:00001B22 loc_1B22:                               ; CODE XREF: Ppmd7_Update1_0(x)+77j
.text:00001B22                 mov     edx, [ebp+arg_0]
.text:00001B25                 push    edx
.text:00001B26                 call    _NextContext@4  ; NextContext(x)
.text:00001B2B                 add     esp, 4
.text:00001B2E                 cmp     ebp, esp
.text:00001B30                 call    __RTC_CheckEsp
.text:00001B35                 mov     esp, ebp
.text:00001B37                 pop     ebp
.text:00001B38                 retn    4
.text:00001B38 _Ppmd7_Update1_0@4 endp
.text:00001B38
.text:00001B38 ; ---------------------------------------------------------------------------
.text:00001B3B                 align 10h
.text:00001B40
.text:00001B40 ; =============== S U B R O U T I N E =======================================
.text:00001B40
.text:00001B40 ; Attributes: bp-based frame
.text:00001B40
.text:00001B40 ; __stdcall Ppmd7_UpdateBin(x)
.text:00001B40                 public _Ppmd7_UpdateBin@4
.text:00001B40 _Ppmd7_UpdateBin@4 proc near
.text:00001B40
.text:00001B40 arg_0           = dword ptr  8
.text:00001B40
.text:00001B40                 push    ebp
.text:00001B41                 mov     ebp, esp
.text:00001B43                 mov     eax, [ebp+arg_0]
.text:00001B46                 mov     ecx, [eax+8]
.text:00001B49                 movzx   edx, byte ptr [ecx+1]
.text:00001B4D                 mov     eax, [ebp+arg_0]
.text:00001B50                 mov     ecx, [eax+8]
.text:00001B53                 movzx   eax, byte ptr [ecx+1]
.text:00001B57                 xor     ecx, ecx
.text:00001B59                 cmp     eax, 80h ; 'Ã'
.text:00001B5E                 setl    cl
.text:00001B61                 add     edx, ecx
.text:00001B63                 mov     eax, [ebp+arg_0]
.text:00001B66                 mov     ecx, [eax+8]
.text:00001B69                 mov     [ecx+1], dl
.text:00001B6C                 mov     edx, [ebp+arg_0]
.text:00001B6F                 mov     dword ptr [edx+14h], 1
.text:00001B76                 mov     eax, [ebp+arg_0]
.text:00001B79                 mov     ecx, [eax+20h]
.text:00001B7C                 add     ecx, 1
.text:00001B7F                 mov     edx, [ebp+arg_0]
.text:00001B82                 mov     [edx+20h], ecx
.text:00001B85                 mov     eax, [ebp+arg_0]
.text:00001B88                 push    eax
.text:00001B89                 call    _NextContext@4  ; NextContext(x)
.text:00001B8E                 cmp     ebp, esp
.text:00001B90                 call    __RTC_CheckEsp
.text:00001B95                 pop     ebp
.text:00001B96                 retn    4
.text:00001B96 _Ppmd7_UpdateBin@4 endp
.text:00001B96
.text:00001B96 ; ---------------------------------------------------------------------------
.text:00001B99                 align 10h
.text:00001BA0
.text:00001BA0 ; =============== S U B R O U T I N E =======================================
.text:00001BA0
.text:00001BA0 ; Attributes: bp-based frame
.text:00001BA0
.text:00001BA0 ; __stdcall Ppmd7_Update2(x)
.text:00001BA0                 public _Ppmd7_Update2@4
.text:00001BA0 _Ppmd7_Update2@4 proc near
.text:00001BA0
.text:00001BA0 var_4           = dword ptr -4
.text:00001BA0 arg_0           = dword ptr  8
.text:00001BA0
.text:00001BA0                 push    ebp
.text:00001BA1                 mov     ebp, esp
.text:00001BA3                 push    ecx
.text:00001BA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BAB                 mov     eax, [ebp+arg_0]
.text:00001BAE                 mov     ecx, [eax]
.text:00001BB0                 movzx   edx, word ptr [ecx+2]
.text:00001BB4                 add     edx, 4
.text:00001BB7                 mov     eax, [ebp+arg_0]
.text:00001BBA                 mov     ecx, [eax]
.text:00001BBC                 mov     [ecx+2], dx
.text:00001BC0                 mov     edx, [ebp+arg_0]
.text:00001BC3                 mov     eax, [edx+8]
.text:00001BC6                 movzx   ecx, byte ptr [eax+1]
.text:00001BCA                 add     ecx, 4
.text:00001BCD                 mov     [ebp+var_4], ecx
.text:00001BD0                 mov     edx, [ebp+arg_0]
.text:00001BD3                 mov     eax, [edx+8]
.text:00001BD6                 mov     cl, byte ptr [ebp+var_4]
.text:00001BD9                 mov     [eax+1], cl
.text:00001BDC                 movzx   edx, byte ptr [ebp+var_4]
.text:00001BE0                 cmp     edx, 7Ch ; '|'
.text:00001BE3                 jle     short loc_1BEE
.text:00001BE5                 mov     eax, [ebp+arg_0]
.text:00001BE8                 push    eax
.text:00001BE9                 call    _Rescale@4      ; Rescale(x)
.text:00001BEE
.text:00001BEE loc_1BEE:                               ; CODE XREF: Ppmd7_Update2(x)+43j
.text:00001BEE                 mov     ecx, [ebp+arg_0]
.text:00001BF1                 mov     edx, [ebp+arg_0]
.text:00001BF4                 mov     eax, [edx+24h]
.text:00001BF7                 mov     [ecx+20h], eax
.text:00001BFA                 mov     ecx, [ebp+arg_0]
.text:00001BFD                 push    ecx
.text:00001BFE                 call    _UpdateModel@4  ; UpdateModel(x)
.text:00001C03                 add     esp, 4
.text:00001C06                 cmp     ebp, esp
.text:00001C08                 call    __RTC_CheckEsp
.text:00001C0D                 mov     esp, ebp
.text:00001C0F                 pop     ebp
.text:00001C10                 retn    4
.text:00001C10 _Ppmd7_Update2@4 endp
.text:00001C10
.text:00001C10 ; ---------------------------------------------------------------------------
.text:00001C13                 align 4
.text:00001C13 _text           ends
.text:00001C13
.rtc$TMZ:00001C14 ; ===========================================================================
.rtc$TMZ:00001C14
.rtc$TMZ:00001C14 ; Segment type: Pure data
.rtc$TMZ:00001C14 ; Segment permissions: Read
.rtc$TMZ:00001C14 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001C14                 assume cs:_rtc$TMZ
.rtc$TMZ:00001C14                 ;org 1C14h
.rtc$TMZ:00001C14 ; COMDAT (pick any)
.rtc$TMZ:00001C14 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001C14 _rtc$TMZ        ends
.rtc$TMZ:00001C14
.rtc$IMZ:00001C18 ; ===========================================================================
.rtc$IMZ:00001C18
.rtc$IMZ:00001C18 ; Segment type: Pure data
.rtc$IMZ:00001C18 ; Segment permissions: Read
.rtc$IMZ:00001C18 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001C18                 assume cs:_rtc$IMZ
.rtc$IMZ:00001C18                 ;org 1C18h
.rtc$IMZ:00001C18 ; COMDAT (pick any)
.rtc$IMZ:00001C18 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001C18 _rtc$IMZ        ends
.rtc$IMZ:00001C18
UNDEF:00001C20 ; ===========================================================================
UNDEF:00001C20
UNDEF:00001C20 ; Segment type: Externs
UNDEF:00001C20 ; UNDEF
UNDEF:00001C20 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00001C20                 extrn _memset:near      ; CODE XREF: Ppmd7_Construct(x)+B3p
UNDEF:00001C20                                         ; Ppmd7_Construct(x)+CCp ...
UNDEF:00001C24                 extrn __RTC_CheckEsp:near
UNDEF:00001C24                                         ; CODE XREF: Ppmd7_Construct(x)+17Fp
UNDEF:00001C24                                         ; Ppmd7_Free(x,x)+1Bp ...
UNDEF:00001C28                 extrn __RTC_Shutdown:near
UNDEF:00001C28                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001C2C                 extrn __RTC_InitBase:near
UNDEF:00001C2C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001C30 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001C30                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001C30                                         ; CODE XREF: SwapStates(x,x)+53p
UNDEF:00001C30                                         ; Rescale(x)+2C4p ...
UNDEF:00001C30
UNDEF:00001C30
UNDEF:00001C30                 end