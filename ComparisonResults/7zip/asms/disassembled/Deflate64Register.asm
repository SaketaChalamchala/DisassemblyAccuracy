.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : BCDD4D2584B61B3EF1705422ABD7D898
.rdata:00000000 ; Input CRC32 : 34113E72
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Deflate64Register.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67708        db 'Deflate64',0        ; DATA XREF: .rdata:00000020o
.rdata:0000000A                 align 10h
.rdata:00000010 ; struct CCodecInfo g_CodecInfo
.rdata:00000010 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000010                                         ; DATA XREF: CRegisterCodecDeflate64::CRegisterCodecDeflate64(void)+Eo
.rdata:00000010                                         ; CreateDec(void)
.rdata:00000014                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000018                 db    9
.rdata:00000019                 db    1
.rdata:0000001A                 db    4
.rdata:0000001B                 db    0
.rdata:0000001C                 db    0
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 dd offset $SG67708      ; "Deflate64"
.rdata:00000024                 db    1
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    0
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C                 db    0
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:0000002F _rdata          ends
.rdata:0000002F
.text:00000030 ; ===========================================================================
.text:00000030
.text:00000030 ; Segment type: Pure code
.text:00000030 ; Segment permissions: Read/Execute
.text:00000030 _text           segment para public 'CODE' use32
.text:00000030                 assume cs:_text
.text:00000030                 ;org 30h
.text:00000030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; void * __stdcall CreateDec(void)
.text:00000030 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000030
.text:00000030 var_18          = dword ptr -18h
.text:00000030 var_14          = dword ptr -14h
.text:00000030 var_10          = dword ptr -10h
.text:00000030 var_C           = dword ptr -0Ch
.text:00000030 var_4           = dword ptr -4
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 push    0FFFFFFFFh
.text:00000035                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:0000003A                 mov     eax, large fs:0
.text:00000040                 push    eax
.text:00000041                 sub     esp, 0Ch
.text:00000044                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000004B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000052                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000059                 mov     eax, dword ptr ds:___security_cookie
.text:0000005E                 xor     eax, ebp
.text:00000060                 push    eax
.text:00000061                 lea     eax, [ebp+var_C]
.text:00000064                 mov     large fs:0, eax
.text:0000006A                 push    0D70h           ; unsigned int
.text:0000006F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000074                 add     esp, 4
.text:00000077                 mov     [ebp+var_14], eax
.text:0000007A                 mov     [ebp+var_4], 0
.text:00000081                 cmp     [ebp+var_14], 0
.text:00000085                 jz      short loc_94
.text:00000087                 mov     ecx, [ebp+var_14] ; this
.text:0000008A                 call    ??0CCOMCoder64@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)
.text:0000008F                 mov     [ebp+var_18], eax
.text:00000092                 jmp     short loc_9B
.text:00000094 ; ---------------------------------------------------------------------------
.text:00000094
.text:00000094 loc_94:                                 ; CODE XREF: CreateDec(void)+55j
.text:00000094                 mov     [ebp+var_18], 0
.text:0000009B
.text:0000009B loc_9B:                                 ; CODE XREF: CreateDec(void)+62j
.text:0000009B                 mov     eax, [ebp+var_18]
.text:0000009E                 mov     [ebp+var_10], eax
.text:000000A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A8                 mov     eax, [ebp+var_10]
.text:000000AB                 mov     ecx, [ebp+var_C]
.text:000000AE                 mov     large fs:0, ecx
.text:000000B5                 pop     ecx
.text:000000B6                 add     esp, 18h
.text:000000B9                 cmp     ebp, esp
.text:000000BB                 call    __RTC_CheckEsp
.text:000000C0                 mov     esp, ebp
.text:000000C2                 pop     ebp
.text:000000C3                 retn
.text:000000C3 ?CreateDec@@YGPAXXZ endp
.text:000000C3
.text:000000C3 ; ---------------------------------------------------------------------------
.text:000000C4                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; void * __stdcall CreateEnc(void)
.text:000000D0 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:00000014o
.text:000000D0
.text:000000D0 var_18          = dword ptr -18h
.text:000000D0 var_14          = dword ptr -14h
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_C           = dword ptr -0Ch
.text:000000D0 var_4           = dword ptr -4
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    0FFFFFFFFh
.text:000000D5                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:000000DA                 mov     eax, large fs:0
.text:000000E0                 push    eax
.text:000000E1                 sub     esp, 0Ch
.text:000000E4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000EB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F9                 mov     eax, dword ptr ds:___security_cookie
.text:000000FE                 xor     eax, ebp
.text:00000100                 push    eax
.text:00000101                 lea     eax, [ebp+var_C]
.text:00000104                 mov     large fs:0, eax
.text:0000010A                 push    9B00h           ; unsigned int
.text:0000010F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000114                 add     esp, 4
.text:00000117                 mov     [ebp+var_14], eax
.text:0000011A                 mov     [ebp+var_4], 0
.text:00000121                 cmp     [ebp+var_14], 0
.text:00000125                 jz      short loc_134
.text:00000127                 mov     ecx, [ebp+var_14] ; this
.text:0000012A                 call    ??0CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)
.text:0000012F                 mov     [ebp+var_18], eax
.text:00000132                 jmp     short loc_13B
.text:00000134 ; ---------------------------------------------------------------------------
.text:00000134
.text:00000134 loc_134:                                ; CODE XREF: CreateEnc(void)+55j
.text:00000134                 mov     [ebp+var_18], 0
.text:0000013B
.text:0000013B loc_13B:                                ; CODE XREF: CreateEnc(void)+62j
.text:0000013B                 mov     eax, [ebp+var_18]
.text:0000013E                 mov     [ebp+var_10], eax
.text:00000141                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000148                 mov     eax, [ebp+var_10]
.text:0000014B                 mov     ecx, [ebp+var_C]
.text:0000014E                 mov     large fs:0, ecx
.text:00000155                 pop     ecx
.text:00000156                 add     esp, 18h
.text:00000159                 cmp     ebp, esp
.text:0000015B                 call    __RTC_CheckEsp
.text:00000160                 mov     esp, ebp
.text:00000162                 pop     ebp
.text:00000163                 retn
.text:00000163 ?CreateEnc@@YGPAXXZ endp
.text:00000163
.text:00000163 _text           ends
.text:00000163
.text$x:00000164 ; ===========================================================================
.text$x:00000164
.text$x:00000164 ; Segment type: Pure code
.text$x:00000164 ; Segment permissions: Read/Execute
.text$x:00000164 _text$x         segment para public 'CODE' use32
.text$x:00000164                 assume cs:_text$x
.text$x:00000164                 ;org 164h
.text$x:00000164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000164
.text$x:00000164 ; =============== S U B R O U T I N E =======================================
.text$x:00000164
.text$x:00000164
.text$x:00000164 __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:00000164                                         ; DATA XREF: .xdata$x:000001B4o
.text$x:00000164                 mov     eax, [ebp-14h]
.text$x:00000167                 push    eax             ; void *
.text$x:00000168                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000016D                 pop     ecx
.text$x:0000016E                 retn
.text$x:0000016E __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:0000016E
.text$x:0000016F
.text$x:0000016F ; =============== S U B R O U T I N E =======================================
.text$x:0000016F
.text$x:0000016F
.text$x:0000016F __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:0000016F
.text$x:0000016F arg_4           = dword ptr  8
.text$x:0000016F
.text$x:0000016F                 mov     edx, [esp+arg_4]
.text$x:00000173                 lea     eax, [edx+0Ch]
.text$x:00000176                 mov     ecx, [edx-10h]
.text$x:00000179                 xor     ecx, eax
.text$x:0000017B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000180                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:00000185                 jmp     ___CxxFrameHandler3
.text$x:00000185 __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:00000185
.text$x:0000018A
.text$x:0000018A ; =============== S U B R O U T I N E =======================================
.text$x:0000018A
.text$x:0000018A
.text$x:0000018A __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:0000018A                                         ; DATA XREF: .xdata$x:000001E0o
.text$x:0000018A                 mov     eax, [ebp-14h]
.text$x:0000018D                 push    eax             ; void *
.text$x:0000018E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000193                 pop     ecx
.text$x:00000194                 retn
.text$x:00000194 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:00000194
.text$x:00000195
.text$x:00000195 ; =============== S U B R O U T I N E =======================================
.text$x:00000195
.text$x:00000195
.text$x:00000195 __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:00000195
.text$x:00000195 arg_4           = dword ptr  8
.text$x:00000195
.text$x:00000195                 mov     edx, [esp+arg_4]
.text$x:00000199                 lea     eax, [edx+0Ch]
.text$x:0000019C                 mov     ecx, [edx-10h]
.text$x:0000019F                 xor     ecx, eax
.text$x:000001A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000001A6                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:000001AB                 jmp     ___CxxFrameHandler3
.text$x:000001AB __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:000001AB
.text$x:000001AB _text$x         ends
.text$x:000001AB
.xdata$x:000001B0 ; ===========================================================================
.xdata$x:000001B0
.xdata$x:000001B0 ; Segment type: Pure data
.xdata$x:000001B0 ; Segment permissions: Read
.xdata$x:000001B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001B0                 assume cs:_xdata$x
.xdata$x:000001B0                 ;org 1B0h
.xdata$x:000001B0 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001C0o
.xdata$x:000001B1                 db 0FFh
.xdata$x:000001B2                 db 0FFh
.xdata$x:000001B3                 db 0FFh
.xdata$x:000001B4                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:000001B8 __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:000001B8                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:000001B9                 db    5
.xdata$x:000001BA                 db  93h ; ô
.xdata$x:000001BB                 db  19h
.xdata$x:000001BC                 db    1
.xdata$x:000001BD                 db    0
.xdata$x:000001BE                 db    0
.xdata$x:000001BF                 db    0
.xdata$x:000001C0                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:000001C4                 db    0
.xdata$x:000001C5                 db    0
.xdata$x:000001C6                 db    0
.xdata$x:000001C7                 db    0
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    0
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4                 db    0
.xdata$x:000001D5                 db    0
.xdata$x:000001D6                 db    0
.xdata$x:000001D7                 db    0
.xdata$x:000001D8                 db    1
.xdata$x:000001D9                 db    0
.xdata$x:000001DA                 db    0
.xdata$x:000001DB                 db    0
.xdata$x:000001DC __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001ECo
.xdata$x:000001DD                 db 0FFh
.xdata$x:000001DE                 db 0FFh
.xdata$x:000001DF                 db 0FFh
.xdata$x:000001E0                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:000001E4 __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:000001E4                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:000001E5                 db    5
.xdata$x:000001E6                 db  93h ; ô
.xdata$x:000001E7                 db  19h
.xdata$x:000001E8                 db    1
.xdata$x:000001E9                 db    0
.xdata$x:000001EA                 db    0
.xdata$x:000001EB                 db    0
.xdata$x:000001EC                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:000001F0                 db    0
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    0
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:00000200                 db    0
.xdata$x:00000201                 db    0
.xdata$x:00000202                 db    0
.xdata$x:00000203                 db    0
.xdata$x:00000204                 db    1
.xdata$x:00000205                 db    0
.xdata$x:00000206                 db    0
.xdata$x:00000207                 db    0
.xdata$x:00000207 _xdata$x        ends
.xdata$x:00000207
.rtc$TMZ:00000208 ; ===========================================================================
.rtc$TMZ:00000208
.rtc$TMZ:00000208 ; Segment type: Pure data
.rtc$TMZ:00000208 ; Segment permissions: Read
.rtc$TMZ:00000208 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000208                 assume cs:_rtc$TMZ
.rtc$TMZ:00000208                 ;org 208h
.rtc$TMZ:00000208 ; COMDAT (pick any)
.rtc$TMZ:00000208 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000208 _rtc$TMZ        ends
.rtc$TMZ:00000208
.rtc$IMZ:0000020C ; ===========================================================================
.rtc$IMZ:0000020C
.rtc$IMZ:0000020C ; Segment type: Pure data
.rtc$IMZ:0000020C ; Segment permissions: Read
.rtc$IMZ:0000020C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000020C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000020C                 ;org 20Ch
.rtc$IMZ:0000020C ; COMDAT (pick any)
.rtc$IMZ:0000020C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000020C _rtc$IMZ        ends
.rtc$IMZ:0000020C
.text:00000210 ; ===========================================================================
.text:00000210
.text:00000210 ; Segment type: Pure code
.text:00000210 ; Segment permissions: Read/Execute
.text:00000210 _text           segment para public 'CODE' use32
.text:00000210                 assume cs:_text
.text:00000210                 ;org 210h
.text:00000210 ; COMDAT (pick any)
.text:00000210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(NCompress::NDeflate::NDecoder::CCOMCoder64 *__hidden this)
.text:00000210                 public ??0CCOMCoder64@NDecoder@NDeflate@NCompress@@QAE@XZ
.text:00000210 ??0CCOMCoder64@NDecoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00000210                                         ; CODE XREF: CreateDec(void)+5Ap
.text:00000210
.text:00000210 var_4           = dword ptr -4
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 push    ecx
.text:00000214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000021B                 mov     [ebp+var_4], ecx
.text:0000021E                 push    0               ; bool
.text:00000220                 push    1               ; bool
.text:00000222                 mov     ecx, [ebp+var_4] ; this
.text:00000225                 call    ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z ; NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)
.text:0000022A                 mov     eax, [ebp+var_4]
.text:0000022D                 mov     dword ptr [eax], offset ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressCoder'}
.text:00000233                 mov     ecx, [ebp+var_4]
.text:00000236                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:0000023D                 mov     edx, [ebp+var_4]
.text:00000240                 mov     dword ptr [edx+8], offset ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetInStream'}
.text:00000247                 mov     eax, [ebp+var_4]
.text:0000024A                 mov     dword ptr [eax+0Ch], offset ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000251                 mov     ecx, [ebp+var_4]
.text:00000254                 mov     dword ptr [ecx+10h], offset ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ISequentialInStream'}
.text:0000025B                 mov     eax, [ebp+var_4]
.text:0000025E                 add     esp, 4
.text:00000261                 cmp     ebp, esp
.text:00000263                 call    __RTC_CheckEsp
.text:00000268                 mov     esp, ebp
.text:0000026A                 pop     ebp
.text:0000026B                 retn
.text:0000026B ??0CCOMCoder64@NDecoder@NDeflate@NCompress@@QAE@XZ endp
.text:0000026B
.text:0000026B _text           ends
.text:0000026B
.rdata:0000026C ; ===========================================================================
.rdata:0000026C
.rdata:0000026C ; Segment type: Pure data
.rdata:0000026C ; Segment permissions: Read
.rdata:0000026C _rdata          segment dword public 'DATA' use32
.rdata:0000026C                 assume cs:_rdata
.rdata:0000026C                 ;org 26Ch
.rdata:0000026C ; COMDAT (pick largest)
.rdata:0000026C                 dd offset ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000270                 public ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00000270 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ISequentialInStream'}
.rdata:00000270 ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000270                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+44o
.rdata:00000270                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000274                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00000278                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:0000027C                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:0000027C _rdata          ends
.rdata:0000027C
.rdata:00000280 ; ===========================================================================
.rdata:00000280
.rdata:00000280 ; Segment type: Pure data
.rdata:00000280 ; Segment permissions: Read
.rdata:00000280 _rdata          segment dword public 'DATA' use32
.rdata:00000280                 assume cs:_rdata
.rdata:00000280                 ;org 280h
.rdata:00000280 ; COMDAT (pick largest)
.rdata:00000280                 dd offset ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000284                 public ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000284 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000284 ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000284                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+3Ao
.rdata:00000284                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000288                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:0000028C                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00000290                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000290 _rdata          ends
.rdata:00000290
.rdata:00000294 ; ===========================================================================
.rdata:00000294
.rdata:00000294 ; Segment type: Pure data
.rdata:00000294 ; Segment permissions: Read
.rdata:00000294 _rdata          segment dword public 'DATA' use32
.rdata:00000294                 assume cs:_rdata
.rdata:00000294                 ;org 294h
.rdata:00000294 ; COMDAT (pick largest)
.rdata:00000294                 dd offset ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000298                 public ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00000298 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetInStream'}
.rdata:00000298 ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000298                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+30o
.rdata:00000298                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000029C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:000002A0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:000002A4                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:000002A8                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:000002A8 _rdata          ends
.rdata:000002A8
.rdata:000002AC ; ===========================================================================
.rdata:000002AC
.rdata:000002AC ; Segment type: Pure data
.rdata:000002AC ; Segment permissions: Read
.rdata:000002AC _rdata          segment dword public 'DATA' use32
.rdata:000002AC                 assume cs:_rdata
.rdata:000002AC                 ;org 2ACh
.rdata:000002AC ; COMDAT (pick largest)
.rdata:000002AC                 dd offset ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000002B0                 public ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000002B0 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000002B0 ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000002B0                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+26o
.rdata:000002B0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000002B4                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:000002B8                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:000002BC                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000002BC _rdata          ends
.rdata:000002BC
.rdata:000002C0 ; ===========================================================================
.rdata:000002C0
.rdata:000002C0 ; Segment type: Pure data
.rdata:000002C0 ; Segment permissions: Read
.rdata:000002C0 _rdata          segment dword public 'DATA' use32
.rdata:000002C0                 assume cs:_rdata
.rdata:000002C0                 ;org 2C0h
.rdata:000002C0 ; COMDAT (pick largest)
.rdata:000002C0                 dd offset ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000002C4                 public ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:000002C4 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressCoder'}
.rdata:000002C4 ??_7CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000002C4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+1Do
.rdata:000002C4                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:000002C8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:000002CC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:000002D0                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000002D4                 dd offset ??_ECCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCOMCoder64::`vector deleting destructor'(uint)
.rdata:000002D8                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000002D8 _rdata          ends
.rdata:000002D8
.rdata$r:000002DC ; ===========================================================================
.rdata$r:000002DC
.rdata$r:000002DC ; Segment type: Pure data
.rdata$r:000002DC ; Segment permissions: Read
.rdata$r:000002DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002DC                 assume cs:_rdata$r
.rdata$r:000002DC                 ;org 2DCh
.rdata$r:000002DC ; COMDAT (pick any)
.rdata$r:000002DC                 public ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:000002DC ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000002DC ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000002DC                                         ; DATA XREF: .rdata:000002C0o
.rdata$r:000002DD                 db    0
.rdata$r:000002DE                 db    0
.rdata$r:000002DF                 db    0
.rdata$r:000002E0                 db    0
.rdata$r:000002E1                 db    0
.rdata$r:000002E2                 db    0
.rdata$r:000002E3                 db    0
.rdata$r:000002E4                 db    0
.rdata$r:000002E5                 db    0
.rdata$r:000002E6                 db    0
.rdata$r:000002E7                 db    0
.rdata$r:000002E8                 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:000002EC                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002EC _rdata$r        ends
.rdata$r:000002EC
.data:000002F0 ; ===========================================================================
.data:000002F0
.data:000002F0 ; Segment type: Pure data
.data:000002F0 ; Segment permissions: Read/Write
.data:000002F0 _data           segment dword public 'DATA' use32
.data:000002F0                 assume cs:_data
.data:000002F0                 ;org 2F0h
.data:000002F0 ; COMDAT (pick any)
.data:000002F0                 public ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8
.data:000002F0 ; class NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.data:000002F0 ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000002F0                                         ; DATA XREF: .rdata$r:000002E8o
.data:000002F0                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000002F0                                         ; const type_info::`vftable'
.data:000002F4                 align 8
.data:000002F8 a_?avccomcoder6 db '.?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@',0
.data:00000326                 align 4
.data:00000326 _data           ends
.data:00000326
.rdata$r:00000328 ; ===========================================================================
.rdata$r:00000328
.rdata$r:00000328 ; Segment type: Pure data
.rdata$r:00000328 ; Segment permissions: Read
.rdata$r:00000328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000328                 assume cs:_rdata$r
.rdata$r:00000328                 ;org 328h
.rdata$r:00000328 ; COMDAT (pick any)
.rdata$r:00000328                 public ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000328 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000328 ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:00000328                                         ; DATA XREF: .rdata$r:000002ECo
.rdata$r:00000328                                         ; .rdata$r:00000388o ...
.rdata$r:00000329                 db    0
.rdata$r:0000032A                 db    0
.rdata$r:0000032B                 db    0
.rdata$r:0000032C                 db    1
.rdata$r:0000032D                 db    0
.rdata$r:0000032E                 db    0
.rdata$r:0000032F                 db    0
.rdata$r:00000330                 db  0Dh
.rdata$r:00000331                 db    0
.rdata$r:00000332                 db    0
.rdata$r:00000333                 db    0
.rdata$r:00000334                 dd offset ??_R2CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Array'
.rdata$r:00000334 _rdata$r        ends
.rdata$r:00000334
.rdata$r:00000338 ; ===========================================================================
.rdata$r:00000338
.rdata$r:00000338 ; Segment type: Pure data
.rdata$r:00000338 ; Segment permissions: Read
.rdata$r:00000338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000338                 assume cs:_rdata$r
.rdata$r:00000338                 ;org 338h
.rdata$r:00000338 ; COMDAT (pick any)
.rdata$r:00000338                 public ??_R2CCOMCoder64@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000338 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Array'
.rdata$r:00000338 ??_R2CCOMCoder64@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder64@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000338                                         ; DATA XREF: .rdata$r:00000334o
.rdata$r:00000338                                         ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000033C                 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000340                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000344                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000348                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000034C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000350                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000354                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000358                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000035C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000360                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000364                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00000368                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:0000036C                 db    0
.rdata$r:0000036D                 align 10h
.rdata$r:0000036D _rdata$r        ends
.rdata$r:0000036D
.rdata$r:00000370 ; ===========================================================================
.rdata$r:00000370
.rdata$r:00000370 ; Segment type: Pure data
.rdata$r:00000370 ; Segment permissions: Read
.rdata$r:00000370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000370                 assume cs:_rdata$r
.rdata$r:00000370                 ;org 370h
.rdata$r:00000370 ; COMDAT (pick any)
.rdata$r:00000370                 public ??_R1A@?0A@EA@CCOMCoder64@NDecoder@NDeflate@NCompress@@8
.rdata$r:00000370 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000370 ??_R1A@?0A@EA@CCOMCoder64@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00000370                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Base Class Array'o
.rdata$r:00000370                                         ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:00000374                 db  0Ch
.rdata$r:00000375                 db    0
.rdata$r:00000376                 db    0
.rdata$r:00000377                 db    0
.rdata$r:00000378                 db    0
.rdata$r:00000379                 db    0
.rdata$r:0000037A                 db    0
.rdata$r:0000037B                 db    0
.rdata$r:0000037C                 db 0FFh
.rdata$r:0000037D                 db 0FFh
.rdata$r:0000037E                 db 0FFh
.rdata$r:0000037F                 db 0FFh
.rdata$r:00000380                 db    0
.rdata$r:00000381                 db    0
.rdata$r:00000382                 db    0
.rdata$r:00000383                 db    0
.rdata$r:00000384                 db  40h ; @
.rdata$r:00000385                 db    0
.rdata$r:00000386                 db    0
.rdata$r:00000387                 db    0
.rdata$r:00000388                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000388 _rdata$r        ends
.rdata$r:00000388
.rdata$r:0000038C ; ===========================================================================
.rdata$r:0000038C
.rdata$r:0000038C ; Segment type: Pure data
.rdata$r:0000038C ; Segment permissions: Read
.rdata$r:0000038C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000038C                 assume cs:_rdata$r
.rdata$r:0000038C                 ;org 38Ch
.rdata$r:0000038C ; COMDAT (pick any)
.rdata$r:0000038C                 public ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000038C ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000038C ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:0000038C                                         ; DATA XREF: .rdata$r:0000033Co
.rdata$r:0000038C                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:0000038C                                         ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000390                 db  0Bh
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 db    0
.rdata$r:00000395                 db    0
.rdata$r:00000396                 db    0
.rdata$r:00000397                 db    0
.rdata$r:00000398                 db 0FFh
.rdata$r:00000399                 db 0FFh
.rdata$r:0000039A                 db 0FFh
.rdata$r:0000039B                 db 0FFh
.rdata$r:0000039C                 db    0
.rdata$r:0000039D                 db    0
.rdata$r:0000039E                 db    0
.rdata$r:0000039F                 db    0
.rdata$r:000003A0                 db  40h ; @
.rdata$r:000003A1                 db    0
.rdata$r:000003A2                 db    0
.rdata$r:000003A3                 db    0
.rdata$r:000003A4                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003A4 _rdata$r        ends
.rdata$r:000003A4
.data:000003A8 ; ===========================================================================
.data:000003A8
.data:000003A8 ; Segment type: Pure data
.data:000003A8 ; Segment permissions: Read/Write
.data:000003A8 _data           segment dword public 'DATA' use32
.data:000003A8                 assume cs:_data
.data:000003A8                 ;org 3A8h
.data:000003A8 ; COMDAT (pick any)
.data:000003A8                 public ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.data:000003A8 ; class NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.data:000003A8 ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000003A8                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003A8                                         ; .rdata$r:00000C3Co ...
.data:000003A8                                         ; const type_info::`vftable'
.data:000003AC                 align 10h
.data:000003B0 a_?avccoder@nde db '.?AVCCoder@NDecoder@NDeflate@NCompress@@',0
.data:000003D9                 align 4
.data:000003D9 _data           ends
.data:000003D9
.rdata$r:000003DC ; ===========================================================================
.rdata$r:000003DC
.rdata$r:000003DC ; Segment type: Pure data
.rdata$r:000003DC ; Segment permissions: Read
.rdata$r:000003DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003DC                 assume cs:_rdata$r
.rdata$r:000003DC                 ;org 3DCh
.rdata$r:000003DC ; COMDAT (pick any)
.rdata$r:000003DC                 public ??_R3CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003DC ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003DC ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:000003DC                                         ; DATA XREF: .rdata$r:000003A4o
.rdata$r:000003DC                                         ; .rdata$r:00000C40o ...
.rdata$r:000003DD                 db    0
.rdata$r:000003DE                 db    0
.rdata$r:000003DF                 db    0
.rdata$r:000003E0                 db    5
.rdata$r:000003E1                 db    0
.rdata$r:000003E2                 db    0
.rdata$r:000003E3                 db    0
.rdata$r:000003E4                 db  0Ch
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 dd offset ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000003E8 _rdata$r        ends
.rdata$r:000003E8
.rdata$r:000003EC ; ===========================================================================
.rdata$r:000003EC
.rdata$r:000003EC ; Segment type: Pure data
.rdata$r:000003EC ; Segment permissions: Read
.rdata$r:000003EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003EC                 assume cs:_rdata$r
.rdata$r:000003EC                 ;org 3ECh
.rdata$r:000003EC ; COMDAT (pick any)
.rdata$r:000003EC                 public ??_R2CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003EC ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000003EC ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000003EC                                         ; DATA XREF: .rdata$r:000003E8o
.rdata$r:000003EC                                         ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003F0                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003F4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000003F8                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000003FC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000400                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000404                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000408                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000040C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000410                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000414                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00000418                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:0000041C                 db    0
.rdata$r:0000041D                 align 10h
.rdata$r:0000041D _rdata$r        ends
.rdata$r:0000041D
.rdata$r:00000420 ; ===========================================================================
.rdata$r:00000420
.rdata$r:00000420 ; Segment type: Pure data
.rdata$r:00000420 ; Segment permissions: Read
.rdata$r:00000420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000420                 assume cs:_rdata$r
.rdata$r:00000420                 ;org 420h
.rdata$r:00000420 ; COMDAT (pick any)
.rdata$r:00000420                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000420 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000420 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000420                                         ; DATA XREF: .rdata$r:00000340o
.rdata$r:00000420                                         ; .rdata$r:000003F0o ...
.rdata$r:00000420                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000424                 db    1
.rdata$r:00000425                 db    0
.rdata$r:00000426                 db    0
.rdata$r:00000427                 db    0
.rdata$r:00000428                 db    0
.rdata$r:00000429                 db    0
.rdata$r:0000042A                 db    0
.rdata$r:0000042B                 db    0
.rdata$r:0000042C                 db 0FFh
.rdata$r:0000042D                 db 0FFh
.rdata$r:0000042E                 db 0FFh
.rdata$r:0000042F                 db 0FFh
.rdata$r:00000430                 db    0
.rdata$r:00000431                 db    0
.rdata$r:00000432                 db    0
.rdata$r:00000433                 db    0
.rdata$r:00000434                 db  40h ; @
.rdata$r:00000435                 db    0
.rdata$r:00000436                 db    0
.rdata$r:00000437                 db    0
.rdata$r:00000438                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000438 _rdata$r        ends
.rdata$r:00000438
.data:0000043C ; ===========================================================================
.data:0000043C
.data:0000043C ; Segment type: Pure data
.data:0000043C ; Segment permissions: Read/Write
.data:0000043C _data           segment dword public 'DATA' use32
.data:0000043C                 assume cs:_data
.data:0000043C                 ;org 43Ch
.data:0000043C ; COMDAT (pick any)
.data:0000043C                 public ??_R0?AUICompressCoder@@@8
.data:0000043C ; struct ICompressCoder `RTTI Type Descriptor'
.data:0000043C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000043C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000043C                                         ; .rdata$r:00001050o
.data:0000043C                                         ; const type_info::`vftable'
.data:00000440                 db    0
.data:00000441                 db    0
.data:00000442                 db    0
.data:00000443                 db    0
.data:00000444                 db  2Eh ; .
.data:00000445                 db  3Fh ; ?
.data:00000446                 db  41h ; A
.data:00000447                 db  55h ; U
.data:00000448                 db  49h ; I
.data:00000449                 db  43h ; C
.data:0000044A                 db  6Fh ; o
.data:0000044B                 db  6Dh ; m
.data:0000044C                 db  70h ; p
.data:0000044D                 db  72h ; r
.data:0000044E                 db  65h ; e
.data:0000044F                 db  73h ; s
.data:00000450                 db  73h ; s
.data:00000451                 db  43h ; C
.data:00000452                 db  6Fh ; o
.data:00000453                 db  64h ; d
.data:00000454                 db  65h ; e
.data:00000455                 db  72h ; r
.data:00000456                 db  40h ; @
.data:00000457                 db  40h ; @
.data:00000458                 db    0
.data:00000459                 align 4
.data:00000459 _data           ends
.data:00000459
.rdata$r:0000045C ; ===========================================================================
.rdata$r:0000045C
.rdata$r:0000045C ; Segment type: Pure data
.rdata$r:0000045C ; Segment permissions: Read
.rdata$r:0000045C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000045C                 assume cs:_rdata$r
.rdata$r:0000045C                 ;org 45Ch
.rdata$r:0000045C ; COMDAT (pick any)
.rdata$r:0000045C                 public ??_R3ICompressCoder@@8
.rdata$r:0000045C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000045C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000438o
.rdata$r:0000045C                                         ; .rdata$r:00001054o
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 db    0
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 db    2
.rdata$r:00000465                 db    0
.rdata$r:00000466                 db    0
.rdata$r:00000467                 db    0
.rdata$r:00000468                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000468 _rdata$r        ends
.rdata$r:00000468
.rdata$r:0000046C ; ===========================================================================
.rdata$r:0000046C
.rdata$r:0000046C ; Segment type: Pure data
.rdata$r:0000046C ; Segment permissions: Read
.rdata$r:0000046C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000046C                 assume cs:_rdata$r
.rdata$r:0000046C                 ;org 46Ch
.rdata$r:0000046C ; COMDAT (pick any)
.rdata$r:0000046C                 public ??_R2ICompressCoder@@8
.rdata$r:0000046C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000046C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000046C                                         ; DATA XREF: .rdata$r:00000468o
.rdata$r:0000046C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000470                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000474                 db    0
.rdata$r:00000475                 align 4
.rdata$r:00000475 _rdata$r        ends
.rdata$r:00000475
.rdata$r:00000478 ; ===========================================================================
.rdata$r:00000478
.rdata$r:00000478 ; Segment type: Pure data
.rdata$r:00000478 ; Segment permissions: Read
.rdata$r:00000478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000478                 assume cs:_rdata$r
.rdata$r:00000478                 ;org 478h
.rdata$r:00000478 ; COMDAT (pick any)
.rdata$r:00000478                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000478 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000478 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000478                                         ; DATA XREF: .rdata$r:00000470o
.rdata$r:00000478                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000478                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000047C                 db    0
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 db    0
.rdata$r:00000481                 db    0
.rdata$r:00000482                 db    0
.rdata$r:00000483                 db    0
.rdata$r:00000484                 db 0FFh
.rdata$r:00000485                 db 0FFh
.rdata$r:00000486                 db 0FFh
.rdata$r:00000487                 db 0FFh
.rdata$r:00000488                 db    0
.rdata$r:00000489                 db    0
.rdata$r:0000048A                 db    0
.rdata$r:0000048B                 db    0
.rdata$r:0000048C                 db  40h ; @
.rdata$r:0000048D                 db    0
.rdata$r:0000048E                 db    0
.rdata$r:0000048F                 db    0
.rdata$r:00000490                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000490 _rdata$r        ends
.rdata$r:00000490
.data:00000494 ; ===========================================================================
.data:00000494
.data:00000494 ; Segment type: Pure data
.data:00000494 ; Segment permissions: Read/Write
.data:00000494 _data           segment dword public 'DATA' use32
.data:00000494                 assume cs:_data
.data:00000494                 ;org 494h
.data:00000494 ; COMDAT (pick any)
.data:00000494                 public ??_R0?AUIUnknown@@@8
.data:00000494 ; struct IUnknown `RTTI Type Descriptor'
.data:00000494 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000494                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000494                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000494                                         ; const type_info::`vftable'
.data:00000498                 db    0
.data:00000499                 db    0
.data:0000049A                 db    0
.data:0000049B                 db    0
.data:0000049C                 db  2Eh ; .
.data:0000049D                 db  3Fh ; ?
.data:0000049E                 db  41h ; A
.data:0000049F                 db  55h ; U
.data:000004A0                 db  49h ; I
.data:000004A1                 db  55h ; U
.data:000004A2                 db  6Eh ; n
.data:000004A3                 db  6Bh ; k
.data:000004A4                 db  6Eh ; n
.data:000004A5                 db  6Fh ; o
.data:000004A6                 db  77h ; w
.data:000004A7                 db  6Eh ; n
.data:000004A8                 db  40h ; @
.data:000004A9                 db  40h ; @
.data:000004AA                 db    0
.data:000004AB                 align 4
.data:000004AB _data           ends
.data:000004AB
.rdata$r:000004AC ; ===========================================================================
.rdata$r:000004AC
.rdata$r:000004AC ; Segment type: Pure data
.rdata$r:000004AC ; Segment permissions: Read
.rdata$r:000004AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004AC                 assume cs:_rdata$r
.rdata$r:000004AC                 ;org 4ACh
.rdata$r:000004AC ; COMDAT (pick any)
.rdata$r:000004AC                 public ??_R3IUnknown@@8
.rdata$r:000004AC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004AC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000490o
.rdata$r:000004AC                                         ; .rdata$r:000004DCo ...
.rdata$r:000004AD                 db    0
.rdata$r:000004AE                 db    0
.rdata$r:000004AF                 db    0
.rdata$r:000004B0                 db    0
.rdata$r:000004B1                 db    0
.rdata$r:000004B2                 db    0
.rdata$r:000004B3                 db    0
.rdata$r:000004B4                 db    1
.rdata$r:000004B5                 db    0
.rdata$r:000004B6                 db    0
.rdata$r:000004B7                 db    0
.rdata$r:000004B8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004B8 _rdata$r        ends
.rdata$r:000004B8
.rdata$r:000004BC ; ===========================================================================
.rdata$r:000004BC
.rdata$r:000004BC ; Segment type: Pure data
.rdata$r:000004BC ; Segment permissions: Read
.rdata$r:000004BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004BC                 assume cs:_rdata$r
.rdata$r:000004BC                 ;org 4BCh
.rdata$r:000004BC ; COMDAT (pick any)
.rdata$r:000004BC                 public ??_R2IUnknown@@8
.rdata$r:000004BC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004BC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004BC                                         ; DATA XREF: .rdata$r:000004B8o
.rdata$r:000004BC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004C0                 db    0
.rdata$r:000004C1                 align 4
.rdata$r:000004C1 _rdata$r        ends
.rdata$r:000004C1
.rdata$r:000004C4 ; ===========================================================================
.rdata$r:000004C4
.rdata$r:000004C4 ; Segment type: Pure data
.rdata$r:000004C4 ; Segment permissions: Read
.rdata$r:000004C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004C4                 assume cs:_rdata$r
.rdata$r:000004C4                 ;org 4C4h
.rdata$r:000004C4 ; COMDAT (pick any)
.rdata$r:000004C4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000004C4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000004C4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004C4                                         ; DATA XREF: .rdata$r:00000344o
.rdata$r:000004C4                                         ; .rdata$r:000003F4o ...
.rdata$r:000004C4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004C8                 align 10h
.rdata$r:000004D0                 db 0FFh
.rdata$r:000004D1                 db 0FFh
.rdata$r:000004D2                 db 0FFh
.rdata$r:000004D3                 db 0FFh
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 db  42h ; B
.rdata$r:000004D9                 db    0
.rdata$r:000004DA                 db    0
.rdata$r:000004DB                 db    0
.rdata$r:000004DC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004DC _rdata$r        ends
.rdata$r:000004DC
.rdata$r:000004E0 ; ===========================================================================
.rdata$r:000004E0
.rdata$r:000004E0 ; Segment type: Pure data
.rdata$r:000004E0 ; Segment permissions: Read
.rdata$r:000004E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004E0                 assume cs:_rdata$r
.rdata$r:000004E0                 ;org 4E0h
.rdata$r:000004E0 ; COMDAT (pick any)
.rdata$r:000004E0                 public ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000004E0 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000004E0 ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000004E0                                         ; DATA XREF: .rdata$r:00000348o
.rdata$r:000004E0                                         ; .rdata$r:000003F8o
.rdata$r:000004E0                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000004E4                 db    1
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 db    4
.rdata$r:000004E9                 db    0
.rdata$r:000004EA                 db    0
.rdata$r:000004EB                 db    0
.rdata$r:000004EC                 db 0FFh
.rdata$r:000004ED                 db 0FFh
.rdata$r:000004EE                 db 0FFh
.rdata$r:000004EF                 db 0FFh
.rdata$r:000004F0                 db    0
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db  40h ; @
.rdata$r:000004F5                 db    0
.rdata$r:000004F6                 db    0
.rdata$r:000004F7                 db    0
.rdata$r:000004F8                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004F8 _rdata$r        ends
.rdata$r:000004F8
.data:000004FC ; ===========================================================================
.data:000004FC
.data:000004FC ; Segment type: Pure data
.data:000004FC ; Segment permissions: Read/Write
.data:000004FC _data           segment dword public 'DATA' use32
.data:000004FC                 assume cs:_data
.data:000004FC                 ;org 4FCh
.data:000004FC ; COMDAT (pick any)
.data:000004FC                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:000004FC ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:000004FC ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:000004FC                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000004FC                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004FC                                         ; const type_info::`vftable'
.data:00000500                 db    0
.data:00000501                 db    0
.data:00000502                 db    0
.data:00000503                 db    0
.data:00000504                 db  2Eh ; .
.data:00000505                 db  3Fh ; ?
.data:00000506                 db  41h ; A
.data:00000507                 db  55h ; U
.data:00000508                 db  49h ; I
.data:00000509                 db  43h ; C
.data:0000050A                 db  6Fh ; o
.data:0000050B                 db  6Dh ; m
.data:0000050C                 db  70h ; p
.data:0000050D                 db  72h ; r
.data:0000050E                 db  65h ; e
.data:0000050F                 db  73h ; s
.data:00000510                 db  73h ; s
.data:00000511                 db  47h ; G
.data:00000512                 db  65h ; e
.data:00000513                 db  74h ; t
.data:00000514                 db  49h ; I
.data:00000515                 db  6Eh ; n
.data:00000516                 db  53h ; S
.data:00000517                 db  74h ; t
.data:00000518                 db  72h ; r
.data:00000519                 db  65h ; e
.data:0000051A                 db  61h ; a
.data:0000051B                 db  6Dh ; m
.data:0000051C                 db  50h ; P
.data:0000051D                 db  72h ; r
.data:0000051E                 db  6Fh ; o
.data:0000051F                 db  63h ; c
.data:00000520                 db  65h ; e
.data:00000521                 db  73h ; s
.data:00000522                 db  73h ; s
.data:00000523                 db  65h ; e
.data:00000524                 db  64h ; d
.data:00000525                 db  53h ; S
.data:00000526                 db  69h ; i
.data:00000527                 db  7Ah ; z
.data:00000528                 db  65h ; e
.data:00000529                 db  40h ; @
.data:0000052A                 db  40h ; @
.data:0000052B                 db    0
.data:0000052B _data           ends
.data:0000052B
.rdata$r:0000052C ; ===========================================================================
.rdata$r:0000052C
.rdata$r:0000052C ; Segment type: Pure data
.rdata$r:0000052C ; Segment permissions: Read
.rdata$r:0000052C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000052C                 assume cs:_rdata$r
.rdata$r:0000052C                 ;org 52Ch
.rdata$r:0000052C ; COMDAT (pick any)
.rdata$r:0000052C                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:0000052C ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000052C ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:0000052C                                         ; DATA XREF: .rdata$r:000004F8o
.rdata$r:0000052C                                         ; .rdata$r:00000560o
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db    0
.rdata$r:00000531                 db    0
.rdata$r:00000532                 db    0
.rdata$r:00000533                 db    0
.rdata$r:00000534                 db    2
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00000538 _rdata$r        ends
.rdata$r:00000538
.rdata$r:0000053C ; ===========================================================================
.rdata$r:0000053C
.rdata$r:0000053C ; Segment type: Pure data
.rdata$r:0000053C ; Segment permissions: Read
.rdata$r:0000053C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000053C                 assume cs:_rdata$r
.rdata$r:0000053C                 ;org 53Ch
.rdata$r:0000053C ; COMDAT (pick any)
.rdata$r:0000053C                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:0000053C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:0000053C ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000053C                                         ; DATA XREF: .rdata$r:00000538o
.rdata$r:0000053C                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000540                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000544                 db    0
.rdata$r:00000545                 align 4
.rdata$r:00000545 _rdata$r        ends
.rdata$r:00000545
.rdata$r:00000548 ; ===========================================================================
.rdata$r:00000548
.rdata$r:00000548 ; Segment type: Pure data
.rdata$r:00000548 ; Segment permissions: Read
.rdata$r:00000548 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000548                 assume cs:_rdata$r
.rdata$r:00000548                 ;org 548h
.rdata$r:00000548 ; COMDAT (pick any)
.rdata$r:00000548                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000548 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000548 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00000548                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00000548                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000054C                 db    1
.rdata$r:0000054D                 db    0
.rdata$r:0000054E                 db    0
.rdata$r:0000054F                 db    0
.rdata$r:00000550                 db    0
.rdata$r:00000551                 db    0
.rdata$r:00000552                 db    0
.rdata$r:00000553                 db    0
.rdata$r:00000554                 db 0FFh
.rdata$r:00000555                 db 0FFh
.rdata$r:00000556                 db 0FFh
.rdata$r:00000557                 db 0FFh
.rdata$r:00000558                 db    0
.rdata$r:00000559                 db    0
.rdata$r:0000055A                 db    0
.rdata$r:0000055B                 db    0
.rdata$r:0000055C                 db  40h ; @
.rdata$r:0000055D                 db    0
.rdata$r:0000055E                 db    0
.rdata$r:0000055F                 db    0
.rdata$r:00000560                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000560 _rdata$r        ends
.rdata$r:00000560
.rdata$r:00000564 ; ===========================================================================
.rdata$r:00000564
.rdata$r:00000564 ; Segment type: Pure data
.rdata$r:00000564 ; Segment permissions: Read
.rdata$r:00000564 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000564                 assume cs:_rdata$r
.rdata$r:00000564                 ;org 564h
.rdata$r:00000564 ; COMDAT (pick any)
.rdata$r:00000564                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000564 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000564 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000564                                         ; DATA XREF: .rdata$r:0000034Co
.rdata$r:00000564                                         ; .rdata$r:000003FCo ...
.rdata$r:00000564                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000568                 db    0
.rdata$r:00000569                 db    0
.rdata$r:0000056A                 db    0
.rdata$r:0000056B                 db    0
.rdata$r:0000056C                 db    4
.rdata$r:0000056D                 db    0
.rdata$r:0000056E                 db    0
.rdata$r:0000056F                 db    0
.rdata$r:00000570                 db 0FFh
.rdata$r:00000571                 db 0FFh
.rdata$r:00000572                 db 0FFh
.rdata$r:00000573                 db 0FFh
.rdata$r:00000574                 db    0
.rdata$r:00000575                 db    0
.rdata$r:00000576                 db    0
.rdata$r:00000577                 db    0
.rdata$r:00000578                 db  42h ; B
.rdata$r:00000579                 db    0
.rdata$r:0000057A                 db    0
.rdata$r:0000057B                 db    0
.rdata$r:0000057C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000057C _rdata$r        ends
.rdata$r:0000057C
.rdata$r:00000580 ; ===========================================================================
.rdata$r:00000580
.rdata$r:00000580 ; Segment type: Pure data
.rdata$r:00000580 ; Segment permissions: Read
.rdata$r:00000580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000580                 assume cs:_rdata$r
.rdata$r:00000580                 ;org 580h
.rdata$r:00000580 ; COMDAT (pick any)
.rdata$r:00000580                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:00000580 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000580 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00000580                                         ; DATA XREF: .rdata$r:00000350o
.rdata$r:00000580                                         ; .rdata$r:00000400o
.rdata$r:00000580                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000584                 db    1
.rdata$r:00000585                 db    0
.rdata$r:00000586                 db    0
.rdata$r:00000587                 db    0
.rdata$r:00000588                 db    8
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 db 0FFh
.rdata$r:0000058D                 db 0FFh
.rdata$r:0000058E                 db 0FFh
.rdata$r:0000058F                 db 0FFh
.rdata$r:00000590                 db    0
.rdata$r:00000591                 db    0
.rdata$r:00000592                 db    0
.rdata$r:00000593                 db    0
.rdata$r:00000594                 db  40h ; @
.rdata$r:00000595                 db    0
.rdata$r:00000596                 db    0
.rdata$r:00000597                 db    0
.rdata$r:00000598                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000598 _rdata$r        ends
.rdata$r:00000598
.data:0000059C ; ===========================================================================
.data:0000059C
.data:0000059C ; Segment type: Pure data
.data:0000059C ; Segment permissions: Read/Write
.data:0000059C _data           segment dword public 'DATA' use32
.data:0000059C                 assume cs:_data
.data:0000059C                 ;org 59Ch
.data:0000059C ; COMDAT (pick any)
.data:0000059C                 public ??_R0?AUICompressSetInStream@@@8
.data:0000059C ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:0000059C ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000059C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000059C                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000059C                                         ; const type_info::`vftable'
.data:000005A0                 db    0
.data:000005A1                 db    0
.data:000005A2                 db    0
.data:000005A3                 db    0
.data:000005A4                 db  2Eh ; .
.data:000005A5                 db  3Fh ; ?
.data:000005A6                 db  41h ; A
.data:000005A7                 db  55h ; U
.data:000005A8                 db  49h ; I
.data:000005A9                 db  43h ; C
.data:000005AA                 db  6Fh ; o
.data:000005AB                 db  6Dh ; m
.data:000005AC                 db  70h ; p
.data:000005AD                 db  72h ; r
.data:000005AE                 db  65h ; e
.data:000005AF                 db  73h ; s
.data:000005B0                 db  73h ; s
.data:000005B1                 db  53h ; S
.data:000005B2                 db  65h ; e
.data:000005B3                 db  74h ; t
.data:000005B4                 db  49h ; I
.data:000005B5                 db  6Eh ; n
.data:000005B6                 db  53h ; S
.data:000005B7                 db  74h ; t
.data:000005B8                 db  72h ; r
.data:000005B9                 db  65h ; e
.data:000005BA                 db  61h ; a
.data:000005BB                 db  6Dh ; m
.data:000005BC                 db  40h ; @
.data:000005BD                 db  40h ; @
.data:000005BE                 db    0
.data:000005BF                 align 10h
.data:000005BF _data           ends
.data:000005BF
.rdata$r:000005C0 ; ===========================================================================
.rdata$r:000005C0
.rdata$r:000005C0 ; Segment type: Pure data
.rdata$r:000005C0 ; Segment permissions: Read
.rdata$r:000005C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005C0                 assume cs:_rdata$r
.rdata$r:000005C0                 ;org 5C0h
.rdata$r:000005C0 ; COMDAT (pick any)
.rdata$r:000005C0                 public ??_R3ICompressSetInStream@@8
.rdata$r:000005C0 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005C0 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00000598o
.rdata$r:000005C0                                         ; .rdata$r:000005F4o
.rdata$r:000005C1                 db    0
.rdata$r:000005C2                 db    0
.rdata$r:000005C3                 db    0
.rdata$r:000005C4                 db    0
.rdata$r:000005C5                 db    0
.rdata$r:000005C6                 db    0
.rdata$r:000005C7                 db    0
.rdata$r:000005C8                 db    2
.rdata$r:000005C9                 db    0
.rdata$r:000005CA                 db    0
.rdata$r:000005CB                 db    0
.rdata$r:000005CC                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000005CC _rdata$r        ends
.rdata$r:000005CC
.rdata$r:000005D0 ; ===========================================================================
.rdata$r:000005D0
.rdata$r:000005D0 ; Segment type: Pure data
.rdata$r:000005D0 ; Segment permissions: Read
.rdata$r:000005D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005D0                 assume cs:_rdata$r
.rdata$r:000005D0                 ;org 5D0h
.rdata$r:000005D0 ; COMDAT (pick any)
.rdata$r:000005D0                 public ??_R2ICompressSetInStream@@8
.rdata$r:000005D0 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000005D0 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000005D0                                         ; DATA XREF: .rdata$r:000005CCo
.rdata$r:000005D0                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005D4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005D8                 db    0
.rdata$r:000005D9                 align 4
.rdata$r:000005D9 _rdata$r        ends
.rdata$r:000005D9
.rdata$r:000005DC ; ===========================================================================
.rdata$r:000005DC
.rdata$r:000005DC ; Segment type: Pure data
.rdata$r:000005DC ; Segment permissions: Read
.rdata$r:000005DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005DC                 assume cs:_rdata$r
.rdata$r:000005DC                 ;org 5DCh
.rdata$r:000005DC ; COMDAT (pick any)
.rdata$r:000005DC                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000005DC ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000005DC ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000005DC                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:000005DC                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000005E0                 db    1
.rdata$r:000005E1                 db    0
.rdata$r:000005E2                 db    0
.rdata$r:000005E3                 db    0
.rdata$r:000005E4                 db    0
.rdata$r:000005E5                 db    0
.rdata$r:000005E6                 db    0
.rdata$r:000005E7                 db    0
.rdata$r:000005E8                 db 0FFh
.rdata$r:000005E9                 db 0FFh
.rdata$r:000005EA                 db 0FFh
.rdata$r:000005EB                 db 0FFh
.rdata$r:000005EC                 db    0
.rdata$r:000005ED                 db    0
.rdata$r:000005EE                 db    0
.rdata$r:000005EF                 db    0
.rdata$r:000005F0                 db  40h ; @
.rdata$r:000005F1                 db    0
.rdata$r:000005F2                 db    0
.rdata$r:000005F3                 db    0
.rdata$r:000005F4                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005F4 _rdata$r        ends
.rdata$r:000005F4
.rdata$r:000005F8 ; ===========================================================================
.rdata$r:000005F8
.rdata$r:000005F8 ; Segment type: Pure data
.rdata$r:000005F8 ; Segment permissions: Read
.rdata$r:000005F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005F8                 assume cs:_rdata$r
.rdata$r:000005F8                 ;org 5F8h
.rdata$r:000005F8 ; COMDAT (pick any)
.rdata$r:000005F8                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000005F8 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000005F8 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000005F8                                         ; DATA XREF: .rdata$r:00000354o
.rdata$r:000005F8                                         ; .rdata$r:00000404o
.rdata$r:000005F8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000005FC                 align 10h
.rdata$r:00000600                 db    8
.rdata$r:00000601                 db    0
.rdata$r:00000602                 db    0
.rdata$r:00000603                 db    0
.rdata$r:00000604                 db 0FFh
.rdata$r:00000605                 db 0FFh
.rdata$r:00000606                 db 0FFh
.rdata$r:00000607                 db 0FFh
.rdata$r:00000608                 db    0
.rdata$r:00000609                 db    0
.rdata$r:0000060A                 db    0
.rdata$r:0000060B                 db    0
.rdata$r:0000060C                 db  42h ; B
.rdata$r:0000060D                 db    0
.rdata$r:0000060E                 db    0
.rdata$r:0000060F                 db    0
.rdata$r:00000610                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000610 _rdata$r        ends
.rdata$r:00000610
.rdata$r:00000614 ; ===========================================================================
.rdata$r:00000614
.rdata$r:00000614 ; Segment type: Pure data
.rdata$r:00000614 ; Segment permissions: Read
.rdata$r:00000614 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000614                 assume cs:_rdata$r
.rdata$r:00000614                 ;org 614h
.rdata$r:00000614 ; COMDAT (pick any)
.rdata$r:00000614                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000614 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000614 ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00000614                                         ; DATA XREF: .rdata$r:00000358o
.rdata$r:00000614                                         ; .rdata$r:00000408o
.rdata$r:00000614                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00000618                 db    1
.rdata$r:00000619                 db    0
.rdata$r:0000061A                 db    0
.rdata$r:0000061B                 db    0
.rdata$r:0000061C                 db  0Ch
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 db 0FFh
.rdata$r:00000621                 db 0FFh
.rdata$r:00000622                 db 0FFh
.rdata$r:00000623                 db 0FFh
.rdata$r:00000624                 db    0
.rdata$r:00000625                 db    0
.rdata$r:00000626                 db    0
.rdata$r:00000627                 db    0
.rdata$r:00000628                 db  40h ; @
.rdata$r:00000629                 db    0
.rdata$r:0000062A                 db    0
.rdata$r:0000062B                 db    0
.rdata$r:0000062C                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000062C _rdata$r        ends
.rdata$r:0000062C
.data:00000630 ; ===========================================================================
.data:00000630
.data:00000630 ; Segment type: Pure data
.data:00000630 ; Segment permissions: Read/Write
.data:00000630 _data           segment dword public 'DATA' use32
.data:00000630                 assume cs:_data
.data:00000630                 ;org 630h
.data:00000630 ; COMDAT (pick any)
.data:00000630                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00000630 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00000630 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00000630                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000630                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000630                                         ; const type_info::`vftable'
.data:00000634                 align 8
.data:00000638 a_?auicompresss db '.?AUICompressSetOutStreamSize@@',0
.data:00000638 _data           ends
.data:00000638
.rdata$r:00000658 ; ===========================================================================
.rdata$r:00000658
.rdata$r:00000658 ; Segment type: Pure data
.rdata$r:00000658 ; Segment permissions: Read
.rdata$r:00000658 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000658                 assume cs:_rdata$r
.rdata$r:00000658                 ;org 658h
.rdata$r:00000658 ; COMDAT (pick any)
.rdata$r:00000658                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00000658 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000658 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:0000062Co
.rdata$r:00000658                                         ; .rdata$r:0000068Co
.rdata$r:00000659                 db    0
.rdata$r:0000065A                 db    0
.rdata$r:0000065B                 db    0
.rdata$r:0000065C                 db    0
.rdata$r:0000065D                 db    0
.rdata$r:0000065E                 db    0
.rdata$r:0000065F                 db    0
.rdata$r:00000660                 db    2
.rdata$r:00000661                 db    0
.rdata$r:00000662                 db    0
.rdata$r:00000663                 db    0
.rdata$r:00000664                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00000664 _rdata$r        ends
.rdata$r:00000664
.rdata$r:00000668 ; ===========================================================================
.rdata$r:00000668
.rdata$r:00000668 ; Segment type: Pure data
.rdata$r:00000668 ; Segment permissions: Read
.rdata$r:00000668 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000668                 assume cs:_rdata$r
.rdata$r:00000668                 ;org 668h
.rdata$r:00000668 ; COMDAT (pick any)
.rdata$r:00000668                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00000668 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00000668 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000668                                         ; DATA XREF: .rdata$r:00000664o
.rdata$r:00000668                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000066C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000670                 db    0
.rdata$r:00000671                 align 4
.rdata$r:00000671 _rdata$r        ends
.rdata$r:00000671
.rdata$r:00000674 ; ===========================================================================
.rdata$r:00000674
.rdata$r:00000674 ; Segment type: Pure data
.rdata$r:00000674 ; Segment permissions: Read
.rdata$r:00000674 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000674                 assume cs:_rdata$r
.rdata$r:00000674                 ;org 674h
.rdata$r:00000674 ; COMDAT (pick any)
.rdata$r:00000674                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000674 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000674 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00000674                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00000674                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00000678                 db    1
.rdata$r:00000679                 db    0
.rdata$r:0000067A                 db    0
.rdata$r:0000067B                 db    0
.rdata$r:0000067C                 db    0
.rdata$r:0000067D                 db    0
.rdata$r:0000067E                 db    0
.rdata$r:0000067F                 db    0
.rdata$r:00000680                 db 0FFh
.rdata$r:00000681                 db 0FFh
.rdata$r:00000682                 db 0FFh
.rdata$r:00000683                 db 0FFh
.rdata$r:00000684                 db    0
.rdata$r:00000685                 db    0
.rdata$r:00000686                 db    0
.rdata$r:00000687                 db    0
.rdata$r:00000688                 db  40h ; @
.rdata$r:00000689                 db    0
.rdata$r:0000068A                 db    0
.rdata$r:0000068B                 db    0
.rdata$r:0000068C                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000068C _rdata$r        ends
.rdata$r:0000068C
.rdata$r:00000690 ; ===========================================================================
.rdata$r:00000690
.rdata$r:00000690 ; Segment type: Pure data
.rdata$r:00000690 ; Segment permissions: Read
.rdata$r:00000690 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000690                 assume cs:_rdata$r
.rdata$r:00000690                 ;org 690h
.rdata$r:00000690 ; COMDAT (pick any)
.rdata$r:00000690                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00000690 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00000690 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000690                                         ; DATA XREF: .rdata$r:0000035Co
.rdata$r:00000690                                         ; .rdata$r:0000040Co
.rdata$r:00000690                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000694                 align 8
.rdata$r:00000698                 db  0Ch
.rdata$r:00000699                 db    0
.rdata$r:0000069A                 db    0
.rdata$r:0000069B                 db    0
.rdata$r:0000069C                 db 0FFh
.rdata$r:0000069D                 db 0FFh
.rdata$r:0000069E                 db 0FFh
.rdata$r:0000069F                 db 0FFh
.rdata$r:000006A0                 db    0
.rdata$r:000006A1                 db    0
.rdata$r:000006A2                 db    0
.rdata$r:000006A3                 db    0
.rdata$r:000006A4                 db  42h ; B
.rdata$r:000006A5                 db    0
.rdata$r:000006A6                 db    0
.rdata$r:000006A7                 db    0
.rdata$r:000006A8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006A8 _rdata$r        ends
.rdata$r:000006A8
.rdata$r:000006AC ; ===========================================================================
.rdata$r:000006AC
.rdata$r:000006AC ; Segment type: Pure data
.rdata$r:000006AC ; Segment permissions: Read
.rdata$r:000006AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006AC                 assume cs:_rdata$r
.rdata$r:000006AC                 ;org 6ACh
.rdata$r:000006AC ; COMDAT (pick any)
.rdata$r:000006AC                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:000006AC ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000006AC ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000006AC                                         ; DATA XREF: .rdata$r:00000360o
.rdata$r:000006AC                                         ; .rdata$r:00000410o
.rdata$r:000006AC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000006B0                 db    1
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 db  10h
.rdata$r:000006B5                 db    0
.rdata$r:000006B6                 db    0
.rdata$r:000006B7                 db    0
.rdata$r:000006B8                 db 0FFh
.rdata$r:000006B9                 db 0FFh
.rdata$r:000006BA                 db 0FFh
.rdata$r:000006BB                 db 0FFh
.rdata$r:000006BC                 db    0
.rdata$r:000006BD                 db    0
.rdata$r:000006BE                 db    0
.rdata$r:000006BF                 db    0
.rdata$r:000006C0                 db  40h ; @
.rdata$r:000006C1                 db    0
.rdata$r:000006C2                 db    0
.rdata$r:000006C3                 db    0
.rdata$r:000006C4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006C4 _rdata$r        ends
.rdata$r:000006C4
.data:000006C8 ; ===========================================================================
.data:000006C8
.data:000006C8 ; Segment type: Pure data
.data:000006C8 ; Segment permissions: Read/Write
.data:000006C8 _data           segment dword public 'DATA' use32
.data:000006C8                 assume cs:_data
.data:000006C8                 ;org 6C8h
.data:000006C8 ; COMDAT (pick any)
.data:000006C8                 public ??_R0?AUISequentialInStream@@@8
.data:000006C8 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:000006C8 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:000006C8                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000006C8                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000006C8                                         ; const type_info::`vftable'
.data:000006CC                 align 10h
.data:000006D0 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:000006EA                 align 4
.data:000006EA _data           ends
.data:000006EA
.rdata$r:000006EC ; ===========================================================================
.rdata$r:000006EC
.rdata$r:000006EC ; Segment type: Pure data
.rdata$r:000006EC ; Segment permissions: Read
.rdata$r:000006EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006EC                 assume cs:_rdata$r
.rdata$r:000006EC                 ;org 6ECh
.rdata$r:000006EC ; COMDAT (pick any)
.rdata$r:000006EC                 public ??_R3ISequentialInStream@@8
.rdata$r:000006EC ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006EC ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:000006C4o
.rdata$r:000006EC                                         ; .rdata$r:00000720o
.rdata$r:000006ED                 db    0
.rdata$r:000006EE                 db    0
.rdata$r:000006EF                 db    0
.rdata$r:000006F0                 db    0
.rdata$r:000006F1                 db    0
.rdata$r:000006F2                 db    0
.rdata$r:000006F3                 db    0
.rdata$r:000006F4                 db    2
.rdata$r:000006F5                 db    0
.rdata$r:000006F6                 db    0
.rdata$r:000006F7                 db    0
.rdata$r:000006F8                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000006F8 _rdata$r        ends
.rdata$r:000006F8
.rdata$r:000006FC ; ===========================================================================
.rdata$r:000006FC
.rdata$r:000006FC ; Segment type: Pure data
.rdata$r:000006FC ; Segment permissions: Read
.rdata$r:000006FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006FC                 assume cs:_rdata$r
.rdata$r:000006FC                 ;org 6FCh
.rdata$r:000006FC ; COMDAT (pick any)
.rdata$r:000006FC                 public ??_R2ISequentialInStream@@8
.rdata$r:000006FC ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000006FC ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000006FC                                         ; DATA XREF: .rdata$r:000006F8o
.rdata$r:000006FC                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000700                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000704                 db    0
.rdata$r:00000705                 align 4
.rdata$r:00000705 _rdata$r        ends
.rdata$r:00000705
.rdata$r:00000708 ; ===========================================================================
.rdata$r:00000708
.rdata$r:00000708 ; Segment type: Pure data
.rdata$r:00000708 ; Segment permissions: Read
.rdata$r:00000708 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000708                 assume cs:_rdata$r
.rdata$r:00000708                 ;org 708h
.rdata$r:00000708 ; COMDAT (pick any)
.rdata$r:00000708                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000708 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000708 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000708                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00000708                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000070C                 db    1
.rdata$r:0000070D                 db    0
.rdata$r:0000070E                 db    0
.rdata$r:0000070F                 db    0
.rdata$r:00000710                 db    0
.rdata$r:00000711                 db    0
.rdata$r:00000712                 db    0
.rdata$r:00000713                 db    0
.rdata$r:00000714                 db 0FFh
.rdata$r:00000715                 db 0FFh
.rdata$r:00000716                 db 0FFh
.rdata$r:00000717                 db 0FFh
.rdata$r:00000718                 db    0
.rdata$r:00000719                 db    0
.rdata$r:0000071A                 db    0
.rdata$r:0000071B                 db    0
.rdata$r:0000071C                 db  40h ; @
.rdata$r:0000071D                 db    0
.rdata$r:0000071E                 db    0
.rdata$r:0000071F                 db    0
.rdata$r:00000720                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000720 _rdata$r        ends
.rdata$r:00000720
.rdata$r:00000724 ; ===========================================================================
.rdata$r:00000724
.rdata$r:00000724 ; Segment type: Pure data
.rdata$r:00000724 ; Segment permissions: Read
.rdata$r:00000724 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000724                 assume cs:_rdata$r
.rdata$r:00000724                 ;org 724h
.rdata$r:00000724 ; COMDAT (pick any)
.rdata$r:00000724                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00000724 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00000724 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000724                                         ; DATA XREF: .rdata$r:00000364o
.rdata$r:00000724                                         ; .rdata$r:00000414o
.rdata$r:00000724                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000728                 db    0
.rdata$r:00000729                 db    0
.rdata$r:0000072A                 db    0
.rdata$r:0000072B                 db    0
.rdata$r:0000072C                 db  10h
.rdata$r:0000072D                 db    0
.rdata$r:0000072E                 db    0
.rdata$r:0000072F                 db    0
.rdata$r:00000730                 db 0FFh
.rdata$r:00000731                 db 0FFh
.rdata$r:00000732                 db 0FFh
.rdata$r:00000733                 db 0FFh
.rdata$r:00000734                 db    0
.rdata$r:00000735                 db    0
.rdata$r:00000736                 db    0
.rdata$r:00000737                 db    0
.rdata$r:00000738                 db  42h ; B
.rdata$r:00000739                 db    0
.rdata$r:0000073A                 db    0
.rdata$r:0000073B                 db    0
.rdata$r:0000073C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000073C _rdata$r        ends
.rdata$r:0000073C
.rdata$r:00000740 ; ===========================================================================
.rdata$r:00000740
.rdata$r:00000740 ; Segment type: Pure data
.rdata$r:00000740 ; Segment permissions: Read
.rdata$r:00000740 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000740                 assume cs:_rdata$r
.rdata$r:00000740                 ;org 740h
.rdata$r:00000740 ; COMDAT (pick any)
.rdata$r:00000740                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000740 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00000740 ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000740                                         ; DATA XREF: .rdata$r:00000368o
.rdata$r:00000740                                         ; .rdata$r:00000418o
.rdata$r:00000740                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000744                 align 8
.rdata$r:00000748                 db  14h
.rdata$r:00000749                 db    0
.rdata$r:0000074A                 db    0
.rdata$r:0000074B                 db    0
.rdata$r:0000074C                 db 0FFh
.rdata$r:0000074D                 db 0FFh
.rdata$r:0000074E                 db 0FFh
.rdata$r:0000074F                 db 0FFh
.rdata$r:00000750                 db    0
.rdata$r:00000751                 db    0
.rdata$r:00000752                 db    0
.rdata$r:00000753                 db    0
.rdata$r:00000754                 db  40h ; @
.rdata$r:00000755                 db    0
.rdata$r:00000756                 db    0
.rdata$r:00000757                 db    0
.rdata$r:00000758                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000758 _rdata$r        ends
.rdata$r:00000758
.data:0000075C ; ===========================================================================
.data:0000075C
.data:0000075C ; Segment type: Pure data
.data:0000075C ; Segment permissions: Read/Write
.data:0000075C _data           segment dword public 'DATA' use32
.data:0000075C                 assume cs:_data
.data:0000075C                 ;org 75Ch
.data:0000075C ; COMDAT (pick any)
.data:0000075C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000075C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000075C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000075C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:0000075C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000075C                                         ; const type_info::`vftable'
.data:00000760                 db    0
.data:00000761                 db    0
.data:00000762                 db    0
.data:00000763                 db    0
.data:00000764                 db  2Eh ; .
.data:00000765                 db  3Fh ; ?
.data:00000766                 db  41h ; A
.data:00000767                 db  56h ; V
.data:00000768                 db  43h ; C
.data:00000769                 db  4Dh ; M
.data:0000076A                 db  79h ; y
.data:0000076B                 db  55h ; U
.data:0000076C                 db  6Eh ; n
.data:0000076D                 db  6Bh ; k
.data:0000076E                 db  6Eh ; n
.data:0000076F                 db  6Fh ; o
.data:00000770                 db  77h ; w
.data:00000771                 db  6Eh ; n
.data:00000772                 db  49h ; I
.data:00000773                 db  6Dh ; m
.data:00000774                 db  70h ; p
.data:00000775                 db  40h ; @
.data:00000776                 db  40h ; @
.data:00000777                 db    0
.data:00000777 _data           ends
.data:00000777
.rdata$r:00000778 ; ===========================================================================
.rdata$r:00000778
.rdata$r:00000778 ; Segment type: Pure data
.rdata$r:00000778 ; Segment permissions: Read
.rdata$r:00000778 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000778                 assume cs:_rdata$r
.rdata$r:00000778                 ;org 778h
.rdata$r:00000778 ; COMDAT (pick any)
.rdata$r:00000778                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000778 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000778 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000758o
.rdata$r:00000778                                         ; .rdata$r:000007A8o ...
.rdata$r:00000779                 db    0
.rdata$r:0000077A                 db    0
.rdata$r:0000077B                 db    0
.rdata$r:0000077C                 db    0
.rdata$r:0000077D                 db    0
.rdata$r:0000077E                 db    0
.rdata$r:0000077F                 db    0
.rdata$r:00000780                 db    1
.rdata$r:00000781                 db    0
.rdata$r:00000782                 db    0
.rdata$r:00000783                 db    0
.rdata$r:00000784                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000784 _rdata$r        ends
.rdata$r:00000784
.rdata$r:00000788 ; ===========================================================================
.rdata$r:00000788
.rdata$r:00000788 ; Segment type: Pure data
.rdata$r:00000788 ; Segment permissions: Read
.rdata$r:00000788 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000788                 assume cs:_rdata$r
.rdata$r:00000788                 ;org 788h
.rdata$r:00000788 ; COMDAT (pick any)
.rdata$r:00000788                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000788 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000788 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000788                                         ; DATA XREF: .rdata$r:00000784o
.rdata$r:00000788                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000078C                 db    0
.rdata$r:0000078D                 align 10h
.rdata$r:0000078D _rdata$r        ends
.rdata$r:0000078D
.rdata$r:00000790 ; ===========================================================================
.rdata$r:00000790
.rdata$r:00000790 ; Segment type: Pure data
.rdata$r:00000790 ; Segment permissions: Read
.rdata$r:00000790 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000790                 assume cs:_rdata$r
.rdata$r:00000790                 ;org 790h
.rdata$r:00000790 ; COMDAT (pick any)
.rdata$r:00000790                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000790 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000790 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000790                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000790                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000794                 db    0
.rdata$r:00000795                 db    0
.rdata$r:00000796                 db    0
.rdata$r:00000797                 db    0
.rdata$r:00000798                 db    0
.rdata$r:00000799                 db    0
.rdata$r:0000079A                 db    0
.rdata$r:0000079B                 db    0
.rdata$r:0000079C                 db 0FFh
.rdata$r:0000079D                 db 0FFh
.rdata$r:0000079E                 db 0FFh
.rdata$r:0000079F                 db 0FFh
.rdata$r:000007A0                 db    0
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db  40h ; @
.rdata$r:000007A5                 db    0
.rdata$r:000007A6                 db    0
.rdata$r:000007A7                 db    0
.rdata$r:000007A8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007A8 _rdata$r        ends
.rdata$r:000007A8
.rdata$r:000007AC ; ===========================================================================
.rdata$r:000007AC
.rdata$r:000007AC ; Segment type: Pure data
.rdata$r:000007AC ; Segment permissions: Read
.rdata$r:000007AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007AC                 assume cs:_rdata$r
.rdata$r:000007AC                 ;org 7ACh
.rdata$r:000007AC ; COMDAT (pick any)
.rdata$r:000007AC                 public ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000007AC ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000007AC ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000007AC                                         ; DATA XREF: .rdata:000002ACo
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 db    4
.rdata$r:000007B1                 db    0
.rdata$r:000007B2                 db    0
.rdata$r:000007B3                 db    0
.rdata$r:000007B4                 db    0
.rdata$r:000007B5                 db    0
.rdata$r:000007B6                 db    0
.rdata$r:000007B7                 db    0
.rdata$r:000007B8                 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:000007BC                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007BC _rdata$r        ends
.rdata$r:000007BC
.rdata$r:000007C0 ; ===========================================================================
.rdata$r:000007C0
.rdata$r:000007C0 ; Segment type: Pure data
.rdata$r:000007C0 ; Segment permissions: Read
.rdata$r:000007C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007C0                 assume cs:_rdata$r
.rdata$r:000007C0                 ;org 7C0h
.rdata$r:000007C0 ; COMDAT (pick any)
.rdata$r:000007C0                 public ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:000007C0 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:000007C0 ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:000007C0                                         ; DATA XREF: .rdata:00000294o
.rdata$r:000007C1                 db    0
.rdata$r:000007C2                 db    0
.rdata$r:000007C3                 db    0
.rdata$r:000007C4                 db    8
.rdata$r:000007C5                 db    0
.rdata$r:000007C6                 db    0
.rdata$r:000007C7                 db    0
.rdata$r:000007C8                 db    0
.rdata$r:000007C9                 db    0
.rdata$r:000007CA                 db    0
.rdata$r:000007CB                 db    0
.rdata$r:000007CC                 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:000007D0                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007D0 _rdata$r        ends
.rdata$r:000007D0
.rdata$r:000007D4 ; ===========================================================================
.rdata$r:000007D4
.rdata$r:000007D4 ; Segment type: Pure data
.rdata$r:000007D4 ; Segment permissions: Read
.rdata$r:000007D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007D4                 assume cs:_rdata$r
.rdata$r:000007D4                 ;org 7D4h
.rdata$r:000007D4 ; COMDAT (pick any)
.rdata$r:000007D4                 public ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:000007D4 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:000007D4 ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:000007D4                                         ; DATA XREF: .rdata:00000280o
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 db  0Ch
.rdata$r:000007D9                 db    0
.rdata$r:000007DA                 db    0
.rdata$r:000007DB                 db    0
.rdata$r:000007DC                 db    0
.rdata$r:000007DD                 db    0
.rdata$r:000007DE                 db    0
.rdata$r:000007DF                 db    0
.rdata$r:000007E0                 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:000007E4                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007E4 _rdata$r        ends
.rdata$r:000007E4
.rdata$r:000007E8 ; ===========================================================================
.rdata$r:000007E8
.rdata$r:000007E8 ; Segment type: Pure data
.rdata$r:000007E8 ; Segment permissions: Read
.rdata$r:000007E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E8                 assume cs:_rdata$r
.rdata$r:000007E8                 ;org 7E8h
.rdata$r:000007E8 ; COMDAT (pick any)
.rdata$r:000007E8                 public ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:000007E8 ; const NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:000007E8 ??_R4CCOMCoder64@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:000007E8                                         ; DATA XREF: .rdata:0000026Co
.rdata$r:000007E9                 db    0
.rdata$r:000007EA                 db    0
.rdata$r:000007EB                 db    0
.rdata$r:000007EC                 db  10h
.rdata$r:000007ED                 db    0
.rdata$r:000007EE                 db    0
.rdata$r:000007EF                 db    0
.rdata$r:000007F0                 db    0
.rdata$r:000007F1                 db    0
.rdata$r:000007F2                 db    0
.rdata$r:000007F3                 db    0
.rdata$r:000007F4                 dd offset ??_R0?AVCCOMCoder64@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:000007F8                 dd offset ??_R3CCOMCoder64@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007F8 _rdata$r        ends
.rdata$r:000007F8
.text:000007FC ; ===========================================================================
.text:000007FC
.text:000007FC ; Segment type: Pure code
.text:000007FC ; Segment permissions: Read/Execute
.text:000007FC _text           segment para public 'CODE' use32
.text:000007FC                 assume cs:_text
.text:000007FC                 ;org 7FCh
.text:000007FC ; COMDAT (pick any)
.text:000007FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface(NCompress::NDeflate::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:000007FC                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000007FC ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000007FC                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000007FC                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:000007FC
.text:000007FC var_14          = dword ptr -14h
.text:000007FC var_10          = dword ptr -10h
.text:000007FC var_C           = dword ptr -0Ch
.text:000007FC var_8           = dword ptr -8
.text:000007FC var_4           = dword ptr -4
.text:000007FC this            = dword ptr  8
.text:000007FC Buf1            = dword ptr  0Ch
.text:000007FC arg_8           = dword ptr  10h
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 sub     esp, 14h
.text:00000802                 mov     eax, 0CCCCCCCCh
.text:00000807                 mov     [ebp+var_14], eax
.text:0000080A                 mov     [ebp+var_10], eax
.text:0000080D                 mov     [ebp+var_C], eax
.text:00000810                 mov     [ebp+var_8], eax
.text:00000813                 mov     [ebp+var_4], eax
.text:00000816                 mov     eax, [ebp+arg_8]
.text:00000819                 mov     dword ptr [eax], 0
.text:0000081F                 push    offset _IID_IUnknown ; Buf2
.text:00000824                 mov     ecx, [ebp+Buf1]
.text:00000827                 push    ecx             ; Buf1
.text:00000828                 call    ___@8           ; __(x,x)
.text:0000082D                 test    eax, eax
.text:0000082F                 jz      short loc_856
.text:00000831                 cmp     [ebp+this], 0
.text:00000835                 jz      short loc_842
.text:00000837                 mov     edx, [ebp+this]
.text:0000083A                 add     edx, 4
.text:0000083D                 mov     [ebp+var_4], edx
.text:00000840                 jmp     short loc_849
.text:00000842 ; ---------------------------------------------------------------------------
.text:00000842
.text:00000842 loc_842:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+39j
.text:00000842                 mov     [ebp+var_4], 0
.text:00000849
.text:00000849 loc_849:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+44j
.text:00000849                 mov     eax, [ebp+arg_8]
.text:0000084C                 mov     ecx, [ebp+var_4]
.text:0000084F                 mov     [eax], ecx
.text:00000851                 jmp     loc_930
.text:00000856 ; ---------------------------------------------------------------------------
.text:00000856
.text:00000856 loc_856:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00000856                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:0000085B                 mov     edx, [ebp+Buf1]
.text:0000085E                 push    edx             ; Buf1
.text:0000085F                 call    ___@8           ; __(x,x)
.text:00000864                 test    eax, eax
.text:00000866                 jz      short loc_88D
.text:00000868                 cmp     [ebp+this], 0
.text:0000086C                 jz      short loc_879
.text:0000086E                 mov     eax, [ebp+this]
.text:00000871                 add     eax, 4
.text:00000874                 mov     [ebp+var_8], eax
.text:00000877                 jmp     short loc_880
.text:00000879 ; ---------------------------------------------------------------------------
.text:00000879
.text:00000879 loc_879:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+70j
.text:00000879                 mov     [ebp+var_8], 0
.text:00000880
.text:00000880 loc_880:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:00000880                 mov     ecx, [ebp+arg_8]
.text:00000883                 mov     edx, [ebp+var_8]
.text:00000886                 mov     [ecx], edx
.text:00000888                 jmp     loc_930
.text:0000088D ; ---------------------------------------------------------------------------
.text:0000088D
.text:0000088D loc_88D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:0000088D                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00000892                 mov     eax, [ebp+Buf1]
.text:00000895                 push    eax             ; Buf1
.text:00000896                 call    ___@8           ; __(x,x)
.text:0000089B                 test    eax, eax
.text:0000089D                 jz      short loc_8C1
.text:0000089F                 cmp     [ebp+this], 0
.text:000008A3                 jz      short loc_8B0
.text:000008A5                 mov     ecx, [ebp+this]
.text:000008A8                 add     ecx, 8
.text:000008AB                 mov     [ebp+var_C], ecx
.text:000008AE                 jmp     short loc_8B7
.text:000008B0 ; ---------------------------------------------------------------------------
.text:000008B0
.text:000008B0 loc_8B0:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A7j
.text:000008B0                 mov     [ebp+var_C], 0
.text:000008B7
.text:000008B7 loc_8B7:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+B2j
.text:000008B7                 mov     edx, [ebp+arg_8]
.text:000008BA                 mov     eax, [ebp+var_C]
.text:000008BD                 mov     [edx], eax
.text:000008BF                 jmp     short loc_930
.text:000008C1 ; ---------------------------------------------------------------------------
.text:000008C1
.text:000008C1 loc_8C1:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A1j
.text:000008C1                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:000008C6                 mov     ecx, [ebp+Buf1]
.text:000008C9                 push    ecx             ; Buf1
.text:000008CA                 call    ___@8           ; __(x,x)
.text:000008CF                 test    eax, eax
.text:000008D1                 jz      short loc_8F5
.text:000008D3                 cmp     [ebp+this], 0
.text:000008D7                 jz      short loc_8E4
.text:000008D9                 mov     edx, [ebp+this]
.text:000008DC                 add     edx, 0Ch
.text:000008DF                 mov     [ebp+var_10], edx
.text:000008E2                 jmp     short loc_8EB
.text:000008E4 ; ---------------------------------------------------------------------------
.text:000008E4
.text:000008E4 loc_8E4:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+DBj
.text:000008E4                 mov     [ebp+var_10], 0
.text:000008EB
.text:000008EB loc_8EB:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+E6j
.text:000008EB                 mov     eax, [ebp+arg_8]
.text:000008EE                 mov     ecx, [ebp+var_10]
.text:000008F1                 mov     [eax], ecx
.text:000008F3                 jmp     short loc_930
.text:000008F5 ; ---------------------------------------------------------------------------
.text:000008F5
.text:000008F5 loc_8F5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+D5j
.text:000008F5                 push    offset _IID_ISequentialInStream ; Buf2
.text:000008FA                 mov     edx, [ebp+Buf1]
.text:000008FD                 push    edx             ; Buf1
.text:000008FE                 call    ___@8           ; __(x,x)
.text:00000903                 test    eax, eax
.text:00000905                 jz      short loc_929
.text:00000907                 cmp     [ebp+this], 0
.text:0000090B                 jz      short loc_918
.text:0000090D                 mov     eax, [ebp+this]
.text:00000910                 add     eax, 10h
.text:00000913                 mov     [ebp+var_14], eax
.text:00000916                 jmp     short loc_91F
.text:00000918 ; ---------------------------------------------------------------------------
.text:00000918
.text:00000918 loc_918:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:00000918                 mov     [ebp+var_14], 0
.text:0000091F
.text:0000091F loc_91F:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:0000091F                 mov     ecx, [ebp+arg_8]
.text:00000922                 mov     edx, [ebp+var_14]
.text:00000925                 mov     [ecx], edx
.text:00000927                 jmp     short loc_930
.text:00000929 ; ---------------------------------------------------------------------------
.text:00000929
.text:00000929 loc_929:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+109j
.text:00000929                 mov     eax, 80004002h
.text:0000092E                 jmp     short loc_941
.text:00000930 ; ---------------------------------------------------------------------------
.text:00000930
.text:00000930 loc_930:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+55j
.text:00000930                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:00000930                 mov     eax, [ebp+this]
.text:00000933                 mov     ecx, [eax+14h]
.text:00000936                 add     ecx, 1
.text:00000939                 mov     edx, [ebp+this]
.text:0000093C                 mov     [edx+14h], ecx
.text:0000093F                 xor     eax, eax
.text:00000941
.text:00000941 loc_941:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+132j
.text:00000941                 add     esp, 14h
.text:00000944                 cmp     ebp, esp
.text:00000946                 call    __RTC_CheckEsp
.text:0000094B                 mov     esp, ebp
.text:0000094D                 pop     ebp
.text:0000094E                 retn    0Ch
.text:0000094E ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000094E
.text:0000094E ; ---------------------------------------------------------------------------
.text:00000951                 align 4
.text:00000951 _text           ends
.text:00000951
.text:00000954 ; ===========================================================================
.text:00000954
.text:00000954 ; Segment type: Pure code
.text:00000954 ; Segment permissions: Read/Execute
.text:00000954 _text           segment para public 'CODE' use32
.text:00000954                 assume cs:_text
.text:00000954                 ;org 954h
.text:00000954 ; COMDAT (pick any)
.text:00000954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000954
.text:00000954 ; =============== S U B R O U T I N E =======================================
.text:00000954
.text:00000954 ; Attributes: bp-based frame
.text:00000954
.text:00000954 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000954                 public ___@8
.text:00000954 ___@8           proc near               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+2Cp
.text:00000954                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+63p ...
.text:00000954
.text:00000954 Buf1            = dword ptr  8
.text:00000954 Buf2            = dword ptr  0Ch
.text:00000954
.text:00000954                 push    ebp
.text:00000955                 mov     ebp, esp
.text:00000957                 mov     eax, [ebp+Buf2]
.text:0000095A                 push    eax             ; Buf2
.text:0000095B                 mov     ecx, [ebp+Buf1]
.text:0000095E                 push    ecx             ; Buf1
.text:0000095F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000964                 cmp     ebp, esp
.text:00000966                 call    __RTC_CheckEsp
.text:0000096B                 pop     ebp
.text:0000096C                 retn    8
.text:0000096C ___@8           endp
.text:0000096C
.text:0000096C ; ---------------------------------------------------------------------------
.text:0000096F                 align 10h
.text:0000096F _text           ends
.text:0000096F
.text:00000970 ; ===========================================================================
.text:00000970
.text:00000970 ; Segment type: Pure code
.text:00000970 ; Segment permissions: Read/Execute
.text:00000970 _text           segment para public 'CODE' use32
.text:00000970                 assume cs:_text
.text:00000970                 ;org 970h
.text:00000970 ; COMDAT (pick any)
.text:00000970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000970
.text:00000970 ; =============== S U B R O U T I N E =======================================
.text:00000970
.text:00000970 ; Attributes: bp-based frame
.text:00000970
.text:00000970 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000970                 public _IsEqualGUID@8
.text:00000970 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000970
.text:00000970 Buf1            = dword ptr  8
.text:00000970 Buf2            = dword ptr  0Ch
.text:00000970
.text:00000970                 push    ebp
.text:00000971                 mov     ebp, esp
.text:00000973                 push    10h             ; Size
.text:00000975                 mov     eax, [ebp+Buf2]
.text:00000978                 push    eax             ; Buf2
.text:00000979                 mov     ecx, [ebp+Buf1]
.text:0000097C                 push    ecx             ; Buf1
.text:0000097D                 call    _memcmp
.text:00000982                 add     esp, 0Ch
.text:00000985                 neg     eax
.text:00000987                 sbb     eax, eax
.text:00000989                 add     eax, 1
.text:0000098C                 cmp     ebp, esp
.text:0000098E                 call    __RTC_CheckEsp
.text:00000993                 pop     ebp
.text:00000994                 retn    8
.text:00000994 _IsEqualGUID@8  endp
.text:00000994
.text:00000994 ; ---------------------------------------------------------------------------
.text:00000997                 align 4
.text:00000997 _text           ends
.text:00000997
.text:00000998 ; ===========================================================================
.text:00000998
.text:00000998 ; Segment type: Pure code
.text:00000998 ; Segment permissions: Read/Execute
.text:00000998 _text           segment para public 'CODE' use32
.text:00000998                 assume cs:_text
.text:00000998                 ;org 998h
.text:00000998 ; COMDAT (pick any)
.text:00000998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000998
.text:00000998 ; =============== S U B R O U T I N E =======================================
.text:00000998
.text:00000998 ; Attributes: bp-based frame
.text:00000998
.text:00000998 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef(NCompress::NDeflate::NDecoder::CCoder *this)
.text:00000998                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:00000998 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00000998                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:00000998                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00000998
.text:00000998 var_4           = dword ptr -4
.text:00000998 this            = dword ptr  8
.text:00000998
.text:00000998                 push    ebp
.text:00000999                 mov     ebp, esp
.text:0000099B                 push    ecx
.text:0000099C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A3                 mov     eax, [ebp+this]
.text:000009A6                 mov     ecx, [eax+14h]
.text:000009A9                 add     ecx, 1
.text:000009AC                 mov     [ebp+var_4], ecx
.text:000009AF                 mov     edx, [ebp+this]
.text:000009B2                 mov     eax, [ebp+var_4]
.text:000009B5                 mov     [edx+14h], eax
.text:000009B8                 mov     eax, [ebp+var_4]
.text:000009BB                 mov     esp, ebp
.text:000009BD                 pop     ebp
.text:000009BE                 retn    4
.text:000009BE ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:000009BE
.text:000009BE ; ---------------------------------------------------------------------------
.text:000009C1                 align 4
.text:000009C1 _text           ends
.text:000009C1
.text:000009C4 ; ===========================================================================
.text:000009C4
.text:000009C4 ; Segment type: Pure code
.text:000009C4 ; Segment permissions: Read/Execute
.text:000009C4 _text           segment para public 'CODE' use32
.text:000009C4                 assume cs:_text
.text:000009C4                 ;org 9C4h
.text:000009C4 ; COMDAT (pick any)
.text:000009C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Release(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000009C4                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:000009C4 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000009C4                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)+5j
.text:000009C4                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)+5j ...
.text:000009C4
.text:000009C4 var_10          = dword ptr -10h
.text:000009C4 var_C           = dword ptr -0Ch
.text:000009C4 var_8           = dword ptr -8
.text:000009C4 var_4           = dword ptr -4
.text:000009C4 this            = dword ptr  8
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 sub     esp, 10h
.text:000009CA                 push    esi
.text:000009CB                 mov     eax, 0CCCCCCCCh
.text:000009D0                 mov     [ebp+var_10], eax
.text:000009D3                 mov     [ebp+var_C], eax
.text:000009D6                 mov     [ebp+var_8], eax
.text:000009D9                 mov     [ebp+var_4], eax
.text:000009DC                 mov     eax, [ebp+this]
.text:000009DF                 mov     ecx, [eax+14h]
.text:000009E2                 sub     ecx, 1
.text:000009E5                 mov     [ebp+var_C], ecx
.text:000009E8                 mov     edx, [ebp+this]
.text:000009EB                 mov     eax, [ebp+var_C]
.text:000009EE                 mov     [edx+14h], eax
.text:000009F1                 cmp     [ebp+var_C], 0
.text:000009F5                 jz      short loc_9FF
.text:000009F7                 mov     ecx, [ebp+this]
.text:000009FA                 mov     eax, [ecx+14h]
.text:000009FD                 jmp     short loc_A37
.text:000009FF ; ---------------------------------------------------------------------------
.text:000009FF
.text:000009FF loc_9FF:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+31j
.text:000009FF                 mov     edx, [ebp+this]
.text:00000A02                 mov     [ebp+var_8], edx
.text:00000A05                 mov     eax, [ebp+var_8]
.text:00000A08                 mov     [ebp+var_4], eax
.text:00000A0B                 cmp     [ebp+var_4], 0
.text:00000A0F                 jz      short loc_A2E
.text:00000A11                 mov     esi, esp
.text:00000A13                 push    1
.text:00000A15                 mov     ecx, [ebp+var_4]
.text:00000A18                 mov     edx, [ecx]
.text:00000A1A                 mov     ecx, [ebp+var_4]
.text:00000A1D                 mov     eax, [edx+10h]
.text:00000A20                 call    eax
.text:00000A22                 cmp     esi, esp
.text:00000A24                 call    __RTC_CheckEsp
.text:00000A29                 mov     [ebp+var_10], eax
.text:00000A2C                 jmp     short loc_A35
.text:00000A2E ; ---------------------------------------------------------------------------
.text:00000A2E
.text:00000A2E loc_A2E:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+4Bj
.text:00000A2E                 mov     [ebp+var_10], 0
.text:00000A35
.text:00000A35 loc_A35:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+68j
.text:00000A35                 xor     eax, eax
.text:00000A37
.text:00000A37 loc_A37:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+39j
.text:00000A37                 pop     esi
.text:00000A38                 add     esp, 10h
.text:00000A3B                 cmp     ebp, esp
.text:00000A3D                 call    __RTC_CheckEsp
.text:00000A42                 mov     esp, ebp
.text:00000A44                 pop     ebp
.text:00000A45                 retn    4
.text:00000A45 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:00000A45
.text:00000A45 _text           ends
.text:00000A45
.text:00000A48 ; ===========================================================================
.text:00000A48
.text:00000A48 ; Segment type: Pure code
.text:00000A48 ; Segment permissions: Read/Execute
.text:00000A48 _text           segment para public 'CODE' use32
.text:00000A48                 assume cs:_text
.text:00000A48                 ;org 0A48h
.text:00000A48 ; COMDAT (pick any)
.text:00000A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A48
.text:00000A48 ; =============== S U B R O U T I N E =======================================
.text:00000A48
.text:00000A48 ; Attributes: bp-based frame
.text:00000A48
.text:00000A48 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder64::`scalar deleting destructor'(unsigned int)
.text:00000A48                 public ??_GCCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00000A48 ??_GCCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00000A48
.text:00000A48 var_4           = dword ptr -4
.text:00000A48 arg_0           = dword ptr  8
.text:00000A48
.text:00000A48                 push    ebp
.text:00000A49                 mov     ebp, esp
.text:00000A4B                 push    ecx
.text:00000A4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A53                 mov     [ebp+var_4], ecx
.text:00000A56                 mov     ecx, [ebp+var_4] ; this
.text:00000A59                 call    ??1CCOMCoder64@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder64::~CCOMCoder64(void)
.text:00000A5E                 mov     eax, [ebp+arg_0]
.text:00000A61                 and     eax, 1
.text:00000A64                 jz      short loc_A72
.text:00000A66                 mov     ecx, [ebp+var_4]
.text:00000A69                 push    ecx             ; void *
.text:00000A6A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000A6F                 add     esp, 4
.text:00000A72
.text:00000A72 loc_A72:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::`scalar deleting destructor'(uint)+1Cj
.text:00000A72                 mov     eax, [ebp+var_4]
.text:00000A75                 add     esp, 4
.text:00000A78                 cmp     ebp, esp
.text:00000A7A                 call    __RTC_CheckEsp
.text:00000A7F                 mov     esp, ebp
.text:00000A81                 pop     ebp
.text:00000A82                 retn    4
.text:00000A82 ??_GCCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00000A82
.text:00000A82 ; ---------------------------------------------------------------------------
.text:00000A85                 align 4
.text:00000A85 _text           ends
.text:00000A85
.text:00000A88 ; ===========================================================================
.text:00000A88
.text:00000A88 ; Segment type: Pure code
.text:00000A88 ; Segment permissions: Read/Execute
.text:00000A88 _text           segment para public 'CODE' use32
.text:00000A88                 assume cs:_text
.text:00000A88                 ;org 0A88h
.text:00000A88 ; COMDAT (pick any)
.text:00000A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A88
.text:00000A88 ; =============== S U B R O U T I N E =======================================
.text:00000A88
.text:00000A88 ; Attributes: bp-based frame
.text:00000A88
.text:00000A88 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder64::~CCOMCoder64(NCompress::NDeflate::NDecoder::CCOMCoder64 *__hidden this)
.text:00000A88                 public ??1CCOMCoder64@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000A88 ??1CCOMCoder64@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00000A88                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::`scalar deleting destructor'(uint)+11p
.text:00000A88
.text:00000A88 var_4           = dword ptr -4
.text:00000A88
.text:00000A88                 push    ebp
.text:00000A89                 mov     ebp, esp
.text:00000A8B                 push    ecx
.text:00000A8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A93                 mov     [ebp+var_4], ecx
.text:00000A96                 mov     ecx, [ebp+var_4] ; this
.text:00000A99                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00000A9E                 add     esp, 4
.text:00000AA1                 cmp     ebp, esp
.text:00000AA3                 call    __RTC_CheckEsp
.text:00000AA8                 mov     esp, ebp
.text:00000AAA                 pop     ebp
.text:00000AAB                 retn
.text:00000AAB ??1CCOMCoder64@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00000AAB
.text:00000AAB _text           ends
.text:00000AAB
.text:00000AAC ; ===========================================================================
.text:00000AAC
.text:00000AAC ; Segment type: Pure code
.text:00000AAC ; Segment permissions: Read/Execute
.text:00000AAC _text           segment para public 'CODE' use32
.text:00000AAC                 assume cs:_text
.text:00000AAC                 ;org 0AACh
.text:00000AAC ; COMDAT (pick any)
.text:00000AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AAC
.text:00000AAC ; =============== S U B R O U T I N E =======================================
.text:00000AAC
.text:00000AAC ; Attributes: bp-based frame
.text:00000AAC
.text:00000AAC ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::~CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00000AAC                 public ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000AAC ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00000AAC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::~CCOMCoder64(void)+11p
.text:00000AAC                                         ; NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:00000AAC
.text:00000AAC var_10          = dword ptr -10h
.text:00000AAC var_C           = dword ptr -0Ch
.text:00000AAC var_4           = dword ptr -4
.text:00000AAC
.text:00000AAC                 push    ebp
.text:00000AAD                 mov     ebp, esp
.text:00000AAF                 push    0FFFFFFFFh
.text:00000AB1                 push    offset __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00000AB6                 mov     eax, large fs:0
.text:00000ABC                 push    eax
.text:00000ABD                 push    ecx
.text:00000ABE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000AC5                 mov     eax, dword ptr ds:___security_cookie
.text:00000ACA                 xor     eax, ebp
.text:00000ACC                 push    eax
.text:00000ACD                 lea     eax, [ebp+var_C]
.text:00000AD0                 mov     large fs:0, eax
.text:00000AD6                 mov     [ebp+var_10], ecx
.text:00000AD9                 mov     eax, [ebp+var_10]
.text:00000ADC                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:00000AE2                 mov     ecx, [ebp+var_10]
.text:00000AE5                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000AEC                 mov     edx, [ebp+var_10]
.text:00000AEF                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:00000AF6                 mov     eax, [ebp+var_10]
.text:00000AF9                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000B00                 mov     ecx, [ebp+var_10]
.text:00000B03                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:00000B0A                 mov     [ebp+var_4], 1
.text:00000B11                 mov     ecx, [ebp+var_10]
.text:00000B14                 add     ecx, 48h ; 'H'
.text:00000B17                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00000B1C                 mov     byte ptr [ebp+var_4], 0
.text:00000B20                 mov     ecx, [ebp+var_10]
.text:00000B23                 add     ecx, 40h ; '@'
.text:00000B26                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000B2B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B32                 mov     ecx, [ebp+var_10]
.text:00000B35                 add     ecx, 18h        ; this
.text:00000B38                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00000B3D                 mov     ecx, [ebp+var_C]
.text:00000B40                 mov     large fs:0, ecx
.text:00000B47                 pop     ecx
.text:00000B48                 add     esp, 10h
.text:00000B4B                 cmp     ebp, esp
.text:00000B4D                 call    __RTC_CheckEsp
.text:00000B52                 mov     esp, ebp
.text:00000B54                 pop     ebp
.text:00000B55                 retn
.text:00000B55 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00000B55
.text:00000B55 ; ---------------------------------------------------------------------------
.text:00000B56                 align 4
.text:00000B56 _text           ends
.text:00000B56
.text$x:00000B58 ; ===========================================================================
.text$x:00000B58
.text$x:00000B58 ; Segment type: Pure code
.text$x:00000B58 ; Segment permissions: Read/Execute
.text$x:00000B58 _text$x         segment para public 'CODE' use32
.text$x:00000B58                 assume cs:_text$x
.text$x:00000B58                 ;org 0B58h
.text$x:00000B58 ; COMDAT (pick associative to section at AAC)
.text$x:00000B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000B58
.text$x:00000B58 ; =============== S U B R O U T I N E =======================================
.text$x:00000B58
.text$x:00000B58
.text$x:00000B58 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 proc near
.text$x:00000B58                                         ; DATA XREF: .xdata$x:00000C00o
.text$x:00000B58                 mov     ecx, [ebp-10h]
.text$x:00000B5B                 add     ecx, 18h        ; this
.text$x:00000B5E                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00000B5E __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 endp
.text$x:00000B5E
.text$x:00000B63
.text$x:00000B63 ; =============== S U B R O U T I N E =======================================
.text$x:00000B63
.text$x:00000B63
.text$x:00000B63 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 proc near
.text$x:00000B63                                         ; DATA XREF: .xdata$x:00000C08o
.text$x:00000B63                 mov     ecx, [ebp-10h]
.text$x:00000B66                 add     ecx, 40h ; '@'
.text$x:00000B69                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00000B69 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 endp
.text$x:00000B69
.text$x:00000B6E
.text$x:00000B6E ; =============== S U B R O U T I N E =======================================
.text$x:00000B6E
.text$x:00000B6E
.text$x:00000B6E __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text$x:00000B6E                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+5o
.text$x:00000B6E
.text$x:00000B6E arg_4           = dword ptr  8
.text$x:00000B6E
.text$x:00000B6E                 mov     edx, [esp+arg_4]
.text$x:00000B72                 lea     eax, [edx+0Ch]
.text$x:00000B75                 mov     ecx, [edx-8]
.text$x:00000B78                 xor     ecx, eax
.text$x:00000B7A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B7F                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text$x:00000B84                 jmp     ___CxxFrameHandler3
.text$x:00000B84 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text$x:00000B84
.text$x:00000B84 ; ---------------------------------------------------------------------------
.text$x:00000B89                 align 4
.text$x:00000B89 _text$x         ends
.text$x:00000B89
.rdata:00000B8C ; ===========================================================================
.rdata:00000B8C
.rdata:00000B8C ; Segment type: Pure data
.rdata:00000B8C ; Segment permissions: Read
.rdata:00000B8C _rdata          segment dword public 'DATA' use32
.rdata:00000B8C                 assume cs:_rdata
.rdata:00000B8C                 ;org 0B8Ch
.rdata:00000B8C ; COMDAT (pick largest)
.rdata:00000B8C                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000B90                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00000B90 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.rdata:00000B90 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000B90                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+57o
.rdata:00000B90                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000B94                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00000B98                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00000B9C                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00000B9C _rdata          ends
.rdata:00000B9C
.rdata:00000BA0 ; ===========================================================================
.rdata:00000BA0
.rdata:00000BA0 ; Segment type: Pure data
.rdata:00000BA0 ; Segment permissions: Read
.rdata:00000BA0 _rdata          segment dword public 'DATA' use32
.rdata:00000BA0                 assume cs:_rdata
.rdata:00000BA0                 ;org 0BA0h
.rdata:00000BA0 ; COMDAT (pick largest)
.rdata:00000BA0                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000BA4                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000BA4 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000BA4 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000BA4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+4Do
.rdata:00000BA4                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000BA8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00000BAC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00000BB0                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00000BB0 _rdata          ends
.rdata:00000BB0
.rdata:00000BB4 ; ===========================================================================
.rdata:00000BB4
.rdata:00000BB4 ; Segment type: Pure data
.rdata:00000BB4 ; Segment permissions: Read
.rdata:00000BB4 _rdata          segment dword public 'DATA' use32
.rdata:00000BB4                 assume cs:_rdata
.rdata:00000BB4                 ;org 0BB4h
.rdata:00000BB4 ; COMDAT (pick largest)
.rdata:00000BB4                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000BB8                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00000BB8 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000BB8 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000BB8                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+43o
.rdata:00000BB8                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000BBC                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00000BC0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:00000BC4                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:00000BC8                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:00000BC8 _rdata          ends
.rdata:00000BC8
.rdata:00000BCC ; ===========================================================================
.rdata:00000BCC
.rdata:00000BCC ; Segment type: Pure data
.rdata:00000BCC ; Segment permissions: Read
.rdata:00000BCC _rdata          segment dword public 'DATA' use32
.rdata:00000BCC                 assume cs:_rdata
.rdata:00000BCC                 ;org 0BCCh
.rdata:00000BCC ; COMDAT (pick largest)
.rdata:00000BCC                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BD0                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00000BD0 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000BD0 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000BD0                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+39o
.rdata:00000BD0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000BD4                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:00000BD8                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:00000BDC                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00000BDC _rdata          ends
.rdata:00000BDC
.rdata:00000BE0 ; ===========================================================================
.rdata:00000BE0
.rdata:00000BE0 ; Segment type: Pure data
.rdata:00000BE0 ; Segment permissions: Read
.rdata:00000BE0 _rdata          segment dword public 'DATA' use32
.rdata:00000BE0                 assume cs:_rdata
.rdata:00000BE0                 ;org 0BE0h
.rdata:00000BE0 ; COMDAT (pick largest)
.rdata:00000BE0                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000BE4                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00000BE4 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:00000BE4 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000BE4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+30o
.rdata:00000BE4                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000BE8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:00000BEC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:00000BF0                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000BF4                 dd offset ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(uint)
.rdata:00000BF8                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000BF8 _rdata          ends
.rdata:00000BF8
.xdata$x:00000BFC ; ===========================================================================
.xdata$x:00000BFC
.xdata$x:00000BFC ; Segment type: Pure data
.xdata$x:00000BFC ; Segment permissions: Read
.xdata$x:00000BFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000BFC                 assume cs:_xdata$x
.xdata$x:00000BFC                 ;org 0BFCh
.xdata$x:00000BFC ; COMDAT (pick associative to section at AAC)
.xdata$x:00000BFC __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db 0FFh
.xdata$x:00000BFC                                         ; DATA XREF: .xdata$x:00000C14o
.xdata$x:00000BFD                 db 0FFh
.xdata$x:00000BFE                 db 0FFh
.xdata$x:00000BFF                 db 0FFh
.xdata$x:00000C00                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0
.xdata$x:00000C04                 align 8
.xdata$x:00000C08                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1
.xdata$x:00000C0C __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db  22h ; "
.xdata$x:00000C0C                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ+11o
.xdata$x:00000C0D                 db    5
.xdata$x:00000C0E                 db  93h ; ô
.xdata$x:00000C0F                 db  19h
.xdata$x:00000C10                 db    2
.xdata$x:00000C11                 db    0
.xdata$x:00000C12                 db    0
.xdata$x:00000C13                 db    0
.xdata$x:00000C14                 dd offset __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.xdata$x:00000C18                 db    0
.xdata$x:00000C19                 db    0
.xdata$x:00000C1A                 db    0
.xdata$x:00000C1B                 db    0
.xdata$x:00000C1C                 db    0
.xdata$x:00000C1D                 db    0
.xdata$x:00000C1E                 db    0
.xdata$x:00000C1F                 db    0
.xdata$x:00000C20                 db    0
.xdata$x:00000C21                 db    0
.xdata$x:00000C22                 db    0
.xdata$x:00000C23                 db    0
.xdata$x:00000C24                 db    0
.xdata$x:00000C25                 db    0
.xdata$x:00000C26                 db    0
.xdata$x:00000C27                 db    0
.xdata$x:00000C28                 db    0
.xdata$x:00000C29                 db    0
.xdata$x:00000C2A                 db    0
.xdata$x:00000C2B                 db    0
.xdata$x:00000C2C                 db    1
.xdata$x:00000C2D                 db    0
.xdata$x:00000C2E                 db    0
.xdata$x:00000C2F                 db    0
.xdata$x:00000C2F _xdata$x        ends
.xdata$x:00000C2F
.rdata$r:00000C30 ; ===========================================================================
.rdata$r:00000C30
.rdata$r:00000C30 ; Segment type: Pure data
.rdata$r:00000C30 ; Segment permissions: Read
.rdata$r:00000C30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C30                 assume cs:_rdata$r
.rdata$r:00000C30                 ;org 0C30h
.rdata$r:00000C30 ; COMDAT (pick any)
.rdata$r:00000C30                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00000C30 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000C30 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000C30                                         ; DATA XREF: .rdata:00000BE0o
.rdata$r:00000C31                 db    0
.rdata$r:00000C32                 db    0
.rdata$r:00000C33                 db    0
.rdata$r:00000C34                 db    0
.rdata$r:00000C35                 db    0
.rdata$r:00000C36                 db    0
.rdata$r:00000C37                 db    0
.rdata$r:00000C38                 db    0
.rdata$r:00000C39                 db    0
.rdata$r:00000C3A                 db    0
.rdata$r:00000C3B                 db    0
.rdata$r:00000C3C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C40                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C40 _rdata$r        ends
.rdata$r:00000C40
.rdata$r:00000C44 ; ===========================================================================
.rdata$r:00000C44
.rdata$r:00000C44 ; Segment type: Pure data
.rdata$r:00000C44 ; Segment permissions: Read
.rdata$r:00000C44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C44                 assume cs:_rdata$r
.rdata$r:00000C44                 ;org 0C44h
.rdata$r:00000C44 ; COMDAT (pick any)
.rdata$r:00000C44                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00000C44 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00000C44 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00000C44                                         ; DATA XREF: .rdata:00000BCCo
.rdata$r:00000C45                 db    0
.rdata$r:00000C46                 db    0
.rdata$r:00000C47                 db    0
.rdata$r:00000C48                 db    4
.rdata$r:00000C49                 db    0
.rdata$r:00000C4A                 db    0
.rdata$r:00000C4B                 db    0
.rdata$r:00000C4C                 db    0
.rdata$r:00000C4D                 db    0
.rdata$r:00000C4E                 db    0
.rdata$r:00000C4F                 db    0
.rdata$r:00000C50                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C54                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C54 _rdata$r        ends
.rdata$r:00000C54
.rdata$r:00000C58 ; ===========================================================================
.rdata$r:00000C58
.rdata$r:00000C58 ; Segment type: Pure data
.rdata$r:00000C58 ; Segment permissions: Read
.rdata$r:00000C58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C58                 assume cs:_rdata$r
.rdata$r:00000C58                 ;org 0C58h
.rdata$r:00000C58 ; COMDAT (pick any)
.rdata$r:00000C58                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000C58 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000C58 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000C58                                         ; DATA XREF: .rdata:00000BB4o
.rdata$r:00000C59                 db    0
.rdata$r:00000C5A                 db    0
.rdata$r:00000C5B                 db    0
.rdata$r:00000C5C                 db    8
.rdata$r:00000C5D                 db    0
.rdata$r:00000C5E                 db    0
.rdata$r:00000C5F                 db    0
.rdata$r:00000C60                 db    0
.rdata$r:00000C61                 db    0
.rdata$r:00000C62                 db    0
.rdata$r:00000C63                 db    0
.rdata$r:00000C64                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C68                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C68 _rdata$r        ends
.rdata$r:00000C68
.rdata$r:00000C6C ; ===========================================================================
.rdata$r:00000C6C
.rdata$r:00000C6C ; Segment type: Pure data
.rdata$r:00000C6C ; Segment permissions: Read
.rdata$r:00000C6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C6C                 assume cs:_rdata$r
.rdata$r:00000C6C                 ;org 0C6Ch
.rdata$r:00000C6C ; COMDAT (pick any)
.rdata$r:00000C6C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00000C6C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00000C6C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00000C6C                                         ; DATA XREF: .rdata:00000BA0o
.rdata$r:00000C6D                 db    0
.rdata$r:00000C6E                 db    0
.rdata$r:00000C6F                 db    0
.rdata$r:00000C70                 db  0Ch
.rdata$r:00000C71                 db    0
.rdata$r:00000C72                 db    0
.rdata$r:00000C73                 db    0
.rdata$r:00000C74                 db    0
.rdata$r:00000C75                 db    0
.rdata$r:00000C76                 db    0
.rdata$r:00000C77                 db    0
.rdata$r:00000C78                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C7C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C7C _rdata$r        ends
.rdata$r:00000C7C
.rdata$r:00000C80 ; ===========================================================================
.rdata$r:00000C80
.rdata$r:00000C80 ; Segment type: Pure data
.rdata$r:00000C80 ; Segment permissions: Read
.rdata$r:00000C80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C80                 assume cs:_rdata$r
.rdata$r:00000C80                 ;org 0C80h
.rdata$r:00000C80 ; COMDAT (pick any)
.rdata$r:00000C80                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00000C80 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00000C80 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00000C80                                         ; DATA XREF: .rdata:00000B8Co
.rdata$r:00000C81                 db    0
.rdata$r:00000C82                 db    0
.rdata$r:00000C83                 db    0
.rdata$r:00000C84                 db  10h
.rdata$r:00000C85                 db    0
.rdata$r:00000C86                 db    0
.rdata$r:00000C87                 db    0
.rdata$r:00000C88                 db    0
.rdata$r:00000C89                 db    0
.rdata$r:00000C8A                 db    0
.rdata$r:00000C8B                 db    0
.rdata$r:00000C8C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000C90                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C90 _rdata$r        ends
.rdata$r:00000C90
.text:00000C94 ; ===========================================================================
.text:00000C94
.text:00000C94 ; Segment type: Pure code
.text:00000C94 ; Segment permissions: Read/Execute
.text:00000C94 _text           segment para public 'CODE' use32
.text:00000C94                 assume cs:_text
.text:00000C94                 ;org 0C94h
.text:00000C94 ; COMDAT (pick any)
.text:00000C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C94
.text:00000C94 ; =============== S U B R O U T I N E =======================================
.text:00000C94
.text:00000C94 ; Attributes: bp-based frame
.text:00000C94
.text:00000C94 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00000C94                 public ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00000C94 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00000C94
.text:00000C94 var_4           = dword ptr -4
.text:00000C94 arg_0           = dword ptr  8
.text:00000C94
.text:00000C94                 push    ebp
.text:00000C95                 mov     ebp, esp
.text:00000C97                 push    ecx
.text:00000C98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9F                 mov     [ebp+var_4], ecx
.text:00000CA2                 mov     ecx, [ebp+var_4] ; this
.text:00000CA5                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00000CAA                 mov     eax, [ebp+arg_0]
.text:00000CAD                 and     eax, 1
.text:00000CB0                 jz      short loc_CBE
.text:00000CB2                 mov     ecx, [ebp+var_4]
.text:00000CB5                 push    ecx             ; void *
.text:00000CB6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000CBB                 add     esp, 4
.text:00000CBE
.text:00000CBE loc_CBE:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000CBE                 mov     eax, [ebp+var_4]
.text:00000CC1                 add     esp, 4
.text:00000CC4                 cmp     ebp, esp
.text:00000CC6                 call    __RTC_CheckEsp
.text:00000CCB                 mov     esp, ebp
.text:00000CCD                 pop     ebp
.text:00000CCE                 retn    4
.text:00000CCE ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00000CCE
.text:00000CCE ; ---------------------------------------------------------------------------
.text:00000CD1                 align 4
.text:00000CD1 _text           ends
.text:00000CD1
.text:00000CD4 ; ===========================================================================
.text:00000CD4
.text:00000CD4 ; Segment type: Pure code
.text:00000CD4 ; Segment permissions: Read/Execute
.text:00000CD4 _text           segment para public 'CODE' use32
.text:00000CD4                 assume cs:_text
.text:00000CD4                 ;org 0CD4h
.text:00000CD4 ; COMDAT (pick any)
.text:00000CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CD4
.text:00000CD4 ; =============== S U B R O U T I N E =======================================
.text:00000CD4
.text:00000CD4 ; Attributes: bp-based frame
.text:00000CD4
.text:00000CD4 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:00000CD4                 public ??1CLzOutWindow@@QAE@XZ
.text:00000CD4 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+8Cp
.text:00000CD4                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0+6j
.text:00000CD4
.text:00000CD4 var_4           = dword ptr -4
.text:00000CD4
.text:00000CD4                 push    ebp
.text:00000CD5                 mov     ebp, esp
.text:00000CD7                 push    ecx
.text:00000CD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CDF                 mov     [ebp+var_4], ecx
.text:00000CE2                 mov     ecx, [ebp+var_4] ; this
.text:00000CE5                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000CEA                 add     esp, 4
.text:00000CED                 cmp     ebp, esp
.text:00000CEF                 call    __RTC_CheckEsp
.text:00000CF4                 mov     esp, ebp
.text:00000CF6                 pop     ebp
.text:00000CF7                 retn
.text:00000CF7 ??1CLzOutWindow@@QAE@XZ endp
.text:00000CF7
.text:00000CF7 _text           ends
.text:00000CF7
.text:00000CF8 ; ===========================================================================
.text:00000CF8
.text:00000CF8 ; Segment type: Pure code
.text:00000CF8 ; Segment permissions: Read/Execute
.text:00000CF8 _text           segment para public 'CODE' use32
.text:00000CF8                 assume cs:_text
.text:00000CF8                 ;org 0CF8h
.text:00000CF8 ; COMDAT (pick any)
.text:00000CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CF8
.text:00000CF8 ; =============== S U B R O U T I N E =======================================
.text:00000CF8
.text:00000CF8 ; Attributes: bp-based frame
.text:00000CF8
.text:00000CF8 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00000CF8                 public ??1COutBuffer@@QAE@XZ
.text:00000CF8 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:00000CF8
.text:00000CF8 var_4           = dword ptr -4
.text:00000CF8
.text:00000CF8                 push    ebp
.text:00000CF9                 mov     ebp, esp
.text:00000CFB                 push    ecx
.text:00000CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D03                 mov     [ebp+var_4], ecx
.text:00000D06                 mov     ecx, [ebp+var_4] ; this
.text:00000D09                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00000D0E                 add     esp, 4
.text:00000D11                 cmp     ebp, esp
.text:00000D13                 call    __RTC_CheckEsp
.text:00000D18                 mov     esp, ebp
.text:00000D1A                 pop     ebp
.text:00000D1B                 retn
.text:00000D1B ??1COutBuffer@@QAE@XZ endp
.text:00000D1B
.text:00000D1B _text           ends
.text:00000D1B
.text:00000D1C ; ===========================================================================
.text:00000D1C
.text:00000D1C ; Segment type: Pure code
.text:00000D1C ; Segment permissions: Read/Execute
.text:00000D1C _text           segment para public 'CODE' use32
.text:00000D1C                 assume cs:_text
.text:00000D1C                 ;org 0D1Ch
.text:00000D1C ; COMDAT (pick any)
.text:00000D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D1C
.text:00000D1C ; =============== S U B R O U T I N E =======================================
.text:00000D1C
.text:00000D1C ; Attributes: bp-based frame
.text:00000D1C
.text:00000D1C ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00000D1C                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000D1C ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000D1C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+6Bp
.text:00000D1C
.text:00000D1C var_4           = dword ptr -4
.text:00000D1C
.text:00000D1C                 push    ebp
.text:00000D1D                 mov     ebp, esp
.text:00000D1F                 push    ecx
.text:00000D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D27                 mov     [ebp+var_4], ecx
.text:00000D2A                 mov     ecx, [ebp+var_4]
.text:00000D2D                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000D32                 add     esp, 4
.text:00000D35                 cmp     ebp, esp
.text:00000D37                 call    __RTC_CheckEsp
.text:00000D3C                 mov     esp, ebp
.text:00000D3E                 pop     ebp
.text:00000D3F                 retn
.text:00000D3F ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000D3F
.text:00000D3F _text           ends
.text:00000D3F
.text:00000D40 ; ===========================================================================
.text:00000D40
.text:00000D40 ; Segment type: Pure code
.text:00000D40 ; Segment permissions: Read/Execute
.text:00000D40 _text           segment para public 'CODE' use32
.text:00000D40                 assume cs:_text
.text:00000D40                 ;org 0D40h
.text:00000D40 ; COMDAT (pick any)
.text:00000D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00000D40                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000D40 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000D40                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00000D40
.text:00000D40 var_4           = dword ptr -4
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 push    ecx
.text:00000D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D4B                 mov     [ebp+var_4], ecx
.text:00000D4E                 mov     ecx, [ebp+var_4]
.text:00000D51                 add     ecx, 8          ; this
.text:00000D54                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000D59                 add     esp, 4
.text:00000D5C                 cmp     ebp, esp
.text:00000D5E                 call    __RTC_CheckEsp
.text:00000D63                 mov     esp, ebp
.text:00000D65                 pop     ebp
.text:00000D66                 retn
.text:00000D66 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000D66
.text:00000D66 ; ---------------------------------------------------------------------------
.text:00000D67                 align 4
.text:00000D67 _text           ends
.text:00000D67
.text:00000D68 ; ===========================================================================
.text:00000D68
.text:00000D68 ; Segment type: Pure code
.text:00000D68 ; Segment permissions: Read/Execute
.text:00000D68 _text           segment para public 'CODE' use32
.text:00000D68                 assume cs:_text
.text:00000D68                 ;org 0D68h
.text:00000D68 ; COMDAT (pick any)
.text:00000D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D68
.text:00000D68 ; =============== S U B R O U T I N E =======================================
.text:00000D68
.text:00000D68 ; Attributes: bp-based frame
.text:00000D68
.text:00000D68 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00000D68                 public ??1CInBuffer@@QAE@XZ
.text:00000D68 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00000D68
.text:00000D68 var_4           = dword ptr -4
.text:00000D68
.text:00000D68                 push    ebp
.text:00000D69                 mov     ebp, esp
.text:00000D6B                 push    ecx
.text:00000D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D73                 mov     [ebp+var_4], ecx
.text:00000D76                 mov     ecx, [ebp+var_4] ; this
.text:00000D79                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00000D7E                 add     esp, 4
.text:00000D81                 cmp     ebp, esp
.text:00000D83                 call    __RTC_CheckEsp
.text:00000D88                 mov     esp, ebp
.text:00000D8A                 pop     ebp
.text:00000D8B                 retn
.text:00000D8B ??1CInBuffer@@QAE@XZ endp
.text:00000D8B
.text:00000D8B _text           ends
.text:00000D8B
.text:00000D8C ; ===========================================================================
.text:00000D8C
.text:00000D8C ; Segment type: Pure code
.text:00000D8C ; Segment permissions: Read/Execute
.text:00000D8C _text           segment para public 'CODE' use32
.text:00000D8C                 assume cs:_text
.text:00000D8C                 ;org 0D8Ch
.text:00000D8C ; COMDAT (pick any)
.text:00000D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D8C
.text:00000D8C ; =============== S U B R O U T I N E =======================================
.text:00000D8C
.text:00000D8C ; Attributes: bp-based frame
.text:00000D8C
.text:00000D8C ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(NCompress::NDeflate::NEncoder::CCOMCoder64 *__hidden this)
.text:00000D8C                 public ??0CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00000D8C ??0CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00000D8C                                         ; CODE XREF: CreateEnc(void)+5Ap
.text:00000D8C
.text:00000D8C var_4           = dword ptr -4
.text:00000D8C
.text:00000D8C                 push    ebp
.text:00000D8D                 mov     ebp, esp
.text:00000D8F                 push    ecx
.text:00000D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D97                 mov     [ebp+var_4], ecx
.text:00000D9A                 mov     ecx, [ebp+var_4] ; this
.text:00000D9D                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000DA2                 mov     ecx, [ebp+var_4]
.text:00000DA5                 add     ecx, 4          ; this
.text:00000DA8                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:00000DAD                 mov     ecx, [ebp+var_4]
.text:00000DB0                 add     ecx, 8          ; this
.text:00000DB3                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000DB8                 push    1               ; bool
.text:00000DBA                 mov     ecx, [ebp+var_4]
.text:00000DBD                 add     ecx, 10h        ; this
.text:00000DC0                 call    ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)
.text:00000DC5                 mov     eax, [ebp+var_4]
.text:00000DC8                 mov     dword ptr [eax], offset ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressCoder'}
.text:00000DCE                 mov     ecx, [ebp+var_4]
.text:00000DD1                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressSetCoderProperties'}
.text:00000DD8                 mov     eax, [ebp+var_4]
.text:00000DDB                 add     esp, 4
.text:00000DDE                 cmp     ebp, esp
.text:00000DE0                 call    __RTC_CheckEsp
.text:00000DE5                 mov     esp, ebp
.text:00000DE7                 pop     ebp
.text:00000DE8                 retn
.text:00000DE8 ??0CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00000DE8
.text:00000DE8 ; ---------------------------------------------------------------------------
.text:00000DE9                 align 4
.text:00000DE9 _text           ends
.text:00000DE9
.rdata:00000DEC ; ===========================================================================
.rdata:00000DEC
.rdata:00000DEC ; Segment type: Pure data
.rdata:00000DEC ; Segment permissions: Read
.rdata:00000DEC _rdata          segment dword public 'DATA' use32
.rdata:00000DEC                 assume cs:_rdata
.rdata:00000DEC                 ;org 0DECh
.rdata:00000DEC ; COMDAT (pick largest)
.rdata:00000DEC                 dd offset ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000DF0                 public ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00000DF0 ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000DF0 ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000DF0                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+45o
.rdata:00000DF0                                         ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000DF4                 dd offset ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef`adjustor{4}' (void)
.rdata:00000DF8                 dd offset ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::Release`adjustor{4}' (void)
.rdata:00000DFC                 dd offset ?SetCoderProperties@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NDeflate::NEncoder::CCOMCoder64::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000DFC _rdata          ends
.rdata:00000DFC
.rdata:00000E00 ; ===========================================================================
.rdata:00000E00
.rdata:00000E00 ; Segment type: Pure data
.rdata:00000E00 ; Segment permissions: Read
.rdata:00000E00 _rdata          segment dword public 'DATA' use32
.rdata:00000E00                 assume cs:_rdata
.rdata:00000E00                 ;org 0E00h
.rdata:00000E00 ; COMDAT (pick largest)
.rdata:00000E00                 dd offset ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00000E04                 public ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00000E04 ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressCoder'}
.rdata:00000E04 ??_7CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000E04                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+3Co
.rdata:00000E04                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)
.rdata:00000E08                 dd offset ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef(void)
.rdata:00000E0C                 dd offset ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)
.rdata:00000E10                 dd offset ?Code@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCOMCoder64::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000E10 _rdata          ends
.rdata:00000E10
.rdata$r:00000E14 ; ===========================================================================
.rdata$r:00000E14
.rdata$r:00000E14 ; Segment type: Pure data
.rdata$r:00000E14 ; Segment permissions: Read
.rdata$r:00000E14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E14                 assume cs:_rdata$r
.rdata$r:00000E14                 ;org 0E14h
.rdata$r:00000E14 ; COMDAT (pick any)
.rdata$r:00000E14                 public ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00000E14 ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000E14 ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000E14                                         ; DATA XREF: .rdata:00000E00o
.rdata$r:00000E15                 db    0
.rdata$r:00000E16                 db    0
.rdata$r:00000E17                 db    0
.rdata$r:00000E18                 db    0
.rdata$r:00000E19                 db    0
.rdata$r:00000E1A                 db    0
.rdata$r:00000E1B                 db    0
.rdata$r:00000E1C                 db    0
.rdata$r:00000E1D                 db    0
.rdata$r:00000E1E                 db    0
.rdata$r:00000E1F                 db    0
.rdata$r:00000E20                 dd offset ??_R0?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:00000E24                 dd offset ??_R3CCOMCoder64@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E24 _rdata$r        ends
.rdata$r:00000E24
.data:00000E28 ; ===========================================================================
.data:00000E28
.data:00000E28 ; Segment type: Pure data
.data:00000E28 ; Segment permissions: Read/Write
.data:00000E28 _data           segment dword public 'DATA' use32
.data:00000E28                 assume cs:_data
.data:00000E28                 ;org 0E28h
.data:00000E28 ; COMDAT (pick any)
.data:00000E28                 public ??_R0?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@@8
.data:00000E28 ; class NCompress::NDeflate::NEncoder::CCOMCoder64 `RTTI Type Descriptor'
.data:00000E28 ??_R0?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000E28                                         ; DATA XREF: .rdata$r:00000E20o
.data:00000E28                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000E28                                         ; const type_info::`vftable'
.data:00000E2C                 align 10h
.data:00000E30 a_?avccomcode_0 db '.?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@',0
.data:00000E5E                 align 10h
.data:00000E5E _data           ends
.data:00000E5E
.rdata$r:00000E60 ; ===========================================================================
.rdata$r:00000E60
.rdata$r:00000E60 ; Segment type: Pure data
.rdata$r:00000E60 ; Segment permissions: Read
.rdata$r:00000E60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E60                 assume cs:_rdata$r
.rdata$r:00000E60                 ;org 0E60h
.rdata$r:00000E60 ; COMDAT (pick any)
.rdata$r:00000E60                 public ??_R3CCOMCoder64@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E60 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E60 ??_R3CCOMCoder64@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:00000E60                                         ; DATA XREF: .rdata$r:00000E24o
.rdata$r:00000E60                                         ; .rdata$r:00000EA8o ...
.rdata$r:00000E61                 db    0
.rdata$r:00000E62                 db    0
.rdata$r:00000E63                 db    0
.rdata$r:00000E64                 db    1
.rdata$r:00000E65                 db    0
.rdata$r:00000E66                 db    0
.rdata$r:00000E67                 db    0
.rdata$r:00000E68                 db    7
.rdata$r:00000E69                 db    0
.rdata$r:00000E6A                 db    0
.rdata$r:00000E6B                 db    0
.rdata$r:00000E6C                 dd offset ??_R2CCOMCoder64@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Array'
.rdata$r:00000E6C _rdata$r        ends
.rdata$r:00000E6C
.rdata$r:00000E70 ; ===========================================================================
.rdata$r:00000E70
.rdata$r:00000E70 ; Segment type: Pure data
.rdata$r:00000E70 ; Segment permissions: Read
.rdata$r:00000E70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E70                 assume cs:_rdata$r
.rdata$r:00000E70                 ;org 0E70h
.rdata$r:00000E70 ; COMDAT (pick any)
.rdata$r:00000E70                 public ??_R2CCOMCoder64@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E70 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Array'
.rdata$r:00000E70 ??_R2CCOMCoder64@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder64@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E70                                         ; DATA XREF: .rdata$r:00000E6Co
.rdata$r:00000E70                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E74                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E78                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000E7C                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000E80                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000E84                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000E88                 dd offset ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000E8C                 db    0
.rdata$r:00000E8D                 align 10h
.rdata$r:00000E8D _rdata$r        ends
.rdata$r:00000E8D
.rdata$r:00000E90 ; ===========================================================================
.rdata$r:00000E90
.rdata$r:00000E90 ; Segment type: Pure data
.rdata$r:00000E90 ; Segment permissions: Read
.rdata$r:00000E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E90                 assume cs:_rdata$r
.rdata$r:00000E90                 ;org 0E90h
.rdata$r:00000E90 ; COMDAT (pick any)
.rdata$r:00000E90                 public ??_R1A@?0A@EA@CCOMCoder64@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000E90 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E90 ??_R1A@?0A@EA@CCOMCoder64@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000E90                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Base Class Array'o
.rdata$r:00000E90                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:00000E94                 db    6
.rdata$r:00000E95                 db    0
.rdata$r:00000E96                 db    0
.rdata$r:00000E97                 db    0
.rdata$r:00000E98                 db    0
.rdata$r:00000E99                 db    0
.rdata$r:00000E9A                 db    0
.rdata$r:00000E9B                 db    0
.rdata$r:00000E9C                 db 0FFh
.rdata$r:00000E9D                 db 0FFh
.rdata$r:00000E9E                 db 0FFh
.rdata$r:00000E9F                 db 0FFh
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 db  40h ; @
.rdata$r:00000EA5                 db    0
.rdata$r:00000EA6                 db    0
.rdata$r:00000EA7                 db    0
.rdata$r:00000EA8                 dd offset ??_R3CCOMCoder64@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EA8 _rdata$r        ends
.rdata$r:00000EA8
.rdata$r:00000EAC ; ===========================================================================
.rdata$r:00000EAC
.rdata$r:00000EAC ; Segment type: Pure data
.rdata$r:00000EAC ; Segment permissions: Read
.rdata$r:00000EAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EAC                 assume cs:_rdata$r
.rdata$r:00000EAC                 ;org 0EACh
.rdata$r:00000EAC ; COMDAT (pick any)
.rdata$r:00000EAC                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000EAC ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000EAC ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000EAC                                         ; DATA XREF: .rdata$r:00000E7Co
.rdata$r:00000EAC                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000EB0                 db    1
.rdata$r:00000EB1                 db    0
.rdata$r:00000EB2                 db    0
.rdata$r:00000EB3                 db    0
.rdata$r:00000EB4                 db    4
.rdata$r:00000EB5                 db    0
.rdata$r:00000EB6                 db    0
.rdata$r:00000EB7                 db    0
.rdata$r:00000EB8                 db 0FFh
.rdata$r:00000EB9                 db 0FFh
.rdata$r:00000EBA                 db 0FFh
.rdata$r:00000EBB                 db 0FFh
.rdata$r:00000EBC                 db    0
.rdata$r:00000EBD                 db    0
.rdata$r:00000EBE                 db    0
.rdata$r:00000EBF                 db    0
.rdata$r:00000EC0                 db  40h ; @
.rdata$r:00000EC1                 db    0
.rdata$r:00000EC2                 db    0
.rdata$r:00000EC3                 db    0
.rdata$r:00000EC4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EC4 _rdata$r        ends
.rdata$r:00000EC4
.data:00000EC8 ; ===========================================================================
.data:00000EC8
.data:00000EC8 ; Segment type: Pure data
.data:00000EC8 ; Segment permissions: Read/Write
.data:00000EC8 _data           segment dword public 'DATA' use32
.data:00000EC8                 assume cs:_data
.data:00000EC8                 ;org 0EC8h
.data:00000EC8 ; COMDAT (pick any)
.data:00000EC8                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00000EC8 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00000EC8 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000EC8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000EC8                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000EC8                                         ; const type_info::`vftable'
.data:00000ECC                 align 10h
.data:00000ED0 a_?auicompres_0 db '.?AUICompressSetCoderProperties@@',0
.data:00000EF2                 align 4
.data:00000EF2 _data           ends
.data:00000EF2
.rdata$r:00000EF4 ; ===========================================================================
.rdata$r:00000EF4
.rdata$r:00000EF4 ; Segment type: Pure data
.rdata$r:00000EF4 ; Segment permissions: Read
.rdata$r:00000EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EF4                 assume cs:_rdata$r
.rdata$r:00000EF4                 ;org 0EF4h
.rdata$r:00000EF4 ; COMDAT (pick any)
.rdata$r:00000EF4                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00000EF4 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EF4 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00000EF4                                         ; DATA XREF: .rdata$r:00000EC4o
.rdata$r:00000EF4                                         ; .rdata$r:00000F28o ...
.rdata$r:00000EF5                 db    0
.rdata$r:00000EF6                 db    0
.rdata$r:00000EF7                 db    0
.rdata$r:00000EF8                 db    0
.rdata$r:00000EF9                 db    0
.rdata$r:00000EFA                 db    0
.rdata$r:00000EFB                 db    0
.rdata$r:00000EFC                 db    2
.rdata$r:00000EFD                 db    0
.rdata$r:00000EFE                 db    0
.rdata$r:00000EFF                 db    0
.rdata$r:00000F00                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000F00 _rdata$r        ends
.rdata$r:00000F00
.rdata$r:00000F04 ; ===========================================================================
.rdata$r:00000F04
.rdata$r:00000F04 ; Segment type: Pure data
.rdata$r:00000F04 ; Segment permissions: Read
.rdata$r:00000F04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F04                 assume cs:_rdata$r
.rdata$r:00000F04                 ;org 0F04h
.rdata$r:00000F04 ; COMDAT (pick any)
.rdata$r:00000F04                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000F04 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000F04 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000F04                                         ; DATA XREF: .rdata$r:00000F00o
.rdata$r:00000F04                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F08                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F0C                 db    0
.rdata$r:00000F0D                 align 10h
.rdata$r:00000F0D _rdata$r        ends
.rdata$r:00000F0D
.rdata$r:00000F10 ; ===========================================================================
.rdata$r:00000F10
.rdata$r:00000F10 ; Segment type: Pure data
.rdata$r:00000F10 ; Segment permissions: Read
.rdata$r:00000F10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F10                 assume cs:_rdata$r
.rdata$r:00000F10                 ;org 0F10h
.rdata$r:00000F10 ; COMDAT (pick any)
.rdata$r:00000F10                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000F10 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F10 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000F10                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000F10                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000F14                 db    1
.rdata$r:00000F15                 db    0
.rdata$r:00000F16                 db    0
.rdata$r:00000F17                 db    0
.rdata$r:00000F18                 db    0
.rdata$r:00000F19                 db    0
.rdata$r:00000F1A                 db    0
.rdata$r:00000F1B                 db    0
.rdata$r:00000F1C                 db 0FFh
.rdata$r:00000F1D                 db 0FFh
.rdata$r:00000F1E                 db 0FFh
.rdata$r:00000F1F                 db 0FFh
.rdata$r:00000F20                 db    0
.rdata$r:00000F21                 db    0
.rdata$r:00000F22                 db    0
.rdata$r:00000F23                 db    0
.rdata$r:00000F24                 db  40h ; @
.rdata$r:00000F25                 db    0
.rdata$r:00000F26                 db    0
.rdata$r:00000F27                 db    0
.rdata$r:00000F28                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F28 _rdata$r        ends
.rdata$r:00000F28
.rdata$r:00000F2C ; ===========================================================================
.rdata$r:00000F2C
.rdata$r:00000F2C ; Segment type: Pure data
.rdata$r:00000F2C ; Segment permissions: Read
.rdata$r:00000F2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F2C                 assume cs:_rdata$r
.rdata$r:00000F2C                 ;org 0F2Ch
.rdata$r:00000F2C ; COMDAT (pick any)
.rdata$r:00000F2C                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F2C ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000F2C ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000F2C                                         ; DATA XREF: .rdata$r:00000E84o
.rdata$r:00000F2C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000F30                 db    0
.rdata$r:00000F31                 db    0
.rdata$r:00000F32                 db    0
.rdata$r:00000F33                 db    0
.rdata$r:00000F34                 db    8
.rdata$r:00000F35                 db    0
.rdata$r:00000F36                 db    0
.rdata$r:00000F37                 db    0
.rdata$r:00000F38                 db 0FFh
.rdata$r:00000F39                 db 0FFh
.rdata$r:00000F3A                 db 0FFh
.rdata$r:00000F3B                 db 0FFh
.rdata$r:00000F3C                 db    0
.rdata$r:00000F3D                 db    0
.rdata$r:00000F3E                 db    0
.rdata$r:00000F3F                 db    0
.rdata$r:00000F40                 db  40h ; @
.rdata$r:00000F41                 db    0
.rdata$r:00000F42                 db    0
.rdata$r:00000F43                 db    0
.rdata$r:00000F44                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F44 _rdata$r        ends
.rdata$r:00000F44
.rdata$r:00000F48 ; ===========================================================================
.rdata$r:00000F48
.rdata$r:00000F48 ; Segment type: Pure data
.rdata$r:00000F48 ; Segment permissions: Read
.rdata$r:00000F48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F48                 assume cs:_rdata$r
.rdata$r:00000F48                 ;org 0F48h
.rdata$r:00000F48 ; COMDAT (pick any)
.rdata$r:00000F48                 public ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F48 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000F48 ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000F48                                         ; DATA XREF: .rdata$r:00000E88o
.rdata$r:00000F48                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000F4C                 align 10h
.rdata$r:00000F50                 db  10h
.rdata$r:00000F51                 db    0
.rdata$r:00000F52                 db    0
.rdata$r:00000F53                 db    0
.rdata$r:00000F54                 db 0FFh
.rdata$r:00000F55                 db 0FFh
.rdata$r:00000F56                 db 0FFh
.rdata$r:00000F57                 db 0FFh
.rdata$r:00000F58                 db    0
.rdata$r:00000F59                 db    0
.rdata$r:00000F5A                 db    0
.rdata$r:00000F5B                 db    0
.rdata$r:00000F5C                 db  40h ; @
.rdata$r:00000F5D                 db    0
.rdata$r:00000F5E                 db    0
.rdata$r:00000F5F                 db    0
.rdata$r:00000F60                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F60 _rdata$r        ends
.rdata$r:00000F60
.data:00000F64 ; ===========================================================================
.data:00000F64
.data:00000F64 ; Segment type: Pure data
.data:00000F64 ; Segment permissions: Read/Write
.data:00000F64 _data           segment dword public 'DATA' use32
.data:00000F64                 assume cs:_data
.data:00000F64                 ;org 0F64h
.data:00000F64 ; COMDAT (pick any)
.data:00000F64                 public ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.data:00000F64 ; class NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.data:00000F64 ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000F64                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000F64                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000F64                                         ; const type_info::`vftable'
.data:00000F68                 db    0
.data:00000F69                 db    0
.data:00000F6A                 db    0
.data:00000F6B                 db    0
.data:00000F6C                 db  2Eh ; .
.data:00000F6D                 db  3Fh ; ?
.data:00000F6E                 db  41h ; A
.data:00000F6F                 db  56h ; V
.data:00000F70                 db  43h ; C
.data:00000F71                 db  43h ; C
.data:00000F72                 db  6Fh ; o
.data:00000F73                 db  64h ; d
.data:00000F74                 db  65h ; e
.data:00000F75                 db  72h ; r
.data:00000F76                 db  40h ; @
.data:00000F77                 db  4Eh ; N
.data:00000F78                 db  45h ; E
.data:00000F79                 db  6Eh ; n
.data:00000F7A                 db  63h ; c
.data:00000F7B                 db  6Fh ; o
.data:00000F7C                 db  64h ; d
.data:00000F7D                 db  65h ; e
.data:00000F7E                 db  72h ; r
.data:00000F7F                 db  40h ; @
.data:00000F80                 db  4Eh ; N
.data:00000F81                 db  44h ; D
.data:00000F82                 db  65h ; e
.data:00000F83                 db  66h ; f
.data:00000F84                 db  6Ch ; l
.data:00000F85                 db  61h ; a
.data:00000F86                 db  74h ; t
.data:00000F87                 db  65h ; e
.data:00000F88                 db  40h ; @
.data:00000F89                 db  4Eh ; N
.data:00000F8A                 db  43h ; C
.data:00000F8B                 db  6Fh ; o
.data:00000F8C                 db  6Dh ; m
.data:00000F8D                 db  70h ; p
.data:00000F8E                 db  72h ; r
.data:00000F8F                 db  65h ; e
.data:00000F90                 db  73h ; s
.data:00000F91                 db  73h ; s
.data:00000F92                 db  40h ; @
.data:00000F93                 db  40h ; @
.data:00000F94                 db    0
.data:00000F95                 align 4
.data:00000F95 _data           ends
.data:00000F95
.rdata$r:00000F98 ; ===========================================================================
.rdata$r:00000F98
.rdata$r:00000F98 ; Segment type: Pure data
.rdata$r:00000F98 ; Segment permissions: Read
.rdata$r:00000F98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F98                 assume cs:_rdata$r
.rdata$r:00000F98                 ;org 0F98h
.rdata$r:00000F98 ; COMDAT (pick any)
.rdata$r:00000F98                 public ??_R3CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000F98 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F98 ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:00000F98                                         ; DATA XREF: .rdata$r:00000F60o
.rdata$r:00000F98                                         ; .rdata$r:00000FC8o
.rdata$r:00000F99                 db    0
.rdata$r:00000F9A                 db    0
.rdata$r:00000F9B                 db    0
.rdata$r:00000F9C                 db    0
.rdata$r:00000F9D                 db    0
.rdata$r:00000F9E                 db    0
.rdata$r:00000F9F                 db    0
.rdata$r:00000FA0                 db    1
.rdata$r:00000FA1                 db    0
.rdata$r:00000FA2                 db    0
.rdata$r:00000FA3                 db    0
.rdata$r:00000FA4                 dd offset ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00000FA4 _rdata$r        ends
.rdata$r:00000FA4
.rdata$r:00000FA8 ; ===========================================================================
.rdata$r:00000FA8
.rdata$r:00000FA8 ; Segment type: Pure data
.rdata$r:00000FA8 ; Segment permissions: Read
.rdata$r:00000FA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FA8                 assume cs:_rdata$r
.rdata$r:00000FA8                 ;org 0FA8h
.rdata$r:00000FA8 ; COMDAT (pick any)
.rdata$r:00000FA8                 public ??_R2CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000FA8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00000FA8 ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000FA8                                         ; DATA XREF: .rdata$r:00000FA4o
.rdata$r:00000FA8                                         ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FAC                 db    0
.rdata$r:00000FAD                 align 10h
.rdata$r:00000FAD _rdata$r        ends
.rdata$r:00000FAD
.rdata$r:00000FB0 ; ===========================================================================
.rdata$r:00000FB0
.rdata$r:00000FB0 ; Segment type: Pure data
.rdata$r:00000FB0 ; Segment permissions: Read
.rdata$r:00000FB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FB0                 assume cs:_rdata$r
.rdata$r:00000FB0                 ;org 0FB0h
.rdata$r:00000FB0 ; COMDAT (pick any)
.rdata$r:00000FB0                 public ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00000FB0 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000FB0 ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00000FB0                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'o
.rdata$r:00000FB0                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000FB4                 db    0
.rdata$r:00000FB5                 db    0
.rdata$r:00000FB6                 db    0
.rdata$r:00000FB7                 db    0
.rdata$r:00000FB8                 db    0
.rdata$r:00000FB9                 db    0
.rdata$r:00000FBA                 db    0
.rdata$r:00000FBB                 db    0
.rdata$r:00000FBC                 db 0FFh
.rdata$r:00000FBD                 db 0FFh
.rdata$r:00000FBE                 db 0FFh
.rdata$r:00000FBF                 db 0FFh
.rdata$r:00000FC0                 db    0
.rdata$r:00000FC1                 db    0
.rdata$r:00000FC2                 db    0
.rdata$r:00000FC3                 db    0
.rdata$r:00000FC4                 db  40h ; @
.rdata$r:00000FC5                 db    0
.rdata$r:00000FC6                 db    0
.rdata$r:00000FC7                 db    0
.rdata$r:00000FC8                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FC8 _rdata$r        ends
.rdata$r:00000FC8
.rdata$r:00000FCC ; ===========================================================================
.rdata$r:00000FCC
.rdata$r:00000FCC ; Segment type: Pure data
.rdata$r:00000FCC ; Segment permissions: Read
.rdata$r:00000FCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FCC                 assume cs:_rdata$r
.rdata$r:00000FCC                 ;org 0FCCh
.rdata$r:00000FCC ; COMDAT (pick any)
.rdata$r:00000FCC                 public ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00000FCC ; const NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000FCC ??_R4CCOMCoder64@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000FCC                                         ; DATA XREF: .rdata:00000DECo
.rdata$r:00000FCD                 db    0
.rdata$r:00000FCE                 db    0
.rdata$r:00000FCF                 db    0
.rdata$r:00000FD0                 db    4
.rdata$r:00000FD1                 db    0
.rdata$r:00000FD2                 db    0
.rdata$r:00000FD3                 db    0
.rdata$r:00000FD4                 db    0
.rdata$r:00000FD5                 db    0
.rdata$r:00000FD6                 db    0
.rdata$r:00000FD7                 db    0
.rdata$r:00000FD8                 dd offset ??_R0?AVCCOMCoder64@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64 `RTTI Type Descriptor'
.rdata$r:00000FDC                 dd offset ??_R3CCOMCoder64@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder64::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FDC _rdata$r        ends
.rdata$r:00000FDC
.text:00000FE0 ; ===========================================================================
.text:00000FE0
.text:00000FE0 ; Segment type: Pure code
.text:00000FE0 ; Segment permissions: Read/Execute
.text:00000FE0 _text           segment para public 'CODE' use32
.text:00000FE0                 assume cs:_text
.text:00000FE0                 ;org 0FE0h
.text:00000FE0 ; COMDAT (pick any)
.text:00000FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FE0
.text:00000FE0 ; =============== S U B R O U T I N E =======================================
.text:00000FE0
.text:00000FE0 ; Attributes: bp-based frame
.text:00000FE0
.text:00000FE0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000FE0                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000FE0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+27p
.text:00000FE0
.text:00000FE0 var_4           = dword ptr -4
.text:00000FE0
.text:00000FE0                 push    ebp
.text:00000FE1                 mov     ebp, esp
.text:00000FE3                 push    ecx
.text:00000FE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FEB                 mov     [ebp+var_4], ecx
.text:00000FEE                 mov     eax, [ebp+var_4]
.text:00000FF1                 mov     dword ptr [eax], 0
.text:00000FF7                 mov     eax, [ebp+var_4]
.text:00000FFA                 mov     esp, ebp
.text:00000FFC                 pop     ebp
.text:00000FFD                 retn
.text:00000FFD ??0CMyUnknownImp@@QAE@XZ endp
.text:00000FFD
.text:00000FFD ; ---------------------------------------------------------------------------
.text:00000FFE                 align 10h
.text:00000FFE _text           ends
.text:00000FFE
.text:00001000 ; ===========================================================================
.text:00001000
.text:00001000 ; Segment type: Pure code
.text:00001000 ; Segment permissions: Read/Execute
.text:00001000 _text           segment para public 'CODE' use32
.text:00001000                 assume cs:_text
.text:00001000                 ;org 1000h
.text:00001000 ; COMDAT (pick any)
.text:00001000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000 ; Attributes: bp-based frame
.text:00001000
.text:00001000 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001000                 public ??0ICompressCoder@@QAE@XZ
.text:00001000 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+11p
.text:00001000
.text:00001000 var_4           = dword ptr -4
.text:00001000
.text:00001000                 push    ebp
.text:00001001                 mov     ebp, esp
.text:00001003                 push    ecx
.text:00001004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000100B                 mov     [ebp+var_4], ecx
.text:0000100E                 mov     ecx, [ebp+var_4]
.text:00001011                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001016                 mov     eax, [ebp+var_4]
.text:00001019                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000101F                 mov     eax, [ebp+var_4]
.text:00001022                 add     esp, 4
.text:00001025                 cmp     ebp, esp
.text:00001027                 call    __RTC_CheckEsp
.text:0000102C                 mov     esp, ebp
.text:0000102E                 pop     ebp
.text:0000102F                 retn
.text:0000102F ??0ICompressCoder@@QAE@XZ endp
.text:0000102F
.text:0000102F _text           ends
.text:0000102F
.rdata:00001030 ; ===========================================================================
.rdata:00001030
.rdata:00001030 ; Segment type: Pure data
.rdata:00001030 ; Segment permissions: Read
.rdata:00001030 _rdata          segment dword public 'DATA' use32
.rdata:00001030                 assume cs:_rdata
.rdata:00001030                 ;org 1030h
.rdata:00001030 ; COMDAT (pick largest)
.rdata:00001030                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00001034                 public ??_7ICompressCoder@@6B@
.rdata:00001034 ; const ICompressCoder::`vftable'
.rdata:00001034 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00001034                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001038                 dd offset __purecall
.rdata:0000103C                 dd offset __purecall
.rdata:00001040                 dd offset __purecall
.rdata:00001040 _rdata          ends
.rdata:00001040
.rdata$r:00001044 ; ===========================================================================
.rdata$r:00001044
.rdata$r:00001044 ; Segment type: Pure data
.rdata$r:00001044 ; Segment permissions: Read
.rdata$r:00001044 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001044                 assume cs:_rdata$r
.rdata$r:00001044                 ;org 1044h
.rdata$r:00001044 ; COMDAT (pick any)
.rdata$r:00001044                 public ??_R4ICompressCoder@@6B@
.rdata$r:00001044 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00001044 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00001030o
.rdata$r:00001045                 db    0
.rdata$r:00001046                 db    0
.rdata$r:00001047                 db    0
.rdata$r:00001048                 db    0
.rdata$r:00001049                 db    0
.rdata$r:0000104A                 db    0
.rdata$r:0000104B                 db    0
.rdata$r:0000104C                 db    0
.rdata$r:0000104D                 db    0
.rdata$r:0000104E                 db    0
.rdata$r:0000104F                 db    0
.rdata$r:00001050                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001054                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001054 _rdata$r        ends
.rdata$r:00001054
.text:00001058 ; ===========================================================================
.text:00001058
.text:00001058 ; Segment type: Pure code
.text:00001058 ; Segment permissions: Read/Execute
.text:00001058 _text           segment para public 'CODE' use32
.text:00001058                 assume cs:_text
.text:00001058                 ;org 1058h
.text:00001058 ; COMDAT (pick any)
.text:00001058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001058
.text:00001058 ; =============== S U B R O U T I N E =======================================
.text:00001058
.text:00001058 ; Attributes: bp-based frame
.text:00001058
.text:00001058 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00001058                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00001058 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00001058                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+1Cp
.text:00001058
.text:00001058 var_4           = dword ptr -4
.text:00001058
.text:00001058                 push    ebp
.text:00001059                 mov     ebp, esp
.text:0000105B                 push    ecx
.text:0000105C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001063                 mov     [ebp+var_4], ecx
.text:00001066                 mov     ecx, [ebp+var_4]
.text:00001069                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000106E                 mov     eax, [ebp+var_4]
.text:00001071                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00001077                 mov     eax, [ebp+var_4]
.text:0000107A                 add     esp, 4
.text:0000107D                 cmp     ebp, esp
.text:0000107F                 call    __RTC_CheckEsp
.text:00001084                 mov     esp, ebp
.text:00001086                 pop     ebp
.text:00001087                 retn
.text:00001087 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00001087
.text:00001087 _text           ends
.text:00001087
.rdata:00001088 ; ===========================================================================
.rdata:00001088
.rdata:00001088 ; Segment type: Pure data
.rdata:00001088 ; Segment permissions: Read
.rdata:00001088 _rdata          segment dword public 'DATA' use32
.rdata:00001088                 assume cs:_rdata
.rdata:00001088                 ;org 1088h
.rdata:00001088 ; COMDAT (pick largest)
.rdata:00001088                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:0000108C                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:0000108C ; const ICompressSetCoderProperties::`vftable'
.rdata:0000108C ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:0000108C                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00001090                 dd offset __purecall
.rdata:00001094                 dd offset __purecall
.rdata:00001098                 dd offset __purecall
.rdata:00001098 _rdata          ends
.rdata:00001098
.rdata$r:0000109C ; ===========================================================================
.rdata$r:0000109C
.rdata$r:0000109C ; Segment type: Pure data
.rdata$r:0000109C ; Segment permissions: Read
.rdata$r:0000109C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000109C                 assume cs:_rdata$r
.rdata$r:0000109C                 ;org 109Ch
.rdata$r:0000109C ; COMDAT (pick any)
.rdata$r:0000109C                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:0000109C ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:0000109C ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:0000109C                                         ; DATA XREF: .rdata:00001088o
.rdata$r:0000109D                 db    0
.rdata$r:0000109E                 db    0
.rdata$r:0000109F                 db    0
.rdata$r:000010A0                 db    0
.rdata$r:000010A1                 db    0
.rdata$r:000010A2                 db    0
.rdata$r:000010A3                 db    0
.rdata$r:000010A4                 db    0
.rdata$r:000010A5                 db    0
.rdata$r:000010A6                 db    0
.rdata$r:000010A7                 db    0
.rdata$r:000010A8                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000010AC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010AC _rdata$r        ends
.rdata$r:000010AC
.text:000010B0 ; ===========================================================================
.text:000010B0
.text:000010B0 ; Segment type: Pure code
.text:000010B0 ; Segment permissions: Read/Execute
.text:000010B0 _text           segment para public 'CODE' use32
.text:000010B0                 assume cs:_text
.text:000010B0                 ;org 10B0h
.text:000010B0 ; COMDAT (pick any)
.text:000010B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010B0
.text:000010B0 ; =============== S U B R O U T I N E =======================================
.text:000010B0
.text:000010B0 ; Attributes: bp-based frame
.text:000010B0
.text:000010B0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000010B0                 public ??0IUnknown@@QAE@XZ
.text:000010B0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:000010B0                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p
.text:000010B0
.text:000010B0 var_4           = dword ptr -4
.text:000010B0
.text:000010B0                 push    ebp
.text:000010B1                 mov     ebp, esp
.text:000010B3                 push    ecx
.text:000010B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010BB                 mov     [ebp+var_4], ecx
.text:000010BE                 mov     eax, [ebp+var_4]
.text:000010C1                 mov     esp, ebp
.text:000010C3                 pop     ebp
.text:000010C4                 retn
.text:000010C4 ??0IUnknown@@QAE@XZ endp
.text:000010C4
.text:000010C4 ; ---------------------------------------------------------------------------
.text:000010C5                 align 4
.text:000010C5 _text           ends
.text:000010C5
.text:000010C8 ; ===========================================================================
.text:000010C8
.text:000010C8 ; Segment type: Pure code
.text:000010C8 ; Segment permissions: Read/Execute
.text:000010C8 _text           segment para public 'CODE' use32
.text:000010C8                 assume cs:_text
.text:000010C8                 ;org 10C8h
.text:000010C8 ; COMDAT (pick any)
.text:000010C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010C8
.text:000010C8 ; =============== S U B R O U T I N E =======================================
.text:000010C8
.text:000010C8 ; Attributes: bp-based frame
.text:000010C8
.text:000010C8 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(NCompress::NDeflate::NEncoder::CCOMCoder64 *this, const struct _GUID *Buf1, void **)
.text:000010C8                 public ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000010C8 ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000010C8                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000010C8                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressCoder'}o
.text:000010C8
.text:000010C8 var_8           = dword ptr -8
.text:000010C8 var_4           = dword ptr -4
.text:000010C8 this            = dword ptr  8
.text:000010C8 Buf1            = dword ptr  0Ch
.text:000010C8 arg_8           = dword ptr  10h
.text:000010C8
.text:000010C8                 push    ebp
.text:000010C9                 mov     ebp, esp
.text:000010CB                 sub     esp, 8
.text:000010CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010DC                 mov     eax, [ebp+arg_8]
.text:000010DF                 mov     dword ptr [eax], 0
.text:000010E5                 push    offset _IID_IUnknown ; Buf2
.text:000010EA                 mov     ecx, [ebp+Buf1]
.text:000010ED                 push    ecx             ; Buf1
.text:000010EE                 call    ___@8           ; __(x,x)
.text:000010F3                 test    eax, eax
.text:000010F5                 jz      short loc_1119
.text:000010F7                 cmp     [ebp+this], 0
.text:000010FB                 jz      short loc_1108
.text:000010FD                 mov     edx, [ebp+this]
.text:00001100                 add     edx, 4
.text:00001103                 mov     [ebp+var_4], edx
.text:00001106                 jmp     short loc_110F
.text:00001108 ; ---------------------------------------------------------------------------
.text:00001108
.text:00001108 loc_1108:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+33j
.text:00001108                 mov     [ebp+var_4], 0
.text:0000110F
.text:0000110F loc_110F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000110F                 mov     eax, [ebp+arg_8]
.text:00001112                 mov     ecx, [ebp+var_4]
.text:00001115                 mov     [eax], ecx
.text:00001117                 jmp     short loc_1154
.text:00001119 ; ---------------------------------------------------------------------------
.text:00001119
.text:00001119 loc_1119:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+2Dj
.text:00001119                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:0000111E                 mov     edx, [ebp+Buf1]
.text:00001121                 push    edx             ; Buf1
.text:00001122                 call    ___@8           ; __(x,x)
.text:00001127                 test    eax, eax
.text:00001129                 jz      short loc_114D
.text:0000112B                 cmp     [ebp+this], 0
.text:0000112F                 jz      short loc_113C
.text:00001131                 mov     eax, [ebp+this]
.text:00001134                 add     eax, 4
.text:00001137                 mov     [ebp+var_8], eax
.text:0000113A                 jmp     short loc_1143
.text:0000113C ; ---------------------------------------------------------------------------
.text:0000113C
.text:0000113C loc_113C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+67j
.text:0000113C                 mov     [ebp+var_8], 0
.text:00001143
.text:00001143 loc_1143:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+72j
.text:00001143                 mov     ecx, [ebp+arg_8]
.text:00001146                 mov     edx, [ebp+var_8]
.text:00001149                 mov     [ecx], edx
.text:0000114B                 jmp     short loc_1154
.text:0000114D ; ---------------------------------------------------------------------------
.text:0000114D
.text:0000114D loc_114D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+61j
.text:0000114D                 mov     eax, 80004002h
.text:00001152                 jmp     short loc_1165
.text:00001154 ; ---------------------------------------------------------------------------
.text:00001154
.text:00001154 loc_1154:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+4Fj
.text:00001154                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+83j
.text:00001154                 mov     eax, [ebp+this]
.text:00001157                 mov     ecx, [eax+8]
.text:0000115A                 add     ecx, 1
.text:0000115D                 mov     edx, [ebp+this]
.text:00001160                 mov     [edx+8], ecx
.text:00001163                 xor     eax, eax
.text:00001165
.text:00001165 loc_1165:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+8Aj
.text:00001165                 add     esp, 8
.text:00001168                 cmp     ebp, esp
.text:0000116A                 call    __RTC_CheckEsp
.text:0000116F                 mov     esp, ebp
.text:00001171                 pop     ebp
.text:00001172                 retn    0Ch
.text:00001172 ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001172
.text:00001172 ; ---------------------------------------------------------------------------
.text:00001175                 align 4
.text:00001175 _text           ends
.text:00001175
.text:00001178 ; ===========================================================================
.text:00001178
.text:00001178 ; Segment type: Pure code
.text:00001178 ; Segment permissions: Read/Execute
.text:00001178 _text           segment para public 'CODE' use32
.text:00001178                 assume cs:_text
.text:00001178                 ;org 1178h
.text:00001178 ; COMDAT (pick any)
.text:00001178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001178
.text:00001178 ; =============== S U B R O U T I N E =======================================
.text:00001178
.text:00001178 ; Attributes: bp-based frame
.text:00001178
.text:00001178 ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef(NCompress::NDeflate::NEncoder::CCOMCoder64 *this)
.text:00001178                 public ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:00001178 ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00001178                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef`adjustor{4}' (void)+5j
.text:00001178                                         ; DATA XREF: .rdata:00000E08o
.text:00001178
.text:00001178 var_4           = dword ptr -4
.text:00001178 this            = dword ptr  8
.text:00001178
.text:00001178                 push    ebp
.text:00001179                 mov     ebp, esp
.text:0000117B                 push    ecx
.text:0000117C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001183                 mov     eax, [ebp+this]
.text:00001186                 mov     ecx, [eax+8]
.text:00001189                 add     ecx, 1
.text:0000118C                 mov     [ebp+var_4], ecx
.text:0000118F                 mov     edx, [ebp+this]
.text:00001192                 mov     eax, [ebp+var_4]
.text:00001195                 mov     [edx+8], eax
.text:00001198                 mov     eax, [ebp+var_4]
.text:0000119B                 mov     esp, ebp
.text:0000119D                 pop     ebp
.text:0000119E                 retn    4
.text:0000119E ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:0000119E
.text:0000119E ; ---------------------------------------------------------------------------
.text:000011A1                 align 4
.text:000011A1 _text           ends
.text:000011A1
.text:000011A4 ; ===========================================================================
.text:000011A4
.text:000011A4 ; Segment type: Pure code
.text:000011A4 ; Segment permissions: Read/Execute
.text:000011A4 _text           segment para public 'CODE' use32
.text:000011A4                 assume cs:_text
.text:000011A4                 ;org 11A4h
.text:000011A4 ; COMDAT (pick any)
.text:000011A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011A4
.text:000011A4 ; =============== S U B R O U T I N E =======================================
.text:000011A4
.text:000011A4 ; Attributes: bp-based frame
.text:000011A4
.text:000011A4 ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::Release(NCompress::NDeflate::NEncoder::CCOMCoder64 *this)
.text:000011A4                 public ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:000011A4 ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000011A4                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder64::Release`adjustor{4}' (void)+5j
.text:000011A4                                         ; DATA XREF: .rdata:00000E0Co
.text:000011A4
.text:000011A4 var_10          = dword ptr -10h
.text:000011A4 var_C           = dword ptr -0Ch
.text:000011A4 var_8           = dword ptr -8
.text:000011A4 var_4           = dword ptr -4
.text:000011A4 this            = dword ptr  8
.text:000011A4
.text:000011A4                 push    ebp
.text:000011A5                 mov     ebp, esp
.text:000011A7                 sub     esp, 10h
.text:000011AA                 mov     eax, 0CCCCCCCCh
.text:000011AF                 mov     [ebp+var_10], eax
.text:000011B2                 mov     [ebp+var_C], eax
.text:000011B5                 mov     [ebp+var_8], eax
.text:000011B8                 mov     [ebp+var_4], eax
.text:000011BB                 mov     eax, [ebp+this]
.text:000011BE                 mov     ecx, [eax+8]
.text:000011C1                 sub     ecx, 1
.text:000011C4                 mov     [ebp+var_C], ecx
.text:000011C7                 mov     edx, [ebp+this]
.text:000011CA                 mov     eax, [ebp+var_C]
.text:000011CD                 mov     [edx+8], eax
.text:000011D0                 cmp     [ebp+var_C], 0
.text:000011D4                 jz      short loc_11DE
.text:000011D6                 mov     ecx, [ebp+this]
.text:000011D9                 mov     eax, [ecx+8]
.text:000011DC                 jmp     short loc_1208
.text:000011DE ; ---------------------------------------------------------------------------
.text:000011DE
.text:000011DE loc_11DE:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)+30j
.text:000011DE                 mov     edx, [ebp+this]
.text:000011E1                 mov     [ebp+var_8], edx
.text:000011E4                 mov     eax, [ebp+var_8]
.text:000011E7                 mov     [ebp+var_4], eax
.text:000011EA                 cmp     [ebp+var_4], 0
.text:000011EE                 jz      short loc_11FF
.text:000011F0                 push    1
.text:000011F2                 mov     ecx, [ebp+var_4]
.text:000011F5                 call    ??_GCCOMCoder64@NEncoder@NDeflate@NCompress@@QAEPAXI@Z ; NCompress::NDeflate::NEncoder::CCOMCoder64::`scalar deleting destructor'(uint)
.text:000011FA                 mov     [ebp+var_10], eax
.text:000011FD                 jmp     short loc_1206
.text:000011FF ; ---------------------------------------------------------------------------
.text:000011FF
.text:000011FF loc_11FF:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)+4Aj
.text:000011FF                 mov     [ebp+var_10], 0
.text:00001206
.text:00001206 loc_1206:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)+59j
.text:00001206                 xor     eax, eax
.text:00001208
.text:00001208 loc_1208:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)+38j
.text:00001208                 add     esp, 10h
.text:0000120B                 cmp     ebp, esp
.text:0000120D                 call    __RTC_CheckEsp
.text:00001212                 mov     esp, ebp
.text:00001214                 pop     ebp
.text:00001215                 retn    4
.text:00001215 ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:00001215
.text:00001215 _text           ends
.text:00001215
.text:00001218 ; ===========================================================================
.text:00001218
.text:00001218 ; Segment type: Pure code
.text:00001218 ; Segment permissions: Read/Execute
.text:00001218 _text           segment para public 'CODE' use32
.text:00001218                 assume cs:_text
.text:00001218                 ;org 1218h
.text:00001218 ; COMDAT (pick any)
.text:00001218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001218
.text:00001218 ; =============== S U B R O U T I N E =======================================
.text:00001218
.text:00001218 ; Attributes: bp-based frame
.text:00001218
.text:00001218 ; public: void * __thiscall NCompress::NDeflate::NEncoder::CCOMCoder64::`scalar deleting destructor'(unsigned int)
.text:00001218                 public ??_GCCOMCoder64@NEncoder@NDeflate@NCompress@@QAEPAXI@Z
.text:00001218 ??_GCCOMCoder64@NEncoder@NDeflate@NCompress@@QAEPAXI@Z proc near
.text:00001218                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)+51p
.text:00001218
.text:00001218 var_4           = dword ptr -4
.text:00001218 arg_0           = dword ptr  8
.text:00001218
.text:00001218                 push    ebp
.text:00001219                 mov     ebp, esp
.text:0000121B                 push    ecx
.text:0000121C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001223                 mov     [ebp+var_4], ecx
.text:00001226                 mov     ecx, [ebp+var_4] ; this
.text:00001229                 call    ??1CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::~CCOMCoder64(void)
.text:0000122E                 mov     eax, [ebp+arg_0]
.text:00001231                 and     eax, 1
.text:00001234                 jz      short loc_1242
.text:00001236                 mov     ecx, [ebp+var_4]
.text:00001239                 push    ecx             ; void *
.text:0000123A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000123F                 add     esp, 4
.text:00001242
.text:00001242 loc_1242:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::`scalar deleting destructor'(uint)+1Cj
.text:00001242                 mov     eax, [ebp+var_4]
.text:00001245                 add     esp, 4
.text:00001248                 cmp     ebp, esp
.text:0000124A                 call    __RTC_CheckEsp
.text:0000124F                 mov     esp, ebp
.text:00001251                 pop     ebp
.text:00001252                 retn    4
.text:00001252 ??_GCCOMCoder64@NEncoder@NDeflate@NCompress@@QAEPAXI@Z endp
.text:00001252
.text:00001252 ; ---------------------------------------------------------------------------
.text:00001255                 align 4
.text:00001255 _text           ends
.text:00001255
.text:00001258 ; ===========================================================================
.text:00001258
.text:00001258 ; Segment type: Pure code
.text:00001258 ; Segment permissions: Read/Execute
.text:00001258 _text           segment para public 'CODE' use32
.text:00001258                 assume cs:_text
.text:00001258                 ;org 1258h
.text:00001258 ; COMDAT (pick any)
.text:00001258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001258
.text:00001258 ; =============== S U B R O U T I N E =======================================
.text:00001258
.text:00001258 ; Attributes: bp-based frame
.text:00001258
.text:00001258 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder64::~CCOMCoder64(NCompress::NDeflate::NEncoder::CCOMCoder64 *__hidden this)
.text:00001258                 public ??1CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00001258 ??1CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00001258                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::`scalar deleting destructor'(uint)+11p
.text:00001258
.text:00001258 var_4           = dword ptr -4
.text:00001258
.text:00001258                 push    ebp
.text:00001259                 mov     ebp, esp
.text:0000125B                 push    ecx
.text:0000125C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001263                 mov     [ebp+var_4], ecx
.text:00001266                 mov     ecx, [ebp+var_4]
.text:00001269                 add     ecx, 10h        ; this
.text:0000126C                 call    ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)
.text:00001271                 add     esp, 4
.text:00001274                 cmp     ebp, esp
.text:00001276                 call    __RTC_CheckEsp
.text:0000127B                 mov     esp, ebp
.text:0000127D                 pop     ebp
.text:0000127E                 retn
.text:0000127E ??1CCOMCoder64@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:0000127E
.text:0000127E ; ---------------------------------------------------------------------------
.text:0000127F                 align 10h
.text:0000127F _text           ends
.text:0000127F
.text:00001280 ; ===========================================================================
.text:00001280
.text:00001280 ; Segment type: Pure code
.text:00001280 ; Segment permissions: Read/Execute
.text:00001280 _text           segment para public 'CODE' use32
.text:00001280                 assume cs:_text
.text:00001280                 ;org 1280h
.text:00001280 ; COMDAT (pick any)
.text:00001280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001280
.text:00001280 ; =============== S U B R O U T I N E =======================================
.text:00001280
.text:00001280 ; Attributes: bp-based frame
.text:00001280
.text:00001280 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00001280                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00001280 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00001280                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+7Ap
.text:00001280                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1+6j
.text:00001280
.text:00001280 var_4           = dword ptr -4
.text:00001280
.text:00001280                 push    ebp
.text:00001281                 mov     ebp, esp
.text:00001283                 push    ecx
.text:00001284                 push    esi
.text:00001285                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000128C                 mov     [ebp+var_4], ecx
.text:0000128F                 mov     eax, [ebp+var_4]
.text:00001292                 cmp     dword ptr [eax], 0
.text:00001295                 jz      short loc_12B2
.text:00001297                 mov     ecx, [ebp+var_4]
.text:0000129A                 mov     edx, [ecx]
.text:0000129C                 mov     eax, [ebp+var_4]
.text:0000129F                 mov     ecx, [eax]
.text:000012A1                 mov     edx, [edx]
.text:000012A3                 mov     esi, esp
.text:000012A5                 push    ecx
.text:000012A6                 mov     eax, [edx+8]
.text:000012A9                 call    eax
.text:000012AB                 cmp     esi, esp
.text:000012AD                 call    __RTC_CheckEsp
.text:000012B2
.text:000012B2 loc_12B2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000012B2                 pop     esi
.text:000012B3                 add     esp, 4
.text:000012B6                 cmp     ebp, esp
.text:000012B8                 call    __RTC_CheckEsp
.text:000012BD                 mov     esp, ebp
.text:000012BF                 pop     ebp
.text:000012C0                 retn
.text:000012C0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000012C0
.text:000012C0 ; ---------------------------------------------------------------------------
.text:000012C1                 align 4
.text:000012C1 _text           ends
.text:000012C1
.text:000012C4 ; ===========================================================================
.text:000012C4
.text:000012C4 ; Segment type: Pure code
.text:000012C4 ; Segment permissions: Read/Execute
.text:000012C4 _text           segment para public 'CODE' use32
.text:000012C4                 assume cs:_text
.text:000012C4                 ;org 12C4h
.text:000012C4 ; COMDAT (pick any)
.text:000012C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012C4
.text:000012C4 ; =============== S U B R O U T I N E =======================================
.text:000012C4
.text:000012C4
.text:000012C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.text:000012C4                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:000012C4 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:000012C4                                         ; DATA XREF: .rdata:0000028Co
.text:000012C4                                         ; .rdata:00000BACo
.text:000012C4
.text:000012C4 arg_0           = dword ptr  4
.text:000012C4
.text:000012C4                 sub     [esp+arg_0], 0Ch
.text:000012C9                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000012C9 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:000012C9
.text:000012C9 ; ---------------------------------------------------------------------------
.text:000012CE                 align 10h
.text:000012CE _text           ends
.text:000012CE
.text:000012D0 ; ===========================================================================
.text:000012D0
.text:000012D0 ; Segment type: Pure code
.text:000012D0 ; Segment permissions: Read/Execute
.text:000012D0 _text           segment para public 'CODE' use32
.text:000012D0                 assume cs:_text
.text:000012D0                 ;org 12D0h
.text:000012D0 ; COMDAT (pick any)
.text:000012D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012D0
.text:000012D0 ; =============== S U B R O U T I N E =======================================
.text:000012D0
.text:000012D0
.text:000012D0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:000012D0                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:000012D0 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:000012D0                                         ; DATA XREF: .rdata:000002B4o
.text:000012D0                                         ; .rdata:00000BD4o
.text:000012D0
.text:000012D0 arg_0           = dword ptr  4
.text:000012D0
.text:000012D0                 sub     [esp+arg_0], 4
.text:000012D5                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012D5 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:000012D5
.text:000012D5 ; ---------------------------------------------------------------------------
.text:000012DA                 align 4
.text:000012DA _text           ends
.text:000012DA
.text:000012DC ; ===========================================================================
.text:000012DC
.text:000012DC ; Segment type: Pure code
.text:000012DC ; Segment permissions: Read/Execute
.text:000012DC _text           segment para public 'CODE' use32
.text:000012DC                 assume cs:_text
.text:000012DC                 ;org 12DCh
.text:000012DC ; COMDAT (pick any)
.text:000012DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012DC
.text:000012DC ; =============== S U B R O U T I N E =======================================
.text:000012DC
.text:000012DC
.text:000012DC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.text:000012DC                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:000012DC ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:000012DC                                         ; DATA XREF: .rdata:00000278o
.text:000012DC                                         ; .rdata:00000B98o
.text:000012DC
.text:000012DC arg_0           = dword ptr  4
.text:000012DC
.text:000012DC                 sub     [esp+arg_0], 10h
.text:000012E1                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000012E1 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:000012E1
.text:000012E1 ; ---------------------------------------------------------------------------
.text:000012E6                 align 4
.text:000012E6 _text           ends
.text:000012E6
.text:000012E8 ; ===========================================================================
.text:000012E8
.text:000012E8 ; Segment type: Pure code
.text:000012E8 ; Segment permissions: Read/Execute
.text:000012E8 _text           segment para public 'CODE' use32
.text:000012E8                 assume cs:_text
.text:000012E8                 ;org 12E8h
.text:000012E8 ; COMDAT (pick any)
.text:000012E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012E8
.text:000012E8 ; =============== S U B R O U T I N E =======================================
.text:000012E8
.text:000012E8
.text:000012E8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.text:000012E8                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:000012E8 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:000012E8                                         ; DATA XREF: .rdata:0000029Co
.text:000012E8                                         ; .rdata:00000BBCo
.text:000012E8
.text:000012E8 arg_0           = dword ptr  4
.text:000012E8
.text:000012E8                 sub     [esp+arg_0], 8
.text:000012ED                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012ED ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:000012ED
.text:000012ED ; ---------------------------------------------------------------------------
.text:000012F2                 align 4
.text:000012F2 _text           ends
.text:000012F2
.text:000012F4 ; ===========================================================================
.text:000012F4
.text:000012F4 ; Segment type: Pure code
.text:000012F4 ; Segment permissions: Read/Execute
.text:000012F4 _text           segment para public 'CODE' use32
.text:000012F4                 assume cs:_text
.text:000012F4                 ;org 12F4h
.text:000012F4 ; COMDAT (pick any)
.text:000012F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012F4
.text:000012F4 ; =============== S U B R O U T I N E =======================================
.text:000012F4
.text:000012F4
.text:000012F4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.text:000012F4                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:000012F4 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:000012F4                                         ; DATA XREF: .rdata:00000288o
.text:000012F4                                         ; .rdata:00000BA8o
.text:000012F4
.text:000012F4 arg_0           = dword ptr  4
.text:000012F4
.text:000012F4                 sub     [esp+arg_0], 0Ch
.text:000012F9                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000012F9 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:000012F9
.text:000012F9 ; ---------------------------------------------------------------------------
.text:000012FE                 align 10h
.text:000012FE _text           ends
.text:000012FE
.text:00001300 ; ===========================================================================
.text:00001300
.text:00001300 ; Segment type: Pure code
.text:00001300 ; Segment permissions: Read/Execute
.text:00001300 _text           segment para public 'CODE' use32
.text:00001300                 assume cs:_text
.text:00001300                 ;org 1300h
.text:00001300 ; COMDAT (pick any)
.text:00001300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001300
.text:00001300 ; =============== S U B R O U T I N E =======================================
.text:00001300
.text:00001300
.text:00001300 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::Release`adjustor{4}' (void)
.text:00001300                 public ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:00001300 ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00001300                                         ; DATA XREF: .rdata:00000DF8o
.text:00001300
.text:00001300 arg_0           = dword ptr  4
.text:00001300
.text:00001300                 sub     [esp+arg_0], 4
.text:00001305                 jmp     ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::Release(void)
.text:00001305 ?Release@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001305
.text:00001305 ; ---------------------------------------------------------------------------
.text:0000130A                 align 4
.text:0000130A _text           ends
.text:0000130A
.text:0000130C ; ===========================================================================
.text:0000130C
.text:0000130C ; Segment type: Pure code
.text:0000130C ; Segment permissions: Read/Execute
.text:0000130C _text           segment para public 'CODE' use32
.text:0000130C                 assume cs:_text
.text:0000130C                 ;org 130Ch
.text:0000130C ; COMDAT (pick any)
.text:0000130C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000130C
.text:0000130C ; =============== S U B R O U T I N E =======================================
.text:0000130C
.text:0000130C
.text:0000130C ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000130C                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:0000130C ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000130C                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:0000130C                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:0000130C
.text:0000130C arg_0           = dword ptr  4
.text:0000130C
.text:0000130C                 sub     [esp+arg_0], 4
.text:00001311                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001311 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001311
.text:00001311 ; ---------------------------------------------------------------------------
.text:00001316                 align 4
.text:00001316 _text           ends
.text:00001316
.text:00001318 ; ===========================================================================
.text:00001318
.text:00001318 ; Segment type: Pure code
.text:00001318 ; Segment permissions: Read/Execute
.text:00001318 _text           segment para public 'CODE' use32
.text:00001318                 assume cs:_text
.text:00001318                 ;org 1318h
.text:00001318 ; COMDAT (pick any)
.text:00001318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001318
.text:00001318 ; =============== S U B R O U T I N E =======================================
.text:00001318
.text:00001318
.text:00001318 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.text:00001318                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00001318 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00001318                                         ; DATA XREF: .rdata:00000274o
.text:00001318                                         ; .rdata:00000B94o
.text:00001318
.text:00001318 arg_0           = dword ptr  4
.text:00001318
.text:00001318                 sub     [esp+arg_0], 10h
.text:0000131D                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:0000131D ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:0000131D
.text:0000131D ; ---------------------------------------------------------------------------
.text:00001322                 align 4
.text:00001322 _text           ends
.text:00001322
.text:00001324 ; ===========================================================================
.text:00001324
.text:00001324 ; Segment type: Pure code
.text:00001324 ; Segment permissions: Read/Execute
.text:00001324 _text           segment para public 'CODE' use32
.text:00001324                 assume cs:_text
.text:00001324                 ;org 1324h
.text:00001324 ; COMDAT (pick any)
.text:00001324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001324
.text:00001324 ; =============== S U B R O U T I N E =======================================
.text:00001324
.text:00001324
.text:00001324 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001324                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001324 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001324                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetInStream'}o
.text:00001324                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}o
.text:00001324
.text:00001324 arg_0           = dword ptr  4
.text:00001324
.text:00001324                 sub     [esp+arg_0], 8
.text:00001329                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001329 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001329
.text:00001329 ; ---------------------------------------------------------------------------
.text:0000132E                 align 10h
.text:0000132E _text           ends
.text:0000132E
.text:00001330 ; ===========================================================================
.text:00001330
.text:00001330 ; Segment type: Pure code
.text:00001330 ; Segment permissions: Read/Execute
.text:00001330 _text           segment para public 'CODE' use32
.text:00001330                 assume cs:_text
.text:00001330                 ;org 1330h
.text:00001330 ; COMDAT (pick any)
.text:00001330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001330
.text:00001330 ; =============== S U B R O U T I N E =======================================
.text:00001330
.text:00001330
.text:00001330 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef`adjustor{4}' (void)
.text:00001330                 public ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:00001330 ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00001330                                         ; DATA XREF: .rdata:00000DF4o
.text:00001330
.text:00001330 arg_0           = dword ptr  4
.text:00001330
.text:00001330                 sub     [esp+arg_0], 4
.text:00001335                 jmp     ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder64::AddRef(void)
.text:00001335 ?AddRef@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001335
.text:00001335 ; ---------------------------------------------------------------------------
.text:0000133A                 align 4
.text:0000133A _text           ends
.text:0000133A
.text:0000133C ; ===========================================================================
.text:0000133C
.text:0000133C ; Segment type: Pure code
.text:0000133C ; Segment permissions: Read/Execute
.text:0000133C _text           segment para public 'CODE' use32
.text:0000133C                 assume cs:_text
.text:0000133C                 ;org 133Ch
.text:0000133C ; COMDAT (pick any)
.text:0000133C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000133C
.text:0000133C ; =============== S U B R O U T I N E =======================================
.text:0000133C
.text:0000133C
.text:0000133C ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:0000133C                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:0000133C ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000133C                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ICompressSetOutStreamSize'}o
.text:0000133C                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:0000133C
.text:0000133C arg_0           = dword ptr  4
.text:0000133C
.text:0000133C                 sub     [esp+arg_0], 0Ch
.text:00001341                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001341 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001341
.text:00001341 ; ---------------------------------------------------------------------------
.text:00001346                 align 4
.text:00001346 _text           ends
.text:00001346
.text:00001348 ; ===========================================================================
.text:00001348
.text:00001348 ; Segment type: Pure code
.text:00001348 ; Segment permissions: Read/Execute
.text:00001348 _text           segment para public 'CODE' use32
.text:00001348                 assume cs:_text
.text:00001348                 ;org 1348h
.text:00001348 ; COMDAT (pick any)
.text:00001348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001348
.text:00001348 ; =============== S U B R O U T I N E =======================================
.text:00001348
.text:00001348
.text:00001348 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00001348                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00001348 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00001348                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder64::`vftable'{for `ISequentialInStream'}o
.text:00001348                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}o
.text:00001348
.text:00001348 arg_0           = dword ptr  4
.text:00001348
.text:00001348                 sub     [esp+arg_0], 10h
.text:0000134D                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000134D ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:0000134D
.text:0000134D ; ---------------------------------------------------------------------------
.text:00001352                 align 4
.text:00001352 _text           ends
.text:00001352
.text:00001354 ; ===========================================================================
.text:00001354
.text:00001354 ; Segment type: Pure code
.text:00001354 ; Segment permissions: Read/Execute
.text:00001354 _text           segment para public 'CODE' use32
.text:00001354                 assume cs:_text
.text:00001354                 ;org 1354h
.text:00001354 ; COMDAT (pick any)
.text:00001354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001354
.text:00001354 ; =============== S U B R O U T I N E =======================================
.text:00001354
.text:00001354
.text:00001354 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:00001354                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00001354 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00001354                                         ; DATA XREF: .rdata:000002B8o
.text:00001354                                         ; .rdata:00000BD8o
.text:00001354
.text:00001354 arg_0           = dword ptr  4
.text:00001354
.text:00001354                 sub     [esp+arg_0], 4
.text:00001359                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00001359 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00001359
.text:00001359 ; ---------------------------------------------------------------------------
.text:0000135E                 align 10h
.text:0000135E _text           ends
.text:0000135E
.text:00001360 ; ===========================================================================
.text:00001360
.text:00001360 ; Segment type: Pure code
.text:00001360 ; Segment permissions: Read/Execute
.text:00001360 _text           segment para public 'CODE' use32
.text:00001360                 assume cs:_text
.text:00001360                 ;org 1360h
.text:00001360 ; COMDAT (pick any)
.text:00001360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001360
.text:00001360 ; =============== S U B R O U T I N E =======================================
.text:00001360
.text:00001360
.text:00001360 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.text:00001360                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:00001360 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:00001360                                         ; DATA XREF: .rdata:000002A0o
.text:00001360                                         ; .rdata:00000BC0o
.text:00001360
.text:00001360 arg_0           = dword ptr  4
.text:00001360
.text:00001360                 sub     [esp+arg_0], 8
.text:00001365                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00001365 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00001365
.text:00001365 ; ---------------------------------------------------------------------------
.text:0000136A                 align 4
.text:0000136A _text           ends
.text:0000136A
.text:0000136C ; ===========================================================================
.text:0000136C
.text:0000136C ; Segment type: Pure code
.text:0000136C ; Segment permissions: Read/Execute
.text:0000136C _text           segment para public 'CODE' use32
.text:0000136C                 assume cs:_text
.text:0000136C                 ;org 136Ch
.text:0000136C ; COMDAT (pick any)
.text:0000136C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000136C
.text:0000136C ; =============== S U B R O U T I N E =======================================
.text:0000136C
.text:0000136C
.text:0000136C ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000136C                 public ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:0000136C ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000136C                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder64::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000136C
.text:0000136C arg_0           = dword ptr  4
.text:0000136C
.text:0000136C                 sub     [esp+arg_0], 4
.text:00001371                 jmp     ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)
.text:00001371 ?QueryInterface@CCOMCoder64@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001371
.text:00001371 ; ---------------------------------------------------------------------------
.text:00001376                 align 4
.text:00001376 _text           ends
.text:00001376
.text$yc:00001378 ; ===========================================================================
.text$yc:00001378
.text$yc:00001378 ; Segment type: Pure code
.text$yc:00001378 ; Segment permissions: Read/Execute
.text$yc:00001378 _text$yc        segment para public 'CODE' use32
.text$yc:00001378                 assume cs:_text$yc
.text$yc:00001378                 ;org 1378h
.text$yc:00001378 ; COMDAT (pick any)
.text$yc:00001378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00001378
.text$yc:00001378 ; =============== S U B R O U T I N E =======================================
.text$yc:00001378
.text$yc:00001378 ; Attributes: bp-based frame
.text$yc:00001378
.text$yc:00001378 ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:00001378 ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:00001378                 push    ebp
.text$yc:00001379                 mov     ebp, esp
.text$yc:0000137B                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00001380                 call    ??0CRegisterCodecDeflate64@@QAE@XZ ; CRegisterCodecDeflate64::CRegisterCodecDeflate64(void)
.text$yc:00001385                 cmp     ebp, esp
.text$yc:00001387                 call    __RTC_CheckEsp
.text$yc:0000138C                 pop     ebp
.text$yc:0000138D                 retn
.text$yc:0000138D ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:0000138D
.text$yc:0000138D ; ---------------------------------------------------------------------------
.text$yc:0000138E                 align 10h
.text$yc:0000138E _text$yc        ends
.text$yc:0000138E
.text:00001390 ; ===========================================================================
.text:00001390
.text:00001390 ; Segment type: Pure code
.text:00001390 ; Segment permissions: Read/Execute
.text:00001390 _text           segment para public 'CODE' use32
.text:00001390                 assume cs:_text
.text:00001390                 ;org 1390h
.text:00001390 ; COMDAT (pick any)
.text:00001390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001390
.text:00001390 ; =============== S U B R O U T I N E =======================================
.text:00001390
.text:00001390 ; Attributes: bp-based frame
.text:00001390
.text:00001390 ; _DWORD __thiscall CRegisterCodecDeflate64::CRegisterCodecDeflate64(CRegisterCodecDeflate64 *__hidden this)
.text:00001390                 public ??0CRegisterCodecDeflate64@@QAE@XZ
.text:00001390 ??0CRegisterCodecDeflate64@@QAE@XZ proc near
.text:00001390                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00001390
.text:00001390 var_4           = dword ptr -4
.text:00001390
.text:00001390                 push    ebp
.text:00001391                 mov     ebp, esp
.text:00001393                 push    ecx
.text:00001394                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000139B                 mov     [ebp+var_4], ecx
.text:0000139E                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:000013A3                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:000013A8                 mov     eax, [ebp+var_4]
.text:000013AB                 add     esp, 4
.text:000013AE                 cmp     ebp, esp
.text:000013B0                 call    __RTC_CheckEsp
.text:000013B5                 mov     esp, ebp
.text:000013B7                 pop     ebp
.text:000013B8                 retn
.text:000013B8 ??0CRegisterCodecDeflate64@@QAE@XZ endp
.text:000013B8
.text:000013B8 ; ---------------------------------------------------------------------------
.text:000013B9                 align 4
.text:000013B9 _text           ends
.text:000013B9
.bss:000013BC ; ===========================================================================
.bss:000013BC
.bss:000013BC ; Segment type: Uninitialized
.bss:000013BC ; Segment permissions: Read/Write
.bss:000013BC _bss            segment byte public 'BSS' use32
.bss:000013BC                 assume cs:_bss
.bss:000013BC                 ;org 13BCh
.bss:000013BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000013BC ; CRegisterCodecDeflate64 g_RegisterCodec
.bss:000013BC _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:000013BD                 align 10h
.bss:000013BD _bss            ends
.bss:000013BD
.CRT$XCU:000013C0 ; ===========================================================================
.CRT$XCU:000013C0
.CRT$XCU:000013C0 ; Segment type: Pure data
.CRT$XCU:000013C0 ; Segment permissions: Read
.CRT$XCU:000013C0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000013C0                 assume cs:_CRT$XCU
.CRT$XCU:000013C0                 ;org 13C0h
.CRT$XCU:000013C0 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:000013C0 _CRT$XCU        ends
.CRT$XCU:000013C0
UNDEF:000013D0 ; ===========================================================================
UNDEF:000013D0
UNDEF:000013D0 ; Segment type: Externs
UNDEF:000013D0 ; UNDEF
UNDEF:000013D0 ; void __cdecl operator delete(void *)
UNDEF:000013D0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:000013D0                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:000013D4 ; void *__cdecl operator new(unsigned int)
UNDEF:000013D4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Fp
UNDEF:000013D4                                         ; CreateEnc(void)+3Fp
UNDEF:000013D8                 extrn ___security_cookie:near
UNDEF:000013D8                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:000013D8                                         ; CreateEnc(void)+29r ...
UNDEF:000013DC                 extrn ___CxxFrameHandler3:near
UNDEF:000013DC                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:000013DC                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j ...
UNDEF:000013E0 ; __fastcall __security_check_cookie(x)
UNDEF:000013E0                 extrn @__security_check_cookie@4:near
UNDEF:000013E0                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:000013E0                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp ...
UNDEF:000013E4                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateDec(void)+8Bp
UNDEF:000013E4                                         ; CreateEnc(void)+8Bp ...
UNDEF:000013E8                 extrn __RTC_Shutdown:near
UNDEF:000013E8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000013EC                 extrn __RTC_InitBase:near
UNDEF:000013EC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000013F0 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this, bool, bool)
UNDEF:000013F0                 extrn ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z:near
UNDEF:000013F0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder64::CCOMCoder64(void)+15p
UNDEF:000013F4 ; const type_info::`vftable'
UNDEF:000013F4                 extrn ??_7type_info@@6B@:near
UNDEF:000013F4                                         ; DATA XREF: .data:NCompress::NDeflate::NDecoder::CCOMCoder64 `RTTI Type Descriptor'o
UNDEF:000013F4                                         ; .data:NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'o ...
UNDEF:000013F8 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:000013F8                 extrn ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:000013F8                                         ; DATA XREF: .rdata:000002D0o
UNDEF:000013F8                                         ; .rdata:00000BF0o
UNDEF:000013FC ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder64::`scalar deleting destructor'(unsigned int)
UNDEF:000013FC                 extrn ??_GCCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00001400 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder64::`vector deleting destructor'(unsigned int)
UNDEF:00001400                 extrn ??_ECCOMCoder64@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00001400                                         ; DATA XREF: .rdata:000002D4o
UNDEF:00001404 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::CodeResume(struct ISequentialOutStream *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00001404                 extrn ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:near
UNDEF:00001404                                         ; DATA XREF: .rdata:000002D8o
UNDEF:00001404                                         ; .rdata:00000BF8o
UNDEF:00001408 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00001408                 extrn ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z:near
UNDEF:00001408                                         ; DATA XREF: .rdata:000002BCo
UNDEF:00001408                                         ; .rdata:00000BDCo
UNDEF:0000140C ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetInStream(struct ISequentialInStream *)
UNDEF:0000140C                 extrn ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:0000140C                                         ; DATA XREF: .rdata:000002A4o
UNDEF:0000140C                                         ; .rdata:00000BC4o
UNDEF:00001410 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
UNDEF:00001410                 extrn ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ:near
UNDEF:00001410                                         ; DATA XREF: .rdata:000002A8o
UNDEF:00001410                                         ; .rdata:00000BC8o
UNDEF:00001414 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00001414                 extrn ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z:near
UNDEF:00001414                                         ; DATA XREF: .rdata:00000290o
UNDEF:00001414                                         ; .rdata:00000BB0o
UNDEF:00001418 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00001418                 extrn ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00001418                                         ; DATA XREF: .rdata:0000027Co
UNDEF:00001418                                         ; .rdata:00000B9Co
UNDEF:0000141C                 extrn _IID_ISequentialInStream:near
UNDEF:0000141C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_8F5o
UNDEF:00001420                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00001420                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_8C1o
UNDEF:00001424                 extrn _IID_ICompressSetInStream:near
UNDEF:00001424                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_88Do
UNDEF:00001428                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00001428                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_856o
UNDEF:0000142C ; const IID IID_IUnknown
UNDEF:0000142C                 extrn _IID_IUnknown:near
UNDEF:0000142C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:0000142C                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:00001430 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001430                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001434 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
UNDEF:00001434                 extrn ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00001438 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(unsigned int)
UNDEF:00001438                 extrn ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00001438                                         ; DATA XREF: .rdata:00000BF4o
UNDEF:0000143C ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:0000143C                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:0000143C                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00001440 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00001440                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00001440                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00001444 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this, bool)
UNDEF:00001444                 extrn ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z:near
UNDEF:00001444                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::CCOMCoder64(void)+34p
UNDEF:00001448 ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00001448                 extrn ?Code@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00001448                                         ; DATA XREF: .rdata:00000E10o
UNDEF:0000144C ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:0000144C                 extrn ?SetCoderProperties@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:0000144C                                         ; DATA XREF: .rdata:00000DFCo
UNDEF:00001450                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001450                                         ; .rdata:00001038o ...
UNDEF:00001454                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00001454                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::QueryInterface(_GUID const &,void * *):loc_1119o
UNDEF:00001458 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::~CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
UNDEF:00001458                 extrn ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ:near
UNDEF:00001458                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder64::~CCOMCoder64(void)+14p
UNDEF:0000145C ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:0000145C                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:0000145C                                         ; CODE XREF: CRegisterCodecDeflate64::CRegisterCodecDeflate64(void)+13p
UNDEF:0000145C
UNDEF:0000145C