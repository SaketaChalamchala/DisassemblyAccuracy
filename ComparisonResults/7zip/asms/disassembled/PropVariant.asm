.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 671FF1C67A6D1AC7FB8B8CEA6931953E
.rdata:00000000 ; Input CRC32 : 4F97FB36
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PropVariant.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67246        db 'out of memory',0    ; DATA XREF: .data:_kMemExceptiono
.rdata:0000000E                 align 10h
.rdata:0000000E _rdata          ends
.rdata:0000000E
.data:00000010 ; ===========================================================================
.data:00000010
.data:00000010 ; Segment type: Pure data
.data:00000010 ; Segment permissions: Read/Write
.data:00000010 _data           segment dword public 'DATA' use32
.data:00000010                 assume cs:_data
.data:00000010                 ;org 10h
.data:00000010 _kMemException  dd offset $SG67246      ; DATA XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+5Cr
.data:00000010                                         ; NWindows::NCOM::CPropVariant::operator=(UString const &)+64r ...
.data:00000010 _data           ends                    ; "out of memory"
.data:00000010
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text           segment para public 'CODE' use32
.text:00000014                 assume cs:_text
.text:00000014                 ;org 14h
.text:00000014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014 ; __int32 __stdcall NWindows::NCOM::PropVarEm_Alloc_Bstr(NWindows::NCOM *this, UINT ui, unsigned int)
.text:00000014                 public ?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z
.text:00000014 ?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z proc near
.text:00000014
.text:00000014 this            = dword ptr  8
.text:00000014 ui              = dword ptr  0Ch
.text:00000014
.text:00000014                 push    ebp
.text:00000015                 mov     ebp, esp
.text:00000017                 push    esi
.text:00000018                 mov     esi, esp
.text:0000001A                 mov     eax, [ebp+ui]
.text:0000001D                 push    eax             ; ui
.text:0000001E                 push    0               ; strIn
.text:00000020                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:00000026                 cmp     esi, esp
.text:00000028                 call    __RTC_CheckEsp
.text:0000002D                 mov     ecx, [ebp+this]
.text:00000030                 mov     [ecx+8], eax
.text:00000033                 mov     edx, [ebp+this]
.text:00000036                 cmp     dword ptr [edx+8], 0
.text:0000003A                 jnz     short loc_58
.text:0000003C                 mov     eax, 0Ah
.text:00000041                 mov     ecx, [ebp+this]
.text:00000044                 mov     [ecx], ax
.text:00000047                 mov     edx, [ebp+this]
.text:0000004A                 mov     dword ptr [edx+8], 8007000Eh
.text:00000051                 mov     eax, 8007000Eh
.text:00000056                 jmp     short loc_65
.text:00000058 ; ---------------------------------------------------------------------------
.text:00000058
.text:00000058 loc_58:                                 ; CODE XREF: NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)+26j
.text:00000058                 mov     eax, 8
.text:0000005D                 mov     ecx, [ebp+this]
.text:00000060                 mov     [ecx], ax
.text:00000063                 xor     eax, eax
.text:00000065
.text:00000065 loc_65:                                 ; CODE XREF: NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)+42j
.text:00000065                 pop     esi
.text:00000066                 cmp     ebp, esp
.text:00000068                 call    __RTC_CheckEsp
.text:0000006D                 pop     ebp
.text:0000006E                 retn    8
.text:0000006E ?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z endp
.text:0000006E
.text:0000006E ; ---------------------------------------------------------------------------
.text:00000071                 align 4
.text:00000074
.text:00000074 ; =============== S U B R O U T I N E =======================================
.text:00000074
.text:00000074 ; Attributes: bp-based frame
.text:00000074
.text:00000074 ; __int32 __stdcall NWindows::NCOM::PropVarEm_Set_Str(NWindows::NCOM *this, struct tagPROPVARIANT *Str, const char *)
.text:00000074                 public ?PropVarEm_Set_Str@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@PBD@Z
.text:00000074 ?PropVarEm_Set_Str@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@PBD@Z proc near
.text:00000074
.text:00000074 var_C           = dword ptr -0Ch
.text:00000074 var_8           = dword ptr -8
.text:00000074 ui              = dword ptr -4
.text:00000074 this            = dword ptr  8
.text:00000074 Str             = dword ptr  0Ch
.text:00000074
.text:00000074                 push    ebp
.text:00000075                 mov     ebp, esp
.text:00000077                 sub     esp, 0Ch
.text:0000007A                 push    esi
.text:0000007B                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000082                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000089                 mov     [ebp+ui], 0CCCCCCCCh
.text:00000090                 mov     eax, [ebp+Str]
.text:00000093                 push    eax             ; Str
.text:00000094                 call    _strlen
.text:00000099                 add     esp, 4
.text:0000009C                 mov     [ebp+ui], eax
.text:0000009F                 mov     esi, esp
.text:000000A1                 mov     ecx, [ebp+ui]
.text:000000A4                 push    ecx             ; ui
.text:000000A5                 push    0               ; strIn
.text:000000A7                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:000000AD                 cmp     esi, esp
.text:000000AF                 call    __RTC_CheckEsp
.text:000000B4                 mov     edx, [ebp+this]
.text:000000B7                 mov     [edx+8], eax
.text:000000BA                 mov     eax, [ebp+this]
.text:000000BD                 cmp     dword ptr [eax+8], 0
.text:000000C1                 jnz     short loc_DF
.text:000000C3                 mov     ecx, 0Ah
.text:000000C8                 mov     edx, [ebp+this]
.text:000000CB                 mov     [edx], cx
.text:000000CE                 mov     eax, [ebp+this]
.text:000000D1                 mov     dword ptr [eax+8], 8007000Eh
.text:000000D8                 mov     eax, 8007000Eh
.text:000000DD                 jmp     short loc_125
.text:000000DF ; ---------------------------------------------------------------------------
.text:000000DF
.text:000000DF loc_DF:                                 ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+4Dj
.text:000000DF                 mov     ecx, 8
.text:000000E4                 mov     edx, [ebp+this]
.text:000000E7                 mov     [edx], cx
.text:000000EA                 mov     eax, [ebp+this]
.text:000000ED                 mov     ecx, [eax+8]
.text:000000F0                 mov     [ebp+var_8], ecx
.text:000000F3                 mov     [ebp+var_C], 0
.text:000000FA                 jmp     short loc_105
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+ADj
.text:000000FC                 mov     edx, [ebp+var_C]
.text:000000FF                 add     edx, 1
.text:00000102                 mov     [ebp+var_C], edx
.text:00000105
.text:00000105 loc_105:                                ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+86j
.text:00000105                 mov     eax, [ebp+var_C]
.text:00000108                 cmp     eax, [ebp+ui]
.text:0000010B                 ja      short loc_123
.text:0000010D                 mov     ecx, [ebp+Str]
.text:00000110                 add     ecx, [ebp+var_C]
.text:00000113                 movzx   dx, byte ptr [ecx]
.text:00000117                 mov     eax, [ebp+var_C]
.text:0000011A                 mov     ecx, [ebp+var_8]
.text:0000011D                 mov     [ecx+eax*2], dx
.text:00000121                 jmp     short loc_FC
.text:00000123 ; ---------------------------------------------------------------------------
.text:00000123
.text:00000123 loc_123:                                ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+97j
.text:00000123                 xor     eax, eax
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+69j
.text:00000125                 pop     esi
.text:00000126                 add     esp, 0Ch
.text:00000129                 cmp     ebp, esp
.text:0000012B                 call    __RTC_CheckEsp
.text:00000130                 mov     esp, ebp
.text:00000132                 pop     ebp
.text:00000133                 retn    8
.text:00000133 ?PropVarEm_Set_Str@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@PBD@Z endp
.text:00000133
.text:00000133 ; ---------------------------------------------------------------------------
.text:00000136                 db 0Eh dup(0CCh)
.text:00000144
.text:00000144 ; =============== S U B R O U T I N E =======================================
.text:00000144
.text:00000144 ; Attributes: bp-based frame
.text:00000144
.text:00000144 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *this, const struct tagPROPVARIANT *)
.text:00000144                 public ??0CPropVariant@NCOM@NWindows@@QAE@ABUtagPROPVARIANT@@@Z
.text:00000144 ??0CPropVariant@NCOM@NWindows@@QAE@ABUtagPROPVARIANT@@@Z proc near
.text:00000144
.text:00000144 var_4           = dword ptr -4
.text:00000144 arg_0           = dword ptr  8
.text:00000144
.text:00000144                 push    ebp
.text:00000145                 mov     ebp, esp
.text:00000147                 push    ecx
.text:00000148                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000014F                 mov     [ebp+var_4], ecx
.text:00000152                 xor     eax, eax
.text:00000154                 mov     ecx, [ebp+var_4]
.text:00000157                 mov     [ecx], ax
.text:0000015A                 mov     edx, [ebp+arg_0]
.text:0000015D                 push    edx             ; struct tagPROPVARIANT *
.text:0000015E                 mov     ecx, [ebp+var_4] ; this
.text:00000161                 call    ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)
.text:00000166                 mov     eax, [ebp+var_4]
.text:00000169                 add     esp, 4
.text:0000016C                 cmp     ebp, esp
.text:0000016E                 call    __RTC_CheckEsp
.text:00000173                 mov     esp, ebp
.text:00000175                 pop     ebp
.text:00000176                 retn    4
.text:00000176 ??0CPropVariant@NCOM@NWindows@@QAE@ABUtagPROPVARIANT@@@Z endp
.text:00000176
.text:00000176 ; ---------------------------------------------------------------------------
.text:00000179                 db 0Bh dup(0CCh)
.text:00000184
.text:00000184 ; =============== S U B R O U T I N E =======================================
.text:00000184
.text:00000184 ; Attributes: bp-based frame
.text:00000184
.text:00000184 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *this, const struct NWindows::NCOM::CPropVariant *)
.text:00000184                 public ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z
.text:00000184 ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z proc near
.text:00000184
.text:00000184 var_4           = dword ptr -4
.text:00000184 arg_0           = dword ptr  8
.text:00000184
.text:00000184                 push    ebp
.text:00000185                 mov     ebp, esp
.text:00000187                 push    ecx
.text:00000188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000018F                 mov     [ebp+var_4], ecx
.text:00000192                 xor     eax, eax
.text:00000194                 mov     ecx, [ebp+var_4]
.text:00000197                 mov     [ecx], ax
.text:0000019A                 mov     edx, [ebp+arg_0]
.text:0000019D                 push    edx             ; struct tagPROPVARIANT *
.text:0000019E                 mov     ecx, [ebp+var_4] ; this
.text:000001A1                 call    ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)
.text:000001A6                 mov     eax, [ebp+var_4]
.text:000001A9                 add     esp, 4
.text:000001AC                 cmp     ebp, esp
.text:000001AE                 call    __RTC_CheckEsp
.text:000001B3                 mov     esp, ebp
.text:000001B5                 pop     ebp
.text:000001B6                 retn    4
.text:000001B6 ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z endp
.text:000001B6
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B9                 db 0Bh dup(0CCh)
.text:000001C4
.text:000001C4 ; =============== S U B R O U T I N E =======================================
.text:000001C4
.text:000001C4 ; Attributes: bp-based frame
.text:000001C4
.text:000001C4 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *this, wchar_t *)
.text:000001C4                 public ??0CPropVariant@NCOM@NWindows@@QAE@PA_W@Z
.text:000001C4 ??0CPropVariant@NCOM@NWindows@@QAE@PA_W@Z proc near
.text:000001C4
.text:000001C4 var_4           = dword ptr -4
.text:000001C4 psz             = dword ptr  8
.text:000001C4
.text:000001C4                 push    ebp
.text:000001C5                 mov     ebp, esp
.text:000001C7                 push    ecx
.text:000001C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001CF                 mov     [ebp+var_4], ecx
.text:000001D2                 xor     eax, eax
.text:000001D4                 mov     ecx, [ebp+var_4]
.text:000001D7                 mov     [ecx], ax
.text:000001DA                 mov     edx, [ebp+psz]
.text:000001DD                 push    edx             ; psz
.text:000001DE                 mov     ecx, [ebp+var_4]
.text:000001E1                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PA_W@Z ; NWindows::NCOM::CPropVariant::operator=(wchar_t *)
.text:000001E6                 mov     eax, [ebp+var_4]
.text:000001E9                 add     esp, 4
.text:000001EC                 cmp     ebp, esp
.text:000001EE                 call    __RTC_CheckEsp
.text:000001F3                 mov     esp, ebp
.text:000001F5                 pop     ebp
.text:000001F6                 retn    4
.text:000001F6 ??0CPropVariant@NCOM@NWindows@@QAE@PA_W@Z endp
.text:000001F6
.text:000001F6 ; ---------------------------------------------------------------------------
.text:000001F9                 db 0Bh dup(0CCh)
.text:00000204
.text:00000204 ; =============== S U B R O U T I N E =======================================
.text:00000204
.text:00000204 ; Attributes: bp-based frame
.text:00000204
.text:00000204 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *this, const wchar_t *)
.text:00000204                 public ??0CPropVariant@NCOM@NWindows@@QAE@PB_W@Z
.text:00000204 ??0CPropVariant@NCOM@NWindows@@QAE@PB_W@Z proc near
.text:00000204
.text:00000204 var_4           = dword ptr -4
.text:00000204 psz             = dword ptr  8
.text:00000204
.text:00000204                 push    ebp
.text:00000205                 mov     ebp, esp
.text:00000207                 push    ecx
.text:00000208                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000020F                 mov     [ebp+var_4], ecx
.text:00000212                 xor     eax, eax
.text:00000214                 mov     ecx, [ebp+var_4]
.text:00000217                 mov     [ecx], ax
.text:0000021A                 mov     edx, [ebp+psz]
.text:0000021D                 push    edx             ; psz
.text:0000021E                 mov     ecx, [ebp+var_4]
.text:00000221                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z ; NWindows::NCOM::CPropVariant::operator=(wchar_t const *)
.text:00000226                 mov     eax, [ebp+var_4]
.text:00000229                 add     esp, 4
.text:0000022C                 cmp     ebp, esp
.text:0000022E                 call    __RTC_CheckEsp
.text:00000233                 mov     esp, ebp
.text:00000235                 pop     ebp
.text:00000236                 retn    4
.text:00000236 ??0CPropVariant@NCOM@NWindows@@QAE@PB_W@Z endp
.text:00000236
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000239                 db 0Bh dup(0CCh)
.text:00000244
.text:00000244 ; =============== S U B R O U T I N E =======================================
.text:00000244
.text:00000244 ; Attributes: bp-based frame
.text:00000244
.text:00000244 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(struct tagPROPVARIANT *)
.text:00000244                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z
.text:00000244 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z proc near
.text:00000244
.text:00000244 var_4           = dword ptr -4
.text:00000244 arg_0           = dword ptr  8
.text:00000244
.text:00000244                 push    ebp
.text:00000245                 mov     ebp, esp
.text:00000247                 push    ecx
.text:00000248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000024F                 mov     [ebp+var_4], ecx
.text:00000252                 mov     eax, [ebp+arg_0]
.text:00000255                 push    eax             ; struct tagPROPVARIANT *
.text:00000256                 mov     ecx, [ebp+var_4] ; this
.text:00000259                 call    ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)
.text:0000025E                 mov     eax, [ebp+var_4]
.text:00000261                 add     esp, 4
.text:00000264                 cmp     ebp, esp
.text:00000266                 call    __RTC_CheckEsp
.text:0000026B                 mov     esp, ebp
.text:0000026D                 pop     ebp
.text:0000026E                 retn    4
.text:0000026E ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z endp
.text:0000026E
.text:0000026E ; ---------------------------------------------------------------------------
.text:00000271                 align 4
.text:00000274
.text:00000274 ; =============== S U B R O U T I N E =======================================
.text:00000274
.text:00000274 ; Attributes: bp-based frame
.text:00000274
.text:00000274 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(struct tagPROPVARIANT *)
.text:00000274                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z
.text:00000274 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z proc near
.text:00000274
.text:00000274 var_4           = dword ptr -4
.text:00000274 arg_0           = dword ptr  8
.text:00000274
.text:00000274                 push    ebp
.text:00000275                 mov     ebp, esp
.text:00000277                 push    ecx
.text:00000278                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000027F                 mov     [ebp+var_4], ecx
.text:00000282                 mov     eax, [ebp+arg_0]
.text:00000285                 push    eax             ; struct tagPROPVARIANT *
.text:00000286                 mov     ecx, [ebp+var_4] ; this
.text:00000289                 call    ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)
.text:0000028E                 mov     eax, [ebp+var_4]
.text:00000291                 add     esp, 4
.text:00000294                 cmp     ebp, esp
.text:00000296                 call    __RTC_CheckEsp
.text:0000029B                 mov     esp, ebp
.text:0000029D                 pop     ebp
.text:0000029E                 retn    4
.text:0000029E ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z endp
.text:0000029E
.text:0000029E ; ---------------------------------------------------------------------------
.text:000002A1                 align 4
.text:000002A4
.text:000002A4 ; =============== S U B R O U T I N E =======================================
.text:000002A4
.text:000002A4 ; Attributes: bp-based frame
.text:000002A4
.text:000002A4 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(OLECHAR *psz)
.text:000002A4                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PA_W@Z
.text:000002A4 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PA_W@Z proc near
.text:000002A4                                         ; CODE XREF: NWindows::NCOM::CPropVariant::CPropVariant(wchar_t *)+1Dp
.text:000002A4
.text:000002A4 var_4           = dword ptr -4
.text:000002A4 psz             = dword ptr  8
.text:000002A4
.text:000002A4                 push    ebp
.text:000002A5                 mov     ebp, esp
.text:000002A7                 push    ecx
.text:000002A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002AF                 mov     [ebp+var_4], ecx
.text:000002B2                 mov     eax, [ebp+psz]
.text:000002B5                 push    eax             ; psz
.text:000002B6                 mov     ecx, [ebp+var_4]
.text:000002B9                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z ; NWindows::NCOM::CPropVariant::operator=(wchar_t const *)
.text:000002BE                 mov     eax, [ebp+var_4]
.text:000002C1                 add     esp, 4
.text:000002C4                 cmp     ebp, esp
.text:000002C6                 call    __RTC_CheckEsp
.text:000002CB                 mov     esp, ebp
.text:000002CD                 pop     ebp
.text:000002CE                 retn    4
.text:000002CE ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PA_W@Z endp
.text:000002CE
.text:000002CE ; ---------------------------------------------------------------------------
.text:000002D1                 align 4
.text:000002D4
.text:000002D4 ; =============== S U B R O U T I N E =======================================
.text:000002D4
.text:000002D4 ; Attributes: bp-based frame
.text:000002D4
.text:000002D4 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(OLECHAR *psz)
.text:000002D4                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z
.text:000002D4 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z proc near
.text:000002D4                                         ; CODE XREF: NWindows::NCOM::CPropVariant::CPropVariant(wchar_t const *)+1Dp
.text:000002D4                                         ; NWindows::NCOM::CPropVariant::operator=(wchar_t *)+15p
.text:000002D4
.text:000002D4 var_8           = dword ptr -8
.text:000002D4 var_4           = dword ptr -4
.text:000002D4 psz             = dword ptr  8
.text:000002D4
.text:000002D4                 push    ebp
.text:000002D5                 mov     ebp, esp
.text:000002D7                 sub     esp, 8
.text:000002DA                 push    esi
.text:000002DB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002E2                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002E9                 mov     [ebp+var_4], ecx
.text:000002EC                 mov     ecx, [ebp+var_4] ; this
.text:000002EF                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000002F4                 mov     eax, 8
.text:000002F9                 mov     ecx, [ebp+var_4]
.text:000002FC                 mov     [ecx], ax
.text:000002FF                 xor     edx, edx
.text:00000301                 mov     eax, [ebp+var_4]
.text:00000304                 mov     [eax+2], dx
.text:00000308                 mov     esi, esp
.text:0000030A                 mov     ecx, [ebp+psz]
.text:0000030D                 push    ecx             ; psz
.text:0000030E                 call    dword ptr ds:__imp__SysAllocString@4 ; SysAllocString(x)
.text:00000314                 cmp     esi, esp
.text:00000316                 call    __RTC_CheckEsp
.text:0000031B                 mov     edx, [ebp+var_4]
.text:0000031E                 mov     [edx+8], eax
.text:00000321                 mov     eax, [ebp+var_4]
.text:00000324                 cmp     dword ptr [eax+8], 0
.text:00000328                 jnz     short loc_347
.text:0000032A                 cmp     [ebp+psz], 0
.text:0000032E                 jz      short loc_347
.text:00000330                 mov     ecx, ds:_kMemException
.text:00000336                 mov     [ebp+var_8], ecx
.text:00000339                 push    offset __TI2CPAD
.text:0000033E                 lea     edx, [ebp+var_8]
.text:00000341                 push    edx
.text:00000342                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000347 ; ---------------------------------------------------------------------------
.text:00000347
.text:00000347 loc_347:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+54j
.text:00000347                                         ; NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+5Aj
.text:00000347                 mov     eax, [ebp+var_4]
.text:0000034A                 pop     esi
.text:0000034B                 add     esp, 8
.text:0000034E                 cmp     ebp, esp
.text:00000350                 call    __RTC_CheckEsp
.text:00000355                 mov     esp, ebp
.text:00000357                 pop     ebp
.text:00000358                 retn    4
.text:00000358 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z endp
.text:00000358
.text:00000358 ; ---------------------------------------------------------------------------
.text:0000035B                 db 9 dup(0CCh)
.text:00000364
.text:00000364 ; =============== S U B R O U T I N E =======================================
.text:00000364
.text:00000364 ; Attributes: bp-based frame
.text:00000364
.text:00000364 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(UString *)
.text:00000364                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z
.text:00000364 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z proc near
.text:00000364
.text:00000364 var_8           = dword ptr -8
.text:00000364 var_4           = dword ptr -4
.text:00000364 arg_0           = dword ptr  8
.text:00000364
.text:00000364                 push    ebp
.text:00000365                 mov     ebp, esp
.text:00000367                 sub     esp, 8
.text:0000036A                 push    esi
.text:0000036B                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000372                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000379                 mov     [ebp+var_4], ecx
.text:0000037C                 mov     ecx, [ebp+var_4] ; this
.text:0000037F                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000384                 mov     eax, 8
.text:00000389                 mov     ecx, [ebp+var_4]
.text:0000038C                 mov     [ecx], ax
.text:0000038F                 xor     edx, edx
.text:00000391                 mov     eax, [ebp+var_4]
.text:00000394                 mov     [eax+2], dx
.text:00000398                 mov     ecx, [ebp+arg_0] ; this
.text:0000039B                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000003A0                 mov     esi, esp
.text:000003A2                 push    eax             ; ui
.text:000003A3                 mov     ecx, [ebp+arg_0]
.text:000003A6                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000003AB                 push    eax             ; strIn
.text:000003AC                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:000003B2                 cmp     esi, esp
.text:000003B4                 call    __RTC_CheckEsp
.text:000003B9                 mov     ecx, [ebp+var_4]
.text:000003BC                 mov     [ecx+8], eax
.text:000003BF                 mov     edx, [ebp+var_4]
.text:000003C2                 cmp     dword ptr [edx+8], 0
.text:000003C6                 jnz     short loc_3DE
.text:000003C8                 mov     eax, ds:_kMemException
.text:000003CD                 mov     [ebp+var_8], eax
.text:000003D0                 push    offset __TI2CPAD
.text:000003D5                 lea     ecx, [ebp+var_8]
.text:000003D8                 push    ecx
.text:000003D9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000003DE ; ---------------------------------------------------------------------------
.text:000003DE
.text:000003DE loc_3DE:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString const &)+62j
.text:000003DE                 mov     eax, [ebp+var_4]
.text:000003E1                 pop     esi
.text:000003E2                 add     esp, 8
.text:000003E5                 cmp     ebp, esp
.text:000003E7                 call    __RTC_CheckEsp
.text:000003EC                 mov     esp, ebp
.text:000003EE                 pop     ebp
.text:000003EF                 retn    4
.text:000003EF ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z endp
.text:000003EF
.text:000003EF ; ---------------------------------------------------------------------------
.text:000003F2                 align 4
.text:000003F4
.text:000003F4 ; =============== S U B R O U T I N E =======================================
.text:000003F4
.text:000003F4 ; Attributes: bp-based frame
.text:000003F4
.text:000003F4 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(UString2 *)
.text:000003F4                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString2@@@Z
.text:000003F4 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString2@@@Z proc near
.text:000003F4
.text:000003F4 var_8           = dword ptr -8
.text:000003F4 var_4           = dword ptr -4
.text:000003F4 arg_0           = dword ptr  8
.text:000003F4
.text:000003F4                 push    ebp
.text:000003F5                 mov     ebp, esp
.text:000003F7                 sub     esp, 8
.text:000003FA                 push    esi
.text:000003FB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000402                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000409                 mov     [ebp+var_4], ecx
.text:0000040C                 mov     ecx, [ebp+var_4] ; this
.text:0000040F                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000414                 mov     eax, 8
.text:00000419                 mov     ecx, [ebp+var_4]
.text:0000041C                 mov     [ecx], ax
.text:0000041F                 xor     edx, edx
.text:00000421                 mov     eax, [ebp+var_4]
.text:00000424                 mov     [eax+2], dx
.text:00000428                 mov     ecx, [ebp+arg_0] ; this
.text:0000042B                 call    ?Len@UString2@@QBEIXZ ; UString2::Len(void)
.text:00000430                 mov     esi, esp
.text:00000432                 push    eax             ; ui
.text:00000433                 mov     ecx, [ebp+arg_0] ; this
.text:00000436                 call    ?GetRawPtr@UString2@@QBEPB_WXZ ; UString2::GetRawPtr(void)
.text:0000043B                 push    eax             ; strIn
.text:0000043C                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:00000442                 cmp     esi, esp
.text:00000444                 call    __RTC_CheckEsp
.text:00000449                 mov     ecx, [ebp+var_4]
.text:0000044C                 mov     [ecx+8], eax
.text:0000044F                 mov     edx, [ebp+var_4]
.text:00000452                 cmp     dword ptr [edx+8], 0
.text:00000456                 jnz     short loc_46E
.text:00000458                 mov     eax, ds:_kMemException
.text:0000045D                 mov     [ebp+var_8], eax
.text:00000460                 push    offset __TI2CPAD
.text:00000465                 lea     ecx, [ebp+var_8]
.text:00000468                 push    ecx
.text:00000469                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000046E ; ---------------------------------------------------------------------------
.text:0000046E
.text:0000046E loc_46E:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString2 const &)+62j
.text:0000046E                 mov     eax, [ebp+var_4]
.text:00000471                 pop     esi
.text:00000472                 add     esp, 8
.text:00000475                 cmp     ebp, esp
.text:00000477                 call    __RTC_CheckEsp
.text:0000047C                 mov     esp, ebp
.text:0000047E                 pop     ebp
.text:0000047F                 retn    4
.text:0000047F ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString2@@@Z endp
.text:0000047F
.text:0000047F ; ---------------------------------------------------------------------------
.text:00000482                 align 4
.text:00000484
.text:00000484 ; =============== S U B R O U T I N E =======================================
.text:00000484
.text:00000484 ; Attributes: bp-based frame
.text:00000484
.text:00000484 ; int __stdcall NWindows::NCOM::CPropVariant::operator=(char *Str)
.text:00000484                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z
.text:00000484 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z proc near
.text:00000484
.text:00000484 var_14          = dword ptr -14h
.text:00000484 var_10          = dword ptr -10h
.text:00000484 var_C           = dword ptr -0Ch
.text:00000484 ui              = dword ptr -8
.text:00000484 var_4           = dword ptr -4
.text:00000484 Str             = dword ptr  8
.text:00000484
.text:00000484                 push    ebp
.text:00000485                 mov     ebp, esp
.text:00000487                 sub     esp, 14h
.text:0000048A                 push    esi
.text:0000048B                 mov     eax, 0CCCCCCCCh
.text:00000490                 mov     [ebp+var_14], eax
.text:00000493                 mov     [ebp+var_10], eax
.text:00000496                 mov     [ebp+var_C], eax
.text:00000499                 mov     [ebp+ui], eax
.text:0000049C                 mov     [ebp+var_4], eax
.text:0000049F                 mov     [ebp+var_4], ecx
.text:000004A2                 mov     ecx, [ebp+var_4] ; this
.text:000004A5                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000004AA                 mov     eax, 8
.text:000004AF                 mov     ecx, [ebp+var_4]
.text:000004B2                 mov     [ecx], ax
.text:000004B5                 xor     edx, edx
.text:000004B7                 mov     eax, [ebp+var_4]
.text:000004BA                 mov     [eax+2], dx
.text:000004BE                 mov     ecx, [ebp+Str]
.text:000004C1                 push    ecx             ; Str
.text:000004C2                 call    _strlen
.text:000004C7                 add     esp, 4
.text:000004CA                 mov     [ebp+ui], eax
.text:000004CD                 mov     esi, esp
.text:000004CF                 mov     edx, [ebp+ui]
.text:000004D2                 push    edx             ; ui
.text:000004D3                 push    0               ; strIn
.text:000004D5                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:000004DB                 cmp     esi, esp
.text:000004DD                 call    __RTC_CheckEsp
.text:000004E2                 mov     ecx, [ebp+var_4]
.text:000004E5                 mov     [ecx+8], eax
.text:000004E8                 mov     edx, [ebp+var_4]
.text:000004EB                 cmp     dword ptr [edx+8], 0
.text:000004EF                 jnz     short loc_509
.text:000004F1                 mov     eax, ds:_kMemException
.text:000004F6                 mov     [ebp+var_14], eax
.text:000004F9                 push    offset __TI2CPAD
.text:000004FE                 lea     ecx, [ebp+var_14]
.text:00000501                 push    ecx
.text:00000502                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000507 ; ---------------------------------------------------------------------------
.text:00000507                 jmp     short loc_542
.text:00000509 ; ---------------------------------------------------------------------------
.text:00000509
.text:00000509 loc_509:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(char const *)+6Bj
.text:00000509                 mov     edx, [ebp+var_4]
.text:0000050C                 mov     eax, [edx+8]
.text:0000050F                 mov     [ebp+var_C], eax
.text:00000512                 mov     [ebp+var_10], 0
.text:00000519                 jmp     short loc_524
.text:0000051B ; ---------------------------------------------------------------------------
.text:0000051B
.text:0000051B loc_51B:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(char const *)+BCj
.text:0000051B                 mov     ecx, [ebp+var_10]
.text:0000051E                 add     ecx, 1
.text:00000521                 mov     [ebp+var_10], ecx
.text:00000524
.text:00000524 loc_524:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(char const *)+95j
.text:00000524                 mov     edx, [ebp+var_10]
.text:00000527                 cmp     edx, [ebp+ui]
.text:0000052A                 ja      short loc_542
.text:0000052C                 mov     eax, [ebp+Str]
.text:0000052F                 add     eax, [ebp+var_10]
.text:00000532                 movzx   cx, byte ptr [eax]
.text:00000536                 mov     edx, [ebp+var_10]
.text:00000539                 mov     eax, [ebp+var_C]
.text:0000053C                 mov     [eax+edx*2], cx
.text:00000540                 jmp     short loc_51B
.text:00000542 ; ---------------------------------------------------------------------------
.text:00000542
.text:00000542 loc_542:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(char const *)+83j
.text:00000542                                         ; NWindows::NCOM::CPropVariant::operator=(char const *)+A6j
.text:00000542                 mov     eax, [ebp+var_4]
.text:00000545                 pop     esi
.text:00000546                 add     esp, 14h
.text:00000549                 cmp     ebp, esp
.text:0000054B                 call    __RTC_CheckEsp
.text:00000550                 mov     esp, ebp
.text:00000552                 pop     ebp
.text:00000553                 retn    4
.text:00000553 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z endp
.text:00000553
.text:00000553 ; ---------------------------------------------------------------------------
.text:00000556                 db 0Eh dup(0CCh)
.text:00000564
.text:00000564 ; =============== S U B R O U T I N E =======================================
.text:00000564
.text:00000564 ; Attributes: bp-based frame
.text:00000564
.text:00000564 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000564                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z
.text:00000564 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z proc near
.text:00000564
.text:00000564 var_4           = dword ptr -4
.text:00000564 arg_0           = byte ptr  8
.text:00000564
.text:00000564                 push    ebp
.text:00000565                 mov     ebp, esp
.text:00000567                 push    ecx
.text:00000568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000056F                 mov     [ebp+var_4], ecx
.text:00000572                 mov     eax, [ebp+var_4]
.text:00000575                 movzx   ecx, word ptr [eax]
.text:00000578                 cmp     ecx, 0Bh
.text:0000057B                 jz      short loc_590
.text:0000057D                 mov     ecx, [ebp+var_4] ; this
.text:00000580                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000585                 mov     edx, 0Bh
.text:0000058A                 mov     eax, [ebp+var_4]
.text:0000058D                 mov     [eax], dx
.text:00000590
.text:00000590 loc_590:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(bool)+17j
.text:00000590                 movzx   ecx, [ebp+arg_0]
.text:00000594                 neg     ecx
.text:00000596                 sbb     ecx, ecx
.text:00000598                 mov     edx, [ebp+var_4]
.text:0000059B                 mov     [edx+8], cx
.text:0000059F                 mov     eax, [ebp+var_4]
.text:000005A2                 add     esp, 4
.text:000005A5                 cmp     ebp, esp
.text:000005A7                 call    __RTC_CheckEsp
.text:000005AC                 mov     esp, ebp
.text:000005AE                 pop     ebp
.text:000005AF                 retn    4
.text:000005AF ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z endp
.text:000005AF
.text:000005AF ; ---------------------------------------------------------------------------
.text:000005B2                 align 4
.text:000005B4
.text:000005B4 ; =============== S U B R O U T I N E =======================================
.text:000005B4
.text:000005B4 ; Attributes: bp-based frame
.text:000005B4
.text:000005B4 ; wchar_t *__thiscall NWindows::NCOM::CPropVariant::AllocBstr(NWindows::NCOM::CPropVariant *this, unsigned int)
.text:000005B4                 public ?AllocBstr@CPropVariant@NCOM@NWindows@@QAEPA_WI@Z
.text:000005B4 ?AllocBstr@CPropVariant@NCOM@NWindows@@QAEPA_WI@Z proc near
.text:000005B4
.text:000005B4 var_8           = dword ptr -8
.text:000005B4 var_4           = dword ptr -4
.text:000005B4 ui              = dword ptr  8
.text:000005B4
.text:000005B4                 push    ebp
.text:000005B5                 mov     ebp, esp
.text:000005B7                 sub     esp, 8
.text:000005BA                 push    esi
.text:000005BB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005C2                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005C9                 mov     [ebp+var_4], ecx
.text:000005CC                 mov     eax, [ebp+var_4]
.text:000005CF                 movzx   ecx, word ptr [eax]
.text:000005D2                 test    ecx, ecx
.text:000005D4                 jz      short loc_5DE
.text:000005D6                 mov     ecx, [ebp+var_4] ; this
.text:000005D9                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000005DE
.text:000005DE loc_5DE:                                ; CODE XREF: NWindows::NCOM::CPropVariant::AllocBstr(uint)+20j
.text:000005DE                 mov     edx, 8
.text:000005E3                 mov     eax, [ebp+var_4]
.text:000005E6                 mov     [eax], dx
.text:000005E9                 xor     ecx, ecx
.text:000005EB                 mov     edx, [ebp+var_4]
.text:000005EE                 mov     [edx+2], cx
.text:000005F2                 mov     esi, esp
.text:000005F4                 mov     eax, [ebp+ui]
.text:000005F7                 push    eax             ; ui
.text:000005F8                 push    0               ; strIn
.text:000005FA                 call    dword ptr ds:__imp__SysAllocStringLen@8 ; SysAllocStringLen(x,x)
.text:00000600                 cmp     esi, esp
.text:00000602                 call    __RTC_CheckEsp
.text:00000607                 mov     ecx, [ebp+var_4]
.text:0000060A                 mov     [ecx+8], eax
.text:0000060D                 mov     edx, [ebp+var_4]
.text:00000610                 cmp     dword ptr [edx+8], 0
.text:00000614                 jnz     short loc_62C
.text:00000616                 mov     eax, ds:_kMemException
.text:0000061B                 mov     [ebp+var_8], eax
.text:0000061E                 push    offset __TI2CPAD
.text:00000623                 lea     ecx, [ebp+var_8]
.text:00000626                 push    ecx
.text:00000627                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000062C ; ---------------------------------------------------------------------------
.text:0000062C
.text:0000062C loc_62C:                                ; CODE XREF: NWindows::NCOM::CPropVariant::AllocBstr(uint)+60j
.text:0000062C                 mov     edx, [ebp+var_4]
.text:0000062F                 mov     eax, [edx+8]
.text:00000632                 pop     esi
.text:00000633                 add     esp, 8
.text:00000636                 cmp     ebp, esp
.text:00000638                 call    __RTC_CheckEsp
.text:0000063D                 mov     esp, ebp
.text:0000063F                 pop     ebp
.text:00000640                 retn    4
.text:00000640 ?AllocBstr@CPropVariant@NCOM@NWindows@@QAEPA_WI@Z endp
.text:00000640
.text:00000640 ; ---------------------------------------------------------------------------
.text:00000643                 align 4
.text:00000644
.text:00000644 ; =============== S U B R O U T I N E =======================================
.text:00000644
.text:00000644 ; Attributes: bp-based frame
.text:00000644
.text:00000644 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned char)
.text:00000644                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@E@Z
.text:00000644 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@E@Z proc near
.text:00000644
.text:00000644 var_4           = dword ptr -4
.text:00000644 arg_0           = byte ptr  8
.text:00000644
.text:00000644                 push    ebp
.text:00000645                 mov     ebp, esp
.text:00000647                 push    ecx
.text:00000648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000064F                 mov     [ebp+var_4], ecx
.text:00000652                 mov     eax, [ebp+var_4]
.text:00000655                 movzx   ecx, word ptr [eax]
.text:00000658                 cmp     ecx, 11h
.text:0000065B                 jz      short loc_670
.text:0000065D                 mov     ecx, [ebp+var_4] ; this
.text:00000660                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000665                 mov     edx, 11h
.text:0000066A                 mov     eax, [ebp+var_4]
.text:0000066D                 mov     [eax], dx
.text:00000670
.text:00000670 loc_670:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(uchar)+17j
.text:00000670                 mov     ecx, [ebp+var_4]
.text:00000673                 mov     dl, [ebp+arg_0]
.text:00000676                 mov     [ecx+8], dl
.text:00000679                 mov     eax, [ebp+var_4]
.text:0000067C                 add     esp, 4
.text:0000067F                 cmp     ebp, esp
.text:00000681                 call    __RTC_CheckEsp
.text:00000686                 mov     esp, ebp
.text:00000688                 pop     ebp
.text:00000689                 retn    4
.text:00000689 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@E@Z endp
.text:00000689
.text:00000689 ; ---------------------------------------------------------------------------
.text:0000068C                 db 8 dup(0CCh)
.text:00000694
.text:00000694 ; =============== S U B R O U T I N E =======================================
.text:00000694
.text:00000694 ; Attributes: bp-based frame
.text:00000694
.text:00000694 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(int)
.text:00000694                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@H@Z
.text:00000694 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@H@Z proc near
.text:00000694
.text:00000694 var_4           = dword ptr -4
.text:00000694 arg_0           = dword ptr  8
.text:00000694
.text:00000694                 push    ebp
.text:00000695                 mov     ebp, esp
.text:00000697                 push    ecx
.text:00000698                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000069F                 mov     [ebp+var_4], ecx
.text:000006A2                 mov     eax, [ebp+var_4]
.text:000006A5                 movzx   ecx, word ptr [eax]
.text:000006A8                 cmp     ecx, 3
.text:000006AB                 jz      short loc_6C0
.text:000006AD                 mov     ecx, [ebp+var_4] ; this
.text:000006B0                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000006B5                 mov     edx, 3
.text:000006BA                 mov     eax, [ebp+var_4]
.text:000006BD                 mov     [eax], dx
.text:000006C0
.text:000006C0 loc_6C0:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(int)+17j
.text:000006C0                 mov     ecx, [ebp+var_4]
.text:000006C3                 mov     edx, [ebp+arg_0]
.text:000006C6                 mov     [ecx+8], edx
.text:000006C9                 mov     eax, [ebp+var_4]
.text:000006CC                 add     esp, 4
.text:000006CF                 cmp     ebp, esp
.text:000006D1                 call    __RTC_CheckEsp
.text:000006D6                 mov     esp, ebp
.text:000006D8                 pop     ebp
.text:000006D9                 retn    4
.text:000006D9 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@H@Z endp
.text:000006D9
.text:000006D9 ; ---------------------------------------------------------------------------
.text:000006DC                 db 8 dup(0CCh)
.text:000006E4
.text:000006E4 ; =============== S U B R O U T I N E =======================================
.text:000006E4
.text:000006E4 ; Attributes: bp-based frame
.text:000006E4
.text:000006E4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
.text:000006E4                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z
.text:000006E4 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z proc near
.text:000006E4
.text:000006E4 var_4           = dword ptr -4
.text:000006E4 arg_0           = dword ptr  8
.text:000006E4
.text:000006E4                 push    ebp
.text:000006E5                 mov     ebp, esp
.text:000006E7                 push    ecx
.text:000006E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006EF                 mov     [ebp+var_4], ecx
.text:000006F2                 mov     eax, [ebp+var_4]
.text:000006F5                 movzx   ecx, word ptr [eax]
.text:000006F8                 cmp     ecx, 13h
.text:000006FB                 jz      short loc_710
.text:000006FD                 mov     ecx, [ebp+var_4] ; this
.text:00000700                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000705                 mov     edx, 13h
.text:0000070A                 mov     eax, [ebp+var_4]
.text:0000070D                 mov     [eax], dx
.text:00000710
.text:00000710 loc_710:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(uint)+17j
.text:00000710                 mov     ecx, [ebp+var_4]
.text:00000713                 mov     edx, [ebp+arg_0]
.text:00000716                 mov     [ecx+8], edx
.text:00000719                 mov     eax, [ebp+var_4]
.text:0000071C                 add     esp, 4
.text:0000071F                 cmp     ebp, esp
.text:00000721                 call    __RTC_CheckEsp
.text:00000726                 mov     esp, ebp
.text:00000728                 pop     ebp
.text:00000729                 retn    4
.text:00000729 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z endp
.text:00000729
.text:00000729 ; ---------------------------------------------------------------------------
.text:0000072C                 db 8 dup(0CCh)
.text:00000734
.text:00000734 ; =============== S U B R O U T I N E =======================================
.text:00000734
.text:00000734 ; Attributes: bp-based frame
.text:00000734
.text:00000734 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000734                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z
.text:00000734 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z proc near
.text:00000734
.text:00000734 var_4           = dword ptr -4
.text:00000734 arg_0           = dword ptr  8
.text:00000734 arg_4           = dword ptr  0Ch
.text:00000734
.text:00000734                 push    ebp
.text:00000735                 mov     ebp, esp
.text:00000737                 push    ecx
.text:00000738                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000073F                 mov     [ebp+var_4], ecx
.text:00000742                 mov     eax, [ebp+var_4]
.text:00000745                 movzx   ecx, word ptr [eax]
.text:00000748                 cmp     ecx, 15h
.text:0000074B                 jz      short loc_760
.text:0000074D                 mov     ecx, [ebp+var_4] ; this
.text:00000750                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:00000755                 mov     edx, 15h
.text:0000075A                 mov     eax, [ebp+var_4]
.text:0000075D                 mov     [eax], dx
.text:00000760
.text:00000760 loc_760:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(unsigned __int64)+17j
.text:00000760                 mov     ecx, [ebp+var_4]
.text:00000763                 mov     edx, [ebp+arg_0]
.text:00000766                 mov     [ecx+8], edx
.text:00000769                 mov     eax, [ebp+arg_4]
.text:0000076C                 mov     [ecx+0Ch], eax
.text:0000076F                 mov     eax, [ebp+var_4]
.text:00000772                 add     esp, 4
.text:00000775                 cmp     ebp, esp
.text:00000777                 call    __RTC_CheckEsp
.text:0000077C                 mov     esp, ebp
.text:0000077E                 pop     ebp
.text:0000077F                 retn    8
.text:0000077F ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z endp
.text:0000077F
.text:0000077F ; ---------------------------------------------------------------------------
.text:00000782                 align 4
.text:00000784
.text:00000784 ; =============== S U B R O U T I N E =======================================
.text:00000784
.text:00000784 ; Attributes: bp-based frame
.text:00000784
.text:00000784 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(__int64)
.text:00000784                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z
.text:00000784 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z proc near
.text:00000784
.text:00000784 var_4           = dword ptr -4
.text:00000784 arg_0           = dword ptr  8
.text:00000784 arg_4           = dword ptr  0Ch
.text:00000784
.text:00000784                 push    ebp
.text:00000785                 mov     ebp, esp
.text:00000787                 push    ecx
.text:00000788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000078F                 mov     [ebp+var_4], ecx
.text:00000792                 mov     eax, [ebp+var_4]
.text:00000795                 movzx   ecx, word ptr [eax]
.text:00000798                 cmp     ecx, 14h
.text:0000079B                 jz      short loc_7B0
.text:0000079D                 mov     ecx, [ebp+var_4] ; this
.text:000007A0                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000007A5                 mov     edx, 14h
.text:000007AA                 mov     eax, [ebp+var_4]
.text:000007AD                 mov     [eax], dx
.text:000007B0
.text:000007B0 loc_7B0:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(__int64)+17j
.text:000007B0                 mov     ecx, [ebp+var_4]
.text:000007B3                 mov     edx, [ebp+arg_0]
.text:000007B6                 mov     [ecx+8], edx
.text:000007B9                 mov     eax, [ebp+arg_4]
.text:000007BC                 mov     [ecx+0Ch], eax
.text:000007BF                 mov     eax, [ebp+var_4]
.text:000007C2                 add     esp, 4
.text:000007C5                 cmp     ebp, esp
.text:000007C7                 call    __RTC_CheckEsp
.text:000007CC                 mov     esp, ebp
.text:000007CE                 pop     ebp
.text:000007CF                 retn    8
.text:000007CF ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z endp
.text:000007CF
.text:000007CF ; ---------------------------------------------------------------------------
.text:000007D2                 align 4
.text:000007D4
.text:000007D4 ; =============== S U B R O U T I N E =======================================
.text:000007D4
.text:000007D4 ; Attributes: bp-based frame
.text:000007D4
.text:000007D4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
.text:000007D4                 public ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z
.text:000007D4 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z proc near
.text:000007D4
.text:000007D4 var_4           = dword ptr -4
.text:000007D4 arg_0           = dword ptr  8
.text:000007D4
.text:000007D4                 push    ebp
.text:000007D5                 mov     ebp, esp
.text:000007D7                 push    ecx
.text:000007D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007DF                 mov     [ebp+var_4], ecx
.text:000007E2                 mov     eax, [ebp+var_4]
.text:000007E5                 movzx   ecx, word ptr [eax]
.text:000007E8                 cmp     ecx, 40h ; '@'
.text:000007EB                 jz      short loc_800
.text:000007ED                 mov     ecx, [ebp+var_4] ; this
.text:000007F0                 call    ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::InternalClear(void)
.text:000007F5                 mov     edx, 40h ; '@'
.text:000007FA                 mov     eax, [ebp+var_4]
.text:000007FD                 mov     [eax], dx
.text:00000800
.text:00000800 loc_800:                                ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)+17j
.text:00000800                 mov     ecx, [ebp+arg_0]
.text:00000803                 mov     edx, [ecx]
.text:00000805                 mov     eax, [ecx+4]
.text:00000808                 mov     ecx, [ebp+var_4]
.text:0000080B                 mov     [ecx+8], edx
.text:0000080E                 mov     [ecx+0Ch], eax
.text:00000811                 mov     eax, [ebp+var_4]
.text:00000814                 add     esp, 4
.text:00000817                 cmp     ebp, esp
.text:00000819                 call    __RTC_CheckEsp
.text:0000081E                 mov     esp, ebp
.text:00000820                 pop     ebp
.text:00000821                 retn    4
.text:00000821 ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z endp
.text:00000821
.text:00000824
.text:00000824 ; =============== S U B R O U T I N E =======================================
.text:00000824
.text:00000824 ; Attributes: bp-based frame
.text:00000824
.text:00000824 ; __int32 __stdcall NWindows::NCOM::PropVariant_Clear(VARIANTARG *pvarg, struct tagPROPVARIANT *)
.text:00000824                 public ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z
.text:00000824 ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z proc near
.text:00000824                                         ; CODE XREF: NWindows::NCOM::CPropVariant::Clear(void)+20p
.text:00000824                                         ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)+25p
.text:00000824
.text:00000824 var_4           = dword ptr -4
.text:00000824 pvarg           = dword ptr  8
.text:00000824
.text:00000824                 push    ebp
.text:00000825                 mov     ebp, esp
.text:00000827                 push    ecx
.text:00000828                 push    esi
.text:00000829                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000830                 mov     eax, [ebp+pvarg]
.text:00000833                 movzx   ecx, word ptr [eax]
.text:00000836                 mov     [ebp+var_4], ecx
.text:00000839                 cmp     [ebp+var_4], 40h ; '@' ; switch 65 cases
.text:0000083D                 ja      short $LN2      ; jumptable 00000849 default case
.text:0000083F                 mov     edx, [ebp+var_4]
.text:00000842                 movzx   eax, ds:$LN6[edx]
.text:00000849                 jmp     ds:$LN7[eax*4]  ; switch jump
.text:00000850 ; ---------------------------------------------------------------------------
.text:00000850
.text:00000850 $LN1:                                   ; CODE XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+25j
.text:00000850                                         ; DATA XREF: .text:$LN7o
.text:00000850                 xor     ecx, ecx        ; jumptable 00000849 cases 0,2-7,10,11,16-19,21-23,64
.text:00000852                 mov     edx, [ebp+pvarg]
.text:00000855                 mov     [edx], cx
.text:00000858                 xor     eax, eax
.text:0000085A                 mov     ecx, [ebp+pvarg]
.text:0000085D                 mov     [ecx+2], ax
.text:00000861                 xor     edx, edx
.text:00000863                 mov     eax, [ebp+pvarg]
.text:00000866                 mov     [eax+4], dx
.text:0000086A                 xor     ecx, ecx
.text:0000086C                 mov     edx, [ebp+pvarg]
.text:0000086F                 mov     [edx+6], cx
.text:00000873                 mov     eax, [ebp+pvarg]
.text:00000876                 mov     dword ptr [eax+8], 0
.text:0000087D                 mov     dword ptr [eax+0Ch], 0
.text:00000884                 xor     eax, eax
.text:00000886                 jmp     short loc_89B
.text:00000888 ; ---------------------------------------------------------------------------
.text:00000888
.text:00000888 $LN2:                                   ; CODE XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+19j
.text:00000888                                         ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+25j
.text:00000888                                         ; DATA XREF: ...
.text:00000888                 mov     esi, esp        ; jumptable 00000849 default case
.text:0000088A                 mov     ecx, [ebp+pvarg]
.text:0000088D                 push    ecx             ; pvarg
.text:0000088E                 call    dword ptr ds:__imp__VariantClear@4 ; VariantClear(x)
.text:00000894                 cmp     esi, esp
.text:00000896                 call    __RTC_CheckEsp
.text:0000089B
.text:0000089B loc_89B:                                ; CODE XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+62j
.text:0000089B                 pop     esi
.text:0000089C                 add     esp, 4
.text:0000089F                 cmp     ebp, esp
.text:000008A1                 call    __RTC_CheckEsp
.text:000008A6                 mov     esp, ebp
.text:000008A8                 pop     ebp
.text:000008A9                 retn    4
.text:000008A9 ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z endp
.text:000008A9
.text:000008A9 ; ---------------------------------------------------------------------------
.text:000008AC $LN7            dd offset $LN1, offset $LN2
.text:000008AC                                         ; DATA XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+25r
.text:000008AC                                         ; jump table for switch statement
.text:000008B4 $LN6            db      0,     1,     0,     0
.text:000008B4                                         ; DATA XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+1Er
.text:000008B4                 db      0,     0,     0,     0 ; indirect table for switch statement
.text:000008B4                 db      1,     1,     0,     0
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      0,     0,     0,     0
.text:000008B4                 db      1,     0,     0,     0
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      1,     1,     1,     1
.text:000008B4                 db      0
.text:000008F5                 db 0Fh dup(0CCh)
.text:00000904
.text:00000904 ; =============== S U B R O U T I N E =======================================
.text:00000904
.text:00000904 ; Attributes: bp-based frame
.text:00000904
.text:00000904 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(struct tagPROPVARIANT *this)
.text:00000904                 public ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ
.text:00000904 ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ proc near
.text:00000904                                         ; CODE XREF: NWindows::NCOM::CPropVariant::Attach(tagPROPVARIANT *)+1Ap
.text:00000904                                         ; NWindows::NCOM::CPropVariant::InternalClear(void)+28p
.text:00000904
.text:00000904 pvarg           = dword ptr -4
.text:00000904
.text:00000904                 push    ebp
.text:00000905                 mov     ebp, esp
.text:00000907                 push    ecx             ; struct tagPROPVARIANT *
.text:00000908                 mov     [ebp+pvarg], 0CCCCCCCCh
.text:0000090F                 mov     [ebp+pvarg], ecx
.text:00000912                 mov     eax, [ebp+pvarg]
.text:00000915                 movzx   ecx, word ptr [eax]
.text:00000918                 test    ecx, ecx
.text:0000091A                 jnz     short loc_920
.text:0000091C                 xor     eax, eax
.text:0000091E                 jmp     short loc_929
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000920
.text:00000920 loc_920:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Clear(void)+16j
.text:00000920                 mov     edx, [ebp+pvarg]
.text:00000923                 push    edx             ; pvarg
.text:00000924                 call    ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)
.text:00000929
.text:00000929 loc_929:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Clear(void)+1Aj
.text:00000929                 add     esp, 4
.text:0000092C                 cmp     ebp, esp
.text:0000092E                 call    __RTC_CheckEsp
.text:00000933                 mov     esp, ebp
.text:00000935                 pop     ebp
.text:00000936                 retn
.text:00000936 ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ endp
.text:00000936
.text:00000936 ; ---------------------------------------------------------------------------
.text:00000937                 db 0Dh dup(0CCh)
.text:00000944
.text:00000944 ; =============== S U B R O U T I N E =======================================
.text:00000944
.text:00000944 ; Attributes: bp-based frame
.text:00000944
.text:00000944 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Copy(NWindows::NCOM::CPropVariant *this, const struct tagPROPVARIANT *)
.text:00000944                 public ?Copy@CPropVariant@NCOM@NWindows@@QAEJPBUtagPROPVARIANT@@@Z
.text:00000944 ?Copy@CPropVariant@NCOM@NWindows@@QAEJPBUtagPROPVARIANT@@@Z proc near
.text:00000944                                         ; CODE XREF: NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)+25p
.text:00000944
.text:00000944 var_8           = dword ptr -8
.text:00000944 pvarg           = dword ptr -4
.text:00000944 Src             = dword ptr  8
.text:00000944
.text:00000944                 push    ebp
.text:00000945                 mov     ebp, esp
.text:00000947                 sub     esp, 8
.text:0000094A                 push    esi
.text:0000094B                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000952                 mov     [ebp+pvarg], 0CCCCCCCCh
.text:00000959                 mov     [ebp+pvarg], ecx
.text:0000095C                 mov     esi, esp
.text:0000095E                 mov     eax, [ebp+pvarg]
.text:00000961                 push    eax             ; pvarg
.text:00000962                 call    dword ptr ds:__imp__VariantClear@4 ; VariantClear(x)
.text:00000968                 cmp     esi, esp
.text:0000096A                 call    __RTC_CheckEsp
.text:0000096F                 mov     ecx, [ebp+Src]
.text:00000972                 movzx   edx, word ptr [ecx]
.text:00000975                 mov     [ebp+var_8], edx
.text:00000978                 mov     eax, [ebp+var_8]
.text:0000097B                 sub     eax, 2
.text:0000097E                 mov     [ebp+var_8], eax
.text:00000981                 cmp     [ebp+var_8], 3Eh ; '>' ; switch 63 cases
.text:00000985                 ja      short $LN2_0    ; jumptable 00000991 default case
.text:00000987                 mov     ecx, [ebp+var_8]
.text:0000098A                 movzx   edx, ds:$LN6_0[ecx]
.text:00000991                 jmp     ds:$LN7_0[edx*4] ; switch jump
.text:00000998 ; ---------------------------------------------------------------------------
.text:00000998
.text:00000998 $LN1_0:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+4Dj
.text:00000998                                         ; DATA XREF: .text:$LN7_0o
.text:00000998                 mov     esi, esp        ; jumptable 00000991 cases 0-5,8,9,14-17,19-21,62
.text:0000099A                 push    10h             ; Size
.text:0000099C                 mov     eax, [ebp+Src]
.text:0000099F                 push    eax             ; Src
.text:000009A0                 mov     ecx, [ebp+pvarg]
.text:000009A3                 push    ecx             ; Dst
.text:000009A4                 call    dword ptr ds:__imp__memmove
.text:000009AA                 add     esp, 0Ch
.text:000009AD                 cmp     esi, esp
.text:000009AF                 call    __RTC_CheckEsp
.text:000009B4                 xor     eax, eax
.text:000009B6                 jmp     short loc_9CF
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B8
.text:000009B8 $LN2_0:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+41j
.text:000009B8                                         ; NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+4Dj
.text:000009B8                                         ; DATA XREF: ...
.text:000009B8                 mov     esi, esp        ; jumptable 00000991 default case
.text:000009BA                 mov     edx, [ebp+Src]
.text:000009BD                 push    edx             ; pvargSrc
.text:000009BE                 mov     eax, [ebp+pvarg]
.text:000009C1                 push    eax             ; pvargDest
.text:000009C2                 call    dword ptr ds:__imp__VariantCopy@8 ; VariantCopy(x,x)
.text:000009C8                 cmp     esi, esp
.text:000009CA                 call    __RTC_CheckEsp
.text:000009CF
.text:000009CF loc_9CF:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+72j
.text:000009CF                 pop     esi
.text:000009D0                 add     esp, 8
.text:000009D3                 cmp     ebp, esp
.text:000009D5                 call    __RTC_CheckEsp
.text:000009DA                 mov     esp, ebp
.text:000009DC                 pop     ebp
.text:000009DD                 retn    4
.text:000009DD ?Copy@CPropVariant@NCOM@NWindows@@QAEJPBUtagPROPVARIANT@@@Z endp
.text:000009DD
.text:000009DD ; ---------------------------------------------------------------------------
.text:000009E0 $LN7_0          dd offset $LN1_0, offset $LN2_0
.text:000009E0                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+4Dr
.text:000009E0                                         ; jump table for switch statement
.text:000009E8 $LN6_0          db      0,     0,     0,     0
.text:000009E8                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+46r
.text:000009E8                 db      0,     0,     1,     1 ; indirect table for switch statement
.text:000009E8                 db      0,     0,     1,     1
.text:000009E8                 db      1,     1,     0,     0
.text:000009E8                 db      0,     0,     1,     0
.text:000009E8                 db      0,     0,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     1,     1
.text:000009E8                 db      1,     1,     0
.text:00000A27                 db 0Dh dup(0CCh)
.text:00000A34
.text:00000A34 ; =============== S U B R O U T I N E =======================================
.text:00000A34
.text:00000A34 ; Attributes: bp-based frame
.text:00000A34
.text:00000A34 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Attach(NWindows::NCOM::CPropVariant *this, struct tagPROPVARIANT *)
.text:00000A34                 public ?Attach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z
.text:00000A34 ?Attach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z proc near
.text:00000A34
.text:00000A34 var_8           = dword ptr -8
.text:00000A34 Dst             = dword ptr -4
.text:00000A34 Src             = dword ptr  8
.text:00000A34
.text:00000A34                 push    ebp
.text:00000A35                 mov     ebp, esp
.text:00000A37                 sub     esp, 8
.text:00000A3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A41                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00000A48                 mov     [ebp+Dst], ecx
.text:00000A4B                 mov     ecx, [ebp+Dst]  ; this
.text:00000A4E                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00000A53                 mov     [ebp+var_8], eax
.text:00000A56                 cmp     [ebp+var_8], 0
.text:00000A5A                 jge     short loc_A61
.text:00000A5C                 mov     eax, [ebp+var_8]
.text:00000A5F                 jmp     short loc_A7D
.text:00000A61 ; ---------------------------------------------------------------------------
.text:00000A61
.text:00000A61 loc_A61:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Attach(tagPROPVARIANT *)+26j
.text:00000A61                 push    10h             ; Size
.text:00000A63                 mov     eax, [ebp+Src]
.text:00000A66                 push    eax             ; Src
.text:00000A67                 mov     ecx, [ebp+Dst]
.text:00000A6A                 push    ecx             ; Dst
.text:00000A6B                 call    _memcpy
.text:00000A70                 add     esp, 0Ch
.text:00000A73                 xor     edx, edx
.text:00000A75                 mov     eax, [ebp+Src]
.text:00000A78                 mov     [eax], dx
.text:00000A7B                 xor     eax, eax
.text:00000A7D
.text:00000A7D loc_A7D:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Attach(tagPROPVARIANT *)+2Bj
.text:00000A7D                 add     esp, 8
.text:00000A80                 cmp     ebp, esp
.text:00000A82                 call    __RTC_CheckEsp
.text:00000A87                 mov     esp, ebp
.text:00000A89                 pop     ebp
.text:00000A8A                 retn    4
.text:00000A8A ?Attach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z endp
.text:00000A8A
.text:00000A8A ; ---------------------------------------------------------------------------
.text:00000A8D                 db 7 dup(0CCh)
.text:00000A94
.text:00000A94 ; =============== S U B R O U T I N E =======================================
.text:00000A94
.text:00000A94 ; Attributes: bp-based frame
.text:00000A94
.text:00000A94 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *this, struct tagPROPVARIANT *)
.text:00000A94                 public ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z
.text:00000A94 ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z proc near
.text:00000A94
.text:00000A94 var_8           = dword ptr -8
.text:00000A94 Src             = dword ptr -4
.text:00000A94 Dst             = dword ptr  8
.text:00000A94
.text:00000A94                 push    ebp
.text:00000A95                 mov     ebp, esp
.text:00000A97                 sub     esp, 8
.text:00000A9A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AA1                 mov     [ebp+Src], 0CCCCCCCCh
.text:00000AA8                 mov     [ebp+Src], ecx
.text:00000AAB                 mov     eax, [ebp+Dst]
.text:00000AAE                 movzx   ecx, word ptr [eax]
.text:00000AB1                 test    ecx, ecx
.text:00000AB3                 jz      short loc_ACC
.text:00000AB5                 mov     edx, [ebp+Dst]
.text:00000AB8                 push    edx             ; pvarg
.text:00000AB9                 call    ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)
.text:00000ABE                 mov     [ebp+var_8], eax
.text:00000AC1                 cmp     [ebp+var_8], 0
.text:00000AC5                 jge     short loc_ACC
.text:00000AC7                 mov     eax, [ebp+var_8]
.text:00000ACA                 jmp     short loc_AE8
.text:00000ACC ; ---------------------------------------------------------------------------
.text:00000ACC
.text:00000ACC loc_ACC:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)+1Fj
.text:00000ACC                                         ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)+31j
.text:00000ACC                 push    10h             ; Size
.text:00000ACE                 mov     eax, [ebp+Src]
.text:00000AD1                 push    eax             ; Src
.text:00000AD2                 mov     ecx, [ebp+Dst]
.text:00000AD5                 push    ecx             ; Dst
.text:00000AD6                 call    _memcpy
.text:00000ADB                 add     esp, 0Ch
.text:00000ADE                 xor     edx, edx
.text:00000AE0                 mov     eax, [ebp+Src]
.text:00000AE3                 mov     [eax], dx
.text:00000AE6                 xor     eax, eax
.text:00000AE8
.text:00000AE8 loc_AE8:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)+36j
.text:00000AE8                 add     esp, 8
.text:00000AEB                 cmp     ebp, esp
.text:00000AED                 call    __RTC_CheckEsp
.text:00000AF2                 mov     esp, ebp
.text:00000AF4                 pop     ebp
.text:00000AF5                 retn    4
.text:00000AF5 ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z endp
.text:00000AF5
.text:00000AF5 ; ---------------------------------------------------------------------------
.text:00000AF8                 db 0Ch dup(0CCh)
.text:00000B04
.text:00000B04 ; =============== S U B R O U T I N E =======================================
.text:00000B04
.text:00000B04 ; Attributes: bp-based frame
.text:00000B04
.text:00000B04 ; __int32 __thiscall NWindows::NCOM::CPropVariant::InternalClear(NWindows::NCOM::CPropVariant *__hidden this)
.text:00000B04                 public ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ
.text:00000B04 ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ proc near
.text:00000B04                                         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+1Bp
.text:00000B04                                         ; NWindows::NCOM::CPropVariant::operator=(UString const &)+1Bp ...
.text:00000B04
.text:00000B04 var_8           = dword ptr -8
.text:00000B04 var_4           = dword ptr -4
.text:00000B04
.text:00000B04                 push    ebp
.text:00000B05                 mov     ebp, esp
.text:00000B07                 sub     esp, 8
.text:00000B0A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B18                 mov     [ebp+var_4], ecx
.text:00000B1B                 mov     eax, [ebp+var_4]
.text:00000B1E                 movzx   ecx, word ptr [eax]
.text:00000B21                 test    ecx, ecx
.text:00000B23                 jnz     short loc_B29
.text:00000B25                 xor     eax, eax
.text:00000B27                 jmp     short loc_B51
.text:00000B29 ; ---------------------------------------------------------------------------
.text:00000B29
.text:00000B29 loc_B29:                                ; CODE XREF: NWindows::NCOM::CPropVariant::InternalClear(void)+1Fj
.text:00000B29                 mov     ecx, [ebp+var_4] ; this
.text:00000B2C                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00000B31                 mov     [ebp+var_8], eax
.text:00000B34                 cmp     [ebp+var_8], 0
.text:00000B38                 jge     short loc_B4E
.text:00000B3A                 mov     edx, 0Ah
.text:00000B3F                 mov     eax, [ebp+var_4]
.text:00000B42                 mov     [eax], dx
.text:00000B45                 mov     ecx, [ebp+var_4]
.text:00000B48                 mov     edx, [ebp+var_8]
.text:00000B4B                 mov     [ecx+8], edx
.text:00000B4E
.text:00000B4E loc_B4E:                                ; CODE XREF: NWindows::NCOM::CPropVariant::InternalClear(void)+34j
.text:00000B4E                 mov     eax, [ebp+var_8]
.text:00000B51
.text:00000B51 loc_B51:                                ; CODE XREF: NWindows::NCOM::CPropVariant::InternalClear(void)+23j
.text:00000B51                 add     esp, 8
.text:00000B54                 cmp     ebp, esp
.text:00000B56                 call    __RTC_CheckEsp
.text:00000B5B                 mov     esp, ebp
.text:00000B5D                 pop     ebp
.text:00000B5E                 retn
.text:00000B5E ?InternalClear@CPropVariant@NCOM@NWindows@@QAEJXZ endp
.text:00000B5E
.text:00000B5E ; ---------------------------------------------------------------------------
.text:00000B5F                 db 5 dup(0CCh)
.text:00000B64
.text:00000B64 ; =============== S U B R O U T I N E =======================================
.text:00000B64
.text:00000B64 ; Attributes: bp-based frame
.text:00000B64
.text:00000B64 ; void __thiscall NWindows::NCOM::CPropVariant::InternalCopy(NWindows::NCOM::CPropVariant *this, const struct tagPROPVARIANT *)
.text:00000B64                 public ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z
.text:00000B64 ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z proc near
.text:00000B64                                         ; CODE XREF: NWindows::NCOM::CPropVariant::CPropVariant(tagPROPVARIANT const &)+1Dp
.text:00000B64                                         ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)+1Dp ...
.text:00000B64
.text:00000B64 var_C           = dword ptr -0Ch
.text:00000B64 var_8           = dword ptr -8
.text:00000B64 var_4           = dword ptr -4
.text:00000B64 arg_0           = dword ptr  8
.text:00000B64
.text:00000B64                 push    ebp
.text:00000B65                 mov     ebp, esp
.text:00000B67                 sub     esp, 0Ch
.text:00000B6A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B71                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B7F                 mov     [ebp+var_4], ecx
.text:00000B82                 mov     eax, [ebp+arg_0]
.text:00000B85                 push    eax             ; struct tagPROPVARIANT *
.text:00000B86                 mov     ecx, [ebp+var_4] ; this
.text:00000B89                 call    ?Copy@CPropVariant@NCOM@NWindows@@QAEJPBUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)
.text:00000B8E                 mov     [ebp+var_8], eax
.text:00000B91                 cmp     [ebp+var_8], 0
.text:00000B95                 jge     short loc_BCB
.text:00000B97                 cmp     [ebp+var_8], 8007000Eh
.text:00000B9E                 jnz     short loc_BB7
.text:00000BA0                 mov     ecx, ds:_kMemException
.text:00000BA6                 mov     [ebp+var_C], ecx
.text:00000BA9                 push    offset __TI2CPAD
.text:00000BAE                 lea     edx, [ebp+var_C]
.text:00000BB1                 push    edx
.text:00000BB2                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000BB7 ; ---------------------------------------------------------------------------
.text:00000BB7
.text:00000BB7 loc_BB7:                                ; CODE XREF: NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)+3Aj
.text:00000BB7                 mov     eax, 0Ah
.text:00000BBC                 mov     ecx, [ebp+var_4]
.text:00000BBF                 mov     [ecx], ax
.text:00000BC2                 mov     edx, [ebp+var_4]
.text:00000BC5                 mov     eax, [ebp+var_8]
.text:00000BC8                 mov     [edx+8], eax
.text:00000BCB
.text:00000BCB loc_BCB:                                ; CODE XREF: NWindows::NCOM::CPropVariant::InternalCopy(tagPROPVARIANT const *)+31j
.text:00000BCB                 add     esp, 0Ch
.text:00000BCE                 cmp     ebp, esp
.text:00000BD0                 call    __RTC_CheckEsp
.text:00000BD5                 mov     esp, ebp
.text:00000BD7                 pop     ebp
.text:00000BD8                 retn    4
.text:00000BD8 ?InternalCopy@CPropVariant@NCOM@NWindows@@QAEXPBUtagPROPVARIANT@@@Z endp
.text:00000BD8
.text:00000BD8 ; ---------------------------------------------------------------------------
.text:00000BDB                 db 9 dup(0CCh)
.text:00000BE4
.text:00000BE4 ; =============== S U B R O U T I N E =======================================
.text:00000BE4
.text:00000BE4 ; Attributes: bp-based frame
.text:00000BE4
.text:00000BE4 ; int __thiscall NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant *this, const struct NWindows::NCOM::CPropVariant *)
.text:00000BE4                 public ?Compare@CPropVariant@NCOM@NWindows@@QAEHABV123@@Z
.text:00000BE4 ?Compare@CPropVariant@NCOM@NWindows@@QAEHABV123@@Z proc near
.text:00000BE4
.text:00000BE4 var_8           = dword ptr -8
.text:00000BE4 var_4           = dword ptr -4
.text:00000BE4 arg_0           = dword ptr  8
.text:00000BE4
.text:00000BE4                 push    ebp
.text:00000BE5                 mov     ebp, esp
.text:00000BE7                 sub     esp, 8
.text:00000BEA                 push    esi
.text:00000BEB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BF2                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BF9                 mov     [ebp+var_4], ecx
.text:00000BFC                 mov     eax, [ebp+var_4]
.text:00000BFF                 movzx   ecx, word ptr [eax]
.text:00000C02                 mov     edx, [ebp+arg_0]
.text:00000C05                 movzx   eax, word ptr [edx]
.text:00000C08                 cmp     ecx, eax
.text:00000C0A                 jz      short loc_C24
.text:00000C0C                 mov     ecx, [ebp+arg_0]
.text:00000C0F                 movzx   edx, word ptr [ecx]
.text:00000C12                 push    edx
.text:00000C13                 mov     eax, [ebp+var_4]
.text:00000C16                 movzx   ecx, word ptr [eax]
.text:00000C19                 push    ecx
.text:00000C1A                 call    ??$MyCompare@G@@YGHGG@Z ; MyCompare<ushort>(ushort,ushort)
.text:00000C1F                 jmp     loc_D42
.text:00000C24 ; ---------------------------------------------------------------------------
.text:00000C24
.text:00000C24 loc_C24:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+26j
.text:00000C24                 mov     edx, [ebp+var_4]
.text:00000C27                 movzx   eax, word ptr [edx]
.text:00000C2A                 mov     [ebp+var_8], eax
.text:00000C2D                 cmp     [ebp+var_8], 40h ; '@' ; switch 65 cases
.text:00000C31                 ja      $LN1_1          ; jumptable 00000C41 default case
.text:00000C37                 mov     ecx, [ebp+var_8]
.text:00000C3A                 movzx   edx, ds:$LN18[ecx]
.text:00000C41                 jmp     ds:$LN19[edx*4] ; switch jump
.text:00000C48 ; ---------------------------------------------------------------------------
.text:00000C48
.text:00000C48 $LN12:                                  ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000C48                                         ; DATA XREF: .text:$LN19o
.text:00000C48                 xor     eax, eax        ; jumptable 00000C41 case 0
.text:00000C4A                 jmp     loc_D42
.text:00000C4F ; ---------------------------------------------------------------------------
.text:00000C4F
.text:00000C4F $LN11:                                  ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000C4F                                         ; DATA XREF: .text:$LN19o
.text:00000C4F                 mov     eax, [ebp+arg_0] ; jumptable 00000C41 case 17
.text:00000C52                 movzx   ecx, byte ptr [eax+8]
.text:00000C56                 push    ecx
.text:00000C57                 mov     edx, [ebp+var_4]
.text:00000C5A                 movzx   eax, byte ptr [edx+8]
.text:00000C5E                 push    eax
.text:00000C5F                 call    ??$MyCompare@E@@YGHEE@Z ; MyCompare<uchar>(uchar,uchar)
.text:00000C64                 jmp     loc_D42
.text:00000C69 ; ---------------------------------------------------------------------------
.text:00000C69
.text:00000C69 $LN10:                                  ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000C69                                         ; DATA XREF: .text:$LN19o
.text:00000C69                 mov     ecx, [ebp+arg_0] ; jumptable 00000C41 case 2
.text:00000C6C                 movzx   edx, word ptr [ecx+8]
.text:00000C70                 push    edx
.text:00000C71                 mov     eax, [ebp+var_4]
.text:00000C74                 movzx   ecx, word ptr [eax+8]
.text:00000C78                 push    ecx
.text:00000C79                 call    ??$MyCompare@F@@YGHFF@Z ; MyCompare<short>(short,short)
.text:00000C7E                 jmp     loc_D42
.text:00000C83 ; ---------------------------------------------------------------------------
.text:00000C83
.text:00000C83 $LN9:                                   ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000C83                                         ; DATA XREF: .text:$LN19o
.text:00000C83                 mov     edx, [ebp+arg_0] ; jumptable 00000C41 case 18
.text:00000C86                 movzx   eax, word ptr [edx+8]
.text:00000C8A                 push    eax
.text:00000C8B                 mov     ecx, [ebp+var_4]
.text:00000C8E                 movzx   edx, word ptr [ecx+8]
.text:00000C92                 push    edx
.text:00000C93                 call    ??$MyCompare@G@@YGHGG@Z ; MyCompare<ushort>(ushort,ushort)
.text:00000C98                 jmp     loc_D42
.text:00000C9D ; ---------------------------------------------------------------------------
.text:00000C9D
.text:00000C9D $LN8:                                   ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000C9D                                         ; DATA XREF: .text:$LN19o
.text:00000C9D                 mov     eax, [ebp+arg_0] ; jumptable 00000C41 case 3
.text:00000CA0                 mov     ecx, [eax+8]
.text:00000CA3                 push    ecx
.text:00000CA4                 mov     edx, [ebp+var_4]
.text:00000CA7                 mov     eax, [edx+8]
.text:00000CAA                 push    eax
.text:00000CAB                 call    ??$MyCompare@J@@YGHJJ@Z ; MyCompare<long>(long,long)
.text:00000CB0                 jmp     loc_D42
.text:00000CB5 ; ---------------------------------------------------------------------------
.text:00000CB5
.text:00000CB5 $LN7_1:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000CB5                                         ; DATA XREF: .text:$LN19o
.text:00000CB5                 mov     ecx, [ebp+arg_0] ; jumptable 00000C41 case 19
.text:00000CB8                 mov     edx, [ecx+8]
.text:00000CBB                 push    edx
.text:00000CBC                 mov     eax, [ebp+var_4]
.text:00000CBF                 mov     ecx, [eax+8]
.text:00000CC2                 push    ecx
.text:00000CC3                 call    ??$MyCompare@K@@YGHKK@Z ; MyCompare<ulong>(ulong,ulong)
.text:00000CC8                 jmp     short loc_D42
.text:00000CCA ; ---------------------------------------------------------------------------
.text:00000CCA
.text:00000CCA $LN6_1:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000CCA                                         ; DATA XREF: .text:$LN19o
.text:00000CCA                 mov     edx, [ebp+arg_0] ; jumptable 00000C41 case 20
.text:00000CCD                 mov     eax, [edx+0Ch]
.text:00000CD0                 push    eax
.text:00000CD1                 mov     ecx, [edx+8]
.text:00000CD4                 push    ecx
.text:00000CD5                 mov     edx, [ebp+var_4]
.text:00000CD8                 mov     eax, [edx+0Ch]
.text:00000CDB                 push    eax
.text:00000CDC                 mov     ecx, [edx+8]
.text:00000CDF                 push    ecx
.text:00000CE0                 call    ??$MyCompare@_J@@YGH_J0@Z ; MyCompare<__int64>(__int64,__int64)
.text:00000CE5                 jmp     short loc_D42
.text:00000CE7 ; ---------------------------------------------------------------------------
.text:00000CE7
.text:00000CE7 $LN5:                                   ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000CE7                                         ; DATA XREF: .text:$LN19o
.text:00000CE7                 mov     edx, [ebp+arg_0] ; jumptable 00000C41 case 21
.text:00000CEA                 mov     eax, [edx+0Ch]
.text:00000CED                 push    eax
.text:00000CEE                 mov     ecx, [edx+8]
.text:00000CF1                 push    ecx
.text:00000CF2                 mov     edx, [ebp+var_4]
.text:00000CF5                 mov     eax, [edx+0Ch]
.text:00000CF8                 push    eax
.text:00000CF9                 mov     ecx, [edx+8]
.text:00000CFC                 push    ecx
.text:00000CFD                 call    ??$MyCompare@_K@@YGH_K0@Z ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)
.text:00000D02                 jmp     short loc_D42
.text:00000D04 ; ---------------------------------------------------------------------------
.text:00000D04
.text:00000D04 $LN4:                                   ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000D04                                         ; DATA XREF: .text:$LN19o
.text:00000D04                 mov     edx, [ebp+arg_0] ; jumptable 00000C41 case 11
.text:00000D07                 movzx   eax, word ptr [edx+8]
.text:00000D0B                 push    eax
.text:00000D0C                 mov     ecx, [ebp+var_4]
.text:00000D0F                 movzx   edx, word ptr [ecx+8]
.text:00000D13                 push    edx
.text:00000D14                 call    ??$MyCompare@F@@YGHFF@Z ; MyCompare<short>(short,short)
.text:00000D19                 neg     eax
.text:00000D1B                 jmp     short loc_D42
.text:00000D1D ; ---------------------------------------------------------------------------
.text:00000D1D
.text:00000D1D $LN3:                                   ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000D1D                                         ; DATA XREF: .text:$LN19o
.text:00000D1D                 mov     eax, [ebp+arg_0] ; jumptable 00000C41 case 64
.text:00000D20                 add     eax, 8
.text:00000D23                 mov     esi, esp
.text:00000D25                 push    eax             ; lpFileTime2
.text:00000D26                 mov     ecx, [ebp+var_4]
.text:00000D29                 add     ecx, 8
.text:00000D2C                 push    ecx             ; lpFileTime1
.text:00000D2D                 call    dword ptr ds:__imp__CompareFileTime@8 ; CompareFileTime(x,x)
.text:00000D33                 cmp     esi, esp
.text:00000D35                 call    __RTC_CheckEsp
.text:00000D3A                 jmp     short loc_D42
.text:00000D3C ; ---------------------------------------------------------------------------
.text:00000D3C
.text:00000D3C $LN2_1:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000D3C                                         ; DATA XREF: .text:$LN19o
.text:00000D3C                 xor     eax, eax        ; jumptable 00000C41 case 8
.text:00000D3E                 jmp     short loc_D42
.text:00000D40 ; ---------------------------------------------------------------------------
.text:00000D40
.text:00000D40 $LN1_1:                                 ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+4Dj
.text:00000D40                                         ; NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dj
.text:00000D40                                         ; DATA XREF: ...
.text:00000D40                 xor     eax, eax        ; jumptable 00000C41 default case
.text:00000D42
.text:00000D42 loc_D42:                                ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+3Bj
.text:00000D42                                         ; NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+66j ...
.text:00000D42                 pop     esi
.text:00000D43                 add     esp, 8
.text:00000D46                 cmp     ebp, esp
.text:00000D48                 call    __RTC_CheckEsp
.text:00000D4D                 mov     esp, ebp
.text:00000D4F                 pop     ebp
.text:00000D50                 retn    4
.text:00000D50 ?Compare@CPropVariant@NCOM@NWindows@@QAEHABV123@@Z endp
.text:00000D50
.text:00000D50 ; ---------------------------------------------------------------------------
.text:00000D53                 align 4
.text:00000D54 $LN19           dd offset $LN12, offset $LN10, offset $LN8, offset $LN2_1
.text:00000D54                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+5Dr
.text:00000D54                 dd offset $LN4, offset $LN11, offset $LN9, offset $LN7_1 ; jump table for switch statement
.text:00000D54                 dd offset $LN6_1, offset $LN5, offset $LN3, offset $LN1_1
.text:00000D84 $LN18           db      0,   0Bh,     1,     2
.text:00000D84                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+56r
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text:00000D84                 db      3,   0Bh,   0Bh,     4
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,     5,     6,     7
.text:00000D84                 db      8,     9,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00000D84                 db    0Ah
.text:00000DC5                 align 4
.text:00000DC5 _text           ends
.text:00000DC5
.rtc$TMZ:00000DC8 ; ===========================================================================
.rtc$TMZ:00000DC8
.rtc$TMZ:00000DC8 ; Segment type: Pure data
.rtc$TMZ:00000DC8 ; Segment permissions: Read
.rtc$TMZ:00000DC8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000DC8                 assume cs:_rtc$TMZ
.rtc$TMZ:00000DC8                 ;org 0DC8h
.rtc$TMZ:00000DC8 ; COMDAT (pick any)
.rtc$TMZ:00000DC8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000DC8 _rtc$TMZ        ends
.rtc$TMZ:00000DC8
.rtc$IMZ:00000DCC ; ===========================================================================
.rtc$IMZ:00000DCC
.rtc$IMZ:00000DCC ; Segment type: Pure data
.rtc$IMZ:00000DCC ; Segment permissions: Read
.rtc$IMZ:00000DCC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000DCC                 assume cs:_rtc$IMZ
.rtc$IMZ:00000DCC                 ;org 0DCCh
.rtc$IMZ:00000DCC ; COMDAT (pick any)
.rtc$IMZ:00000DCC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000DCC _rtc$IMZ        ends
.rtc$IMZ:00000DCC
.xdata$x:00000DD0 ; ===========================================================================
.xdata$x:00000DD0
.xdata$x:00000DD0 ; Segment type: Pure data
.xdata$x:00000DD0 ; Segment permissions: Read
.xdata$x:00000DD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000DD0                 assume cs:_xdata$x
.xdata$x:00000DD0                 ;org 0DD0h
.xdata$x:00000DD0 ; COMDAT (pick any)
.xdata$x:00000DD0                 public __TI2CPAD
.xdata$x:00000DD0 __TI2CPAD       db    1                 ; DATA XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+65o
.xdata$x:00000DD0                                         ; NWindows::NCOM::CPropVariant::operator=(UString const &)+6Co ...
.xdata$x:00000DD1                 db    0
.xdata$x:00000DD2                 db    0
.xdata$x:00000DD3                 db    0
.xdata$x:00000DD4                 db    0
.xdata$x:00000DD5                 db    0
.xdata$x:00000DD6                 db    0
.xdata$x:00000DD7                 db    0
.xdata$x:00000DD8                 db    0
.xdata$x:00000DD9                 db    0
.xdata$x:00000DDA                 db    0
.xdata$x:00000DDB                 db    0
.xdata$x:00000DDC                 dd offset __CTA2PAD
.xdata$x:00000DDC _xdata$x        ends
.xdata$x:00000DDC
.xdata$x:00000DE0 ; ===========================================================================
.xdata$x:00000DE0
.xdata$x:00000DE0 ; Segment type: Pure data
.xdata$x:00000DE0 ; Segment permissions: Read
.xdata$x:00000DE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000DE0                 assume cs:_xdata$x
.xdata$x:00000DE0                 ;org 0DE0h
.xdata$x:00000DE0 ; COMDAT (pick any)
.xdata$x:00000DE0                 public __CTA2PAD
.xdata$x:00000DE0 __CTA2PAD       db    2                 ; DATA XREF: .xdata$x:00000DDCo
.xdata$x:00000DE1                 db    0
.xdata$x:00000DE2                 db    0
.xdata$x:00000DE3                 db    0
.xdata$x:00000DE4                 dd offset __CT??_R0PAD@84
.xdata$x:00000DE8                 dd offset __CT??_R0PAX@84
.xdata$x:00000DE8 _xdata$x        ends
.xdata$x:00000DE8
.xdata$x:00000DEC ; ===========================================================================
.xdata$x:00000DEC
.xdata$x:00000DEC ; Segment type: Pure data
.xdata$x:00000DEC ; Segment permissions: Read
.xdata$x:00000DEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000DEC                 assume cs:_xdata$x
.xdata$x:00000DEC                 ;org 0DECh
.xdata$x:00000DEC ; COMDAT (pick any)
.xdata$x:00000DEC                 public __CT??_R0PAD@84
.xdata$x:00000DEC __CT??_R0PAD@84 db    1                 ; DATA XREF: .xdata$x:00000DE4o
.xdata$x:00000DED                 db    0
.xdata$x:00000DEE                 db    0
.xdata$x:00000DEF                 db    0
.xdata$x:00000DF0                 dd offset ??_R0PAD@8    ; char * `RTTI Type Descriptor'
.xdata$x:00000DF4                 align 8
.xdata$x:00000DF8                 db 0FFh
.xdata$x:00000DF9                 db 0FFh
.xdata$x:00000DFA                 db 0FFh
.xdata$x:00000DFB                 db 0FFh
.xdata$x:00000DFC                 db    0
.xdata$x:00000DFD                 db    0
.xdata$x:00000DFE                 db    0
.xdata$x:00000DFF                 db    0
.xdata$x:00000E00                 db    4
.xdata$x:00000E01                 db    0
.xdata$x:00000E02                 db    0
.xdata$x:00000E03                 db    0
.xdata$x:00000E04                 db    0
.xdata$x:00000E05                 db    0
.xdata$x:00000E06                 db    0
.xdata$x:00000E07                 db    0
.xdata$x:00000E07 _xdata$x        ends
.xdata$x:00000E07
.data:00000E08 ; ===========================================================================
.data:00000E08
.data:00000E08 ; Segment type: Pure data
.data:00000E08 ; Segment permissions: Read/Write
.data:00000E08 _data           segment dword public 'DATA' use32
.data:00000E08                 assume cs:_data
.data:00000E08                 ;org 0E08h
.data:00000E08 ; COMDAT (pick any)
.data:00000E08                 public ??_R0PAD@8
.data:00000E08 ; char * `RTTI Type Descriptor'
.data:00000E08 ??_R0PAD@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000DF0o
.data:00000E08                                         ; const type_info::`vftable'
.data:00000E0C                 align 10h
.data:00000E10 a_pad           db '.PAD',0
.data:00000E15                 align 4
.data:00000E15 _data           ends
.data:00000E15
.xdata$x:00000E18 ; ===========================================================================
.xdata$x:00000E18
.xdata$x:00000E18 ; Segment type: Pure data
.xdata$x:00000E18 ; Segment permissions: Read
.xdata$x:00000E18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000E18                 assume cs:_xdata$x
.xdata$x:00000E18                 ;org 0E18h
.xdata$x:00000E18 ; COMDAT (pick any)
.xdata$x:00000E18                 public __CT??_R0PAX@84
.xdata$x:00000E18 __CT??_R0PAX@84 db    1                 ; DATA XREF: .xdata$x:00000DE8o
.xdata$x:00000E19                 db    0
.xdata$x:00000E1A                 db    0
.xdata$x:00000E1B                 db    0
.xdata$x:00000E1C                 dd offset ??_R0PAX@8    ; void * `RTTI Type Descriptor'
.xdata$x:00000E20                 db    0
.xdata$x:00000E21                 db    0
.xdata$x:00000E22                 db    0
.xdata$x:00000E23                 db    0
.xdata$x:00000E24                 db 0FFh
.xdata$x:00000E25                 db 0FFh
.xdata$x:00000E26                 db 0FFh
.xdata$x:00000E27                 db 0FFh
.xdata$x:00000E28                 db    0
.xdata$x:00000E29                 db    0
.xdata$x:00000E2A                 db    0
.xdata$x:00000E2B                 db    0
.xdata$x:00000E2C                 db    4
.xdata$x:00000E2D                 db    0
.xdata$x:00000E2E                 db    0
.xdata$x:00000E2F                 db    0
.xdata$x:00000E30                 db    0
.xdata$x:00000E31                 db    0
.xdata$x:00000E32                 db    0
.xdata$x:00000E33                 db    0
.xdata$x:00000E33 _xdata$x        ends
.xdata$x:00000E33
.data:00000E34 ; ===========================================================================
.data:00000E34
.data:00000E34 ; Segment type: Pure data
.data:00000E34 ; Segment permissions: Read/Write
.data:00000E34 _data           segment dword public 'DATA' use32
.data:00000E34                 assume cs:_data
.data:00000E34                 ;org 0E34h
.data:00000E34 ; COMDAT (pick any)
.data:00000E34                 public ??_R0PAX@8
.data:00000E34 ; void * `RTTI Type Descriptor'
.data:00000E34 ??_R0PAX@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000E1Co
.data:00000E34                                         ; const type_info::`vftable'
.data:00000E38                 db    0
.data:00000E39                 db    0
.data:00000E3A                 db    0
.data:00000E3B                 db    0
.data:00000E3C                 db  2Eh ; .
.data:00000E3D                 db  50h ; P
.data:00000E3E                 db  41h ; A
.data:00000E3F                 db  58h ; X
.data:00000E40                 db    0
.data:00000E41                 align 4
.data:00000E41 _data           ends
.data:00000E41
.text:00000E44 ; ===========================================================================
.text:00000E44
.text:00000E44 ; Segment type: Pure code
.text:00000E44 ; Segment permissions: Read/Execute
.text:00000E44 _text           segment para public 'CODE' use32
.text:00000E44                 assume cs:_text
.text:00000E44                 ;org 0E44h
.text:00000E44 ; COMDAT (pick any)
.text:00000E44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E44
.text:00000E44 ; =============== S U B R O U T I N E =======================================
.text:00000E44
.text:00000E44 ; Attributes: bp-based frame
.text:00000E44
.text:00000E44 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00000E44                 public ?Len@UString@@QBEIXZ
.text:00000E44 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString const &)+37p
.text:00000E44
.text:00000E44 var_4           = dword ptr -4
.text:00000E44
.text:00000E44                 push    ebp
.text:00000E45                 mov     ebp, esp
.text:00000E47                 push    ecx
.text:00000E48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E4F                 mov     [ebp+var_4], ecx
.text:00000E52                 mov     eax, [ebp+var_4]
.text:00000E55                 mov     eax, [eax+4]
.text:00000E58                 mov     esp, ebp
.text:00000E5A                 pop     ebp
.text:00000E5B                 retn
.text:00000E5B ?Len@UString@@QBEIXZ endp
.text:00000E5B
.text:00000E5B _text           ends
.text:00000E5B
.text:00000E5C ; ===========================================================================
.text:00000E5C
.text:00000E5C ; Segment type: Pure code
.text:00000E5C ; Segment permissions: Read/Execute
.text:00000E5C _text           segment para public 'CODE' use32
.text:00000E5C                 assume cs:_text
.text:00000E5C                 ;org 0E5Ch
.text:00000E5C ; COMDAT (pick any)
.text:00000E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E5C
.text:00000E5C ; =============== S U B R O U T I N E =======================================
.text:00000E5C
.text:00000E5C ; Attributes: bp-based frame
.text:00000E5C
.text:00000E5C ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000E5C                 public ??BUString@@QBEPB_WXZ
.text:00000E5C ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString const &)+42p
.text:00000E5C
.text:00000E5C var_4           = dword ptr -4
.text:00000E5C
.text:00000E5C                 push    ebp
.text:00000E5D                 mov     ebp, esp
.text:00000E5F                 push    ecx
.text:00000E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E67                 mov     [ebp+var_4], ecx
.text:00000E6A                 mov     eax, [ebp+var_4]
.text:00000E6D                 mov     eax, [eax]
.text:00000E6F                 mov     esp, ebp
.text:00000E71                 pop     ebp
.text:00000E72                 retn
.text:00000E72 ??BUString@@QBEPB_WXZ endp
.text:00000E72
.text:00000E72 ; ---------------------------------------------------------------------------
.text:00000E73                 align 4
.text:00000E73 _text           ends
.text:00000E73
.text:00000E74 ; ===========================================================================
.text:00000E74
.text:00000E74 ; Segment type: Pure code
.text:00000E74 ; Segment permissions: Read/Execute
.text:00000E74 _text           segment para public 'CODE' use32
.text:00000E74                 assume cs:_text
.text:00000E74                 ;org 0E74h
.text:00000E74 ; COMDAT (pick any)
.text:00000E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E74
.text:00000E74 ; =============== S U B R O U T I N E =======================================
.text:00000E74
.text:00000E74 ; Attributes: bp-based frame
.text:00000E74
.text:00000E74 ; unsigned int __thiscall UString2::Len(UString2 *__hidden this)
.text:00000E74                 public ?Len@UString2@@QBEIXZ
.text:00000E74 ?Len@UString2@@QBEIXZ proc near         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString2 const &)+37p
.text:00000E74
.text:00000E74 var_4           = dword ptr -4
.text:00000E74
.text:00000E74                 push    ebp
.text:00000E75                 mov     ebp, esp
.text:00000E77                 push    ecx
.text:00000E78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E7F                 mov     [ebp+var_4], ecx
.text:00000E82                 mov     eax, [ebp+var_4]
.text:00000E85                 mov     eax, [eax+4]
.text:00000E88                 mov     esp, ebp
.text:00000E8A                 pop     ebp
.text:00000E8B                 retn
.text:00000E8B ?Len@UString2@@QBEIXZ endp
.text:00000E8B
.text:00000E8B _text           ends
.text:00000E8B
.text:00000E8C ; ===========================================================================
.text:00000E8C
.text:00000E8C ; Segment type: Pure code
.text:00000E8C ; Segment permissions: Read/Execute
.text:00000E8C _text           segment para public 'CODE' use32
.text:00000E8C                 assume cs:_text
.text:00000E8C                 ;org 0E8Ch
.text:00000E8C ; COMDAT (pick any)
.text:00000E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E8C
.text:00000E8C ; =============== S U B R O U T I N E =======================================
.text:00000E8C
.text:00000E8C ; Attributes: bp-based frame
.text:00000E8C
.text:00000E8C ; const wchar_t *__thiscall UString2::GetRawPtr(UString2 *__hidden this)
.text:00000E8C                 public ?GetRawPtr@UString2@@QBEPB_WXZ
.text:00000E8C ?GetRawPtr@UString2@@QBEPB_WXZ proc near
.text:00000E8C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(UString2 const &)+42p
.text:00000E8C
.text:00000E8C var_4           = dword ptr -4
.text:00000E8C
.text:00000E8C                 push    ebp
.text:00000E8D                 mov     ebp, esp
.text:00000E8F                 push    ecx
.text:00000E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E97                 mov     [ebp+var_4], ecx
.text:00000E9A                 mov     eax, [ebp+var_4]
.text:00000E9D                 mov     eax, [eax]
.text:00000E9F                 mov     esp, ebp
.text:00000EA1                 pop     ebp
.text:00000EA2                 retn
.text:00000EA2 ?GetRawPtr@UString2@@QBEPB_WXZ endp
.text:00000EA2
.text:00000EA2 ; ---------------------------------------------------------------------------
.text:00000EA3                 align 4
.text:00000EA3 _text           ends
.text:00000EA3
.text:00000EA4 ; ===========================================================================
.text:00000EA4
.text:00000EA4 ; Segment type: Pure code
.text:00000EA4 ; Segment permissions: Read/Execute
.text:00000EA4 _text           segment para public 'CODE' use32
.text:00000EA4                 assume cs:_text
.text:00000EA4                 ;org 0EA4h
.text:00000EA4 ; COMDAT (pick any)
.text:00000EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EA4
.text:00000EA4 ; =============== S U B R O U T I N E =======================================
.text:00000EA4
.text:00000EA4 ; Attributes: bp-based frame
.text:00000EA4
.text:00000EA4 ; int __stdcall MyCompare<unsigned short>(unsigned short, unsigned short)
.text:00000EA4                 public ??$MyCompare@G@@YGHGG@Z
.text:00000EA4 ??$MyCompare@G@@YGHGG@Z proc near       ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+36p
.text:00000EA4                                         ; NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+AFp
.text:00000EA4
.text:00000EA4 var_4           = dword ptr -4
.text:00000EA4 arg_0           = word ptr  8
.text:00000EA4 arg_4           = word ptr  0Ch
.text:00000EA4
.text:00000EA4                 push    ebp
.text:00000EA5                 mov     ebp, esp
.text:00000EA7                 push    ecx
.text:00000EA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EAF                 movzx   eax, [ebp+arg_0]
.text:00000EB3                 movzx   ecx, [ebp+arg_4]
.text:00000EB7                 cmp     eax, ecx
.text:00000EB9                 jge     short loc_EC4
.text:00000EBB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EC2                 jmp     short loc_ED6
.text:00000EC4 ; ---------------------------------------------------------------------------
.text:00000EC4
.text:00000EC4 loc_EC4:                                ; CODE XREF: MyCompare<ushort>(ushort,ushort)+15j
.text:00000EC4                 movzx   edx, [ebp+arg_0]
.text:00000EC8                 movzx   eax, [ebp+arg_4]
.text:00000ECC                 xor     ecx, ecx
.text:00000ECE                 cmp     edx, eax
.text:00000ED0                 setnz   cl
.text:00000ED3                 mov     [ebp+var_4], ecx
.text:00000ED6
.text:00000ED6 loc_ED6:                                ; CODE XREF: MyCompare<ushort>(ushort,ushort)+1Ej
.text:00000ED6                 mov     eax, [ebp+var_4]
.text:00000ED9                 mov     esp, ebp
.text:00000EDB                 pop     ebp
.text:00000EDC                 retn    8
.text:00000EDC ??$MyCompare@G@@YGHGG@Z endp
.text:00000EDC
.text:00000EDC ; ---------------------------------------------------------------------------
.text:00000EDF                 align 10h
.text:00000EDF _text           ends
.text:00000EDF
.text:00000EE0 ; ===========================================================================
.text:00000EE0
.text:00000EE0 ; Segment type: Pure code
.text:00000EE0 ; Segment permissions: Read/Execute
.text:00000EE0 _text           segment para public 'CODE' use32
.text:00000EE0                 assume cs:_text
.text:00000EE0                 ;org 0EE0h
.text:00000EE0 ; COMDAT (pick any)
.text:00000EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EE0
.text:00000EE0 ; =============== S U B R O U T I N E =======================================
.text:00000EE0
.text:00000EE0 ; Attributes: bp-based frame
.text:00000EE0
.text:00000EE0 ; int __stdcall MyCompare<unsigned char>(unsigned char, unsigned char)
.text:00000EE0                 public ??$MyCompare@E@@YGHEE@Z
.text:00000EE0 ??$MyCompare@E@@YGHEE@Z proc near       ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+7Bp
.text:00000EE0
.text:00000EE0 var_4           = dword ptr -4
.text:00000EE0 arg_0           = byte ptr  8
.text:00000EE0 arg_4           = byte ptr  0Ch
.text:00000EE0
.text:00000EE0                 push    ebp
.text:00000EE1                 mov     ebp, esp
.text:00000EE3                 push    ecx
.text:00000EE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EEB                 movzx   eax, [ebp+arg_0]
.text:00000EEF                 movzx   ecx, [ebp+arg_4]
.text:00000EF3                 cmp     eax, ecx
.text:00000EF5                 jge     short loc_F00
.text:00000EF7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EFE                 jmp     short loc_F12
.text:00000F00 ; ---------------------------------------------------------------------------
.text:00000F00
.text:00000F00 loc_F00:                                ; CODE XREF: MyCompare<uchar>(uchar,uchar)+15j
.text:00000F00                 movzx   edx, [ebp+arg_0]
.text:00000F04                 movzx   eax, [ebp+arg_4]
.text:00000F08                 xor     ecx, ecx
.text:00000F0A                 cmp     edx, eax
.text:00000F0C                 setnz   cl
.text:00000F0F                 mov     [ebp+var_4], ecx
.text:00000F12
.text:00000F12 loc_F12:                                ; CODE XREF: MyCompare<uchar>(uchar,uchar)+1Ej
.text:00000F12                 mov     eax, [ebp+var_4]
.text:00000F15                 mov     esp, ebp
.text:00000F17                 pop     ebp
.text:00000F18                 retn    8
.text:00000F18 ??$MyCompare@E@@YGHEE@Z endp
.text:00000F18
.text:00000F18 ; ---------------------------------------------------------------------------
.text:00000F1B                 align 4
.text:00000F1B _text           ends
.text:00000F1B
.text:00000F1C ; ===========================================================================
.text:00000F1C
.text:00000F1C ; Segment type: Pure code
.text:00000F1C ; Segment permissions: Read/Execute
.text:00000F1C _text           segment para public 'CODE' use32
.text:00000F1C                 assume cs:_text
.text:00000F1C                 ;org 0F1Ch
.text:00000F1C ; COMDAT (pick any)
.text:00000F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F1C
.text:00000F1C ; =============== S U B R O U T I N E =======================================
.text:00000F1C
.text:00000F1C ; Attributes: bp-based frame
.text:00000F1C
.text:00000F1C ; int __stdcall MyCompare<short>(short, short)
.text:00000F1C                 public ??$MyCompare@F@@YGHFF@Z
.text:00000F1C ??$MyCompare@F@@YGHFF@Z proc near       ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+95p
.text:00000F1C                                         ; NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+130p
.text:00000F1C
.text:00000F1C var_4           = dword ptr -4
.text:00000F1C arg_0           = word ptr  8
.text:00000F1C arg_4           = word ptr  0Ch
.text:00000F1C
.text:00000F1C                 push    ebp
.text:00000F1D                 mov     ebp, esp
.text:00000F1F                 push    ecx
.text:00000F20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F27                 movsx   eax, [ebp+arg_0]
.text:00000F2B                 movsx   ecx, [ebp+arg_4]
.text:00000F2F                 cmp     eax, ecx
.text:00000F31                 jge     short loc_F3C
.text:00000F33                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F3A                 jmp     short loc_F4E
.text:00000F3C ; ---------------------------------------------------------------------------
.text:00000F3C
.text:00000F3C loc_F3C:                                ; CODE XREF: MyCompare<short>(short,short)+15j
.text:00000F3C                 movsx   edx, [ebp+arg_0]
.text:00000F40                 movsx   eax, [ebp+arg_4]
.text:00000F44                 xor     ecx, ecx
.text:00000F46                 cmp     edx, eax
.text:00000F48                 setnz   cl
.text:00000F4B                 mov     [ebp+var_4], ecx
.text:00000F4E
.text:00000F4E loc_F4E:                                ; CODE XREF: MyCompare<short>(short,short)+1Ej
.text:00000F4E                 mov     eax, [ebp+var_4]
.text:00000F51                 mov     esp, ebp
.text:00000F53                 pop     ebp
.text:00000F54                 retn    8
.text:00000F54 ??$MyCompare@F@@YGHFF@Z endp
.text:00000F54
.text:00000F54 ; ---------------------------------------------------------------------------
.text:00000F57                 align 4
.text:00000F57 _text           ends
.text:00000F57
.text:00000F58 ; ===========================================================================
.text:00000F58
.text:00000F58 ; Segment type: Pure code
.text:00000F58 ; Segment permissions: Read/Execute
.text:00000F58 _text           segment para public 'CODE' use32
.text:00000F58                 assume cs:_text
.text:00000F58                 ;org 0F58h
.text:00000F58 ; COMDAT (pick any)
.text:00000F58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F58
.text:00000F58 ; =============== S U B R O U T I N E =======================================
.text:00000F58
.text:00000F58 ; Attributes: bp-based frame
.text:00000F58
.text:00000F58 ; int __stdcall MyCompare<long>(long, long)
.text:00000F58                 public ??$MyCompare@J@@YGHJJ@Z
.text:00000F58 ??$MyCompare@J@@YGHJJ@Z proc near       ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+C7p
.text:00000F58
.text:00000F58 var_4           = dword ptr -4
.text:00000F58 arg_0           = dword ptr  8
.text:00000F58 arg_4           = dword ptr  0Ch
.text:00000F58
.text:00000F58                 push    ebp
.text:00000F59                 mov     ebp, esp
.text:00000F5B                 push    ecx
.text:00000F5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F63                 mov     eax, [ebp+arg_0]
.text:00000F66                 cmp     eax, [ebp+arg_4]
.text:00000F69                 jge     short loc_F74
.text:00000F6B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F72                 jmp     short loc_F82
.text:00000F74 ; ---------------------------------------------------------------------------
.text:00000F74
.text:00000F74 loc_F74:                                ; CODE XREF: MyCompare<long>(long,long)+11j
.text:00000F74                 mov     ecx, [ebp+arg_0]
.text:00000F77                 xor     edx, edx
.text:00000F79                 cmp     ecx, [ebp+arg_4]
.text:00000F7C                 setnz   dl
.text:00000F7F                 mov     [ebp+var_4], edx
.text:00000F82
.text:00000F82 loc_F82:                                ; CODE XREF: MyCompare<long>(long,long)+1Aj
.text:00000F82                 mov     eax, [ebp+var_4]
.text:00000F85                 mov     esp, ebp
.text:00000F87                 pop     ebp
.text:00000F88                 retn    8
.text:00000F88 ??$MyCompare@J@@YGHJJ@Z endp
.text:00000F88
.text:00000F88 ; ---------------------------------------------------------------------------
.text:00000F8B                 align 4
.text:00000F8B _text           ends
.text:00000F8B
.text:00000F8C ; ===========================================================================
.text:00000F8C
.text:00000F8C ; Segment type: Pure code
.text:00000F8C ; Segment permissions: Read/Execute
.text:00000F8C _text           segment para public 'CODE' use32
.text:00000F8C                 assume cs:_text
.text:00000F8C                 ;org 0F8Ch
.text:00000F8C ; COMDAT (pick any)
.text:00000F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F8C
.text:00000F8C ; =============== S U B R O U T I N E =======================================
.text:00000F8C
.text:00000F8C ; Attributes: bp-based frame
.text:00000F8C
.text:00000F8C ; int __stdcall MyCompare<unsigned long>(unsigned long, unsigned long)
.text:00000F8C                 public ??$MyCompare@K@@YGHKK@Z
.text:00000F8C ??$MyCompare@K@@YGHKK@Z proc near       ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+DFp
.text:00000F8C
.text:00000F8C var_4           = dword ptr -4
.text:00000F8C arg_0           = dword ptr  8
.text:00000F8C arg_4           = dword ptr  0Ch
.text:00000F8C
.text:00000F8C                 push    ebp
.text:00000F8D                 mov     ebp, esp
.text:00000F8F                 push    ecx
.text:00000F90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F97                 mov     eax, [ebp+arg_0]
.text:00000F9A                 cmp     eax, [ebp+arg_4]
.text:00000F9D                 jnb     short loc_FA8
.text:00000F9F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FA6                 jmp     short loc_FB6
.text:00000FA8 ; ---------------------------------------------------------------------------
.text:00000FA8
.text:00000FA8 loc_FA8:                                ; CODE XREF: MyCompare<ulong>(ulong,ulong)+11j
.text:00000FA8                 mov     ecx, [ebp+arg_0]
.text:00000FAB                 xor     edx, edx
.text:00000FAD                 cmp     ecx, [ebp+arg_4]
.text:00000FB0                 setnz   dl
.text:00000FB3                 mov     [ebp+var_4], edx
.text:00000FB6
.text:00000FB6 loc_FB6:                                ; CODE XREF: MyCompare<ulong>(ulong,ulong)+1Aj
.text:00000FB6                 mov     eax, [ebp+var_4]
.text:00000FB9                 mov     esp, ebp
.text:00000FBB                 pop     ebp
.text:00000FBC                 retn    8
.text:00000FBC ??$MyCompare@K@@YGHKK@Z endp
.text:00000FBC
.text:00000FBC ; ---------------------------------------------------------------------------
.text:00000FBF                 align 10h
.text:00000FBF _text           ends
.text:00000FBF
.text:00000FC0 ; ===========================================================================
.text:00000FC0
.text:00000FC0 ; Segment type: Pure code
.text:00000FC0 ; Segment permissions: Read/Execute
.text:00000FC0 _text           segment para public 'CODE' use32
.text:00000FC0                 assume cs:_text
.text:00000FC0                 ;org 0FC0h
.text:00000FC0 ; COMDAT (pick any)
.text:00000FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FC0
.text:00000FC0 ; =============== S U B R O U T I N E =======================================
.text:00000FC0
.text:00000FC0 ; Attributes: bp-based frame
.text:00000FC0
.text:00000FC0 ; int __stdcall MyCompare<__int64>(__int64, __int64)
.text:00000FC0                 public ??$MyCompare@_J@@YGH_J0@Z
.text:00000FC0 ??$MyCompare@_J@@YGH_J0@Z proc near     ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+FCp
.text:00000FC0
.text:00000FC0 var_8           = dword ptr -8
.text:00000FC0 var_4           = dword ptr -4
.text:00000FC0 arg_0           = dword ptr  8
.text:00000FC0 arg_4           = dword ptr  0Ch
.text:00000FC0 arg_8           = dword ptr  10h
.text:00000FC0 arg_C           = dword ptr  14h
.text:00000FC0
.text:00000FC0                 push    ebp
.text:00000FC1                 mov     ebp, esp
.text:00000FC3                 sub     esp, 8
.text:00000FC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000FCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FD4                 mov     eax, [ebp+arg_4]
.text:00000FD7                 cmp     eax, [ebp+arg_C]
.text:00000FDA                 jg      short loc_FEF
.text:00000FDC                 jl      short loc_FE6
.text:00000FDE                 mov     ecx, [ebp+arg_0]
.text:00000FE1                 cmp     ecx, [ebp+arg_8]
.text:00000FE4                 jnb     short loc_FEF
.text:00000FE6
.text:00000FE6 loc_FE6:                                ; CODE XREF: MyCompare<__int64>(__int64,__int64)+1Cj
.text:00000FE6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FED                 jmp     short loc_1015
.text:00000FEF ; ---------------------------------------------------------------------------
.text:00000FEF
.text:00000FEF loc_FEF:                                ; CODE XREF: MyCompare<__int64>(__int64,__int64)+1Aj
.text:00000FEF                                         ; MyCompare<__int64>(__int64,__int64)+24j
.text:00000FEF                 mov     edx, [ebp+arg_0]
.text:00000FF2                 cmp     edx, [ebp+arg_8]
.text:00000FF5                 jnz     short loc_1008
.text:00000FF7                 mov     eax, [ebp+arg_4]
.text:00000FFA                 cmp     eax, [ebp+arg_C]
.text:00000FFD                 jnz     short loc_1008
.text:00000FFF                 mov     [ebp+var_8], 0
.text:00001006                 jmp     short loc_100F
.text:00001008 ; ---------------------------------------------------------------------------
.text:00001008
.text:00001008 loc_1008:                               ; CODE XREF: MyCompare<__int64>(__int64,__int64)+35j
.text:00001008                                         ; MyCompare<__int64>(__int64,__int64)+3Dj
.text:00001008                 mov     [ebp+var_8], 1
.text:0000100F
.text:0000100F loc_100F:                               ; CODE XREF: MyCompare<__int64>(__int64,__int64)+46j
.text:0000100F                 mov     ecx, [ebp+var_8]
.text:00001012                 mov     [ebp+var_4], ecx
.text:00001015
.text:00001015 loc_1015:                               ; CODE XREF: MyCompare<__int64>(__int64,__int64)+2Dj
.text:00001015                 mov     eax, [ebp+var_4]
.text:00001018                 mov     esp, ebp
.text:0000101A                 pop     ebp
.text:0000101B                 retn    10h
.text:0000101B ??$MyCompare@_J@@YGH_J0@Z endp
.text:0000101B
.text:0000101B ; ---------------------------------------------------------------------------
.text:0000101E                 align 10h
.text:0000101E _text           ends
.text:0000101E
.text:00001020 ; ===========================================================================
.text:00001020
.text:00001020 ; Segment type: Pure code
.text:00001020 ; Segment permissions: Read/Execute
.text:00001020 _text           segment para public 'CODE' use32
.text:00001020                 assume cs:_text
.text:00001020                 ;org 1020h
.text:00001020 ; COMDAT (pick any)
.text:00001020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001020
.text:00001020 ; =============== S U B R O U T I N E =======================================
.text:00001020
.text:00001020 ; Attributes: bp-based frame
.text:00001020
.text:00001020 ; int __stdcall MyCompare<unsigned __int64>(unsigned __int64, unsigned __int64)
.text:00001020                 public ??$MyCompare@_K@@YGH_K0@Z
.text:00001020 ??$MyCompare@_K@@YGH_K0@Z proc near     ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+119p
.text:00001020
.text:00001020 var_8           = dword ptr -8
.text:00001020 var_4           = dword ptr -4
.text:00001020 arg_0           = dword ptr  8
.text:00001020 arg_4           = dword ptr  0Ch
.text:00001020 arg_8           = dword ptr  10h
.text:00001020 arg_C           = dword ptr  14h
.text:00001020
.text:00001020                 push    ebp
.text:00001021                 mov     ebp, esp
.text:00001023                 sub     esp, 8
.text:00001026                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000102D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001034                 mov     eax, [ebp+arg_4]
.text:00001037                 cmp     eax, [ebp+arg_C]
.text:0000103A                 ja      short loc_104F
.text:0000103C                 jb      short loc_1046
.text:0000103E                 mov     ecx, [ebp+arg_0]
.text:00001041                 cmp     ecx, [ebp+arg_8]
.text:00001044                 jnb     short loc_104F
.text:00001046
.text:00001046 loc_1046:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Cj
.text:00001046                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000104D                 jmp     short loc_1075
.text:0000104F ; ---------------------------------------------------------------------------
.text:0000104F
.text:0000104F loc_104F:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Aj
.text:0000104F                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+24j
.text:0000104F                 mov     edx, [ebp+arg_0]
.text:00001052                 cmp     edx, [ebp+arg_8]
.text:00001055                 jnz     short loc_1068
.text:00001057                 mov     eax, [ebp+arg_4]
.text:0000105A                 cmp     eax, [ebp+arg_C]
.text:0000105D                 jnz     short loc_1068
.text:0000105F                 mov     [ebp+var_8], 0
.text:00001066                 jmp     short loc_106F
.text:00001068 ; ---------------------------------------------------------------------------
.text:00001068
.text:00001068 loc_1068:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+35j
.text:00001068                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+3Dj
.text:00001068                 mov     [ebp+var_8], 1
.text:0000106F
.text:0000106F loc_106F:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+46j
.text:0000106F                 mov     ecx, [ebp+var_8]
.text:00001072                 mov     [ebp+var_4], ecx
.text:00001075
.text:00001075 loc_1075:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+2Dj
.text:00001075                 mov     eax, [ebp+var_4]
.text:00001078                 mov     esp, ebp
.text:0000107A                 pop     ebp
.text:0000107B                 retn    10h
.text:0000107B ??$MyCompare@_K@@YGH_K0@Z endp
.text:0000107B
.text:0000107B _text           ends
.text:0000107B
UNDEF:00001080 ; ===========================================================================
UNDEF:00001080
UNDEF:00001080 ; Segment type: Externs
UNDEF:00001080 ; UNDEF
UNDEF:00001080 ; BSTR __stdcall SysAllocStringLen(const OLECHAR *strIn, UINT ui)
UNDEF:00001080                 extrn __imp__SysAllocStringLen@8:near
UNDEF:00001080                                         ; CODE XREF: NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)+Cp
UNDEF:00001080                                         ; NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+33p ...
UNDEF:00001084                 extrn __RTC_CheckEsp:near
UNDEF:00001084                                         ; CODE XREF: NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)+14p
UNDEF:00001084                                         ; NWindows::NCOM::PropVarEm_Alloc_Bstr(tagPROPVARIANT *,uint)+54p ...
UNDEF:00001088                 extrn __RTC_Shutdown:near
UNDEF:00001088                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000108C                 extrn __RTC_InitBase:near
UNDEF:0000108C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001090 ; size_t __cdecl strlen(const char *Str)
UNDEF:00001090                 extrn _strlen:near      ; CODE XREF: NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)+20p
UNDEF:00001090                                         ; NWindows::NCOM::CPropVariant::operator=(char const *)+3Ep
UNDEF:00001094 ; BSTR __stdcall SysAllocString(const OLECHAR *psz)
UNDEF:00001094                 extrn __imp__SysAllocString@4:near
UNDEF:00001094                                         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+3Ap
UNDEF:00001094                                         ; DATA XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+3Ar
UNDEF:00001098 ; __stdcall _CxxThrowException(x, x)
UNDEF:00001098                 extrn __CxxThrowException@8:near
UNDEF:00001098                                         ; CODE XREF: NWindows::NCOM::CPropVariant::operator=(wchar_t const *)+6Ep
UNDEF:00001098                                         ; NWindows::NCOM::CPropVariant::operator=(UString const &)+75p ...
UNDEF:0000109C ; const type_info::`vftable'
UNDEF:0000109C                 extrn ??_7type_info@@6B@:near
UNDEF:0000109C                                         ; DATA XREF: .data:char * `RTTI Type Descriptor'o
UNDEF:0000109C                                         ; .data:void * `RTTI Type Descriptor'o
UNDEF:000010A0 ; HRESULT __stdcall VariantClear(VARIANTARG *pvarg)
UNDEF:000010A0                 extrn __imp__VariantClear@4:near
UNDEF:000010A0                                         ; CODE XREF: NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)+6Ap
UNDEF:000010A0                                         ; NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+1Ep
UNDEF:000010A0                                         ; DATA XREF: ...
UNDEF:000010A4 ; HRESULT __stdcall VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
UNDEF:000010A4                 extrn __imp__VariantCopy@8:near
UNDEF:000010A4                                         ; CODE XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+7Ep
UNDEF:000010A4                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+7Er
UNDEF:000010A8 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000010A8                 extrn __imp__memmove:near
UNDEF:000010A8                                         ; CODE XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+60p
UNDEF:000010A8                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Copy(tagPROPVARIANT const *)+60r
UNDEF:000010AC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000010AC                 extrn _memcpy:near      ; CODE XREF: NWindows::NCOM::CPropVariant::Attach(tagPROPVARIANT *)+37p
UNDEF:000010AC                                         ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)+42p
UNDEF:000010B0 ; LONG __stdcall CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
UNDEF:000010B0                 extrn __imp__CompareFileTime@8:near
UNDEF:000010B0                                         ; CODE XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+149p
UNDEF:000010B0                                         ; DATA XREF: NWindows::NCOM::CPropVariant::Compare(NWindows::NCOM::CPropVariant const &)+149r
UNDEF:000010B0
UNDEF:000010B0