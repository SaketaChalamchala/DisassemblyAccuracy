; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Ppmd8Enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Ppmd8_RangeEnc_FlushData@4
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\ppmd8enc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_RangeEnc_FlushData@4 PROC
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 17
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Ppmd8_Rang
$LN2@Ppmd8_Rang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], edx
$LN3@Ppmd8_Rang:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN4@Ppmd8_Rang
; Line 18
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	shr	edx, 24					; 00000018H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@Ppmd8_Rang
$LN4@Ppmd8_Rang:
; Line 19
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_RangeEnc_FlushData@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Ppmd8_EncodeSymbol@8
EXTRN	_Ppmd8_Update2@4:PROC
EXTRN	_Ppmd8_MakeEscFreq@12:PROC
EXTRN	_PPMD8_kExpEscape:BYTE
EXTRN	_Ppmd8_UpdateBin@4:PROC
EXTRN	_Ppmd8_Update1@4:PROC
EXTRN	_Ppmd8_Update1_0@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv306 = -341						; size = 1
_s1$2876 = -340						; size = 4
_low$2875 = -336					; size = 4
_cur$2873 = -332					; size = 4
_numMasked$2865 = -328					; size = 4
_i$2864 = -324						; size = 4
_sum$2863 = -320					; size = 4
_s$2862 = -316						; size = 4
_see$2861 = -312					; size = 4
_escFreq$2860 = -304					; size = 4
_i$2851 = -296						; size = 4
_s$2845 = -292						; size = 4
_prob$2843 = -288					; size = 4
_i$2832 = -284						; size = 4
_i$2826 = -280						; size = 4
_sum$2825 = -276					; size = 4
_s$2824 = -272						; size = 4
_charMask$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_symbol$ = 12						; size = 4
_Ppmd8_EncodeSymbol@8 PROC
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN32@Ppmd8_Enco
; Line 61
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$2824[ebp], edx
; Line 64
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN31@Ppmd8_Enco
; Line 66
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _s$2824[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_Encode@16
; Line 67
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$2824[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 68
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd8_Update1_0@4
; Line 69
	jmp	$LN33@Ppmd8_Enco
$LN31@Ppmd8_Enco:
; Line 71
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 72
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _sum$2825[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _i$2826[ebp], ecx
$LN30@Ppmd8_Enco:
; Line 76
	mov	edx, DWORD PTR _s$2824[ebp]
	add	edx, 6
	mov	DWORD PTR _s$2824[ebp], edx
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN27@Ppmd8_Enco
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _s$2824[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	mov	ecx, DWORD PTR _sum$2825[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RangeEnc_Encode@16
; Line 79
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _s$2824[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 80
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Ppmd8_Update1@4
; Line 81
	jmp	$LN33@Ppmd8_Enco
$LN27@Ppmd8_Enco:
; Line 83
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _sum$2825[ebp]
	mov	DWORD PTR _sum$2825[ebp], ecx
; Line 85
	mov	edx, DWORD PTR _i$2826[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2826[ebp], edx
	jne	$LN30@Ppmd8_Enco
; Line 87
	mov	DWORD PTR _i$2832[ebp], 0
	jmp	SHORT $LN26@Ppmd8_Enco
$LN25@Ppmd8_Enco:
	mov	eax, DWORD PTR _i$2832[ebp]
	add	eax, 8
	mov	DWORD PTR _i$2832[ebp], eax
$LN26@Ppmd8_Enco:
	cmp	DWORD PTR _i$2832[ebp], 64		; 00000040H
	jae	$LN24@Ppmd8_Enco
	mov	ecx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4], -1
	mov	edx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+4], -1
	mov	eax, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+8], -1
	mov	ecx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+12], -1
	mov	edx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+16], -1
	mov	eax, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+20], -1
	mov	ecx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+24], -1
	mov	edx, DWORD PTR _i$2832[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+28], -1
	jmp	$LN25@Ppmd8_Enco
$LN24@Ppmd8_Enco:
; Line 88
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	BYTE PTR _charMask$[ebp+ecx], 0
; Line 89
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _i$2826[ebp], ecx
$LN23@Ppmd8_Enco:
; Line 90
	mov	edx, DWORD PTR _s$2824[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$2824[ebp], edx
	mov	eax, DWORD PTR _s$2824[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	BYTE PTR _charMask$[ebp+ecx], 0
	mov	edx, DWORD PTR _i$2826[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2826[ebp], edx
	jne	SHORT $LN23@Ppmd8_Enco
; Line 91
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	sub	edx, DWORD PTR _sum$2825[ebp]
	push	edx
	mov	eax, DWORD PTR _sum$2825[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_Encode@16
; Line 93
	jmp	$LN14@Ppmd8_Enco
$LN32@Ppmd8_Enco:
; Line 95
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+815]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4152]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [eax]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx+560]
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
	movzx	eax, BYTE PTR [eax+1]
	add	ecx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+28]
	sar	eax, 26					; 0000001aH
	and	eax, 32					; 00000020H
	add	ecx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _prob$2843[ebp], ecx
; Line 96
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	DWORD PTR _s$2845[ebp], eax
; Line 97
	mov	ecx, DWORD PTR _s$2845[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN19@Ppmd8_Enco
; Line 99
	mov	eax, DWORD PTR _prob$2843[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit_0@8
; Line 100
	mov	eax, DWORD PTR _prob$2843[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _prob$2843[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 32					; 00000020H
	sar	eax, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _prob$2843[ebp]
	mov	WORD PTR [edx], cx
; Line 101
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _s$2845[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 102
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Ppmd8_UpdateBin@4
; Line 103
	jmp	$LN33@Ppmd8_Enco
; Line 105
	jmp	$LN14@Ppmd8_Enco
$LN19@Ppmd8_Enco:
; Line 107
	mov	eax, DWORD PTR _prob$2843[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit_1@8
; Line 108
	mov	eax, DWORD PTR _prob$2843[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _prob$2843[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 32					; 00000020H
	sar	eax, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _prob$2843[ebp]
	mov	WORD PTR [edx], cx
; Line 109
	mov	eax, DWORD PTR _prob$2843[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 10					; 0000000aH
	movzx	edx, BYTE PTR _PPMD8_kExpEscape[ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 110
	mov	DWORD PTR _i$2851[ebp], 0
	jmp	SHORT $LN17@Ppmd8_Enco
$LN16@Ppmd8_Enco:
	mov	ecx, DWORD PTR _i$2851[ebp]
	add	ecx, 8
	mov	DWORD PTR _i$2851[ebp], ecx
$LN17@Ppmd8_Enco:
	cmp	DWORD PTR _i$2851[ebp], 64		; 00000040H
	jae	$LN15@Ppmd8_Enco
	mov	edx, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4], -1
	mov	eax, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+4], -1
	mov	ecx, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+8], -1
	mov	edx, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+12], -1
	mov	eax, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+16], -1
	mov	ecx, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+20], -1
	mov	edx, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+24], -1
	mov	eax, DWORD PTR _i$2851[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+28], -1
	jmp	$LN16@Ppmd8_Enco
$LN15@Ppmd8_Enco:
; Line 111
	mov	ecx, DWORD PTR _s$2845[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	BYTE PTR _charMask$[ebp+edx], 0
; Line 112
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN14@Ppmd8_Enco:
; Line 121
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _numMasked$2865[ebp], eax
$LN12@Ppmd8_Enco:
; Line 124
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 125
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN9@Ppmd8_Enco
; Line 126
	jmp	$LN33@Ppmd8_Enco
$LN9@Ppmd8_Enco:
; Line 127
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
; Line 129
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, DWORD PTR _numMasked$2865[ebp]
	je	SHORT $LN12@Ppmd8_Enco
; Line 131
	lea	ecx, DWORD PTR _escFreq$2860[ebp]
	push	ecx
	mov	edx, DWORD PTR _numMasked$2865[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd8_MakeEscFreq@12
	mov	DWORD PTR _see$2861[ebp], eax
; Line 132
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$2862[ebp], eax
; Line 133
	mov	DWORD PTR _sum$2863[ebp], 0
; Line 134
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	add	eax, 1
	mov	DWORD PTR _i$2864[ebp], eax
$LN8@Ppmd8_Enco:
; Line 137
	mov	ecx, DWORD PTR _s$2862[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cur$2873[ebp], edx
; Line 138
	mov	eax, DWORD PTR _cur$2873[ebp]
	cmp	eax, DWORD PTR _symbol$[ebp]
	jne	$LN5@Ppmd8_Enco
; Line 140
	mov	ecx, DWORD PTR _sum$2863[ebp]
	mov	DWORD PTR _low$2875[ebp], ecx
; Line 141
	mov	edx, DWORD PTR _s$2862[ebp]
	mov	DWORD PTR _s1$2876[ebp], edx
$LN4@Ppmd8_Enco:
; Line 144
	mov	eax, DWORD PTR _s$2862[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _s$2862[ebp]
	movzx	eax, BYTE PTR [edx]
	movsx	edx, BYTE PTR _charMask$[ebp+eax]
	and	ecx, edx
	add	ecx, DWORD PTR _sum$2863[ebp]
	mov	DWORD PTR _sum$2863[ebp], ecx
; Line 145
	mov	eax, DWORD PTR _s$2862[ebp]
	add	eax, 6
	mov	DWORD PTR _s$2862[ebp], eax
; Line 147
	mov	ecx, DWORD PTR _i$2864[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$2864[ebp], ecx
	jne	SHORT $LN4@Ppmd8_Enco
; Line 148
	mov	edx, DWORD PTR _sum$2863[ebp]
	add	edx, DWORD PTR _escFreq$2860[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$2876[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	mov	edx, DWORD PTR _low$2875[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_Encode@16
; Line 149
	mov	ecx, DWORD PTR _see$2861[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 7
	jge	SHORT $LN1@Ppmd8_Enco
	mov	eax, DWORD PTR _see$2861[ebp]
	mov	cl, BYTE PTR [eax+3]
	sub	cl, 1
	mov	BYTE PTR tv306[ebp], cl
	mov	edx, DWORD PTR _see$2861[ebp]
	mov	al, BYTE PTR tv306[ebp]
	mov	BYTE PTR [edx+3], al
	movzx	ecx, BYTE PTR tv306[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@Ppmd8_Enco
	mov	edx, DWORD PTR _see$2861[ebp]
	mov	ax, WORD PTR [edx]
	shl	ax, 1
	mov	ecx, DWORD PTR _see$2861[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _see$2861[ebp]
	movzx	ecx, BYTE PTR [edx+2]
	mov	eax, 3
	shl	eax, cl
	mov	ecx, DWORD PTR _see$2861[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _see$2861[ebp]
	mov	al, BYTE PTR [edx+2]
	add	al, 1
	mov	ecx, DWORD PTR _see$2861[ebp]
	mov	BYTE PTR [ecx+2], al
$LN1@Ppmd8_Enco:
; Line 150
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s1$2876[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 151
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd8_Update2@4
; Line 152
	jmp	$LN33@Ppmd8_Enco
$LN5@Ppmd8_Enco:
; Line 154
	mov	edx, DWORD PTR _s$2862[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _cur$2873[ebp]
	movsx	edx, BYTE PTR _charMask$[ebp+ecx]
	and	eax, edx
	add	eax, DWORD PTR _sum$2863[ebp]
	mov	DWORD PTR _sum$2863[ebp], eax
; Line 155
	mov	eax, DWORD PTR _cur$2873[ebp]
	mov	BYTE PTR _charMask$[ebp+eax], 0
; Line 156
	mov	ecx, DWORD PTR _s$2862[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$2862[ebp], ecx
; Line 158
	mov	edx, DWORD PTR _i$2864[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2864[ebp], edx
	jne	$LN8@Ppmd8_Enco
; Line 160
	mov	eax, DWORD PTR _sum$2863[ebp]
	add	eax, DWORD PTR _escFreq$2860[ebp]
	push	eax
	mov	ecx, DWORD PTR _escFreq$2860[ebp]
	push	ecx
	mov	edx, DWORD PTR _sum$2863[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_Encode@16
; Line 161
	mov	ecx, DWORD PTR _see$2861[ebp]
	movzx	edx, WORD PTR [ecx]
	add	edx, DWORD PTR _sum$2863[ebp]
	add	edx, DWORD PTR _escFreq$2860[ebp]
	mov	eax, DWORD PTR _see$2861[ebp]
	mov	WORD PTR [eax], dx
; Line 162
	jmp	$LN14@Ppmd8_Enco
$LN33@Ppmd8_Enco:
; Line 163
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@Ppmd8_Enco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN38@Ppmd8_Enco:
	DD	2
	DD	$LN37@Ppmd8_Enco
$LN37@Ppmd8_Enco:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN35@Ppmd8_Enco
	DD	-304					; fffffed0H
	DD	4
	DD	$LN36@Ppmd8_Enco
$LN36@Ppmd8_Enco:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN35@Ppmd8_Enco:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_Ppmd8_EncodeSymbol@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv67 = -4						; size = 4
_p$ = 8							; size = 4
_start$ = 12						; size = 4
_size$ = 16						; size = 4
_total$ = 20						; size = 4
_RangeEnc_Encode@16 PROC
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+72]
	xor	edx, edx
	div	DWORD PTR _total$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR _start$[ebp]
	imul	eax, DWORD PTR tv67[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+80], eax
; Line 35
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	imul	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], ecx
; Line 36
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_Normalize@4
; Line 37
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RangeEnc_Encode@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_RangeEnc_Normalize@4 PROC
; Line 22
	push	ebp
	mov	ebp, esp
	push	esi
$LN3@RangeEnc_N:
; Line 24
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, DWORD PTR [eax+80]
	cmp	ecx, 16777216				; 01000000H
	jb	SHORT $LN1@RangeEnc_N
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+72], 32768		; 00008000H
	jae	SHORT $LN4@RangeEnc_N
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	sub	eax, DWORD PTR [edx+80]
	and	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+72], eax
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@RangeEnc_N
$LN1@RangeEnc_N:
; Line 26
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	shr	ecx, 24					; 00000018H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 27
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+72], edx
; Line 28
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], edx
; Line 29
	jmp	$LN3@RangeEnc_N
$LN4@RangeEnc_N:
; Line 30
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_RangeEnc_Normalize@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_size0$ = 12						; size = 4
_RangeEnc_EncodeBit_0@8 PROC
; Line 40
	push	ebp
	mov	ebp, esp
; Line 41
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], ecx
; Line 42
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	imul	ecx, DWORD PTR _size0$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], ecx
; Line 43
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_Normalize@4
; Line 44
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_RangeEnc_EncodeBit_0@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv67 = -4						; size = 4
_p$ = 8							; size = 4
_size0$ = 12						; size = 4
_RangeEnc_EncodeBit_1@8 PROC
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 48
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	ecx, 14					; 0000000eH
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	ecx, DWORD PTR _size0$[ebp]
	imul	ecx, DWORD PTR tv67[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+80]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 49
	mov	ecx, 16384				; 00004000H
	sub	ecx, DWORD PTR _size0$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 50
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_Normalize@4
; Line 51
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_RangeEnc_EncodeBit_1@8 ENDP
_TEXT	ENDS
END
