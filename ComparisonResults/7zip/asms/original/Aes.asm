; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Aes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_g_AesCbc_Decode:DWORD
COMM	_g_AesCtr_Code:DWORD
COMM	_g_AesCbc_Encode:DWORD
_DATA	ENDS
CONST	SEGMENT
_Sbox	DB	063H
	DB	07cH
	DB	077H
	DB	07bH
	DB	0f2H
	DB	06bH
	DB	06fH
	DB	0c5H
	DB	030H
	DB	01H
	DB	067H
	DB	02bH
	DB	0feH
	DB	0d7H
	DB	0abH
	DB	076H
	DB	0caH
	DB	082H
	DB	0c9H
	DB	07dH
	DB	0faH
	DB	059H
	DB	047H
	DB	0f0H
	DB	0adH
	DB	0d4H
	DB	0a2H
	DB	0afH
	DB	09cH
	DB	0a4H
	DB	072H
	DB	0c0H
	DB	0b7H
	DB	0fdH
	DB	093H
	DB	026H
	DB	036H
	DB	03fH
	DB	0f7H
	DB	0ccH
	DB	034H
	DB	0a5H
	DB	0e5H
	DB	0f1H
	DB	071H
	DB	0d8H
	DB	031H
	DB	015H
	DB	04H
	DB	0c7H
	DB	023H
	DB	0c3H
	DB	018H
	DB	096H
	DB	05H
	DB	09aH
	DB	07H
	DB	012H
	DB	080H
	DB	0e2H
	DB	0ebH
	DB	027H
	DB	0b2H
	DB	075H
	DB	09H
	DB	083H
	DB	02cH
	DB	01aH
	DB	01bH
	DB	06eH
	DB	05aH
	DB	0a0H
	DB	052H
	DB	03bH
	DB	0d6H
	DB	0b3H
	DB	029H
	DB	0e3H
	DB	02fH
	DB	084H
	DB	053H
	DB	0d1H
	DB	00H
	DB	0edH
	DB	020H
	DB	0fcH
	DB	0b1H
	DB	05bH
	DB	06aH
	DB	0cbH
	DB	0beH
	DB	039H
	DB	04aH
	DB	04cH
	DB	058H
	DB	0cfH
	DB	0d0H
	DB	0efH
	DB	0aaH
	DB	0fbH
	DB	043H
	DB	04dH
	DB	033H
	DB	085H
	DB	045H
	DB	0f9H
	DB	02H
	DB	07fH
	DB	050H
	DB	03cH
	DB	09fH
	DB	0a8H
	DB	051H
	DB	0a3H
	DB	040H
	DB	08fH
	DB	092H
	DB	09dH
	DB	038H
	DB	0f5H
	DB	0bcH
	DB	0b6H
	DB	0daH
	DB	021H
	DB	010H
	DB	0ffH
	DB	0f3H
	DB	0d2H
	DB	0cdH
	DB	0cH
	DB	013H
	DB	0ecH
	DB	05fH
	DB	097H
	DB	044H
	DB	017H
	DB	0c4H
	DB	0a7H
	DB	07eH
	DB	03dH
	DB	064H
	DB	05dH
	DB	019H
	DB	073H
	DB	060H
	DB	081H
	DB	04fH
	DB	0dcH
	DB	022H
	DB	02aH
	DB	090H
	DB	088H
	DB	046H
	DB	0eeH
	DB	0b8H
	DB	014H
	DB	0deH
	DB	05eH
	DB	0bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	03aH
	DB	0aH
	DB	049H
	DB	06H
	DB	024H
	DB	05cH
	DB	0c2H
	DB	0d3H
	DB	0acH
	DB	062H
	DB	091H
	DB	095H
	DB	0e4H
	DB	079H
	DB	0e7H
	DB	0c8H
	DB	037H
	DB	06dH
	DB	08dH
	DB	0d5H
	DB	04eH
	DB	0a9H
	DB	06cH
	DB	056H
	DB	0f4H
	DB	0eaH
	DB	065H
	DB	07aH
	DB	0aeH
	DB	08H
	DB	0baH
	DB	078H
	DB	025H
	DB	02eH
	DB	01cH
	DB	0a6H
	DB	0b4H
	DB	0c6H
	DB	0e8H
	DB	0ddH
	DB	074H
	DB	01fH
	DB	04bH
	DB	0bdH
	DB	08bH
	DB	08aH
	DB	070H
	DB	03eH
	DB	0b5H
	DB	066H
	DB	048H
	DB	03H
	DB	0f6H
	DB	0eH
	DB	061H
	DB	035H
	DB	057H
	DB	0b9H
	DB	086H
	DB	0c1H
	DB	01dH
	DB	09eH
	DB	0e1H
	DB	0f8H
	DB	098H
	DB	011H
	DB	069H
	DB	0d9H
	DB	08eH
	DB	094H
	DB	09bH
	DB	01eH
	DB	087H
	DB	0e9H
	DB	0ceH
	DB	055H
	DB	028H
	DB	0dfH
	DB	08cH
	DB	0a1H
	DB	089H
	DB	0dH
	DB	0bfH
	DB	0e6H
	DB	042H
	DB	068H
	DB	041H
	DB	099H
	DB	02dH
	DB	0fH
	DB	0b0H
	DB	054H
	DB	0bbH
	DB	016H
_Rcon	DB	00H
	DB	01H
	DB	02H
	DB	04H
	DB	08H
	DB	010H
	DB	020H
	DB	040H
	DB	080H
	DB	01bH
	DB	036H
CONST	ENDS
PUBLIC	@AesCtr_Code@12
PUBLIC	@AesCbc_Decode@12
PUBLIC	@AesCbc_Encode@12
PUBLIC	_AesGenTables@0
EXTRN	@AesCtr_Code_Intel@12:PROC
EXTRN	@AesCbc_Decode_Intel@12:PROC
EXTRN	@AesCbc_Encode_Intel@12:PROC
EXTRN	_CPU_Is_Aes_Supported@0:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_D	DD	0400H DUP (?)
_T	DD	0400H DUP (?)
_InvS	DB	0100H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\aes.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_aE$2780 = -48						; size = 4
_aD$2779 = -44						; size = 4
_aB$2778 = -40						; size = 4
_a9$2777 = -36						; size = 4
_a8$2776 = -32						; size = 4
_a4$2775 = -28						; size = 4
_a2$2774 = -24						; size = 4
_a1$2773 = -20						; size = 4
_a3$2756 = -16						; size = 4
_a2$2755 = -12						; size = 4
_a1$2754 = -8						; size = 4
_i$ = -4						; size = 4
_AesGenTables@0 PROC
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@AesGenTabl
$LN6@AesGenTabl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@AesGenTabl:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN5@AesGenTabl
; Line 58
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _Sbox[ecx]
	mov	al, BYTE PTR _i$[ebp]
	mov	BYTE PTR _InvS[edx], al
	jmp	SHORT $LN6@AesGenTabl
$LN5@AesGenTabl:
; Line 60
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@AesGenTabl
$LN3@AesGenTabl:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@AesGenTabl:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	$LN2@AesGenTabl
; Line 63
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _Sbox[edx]
	mov	DWORD PTR _a1$2754[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _a1$2754[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _a1$2754[ebp]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, 27					; 0000001bH
	xor	ecx, edx
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _a2$2755[ebp], ecx
; Line 65
	mov	eax, DWORD PTR _a2$2755[ebp]
	xor	eax, DWORD PTR _a1$2754[ebp]
	mov	DWORD PTR _a3$2756[ebp], eax
; Line 66
	mov	ecx, DWORD PTR _a1$2754[ebp]
	shl	ecx, 8
	or	ecx, DWORD PTR _a2$2755[ebp]
	mov	edx, DWORD PTR _a1$2754[ebp]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _a3$2756[ebp]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _T[edx*4], ecx
; Line 67
	mov	eax, DWORD PTR _a2$2755[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _a3$2756[ebp]
	mov	ecx, DWORD PTR _a1$2754[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _a1$2754[ebp]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _T[ecx*4+1024], eax
; Line 68
	mov	edx, DWORD PTR _a3$2756[ebp]
	shl	edx, 8
	or	edx, DWORD PTR _a1$2754[ebp]
	mov	eax, DWORD PTR _a2$2755[ebp]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, DWORD PTR _a1$2754[ebp]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _T[eax*4+2048], edx
; Line 69
	mov	ecx, DWORD PTR _a1$2754[ebp]
	shl	ecx, 8
	or	ecx, DWORD PTR _a1$2754[ebp]
	mov	edx, DWORD PTR _a3$2756[ebp]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _a2$2755[ebp]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _T[edx*4+3072], ecx
; Line 72
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _InvS[eax]
	mov	DWORD PTR _a1$2773[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _a1$2773[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _a1$2773[ebp]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	and	eax, 27					; 0000001bH
	xor	edx, eax
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _a2$2774[ebp], edx
; Line 74
	mov	ecx, DWORD PTR _a2$2774[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _a2$2774[ebp]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, 27					; 0000001bH
	xor	ecx, edx
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _a4$2775[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _a4$2775[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a4$2775[ebp]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 27					; 0000001bH
	xor	eax, ecx
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _a8$2776[ebp], eax
; Line 76
	mov	edx, DWORD PTR _a8$2776[ebp]
	xor	edx, DWORD PTR _a1$2773[ebp]
	mov	DWORD PTR _a9$2777[ebp], edx
; Line 77
	mov	eax, DWORD PTR _a8$2776[ebp]
	xor	eax, DWORD PTR _a2$2774[ebp]
	xor	eax, DWORD PTR _a1$2773[ebp]
	mov	DWORD PTR _aB$2778[ebp], eax
; Line 78
	mov	ecx, DWORD PTR _a8$2776[ebp]
	xor	ecx, DWORD PTR _a4$2775[ebp]
	xor	ecx, DWORD PTR _a1$2773[ebp]
	mov	DWORD PTR _aD$2779[ebp], ecx
; Line 79
	mov	edx, DWORD PTR _a8$2776[ebp]
	xor	edx, DWORD PTR _a4$2775[ebp]
	xor	edx, DWORD PTR _a2$2774[ebp]
	mov	DWORD PTR _aE$2780[ebp], edx
; Line 80
	mov	eax, DWORD PTR _a9$2777[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _aE$2780[ebp]
	mov	ecx, DWORD PTR _aD$2779[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _aB$2778[ebp]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _D[ecx*4], eax
; Line 81
	mov	edx, DWORD PTR _aE$2780[ebp]
	shl	edx, 8
	or	edx, DWORD PTR _aB$2778[ebp]
	mov	eax, DWORD PTR _a9$2777[ebp]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, DWORD PTR _aD$2779[ebp]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _D[eax*4+1024], edx
; Line 82
	mov	ecx, DWORD PTR _aB$2778[ebp]
	shl	ecx, 8
	or	ecx, DWORD PTR _aD$2779[ebp]
	mov	edx, DWORD PTR _aE$2780[ebp]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _a9$2777[ebp]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _D[edx*4+2048], ecx
; Line 83
	mov	eax, DWORD PTR _aD$2779[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _a9$2777[ebp]
	mov	ecx, DWORD PTR _aB$2778[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _aE$2780[ebp]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _D[ecx*4+3072], eax
; Line 85
	jmp	$LN3@AesGenTabl
$LN2@AesGenTabl:
; Line 87
	mov	DWORD PTR _g_AesCbc_Encode, OFFSET @AesCbc_Encode@12
; Line 88
	mov	DWORD PTR _g_AesCbc_Decode, OFFSET @AesCbc_Decode@12
; Line 89
	mov	DWORD PTR _g_AesCtr_Code, OFFSET @AesCtr_Code@12
; Line 92
	call	_CPU_Is_Aes_Supported@0
	test	eax, eax
	je	SHORT $LN8@AesGenTabl
; Line 94
	mov	DWORD PTR _g_AesCbc_Encode, OFFSET @AesCbc_Encode_Intel@12
; Line 95
	mov	DWORD PTR _g_AesCbc_Decode, OFFSET @AesCbc_Decode_Intel@12
; Line 96
	mov	DWORD PTR _g_AesCtr_Code, OFFSET @AesCtr_Code_Intel@12
$LN8@AesGenTabl:
; Line 99
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AesGenTables@0 ENDP
_TEXT	ENDS
PUBLIC	@Aes_SetKey_Enc@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rem$2817 = -24						; size = 4
_t$2816 = -20						; size = 4
_wSize$ = -16						; size = 4
_i$ = -12						; size = 4
_key$ = -8						; size = 4
_w$ = -4						; size = 4
_keySize$ = 8						; size = 4
@Aes_SetKey_Enc@12 PROC
; _w$ = ecx
; _key$ = edx
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _key$[ebp], edx
	mov	DWORD PTR _w$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR _keySize$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _wSize$[ebp], eax
; Line 141
	mov	ecx, DWORD PTR _keySize$[ebp]
	shr	ecx, 2
	mov	DWORD PTR _keySize$[ebp], ecx
; Line 142
	mov	edx, DWORD PTR _keySize$[ebp]
	shr	edx, 1
	add	edx, 3
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], edx
; Line 143
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], ecx
; Line 145
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@
$LN8@:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 4
	mov	DWORD PTR _key$[ebp], eax
$LN9@:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _keySize$[ebp]
	jae	SHORT $LN7@
; Line 146
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN8@
$LN7@:
; Line 148
	jmp	SHORT $LN6@
$LN5@:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _wSize$[ebp]
	jae	$LN10@
; Line 150
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _t$2816[ebp], eax
; Line 151
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _keySize$[ebp]
	mov	DWORD PTR _rem$2817[ebp], edx
; Line 152
	cmp	DWORD PTR _rem$2817[ebp], 0
	jne	SHORT $LN3@
; Line 153
	mov	ecx, DWORD PTR _t$2816[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[ecx]
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _keySize$[ebp]
	movzx	edx, BYTE PTR _Rcon[eax]
	xor	ecx, edx
	mov	eax, DWORD PTR _t$2816[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[eax]
	shl	edx, 8
	or	ecx, edx
	mov	eax, DWORD PTR _t$2816[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[eax]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _t$2816[ebp]
	and	eax, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[eax]
	shl	edx, 24					; 00000018H
	or	ecx, edx
	mov	DWORD PTR _t$2816[ebp], ecx
	jmp	SHORT $LN2@
$LN3@:
; Line 154
	cmp	DWORD PTR _keySize$[ebp], 6
	jbe	SHORT $LN2@
	cmp	DWORD PTR _rem$2817[ebp], 4
	jne	SHORT $LN2@
; Line 155
	mov	eax, DWORD PTR _t$2816[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	mov	edx, DWORD PTR _t$2816[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _t$2816[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _t$2816[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR _t$2816[ebp], ecx
$LN2@:
; Line 156
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR _keySize$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	xor	eax, DWORD PTR _t$2816[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 157
	jmp	$LN5@
$LN10@:
; Line 158
	mov	esp, ebp
	pop	ebp
	ret	4
@Aes_SetKey_Enc@12 ENDP
_TEXT	ENDS
PUBLIC	@Aes_SetKey_Dec@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$2841 = -20						; size = 4
_num$ = -16						; size = 4
_i$ = -12						; size = 4
_key$ = -8						; size = 4
_w$ = -4						; size = 4
_keySize$ = 8						; size = 4
@Aes_SetKey_Dec@12 PROC
; _w$ = ecx
; _key$ = edx
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _key$[ebp], edx
	mov	DWORD PTR _w$[ebp], ecx
; Line 163
	mov	eax, DWORD PTR _keySize$[ebp]
	push	eax
	mov	edx, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	call	@Aes_SetKey_Enc@12
; Line 164
	mov	ecx, DWORD PTR _keySize$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _num$[ebp], ecx
; Line 165
	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _w$[ebp], edx
; Line 166
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@
$LN2@:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN4@
; Line 168
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _r$2841[ebp], ecx
; Line 173
	mov	edx, DWORD PTR _r$2841[ebp]
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	mov	ecx, DWORD PTR _r$2841[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	mov	eax, DWORD PTR _D[eax*4]
	xor	eax, DWORD PTR _D[edx*4+1024]
	mov	ecx, DWORD PTR _r$2841[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	xor	eax, DWORD PTR _D[edx*4+2048]
	mov	ecx, DWORD PTR _r$2841[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	xor	eax, DWORD PTR _D[edx*4+3072]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 174
	jmp	$LN2@
$LN4@:
; Line 175
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
@Aes_SetKey_Dec@12 ENDP
_TEXT	ENDS
PUBLIC	_AesCbc_Init@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_iv$ = 12						; size = 4
_AesCbc_Init@8 PROC
; Line 226
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 228
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@AesCbc_Ini
$LN2@AesCbc_Ini:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@AesCbc_Ini:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN4@AesCbc_Ini
; Line 229
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _iv$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN2@AesCbc_Ini
$LN4@AesCbc_Ini:
; Line 230
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_AesCbc_Init@8 ENDP
; Function compile flags: /Odtp /RTCsu
_data$ = -8						; size = 4
_p$ = -4						; size = 4
_numBlocks$ = 8						; size = 4
@AesCbc_Encode@12 PROC
; _p$ = ecx
; _data$ = edx
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 234
	jmp	SHORT $LN3@
$LN2@:
	mov	eax, DWORD PTR _numBlocks$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numBlocks$[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], ecx
$LN3@:
	cmp	DWORD PTR _numBlocks$[ebp], 0
	je	$LN4@
; Line 236
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 237
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 238
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	xor	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 239
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 241
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_Aes_Encode@12
; Line 243
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 244
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 245
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 246
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 247
	jmp	$LN2@
$LN4@:
; Line 248
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
@AesCbc_Encode@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numRounds2$ = -56					; size = 4
_m$ = -48						; size = 16
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_w$ = 8							; size = 4
_dest$ = 12						; size = 4
_src$ = 16						; size = 4
_Aes_Encode@12 PROC
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _numRounds2$[ebp], ecx
; Line 186
	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR _s$[ebp], edx
; Line 188
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$[ebp+4], edx
; Line 189
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _s$[ebp+8], edx
; Line 190
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _s$[ebp+12], edx
; Line 191
	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax
$LN3@Aes_Encode:
; Line 194
	mov	ecx, DWORD PTR _s$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _T[ecx*4]
	xor	eax, DWORD PTR _T[edx*4+1024]
	mov	ecx, DWORD PTR _s$[ebp+8]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[ecx*4+2048]
	mov	edx, DWORD PTR _s$[ebp+12]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[edx*4+3072]
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], eax
	mov	edx, DWORD PTR _s$[ebp+4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp+8]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _T[edx*4]
	xor	ecx, DWORD PTR _T[eax*4+1024]
	mov	edx, DWORD PTR _s$[ebp+12]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	xor	ecx, DWORD PTR _T[edx*4+2048]
	mov	eax, DWORD PTR _s$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	xor	ecx, DWORD PTR _T[eax*4+3072]
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _m$[ebp+4], ecx
	mov	eax, DWORD PTR _s$[ebp+8]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp+12]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _T[eax*4]
	xor	edx, DWORD PTR _T[ecx*4+1024]
	mov	eax, DWORD PTR _s$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _T[eax*4+2048]
	mov	ecx, DWORD PTR _s$[ebp+4]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _T[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _m$[ebp+8], edx
	mov	ecx, DWORD PTR _s$[ebp+12]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _T[ecx*4]
	xor	eax, DWORD PTR _T[edx*4+1024]
	mov	ecx, DWORD PTR _s$[ebp+4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[ecx*4+2048]
	mov	edx, DWORD PTR _s$[ebp+8]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[edx*4+3072]
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _m$[ebp+12], eax
; Line 195
	mov	edx, DWORD PTR _numRounds2$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numRounds2$[ebp], edx
	jne	SHORT $LN1@Aes_Encode
; Line 196
	jmp	$LN2@Aes_Encode
$LN1@Aes_Encode:
; Line 197
	mov	eax, DWORD PTR _m$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _m$[ebp+4]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _T[eax*4]
	xor	edx, DWORD PTR _T[ecx*4+1024]
	mov	eax, DWORD PTR _m$[ebp+8]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _T[eax*4+2048]
	mov	ecx, DWORD PTR _m$[ebp+12]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _T[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _s$[ebp], edx
	mov	ecx, DWORD PTR _m$[ebp+4]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _T[ecx*4]
	xor	eax, DWORD PTR _T[edx*4+1024]
	mov	ecx, DWORD PTR _m$[ebp+12]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[ecx*4+2048]
	mov	edx, DWORD PTR _m$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	xor	eax, DWORD PTR _T[edx*4+3072]
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _s$[ebp+4], eax
	mov	edx, DWORD PTR _m$[ebp+8]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _m$[ebp+12]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _T[edx*4]
	xor	ecx, DWORD PTR _T[eax*4+1024]
	mov	edx, DWORD PTR _m$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	xor	ecx, DWORD PTR _T[edx*4+2048]
	mov	eax, DWORD PTR _m$[ebp+4]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	xor	ecx, DWORD PTR _T[eax*4+3072]
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _s$[ebp+8], ecx
	mov	eax, DWORD PTR _m$[ebp+12]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _m$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _T[eax*4]
	xor	edx, DWORD PTR _T[ecx*4+1024]
	mov	eax, DWORD PTR _m$[ebp+4]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _T[eax*4+2048]
	mov	ecx, DWORD PTR _m$[ebp+8]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _T[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp+12], edx
; Line 198
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _w$[ebp], ecx
; Line 199
	jmp	$LN3@Aes_Encode
$LN2@Aes_Encode:
; Line 200
	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], edx
; Line 201
	mov	eax, DWORD PTR _m$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+12]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _m$[ebp+4]
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	mov	eax, DWORD PTR _m$[ebp+8]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _m$[ebp+12]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _m$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _m$[ebp+8]
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	mov	ecx, DWORD PTR _m$[ebp+12]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _m$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _m$[ebp+4]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _Sbox[ecx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _m$[ebp+12]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _Sbox[eax]
	mov	edx, DWORD PTR _m$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _Sbox[edx]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Aes_Encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@Aes_Encode:
	DD	2
	DD	$LN8@Aes_Encode
$LN8@Aes_Encode:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@Aes_Encode
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@Aes_Encode
$LN7@Aes_Encode:
	DB	109					; 0000006dH
	DB	0
$LN6@Aes_Encode:
	DB	115					; 00000073H
	DB	0
_Aes_Encode@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_out$ = -56						; size = 16
_in$ = -32						; size = 16
_data$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_numBlocks$ = 8						; size = 4
@AesCbc_Decode@12 PROC
; _p$ = ecx
; _data$ = edx
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 253
	jmp	SHORT $LN3@
$LN2@:
	mov	eax, DWORD PTR _numBlocks$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numBlocks$[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], ecx
$LN3@:
	cmp	DWORD PTR _numBlocks$[ebp], 0
	je	$LN4@
; Line 255
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _in$[ebp], eax
; Line 256
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _in$[ebp+4], edx
; Line 257
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _in$[ebp+8], ecx
; Line 258
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _in$[ebp+12], eax
; Line 260
	lea	ecx, DWORD PTR _in$[ebp]
	push	ecx
	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_Aes_Decode@12
; Line 262
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], edx
; Line 263
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	xor	edx, DWORD PTR _out$[ebp+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 264
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	xor	edx, DWORD PTR _out$[ebp+8]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 265
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	xor	edx, DWORD PTR _out$[ebp+12]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 267
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 268
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
; Line 269
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _in$[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 270
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _in$[ebp+12]
	mov	DWORD PTR [ecx+12], edx
; Line 271
	jmp	$LN2@
$LN4@:
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@:
	DD	2
	DD	$LN8@
$LN8@:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN7@
$LN7@:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN6@:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
@AesCbc_Decode@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numRounds2$ = -56					; size = 4
_m$ = -48						; size = 16
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_w$ = 8							; size = 4
_dest$ = 12						; size = 4
_src$ = 16						; size = 4
_Aes_Decode@12 PROC
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 208
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _numRounds2$[ebp], ecx
; Line 209
	mov	edx, DWORD PTR _numRounds2$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _w$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+16]
	mov	DWORD PTR _w$[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 211
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$[ebp+4], ecx
; Line 212
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	xor	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp+8], ecx
; Line 213
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _s$[ebp+12], ecx
$LN3@Aes_Decode:
; Line 216
	mov	edx, DWORD PTR _w$[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR _w$[ebp], edx
; Line 217
	mov	eax, DWORD PTR _s$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp+12]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _D[eax*4]
	xor	edx, DWORD PTR _D[ecx*4+1024]
	mov	eax, DWORD PTR _s$[ebp+8]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _D[eax*4+2048]
	mov	ecx, DWORD PTR _s$[ebp+4]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _D[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _m$[ebp], edx
	mov	ecx, DWORD PTR _s$[ebp+4]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _D[ecx*4]
	xor	eax, DWORD PTR _D[edx*4+1024]
	mov	ecx, DWORD PTR _s$[ebp+12]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	xor	eax, DWORD PTR _D[ecx*4+2048]
	mov	edx, DWORD PTR _s$[ebp+8]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	xor	eax, DWORD PTR _D[edx*4+3072]
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _m$[ebp+4], eax
	mov	edx, DWORD PTR _s$[ebp+8]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _D[edx*4]
	xor	ecx, DWORD PTR _D[eax*4+1024]
	mov	edx, DWORD PTR _s$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[edx*4+2048]
	mov	eax, DWORD PTR _s$[ebp+12]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[eax*4+3072]
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _m$[ebp+8], ecx
	mov	eax, DWORD PTR _s$[ebp+12]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp+8]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _D[eax*4]
	xor	edx, DWORD PTR _D[ecx*4+1024]
	mov	eax, DWORD PTR _s$[ebp+4]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _D[eax*4+2048]
	mov	ecx, DWORD PTR _s$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _D[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _m$[ebp+12], edx
; Line 218
	mov	ecx, DWORD PTR _numRounds2$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _numRounds2$[ebp], ecx
	jne	SHORT $LN1@Aes_Decode
; Line 219
	jmp	$LN2@Aes_Decode
$LN1@Aes_Decode:
; Line 220
	mov	edx, DWORD PTR _m$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _m$[ebp+12]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _D[edx*4]
	xor	ecx, DWORD PTR _D[eax*4+1024]
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[edx*4+2048]
	mov	eax, DWORD PTR _m$[ebp+4]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[eax*4+3072]
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx]
	mov	DWORD PTR _s$[ebp], ecx
	mov	eax, DWORD PTR _m$[ebp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _m$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _D[eax*4]
	xor	edx, DWORD PTR _D[ecx*4+1024]
	mov	eax, DWORD PTR _m$[ebp+12]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	xor	edx, DWORD PTR _D[eax*4+2048]
	mov	ecx, DWORD PTR _m$[ebp+8]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	xor	edx, DWORD PTR _D[ecx*4+3072]
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$[ebp+4], edx
	mov	ecx, DWORD PTR _m$[ebp+8]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _D[ecx*4]
	xor	eax, DWORD PTR _D[edx*4+1024]
	mov	ecx, DWORD PTR _m$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	xor	eax, DWORD PTR _D[ecx*4+2048]
	mov	edx, DWORD PTR _m$[ebp+12]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	xor	eax, DWORD PTR _D[edx*4+3072]
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _s$[ebp+8], eax
	mov	edx, DWORD PTR _m$[ebp+12]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _m$[ebp+8]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _D[edx*4]
	xor	ecx, DWORD PTR _D[eax*4+1024]
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[edx*4+2048]
	mov	eax, DWORD PTR _m$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	xor	ecx, DWORD PTR _D[eax*4+3072]
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _s$[ebp+12], ecx
; Line 221
	jmp	$LN3@Aes_Decode
$LN2@Aes_Decode:
; Line 222
	mov	eax, DWORD PTR _m$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _InvS[eax]
	mov	edx, DWORD PTR _m$[ebp+12]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _m$[ebp+4]
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _InvS[ecx]
	mov	eax, DWORD PTR _m$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _InvS[eax]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _m$[ebp+12]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _InvS[eax]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _m$[ebp+8]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _InvS[eax]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	eax, DWORD PTR _w$[ebp]
	xor	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _m$[ebp+8]
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	mov	ecx, DWORD PTR _m$[ebp+4]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _InvS[ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _m$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _InvS[ecx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _m$[ebp+12]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _InvS[ecx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	ecx, DWORD PTR _w$[ebp]
	xor	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _m$[ebp+12]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _InvS[eax]
	mov	edx, DWORD PTR _m$[ebp+8]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp+4]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _m$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movzx	eax, BYTE PTR _InvS[edx]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	edx, DWORD PTR _w$[ebp]
	xor	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 223
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Aes_Decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@Aes_Decode:
	DD	2
	DD	$LN8@Aes_Decode
$LN8@Aes_Decode:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@Aes_Decode
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@Aes_Decode
$LN7@Aes_Decode:
	DB	109					; 0000006dH
	DB	0
$LN6@Aes_Decode:
	DB	115					; 00000073H
	DB	0
_Aes_Decode@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$2973 = -64						; size = 4
_buf$2972 = -56						; size = 16
_temp$2971 = -32					; size = 16
_data$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_numBlocks$ = 8						; size = 4
@AesCtr_Code@12 PROC
; _p$ = ecx
; _data$ = edx
; Line 275
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 276
	jmp	SHORT $LN7@
$LN6@:
	mov	eax, DWORD PTR _numBlocks$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numBlocks$[ebp], eax
$LN7@:
	cmp	DWORD PTR _numBlocks$[ebp], 0
	je	$LN8@
; Line 282
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN4@
; Line 283
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@:
; Line 285
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$2971[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_Aes_Encode@12
; Line 287
	mov	edx, DWORD PTR _temp$2971[ebp]
	mov	DWORD PTR _buf$2972[ebp], edx
; Line 288
	mov	eax, DWORD PTR _temp$2971[ebp+4]
	mov	DWORD PTR _buf$2972[ebp+4], eax
; Line 289
	mov	ecx, DWORD PTR _temp$2971[ebp+8]
	mov	DWORD PTR _buf$2972[ebp+8], ecx
; Line 290
	mov	edx, DWORD PTR _temp$2971[ebp+12]
	mov	DWORD PTR _buf$2972[ebp+12], edx
; Line 292
	mov	DWORD PTR _i$2973[ebp], 0
	jmp	SHORT $LN3@
$LN2@:
	mov	eax, DWORD PTR _i$2973[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2973[ebp], eax
$LN3@:
	cmp	DWORD PTR _i$2973[ebp], 16		; 00000010H
	jge	SHORT $LN1@
; Line 293
	mov	ecx, DWORD PTR _i$2973[ebp]
	movzx	edx, BYTE PTR _buf$2972[ebp+ecx]
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
	jmp	SHORT $LN2@
$LN1@:
; Line 294
	jmp	$LN6@
$LN8@:
; Line 295
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN13@:
	DD	2
	DD	$LN12@
$LN12@:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN10@
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN11@
$LN11@:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN10@:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
@AesCtr_Code@12 ENDP
_TEXT	ENDS
END
