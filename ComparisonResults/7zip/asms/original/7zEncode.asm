; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zEncode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
PUBLIC	?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
PUBLIC	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndSetSize
PUBLIC	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
PUBLIC	?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ	; NArchive::N7z::CEncoder::InitBindConv
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_index$73811 = -36					; size = 4
_j$73807 = -32						; size = 4
_coder$73806 = -28					; size = 4
_i$73802 = -24						; size = 4
_destOut$ = -20						; size = 4
_destIn$ = -16						; size = 4
_numOut$ = -12						; size = 4
_numIn$ = -8						; size = 4
_this$ = -4						; size = 4
?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ PROC	; NArchive::N7z::CEncoder::InitBindConv
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _numIn$[ebp], eax
; Line 22
	mov	eax, DWORD PTR _numIn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 23
	mov	ecx, DWORD PTR _numIn$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
	mov	DWORD PTR _numOut$[ebp], eax
; Line 26
	mov	edx, DWORD PTR _numOut$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 29
	mov	DWORD PTR _destIn$[ebp], 0
; Line 30
	mov	DWORD PTR _destOut$[ebp], 0
; Line 32
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _i$73802[ebp], eax
$LN5@InitBindCo:
	cmp	DWORD PTR _i$73802[ebp], 0
	je	$LN6@InitBindCo
; Line 34
	mov	eax, DWORD PTR _i$73802[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73802[ebp], eax
; Line 36
	mov	ecx, DWORD PTR _i$73802[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	DWORD PTR _coder$73806[ebp], eax
; Line 38
	mov	edx, DWORD PTR _numIn$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numIn$[ebp], edx
; Line 39
	mov	eax, DWORD PTR _coder$73806[ebp]
	mov	ecx, DWORD PTR _numOut$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _numOut$[ebp], ecx
; Line 41
	mov	edx, DWORD PTR _numIn$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _destOut$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _destOut$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _numIn$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 44
	mov	edx, DWORD PTR _destOut$[ebp]
	add	edx, 1
	mov	DWORD PTR _destOut$[ebp], edx
; Line 46
	mov	DWORD PTR _j$73807[ebp], 0
	jmp	SHORT $LN3@InitBindCo
$LN2@InitBindCo:
	mov	eax, DWORD PTR _j$73807[ebp]
	add	eax, 1
	mov	DWORD PTR _j$73807[ebp], eax
	mov	ecx, DWORD PTR _destIn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destIn$[ebp], ecx
$LN3@InitBindCo:
	mov	edx, DWORD PTR _coder$73806[ebp]
	mov	eax, DWORD PTR _j$73807[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN1@InitBindCo
; Line 48
	mov	ecx, DWORD PTR _numOut$[ebp]
	add	ecx, DWORD PTR _j$73807[ebp]
	mov	DWORD PTR _index$73811[ebp], ecx
; Line 49
	mov	edx, DWORD PTR _index$73811[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _destIn$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	jmp	SHORT $LN2@InitBindCo
$LN1@InitBindCo:
; Line 52
	jmp	$LN5@InitBindCo
$LN6@InitBindCo:
; Line 53
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ ENDP	; NArchive::N7z::CEncoder::InitBindConv
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ PROC ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	add	eax, esi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ENDP ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@I@@QAEPAIXZ			; CObjArray2<unsigned int>::operator unsigned int *
PUBLIC	?SetSize@?$CObjArray2@I@@QAEXI@Z		; CObjArray2<unsigned int>::SetSize
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
PUBLIC	?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
PUBLIC	?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize
PUBLIC	?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z ; NArchive::N7z::CEncoder::SetFolder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_coderStreamsInfo$73826 = -24				; size = 4
_coderInfo$73825 = -20					; size = 4
_mixerBond$73821 = -16					; size = 4
_fb$73820 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_folder$ = 8						; size = 4
?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z PROC ; NArchive::N7z::CEncoder::SetFolder
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 57
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	push	eax
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize
; Line 61
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@SetFolder
$LN8@SetFolder:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@SetFolder:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@SetFolder
; Line 63
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _fb$73820[ebp], edx
; Line 64
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	DWORD PTR _mixerBond$73821[ebp], eax
; Line 65
	mov	eax, DWORD PTR _mixerBond$73821[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR _fb$73820[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
; Line 66
	mov	ecx, DWORD PTR _mixerBond$73821[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _fb$73820[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 67
	jmp	$LN8@SetFolder
$LN7@SetFolder:
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	push	eax
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
; Line 71
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@SetFolder
$LN5@SetFolder:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@SetFolder:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@SetFolder
; Line 73
	mov	ecx, DWORD PTR _folder$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR _coderInfo$73825[ebp], eax
; Line 74
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	DWORD PTR _coderStreamsInfo$73826[ebp], eax
; Line 76
	mov	edx, DWORD PTR _coderInfo$73825[ebp]
	mov	eax, DWORD PTR _coderStreamsInfo$73826[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+16], ecx
; Line 77
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _coderInfo$73825[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
; Line 79
	jmp	SHORT $LN5@SetFolder
$LN4@SetFolder:
; Line 81
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	push	eax
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetSize@?$CObjArray2@I@@QAEXI@Z	; CObjArray2<unsigned int>::SetSize
; Line 83
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SetFolder
$LN2@SetFolder:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@SetFolder:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN10@SetFolder
; Line 84
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QAEPAIXZ		; CObjArray2<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN2@SetFolder
$LN10@SetFolder:
; Line 85
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z ENDP ; NArchive::N7z::CEncoder::SetFolder
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z ; NArchive::N7z::CMtEncMultiProgress::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progress$ = 8						; size = 4
?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z PROC ; NArchive::N7z::CMtEncMultiProgress::Init
; _this$ = ecx
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
; Line 104
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z ENDP ; NArchive::N7z::CMtEncMultiProgress::Init
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
PUBLIC	?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z ; NArchive::N7z::CMtEncMultiProgress::SetRatioInfo
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -32						; size = 4
_lock$73853 = -24					; size = 4
_outSize2$ = -12					; size = 8
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z PROC ; NArchive::N7z::CMtEncMultiProgress::SetRatioInfo
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _lock$73853[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _outSize2$[ebp], edx
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _outSize2$[ebp+4], eax
; Line 114
	lea	ecx, DWORD PTR _lock$73853[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN1@SetRatioIn
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv78[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _outSize2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@SetRatioIn
$LN1@SetRatioIn:
; Line 119
	xor	eax, eax
$LN2@SetRatioIn:
; Line 120
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@SetRatioIn:
	DD	2
	DD	$LN6@SetRatioIn
$LN6@SetRatioIn:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@SetRatioIn
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@SetRatioIn
$LN5@SetRatioIn:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN4@SetRatioIn:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z ENDP ; NArchive::N7z::CMtEncMultiProgress::SetRatioInfo
_TEXT	ENDS
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??0?$CBuffer@E@@QAE@I@Z				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
PUBLIC	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
PUBLIC	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
PUBLIC	??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ	; CMyComPtr<IUnknown>::operator IUnknown *
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
PUBLIC	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
PUBLIC	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
PUBLIC	??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
PUBLIC	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
PUBLIC	??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ	; CMyComPtr<ICompressCoder2>::operator!
PUBLIC	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ	; CMyComPtr<ICompressCoder>::operator!
PUBLIC	??1CCreatedCoder@@QAE@XZ			; CCreatedCoder::~CCreatedCoder
PUBLIC	??0CCreatedCoder@@QAE@XZ			; CCreatedCoder::CCreatedCoder
PUBLIC	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
PUBLIC	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
PUBLIC	??0CMixerMT@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixerMT::CMixerMT
PUBLIC	?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z ; NArchive::N7z::CEncoder::CreateMixerCoder
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_IID_ICryptoSetPassword:BYTE
EXTRN	_IID_ICompressSetCoderMt:BYTE
EXTRN	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z:PROC	; CreateCoder
EXTRN	??0CMixerST@NCoderMixer2@@QAE@_N@Z:PROC		; NCoderMixer2::CMixerST::CMixerST
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__ehfuncinfo$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$6
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv289 = -204						; size = 4
tv223 = -200						; size = 4
tv206 = -196						; size = 4
tv146 = -192						; size = 4
tv134 = -188						; size = 4
tv91 = -184						; size = 4
tv92 = -180						; size = 4
tv77 = -176						; size = 4
$T76091 = -172						; size = 4
$T76090 = -168						; size = 4
$T76089 = -164						; size = 4
$T76086 = -160						; size = 4
$T76085 = -156						; size = 4
$T76084 = -152						; size = 4
$T76079 = -148						; size = 4
$T76078 = -144						; size = 4
$T76073 = -140						; size = 4
$T76072 = -136						; size = 4
___result_$73962 = -132					; size = 4
_c$73957 = -128						; size = 2
_i$73953 = -124						; size = 4
_buffer$73952 = -116					; size = 8
_sizeInBytes$73951 = -104				; size = 4
_cryptoSetPassword$73945 = -96				; size = 4
___result_$73940 = -88					; size = 4
___result_$73936 = -84					; size = 4
_setCoderMt$73930 = -76					; size = 4
_encoderCommon$73890 = -64				; size = 4
___result_$73879 = -56					; size = 4
_cod$73878 = -48					; size = 16
_methodFull$73877 = -28					; size = 4
_i$73873 = -24						; size = 4
___result_$73870 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inSizeForReduce$ = 8					; size = 4
?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z PROC ; NArchive::N7z::CEncoder::CreateMixerCoder
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 127
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	$LN17@CreateMixe
; Line 133
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76073[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76073[ebp], 0
	je	SHORT $LN20@CreateMixe
	push	1
	mov	ecx, DWORD PTR $T76073[ebp]
	call	??0CMixerMT@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixerMT::CMixerMT
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN21@CreateMixe
$LN20@CreateMixe:
	mov	DWORD PTR tv77[ebp], 0
$LN21@CreateMixe:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T76072[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76072[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv92[ebp], edx
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN22@CreateMixe
	mov	eax, DWORD PTR tv92[ebp]
	add	eax, 4
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN23@CreateMixe
$LN22@CreateMixe:
	mov	DWORD PTR tv91[ebp], 0
$LN23@CreateMixe:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 138
	jmp	$LN16@CreateMixe
$LN17@CreateMixe:
; Line 143
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76079[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T76079[ebp], 0
	je	SHORT $LN24@CreateMixe
	push	1
	mov	ecx, DWORD PTR $T76079[ebp]
	call	??0CMixerST@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixerST::CMixerST
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN25@CreateMixe
$LN24@CreateMixe:
	mov	DWORD PTR tv134[ebp], 0
$LN25@CreateMixe:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T76078[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T76078[ebp]
	mov	DWORD PTR [ecx], edx
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 145
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN26@CreateMixe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR tv146[ebp], ecx
	jmp	SHORT $LN27@CreateMixe
$LN26@CreateMixe:
	mov	DWORD PTR tv146[ebp], 0
$LN27@CreateMixe:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR [edx+8], eax
$LN16@CreateMixe:
; Line 149
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73870[ebp], eax
	cmp	DWORD PTR ___result_$73870[ebp], 0
	je	SHORT $LN15@CreateMixe
	mov	eax, DWORD PTR ___result_$73870[ebp]
	jmp	$LN18@CreateMixe
$LN15@CreateMixe:
; Line 151
	mov	DWORD PTR _i$73873[ebp], 0
	jmp	SHORT $LN14@CreateMixe
$LN13@CreateMixe:
	mov	ecx, DWORD PTR _i$73873[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73873[ebp], ecx
$LN14@CreateMixe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	DWORD PTR _i$73873[ebp], eax
	jae	$LN12@CreateMixe
; Line 153
	mov	edx, DWORD PTR _i$73873[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	DWORD PTR _methodFull$73877[ebp], eax
; Line 155
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 159
	lea	eax, DWORD PTR _cod$73878[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _methodFull$73877[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	push	eax
	call	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR ___result_$73879[ebp], eax
	cmp	DWORD PTR ___result_$73879[ebp], 0
	je	SHORT $LN11@CreateMixe
	mov	ecx, DWORD PTR ___result_$73879[ebp]
	mov	DWORD PTR $T76084[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76084[ebp]
	jmp	$LN18@CreateMixe
$LN11@CreateMixe:
; Line 161
	mov	edx, DWORD PTR _methodFull$73877[ebp]
	mov	eax, DWORD PTR _cod$73878[ebp+12]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN10@CreateMixe
; Line 162
	mov	DWORD PTR $T76085[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76085[ebp]
	jmp	$LN18@CreateMixe
$LN10@CreateMixe:
; Line 163
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@CreateMixe
	lea	ecx, DWORD PTR _cod$73878[ebp+4]
	call	??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ; CMyComPtr<ICompressCoder2>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@CreateMixe
; Line 164
	mov	DWORD PTR $T76086[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76086[ebp]
	jmp	$LN18@CreateMixe
$LN9@CreateMixe:
; Line 166
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN28@CreateMixe
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN29@CreateMixe
$LN28@CreateMixe:
	lea	ecx, DWORD PTR _cod$73878[ebp+4]
	call	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
	mov	DWORD PTR tv206[ebp], eax
$LN29@CreateMixe:
	mov	eax, DWORD PTR tv206[ebp]
	push	eax
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 170
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 171
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderMt
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
; Line 172
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
	test	eax, eax
	je	SHORT $LN8@CreateMixe
; Line 174
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
	mov	DWORD PTR tv223[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR tv223[ebp]
	push	eax
	mov	ecx, DWORD PTR tv223[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73936[ebp], eax
	cmp	DWORD PTR ___result_$73936[ebp], 0
	je	SHORT $LN8@CreateMixe
	mov	ecx, DWORD PTR ___result_$73936[ebp]
	mov	DWORD PTR $T76089[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76089[ebp]
	jmp	$LN18@CreateMixe
$LN8@CreateMixe:
; Line 176
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Line 179
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *
	push	eax
	mov	edx, DWORD PTR _inSizeForReduce$[ebp]
	push	edx
	mov	eax, DWORD PTR _methodFull$73877[ebp]
	push	eax
	call	?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z ; NArchive::N7z::SetCoderProps2
	mov	DWORD PTR ___result_$73940[ebp], eax
	cmp	DWORD PTR ___result_$73940[ebp], 0
	je	SHORT $LN6@CreateMixe
	mov	ecx, DWORD PTR ___result_$73940[ebp]
	mov	DWORD PTR $T76090[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76090[ebp]
	jmp	$LN18@CreateMixe
$LN6@CreateMixe:
; Line 203
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 204
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
	push	eax
	push	OFFSET _IID_ICryptoSetPassword
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
; Line 206
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
	test	eax, eax
	je	$LN5@CreateMixe
; Line 208
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Len@UString@@QBEIXZ			; UString::Len
	shl	eax, 1
	mov	DWORD PTR _sizeInBytes$73951[ebp], eax
; Line 209
	mov	edx, DWORD PTR _sizeInBytes$73951[ebp]
	push	edx
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??0?$CBuffer@E@@QAE@I@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 210
	mov	DWORD PTR _i$73953[ebp], 0
	jmp	SHORT $LN4@CreateMixe
$LN3@CreateMixe:
	mov	eax, DWORD PTR _i$73953[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73953[ebp], eax
$LN4@CreateMixe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$73953[ebp], eax
	jae	SHORT $LN2@CreateMixe
; Line 212
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$73953[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$73957[ebp], dx
; Line 213
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _i$73953[ebp]
	mov	dl, BYTE PTR _c$73957[ebp]
	mov	BYTE PTR [eax+ecx*2], dl
; Line 214
	movzx	ebx, WORD PTR _c$73957[ebp]
	sar	ebx, 8
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _i$73953[ebp]
	mov	BYTE PTR [eax+ecx*2+1], bl
; Line 215
	jmp	SHORT $LN3@CreateMixe
$LN2@CreateMixe:
; Line 216
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv289[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _sizeInBytes$73951[ebp]
	push	edx
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	eax, DWORD PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv289[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73962[ebp], eax
	cmp	DWORD PTR ___result_$73962[ebp], 0
	je	SHORT $LN1@CreateMixe
	mov	ecx, DWORD PTR ___result_$73962[ebp]
	mov	DWORD PTR $T76091[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T76091[ebp]
	jmp	SHORT $LN18@CreateMixe
$LN1@CreateMixe:
; Line 217
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
$LN5@CreateMixe:
; Line 219
	mov	esi, esp
	lea	edx, DWORD PTR _cod$73878[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 220
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$73878[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	jmp	$LN13@CreateMixe
$LN12@CreateMixe:
; Line 221
	xor	eax, eax
$LN18@CreateMixe:
; Line 222
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@CreateMixe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN44@CreateMixe:
	DD	5
	DD	$LN43@CreateMixe
$LN43@CreateMixe:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN37@CreateMixe
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN38@CreateMixe
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN39@CreateMixe
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN40@CreateMixe
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN41@CreateMixe
$LN41@CreateMixe:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN40@CreateMixe:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN39@CreateMixe:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	0
$LN38@CreateMixe:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN37@CreateMixe:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0:
	mov	eax, DWORD PTR $T76073[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1:
	mov	eax, DWORD PTR $T76079[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$2:
	lea	ecx, DWORD PTR _cod$73878[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$3:
	lea	ecx, DWORD PTR _encoderCommon$73890[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$4:
	lea	ecx, DWORD PTR _setCoderMt$73930[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$5:
	lea	ecx, DWORD PTR _cryptoSetPassword$73945[ebp]
	jmp	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
__unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$6:
	lea	ecx, DWORD PTR _buffer$73952[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z ENDP ; NArchive::N7z::CEncoder::CreateMixerCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
PUBLIC	??1CMixer@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
PUBLIC	??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
PUBLIC	??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@		; NCoderMixer2::CMixerMT::`vftable'
PUBLIC	??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerMT::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0CMixer@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixer::CMixer
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMixerMT@NCoderMixer2@@@8		; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
PUBLIC	??_R3CMixerMT@NCoderMixer2@@8			; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixerMT@NCoderMixer2@@8			; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8		; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMixer@NCoderMixer2@@@8			; NCoderMixer2::CMixer `RTTI Type Descriptor'
PUBLIC	??_R3CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1GI@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ; NCoderMixer2::CMixerMT::QueryInterface
PUBLIC	?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerMT::AddRef
PUBLIC	?Release@CMixerMT@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerMT::Release
PUBLIC	??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
PUBLIC	?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerMT::SetCoderInfo
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z:PROC ; NCoderMixer2::CMixerMT::SetBindInfo
EXTRN	?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z:PROC ; NCoderMixer2::CMixerMT::AddCoder
EXTRN	?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z:PROC ; NCoderMixer2::CMixerMT::GetCoder
EXTRN	?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z:PROC ; NCoderMixer2::CMixerMT::SelectMainCoder
EXTRN	?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ:PROC	; NCoderMixer2::CMixerMT::ReInit
EXTRN	?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCoderMixer2::CMixerMT::Code
EXTRN	?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z:PROC ; NCoderMixer2::CMixerMT::GetBondStreamSize
;	COMDAT ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ DD 00H		; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1GI@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
	DD	00H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixer@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixer@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixer@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixer@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixer@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixerMT@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMixer@NCoderMixer2@@8
	DD	FLAT:??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixerMT@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixerMT@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixerMT@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixerMT@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@
rdata$r	SEGMENT
??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ DD 00H	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
CONST	SEGMENT
??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ DD FLAT:??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; NCoderMixer2::CMixerMT::`vftable'
	DD	FLAT:?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	DD	FLAT:?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z
	DD	FLAT:?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z
	DD	FLAT:?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ
	DD	FLAT:?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
	DD	FLAT:?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	DD	FLAT:?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z
CONST	ENDS
;	COMDAT ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
CONST	SEGMENT
??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ DD FLAT:??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; NCoderMixer2::CMixerMT::`vftable'
	DD	FLAT:?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
	DD	FLAT:?Release@CMixerMT@NCoderMixer2@@UAGKXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMixerMT@NCoderMixer2@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixerMT@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixerMT::CMixerMT, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	movzx	eax, BYTE PTR _encodeMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMixer@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixer::CMixer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
__ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixerMT@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixerMT::CMixerMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
PUBLIC	??0CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::CBindInfo
PUBLIC	??_7CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`vftable'
PUBLIC	??_R4CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
PUBLIC	?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixer::SetBindInfo
EXTRN	__purecall:PROC
;	COMDAT ??_R4CMixer@NCoderMixer2@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R4CMixer@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixer@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixer@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CMixer@NCoderMixer2@@6B@ DD FLAT:??_R4CMixer@NCoderMixer2@@6B@ ; NCoderMixer2::CMixer::`vftable'
	DD	FLAT:?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMixer@NCoderMixer2@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixer@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixer::CMixer, COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMixer@NCoderMixer2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _encodeMode$[ebp]
	mov	BYTE PTR [ecx+92], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixer@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixer::CMixer
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
PUBLIC	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z	; NCoderMixer2::CBindInfo::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bindInfo$ = 8						; size = 4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z PROC ; NCoderMixer2::CMixer::SetBindInfo, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	mov	eax, DWORD PTR _bindInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
; Line 267
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 269
	xor	eax, eax
; Line 270
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ENDP ; NCoderMixer2::CMixer::SetBindInfo
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
PUBLIC	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::CBindInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned int>::operator=
PUBLIC	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
PUBLIC	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z PROC	; NCoderMixer2::CBindInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ENDP	; NCoderMixer2::CBindInfo::operator=
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z PROC ; NCoderMixer2::CMixerMT::QueryInterface, COMDAT
; Line 415
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCoderMixer2::CMixerMT::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerMT::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerMT::AddRef
_TEXT	ENDS
PUBLIC	??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CMixerMT::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMixerMT@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76185 = -8						; size = 4
$T76184 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMixerMT@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerMT::Release, COMDAT
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76185[ebp], edx
	mov	eax, DWORD PTR $T76185[ebp]
	mov	DWORD PTR $T76184[ebp], eax
	cmp	DWORD PTR $T76184[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T76184[ebp]
	call	??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMixerMT@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerMT::Release
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
EXTRN	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z:PROC ; NCoderMixer2::CCoder::SetCoderInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
_unpackSize$ = 12					; size = 4
_packSizes$ = 16					; size = 4
?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z PROC ; NCoderMixer2::CMixerMT::SetCoderInfo, COMDAT
; _this$ = ecx
; Line 423
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _packSizes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 24					; 00000018H
	mov	ecx, eax
	call	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ENDP ; NCoderMixer2::CMixerMT::SetCoderInfo
_TEXT	ENDS
PUBLIC	??1CMixerMT@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CMixerMT::~CMixerMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CMixerMT::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMixerMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CMixerMT::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMixer@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixer@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixer::~CMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixer@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMixerMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixerMT@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixerMT::~CMixerMT, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CMixer@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
__ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixerMT@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixerMT::~CMixerMT
PUBLIC	?AreThereNonOptionalProps@CProps@@QBE_NXZ	; CProps::AreThereNonOptionalProps
PUBLIC	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
PUBLIC	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
EXTRN	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:PROC ; CProps::SetCoderProps
EXTRN	_IID_ICompressSetCoderProperties:BYTE
xdata$x	SEGMENT
__unwindtable$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z$0
__ehfuncinfo$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76217 = -32						; size = 4
$T76216 = -28						; size = 4
_setCoderProperties$ = -20				; size = 4
__$EHRec$ = -12						; size = 12
_props$ = 8						; size = 4
_dataSizeReduce$ = 12					; size = 4
_coder$ = 16						; size = 4
?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z PROC ; NArchive::N7z::SetCoderProps2
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 90
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 91
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 92
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _coder$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 93
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	SHORT $LN1@SetCoderPr
; Line 94
	mov	ecx, DWORD PTR _dataSizeReduce$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _props$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR $T76216[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	eax, DWORD PTR $T76216[ebp]
	jmp	SHORT $LN2@SetCoderPr
$LN1@SetCoderPr:
; Line 95
	mov	ecx, DWORD PTR _props$[ebp]
	call	?AreThereNonOptionalProps@CProps@@QBE_NXZ ; CProps::AreThereNonOptionalProps
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	and	edx, -2147024809			; 80070057H
	mov	DWORD PTR $T76217[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	eax, DWORD PTR $T76217[ebp]
$LN2@SetCoderPr:
; Line 96
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetCoderPr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@SetCoderPr:
	DD	1
	DD	$LN7@SetCoderPr
$LN7@SetCoderPr:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@SetCoderPr
$LN5@SetCoderPr:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z$0:
	lea	ecx, DWORD PTR _setCoderProperties$[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z ENDP ; NArchive::N7z::SetCoderProps2
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreThereNonOptionalProps@CProps@@QBE_NXZ
_TEXT	SEGMENT
_i$70814 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereNonOptionalProps@CProps@@QBE_NXZ PROC		; CProps::AreThereNonOptionalProps, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	mov	DWORD PTR _i$70814[ebp], 0
	jmp	SHORT $LN4@AreThereNo
$LN3@AreThereNo:
	mov	eax, DWORD PTR _i$70814[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70814[ebp], eax
$LN4@AreThereNo:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	cmp	DWORD PTR _i$70814[ebp], eax
	jae	SHORT $LN2@AreThereNo
; Line 36
	mov	ecx, DWORD PTR _i$70814[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	edx, BYTE PTR [eax+4]
	test	edx, edx
	jne	SHORT $LN1@AreThereNo
; Line 37
	mov	al, 1
	jmp	SHORT $LN5@AreThereNo
$LN1@AreThereNo:
; Line 38
	jmp	SHORT $LN3@AreThereNo
$LN2@AreThereNo:
	xor	al, al
$LN5@AreThereNo:
; Line 39
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereNonOptionalProps@CProps@@QBE_NXZ ENDP		; CProps::AreThereNonOptionalProps
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??0CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??0CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::CCreatedCoder
PUBLIC	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??1CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::~CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::~CCreatedCoder
PUBLIC	?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CMtEncMultiProgress::AddOutSize
PUBLIC	?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::Write
EXTRN	?Write@CInOutTempBuffer@@QAE_NPBXI@Z:PROC	; CInOutTempBuffer::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processed$ = 20					; size = 4
?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::Write
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 242
	push	ebp
	mov	ebp, esp
; Line 243
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Write@CInOutTempBuffer@@QAE_NPBXI@Z	; CInOutTempBuffer::Write
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Write
; Line 245
	cmp	DWORD PTR _processed$[ebp], 0
	je	SHORT $LN3@Write
; Line 246
	mov	ecx, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Write:
; Line 247
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN5@Write
$LN4@Write:
; Line 249
	cmp	DWORD PTR _processed$[ebp], 0
	je	SHORT $LN2@Write
; Line 250
	mov	edx, DWORD PTR _processed$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@Write:
; Line 251
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN1@Write
; Line 252
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CMtEncMultiProgress::AddOutSize
$LN1@Write:
; Line 253
	xor	eax, eax
$LN5@Write:
; Line 254
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z
_TEXT	SEGMENT
_lock$ = -12						; size = 4
_this$ = -4						; size = 4
_addOutSize$ = 8					; size = 8
?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z PROC ; NArchive::N7z::CMtEncMultiProgress::AddOutSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.h
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 34
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Line 36
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _addOutSize$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	adc	eax, DWORD PTR _addOutSize$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	DWORD PTR [ecx+44], eax
; Line 37
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AddOutSize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN6@AddOutSize:
	DD	1
	DD	$LN5@AddOutSize
$LN5@AddOutSize:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@AddOutSize
$LN4@AddOutSize:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ENDP ; NArchive::N7z::CMtEncMultiProgress::AddOutSize
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CSequentialOutMtNotify::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -20						; size = 4
_res$ = -16						; size = 4
_realProcessed$ = -8					; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processed$ = 20					; size = 4
?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z PROC ; NArchive::N7z::CSequentialOutMtNotify::Write
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 273
	mov	DWORD PTR _realProcessed$[ebp], 0
; Line 274
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 275
	cmp	DWORD PTR _processed$[ebp], 0
	je	SHORT $LN2@Write@2
; Line 276
	mov	ecx, DWORD PTR _processed$[ebp]
	mov	edx, DWORD PTR _realProcessed$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@Write@2:
; Line 277
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Write@2
; Line 278
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CMtEncMultiProgress::AddOutSize
$LN1@Write@2:
; Line 279
	mov	eax, DWORD PTR _res$[ebp]
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Write@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@Write@2:
	DD	1
	DD	$LN6@Write@2
$LN6@Write@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Write@2
$LN5@Write@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z ENDP ; NArchive::N7z::CSequentialOutMtNotify::Write
_TEXT	ENDS
PUBLIC	?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ	; CSequentialInStreamSizeCount2::GetSize
PUBLIC	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
PUBLIC	?GetDataSize@CInOutTempBuffer@@QBE_KXZ		; CInOutTempBuffer::GetDataSize
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ	; CSequentialOutStreamSizeCount::GetSize
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ	; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
PUBLIC	??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
PUBLIC	?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front
PUBLIC	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
PUBLIC	?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add
PUBLIC	?Init@CSequentialOutStreamSizeCount@@QAEXXZ	; CSequentialOutStreamSizeCount::Init
PUBLIC	?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z ; CSequentialOutStreamSizeCount::SetStream
PUBLIC	??0CSequentialOutStreamSizeCount@@QAE@XZ	; CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount
PUBLIC	??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[]
PUBLIC	?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify
PUBLIC	??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress
PUBLIC	??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>
PUBLIC	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->
PUBLIC	?Init@CDynBufSeqOutStream@@QAEXXZ		; CDynBufSeqOutStream::Init
PUBLIC	??0CDynBufSeqOutStream@@QAE@XZ			; CDynBufSeqOutStream::CDynBufSeqOutStream
PUBLIC	??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
PUBLIC	??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
PUBLIC	??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator->
PUBLIC	??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator ICryptoResetInitVector *
PUBLIC	??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>
PUBLIC	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
PUBLIC	??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamSizeCount2::Init
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CSequentialInStreamSizeCount2@@QAE@XZ	; CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add
PUBLIC	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
PUBLIC	?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::Init
PUBLIC	??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ; CObjectVector<CInOutTempBuffer>::operator[]
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2
PUBLIC	?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ ; CObjectVector<CInOutTempBuffer>::AddNew
PUBLIC	??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
PUBLIC	??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ	; CObjectVector<CInOutTempBuffer>::CObjectVector<CInOutTempBuffer>
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ		; CMyComPtr<IUnknown>::operator!
PUBLIC	?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ	; NArchive::N7z::CEncoder::EncoderConstr
PUBLIC	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode
EXTRN	?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z:PROC ; CInOutTempBuffer::WriteToStream
EXTRN	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z:PROC ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
EXTRN	?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z:PROC ; CDynBufSeqOutStream::CopyToBuffer
EXTRN	_IID_ICompressWriteCoderProperties:BYTE
EXTRN	_IID_ICryptoResetInitVector:BYTE
EXTRN	?InitWriting@CInOutTempBuffer@@QAEXXZ:PROC	; CInOutTempBuffer::InitWriting
EXTRN	?Create@CInOutTempBuffer@@QAEXXZ:PROC		; CInOutTempBuffer::Create
xdata$x	SEGMENT
__ehfuncinfo$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$14
	DD	0aH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$15
	DD	0aH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$16
	DD	0aH
	DD	FLAT:__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$17
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv442 = -400						; size = 4
tv408 = -396						; size = 4
tv396 = -392						; size = 4
tv366 = -388						; size = 4
tv351 = -384						; size = 4
tv317 = -380						; size = 4
tv305 = -376						; size = 4
tv275 = -372						; size = 4
tv194 = -368						; size = 4
tv157 = -364						; size = 4
$T76290 = -360						; size = 4
$T76289 = -356						; size = 4
$T76288 = -352						; size = 4
$T76281 = -348						; size = 4
$T76280 = -344						; size = 4
$T76277 = -340						; size = 4
$T76276 = -336						; size = 4
$T76273 = -332						; size = 4
$T76272 = -328						; size = 4
$T76269 = -324						; size = 4
$T76268 = -320						; size = 4
$T76265 = -316						; size = 4
$T76264 = -312						; size = 4
$T76261 = -308						; size = 4
$T76260 = -304						; size = 4
_streamSize$74352 = -300				; size = 8
_bond$74351 = -292					; size = 4
___result_$74344 = -288					; size = 4
_inOutTempBuffer$74343 = -284				; size = 4
___result_$74334 = -280					; size = 4
_i$74321 = -276						; size = 4
_useMtProgress$ = -269					; size = 1
_mainCoder$ = -268					; size = 4
_dynOutStream$74307 = -260				; size = 4
_outStreamSpec$74301 = -252				; size = 4
_props$74299 = -248					; size = 4
_writeCoderProperties$74297 = -240			; size = 4
_resetInitVector$74293 = -228				; size = 4
_coder$74291 = -220					; size = 4
_outStreamPointers$ = -212				; size = 12
_inStreamPointer$ = -192				; size = 4
_outStreamSizeCount$ = -180				; size = 4
_outStreamSizeCountSpec$ = -172				; size = 4
_inStreamSizeCount$ = -164				; size = 4
_inStreamSizeCountSpec$ = -156				; size = 4
_tempBuffer$74271 = -148				; size = 4
_tempBufferSpec$74265 = -136				; size = 4
_iotb$74261 = -128					; size = 4
_i$ = -124						; size = 4
_numMethods$ = -120					; size = 4
_tempBuffers$ = -112					; size = 12
_tempBufferSpecs$ = -92					; size = 12
_inOutTempBuffers$ = -72				; size = 12
_mtOutStreamNotify$ = -52				; size = 4
_mtOutStreamNotifySpec$ = -44				; size = 4
_mtProgress$ = -36					; size = 4
_mtProgressSpec$ = -28					; size = 4
___result_$74110 = -24					; size = 4
___result_$74106 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_inSizeForReduce$ = 12					; size = 4
_folderItem$ = 16					; size = 4
_coderUnpackSizes$ = 20					; size = 4
_unpackSize$ = 24					; size = 4
_outStream$ = 28					; size = 4
_packSizes$ = 32					; size = 4
_compressProgress$ = 36					; size = 4
?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z PROC ; NArchive::N7z::CEncoder::Encode
; _this$ = ecx
; Line 295
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 388				; 00000184H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 296
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ ; NArchive::N7z::CEncoder::EncoderConstr
	mov	DWORD PTR ___result_$74106[ebp], eax
	cmp	DWORD PTR ___result_$74106[ebp], 0
	je	SHORT $LN38@Encode
	mov	eax, DWORD PTR ___result_$74106[ebp]
	jmp	$LN39@Encode
$LN38@Encode:
; Line 298
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ	; CMyComPtr<IUnknown>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@Encode
; Line 300
	mov	ecx, DWORD PTR _inSizeForReduce$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z ; NArchive::N7z::CEncoder::CreateMixerCoder
	mov	DWORD PTR ___result_$74110[ebp], eax
	cmp	DWORD PTR ___result_$74110[ebp], 0
	je	SHORT $LN37@Encode
	mov	eax, DWORD PTR ___result_$74110[ebp]
	jmp	$LN39@Encode
$LN37@Encode:
; Line 303
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 305
	mov	DWORD PTR _mtProgressSpec$[ebp], 0
; Line 306
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 308
	mov	DWORD PTR _mtOutStreamNotifySpec$[ebp], 0
; Line 309
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 311
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::CObjectVector<CInOutTempBuffer>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 312
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 313
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 315
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _numMethods$[ebp], eax
; Line 319
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN35@Encode
$LN34@Encode:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN35@Encode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN33@Encode
; Line 321
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ ; CObjectVector<CInOutTempBuffer>::AddNew
	mov	DWORD PTR _iotb$74261[ebp], eax
; Line 322
	mov	ecx, DWORD PTR _iotb$74261[ebp]
	call	?Create@CInOutTempBuffer@@QAEXXZ	; CInOutTempBuffer::Create
; Line 323
	mov	ecx, DWORD PTR _iotb$74261[ebp]
	call	?InitWriting@CInOutTempBuffer@@QAEXXZ	; CInOutTempBuffer::InitWriting
; Line 324
	jmp	SHORT $LN34@Encode
$LN33@Encode:
; Line 326
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN32@Encode
$LN31@Encode:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN32@Encode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN30@Encode
; Line 328
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76261[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T76261[ebp], 0
	je	SHORT $LN41@Encode
	mov	ecx, DWORD PTR $T76261[ebp]
	call	??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN42@Encode
$LN41@Encode:
	mov	DWORD PTR tv157[ebp], 0
$LN42@Encode:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T76260[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T76260[ebp]
	mov	DWORD PTR _tempBufferSpec$74265[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _tempBufferSpec$74265[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempBuffer$74271[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 330
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ; CObjectVector<CInOutTempBuffer>::operator[]
	push	eax
	mov	ecx, DWORD PTR _tempBufferSpec$74265[ebp]
	call	?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::Init
; Line 331
	lea	ecx, DWORD PTR _tempBuffer$74271[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
; Line 332
	lea	edx, DWORD PTR _tempBufferSpec$74265[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add
; Line 333
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _tempBuffer$74271[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN31@Encode
$LN30@Encode:
; Line 335
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@Encode
$LN28@Encode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN29@Encode:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numMethods$[ebp]
	jae	SHORT $LN27@Encode
; Line 336
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN28@Encode
$LN27@Encode:
; Line 349
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76265[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T76265[ebp], 0
	je	SHORT $LN43@Encode
	mov	ecx, DWORD PTR $T76265[ebp]
	call	??0CSequentialInStreamSizeCount2@@QAE@XZ
	mov	DWORD PTR tv194[ebp], eax
	jmp	SHORT $LN44@Encode
$LN43@Encode:
	mov	DWORD PTR tv194[ebp], 0
$LN44@Encode:
	mov	ecx, DWORD PTR tv194[ebp]
	mov	DWORD PTR $T76264[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T76264[ebp]
	mov	DWORD PTR _inStreamSizeCountSpec$[ebp], edx
; Line 350
	mov	eax, DWORD PTR _inStreamSizeCountSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 352
	mov	DWORD PTR _outStreamSizeCountSpec$[ebp], 0
; Line 353
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 355
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inStreamSizeCountSpec$[ebp]
	call	?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamSizeCount2::Init
; Line 357
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR _inStreamPointer$[ebp], eax
; Line 358
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 360
	mov	edx, DWORD PTR _folderItem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z ; NArchive::N7z::CEncoder::SetFolder
; Line 362
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@Encode
$LN25@Encode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN26@Encode:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numMethods$[ebp]
	jae	$LN24@Encode
; Line 364
	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
	mov	DWORD PTR _coder$74291[ebp], eax
; Line 366
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	call	??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 367
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	call	??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICryptoResetInitVector
	mov	ecx, DWORD PTR _coder$74291[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _coder$74291[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 368
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	call	??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator ICryptoResetInitVector *
	test	eax, eax
	je	SHORT $LN23@Encode
; Line 370
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	call	??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator->
	mov	DWORD PTR tv275[ebp], eax
	mov	edx, DWORD PTR tv275[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv275[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@Encode:
; Line 373
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	call	??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 374
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	call	??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressWriteCoderProperties
	mov	eax, DWORD PTR _coder$74291[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _coder$74291[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 376
	mov	ecx, DWORD PTR _folderItem$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
	mov	ecx, DWORD PTR _numMethods$[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	lea	edx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _props$74299[ebp], edx
; Line 378
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	call	??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
	test	eax, eax
	je	$LN22@Encode
; Line 380
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76269[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T76269[ebp], 0
	je	SHORT $LN45@Encode
	mov	ecx, DWORD PTR $T76269[ebp]
	call	??0CDynBufSeqOutStream@@QAE@XZ		; CDynBufSeqOutStream::CDynBufSeqOutStream
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN46@Encode
$LN45@Encode:
	mov	DWORD PTR tv305[ebp], 0
$LN46@Encode:
	mov	eax, DWORD PTR tv305[ebp]
	mov	DWORD PTR $T76268[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T76268[ebp]
	mov	DWORD PTR _outStreamSpec$74301[ebp], ecx
; Line 381
	mov	edx, DWORD PTR _outStreamSpec$74301[ebp]
	push	edx
	lea	ecx, DWORD PTR _dynOutStream$74307[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
; Line 382
	mov	ecx, DWORD PTR _outStreamSpec$74301[ebp]
	call	?Init@CDynBufSeqOutStream@@QAEXXZ	; CDynBufSeqOutStream::Init
; Line 383
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	call	??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->
	mov	DWORD PTR tv317[ebp], eax
	lea	ecx, DWORD PTR _dynOutStream$74307[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR tv317[ebp]
	push	eax
	mov	ecx, DWORD PTR tv317[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 384
	mov	ecx, DWORD PTR _props$74299[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outStreamSpec$74301[ebp]
	call	?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z ; CDynBufSeqOutStream::CopyToBuffer
; Line 385
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _dynOutStream$74307[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Line 386
	jmp	SHORT $LN21@Encode
$LN22@Encode:
; Line 387
	mov	ecx, DWORD PTR _props$74299[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
$LN21@Encode:
; Line 388
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	call	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	call	??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>
	jmp	$LN25@Encode
$LN24@Encode:
; Line 390
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 391
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _mainCoder$[ebp], eax
; Line 393
	mov	BYTE PTR _useMtProgress$[ebp], 0
; Line 394
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@Encode
; Line 399
	mov	BYTE PTR _useMtProgress$[ebp], 1
$LN20@Encode:
; Line 402
	movzx	ecx, BYTE PTR _useMtProgress$[ebp]
	test	ecx, ecx
	je	$LN19@Encode
; Line 404
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76273[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T76273[ebp], 0
	je	SHORT $LN47@Encode
	mov	ecx, DWORD PTR $T76273[ebp]
	call	??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress
	mov	DWORD PTR tv351[ebp], eax
	jmp	SHORT $LN48@Encode
$LN47@Encode:
	mov	DWORD PTR tv351[ebp], 0
$LN48@Encode:
	mov	edx, DWORD PTR tv351[ebp]
	mov	DWORD PTR $T76272[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T76272[ebp]
	mov	DWORD PTR _mtProgressSpec$[ebp], eax
; Line 405
	mov	ecx, DWORD PTR _mtProgressSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 406
	mov	edx, DWORD PTR _compressProgress$[ebp]
	push	edx
	mov	ecx, DWORD PTR _mtProgressSpec$[ebp]
	call	?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z ; NArchive::N7z::CMtEncMultiProgress::Init
; Line 408
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76277[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T76277[ebp], 0
	je	SHORT $LN49@Encode
	mov	ecx, DWORD PTR $T76277[ebp]
	call	??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify
	mov	DWORD PTR tv366[ebp], eax
	jmp	SHORT $LN50@Encode
$LN49@Encode:
	mov	DWORD PTR tv366[ebp], 0
$LN50@Encode:
	mov	eax, DWORD PTR tv366[ebp]
	mov	DWORD PTR $T76276[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T76276[ebp]
	mov	DWORD PTR _mtOutStreamNotifySpec$[ebp], ecx
; Line 409
	mov	edx, DWORD PTR _mtOutStreamNotifySpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 410
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mtOutStreamNotifySpec$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 411
	mov	ecx, DWORD PTR _mtOutStreamNotifySpec$[ebp]
	mov	edx, DWORD PTR _mtProgressSpec$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 413
	mov	DWORD PTR _i$74321[ebp], 0
	jmp	SHORT $LN18@Encode
$LN17@Encode:
	mov	eax, DWORD PTR _i$74321[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74321[ebp], eax
$LN18@Encode:
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size
	cmp	DWORD PTR _i$74321[ebp], eax
	jae	SHORT $LN19@Encode
; Line 415
	mov	ecx, DWORD PTR _i$74321[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _mtProgressSpec$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 416
	jmp	SHORT $LN17@Encode
$LN19@Encode:
; Line 420
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	test	eax, eax
	je	$LN15@Encode
; Line 422
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76281[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T76281[ebp], 0
	je	SHORT $LN51@Encode
	mov	ecx, DWORD PTR $T76281[ebp]
	call	??0CSequentialOutStreamSizeCount@@QAE@XZ
	mov	DWORD PTR tv396[ebp], eax
	jmp	SHORT $LN52@Encode
$LN51@Encode:
	mov	DWORD PTR tv396[ebp], 0
$LN52@Encode:
	mov	ecx, DWORD PTR tv396[ebp]
	mov	DWORD PTR $T76280[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR $T76280[ebp]
	mov	DWORD PTR _outStreamSizeCountSpec$[ebp], edx
; Line 423
	mov	eax, DWORD PTR _outStreamSizeCountSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 424
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN53@Encode
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv408[ebp], eax
	jmp	SHORT $LN54@Encode
$LN53@Encode:
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR tv408[ebp], ecx
$LN54@Encode:
	mov	edx, DWORD PTR tv408[ebp]
	push	edx
	mov	ecx, DWORD PTR _outStreamSizeCountSpec$[ebp]
	call	?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z ; CSequentialOutStreamSizeCount::SetStream
; Line 425
	mov	ecx, DWORD PTR _outStreamSizeCountSpec$[ebp]
	call	?Init@CSequentialOutStreamSizeCount@@QAEXXZ ; CSequentialOutStreamSizeCount::Init
; Line 426
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add
$LN15@Encode:
; Line 429
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN14@Encode
$LN13@Encode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@Encode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN12@Encode
; Line 430
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add
	jmp	SHORT $LN13@Encode
$LN12@Encode:
; Line 435
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN55@Encode
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv442[ebp], eax
	jmp	SHORT $LN56@Encode
$LN55@Encode:
	mov	edx, DWORD PTR _compressProgress$[ebp]
	mov	DWORD PTR tv442[ebp], edx
$LN56@Encode:
	mov	esi, esp
	mov	eax, DWORD PTR tv442[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front
	push	eax
	lea	ecx, DWORD PTR _inStreamPointer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$74334[ebp], eax
	cmp	DWORD PTR ___result_$74334[ebp], 0
	je	$LN11@Encode
	mov	ecx, DWORD PTR ___result_$74334[ebp]
	mov	DWORD PTR $T76288[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76288[ebp]
	jmp	$LN39@Encode
$LN11@Encode:
; Line 437
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	test	eax, eax
	je	SHORT $LN10@Encode
; Line 438
	mov	ecx, DWORD PTR _outStreamSizeCountSpec$[ebp]
	call	?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ ; CSequentialOutStreamSizeCount::GetSize
	push	edx
	push	eax
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
$LN10@Encode:
; Line 440
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@Encode
$LN8@Encode:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@Encode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN7@Encode
; Line 442
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ; CObjectVector<CInOutTempBuffer>::operator[]
	mov	DWORD PTR _inOutTempBuffer$74343[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inOutTempBuffer$74343[ebp]
	call	?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z ; CInOutTempBuffer::WriteToStream
	mov	DWORD PTR ___result_$74344[ebp], eax
	cmp	DWORD PTR ___result_$74344[ebp], 0
	je	$LN6@Encode
	mov	edx, DWORD PTR ___result_$74344[ebp]
	mov	DWORD PTR $T76289[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76289[ebp]
	jmp	$LN39@Encode
$LN6@Encode:
; Line 444
	mov	ecx, DWORD PTR _inOutTempBuffer$74343[ebp]
	call	?GetDataSize@CInOutTempBuffer@@QBE_KXZ	; CInOutTempBuffer::GetDataSize
	push	edx
	push	eax
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 445
	jmp	$LN8@Encode
$LN7@Encode:
; Line 447
	mov	eax, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 449
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Encode
$LN4@Encode:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@Encode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN3@Encode
; Line 451
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
	mov	DWORD PTR _bond$74351[ebp], eax
; Line 453
	cmp	DWORD PTR _bond$74351[ebp], 0
	jge	SHORT $LN2@Encode
; Line 455
	mov	ecx, DWORD PTR _inStreamSizeCountSpec$[ebp]
	call	?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ ; CSequentialInStreamSizeCount2::GetSize
	mov	DWORD PTR _streamSize$74352[ebp], eax
	mov	DWORD PTR _streamSize$74352[ebp+4], edx
; Line 456
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	edx, DWORD PTR _streamSize$74352[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _streamSize$74352[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 458
	jmp	SHORT $LN1@Encode
$LN2@Encode:
; Line 459
	mov	esi, esp
	mov	ecx, DWORD PTR _bond$74351[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _streamSize$74352[ebp], eax
	mov	DWORD PTR _streamSize$74352[ebp+4], edx
$LN1@Encode:
; Line 460
	mov	ecx, DWORD PTR _streamSize$74352[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _streamSize$74352[ebp]
	push	edx
	mov	ecx, DWORD PTR _coderUnpackSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 461
	jmp	$LN4@Encode
$LN3@Encode:
; Line 463
	mov	DWORD PTR $T76290[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	call	??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	call	??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76290[ebp]
$LN39@Encode:
; Line 464
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN91@Encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN91@Encode:
	DD	14					; 0000000eH
	DD	$LN90@Encode
$LN90@Encode:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN75@Encode
	DD	-52					; ffffffccH
	DD	4
	DD	$LN76@Encode
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN77@Encode
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN78@Encode
	DD	-112					; ffffff90H
	DD	12					; 0000000cH
	DD	$LN79@Encode
	DD	-136					; ffffff78H
	DD	4
	DD	$LN80@Encode
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN81@Encode
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN82@Encode
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN83@Encode
	DD	-192					; ffffff40H
	DD	4
	DD	$LN84@Encode
	DD	-212					; ffffff2cH
	DD	12					; 0000000cH
	DD	$LN85@Encode
	DD	-228					; ffffff1cH
	DD	4
	DD	$LN86@Encode
	DD	-240					; ffffff10H
	DD	4
	DD	$LN87@Encode
	DD	-260					; fffffefcH
	DD	4
	DD	$LN88@Encode
$LN88@Encode:
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN87@Encode:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN86@Encode:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN85@Encode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN84@Encode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN83@Encode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN82@Encode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN81@Encode:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN80@Encode:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN79@Encode:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN78@Encode:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN77@Encode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN76@Encode:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	121					; 00000079H
	DB	0
$LN75@Encode:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _mtProgress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$1:
	lea	ecx, DWORD PTR _mtOutStreamNotify$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$2:
	lea	ecx, DWORD PTR _inOutTempBuffers$[ebp]
	jmp	??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$3:
	lea	ecx, DWORD PTR _tempBufferSpecs$[ebp]
	jmp	??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$4:
	lea	ecx, DWORD PTR _tempBuffers$[ebp]
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$5:
	mov	eax, DWORD PTR $T76261[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$6:
	lea	ecx, DWORD PTR _tempBuffer$74271[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$7:
	mov	eax, DWORD PTR $T76265[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$8:
	lea	ecx, DWORD PTR _inStreamSizeCount$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$9:
	lea	ecx, DWORD PTR _outStreamSizeCount$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$10:
	lea	ecx, DWORD PTR _outStreamPointers$[ebp]
	jmp	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11:
	lea	ecx, DWORD PTR _resetInitVector$74293[ebp]
	jmp	??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12:
	lea	ecx, DWORD PTR _writeCoderProperties$74297[ebp]
	jmp	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$13:
	mov	eax, DWORD PTR $T76269[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$14:
	lea	ecx, DWORD PTR _dynOutStream$74307[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$15:
	mov	eax, DWORD PTR $T76273[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$16:
	mov	eax, DWORD PTR $T76277[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$17:
	mov	eax, DWORD PTR $T76281[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ENDP ; NArchive::N7z::CEncoder::Encode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDataSize@CInOutTempBuffer@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataSize@CInOutTempBuffer@@QBE_KXZ PROC		; CInOutTempBuffer::GetDataSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inouttempbuffer.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR [ecx+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataSize@CInOutTempBuffer@@QBE_KXZ ENDP		; CInOutTempBuffer::GetDataSize
_TEXT	ENDS
PUBLIC	??0CByteDynBuffer@@QAE@XZ			; CByteDynBuffer::CByteDynBuffer
PUBLIC	??_7CDynBufSeqOutStream@@6B@			; CDynBufSeqOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CDynBufSeqOutStream@@6B@			; CDynBufSeqOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDynBufSeqOutStream@@@8			; CDynBufSeqOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CDynBufSeqOutStream@@8			; CDynBufSeqOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDynBufSeqOutStream@@8			; CDynBufSeqOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDynBufSeqOutStream@@8		; CDynBufSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ; CDynBufSeqOutStream::QueryInterface
PUBLIC	?AddRef@CDynBufSeqOutStream@@UAGKXZ		; CDynBufSeqOutStream::AddRef
PUBLIC	?Release@CDynBufSeqOutStream@@UAGKXZ		; CDynBufSeqOutStream::Release
EXTRN	?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z:PROC	; CDynBufSeqOutStream::Write
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDynBufSeqOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDynBufSeqOutStream@@8 DD FLAT:??_R0?AVCDynBufSeqOutStream@@@8 ; CDynBufSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDynBufSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CDynBufSeqOutStream@@8
rdata$r	SEGMENT
??_R2CDynBufSeqOutStream@@8 DD FLAT:??_R1A@?0A@EA@CDynBufSeqOutStream@@8 ; CDynBufSeqOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDynBufSeqOutStream@@8
rdata$r	SEGMENT
??_R3CDynBufSeqOutStream@@8 DD 00H			; CDynBufSeqOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDynBufSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDynBufSeqOutStream@@@8
_DATA	SEGMENT
??_R0?AVCDynBufSeqOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CDynBufSeqOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDynBufSeqOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDynBufSeqOutStream@@6B@
rdata$r	SEGMENT
??_R4CDynBufSeqOutStream@@6B@ DD 00H			; CDynBufSeqOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDynBufSeqOutStream@@@8
	DD	FLAT:??_R3CDynBufSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CDynBufSeqOutStream@@6B@
CONST	SEGMENT
??_7CDynBufSeqOutStream@@6B@ DD FLAT:??_R4CDynBufSeqOutStream@@6B@ ; CDynBufSeqOutStream::`vftable'
	DD	FLAT:?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDynBufSeqOutStream@@UAGKXZ
	DD	FLAT:?Release@CDynBufSeqOutStream@@UAGKXZ
	DD	FLAT:?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDynBufSeqOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDynBufSeqOutStream@@QAE@XZ PROC			; CDynBufSeqOutStream::CDynBufSeqOutStream, COMDAT
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDynBufSeqOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CByteDynBuffer@@QAE@XZ		; CByteDynBuffer::CByteDynBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDynBufSeqOutStream@@QAE@XZ ENDP			; CDynBufSeqOutStream::CDynBufSeqOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CByteDynBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CByteDynBuffer@@QAE@XZ PROC				; CByteDynBuffer::CByteDynBuffer, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CByteDynBuffer@@QAE@XZ ENDP				; CByteDynBuffer::CByteDynBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CDynBufSeqOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CDynBufSeqOutStream@@QAEXXZ PROC			; CDynBufSeqOutStream::Init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CDynBufSeqOutStream@@QAEXXZ ENDP			; CDynBufSeqOutStream::Init
_TEXT	ENDS
EXTRN	_IID_ISequentialOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CDynBufSeqOutStream::QueryInterface, COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CDynBufSeqOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDynBufSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDynBufSeqOutStream@@UAGKXZ PROC		; CDynBufSeqOutStream::AddRef, COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDynBufSeqOutStream@@UAGKXZ ENDP		; CDynBufSeqOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCDynBufSeqOutStream@@QAEPAXI@Z		; CDynBufSeqOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDynBufSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76344 = -8						; size = 4
$T76343 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDynBufSeqOutStream@@UAGKXZ PROC		; CDynBufSeqOutStream::Release, COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76344[ebp], edx
	mov	eax, DWORD PTR $T76344[ebp]
	mov	DWORD PTR $T76343[ebp], eax
	cmp	DWORD PTR $T76343[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T76343[ebp]
	call	??_GCDynBufSeqOutStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDynBufSeqOutStream@@UAGKXZ ENDP		; CDynBufSeqOutStream::Release
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	??1CDynBufSeqOutStream@@QAE@XZ			; CDynBufSeqOutStream::~CDynBufSeqOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDynBufSeqOutStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDynBufSeqOutStream@@QAEPAXI@Z PROC			; CDynBufSeqOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDynBufSeqOutStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDynBufSeqOutStream@@QAEPAXI@Z ENDP			; CDynBufSeqOutStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CByteDynBuffer@@QAE@XZ			; CByteDynBuffer::~CByteDynBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CDynBufSeqOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDynBufSeqOutStream@@QAE@XZ PROC			; CDynBufSeqOutStream::~CDynBufSeqOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CByteDynBuffer@@QAE@XZ		; CByteDynBuffer::~CByteDynBuffer
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDynBufSeqOutStream@@QAE@XZ ENDP			; CDynBufSeqOutStream::~CDynBufSeqOutStream
_TEXT	ENDS
EXTRN	?Free@CByteDynBuffer@@QAEXXZ:PROC		; CByteDynBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CByteDynBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CByteDynBuffer@@QAE@XZ PROC				; CByteDynBuffer::~CByteDynBuffer, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CByteDynBuffer@@QAEXXZ		; CByteDynBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CByteDynBuffer@@QAE@XZ ENDP				; CByteDynBuffer::~CByteDynBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z PROC ; CSequentialOutStreamSizeCount::SetStream, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z ENDP ; CSequentialOutStreamSizeCount::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CSequentialOutStreamSizeCount@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CSequentialOutStreamSizeCount@@QAEXXZ PROC	; CSequentialOutStreamSizeCount::Init, COMDAT
; _this$ = ecx
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CSequentialOutStreamSizeCount@@QAEXXZ ENDP	; CSequentialOutStreamSizeCount::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ PROC	; CSequentialOutStreamSizeCount::GetSize, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ ENDP	; CSequentialOutStreamSizeCount::GetSize
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$72014 = -8						; size = 4
_this$ = -4						; size = 4
_unpackStream$ = 8					; size = 4
?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	DWORD PTR _i$72014[ebp], 0
	jmp	SHORT $LN4@FindBond_f
$LN3@FindBond_f:
	mov	eax, DWORD PTR _i$72014[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72014[ebp], eax
$LN4@FindBond_f:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$72014[ebp], eax
	jae	SHORT $LN2@FindBond_f
; Line 117
	mov	ecx, DWORD PTR _i$72014[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR _unpackStream$[ebp]
	jne	SHORT $LN1@FindBond_f
; Line 118
	mov	eax, DWORD PTR _i$72014[ebp]
	jmp	SHORT $LN5@FindBond_f
$LN1@FindBond_f:
; Line 119
	jmp	SHORT $LN3@FindBond_f
$LN2@FindBond_f:
	or	eax, -1
$LN5@FindBond_f:
; Line 120
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ PROC ; NCoderMixer2::CCoder::GetUnknown, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN3@GetUnknown
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@GetUnknown
$LN3@GetUnknown:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
	mov	DWORD PTR tv80[ebp], eax
$LN4@GetUnknown:
	mov	eax, DWORD PTR tv80[ebp]
; Line 211
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ENDP ; NCoderMixer2::CCoder::GetUnknown
_TEXT	ENDS
PUBLIC	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
PUBLIC	??_7CMtEncMultiProgress@N7z@NArchive@@6B@	; NArchive::N7z::CMtEncMultiProgress::`vftable'
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??_R4CMtEncMultiProgress@N7z@NArchive@@6B@	; NArchive::N7z::CMtEncMultiProgress::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8	; NArchive::N7z::CMtEncMultiProgress `RTTI Type Descriptor'
PUBLIC	??_R3CMtEncMultiProgress@N7z@NArchive@@8	; NArchive::N7z::CMtEncMultiProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMtEncMultiProgress@N7z@NArchive@@8	; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CMtEncMultiProgress::QueryInterface
PUBLIC	?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CMtEncMultiProgress::AddRef
PUBLIC	?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CMtEncMultiProgress::Release
;	COMDAT ??_R2ICompressProgressInfo@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.h
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8 DD FLAT:??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CMtEncMultiProgress@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CMtEncMultiProgress@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CMtEncMultiProgress::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CMtEncMultiProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMtEncMultiProgress@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMtEncMultiProgress@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CMtEncMultiProgress@N7z@NArchive@@6B@ DD 00H	; NArchive::N7z::CMtEncMultiProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8
	DD	FLAT:??_R3CMtEncMultiProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CMtEncMultiProgress@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CMtEncMultiProgress@N7z@NArchive@@6B@ DD FLAT:??_R4CMtEncMultiProgress@N7z@NArchive@@6B@ ; NArchive::N7z::CMtEncMultiProgress::`vftable'
	DD	FLAT:?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress, COMDAT
; _this$ = ecx
; Line 27
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMtEncMultiProgress@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress
EXTRN	_CriticalSection_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_CriticalSection_Init@4
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
_TEXT	ENDS
EXTRN	_IID_ICompressProgressInfo:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CMtEncMultiProgress::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.h
; Line 39
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CMtEncMultiProgress::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CMtEncMultiProgress::AddRef, COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CMtEncMultiProgress::AddRef
_TEXT	ENDS
PUBLIC	??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76387 = -8						; size = 4
$T76386 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CMtEncMultiProgress::Release, COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76387[ebp], edx
	mov	eax, DWORD PTR $T76387[ebp]
	mov	DWORD PTR $T76386[ebp], eax
	cmp	DWORD PTR $T76386[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T76386[ebp]
	call	??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CMtEncMultiProgress::Release
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
_TEXT	ENDS
PUBLIC	??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
_TEXT	ENDS
PUBLIC	??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<ICompressGetSubStreamSize>
PUBLIC	??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator&
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ ; CMyComPtr<ICompressGetSubStreamSize>::Release
EXTRN	_IID_ICompressGetSubStreamSize:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z PROC ; CSequentialInStreamSizeCount2::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zspecstream.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 22
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ ; CMyComPtr<ICompressGetSubStreamSize>::Release
; Line 23
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator&
	push	eax
	push	OFFSET _IID_ICompressGetSubStreamSize
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<ICompressGetSubStreamSize>
; Line 25
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z ENDP ; CSequentialInStreamSizeCount2::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ PROC	; CSequentialInStreamSizeCount2::GetSize, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ ENDP	; CSequentialInStreamSizeCount2::GetSize
_TEXT	ENDS
PUBLIC	??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ ; NArchive::N7z::CSequentialOutTempBufferImp2::`vftable'
PUBLIC	??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2 `RTTI Type Descriptor'
PUBLIC	??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface
PUBLIC	?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutTempBufferImp2::AddRef
PUBLIC	?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutTempBufferImp2::Release
;	COMDAT ??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8 DD FLAT:??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8 DD 00H ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CSequentialOutTempBufferImp2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSequentialOutTempBufferImp2@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ DD 00H ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8
	DD	FLAT:??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ DD FLAT:??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ ; NArchive::N7z::CSequentialOutTempBufferImp2::`vftable'
	DD	FLAT:?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::Init, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface, COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@4
$LN3@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::AddRef, COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T76420 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CSequentialOutTempBufferImp2::Release, COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76420[ebp], edx
	mov	eax, DWORD PTR $T76420[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@4:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CSequentialOutTempBufferImp2::Release
_TEXT	ENDS
PUBLIC	??_7CSequentialOutMtNotify@N7z@NArchive@@6B@	; NArchive::N7z::CSequentialOutMtNotify::`vftable'
PUBLIC	??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@	; NArchive::N7z::CSequentialOutMtNotify::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8	; NArchive::N7z::CSequentialOutMtNotify `RTTI Type Descriptor'
PUBLIC	??_R3CSequentialOutMtNotify@N7z@NArchive@@8	; NArchive::N7z::CSequentialOutMtNotify::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSequentialOutMtNotify@N7z@NArchive@@8	; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CSequentialOutMtNotify::QueryInterface
PUBLIC	?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutMtNotify::AddRef
PUBLIC	?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutMtNotify::Release
;	COMDAT ??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8 DD FLAT:??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CSequentialOutMtNotify@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CSequentialOutMtNotify@N7z@NArchive@@8 DD 00H	; NArchive::N7z::CSequentialOutMtNotify::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CSequentialOutMtNotify `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSequentialOutMtNotify@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@ DD 00H	; NArchive::N7z::CSequentialOutMtNotify::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8
	DD	FLAT:??_R3CSequentialOutMtNotify@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CSequentialOutMtNotify@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CSequentialOutMtNotify@N7z@NArchive@@6B@ DD FLAT:??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@ ; NArchive::N7z::CSequentialOutMtNotify::`vftable'
	DD	FLAT:?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSequentialOutMtNotify@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CSequentialOutMtNotify::QueryInterface, COMDAT
; Line 266
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@5
$LN3@QueryInter@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@5:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CSequentialOutMtNotify::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CSequentialOutMtNotify::AddRef, COMDAT
; Line 266
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CSequentialOutMtNotify::AddRef
_TEXT	ENDS
PUBLIC	??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76431 = -8						; size = 4
$T76430 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CSequentialOutMtNotify::Release, COMDAT
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76431[ebp], edx
	mov	eax, DWORD PTR $T76431[ebp]
	mov	DWORD PTR $T76430[ebp], eax
	cmp	DWORD PTR $T76430[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T76430[ebp]
	call	??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CSequentialOutMtNotify::Release
_TEXT	ENDS
PUBLIC	??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CSequentialOutMtNotify::~CSequentialOutMtNotify
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CSequentialOutMtNotify::~CSequentialOutMtNotify, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CSequentialOutMtNotify::~CSequentialOutMtNotify
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ ; CSequentialInStreamSizeCount2::`vftable'
PUBLIC	??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ ; CSequentialInStreamSizeCount2::`vftable'
PUBLIC	??0ICompressGetSubStreamSize@@QAE@XZ		; ICompressGetSubStreamSize::ICompressGetSubStreamSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ ; CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSequentialInStreamSizeCount2@@@8	; CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
PUBLIC	??_R3CSequentialInStreamSizeCount2@@8		; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSequentialInStreamSizeCount2@@8		; CSequentialInStreamSizeCount2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8	; CSequentialInStreamSizeCount2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressGetSubStreamSize@@8	; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressGetSubStreamSize@@@8		; ICompressGetSubStreamSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetSubStreamSize@@8		; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetSubStreamSize@@8		; ICompressGetSubStreamSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetSubStreamSize@@8	; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z ; CSequentialInStreamSizeCount2::QueryInterface
PUBLIC	?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ	; CSequentialInStreamSizeCount2::AddRef
PUBLIC	?Release@CSequentialInStreamSizeCount2@@UAGKXZ	; CSequentialInStreamSizeCount2::Release
PUBLIC	??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ ; CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ	; [thunk]:CSequentialInStreamSizeCount2::AddRef`adjustor{4}'
PUBLIC	?Release@CSequentialInStreamSizeCount2@@W3AGKXZ	; [thunk]:CSequentialInStreamSizeCount2::Release`adjustor{4}'
EXTRN	?Read@CSequentialInStreamSizeCount2@@UAGJPAXIPAI@Z:PROC ; CSequentialInStreamSizeCount2::Read
EXTRN	?GetSubStreamSize@CSequentialInStreamSizeCount2@@UAGJ_KPA_K@Z:PROC ; CSequentialInStreamSizeCount2::GetSubStreamSize
;	COMDAT ??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@
rdata$r	SEGMENT
??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ DD 00H ; CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialInStreamSizeCount2@@@8
	DD	FLAT:??_R3CSequentialInStreamSizeCount2@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 DD FLAT:??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R2ICompressGetSubStreamSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R3ICompressGetSubStreamSize@@8 DD 00H		; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetSubStreamSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetSubStreamSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetSubStreamSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetSubStreamSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressGetSubStreamSize@@8 DD FLAT:??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8 DD FLAT:??_R0?AVCSequentialInStreamSizeCount2@@@8 ; CSequentialInStreamSizeCount2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSequentialInStreamSizeCount2@@8
rdata$r	ENDS
;	COMDAT ??_R2CSequentialInStreamSizeCount2@@8
rdata$r	SEGMENT
??_R2CSequentialInStreamSizeCount2@@8 DD FLAT:??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8 ; CSequentialInStreamSizeCount2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressGetSubStreamSize@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSequentialInStreamSizeCount2@@8
rdata$r	SEGMENT
??_R3CSequentialInStreamSizeCount2@@8 DD 00H		; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	06H
	DD	FLAT:??_R2CSequentialInStreamSizeCount2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSequentialInStreamSizeCount2@@@8
_DATA	SEGMENT
??_R0?AVCSequentialInStreamSizeCount2@@@8 DD FLAT:??_7type_info@@6B@ ; CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSequentialInStreamSizeCount2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ DD 00H ; CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialInStreamSizeCount2@@@8
	DD	FLAT:??_R3CSequentialInStreamSizeCount2@@8
rdata$r	ENDS
;	COMDAT ??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@
CONST	SEGMENT
??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ DD FLAT:??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ ; CSequentialInStreamSizeCount2::`vftable'
	DD	FLAT:?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ
	DD	FLAT:?Release@CSequentialInStreamSizeCount2@@W3AGKXZ
	DD	FLAT:?GetSubStreamSize@CSequentialInStreamSizeCount2@@UAGJ_KPA_K@Z
CONST	ENDS
;	COMDAT ??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ DD FLAT:??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ ; CSequentialInStreamSizeCount2::`vftable'
	DD	FLAT:?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ
	DD	FLAT:?Release@CSequentialInStreamSizeCount2@@UAGKXZ
	DD	FLAT:?Read@CSequentialInStreamSizeCount2@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSequentialInStreamSizeCount2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSequentialInStreamSizeCount2@@QAE@XZ$0
__ehfuncinfo$??0CSequentialInStreamSizeCount2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSequentialInStreamSizeCount2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CSequentialInStreamSizeCount2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSequentialInStreamSizeCount2@@QAE@XZ PROC		; CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressGetSubStreamSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSequentialInStreamSizeCount2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CSequentialInStreamSizeCount2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CSequentialInStreamSizeCount2@@QAE@XZ ENDP		; CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
EXTRN	_IID_ISequentialInStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z PROC ; CSequentialInStreamSizeCount2::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zspecstream.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN6@QueryInter@6:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ICompressGetSubStreamSize
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@6
$LN9@QueryInter@6:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@6:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@6
$LN5@QueryInter@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@6:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z ENDP ; CSequentialInStreamSizeCount2::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ PROC	; CSequentialInStreamSizeCount2::AddRef, COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ ENDP	; CSequentialInStreamSizeCount2::AddRef
_TEXT	ENDS
PUBLIC	??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z	; CSequentialInStreamSizeCount2::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSequentialInStreamSizeCount2@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76460 = -8						; size = 4
$T76459 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSequentialInStreamSizeCount2@@UAGKXZ PROC	; CSequentialInStreamSizeCount2::Release, COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76460[ebp], edx
	mov	eax, DWORD PTR $T76460[ebp]
	mov	DWORD PTR $T76459[ebp], eax
	cmp	DWORD PTR $T76459[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T76459[ebp]
	call	??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSequentialInStreamSizeCount2@@UAGKXZ ENDP	; CSequentialInStreamSizeCount2::Release
_TEXT	ENDS
PUBLIC	??1CSequentialInStreamSizeCount2@@QAE@XZ	; CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z PROC	; CSequentialInStreamSizeCount2::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSequentialInStreamSizeCount2@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z ENDP	; CSequentialInStreamSizeCount2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSequentialInStreamSizeCount2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSequentialInStreamSizeCount2@@QAE@XZ$0
__ehfuncinfo$??1CSequentialInStreamSizeCount2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSequentialInStreamSizeCount2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CSequentialInStreamSizeCount2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSequentialInStreamSizeCount2@@QAE@XZ PROC		; CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSequentialInStreamSizeCount2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CSequentialInStreamSizeCount2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CSequentialInStreamSizeCount2@@QAE@XZ ENDP		; CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2
PUBLIC	??_7CSequentialOutStreamSizeCount@@6B@		; CSequentialOutStreamSizeCount::`vftable'
PUBLIC	??_R4CSequentialOutStreamSizeCount@@6B@		; CSequentialOutStreamSizeCount::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSequentialOutStreamSizeCount@@@8	; CSequentialOutStreamSizeCount `RTTI Type Descriptor'
PUBLIC	??_R3CSequentialOutStreamSizeCount@@8		; CSequentialOutStreamSizeCount::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSequentialOutStreamSizeCount@@8		; CSequentialOutStreamSizeCount::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8	; CSequentialOutStreamSizeCount::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z ; CSequentialOutStreamSizeCount::QueryInterface
PUBLIC	?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ	; CSequentialOutStreamSizeCount::AddRef
PUBLIC	?Release@CSequentialOutStreamSizeCount@@UAGKXZ	; CSequentialOutStreamSizeCount::Release
EXTRN	?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z:PROC ; CSequentialOutStreamSizeCount::Write
;	COMDAT ??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8 DD FLAT:??_R0?AVCSequentialOutStreamSizeCount@@@8 ; CSequentialOutStreamSizeCount::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSequentialOutStreamSizeCount@@8
rdata$r	ENDS
;	COMDAT ??_R2CSequentialOutStreamSizeCount@@8
rdata$r	SEGMENT
??_R2CSequentialOutStreamSizeCount@@8 DD FLAT:??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8 ; CSequentialOutStreamSizeCount::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSequentialOutStreamSizeCount@@8
rdata$r	SEGMENT
??_R3CSequentialOutStreamSizeCount@@8 DD 00H		; CSequentialOutStreamSizeCount::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CSequentialOutStreamSizeCount@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSequentialOutStreamSizeCount@@@8
_DATA	SEGMENT
??_R0?AVCSequentialOutStreamSizeCount@@@8 DD FLAT:??_7type_info@@6B@ ; CSequentialOutStreamSizeCount `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSequentialOutStreamSizeCount@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSequentialOutStreamSizeCount@@6B@
rdata$r	SEGMENT
??_R4CSequentialOutStreamSizeCount@@6B@ DD 00H		; CSequentialOutStreamSizeCount::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialOutStreamSizeCount@@@8
	DD	FLAT:??_R3CSequentialOutStreamSizeCount@@8
rdata$r	ENDS
;	COMDAT ??_7CSequentialOutStreamSizeCount@@6B@
CONST	SEGMENT
??_7CSequentialOutStreamSizeCount@@6B@ DD FLAT:??_R4CSequentialOutStreamSizeCount@@6B@ ; CSequentialOutStreamSizeCount::`vftable'
	DD	FLAT:?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ
	DD	FLAT:?Release@CSequentialOutStreamSizeCount@@UAGKXZ
	DD	FLAT:?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CSequentialOutStreamSizeCount@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSequentialOutStreamSizeCount@@QAE@XZ PROC		; CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSequentialOutStreamSizeCount@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSequentialOutStreamSizeCount@@QAE@XZ ENDP		; CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z PROC ; CSequentialOutStreamSizeCount::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 128
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@7
$LN4@QueryInter@7:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@7
$LN2@QueryInter@7:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@7
$LN3@QueryInter@7:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@7:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z ENDP ; CSequentialOutStreamSizeCount::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ PROC	; CSequentialOutStreamSizeCount::AddRef, COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ ENDP	; CSequentialOutStreamSizeCount::AddRef
_TEXT	ENDS
PUBLIC	??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z	; CSequentialOutStreamSizeCount::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSequentialOutStreamSizeCount@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76485 = -8						; size = 4
$T76484 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSequentialOutStreamSizeCount@@UAGKXZ PROC	; CSequentialOutStreamSizeCount::Release, COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@7
$LN1@Release@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76485[ebp], edx
	mov	eax, DWORD PTR $T76485[ebp]
	mov	DWORD PTR $T76484[ebp], eax
	cmp	DWORD PTR $T76484[ebp], 0
	je	SHORT $LN4@Release@7
	push	1
	mov	ecx, DWORD PTR $T76484[ebp]
	call	??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@7
$LN4@Release@7:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@7:
	xor	eax, eax
$LN2@Release@7:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSequentialOutStreamSizeCount@@UAGKXZ ENDP	; CSequentialOutStreamSizeCount::Release
_TEXT	ENDS
PUBLIC	??1CSequentialOutStreamSizeCount@@QAE@XZ	; CSequentialOutStreamSizeCount::~CSequentialOutStreamSizeCount
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z PROC	; CSequentialOutStreamSizeCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSequentialOutStreamSizeCount@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z ENDP	; CSequentialOutStreamSizeCount::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CSequentialOutStreamSizeCount@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSequentialOutStreamSizeCount@@QAE@XZ PROC		; CSequentialOutStreamSizeCount::~CSequentialOutStreamSizeCount, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSequentialOutStreamSizeCount@@QAE@XZ ENDP		; CSequentialOutStreamSizeCount::~CSequentialOutStreamSizeCount
_TEXT	ENDS
PUBLIC	??_7ICompressGetSubStreamSize@@6B@		; ICompressGetSubStreamSize::`vftable'
PUBLIC	??_R4ICompressGetSubStreamSize@@6B@		; ICompressGetSubStreamSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetSubStreamSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetSubStreamSize@@6B@ DD 00H		; ICompressGetSubStreamSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetSubStreamSize@@@8
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetSubStreamSize@@6B@
CONST	SEGMENT
??_7ICompressGetSubStreamSize@@6B@ DD FLAT:??_R4ICompressGetSubStreamSize@@6B@ ; ICompressGetSubStreamSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetSubStreamSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetSubStreamSize@@QAE@XZ PROC		; ICompressGetSubStreamSize::ICompressGetSubStreamSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetSubStreamSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetSubStreamSize@@QAE@XZ ENDP		; ICompressGetSubStreamSize::ICompressGetSubStreamSize
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::N7z::CCompressionMethodMode::operator=
PUBLIC	__TI1H
PUBLIC	?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::N7z::CEncoder::CEncoder
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$6
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76497 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_options$ = 8						; size = 4
??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z PROC ; NArchive::N7z::CEncoder::CEncoder
; _this$ = ecx
; Line 469
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+176], 0
; Line 470
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CEncoder
; Line 471
	mov	DWORD PTR $T76497[ebp], 1
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T76497[ebp]
	push	edx
	call	__CxxThrowException@8
$LN1@CEncoder:
; Line 473
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z
; Line 476
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 480
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 483
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 484
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@CEncoder:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ENDP ; NArchive::N7z::CEncoder::CEncoder
PUBLIC	?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ PROC ; NArchive::N7z::CCompressionMethodMode::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zcompressionmode.h
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv71[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv71[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ENDP ; NArchive::N7z::CCompressionMethodMode::IsEmpty
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
PUBLIC	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+25], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T76537 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76537[ebp], ecx
	mov	edx, DWORD PTR $T76537[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=
PUBLIC	??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator=
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z PROC ; NArchive::N7z::CCompressionMethodMode::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+25]
	mov	BYTE PTR [edx+25], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+32]
	mov	BYTE PTR [edx+32], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+33]
	mov	BYTE PTR [edx+33], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z ENDP ; NArchive::N7z::CCompressionMethodMode::operator=
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
PUBLIC	?MoveToFront@?$CRecordVector@I@@QAEXI@Z		; CRecordVector<unsigned int>::MoveToFront
PUBLIC	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
PUBLIC	?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ	; NCoderMixer2::CBindInfo::SetUnpackCoder
PUBLIC	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
PUBLIC	?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z ; NCoderMixer2::CBindInfo::GetStream_for_Coder
PUBLIC	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
PUBLIC	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
PUBLIC	?Insert@?$CRecordVector@I@@QAEXII@Z		; CRecordVector<unsigned int>::Insert
PUBLIC	?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add
PUBLIC	??1CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::~CMethodFull
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add
PUBLIC	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
PUBLIC	??0CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::CMethodFull
PUBLIC	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
EXTRN	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ:PROC ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
xdata$x	SEGMENT
__unwindtable$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$1
__ehfuncinfo$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv365 = -240						; size = 4
$T76543 = -236						; size = 4
$T76542 = -232						; size = 4
_i$74449 = -228						; size = 4
_cod$74448 = -220					; size = 4
_method$74447 = -208					; size = 32
_bond$74443 = -168					; size = 8
_numInStreams$74439 = -156				; size = 4
_numCryptoStreams$74438 = -152				; size = 4
_i$74435 = -148						; size = 4
_bond$74433 = -144					; size = 4
_outIndex$74432 = -140					; size = 4
_ci$74427 = -136					; size = 4
_bond$74414 = -132					; size = 4
_mixerBond$74413 = -124					; size = 8
_j$74405 = -112						; size = 4
_bond$74402 = -104					; size = 8
_cod$74399 = -88					; size = 4
_methodFull$74398 = -80					; size = 4
_i$74394 = -76						; size = 4
_numOutStreams$74393 = -72				; size = 4
_coderStreamsInfo$74391 = -64				; size = 4
_method$74390 = -52					; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ PROC	; NArchive::N7z::CEncoder::EncoderConstr
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 488
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 489
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+176]
	test	ecx, ecx
	je	SHORT $LN45@EncoderCon
; Line 490
	xor	eax, eax
	jmp	$LN47@EncoderCon
$LN45@EncoderCon:
; Line 491
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	$LN44@EncoderCon
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+49]
	test	ecx, ecx
	jne	SHORT $LN43@EncoderCon
; Line 495
	mov	DWORD PTR $T76542[ebp], 1
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T76542[ebp]
	push	edx
	call	__CxxThrowException@8
$LN43@EncoderCon:
; Line 496
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN42@EncoderCon
; Line 497
	mov	DWORD PTR $T76543[ebp], 1
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T76543[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN42@EncoderCon:
; Line 499
	lea	ecx, DWORD PTR _method$74390[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 500
	mov	DWORD PTR _method$74390[ebp+16], 116459265 ; 06f10701H
	mov	DWORD PTR _method$74390[ebp+20], 0
; Line 501
	mov	DWORD PTR _method$74390[ebp+24], 1
; Line 502
	lea	edx, DWORD PTR _method$74390[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
; Line 505
	mov	DWORD PTR _coderStreamsInfo$74391[ebp], 1
; Line 506
	mov	eax, DWORD PTR _coderStreamsInfo$74391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add
; Line 508
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 509
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 510
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$74390[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
; Line 511
	jmp	$LN41@EncoderCon
$LN44@EncoderCon:
; Line 514
	mov	DWORD PTR _numOutStreams$74393[ebp], 0
; Line 517
	mov	DWORD PTR _i$74394[ebp], 0
	jmp	SHORT $LN40@EncoderCon
$LN39@EncoderCon:
	mov	edx, DWORD PTR _i$74394[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74394[ebp], edx
$LN40@EncoderCon:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	DWORD PTR _i$74394[ebp], eax
	jae	$LN38@EncoderCon
; Line 519
	mov	eax, DWORD PTR _i$74394[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	DWORD PTR _methodFull$74398[ebp], eax
; Line 522
	mov	ecx, DWORD PTR _methodFull$74398[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cod$74399[ebp], edx
; Line 524
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@EncoderCon
; Line 527
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	sub	eax, 1
	cmp	DWORD PTR _i$74394[ebp], eax
	je	SHORT $LN36@EncoderCon
; Line 530
	mov	ecx, DWORD PTR _numOutStreams$74393[ebp]
	mov	DWORD PTR _bond$74402[ebp], ecx
; Line 531
	mov	edx, DWORD PTR _i$74394[ebp]
	add	edx, 1
	mov	DWORD PTR _bond$74402[ebp+4], edx
; Line 532
	mov	eax, DWORD PTR _bond$74402[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _bond$74402[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add
	jmp	SHORT $LN35@EncoderCon
$LN36@EncoderCon:
; Line 534
	cmp	DWORD PTR _cod$74399[ebp], 0
	je	SHORT $LN35@EncoderCon
; Line 535
	mov	edx, DWORD PTR _numOutStreams$74393[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Insert@?$CRecordVector@I@@QAEXII@Z	; CRecordVector<unsigned int>::Insert
$LN35@EncoderCon:
; Line 537
	mov	DWORD PTR _j$74405[ebp], 1
	jmp	SHORT $LN33@EncoderCon
$LN32@EncoderCon:
	mov	eax, DWORD PTR _j$74405[ebp]
	add	eax, 1
	mov	DWORD PTR _j$74405[ebp], eax
$LN33@EncoderCon:
	mov	ecx, DWORD PTR _j$74405[ebp]
	cmp	ecx, DWORD PTR _cod$74399[ebp]
	jae	SHORT $LN37@EncoderCon
; Line 538
	mov	edx, DWORD PTR _numOutStreams$74393[ebp]
	add	edx, DWORD PTR _j$74405[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
	jmp	SHORT $LN32@EncoderCon
$LN37@EncoderCon:
; Line 541
	mov	eax, DWORD PTR _numOutStreams$74393[ebp]
	add	eax, DWORD PTR _cod$74399[ebp]
	mov	DWORD PTR _numOutStreams$74393[ebp], eax
; Line 543
	mov	ecx, DWORD PTR _cod$74399[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add
; Line 544
	jmp	$LN39@EncoderCon
$LN38@EncoderCon:
; Line 546
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	$LN30@EncoderCon
; Line 548
	mov	DWORD PTR _i$74394[ebp], 0
	jmp	SHORT $LN29@EncoderCon
$LN28@EncoderCon:
	mov	eax, DWORD PTR _i$74394[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74394[ebp], eax
$LN29@EncoderCon:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	cmp	DWORD PTR _i$74394[ebp], eax
	jae	$LN27@EncoderCon
; Line 551
	mov	ecx, DWORD PTR _i$74394[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR _bond$74414[ebp], eax
; Line 554
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	edx, DWORD PTR _bond$74414[ebp]
	cmp	DWORD PTR [edx+8], eax
	jae	SHORT $LN25@EncoderCon
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	ecx, DWORD PTR _bond$74414[ebp]
	cmp	DWORD PTR [ecx], eax
	jae	SHORT $LN25@EncoderCon
	mov	edx, DWORD PTR _bond$74414[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	ecx, DWORD PTR _bond$74414[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN26@EncoderCon
$LN25@EncoderCon:
; Line 555
	mov	eax, -2147024809			; 80070057H
	jmp	$LN47@EncoderCon
$LN26@EncoderCon:
; Line 556
	mov	eax, DWORD PTR _bond$74414[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z ; NCoderMixer2::CBindInfo::GetStream_for_Coder
	mov	edx, DWORD PTR _bond$74414[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _mixerBond$74413[ebp], eax
; Line 557
	mov	eax, DWORD PTR _bond$74414[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mixerBond$74413[ebp+4], ecx
; Line 558
	mov	edx, DWORD PTR _mixerBond$74413[ebp+4]
	push	edx
	mov	eax, DWORD PTR _mixerBond$74413[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add
; Line 559
	jmp	$LN28@EncoderCon
$LN27@EncoderCon:
; Line 561
	mov	DWORD PTR _i$74394[ebp], 0
	jmp	SHORT $LN24@EncoderCon
$LN23@EncoderCon:
	mov	ecx, DWORD PTR _i$74394[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74394[ebp], ecx
$LN24@EncoderCon:
	mov	edx, DWORD PTR _i$74394[ebp]
	cmp	edx, DWORD PTR _numOutStreams$74393[ebp]
	jae	SHORT $LN30@EncoderCon
; Line 562
	mov	eax, DWORD PTR _i$74394[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	cmp	eax, -1
	jne	SHORT $LN21@EncoderCon
; Line 563
	mov	ecx, DWORD PTR _i$74394[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
$LN21@EncoderCon:
; Line 564
	jmp	SHORT $LN23@EncoderCon
$LN30@EncoderCon:
; Line 566
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::SetUnpackCoder
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@EncoderCon
; Line 567
	mov	eax, -2147024809			; 80070057H
	jmp	$LN47@EncoderCon
$LN20@EncoderCon:
; Line 569
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@EncoderCon
; Line 570
	mov	eax, -2147024809			; 80070057H
	jmp	$LN47@EncoderCon
$LN19@EncoderCon:
; Line 572
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	eax, 1
	je	$LN18@EncoderCon
; Line 579
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _ci$74427[ebp], edx
$LN17@EncoderCon:
; Line 583
	mov	eax, DWORD PTR _ci$74427[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@EncoderCon
; Line 584
	jmp	$LN18@EncoderCon
$LN15@EncoderCon:
; Line 586
	mov	ecx, DWORD PTR _ci$74427[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _outIndex$74432[ebp], edx
; Line 587
	mov	eax, DWORD PTR _outIndex$74432[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$74433[ebp], eax
; Line 588
	cmp	DWORD PTR _bond$74433[ebp], 0
	jl	SHORT $LN14@EncoderCon
; Line 590
	mov	ecx, DWORD PTR _bond$74433[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ci$74427[ebp], edx
; Line 591
	jmp	SHORT $LN17@EncoderCon
$LN14@EncoderCon:
; Line 594
	mov	eax, DWORD PTR _outIndex$74432[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
	mov	DWORD PTR _i$74435[ebp], eax
; Line 595
	cmp	DWORD PTR _i$74435[ebp], 0
	jl	SHORT $LN13@EncoderCon
; Line 596
	mov	ecx, DWORD PTR _i$74435[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?MoveToFront@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::MoveToFront
$LN13@EncoderCon:
; Line 597
	jmp	SHORT $LN18@EncoderCon
; Line 598
	jmp	$LN17@EncoderCon
$LN18@EncoderCon:
; Line 601
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+49]
	test	eax, eax
	je	$LN41@EncoderCon
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _numCryptoStreams$74438[ebp], eax
; Line 605
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _numInStreams$74439[ebp], eax
; Line 607
	mov	DWORD PTR _i$74394[ebp], 0
	jmp	SHORT $LN11@EncoderCon
$LN10@EncoderCon:
	mov	ecx, DWORD PTR _i$74394[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74394[ebp], ecx
$LN11@EncoderCon:
	mov	edx, DWORD PTR _i$74394[ebp]
	cmp	edx, DWORD PTR _numCryptoStreams$74438[ebp]
	jae	SHORT $LN9@EncoderCon
; Line 610
	mov	eax, DWORD PTR _numInStreams$74439[ebp]
	add	eax, DWORD PTR _i$74394[ebp]
	mov	DWORD PTR _bond$74443[ebp+4], eax
; Line 611
	mov	ecx, DWORD PTR _i$74394[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _bond$74443[ebp], edx
; Line 612
	mov	eax, DWORD PTR _bond$74443[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _bond$74443[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add
; Line 613
	jmp	SHORT $LN10@EncoderCon
$LN9@EncoderCon:
; Line 614
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 621
	mov	DWORD PTR _i$74394[ebp], 0
	jmp	SHORT $LN8@EncoderCon
$LN7@EncoderCon:
	mov	edx, DWORD PTR _i$74394[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74394[ebp], edx
$LN8@EncoderCon:
	mov	eax, DWORD PTR _i$74394[ebp]
	cmp	eax, DWORD PTR _numCryptoStreams$74438[ebp]
	jae	$LN41@EncoderCon
; Line 623
	lea	ecx, DWORD PTR _method$74447[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 624
	mov	DWORD PTR _method$74447[ebp+24], 1
; Line 625
	mov	DWORD PTR _method$74447[ebp+16], 116459265 ; 06f10701H
	mov	DWORD PTR _method$74447[ebp+20], 0
; Line 626
	lea	ecx, DWORD PTR _method$74447[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
; Line 629
	mov	DWORD PTR _cod$74448[ebp], 1
; Line 630
	mov	edx, DWORD PTR _cod$74448[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add
; Line 632
	mov	eax, DWORD PTR _numOutStreams$74393[ebp]
	mov	DWORD PTR tv365[ebp], eax
	mov	ecx, DWORD PTR _numOutStreams$74393[ebp]
	add	ecx, 1
	mov	DWORD PTR _numOutStreams$74393[ebp], ecx
	mov	edx, DWORD PTR tv365[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 633
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$74447[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	jmp	$LN7@EncoderCon
$LN41@EncoderCon:
; Line 638
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	mov	DWORD PTR _i$74449[ebp], eax
$LN5@EncoderCon:
	cmp	DWORD PTR _i$74449[ebp], 0
	je	SHORT $LN4@EncoderCon
; Line 639
	mov	eax, DWORD PTR _i$74449[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74449[ebp], eax
	mov	ecx, DWORD PTR _i$74449[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	edx, DWORD PTR [eax+20]
	push	edx
	mov	eax, DWORD PTR [eax+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
	jmp	SHORT $LN5@EncoderCon
$LN4@EncoderCon:
; Line 641
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	eax, 16					; 00000010H
	jbe	SHORT $LN3@EncoderCon
; Line 642
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN47@EncoderCon
$LN3@EncoderCon:
; Line 643
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
	cmp	eax, 16					; 00000010H
	jbe	SHORT $LN2@EncoderCon
; Line 644
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN47@EncoderCon
$LN2@EncoderCon:
; Line 646
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@EncoderCon
; Line 647
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN47@EncoderCon
$LN1@EncoderCon:
; Line 649
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CEncoder::InitBindConv
; Line 650
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+176], 1
; Line 651
	xor	eax, eax
$LN47@EncoderCon:
; Line 652
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@EncoderCon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN60@EncoderCon:
	DD	8
	DD	$LN59@EncoderCon
$LN59@EncoderCon:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN50@EncoderCon
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN51@EncoderCon
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN52@EncoderCon
	DD	-104					; ffffff98H
	DD	8
	DD	$LN53@EncoderCon
	DD	-124					; ffffff84H
	DD	8
	DD	$LN54@EncoderCon
	DD	-168					; ffffff58H
	DD	8
	DD	$LN55@EncoderCon
	DD	-208					; ffffff30H
	DD	32					; 00000020H
	DD	$LN56@EncoderCon
	DD	-220					; ffffff24H
	DD	4
	DD	$LN57@EncoderCon
$LN57@EncoderCon:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN56@EncoderCon:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN55@EncoderCon:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN54@EncoderCon:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN53@EncoderCon:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN52@EncoderCon:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN51@EncoderCon:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN50@EncoderCon:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$0:
	lea	ecx, DWORD PTR _method$74390[ebp]
	jmp	??1CMethodFull@N7z@NArchive@@QAE@XZ
__unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$1:
	lea	ecx, DWORD PTR _method$74447[ebp]
	jmp	??1CMethodFull@N7z@NArchive@@QAE@XZ
__ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ ENDP	; NArchive::N7z::CEncoder::EncoderConstr
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$72007 = -8						; size = 4
_this$ = -4						; size = 4
_packStream$ = 8					; size = 4
?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindBond_for_PackStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	DWORD PTR _i$72007[ebp], 0
	jmp	SHORT $LN4@FindBond_f@2
$LN3@FindBond_f@2:
	mov	eax, DWORD PTR _i$72007[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72007[ebp], eax
$LN4@FindBond_f@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$72007[ebp], eax
	jae	SHORT $LN2@FindBond_f@2
; Line 109
	mov	ecx, DWORD PTR _i$72007[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _packStream$[ebp]
	jne	SHORT $LN1@FindBond_f@2
; Line 110
	mov	eax, DWORD PTR _i$72007[ebp]
	jmp	SHORT $LN5@FindBond_f@2
$LN1@FindBond_f@2:
; Line 111
	jmp	SHORT $LN3@FindBond_f@2
$LN2@FindBond_f@2:
	or	eax, -1
$LN5@FindBond_f@2:
; Line 112
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ
_TEXT	SEGMENT
_i$72022 = -12						; size = 4
_isOk$ = -5						; size = 1
_this$ = -4						; size = 4
?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ PROC	; NCoderMixer2::CBindInfo::SetUnpackCoder, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	BYTE PTR _isOk$[ebp], 0
; Line 125
	mov	DWORD PTR _i$72022[ebp], 0
	jmp	SHORT $LN5@SetUnpackC
$LN4@SetUnpackC:
	mov	eax, DWORD PTR _i$72022[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72022[ebp], eax
$LN5@SetUnpackC:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	DWORD PTR _i$72022[ebp], eax
	jae	SHORT $LN3@SetUnpackC
; Line 127
	mov	ecx, DWORD PTR _i$72022[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
	test	eax, eax
	jge	SHORT $LN2@SetUnpackC
; Line 129
	movzx	edx, BYTE PTR _isOk$[ebp]
	test	edx, edx
	je	SHORT $LN1@SetUnpackC
; Line 130
	xor	al, al
	jmp	SHORT $LN6@SetUnpackC
$LN1@SetUnpackC:
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$72022[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 132
	mov	BYTE PTR _isOk$[ebp], 1
$LN2@SetUnpackC:
; Line 134
	jmp	SHORT $LN4@SetUnpackC
$LN3@SetUnpackC:
; Line 135
	mov	al, BYTE PTR _isOk$[ebp]
$LN6@SetUnpackC:
; Line 136
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ ENDP	; NCoderMixer2::CBindInfo::SetUnpackCoder
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$72032 = -8						; size = 4
_this$ = -4						; size = 4
_streamIndex$ = 8					; size = 4
?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	DWORD PTR _i$72032[ebp], 0
	jmp	SHORT $LN4@FindStream
$LN3@FindStream:
	mov	eax, DWORD PTR _i$72032[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72032[ebp], eax
$LN4@FindStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$72032[ebp], eax
	jae	SHORT $LN2@FindStream
; Line 146
	mov	ecx, DWORD PTR _i$72032[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _streamIndex$[ebp]
	jne	SHORT $LN1@FindStream
; Line 147
	mov	eax, DWORD PTR _i$72032[ebp]
	jmp	SHORT $LN5@FindStream
$LN1@FindStream:
; Line 148
	jmp	SHORT $LN3@FindStream
$LN2@FindStream:
	or	eax, -1
$LN5@FindStream:
; Line 149
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z
_TEXT	SEGMENT
_i$72040 = -12						; size = 4
_streamIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z PROC ; NCoderMixer2::CBindInfo::GetStream_for_Coder, COMDAT
; _this$ = ecx
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 156
	mov	DWORD PTR _streamIndex$[ebp], 0
; Line 157
	mov	DWORD PTR _i$72040[ebp], 0
	jmp	SHORT $LN3@GetStream_
$LN2@GetStream_:
	mov	eax, DWORD PTR _i$72040[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72040[ebp], eax
$LN3@GetStream_:
	mov	ecx, DWORD PTR _i$72040[ebp]
	cmp	ecx, DWORD PTR _coderIndex$[ebp]
	jae	SHORT $LN1@GetStream_
; Line 158
	mov	edx, DWORD PTR _i$72040[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	ecx, DWORD PTR _streamIndex$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _streamIndex$[ebp], ecx
	jmp	SHORT $LN2@GetStream_
$LN1@GetStream_:
; Line 159
	mov	eax, DWORD PTR _streamIndex$[ebp]
; Line 160
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z ENDP ; NCoderMixer2::CBindInfo::GetStream_for_Coder
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::CMethodFull
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::~CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::~CMethodFull
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	??1CEncoder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CEncoder::~CEncoder
xdata$x	SEGMENT
__ehfuncinfo$??1CEncoder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CEncoder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CEncoder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CEncoder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CEncoder::~CEncoder
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zencode.cpp
; Line 654
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CEncoder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CEncoder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CEncoder::~CEncoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ PROC ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ENDP ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder2>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder2>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ PROC	; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ PROC	; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ PROC ; CMyComPtr<ICryptoResetInitVector>::operator ICryptoResetInitVector *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ENDP ; CMyComPtr<ICryptoResetInitVector>::operator ICryptoResetInitVector *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ PROC ; CMyComPtr<ICryptoResetInitVector>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ ENDP ; CMyComPtr<ICryptoResetInitVector>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ PROC ; CMyComPtr<ICryptoResetInitVector>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ENDP ; CMyComPtr<ICryptoResetInitVector>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T76681 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76681[ebp], ecx
	mov	edx, DWORD PTR $T76681[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T76687 = -16						; size = 4
$T76686 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned int>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@3
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@3
$LN3@operator@3:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@3
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76686[ebp], ecx
	mov	edx, DWORD PTR $T76686[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76687[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76687[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@3:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@3
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@3:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@3:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned int>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@I@@AAEXII@Z		; CRecordVector<unsigned int>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@I@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@I@@QAEXII@Z PROC		; CRecordVector<unsigned int>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@I@@AAEXII@Z	; CRecordVector<unsigned int>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@I@@QAEXII@Z ENDP		; CRecordVector<unsigned int>::Insert
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveToFront@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_temp$74648 = -8					; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?MoveToFront@?$CRecordVector@I@@QAEXI@Z PROC		; CRecordVector<unsigned int>::MoveToFront, COMDAT
; _this$ = ecx
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 219
	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN2@MoveToFron
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _temp$74648[ebp], eax
; Line 222
	mov	ecx, DWORD PTR _index$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _temp$74648[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@MoveToFron:
; Line 225
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MoveToFront@?$CRecordVector@I@@QAEXI@Z ENDP		; CRecordVector<unsigned int>::MoveToFront
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T76700 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76700[ebp], edx
	mov	eax, DWORD PTR $T76700[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@I@Z
_TEXT	SEGMENT
$T76703 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CBuffer@E@@QAE@I@Z PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76703[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76703[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@I@Z ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T76706 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76706[ebp], ecx
	mov	edx, DWORD PTR $T76706[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z PROC	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ENDP	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ PROC	; CMyComPtr<IUnknown>::operator IUnknown *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ENDP	; CMyComPtr<IUnknown>::operator IUnknown *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ PROC		; CMyComPtr<IUnknown>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ ENDP		; CMyComPtr<IUnknown>::operator!
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76741 = -28						; size = 4
$T76740 = -24						; size = 4
_i$74730 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74730[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$74730[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$74730[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74730[ebp], eax
	mov	ecx, DWORD PTR _i$74730[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76741[ebp], edx
	mov	eax, DWORD PTR $T76741[ebp]
	mov	DWORD PTR $T76740[ebp], eax
	cmp	DWORD PTR $T76740[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T76740[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z	; NArchive::N7z::CMethodFull::CMethodFull
PUBLIC	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T76761 = -32						; size = 4
$T76760 = -28						; size = 4
_i$74756 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@6
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@6
$LN4@operator@6:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$74756[ebp], 0
	jmp	SHORT $LN3@operator@6
$LN2@operator@6:
	mov	edx, DWORD PTR _i$74756[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74756[ebp], edx
$LN3@operator@6:
	mov	eax, DWORD PTR _i$74756[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@6
; Line 437
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76761[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76761[ebp], 0
	je	SHORT $LN7@operator@6
	mov	ecx, DWORD PTR _i$74756[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T76761[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@6
$LN7@operator@6:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@6:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T76760[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T76760[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@6
$LN1@operator@6:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@6:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T76761[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T76776 = -24						; size = 4
$T76775 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76776[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76776[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T76776[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T76775[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T76775[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T76776[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::Add
PUBLIC	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76789 = -28						; size = 4
$T76788 = -24						; size = 4
_i$74775 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74775[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$74775[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$74775[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74775[ebp], eax
	mov	ecx, DWORD PTR _i$74775[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76789[ebp], edx
	mov	eax, DWORD PTR $T76789[ebp]
	mov	DWORD PTR $T76788[ebp], eax
	cmp	DWORD PTR $T76788[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T76788[ebp]
	call	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T76807 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76807[ebp], ecx
	mov	edx, DWORD PTR $T76807[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T76811 = -16						; size = 4
$T76810 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@7
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@7
$LN3@operator@7:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@7
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76810[ebp], ecx
	mov	edx, DWORD PTR $T76810[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76811[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76811[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@7:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@7
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@7:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@7:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T76820 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76820[ebp], ecx
	mov	edx, DWORD PTR $T76820[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T76824 = -16						; size = 4
$T76823 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@8
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@8
$LN3@operator@8:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@8
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76823[ebp], ecx
	mov	edx, DWORD PTR $T76823[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76824[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76824[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@8:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@8
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@8:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@8:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CBond>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CBond>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T76837 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76837[ebp], ecx
	mov	edx, DWORD PTR $T76837[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T76841 = -16						; size = 4
$T76840 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@9
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@9
$LN3@operator@9:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@9
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76840[ebp], ecx
	mov	edx, DWORD PTR $T76840[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76841[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76841[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@9:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@9
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@9:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@9:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z PROC ; CRecordVector<NCoderMixer2::CBond>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T76852 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76852[ebp], ecx
	mov	edx, DWORD PTR $T76852[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T76861 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76861[ebp], ecx
	mov	edx, DWORD PTR $T76861[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
$T76868 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76868[ebp], ecx
	mov	edx, DWORD PTR $T76868[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z PROC ; CRecordVector<ISequentialOutStream *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ENDP ; CRecordVector<ISequentialOutStream *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ PROC ; CRecordVector<ISequentialOutStream *>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ENDP ; CRecordVector<ISequentialOutStream *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T76880 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76880[ebp], eax
	cmp	DWORD PTR $T76880[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T76880[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
_TEXT	ENDS
PUBLIC	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76886 = -28						; size = 4
$T76885 = -24						; size = 4
_i$74959 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74959[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$74959[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$74959[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74959[ebp], eax
	mov	ecx, DWORD PTR _i$74959[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76886[ebp], edx
	mov	eax, DWORD PTR $T76886[ebp]
	mov	DWORD PTR $T76885[ebp], eax
	cmp	DWORD PTR $T76885[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T76885[ebp]
	call	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ PROC	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ENDP	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
_TEXT	ENDS
PUBLIC	??_GCStreamBinder@@QAEPAXI@Z			; CStreamBinder::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76902 = -28						; size = 4
$T76901 = -24						; size = 4
_i$74970 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ PROC	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74970[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$74970[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$74970[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74970[ebp], eax
	mov	ecx, DWORD PTR _i$74970[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76902[ebp], edx
	mov	eax, DWORD PTR $T76902[ebp]
	mov	DWORD PTR $T76901[ebp], eax
	cmp	DWORD PTR $T76901[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T76901[ebp]
	call	??_GCStreamBinder@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ENDP	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CCoderMT>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
_TEXT	ENDS
PUBLIC	??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CCoderMT::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76920 = -28						; size = 4
$T76919 = -24						; size = 4
_i$74984 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74984[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$74984[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$74984[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74984[ebp], eax
	mov	ecx, DWORD PTR _i$74984[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76920[ebp], edx
	mov	eax, DWORD PTR $T76920[ebp]
	mov	DWORD PTR $T76919[ebp], eax
	cmp	DWORD PTR $T76919[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T76919[ebp]
	call	??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
_TEXT	ENDS
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
PUBLIC	??0CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::CCoderInfo
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0
__ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
tv93 = -48						; size = 4
tv89 = -44						; size = 4
$T76940 = -40						; size = 4
$T76939 = -36						; size = 4
$T76936 = -32						; size = 4
$T76935 = -28						; size = 4
$T76934 = -24						; size = 4
_newBuffer$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize
; Line 215
	jmp	$LN3@SetSize
$LN2@SetSize:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN1@SetSize
; Line 218
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T76934[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T76934[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76936[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76936[ebp], 0
	je	SHORT $LN5@SetSize
	mov	ecx, DWORD PTR $T76936[ebp]
	mov	edx, DWORD PTR $T76934[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	push	OFFSET ??0CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T76934[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T76936[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T76936[ebp]
	add	edx, 4
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN6@SetSize
$LN5@SetSize:
	mov	DWORD PTR tv89[ebp], 0
$LN6@SetSize:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T76935[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76935[ebp]
	mov	DWORD PTR _newBuffer$[ebp], ecx
$LN1@SetSize:
; Line 219
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T76940[ebp], eax
	mov	ecx, DWORD PTR $T76940[ebp]
	mov	DWORD PTR $T76939[ebp], ecx
	cmp	DWORD PTR $T76939[ebp], 0
	je	SHORT $LN7@SetSize
	push	3
	mov	ecx, DWORD PTR $T76939[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@SetSize
$LN7@SetSize:
	mov	DWORD PTR tv93[ebp], 0
$LN8@SetSize:
; Line 220
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [edx], eax
; Line 221
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN3@SetSize:
; Line 222
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0:
	mov	eax, DWORD PTR $T76936[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
$T76955 = -16						; size = 4
$T76954 = -12						; size = 4
_newBuffer$ = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z PROC ; CObjArray2<NArchive::N7z::CBond>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize@2
; Line 215
	jmp	SHORT $LN3@SetSize@2
$LN2@SetSize@2:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@SetSize@2
; Line 218
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76954[ebp], eax
	mov	eax, DWORD PTR $T76954[ebp]
	mov	DWORD PTR _newBuffer$[ebp], eax
$LN1@SetSize@2:
; Line 219
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76955[ebp], edx
	mov	eax, DWORD PTR $T76955[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@SetSize@2:
; Line 222
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ENDP ; CObjArray2<NArchive::N7z::CBond>::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@I@@QAEPAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@I@@QAEPAIXZ PROC			; CObjArray2<unsigned int>::operator unsigned int *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@I@@QAEPAIXZ ENDP			; CObjArray2<unsigned int>::operator unsigned int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CObjArray2@I@@QAEXI@Z
_TEXT	SEGMENT
$T76961 = -16						; size = 4
$T76960 = -12						; size = 4
_newBuffer$ = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@I@@QAEXI@Z PROC			; CObjArray2<unsigned int>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize@3
; Line 215
	jmp	SHORT $LN3@SetSize@3
$LN2@SetSize@3:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@SetSize@3
; Line 218
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76960[ebp], eax
	mov	eax, DWORD PTR $T76960[ebp]
	mov	DWORD PTR _newBuffer$[ebp], eax
$LN1@SetSize@3:
; Line 219
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76961[ebp], edx
	mov	eax, DWORD PTR $T76961[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@SetSize@3:
; Line 222
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CObjArray2@I@@QAEXI@Z ENDP			; CObjArray2<unsigned int>::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ PROC ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ENDP ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ PROC ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ENDP ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ PROC ; CMyComPtr<ICompressGetSubStreamSize>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ ENDP ; CMyComPtr<ICompressGetSubStreamSize>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ PROC ; CMyComPtr<ICompressGetSubStreamSize>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ ENDP ; CMyComPtr<ICompressGetSubStreamSize>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@15:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ PROC	; CObjectVector<CInOutTempBuffer>::CObjectVector<CInOutTempBuffer>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ENDP	; CObjectVector<CInOutTempBuffer>::CObjectVector<CInOutTempBuffer>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z PROC ; CObjectVector<CInOutTempBuffer>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ENDP ; CObjectVector<CInOutTempBuffer>::operator[]
_TEXT	ENDS
EXTRN	??0CInOutTempBuffer@@QAE@XZ:PROC		; CInOutTempBuffer::CInOutTempBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T76988 = -28						; size = 4
$T76987 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ PROC ; CObjectVector<CInOutTempBuffer>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76988[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76988[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T76988[ebp]
	call	??0CInOutTempBuffer@@QAE@XZ		; CInOutTempBuffer::CInOutTempBuffer
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T76987[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76987[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ$0:
	mov	eax, DWORD PTR $T76988[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ ENDP ; CObjectVector<CInOutTempBuffer>::AddNew
PUBLIC	??_GCInOutTempBuffer@@QAEPAXI@Z			; CInOutTempBuffer::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77001 = -28						; size = 4
$T77000 = -24						; size = 4
_i$75094 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ PROC	; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75094[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$75094[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$75094[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75094[ebp], eax
	mov	ecx, DWORD PTR _i$75094[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77001[ebp], edx
	mov	eax, DWORD PTR $T77001[ebp]
	mov	DWORD PTR $T77000[ebp], eax
	cmp	DWORD PTR $T77000[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T77000[ebp]
	call	??_GCInOutTempBuffer@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ENDP	; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T77020 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z PROC ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77020[ebp], eax
	cmp	DWORD PTR $T77020[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR $T77020[ebp]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T77020[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z ENDP ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T77025 = -24						; size = 4
_i$75114 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75114[ebp], eax
$LN2@CObjectVec@7:
	cmp	DWORD PTR _i$75114[ebp], 0
	je	SHORT $LN3@CObjectVec@7
; Line 489
	mov	eax, DWORD PTR _i$75114[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75114[ebp], eax
	mov	ecx, DWORD PTR _i$75114[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77025[ebp], edx
	mov	eax, DWORD PTR $T77025[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@CObjectVec@7
$LN3@CObjectVec@7:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z PROC		; NArchive::N7z::CMethodFull::CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::N7z::CMethodFull::CMethodFull
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CMethodFull::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CStreamBinder@@QAE@XZ			; CStreamBinder::~CStreamBinder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStreamBinder@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStreamBinder@@QAEPAXI@Z PROC			; CStreamBinder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStreamBinder@@QAEPAXI@Z ENDP			; CStreamBinder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCoderMT@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoderMT::~CCoderMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CCoderMT::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderMT@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CCoderMT::~CCoderMT
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CCoderMT::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCoder@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CCoder::~CCoder
PUBLIC	??1CVirtThread@@QAE@XZ				; CVirtThread::~CVirtThread
PUBLIC	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
PUBLIC	??_7CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`vftable'
PUBLIC	??_R4CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCoderMT@NCoderMixer2@@@8		; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
PUBLIC	??_R3CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8		; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R0?AVCCoder@NCoderMixer2@@@8			; NCoderMixer2::CCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CVirtThread@@8			; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCVirtThread@@@8				; CVirtThread `RTTI Type Descriptor'
PUBLIC	??_R3CVirtThread@@8				; CVirtThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CVirtThread@@8				; CVirtThread::`RTTI Base Class Array'
EXTRN	?WaitThreadFinish@CVirtThread@@QAEXXZ:PROC	; CVirtThread::WaitThreadFinish
EXTRN	?Execute@CCoderMT@NCoderMixer2@@EAEXXZ:PROC	; NCoderMixer2::CCoderMT::Execute
;	COMDAT ??_R2CVirtThread@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R2CVirtThread@@8 DD FLAT:??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CVirtThread@@8
rdata$r	SEGMENT
??_R3CVirtThread@@8 DD 00H				; CVirtThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCVirtThread@@@8
_DATA	SEGMENT
??_R0?AUCVirtThread@@@8 DD FLAT:??_7type_info@@6B@	; CVirtThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCVirtThread@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CVirtThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CVirtThread@@8 DD FLAT:??_R0?AUCVirtThread@@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoder@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoder@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoder@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoder@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoder@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoderMT@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
	DD	FLAT:??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
	DD	FLAT:??_R1A@?0A@EA@CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoderMT@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoderMT@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoderMT@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoderMT@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCoderMT@NCoderMixer2@@6B@
rdata$r	SEGMENT
??_R4CCoderMT@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CCoderMT@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CCoderMT@NCoderMixer2@@6B@ DD FLAT:??_R4CCoderMT@NCoderMixer2@@6B@ ; NCoderMixer2::CCoderMT::`vftable'
	DD	FLAT:?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCoderMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCoderMT@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoderMT::~CCoderMT, COMDAT
; _this$ = ecx
; Line 396
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCoderMT@NCoderMixer2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CCoder@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CCoder@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
__ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCoderMT@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoderMT::~CCoderMT
PUBLIC	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??_7CVirtThread@@6B@				; CVirtThread::`vftable'
PUBLIC	??_R4CVirtThread@@6B@				; CVirtThread::`RTTI Complete Object Locator'
;	COMDAT ??_R4CVirtThread@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
rdata$r	SEGMENT
??_R4CVirtThread@@6B@ DD 00H				; CVirtThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCVirtThread@@@8
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_7CVirtThread@@6B@
CONST	SEGMENT
??_7CVirtThread@@6B@ DD FLAT:??_R4CVirtThread@@6B@	; CVirtThread::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$2
__ehfuncinfo$??1CVirtThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CVirtThread@@QAE@XZ PROC				; CVirtThread::~CVirtThread, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??1CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CVirtThread@@QAE@XZ ENDP				; CVirtThread::~CVirtThread
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PB_K@@QAE@XZ			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
__ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCoder@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCoder@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoder::~CCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@PB_K@@QAE@XZ		; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCoder@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoder::~CCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CRecordVector@PB_K@@QAE@XZ
_TEXT	SEGMENT
$T77096 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PB_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77096[ebp], ecx
	mov	edx, DWORD PTR $T77096[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PB_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
$T77099 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77099[ebp], ecx
	mov	edx, DWORD PTR $T77099[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
_TEXT	ENDS
PUBLIC	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77103 = -28						; size = 4
$T77102 = -24						; size = 4
_i$74939 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74939[ebp], eax
$LN2@CObjectVec@8:
	cmp	DWORD PTR _i$74939[ebp], 0
	je	SHORT $LN3@CObjectVec@8
; Line 489
	mov	eax, DWORD PTR _i$74939[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74939[ebp], eax
	mov	ecx, DWORD PTR _i$74939[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77103[ebp], edx
	mov	eax, DWORD PTR $T77103[ebp]
	mov	DWORD PTR $T77102[ebp], eax
	cmp	DWORD PTR $T77102[ebp], 0
	je	SHORT $LN5@CObjectVec@8
	push	1
	mov	ecx, DWORD PTR $T77102[ebp]
	call	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@8
$LN5@CObjectVec@8:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@8:
	jmp	SHORT $LN2@CObjectVec@8
$LN3@CObjectVec@8:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::CCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
_TEXT	ENDS
EXTRN	??1CInOutTempBuffer@@QAE@XZ:PROC		; CInOutTempBuffer::~CInOutTempBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCInOutTempBuffer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCInOutTempBuffer@@QAEPAXI@Z PROC			; CInOutTempBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CInOutTempBuffer@@QAE@XZ		; CInOutTempBuffer::~CInOutTempBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCInOutTempBuffer@@QAEPAXI@Z ENDP			; CInOutTempBuffer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??1CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStreamBinder@@QAE@XZ PROC				; CStreamBinder::~CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??1CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::~CStreamBinder
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T77158 = -16						; size = 4
$T77157 = -12						; size = 4
_p$75183 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77157[ebp], eax
	mov	eax, DWORD PTR $T77157[ebp]
	mov	DWORD PTR _p$75183[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75183[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77158[ebp], edx
	mov	eax, DWORD PTR $T77158[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75183[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T77161 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77161[ebp], ecx
	mov	edx, DWORD PTR $T77161[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@16:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@I@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@I@@AAEXII@Z PROC		; CRecordVector<unsigned int>::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@I@@AAEXII@Z ENDP		; CRecordVector<unsigned int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T77177 = -20						; size = 4
$T77176 = -16						; size = 4
_p$75214 = -12						; size = 4
_newCapacity$75213 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75213[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75213[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77176[ebp], eax
	mov	eax, DWORD PTR $T77176[ebp]
	mov	DWORD PTR _p$75214[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75214[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77177[ebp], edx
	mov	eax, DWORD PTR $T77177[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75214[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75213[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
$T77181 = -12						; size = 4
$T77180 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T77180[ebp], eax
	mov	ecx, DWORD PTR $T77180[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77181[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77181[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
_TEXT	ENDS
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T77187 = -32						; size = 4
$T77186 = -28						; size = 4
_i$75232 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$75232[ebp], 0
	jmp	SHORT $LN3@CObjectVec@9
$LN2@CObjectVec@9:
	mov	ecx, DWORD PTR _i$75232[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75232[ebp], ecx
$LN3@CObjectVec@9:
	mov	edx, DWORD PTR _i$75232[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@9
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T77187[ebp], 0
	je	SHORT $LN6@CObjectVec@9
	mov	eax, DWORD PTR _i$75232[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77187[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@9
$LN6@CObjectVec@9:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@9:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T77186[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T77186[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@9
$LN4@CObjectVec@9:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T77187[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T77203 = -16						; size = 4
$T77202 = -12						; size = 4
_i$75245 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75245[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$75245[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$75245[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75245[ebp], eax
	mov	ecx, DWORD PTR _i$75245[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77203[ebp], edx
	mov	eax, DWORD PTR $T77203[ebp]
	mov	DWORD PTR $T77202[ebp], eax
	cmp	DWORD PTR $T77202[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T77202[ebp]
	call	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ
_TEXT	SEGMENT
$T77211 = -20						; size = 4
$T77210 = -16						; size = 4
_p$75256 = -12						; size = 4
_newCapacity$75255 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75255[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75255[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77210[ebp], eax
	mov	eax, DWORD PTR $T77210[ebp]
	mov	DWORD PTR _p$75256[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75256[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77211[ebp], edx
	mov	eax, DWORD PTR $T77211[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75256[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75255[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ
_TEXT	SEGMENT
$T77215 = -20						; size = 4
$T77214 = -16						; size = 4
_p$75267 = -12						; size = 4
_newCapacity$75266 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ PROC ; CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75266[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75266[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77214[ebp], eax
	mov	eax, DWORD PTR $T77214[ebp]
	mov	DWORD PTR _p$75267[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75267[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77215[ebp], edx
	mov	eax, DWORD PTR $T77215[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75267[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75266[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ ENDP ; CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T77219 = -20						; size = 4
$T77218 = -16						; size = 4
_p$75278 = -12						; size = 4
_newCapacity$75277 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@4
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75277[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75277[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77218[ebp], eax
	mov	eax, DWORD PTR $T77218[ebp]
	mov	DWORD PTR _p$75278[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@4
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75278[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@4:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77219[ebp], edx
	mov	eax, DWORD PTR $T77219[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75278[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75277[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@4:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ
_TEXT	SEGMENT
$T77223 = -20						; size = 4
$T77222 = -16						; size = 4
_p$75295 = -12						; size = 4
_newCapacity$75294 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ PROC ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@5
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75294[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75294[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77222[ebp], eax
	mov	eax, DWORD PTR $T77222[ebp]
	mov	DWORD PTR _p$75295[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@5
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75295[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@5:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77223[ebp], edx
	mov	eax, DWORD PTR $T77223[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75295[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75294[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@5:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ENDP ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T77230 = -20						; size = 4
$T77229 = -16						; size = 4
_p$75309 = -12						; size = 4
_newCapacity$75308 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@6
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75308[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75308[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77229[ebp], eax
	mov	eax, DWORD PTR $T77229[ebp]
	mov	DWORD PTR _p$75309[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@6
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75309[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@6:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77230[ebp], edx
	mov	eax, DWORD PTR $T77230[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75309[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75308[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@6:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T77233 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77233[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77233[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z PROC ; CMyComPtr<ISequentialInStream>::QueryInterface<ICompressGetSubStreamSize>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z ENDP ; CMyComPtr<ISequentialInStream>::QueryInterface<ICompressGetSubStreamSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ PROC	; [thunk]:CSequentialInStreamSizeCount2::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::AddRef
?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ ENDP	; [thunk]:CSequentialInStreamSizeCount2::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z ; CSequentialInStreamSizeCount2::QueryInterface
?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CSequentialInStreamSizeCount2@@W3AGKXZ
_TEXT	SEGMENT
?Release@CSequentialInStreamSizeCount2@@W3AGKXZ PROC	; [thunk]:CSequentialInStreamSizeCount2::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::Release
?Release@CSequentialInStreamSizeCount2@@W3AGKXZ ENDP	; [thunk]:CSequentialInStreamSizeCount2::Release`adjustor{4}'
_TEXT	ENDS
END
