; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\MemBlocks.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?FreeSpace@CMemBlockManager@@QAEXXZ		; CMemBlockManager::FreeSpace
PUBLIC	?AllocateSpace@CMemBlockManager@@QAE_NI@Z	; CMemBlockManager::AllocateSpace
EXTRN	_MidAlloc@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$66655 = -16						; size = 4
_p$ = -12						; size = 4
_totalSize$ = -8					; size = 4
_this$ = -4						; size = 4
_numBlocks$ = 8						; size = 4
?AllocateSpace@CMemBlockManager@@QAE_NI@Z PROC		; CMemBlockManager::AllocateSpace
; _this$ = ecx
; Line 11
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSpace@CMemBlockManager@@QAEXXZ	; CMemBlockManager::FreeSpace
; Line 13
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jb	SHORT $LN6@AllocateSp
	cmp	DWORD PTR _numBlocks$[ebp], 1
	jae	SHORT $LN7@AllocateSp
$LN6@AllocateSp:
; Line 14
	xor	al, al
	jmp	$LN8@AllocateSp
$LN7@AllocateSp:
; Line 15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _numBlocks$[ebp]
	imul	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _totalSize$[ebp], edx
; Line 16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _totalSize$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR _numBlocks$[ebp]
	je	SHORT $LN5@AllocateSp
; Line 17
	xor	al, al
	jmp	SHORT $LN8@AllocateSp
$LN5@AllocateSp:
; Line 18
	mov	edx, DWORD PTR _totalSize$[ebp]
	push	edx
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 19
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@AllocateSp
; Line 20
	xor	al, al
	jmp	SHORT $LN8@AllocateSp
$LN4@AllocateSp:
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 22
	mov	DWORD PTR _i$66655[ebp], 0
	jmp	SHORT $LN3@AllocateSp
$LN2@AllocateSp:
	mov	edx, DWORD PTR _i$66655[ebp]
	add	edx, 1
	mov	DWORD PTR _i$66655[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$[ebp], ecx
$LN3@AllocateSp:
	mov	edx, DWORD PTR _i$66655[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _numBlocks$[ebp]
	jae	SHORT $LN1@AllocateSp
; Line 23
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@AllocateSp
$LN1@AllocateSp:
; Line 24
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
; Line 26
	mov	al, 1
$LN8@AllocateSp:
; Line 27
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AllocateSpace@CMemBlockManager@@QAE_NI@Z ENDP		; CMemBlockManager::AllocateSpace
_TEXT	ENDS
EXTRN	_MidFree@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeSpace@CMemBlockManager@@QAEXXZ PROC		; CMemBlockManager::FreeSpace
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_MidFree@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 34
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeSpace@CMemBlockManager@@QAEXXZ ENDP		; CMemBlockManager::FreeSpace
_TEXT	ENDS
PUBLIC	?AllocateBlock@CMemBlockManager@@QAEPAXXZ	; CMemBlockManager::AllocateBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?AllocateBlock@CMemBlockManager@@QAEPAXXZ PROC		; CMemBlockManager::AllocateBlock
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 38
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@AllocateBl
; Line 39
	xor	eax, eax
	jmp	SHORT $LN2@AllocateBl
$LN1@AllocateBl:
; Line 40
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _p$[ebp], edx
; Line 41
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
; Line 42
	mov	eax, DWORD PTR _p$[ebp]
$LN2@AllocateBl:
; Line 43
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocateBlock@CMemBlockManager@@QAEPAXXZ ENDP		; CMemBlockManager::AllocateBlock
_TEXT	ENDS
PUBLIC	?FreeBlock@CMemBlockManager@@QAEXPAX@Z		; CMemBlockManager::FreeBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?FreeBlock@CMemBlockManager@@QAEXPAX@Z PROC		; CMemBlockManager::FreeBlock
; _this$ = ecx
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 47
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@FreeBlock
; Line 48
	jmp	SHORT $LN2@FreeBlock
$LN1@FreeBlock:
; Line 49
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@FreeBlock:
; Line 51
	mov	esp, ebp
	pop	ebp
	ret	4
?FreeBlock@CMemBlockManager@@QAEXPAX@Z ENDP		; CMemBlockManager::FreeBlock
_TEXT	ENDS
PUBLIC	?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z ; NWindows::NSynchronization::CSemaphore::Create
PUBLIC	?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close
PUBLIC	?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z	; CMemBlockManagerMt::AllocateSpace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numLockBlocks$ = -8					; size = 4
_this$ = -4						; size = 4
_numBlocks$ = 8						; size = 4
_numNoLockBlocks$ = 12					; size = 4
?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z PROC	; CMemBlockManagerMt::AllocateSpace
; _this$ = ecx
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 56
	mov	eax, DWORD PTR _numNoLockBlocks$[ebp]
	cmp	eax, DWORD PTR _numBlocks$[ebp]
	jbe	SHORT $LN2@AllocateSp@2
; Line 57
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@AllocateSp@2
$LN2@AllocateSp@2:
; Line 58
	mov	ecx, DWORD PTR _numBlocks$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateSpace@CMemBlockManager@@QAE_NI@Z ; CMemBlockManager::AllocateSpace
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@AllocateSp@2
; Line 59
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN3@AllocateSp@2
$LN1@AllocateSp@2:
; Line 60
	mov	eax, DWORD PTR _numBlocks$[ebp]
	sub	eax, DWORD PTR _numNoLockBlocks$[ebp]
	mov	DWORD PTR _numLockBlocks$[ebp], eax
; Line 61
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close
; Line 62
	mov	ecx, DWORD PTR _numLockBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numLockBlocks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z ; NWindows::NSynchronization::CSemaphore::Create
$LN3@AllocateSp@2:
; Line 63
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z ENDP	; CMemBlockManagerMt::AllocateSpace
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CSemaphore::Close, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CSemaphore::Close
_TEXT	ENDS
EXTRN	_Semaphore_Create@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initiallyCount$ = 8					; size = 4
_maxCount$ = 12						; size = 4
?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z PROC ; NWindows::NSynchronization::CSemaphore::Create, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	mov	eax, DWORD PTR _maxCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initiallyCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_Semaphore_Create@12
; Line 137
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z ENDP ; NWindows::NSynchronization::CSemaphore::Create
_TEXT	ENDS
PUBLIC	?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z ; CMemBlockManagerMt::AllocateSpaceAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desiredNumberOfBlocks$ = 8				; size = 4
_numNoLockBlocks$ = 12					; size = 4
?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z PROC	; CMemBlockManagerMt::AllocateSpaceAlways
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.cpp
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _numNoLockBlocks$[ebp]
	cmp	eax, DWORD PTR _desiredNumberOfBlocks$[ebp]
	jbe	SHORT $LN4@AllocateSp@3
; Line 68
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@AllocateSp@3
$LN4@AllocateSp@3:
; Line 71
	mov	ecx, DWORD PTR _numNoLockBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desiredNumberOfBlocks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z ; CMemBlockManagerMt::AllocateSpace
	test	eax, eax
	jne	SHORT $LN2@AllocateSp@3
; Line 72
	xor	eax, eax
	jmp	SHORT $LN6@AllocateSp@3
$LN2@AllocateSp@3:
; Line 73
	mov	eax, DWORD PTR _desiredNumberOfBlocks$[ebp]
	cmp	eax, DWORD PTR _numNoLockBlocks$[ebp]
	jne	SHORT $LN1@AllocateSp@3
; Line 74
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN6@AllocateSp@3
$LN1@AllocateSp@3:
; Line 75
	mov	ecx, DWORD PTR _desiredNumberOfBlocks$[ebp]
	sub	ecx, DWORD PTR _numNoLockBlocks$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR _numNoLockBlocks$[ebp]
	mov	DWORD PTR _desiredNumberOfBlocks$[ebp], ecx
; Line 76
	jmp	SHORT $LN4@AllocateSp@3
$LN6@AllocateSp@3:
; Line 77
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z ENDP	; CMemBlockManagerMt::AllocateSpaceAlways
_TEXT	ENDS
PUBLIC	?FreeSpace@CMemBlockManagerMt@@QAEXXZ		; CMemBlockManagerMt::FreeSpace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeSpace@CMemBlockManagerMt@@QAEXXZ PROC		; CMemBlockManagerMt::FreeSpace
; _this$ = ecx
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 81
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSpace@CMemBlockManager@@QAEXXZ	; CMemBlockManager::FreeSpace
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeSpace@CMemBlockManagerMt@@QAEXXZ ENDP		; CMemBlockManagerMt::FreeSpace
_TEXT	ENDS
PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
PUBLIC	?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ	; CMemBlockManagerMt::AllocateBlock
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ$0
__ehfuncinfo$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T66882 = -32						; size = 4
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ PROC	; CMemBlockManagerMt::AllocateBlock
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateBlock@CMemBlockManager@@QAEPAXXZ ; CMemBlockManager::AllocateBlock
	mov	DWORD PTR $T66882[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T66882[ebp]
; Line 90
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AllocateBl@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@AllocateBl@2:
	DD	1
	DD	$LN6@AllocateBl@2
$LN6@AllocateBl@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@AllocateBl@2
$LN4@AllocateBl@2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ ENDP	; CMemBlockManagerMt::AllocateBlock
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
_TEXT	ENDS
PUBLIC	?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Release
PUBLIC	?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z	; CMemBlockManagerMt::FreeBlock
xdata$x	SEGMENT
__unwindtable$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z$0
__ehfuncinfo$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_lock$66715 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_lockMode$ = 12						; size = 1
?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z PROC		; CMemBlockManagerMt::FreeBlock
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.cpp
; Line 93
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@FreeBlock@2
; Line 95
	jmp	SHORT $LN3@FreeBlock@2
$LN2@FreeBlock@2:
; Line 97
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _lock$66715[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 98
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeBlock@CMemBlockManager@@QAEXPAX@Z	; CMemBlockManager::FreeBlock
; Line 99
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$66715[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
; Line 100
	movzx	edx, BYTE PTR _lockMode$[ebp]
	test	edx, edx
	je	SHORT $LN3@FreeBlock@2
; Line 101
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Release
$LN3@FreeBlock@2:
; Line 102
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@FreeBlock@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@FreeBlock@2:
	DD	1
	DD	$LN8@FreeBlock@2
$LN8@FreeBlock@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@FreeBlock@2
$LN6@FreeBlock@2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z$0:
	lea	ecx, DWORD PTR _lock$66715[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z ENDP		; CMemBlockManagerMt::FreeBlock
EXTRN	_Semaphore_Release1@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CSemaphore::Release, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 138
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Semaphore_Release1@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CSemaphore::Release
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::DeleteBack
PUBLIC	?Back@?$CRecordVector@PAX@@QAEAAPAXXZ		; CRecordVector<void *>::Back
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
PUBLIC	?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z	; CMemBlocks::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_manager$ = 8						; size = 4
?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z PROC	; CMemBlocks::Free
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.cpp
; Line 105
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Free:
; Line 106
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	test	eax, eax
	jbe	SHORT $LN1@Free
; Line 108
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Back@?$CRecordVector@PAX@@QAEAAPAXXZ	; CRecordVector<void *>::Back
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	call	?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z ; CMemBlockManagerMt::FreeBlock
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 110
	jmp	SHORT $LN2@Free
$LN1@Free:
; Line 111
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 112
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z ENDP	; CMemBlocks::Free
_TEXT	ENDS
PUBLIC	?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::ClearAndFree
PUBLIC	?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::FreeOpt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_manager$ = 8						; size = 4
?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z PROC	; CMemBlocks::FreeOpt
; _this$ = ecx
; Line 115
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::Free
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ClearAndFree
; Line 118
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ENDP	; CMemBlocks::FreeOpt
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z ; CMemBlocks::WriteToStream
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv92 = -32						; size = 8
___result__$66744 = -24					; size = 4
_curSize$66738 = -20					; size = 4
_blockIndex$66734 = -16					; size = 4
_totalSize$ = -12					; size = 8
_this$ = -4						; size = 4
_blockSize$ = 8						; size = 4
_outStream$ = 12					; size = 4
?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z PROC ; CMemBlocks::WriteToStream
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _totalSize$[ebp], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _totalSize$[ebp+4], edx
; Line 123
	mov	DWORD PTR _blockIndex$66734[ebp], 0
	jmp	SHORT $LN6@WriteToStr
$LN5@WriteToStr:
	mov	eax, DWORD PTR _blockIndex$66734[ebp]
	add	eax, 1
	mov	DWORD PTR _blockIndex$66734[ebp], eax
$LN6@WriteToStr:
	cmp	DWORD PTR _totalSize$[ebp+4], 0
	ja	SHORT $LN9@WriteToStr
	cmp	DWORD PTR _totalSize$[ebp], 0
	jbe	$LN4@WriteToStr
$LN9@WriteToStr:
; Line 125
	mov	ecx, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR _curSize$66738[ebp], ecx
; Line 126
	mov	edx, DWORD PTR _curSize$66738[ebp]
	xor	eax, eax
	mov	DWORD PTR tv92[ebp], edx
	mov	DWORD PTR tv92[ebp+4], eax
	mov	ecx, DWORD PTR _totalSize$[ebp+4]
	cmp	ecx, DWORD PTR tv92[ebp+4]
	ja	SHORT $LN3@WriteToStr
	jb	SHORT $LN10@WriteToStr
	mov	edx, DWORD PTR _totalSize$[ebp]
	cmp	edx, DWORD PTR tv92[ebp]
	jae	SHORT $LN3@WriteToStr
$LN10@WriteToStr:
; Line 127
	mov	eax, DWORD PTR _totalSize$[ebp]
	mov	DWORD PTR _curSize$66738[ebp], eax
$LN3@WriteToStr:
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	cmp	DWORD PTR _blockIndex$66734[ebp], eax
	jb	SHORT $LN2@WriteToStr
; Line 129
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN7@WriteToStr
$LN2@WriteToStr:
; Line 130
	mov	ecx, DWORD PTR _curSize$66738[ebp]
	push	ecx
	mov	edx, DWORD PTR _blockIndex$66734[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$66744[ebp], eax
	cmp	DWORD PTR ___result__$66744[ebp], 0
	je	SHORT $LN1@WriteToStr
	mov	eax, DWORD PTR ___result__$66744[ebp]
	jmp	SHORT $LN7@WriteToStr
$LN1@WriteToStr:
; Line 131
	mov	edx, DWORD PTR _curSize$66738[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _totalSize$[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _totalSize$[ebp+4]
	sbb	edx, eax
	mov	DWORD PTR _totalSize$[ebp], ecx
	mov	DWORD PTR _totalSize$[ebp+4], edx
; Line 132
	jmp	$LN5@WriteToStr
$LN4@WriteToStr:
; Line 133
	xor	eax, eax
$LN7@WriteToStr:
; Line 134
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z ENDP ; CMemBlocks::WriteToStream
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::FreeBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_memManager$ = 12					; size = 4
?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z PROC ; CMemLockBlocks::FreeBlock
; _this$ = ecx
; Line 138
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _memManager$[ebp]
	call	?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z ; CMemBlockManagerMt::FreeBlock
; Line 140
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	DWORD PTR [eax], 0
; Line 141
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z ENDP ; CMemLockBlocks::FreeBlock
_TEXT	ENDS
PUBLIC	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_memManager$ = 8					; size = 4
?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z PROC ; CMemLockBlocks::Free
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Free@2:
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	test	eax, eax
	jbe	SHORT $LN1@Free@2
; Line 147
	mov	eax, DWORD PTR _memManager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::FreeBlock
; Line 148
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 149
	jmp	SHORT $LN2@Free@2
$LN1@Free@2:
; Line 150
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 151
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ENDP ; CMemLockBlocks::Free
_TEXT	ENDS
PUBLIC	?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z ; CMemBlockManagerMt::ReleaseLockedBlocks
PUBLIC	?SwitchToNoLockMode@CMemLockBlocks@@QAEHPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::SwitchToNoLockMode
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$66765 = -8					; size = 4
_this$ = -4						; size = 4
_memManager$ = 8					; size = 4
?SwitchToNoLockMode@CMemLockBlocks@@QAEHPAVCMemBlockManagerMt@@@Z PROC ; CMemLockBlocks::SwitchToNoLockMode
; _this$ = ecx
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 155
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN3@SwitchToNo
; Line 157
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	test	eax, eax
	jbe	SHORT $LN2@SwitchToNo
; Line 159
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	push	eax
	mov	ecx, DWORD PTR _memManager$[ebp]
	call	?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z ; CMemBlockManagerMt::ReleaseLockedBlocks
	mov	DWORD PTR ___result__$66765[ebp], eax
	cmp	DWORD PTR ___result__$66765[ebp], 0
	je	SHORT $LN2@SwitchToNo
	mov	eax, DWORD PTR ___result__$66765[ebp]
	jmp	SHORT $LN4@SwitchToNo
$LN2@SwitchToNo:
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 0
$LN3@SwitchToNo:
; Line 163
	xor	eax, eax
$LN4@SwitchToNo:
; Line 164
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SwitchToNoLockMode@CMemLockBlocks@@QAEHPAVCMemBlockManagerMt@@@Z ENDP ; CMemLockBlocks::SwitchToNoLockMode
_TEXT	ENDS
PUBLIC	?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z ; NWindows::NSynchronization::CSemaphore::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_number$ = 8						; size = 4
?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z PROC	; CMemBlockManagerMt::ReleaseLockedBlocks, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z ; NWindows::NSynchronization::CSemaphore::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z ENDP	; CMemBlockManagerMt::ReleaseLockedBlocks
_TEXT	ENDS
EXTRN	_Semaphore_ReleaseN@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_releaseCount$ = 8					; size = 4
?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z PROC ; NWindows::NSynchronization::CSemaphore::Release, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _releaseCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_Semaphore_ReleaseN@8
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z ENDP ; NWindows::NSynchronization::CSemaphore::Release
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	?GetBlockSize@CMemBlockManager@@QBEIXZ		; CMemBlockManager::GetBlockSize
PUBLIC	?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv169 = -24						; size = 4
_i$66774 = -20						; size = 4
_blockSize$ = -16					; size = 4
_totalSize$ = -12					; size = 8
_this$ = -4						; size = 4
_blocks$ = 8						; size = 4
_memManager$ = 12					; size = 4
?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z PROC ; CMemLockBlocks::Detach
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.cpp
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 168
	mov	eax, DWORD PTR _memManager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blocks$[ebp]
	call	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Free
; Line 169
	mov	ecx, DWORD PTR _blocks$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx+24], al
; Line 170
	mov	DWORD PTR _totalSize$[ebp], 0
	mov	DWORD PTR _totalSize$[ebp+4], 0
; Line 171
	mov	ecx, DWORD PTR _memManager$[ebp]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	mov	DWORD PTR _blockSize$[ebp], eax
; Line 172
	mov	DWORD PTR _i$66774[ebp], 0
	jmp	SHORT $LN5@Detach
$LN4@Detach:
	mov	ecx, DWORD PTR _i$66774[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$66774[ebp], ecx
$LN5@Detach:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	cmp	DWORD PTR _i$66774[ebp], eax
	jae	SHORT $LN3@Detach
; Line 174
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv169[ebp], edx
	mov	eax, DWORD PTR tv169[ebp]
	mov	ecx, DWORD PTR _totalSize$[ebp+4]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN2@Detach
	jb	SHORT $LN8@Detach
	mov	edx, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR _totalSize$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN2@Detach
$LN8@Detach:
; Line 175
	mov	ecx, DWORD PTR _i$66774[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _blocks$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 176
	jmp	SHORT $LN1@Detach
$LN2@Detach:
; Line 177
	mov	eax, DWORD PTR _memManager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$66774[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::FreeBlock
$LN1@Detach:
; Line 178
	mov	edx, DWORD PTR _i$66774[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	DWORD PTR [eax], 0
; Line 179
	mov	eax, DWORD PTR _blockSize$[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _totalSize$[ebp]
	adc	ecx, DWORD PTR _totalSize$[ebp+4]
	mov	DWORD PTR _totalSize$[ebp], eax
	mov	DWORD PTR _totalSize$[ebp+4], ecx
; Line 180
	jmp	$LN4@Detach
$LN3@Detach:
; Line 181
	mov	edx, DWORD PTR _blocks$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 182
	mov	ecx, DWORD PTR _memManager$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Free
; Line 183
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z ENDP ; CMemLockBlocks::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetBlockSize@CMemBlockManager@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBlockSize@CMemBlockManager@@QBEIXZ PROC		; CMemBlockManager::GetBlockSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBlockSize@CMemBlockManager@@QBEIXZ ENDP		; CMemBlockManager::GetBlockSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
$T66937 = -8						; size = 4
_this$ = -4						; size = 4
?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::ClearAndFree, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T66937[ebp], ecx
	mov	edx, DWORD PTR $T66937[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 127
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 128
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 129
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::ClearAndFree
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::DeleteBack, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::DeleteBack
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CRecordVector@PAX@@QAEAAPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ PROC		; CRecordVector<void *>::Back, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*4-4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ ENDP		; CRecordVector<void *>::Back
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T66951 = -20						; size = 4
$T66950 = -16						; size = 4
_p$66804 = -12						; size = 4
_newCapacity$66803 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$66803[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$66803[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66950[ebp], eax
	mov	eax, DWORD PTR $T66950[ebp]
	mov	DWORD PTR _p$66804[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$66804[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66951[ebp], edx
	mov	eax, DWORD PTR $T66951[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$66804[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$66803[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
