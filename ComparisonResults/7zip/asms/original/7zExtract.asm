; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zExtract.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
PUBLIC	?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z ; NArchive::N7z::CFolderOutStream::Init
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zextract.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startIndex$ = 8					; size = 4
_indexes$ = 12						; size = 4
_numFiles$ = 16						; size = 4
?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z PROC	; NArchive::N7z::CFolderOutStream::Init
; _this$ = ecx
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 67
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _indexes$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _numFiles$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 0
; Line 71
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+52], 0
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z ENDP	; NArchive::N7z::CFolderOutStream::Init
_TEXT	ENDS
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z	; NArchive::N7z::CDatabase::IsItemAnti
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z$0
__ehfuncinfo$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv195 = -72						; size = 4
tv168 = -68						; size = 4
tv143 = -64						; size = 4
tv86 = -60						; size = 4
tv79 = -56						; size = 4
$T74387 = -52						; size = 4
$T74384 = -48						; size = 4
___result__$73119 = -44					; size = 4
_realOutStream$ = -36					; size = 4
_askMode$ = -28						; size = 4
_nextFileIndex$ = -24					; size = 4
_fi$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_isCorrupted$ = 8					; size = 1
?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z PROC	; NArchive::N7z::CFolderOutStream::OpenFile
; _this$ = ecx
; Line 77
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _fi$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@OpenFile
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN7@OpenFile
$LN6@OpenFile:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv79[ebp], edx
$LN7@OpenFile:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _nextFileIndex$[ebp], eax
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	edx, DWORD PTR _nextFileIndex$[ebp]
	jne	SHORT $LN8@OpenFile
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN9@OpenFile
$LN8@OpenFile:
	mov	DWORD PTR tv86[ebp], 2
$LN9@OpenFile:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _askMode$[ebp], edx
; Line 89
	movzx	eax, BYTE PTR _isCorrupted$[ebp]
	test	eax, eax
	je	SHORT $LN3@OpenFile
	cmp	DWORD PTR _askMode$[ebp], 0
	jne	SHORT $LN3@OpenFile
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@OpenFile
	mov	edx, DWORD PTR _fi$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN3@OpenFile
; Line 90
	mov	DWORD PTR _askMode$[ebp], 1
$LN3@OpenFile:
; Line 92
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 93
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->
	mov	DWORD PTR tv143[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _askMode$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	mov	edx, DWORD PTR tv143[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73119[ebp], eax
	cmp	DWORD PTR ___result__$73119[ebp], 0
	je	SHORT $LN2@OpenFile
	mov	edx, DWORD PTR ___result__$73119[ebp]
	mov	DWORD PTR $T74384[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T74384[ebp]
	jmp	$LN4@OpenFile
$LN2@OpenFile:
; Line 95
	lea	eax, DWORD PTR _realOutStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 96
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], -1
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN10@OpenFile
	mov	ecx, DWORD PTR _fi$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	je	SHORT $LN10@OpenFile
	mov	eax, DWORD PTR _fi$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN10@OpenFile
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN11@OpenFile
$LN10@OpenFile:
	mov	DWORD PTR tv168[ebp], 0
$LN11@OpenFile:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv168[ebp]
	mov	BYTE PTR [edx+15], al
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+14], 1
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+28], eax
; Line 105
	cmp	DWORD PTR _askMode$[ebp], 0
	jne	SHORT $LN1@OpenFile
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@OpenFile
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+44]
	call	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@OpenFile
	mov	eax, DWORD PTR _fi$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN1@OpenFile
; Line 106
	mov	DWORD PTR _askMode$[ebp], 2
$LN1@OpenFile:
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->
	mov	DWORD PTR tv195[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$[ebp]
	push	edx
	mov	eax, DWORD PTR tv195[ebp]
	push	eax
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T74387[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T74387[ebp]
$LN4@OpenFile:
; Line 108
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@OpenFile
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN16@OpenFile:
	DD	1
	DD	$LN15@OpenFile
$LN15@OpenFile:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@OpenFile
$LN13@OpenFile:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z$0:
	lea	ecx, DWORD PTR _realOutStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ENDP	; NArchive::N7z::CFolderOutStream::OpenFile
PUBLIC	??A?$CRecordVector@_N@@QBEAB_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z PROC	; NArchive::N7z::CDatabase::IsItemAnti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN3@IsItemAnti
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@IsItemAnti
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@IsItemAnti
$LN3@IsItemAnti:
	mov	DWORD PTR tv74[ebp], 0
$LN4@IsItemAnti:
	mov	al, BYTE PTR tv74[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ENDP	; NArchive::N7z::CDatabase::IsItemAnti
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_res$ = 8						; size = 4
?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z PROC ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zextract.cpp
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 0
; Line 115
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN3@CloseFile_
; Line 116
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN2@CloseFile_
$LN3@CloseFile_:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN2@CloseFile_
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 120
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx
$LN2@CloseFile_:
; Line 123
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->
	mov	DWORD PTR tv93[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	mov	edx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 125
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ENDP ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult
_TEXT	ENDS
PUBLIC	?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::CloseFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -12						; size = 4
_fi$ = -8						; size = 4
_this$ = -4						; size = 4
?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ PROC	; NArchive::N7z::CFolderOutStream::CloseFile
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _fi$[ebp], eax
; Line 132
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	test	ecx, ecx
	je	SHORT $LN3@CloseFile
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	xor	eax, -1
	mov	ecx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	je	SHORT $LN3@CloseFile
	mov	DWORD PTR tv83[ebp], 3
	jmp	SHORT $LN4@CloseFile
$LN3@CloseFile:
	mov	DWORD PTR tv83[ebp], 0
$LN4@CloseFile:
	mov	edx, DWORD PTR tv83[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult
; Line 133
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ENDP	; NArchive::N7z::CFolderOutStream::CloseFile
; Function compile flags: /Odtp /RTCsu
tv90 = -16						; size = 4
___result__$73143 = -12					; size = 4
___result__$73141 = -8					; size = 4
_this$ = -4						; size = 4
?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ PROC ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
$LN4@ProcessEmp:
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN3@ProcessEmp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN3@ProcessEmp
; Line 139
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile
	mov	DWORD PTR ___result__$73141[ebp], eax
	cmp	DWORD PTR ___result__$73141[ebp], 0
	je	SHORT $LN2@ProcessEmp
	mov	eax, DWORD PTR ___result__$73141[ebp]
	jmp	SHORT $LN5@ProcessEmp
$LN2@ProcessEmp:
; Line 140
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::CloseFile
	mov	DWORD PTR ___result__$73143[ebp], eax
	cmp	DWORD PTR ___result__$73143[ebp], 0
	je	SHORT $LN1@ProcessEmp
	mov	eax, DWORD PTR ___result__$73143[ebp]
	jmp	SHORT $LN5@ProcessEmp
$LN1@ProcessEmp:
; Line 141
	jmp	SHORT $LN4@ProcessEmp
$LN3@ProcessEmp:
; Line 142
	xor	eax, eax
$LN5@ProcessEmp:
; Line 143
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ENDP ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CFolderOutStream::Write
EXTRN	@CrcUpdate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv213 = -60						; size = 4
tv83 = -56						; size = 4
tv74 = -52						; size = 4
tv169 = -48						; size = 4
tv166 = -44						; size = 8
___result__$73176 = -36					; size = 4
___result__$73173 = -32					; size = 4
___result__$73170 = -28					; size = 4
___result__$73168 = -24					; size = 4
___result__$73166 = -20					; size = 4
_result$73159 = -16					; size = 4
_cur$73157 = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z PROC ; NArchive::N7z::CFolderOutStream::Write
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN14@Write
; Line 148
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN14@Write:
; Line 150
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN13@Write
; Line 152
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+14]
	test	edx, edx
	je	$LN12@Write
; Line 154
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv166[ebp], eax
	mov	DWORD PTR tv166[ebp+4], ecx
	mov	DWORD PTR tv169[ebp], edx
	mov	eax, DWORD PTR tv169[ebp]
	mov	ecx, DWORD PTR tv166[ebp+4]
	cmp	ecx, DWORD PTR [eax+28]
	ja	SHORT $LN18@Write
	jb	SHORT $LN21@Write
	mov	edx, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN18@Write
$LN21@Write:
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN19@Write
$LN18@Write:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv74[ebp], eax
$LN19@Write:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _cur$73157[ebp], ecx
; Line 155
	mov	DWORD PTR _result$73159[ebp], 0
; Line 156
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN11@Write
; Line 157
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv83[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _cur$73157[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$73157[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv83[ebp]
	push	edx
	mov	eax, DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$73159[ebp], eax
$LN11@Write:
; Line 158
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	test	ecx, ecx
	je	SHORT $LN10@Write
; Line 159
	mov	edx, DWORD PTR _cur$73157[ebp]
	push	edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN10@Write:
; Line 160
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN9@Write
; Line 161
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur$73157[ebp]
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [ecx], eax
$LN9@Write:
; Line 162
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _cur$73157[ebp]
	mov	DWORD PTR _data$[ebp], edx
; Line 163
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _cur$73157[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 164
	mov	ecx, DWORD PTR _cur$73157[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+24]
	sub	esi, ecx
	mov	ecx, DWORD PTR [eax+28]
	sbb	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], esi
	mov	DWORD PTR [edx+28], ecx
; Line 165
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv213[ebp], eax
	mov	ecx, DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR [ecx+24]
	or	eax, DWORD PTR [edx+28]
	jne	SHORT $LN8@Write
; Line 167
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::CloseFile
	mov	DWORD PTR ___result__$73166[ebp], eax
	cmp	DWORD PTR ___result__$73166[ebp], 0
	je	SHORT $LN7@Write
	mov	eax, DWORD PTR ___result__$73166[ebp]
	jmp	$LN16@Write
$LN7@Write:
; Line 168
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
	mov	DWORD PTR ___result__$73168[ebp], eax
	cmp	DWORD PTR ___result__$73168[ebp], 0
	je	SHORT $LN8@Write
	mov	eax, DWORD PTR ___result__$73168[ebp]
	jmp	SHORT $LN16@Write
$LN8@Write:
; Line 170
	mov	ecx, DWORD PTR _result$73159[ebp]
	mov	DWORD PTR ___result__$73170[ebp], ecx
	cmp	DWORD PTR ___result__$73170[ebp], 0
	je	SHORT $LN5@Write
	mov	eax, DWORD PTR ___result__$73170[ebp]
	jmp	SHORT $LN16@Write
$LN5@Write:
; Line 171
	cmp	DWORD PTR _cur$73157[ebp], 0
	jne	SHORT $LN4@Write
; Line 172
	jmp	SHORT $LN13@Write
$LN4@Write:
; Line 173
	jmp	$LN14@Write
$LN12@Write:
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles
	mov	DWORD PTR ___result__$73173[ebp], eax
	cmp	DWORD PTR ___result__$73173[ebp], 0
	je	SHORT $LN3@Write
	mov	eax, DWORD PTR ___result__$73173[ebp]
	jmp	SHORT $LN16@Write
$LN3@Write:
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN2@Write
; Line 185
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 1
; Line 187
	mov	eax, 536870928				; 20000010H
	jmp	SHORT $LN16@Write
$LN2@Write:
; Line 189
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile
	mov	DWORD PTR ___result__$73176[ebp], eax
	cmp	DWORD PTR ___result__$73176[ebp], 0
	je	SHORT $LN1@Write
	mov	eax, DWORD PTR ___result__$73176[ebp]
	jmp	SHORT $LN16@Write
$LN1@Write:
; Line 190
	jmp	$LN14@Write
$LN13@Write:
; Line 192
	xor	eax, eax
$LN16@Write:
; Line 193
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN24@Write:
	DD	1
	DD	$LN23@Write
$LN23@Write:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@Write
$LN22@Write:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z ENDP ; NArchive::N7z::CFolderOutStream::Write
_TEXT	ENDS
PUBLIC	?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$73190 = -12					; size = 4
___result__$73187 = -8					; size = 4
_this$ = -4						; size = 4
_callbackOperationResult$ = 8				; size = 4
?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z PROC ; NArchive::N7z::CFolderOutStream::FlushCorrupted
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN6@FlushCorru:
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@FlushCorru
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+14]
	test	edx, edx
	je	SHORT $LN4@FlushCorru
; Line 201
	mov	eax, DWORD PTR _callbackOperationResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult
	mov	DWORD PTR ___result__$73187[ebp], eax
	cmp	DWORD PTR ___result__$73187[ebp], 0
	je	SHORT $LN3@FlushCorru
	mov	eax, DWORD PTR ___result__$73187[ebp]
	jmp	SHORT $LN7@FlushCorru
$LN3@FlushCorru:
; Line 203
	jmp	SHORT $LN2@FlushCorru
$LN4@FlushCorru:
; Line 205
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile
	mov	DWORD PTR ___result__$73190[ebp], eax
	cmp	DWORD PTR ___result__$73190[ebp], 0
	je	SHORT $LN2@FlushCorru
	mov	eax, DWORD PTR ___result__$73190[ebp]
	jmp	SHORT $LN7@FlushCorru
$LN2@FlushCorru:
; Line 207
	jmp	SHORT $LN6@FlushCorru
$LN5@FlushCorru:
; Line 208
	xor	eax, eax
$LN7@FlushCorru:
; Line 209
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ENDP ; NArchive::N7z::CFolderOutStream::FlushCorrupted
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
PUBLIC	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
PUBLIC	?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderOutStream::WasWritingFinished
PUBLIC	?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1CDecoder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CFolderOutStream@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderOutStream::CFolderOutStream
PUBLIC	??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
PUBLIC	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	??B?$CObjArray@I@@QAEPAIXZ			; CObjArray<unsigned int>::operator unsigned int *
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
PUBLIC	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
PUBLIC	?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::N7z::CHandler::Extract
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:PROC ; NArchive::N7z::CDecoder::Decode
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	_IID_ICryptoGetTextPassword:BYTE
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	_IID_IArchiveExtractCallbackMessage:BYTE
EXTRN	??0CDecoder@N7z@NArchive@@QAE@_N@Z:PROC		; NArchive::N7z::CDecoder::CDecoder
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__ehfuncinfo$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 09H
	DD	0aH
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13
	DD	00H
	DD	0bH
	DD	0cH
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14
__unwindtable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
	DD	05H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
	DD	05H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
	DD	07H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
	DD	08H
	DD	00H
	DD	09H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv543 = -620						; size = 4
tv542 = -616						; size = 4
tv541 = -612						; size = 4
tv417 = -608						; size = 4
tv540 = -604						; size = 4
tv539 = -600						; size = 4
tv538 = -596						; size = 4
tv537 = -589						; size = 1
tv536 = -588						; size = 4
tv535 = -584						; size = 4
tv534 = -580						; size = 4
tv533 = -576						; size = 4
tv532 = -572						; size = 4
tv531 = -568						; size = 4
tv530 = -564						; size = 4
tv529 = -560						; size = 4
tv528 = -556						; size = 4
tv527 = -549						; size = 1
tv526 = -548						; size = 4
tv338 = -544						; size = 4
tv525 = -540						; size = 4
tv524 = -536						; size = 4
tv308 = -532						; size = 4
tv523 = -528						; size = 4
tv522 = -524						; size = 8
tv521 = -516						; size = 4
tv250 = -512						; size = 4
tv211 = -508						; size = 4
tv210 = -504						; size = 4
tv520 = -500						; size = 4
tv518 = -496						; size = 4
tv517 = -492						; size = 4
tv516 = -488						; size = 4
tv515 = -484						; size = 4
tv170 = -480						; size = 4
tv169 = -476						; size = 4
tv514 = -472						; size = 4
tv512 = -468						; size = 4
tv511 = -464						; size = 4
tv156 = -460						; size = 4
tv510 = -456						; size = 4
tv509 = -452						; size = 4
tv508 = -448						; size = 4
tv507 = -444						; size = 4
tv88 = -440						; size = 4
tv65 = -436						; size = 4
$T74448 = -432						; size = 4
$T74447 = -428						; size = 4
$T74446 = -424						; size = 4
$T74445 = -420						; size = 4
$T74444 = -416						; size = 4
$T74443 = -412						; size = 4
$T74442 = -408						; size = 4
$T74441 = -404						; size = 4
$T74440 = -400						; size = 4
$T74433 = -396						; size = 4
$T74430 = -392						; size = 4
$T74429 = -388						; size = 4
$T74426 = -384						; size = 4
$T74425 = -380						; size = 4
$T74424 = -376						; size = 4
$T74421 = -372						; size = 4
___result__$73385 = -368				; size = 4
___result__$73382 = -364				; size = 4
___result__$73376 = -360				; size = 4
___result__$73371 = -356				; size = 4
_resOp$73369 = -352					; size = 4
_wasFinished$73368 = -345				; size = 1
_result$73363 = -344					; size = 4
_password$73362 = -336					; size = 12
_passwordIsDefined$73361 = -313				; size = 1
_isEncrypted$73360 = -301				; size = 1
_getTextPassword$73353 = -292				; size = 4
___result__$73312 = -284				; size = 4
_result$73311 = -280					; size = 4
_fileIndex2$73305 = -276				; size = 4
_k$73301 = -272						; size = 4
_nextFile$73300 = -268					; size = 4
_numSolidFiles$73298 = -264				; size = 4
_folderIndex$73297 = -260				; size = 4
_fileIndex$73296 = -256					; size = 4
___result__$73292 = -252				; size = 4
_i$73288 = -248						; size = 4
_outStream$73287 = -240					; size = 4
_folderOutStream$73281 = -232				; size = 4
_callbackMessage$73276 = -224				; size = 4
_curUnpacked$73238 = -212				; size = 8
_curPacked$73237 = -200					; size = 8
_decoder$73236 = -188					; size = 100
_progress$73235 = -80					; size = 4
_lps$73229 = -72					; size = 4
___result__$73226 = -68					; size = 4
_index$73222 = -64					; size = 4
_folderIndex$73218 = -60				; size = 4
_fileIndex$73217 = -56					; size = 4
_i$73213 = -52						; size = 4
_nextFile$73212 = -48					; size = 4
_prevFolder$73211 = -44					; size = 4
_allFilesMode$73204 = -37				; size = 1
_importantTotalUnpacked$73203 = -36			; size = 8
_extractCallback$73202 = -24				; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testModeSpec$ = 20					; size = 4
_extractCallbackSpec$ = 24				; size = 4
?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::N7z::CHandler::Extract
; Line 213
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 604				; 0000025cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-620]
	mov	ecx, 151				; 00000097H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 214
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 216
	mov	eax, DWORD PTR _extractCallbackSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 218
	mov	DWORD PTR _importantTotalUnpacked$73203[ebp], 0
	mov	DWORD PTR _importantTotalUnpacked$73203[ebp+4], 0
; Line 222
	xor	ecx, ecx
	cmp	DWORD PTR _numItems$[ebp], -1
	sete	cl
	mov	BYTE PTR _allFilesMode$73204[ebp], cl
; Line 223
	movzx	edx, BYTE PTR _allFilesMode$73204[ebp]
	test	edx, edx
	je	SHORT $LN39@Extract
; Line 224
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _numItems$[ebp], eax
$LN39@Extract:
; Line 226
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN38@Extract
; Line 227
	mov	DWORD PTR $T74421[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74421[ebp]
	jmp	$LN41@Extract
$LN38@Extract:
; Line 230
	mov	DWORD PTR _prevFolder$73211[ebp], -1
; Line 231
	mov	DWORD PTR _nextFile$73212[ebp], 0
; Line 235
	mov	DWORD PTR _i$73213[ebp], 0
	jmp	SHORT $LN37@Extract
$LN36@Extract:
	mov	ecx, DWORD PTR _i$73213[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73213[ebp], ecx
$LN37@Extract:
	mov	edx, DWORD PTR _i$73213[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	$LN35@Extract
; Line 237
	movzx	eax, BYTE PTR _allFilesMode$73204[ebp]
	test	eax, eax
	je	SHORT $LN43@Extract
	mov	ecx, DWORD PTR _i$73213[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN44@Extract
$LN43@Extract:
	mov	edx, DWORD PTR _i$73213[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv88[ebp], ecx
$LN44@Extract:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _fileIndex$73217[ebp], edx
; Line 238
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	DWORD PTR tv507[ebp], eax
	mov	eax, DWORD PTR _fileIndex$73217[ebp]
	mov	ecx, DWORD PTR tv507[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _folderIndex$73218[ebp], edx
; Line 239
	cmp	DWORD PTR _folderIndex$73218[ebp], -1
	jne	SHORT $LN34@Extract
; Line 240
	jmp	SHORT $LN36@Extract
$LN34@Extract:
; Line 241
	mov	eax, DWORD PTR _folderIndex$73218[ebp]
	cmp	eax, DWORD PTR _prevFolder$73211[ebp]
	jne	SHORT $LN32@Extract
	mov	ecx, DWORD PTR _fileIndex$73217[ebp]
	cmp	ecx, DWORD PTR _nextFile$73212[ebp]
	jae	SHORT $LN33@Extract
$LN32@Extract:
; Line 242
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	DWORD PTR tv508[ebp], eax
	mov	edx, DWORD PTR _folderIndex$73218[ebp]
	mov	eax, DWORD PTR tv508[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _nextFile$73212[ebp], ecx
$LN33@Extract:
; Line 243
	mov	edx, DWORD PTR _nextFile$73212[ebp]
	mov	DWORD PTR _index$73222[ebp], edx
	jmp	SHORT $LN31@Extract
$LN30@Extract:
	mov	eax, DWORD PTR _index$73222[ebp]
	add	eax, 1
	mov	DWORD PTR _index$73222[ebp], eax
$LN31@Extract:
	mov	ecx, DWORD PTR _index$73222[ebp]
	cmp	ecx, DWORD PTR _fileIndex$73217[ebp]
	ja	SHORT $LN29@Extract
; Line 244
	mov	edx, DWORD PTR _index$73222[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR tv509[ebp], eax
	mov	eax, DWORD PTR tv509[ebp]
	mov	ecx, DWORD PTR _importantTotalUnpacked$73203[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _importantTotalUnpacked$73203[ebp+4]
	adc	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _importantTotalUnpacked$73203[ebp], ecx
	mov	DWORD PTR _importantTotalUnpacked$73203[ebp+4], edx
	jmp	SHORT $LN30@Extract
$LN29@Extract:
; Line 245
	mov	eax, DWORD PTR _fileIndex$73217[ebp]
	add	eax, 1
	mov	DWORD PTR _nextFile$73212[ebp], eax
; Line 246
	mov	ecx, DWORD PTR _folderIndex$73218[ebp]
	mov	DWORD PTR _prevFolder$73211[ebp], ecx
; Line 247
	jmp	$LN36@Extract
$LN35@Extract:
; Line 250
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->
	mov	DWORD PTR tv510[ebp], eax
	mov	edx, DWORD PTR tv510[ebp]
	mov	DWORD PTR tv156[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _importantTotalUnpacked$73203[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _importantTotalUnpacked$73203[ebp]
	push	ecx
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	mov	eax, DWORD PTR tv156[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv511[ebp], eax
	mov	eax, DWORD PTR tv511[ebp]
	mov	DWORD PTR ___result__$73226[ebp], eax
	cmp	DWORD PTR ___result__$73226[ebp], 0
	je	SHORT $LN28@Extract
	mov	ecx, DWORD PTR ___result__$73226[ebp]
	mov	DWORD PTR $T74424[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74424[ebp]
	jmp	$LN41@Extract
$LN28@Extract:
; Line 252
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv512[ebp], eax
	mov	edx, DWORD PTR tv512[ebp]
	mov	DWORD PTR $T74426[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T74426[ebp], 0
	je	SHORT $LN45@Extract
	mov	ecx, DWORD PTR $T74426[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv514[ebp], eax
	mov	eax, DWORD PTR tv514[ebp]
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN46@Extract
$LN45@Extract:
	mov	DWORD PTR tv169[ebp], 0
$LN46@Extract:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR $T74425[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	edx, DWORD PTR $T74425[ebp]
	mov	DWORD PTR _lps$73229[ebp], edx
; Line 253
	mov	eax, DWORD PTR _lps$73229[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 254
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
	mov	DWORD PTR tv170[ebp], eax
	push	0
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lps$73229[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 262
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+131]
	push	eax
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??0CDecoder@N7z@NArchive@@QAE@_N@Z	; NArchive::N7z::CDecoder::CDecoder
	mov	DWORD PTR tv515[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 266
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR tv516[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 267
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
	mov	DWORD PTR tv517[ebp], eax
	mov	ecx, DWORD PTR tv517[ebp]
	push	ecx
	push	OFFSET _IID_IArchiveExtractCallbackMessage
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
; Line 269
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv518[ebp], eax
	mov	edx, DWORD PTR tv518[ebp]
	mov	DWORD PTR $T74430[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	cmp	DWORD PTR $T74430[ebp], 0
	je	SHORT $LN47@Extract
	mov	ecx, DWORD PTR $T74430[ebp]
	call	??0CFolderOutStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderOutStream::CFolderOutStream
	mov	DWORD PTR tv520[ebp], eax
	mov	eax, DWORD PTR tv520[ebp]
	mov	DWORD PTR tv210[ebp], eax
	jmp	SHORT $LN48@Extract
$LN47@Extract:
	mov	DWORD PTR tv210[ebp], 0
$LN48@Extract:
	mov	ecx, DWORD PTR tv210[ebp]
	mov	DWORD PTR $T74429[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	edx, DWORD PTR $T74429[ebp]
	mov	DWORD PTR _folderOutStream$73281[ebp], edx
; Line 270
	mov	eax, DWORD PTR _folderOutStream$73281[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 272
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _folderOutStream$73281[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 273
	lea	eax, DWORD PTR _extractCallback$73202[ebp]
	push	eax
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	add	ecx, 48					; 00000030H
	call	??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=
; Line 274
	xor	ecx, ecx
	cmp	DWORD PTR _testModeSpec$[ebp], 0
	setne	cl
	mov	edx, DWORD PTR _folderOutStream$73281[ebp]
	mov	BYTE PTR [edx+12], cl
; Line 275
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+40], 0
	setne	cl
	mov	edx, DWORD PTR _folderOutStream$73281[ebp]
	mov	BYTE PTR [edx+13], cl
; Line 277
	mov	DWORD PTR _i$73288[ebp], 0
	jmp	SHORT $LN27@Extract
$LN26@Extract:
	mov	eax, DWORD PTR _lps$73229[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _curUnpacked$73238[ebp]
	mov	edx, DWORD PTR [eax+44]
	adc	edx, DWORD PTR _curUnpacked$73238[ebp+4]
	mov	eax, DWORD PTR _lps$73229[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
	mov	ecx, DWORD PTR _lps$73229[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _curPacked$73237[ebp]
	mov	eax, DWORD PTR [ecx+36]
	adc	eax, DWORD PTR _curPacked$73237[ebp+4]
	mov	ecx, DWORD PTR _lps$73229[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
$LN27@Extract:
; Line 279
	mov	ecx, DWORD PTR _lps$73229[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv211[ebp], eax
	mov	edx, DWORD PTR tv211[ebp]
	mov	DWORD PTR ___result__$73292[ebp], edx
	cmp	DWORD PTR ___result__$73292[ebp], 0
	je	SHORT $LN24@Extract
	mov	eax, DWORD PTR ___result__$73292[ebp]
	mov	DWORD PTR $T74433[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74433[ebp]
	jmp	$LN41@Extract
$LN24@Extract:
; Line 281
	mov	ecx, DWORD PTR _i$73288[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jb	SHORT $LN23@Extract
; Line 282
	jmp	$LN25@Extract
$LN23@Extract:
; Line 284
	mov	DWORD PTR _curUnpacked$73238[ebp], 0
	mov	DWORD PTR _curUnpacked$73238[ebp+4], 0
; Line 285
	mov	DWORD PTR _curPacked$73237[ebp], 0
	mov	DWORD PTR _curPacked$73237[ebp+4], 0
; Line 287
	movzx	edx, BYTE PTR _allFilesMode$73204[ebp]
	test	edx, edx
	je	SHORT $LN49@Extract
	mov	eax, DWORD PTR _i$73288[ebp]
	mov	DWORD PTR tv250[ebp], eax
	jmp	SHORT $LN50@Extract
$LN49@Extract:
	mov	ecx, DWORD PTR _i$73288[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv250[ebp], eax
$LN50@Extract:
	mov	ecx, DWORD PTR tv250[ebp]
	mov	DWORD PTR _fileIndex$73296[ebp], ecx
; Line 288
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	DWORD PTR tv521[ebp], eax
	mov	edx, DWORD PTR _fileIndex$73296[ebp]
	mov	eax, DWORD PTR tv521[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _folderIndex$73297[ebp], ecx
; Line 290
	mov	DWORD PTR _numSolidFiles$73298[ebp], 1
; Line 292
	cmp	DWORD PTR _folderIndex$73297[ebp], -1
	je	$LN22@Extract
; Line 294
	mov	edx, DWORD PTR _folderIndex$73297[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize
	mov	DWORD PTR tv522[ebp], eax
	mov	DWORD PTR tv522[ebp+4], edx
	mov	eax, DWORD PTR tv522[ebp]
	mov	DWORD PTR _curPacked$73237[ebp], eax
	mov	ecx, DWORD PTR tv522[ebp+4]
	mov	DWORD PTR _curPacked$73237[ebp+4], ecx
; Line 295
	mov	edx, DWORD PTR _fileIndex$73296[ebp]
	add	edx, 1
	mov	DWORD PTR _nextFile$73300[ebp], edx
; Line 296
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	DWORD PTR tv523[ebp], eax
	mov	eax, DWORD PTR _folderIndex$73297[ebp]
	mov	ecx, DWORD PTR tv523[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _fileIndex$73296[ebp], edx
; Line 299
	mov	eax, DWORD PTR _i$73288[ebp]
	add	eax, 1
	mov	DWORD PTR _k$73301[ebp], eax
	jmp	SHORT $LN21@Extract
$LN20@Extract:
	mov	ecx, DWORD PTR _k$73301[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$73301[ebp], ecx
$LN21@Extract:
	mov	edx, DWORD PTR _k$73301[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	$LN19@Extract
; Line 301
	movzx	eax, BYTE PTR _allFilesMode$73204[ebp]
	test	eax, eax
	je	SHORT $LN51@Extract
	mov	ecx, DWORD PTR _k$73301[ebp]
	mov	DWORD PTR tv308[ebp], ecx
	jmp	SHORT $LN52@Extract
$LN51@Extract:
	mov	edx, DWORD PTR _k$73301[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv308[ebp], ecx
$LN52@Extract:
	mov	edx, DWORD PTR tv308[ebp]
	mov	DWORD PTR _fileIndex2$73305[ebp], edx
; Line 303
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	DWORD PTR tv524[ebp], eax
	mov	eax, DWORD PTR _fileIndex2$73305[ebp]
	mov	ecx, DWORD PTR tv524[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _folderIndex$73297[ebp]
	jne	SHORT $LN17@Extract
	mov	eax, DWORD PTR _fileIndex2$73305[ebp]
	cmp	eax, DWORD PTR _nextFile$73300[ebp]
	jae	SHORT $LN18@Extract
$LN17@Extract:
; Line 304
	jmp	SHORT $LN19@Extract
$LN18@Extract:
; Line 305
	mov	ecx, DWORD PTR _fileIndex2$73305[ebp]
	add	ecx, 1
	mov	DWORD PTR _nextFile$73300[ebp], ecx
; Line 306
	jmp	$LN20@Extract
$LN19@Extract:
; Line 308
	mov	edx, DWORD PTR _k$73301[ebp]
	sub	edx, DWORD PTR _i$73288[ebp]
	mov	DWORD PTR _numSolidFiles$73298[ebp], edx
; Line 310
	mov	eax, DWORD PTR _fileIndex$73296[ebp]
	mov	DWORD PTR _k$73301[ebp], eax
	jmp	SHORT $LN16@Extract
$LN15@Extract:
	mov	ecx, DWORD PTR _k$73301[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$73301[ebp], ecx
$LN16@Extract:
	mov	edx, DWORD PTR _k$73301[ebp]
	cmp	edx, DWORD PTR _nextFile$73300[ebp]
	jae	SHORT $LN22@Extract
; Line 311
	mov	eax, DWORD PTR _k$73301[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR tv525[ebp], eax
	mov	ecx, DWORD PTR tv525[ebp]
	mov	edx, DWORD PTR _curUnpacked$73238[ebp]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _curUnpacked$73238[ebp+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _curUnpacked$73238[ebp], edx
	mov	DWORD PTR _curUnpacked$73238[ebp+4], eax
	jmp	SHORT $LN15@Extract
$LN22@Extract:
; Line 316
	movzx	ecx, BYTE PTR _allFilesMode$73204[ebp]
	test	ecx, ecx
	je	SHORT $LN53@Extract
	mov	DWORD PTR tv338[ebp], 0
	jmp	SHORT $LN54@Extract
$LN53@Extract:
	mov	edx, DWORD PTR _i$73288[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv338[ebp], ecx
$LN54@Extract:
	mov	edx, DWORD PTR _numSolidFiles$73298[ebp]
	push	edx
	mov	eax, DWORD PTR tv338[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileIndex$73296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z ; NArchive::N7z::CFolderOutStream::Init
	mov	DWORD PTR tv526[ebp], eax
	mov	edx, DWORD PTR tv526[ebp]
	mov	DWORD PTR _result$73311[ebp], edx
; Line 318
	mov	eax, DWORD PTR _i$73288[ebp]
	add	eax, DWORD PTR _numSolidFiles$73298[ebp]
	mov	DWORD PTR _i$73288[ebp], eax
; Line 320
	mov	ecx, DWORD PTR _result$73311[ebp]
	mov	DWORD PTR ___result__$73312[ebp], ecx
	cmp	DWORD PTR ___result__$73312[ebp], 0
	je	SHORT $LN13@Extract
	mov	edx, DWORD PTR ___result__$73312[ebp]
	mov	DWORD PTR $T74440[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74440[ebp]
	jmp	$LN41@Extract
$LN13@Extract:
; Line 323
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderOutStream::WasWritingFinished
	mov	BYTE PTR tv527[ebp], al
	movzx	eax, BYTE PTR tv527[ebp]
	test	eax, eax
	je	SHORT $LN12@Extract
; Line 324
	jmp	$LN26@Extract
$LN12@Extract:
; Line 327
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	DWORD PTR tv528[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 328
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
	mov	DWORD PTR tv529[ebp], eax
	cmp	DWORD PTR tv529[ebp], 0
	je	SHORT $LN11@Extract
; Line 329
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
	mov	DWORD PTR tv530[ebp], eax
	mov	ecx, DWORD PTR tv530[ebp]
	push	ecx
	push	OFFSET _IID_ICryptoGetTextPassword
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
$LN11@Extract:
; Line 333
	mov	BYTE PTR __$EHRec$[ebp+12], 9
; Line 335
	mov	BYTE PTR _isEncrypted$73360[ebp], 0
; Line 336
	mov	BYTE PTR _passwordIsDefined$73361[ebp], 0
; Line 337
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv531[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
; Line 356
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	mov	DWORD PTR tv532[ebp], eax
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv533[ebp], eax
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv534[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv535[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	1
	lea	ecx, DWORD PTR _password$73362[ebp]
	push	ecx
	lea	edx, DWORD PTR _passwordIsDefined$73361[ebp]
	push	edx
	lea	eax, DWORD PTR _isEncrypted$73360[ebp]
	push	eax
	mov	ecx, DWORD PTR tv532[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv533[ebp]
	push	edx
	mov	eax, DWORD PTR tv534[ebp]
	push	eax
	lea	ecx, DWORD PTR _curUnpacked$73238[ebp]
	push	ecx
	mov	edx, DWORD PTR _folderIndex$73297[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+396]
	push	edx
	mov	eax, DWORD PTR [ecx+392]
	push	eax
	mov	ecx, DWORD PTR tv535[ebp]
	push	ecx
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode
	mov	DWORD PTR tv536[ebp], eax
	mov	edx, DWORD PTR tv536[ebp]
	mov	DWORD PTR _result$73363[ebp], edx
; Line 358
	cmp	DWORD PTR _result$73363[ebp], 1
	je	SHORT $LN8@Extract
	cmp	DWORD PTR _result$73363[ebp], -2147467263 ; 80004001H
	jne	$LN9@Extract
$LN8@Extract:
; Line 360
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderOutStream::WasWritingFinished
	mov	BYTE PTR tv537[ebp], al
	mov	al, BYTE PTR tv537[ebp]
	mov	BYTE PTR _wasFinished$73368[ebp], al
; Line 364
	mov	ecx, DWORD PTR _result$73363[ebp]
	sub	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 2
	mov	DWORD PTR _resOp$73369[ebp], ecx
; Line 366
	mov	edx, DWORD PTR _resOp$73369[ebp]
	push	edx
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted
	mov	DWORD PTR tv538[ebp], eax
	mov	eax, DWORD PTR tv538[ebp]
	mov	DWORD PTR ___result__$73371[ebp], eax
	cmp	DWORD PTR ___result__$73371[ebp], 0
	je	SHORT $LN7@Extract
	mov	ecx, DWORD PTR ___result__$73371[ebp]
	mov	DWORD PTR $T74441[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74441[ebp]
	jmp	$LN41@Extract
$LN7@Extract:
; Line 368
	movzx	edx, BYTE PTR _wasFinished$73368[ebp]
	test	edx, edx
	je	$LN6@Extract
; Line 371
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
	mov	DWORD PTR tv539[ebp], eax
	cmp	DWORD PTR tv539[ebp], 0
	je	$LN6@Extract
; Line 373
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
	mov	DWORD PTR tv540[ebp], eax
	mov	eax, DWORD PTR tv540[ebp]
	mov	DWORD PTR tv417[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _resOp$73369[ebp]
	push	ecx
	mov	edx, DWORD PTR _folderIndex$73297[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR tv417[ebp]
	push	eax
	mov	ecx, DWORD PTR tv417[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv541[ebp], eax
	mov	ecx, DWORD PTR tv541[ebp]
	mov	DWORD PTR ___result__$73376[ebp], ecx
	cmp	DWORD PTR ___result__$73376[ebp], 0
	je	SHORT $LN6@Extract
	mov	edx, DWORD PTR ___result__$73376[ebp]
	mov	DWORD PTR $T74442[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74442[ebp]
	jmp	$LN41@Extract
$LN6@Extract:
; Line 376
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Line 396
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 376
	jmp	$LN26@Extract
$LN9@Extract:
; Line 379
	cmp	DWORD PTR _result$73363[ebp], 0
	je	SHORT $LN3@Extract
; Line 380
	mov	eax, DWORD PTR _result$73363[ebp]
	mov	DWORD PTR $T74443[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74443[ebp]
	jmp	$LN41@Extract
$LN3@Extract:
; Line 382
	push	2
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted
	mov	DWORD PTR tv542[ebp], eax
	mov	ecx, DWORD PTR tv542[ebp]
	mov	DWORD PTR ___result__$73382[ebp], ecx
	cmp	DWORD PTR ___result__$73382[ebp], 0
	je	SHORT $LN2@Extract
	mov	edx, DWORD PTR ___result__$73382[ebp]
	mov	DWORD PTR $T74444[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74444[ebp]
	jmp	$LN41@Extract
$LN2@Extract:
; Line 383
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _password$73362[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Line 396
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 383
	jmp	$LN26@Extract
__catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 387
	push	2
	mov	ecx, DWORD PTR _folderOutStream$73281[ebp]
	call	?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted
	mov	DWORD PTR tv543[ebp], eax
	mov	eax, DWORD PTR tv543[ebp]
	mov	DWORD PTR ___result__$73385[ebp], eax
	cmp	DWORD PTR ___result__$73385[ebp], 0
	je	SHORT $LN1@Extract
	mov	ecx, DWORD PTR ___result__$73385[ebp]
	mov	DWORD PTR $T74445[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 8
	mov	eax, $LN69@Extract
	ret	0
$LN1@Extract:
; Line 389
	mov	DWORD PTR $T74446[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+12], 8
	mov	eax, $LN71@Extract
	ret	0
; Line 390
	mov	eax, __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], 8
	jmp	SHORT $LN70@Extract
$LN71@Extract:
; Line 389
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74446[ebp]
	jmp	$LN41@Extract
$LN70@Extract:
	jmp	SHORT $LN68@Extract
$LN69@Extract:
; Line 387
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74445[ebp]
	jmp	$LN41@Extract
$LN68@Extract:
; Line 391
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	jmp	$LN26@Extract
$LN25@Extract:
; Line 393
	mov	DWORD PTR $T74447[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$73235[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	eax, DWORD PTR $T74447[ebp]
	jmp	SHORT $LN41@Extract
__catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
; Line 395
	mov	DWORD PTR $T74448[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN73@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	ret	0
__tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN41@Extract
$LN73@Extract:
	mov	eax, DWORD PTR $T74448[ebp]
$LN41@Extract:
; Line 396
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN95@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 620				; 0000026cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN95@Extract:
	DD	10					; 0000000aH
	DD	$LN94@Extract
$LN94@Extract:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN83@Extract
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN84@Extract
	DD	-188					; ffffff44H
	DD	100					; 00000064H
	DD	$LN85@Extract
	DD	-212					; ffffff2cH
	DD	8
	DD	$LN86@Extract
	DD	-224					; ffffff20H
	DD	4
	DD	$LN87@Extract
	DD	-240					; ffffff10H
	DD	4
	DD	$LN88@Extract
	DD	-292					; fffffedcH
	DD	4
	DD	$LN89@Extract
	DD	-301					; fffffed3H
	DD	1
	DD	$LN90@Extract
	DD	-313					; fffffec7H
	DD	1
	DD	$LN91@Extract
	DD	-336					; fffffeb0H
	DD	12					; 0000000cH
	DD	$LN92@Extract
$LN92@Extract:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN91@Extract:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN90@Extract:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN89@Extract:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN88@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN87@Extract:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN86@Extract:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN85@Extract:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN84@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN83@Extract:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _extractCallback$73202[ebp]
	jmp	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	mov	eax, DWORD PTR $T74426[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	lea	ecx, DWORD PTR _progress$73235[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7:
	lea	ecx, DWORD PTR _decoder$73236[ebp]
	jmp	??1CDecoder@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8:
	lea	ecx, DWORD PTR _callbackMessage$73276[ebp]
	jmp	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9:
	mov	eax, DWORD PTR $T74430[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10:
	lea	ecx, DWORD PTR _outStream$73287[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11:
	lea	ecx, DWORD PTR _getTextPassword$73353[ebp]
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12:
	lea	ecx, DWORD PTR _password$73362[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-624]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::N7z::CHandler::Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T74497 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74497[ebp], ecx
	mov	edx, DWORD PTR $T74497[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??B?$CObjArray@I@@QBEPBIXZ			; CObjArray<unsigned int>::operator unsigned int const *
PUBLIC	??B?$CObjArray@_K@@QBEPB_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z PROC ; NArchive::N7z::CDbEx::GetFolderFullPackSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edi, DWORD PTR [eax+ecx*4+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	ebx, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edx, DWORD PTR _folderIndex$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [esi+edi*8]
	sub	ecx, DWORD PTR [ebx+eax*8]
	mov	edx, DWORD PTR [esi+edi*8+4]
	sbb	edx, DWORD PTR [ebx+eax*8+4]
	mov	eax, ecx
; Line 269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ENDP ; NArchive::N7z::CDbEx::GetFolderFullPackSize
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
PUBLIC	??_7CFolderOutStream@N7z@NArchive@@6B@		; NArchive::N7z::CFolderOutStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CFolderOutStream@N7z@NArchive@@6B@		; NArchive::N7z::CFolderOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFolderOutStream@N7z@NArchive@@@8	; NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CFolderOutStream@N7z@NArchive@@8		; NArchive::N7z::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFolderOutStream@N7z@NArchive@@8		; NArchive::N7z::CFolderOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8	; NArchive::N7z::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderOutStream::QueryInterface
PUBLIC	?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderOutStream::AddRef
PUBLIC	?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderOutStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zextract.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8 DD FLAT:??_R0?AVCFolderOutStream@N7z@NArchive@@@8 ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFolderOutStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CFolderOutStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CFolderOutStream@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CFolderOutStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CFolderOutStream@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CFolderOutStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFolderOutStream@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCFolderOutStream@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFolderOutStream@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFolderOutStream@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CFolderOutStream@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CFolderOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFolderOutStream@N7z@NArchive@@@8
	DD	FLAT:??_R3CFolderOutStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CFolderOutStream@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CFolderOutStream@N7z@NArchive@@6B@ DD FLAT:??_R4CFolderOutStream@N7z@NArchive@@6B@ ; NArchive::N7z::CFolderOutStream::`vftable'
	DD	FLAT:?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFolderOutStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolderOutStream@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CFolderOutStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolderOutStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolderOutStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderOutStream::CFolderOutStream, COMDAT
; _this$ = ecx
; Line 53
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFolderOutStream@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolderOutStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolderOutStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderOutStream::CFolderOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISequentialOutStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CFolderOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zextract.cpp
; Line 43
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CFolderOutStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderOutStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zextract.cpp
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CFolderOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T74523 = -8						; size = 4
$T74522 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderOutStream::Release, COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T74523[ebp], edx
	mov	eax, DWORD PTR $T74523[ebp]
	mov	DWORD PTR $T74522[ebp], eax
	cmp	DWORD PTR $T74522[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T74522[ebp]
	call	??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderOutStream::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ PROC ; NArchive::N7z::CFolderOutStream::WasWritingFinished, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+36], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ENDP ; NArchive::N7z::CFolderOutStream::WasWritingFinished
_TEXT	ENDS
PUBLIC	??1CFolderOutStream@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderOutStream::~CFolderOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CFolderOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolderOutStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CFolderOutStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolderOutStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolderOutStream@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CFolderOutStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolderOutStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolderOutStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderOutStream::~CFolderOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolderOutStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolderOutStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderOutStream::~CFolderOutStream
PUBLIC	??1CBindInfoEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDecoder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDecoder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDecoder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfoEx@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CBindInfoEx::~CBindInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfoEx@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T74605 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74605[ebp], ecx
	mov	edx, DWORD PTR $T74605[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T74608 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74608[ebp], ecx
	mov	edx, DWORD PTR $T74608[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T74611 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74611[ebp], ecx
	mov	edx, DWORD PTR $T74611[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T74614 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74614[ebp], ecx
	mov	edx, DWORD PTR $T74614[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QBEAB_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QBEAB_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QBEAB_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QBEPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QBEPB_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QBEPB_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QAEPAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QAEPAIXZ PROC				; CObjArray<unsigned int>::operator unsigned int *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QAEPAIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QBEPBIXZ PROC				; CObjArray<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QBEPBIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ PROC ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ENDP ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ PROC ; CMyComPtr<IArchiveExtractCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ENDP ; CMyComPtr<IArchiveExtractCallback>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
_TEXT	ENDS
END
