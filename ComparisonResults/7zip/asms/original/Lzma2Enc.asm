; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Lzma2Enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Lzma2EncProps_Init@4
EXTRN	_LzmaEncProps_Init@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\lzma2enc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Lzma2EncProps_Init@4 PROC
; Line 171
	push	ebp
	mov	ebp, esp
; Line 172
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEncProps_Init@4
; Line 173
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+64], -1
; Line 174
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+60], -1
; Line 175
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 176
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Lzma2EncProps_Init@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Lzma2EncProps_Normalize@4
EXTRN	_LzmaEncProps_Normalize@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__aulldiv:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv259 = -156						; size = 8
tv234 = -148						; size = 4
tv212 = -144						; size = 8
tv201 = -136						; size = 8
tv190 = -128						; size = 8
_numBlocks$80449 = -120					; size = 8
_temp$80447 = -112					; size = 8
_kMaxSize$80440 = -104					; size = 4
_kMinSize$80438 = -100					; size = 4
_blockSize$80436 = -96					; size = 8
_dictSize$80435 = -88					; size = 4
_lzmaProps$80422 = -80					; size = 56
_t3$ = -20						; size = 4
_t2$ = -16						; size = 4
_t1n$ = -12						; size = 4
_t1$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_Lzma2EncProps_Normalize@4 PROC
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 182
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, 14					; 0000000eH
	lea	edi, DWORD PTR _lzmaProps$80422[ebp]
	rep movsd
; Line 183
	lea	eax, DWORD PTR _lzmaProps$80422[ebp]
	push	eax
	call	_LzmaEncProps_Normalize@4
; Line 184
	mov	ecx, DWORD PTR _lzmaProps$80422[ebp+52]
	mov	DWORD PTR _t1n$[ebp], ecx
; Line 187
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _t1$[ebp], eax
; Line 188
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _t2$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _t3$[ebp], ecx
; Line 191
	cmp	DWORD PTR _t2$[ebp], 32			; 00000020H
	jle	SHORT $LN18@Lzma2EncPr
; Line 192
	mov	DWORD PTR _t2$[ebp], 32			; 00000020H
$LN18@Lzma2EncPr:
; Line 194
	cmp	DWORD PTR _t3$[ebp], 0
	jg	SHORT $LN17@Lzma2EncPr
; Line 196
	cmp	DWORD PTR _t2$[ebp], 0
	jg	SHORT $LN16@Lzma2EncPr
; Line 197
	mov	DWORD PTR _t2$[ebp], 1
$LN16@Lzma2EncPr:
; Line 198
	mov	edx, DWORD PTR _t1n$[ebp]
	imul	edx, DWORD PTR _t2$[ebp]
	mov	DWORD PTR _t3$[ebp], edx
	jmp	SHORT $LN15@Lzma2EncPr
$LN17@Lzma2EncPr:
; Line 200
	cmp	DWORD PTR _t2$[ebp], 0
	jg	SHORT $LN14@Lzma2EncPr
; Line 202
	mov	eax, DWORD PTR _t3$[ebp]
	cdq
	idiv	DWORD PTR _t1n$[ebp]
	mov	DWORD PTR _t2$[ebp], eax
; Line 203
	cmp	DWORD PTR _t2$[ebp], 0
	jne	SHORT $LN13@Lzma2EncPr
; Line 205
	mov	DWORD PTR _t1$[ebp], 1
; Line 206
	mov	eax, DWORD PTR _t3$[ebp]
	mov	DWORD PTR _t2$[ebp], eax
$LN13@Lzma2EncPr:
; Line 208
	cmp	DWORD PTR _t2$[ebp], 32			; 00000020H
	jle	SHORT $LN12@Lzma2EncPr
; Line 209
	mov	DWORD PTR _t2$[ebp], 32			; 00000020H
$LN12@Lzma2EncPr:
; Line 211
	jmp	SHORT $LN15@Lzma2EncPr
$LN14@Lzma2EncPr:
	cmp	DWORD PTR _t1$[ebp], 0
	jg	SHORT $LN10@Lzma2EncPr
; Line 213
	mov	eax, DWORD PTR _t3$[ebp]
	cdq
	idiv	DWORD PTR _t2$[ebp]
	mov	DWORD PTR _t1$[ebp], eax
; Line 214
	cmp	DWORD PTR _t1$[ebp], 0
	jne	SHORT $LN9@Lzma2EncPr
; Line 215
	mov	DWORD PTR _t1$[ebp], 1
$LN9@Lzma2EncPr:
; Line 217
	jmp	SHORT $LN15@Lzma2EncPr
$LN10@Lzma2EncPr:
; Line 218
	mov	ecx, DWORD PTR _t1n$[ebp]
	imul	ecx, DWORD PTR _t2$[ebp]
	mov	DWORD PTR _t3$[ebp], ecx
$LN15@Lzma2EncPr:
; Line 220
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _t1$[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 222
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEncProps_Normalize@4
; Line 224
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	$LN7@Lzma2EncPr
; Line 226
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dictSize$80435[ebp], ecx
; Line 227
	mov	eax, DWORD PTR _dictSize$80435[ebp]
	xor	edx, edx
	mov	cl, 2
	call	__allshl
	mov	DWORD PTR _blockSize$80436[ebp], eax
	mov	DWORD PTR _blockSize$80436[ebp+4], edx
; Line 228
	mov	DWORD PTR _kMinSize$80438[ebp], 1048576	; 00100000H
; Line 229
	mov	DWORD PTR _kMaxSize$80440[ebp], 268435456 ; 10000000H
; Line 230
	mov	edx, DWORD PTR _kMinSize$80438[ebp]
	xor	eax, eax
	mov	DWORD PTR tv190[ebp], edx
	mov	DWORD PTR tv190[ebp+4], eax
	mov	ecx, DWORD PTR _blockSize$80436[ebp+4]
	cmp	ecx, DWORD PTR tv190[ebp+4]
	ja	SHORT $LN6@Lzma2EncPr
	jb	SHORT $LN21@Lzma2EncPr
	mov	edx, DWORD PTR _blockSize$80436[ebp]
	cmp	edx, DWORD PTR tv190[ebp]
	jae	SHORT $LN6@Lzma2EncPr
$LN21@Lzma2EncPr:
	mov	eax, DWORD PTR _kMinSize$80438[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _blockSize$80436[ebp], eax
	mov	DWORD PTR _blockSize$80436[ebp+4], ecx
$LN6@Lzma2EncPr:
; Line 231
	mov	edx, DWORD PTR _kMaxSize$80440[ebp]
	xor	eax, eax
	mov	DWORD PTR tv201[ebp], edx
	mov	DWORD PTR tv201[ebp+4], eax
	mov	ecx, DWORD PTR _blockSize$80436[ebp+4]
	cmp	ecx, DWORD PTR tv201[ebp+4]
	jb	SHORT $LN5@Lzma2EncPr
	ja	SHORT $LN22@Lzma2EncPr
	mov	edx, DWORD PTR _blockSize$80436[ebp]
	cmp	edx, DWORD PTR tv201[ebp]
	jbe	SHORT $LN5@Lzma2EncPr
$LN22@Lzma2EncPr:
	mov	eax, DWORD PTR _kMaxSize$80440[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _blockSize$80436[ebp], eax
	mov	DWORD PTR _blockSize$80436[ebp+4], ecx
$LN5@Lzma2EncPr:
; Line 232
	mov	edx, DWORD PTR _dictSize$80435[ebp]
	xor	eax, eax
	mov	DWORD PTR tv212[ebp], edx
	mov	DWORD PTR tv212[ebp+4], eax
	mov	ecx, DWORD PTR _blockSize$80436[ebp+4]
	cmp	ecx, DWORD PTR tv212[ebp+4]
	ja	SHORT $LN4@Lzma2EncPr
	jb	SHORT $LN23@Lzma2EncPr
	mov	edx, DWORD PTR _blockSize$80436[ebp]
	cmp	edx, DWORD PTR tv212[ebp]
	jae	SHORT $LN4@Lzma2EncPr
$LN23@Lzma2EncPr:
	mov	eax, DWORD PTR _dictSize$80435[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _blockSize$80436[ebp], eax
	mov	DWORD PTR _blockSize$80436[ebp+4], ecx
$LN4@Lzma2EncPr:
; Line 233
	mov	edx, DWORD PTR _blockSize$80436[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN7@Lzma2EncPr:
; Line 235
	cmp	DWORD PTR _t2$[ebp], 1
	jle	$LN3@Lzma2EncPr
; Line 237
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+8]
	adc	eax, DWORD PTR [ecx+12]
	sub	edx, 1
	sbb	eax, 0
	mov	DWORD PTR _temp$80447[ebp], edx
	mov	DWORD PTR _temp$80447[ebp+4], eax
; Line 238
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv234[ebp], edx
	mov	eax, DWORD PTR tv234[ebp]
	mov	ecx, DWORD PTR _temp$80447[ebp+4]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Lzma2EncPr
	ja	SHORT $LN24@Lzma2EncPr
	mov	edx, DWORD PTR tv234[ebp]
	mov	eax, DWORD PTR _temp$80447[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jbe	SHORT $LN3@Lzma2EncPr
$LN24@Lzma2EncPr:
; Line 240
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _temp$80447[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _temp$80447[ebp]
	push	edx
	call	__aulldiv
	mov	DWORD PTR _numBlocks$80449[ebp], eax
	mov	DWORD PTR _numBlocks$80449[ebp+4], edx
; Line 241
	mov	eax, DWORD PTR _t2$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv259[ebp], eax
	mov	DWORD PTR tv259[ebp+4], ecx
	mov	edx, DWORD PTR _numBlocks$80449[ebp+4]
	cmp	edx, DWORD PTR tv259[ebp+4]
	ja	SHORT $LN3@Lzma2EncPr
	jb	SHORT $LN25@Lzma2EncPr
	mov	eax, DWORD PTR _numBlocks$80449[ebp]
	cmp	eax, DWORD PTR tv259[ebp]
	jae	SHORT $LN3@Lzma2EncPr
$LN25@Lzma2EncPr:
; Line 243
	mov	ecx, DWORD PTR _numBlocks$80449[ebp]
	mov	DWORD PTR _t2$[ebp], ecx
; Line 244
	mov	edx, DWORD PTR _t1$[ebp]
	imul	edx, DWORD PTR _t2$[ebp]
	mov	DWORD PTR _t3$[ebp], edx
$LN3@Lzma2EncPr:
; Line 248
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _t2$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 249
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _t3$[ebp]
	mov	DWORD PTR [edx+64], eax
; Line 250
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@Lzma2EncPr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN28@Lzma2EncPr:
	DD	1
	DD	$LN27@Lzma2EncPr
$LN27@Lzma2EncPr:
	DD	-80					; ffffffb0H
	DD	56					; 00000038H
	DD	$LN26@Lzma2EncPr
$LN26@Lzma2EncPr:
	DB	108					; 0000006cH
	DB	122					; 0000007aH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
_Lzma2EncProps_Normalize@4 ENDP
_TEXT	ENDS
PUBLIC	_Lzma2Enc_Create@8
EXTRN	_MtCoder_Construct@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$80553 = -8						; size = 4
_p$ = -4						; size = 4
_alloc$ = 8						; size = 4
_allocBig$ = 12						; size = 4
_Lzma2Enc_Create@8 PROC
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 385
	mov	esi, esp
	push	3920					; 00000f50H
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax
; Line 386
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN4@Lzma2Enc_C
; Line 387
	xor	eax, eax
	jmp	SHORT $LN5@Lzma2Enc_C
$LN4@Lzma2Enc_C:
; Line 388
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_Lzma2EncProps_Init@4
; Line 389
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	push	ecx
	call	_Lzma2EncProps_Normalize@4
; Line 390
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+80], 0
; Line 391
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 392
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _allocBig$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 395
	mov	DWORD PTR _i$80553[ebp], 0
	jmp	SHORT $LN3@Lzma2Enc_C
$LN2@Lzma2Enc_C:
	mov	ecx, DWORD PTR _i$80553[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$80553[ebp], ecx
$LN3@Lzma2Enc_C:
	cmp	DWORD PTR _i$80553[ebp], 32		; 00000020H
	jae	SHORT $LN1@Lzma2Enc_C
; Line 396
	mov	edx, DWORD PTR _i$80553[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx+96], 0
	jmp	SHORT $LN2@Lzma2Enc_C
$LN1@Lzma2Enc_C:
; Line 399
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1120				; 00000460H
	push	ecx
	call	_MtCoder_Construct@4
; Line 402
	mov	eax, DWORD PTR _p$[ebp]
$LN5@Lzma2Enc_C:
; Line 403
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Lzma2Enc_Create@8 ENDP
_TEXT	ENDS
PUBLIC	_Lzma2Enc_Destroy@4
EXTRN	_MtCoder_Destruct@4:PROC
EXTRN	_LzmaEnc_Destroy@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$80566 = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_Lzma2Enc_Destroy@4 PROC
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 407
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 409
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Lzma2Enc_D
$LN3@Lzma2Enc_D:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@Lzma2Enc_D:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN2@Lzma2Enc_D
; Line 411
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+96]
	mov	DWORD PTR _t$80566[ebp], ecx
; Line 412
	mov	edx, DWORD PTR _t$80566[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Lzma2Enc_D
; Line 414
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _t$80566[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_Destroy@12
; Line 415
	mov	eax, DWORD PTR _t$80566[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Lzma2Enc_D:
; Line 417
	jmp	SHORT $LN3@Lzma2Enc_D
$LN2@Lzma2Enc_D:
; Line 420
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1120				; 00000460H
	push	ecx
	call	_MtCoder_Destruct@4
; Line 423
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 424
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 425
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Lzma2Enc_Destroy@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Lzma2Enc_SetProps@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lzmaProps$ = -68					; size = 56
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pp$ = 8						; size = 4
_props$ = 12						; size = 4
_Lzma2Enc_SetProps@8 PROC
; Line 428
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 429
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 430
	mov	esi, DWORD PTR _props$[ebp]
	mov	ecx, 14					; 0000000eH
	lea	edi, DWORD PTR _lzmaProps$[ebp]
	rep movsd
; Line 431
	lea	ecx, DWORD PTR _lzmaProps$[ebp]
	push	ecx
	call	_LzmaEncProps_Normalize@4
; Line 432
	mov	edx, DWORD PTR _lzmaProps$[ebp+16]
	add	edx, DWORD PTR _lzmaProps$[ebp+20]
	cmp	edx, 4
	jle	SHORT $LN1@Lzma2Enc_S
; Line 433
	mov	eax, 5
	jmp	SHORT $LN2@Lzma2Enc_S
$LN1@Lzma2Enc_S:
; Line 434
	mov	esi, DWORD PTR _props$[ebp]
	mov	edi, DWORD PTR _p$[ebp]
	add	edi, 8
	mov	ecx, 18					; 00000012H
	rep movsd
; Line 435
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_Lzma2EncProps_Normalize@4
; Line 436
	xor	eax, eax
$LN2@Lzma2Enc_S:
; Line 437
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Lzma2Enc_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN6@Lzma2Enc_S:
	DD	1
	DD	$LN5@Lzma2Enc_S
$LN5@Lzma2Enc_S:
	DD	-68					; ffffffbcH
	DD	56					; 00000038H
	DD	$LN4@Lzma2Enc_S
$LN4@Lzma2Enc_S:
	DB	108					; 0000006cH
	DB	122					; 0000007aH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
_Lzma2Enc_SetProps@8 ENDP
_TEXT	ENDS
PUBLIC	_Lzma2Enc_WriteProperties@4
EXTRN	_LzmaEncProps_GetDictSize@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dicSize$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_Lzma2Enc_WriteProperties@4 PROC
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 441
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	push	ecx
	call	_LzmaEncProps_GetDictSize@4
	mov	DWORD PTR _dicSize$[ebp], eax
; Line 444
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Lzma2Enc_W
$LN3@Lzma2Enc_W:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@Lzma2Enc_W:
	cmp	DWORD PTR _i$[ebp], 40			; 00000028H
	jae	SHORT $LN2@Lzma2Enc_W
; Line 445
	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1
	or	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	shr	ecx, 1
	add	ecx, 11					; 0000000bH
	shl	eax, cl
	cmp	DWORD PTR _dicSize$[ebp], eax
	ja	SHORT $LN1@Lzma2Enc_W
; Line 446
	jmp	SHORT $LN2@Lzma2Enc_W
$LN1@Lzma2Enc_W:
; Line 447
	jmp	SHORT $LN3@Lzma2Enc_W
$LN2@Lzma2Enc_W:
	mov	al, BYTE PTR _i$[ebp]
; Line 448
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Lzma2Enc_WriteProperties@4 ENDP
_TEXT	ENDS
PUBLIC	_Lzma2Enc_Encode@16
EXTRN	_MtCoder_Code@4:PROC
EXTRN	_LzmaEnc_Create@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mtCallback$80611 = -24					; size = 8
_t$80605 = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_outStream$ = 12					; size = 4
_inStream$ = 16						; size = 4
_progress$ = 20						; size = 4
_Lzma2Enc_Encode@16 PROC
; Line 452
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 453
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 456
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Lzma2Enc_E
$LN5@Lzma2Enc_E:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@Lzma2Enc_E:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+68]
	jge	SHORT $LN4@Lzma2Enc_E
; Line 458
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+96]
	mov	DWORD PTR _t$80605[ebp], eax
; Line 459
	mov	ecx, DWORD PTR _t$80605[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN3@Lzma2Enc_E
; Line 461
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_LzmaEnc_Create@4
	mov	ecx, DWORD PTR _t$80605[ebp]
	mov	DWORD PTR [ecx], eax
; Line 462
	mov	edx, DWORD PTR _t$80605[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN3@Lzma2Enc_E
; Line 463
	mov	eax, 2
	jmp	$LN7@Lzma2Enc_E
$LN3@Lzma2Enc_E:
; Line 465
	jmp	SHORT $LN5@Lzma2Enc_E
$LN4@Lzma2Enc_E:
; Line 468
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jg	SHORT $LN1@Lzma2Enc_E
; Line 470
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_Lzma2Enc_EncodeMt1@20
	jmp	$LN7@Lzma2Enc_E
$LN1@Lzma2Enc_E:
; Line 477
	mov	DWORD PTR _mtCallback$80611[ebp], OFFSET _MtCallbackImp_Code@28
; Line 478
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _mtCallback$80611[ebp+4], eax
; Line 480
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _progress$[ebp]
	mov	DWORD PTR [ecx+1140], edx
; Line 481
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	DWORD PTR [eax+1132], ecx
; Line 482
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [edx+1136], eax
; Line 483
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+1144], eax
; Line 484
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR _mtCallback$80611[ebp]
	mov	DWORD PTR [ecx+1148], edx
; Line 486
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+1120], edx
; Line 487
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	shr	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+64]
	lea	ecx, DWORD PTR [eax+ecx+16]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+1124], ecx
; Line 488
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+1128], edx
; Line 490
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1120				; 00000460H
	push	eax
	call	_MtCoder_Code@4
$LN7@Lzma2Enc_E:
; Line 493
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Lzma2Enc_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN11@Lzma2Enc_E:
	DD	1
	DD	$LN10@Lzma2Enc_E
$LN10@Lzma2Enc_E:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN9@Lzma2Enc_E
$LN9@Lzma2Enc_E:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_Lzma2Enc_Encode@16 ENDP
_TEXT	ENDS
EXTRN	_LzmaEnc_Finish@4:PROC
EXTRN	_LzmaEnc_PrepareForLzma2@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$80499 = -37						; size = 1
_packSize$80494 = -28					; size = 4
___result__$80489 = -20					; size = 4
___result__$80487 = -16					; size = 4
_res$ = -12						; size = 4
_packTotal$ = -8					; size = 8
_p$ = 8							; size = 4
_mainEncoder$ = 12					; size = 4
_outStream$ = 16					; size = 4
_inStream$ = 20						; size = 4
_progress$ = 24						; size = 4
_Lzma2Enc_EncodeMt1@20 PROC
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 283
	mov	DWORD PTR _packTotal$[ebp], 0
	mov	DWORD PTR _packTotal$[ebp+4], 0
; Line 284
	mov	DWORD PTR _res$[ebp], 0
; Line 286
	mov	eax, DWORD PTR _mainEncoder$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN11@Lzma2Enc_E@2
; Line 288
	mov	esi, esp
	push	65552					; 00010010H
	mov	ecx, DWORD PTR _mainEncoder$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _mainEncoder$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _mainEncoder$[ebp]
	mov	DWORD PTR [ecx+80], eax
; Line 289
	mov	edx, DWORD PTR _mainEncoder$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jne	SHORT $LN11@Lzma2Enc_E@2
; Line 290
	mov	eax, 2
	jmp	$LN12@Lzma2Enc_E@2
$LN11@Lzma2Enc_E@2:
; Line 292
	mov	eax, DWORD PTR _mainEncoder$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Lzma2EncInt_Init@8
	mov	DWORD PTR ___result__$80487[ebp], eax
	cmp	DWORD PTR ___result__$80487[ebp], 0
	je	SHORT $LN9@Lzma2Enc_E@2
	mov	eax, DWORD PTR ___result__$80487[ebp]
	jmp	$LN12@Lzma2Enc_E@2
$LN9@Lzma2Enc_E@2:
; Line 294
	mov	edx, DWORD PTR _mainEncoder$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _mainEncoder$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	push	2097152					; 00200000H
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_PrepareForLzma2@20
	mov	DWORD PTR ___result__$80489[ebp], eax
	cmp	DWORD PTR ___result__$80489[ebp], 0
	je	SHORT $LN7@Lzma2Enc_E@2
	mov	eax, DWORD PTR ___result__$80489[ebp]
	jmp	$LN12@Lzma2Enc_E@2
$LN7@Lzma2Enc_E@2:
; Line 297
	mov	DWORD PTR _packSize$80494[ebp], 65552	; 00010010H
; Line 298
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _packSize$80494[ebp]
	push	ecx
	mov	edx, DWORD PTR _mainEncoder$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Lzma2EncInt_EncodeSubblock@16
	mov	DWORD PTR _res$[ebp], eax
; Line 299
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN5@Lzma2Enc_E@2
; Line 300
	jmp	SHORT $LN6@Lzma2Enc_E@2
$LN5@Lzma2Enc_E@2:
; Line 301
	mov	edx, DWORD PTR _packSize$80494[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _packTotal$[ebp]
	adc	eax, DWORD PTR _packTotal$[ebp+4]
	mov	DWORD PTR _packTotal$[ebp], edx
	mov	DWORD PTR _packTotal$[ebp+4], eax
; Line 302
	mov	ecx, DWORD PTR _packTotal$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _packTotal$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	call	_Progress@20
	mov	DWORD PTR _res$[ebp], eax
; Line 303
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN4@Lzma2Enc_E@2
; Line 304
	jmp	SHORT $LN6@Lzma2Enc_E@2
$LN4@Lzma2Enc_E@2:
; Line 305
	cmp	DWORD PTR _packSize$80494[ebp], 0
	jne	SHORT $LN3@Lzma2Enc_E@2
; Line 306
	jmp	SHORT $LN6@Lzma2Enc_E@2
$LN3@Lzma2Enc_E@2:
; Line 307
	jmp	SHORT $LN7@Lzma2Enc_E@2
$LN6@Lzma2Enc_E@2:
; Line 308
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_Finish@4
; Line 309
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN2@Lzma2Enc_E@2
; Line 311
	mov	BYTE PTR _b$80499[ebp], 0
; Line 312
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _b$80499[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	je	SHORT $LN2@Lzma2Enc_E@2
; Line 313
	mov	eax, 9
	jmp	SHORT $LN12@Lzma2Enc_E@2
$LN2@Lzma2Enc_E@2:
; Line 315
	mov	eax, DWORD PTR _res$[ebp]
$LN12@Lzma2Enc_E@2:
; Line 316
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Lzma2Enc_E@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN17@Lzma2Enc_E@2:
	DD	2
	DD	$LN16@Lzma2Enc_E@2
$LN16@Lzma2Enc_E@2:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN14@Lzma2Enc_E@2
	DD	-37					; ffffffdbH
	DD	1
	DD	$LN15@Lzma2Enc_E@2
$LN15@Lzma2Enc_E@2:
	DB	98					; 00000062H
	DB	0
$LN14@Lzma2Enc_E@2:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_Lzma2Enc_EncodeMt1@20 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_LzmaEnc_WriteProperties@12:PROC
EXTRN	_LzmaEnc_SetProps@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$80314 = -40					; size = 4
___result__$80312 = -36					; size = 4
_propsSize$ = -28					; size = 4
_propsEncoded$ = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_props$ = 12						; size = 4
_Lzma2EncInt_Init@8 PROC
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 52
	mov	DWORD PTR _propsSize$[ebp], 5
; Line 53
	mov	eax, DWORD PTR _props$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_SetProps@8
	mov	DWORD PTR ___result__$80312[ebp], eax
	cmp	DWORD PTR ___result__$80312[ebp], 0
	je	SHORT $LN2@Lzma2EncIn
	mov	eax, DWORD PTR ___result__$80312[ebp]
	jmp	SHORT $LN3@Lzma2EncIn
$LN2@Lzma2EncIn:
; Line 54
	lea	eax, DWORD PTR _propsSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _propsEncoded$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_LzmaEnc_WriteProperties@12
	mov	DWORD PTR ___result__$80314[ebp], eax
	cmp	DWORD PTR ___result__$80314[ebp], 0
	je	SHORT $LN1@Lzma2EncIn
	mov	eax, DWORD PTR ___result__$80314[ebp]
	jmp	SHORT $LN3@Lzma2EncIn
$LN1@Lzma2EncIn:
; Line 55
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
; Line 56
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR _propsEncoded$[ebp]
	mov	BYTE PTR [edx+16], al
; Line 57
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 1
; Line 58
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 59
	xor	eax, eax
$LN3@Lzma2EncIn:
; Line 60
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Lzma2EncIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@Lzma2EncIn:
	DD	2
	DD	$LN7@Lzma2EncIn
$LN7@Lzma2EncIn:
	DD	-16					; fffffff0H
	DD	5
	DD	$LN5@Lzma2EncIn
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN6@Lzma2EncIn
$LN6@Lzma2EncIn:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN5@Lzma2EncIn:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_Lzma2EncInt_Init@8 ENDP
_TEXT	ENDS
EXTRN	_LzmaEnc_RestoreState@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_LzmaEnc_GetCurBuf@4:PROC
EXTRN	_LzmaEnc_CodeOneMemBlock@24:PROC
EXTRN	_LzmaEnc_SaveState@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv171 = -92						; size = 4
tv172 = -88						; size = 4
tv292 = -84						; size = 4
tv130 = -80						; size = 4
tv242 = -76						; size = 4
tv90 = -72						; size = 4
tv85 = -68						; size = 4
_mode$80403 = -64					; size = 4
_pm$80401 = -60						; size = 4
_u$80400 = -56						; size = 4
_destPos$80399 = -52					; size = 4
_u$80391 = -48						; size = 4
_destPos$80387 = -44					; size = 4
_res$ = -40						; size = 4
_useCopyBlock$ = -36					; size = 4
_lzHeaderSize$ = -32					; size = 4
_unpackSize$ = -24					; size = 4
_packSize$ = -12					; size = 4
_packSizeLimit$ = -4					; size = 4
_p$ = 8							; size = 4
_outBuf$ = 12						; size = 4
_packSizeRes$ = 16					; size = 4
_outStream$ = 20					; size = 4
_Lzma2EncInt_EncodeSubblock@16 PROC
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 77
	mov	eax, DWORD PTR _packSizeRes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _packSizeLimit$[ebp], ecx
; Line 78
	mov	edx, DWORD PTR _packSizeLimit$[ebp]
	mov	DWORD PTR _packSize$[ebp], edx
; Line 79
	mov	DWORD PTR _unpackSize$[ebp], 2097152	; 00200000H
; Line 80
	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+24], 0
	setne	cl
	add	ecx, 5
	mov	DWORD PTR _lzHeaderSize$[ebp], ecx
; Line 84
	mov	edx, DWORD PTR _packSizeRes$[ebp]
	mov	DWORD PTR [edx], 0
; Line 85
	mov	eax, DWORD PTR _packSize$[ebp]
	cmp	eax, DWORD PTR _lzHeaderSize$[ebp]
	jae	SHORT $LN15@Lzma2EncIn@2
; Line 86
	mov	eax, 7
	jmp	$LN16@Lzma2EncIn@2
$LN15@Lzma2EncIn@2:
; Line 87
	mov	ecx, DWORD PTR _packSize$[ebp]
	sub	ecx, DWORD PTR _lzHeaderSize$[ebp]
	mov	DWORD PTR _packSize$[ebp], ecx
; Line 89
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_LzmaEnc_SaveState@4
; Line 91
	lea	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	push	65536					; 00010000H
	lea	edx, DWORD PTR _packSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	add	eax, DWORD PTR _lzHeaderSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_LzmaEnc_CodeOneMemBlock@24
	mov	DWORD PTR _res$[ebp], eax
; Line 95
	cmp	DWORD PTR _unpackSize$[ebp], 0
	jne	SHORT $LN14@Lzma2EncIn@2
; Line 96
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN16@Lzma2EncIn@2
$LN14@Lzma2EncIn@2:
; Line 98
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN13@Lzma2EncIn@2
; Line 99
	mov	edx, DWORD PTR _packSize$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _unpackSize$[ebp]
	jae	SHORT $LN18@Lzma2EncIn@2
	cmp	DWORD PTR _packSize$[ebp], 65536	; 00010000H
	ja	SHORT $LN18@Lzma2EncIn@2
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN19@Lzma2EncIn@2
$LN18@Lzma2EncIn@2:
	mov	DWORD PTR tv85[ebp], 1
$LN19@Lzma2EncIn@2:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _useCopyBlock$[ebp], eax
; Line 100
	jmp	SHORT $LN12@Lzma2EncIn@2
$LN13@Lzma2EncIn@2:
; Line 102
	cmp	DWORD PTR _res$[ebp], 7
	je	SHORT $LN11@Lzma2EncIn@2
; Line 103
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN16@Lzma2EncIn@2
$LN11@Lzma2EncIn@2:
; Line 104
	mov	DWORD PTR _res$[ebp], 0
; Line 105
	mov	DWORD PTR _useCopyBlock$[ebp], 1
$LN12@Lzma2EncIn@2:
; Line 108
	cmp	DWORD PTR _useCopyBlock$[ebp], 0
	je	$LN10@Lzma2EncIn@2
; Line 110
	mov	DWORD PTR _destPos$80387[ebp], 0
$LN9@Lzma2EncIn@2:
; Line 112
	cmp	DWORD PTR _unpackSize$[ebp], 0
	jbe	$LN8@Lzma2EncIn@2
; Line 114
	cmp	DWORD PTR _unpackSize$[ebp], 65536	; 00010000H
	jae	SHORT $LN20@Lzma2EncIn@2
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN21@Lzma2EncIn@2
$LN20@Lzma2EncIn@2:
	mov	DWORD PTR tv90[ebp], 65536		; 00010000H
$LN21@Lzma2EncIn@2:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _u$80391[ebp], edx
; Line 115
	mov	eax, DWORD PTR _packSizeLimit$[ebp]
	sub	eax, DWORD PTR _destPos$80387[ebp]
	mov	ecx, DWORD PTR _u$80391[ebp]
	add	ecx, 3
	cmp	eax, ecx
	jae	SHORT $LN7@Lzma2EncIn@2
; Line 116
	mov	eax, 7
	jmp	$LN16@Lzma2EncIn@2
$LN7@Lzma2EncIn@2:
; Line 117
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv242[ebp], edx
	mov	eax, DWORD PTR tv242[ebp]
	mov	ecx, DWORD PTR tv242[ebp]
	mov	edx, DWORD PTR [eax+8]
	or	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN22@Lzma2EncIn@2
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN23@Lzma2EncIn@2
$LN22@Lzma2EncIn@2:
	mov	DWORD PTR tv130[ebp], 2
$LN23@Lzma2EncIn@2:
	mov	eax, DWORD PTR _outBuf$[ebp]
	add	eax, DWORD PTR _destPos$80387[ebp]
	mov	cl, BYTE PTR tv130[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _destPos$80387[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80387[ebp], edx
; Line 118
	mov	eax, DWORD PTR _u$80391[ebp]
	sub	eax, 1
	shr	eax, 8
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80387[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _destPos$80387[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80387[ebp], edx
; Line 119
	mov	eax, DWORD PTR _u$80391[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80387[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _destPos$80387[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80387[ebp], edx
; Line 120
	mov	eax, DWORD PTR _u$80391[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_GetCurBuf@4
	sub	eax, DWORD PTR _unpackSize$[ebp]
	push	eax
	mov	eax, DWORD PTR _outBuf$[ebp]
	add	eax, DWORD PTR _destPos$80387[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 121
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	sub	ecx, DWORD PTR _u$80391[ebp]
	mov	DWORD PTR _unpackSize$[ebp], ecx
; Line 122
	mov	edx, DWORD PTR _destPos$80387[ebp]
	add	edx, DWORD PTR _u$80391[ebp]
	mov	DWORD PTR _destPos$80387[ebp], edx
; Line 123
	mov	eax, DWORD PTR _u$80391[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 124
	cmp	DWORD PTR _outStream$[ebp], 0
	je	SHORT $LN6@Lzma2EncIn@2
; Line 126
	mov	eax, DWORD PTR _packSizeRes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _destPos$80387[ebp]
	mov	edx, DWORD PTR _packSizeRes$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 127
	mov	esi, esp
	mov	eax, DWORD PTR _destPos$80387[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _destPos$80387[ebp]
	je	SHORT $LN5@Lzma2EncIn@2
; Line 128
	mov	eax, 9
	jmp	$LN16@Lzma2EncIn@2
$LN5@Lzma2EncIn@2:
; Line 129
	mov	DWORD PTR _destPos$80387[ebp], 0
; Line 131
	jmp	SHORT $LN4@Lzma2EncIn@2
$LN6@Lzma2EncIn@2:
; Line 132
	mov	edx, DWORD PTR _packSizeRes$[ebp]
	mov	eax, DWORD PTR _destPos$80387[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Lzma2EncIn@2:
; Line 134
	jmp	$LN9@Lzma2EncIn@2
$LN8@Lzma2EncIn@2:
; Line 135
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_RestoreState@4
; Line 136
	xor	eax, eax
	jmp	$LN16@Lzma2EncIn@2
$LN10@Lzma2EncIn@2:
; Line 139
	mov	DWORD PTR _destPos$80399[ebp], 0
; Line 140
	mov	eax, DWORD PTR _unpackSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u$80400[ebp], eax
; Line 141
	mov	ecx, DWORD PTR _packSize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _pm$80401[ebp], ecx
; Line 142
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv292[ebp], edx
	mov	eax, DWORD PTR tv292[ebp]
	mov	ecx, DWORD PTR tv292[ebp]
	mov	edx, DWORD PTR [eax+8]
	or	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN26@Lzma2EncIn@2
	mov	DWORD PTR tv172[ebp], 3
	jmp	SHORT $LN27@Lzma2EncIn@2
$LN26@Lzma2EncIn@2:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN24@Lzma2EncIn@2
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+24], 0
	setne	dl
	add	edx, 1
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN25@Lzma2EncIn@2
$LN24@Lzma2EncIn@2:
	mov	DWORD PTR tv171[ebp], 0
$LN25@Lzma2EncIn@2:
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR tv172[ebp], eax
$LN27@Lzma2EncIn@2:
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _mode$80403[ebp], ecx
; Line 146
	mov	edx, DWORD PTR _mode$80403[ebp]
	shl	edx, 5
	or	edx, 128				; 00000080H
	mov	eax, DWORD PTR _u$80400[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 31					; 0000001fH
	or	edx, eax
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80399[ebp]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _destPos$80399[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80399[ebp], edx
; Line 147
	mov	eax, DWORD PTR _u$80400[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80399[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _destPos$80399[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80399[ebp], edx
; Line 148
	mov	eax, DWORD PTR _outBuf$[ebp]
	add	eax, DWORD PTR _destPos$80399[ebp]
	mov	cl, BYTE PTR _u$80400[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _destPos$80399[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80399[ebp], edx
; Line 149
	mov	eax, DWORD PTR _pm$80401[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80399[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _destPos$80399[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80399[ebp], edx
; Line 150
	mov	eax, DWORD PTR _outBuf$[ebp]
	add	eax, DWORD PTR _destPos$80399[ebp]
	mov	cl, BYTE PTR _pm$80401[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _destPos$80399[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$80399[ebp], edx
; Line 152
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@Lzma2EncIn@2
; Line 153
	mov	ecx, DWORD PTR _outBuf$[ebp]
	add	ecx, DWORD PTR _destPos$80399[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx+16]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _destPos$80399[ebp]
	add	ecx, 1
	mov	DWORD PTR _destPos$80399[ebp], ecx
$LN3@Lzma2EncIn@2:
; Line 155
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 156
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 157
	mov	ecx, DWORD PTR _destPos$80399[ebp]
	add	ecx, DWORD PTR _packSize$[ebp]
	mov	DWORD PTR _destPos$80399[ebp], ecx
; Line 158
	mov	edx, DWORD PTR _unpackSize$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+8]
	adc	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 160
	cmp	DWORD PTR _outStream$[ebp], 0
	je	SHORT $LN2@Lzma2EncIn@2
; Line 161
	mov	esi, esp
	mov	edx, DWORD PTR _destPos$80399[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _destPos$80399[ebp]
	je	SHORT $LN2@Lzma2EncIn@2
; Line 162
	mov	eax, 9
	jmp	SHORT $LN16@Lzma2EncIn@2
$LN2@Lzma2EncIn@2:
; Line 163
	mov	ecx, DWORD PTR _packSizeRes$[ebp]
	mov	edx, DWORD PTR _destPos$80399[ebp]
	mov	DWORD PTR [ecx], edx
; Line 164
	xor	eax, eax
$LN16@Lzma2EncIn@2:
; Line 166
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@Lzma2EncIn@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN31@Lzma2EncIn@2:
	DD	2
	DD	$LN30@Lzma2EncIn@2
$LN30@Lzma2EncIn@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN28@Lzma2EncIn@2
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN29@Lzma2EncIn@2
$LN29@Lzma2EncIn@2:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN28@Lzma2EncIn@2:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_Lzma2EncInt_EncodeSubblock@16 ENDP
; Function compile flags: /Odtp /RTCsu
tv70 = -4						; size = 4
_p$ = 8							; size = 4
_inSize$ = 12						; size = 8
_outSize$ = 20						; size = 8
_Progress@20 PROC
; Line 253
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 254
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Progress
	mov	esi, esp
	mov	eax, DWORD PTR _outSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _outSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _inSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@Progress
	mov	DWORD PTR tv70[ebp], 10			; 0000000aH
	jmp	SHORT $LN4@Progress
$LN3@Progress:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Progress:
	mov	eax, DWORD PTR tv70[ebp]
; Line 255
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_Progress@20 ENDP
_TEXT	ENDS
EXTRN	_MtProgress_Set@24:PROC
EXTRN	_LzmaEnc_MemPrepare@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv174 = -52						; size = 8
tv173 = -44						; size = 4
_packSize$80535 = -36					; size = 4
___result__$80530 = -28					; size = 4
___result__$80528 = -24					; size = 4
_destLim$80526 = -20					; size = 4
_res$ = -16						; size = 4
_p$ = -12						; size = 4
_mainEncoder$ = -8					; size = 4
_imp$ = -4						; size = 4
_pp$ = 8						; size = 4
_index$ = 12						; size = 4
_dest$ = 16						; size = 4
_destSize$ = 20						; size = 4
_src$ = 24						; size = 4
_srcSize$ = 28						; size = 4
_finished$ = 32						; size = 4
_MtCallbackImp_Code@28 PROC
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 329
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _imp$[ebp], eax
; Line 330
	mov	ecx, DWORD PTR _imp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _mainEncoder$[ebp], edx
; Line 331
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _mainEncoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+96]
	mov	DWORD PTR _p$[ebp], edx
; Line 333
	mov	DWORD PTR _res$[ebp], 0
; Line 335
	mov	eax, DWORD PTR _destSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _destLim$80526[ebp], ecx
; Line 336
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	DWORD PTR [edx], 0
; Line 338
	cmp	DWORD PTR _srcSize$[ebp], 0
	je	$LN11@MtCallback
; Line 340
	mov	eax, DWORD PTR _mainEncoder$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Lzma2EncInt_Init@8
	mov	DWORD PTR ___result__$80528[ebp], eax
	cmp	DWORD PTR ___result__$80528[ebp], 0
	je	SHORT $LN10@MtCallback
	mov	eax, DWORD PTR ___result__$80528[ebp]
	jmp	$LN12@MtCallback
$LN10@MtCallback:
; Line 343
	mov	edx, DWORD PTR _mainEncoder$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _mainEncoder$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	push	2097152					; 00200000H
	mov	eax, DWORD PTR _srcSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_LzmaEnc_MemPrepare@24
	mov	DWORD PTR ___result__$80530[ebp], eax
	cmp	DWORD PTR ___result__$80530[ebp], 0
	je	SHORT $LN8@MtCallback
	mov	eax, DWORD PTR ___result__$80530[ebp]
	jmp	$LN12@MtCallback
$LN8@MtCallback:
; Line 345
	mov	ecx, DWORD PTR _srcSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv173[ebp], eax
	mov	DWORD PTR tv174[ebp], ecx
	mov	DWORD PTR tv174[ebp+4], edx
	mov	ecx, DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR tv174[ebp+4]
	ja	$LN7@MtCallback
	jb	SHORT $LN14@MtCallback
	mov	eax, DWORD PTR tv173[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR tv174[ebp]
	jae	$LN7@MtCallback
$LN14@MtCallback:
; Line 347
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR _destLim$80526[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _packSize$80535[ebp], eax
; Line 348
	push	0
	lea	ecx, DWORD PTR _packSize$80535[ebp]
	push	ecx
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Lzma2EncInt_EncodeSubblock@16
	mov	DWORD PTR _res$[ebp], eax
; Line 349
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN6@MtCallback
; Line 350
	jmp	SHORT $LN7@MtCallback
$LN6@MtCallback:
; Line 351
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _packSize$80535[ebp]
	mov	ecx, DWORD PTR _destSize$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 353
	cmp	DWORD PTR _packSize$80535[ebp], 0
	jne	SHORT $LN5@MtCallback
; Line 355
	mov	DWORD PTR _res$[ebp], 11		; 0000000bH
; Line 356
	jmp	SHORT $LN7@MtCallback
$LN5@MtCallback:
; Line 359
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _mainEncoder$[ebp]
	add	eax, 1184				; 000004a0H
	push	eax
	call	_MtProgress_Set@24
	test	eax, eax
	je	SHORT $LN4@MtCallback
; Line 361
	mov	DWORD PTR _res$[ebp], 10		; 0000000aH
; Line 362
	jmp	SHORT $LN7@MtCallback
$LN4@MtCallback:
; Line 364
	jmp	$LN8@MtCallback
$LN7@MtCallback:
; Line 365
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_LzmaEnc_Finish@4
; Line 366
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN11@MtCallback
; Line 367
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN12@MtCallback
$LN11@MtCallback:
; Line 369
	cmp	DWORD PTR _finished$[ebp], 0
	je	SHORT $LN2@MtCallback
; Line 371
	mov	eax, DWORD PTR _destSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _destLim$80526[ebp]
	jne	SHORT $LN1@MtCallback
; Line 372
	mov	eax, 7
	jmp	SHORT $LN12@MtCallback
$LN1@MtCallback:
; Line 373
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+eax], 0
	mov	edx, DWORD PTR _destSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _destSize$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@MtCallback:
; Line 376
	mov	eax, DWORD PTR _res$[ebp]
$LN12@MtCallback:
; Line 377
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@MtCallback
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN17@MtCallback:
	DD	1
	DD	$LN16@MtCallback
$LN16@MtCallback:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@MtCallback
$LN15@MtCallback:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_MtCallbackImp_Code@28 ENDP
_TEXT	ENDS
END
