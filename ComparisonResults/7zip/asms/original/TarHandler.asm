; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Tar\TarHandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kProps	DB	03H
	DB	06H
	DB	07H
	DB	08H
	DB	0cH
	DB	035H
	DB	019H
	DB	01aH
	DB	036H
	DB	05aH
	ORG $+2
_kArcProps DB	02dH
	DB	053H
	ORG $+2
$SG71186 DB	'OEM', 00H
$SG71188 DB	'UTF-8', 00H
	ORG $+2
$SG71307 DB	'.', 00H, 't', 00H, 'a', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG71839 DB	'cp', 00H
	ORG $+1
$SG71843 DB	00H, 00H
CONST	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfProperties
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z PROC ; NArchive::NTar::CHandler::GetNumberOfProperties
; Line 51
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ENDP ; NArchive::NTar::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NTar::CHandler::GetPropertyInfo
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NTar::CHandler::GetPropertyInfo
; Line 51
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 10		; 0000000aH
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NTar::CHandler::GetPropertyInfo
_TEXT	ENDS
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z PROC ; NArchive::NTar::CHandler::GetNumberOfArchiveProperties
; Line 52
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 2
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ENDP ; NArchive::NTar::CHandler::GetNumberOfArchiveProperties
_TEXT	ENDS
PUBLIC	?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NTar::CHandler::GetArchivePropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NTar::CHandler::GetArchivePropertyInfo
; Line 52
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 2
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NTar::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	__$ArrayPad$
PUBLIC	?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NTar::CHandler::GetArchiveProperty
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -76						; size = 4
tv85 = -72						; size = 4
tv67 = -68						; size = 4
$T72686 = -64						; size = 4
_sz$71191 = -56						; size = 16
_name$71180 = -36					; size = 4
_flags$71170 = -32					; size = 4
_prop$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NTar::CHandler::GetArchiveProperty
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 56
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 57
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 44					; 0000002cH
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 39			; 00000027H
	ja	$LN19@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN23@GetArchive@2[edx]
	jmp	DWORD PTR $LN28@GetArchive@2[eax*4]
$LN18@GetArchive@2:
; Line 59
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+208]
	test	edx, edx
	je	SHORT $LN17@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	mov	edx, DWORD PTR [eax+192]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN17@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN16@GetArchive@2:
; Line 60
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+208]
	test	ecx, ecx
	je	SHORT $LN15@GetArchive@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR [edx+200]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN15@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN14@GetArchive@2:
; Line 63
	mov	DWORD PTR _flags$71170[ebp], 0
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+216]
	test	eax, eax
	jne	SHORT $LN13@GetArchive@2
; Line 65
	mov	ecx, DWORD PTR _flags$71170[ebp]
	or	ecx, 1
	mov	DWORD PTR _flags$71170[ebp], ecx
	jmp	SHORT $LN12@GetArchive@2
$LN13@GetArchive@2:
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	DWORD PTR tv85[ebp], eax
	cmp	DWORD PTR tv85[ebp], 1
	je	SHORT $LN8@GetArchive@2
	cmp	DWORD PTR tv85[ebp], 2
	je	SHORT $LN9@GetArchive@2
	jmp	SHORT $LN12@GetArchive@2
$LN9@GetArchive@2:
; Line 68
	mov	DWORD PTR _flags$71170[ebp], 32		; 00000020H
	jmp	SHORT $LN12@GetArchive@2
$LN8@GetArchive@2:
; Line 69
	mov	DWORD PTR _flags$71170[ebp], 2
$LN12@GetArchive@2:
; Line 71
	mov	ecx, DWORD PTR _flags$71170[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 72
	jmp	SHORT $LN19@GetArchive@2
$LN7@GetArchive@2:
; Line 77
	mov	DWORD PTR _name$71180[ebp], 0
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 1
	je	SHORT $LN4@GetArchive@2
	cmp	DWORD PTR tv91[ebp], 65001		; 0000fde9H
	je	SHORT $LN3@GetArchive@2
	jmp	SHORT $LN5@GetArchive@2
$LN4@GetArchive@2:
; Line 80
	mov	DWORD PTR _name$71180[ebp], OFFSET $SG71186
	jmp	SHORT $LN5@GetArchive@2
$LN3@GetArchive@2:
; Line 81
	mov	DWORD PTR _name$71180[ebp], OFFSET $SG71188
$LN5@GetArchive@2:
; Line 83
	cmp	DWORD PTR _name$71180[ebp], 0
	je	SHORT $LN2@GetArchive@2
; Line 84
	mov	ecx, DWORD PTR _name$71180[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 85
	jmp	SHORT $LN19@GetArchive@2
$LN2@GetArchive@2:
; Line 88
	lea	edx, DWORD PTR _sz$71191[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 89
	lea	edx, DWORD PTR _sz$71191[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
$LN19@GetArchive@2:
; Line 94
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 95
	mov	DWORD PTR $T72686[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72686[ebp]
; Line 96
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN27@GetArchive@2:
	DD	2
	DD	$LN26@GetArchive@2
$LN26@GetArchive@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN24@GetArchive@2
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN25@GetArchive@2
$LN25@GetArchive@2:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
$LN24@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN28@GetArchive@2:
	DD	$LN18@GetArchive@2
	DD	$LN16@GetArchive@2
	DD	$LN14@GetArchive@2
	DD	$LN7@GetArchive@2
	DD	$LN19@GetArchive@2
$LN23@GetArchive@2:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NTar::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsPaxExtendedHeader
PUBLIC	?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ; NArchive::NTar::CHandler::ReadItem2
EXTRN	?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z:PROC ; NArchive::NTar::ReadItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$71200 = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_filled$ = 12						; size = 4
_item$ = 16						; size = 4
?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z PROC ; NArchive::NTar::CHandler::ReadItem2
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR [eax+120], edx
	mov	ecx, DWORD PTR [ecx+196]
	mov	DWORD PTR [eax+124], ecx
; Line 101
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filled$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ; NArchive::NTar::ReadItem
	mov	DWORD PTR ___result__$71200[ebp], eax
	cmp	DWORD PTR ___result__$71200[ebp], 0
	je	SHORT $LN3@ReadItem2
	mov	eax, DWORD PTR ___result__$71200[ebp]
	jmp	SHORT $LN4@ReadItem2
$LN3@ReadItem2:
; Line 102
	mov	eax, DWORD PTR _filled$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@ReadItem2
; Line 108
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsPaxExtendedHeader
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@ReadItem2
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+217], 1
$LN2@ReadItem2:
; Line 111
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+192]
	adc	eax, DWORD PTR [ecx+196]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], edx
	mov	DWORD PTR [ecx+196], eax
; Line 112
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+128]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+200]
	adc	ecx, DWORD PTR [edx+204]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], eax
	mov	DWORD PTR [edx+204], ecx
; Line 113
	xor	eax, eax
$LN4@ReadItem2:
; Line 114
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ENDP ; NArchive::NTar::CHandler::ReadItem2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ PROC	; NArchive::NTar::CItem::IsPaxExtendedHeader, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+104]
	mov	BYTE PTR tv66[ebp], cl
	cmp	BYTE PTR tv66[ebp], 88			; 00000058H
	je	SHORT $LN1@IsPaxExten
	cmp	BYTE PTR tv66[ebp], 103			; 00000067H
	je	SHORT $LN1@IsPaxExten
	cmp	BYTE PTR tv66[ebp], 120			; 00000078H
	je	SHORT $LN1@IsPaxExten
	jmp	SHORT $LN2@IsPaxExten
$LN1@IsPaxExten:
; Line 54
	mov	al, 1
	jmp	SHORT $LN4@IsPaxExten
$LN2@IsPaxExten:
; Line 56
	xor	al, al
$LN4@IsPaxExten:
; Line 57
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ ENDP	; NArchive::NTar::CItem::IsPaxExtendedHeader
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPB_W@Z				; MyStringLen
PUBLIC	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
PUBLIC	??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
PUBLIC	??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
PUBLIC	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
PUBLIC	??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
PUBLIC	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
PUBLIC	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z ; CObjectVector<NArchive::NTar::CItemEx>::Add
PUBLIC	??1CItemEx@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CItemEx::~CItemEx
PUBLIC	??0CItemEx@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CItemEx::CItemEx
PUBLIC	__$ArrayPad$
PUBLIC	?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NTar::CHandler::Open2
EXTRN	?MyStringCompareNoCase@@YGHPB_W0@Z:PROC		; MyStringCompareNoCase
EXTRN	_IID_IArchiveOpenVolumeCallback:BYTE
EXTRN	?CheckUTF8@@YG_NPBD_N@Z:PROC			; CheckUTF8
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv276 = -320						; size = 4
tv428 = -316						; size = 4
$T72714 = -312						; size = 4
$T72713 = -308						; size = 4
$T72712 = -304						; size = 4
$T72711 = -300						; size = 4
$T72710 = -296						; size = 4
$T72709 = -292						; size = 4
$T72708 = -288						; size = 4
$T72707 = -284						; size = 4
$T72706 = -280						; size = 4
_len$71304 = -276					; size = 4
_prop$71296 = -268					; size = 16
_openVolumeCallback$71288 = -244			; size = 4
___result__$71243 = -236				; size = 4
_numFiles$71242 = -228					; size = 8
___result__$71238 = -216				; size = 4
___result__$71232 = -212				; size = 4
___result__$71223 = -208				; size = 4
_filled$71222 = -197					; size = 1
_item$71221 = -188					; size = 136
_utf8_OK$ = -45						; size = 1
___result__$71213 = -44					; size = 4
___result__$71211 = -40					; size = 4
_endPos$ = -32						; size = 8
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_callback$ = 12						; size = 4
?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z PROC ; NArchive::NTar::CHandler::Open2
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 117
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 118
	mov	DWORD PTR _endPos$[ebp], 0
	mov	DWORD PTR _endPos$[ebp+4], 0
; Line 120
	mov	esi, esp
	lea	eax, DWORD PTR _endPos$[ebp]
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71211[ebp], eax
	cmp	DWORD PTR ___result__$71211[ebp], 0
	je	SHORT $LN30@Open2
	mov	eax, DWORD PTR ___result__$71211[ebp]
	jmp	$LN31@Open2
$LN30@Open2:
; Line 121
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71213[ebp], eax
	cmp	DWORD PTR ___result__$71213[ebp], 0
	je	SHORT $LN29@Open2
	mov	eax, DWORD PTR ___result__$71213[ebp]
	jmp	$LN31@Open2
$LN29@Open2:
; Line 124
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+208], 1
; Line 126
	mov	BYTE PTR _utf8_OK$[ebp], 1
; Line 127
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+218]
	test	edx, edx
	jne	SHORT $LN26@Open2
; Line 129
	movzx	eax, BYTE PTR _utf8_OK$[ebp]
	test	eax, eax
	jne	SHORT $LN26@Open2
; Line 130
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 1
$LN26@Open2:
; Line 135
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??0CItemEx@NTar@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 137
	lea	edx, DWORD PTR _item$71221[ebp]
	push	edx
	lea	eax, DWORD PTR _filled$71222[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ; NArchive::NTar::CHandler::ReadItem2
	mov	DWORD PTR ___result__$71223[ebp], eax
	cmp	DWORD PTR ___result__$71223[ebp], 0
	je	SHORT $LN24@Open2
	mov	edx, DWORD PTR ___result__$71223[ebp]
	mov	DWORD PTR $T72706[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T72706[ebp]
	jmp	$LN31@Open2
$LN24@Open2:
; Line 138
	movzx	eax, BYTE PTR _filled$71222[ebp]
	test	eax, eax
	jne	SHORT $LN23@Open2
; Line 139
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	jmp	$LN25@Open2
$LN23@Open2:
; Line 141
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+216], 1
; Line 142
	lea	edx, DWORD PTR _item$71221[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z ; CObjectVector<NArchive::NTar::CItemEx>::Add
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+218]
	test	ecx, ecx
	jne	SHORT $LN22@Open2
; Line 146
	movzx	edx, BYTE PTR _utf8_OK$[ebp]
	test	edx, edx
	je	SHORT $LN21@Open2
	movzx	eax, BYTE PTR _item$71221[ebp+132]
	push	eax
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?CheckUTF8@@YG_NPBD_N@Z			; CheckUTF8
	mov	BYTE PTR _utf8_OK$[ebp], al
$LN21@Open2:
; Line 147
	movzx	ecx, BYTE PTR _utf8_OK$[ebp]
	test	ecx, ecx
	je	SHORT $LN20@Open2
	movzx	edx, BYTE PTR _item$71221[ebp+133]
	push	edx
	lea	ecx, DWORD PTR _item$71221[ebp+60]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?CheckUTF8@@YG_NPBD_N@Z			; CheckUTF8
	mov	BYTE PTR _utf8_OK$[ebp], al
$LN20@Open2:
; Line 148
	movzx	eax, BYTE PTR _utf8_OK$[ebp]
	test	eax, eax
	je	SHORT $LN19@Open2
	push	0
	lea	ecx, DWORD PTR _item$71221[ebp+72]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?CheckUTF8@@YG_NPBD_N@Z			; CheckUTF8
	mov	BYTE PTR _utf8_OK$[ebp], al
$LN19@Open2:
; Line 149
	movzx	ecx, BYTE PTR _utf8_OK$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@Open2
	push	0
	lea	ecx, DWORD PTR _item$71221[ebp+84]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?CheckUTF8@@YG_NPBD_N@Z			; CheckUTF8
	mov	BYTE PTR _utf8_OK$[ebp], al
$LN22@Open2:
; Line 152
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	mov	esi, esp
	push	edx
	push	1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	push	edx
	push	eax
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71232[ebp], eax
	cmp	DWORD PTR ___result__$71232[ebp], 0
	je	SHORT $LN17@Open2
	mov	ecx, DWORD PTR ___result__$71232[ebp]
	mov	DWORD PTR $T72707[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T72707[ebp]
	jmp	$LN31@Open2
$LN17@Open2:
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv428[ebp], edx
	mov	eax, DWORD PTR tv428[ebp]
	mov	ecx, DWORD PTR [eax+196]
	cmp	ecx, DWORD PTR _endPos$[ebp+4]
	jb	SHORT $LN16@Open2
	ja	SHORT $LN36@Open2
	mov	edx, DWORD PTR tv428[ebp]
	mov	eax, DWORD PTR [edx+192]
	cmp	eax, DWORD PTR _endPos$[ebp]
	jbe	SHORT $LN16@Open2
$LN36@Open2:
; Line 155
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 2
; Line 156
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	jmp	$LN25@Open2
$LN16@Open2:
; Line 165
	cmp	DWORD PTR _callback$[ebp], 0
	je	$LN15@Open2
; Line 167
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	cmp	eax, 1
	jne	SHORT $LN14@Open2
; Line 169
	mov	esi, esp
	lea	edx, DWORD PTR _endPos$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71238[ebp], eax
	cmp	DWORD PTR ___result__$71238[ebp], 0
	je	SHORT $LN14@Open2
	mov	ecx, DWORD PTR ___result__$71238[ebp]
	mov	DWORD PTR $T72708[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T72708[ebp]
	jmp	$LN31@Open2
$LN14@Open2:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	and	eax, 1023				; 000003ffH
	jne	SHORT $LN15@Open2
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	xor	edx, edx
	mov	DWORD PTR _numFiles$71242[ebp], eax
	mov	DWORD PTR _numFiles$71242[ebp+4], edx
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _numFiles$71242[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71243[ebp], eax
	cmp	DWORD PTR ___result__$71243[ebp], 0
	je	SHORT $LN15@Open2
	mov	eax, DWORD PTR ___result__$71243[ebp]
	mov	DWORD PTR $T72709[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T72709[ebp]
	jmp	$LN31@Open2
$LN15@Open2:
; Line 177
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$71221[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	jmp	$LN26@Open2
$LN25@Open2:
; Line 179
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+218]
	test	edx, edx
	jne	SHORT $LN10@Open2
; Line 181
	movzx	eax, BYTE PTR _utf8_OK$[ebp]
	test	eax, eax
	jne	SHORT $LN10@Open2
; Line 182
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 1
$LN10@Open2:
; Line 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR [edx+228], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	test	eax, eax
	jne	$LN8@Open2
; Line 188
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 0
	je	SHORT $LN7@Open2
; Line 190
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+216], 0
; Line 191
	mov	eax, 1
	jmp	$LN31@Open2
$LN7@Open2:
; Line 193
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 194
	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN6@Open2
; Line 195
	mov	DWORD PTR $T72710[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T72710[ebp]
	jmp	$LN31@Open2
$LN6@Open2:
; Line 196
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveOpenVolumeCallback
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 197
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Open2
; Line 198
	mov	DWORD PTR $T72711[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T72711[ebp]
	jmp	$LN31@Open2
$LN5@Open2:
; Line 199
	lea	ecx, DWORD PTR _prop$71296[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 200
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
	mov	DWORD PTR tv276[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _prop$71296[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR tv276[ebp]
	push	ecx
	mov	edx, DWORD PTR tv276[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@Open2
; Line 201
	mov	DWORD PTR $T72712[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$71296[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T72712[ebp]
	jmp	$LN31@Open2
$LN4@Open2:
; Line 202
	movzx	edx, WORD PTR _prop$71296[ebp]
	cmp	edx, 8
	je	SHORT $LN3@Open2
; Line 203
	mov	DWORD PTR $T72713[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$71296[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T72713[ebp]
	jmp	$LN31@Open2
$LN3@Open2:
; Line 204
	mov	eax, DWORD PTR _prop$71296[ebp+8]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$71304[ebp], eax
; Line 205
	cmp	DWORD PTR _len$71304[ebp], 4
	jb	SHORT $LN1@Open2
	push	OFFSET $SG71307
	mov	ecx, DWORD PTR _len$71304[ebp]
	mov	edx, DWORD PTR _prop$71296[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*2-8]
	push	eax
	call	?MyStringCompareNoCase@@YGHPB_W0@Z	; MyStringCompareNoCase
	test	eax, eax
	je	SHORT $LN2@Open2
$LN1@Open2:
; Line 206
	mov	DWORD PTR $T72714[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$71296[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T72714[ebp]
	jmp	SHORT $LN31@Open2
$LN2@Open2:
; Line 207
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$71296[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
$LN8@Open2:
; Line 209
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+216], 1
; Line 210
	xor	eax, eax
$LN31@Open2:
; Line 211
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@Open2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN45@Open2:
	DD	6
	DD	$LN44@Open2
$LN44@Open2:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN37@Open2
	DD	-188					; ffffff44H
	DD	136					; 00000088H
	DD	$LN38@Open2
	DD	-197					; ffffff3bH
	DD	1
	DD	$LN39@Open2
	DD	-228					; ffffff1cH
	DD	8
	DD	$LN40@Open2
	DD	-244					; ffffff0cH
	DD	4
	DD	$LN41@Open2
	DD	-268					; fffffef4H
	DD	16					; 00000010H
	DD	$LN42@Open2
$LN42@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN41@Open2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	86					; 00000056H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN40@Open2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN39@Open2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN38@Open2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN37@Open2:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0:
	lea	ecx, DWORD PTR _item$71221[ebp]
	jmp	??1CItemEx@NTar@NArchive@@QAE@XZ
__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1:
	lea	ecx, DWORD PTR _openVolumeCallback$71288[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
__unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2:
	lea	ecx, DWORD PTR _prop$71296[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NTar::CHandler::Open2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyStringLen@@YGIPB_W@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPB_W@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 54
	mov	eax, DWORD PTR _i$[ebp]
; Line 55
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPB_W@Z ENDP				; MyStringLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItem::GetPackSizeAligned, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 511				; 000001ffH
	mov	edx, DWORD PTR [eax+20]
	adc	edx, 0
	and	ecx, -512				; fffffe00H
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItem::GetPackSizeAligned
_TEXT	ENDS
PUBLIC	??1CItem@NTar@NArchive@@QAE@XZ			; NArchive::NTar::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItemEx@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemEx@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItemEx::~CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItemEx@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItemEx::~CItemEx
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CItem@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3
__ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CItem@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CItem@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CItem@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CItem@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CItem@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CItem@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItem::~CItem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T72757 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72757[ebp], ecx
	mov	edx, DWORD PTR $T72757[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
PUBLIC	??0CItem@NTar@NArchive@@QAE@XZ			; NArchive::NTar::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemEx@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CItemEx@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItemEx::CItemEx
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3
__ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CItem@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItem@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CItem@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItem::CItem
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NTar::CHandler::Open
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__unwindtable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -28						; size = 4
$T72776 = -24						; size = 4
___result__$71322 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
___formal$ = 16						; size = 4
_openArchiveCallback$ = 20				; size = 4
?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NTar::CHandler::Open
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 214
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 215
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 217
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 218
	mov	ecx, DWORD PTR _openArchiveCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NTar::CHandler::Open2
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR ___result__$71322[ebp], eax
	cmp	DWORD PTR ___result__$71322[ebp], 0
	je	SHORT $LN1@Open
	mov	eax, DWORD PTR ___result__$71322[ebp]
	jmp	SHORT $LN3@Open
$LN1@Open:
; Line 219
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 221
	xor	eax, eax
	jmp	SHORT $LN3@Open
__catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 222
	mov	DWORD PTR $T72776[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN8@Open
	ret	0
	mov	eax, __tryend$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
__tryend$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@Open
$LN8@Open:
	mov	eax, DWORD PTR $T72776[ebp]
$LN3@Open:
; Line 223
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NTar::CHandler::Open
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NTar::CHandler::OpenSeq
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z PROC ; NArchive::NTar::CHandler::OpenSeq
; Line 226
	push	ebp
	mov	ebp, esp
	push	esi
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 228
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 229
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+212], 1
; Line 230
	xor	eax, eax
; Line 231
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z ENDP ; NArchive::NTar::CHandler::OpenSeq
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NTar::CItemEx>::Clear
PUBLIC	?Close@CHandler@NTar@NArchive@@UAGJXZ		; NArchive::NTar::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NTar@NArchive@@UAGJXZ PROC		; NArchive::NTar::CHandler::Close
; Line 234
	push	ebp
	mov	ebp, esp
; Line 235
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+216], 0
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 0
; Line 238
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+208], 0
; Line 239
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], 0
	mov	DWORD PTR [eax+196], 0
; Line 240
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0
	mov	DWORD PTR [ecx+204], 0
; Line 241
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+217], 0
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NTar::CItemEx>::Clear
; Line 246
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 248
	xor	eax, eax
; Line 249
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NTar@NArchive@@UAGJXZ ENDP		; NArchive::NTar::CHandler::Close
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -4						; size = 4
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z PROC ; NArchive::NTar::CHandler::GetNumberOfItems
; Line 252
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 253
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	test	eax, eax
	je	SHORT $LN3@GetNumberO
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@GetNumberO
$LN3@GetNumberO:
	mov	DWORD PTR tv71[ebp], -1
$LN4@GetNumberO:
	mov	eax, DWORD PTR _numItems$[ebp]
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [eax], ecx
; Line 254
	xor	eax, eax
; Line 255
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z ENDP ; NArchive::NTar::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>
PUBLIC	?Init@CHandler@NTar@NArchive@@QAEXXZ		; NArchive::NTar::CHandler::Init
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>
PUBLIC	??_7CHandler@NTar@NArchive@@6BIOutArchive@@@	; NArchive::NTar::CHandler::`vftable'
PUBLIC	??_7CHandler@NTar@NArchive@@6BISetProperties@@@	; NArchive::NTar::CHandler::`vftable'
PUBLIC	??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NTar::CHandler::`vftable'
PUBLIC	??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NTar::CHandler::`vftable'
PUBLIC	??_7CHandler@NTar@NArchive@@6BIInArchive@@@	; NArchive::NTar::CHandler::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IOutArchive@@QAE@XZ				; IOutArchive::IOutArchive
PUBLIC	??0ISetProperties@@QAE@XZ			; ISetProperties::ISetProperties
PUBLIC	??0IInArchiveGetStream@@QAE@XZ			; IInArchiveGetStream::IInArchiveGetStream
PUBLIC	??0IArchiveOpenSeq@@QAE@XZ			; IArchiveOpenSeq::IArchiveOpenSeq
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??0CHandler@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CHandler::CHandler
PUBLIC	??_R4CHandler@NTar@NArchive@@6BIInArchive@@@	; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NTar@NArchive@@@8		; NArchive::NTar::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NTar@NArchive@@8			; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NTar@NArchive@@8			; NArchive::NTar::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NTar@NArchive@@8		; NArchive::NTar::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IArchiveOpenSeq@@8			; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenSeq@@@8			; IArchiveOpenSeq `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenSeq@@8		; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUIInArchiveGetStream@@@8			; IInArchiveGetStream `RTTI Type Descriptor'
PUBLIC	??_R3IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUISetProperties@@@8			; ISetProperties `RTTI Type Descriptor'
PUBLIC	??_R3ISetProperties@@8				; ISetProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISetProperties@@8				; ISetProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AUIOutArchive@@@8				; IOutArchive `RTTI Type Descriptor'
PUBLIC	??_R3IOutArchive@@8				; IOutArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutArchive@@8				; IOutArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
PUBLIC	??_R1BE@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NTar@NArchive@@UAGKXZ		; NArchive::NTar::CHandler::AddRef
PUBLIC	?Release@CHandler@NTar@NArchive@@UAGKXZ		; NArchive::NTar::CHandler::Release
PUBLIC	?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NTar::CHandler::GetProperty
PUBLIC	?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NTar::CHandler::Extract
PUBLIC	??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NTar@NArchive@@W3AGKXZ		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NTar@NArchive@@W3AGKXZ	; [thunk]:NArchive::NTar::CHandler::Release`adjustor{4}'
PUBLIC	??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CHandler@NTar@NArchive@@W7AGKXZ		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{8}'
PUBLIC	?Release@CHandler@NTar@NArchive@@W7AGKXZ	; [thunk]:NArchive::NTar::CHandler::Release`adjustor{8}'
PUBLIC	?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ; NArchive::NTar::CHandler::GetStream
PUBLIC	??_R4CHandler@NTar@NArchive@@6BISetProperties@@@ ; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ	; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{12}'
PUBLIC	?Release@CHandler@NTar@NArchive@@WM@AGKXZ	; [thunk]:NArchive::NTar::CHandler::Release`adjustor{12}'
PUBLIC	?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NTar::CHandler::SetProperties
PUBLIC	??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@	; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{16}'
PUBLIC	?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ	; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{16}'
PUBLIC	?Release@CHandler@NTar@NArchive@@WBA@AGKXZ	; [thunk]:NArchive::NTar::CHandler::Release`adjustor{16}'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?UpdateItems@CHandler@NTar@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:PROC ; NArchive::NTar::CHandler::UpdateItems
EXTRN	?GetFileTimeType@CHandler@NTar@NArchive@@UAGJPAI@Z:PROC ; NArchive::NTar::CHandler::GetFileTimeType
;	COMDAT ??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@ DD 00H	; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NTar@NArchive@@@8
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NTar@NArchive@@6BISetProperties@@@
rdata$r	SEGMENT
??_R4CHandler@NTar@NArchive@@6BISetProperties@@@ DD 00H	; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NTar@NArchive@@@8
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@
rdata$r	SEGMENT
??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ DD 00H ; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NTar@NArchive@@@8
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@
rdata$r	SEGMENT
??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ DD 00H ; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NTar@NArchive@@@8
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1BA@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutArchive@@8
rdata$r	SEGMENT
??_R2IOutArchive@@8 DD FLAT:??_R1A@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutArchive@@8
rdata$r	SEGMENT
??_R3IOutArchive@@8 DD 00H				; IOutArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutArchive@@@8
_DATA	SEGMENT
??_R0?AUIOutArchive@@@8 DD FLAT:??_7type_info@@6B@	; IOutArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ISetProperties@@8
rdata$r	SEGMENT
??_R2ISetProperties@@8 DD FLAT:??_R1A@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISetProperties@@8
rdata$r	SEGMENT
??_R3ISetProperties@@8 DD 00H				; ISetProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISetProperties@@@8
_DATA	SEGMENT
??_R0?AUISetProperties@@@8 DD FLAT:??_7type_info@@6B@	; ISetProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISetProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R2IInArchiveGetStream@@8 DD FLAT:??_R1A@?0A@EA@IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R3IInArchiveGetStream@@8 DD 00H			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchiveGetStream@@@8
_DATA	SEGMENT
??_R0?AUIInArchiveGetStream@@@8 DD FLAT:??_7type_info@@6B@ ; IInArchiveGetStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchiveGetStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R2IArchiveOpenSeq@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R3IArchiveOpenSeq@@8 DD 00H				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenSeq@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenSeq@@@8 DD FLAT:??_7type_info@@6B@	; IArchiveOpenSeq `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenSeq@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NTar@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NTar@NArchive@@8 DD FLAT:??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NTar@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NTar@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveOpenSeq@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@IInArchiveGetStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ISetProperties@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@IOutArchive@@8
	DD	FLAT:??_R1BA@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NTar@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NTar@NArchive@@8 DD 00H			; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0cH
	DD	FLAT:??_R2CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NTar@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NTar@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NTar::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NTar@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NTar@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NTar@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NTar::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NTar@NArchive@@@8
	DD	FLAT:??_R3CHandler@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NTar@NArchive@@6BIOutArchive@@@
CONST	SEGMENT
??_7CHandler@NTar@NArchive@@6BIOutArchive@@@ DD FLAT:??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@ ; NArchive::NTar::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ
	DD	FLAT:?Release@CHandler@NTar@NArchive@@WBA@AGKXZ
	DD	FLAT:?UpdateItems@CHandler@NTar@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	FLAT:?GetFileTimeType@CHandler@NTar@NArchive@@UAGJPAI@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NTar@NArchive@@6BISetProperties@@@
CONST	SEGMENT
??_7CHandler@NTar@NArchive@@6BISetProperties@@@ DD FLAT:??_R4CHandler@NTar@NArchive@@6BISetProperties@@@ ; NArchive::NTar::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ
	DD	FLAT:?Release@CHandler@NTar@NArchive@@WM@AGKXZ
	DD	FLAT:?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@
CONST	SEGMENT
??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ DD FLAT:??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NTar::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NTar@NArchive@@W7AGKXZ
	DD	FLAT:?Release@CHandler@NTar@NArchive@@W7AGKXZ
	DD	FLAT:?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@
CONST	SEGMENT
??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ DD FLAT:??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NTar::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NTar@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NTar@NArchive@@W3AGKXZ
	DD	FLAT:?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NTar@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NTar@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NTar@NArchive@@6BIInArchive@@@ ; NArchive::NTar::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NTar@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NTar@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NTar@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??0CHandler@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CHandler@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CHandler@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv184 = -28						; size = 4
$T72795 = -24						; size = 4
$T72794 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CHandler::CHandler
; _this$ = ecx
; Line 258
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveOpenSeq@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0IInArchiveGetStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ISetProperties@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IOutArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NTar@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CHandler@NTar@NArchive@@6BISetProperties@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CHandler@NTar@NArchive@@6BIOutArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CItemEx@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 259
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72795[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T72795[ebp], 0
	je	SHORT $LN3@CHandler
	mov	ecx, DWORD PTR $T72795[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN4@CHandler
$LN3@CHandler:
	mov	DWORD PTR tv184[ebp], 0
$LN4@CHandler:
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR $T72794[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72794[ebp]
	mov	DWORD PTR [eax+232], ecx
; Line 260
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 261
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], 65001		; 0000fde9H
; Line 262
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CHandler@NTar@NArchive@@QAEXXZ	; NArchive::NTar::CHandler::Init
; Line 263
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CItemEx@NTar@NArchive@@QAE@XZ
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5:
	mov	eax, DWORD PTR $T72795[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CHandler::CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72833 = -8						; size = 4
$T72832 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72833[ebp], edx
	mov	eax, DWORD PTR $T72833[ebp]
	mov	DWORD PTR $T72832[ebp], eax
	cmp	DWORD PTR $T72832[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T72832[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_IID_IOutArchive:BYTE
EXTRN	_IID_ISetProperties:BYTE
EXTRN	_IID_IInArchiveGetStream:BYTE
EXTRN	_IID_IArchiveOpenSeq:BYTE
EXTRN	_IID_IInArchive:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv154 = -16						; size = 4
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NTar::CHandler::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.h
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN12@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN11@QueryInter@2
$LN12@QueryInter@2:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN11@QueryInter@2
$LN10@QueryInter@2:
	push	OFFSET _IID_IArchiveOpenSeq
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN16@QueryInter@2
$LN15@QueryInter@2:
	mov	DWORD PTR tv92[ebp], 0
$LN16@QueryInter@2:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN11@QueryInter@2
$LN8@QueryInter@2:
	push	OFFSET _IID_IInArchiveGetStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN18@QueryInter@2
$LN17@QueryInter@2:
	mov	DWORD PTR tv134[ebp], 0
$LN18@QueryInter@2:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN11@QueryInter@2
$LN6@QueryInter@2:
	push	OFFSET _IID_ISetProperties
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN19@QueryInter@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN20@QueryInter@2
$LN19@QueryInter@2:
	mov	DWORD PTR tv144[ebp], 0
$LN20@QueryInter@2:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN11@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_IOutArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN21@QueryInter@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN22@QueryInter@2
$LN21@QueryInter@2:
	mov	DWORD PTR tv154[ebp], 0
$LN22@QueryInter@2:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN11@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN13@QueryInter@2
$LN11@QueryInter@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
	xor	eax, eax
$LN13@QueryInter@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NTar::CHandler::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NTar@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NTar@NArchive@@UAGKXZ PROC		; NArchive::NTar::CHandler::AddRef, COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NTar@NArchive@@UAGKXZ ENDP		; NArchive::NTar::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NTar@NArchive@@QAEPAXI@Z		; NArchive::NTar::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NTar@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72859 = -8						; size = 4
$T72858 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NTar@NArchive@@UAGKXZ PROC		; NArchive::NTar::CHandler::Release, COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+20], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72859[ebp], edx
	mov	eax, DWORD PTR $T72859[ebp]
	mov	DWORD PTR $T72858[ebp], eax
	cmp	DWORD PTR $T72858[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T72858[ebp]
	call	??_GCHandler@NTar@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NTar@NArchive@@UAGKXZ ENDP		; NArchive::NTar::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NTar@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NTar@NArchive@@QAEPAXI@Z PROC		; NArchive::NTar::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NTar@NArchive@@QAEPAXI@Z ENDP		; NArchive::NTar::CHandler::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$3
__ehfuncinfo$??1CHandler@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CHandler@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>
__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CItemEx@NTar@NArchive@@QAE@XZ
__ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CHandler::~CHandler
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`vftable'
PUBLIC	??_R4IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenSeq@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenSeq@@6B@ DD 00H			; IArchiveOpenSeq::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenSeq@@@8
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenSeq@@6B@
CONST	SEGMENT
??_7IArchiveOpenSeq@@6B@ DD FLAT:??_R4IArchiveOpenSeq@@6B@ ; IArchiveOpenSeq::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenSeq@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenSeq@@QAE@XZ PROC				; IArchiveOpenSeq::IArchiveOpenSeq, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenSeq@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenSeq@@QAE@XZ ENDP				; IArchiveOpenSeq::IArchiveOpenSeq
_TEXT	ENDS
PUBLIC	??_7IInArchiveGetStream@@6B@			; IInArchiveGetStream::`vftable'
PUBLIC	??_R4IInArchiveGetStream@@6B@			; IInArchiveGetStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchiveGetStream@@6B@
rdata$r	SEGMENT
??_R4IInArchiveGetStream@@6B@ DD 00H			; IInArchiveGetStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchiveGetStream@@@8
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchiveGetStream@@6B@
CONST	SEGMENT
??_7IInArchiveGetStream@@6B@ DD FLAT:??_R4IInArchiveGetStream@@6B@ ; IInArchiveGetStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchiveGetStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchiveGetStream@@QAE@XZ PROC			; IInArchiveGetStream::IInArchiveGetStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchiveGetStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchiveGetStream@@QAE@XZ ENDP			; IInArchiveGetStream::IInArchiveGetStream
_TEXT	ENDS
PUBLIC	??_7ISetProperties@@6B@				; ISetProperties::`vftable'
PUBLIC	??_R4ISetProperties@@6B@			; ISetProperties::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISetProperties@@6B@
rdata$r	SEGMENT
??_R4ISetProperties@@6B@ DD 00H				; ISetProperties::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISetProperties@@@8
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_7ISetProperties@@6B@
CONST	SEGMENT
??_7ISetProperties@@6B@ DD FLAT:??_R4ISetProperties@@6B@ ; ISetProperties::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISetProperties@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISetProperties@@QAE@XZ PROC				; ISetProperties::ISetProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISetProperties@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISetProperties@@QAE@XZ ENDP				; ISetProperties::ISetProperties
_TEXT	ENDS
PUBLIC	??_7IOutArchive@@6B@				; IOutArchive::`vftable'
PUBLIC	??_R4IOutArchive@@6B@				; IOutArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutArchive@@6B@
rdata$r	SEGMENT
??_R4IOutArchive@@6B@ DD 00H				; IOutArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutArchive@@@8
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IOutArchive@@6B@
CONST	SEGMENT
??_7IOutArchive@@6B@ DD FLAT:??_R4IOutArchive@@6B@	; IOutArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutArchive@@QAE@XZ PROC				; IOutArchive::IOutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutArchive@@QAE@XZ ENDP				; IOutArchive::IOutArchive
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z		; NArchive::NTar::CHandler::SkipTo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv197 = -44						; size = 4
___result__$71376 = -40					; size = 4
_filled$71375 = -29					; size = 1
___result__$71370 = -24					; size = 4
_packSize$71369 = -16					; size = 8
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z PROC		; NArchive::NTar::CHandler::SkipTo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN9@SkipTo:
; Line 267
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	ecx, DWORD PTR _index$[ebp]
	jb	SHORT $LN7@SkipTo
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+48]
	test	eax, eax
	jne	$LN8@SkipTo
$LN7@SkipTo:
; Line 269
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+48]
	test	edx, edx
	je	$LN6@SkipTo
; Line 271
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	mov	DWORD PTR _packSize$71369[ebp], eax
	mov	DWORD PTR _packSize$71369[ebp+4], edx
; Line 272
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _packSize$71369[ebp]
	push	eax
	lea	ecx, DWORD PTR _packSize$71369[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71370[ebp], eax
	cmp	DWORD PTR ___result__$71370[ebp], 0
	je	SHORT $LN5@SkipTo
	mov	eax, DWORD PTR ___result__$71370[ebp]
	jmp	$LN10@SkipTo
$LN5@SkipTo:
; Line 273
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	add	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx+196]
	adc	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], edx
	mov	DWORD PTR [eax+196], ecx
; Line 274
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	mov	DWORD PTR tv197[ebp], edx
	mov	eax, DWORD PTR tv197[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _packSize$71369[ebp]
	jne	SHORT $LN12@SkipTo
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR _packSize$71369[ebp+4]
	je	SHORT $LN4@SkipTo
$LN12@SkipTo:
; Line 276
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 2
; Line 277
	mov	eax, 1
	jmp	SHORT $LN10@SkipTo
$LN4@SkipTo:
; Line 279
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+48], 0
; Line 280
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 282
	jmp	SHORT $LN3@SkipTo
$LN6@SkipTo:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	lea	ecx, DWORD PTR _filled$71375[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ; NArchive::NTar::CHandler::ReadItem2
	mov	DWORD PTR ___result__$71376[ebp], eax
	cmp	DWORD PTR ___result__$71376[ebp], 0
	je	SHORT $LN2@SkipTo
	mov	eax, DWORD PTR ___result__$71376[ebp]
	jmp	SHORT $LN10@SkipTo
$LN2@SkipTo:
; Line 286
	movzx	edx, BYTE PTR _filled$71375[ebp]
	test	edx, edx
	jne	SHORT $LN1@SkipTo
; Line 288
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+208], 1
; Line 289
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN10@SkipTo
$LN1@SkipTo:
; Line 291
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 1
$LN3@SkipTo:
; Line 293
	jmp	$LN9@SkipTo
$LN8@SkipTo:
; Line 294
	xor	eax, eax
$LN10@SkipTo:
; Line 295
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SkipTo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN16@SkipTo:
	DD	2
	DD	$LN15@SkipTo
$LN15@SkipTo:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN13@SkipTo
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN14@SkipTo
$LN14@SkipTo:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN13@SkipTo:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z ENDP		; NArchive::NTar::CHandler::SkipTo
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z:PROC ; NArchive::NItemName::ConvertToOSName2
EXTRN	?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString2
EXTRN	?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:PROC ; ConvertUTF8ToUnicode
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
xdata$x	SEGMENT
__unwindtable$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z$0
__ehfuncinfo$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_dest$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_prop$ = 12						; size = 4
_toOs$ = 16						; size = 1
?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z PROC ; NArchive::NTar::CHandler::TarStringToUnicode
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 299
	lea	ecx, DWORD PTR _dest$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 65001		; 0000fde9H
	jne	SHORT $LN3@TarStringT
; Line 301
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode
; Line 302
	jmp	SHORT $LN2@TarStringT
$LN3@TarStringT:
; Line 303
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2
$LN2@TarStringT:
; Line 304
	movzx	ecx, BYTE PTR _toOs$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@TarStringT
; Line 305
	lea	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ; NArchive::NItemName::ConvertToOSName2
$LN1@TarStringT:
; Line 306
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 307
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dest$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@TarStringT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN10@TarStringT:
	DD	1
	DD	$LN9@TarStringT
$LN9@TarStringT:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@TarStringT
$LN7@TarStringT:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z$0:
	lea	ecx, DWORD PTR _dest$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ENDP ; NArchive::NTar::CHandler::TarStringToUnicode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T72904 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72904[ebp], ecx
	mov	edx, DWORD PTR $T72904[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ	; NArchive::NTar::CItem::GetUnpackSize
PUBLIC	?IsDir@CItem@NTar@NArchive@@QBE_NXZ		; NArchive::NTar::CItem::IsDir
PUBLIC	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z:PROC ; NWindows::NTime::UnixTime64ToFileTime
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
xdata$x	SEGMENT
__catchsym$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
__unwindtable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv258 = -126						; size = 1
tv257 = -125						; size = 1
tv314 = -124						; size = 4
tv256 = -120						; size = 8
tv255 = -112						; size = 8
tv254 = -101						; size = 1
tv82 = -100						; size = 4
tv253 = -96						; size = 4
tv252 = -92						; size = 4
tv251 = -88						; size = 4
tv250 = -84						; size = 4
$T72910 = -80						; size = 4
$T72909 = -76						; size = 4
$T72908 = -72						; size = 4
$T72907 = -68						; size = 4
_ft$71419 = -60						; size = 8
___result__$71406 = -48					; size = 4
_item$71399 = -44					; size = 4
_prop$71398 = -36					; size = 16
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NTar::CHandler::GetProperty
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 310
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 311
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 312
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv250[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 315
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv251[ebp], eax
	cmp	DWORD PTR tv251[ebp], 0
	je	SHORT $LN21@GetPropert@2
; Line 316
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR tv252[ebp], eax
	mov	ecx, DWORD PTR tv252[ebp]
	mov	DWORD PTR _item$71399[ebp], ecx
; Line 317
	jmp	SHORT $LN20@GetPropert@2
$LN21@GetPropert@2:
; Line 319
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jae	SHORT $LN19@GetPropert@2
; Line 320
	mov	DWORD PTR $T72907[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72907[ebp]
	jmp	$LN23@GetPropert@2
; Line 321
	jmp	SHORT $LN20@GetPropert@2
$LN19@GetPropert@2:
; Line 323
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z	; NArchive::NTar::CHandler::SkipTo
	mov	DWORD PTR tv253[ebp], eax
	mov	edx, DWORD PTR tv253[ebp]
	mov	DWORD PTR ___result__$71406[ebp], edx
	cmp	DWORD PTR ___result__$71406[ebp], 0
	je	SHORT $LN17@GetPropert@2
	mov	eax, DWORD PTR ___result__$71406[ebp]
	mov	DWORD PTR $T72908[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72908[ebp]
	jmp	$LN23@GetPropert@2
$LN17@GetPropert@2:
; Line 324
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _item$71399[ebp], ecx
$LN20@GetPropert@2:
; Line 328
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, 3
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 87			; 00000057H
	ja	$LN15@GetPropert@2
	mov	ecx, DWORD PTR tv82[ebp]
	movzx	edx, BYTE PTR $LN31@GetPropert@2[ecx]
	jmp	DWORD PTR $LN37@GetPropert@2[edx*4]
$LN14@GetPropert@2:
; Line 330
	push	1
	lea	eax, DWORD PTR _prop$71398[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$71399[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
	jmp	$LN15@GetPropert@2
$LN13@GetPropert@2:
; Line 331
	mov	ecx, DWORD PTR _item$71399[ebp]
	call	?IsDir@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsDir
	mov	BYTE PTR tv254[ebp], al
	movzx	edx, BYTE PTR tv254[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN15@GetPropert@2
$LN12@GetPropert@2:
; Line 332
	mov	ecx, DWORD PTR _item$71399[ebp]
	call	?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize
	mov	DWORD PTR tv255[ebp], eax
	mov	DWORD PTR tv255[ebp+4], edx
	mov	eax, DWORD PTR tv255[ebp+4]
	push	eax
	mov	ecx, DWORD PTR tv255[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN15@GetPropert@2
$LN11@GetPropert@2:
; Line 333
	mov	ecx, DWORD PTR _item$71399[ebp]
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	mov	DWORD PTR tv256[ebp], eax
	mov	DWORD PTR tv256[ebp+4], edx
	mov	edx, DWORD PTR tv256[ebp+4]
	push	edx
	mov	eax, DWORD PTR tv256[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN15@GetPropert@2
$LN10@GetPropert@2:
; Line 335
	mov	ecx, DWORD PTR _item$71399[ebp]
	mov	DWORD PTR tv314[ebp], ecx
	mov	edx, DWORD PTR tv314[ebp]
	mov	eax, DWORD PTR tv314[ebp]
	mov	ecx, DWORD PTR [edx+32]
	or	ecx, DWORD PTR [eax+36]
	je	SHORT $LN9@GetPropert@2
; Line 338
	lea	edx, DWORD PTR _ft$71419[ebp]
	push	edx
	mov	eax, DWORD PTR _item$71399[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	call	?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z ; NWindows::NTime::UnixTime64ToFileTime
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@GetPropert@2
; Line 339
	lea	ecx, DWORD PTR _ft$71419[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN9@GetPropert@2:
; Line 341
	jmp	$LN15@GetPropert@2
$LN7@GetPropert@2:
; Line 342
	mov	edx, DWORD PTR _item$71399[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN15@GetPropert@2
$LN6@GetPropert@2:
; Line 343
	push	0
	lea	ecx, DWORD PTR _prop$71398[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$71399[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
	jmp	$LN15@GetPropert@2
$LN5@GetPropert@2:
; Line 344
	push	0
	lea	eax, DWORD PTR _prop$71398[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$71399[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
	jmp	SHORT $LN15@GetPropert@2
$LN4@GetPropert@2:
; Line 345
	mov	edx, DWORD PTR _item$71399[ebp]
	movsx	eax, BYTE PTR [edx+104]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN3@GetPropert@2
	mov	ecx, DWORD PTR _item$71399[ebp]
	add	ecx, 60					; 0000003cH
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv257[ebp], al
	movzx	ecx, BYTE PTR tv257[ebp]
	test	ecx, ecx
	jne	SHORT $LN3@GetPropert@2
	push	0
	lea	edx, DWORD PTR _prop$71398[ebp]
	push	edx
	mov	eax, DWORD PTR _item$71399[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
$LN3@GetPropert@2:
	jmp	SHORT $LN15@GetPropert@2
$LN2@GetPropert@2:
; Line 346
	mov	ecx, DWORD PTR _item$71399[ebp]
	movsx	edx, BYTE PTR [ecx+104]
	cmp	edx, 49					; 00000031H
	jne	SHORT $LN15@GetPropert@2
	mov	ecx, DWORD PTR _item$71399[ebp]
	add	ecx, 60					; 0000003cH
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv258[ebp], al
	movzx	eax, BYTE PTR tv258[ebp]
	test	eax, eax
	jne	SHORT $LN15@GetPropert@2
	push	0
	lea	ecx, DWORD PTR _prop$71398[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$71399[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode
$LN15@GetPropert@2:
; Line 349
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 350
	mov	DWORD PTR $T72909[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71398[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72909[ebp]
	jmp	SHORT $LN23@GetPropert@2
__catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0:
; Line 351
	mov	DWORD PTR $T72910[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN29@GetPropert@2
	ret	0
	mov	eax, __tryend$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
	ret	0
__tryend$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN23@GetPropert@2
$LN29@GetPropert@2:
	mov	eax, DWORD PTR $T72910[ebp]
$LN23@GetPropert@2:
; Line 352
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN36@GetPropert@2:
	DD	2
	DD	$LN35@GetPropert@2
$LN35@GetPropert@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN32@GetPropert@2
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN33@GetPropert@2
$LN33@GetPropert@2:
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN32@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN37@GetPropert@2:
	DD	$LN14@GetPropert@2
	DD	$LN13@GetPropert@2
	DD	$LN12@GetPropert@2
	DD	$LN11@GetPropert@2
	DD	$LN10@GetPropert@2
	DD	$LN6@GetPropert@2
	DD	$LN5@GetPropert@2
	DD	$LN7@GetPropert@2
	DD	$LN4@GetPropert@2
	DD	$LN2@GetPropert@2
	DD	$LN15@GetPropert@2
$LN31@GetPropert@2:
	DB	0
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	2
	DB	3
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	4
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	5
	DB	6
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	7
	DB	8
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$71398[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NTar::CHandler::GetProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ		; NArchive::NTar::CItem::IsSymLink
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
tv73 = -12						; size = 8
_this$ = -4						; size = 4
?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItem::GetUnpackSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsSymLink
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetUnpackS
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Len@AString@@QBEIXZ			; AString::Len
	xor	ecx, ecx
	mov	DWORD PTR tv73[ebp], eax
	mov	DWORD PTR tv73[ebp+4], ecx
	jmp	SHORT $LN4@GetUnpackS
$LN3@GetUnpackS:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR tv73[ebp+4], ecx
$LN4@GetUnpackS:
	mov	eax, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR tv73[ebp+4]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItem::GetUnpackSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ PROC		; NArchive::NTar::CItem::IsSymLink, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	cmp	ecx, 50					; 00000032H
	jne	SHORT $LN3@IsSymLink
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR tv73[ebp]
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [eax+24]
	or	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN3@IsSymLink
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsSymLink
$LN3@IsSymLink:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsSymLink:
	mov	al, BYTE PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ ENDP		; NArchive::NTar::CItem::IsSymLink
_TEXT	ENDS
EXTRN	?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z:PROC ; NArchive::NItemName::HasTailSlash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?IsDir@CItem@NTar@NArchive@@QBE_NXZ PROC		; NArchive::NTar::CItem::IsDir, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 68			; 00000044H
	ja	SHORT $LN3@IsDir
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN7@IsDir[edx]
	jmp	DWORD PTR $LN8@IsDir[eax*4]
$LN2@IsDir:
; Line 65
	mov	al, 1
	jmp	SHORT $LN5@IsDir
$LN1@IsDir:
; Line 69
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z ; NArchive::NItemName::HasTailSlash
	jmp	SHORT $LN5@IsDir
$LN3@IsDir:
; Line 71
	xor	al, al
$LN5@IsDir:
; Line 72
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@IsDir:
	DD	$LN1@IsDir
	DD	$LN2@IsDir
	DD	$LN3@IsDir
$LN7@IsDir:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
?IsDir@CItem@NTar@NArchive@@QBE_NXZ ENDP		; NArchive::NTar::CItem::IsDir
_TEXT	ENDS
PUBLIC	?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream
PUBLIC	?GetRem@CLimitedSequentialOutStream@@QBE_KXZ	; CLimitedSequentialOutStream::GetRem
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ	; NArchive::NTar::CItemEx::GetDataPosition
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	?IsSparse@CItem@NTar@NArchive@@QBE_NXZ		; NArchive::NTar::CItem::IsSparse
PUBLIC	?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z	; CLimitedSequentialOutStream::Init
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CLimitedSequentialOutStream@@QAE@XZ		; CLimitedSequentialOutStream::CLimitedSequentialOutStream
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
__ehfuncinfo$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv566 = -500						; size = 4
tv565 = -496						; size = 8
tv564 = -488						; size = 4
tv563 = -484						; size = 4
tv562 = -480						; size = 4
tv561 = -476						; size = 4
tv426 = -472						; size = 4
tv560 = -468						; size = 4
tv559 = -464						; size = 8
tv558 = -456						; size = 4
tv557 = -452						; size = 8
tv404 = -444						; size = 4
tv556 = -440						; size = 4
tv555 = -436						; size = 4
tv554 = -432						; size = 4
tv553 = -426						; size = 1
tv552 = -425						; size = 1
tv551 = -424						; size = 4
tv550 = -417						; size = 1
tv549 = -416						; size = 4
tv336 = -412						; size = 8
tv548 = -404						; size = 4
tv547 = -400						; size = 4
tv546 = -393						; size = 1
tv545 = -392						; size = 4
tv544 = -388						; size = 4
tv543 = -381						; size = 1
tv542 = -380						; size = 8
tv541 = -372						; size = 8
tv540 = -364						; size = 4
tv539 = -360						; size = 4
tv538 = -356						; size = 4
tv537 = -352						; size = 4
tv225 = -348						; size = 4
tv536 = -344						; size = 4
tv200 = -340						; size = 4
tv199 = -336						; size = 4
tv535 = -332						; size = 4
tv183 = -328						; size = 4
tv182 = -324						; size = 4
tv533 = -320						; size = 4
tv161 = -316						; size = 4
tv160 = -312						; size = 4
tv531 = -308						; size = 4
tv529 = -304						; size = 4
tv528 = -300						; size = 8
tv527 = -292						; size = 4
tv139 = -288						; size = 4
tv526 = -284						; size = 4
tv525 = -280						; size = 4
tv524 = -276						; size = 4
tv523 = -272						; size = 4
tv522 = -268						; size = 4
$T72976 = -264						; size = 4
$T72975 = -260						; size = 4
$T72974 = -256						; size = 4
$T72973 = -252						; size = 4
$T72972 = -248						; size = 4
$T72971 = -244						; size = 4
$T72970 = -240						; size = 4
$T72967 = -236						; size = 4
$T72966 = -232						; size = 4
$T72965 = -228						; size = 4
$T72964 = -224						; size = 4
$T72963 = -220						; size = 4
$T72960 = -216						; size = 4
$T72957 = -212						; size = 4
$T72956 = -208						; size = 4
$T72953 = -204						; size = 4
$T72952 = -200						; size = 4
$T72949 = -196						; size = 4
$T72948 = -192						; size = 4
___result__$71536 = -188				; size = 4
___result__$71531 = -184				; size = 4
___result__$71528 = -180				; size = 4
___result__$71522 = -176				; size = 4
_inStream2$71515 = -168					; size = 4
_opRes$71513 = -160					; size = 4
___result__$71510 = -156				; size = 4
_skipMode$71507 = -149					; size = 1
___result__$71504 = -148				; size = 4
___result__$71501 = -144				; size = 4
_unpackSize$71499 = -140				; size = 8
___result__$71496 = -132				; size = 4
___result__$71492 = -128				; size = 4
_res$71489 = -124					; size = 4
_item$71487 = -120					; size = 4
_index$71486 = -116					; size = 4
_askMode$71485 = -112					; size = 4
_realOutStream$71484 = -104				; size = 4
___result__$71480 = -96					; size = 4
_outStream$71475 = -88					; size = 4
_outStreamSpec$71469 = -80				; size = 4
_inStream$71468 = -72					; size = 4
_streamSpec$71462 = -64					; size = 4
_progress$71461 = -56					; size = 4
_lps$71455 = -48					; size = 4
_totalPackSize$71454 = -44				; size = 8
_i$71450 = -36						; size = 4
_totalSize$71449 = -32					; size = 8
_allFilesMode$71443 = -22				; size = 1
_seqMode$71441 = -21					; size = 1
_stream$71440 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NTar::CHandler::Extract
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 356
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 357
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 358
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv522[ebp], eax
	mov	eax, DWORD PTR tv522[ebp]
	mov	DWORD PTR _stream$71440[ebp], eax
; Line 359
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv523[ebp], eax
	xor	ecx, ecx
	cmp	DWORD PTR tv523[ebp], 0
	sete	cl
	mov	BYTE PTR _seqMode$71441[ebp], cl
; Line 360
	movzx	edx, BYTE PTR _seqMode$71441[ebp]
	test	edx, edx
	jne	SHORT $LN34@Extract
; Line 361
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv524[ebp], eax
	mov	eax, DWORD PTR tv524[ebp]
	mov	DWORD PTR _stream$71440[ebp], eax
$LN34@Extract:
; Line 363
	xor	ecx, ecx
	cmp	DWORD PTR _numItems$[ebp], -1
	sete	cl
	mov	BYTE PTR _allFilesMode$71443[ebp], cl
; Line 364
	movzx	edx, BYTE PTR _allFilesMode$71443[ebp]
	test	edx, edx
	je	SHORT $LN33@Extract
; Line 365
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size
	mov	DWORD PTR tv525[ebp], eax
	mov	eax, DWORD PTR tv525[ebp]
	mov	DWORD PTR _numItems$[ebp], eax
$LN33@Extract:
; Line 366
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv526[ebp], eax
	cmp	DWORD PTR tv526[ebp], 0
	je	SHORT $LN32@Extract
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN32@Extract
; Line 367
	xor	eax, eax
	jmp	$LN36@Extract
$LN32@Extract:
; Line 368
	mov	DWORD PTR _totalSize$71449[ebp], 0
	mov	DWORD PTR _totalSize$71449[ebp+4], 0
; Line 370
	mov	DWORD PTR _i$71450[ebp], 0
	jmp	SHORT $LN31@Extract
$LN30@Extract:
	mov	ecx, DWORD PTR _i$71450[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71450[ebp], ecx
$LN31@Extract:
	mov	edx, DWORD PTR _i$71450[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN29@Extract
; Line 371
	movzx	eax, BYTE PTR _allFilesMode$71443[ebp]
	test	eax, eax
	je	SHORT $LN38@Extract
	mov	ecx, DWORD PTR _i$71450[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN39@Extract
$LN38@Extract:
	mov	edx, DWORD PTR _i$71450[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv139[ebp], ecx
$LN39@Extract:
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR tv527[ebp], eax
	mov	ecx, DWORD PTR tv527[ebp]
	call	?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize
	mov	DWORD PTR tv528[ebp], eax
	mov	DWORD PTR tv528[ebp+4], edx
	mov	eax, DWORD PTR _totalSize$71449[ebp]
	add	eax, DWORD PTR tv528[ebp]
	mov	ecx, DWORD PTR _totalSize$71449[ebp+4]
	adc	ecx, DWORD PTR tv528[ebp+4]
	mov	DWORD PTR _totalSize$71449[ebp], eax
	mov	DWORD PTR _totalSize$71449[ebp+4], ecx
	jmp	SHORT $LN30@Extract
$LN29@Extract:
; Line 372
	mov	esi, esp
	mov	edx, DWORD PTR _totalSize$71449[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalSize$71449[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 375
	mov	DWORD PTR _totalPackSize$71454[ebp], 0
	mov	DWORD PTR _totalPackSize$71454[ebp+4], 0
	mov	edx, DWORD PTR _totalPackSize$71454[ebp]
	mov	DWORD PTR _totalSize$71449[ebp], edx
	mov	eax, DWORD PTR _totalPackSize$71454[ebp+4]
	mov	DWORD PTR _totalSize$71449[ebp+4], eax
; Line 377
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv529[ebp], eax
	mov	ecx, DWORD PTR tv529[ebp]
	mov	DWORD PTR $T72949[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T72949[ebp], 0
	je	SHORT $LN40@Extract
	mov	ecx, DWORD PTR $T72949[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv531[ebp], eax
	mov	edx, DWORD PTR tv531[ebp]
	mov	DWORD PTR tv160[ebp], edx
	jmp	SHORT $LN41@Extract
$LN40@Extract:
	mov	DWORD PTR tv160[ebp], 0
$LN41@Extract:
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T72948[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR $T72948[ebp]
	mov	DWORD PTR _lps$71455[ebp], ecx
; Line 378
	mov	edx, DWORD PTR _lps$71455[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 379
	push	0
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$71455[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 381
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv161[ebp], eax
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T72953[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	cmp	DWORD PTR $T72953[ebp], 0
	je	SHORT $LN42@Extract
	mov	ecx, DWORD PTR $T72953[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv533[ebp], eax
	mov	edx, DWORD PTR tv533[ebp]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN43@Extract
$LN42@Extract:
	mov	DWORD PTR tv182[ebp], 0
$LN43@Extract:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR $T72952[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	ecx, DWORD PTR $T72952[ebp]
	mov	DWORD PTR _streamSpec$71462[ebp], ecx
; Line 382
	mov	edx, DWORD PTR _streamSpec$71462[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 383
	mov	eax, DWORD PTR _stream$71440[ebp]
	push	eax
	mov	ecx, DWORD PTR _streamSpec$71462[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 385
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR $T72957[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	cmp	DWORD PTR $T72957[ebp], 0
	je	SHORT $LN44@Extract
	mov	ecx, DWORD PTR $T72957[ebp]
	call	??0CLimitedSequentialOutStream@@QAE@XZ
	mov	DWORD PTR tv535[ebp], eax
	mov	edx, DWORD PTR tv535[ebp]
	mov	DWORD PTR tv199[ebp], edx
	jmp	SHORT $LN45@Extract
$LN44@Extract:
	mov	DWORD PTR tv199[ebp], 0
$LN45@Extract:
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR $T72956[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	ecx, DWORD PTR $T72956[ebp]
	mov	DWORD PTR _outStreamSpec$71469[ebp], ecx
; Line 386
	mov	edx, DWORD PTR _outStreamSpec$71469[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 388
	mov	DWORD PTR _i$71450[ebp], 0
	jmp	SHORT $LN28@Extract
$LN27@Extract:
	mov	eax, DWORD PTR _i$71450[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71450[ebp], eax
$LN28@Extract:
	mov	ecx, DWORD PTR _i$71450[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jb	SHORT $LN25@Extract
	movzx	edx, BYTE PTR _seqMode$71441[ebp]
	test	edx, edx
	je	$LN26@Extract
$LN25@Extract:
; Line 390
	mov	eax, DWORD PTR _lps$71455[ebp]
	mov	ecx, DWORD PTR _totalPackSize$71454[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _totalPackSize$71454[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 391
	mov	eax, DWORD PTR _lps$71455[ebp]
	mov	ecx, DWORD PTR _totalSize$71449[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _totalSize$71449[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 392
	mov	ecx, DWORD PTR _lps$71455[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv200[ebp], eax
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR ___result__$71480[ebp], eax
	cmp	DWORD PTR ___result__$71480[ebp], 0
	je	SHORT $LN24@Extract
	mov	ecx, DWORD PTR ___result__$71480[ebp]
	mov	DWORD PTR $T72960[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72960[ebp]
	jmp	$LN36@Extract
$LN24@Extract:
; Line 393
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv536[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 396
	xor	edx, edx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	dl
	mov	DWORD PTR _askMode$71485[ebp], edx
; Line 397
	movzx	eax, BYTE PTR _allFilesMode$71443[ebp]
	test	eax, eax
	je	SHORT $LN46@Extract
	mov	ecx, DWORD PTR _i$71450[ebp]
	mov	DWORD PTR tv225[ebp], ecx
	jmp	SHORT $LN47@Extract
$LN46@Extract:
	mov	edx, DWORD PTR _i$71450[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv225[ebp], ecx
$LN47@Extract:
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR _index$71486[ebp], edx
; Line 399
	movzx	eax, BYTE PTR _seqMode$71441[ebp]
	test	eax, eax
	je	$LN23@Extract
; Line 401
	mov	ecx, DWORD PTR _index$71486[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z	; NArchive::NTar::CHandler::SkipTo
	mov	DWORD PTR tv537[ebp], eax
	mov	edx, DWORD PTR tv537[ebp]
	mov	DWORD PTR _res$71489[ebp], edx
; Line 402
	cmp	DWORD PTR _res$71489[ebp], -2147024809	; 80070057H
	jne	SHORT $LN22@Extract
; Line 403
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN26@Extract
$LN22@Extract:
; Line 404
	mov	eax, DWORD PTR _res$71489[ebp]
	mov	DWORD PTR ___result__$71492[ebp], eax
	cmp	DWORD PTR ___result__$71492[ebp], 0
	je	SHORT $LN21@Extract
	mov	ecx, DWORD PTR ___result__$71492[ebp]
	mov	DWORD PTR $T72963[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72963[ebp]
	jmp	$LN36@Extract
$LN21@Extract:
; Line 405
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _item$71487[ebp], edx
; Line 407
	jmp	SHORT $LN20@Extract
$LN23@Extract:
; Line 408
	mov	eax, DWORD PTR _index$71486[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR tv538[ebp], eax
	mov	ecx, DWORD PTR tv538[ebp]
	mov	DWORD PTR _item$71487[ebp], ecx
$LN20@Extract:
; Line 410
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv539[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$71485[ebp]
	push	edx
	mov	eax, DWORD PTR tv539[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$71486[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv540[ebp], eax
	mov	eax, DWORD PTR tv540[ebp]
	mov	DWORD PTR ___result__$71496[ebp], eax
	cmp	DWORD PTR ___result__$71496[ebp], 0
	je	SHORT $LN19@Extract
	mov	ecx, DWORD PTR ___result__$71496[ebp]
	mov	DWORD PTR $T72964[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72964[ebp]
	jmp	$LN36@Extract
$LN19@Extract:
; Line 411
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize
	mov	DWORD PTR tv541[ebp], eax
	mov	DWORD PTR tv541[ebp+4], edx
	mov	edx, DWORD PTR tv541[ebp]
	mov	DWORD PTR _unpackSize$71499[ebp], edx
	mov	eax, DWORD PTR tv541[ebp+4]
	mov	DWORD PTR _unpackSize$71499[ebp+4], eax
; Line 412
	mov	ecx, DWORD PTR _totalSize$71449[ebp]
	add	ecx, DWORD PTR _unpackSize$71499[ebp]
	mov	edx, DWORD PTR _totalSize$71449[ebp+4]
	adc	edx, DWORD PTR _unpackSize$71499[ebp+4]
	mov	DWORD PTR _totalSize$71449[ebp], ecx
	mov	DWORD PTR _totalSize$71449[ebp+4], edx
; Line 413
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	mov	DWORD PTR tv542[ebp], eax
	mov	DWORD PTR tv542[ebp+4], edx
	mov	eax, DWORD PTR _totalPackSize$71454[ebp]
	add	eax, DWORD PTR tv542[ebp]
	mov	ecx, DWORD PTR _totalPackSize$71454[ebp+4]
	adc	ecx, DWORD PTR tv542[ebp+4]
	mov	DWORD PTR _totalPackSize$71454[ebp], eax
	mov	DWORD PTR _totalPackSize$71454[ebp+4], ecx
; Line 414
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?IsDir@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsDir
	mov	BYTE PTR tv543[ebp], al
	movzx	edx, BYTE PTR tv543[ebp]
	test	edx, edx
	je	$LN18@Extract
; Line 416
	mov	esi, esp
	mov	eax, DWORD PTR _askMode$71485[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv544[ebp], eax
	mov	edx, DWORD PTR tv544[ebp]
	mov	DWORD PTR ___result__$71501[ebp], edx
	cmp	DWORD PTR ___result__$71501[ebp], 0
	je	SHORT $LN17@Extract
	mov	eax, DWORD PTR ___result__$71501[ebp]
	mov	DWORD PTR $T72965[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72965[ebp]
	jmp	$LN36@Extract
$LN17@Extract:
; Line 417
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv545[ebp], eax
	mov	edx, DWORD PTR tv545[ebp]
	mov	DWORD PTR ___result__$71504[ebp], edx
	cmp	DWORD PTR ___result__$71504[ebp], 0
	je	SHORT $LN16@Extract
	mov	eax, DWORD PTR ___result__$71504[ebp]
	mov	DWORD PTR $T72966[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72966[ebp]
	jmp	$LN36@Extract
$LN16@Extract:
; Line 418
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN27@Extract
$LN18@Extract:
; Line 420
	mov	BYTE PTR _skipMode$71507[ebp], 0
; Line 421
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN15@Extract
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv546[ebp], al
	movzx	ecx, BYTE PTR tv546[ebp]
	test	ecx, ecx
	je	SHORT $LN15@Extract
; Line 423
	movzx	edx, BYTE PTR _seqMode$71441[ebp]
	test	edx, edx
	jne	SHORT $LN14@Extract
; Line 434
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN27@Extract
$LN14@Extract:
; Line 436
	mov	BYTE PTR _skipMode$71507[ebp], 1
; Line 437
	mov	DWORD PTR _askMode$71485[ebp], 2
$LN15@Extract:
; Line 439
	mov	esi, esp
	mov	eax, DWORD PTR _askMode$71485[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv547[ebp], eax
	mov	edx, DWORD PTR tv547[ebp]
	mov	DWORD PTR ___result__$71510[ebp], edx
	cmp	DWORD PTR ___result__$71510[ebp], 0
	je	SHORT $LN13@Extract
	mov	eax, DWORD PTR ___result__$71510[ebp]
	mov	DWORD PTR $T72967[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72967[ebp]
	jmp	$LN36@Extract
$LN13@Extract:
; Line 441
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv548[ebp], eax
	mov	ecx, DWORD PTR tv548[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outStreamSpec$71469[ebp]
	call	?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream
; Line 442
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 443
	movzx	edx, BYTE PTR _skipMode$71507[ebp]
	test	edx, edx
	je	SHORT $LN48@Extract
	mov	DWORD PTR tv336[ebp], 0
	mov	DWORD PTR tv336[ebp+4], 0
	jmp	SHORT $LN49@Extract
$LN48@Extract:
	mov	eax, DWORD PTR _unpackSize$71499[ebp]
	mov	DWORD PTR tv336[ebp], eax
	mov	ecx, DWORD PTR _unpackSize$71499[ebp+4]
	mov	DWORD PTR tv336[ebp+4], ecx
$LN49@Extract:
	push	1
	mov	edx, DWORD PTR tv336[ebp+4]
	push	edx
	mov	eax, DWORD PTR tv336[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$71469[ebp]
	call	?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ; CLimitedSequentialOutStream::Init
; Line 445
	mov	DWORD PTR _opRes$71513[ebp], 0
; Line 446
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR tv549[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 447
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?IsSparse@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsSparse
	mov	BYTE PTR tv550[ebp], al
	movzx	ecx, BYTE PTR tv550[ebp]
	test	ecx, ecx
	jne	SHORT $LN12@Extract
; Line 448
	lea	edx, DWORD PTR _inStream$71468[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 449
	jmp	$LN11@Extract
$LN12@Extract:
; Line 451
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	DWORD PTR tv551[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR tv551[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$71486[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 452
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	mov	BYTE PTR tv552[ebp], al
	movzx	eax, BYTE PTR tv552[ebp]
	test	eax, eax
	je	SHORT $LN11@Extract
; Line 453
	mov	DWORD PTR $T72970[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72970[ebp]
	jmp	$LN36@Extract
$LN11@Extract:
; Line 457
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsSymLink
	mov	BYTE PTR tv553[ebp], al
	movzx	ecx, BYTE PTR tv553[ebp]
	test	ecx, ecx
	je	$LN9@Extract
; Line 459
	mov	ecx, DWORD PTR _item$71487[ebp]
	add	ecx, 60					; 0000003cH
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR tv554[ebp], eax
	mov	ecx, DWORD PTR _item$71487[ebp]
	add	ecx, 60					; 0000003cH
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv555[ebp], eax
	mov	edx, DWORD PTR tv554[ebp]
	push	edx
	mov	eax, DWORD PTR tv555[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$71469[ebp]
	push	ecx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$71522[ebp], eax
	cmp	DWORD PTR ___result__$71522[ebp], 0
	je	SHORT $LN8@Extract
	mov	edx, DWORD PTR ___result__$71522[ebp]
	mov	DWORD PTR $T72971[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72971[ebp]
	jmp	$LN36@Extract
$LN8@Extract:
; Line 461
	jmp	$LN7@Extract
$LN9@Extract:
; Line 463
	movzx	eax, BYTE PTR _seqMode$71441[ebp]
	test	eax, eax
	jne	$LN6@Extract
; Line 465
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv556[ebp], eax
	mov	ecx, DWORD PTR tv556[ebp]
	mov	DWORD PTR tv404[ebp], ecx
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition
	mov	DWORD PTR tv557[ebp], eax
	mov	DWORD PTR tv557[ebp+4], edx
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR tv557[ebp+4]
	push	edx
	mov	eax, DWORD PTR tv557[ebp]
	push	eax
	mov	ecx, DWORD PTR tv404[ebp]
	push	ecx
	mov	edx, DWORD PTR tv404[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv558[ebp], eax
	mov	edx, DWORD PTR tv558[ebp]
	mov	DWORD PTR ___result__$71528[ebp], edx
	cmp	DWORD PTR ___result__$71528[ebp], 0
	je	SHORT $LN6@Extract
	mov	eax, DWORD PTR ___result__$71528[ebp]
	mov	DWORD PTR $T72972[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72972[ebp]
	jmp	$LN36@Extract
$LN6@Extract:
; Line 467
	mov	ecx, DWORD PTR _item$71487[ebp]
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	mov	DWORD PTR tv559[ebp], eax
	mov	DWORD PTR tv559[ebp+4], edx
	mov	ecx, DWORD PTR tv559[ebp+4]
	push	ecx
	mov	edx, DWORD PTR tv559[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$71462[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 468
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv560[ebp], eax
	mov	eax, DWORD PTR tv560[ebp]
	mov	DWORD PTR tv426[ebp], eax
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv561[ebp], eax
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv562[ebp], eax
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv563[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv561[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR tv562[ebp]
	push	edx
	mov	eax, DWORD PTR tv563[ebp]
	push	eax
	mov	ecx, DWORD PTR tv426[ebp]
	push	ecx
	mov	edx, DWORD PTR tv426[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv564[ebp], eax
	mov	edx, DWORD PTR tv564[ebp]
	mov	DWORD PTR ___result__$71531[ebp], edx
	cmp	DWORD PTR ___result__$71531[ebp], 0
	je	SHORT $LN7@Extract
	mov	eax, DWORD PTR ___result__$71531[ebp]
	mov	DWORD PTR $T72973[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72973[ebp]
	jmp	$LN36@Extract
$LN7@Extract:
; Line 470
	mov	ecx, DWORD PTR _outStreamSpec$71469[ebp]
	call	?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ; CLimitedSequentialOutStream::GetRem
	mov	DWORD PTR tv565[ebp], eax
	mov	DWORD PTR tv565[ebp+4], edx
	mov	ecx, DWORD PTR tv565[ebp]
	or	ecx, DWORD PTR tv565[ebp+4]
	je	SHORT $LN3@Extract
; Line 471
	mov	DWORD PTR _opRes$71513[ebp], 2
$LN3@Extract:
; Line 473
	movzx	edx, BYTE PTR _seqMode$71441[ebp]
	test	edx, edx
	je	SHORT $LN2@Extract
; Line 475
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 476
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx
$LN2@Extract:
; Line 478
	mov	ecx, DWORD PTR _outStreamSpec$71469[ebp]
	call	?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream
; Line 479
	mov	esi, esp
	mov	ecx, DWORD PTR _opRes$71513[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv566[ebp], eax
	mov	eax, DWORD PTR tv566[ebp]
	mov	DWORD PTR ___result__$71536[ebp], eax
	cmp	DWORD PTR ___result__$71536[ebp], 0
	je	SHORT $LN1@Extract
	mov	ecx, DWORD PTR ___result__$71536[ebp]
	mov	DWORD PTR $T72974[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72974[ebp]
	jmp	$LN36@Extract
$LN1@Extract:
; Line 480
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN27@Extract
$LN26@Extract:
; Line 481
	mov	DWORD PTR $T72975[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T72975[ebp]
	jmp	SHORT $LN36@Extract
__catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 482
	mov	DWORD PTR $T72976[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN36@Extract
$LN61@Extract:
	mov	eax, DWORD PTR $T72976[ebp]
$LN36@Extract:
; Line 483
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN70@Extract:
	DD	5
	DD	$LN69@Extract
$LN69@Extract:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN63@Extract
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN64@Extract
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN65@Extract
	DD	-104					; ffffff98H
	DD	4
	DD	$LN66@Extract
	DD	-168					; ffffff58H
	DD	4
	DD	$LN67@Extract
$LN67@Extract:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN66@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN65@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN64@Extract:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN63@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	mov	eax, DWORD PTR $T72949[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	lea	ecx, DWORD PTR _progress$71461[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	mov	eax, DWORD PTR $T72953[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	lea	ecx, DWORD PTR _inStream$71468[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	mov	eax, DWORD PTR $T72957[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7:
	lea	ecx, DWORD PTR _outStream$71475[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8:
	lea	ecx, DWORD PTR _realOutStream$71484[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9:
	lea	ecx, DWORD PTR _inStream2$71515[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-504]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NTar::CHandler::Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z PROC ; CLimitedSequentialOutStream::SetStream, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ENDP ; CLimitedSequentialOutStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ PROC	; CLimitedSequentialOutStream::ReleaseStream, COMDAT
; _this$ = ecx
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ENDP	; CLimitedSequentialOutStream::ReleaseStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 8
_overflowIsAllowed$ = 16				; size = 1
?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z PROC	; CLimitedSequentialOutStream::Init, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _overflowIsAllowed$[ebp]
	mov	BYTE PTR [ecx+25], dl
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ENDP	; CLimitedSequentialOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRem@CLimitedSequentialOutStream@@QBE_KXZ PROC	; CLimitedSequentialOutStream::GetRem, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ENDP	; CLimitedSequentialOutStream::GetRem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSparse@CItem@NTar@NArchive@@QBE_NXZ PROC		; NArchive::NTar::CItem::IsSparse, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	xor	eax, eax
	cmp	ecx, 83					; 00000053H
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSparse@CItem@NTar@NArchive@@QBE_NXZ ENDP		; NArchive::NTar::CItem::IsSparse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItemEx::GetDataPosition, COMDAT
; _this$ = ecx
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+128]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+120]
	adc	edx, DWORD PTR [ecx+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItemEx::GetDataPosition
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T73028 = -8						; size = 4
$T73027 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73028[ebp], edx
	mov	eax, DWORD PTR $T73028[ebp]
	mov	DWORD PTR $T73027[ebp], eax
	cmp	DWORD PTR $T73027[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T73027[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialOutStream@@6B@		; CLimitedSequentialOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CLimitedSequentialOutStream@@6B@		; CLimitedSequentialOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialOutStream@@@8		; CLimitedSequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialOutStream@@8		; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialOutStream@@8		; CLimitedSequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialOutStream@@8	; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialOutStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialOutStream@@UAGKXZ	; CLimitedSequentialOutStream::AddRef
PUBLIC	?Release@CLimitedSequentialOutStream@@UAGKXZ	; CLimitedSequentialOutStream::Release
EXTRN	?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z:PROC ; CLimitedSequentialOutStream::Write
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 DD FLAT:??_R0?AVCLimitedSequentialOutStream@@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialOutStream@@8 DD 00H		; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialOutStream@@6B@ DD 00H		; CLimitedSequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialOutStream@@@8
	DD	FLAT:??_R3CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialOutStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialOutStream@@6B@ DD FLAT:??_R4CLimitedSequentialOutStream@@6B@ ; CLimitedSequentialOutStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialOutStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialOutStream@@UAGKXZ
	DD	FLAT:?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialOutStream@@QAE@XZ PROC		; CLimitedSequentialOutStream::CLimitedSequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialOutStream@@QAE@XZ ENDP		; CLimitedSequentialOutStream::CLimitedSequentialOutStream
_TEXT	ENDS
EXTRN	_IID_ISequentialOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialOutStream::QueryInterface, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@4
$LN3@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialOutStream@@UAGKXZ PROC	; CLimitedSequentialOutStream::AddRef, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialOutStream@@UAGKXZ ENDP	; CLimitedSequentialOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialOutStream@@QAEPAXI@Z	; CLimitedSequentialOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialOutStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T73046 = -8						; size = 4
$T73045 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialOutStream@@UAGKXZ PROC	; CLimitedSequentialOutStream::Release, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73046[ebp], edx
	mov	eax, DWORD PTR $T73046[ebp]
	mov	DWORD PTR $T73045[ebp], eax
	cmp	DWORD PTR $T73045[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T73045[ebp]
	call	??_GCLimitedSequentialOutStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialOutStream@@UAGKXZ ENDP	; CLimitedSequentialOutStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialOutStream@@QAE@XZ		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialOutStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialOutStream@@QAEPAXI@Z PROC		; CLimitedSequentialOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialOutStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialOutStream@@QAEPAXI@Z ENDP		; CLimitedSequentialOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialOutStream@@QAE@XZ PROC		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialOutStream@@QAE@XZ ENDP		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
PUBLIC	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
PUBLIC	?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::IsEmpty
PUBLIC	?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z ; NArchive::NTar::CSparseStream::Read
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv471 = -148						; size = 8
tv440 = -140						; size = 4
tv439 = -136						; size = 4
tv209 = -132						; size = 4
tv187 = -128						; size = 4
tv383 = -124						; size = 4
tv365 = -120						; size = 8
tv349 = -112						; size = 4
tv339 = -108						; size = 4
tv338 = -104						; size = 4
tv313 = -100						; size = 4
tv312 = -96						; size = 4
tv293 = -92						; size = 8
tv272 = -84						; size = 4
tv271 = -80						; size = 4
_rem$71755 = -76					; size = 8
_next$71751 = -68					; size = 8
___result__$71748 = -60					; size = 4
_phyPos$71745 = -56					; size = 8
_rem$71742 = -48					; size = 8
_relat$71740 = -40					; size = 8
_sb$71739 = -32						; size = 4
_mid$71735 = -28					; size = 4
_right$71731 = -24					; size = 4
_left$71730 = -20					; size = 4
_res$ = -16						; size = 4
_rem$71723 = -12					; size = 8
_item$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z PROC	; NArchive::NTar::CSparseStream::Read
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarhandler.cpp
; Line 513
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 514
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN22@Read
; Line 515
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN22@Read:
; Line 516
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN21@Read
; Line 517
	xor	eax, eax
	jmp	$LN23@Read
$LN21@Read:
; Line 518
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR _item$[ebp], eax
; Line 519
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv271[ebp], ecx
	mov	DWORD PTR tv272[ebp], edx
	mov	eax, DWORD PTR tv271[ebp]
	mov	ecx, DWORD PTR tv272[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+28]
	jb	SHORT $LN20@Read
	ja	SHORT $LN25@Read
	mov	eax, DWORD PTR tv271[ebp]
	mov	ecx, DWORD PTR tv272[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+24]
	jb	SHORT $LN20@Read
$LN25@Read:
; Line 520
	xor	eax, eax
	jmp	$LN23@Read
$LN20@Read:
; Line 522
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+28]
	sbb	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _rem$71723[ebp], edx
	mov	DWORD PTR _rem$71723[ebp+4], eax
; Line 523
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv293[ebp], ecx
	mov	DWORD PTR tv293[ebp+4], edx
	mov	eax, DWORD PTR tv293[ebp+4]
	cmp	eax, DWORD PTR _rem$71723[ebp+4]
	jb	SHORT $LN19@Read
	ja	SHORT $LN26@Read
	mov	ecx, DWORD PTR tv293[ebp]
	cmp	ecx, DWORD PTR _rem$71723[ebp]
	jbe	SHORT $LN19@Read
$LN26@Read:
; Line 524
	mov	edx, DWORD PTR _rem$71723[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN19@Read:
; Line 527
	mov	DWORD PTR _res$[ebp], 0
; Line 529
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@Read
; Line 530
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 531
	jmp	$LN17@Read
$LN18@Read:
; Line 533
	mov	DWORD PTR _left$71730[ebp], 0
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	mov	DWORD PTR _right$71731[ebp], eax
$LN16@Read:
; Line 536
	mov	eax, DWORD PTR _left$71730[ebp]
	add	eax, DWORD PTR _right$71731[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$71735[ebp], eax
; Line 537
	mov	ecx, DWORD PTR _mid$71735[ebp]
	cmp	ecx, DWORD PTR _left$71730[ebp]
	jne	SHORT $LN14@Read
; Line 538
	jmp	SHORT $LN15@Read
$LN14@Read:
; Line 539
	mov	edx, DWORD PTR _mid$71735[ebp]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv312[ebp], ecx
	mov	DWORD PTR tv313[ebp], eax
	mov	edx, DWORD PTR tv312[ebp]
	mov	eax, DWORD PTR tv313[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN13@Read
	jb	SHORT $LN27@Read
	mov	edx, DWORD PTR tv312[ebp]
	mov	eax, DWORD PTR tv313[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN13@Read
$LN27@Read:
; Line 540
	mov	edx, DWORD PTR _mid$71735[ebp]
	mov	DWORD PTR _right$71731[ebp], edx
; Line 541
	jmp	SHORT $LN12@Read
$LN13@Read:
; Line 542
	mov	eax, DWORD PTR _mid$71735[ebp]
	mov	DWORD PTR _left$71730[ebp], eax
$LN12@Read:
; Line 543
	jmp	SHORT $LN16@Read
$LN15@Read:
; Line 545
	mov	ecx, DWORD PTR _left$71730[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
	mov	DWORD PTR _sb$71739[ebp], eax
; Line 546
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _sb$71739[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+20]
	sbb	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _relat$71740[ebp], ecx
	mov	DWORD PTR _relat$71740[ebp+4], edx
; Line 548
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sb$71739[ebp]
	mov	DWORD PTR tv338[ebp], eax
	mov	DWORD PTR tv339[ebp], ecx
	mov	edx, DWORD PTR tv338[ebp]
	mov	eax, DWORD PTR tv339[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+4]
	jb	$LN11@Read
	ja	SHORT $LN28@Read
	mov	edx, DWORD PTR tv338[ebp]
	mov	eax, DWORD PTR tv339[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax]
	jb	$LN11@Read
$LN28@Read:
	mov	edx, DWORD PTR _sb$71739[ebp]
	mov	DWORD PTR tv349[ebp], edx
	mov	eax, DWORD PTR tv349[ebp]
	mov	ecx, DWORD PTR _relat$71740[ebp+4]
	cmp	ecx, DWORD PTR [eax+12]
	ja	$LN11@Read
	jb	SHORT $LN29@Read
	mov	edx, DWORD PTR tv349[ebp]
	mov	eax, DWORD PTR _relat$71740[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	$LN11@Read
$LN29@Read:
; Line 550
	mov	ecx, DWORD PTR _sb$71739[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _relat$71740[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, DWORD PTR _relat$71740[ebp+4]
	mov	DWORD PTR _rem$71742[ebp], edx
	mov	DWORD PTR _rem$71742[ebp+4], eax
; Line 551
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv365[ebp], ecx
	mov	DWORD PTR tv365[ebp+4], edx
	mov	eax, DWORD PTR tv365[ebp+4]
	cmp	eax, DWORD PTR _rem$71742[ebp+4]
	jb	SHORT $LN10@Read
	ja	SHORT $LN30@Read
	mov	ecx, DWORD PTR tv365[ebp]
	cmp	ecx, DWORD PTR _rem$71742[ebp]
	jbe	SHORT $LN10@Read
$LN30@Read:
; Line 552
	mov	edx, DWORD PTR _rem$71742[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN10@Read:
; Line 553
	mov	eax, DWORD PTR _left$71730[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _relat$71740[ebp]
	mov	edx, DWORD PTR [eax+4]
	adc	edx, DWORD PTR _relat$71740[ebp+4]
	mov	DWORD PTR _phyPos$71745[ebp], ecx
	mov	DWORD PTR _phyPos$71745[ebp+4], edx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN8@Read
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv383[ebp], edx
	mov	eax, DWORD PTR tv383[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _phyPos$71745[ebp]
	jne	SHORT $LN8@Read
	mov	edx, DWORD PTR tv383[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _phyPos$71745[ebp+4]
	je	SHORT $LN9@Read
$LN8@Read:
; Line 556
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	add	ecx, 36					; 00000024H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv187[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _item$[ebp]
	call	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition
	add	eax, DWORD PTR _phyPos$71745[ebp]
	adc	edx, DWORD PTR _phyPos$71745[ebp+4]
	push	edx
	push	eax
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	mov	eax, DWORD PTR tv187[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71748[ebp], eax
	cmp	DWORD PTR ___result__$71748[ebp], 0
	je	SHORT $LN7@Read
	mov	eax, DWORD PTR ___result__$71748[ebp]
	jmp	$LN23@Read
$LN7@Read:
; Line 557
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 558
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _phyPos$71745[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _phyPos$71745[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN9@Read:
; Line 560
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	add	ecx, 36					; 00000024H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv209[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv209[ebp]
	push	edx
	mov	eax, DWORD PTR tv209[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 561
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 563
	jmp	$LN17@Read
$LN11@Read:
; Line 565
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _next$71751[ebp], ecx
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _next$71751[ebp+4], edx
; Line 566
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sb$71739[ebp]
	mov	DWORD PTR tv439[ebp], eax
	mov	DWORD PTR tv440[ebp], ecx
	mov	edx, DWORD PTR tv439[ebp]
	mov	eax, DWORD PTR tv440[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN5@Read
	jb	SHORT $LN32@Read
	mov	edx, DWORD PTR tv439[ebp]
	mov	eax, DWORD PTR tv440[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN5@Read
$LN32@Read:
; Line 567
	mov	edx, DWORD PTR _sb$71739[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$71751[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _next$71751[ebp+4], ecx
	jmp	SHORT $LN4@Read
$LN5@Read:
; Line 568
	mov	esi, DWORD PTR _left$71730[ebp]
	add	esi, 1
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	cmp	esi, eax
	jae	SHORT $LN4@Read
; Line 569
	mov	edx, DWORD PTR _left$71730[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$71751[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$71751[ebp+4], edx
$LN4@Read:
; Line 570
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$71751[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _next$71751[ebp+4]
	sbb	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _rem$71755[ebp], ecx
	mov	DWORD PTR _rem$71755[ebp+4], edx
; Line 571
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv471[ebp], eax
	mov	DWORD PTR tv471[ebp+4], ecx
	mov	edx, DWORD PTR tv471[ebp+4]
	cmp	edx, DWORD PTR _rem$71755[ebp+4]
	jb	SHORT $LN2@Read
	ja	SHORT $LN33@Read
	mov	eax, DWORD PTR tv471[ebp]
	cmp	eax, DWORD PTR _rem$71755[ebp]
	jbe	SHORT $LN2@Read
$LN33@Read:
; Line 572
	mov	ecx, DWORD PTR _rem$71755[ebp]
	mov	DWORD PTR _size$[ebp], ecx
$LN2@Read:
; Line 573
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN17@Read:
; Line 577
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 578
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 579
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read:
; Line 580
	mov	eax, DWORD PTR _res$[ebp]
$LN23@Read:
; Line 581
	pop	edi
	pop	esi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z ENDP	; NArchive::NTar::CSparseStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z ; NArchive::NTar::CSparseStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z PROC	; NArchive::NTar::CSparseStream::Seek
; Line 584
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 585
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek
	jmp	SHORT $LN3@Seek
$LN6@Seek:
; Line 587
	jmp	SHORT $LN7@Seek
$LN5@Seek:
; Line 588
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek
$LN4@Seek:
; Line 589
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _offset$[ebp+4]
	adc	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _offset$[ebp], ecx
	mov	DWORD PTR _offset$[ebp+4], edx
	jmp	SHORT $LN7@Seek
$LN3@Seek:
; Line 590
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek
$LN7@Seek:
; Line 592
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek
	jl	SHORT $LN11@Seek
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek
$LN11@Seek:
; Line 593
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek
$LN2@Seek:
; Line 594
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 595
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek
; Line 596
	mov	eax, DWORD PTR _newPosition$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+4], ecx
$LN1@Seek:
; Line 597
	xor	eax, eax
$LN9@Seek:
; Line 598
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z ENDP	; NArchive::NTar::CSparseStream::Seek
_TEXT	ENDS
PUBLIC	?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ ; CMyComPtr<IInStream>::Detach
PUBLIC	?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z	; CRecordVector<unsigned __int64>::AddInReserved
PUBLIC	?Reserve@?$CRecordVector@_K@@QAEXI@Z		; CRecordVector<unsigned __int64>::Reserve
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
PUBLIC	?Init@CSparseStream@NTar@NArchive@@QAEXXZ	; NArchive::NTar::CSparseStream::Init
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0CSparseStream@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CSparseStream::CSparseStream
EXTRN	?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z:PROC ; CreateLimitedInStream
EXTRN	?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z:PROC ; Create_BufInStream_WithReference
xdata$x	SEGMENT
__catchsym$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0
__tryblocktable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4
__unwindtable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv246 = -132						; size = 4
tv245 = -128						; size = 4
tv244 = -124						; size = 8
tv243 = -116						; size = 4
tv242 = -112						; size = 4
tv241 = -105						; size = 1
tv240 = -104						; size = 4
tv239 = -100						; size = 4
tv238 = -96						; size = 4
tv85 = -92						; size = 4
tv84 = -88						; size = 4
tv237 = -84						; size = 4
tv235 = -80						; size = 4
tv234 = -73						; size = 1
tv233 = -72						; size = 4
$T73075 = -68						; size = 4
$T73074 = -64						; size = 4
$T73071 = -60						; size = 4
$T73070 = -56						; size = 4
_sb$71801 = -52						; size = 4
_i$71797 = -48						; size = 4
_offs$71796 = -44					; size = 8
_streamTemp$71794 = -32					; size = 4
_streamSpec$71788 = -24					; size = 4
_item$71786 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_stream$ = 16						; size = 4
?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z PROC ; NArchive::NTar::CHandler::GetStream
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 602
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 604
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR tv233[ebp], eax
	mov	ecx, DWORD PTR tv233[ebp]
	mov	DWORD PTR _item$71786[ebp], ecx
; Line 606
	mov	ecx, DWORD PTR _item$71786[ebp]
	call	?IsSparse@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsSparse
	mov	BYTE PTR tv234[ebp], al
	movzx	edx, BYTE PTR tv234[ebp]
	test	edx, edx
	je	$LN5@GetStream
; Line 608
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv235[ebp], eax
	mov	eax, DWORD PTR tv235[ebp]
	mov	DWORD PTR $T73071[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T73071[ebp], 0
	je	SHORT $LN9@GetStream
	mov	ecx, DWORD PTR $T73071[ebp]
	call	??0CSparseStream@NTar@NArchive@@QAE@XZ
	mov	DWORD PTR tv237[ebp], eax
	mov	ecx, DWORD PTR tv237[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN10@GetStream
$LN9@GetStream:
	mov	DWORD PTR tv84[ebp], 0
$LN10@GetStream:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T73070[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR $T73070[ebp]
	mov	DWORD PTR _streamSpec$71788[ebp], eax
; Line 609
	mov	ecx, DWORD PTR _streamSpec$71788[ebp]
	push	ecx
	lea	ecx, DWORD PTR _streamTemp$71794[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 610
	mov	ecx, DWORD PTR _streamSpec$71788[ebp]
	call	?Init@CSparseStream@NTar@NArchive@@QAEXXZ ; NArchive::NTar::CSparseStream::Init
; Line 611
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 8
	mov	eax, DWORD PTR _streamSpec$71788[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 612
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$71788[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 613
	mov	edx, DWORD PTR _streamSpec$71788[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 614
	mov	ecx, DWORD PTR _item$71786[ebp]
	add	ecx, 108				; 0000006cH
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$71788[ebp]
	add	ecx, 40					; 00000028H
	call	?Reserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::Reserve
; Line 615
	mov	DWORD PTR _offs$71796[ebp], 0
	mov	DWORD PTR _offs$71796[ebp+4], 0
; Line 616
	mov	DWORD PTR _i$71797[ebp], 0
	jmp	SHORT $LN4@GetStream
$LN3@GetStream:
	mov	edx, DWORD PTR _i$71797[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71797[ebp], edx
$LN4@GetStream:
	mov	ecx, DWORD PTR _item$71786[ebp]
	add	ecx, 108				; 0000006cH
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	mov	DWORD PTR tv238[ebp], eax
	mov	eax, DWORD PTR _i$71797[ebp]
	cmp	eax, DWORD PTR tv238[ebp]
	jae	SHORT $LN2@GetStream
; Line 618
	mov	ecx, DWORD PTR _i$71797[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$71786[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
	mov	DWORD PTR tv239[ebp], eax
	mov	edx, DWORD PTR tv239[ebp]
	mov	DWORD PTR _sb$71801[ebp], edx
; Line 619
	mov	eax, DWORD PTR _offs$71796[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _offs$71796[ebp]
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$71788[ebp]
	add	ecx, 40					; 00000028H
	call	?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z ; CRecordVector<unsigned __int64>::AddInReserved
; Line 620
	mov	edx, DWORD PTR _sb$71801[ebp]
	mov	eax, DWORD PTR _offs$71796[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _offs$71796[ebp+4]
	adc	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _offs$71796[ebp], eax
	mov	DWORD PTR _offs$71796[ebp+4], ecx
; Line 621
	jmp	SHORT $LN3@GetStream
$LN2@GetStream:
; Line 622
	lea	ecx, DWORD PTR _streamTemp$71794[ebp]
	call	?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ ; CMyComPtr<IInStream>::Detach
	mov	DWORD PTR tv240[ebp], eax
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR tv240[ebp]
	mov	DWORD PTR [edx], eax
; Line 623
	mov	DWORD PTR $T73074[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _streamTemp$71794[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T73074[ebp]
	jmp	$LN7@GetStream
$LN5@GetStream:
; Line 626
	mov	ecx, DWORD PTR _item$71786[ebp]
	call	?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsSymLink
	mov	BYTE PTR tv241[ebp], al
	movzx	ecx, BYTE PTR tv241[ebp]
	test	ecx, ecx
	je	SHORT $LN1@GetStream
; Line 628
	mov	ecx, DWORD PTR _item$71786[ebp]
	add	ecx, 60					; 0000003cH
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR tv242[ebp], eax
	mov	ecx, DWORD PTR _item$71786[ebp]
	add	ecx, 60					; 0000003cH
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv243[ebp], eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR tv242[ebp]
	push	ecx
	mov	edx, DWORD PTR tv243[ebp]
	push	edx
	call	?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z ; Create_BufInStream_WithReference
; Line 629
	xor	eax, eax
	jmp	SHORT $LN7@GetStream
$LN1@GetStream:
; Line 632
	mov	ecx, DWORD PTR _item$71786[ebp]
	call	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition
	mov	DWORD PTR tv244[ebp], eax
	mov	DWORD PTR tv244[ebp+4], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv245[ebp], eax
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$71786[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	push	eax
	mov	ecx, DWORD PTR tv244[ebp+4]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	push	edx
	mov	eax, DWORD PTR tv245[ebp]
	push	eax
	call	?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ; CreateLimitedInStream
	mov	DWORD PTR tv246[ebp], eax
	mov	eax, DWORD PTR tv246[ebp]
	jmp	SHORT $LN7@GetStream
__catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0:
; Line 634
	mov	DWORD PTR $T73075[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN16@GetStream
	ret	0
	mov	eax, __tryend$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1
	ret	0
__tryend$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN7@GetStream
$LN16@GetStream:
	mov	eax, DWORD PTR $T73075[ebp]
$LN7@GetStream:
; Line 635
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@GetStream
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN21@GetStream:
	DD	1
	DD	$LN20@GetStream
$LN20@GetStream:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN18@GetStream
$LN18@GetStream:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2:
	mov	eax, DWORD PTR $T73071[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3:
	lea	ecx, DWORD PTR _streamTemp$71794[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ENDP ; NArchive::NTar::CHandler::GetStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CSparseStream@NTar@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CSparseStream@NTar@NArchive@@QAEXXZ PROC		; NArchive::NTar::CSparseStream::Init, COMDAT
; _this$ = ecx
; Line 504
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 505
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 506
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
; Line 507
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 1
; Line 508
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CSparseStream@NTar@NArchive@@QAEXXZ ENDP		; NArchive::NTar::CSparseStream::Init
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??_7CSparseStream@NTar@NArchive@@6B@		; NArchive::NTar::CSparseStream::`vftable'
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CSparseStream@NTar@NArchive@@6B@		; NArchive::NTar::CSparseStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSparseStream@NTar@NArchive@@@8		; NArchive::NTar::CSparseStream `RTTI Type Descriptor'
PUBLIC	??_R3CSparseStream@NTar@NArchive@@8		; NArchive::NTar::CSparseStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSparseStream@NTar@NArchive@@8		; NArchive::NTar::CSparseStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8	; NArchive::NTar::CSparseStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CSparseStream::QueryInterface
PUBLIC	?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CSparseStream::AddRef
PUBLIC	?Release@CSparseStream@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CSparseStream::Release
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8 DD FLAT:??_R0?AVCSparseStream@NTar@NArchive@@@8 ; NArchive::NTar::CSparseStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSparseStream@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CSparseStream@NTar@NArchive@@8
rdata$r	SEGMENT
??_R2CSparseStream@NTar@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8 ; NArchive::NTar::CSparseStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSparseStream@NTar@NArchive@@8
rdata$r	SEGMENT
??_R3CSparseStream@NTar@NArchive@@8 DD 00H		; NArchive::NTar::CSparseStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CSparseStream@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSparseStream@NTar@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCSparseStream@NTar@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NTar::CSparseStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSparseStream@NTar@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSparseStream@NTar@NArchive@@6B@
rdata$r	SEGMENT
??_R4CSparseStream@NTar@NArchive@@6B@ DD 00H		; NArchive::NTar::CSparseStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSparseStream@NTar@NArchive@@@8
	DD	FLAT:??_R3CSparseStream@NTar@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CSparseStream@NTar@NArchive@@6B@
CONST	SEGMENT
??_7CSparseStream@NTar@NArchive@@6B@ DD FLAT:??_R4CSparseStream@NTar@NArchive@@6B@ ; NArchive::NTar::CSparseStream::`vftable'
	DD	FLAT:?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ
	DD	FLAT:?Release@CSparseStream@NTar@NArchive@@UAGKXZ
	DD	FLAT:?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSparseStream@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CSparseStream@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSparseStream@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CSparseStream@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSparseStream@NTar@NArchive@@QAE@XZ PROC		; NArchive::NTar::CSparseStream::CSparseStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSparseStream@NTar@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CSparseStream@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CSparseStream@NTar@NArchive@@QAE@XZ ENDP		; NArchive::NTar::CSparseStream::CSparseStream
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
EXTRN	_IID_IInStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NTar::CSparseStream::QueryInterface, COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@5
$LN6@QueryInter@5:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@5
$LN5@QueryInter@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter@5:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NTar::CSparseStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ PROC	; NArchive::NTar::CSparseStream::AddRef, COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ ENDP	; NArchive::NTar::CSparseStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z	; NArchive::NTar::CSparseStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSparseStream@NTar@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T73112 = -8						; size = 4
$T73111 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSparseStream@NTar@NArchive@@UAGKXZ PROC	; NArchive::NTar::CSparseStream::Release, COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73112[ebp], edx
	mov	eax, DWORD PTR $T73112[ebp]
	mov	DWORD PTR $T73111[ebp], eax
	cmp	DWORD PTR $T73111[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T73111[ebp]
	call	??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSparseStream@NTar@NArchive@@UAGKXZ ENDP	; NArchive::NTar::CSparseStream::Release
_TEXT	ENDS
PUBLIC	??1CSparseStream@NTar@NArchive@@QAE@XZ		; NArchive::NTar::CSparseStream::~CSparseStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z PROC		; NArchive::NTar::CSparseStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSparseStream@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z ENDP		; NArchive::NTar::CSparseStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSparseStream@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSparseStream@NTar@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CSparseStream@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSparseStream@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CSparseStream@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSparseStream@NTar@NArchive@@QAE@XZ PROC		; NArchive::NTar::CSparseStream::~CSparseStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSparseStream@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CSparseStream@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CSparseStream@NTar@NArchive@@QAE@XZ ENDP		; NArchive::NTar::CSparseStream::~CSparseStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CHandler@NTar@NArchive@@QAEXXZ PROC		; NArchive::NTar::CHandler::Init
; _this$ = ecx
; Line 638
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 639
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+218], 0
; Line 641
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 65001		; 0000fde9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], 65001		; 0000fde9H
; Line 642
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CHandler@NTar@NArchive@@QAEXXZ ENDP		; NArchive::NTar::CHandler::Init
_TEXT	ENDS
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
EXTRN	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:PROC ; ParsePropToUInt32
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T73135 = -100						; size = 4
$T73134 = -96						; size = 4
$T73133 = -92						; size = 12
$T73132 = -80						; size = 4
$T73131 = -76						; size = 12
$T73130 = -64						; size = 4
___result__$71841 = -60					; size = 4
_cp$71840 = -52						; size = 4
___result__$71833 = -44					; size = 4
_level$71832 = -36					; size = 4
_prop$71830 = -28					; size = 4
_name$71826 = -20					; size = 12
_i$71822 = -4						; size = 4
_this$ = 8						; size = 4
_names$ = 12						; size = 4
_values$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::NTar::CHandler::SetProperties
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 646
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 12					; 0000000cH
	call	?Init@CHandler@NTar@NArchive@@QAEXXZ	; NArchive::NTar::CHandler::Init
; Line 648
	mov	DWORD PTR _i$71822[ebp], 0
	jmp	SHORT $LN10@SetPropert
$LN9@SetPropert:
	mov	eax, DWORD PTR _i$71822[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71822[ebp], eax
$LN10@SetPropert:
	mov	ecx, DWORD PTR _i$71822[ebp]
	cmp	ecx, DWORD PTR _numProps$[ebp]
	jae	$LN8@SetPropert
; Line 650
	mov	edx, DWORD PTR _i$71822[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
; Line 651
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 652
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SetPropert
; Line 653
	mov	DWORD PTR $T73130[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T73130[ebp]
	jmp	$LN11@SetPropert
$LN7@SetPropert:
; Line 655
	mov	eax, DWORD PTR _i$71822[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _values$[ebp]
	mov	DWORD PTR _prop$71830[ebp], eax
; Line 657
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 120				; 00000078H
	jne	SHORT $LN6@SetPropert
; Line 660
	mov	DWORD PTR _level$71832[ebp], 0
; Line 661
	push	1
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T73131[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	lea	edx, DWORD PTR _level$71832[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$71830[ebp]
	push	eax
	lea	ecx, DWORD PTR $T73131[ebp]
	push	ecx
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$71833[ebp], eax
	lea	ecx, DWORD PTR $T73131[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71833[ebp], 0
	je	SHORT $LN5@SetPropert
	mov	edx, DWORD PTR ___result__$71833[ebp]
	mov	DWORD PTR $T73132[ebp], edx
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T73132[ebp]
	jmp	$LN11@SetPropert
$LN5@SetPropert:
	jmp	$LN4@SetPropert
$LN6@SetPropert:
; Line 663
	push	OFFSET $SG71839
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@SetPropert
; Line 665
	mov	DWORD PTR _cp$71840[ebp], 1
; Line 666
	push	OFFSET $SG71843
	lea	ecx, DWORD PTR $T73133[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	lea	ecx, DWORD PTR _cp$71840[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$71830[ebp]
	push	edx
	lea	eax, DWORD PTR $T73133[ebp]
	push	eax
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$71841[ebp], eax
	lea	ecx, DWORD PTR $T73133[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71841[ebp], 0
	je	SHORT $LN2@SetPropert
	mov	ecx, DWORD PTR ___result__$71841[ebp]
	mov	DWORD PTR $T73134[ebp], ecx
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T73134[ebp]
	jmp	SHORT $LN11@SetPropert
$LN2@SetPropert:
; Line 667
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+206], 1
; Line 668
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cp$71840[ebp]
	mov	DWORD PTR [eax+208], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cp$71840[ebp]
	mov	DWORD PTR [edx+212], eax
; Line 670
	jmp	SHORT $LN4@SetPropert
$LN3@SetPropert:
; Line 671
	mov	DWORD PTR $T73135[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T73135[ebp]
	jmp	SHORT $LN11@SetPropert
$LN4@SetPropert:
; Line 672
	lea	ecx, DWORD PTR _name$71826[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN9@SetPropert
$LN8@SetPropert:
; Line 673
	xor	eax, eax
$LN11@SetPropert:
; Line 674
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN17@SetPropert:
	DD	3
	DD	$LN16@SetPropert
$LN16@SetPropert:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN13@SetPropert
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@SetPropert
	DD	-52					; ffffffccH
	DD	4
	DD	$LN15@SetPropert
$LN15@SetPropert:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN14@SetPropert:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN13@SetPropert:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::NTar::CHandler::SetProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z PROC	; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ENDP	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ PROC ; CMyComPtr<IInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ ENDP ; CMyComPtr<IInStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T73220 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73220[ebp], ecx
	mov	edx, DWORD PTR $T73220[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[]
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NTar::CItemEx>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NTar::CItemEx>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z PROC ; CObjectVector<NArchive::NTar::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z		; NArchive::NTar::CItemEx::CItemEx
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T73233 = -24						; size = 4
$T73232 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z PROC ; CObjectVector<NArchive::NTar::CItemEx>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	136					; 00000088H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73233[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73233[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T73233[ebp]
	call	??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T73232[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T73232[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T73233[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z ENDP ; CObjectVector<NArchive::NTar::CItemEx>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCItemEx@NTar@NArchive@@QAEPAXI@Z		; NArchive::NTar::CItemEx::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T73246 = -28						; size = 4
$T73245 = -24						; size = 4
_i$72011 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$72011[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$72011[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$72011[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$72011[ebp], eax
	mov	ecx, DWORD PTR _i$72011[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73246[ebp], edx
	mov	eax, DWORD PTR $T73246[ebp]
	mov	DWORD PTR $T73245[ebp], eax
	cmp	DWORD PTR $T73245[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T73245[ebp]
	call	??_GCItemEx@NTar@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73259 = -16						; size = 4
$T73258 = -12						; size = 4
_i$72020 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NTar::CItemEx>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$72020[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$72020[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$72020[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$72020[ebp], eax
	mov	ecx, DWORD PTR _i$72020[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73259[ebp], edx
	mov	eax, DWORD PTR $T73259[ebp]
	mov	DWORD PTR $T73258[ebp], eax
	cmp	DWORD PTR $T73258[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T73258[ebp]
	call	??_GCItemEx@NTar@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NTar::CItemEx>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T73285 = -16						; size = 4
$T73284 = -12						; size = 4
_p$72054 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@_K@@QAEXI@Z PROC		; CRecordVector<unsigned __int64>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73284[ebp], eax
	mov	eax, DWORD PTR $T73284[ebp]
	mov	DWORD PTR _p$72054[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$72054[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73285[ebp], edx
	mov	eax, DWORD PTR $T73285[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$72054[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@_K@@QAEXI@Z ENDP		; CRecordVector<unsigned __int64>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T73288 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73288[ebp], ecx
	mov	edx, DWORD PTR $T73288[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z PROC	; CRecordVector<unsigned __int64>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	8
?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z ENDP	; CRecordVector<unsigned __int64>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
PUBLIC	??0CItem@NTar@NArchive@@QAE@ABU012@@Z		; NArchive::NTar::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z PROC		; NArchive::NTar::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NTar@NArchive@@QAE@ABU012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR [ecx+120], eax
	mov	edx, DWORD PTR [edx+124]
	mov	DWORD PTR [ecx+124], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+132]
	mov	BYTE PTR [eax+132], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+133]
	mov	BYTE PTR [eax+133], dl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::NTar::CItemEx::CItemEx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItemEx@NTar@NArchive@@QAEPAXI@Z PROC		; NArchive::NTar::CItemEx::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItemEx@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItemEx@NTar@NArchive@@QAEPAXI@Z ENDP		; NArchive::NTar::CItemEx::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3
__ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NTar@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CItem@NTar@NArchive@@QAE@ABU012@@Z PROC		; NArchive::NTar::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+52], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	edx, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+104]
	mov	BYTE PTR [eax+104], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+105]
	mov	BYTE PTR [eax+105], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+106]
	mov	BYTE PTR [eax+106], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NTar@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::NTar::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T73317 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73317[ebp], ecx
	mov	edx, DWORD PTR $T73317[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T73326 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73326[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73326[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T73330 = -20						; size = 4
$T73329 = -16						; size = 4
_p$72113 = -12						; size = 4
_newCapacity$72112 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$72112[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$72112[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73329[ebp], eax
	mov	eax, DWORD PTR $T73329[ebp]
	mov	DWORD PTR _p$72113[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$72113[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73330[ebp], edx
	mov	eax, DWORD PTR $T73330[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$72113[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$72112[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{16}', COMDAT
	sub	DWORD PTR [esp+4], 16			; 00000010H
	jmp	?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface
?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{16}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NTar@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NTar@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::Release
?Release@CHandler@NTar@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NTar@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NTar@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::Release
?Release@CHandler@NTar@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NTar@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NTar@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::Release
?Release@CHandler@NTar@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NTar@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NTar@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::AddRef
?AddRef@CHandler@NTar@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NTar@NArchive@@WBA@AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NTar@NArchive@@WBA@AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{16}', COMDAT
	sub	DWORD PTR [esp+4], 16			; 00000010H
	jmp	?Release@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::Release
?Release@CHandler@NTar@NArchive@@WBA@AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::Release`adjustor{16}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NTar@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NTar@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::AddRef
?AddRef@CHandler@NTar@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface
?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::AddRef
?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface
?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ PROC		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{16}', COMDAT
	sub	DWORD PTR [esp+4], 16			; 00000010H
	jmp	?AddRef@CHandler@NTar@NArchive@@UAGKXZ	; NArchive::NTar::CHandler::AddRef
?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ ENDP		; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{16}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface
?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{12}'
_TEXT	ENDS
END
