; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Zip\ZipUpdate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
PUBLIC	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
PUBLIC	?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CThreadInfo::WaitAndCode
EXTRN	?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z:PROC ; NArchive::NZip::CAddCommon::Compress
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ PROC	; NArchive::NZip::CThreadInfo::WaitAndCode
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@WaitAndCod:
; Line 197
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
; Line 198
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN2@WaitAndCod
; Line 199
	jmp	$LN5@WaitAndCod
$LN2@WaitAndCod:
; Line 203
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 160				; 000000a0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ; NArchive::NZip::CAddCommon::Compress
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+152], eax
; Line 205
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	jne	SHORT $LN1@WaitAndCod
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN1@WaitAndCod
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 160				; 000000a0H
	push	edx
	mov	eax, DWORD PTR tv136[ebp]
	push	eax
	mov	ecx, DWORD PTR tv136[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax
$LN1@WaitAndCod:
; Line 207
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
; Line 208
	jmp	$LN4@WaitAndCod
$LN5@WaitAndCod:
; Line 209
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ ENDP	; NArchive::NZip::CThreadInfo::WaitAndCode
_TEXT	ENDS
EXTRN	_Event_Set@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC	; NWindows::NSynchronization::CBaseEvent::Set, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Event_Set@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP	; NWindows::NSynchronization::CBaseEvent::Set
_TEXT	ENDS
EXTRN	_Handle_WaitObject@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC	; NWindows::NSynchronization::CBaseEvent::Lock, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Handle_WaitObject@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP	; NWindows::NSynchronization::CBaseEvent::Lock
_TEXT	ENDS
PUBLIC	??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>
PUBLIC	??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&
PUBLIC	??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z ; CMyComPtr<IProgress>::operator=
PUBLIC	?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer2::Create
EXTRN	_IID_ICompressProgressInfo:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progress$ = 8						; size = 4
_inSizeIsMain$ = 12					; size = 1
?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z PROC ; NArchive::NZip::CMtProgressMixer2::Create
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 269
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 270
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z ; CMyComPtr<IProgress>::operator=
; Line 271
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&
	push	eax
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>
; Line 272
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _inSizeIsMain$[ebp]
	mov	BYTE PTR [ecx+56], dl
; Line 273
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
; Line 274
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ENDP ; NArchive::NZip::CMtProgressMixer2::Create
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
PUBLIC	?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progressOffset$ = 8					; size = 8
?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z PROC ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Line 279
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; Line 280
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _progressOffset$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _progressOffset$[ebp+4]
	mov	DWORD PTR [edx+12], ecx
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Line 282
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ENDP ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ ; CMyComPtr<IProgress>::operator->
PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
PUBLIC	?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z$0
__ehfuncinfo$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv145 = -72						; size = 4
tv139 = -68						; size = 8
tv78 = -60						; size = 4
$T76110 = -56						; size = 4
$T76107 = -52						; size = 4
_v$ = -44						; size = 8
___result__$73782 = -32					; size = 4
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z PROC ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 285
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 286
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 287
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN4@SetRatioIn
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN4@SetRatioIn
; Line 289
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv78[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _outSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73782[ebp], eax
	cmp	DWORD PTR ___result__$73782[ebp], 0
	je	SHORT $LN4@SetRatioIn
	mov	ecx, DWORD PTR ___result__$73782[ebp]
	mov	DWORD PTR $T76107[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T76107[ebp]
	jmp	$LN5@SetRatioIn
$LN4@SetRatioIn:
; Line 291
	cmp	DWORD PTR _inSize$[ebp], 0
	je	SHORT $LN2@SetRatioIn
; Line 292
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _inSize$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx*8+16], esi
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx*8+20], ecx
$LN2@SetRatioIn:
; Line 293
	cmp	DWORD PTR _outSize$[ebp], 0
	je	SHORT $LN1@SetRatioIn
; Line 294
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _outSize$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax+edx*8+32], esi
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx*8+36], ecx
$LN1@SetRatioIn:
; Line 297
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+56]
	test	eax, eax
	je	SHORT $LN7@SetRatioIn
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+20]
	adc	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR tv139[ebp], eax
	mov	DWORD PTR tv139[ebp+4], ecx
	jmp	SHORT $LN8@SetRatioIn
$LN7@SetRatioIn:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	add	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx+36]
	adc	edx, DWORD PTR [eax+44]
	mov	DWORD PTR tv139[ebp], ecx
	mov	DWORD PTR tv139[ebp+4], edx
$LN8@SetRatioIn:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR [eax+12]
	adc	edx, DWORD PTR tv139[ebp+4]
	mov	DWORD PTR _v$[ebp], ecx
	mov	DWORD PTR _v$[ebp+4], edx
; Line 298
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ ; CMyComPtr<IProgress>::operator->
	mov	DWORD PTR tv145[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	mov	edx, DWORD PTR tv145[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T76110[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T76110[ebp]
$LN5@SetRatioIn:
; Line 299
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN14@SetRatioIn:
	DD	2
	DD	$LN13@SetRatioIn
$LN13@SetRatioIn:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@SetRatioIn
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN11@SetRatioIn
$LN11@SetRatioIn:
	DB	118					; 00000076H
	DB	0
$LN10@SetRatioIn:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ENDP ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
PUBLIC	?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z PROC ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 302
	push	ebp
	mov	ebp, esp
; Line 303
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; Line 304
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z ENDP ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2
PUBLIC	?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer::Create
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0
__ehfuncinfo$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv72 = -28						; size = 4
$T76135 = -24						; size = 4
$T76134 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_progress$ = 8						; size = 4
_inSizeIsMain$ = 12					; size = 1
?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z PROC ; NArchive::NZip::CMtProgressMixer::Create
; _this$ = ecx
; Line 319
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 320
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76135[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76135[ebp], 0
	je	SHORT $LN3@Create
	mov	ecx, DWORD PTR $T76135[ebp]
	call	??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Create
$LN3@Create:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Create:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T76134[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T76134[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 322
	movzx	edx, BYTE PTR _inSizeIsMain$[ebp]
	push	edx
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Create@CMtProgressMixer2@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer2::Create
; Line 323
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z$0:
	mov	eax, DWORD PTR $T76135[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ENDP ; NArchive::NZip::CMtProgressMixer::Create
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@UIProgress@@@@QAE@XZ		; CMyComPtr<IProgress>::~CMyComPtr<IProgress>
PUBLIC	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UIProgress@@@@QAE@XZ		; CMyComPtr<IProgress>::CMyComPtr<IProgress>
PUBLIC	??_7CMtProgressMixer2@NZip@NArchive@@6B@	; NArchive::NZip::CMtProgressMixer2::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??_R4CMtProgressMixer2@NZip@NArchive@@6B@	; NArchive::NZip::CMtProgressMixer2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8	; NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'
PUBLIC	??_R3CMtProgressMixer2@NZip@NArchive@@8		; NArchive::NZip::CMtProgressMixer2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMtProgressMixer2@NZip@NArchive@@8		; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CMtProgressMixer2::QueryInterface
PUBLIC	?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CMtProgressMixer2::AddRef
PUBLIC	?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CMtProgressMixer2::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8 DD FLAT:??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMtProgressMixer2@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CMtProgressMixer2@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CMtProgressMixer2@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CMtProgressMixer2@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMtProgressMixer2@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CMtProgressMixer2@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CMtProgressMixer2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMtProgressMixer2@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CMtProgressMixer2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMtProgressMixer2@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMtProgressMixer2@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CMtProgressMixer2@NZip@NArchive@@6B@ DD 00H	; NArchive::NZip::CMtProgressMixer2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMtProgressMixer2@NZip@NArchive@@@8
	DD	FLAT:??_R3CMtProgressMixer2@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CMtProgressMixer2@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CMtProgressMixer2@NZip@NArchive@@6B@ DD FLAT:??_R4CMtProgressMixer2@NZip@NArchive@@6B@ ; NArchive::NZip::CMtProgressMixer2::`vftable'
	DD	FLAT:?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMtProgressMixer2@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$CMyComPtr@UIProgress@@@@QAE@XZ	; CMyComPtr<IProgress>::CMyComPtr<IProgress>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CMyComPtr@UIProgress@@@@QAE@XZ	; CMyComPtr<IProgress>::~CMyComPtr<IProgress>
__unwindfunclet$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMtProgressMixer2@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMtProgressMixer2::CMtProgressMixer2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
EXTRN	_CriticalSection_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_CriticalSection_Init@4
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CMtProgressMixer2::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 261
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMtProgressMixer2@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CMtProgressMixer2::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CMtProgressMixer2::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 261
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMtProgressMixer2@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CMtProgressMixer2::AddRef
_TEXT	ENDS
PUBLIC	??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76168 = -8						; size = 4
$T76167 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CMtProgressMixer2::Release, COMDAT
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76168[ebp], edx
	mov	eax, DWORD PTR $T76168[ebp]
	mov	DWORD PTR $T76167[ebp], eax
	cmp	DWORD PTR $T76167[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T76167[ebp]
	call	??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMtProgressMixer2@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CMtProgressMixer2::Release
_TEXT	ENDS
PUBLIC	??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMtProgressMixer2@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CMtProgressMixer2::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CMyComPtr@UIProgress@@@@QAE@XZ	; CMyComPtr<IProgress>::~CMyComPtr<IProgress>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CMyComPtr@UIProgress@@@@QAE@XZ	; CMyComPtr<IProgress>::~CMyComPtr<IProgress>
__unwindfunclet$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMtProgressMixer2@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMtProgressMixer2::~CMtProgressMixer2
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z ; NArchive::NZip::CMtProgressMixer::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z PROC ; NArchive::NZip::CMtProgressMixer::SetRatioInfo
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 326
	push	ebp
	mov	ebp, esp
; Line 327
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetRatioInfo@CMtProgressMixer2@NZip@NArchive@@QAEJIPB_K0@Z ; NArchive::NZip::CMtProgressMixer2::SetRatioInfo
; Line 328
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z ENDP ; NArchive::NZip::CMtProgressMixer::SetRatioInfo
_TEXT	ENDS
PUBLIC	?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ ; NArchive::NZip::CCacheOutStream::Allocate
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ PROC	; NArchive::NZip::CCacheOutStream::Allocate
; _this$ = ecx
; Line 918
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 919
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN1@Allocate
; Line 920
	push	4194304					; 00400000H
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Allocate:
; Line 921
	mov	edx, DWORD PTR _this$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+12], 0
	setne	al
; Line 922
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ ENDP	; NArchive::NZip::CCacheOutStream::Allocate
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
PUBLIC	?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z ; NArchive::NZip::CCacheOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -28						; size = 4
tv86 = -24						; size = 4
tv73 = -20						; size = 4
___result__$74657 = -16					; size = 4
___result__$74655 = -12					; size = 4
___result__$74653 = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z PROC ; NArchive::NZip::CCacheOutStream::Init
; _this$ = ecx
; Line 925
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 926
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 927
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 928
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv73[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74653[ebp], eax
	cmp	DWORD PTR ___result__$74653[ebp], 0
	je	SHORT $LN3@Init
	mov	eax, DWORD PTR ___result__$74653[ebp]
	jmp	$LN4@Init
$LN3@Init:
; Line 929
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	mov	esi, esp
	push	edx
	push	2
	push	0
	push	0
	mov	eax, DWORD PTR tv86[ebp]
	push	eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74655[ebp], eax
	cmp	DWORD PTR ___result__$74655[ebp], 0
	je	SHORT $LN2@Init
	mov	eax, DWORD PTR ___result__$74655[ebp]
	jmp	$LN4@Init
$LN2@Init:
; Line 930
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	push	ecx
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	mov	eax, DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74657[ebp], eax
	cmp	DWORD PTR ___result__$74657[ebp], 0
	je	SHORT $LN1@Init
	mov	eax, DWORD PTR ___result__$74657[ebp]
	jmp	SHORT $LN4@Init
$LN1@Init:
; Line 931
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+36], ecx
; Line 932
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+44], eax
; Line 933
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
; Line 934
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
; Line 935
	xor	eax, eax
$LN4@Init:
; Line 936
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z ENDP ; NArchive::NZip::CCacheOutStream::Init
_TEXT	ENDS
PUBLIC	??$MyMin@I@@YGIII@Z				; MyMin<unsigned int>
PUBLIC	?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z	; NArchive::NZip::CCacheOutStream::MyWrite
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv214 = -40						; size = 4
tv213 = -36						; size = 4
tv74 = -32						; size = 4
tv164 = -28						; size = 4
tv163 = -24						; size = 4
___result__$74678 = -20					; size = 4
_curSize$74672 = -16					; size = 4
_pos$74670 = -12					; size = 4
___result__$74668 = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z PROC	; NArchive::NZip::CCacheOutStream::MyWrite
; _this$ = ecx
; Line 939
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN6@MyWrite:
; Line 940
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN5@MyWrite
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$LN5@MyWrite
; Line 942
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv163[ebp], ecx
	mov	DWORD PTR tv164[ebp], edx
	mov	eax, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN9@MyWrite
	mov	eax, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+52]
	je	SHORT $LN4@MyWrite
$LN9@MyWrite:
; Line 944
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR tv74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74668[ebp], eax
	cmp	DWORD PTR ___result__$74668[ebp], 0
	je	SHORT $LN4@MyWrite
	mov	eax, DWORD PTR ___result__$74668[ebp]
	jmp	$LN7@MyWrite
$LN4@MyWrite:
; Line 946
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 4194303				; 003fffffH
	mov	DWORD PTR _pos$74670[ebp], eax
; Line 947
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, 4194304				; 00400000H
	sub	eax, DWORD PTR _pos$74670[ebp]
	push	eax
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _curSize$74672[ebp], eax
; Line 948
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curSize$74672[ebp]
	push	edx
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _curSize$74672[ebp], eax
; Line 949
	mov	eax, DWORD PTR _curSize$74672[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _pos$74670[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$74678[ebp], eax
	cmp	DWORD PTR ___result__$74678[ebp], 0
	je	SHORT $LN2@MyWrite
	mov	eax, DWORD PTR ___result__$74678[ebp]
	jmp	$LN7@MyWrite
$LN2@MyWrite:
; Line 950
	mov	eax, DWORD PTR _curSize$74672[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+32]
	adc	ecx, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], ecx
; Line 951
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv213[ebp], eax
	mov	DWORD PTR tv214[ebp], ecx
	mov	edx, DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR tv214[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+36]
	ja	SHORT $LN1@MyWrite
	jb	SHORT $LN10@MyWrite
	mov	edx, DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR tv214[ebp]
	mov	ecx, DWORD PTR [edx+40]
	cmp	ecx, DWORD PTR [eax+32]
	jae	SHORT $LN1@MyWrite
$LN10@MyWrite:
; Line 952
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+44], eax
$LN1@MyWrite:
; Line 953
	mov	ecx, DWORD PTR _curSize$74672[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 954
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, DWORD PTR _curSize$74672[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 955
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _curSize$74672[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 956
	jmp	$LN6@MyWrite
$LN5@MyWrite:
; Line 957
	xor	eax, eax
$LN7@MyWrite:
; Line 958
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z ENDP	; NArchive::NZip::CCacheOutStream::MyWrite
_TEXT	ENDS
PUBLIC	?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ PROC	; NArchive::NZip::CCacheOutStream::FlushCache
; _this$ = ecx
; Line 961
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 962
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z ; NArchive::NZip::CCacheOutStream::MyWrite
; Line 963
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ENDP	; NArchive::NZip::CCacheOutStream::FlushCache
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
PUBLIC	??_7CCacheOutStream@NZip@NArchive@@6B@		; NArchive::NZip::CCacheOutStream::`vftable'
PUBLIC	??1CCacheOutStream@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCacheOutStream::~CCacheOutStream
PUBLIC	??_R4CCacheOutStream@NZip@NArchive@@6B@		; NArchive::NZip::CCacheOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCacheOutStream@NZip@NArchive@@@8	; NArchive::NZip::CCacheOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CCacheOutStream@NZip@NArchive@@8		; NArchive::NZip::CCacheOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCacheOutStream@NZip@NArchive@@8		; NArchive::NZip::CCacheOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8	; NArchive::NZip::CCacheOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IOutStream@@8			; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIOutStream@@@8				; IOutStream `RTTI Type Descriptor'
PUBLIC	??_R3IOutStream@@8				; IOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutStream@@8				; IOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CCacheOutStream::QueryInterface
PUBLIC	?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CCacheOutStream::AddRef
PUBLIC	?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CCacheOutStream::Release
PUBLIC	?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z ; NArchive::NZip::CCacheOutStream::Write
PUBLIC	?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z ; NArchive::NZip::CCacheOutStream::Seek
PUBLIC	?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z ; NArchive::NZip::CCacheOutStream::SetSize
EXTRN	_MidFree@4:PROC
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutStream@@8
rdata$r	SEGMENT
??_R2IOutStream@@8 DD FLAT:??_R1A@?0A@EA@IOutStream@@8	; IOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutStream@@8
rdata$r	SEGMENT
??_R3IOutStream@@8 DD 00H				; IOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutStream@@@8
_DATA	SEGMENT
??_R0?AUIOutStream@@@8 DD FLAT:??_7type_info@@6B@	; IOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutStream@@8 DD FLAT:??_R0?AUIOutStream@@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8 DD FLAT:??_R0?AVCCacheOutStream@NZip@NArchive@@@8 ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCacheOutStream@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CCacheOutStream@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CCacheOutStream@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CCacheOutStream@NZip@NArchive@@8 ; NArchive::NZip::CCacheOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCacheOutStream@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CCacheOutStream@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CCacheOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CCacheOutStream@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCacheOutStream@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCCacheOutStream@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CCacheOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCacheOutStream@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCacheOutStream@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CCacheOutStream@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CCacheOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCacheOutStream@NZip@NArchive@@@8
	DD	FLAT:??_R3CCacheOutStream@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CCacheOutStream@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CCacheOutStream@NZip@NArchive@@6B@ DD FLAT:??_R4CCacheOutStream@NZip@NArchive@@6B@ ; NArchive::NZip::CCacheOutStream::`vftable'
	DD	FLAT:?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??1CCacheOutStream@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCacheOutStream@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CCacheOutStream@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv91 = -40						; size = 4
tv165 = -36						; size = 4
tv164 = -32						; size = 4
tv79 = -28						; size = 4
tv141 = -24						; size = 4
tv140 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCacheOutStream@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CCacheOutStream::~CCacheOutStream
; _this$ = ecx
; Line 966
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCacheOutStream@NZip@NArchive@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 967
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache
; Line 968
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv140[ebp], ecx
	mov	DWORD PTR tv141[ebp], edx
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR tv141[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN6@CCacheOutS
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR tv141[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+44]
	je	SHORT $LN2@CCacheOutS
$LN6@CCacheOutS:
; Line 969
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv79[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CCacheOutS:
; Line 970
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv164[ebp], ecx
	mov	DWORD PTR tv165[ebp], edx
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN7@CCacheOutS
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+36]
	je	SHORT $LN1@CCacheOutS
$LN7@CCacheOutS:
; Line 971
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv91[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CCacheOutS:
; Line 972
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_MidFree@4
; Line 973
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CCacheOutStream@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??1CCacheOutStream@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCacheOutStream@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCacheOutStream@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CCacheOutStream::~CCacheOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CCacheOutStream::QueryInterface, COMDAT
; Line 910
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCacheOutStream@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CCacheOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CCacheOutStream::AddRef, COMDAT
; Line 910
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCacheOutStream@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CCacheOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CCacheOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76212 = -8						; size = 4
$T76211 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CCacheOutStream::Release, COMDAT
; Line 910
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76212[ebp], edx
	mov	eax, DWORD PTR $T76212[ebp]
	mov	DWORD PTR $T76211[ebp], eax
	cmp	DWORD PTR $T76211[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T76211[ebp]
	call	??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCacheOutStream@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CCacheOutStream::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CCacheOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCacheOutStream@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCacheOutStream::~CCacheOutStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCacheOutStream@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CCacheOutStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::MyWriteBlock
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv396 = -120						; size = 4
tv395 = -116						; size = 4
tv354 = -112						; size = 4
tv312 = -108						; size = 8
tv309 = -100						; size = 8
tv285 = -92						; size = 4
tv267 = -88						; size = 4
tv266 = -84						; size = 4
tv252 = -80						; size = 4
tv244 = -76						; size = 4
tv224 = -72						; size = 4
tv223 = -68						; size = 4
_startPos$74742 = -64					; size = 4
___result__$74740 = -60					; size = 4
_cachedEnd$ = -56					; size = 8
_pos$ = -48						; size = 4
___result__$74726 = -44					; size = 4
_curSize$74719 = -40					; size = 4
_endPos$74717 = -36					; size = 4
_cachedEnd$74716 = -32					; size = 8
___result__$74708 = -24					; size = 4
_cachedEnd$74705 = -20					; size = 8
___result__$74702 = -12					; size = 4
_zerosStart$ = -8					; size = 8
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z PROC ; NArchive::NZip::CCacheOutStream::Write
; Line 976
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 977
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN27@Write
; Line 978
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN27@Write:
; Line 979
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN26@Write
; Line 980
	xor	eax, eax
	jmp	$LN28@Write
$LN26@Write:
; Line 982
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _zerosStart$[ebp], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _zerosStart$[ebp+4], eax
; Line 983
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	$LN25@Write
; Line 985
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv223[ebp], edx
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR tv223[ebp]
	mov	edx, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+52]
	ja	SHORT $LN24@Write
	jb	SHORT $LN30@Write
	mov	ecx, DWORD PTR tv223[ebp]
	mov	edx, DWORD PTR tv224[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+48]
	jae	SHORT $LN24@Write
$LN30@Write:
; Line 987
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache
	mov	DWORD PTR ___result__$74702[ebp], eax
	cmp	DWORD PTR ___result__$74702[ebp], 0
	je	SHORT $LN23@Write
	mov	eax, DWORD PTR ___result__$74702[ebp]
	jmp	$LN28@Write
$LN23@Write:
; Line 989
	jmp	SHORT $LN25@Write
$LN24@Write:
; Line 991
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR _cachedEnd$74705[ebp], edx
	mov	DWORD PTR _cachedEnd$74705[ebp+4], eax
; Line 992
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv244[ebp], edx
	mov	eax, DWORD PTR tv244[ebp]
	mov	ecx, DWORD PTR _cachedEnd$74705[ebp+4]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN25@Write
	jb	SHORT $LN31@Write
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR _cachedEnd$74705[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN25@Write
$LN31@Write:
; Line 994
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv252[ebp], ecx
	mov	edx, DWORD PTR tv252[ebp]
	mov	eax, DWORD PTR _cachedEnd$74705[ebp+4]
	cmp	eax, DWORD PTR [edx+44]
	ja	SHORT $LN20@Write
	jb	SHORT $LN32@Write
	mov	ecx, DWORD PTR tv252[ebp]
	mov	edx, DWORD PTR _cachedEnd$74705[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jae	SHORT $LN20@Write
$LN32@Write:
; Line 996
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushCache@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::FlushCache
	mov	DWORD PTR ___result__$74708[ebp], eax
	cmp	DWORD PTR ___result__$74708[ebp], 0
	je	SHORT $LN19@Write
	mov	eax, DWORD PTR ___result__$74708[ebp]
	jmp	$LN28@Write
$LN19@Write:
; Line 998
	jmp	SHORT $LN25@Write
$LN20@Write:
; Line 999
	mov	eax, DWORD PTR _cachedEnd$74705[ebp]
	mov	DWORD PTR _zerosStart$[ebp], eax
	mov	ecx, DWORD PTR _cachedEnd$74705[ebp+4]
	mov	DWORD PTR _zerosStart$[ebp+4], ecx
$LN25@Write:
; Line 1004
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN17@Write
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv266[ebp], eax
	mov	DWORD PTR tv267[ebp], ecx
	mov	edx, DWORD PTR tv266[ebp]
	mov	eax, DWORD PTR tv267[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN17@Write
	jb	SHORT $LN33@Write
	mov	edx, DWORD PTR tv266[ebp]
	mov	eax, DWORD PTR tv267[ebp]
	mov	ecx, DWORD PTR [edx+40]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN17@Write
$LN33@Write:
; Line 1005
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _zerosStart$[ebp], eax
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _zerosStart$[ebp+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _zerosStart$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _zerosStart$[ebp+4]
	mov	DWORD PTR [edx+52], ecx
$LN17@Write:
; Line 1007
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv285[ebp], edx
	mov	eax, DWORD PTR tv285[ebp]
	mov	ecx, DWORD PTR _zerosStart$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN15@Write
	mov	edx, DWORD PTR tv285[ebp]
	mov	eax, DWORD PTR _zerosStart$[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	je	$LN16@Write
$LN15@Write:
; Line 1013
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR _cachedEnd$74716[ebp], edx
	mov	DWORD PTR _cachedEnd$74716[ebp+4], eax
; Line 1014
	mov	edx, DWORD PTR _cachedEnd$74716[ebp]
	and	edx, 4194303				; 003fffffH
	mov	DWORD PTR _endPos$74717[ebp], edx
; Line 1015
	mov	eax, 4194304				; 00400000H
	sub	eax, DWORD PTR _endPos$74717[ebp]
	mov	DWORD PTR _curSize$74719[ebp], eax
; Line 1016
	mov	ecx, DWORD PTR _curSize$74719[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+16]
	sub	esi, DWORD PTR _cachedEnd$74716[ebp]
	mov	eax, DWORD PTR [eax+20]
	sbb	eax, DWORD PTR _cachedEnd$74716[ebp+4]
	mov	DWORD PTR tv309[ebp], ecx
	mov	DWORD PTR tv309[ebp+4], edx
	mov	DWORD PTR tv312[ebp], esi
	mov	DWORD PTR tv312[ebp+4], eax
	mov	ecx, DWORD PTR tv309[ebp+4]
	cmp	ecx, DWORD PTR tv312[ebp+4]
	jb	SHORT $LN13@Write
	ja	SHORT $LN35@Write
	mov	edx, DWORD PTR tv309[ebp]
	cmp	edx, DWORD PTR tv312[ebp]
	jbe	SHORT $LN13@Write
$LN35@Write:
; Line 1017
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _cachedEnd$74716[ebp]
	mov	edx, DWORD PTR [eax+20]
	sbb	edx, DWORD PTR _cachedEnd$74716[ebp+4]
	mov	DWORD PTR _curSize$74719[ebp], ecx
$LN13@Write:
; Line 1018
	cmp	DWORD PTR _curSize$74719[ebp], 0
	jne	SHORT $LN11@Write
; Line 1019
	jmp	SHORT $LN16@Write
$LN11@Write:
; Line 1020
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4194304				; 00400000H
	sub	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR _curSize$74719[ebp], ecx
	jbe	SHORT $LN10@Write
; Line 1022
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::MyWriteBlock
	mov	DWORD PTR ___result__$74726[ebp], eax
	cmp	DWORD PTR ___result__$74726[ebp], 0
	je	SHORT $LN9@Write
	mov	eax, DWORD PTR ___result__$74726[ebp]
	jmp	$LN28@Write
$LN9@Write:
; Line 1023
	jmp	SHORT $LN11@Write
$LN10@Write:
; Line 1024
	mov	edx, DWORD PTR _curSize$74719[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _endPos$74717[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1025
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR _curSize$74719[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 1026
	jmp	$LN15@Write
$LN16@Write:
; Line 1029
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN8@Write
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+52], ecx
$LN8@Write:
; Line 1032
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 4194303				; 003fffffH
	mov	DWORD PTR _pos$[ebp], eax
; Line 1033
	mov	ecx, 4194304				; 00400000H
	sub	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _size$[ebp], eax
; Line 1034
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	DWORD PTR _cachedEnd$[ebp], ecx
	mov	DWORD PTR _cachedEnd$[ebp+4], edx
; Line 1035
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv354[ebp], ecx
	mov	edx, DWORD PTR tv354[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _cachedEnd$[ebp]
	jne	SHORT $LN36@Write
	mov	ecx, DWORD PTR tv354[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _cachedEnd$[ebp+4]
	je	SHORT $LN7@Write
$LN36@Write:
; Line 1036
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cachedEnd$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _cachedEnd$[ebp+4]
	sbb	edx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _size$[ebp], eax
; Line 1037
	jmp	SHORT $LN6@Write
$LN7@Write:
; Line 1040
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 4194304		; 00400000H
	jne	SHORT $LN5@Write
; Line 1042
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ; NArchive::NZip::CCacheOutStream::MyWriteBlock
	mov	DWORD PTR ___result__$74740[ebp], eax
	cmp	DWORD PTR ___result__$74740[ebp], 0
	je	SHORT $LN5@Write
	mov	eax, DWORD PTR ___result__$74740[ebp]
	jmp	$LN28@Write
$LN5@Write:
; Line 1044
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 4194303				; 003fffffH
	mov	DWORD PTR _startPos$74742[ebp], eax
; Line 1045
	mov	ecx, DWORD PTR _startPos$74742[ebp]
	cmp	ecx, DWORD PTR _pos$[ebp]
	jbe	SHORT $LN3@Write
; Line 1046
	mov	edx, DWORD PTR _startPos$74742[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _size$[ebp], eax
$LN3@Write:
; Line 1047
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN6@Write:
; Line 1049
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1050
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN2@Write
; Line 1051
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@Write:
; Line 1052
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 1053
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv395[ebp], ecx
	mov	DWORD PTR tv396[ebp], edx
	mov	eax, DWORD PTR tv395[ebp]
	mov	ecx, DWORD PTR tv396[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	ja	SHORT $LN1@Write
	jb	SHORT $LN37@Write
	mov	eax, DWORD PTR tv395[ebp]
	mov	ecx, DWORD PTR tv396[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN1@Write
$LN37@Write:
; Line 1054
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+28], ecx
$LN1@Write:
; Line 1055
	xor	eax, eax
$LN28@Write:
; Line 1056
	pop	edi
	pop	esi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@CCacheOutStream@NZip@NArchive@@UAGJPBXIPAI@Z ENDP ; NArchive::NZip::CCacheOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ PROC ; NArchive::NZip::CCacheOutStream::MyWriteBlock, COMDAT
; _this$ = ecx
; Line 900
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 901
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 1048575				; 000fffffH
	mov	edx, 1048576				; 00100000H
	sub	edx, ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MyWrite@CCacheOutStream@NZip@NArchive@@AAEJI@Z ; NArchive::NZip::CCacheOutStream::MyWrite
; Line 902
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MyWriteBlock@CCacheOutStream@NZip@NArchive@@AAEJXZ ENDP ; NArchive::NZip::CCacheOutStream::MyWriteBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z PROC	; NArchive::NZip::CCacheOutStream::Seek
; Line 1059
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1060
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@2
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@2
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@2
	jmp	SHORT $LN3@Seek@2
$LN6@Seek@2:
; Line 1062
	jmp	SHORT $LN7@Seek@2
$LN5@Seek@2:
; Line 1063
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@2
$LN4@Seek@2:
; Line 1064
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@2
$LN3@Seek@2:
; Line 1065
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@2
$LN7@Seek@2:
; Line 1067
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@2
	jl	SHORT $LN11@Seek@2
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@2
$LN11@Seek@2:
; Line 1068
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@2
$LN2@Seek@2:
; Line 1069
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
; Line 1070
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@2
; Line 1071
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN1@Seek@2:
; Line 1072
	xor	eax, eax
$LN9@Seek@2:
; Line 1073
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CCacheOutStream@NZip@NArchive@@UAGJ_JIPA_K@Z ENDP	; NArchive::NZip::CCacheOutStream::Seek
; Function compile flags: /Odtp /RTCsu
tv174 = -24						; size = 8
tv154 = -16						; size = 4
tv71 = -12						; size = 4
tv129 = -8						; size = 4
___result__$74777 = -4					; size = 4
_this$ = 8						; size = 4
_newSize$ = 12						; size = 8
?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z PROC	; NArchive::NZip::CCacheOutStream::SetSize
; Line 1076
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1077
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 1078
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _newSize$[ebp+4]
	cmp	edx, DWORD PTR [ecx+44]
	ja	SHORT $LN4@SetSize
	jb	SHORT $LN7@SetSize
	mov	eax, DWORD PTR tv129[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN4@SetSize
$LN7@SetSize:
; Line 1080
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _newSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74777[ebp], eax
	cmp	DWORD PTR ___result__$74777[ebp], 0
	je	SHORT $LN3@SetSize
	mov	eax, DWORD PTR ___result__$74777[ebp]
	jmp	$LN5@SetSize
$LN3@SetSize:
; Line 1081
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [edx+44], ecx
$LN4@SetSize:
; Line 1083
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv154[ebp], edx
	mov	eax, DWORD PTR tv154[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	cmp	ecx, DWORD PTR [eax+52]
	ja	SHORT $LN2@SetSize
	jb	SHORT $LN8@SetSize
	mov	edx, DWORD PTR tv154[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	ja	SHORT $LN2@SetSize
$LN8@SetSize:
; Line 1085
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0
; Line 1086
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [edx+52], ecx
$LN2@SetSize:
; Line 1088
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+48]
	adc	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR tv174[ebp], eax
	mov	DWORD PTR tv174[ebp+4], ecx
	mov	eax, DWORD PTR _newSize$[ebp+4]
	cmp	eax, DWORD PTR tv174[ebp+4]
	ja	SHORT $LN1@SetSize
	jb	SHORT $LN9@SetSize
	mov	ecx, DWORD PTR _newSize$[ebp]
	cmp	ecx, DWORD PTR tv174[ebp]
	jae	SHORT $LN1@SetSize
$LN9@SetSize:
; Line 1089
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	sub	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	sbb	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
$LN1@SetSize:
; Line 1090
	xor	eax, eax
$LN5@SetSize:
; Line 1091
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSize@CCacheOutStream@NZip@NArchive@@UAGJ_K@Z ENDP	; NArchive::NZip::CCacheOutStream::SetSize
_TEXT	ENDS
PUBLIC	??1COutArchive@NZip@NArchive@@QAE@XZ		; NArchive::NZip::COutArchive::~COutArchive
PUBLIC	??0COutArchive@NZip@NArchive@@QAE@XZ		; NArchive::NZip::COutArchive::COutArchive
PUBLIC	??0CCacheOutStream@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCacheOutStream::CCacheOutStream
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ		; CMyComPtr<IOutStream>::operator!
PUBLIC	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
PUBLIC	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CInArchive::CanUpdate
PUBLIC	?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::Update
EXTRN	?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z:PROC ; NArchive::NZip::COutArchive::MoveCurPos
EXTRN	?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z:PROC ; NArchive::NZip::COutArchive::Create
EXTRN	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z:PROC ; NCompress::CopyStream_ExactSize
EXTRN	_IID_IOutStream:BYTE
xdata$x	SEGMENT
__unwindtable$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$3
__ehfuncinfo$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv244 = -232						; size = 4
tv203 = -228						; size = 4
tv363 = -224						; size = 4
tv362 = -220						; size = 4
tv168 = -216						; size = 4
tv132 = -212						; size = 4
tv284 = -208						; size = 4
$T76248 = -204						; size = 4
$T76247 = -200						; size = 4
$T76246 = -196						; size = 4
$T76245 = -192						; size = 4
$T76244 = -188						; size = 4
$T76243 = -184						; size = 4
$T76240 = -180						; size = 4
$T76239 = -176						; size = 4
$T76238 = -172						; size = 4
$T76237 = -168						; size = 4
$T76236 = -164						; size = 4
___result__$74835 = -160				; size = 4
_embStubSize$74834 = -156				; size = 8
___result__$74831 = -148				; size = 4
___result__$74825 = -144				; size = 4
_outArchive$ = -136					; size = 80
___result__$74821 = -52					; size = 4
_cacheStream$74813 = -48				; size = 4
___result__$74810 = -44					; size = 4
___result__$74807 = -40					; size = 4
_outStreamReal$74800 = -32				; size = 4
_outStream$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_inputItems$ = 8					; size = 4
_updateItems$ = 12					; size = 4
_seqOutStream$ = 16					; size = 4
_inArchive$ = 20					; size = 4
_removeSfx$ = 24					; size = 1
_compressionMethodMode$ = 28				; size = 4
_updateCallback$ = 32					; size = 4
?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NZip::Update
; Line 1102
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1103
	cmp	DWORD PTR _inArchive$[ebp], 0
	je	SHORT $LN14@Update
; Line 1105
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@Update
; Line 1106
	mov	eax, -2147467263			; 80004001H
	jmp	$LN15@Update
$LN14@Update:
; Line 1110
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1112
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1113
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _seqOutStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _seqOutStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1114
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@Update
; Line 1115
	mov	DWORD PTR $T76236[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76236[ebp]
	jmp	$LN15@Update
$LN12@Update:
; Line 1117
	cmp	DWORD PTR _inArchive$[ebp], 0
	je	$LN11@Update
; Line 1119
	mov	eax, DWORD PTR _inArchive$[ebp]
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jl	$LN11@Update
	jg	SHORT $LN25@Update
	mov	edx, DWORD PTR tv284[ebp]
	cmp	DWORD PTR [edx+56], 0
	jbe	$LN11@Update
$LN25@Update:
	movzx	eax, BYTE PTR _removeSfx$[ebp]
	test	eax, eax
	jne	$LN11@Update
; Line 1121
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv132[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74807[ebp], eax
	cmp	DWORD PTR ___result__$74807[ebp], 0
	je	SHORT $LN9@Update
	mov	edx, DWORD PTR ___result__$74807[ebp]
	mov	DWORD PTR $T76237[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76237[ebp]
	jmp	$LN15@Update
$LN9@Update:
; Line 1122
	push	0
	mov	eax, DWORD PTR _inArchive$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	push	edx
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize
	mov	DWORD PTR ___result__$74810[ebp], eax
	cmp	DWORD PTR ___result__$74810[ebp], 0
	je	SHORT $LN11@Update
	mov	eax, DWORD PTR ___result__$74810[ebp]
	mov	DWORD PTR $T76238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76238[ebp]
	jmp	$LN15@Update
$LN11@Update:
; Line 1126
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76240[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T76240[ebp], 0
	je	SHORT $LN17@Update
	mov	ecx, DWORD PTR $T76240[ebp]
	call	??0CCacheOutStream@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCacheOutStream::CCacheOutStream
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN18@Update
$LN17@Update:
	mov	DWORD PTR tv168[ebp], 0
$LN18@Update:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T76239[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T76239[ebp]
	mov	DWORD PTR _cacheStream$74813[ebp], edx
; Line 1127
	mov	eax, DWORD PTR _cacheStream$74813[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 1128
	mov	ecx, DWORD PTR _cacheStream$74813[ebp]
	call	?Allocate@CCacheOutStream@NZip@NArchive@@QAE_NXZ ; NArchive::NZip::CCacheOutStream::Allocate
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@Update
; Line 1129
	mov	DWORD PTR $T76243[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76243[ebp]
	jmp	$LN15@Update
$LN7@Update:
; Line 1130
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	mov	ecx, DWORD PTR _cacheStream$74813[ebp]
	call	?Init@CCacheOutStream@NZip@NArchive@@QAEJPAUIOutStream@@@Z ; NArchive::NZip::CCacheOutStream::Init
	mov	DWORD PTR ___result__$74821[ebp], eax
	cmp	DWORD PTR ___result__$74821[ebp], 0
	je	SHORT $LN6@Update
	mov	edx, DWORD PTR ___result__$74821[ebp]
	mov	DWORD PTR $T76244[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76244[ebp]
	jmp	$LN15@Update
$LN6@Update:
; Line 1131
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Line 1133
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??0COutArchive@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1134
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?Create@COutArchive@NZip@NArchive@@QAEJPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::Create
	mov	DWORD PTR ___result__$74825[ebp], eax
	cmp	DWORD PTR ___result__$74825[ebp], 0
	je	SHORT $LN5@Update
	mov	eax, DWORD PTR ___result__$74825[ebp]
	mov	DWORD PTR $T76245[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76245[ebp]
	jmp	$LN15@Update
$LN5@Update:
; Line 1136
	cmp	DWORD PTR _inArchive$[ebp], 0
	je	$LN4@Update
; Line 1138
	mov	ecx, DWORD PTR _inArchive$[ebp]
	mov	edx, DWORD PTR _inArchive$[ebp]
	mov	DWORD PTR tv362[ebp], ecx
	mov	DWORD PTR tv363[ebp], edx
	mov	eax, DWORD PTR tv362[ebp]
	mov	ecx, DWORD PTR tv363[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+60]
	jl	$LN4@Update
	jg	SHORT $LN26@Update
	mov	eax, DWORD PTR tv362[ebp]
	mov	ecx, DWORD PTR tv363[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+56]
	jbe	$LN4@Update
$LN26@Update:
; Line 1140
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv203[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _inArchive$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	push	edx
	mov	eax, DWORD PTR tv203[ebp]
	push	eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74831[ebp], eax
	cmp	DWORD PTR ___result__$74831[ebp], 0
	je	SHORT $LN2@Update
	mov	ecx, DWORD PTR ___result__$74831[ebp]
	mov	DWORD PTR $T76246[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76246[ebp]
	jmp	$LN15@Update
$LN2@Update:
; Line 1141
	mov	edx, DWORD PTR _inArchive$[ebp]
	mov	eax, DWORD PTR _inArchive$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	sub	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx+76]
	sbb	edx, DWORD PTR [eax+60]
	mov	DWORD PTR _embStubSize$74834[ebp], ecx
	mov	DWORD PTR _embStubSize$74834[ebp+4], edx
; Line 1142
	push	0
	mov	eax, DWORD PTR _embStubSize$74834[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _embStubSize$74834[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize
	mov	DWORD PTR ___result__$74835[ebp], eax
	cmp	DWORD PTR ___result__$74835[ebp], 0
	je	SHORT $LN1@Update
	mov	edx, DWORD PTR ___result__$74835[ebp]
	mov	DWORD PTR $T76247[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76247[ebp]
	jmp	$LN15@Update
$LN1@Update:
; Line 1143
	mov	eax, DWORD PTR _embStubSize$74834[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _embStubSize$74834[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::COutArchive::MoveCurPos
$LN4@Update:
; Line 1153
	cmp	DWORD PTR _inArchive$[ebp], 0
	je	SHORT $LN19@Update
	mov	edx, DWORD PTR _inArchive$[ebp]
	add	edx, 108				; 0000006cH
	mov	DWORD PTR tv244[ebp], edx
	jmp	SHORT $LN20@Update
$LN19@Update:
	mov	DWORD PTR tv244[ebp], 0
$LN20@Update:
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	mov	edx, DWORD PTR _compressionMethodMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputItems$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inArchive$[ebp]
	push	edx
	lea	eax, DWORD PTR _outArchive$[ebp]
	push	eax
	call	?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::Update2
	mov	DWORD PTR $T76248[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	eax, DWORD PTR $T76248[ebp]
$LN15@Update:
; Line 1154
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN32@Update:
	DD	3
	DD	$LN31@Update
$LN31@Update:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN27@Update
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN28@Update
	DD	-136					; ffffff78H
	DD	80					; 00000050H
	DD	$LN29@Update
$LN29@Update:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN28@Update:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN27@Update:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$0:
	lea	ecx, DWORD PTR _outStream$[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$1:
	lea	ecx, DWORD PTR _outStreamReal$74800[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$2:
	mov	eax, DWORD PTR $T76240[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _outArchive$[ebp]
	jmp	??1COutArchive@NZip@NArchive@@QAE@XZ
__ehhandler$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NZip::Update
PUBLIC	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
PUBLIC	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
PUBLIC	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv145 = -24						; size = 8
tv129 = -16						; size = 4
tv128 = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::CanUpdate, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@CanUpdate
; Line 172
	xor	al, al
	jmp	$LN6@CanUpdate
$LN5@CanUpdate:
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [edx+60], 0
	jg	SHORT $LN4@CanUpdate
	jl	SHORT $LN8@CanUpdate
	mov	eax, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [eax+56], 0
	jae	SHORT $LN4@CanUpdate
$LN8@CanUpdate:
; Line 174
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN4@CanUpdate:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+60]
	jg	SHORT $LN3@CanUpdate
	jl	SHORT $LN9@CanUpdate
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+56]
	jae	SHORT $LN3@CanUpdate
$LN9@CanUpdate:
; Line 176
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN3@CanUpdate:
; Line 180
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR tv145[ebp+4], edx
	mov	eax, DWORD PTR tv145[ebp]
	or	eax, DWORD PTR tv145[ebp+4]
	je	SHORT $LN2@CanUpdate
; Line 181
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN2@CanUpdate:
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CanUpdate
; Line 184
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN1@CanUpdate:
; Line 185
	mov	al, 1
$LN6@CanUpdate:
; Line 186
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::CanUpdate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ PROC ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN1@GetEmbedde
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [edx+44]
	jmp	SHORT $LN2@GetEmbedde
$LN1@GetEmbedde:
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax+20]
	sbb	esi, DWORD PTR [ecx+4]
	mov	eax, edx
	mov	edx, esi
$LN2@GetEmbedde:
; Line 66
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ENDP ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -16						; size = 4
tv72 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchiveInfo::ThereIsTail, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+36]
	cmp	ecx, DWORD PTR [eax+28]
	jb	SHORT $LN3@ThereIsTai
	ja	SHORT $LN5@ThereIsTai
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN3@ThereIsTai
$LN5@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ThereIsTai
$LN3@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ThereIsTai:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchiveInfo::ThereIsTail
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::AreThereErrors, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+122]
	test	ecx, ecx
	jne	SHORT $LN3@AreThereEr
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+125]
	test	eax, eax
	jne	SHORT $LN3@AreThereEr
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@AreThereEr
$LN3@AreThereEr:
	mov	DWORD PTR tv70[ebp], 1
$LN4@AreThereEr:
	mov	al, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::AreThereErrors
_TEXT	ENDS
PUBLIC	?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemOut>::Add
PUBLIC	?ReleaseOutStream@COutMemStream@@QAEXXZ		; COutMemStream::ReleaseOutStream
PUBLIC	?Delete@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Delete
PUBLIC	?Delete@?$CRecordVector@H@@QAEXI@Z		; CRecordVector<int>::Delete
PUBLIC	??A?$CRecordVector@H@@QAEAAHI@Z			; CRecordVector<int>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
PUBLIC	?Front@?$CRecordVector@PAX@@QAEAAPAXXZ		; CRecordVector<void *>::Front
PUBLIC	?SetRealStreamMode@COutMemStream@@QAEXXZ	; COutMemStream::SetRealStreamMode
PUBLIC	?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z ; COutMemStream::SetOutStream
PUBLIC	?WasUnlockEventSent@COutMemStream@@QBE_NXZ	; COutMemStream::WasUnlockEventSent
PUBLIC	?Front@?$CRecordVector@H@@QAEAAHXZ		; CRecordVector<int>::Front
PUBLIC	?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
PUBLIC	?GetBlockSize@CMemBlockManager@@QBEIXZ		; CMemBlockManager::GetBlockSize
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
PUBLIC	?Add@?$CRecordVector@H@@QAEIH@Z			; CRecordVector<int>::Add
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *
PUBLIC	?Reinit@CMtCompressProgress@@QAEXXZ		; CMtCompressProgress::Reinit
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z	; NArchive::NZip::CItem::operator=
PUBLIC	??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z	; NArchive::NZip::CItemEx::operator=
PUBLIC	??1CItemOut@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemOut::~CItemOut
PUBLIC	??0CItemOut@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemOut::CItemOut
PUBLIC	??0CItemEx@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemEx::CItemEx
PUBLIC	?Size@?$CRecordVector@H@@QBEIXZ			; CRecordVector<int>::Size
PUBLIC	?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ	; NArchive::NZip::CThreadInfo::CreateThread
PUBLIC	?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z ; CMtCompressProgress::Init
PUBLIC	??0CMtCompressProgress@@QAE@XZ			; CMtCompressProgress::CMtCompressProgress
PUBLIC	?CreateEvents@COutMemStream@@QAEHXZ		; COutMemStream::CreateEvents
PUBLIC	??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z	; COutMemStream::COutMemStream
PUBLIC	?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ	; NArchive::NZip::CThreadInfo::CreateEvents
PUBLIC	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
PUBLIC	??1CThreadInfo@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CThreadInfo::~CThreadInfo
PUBLIC	?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::Add
PUBLIC	??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CThreadInfo::CThreadInfo
PUBLIC	??1CMemBlocks2@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CMemBlocks2::~CMemBlocks2
PUBLIC	?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::Add
PUBLIC	??0CMemBlocks2@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CMemBlocks2::CMemBlocks2
PUBLIC	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
PUBLIC	??1CMtCompressProgressMixer@@QAE@XZ		; CMtCompressProgressMixer::~CMtCompressProgressMixer
PUBLIC	??1CMemBlockManagerMt@@QAE@XZ			; CMemBlockManagerMt::~CMemBlockManagerMt
PUBLIC	??1CMemRefs@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CMemRefs::~CMemRefs
PUBLIC	??1CThreads@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CThreads::~CThreads
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	??0?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::CRecordVector<int>
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
PUBLIC	??0CThreads@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CThreads::CThreads
PUBLIC	??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z ; NArchive::NZip::CMemRefs::CMemRefs
PUBLIC	??0CMemBlockManagerMt@@QAE@I@Z			; CMemBlockManagerMt::CMemBlockManagerMt
PUBLIC	??0CMtCompressProgressMixer@@QAE@XZ		; CMtCompressProgressMixer::CMtCompressProgressMixer
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0CMtProgressMixer@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMtProgressMixer::CMtProgressMixer
PUBLIC	??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>
PUBLIC	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
PUBLIC	?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z	; CMethodProps::Get_Lzma_NumThreads
PUBLIC	?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ	; CMethodProps::Get_BZip2_BlockSize
PUBLIC	?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z	; CMethodProps::Get_BZip2_NumThreads
PUBLIC	?AddProp_NumThreads@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_NumThreads
PUBLIC	?Front@?$CRecordVector@E@@QBEABEXZ		; CRecordVector<unsigned char>::Front
PUBLIC	??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::operator=
PUBLIC	??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetLocalFullSize
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??1CItemEx@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemEx::~CItemEx
PUBLIC	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItemEx::CItemEx
PUBLIC	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
PUBLIC	??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
PUBLIC	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	__$ArrayPad$
EXTRN	?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z:PROC ; NArchive::NZip::COutArchive::WriteCentralDir
EXTRN	?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z:PROC ; CMtCompressProgressMixer::SetRatioInfo
EXTRN	?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z:PROC ; COutMemStream::DetachData
EXTRN	?WriteToRealStream@COutMemStream@@QAEJXZ:PROC	; COutMemStream::WriteToRealStream
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z:PROC ; CMemBlocks::FreeOpt
EXTRN	?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z:PROC ; CMemBlocks::WriteToStream
EXTRN	?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z:PROC ; NArchive::NZip::COutArchive::CreateStreamForCompressing
EXTRN	?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z:PROC ; NArchive::NZip::COutArchive::PrepareWriteCompressedData
EXTRN	?Init@COutMemStream@@QAEXXZ:PROC		; COutMemStream::Init
EXTRN	?IsDir@CItem@NZip@NArchive@@QBE_NXZ:PROC	; NArchive::NZip::CItem::IsDir
EXTRN	?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z:PROC ; CMemBlockManagerMt::AllocateSpaceAlways
EXTRN	?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z:PROC ; CMtCompressProgressMixer::Init
EXTRN	??1CAddCommon@NZip@NArchive@@QAE@XZ:PROC	; NArchive::NZip::CAddCommon::~CAddCommon
EXTRN	?FindProp@CMethodProps@@QBEHK@Z:PROC		; CMethodProps::FindProp
EXTRN	??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:PROC ; NArchive::NZip::CAddCommon::CAddCommon
EXTRN	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:PROC ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
EXTRN	_IID_IArchiveUpdateCallbackFile:BYTE
EXTRN	__aulldiv:PROC
xdata$x	SEGMENT
__ehfuncinfo$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	019H
	DD	FLAT:__unwindtable$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$15
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$16
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$20
	DD	0cH
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$22
	DD	016H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$23
	DD	016H
	DD	FLAT:__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$24
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv787 = -1784						; size = 4
tv661 = -1777						; size = 1
tv481 = -1776						; size = 4
tv421 = -1772						; size = 4
tv400 = -1768						; size = 4
tv948 = -1764						; size = 4
tv353 = -1760						; size = 4
tv946 = -1756						; size = 4
tv356 = -1752						; size = 4
tv317 = -1748						; size = 4
tv1311 = -1744						; size = 8
tv1293 = -1736						; size = 8
tv175 = -1728						; size = 4
$T76319 = -1724						; size = 4
$T76318 = -1720						; size = 4
$T76317 = -1716						; size = 4
$T76316 = -1712						; size = 4
$T76315 = -1708						; size = 4
$T76314 = -1704						; size = 4
$T76311 = -1700						; size = 4
$T76308 = -1696						; size = 4
$T76307 = -1692						; size = 4
$T76306 = -1688						; size = 4
$T76305 = -1684						; size = 4
$T76304 = -1680						; size = 4
$T76303 = -1676						; size = 4
$T76302 = -1672						; size = 4
$T76299 = -1668						; size = 4
$T76298 = -1664						; size = 4
$T76297 = -1660						; size = 4
$T76294 = -1656						; size = 4
$T76293 = -1652						; size = 4
$T76292 = -1648						; size = 4
$T76291 = -1644						; size = 4
$T76288 = -1640						; size = 4
$T76287 = -1636						; size = 4
$T76286 = -1632						; size = 4
$T76283 = -1628						; size = 4
___result__$74527 = -1624				; size = 4
___result__$74524 = -1620				; size = 4
_memRef$74522 = -1616					; size = 4
___result__$74518 = -1612				; size = 4
___result__$74514 = -1608				; size = 4
_threadInfo$74513 = -1604				; size = 4
_t$74507 = -1600					; size = 4
_lastError$74504 = -1596				; size = 4
_result$74501 = -1592					; size = 4
_outStream$74500 = -1584				; size = 4
_thread$74497 = -1576					; size = 4
_outStream$74495 = -1568				; size = 4
_memRef$74492 = -1560					; size = 4
_isDir$74487 = -1553					; size = 1
_item$74478 = -1548					; size = 128
_itemEx$74477 = -1412					; size = 104
_ui$74476 = -1304					; size = 4
_threadInfo$74473 = -1300				; size = 4
_i$74469 = -1296					; size = 4
___result__$74466 = -1292				; size = 4
___result__$74460 = -1288				; size = 4
___result__$74457 = -1284				; size = 4
_res$74454 = -1280					; size = 4
_lock$74453 = -1272					; size = 4
_fileInStream$74452 = -1260				; size = 4
_item$74441 = -1248					; size = 128
_itemEx$74440 = -1112					; size = 104
_ui$74438 = -1004					; size = 4
_lastRealStreamItemIndex$ = -1000			; size = 4
_itemIndex$ = -996					; size = 4
_mtItemIndex$ = -992					; size = 4
___result__$74427 = -988				; size = 4
___result__$74419 = -984				; size = 4
___result__$74412 = -980				; size = 4
_threadInfo$74411 = -976				; size = 4
$T74407 = -972						; size = 200
_i$74403 = -772						; size = 4
$T74402 = -768						; size = 64
___result__$74395 = -704				; size = 4
_threadIndices$ = -696					; size = 12
_compressingCompletedEvents$ = -676			; size = 12
_threads$ = -656					; size = 12
_refs$ = -636						; size = 16
_memManager$ = -612					; size = 40
_mtCompressProgressMixer$ = -564			; size = 72
_progress$ = -484					; size = 4
_mtProgressMixerSpec$ = -476				; size = 4
_items$ = -468						; size = 12
_numLZMAThreads$74277 = -452				; size = 4
_fixedNumber$74276 = -441				; size = 1
_averageNumberOfBlocks$74272 = -436			; size = 8
_blockSize$74271 = -428					; size = 4
_averageSize$74270 = -424				; size = 8
_numBZip2Threads$74268 = -416				; size = 4
_fixedNumber$74267 = -405				; size = 1
_method$ = -398						; size = 1
_mtMode$ = -397						; size = 1
_kBlockSize$ = -396					; size = 4
_kMemPerThread$ = -392					; size = 4
_kNumMaxThreads$ = -388					; size = 4
_numThreads$ = -384					; size = 4
_options2$ = -376					; size = 72
_compressor$ = -296					; size = 112
_inputItem$74241 = -176					; size = 104
_ui$74238 = -68						; size = 4
_i$ = -64						; size = 4
_numBytesToCompress$ = -60				; size = 8
_numFilesToCompress$ = -52				; size = 8
_complexity$ = -40					; size = 8
_opCallback$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_inArchive$ = 12					; size = 4
_inputItems$ = 16					; size = 4
_updateItems$ = 20					; size = 4
_options$ = 24						; size = 4
_comment$ = 28						; size = 4
_updateCallback$ = 32					; size = 4
?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NZip::Update2
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 530
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1772				; 000006ecH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1784]
	mov	ecx, 443				; 000001bbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 531
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 532
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveUpdateCallbackFile
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 534
	mov	DWORD PTR _complexity$[ebp], 0
	mov	DWORD PTR _complexity$[ebp+4], 0
; Line 535
	mov	DWORD PTR _numFilesToCompress$[ebp], 0
	mov	DWORD PTR _numFilesToCompress$[ebp+4], 0
; Line 536
	mov	DWORD PTR _numBytesToCompress$[ebp], 0
	mov	DWORD PTR _numBytesToCompress$[ebp+4], 0
; Line 539
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN76@Update2
$LN75@Update2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN76@Update2:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN74@Update2
; Line 541
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$74238[ebp], eax
; Line 542
	mov	eax, DWORD PTR _ui$74238[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN73@Update2
; Line 544
	mov	edx, DWORD PTR _ui$74238[ebp]
	mov	eax, DWORD PTR _complexity$[ebp]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	adc	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], ecx
; Line 545
	mov	edx, DWORD PTR _ui$74238[ebp]
	mov	eax, DWORD PTR _numBytesToCompress$[ebp]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _numBytesToCompress$[ebp+4]
	adc	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _numBytesToCompress$[ebp], eax
	mov	DWORD PTR _numBytesToCompress$[ebp+4], ecx
; Line 546
	mov	edx, DWORD PTR _numFilesToCompress$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _numFilesToCompress$[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _numFilesToCompress$[ebp], edx
	mov	DWORD PTR _numFilesToCompress$[ebp+4], eax
; Line 552
	jmp	$LN72@Update2
$LN73@Update2:
; Line 554
	mov	ecx, DWORD PTR _ui$74238[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	lea	ecx, DWORD PTR _inputItem$74241[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 555
	lea	eax, DWORD PTR _inputItem$74241[ebp]
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
	test	eax, eax
	je	SHORT $LN71@Update2
; Line 556
	mov	DWORD PTR $T76283[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inputItem$74241[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76283[ebp]
	jmp	$LN77@Update2
$LN71@Update2:
; Line 557
	lea	ecx, DWORD PTR _inputItem$74241[ebp]
	call	?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetLocalFullSize
	add	eax, DWORD PTR _complexity$[ebp]
	adc	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], edx
; Line 559
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inputItem$74241[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
$LN72@Update2:
; Line 560
	mov	ecx, DWORD PTR _complexity$[ebp]
	add	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _complexity$[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _complexity$[ebp], ecx
	mov	DWORD PTR _complexity$[ebp+4], edx
; Line 561
	mov	eax, DWORD PTR _complexity$[ebp]
	add	eax, 46					; 0000002eH
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], ecx
; Line 562
	jmp	$LN75@Update2
$LN74@Update2:
; Line 564
	cmp	DWORD PTR _comment$[ebp], 0
	je	SHORT $LN70@Update2
; Line 565
	mov	ecx, DWORD PTR _comment$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	xor	edx, edx
	add	eax, DWORD PTR _complexity$[ebp]
	adc	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], edx
$LN70@Update2:
; Line 566
	mov	eax, DWORD PTR _complexity$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], ecx
; Line 567
	mov	esi, esp
	mov	edx, DWORD PTR _complexity$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 569
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 571
	mov	DWORD PTR _complexity$[ebp], 0
	mov	DWORD PTR _complexity$[ebp+4], 0
; Line 573
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 574
	cmp	DWORD PTR _options$[ebp], 0
	je	SHORT $LN69@Update2
; Line 575
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z
$LN69@Update2:
; Line 579
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _numThreads$[ebp], edx
; Line 580
	mov	DWORD PTR _kNumMaxThreads$[ebp], 64	; 00000040H
; Line 581
	cmp	DWORD PTR _numThreads$[ebp], 64		; 00000040H
	jbe	SHORT $LN68@Update2
; Line 582
	mov	DWORD PTR _numThreads$[ebp], 64		; 00000040H
$LN68@Update2:
; Line 583
	cmp	DWORD PTR _numThreads$[ebp], 64		; 00000040H
	jbe	SHORT $LN67@Update2
; Line 584
	mov	DWORD PTR _numThreads$[ebp], 64		; 00000040H
$LN67@Update2:
; Line 585
	cmp	DWORD PTR _numThreads$[ebp], 1
	jae	SHORT $LN66@Update2
; Line 586
	mov	DWORD PTR _numThreads$[ebp], 1
$LN66@Update2:
; Line 589
	mov	DWORD PTR _kMemPerThread$[ebp], 33554432 ; 02000000H
; Line 590
	mov	DWORD PTR _kBlockSize$[ebp], 65536	; 00010000H
; Line 592
	cmp	DWORD PTR _options$[ebp], 0
	je	SHORT $LN79@Update2
	cmp	DWORD PTR _numThreads$[ebp], 1
	jbe	SHORT $LN79@Update2
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN80@Update2
$LN79@Update2:
	mov	DWORD PTR tv175[ebp], 0
$LN80@Update2:
	mov	al, BYTE PTR tv175[ebp]
	mov	BYTE PTR _mtMode$[ebp], al
; Line 594
	cmp	DWORD PTR _numFilesToCompress$[ebp+4], 0
	ja	SHORT $LN65@Update2
	jb	SHORT $LN123@Update2
	cmp	DWORD PTR _numFilesToCompress$[ebp], 1
	ja	SHORT $LN65@Update2
$LN123@Update2:
; Line 595
	mov	BYTE PTR _mtMode$[ebp], 0
$LN65@Update2:
; Line 597
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 24					; 00000018H
	call	?Front@?$CRecordVector@E@@QBEABEXZ	; CRecordVector<unsigned char>::Front
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _method$[ebp], cl
; Line 598
	movzx	edx, BYTE PTR _mtMode$[ebp]
	test	edx, edx
	jne	SHORT $LN64@Update2
; Line 600
	push	13					; 0000000dH
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	test	eax, eax
	jge	SHORT $LN63@Update2
; Line 603
	movzx	eax, BYTE PTR _options2$[ebp+20]
	test	eax, eax
	jne	SHORT $LN61@Update2
	movzx	ecx, BYTE PTR _method$[ebp]
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $LN63@Update2
$LN61@Update2:
; Line 604
	mov	edx, DWORD PTR _numThreads$[ebp]
	push	edx
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
$LN63@Update2:
; Line 607
	jmp	$LN60@Update2
$LN64@Update2:
; Line 609
	movzx	eax, BYTE PTR _method$[ebp]
	test	eax, eax
	jne	SHORT $LN59@Update2
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	jne	SHORT $LN59@Update2
; Line 610
	mov	DWORD PTR _numThreads$[ebp], 1
$LN59@Update2:
; Line 611
	movzx	eax, BYTE PTR _method$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	$LN58@Update2
; Line 614
	lea	ecx, DWORD PTR _fixedNumber$74267[ebp]
	push	ecx
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z ; CMethodProps::Get_BZip2_NumThreads
	mov	DWORD PTR _numBZip2Threads$74268[ebp], eax
; Line 615
	movzx	edx, BYTE PTR _fixedNumber$74267[ebp]
	test	edx, edx
	jne	$LN57@Update2
; Line 617
	mov	eax, DWORD PTR _numFilesToCompress$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numFilesToCompress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numBytesToCompress$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _numBytesToCompress$[ebp]
	push	eax
	call	__aulldiv
	mov	DWORD PTR _averageSize$74270[ebp], eax
	mov	DWORD PTR _averageSize$74270[ebp+4], edx
; Line 618
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_BZip2_BlockSize
	mov	DWORD PTR _blockSize$74271[ebp], eax
; Line 619
	mov	ecx, DWORD PTR _blockSize$74271[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _averageSize$74270[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _averageSize$74270[ebp]
	push	ecx
	call	__aulldiv
	add	eax, 1
	adc	edx, 0
	mov	DWORD PTR _averageNumberOfBlocks$74272[ebp], eax
	mov	DWORD PTR _averageNumberOfBlocks$74272[ebp+4], edx
; Line 620
	mov	DWORD PTR _numBZip2Threads$74268[ebp], 32 ; 00000020H
; Line 621
	mov	edx, DWORD PTR _numBZip2Threads$74268[ebp]
	xor	eax, eax
	mov	DWORD PTR tv1293[ebp], edx
	mov	DWORD PTR tv1293[ebp+4], eax
	mov	ecx, DWORD PTR _averageNumberOfBlocks$74272[ebp+4]
	cmp	ecx, DWORD PTR tv1293[ebp+4]
	ja	SHORT $LN56@Update2
	jb	SHORT $LN124@Update2
	mov	edx, DWORD PTR _averageNumberOfBlocks$74272[ebp]
	cmp	edx, DWORD PTR tv1293[ebp]
	jae	SHORT $LN56@Update2
$LN124@Update2:
; Line 622
	mov	eax, DWORD PTR _averageNumberOfBlocks$74272[ebp]
	mov	DWORD PTR _numBZip2Threads$74268[ebp], eax
$LN56@Update2:
; Line 623
	mov	ecx, DWORD PTR _numBZip2Threads$74268[ebp]
	push	ecx
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
$LN57@Update2:
; Line 625
	mov	eax, DWORD PTR _numThreads$[ebp]
	xor	edx, edx
	div	DWORD PTR _numBZip2Threads$74268[ebp]
	mov	DWORD PTR _numThreads$[ebp], eax
$LN58@Update2:
; Line 627
	movzx	edx, BYTE PTR _method$[ebp]
	cmp	edx, 14					; 0000000eH
	jne	SHORT $LN55@Update2
; Line 631
	lea	eax, DWORD PTR _fixedNumber$74276[ebp]
	push	eax
	lea	ecx, DWORD PTR _options2$[ebp]
	call	?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z ; CMethodProps::Get_Lzma_NumThreads
	mov	DWORD PTR _numLZMAThreads$74277[ebp], eax
; Line 632
	mov	eax, DWORD PTR _numThreads$[ebp]
	xor	edx, edx
	div	DWORD PTR _numLZMAThreads$74277[ebp]
	mov	DWORD PTR _numThreads$[ebp], eax
$LN55@Update2:
; Line 634
	mov	ecx, DWORD PTR _numThreads$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv1311[ebp], ecx
	mov	DWORD PTR tv1311[ebp+4], edx
	mov	eax, DWORD PTR tv1311[ebp+4]
	cmp	eax, DWORD PTR _numFilesToCompress$[ebp+4]
	jb	SHORT $LN54@Update2
	ja	SHORT $LN125@Update2
	mov	ecx, DWORD PTR tv1311[ebp]
	cmp	ecx, DWORD PTR _numFilesToCompress$[ebp]
	jbe	SHORT $LN54@Update2
$LN125@Update2:
; Line 635
	mov	edx, DWORD PTR _numFilesToCompress$[ebp]
	mov	DWORD PTR _numThreads$[ebp], edx
$LN54@Update2:
; Line 636
	cmp	DWORD PTR _numThreads$[ebp], 1
	ja	SHORT $LN60@Update2
; Line 637
	mov	BYTE PTR _mtMode$[ebp], 0
$LN60@Update2:
; Line 640
	movzx	eax, BYTE PTR _mtMode$[ebp]
	test	eax, eax
	jne	SHORT $LN52@Update2
; Line 645
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _comment$[ebp]
	push	edx
	lea	eax, DWORD PTR _options2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputItems$[ebp]
	push	edx
	mov	eax, DWORD PTR _inArchive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z ; NArchive::NZip::Update2St
	mov	DWORD PTR $T76286[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76286[ebp]
	jmp	$LN77@Update2
$LN52@Update2:
; Line 650
	lea	ecx, DWORD PTR _items$[ebp]
	call	??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 652
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76288[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T76288[ebp], 0
	je	SHORT $LN81@Update2
	mov	ecx, DWORD PTR $T76288[ebp]
	call	??0CMtProgressMixer@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR tv317[ebp], eax
	jmp	SHORT $LN82@Update2
$LN81@Update2:
	mov	DWORD PTR tv317[ebp], 0
$LN82@Update2:
	mov	edx, DWORD PTR tv317[ebp]
	mov	DWORD PTR $T76287[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T76287[ebp]
	mov	DWORD PTR _mtProgressMixerSpec$[ebp], eax
; Line 653
	mov	ecx, DWORD PTR _mtProgressMixerSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 654
	push	1
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _mtProgressMixerSpec$[ebp]
	call	?Create@CMtProgressMixer@NZip@NArchive@@QAEXPAUIProgress@@_N@Z ; NArchive::NZip::CMtProgressMixer::Create
; Line 656
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??0CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 657
	mov	ecx, DWORD PTR _mtProgressMixerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z ; CMtCompressProgressMixer::Init
; Line 659
	push	65536					; 00010000H
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??0CMemBlockManagerMt@@QAE@I@Z		; CMemBlockManagerMt::CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 660
	lea	ecx, DWORD PTR _memManager$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z ; NArchive::NZip::CMemRefs::CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 662
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??0CThreads@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 663
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 664
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 667
	push	0
	mov	edx, DWORD PTR _numThreads$[ebp]
	shl	edx, 9
	push	edx
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z ; CMemBlockManagerMt::AllocateSpaceAlways
	mov	DWORD PTR ___result__$74395[ebp], eax
	cmp	DWORD PTR ___result__$74395[ebp], 0
	je	$LN51@Update2
	mov	eax, DWORD PTR ___result__$74395[ebp]
	mov	DWORD PTR $T76291[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76291[ebp]
	jmp	$LN77@Update2
$LN51@Update2:
; Line 668
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN50@Update2
$LN49@Update2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN50@Update2:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN48@Update2
; Line 669
	lea	ecx, DWORD PTR $T74402[ebp]
	call	??0CMemBlocks2@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemBlocks2::CMemBlocks2
	mov	DWORD PTR tv356[ebp], eax
	mov	edx, DWORD PTR tv356[ebp]
	mov	DWORD PTR tv946[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv946[ebp]
	push	eax
	lea	ecx, DWORD PTR _refs$[ebp+4]
	call	?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T74402[ebp]
	call	??1CMemBlocks2@NZip@NArchive@@QAE@XZ
	jmp	SHORT $LN49@Update2
$LN48@Update2:
; Line 672
	mov	DWORD PTR _i$74403[ebp], 0
	jmp	SHORT $LN47@Update2
$LN46@Update2:
	mov	ecx, DWORD PTR _i$74403[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74403[ebp], ecx
$LN47@Update2:
	mov	edx, DWORD PTR _i$74403[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	SHORT $LN45@Update2
; Line 673
	lea	eax, DWORD PTR _options2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T74407[ebp]
	call	??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CThreadInfo::CThreadInfo
	mov	DWORD PTR tv353[ebp], eax
	mov	ecx, DWORD PTR tv353[ebp]
	mov	DWORD PTR tv948[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR tv948[ebp]
	push	edx
	lea	ecx, DWORD PTR _threads$[ebp]
	call	?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T74407[ebp]
	call	??1CThreadInfo@NZip@NArchive@@QAE@XZ
	jmp	SHORT $LN46@Update2
$LN45@Update2:
; Line 675
	mov	DWORD PTR _i$74403[ebp], 0
	jmp	SHORT $LN44@Update2
$LN43@Update2:
	mov	eax, DWORD PTR _i$74403[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74403[ebp], eax
$LN44@Update2:
	mov	ecx, DWORD PTR _i$74403[ebp]
	cmp	ecx, DWORD PTR _numThreads$[ebp]
	jae	$LN42@Update2
; Line 677
	mov	edx, DWORD PTR _i$74403[ebp]
	push	edx
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
	mov	DWORD PTR _threadInfo$74411[ebp], eax
; Line 681
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	call	?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ ; NArchive::NZip::CThreadInfo::CreateEvents
	mov	DWORD PTR ___result__$74412[ebp], eax
	cmp	DWORD PTR ___result__$74412[ebp], 0
	je	$LN41@Update2
	mov	eax, DWORD PTR ___result__$74412[ebp]
	mov	DWORD PTR $T76292[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76292[ebp]
	jmp	$LN77@Update2
$LN41@Update2:
; Line 682
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76294[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T76294[ebp], 0
	je	SHORT $LN83@Update2
	lea	ecx, DWORD PTR _memManager$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T76294[ebp]
	call	??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z ; COutMemStream::COutMemStream
	mov	DWORD PTR tv400[ebp], eax
	jmp	SHORT $LN84@Update2
$LN83@Update2:
	mov	DWORD PTR tv400[ebp], 0
$LN84@Update2:
	mov	edx, DWORD PTR tv400[ebp]
	mov	DWORD PTR $T76293[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR _threadInfo$74411[ebp]
	mov	ecx, DWORD PTR $T76293[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 683
	mov	edx, DWORD PTR _threadInfo$74411[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?CreateEvents@COutMemStream@@QAEHXZ	; COutMemStream::CreateEvents
	mov	DWORD PTR ___result__$74419[ebp], eax
	cmp	DWORD PTR ___result__$74419[ebp], 0
	je	$LN40@Update2
	mov	eax, DWORD PTR ___result__$74419[ebp]
	mov	DWORD PTR $T76297[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76297[ebp]
	jmp	$LN77@Update2
$LN40@Update2:
; Line 684
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 685
	mov	eax, DWORD PTR _threadInfo$74411[ebp]
	mov	BYTE PTR [eax+184], 1
; Line 686
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76299[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T76299[ebp], 0
	je	SHORT $LN85@Update2
	mov	ecx, DWORD PTR $T76299[ebp]
	call	??0CMtCompressProgress@@QAE@XZ
	mov	DWORD PTR tv421[ebp], eax
	jmp	SHORT $LN86@Update2
$LN85@Update2:
	mov	DWORD PTR tv421[ebp], 0
$LN86@Update2:
	mov	ecx, DWORD PTR tv421[ebp]
	mov	DWORD PTR $T76298[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR _threadInfo$74411[ebp]
	mov	eax, DWORD PTR $T76298[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 687
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	add	ecx, 20					; 00000014H
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 688
	mov	eax, DWORD PTR _i$74403[ebp]
	push	eax
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _threadInfo$74411[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z ; CMtCompressProgress::Init
; Line 689
	mov	eax, DWORD PTR _threadInfo$74411[ebp]
	mov	DWORD PTR [eax+192], 0
; Line 690
	mov	ecx, DWORD PTR _threadInfo$74411[ebp]
	call	?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ ; NArchive::NZip::CThreadInfo::CreateThread
	mov	DWORD PTR ___result__$74427[ebp], eax
	cmp	DWORD PTR ___result__$74427[ebp], 0
	je	$LN39@Update2
	mov	ecx, DWORD PTR ___result__$74427[ebp]
	mov	DWORD PTR $T76302[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76302[ebp]
	jmp	$LN77@Update2
$LN39@Update2:
; Line 691
	jmp	$LN43@Update2
$LN42@Update2:
; Line 693
	mov	DWORD PTR _mtItemIndex$[ebp], 0
; Line 695
	mov	DWORD PTR _itemIndex$[ebp], 0
; Line 696
	mov	DWORD PTR _lastRealStreamItemIndex$[ebp], -1
$LN38@Update2:
; Line 698
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
	cmp	DWORD PTR _itemIndex$[ebp], eax
	jae	$LN37@Update2
; Line 700
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	eax, DWORD PTR _numThreads$[ebp]
	jae	$LN36@Update2
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
	cmp	DWORD PTR _mtItemIndex$[ebp], eax
	jae	$LN36@Update2
; Line 702
	mov	edx, DWORD PTR _mtItemIndex$[ebp]
	mov	DWORD PTR tv481[ebp], edx
	mov	eax, DWORD PTR _mtItemIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mtItemIndex$[ebp], eax
	mov	ecx, DWORD PTR tv481[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$74438[ebp], eax
; Line 703
	mov	edx, DWORD PTR _ui$74438[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN35@Update2
; Line 704
	jmp	SHORT $LN38@Update2
$LN35@Update2:
; Line 705
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
; Line 706
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??0CItemOut@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CItemOut::CItemOut
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
; Line 707
	mov	ecx, DWORD PTR _ui$74438[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	je	SHORT $LN34@Update2
; Line 709
	mov	eax, DWORD PTR _ui$74438[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN33@Update2
; Line 710
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN33@Update2:
; Line 712
	jmp	$LN32@Update2
$LN34@Update2:
; Line 714
	mov	edx, DWORD PTR _ui$74438[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z
; Line 715
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
	test	eax, eax
	je	$LN31@Update2
; Line 716
	mov	DWORD PTR $T76303[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76303[ebp]
	jmp	$LN77@Update2
$LN31@Update2:
; Line 717
	lea	edx, DWORD PTR _itemEx$74440[ebp]
	push	edx
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
; Line 718
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN32@Update2
; Line 719
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN32@Update2:
; Line 721
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
; Line 723
	mov	ecx, DWORD PTR _mtProgressMixerSpec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 60					; 0000003cH
	push	edx
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
; Line 724
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _ui$74438[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$74454[ebp], eax
; Line 725
	cmp	DWORD PTR _res$74454[ebp], 1
	jne	$LN29@Update2
; Line 727
	mov	eax, DWORD PTR _ui$74438[ebp]
	mov	ecx, DWORD PTR _complexity$[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _complexity$[ebp+4]
	adc	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _complexity$[ebp], ecx
	mov	DWORD PTR _complexity$[ebp+4], edx
; Line 728
	mov	eax, DWORD PTR _complexity$[ebp]
	add	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], ecx
; Line 729
	mov	edx, DWORD PTR _complexity$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mtProgressMixerSpec$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset
; Line 730
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74457[ebp], eax
	cmp	DWORD PTR ___result__$74457[ebp], 0
	je	$LN28@Update2
	mov	eax, DWORD PTR ___result__$74457[ebp]
	mov	DWORD PTR $T76304[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76304[ebp]
	jmp	$LN77@Update2
$LN28@Update2:
; Line 731
	mov	ecx, DWORD PTR _mtItemIndex$[ebp]
	sub	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _refs$[ebp+4]
	call	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
	mov	BYTE PTR [eax+57], 1
; Line 732
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN29@Update2:
; Line 734
	mov	edx, DWORD PTR _res$74454[ebp]
	mov	DWORD PTR ___result__$74460[ebp], edx
	cmp	DWORD PTR ___result__$74460[ebp], 0
	je	$LN27@Update2
	mov	eax, DWORD PTR ___result__$74460[ebp]
	mov	DWORD PTR $T76305[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76305[ebp]
	jmp	$LN77@Update2
$LN27@Update2:
; Line 735
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	$LN26@Update2
; Line 736
	mov	DWORD PTR $T76306[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76306[ebp]
	jmp	$LN77@Update2
$LN26@Update2:
; Line 737
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74466[ebp], eax
	cmp	DWORD PTR ___result__$74466[ebp], 0
	je	$LN25@Update2
	mov	eax, DWORD PTR ___result__$74466[ebp]
	mov	DWORD PTR $T76307[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76307[ebp]
	jmp	$LN77@Update2
$LN25@Update2:
; Line 738
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _lock$74453[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
; Line 740
	mov	DWORD PTR _i$74469[ebp], 0
	jmp	SHORT $LN24@Update2
$LN23@Update2:
	mov	ecx, DWORD PTR _i$74469[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74469[ebp], ecx
$LN24@Update2:
	mov	edx, DWORD PTR _i$74469[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	$LN22@Update2
; Line 742
	mov	eax, DWORD PTR _i$74469[ebp]
	push	eax
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
	mov	DWORD PTR _threadInfo$74473[ebp], eax
; Line 743
	mov	ecx, DWORD PTR _threadInfo$74473[ebp]
	movzx	edx, BYTE PTR [ecx+184]
	test	edx, edx
	je	$LN21@Update2
; Line 745
	mov	eax, DWORD PTR _threadInfo$74473[ebp]
	mov	BYTE PTR [eax+184], 0
; Line 746
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	push	ecx
	mov	ecx, DWORD PTR _threadInfo$74473[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 750
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 752
	mov	edx, DWORD PTR _threadInfo$74473[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?Init@COutMemStream@@QAEXXZ		; COutMemStream::Init
; Line 753
	mov	eax, DWORD PTR _threadInfo$74473[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Reinit@CMtCompressProgress@@QAEXXZ	; CMtCompressProgress::Reinit
; Line 754
	mov	ecx, DWORD PTR _threadInfo$74473[ebp]
	add	ecx, 4
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
; Line 755
	mov	ecx, DWORD PTR _mtItemIndex$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _threadInfo$74473[ebp]
	mov	DWORD PTR [edx+188], ecx
; Line 757
	mov	ecx, DWORD PTR _threadInfo$74473[ebp]
	add	ecx, 8
	call	??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *
	push	eax
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 758
	mov	eax, DWORD PTR _i$74469[ebp]
	push	eax
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
; Line 759
	jmp	SHORT $LN22@Update2
$LN21@Update2:
; Line 761
	jmp	$LN23@Update2
$LN22@Update2:
; Line 762
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _item$74441[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN36@Update2:
; Line 765
	mov	ecx, DWORD PTR _itemIndex$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _refs$[ebp+4]
	call	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
	movzx	edx, BYTE PTR [eax+57]
	test	edx, edx
	je	SHORT $LN20@Update2
; Line 767
	mov	eax, DWORD PTR _itemIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _itemIndex$[ebp], eax
; Line 768
	jmp	$LN38@Update2
$LN20@Update2:
; Line 771
	mov	ecx, DWORD PTR _itemIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$74476[ebp], eax
; Line 773
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 774
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??0CItemOut@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CItemOut::CItemOut
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 775
	mov	edx, DWORD PTR _ui$74476[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	je	SHORT $LN18@Update2
	mov	ecx, DWORD PTR _ui$74476[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	$LN19@Update2
$LN18@Update2:
; Line 777
	mov	eax, DWORD PTR _ui$74476[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z
; Line 778
	lea	edx, DWORD PTR _itemEx$74477[ebp]
	push	edx
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
	test	eax, eax
	je	$LN17@Update2
; Line 779
	mov	DWORD PTR $T76308[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76308[ebp]
	jmp	$LN77@Update2
$LN17@Update2:
; Line 780
	lea	eax, DWORD PTR _itemEx$74477[ebp]
	push	eax
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
$LN19@Update2:
; Line 783
	mov	ecx, DWORD PTR _ui$74476[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN16@Update2
; Line 785
	mov	eax, DWORD PTR _ui$74476[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN87@Update2
	mov	edx, DWORD PTR _ui$74476[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR tv661[ebp], al
	jmp	SHORT $LN88@Update2
$LN87@Update2:
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv661[ebp], al
$LN88@Update2:
	mov	cl, BYTE PTR tv661[ebp]
	mov	BYTE PTR _isDir$74487[ebp], cl
; Line 786
	movzx	edx, BYTE PTR _isDir$74487[ebp]
	test	edx, edx
	je	SHORT $LN15@Update2
; Line 788
	lea	eax, DWORD PTR _item$74478[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$74476[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::WriteDirHeader
; Line 790
	jmp	$LN14@Update2
$LN15@Update2:
; Line 792
	mov	ecx, DWORD PTR _lastRealStreamItemIndex$[ebp]
	cmp	ecx, DWORD PTR _itemIndex$[ebp]
	jge	SHORT $LN13@Update2
; Line 794
	mov	edx, DWORD PTR _itemIndex$[ebp]
	mov	DWORD PTR _lastRealStreamItemIndex$[ebp], edx
; Line 795
	lea	eax, DWORD PTR _item$74478[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$74476[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader
; Line 797
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _ui$74476[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	push	ecx
	lea	ecx, DWORD PTR _item$74478[ebp+32]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData
$LN13@Update2:
; Line 800
	mov	edx, DWORD PTR _itemIndex$[ebp]
	push	edx
	lea	ecx, DWORD PTR _refs$[ebp+4]
	call	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
	mov	DWORD PTR _memRef$74492[ebp], eax
; Line 801
	mov	eax, DWORD PTR _memRef$74492[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	$LN12@Update2
; Line 803
	lea	ecx, DWORD PTR _outStream$74495[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
; Line 804
	lea	ecx, DWORD PTR _outStream$74495[ebp]
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing
; Line 805
	lea	ecx, DWORD PTR _outStream$74495[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	push	eax
	mov	ecx, DWORD PTR _memRef$74492[ebp]
	call	?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z ; CMemBlocks::WriteToStream
; Line 806
	lea	edx, DWORD PTR _item$74478[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$74476[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	call	?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader
; Line 811
	lea	eax, DWORD PTR _item$74478[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+22]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _memRef$74492[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult
; Line 812
	lea	edx, DWORD PTR _item$74478[ebp]
	push	edx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
; Line 814
	lea	eax, DWORD PTR _memManager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memRef$74492[ebp]
	call	?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::FreeOpt
; Line 815
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _outStream$74495[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Line 816
	jmp	$LN14@Update2
$LN12@Update2:
; Line 819
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	?Front@?$CRecordVector@H@@QAEAAHXZ	; CRecordVector<int>::Front
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
	mov	DWORD PTR _thread$74497[ebp], eax
; Line 820
	mov	edx, DWORD PTR _thread$74497[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?WasUnlockEventSent@COutMemStream@@QBE_NXZ ; COutMemStream::WasUnlockEventSent
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@Update2
; Line 822
	lea	ecx, DWORD PTR _outStream$74500[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
; Line 823
	lea	ecx, DWORD PTR _outStream$74500[ebp]
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing
; Line 824
	lea	ecx, DWORD PTR _outStream$74500[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	mov	ecx, DWORD PTR _thread$74497[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z ; COutMemStream::SetOutStream
; Line 825
	mov	edx, DWORD PTR _thread$74497[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?SetRealStreamMode@COutMemStream@@QAEXXZ ; COutMemStream::SetRealStreamMode
; Line 826
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _outStream$74500[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
$LN10@Update2:
; Line 830
	mov	esi, esp
	push	-1
	push	0
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	?Front@?$CRecordVector@PAX@@QAEAAPAXXZ	; CRecordVector<void *>::Front
	push	eax
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$74501[ebp], eax
; Line 831
	cmp	DWORD PTR _result$74501[ebp], -1
	jne	$LN9@Update2
; Line 833
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lastError$74504[ebp], eax
; Line 834
	cmp	DWORD PTR _lastError$74504[ebp], 0
	je	SHORT $LN89@Update2
	mov	eax, DWORD PTR _lastError$74504[ebp]
	mov	DWORD PTR tv787[ebp], eax
	jmp	SHORT $LN90@Update2
$LN89@Update2:
	mov	DWORD PTR tv787[ebp], -2147467259	; 80004005H
$LN90@Update2:
	mov	ecx, DWORD PTR tv787[ebp]
	mov	DWORD PTR $T76311[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76311[ebp]
	jmp	$LN77@Update2
$LN9@Update2:
; Line 836
	mov	edx, DWORD PTR _result$74501[ebp]
	mov	DWORD PTR _t$74507[ebp], edx
; Line 837
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	cmp	DWORD PTR _t$74507[ebp], eax
	jb	$LN8@Update2
; Line 838
	mov	DWORD PTR $T76314[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76314[ebp]
	jmp	$LN77@Update2
$LN8@Update2:
; Line 840
	mov	eax, DWORD PTR _t$74507[ebp]
	push	eax
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
	mov	DWORD PTR _threadInfo$74513[ebp], eax
; Line 841
	mov	ecx, DWORD PTR _threadInfo$74513[ebp]
	add	ecx, 32					; 00000020H
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 842
	mov	edx, DWORD PTR _threadInfo$74513[ebp]
	mov	BYTE PTR [edx+184], 1
; Line 843
	mov	eax, DWORD PTR _threadInfo$74513[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR ___result__$74514[ebp], ecx
	cmp	DWORD PTR ___result__$74514[ebp], 0
	je	$LN7@Update2
	mov	edx, DWORD PTR ___result__$74514[ebp]
	mov	DWORD PTR $T76315[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76315[ebp]
	jmp	$LN77@Update2
$LN7@Update2:
; Line 844
	mov	eax, DWORD PTR _t$74507[ebp]
	push	eax
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	?Delete@?$CRecordVector@H@@QAEXI@Z	; CRecordVector<int>::Delete
; Line 845
	mov	ecx, DWORD PTR _t$74507[ebp]
	push	ecx
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 846
	cmp	DWORD PTR _t$74507[ebp], 0
	jne	$LN6@Update2
; Line 848
	mov	edx, DWORD PTR _threadInfo$74513[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?WriteToRealStream@COutMemStream@@QAEJXZ ; COutMemStream::WriteToRealStream
	mov	DWORD PTR ___result__$74518[ebp], eax
	cmp	DWORD PTR ___result__$74518[ebp], 0
	je	$LN5@Update2
	mov	eax, DWORD PTR ___result__$74518[ebp]
	mov	DWORD PTR $T76316[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76316[ebp]
	jmp	$LN77@Update2
$LN5@Update2:
; Line 849
	mov	ecx, DWORD PTR _threadInfo$74513[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?ReleaseOutStream@COutMemStream@@QAEXXZ	; COutMemStream::ReleaseOutStream
; Line 850
	lea	edx, DWORD PTR _item$74478[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$74476[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	call	?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader
; Line 852
	lea	eax, DWORD PTR _item$74478[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+22]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _threadInfo$74513[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	call	?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult
; Line 853
	lea	edx, DWORD PTR _item$74478[ebp]
	push	edx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
; Line 855
	jmp	$LN14@Update2
$LN6@Update2:
; Line 857
	mov	eax, DWORD PTR _threadInfo$74513[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	lea	ecx, DWORD PTR _refs$[ebp+4]
	call	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
	mov	DWORD PTR _memRef$74522[ebp], eax
; Line 858
	mov	edx, DWORD PTR _memRef$74522[ebp]
	push	edx
	mov	eax, DWORD PTR _threadInfo$74513[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z ; COutMemStream::DetachData
; Line 859
	mov	ecx, DWORD PTR _threadInfo$74513[ebp]
	add	ecx, 160				; 000000a0H
	mov	edx, DWORD PTR _memRef$74522[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
; Line 860
	mov	edx, DWORD PTR _memRef$74522[ebp]
	mov	BYTE PTR [edx+56], 1
; Line 861
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN14@Update2:
; Line 866
	jmp	$LN3@Update2
$LN16@Update2:
; Line 868
	lea	eax, DWORD PTR _complexity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	push	eax
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	lea	ecx, DWORD PTR _item$74478[ebp]
	push	ecx
	mov	edx, DWORD PTR _ui$74476[ebp]
	push	edx
	lea	eax, DWORD PTR _itemEx$74477[ebp]
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	call	?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z ; NArchive::NZip::UpdateItemOldData
	mov	DWORD PTR ___result__$74524[ebp], eax
	cmp	DWORD PTR ___result__$74524[ebp], 0
	je	$LN3@Update2
	mov	eax, DWORD PTR ___result__$74524[ebp]
	mov	DWORD PTR $T76317[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76317[ebp]
	jmp	$LN77@Update2
$LN3@Update2:
; Line 870
	lea	ecx, DWORD PTR _item$74478[ebp]
	push	ecx
	lea	ecx, DWORD PTR _items$[ebp]
	call	?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemOut>::Add
; Line 871
	mov	edx, DWORD PTR _complexity$[ebp]
	add	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _complexity$[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _complexity$[ebp], edx
	mov	DWORD PTR _complexity$[ebp+4], eax
; Line 872
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexity$[ebp]
	push	edx
	mov	eax, DWORD PTR _mtProgressMixerSpec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetProgressOffset@CMtProgressMixer2@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::CMtProgressMixer2::SetProgressOffset
; Line 873
	mov	ecx, DWORD PTR _itemIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _itemIndex$[ebp], ecx
; Line 874
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _item$74478[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN38@Update2
$LN37@Update2:
; Line 875
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ; CMtCompressProgressMixer::SetRatioInfo
	mov	DWORD PTR ___result__$74527[ebp], eax
	cmp	DWORD PTR ___result__$74527[ebp], 0
	je	$LN1@Update2
	mov	edx, DWORD PTR ___result__$74527[ebp]
	mov	DWORD PTR $T76318[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76318[ebp]
	jmp	$LN77@Update2
$LN1@Update2:
; Line 876
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	lea	ecx, DWORD PTR _items$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z ; NArchive::NZip::COutArchive::WriteCentralDir
; Line 877
	mov	DWORD PTR $T76319[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _refs$[ebp]
	call	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _memManager$[ebp]
	call	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	call	??1CMtCompressProgressMixer@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _options2$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T76319[ebp]
$LN77@Update2:
; Line 879
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN151@Update2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1784				; 000006f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	1
$LN151@Update2:
	DD	23					; 00000017H
	DD	$LN150@Update2
$LN150@Update2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN126@Update2
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN127@Update2
	DD	-176					; ffffff50H
	DD	104					; 00000068H
	DD	$LN128@Update2
	DD	-296					; fffffed8H
	DD	112					; 00000070H
	DD	$LN129@Update2
	DD	-376					; fffffe88H
	DD	72					; 00000048H
	DD	$LN130@Update2
	DD	-405					; fffffe6bH
	DD	1
	DD	$LN131@Update2
	DD	-441					; fffffe47H
	DD	1
	DD	$LN132@Update2
	DD	-468					; fffffe2cH
	DD	12					; 0000000cH
	DD	$LN133@Update2
	DD	-484					; fffffe1cH
	DD	4
	DD	$LN134@Update2
	DD	-564					; fffffdccH
	DD	72					; 00000048H
	DD	$LN135@Update2
	DD	-612					; fffffd9cH
	DD	40					; 00000028H
	DD	$LN136@Update2
	DD	-636					; fffffd84H
	DD	16					; 00000010H
	DD	$LN137@Update2
	DD	-656					; fffffd70H
	DD	12					; 0000000cH
	DD	$LN138@Update2
	DD	-676					; fffffd5cH
	DD	12					; 0000000cH
	DD	$LN139@Update2
	DD	-696					; fffffd48H
	DD	12					; 0000000cH
	DD	$LN140@Update2
	DD	-1112					; fffffba8H
	DD	104					; 00000068H
	DD	$LN141@Update2
	DD	-1248					; fffffb20H
	DD	128					; 00000080H
	DD	$LN142@Update2
	DD	-1260					; fffffb14H
	DD	4
	DD	$LN143@Update2
	DD	-1272					; fffffb08H
	DD	4
	DD	$LN144@Update2
	DD	-1412					; fffffa7cH
	DD	104					; 00000068H
	DD	$LN145@Update2
	DD	-1548					; fffff9f4H
	DD	128					; 00000080H
	DD	$LN146@Update2
	DD	-1568					; fffff9e0H
	DD	4
	DD	$LN147@Update2
	DD	-1584					; fffff9d0H
	DD	4
	DD	$LN148@Update2
$LN148@Update2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN147@Update2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN146@Update2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN145@Update2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	0
$LN144@Update2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN143@Update2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN142@Update2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN141@Update2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	0
$LN140@Update2:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN139@Update2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	69					; 00000045H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN138@Update2:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN137@Update2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN136@Update2:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN135@Update2:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN134@Update2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN133@Update2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN132@Update2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN131@Update2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN130@Update2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN129@Update2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN128@Update2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN127@Update2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN126@Update2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$0:
	lea	ecx, DWORD PTR _opCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$1:
	lea	ecx, DWORD PTR _inputItem$74241[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _compressor$[ebp]
	jmp	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _options2$[ebp]
	jmp	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _items$[ebp]
	jmp	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$5:
	mov	eax, DWORD PTR $T76288[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$6:
	lea	ecx, DWORD PTR _progress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$7:
	lea	ecx, DWORD PTR _mtCompressProgressMixer$[ebp]
	jmp	??1CMtCompressProgressMixer@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$8:
	lea	ecx, DWORD PTR _memManager$[ebp]
	jmp	??1CMemBlockManagerMt@@QAE@XZ		; CMemBlockManagerMt::~CMemBlockManagerMt
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$9:
	lea	ecx, DWORD PTR _refs$[ebp]
	jmp	??1CMemRefs@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMemRefs::~CMemRefs
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$10:
	lea	ecx, DWORD PTR _threads$[ebp]
	jmp	??1CThreads@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CThreads::~CThreads
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$11:
	lea	ecx, DWORD PTR _compressingCompletedEvents$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$12:
	lea	ecx, DWORD PTR _threadIndices$[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$13:
	lea	ecx, DWORD PTR $T74402[ebp]
	jmp	??1CMemBlocks2@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$14:
	lea	ecx, DWORD PTR $T74407[ebp]
	jmp	??1CThreadInfo@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$15:
	mov	eax, DWORD PTR $T76294[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$16:
	mov	eax, DWORD PTR $T76299[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$17:
	lea	ecx, DWORD PTR _itemEx$74440[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$18:
	lea	ecx, DWORD PTR _item$74441[ebp]
	jmp	??1CItemOut@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$19:
	lea	ecx, DWORD PTR _fileInStream$74452[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$20:
	lea	ecx, DWORD PTR _lock$74453[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$21:
	lea	ecx, DWORD PTR _itemEx$74477[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$22:
	lea	ecx, DWORD PTR _item$74478[ebp]
	jmp	??1CItemOut@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$23:
	lea	ecx, DWORD PTR _outStream$74495[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z$24:
	lea	ecx, DWORD PTR _outStream$74500[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1784]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update2@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NZip::Update2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ PROC	; NWindows::NSynchronization::CBaseEvent::operator void *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ENDP	; NWindows::NSynchronization::CBaseEvent::operator void *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetBlockSize@CMemBlockManager@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBlockSize@CMemBlockManager@@QBEIXZ PROC		; CMemBlockManager::GetBlockSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBlockSize@CMemBlockManager@@QBEIXZ ENDP		; CMemBlockManager::GetBlockSize
_TEXT	ENDS
PUBLIC	??1CMemBlockManager@@QAE@XZ			; CMemBlockManager::~CMemBlockManager
PUBLIC	??0CSemaphore@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CSemaphore::CSemaphore
PUBLIC	??0CMemBlockManager@@QAE@I@Z			; CMemBlockManager::CMemBlockManager
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMemBlockManagerMt@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1
__ehfuncinfo$??0CMemBlockManagerMt@@QAE@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMemBlockManagerMt@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMemBlockManagerMt@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_blockSize$ = 8						; size = 4
??0CMemBlockManagerMt@@QAE@I@Z PROC			; CMemBlockManagerMt::CMemBlockManagerMt, COMDAT
; _this$ = ecx
; Line 35
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMemBlockManagerMt@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _blockSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMemBlockManager@@QAE@I@Z		; CMemBlockManager::CMemBlockManager
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::CSemaphore
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMemBlockManager@@QAE@XZ		; CMemBlockManager::~CMemBlockManager
__unwindfunclet$??0CMemBlockManagerMt@@QAE@I@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
__ehhandler$??0CMemBlockManagerMt@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMemBlockManagerMt@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMemBlockManagerMt@@QAE@I@Z ENDP			; CMemBlockManagerMt::CMemBlockManagerMt
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CSemaphore@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSemaphore@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CSemaphore::CSemaphore, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSemaphore@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CSemaphore::CSemaphore
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMemBlockManager@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_blockSize$ = 8						; size = 4
??0CMemBlockManager@@QAE@I@Z PROC			; CMemBlockManager::CMemBlockManager, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMemBlockManager@@QAE@I@Z ENDP			; CMemBlockManager::CMemBlockManager
_TEXT	ENDS
EXTRN	?FreeSpace@CMemBlockManager@@QAEXXZ:PROC	; CMemBlockManager::FreeSpace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMemBlockManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMemBlockManager@@QAE@XZ PROC			; CMemBlockManager::~CMemBlockManager, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSpace@CMemBlockManager@@QAEXXZ	; CMemBlockManager::FreeSpace
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemBlockManager@@QAE@XZ ENDP			; CMemBlockManager::~CMemBlockManager
_TEXT	ENDS
PUBLIC	??1CSemaphore@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CSemaphore::~CSemaphore
EXTRN	?FreeSpace@CMemBlockManagerMt@@QAEXXZ:PROC	; CMemBlockManagerMt::FreeSpace
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMemBlockManagerMt@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2
__ehfuncinfo$??1CMemBlockManagerMt@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CMemBlockManagerMt@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMemBlockManagerMt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMemBlockManagerMt@@QAE@XZ PROC			; CMemBlockManagerMt::~CMemBlockManagerMt, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMemBlockManagerMt@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSpace@CMemBlockManagerMt@@QAEXXZ	; CMemBlockManagerMt::FreeSpace
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::~CSemaphore
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemBlockManager@@QAE@XZ		; CMemBlockManager::~CMemBlockManager
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMemBlockManager@@QAE@XZ		; CMemBlockManager::~CMemBlockManager
__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
__unwindfunclet$??1CMemBlockManagerMt@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CSemaphore@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CSemaphore::~CSemaphore
__ehhandler$??1CMemBlockManagerMt@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMemBlockManagerMt@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMemBlockManagerMt@@QAE@XZ ENDP			; CMemBlockManagerMt::~CMemBlockManagerMt
PUBLIC	?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CSemaphore@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSemaphore@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CSemaphore::~CSemaphore, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CSemaphore::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSemaphore@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CSemaphore::~CSemaphore
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CSemaphore::Close, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CSemaphore::Close
_TEXT	ENDS
PUBLIC	?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateEvents@COutMemStream@@QAEHXZ
_TEXT	SEGMENT
___result__$69591 = -8					; size = 4
_this$ = -4						; size = 4
?CreateEvents@COutMemStream@@QAEHXZ PROC		; COutMemStream::CreateEvents, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 36
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
	mov	DWORD PTR ___result__$69591[ebp], eax
	cmp	DWORD PTR ___result__$69591[ebp], 0
	je	SHORT $LN1@CreateEven
	mov	eax, DWORD PTR ___result__$69591[ebp]
	jmp	SHORT $LN2@CreateEven
$LN1@CreateEven:
; Line 37
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
$LN2@CreateEven:
; Line 38
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateEvents@COutMemStream@@QAEHXZ ENDP		; COutMemStream::CreateEvents
_TEXT	ENDS
PUBLIC	?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated
EXTRN	_AutoResetEvent_CreateNotSignaled@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 79
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 80
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CreateIfNo
; Line 81
	xor	eax, eax
	jmp	SHORT $LN2@CreateIfNo
$LN1@CreateIfNo:
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_AutoResetEvent_CreateNotSignaled@4
$LN2@CreateIfNo:
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ PROC ; NWindows::NSynchronization::CBaseEvent::IsCreated, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ENDP ; NWindows::NSynchronization::CBaseEvent::IsCreated
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z PROC	; COutMemStream::SetOutStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 43
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 44
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetOutStream@COutMemStream@@QAEXPAUIOutStream@@@Z ENDP	; COutMemStream::SetOutStream
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ	; CMyComPtr<IOutStream>::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseOutStream@COutMemStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseOutStream@COutMemStream@@QAEXXZ PROC		; COutMemStream::ReleaseOutStream, COMDAT
; _this$ = ecx
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ; CMyComPtr<IOutStream>::Release
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 56
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseOutStream@COutMemStream@@QAEXXZ ENDP		; COutMemStream::ReleaseOutStream
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??1CMemLockBlocks@@QAE@XZ			; CMemLockBlocks::~CMemLockBlocks
PUBLIC	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CMemLockBlocks@@QAE@XZ			; CMemLockBlocks::CMemLockBlocks
PUBLIC	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
PUBLIC	??_7COutMemStream@@6B@				; COutMemStream::`vftable'
PUBLIC	??0IOutStream@@QAE@XZ				; IOutStream::IOutStream
PUBLIC	??_R4COutMemStream@@6B@				; COutMemStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutMemStream@@@8			; COutMemStream `RTTI Type Descriptor'
PUBLIC	??_R3COutMemStream@@8				; COutMemStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutMemStream@@8				; COutMemStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutMemStream@@8			; COutMemStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z ; COutMemStream::QueryInterface
PUBLIC	?AddRef@COutMemStream@@UAGKXZ			; COutMemStream::AddRef
PUBLIC	?Release@COutMemStream@@UAGKXZ			; COutMemStream::Release
EXTRN	?Write@COutMemStream@@UAGJPBXIPAI@Z:PROC	; COutMemStream::Write
EXTRN	?Seek@COutMemStream@@UAGJ_JIPA_K@Z:PROC		; COutMemStream::Seek
EXTRN	?SetSize@COutMemStream@@UAGJ_K@Z:PROC		; COutMemStream::SetSize
;	COMDAT ??_R1A@?0A@EA@COutMemStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutMemStream@@8 DD FLAT:??_R0?AVCOutMemStream@@@8 ; COutMemStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutMemStream@@8
rdata$r	ENDS
;	COMDAT ??_R2COutMemStream@@8
rdata$r	SEGMENT
??_R2COutMemStream@@8 DD FLAT:??_R1A@?0A@EA@COutMemStream@@8 ; COutMemStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutMemStream@@8
rdata$r	SEGMENT
??_R3COutMemStream@@8 DD 00H				; COutMemStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2COutMemStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutMemStream@@@8
_DATA	SEGMENT
??_R0?AVCOutMemStream@@@8 DD FLAT:??_7type_info@@6B@	; COutMemStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutMemStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutMemStream@@6B@
rdata$r	SEGMENT
??_R4COutMemStream@@6B@ DD 00H				; COutMemStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutMemStream@@@8
	DD	FLAT:??_R3COutMemStream@@8
rdata$r	ENDS
;	COMDAT ??_7COutMemStream@@6B@
CONST	SEGMENT
??_7COutMemStream@@6B@ DD FLAT:??_R4COutMemStream@@6B@	; COutMemStream::`vftable'
	DD	FLAT:?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutMemStream@@UAGKXZ
	DD	FLAT:?Release@COutMemStream@@UAGKXZ
	DD	FLAT:?Write@COutMemStream@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@COutMemStream@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@COutMemStream@@UAGJ_K@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$3
__ehfuncinfo$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_memManager$ = 8					; size = 4
??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z PROC	; COutMemStream::COutMemStream, COMDAT
; _this$ = ecx
; Line 58
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutMemStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _memManager$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0CMemLockBlocks@@QAE@XZ		; CMemLockBlocks::CMemLockBlocks
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1CMemLockBlocks@@QAE@XZ
__unwindfunclet$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutMemStream@@QAE@PAVCMemBlockManagerMt@@@Z ENDP	; COutMemStream::COutMemStream
PUBLIC	??0CMemBlocks@@QAE@XZ				; CMemBlocks::CMemBlocks
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemLockBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMemLockBlocks@@QAE@XZ PROC				; CMemLockBlocks::CMemLockBlocks, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMemBlocks@@QAE@XZ			; CMemBlocks::CMemBlocks
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMemLockBlocks@@QAE@XZ ENDP				; CMemLockBlocks::CMemLockBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMemBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMemBlocks@@QAE@XZ PROC				; CMemBlocks::CMemBlocks, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMemBlocks@@QAE@XZ ENDP				; CMemBlocks::CMemBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?WasUnlockEventSent@COutMemStream@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WasUnlockEventSent@COutMemStream@@QBE_NXZ PROC		; COutMemStream::WasUnlockEventSent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+21]
	mov	esp, ebp
	pop	ebp
	ret	0
?WasUnlockEventSent@COutMemStream@@QBE_NXZ ENDP		; COutMemStream::WasUnlockEventSent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetRealStreamMode@COutMemStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetRealStreamMode@COutMemStream@@QAEXXZ PROC		; COutMemStream::SetRealStreamMode, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 1
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetRealStreamMode@COutMemStream@@QAEXXZ ENDP		; COutMemStream::SetRealStreamMode
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z PROC ; COutMemStream::QueryInterface, COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@3
$LN1@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutMemStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutMemStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutMemStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutMemStream@@UAGKXZ PROC			; COutMemStream::AddRef, COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutMemStream@@UAGKXZ ENDP			; COutMemStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCOutMemStream@@QAEPAXI@Z			; COutMemStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COutMemStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76462 = -8						; size = 4
$T76461 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutMemStream@@UAGKXZ PROC			; COutMemStream::Release, COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76462[ebp], edx
	mov	eax, DWORD PTR $T76462[ebp]
	mov	DWORD PTR $T76461[ebp], eax
	cmp	DWORD PTR $T76461[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T76461[ebp]
	call	??_GCOutMemStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutMemStream@@UAGKXZ ENDP			; COutMemStream::Release
_TEXT	ENDS
PUBLIC	??_7IOutStream@@6B@				; IOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4IOutStream@@6B@				; IOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutStream@@6B@
rdata$r	SEGMENT
??_R4IOutStream@@6B@ DD 00H				; IOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutStream@@@8
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7IOutStream@@6B@
CONST	SEGMENT
??_7IOutStream@@6B@ DD FLAT:??_R4IOutStream@@6B@	; IOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutStream@@QAE@XZ PROC				; IOutStream::IOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutStream@@QAE@XZ ENDP				; IOutStream::IOutStream
_TEXT	ENDS
PUBLIC	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??1CMemBlocks@@QAE@XZ				; CMemBlocks::~CMemBlocks
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMemLockBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMemLockBlocks@@QAE@XZ PROC				; CMemLockBlocks::~CMemLockBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemBlocks@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemLockBlocks@@QAE@XZ ENDP				; CMemLockBlocks::~CMemLockBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMemBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMemBlocks@@QAE@XZ PROC				; CMemBlocks::~CMemBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemBlocks@@QAE@XZ ENDP				; CMemBlocks::~CMemBlocks
_TEXT	ENDS
PUBLIC	??1COutMemStream@@QAE@XZ			; COutMemStream::~COutMemStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutMemStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutMemStream@@QAEPAXI@Z PROC			; COutMemStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutMemStream@@QAE@XZ		; COutMemStream::~COutMemStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutMemStream@@QAEPAXI@Z ENDP			; COutMemStream::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?Free@COutMemStream@@QAEXXZ:PROC		; COutMemStream::Free
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
xdata$x	SEGMENT
__ehfuncinfo$??1COutMemStream@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1COutMemStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1COutMemStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutMemStream@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutMemStream@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1COutMemStream@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1COutMemStream@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1COutMemStream@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutMemStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutMemStream@@QAE@XZ PROC				; COutMemStream::~COutMemStream, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutMemStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutMemStream@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutMemStream@@QAEXXZ		; COutMemStream::Free
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1CMemLockBlocks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutMemStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1COutMemStream@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1COutMemStream@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1CMemLockBlocks@@QAE@XZ
__unwindfunclet$??1COutMemStream@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1COutMemStream@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??1COutMemStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutMemStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutMemStream@@QAE@XZ ENDP				; COutMemStream::~COutMemStream
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progress$ = 8						; size = 4
_index$ = 12						; size = 4
?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z PROC ; CMtCompressProgress::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\progressmt.h
; Line 35
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 36
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 37
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 38
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CMtCompressProgress@@QAEXPAVCMtCompressProgressMixer@@H@Z ENDP ; CMtCompressProgress::Init
_TEXT	ENDS
EXTRN	?Reinit@CMtCompressProgressMixer@@QAEXH@Z:PROC	; CMtCompressProgressMixer::Reinit
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reinit@CMtCompressProgress@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reinit@CMtCompressProgress@@QAEXXZ PROC		; CMtCompressProgress::Reinit, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reinit@CMtCompressProgressMixer@@QAEXH@Z ; CMtCompressProgressMixer::Reinit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reinit@CMtCompressProgress@@QAEXXZ ENDP		; CMtCompressProgress::Reinit
_TEXT	ENDS
PUBLIC	?Get_Lzma_Algo@CMethodProps@@QBEIXZ		; CMethodProps::Get_Lzma_Algo
PUBLIC	?Get_NumThreads@CMethodProps@@QBEHXZ		; CMethodProps::Get_NumThreads
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z
_TEXT	SEGMENT
_numThreads$ = -8					; size = 4
_this$ = -4						; size = 4
_fixedNumber$ = 8					; size = 4
?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z PROC	; CMethodProps::Get_Lzma_NumThreads, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	eax, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [eax], 0
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_NumThreads@CMethodProps@@QBEHXZ	; CMethodProps::Get_NumThreads
	mov	DWORD PTR _numThreads$[ebp], eax
; Line 114
	cmp	DWORD PTR _numThreads$[ebp], 0
	jl	SHORT $LN1@Get_Lzma_N
; Line 116
	mov	ecx, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 117
	xor	eax, eax
	cmp	DWORD PTR _numThreads$[ebp], 2
	setge	al
	add	eax, 1
	jmp	SHORT $LN2@Get_Lzma_N
$LN1@Get_Lzma_N:
; Line 119
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Lzma_Algo@CMethodProps@@QBEIXZ	; CMethodProps::Get_Lzma_Algo
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 1
$LN2@Get_Lzma_N:
; Line 120
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z ENDP	; CMethodProps::Get_Lzma_NumThreads
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_NumThreads@CMethodProps@@QBEHXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_NumThreads@CMethodProps@@QBEHXZ PROC		; CMethodProps::Get_NumThreads, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 62
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_NumThr
; Line 63
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_NumThr
; Line 64
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_NumThr
$LN2@Get_NumThr:
; Line 65
	or	eax, -1
$LN3@Get_NumThr:
; Line 66
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_NumThreads@CMethodProps@@QBEHXZ ENDP		; CMethodProps::Get_NumThreads
_TEXT	ENDS
EXTRN	?GetLevel@CMethodProps@@QBEHXZ:PROC		; CMethodProps::GetLevel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_Lzma_Algo@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Lzma_Algo@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_Lzma_Algo, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 85
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 86
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_Lzma_A
; Line 87
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_Lzma_A
; Line 88
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_Lzma_A
$LN2@Get_Lzma_A:
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	xor	ecx, ecx
	cmp	eax, 5
	setge	cl
	mov	eax, ecx
$LN3@Get_Lzma_A:
; Line 90
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Lzma_Algo@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_Lzma_Algo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z
_TEXT	SEGMENT
_numThreads$ = -8					; size = 4
_this$ = -4						; size = 4
_fixedNumber$ = 8					; size = 4
?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z PROC	; CMethodProps::Get_BZip2_NumThreads, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	eax, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [eax], 0
; Line 125
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_NumThreads@CMethodProps@@QBEHXZ	; CMethodProps::Get_NumThreads
	mov	DWORD PTR _numThreads$[ebp], eax
; Line 126
	cmp	DWORD PTR _numThreads$[ebp], 0
	jl	SHORT $LN3@Get_BZip2_
; Line 128
	mov	ecx, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 129
	cmp	DWORD PTR _numThreads$[ebp], 1
	jge	SHORT $LN2@Get_BZip2_
	mov	eax, 1
	jmp	SHORT $LN4@Get_BZip2_
$LN2@Get_BZip2_:
; Line 130
	cmp	DWORD PTR _numThreads$[ebp], 64		; 00000040H
	jle	SHORT $LN1@Get_BZip2_
	mov	eax, 64					; 00000040H
	jmp	SHORT $LN4@Get_BZip2_
$LN1@Get_BZip2_:
; Line 131
	mov	eax, DWORD PTR _numThreads$[ebp]
	jmp	SHORT $LN4@Get_BZip2_
$LN3@Get_BZip2_:
; Line 133
	mov	eax, 1
$LN4@Get_BZip2_:
; Line 134
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_BZip2_NumThreads@CMethodProps@@QBEIAA_N@Z ENDP	; CMethodProps::Get_BZip2_NumThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
tv138 = -32						; size = 4
tv139 = -28						; size = 4
_level$ = -24						; size = 4
_kDicSizeMax$71419 = -20				; size = 4
_kDicSizeMin$71418 = -16				; size = 4
_blockSize$71417 = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_BZip2_BlockSize, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 139
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@Get_BZip2_@2
; Line 140
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN4@Get_BZip2_@2
; Line 142
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _blockSize$71417[ebp], eax
; Line 143
	mov	DWORD PTR _kDicSizeMin$71418[ebp], 100000 ; 000186a0H
; Line 144
	mov	DWORD PTR _kDicSizeMax$71419[ebp], 900000 ; 000dbba0H
; Line 145
	cmp	DWORD PTR _blockSize$71417[ebp], 100000	; 000186a0H
	jae	SHORT $LN2@Get_BZip2_@2
	mov	DWORD PTR _blockSize$71417[ebp], 100000	; 000186a0H
$LN2@Get_BZip2_@2:
; Line 146
	cmp	DWORD PTR _blockSize$71417[ebp], 900000	; 000dbba0H
	jbe	SHORT $LN1@Get_BZip2_@2
	mov	DWORD PTR _blockSize$71417[ebp], 900000	; 000dbba0H
$LN1@Get_BZip2_@2:
; Line 147
	mov	eax, DWORD PTR _blockSize$71417[ebp]
	jmp	SHORT $LN5@Get_BZip2_@2
$LN4@Get_BZip2_@2:
; Line 149
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	mov	DWORD PTR _level$[ebp], eax
; Line 150
	cmp	DWORD PTR _level$[ebp], 5
	jl	SHORT $LN9@Get_BZip2_@2
	mov	DWORD PTR tv139[ebp], 9
	jmp	SHORT $LN10@Get_BZip2_@2
$LN9@Get_BZip2_@2:
	cmp	DWORD PTR _level$[ebp], 1
	jl	SHORT $LN7@Get_BZip2_@2
	mov	ecx, DWORD PTR _level$[ebp]
	lea	edx, DWORD PTR [ecx+ecx-1]
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN8@Get_BZip2_@2
$LN7@Get_BZip2_@2:
	mov	DWORD PTR tv138[ebp], 1
$LN8@Get_BZip2_@2:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN10@Get_BZip2_@2:
	mov	eax, DWORD PTR tv139[ebp]
	imul	eax, 100000				; 000186a0H
$LN5@Get_BZip2_@2:
; Line 151
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_BZip2_BlockSize
_TEXT	ENDS
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numThreads$ = 8					; size = 4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_NumThreads, COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 171
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_NumThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ PROC ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipcompressionmode.h
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN3@IsRealAesM
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN3@IsRealAesM
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@IsRealAesM
$LN3@IsRealAesM:
	mov	DWORD PTR tv74[ebp], 0
$LN4@IsRealAesM:
	mov	al, BYTE PTR tv74[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ENDP ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@E@@QAE@XZ			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
PUBLIC	??1CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::~CBaseProps
PUBLIC	??0?$CRecordVector@E@@QAE@XZ			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
PUBLIC	??0CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::CBaseProps
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ PROC	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseProps@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::CRecordVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0AString@@QAE@XZ			; AString::AString
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+64], 0
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	DWORD PTR [edx+60], 0
; Line 57
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ENDP	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::CBaseProps
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::~CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::~CBaseProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	??0CItem@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemOut@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemOut@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemOut::CItemOut, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipout.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItem::CItem
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+120], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CItemOut@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemOut::CItemOut
_TEXT	ENDS
PUBLIC	??1CExtraBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraBlock::~CExtraBlock
PUBLIC	??1CLocalItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??0CExtraBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraBlock::CExtraBlock
PUBLIC	??0CLocalItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLocalItem::CLocalItem
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
xdata$x	SEGMENT
__unwindtable$??0CItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItem@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItem::CItem, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CLocalItem@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+58], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+93], 0
; Line 271
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+56], 0
; Line 272
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+57], 0
; Line 273
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??0CItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItem::CItem
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLocalItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLocalItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLocalItem::CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLocalItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLocalItem::CLocalItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T76581 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76581[ebp], ecx
	mov	edx, DWORD PTR $T76581[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CLocalItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLocalItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLocalItem::~CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CLocalItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtraBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraBlock::CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtraBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraBlock::CExtraBlock
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CExtraBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraBlock::~CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraBlock::~CExtraBlock
_TEXT	ENDS
EXTRN	?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ:PROC ; NArchive::NZip::COutArchive::SeekToCurPos
EXTRN	?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z:PROC ; NArchive::NZip::COutArchive::WriteLocalHeader
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z PROC ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipout.h
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 76
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToCurPos@COutArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::COutArchive::SeekToCurPos
; Line 78
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ENDP ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
_TEXT	ENDS
PUBLIC	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::CItemEx::GetLocalFullSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+96]
	xor	edi, edi
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+16]
	adc	edi, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	and	edx, 16					; 00000010H
	xor	eax, eax
	add	esi, edx
	adc	edi, eax
	mov	eax, esi
	mov	edx, edi
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::CItemEx::GetLocalFullSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::HasDescriptor, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 213
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::HasDescriptor
_TEXT	ENDS
PUBLIC	?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetEncrypted
PUBLIC	?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ	; NArchive::NZip::COutArchive::GetCurPos
PUBLIC	?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z	; NArchive::NZip::CLocalItem::SetUtf8
PUBLIC	?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CLocalItem::ClearFlags
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv195 = -2						; size = 1
_isDir$ = -1						; size = 1
_archive$ = 8						; size = 4
_options$ = 12						; size = 4
_ui$ = 16						; size = 4
_item$ = 20						; size = 4
?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z PROC ; NArchive::NZip::SetFileHeader
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 71
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+12], ecx
; Line 74
	mov	ecx, DWORD PTR _item$[ebp]
	call	?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CLocalItem::ClearFlags
; Line 76
	mov	edx, DWORD PTR _ui$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	je	$LN3@SetFileHea
; Line 78
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _isDir$[ebp], dl
; Line 79
	mov	eax, DWORD PTR _ui$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 80
	mov	ecx, DWORD PTR _ui$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	call	?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetUtf8
; Line 81
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+60], edx
; Line 82
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+24], edx
; Line 83
	mov	eax, DWORD PTR _ui$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	DWORD PTR [eax+100], edx
; Line 84
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+104], edx
	mov	DWORD PTR [ecx+108], eax
; Line 85
	mov	edx, DWORD PTR _ui$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+112], eax
	mov	DWORD PTR [edx+116], ecx
; Line 86
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+120], dl
; Line 88
	jmp	SHORT $LN2@SetFileHea
$LN3@SetFileHea:
; Line 89
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR _isDir$[ebp], al
$LN2@SetFileHea:
; Line 91
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx
; Line 92
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+57], 0
; Line 93
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+56], 63			; 0000003fH
; Line 95
	mov	ecx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [ecx+5], 0
; Line 97
	xor	edx, edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	WORD PTR [eax+58], dx
; Line 98
	movzx	ecx, BYTE PTR _isDir$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@SetFileHea
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	SHORT $LN6@SetFileHea
	mov	BYTE PTR tv195[ebp], 1
	jmp	SHORT $LN7@SetFileHea
$LN6@SetFileHea:
	mov	BYTE PTR tv195[ebp], 0
$LN7@SetFileHea:
	movzx	ecx, BYTE PTR tv195[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	call	?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetEncrypted
; Line 101
	movzx	edx, BYTE PTR _isDir$[ebp]
	test	edx, edx
	je	SHORT $LN4@SetFileHea
; Line 103
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+4], 20			; 00000014H
; Line 104
	xor	ecx, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 105
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 106
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN4@SetFileHea:
; Line 108
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ENDP ; NArchive::NZip::SetFileHeader
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ PROC	; NArchive::NZip::CLocalItem::ClearFlags, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearFlags@CLocalItem@NZip@NArchive@@QAEXXZ ENDP	; NArchive::NZip::CLocalItem::ClearFlags
_TEXT	ENDS
PUBLIC	?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z	; NArchive::NZip::CLocalItem::SetFlag
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_encrypted$ = 8						; size = 1
?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z PROC	; NArchive::NZip::CLocalItem::SetEncrypted, COMDAT
; _this$ = ecx
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _encrypted$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEncrypted@CLocalItem@NZip@NArchive@@QAEX_N@Z ENDP	; NArchive::NZip::CLocalItem::SetEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bitMask$ = 8						; size = 4
_enable$ = 12						; size = 1
?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z PROC	; NArchive::NZip::CLocalItem::SetFlag, COMDAT
; _this$ = ecx
; Line 231
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 232
	movzx	eax, BYTE PTR _enable$[ebp]
	test	eax, eax
	je	SHORT $LN2@SetFlag
; Line 233
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, DWORD PTR _bitMask$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax], dx
; Line 234
	jmp	SHORT $LN3@SetFlag
$LN2@SetFlag:
; Line 235
	mov	ecx, DWORD PTR _bitMask$[ebp]
	not	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
$LN3@SetFlag:
; Line 236
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ENDP	; NArchive::NZip::CLocalItem::SetFlag
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_isUtf8$ = 8						; size = 1
?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z PROC	; NArchive::NZip::CLocalItem::SetUtf8, COMDAT
; _this$ = ecx
; Line 242
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _isUtf8$[ebp]
	push	eax
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z ENDP	; NArchive::NZip::CLocalItem::SetUtf8
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::COutArchive::GetCurPos, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipout.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR [ecx+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::COutArchive::GetCurPos
_TEXT	ENDS
PUBLIC	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
PUBLIC	?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
PUBLIC	?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::SetSubBlock
PUBLIC	??0CExtraSubBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
PUBLIC	??0CWzAesExtra@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CWzAesExtra::CWzAesExtra
PUBLIC	?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CExtraBlock::Clear
xdata$x	SEGMENT
__unwindtable$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0
__ehfuncinfo$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_sb$73445 = -44						; size = 12
_wzAesField$73444 = -24					; size = 6
__$EHRec$ = -12						; size = 12
_compressingResult$ = 8					; size = 4
_isAesMode$ = 12					; size = 1
_aesKeyMode$ = 16					; size = 1
_item$ = 20						; size = 4
?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z PROC ; NArchive::NZip::SetItemInfoFromCompressingResult
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 112
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 113
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _compressingResult$[ebp]
	mov	dl, BYTE PTR [ecx+22]
	mov	BYTE PTR [eax+4], dl
; Line 114
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _compressingResult$[ebp]
	mov	dx, WORD PTR [ecx+20]
	mov	WORD PTR [eax+2], dx
; Line 115
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _compressingResult$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx
; Line 116
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _compressingResult$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
; Line 117
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _compressingResult$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+20], eax
; Line 119
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear
; Line 120
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear
; Line 122
	movzx	ecx, BYTE PTR _isAesMode$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@SetItemInf
; Line 124
	lea	ecx, DWORD PTR _wzAesField$73444[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 125
	mov	dl, BYTE PTR _aesKeyMode$[ebp]
	mov	BYTE PTR _wzAesField$73444[ebp+2], dl
; Line 126
	mov	eax, DWORD PTR _compressingResult$[ebp]
	mov	cx, WORD PTR [eax+20]
	mov	WORD PTR _wzAesField$73444[ebp+4], cx
; Line 127
	mov	edx, 99					; 00000063H
	mov	eax, DWORD PTR _item$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 128
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 129
	lea	ecx, DWORD PTR _sb$73445[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 130
	lea	edx, DWORD PTR _sb$73445[ebp]
	push	edx
	lea	ecx, DWORD PTR _wzAesField$73444[ebp]
	call	?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::SetSubBlock
; Line 131
	lea	eax, DWORD PTR _sb$73445[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
; Line 132
	lea	ecx, DWORD PTR _sb$73445[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
; Line 133
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sb$73445[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
$LN2@SetItemInf:
; Line 134
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetItemInf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN9@SetItemInf:
	DD	2
	DD	$LN8@SetItemInf
$LN8@SetItemInf:
	DD	-24					; ffffffe8H
	DD	6
	DD	$LN5@SetItemInf
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN6@SetItemInf
$LN6@SetItemInf:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN5@SetItemInf:
	DB	119					; 00000077H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z$0:
	lea	ecx, DWORD PTR _sb$73445[ebp]
	jmp	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
__ehhandler$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ENDP ; NArchive::NZip::SetItemInfoFromCompressingResult
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CWzAesExtra@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWzAesExtra@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CWzAesExtra::CWzAesExtra, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 3
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWzAesExtra@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CWzAesExtra::CWzAesExtra
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_sb$ = 8						; size = 4
?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z PROC ; NArchive::NZip::CWzAesExtra::SetSubBlock, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 64
	push	7
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 65
	mov	eax, 39169				; 00009901H
	mov	ecx, DWORD PTR _sb$[ebp]
	mov	WORD PTR [ecx], ax
; Line 66
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	DWORD PTR _p$[ebp], eax
; Line 67
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
; Line 68
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 69
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], 65			; 00000041H
; Line 70
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+3], 69			; 00000045H
; Line 71
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+4], al
; Line 72
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+5], al
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	sar	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+6], dl
; Line 74
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubBlock@CWzAesExtra@NZip@NArchive@@QBEXAAUCExtraSubBlock@23@@Z ENDP ; NArchive::NZip::CWzAesExtra::SetSubBlock
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ PROC		; NArchive::NZip::CExtraBlock::Clear, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ENDP		; NArchive::NZip::CExtraBlock::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtraSubBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtraSubBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
_TEXT	ENDS
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??0CThread@NWindows@@QAE@XZ			; NWindows::CThread::CThread
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_options$ = 8						; size = 4
??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z PROC ; NArchive::NZip::CThreadInfo::CThreadInfo, COMDAT
; _this$ = ecx
; Line 170
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CThread@NWindows@@QAE@XZ		; NWindows::CThread::CThread
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CThreadInfo@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ENDP ; NArchive::NZip::CThreadInfo::CThreadInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::CThread
_TEXT	ENDS
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ
_TEXT	SEGMENT
___result__$73490 = -8					; size = 4
_this$ = -4						; size = 4
?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ PROC	; NArchive::NZip::CThreadInfo::CreateEvents, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
	mov	DWORD PTR ___result__$73490[ebp], eax
	cmp	DWORD PTR ___result__$73490[ebp], 0
	je	SHORT $LN1@CreateEven@2
	mov	eax, DWORD PTR ___result__$73490[ebp]
	jmp	SHORT $LN2@CreateEven@2
$LN1@CreateEven@2:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated
$LN2@CreateEven@2:
; Line 176
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateEvents@CThreadInfo@NZip@NArchive@@QAEJXZ ENDP	; NArchive::NZip::CThreadInfo::CreateEvents
_TEXT	ENDS
PUBLIC	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z	; NWindows::CThread::Create
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ PROC	; NArchive::NZip::CThreadInfo::CreateThread, COMDAT
; _this$ = ecx
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?CoderThread@NZip@NArchive@@YGIPAX@Z ; NArchive::NZip::CoderThread
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateThread@CThreadInfo@NZip@NArchive@@QAEHXZ ENDP	; NArchive::NZip::CThreadInfo::CreateThread
_TEXT	ENDS
EXTRN	_Thread_Create@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startAddress$ = 8					; size = 4
_parameter$ = 12					; size = 4
?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z PROC		; NWindows::CThread::Create, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _parameter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_Thread_Create@12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ENDP		; NWindows::CThread::Create
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_threadCoderInfo$ = 8					; size = 4
?CoderThread@NZip@NArchive@@YGIPAX@Z PROC		; NArchive::NZip::CoderThread
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 212
	push	ebp
	mov	ebp, esp
; Line 213
	mov	ecx, DWORD PTR _threadCoderInfo$[ebp]
	call	?WaitAndCode@CThreadInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CThreadInfo::WaitAndCode
; Line 214
	xor	eax, eax
; Line 215
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CoderThread@NZip@NArchive@@YGIPAX@Z ENDP		; NArchive::NZip::CoderThread
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>
PUBLIC	?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CThreadInfo::StopWaitClose
PUBLIC	?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CThreadInfo>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CThreads@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CThreads@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CThreads@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CThreads@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_i$73592 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CThreads@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CThreads::~CThreads, COMDAT
; _this$ = ecx
; Line 222
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 223
	mov	DWORD PTR _i$73592[ebp], 0
	jmp	SHORT $LN3@CThreads
$LN2@CThreads:
	mov	eax, DWORD PTR _i$73592[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73592[ebp], eax
$LN3@CThreads:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CThreadInfo>::Size
	cmp	DWORD PTR _i$73592[ebp], eax
	jae	SHORT $LN4@CThreads
; Line 224
	mov	ecx, DWORD PTR _i$73592[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
	mov	ecx, eax
	call	?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CThreadInfo::StopWaitClose
	jmp	SHORT $LN2@CThreads
$LN4@CThreads:
; Line 225
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CThreads@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>
__ehhandler$??1CThreads@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CThreads@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CThreads@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CThreads::~CThreads
PUBLIC	?Wait@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Wait
PUBLIC	?StopWriting@COutMemStream@@QAEXJ@Z		; COutMemStream::StopWriting
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ PROC	; NArchive::NZip::CThreadInfo::StopWaitClose, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@StopWaitCl
; Line 184
	push	-2147467260				; 80004004H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?StopWriting@COutMemStream@@QAEXJ@Z	; COutMemStream::StopWriting
$LN2@StopWaitCl:
; Line 185
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@StopWaitCl
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
$LN1@StopWaitCl:
; Line 187
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wait@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Wait
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
; Line 189
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StopWaitClose@CThreadInfo@NZip@NArchive@@QAEXXZ ENDP	; NArchive::NZip::CThreadInfo::StopWaitClose
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Wait@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wait@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Wait, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Handle_WaitObject@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Wait@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Wait
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?StopWriting@COutMemStream@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_res$ = 8						; size = 4
?StopWriting@COutMemStream@@QAEXJ@Z PROC		; COutMemStream::StopWriting, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
; Line 88
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StopWriting@COutMemStream@@QAEXJ@Z ENDP		; COutMemStream::StopWriting
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMemBlocks2@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMemBlocks2@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMemBlocks2::CMemBlocks2, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 233
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMemLockBlocks@@QAE@XZ		; CMemLockBlocks::CMemLockBlocks
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+56], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+57], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMemBlocks2@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMemBlocks2::CMemBlocks2
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::CObjectVector<NArchive::NZip::CMemBlocks2>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_manager$ = 8						; size = 4
??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z PROC ; NArchive::NZip::CMemRefs::CMemRefs, COMDAT
; _this$ = ecx
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::CObjectVector<NArchive::NZip::CMemBlocks2>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMemRefs@NZip@NArchive@@QAE@PAVCMemBlockManagerMt@@@Z ENDP ; NArchive::NZip::CMemRefs::CMemRefs
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>
PUBLIC	?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMemRefs@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CMemRefs@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMemRefs@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMemRefs@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_i$73696 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMemRefs@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CMemRefs::~CMemRefs, COMDAT
; _this$ = ecx
; Line 243
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 244
	mov	DWORD PTR _i$73696[ebp], 0
	jmp	SHORT $LN3@CMemRefs
$LN2@CMemRefs:
	mov	eax, DWORD PTR _i$73696[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73696[ebp], eax
$LN3@CMemRefs:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::Size
	cmp	DWORD PTR _i$73696[ebp], eax
	jae	SHORT $LN4@CMemRefs
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _i$73696[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
	mov	ecx, eax
	call	?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemBlocks::FreeOpt
	jmp	SHORT $LN2@CMemRefs
$LN4@CMemRefs:
; Line 246
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMemRefs@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>
__ehhandler$??1CMemRefs@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMemRefs@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMemRefs@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CMemRefs::~CMemRefs
PUBLIC	?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CExtraBlock::HasWzAes
PUBLIC	?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks
PUBLIC	??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z	; NArchive::NZip::CUpdateRange::CUpdateRange
PUBLIC	?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ; NArchive::NZip::CInArchive::GetOffsetInStream
PUBLIC	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ	; NArchive::NZip::CItemEx::GetDataPosition
EXTRN	?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z:PROC ; NArchive::NZip::COutArchive::PrepareWriteCompressedData2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$73883 = -60					; size = 4
_range$73882 = -52					; size = 16
___result__$73879 = -32					; size = 4
_range$73878 = -24					; size = 16
___result__$73872 = -4					; size = 4
_archive$ = 8						; size = 4
_inArchive$ = 12					; size = 4
_itemEx$ = 16						; size = 4
_ui$ = 20						; size = 4
_item$ = 24						; size = 4
_progress$ = 28						; size = 4
_opCallback$ = 32					; size = 4
_complexity$ = 36					; size = 4
?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z PROC ; NArchive::NZip::UpdateItemOldData
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 345
	cmp	DWORD PTR _opCallback$[ebp], 0
	je	SHORT $LN7@UpdateItem
; Line 349
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _ui$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	mov	edx, DWORD PTR _opCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _opCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73872[ebp], eax
	cmp	DWORD PTR ___result__$73872[ebp], 0
	je	SHORT $LN7@UpdateItem
	mov	eax, DWORD PTR ___result__$73872[ebp]
	jmp	$LN8@UpdateItem
$LN7@UpdateItem:
; Line 352
	mov	eax, DWORD PTR _ui$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	$LN5@UpdateItem
; Line 354
	mov	ecx, DWORD PTR _item$[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@UpdateItem
; Line 355
	mov	eax, -2147467263			; 80004001H
	jmp	$LN8@UpdateItem
$LN4@UpdateItem:
; Line 359
	mov	eax, DWORD PTR _itemEx$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR _itemEx$[ebp]
	call	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition
	push	edx
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ; NArchive::NZip::CInArchive::GetOffsetInStream
	push	edx
	push	eax
	lea	ecx, DWORD PTR _range$73878[ebp]
	call	??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z ; NArchive::NZip::CUpdateRange::CUpdateRange
; Line 364
	mov	eax, DWORD PTR _ui$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 365
	mov	ecx, DWORD PTR _ui$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	call	?SetUtf8@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetUtf8
; Line 366
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+24], edx
; Line 367
	mov	eax, DWORD PTR _ui$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	DWORD PTR [eax+100], edx
; Line 368
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+104], edx
	mov	DWORD PTR [ecx+108], eax
; Line 369
	mov	edx, DWORD PTR _ui$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+112], eax
	mov	DWORD PTR [edx+116], ecx
; Line 370
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+120], dl
; Line 372
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks
; Line 373
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	call	?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks
; Line 374
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx
; Line 376
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	call	?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CExtraBlock::HasWzAes
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?PrepareWriteCompressedData2@COutArchive@NZip@NArchive@@QAEXI_K0_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData2
; Line 377
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteLocalHeader@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader
; Line 378
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	lea	edx, DWORD PTR _range$73878[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::WriteRange
	mov	DWORD PTR ___result__$73879[ebp], eax
	cmp	DWORD PTR ___result__$73879[ebp], 0
	je	SHORT $LN3@UpdateItem
	mov	eax, DWORD PTR ___result__$73879[ebp]
	jmp	$LN8@UpdateItem
$LN3@UpdateItem:
; Line 379
	mov	ecx, DWORD PTR _complexity$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _range$73878[ebp+8]
	mov	eax, DWORD PTR [ecx+4]
	adc	eax, DWORD PTR _range$73878[ebp+12]
	mov	ecx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
; Line 381
	jmp	$LN2@UpdateItem
$LN5@UpdateItem:
; Line 383
	mov	ecx, DWORD PTR _itemEx$[ebp]
	call	?GetLocalFullSize@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetLocalFullSize
	push	edx
	push	eax
	mov	edx, DWORD PTR _itemEx$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	push	ecx
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ; NArchive::NZip::CInArchive::GetOffsetInStream
	push	edx
	push	eax
	lea	ecx, DWORD PTR _range$73882[ebp]
	call	??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z ; NArchive::NZip::CUpdateRange::CUpdateRange
; Line 386
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?GetCurPos@COutArchive@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::COutArchive::GetCurPos
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+64], eax
	mov	DWORD PTR [ecx+68], edx
; Line 388
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	lea	eax, DWORD PTR _range$73882[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inArchive$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::WriteRange
	mov	DWORD PTR ___result__$73883[ebp], eax
	cmp	DWORD PTR ___result__$73883[ebp], 0
	je	SHORT $LN1@UpdateItem
	mov	eax, DWORD PTR ___result__$73883[ebp]
	jmp	SHORT $LN8@UpdateItem
$LN1@UpdateItem:
; Line 389
	mov	edx, DWORD PTR _complexity$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _range$73882[ebp+8]
	mov	ecx, DWORD PTR [edx+4]
	adc	ecx, DWORD PTR _range$73882[ebp+12]
	mov	edx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 390
	mov	eax, DWORD PTR _range$73882[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _range$73882[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?MoveCurPos@COutArchive@NZip@NArchive@@QAEX_K@Z ; NArchive::NZip::COutArchive::MoveCurPos
$LN2@UpdateItem:
; Line 392
	xor	eax, eax
$LN8@UpdateItem:
; Line 393
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@UpdateItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN13@UpdateItem:
	DD	2
	DD	$LN12@UpdateItem
$LN12@UpdateItem:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN10@UpdateItem
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN11@UpdateItem
$LN11@UpdateItem:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN10@UpdateItem:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z ENDP ; NArchive::NZip::UpdateItemOldData
_TEXT	ENDS
PUBLIC	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_e$ = -16						; size = 6
_this$ = -4						; size = 4
?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CExtraBlock::HasWzAes, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	lea	ecx, DWORD PTR _e$[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 139
	lea	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
; Line 140
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@HasWzAes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@HasWzAes:
	DD	1
	DD	$LN4@HasWzAes
$LN4@HasWzAes:
	DD	-16					; fffffff0H
	DD	6
	DD	$LN3@HasWzAes
$LN3@HasWzAes:
	DB	101					; 00000065H
	DB	0
?HasWzAes@CExtraBlock@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CExtraBlock::HasWzAes
_TEXT	ENDS
PUBLIC	?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
PUBLIC	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
PUBLIC	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z
_TEXT	SEGMENT
_i$72258 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z PROC ; NArchive::NZip::CExtraBlock::GetWzAes, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	DWORD PTR _i$72258[ebp], 0
	jmp	SHORT $LN4@GetWzAes
$LN3@GetWzAes:
	mov	eax, DWORD PTR _i$72258[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72258[ebp], eax
$LN4@GetWzAes:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	cmp	DWORD PTR _i$72258[ebp], eax
	jae	SHORT $LN2@GetWzAes
; Line 131
	mov	ecx, DWORD PTR _i$72258[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetWzAes
; Line 132
	mov	al, 1
	jmp	SHORT $LN5@GetWzAes
$LN1@GetWzAes:
; Line 133
	jmp	SHORT $LN3@GetWzAes
$LN2@GetWzAes:
	xor	al, al
$LN5@GetWzAes:
; Line 134
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ENDP ; NArchive::NZip::CExtraBlock::GetWzAes
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_sb$ = 8						; size = 4
?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z PROC ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _sb$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 39169				; 00009901H
	je	SHORT $LN4@ParseFromS
; Line 49
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN4@ParseFromS:
; Line 50
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 7
	jae	SHORT $LN3@ParseFromS
; Line 51
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN3@ParseFromS:
; Line 52
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	DWORD PTR _p$[ebp], eax
; Line 53
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
; Line 54
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN1@ParseFromS
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN2@ParseFromS
$LN1@ParseFromS:
; Line 55
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN2@ParseFromS:
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+2], dl
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+5]
	mov	WORD PTR [eax+4], dx
; Line 59
	mov	al, 1
$LN5@ParseFromS:
; Line 60
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ENDP ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
_TEXT	ENDS
PUBLIC	?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete
PUBLIC	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_i$72291 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ PROC ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _i$72291[ebp], eax
$LN3@RemoveUnkn:
	cmp	DWORD PTR _i$72291[ebp], 0
	je	SHORT $LN4@RemoveUnkn
; Line 184
	mov	eax, DWORD PTR _i$72291[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$72291[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _i$72291[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	movzx	edx, WORD PTR [eax]
	cmp	edx, 39169				; 00009901H
	je	SHORT $LN1@RemoveUnkn
; Line 186
	mov	eax, DWORD PTR _i$72291[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete
$LN1@RemoveUnkn:
; Line 187
	jmp	SHORT $LN3@RemoveUnkn
$LN4@RemoveUnkn:
; Line 188
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveUnknownSubBlocks@CExtraBlock@NZip@NArchive@@QAEXXZ ENDP ; NArchive::NZip::CExtraBlock::RemoveUnknownSubBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::CItemEx::GetDataPosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+64]
	adc	edx, DWORD PTR [ecx+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::CItemEx::GetDataPosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_offsetFromArc$ = 8					; size = 8
?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z PROC ; NArchive::NZip::CInArchive::GetOffsetInStream, COMDAT
; _this$ = ecx
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR _offsetFromArc$[ebp]
	mov	edx, DWORD PTR [eax+60]
	adc	edx, DWORD PTR _offsetFromArc$[ebp+4]
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetOffsetInStream@CInArchive@NZip@NArchive@@QBE_K_K@Z ENDP ; NArchive::NZip::CInArchive::GetOffsetInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 8
_size$ = 16						; size = 8
??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z PROC		; NArchive::NZip::CUpdateRange::CUpdateRange, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _position$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CUpdateRange@NZip@NArchive@@QAE@_K0@Z ENDP		; NArchive::NZip::CUpdateRange::CUpdateRange
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
___result__$73425 = -24					; size = 4
___result__$73423 = -20					; size = 4
_position$ = -12					; size = 8
_inStream$ = 8						; size = 4
_outArchive$ = 12					; size = 4
_range$ = 16						; size = 4
_progress$ = 20						; size = 4
?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z PROC ; NArchive::NZip::WriteRange
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 59
	mov	esi, esp
	lea	eax, DWORD PTR _position$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73423[ebp], eax
	cmp	DWORD PTR ___result__$73423[ebp], 0
	je	SHORT $LN2@WriteRange
	mov	eax, DWORD PTR ___result__$73423[ebp]
	jmp	SHORT $LN3@WriteRange
$LN2@WriteRange:
; Line 60
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _outArchive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z ; NArchive::NZip::CopyBlockToArchive
	mov	DWORD PTR ___result__$73425[ebp], eax
	cmp	DWORD PTR ___result__$73425[ebp], 0
	je	SHORT $LN1@WriteRange
	mov	eax, DWORD PTR ___result__$73425[ebp]
	jmp	SHORT $LN3@WriteRange
$LN1@WriteRange:
; Line 61
	mov	edx, DWORD PTR _range$[ebp]
	add	edx, 8
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@WriteRange:
; Line 62
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@WriteRange
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@WriteRange:
	DD	1
	DD	$LN6@WriteRange
$LN6@WriteRange:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@WriteRange
$LN5@WriteRange:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?WriteRange@NZip@NArchive@@YGJPAUIInStream@@AAVCOutArchive@12@ABUCUpdateRange@12@PAUICompressProgressInfo@@@Z ENDP ; NArchive::NZip::WriteRange
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
EXTRN	?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z:PROC ; NArchive::NZip::COutArchive::CreateStreamForCopying
xdata$x	SEGMENT
__unwindtable$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0
__ehfuncinfo$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76725 = -28						; size = 4
_outStream$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_size$ = 12						; size = 8
_outArchive$ = 20					; size = 4
_progress$ = 24						; size = 4
?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z PROC ; NArchive::NZip::CopyBlockToArchive
; Line 49
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 50
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 51
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _outArchive$[ebp]
	call	?CreateStreamForCopying@COutArchive@NZip@NArchive@@QAEXPAPAUISequentialOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCopying
; Line 52
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	call	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize
	mov	DWORD PTR $T76725[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T76725[ebp]
; Line 53
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CopyBlockT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN7@CopyBlockT:
	DD	1
	DD	$LN6@CopyBlockT
$LN6@CopyBlockT:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@CopyBlockT
$LN4@CopyBlockT:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _outStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CopyBlockToArchive@NZip@NArchive@@YGJPAUISequentialInStream@@_KAAVCOutArchive@12@PAUICompressProgressInfo@@@Z ENDP ; NArchive::NZip::CopyBlockToArchive
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_archive$ = 8						; size = 4
_options$ = 12						; size = 4
_ui$ = 16						; size = 4
_item$ = 20						; size = 4
?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z PROC ; NArchive::NZip::WriteDirHeader
; Line 397
	push	ebp
	mov	ebp, esp
; Line 398
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader
; Line 402
	push	0
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData
; Line 403
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
; Line 404
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ENDP ; NArchive::NZip::WriteDirHeader
_TEXT	ENDS
PUBLIC	?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetDescriptorMode
PUBLIC	__$ArrayPad$
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
xdata$x	SEGMENT
__ehfuncinfo$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv180 = -605						; size = 1
tv71 = -604						; size = 4
$T76752 = -600						; size = 4
$T76751 = -596						; size = 4
$T76750 = -592						; size = 4
$T76749 = -588						; size = 4
$T76748 = -584						; size = 4
$T76747 = -580						; size = 4
$T76746 = -576						; size = 4
$T76745 = -572						; size = 4
$T76742 = -568						; size = 4
$T76741 = -564						; size = 4
$T76738 = -560						; size = 4
$T76737 = -556						; size = 4
___result__$74158 = -552				; size = 4
___result__$74155 = -548				; size = 4
_complexity$74154 = -540				; size = 8
___result__$74150 = -528				; size = 4
___result__$74146 = -524				; size = 4
_outStream$74145 = -516					; size = 4
_compressingResult$74143 = -504				; size = 24
___result__$74137 = -476				; size = 4
___result__$74134 = -472				; size = 4
_res$74131 = -468					; size = 4
_fileInStream$74130 = -460				; size = 4
_isDir$74126 = -449					; size = 1
_item$74053 = -444					; size = 128
_itemEx$74052 = -308					; size = 104
_ui$74051 = -200					; size = 4
___result__$74048 = -196				; size = 4
_itemIndex$73980 = -192					; size = 4
_packSizeTotal$ = -188					; size = 8
_unpackSizeTotal$ = -180				; size = 8
_items$ = -168						; size = 12
_compressor$ = -148					; size = 112
_progress$ = -28					; size = 4
_lps$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_inArchive$ = 12					; size = 4
_inputItems$ = 16					; size = 4
_updateItems$ = 20					; size = 4
_options$ = 24						; size = 4
_comment$ = 28						; size = 4
_updateCallback$ = 32					; size = 4
_opCallback$ = 36					; size = 4
?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z PROC ; NArchive::NZip::Update2St
; Line 416
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 596				; 00000254H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-608]
	mov	ecx, 149				; 00000095H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 417
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76738[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76738[ebp], 0
	je	SHORT $LN23@Update2St
	mov	ecx, DWORD PTR $T76738[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN24@Update2St
$LN23@Update2St:
	mov	DWORD PTR tv71[ebp], 0
$LN24@Update2St:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T76737[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76737[ebp]
	mov	DWORD PTR _lps$[ebp], ecx
; Line 418
	mov	edx, DWORD PTR _lps$[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 419
	push	1
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 421
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 423
	lea	ecx, DWORD PTR _items$[ebp]
	call	??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 424
	mov	DWORD PTR _unpackSizeTotal$[ebp], 0
	mov	DWORD PTR _unpackSizeTotal$[ebp+4], 0
	mov	DWORD PTR _packSizeTotal$[ebp], 0
	mov	DWORD PTR _packSizeTotal$[ebp+4], 0
; Line 426
	mov	DWORD PTR _itemIndex$73980[ebp], 0
	jmp	SHORT $LN20@Update2St
$LN19@Update2St:
	mov	edx, DWORD PTR _itemIndex$73980[ebp]
	add	edx, 1
	mov	DWORD PTR _itemIndex$73980[ebp], edx
$LN20@Update2St:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
	cmp	DWORD PTR _itemIndex$73980[ebp], eax
	jae	$LN18@Update2St
; Line 428
	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR _unpackSizeTotal$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _unpackSizeTotal$[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 429
	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR _packSizeTotal$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _packSizeTotal$[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 430
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$74048[ebp], eax
	cmp	DWORD PTR ___result__$74048[ebp], 0
	je	SHORT $LN17@Update2St
	mov	eax, DWORD PTR ___result__$74048[ebp]
	mov	DWORD PTR $T76741[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76741[ebp]
	jmp	$LN21@Update2St
$LN17@Update2St:
; Line 431
	mov	ecx, DWORD PTR _itemIndex$73980[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$74051[ebp], eax
; Line 432
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 433
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??0CItemOut@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CItemOut::CItemOut
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 435
	mov	edx, DWORD PTR _ui$74051[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	je	SHORT $LN15@Update2St
	mov	ecx, DWORD PTR _ui$74051[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	$LN16@Update2St
$LN15@Update2St:
; Line 437
	mov	eax, DWORD PTR _ui$74051[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z
; Line 438
	lea	edx, DWORD PTR _itemEx$74052[ebp]
	push	edx
	mov	ecx, DWORD PTR _inArchive$[ebp]
	call	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
	test	eax, eax
	je	SHORT $LN14@Update2St
; Line 439
	mov	DWORD PTR $T76742[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76742[ebp]
	jmp	$LN21@Update2St
$LN14@Update2St:
; Line 440
	lea	eax, DWORD PTR _itemEx$74052[ebp]
	push	eax
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
$LN16@Update2St:
; Line 443
	mov	ecx, DWORD PTR _ui$74051[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN13@Update2St
; Line 445
	mov	eax, DWORD PTR _ui$74051[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN25@Update2St
	mov	edx, DWORD PTR _ui$74051[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR tv180[ebp], al
	jmp	SHORT $LN26@Update2St
$LN25@Update2St:
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv180[ebp], al
$LN26@Update2St:
	mov	cl, BYTE PTR tv180[ebp]
	mov	BYTE PTR _isDir$74126[ebp], cl
; Line 446
	movzx	edx, BYTE PTR _isDir$74126[ebp]
	test	edx, edx
	je	SHORT $LN12@Update2St
; Line 448
	lea	eax, DWORD PTR _item$74053[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$74051[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?WriteDirHeader@NZip@NArchive@@YGXAAVCOutArchive@12@PBUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::WriteDirHeader
; Line 450
	jmp	$LN11@Update2St
$LN12@Update2St:
; Line 452
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 453
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ui$74051[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$74131[ebp], eax
; Line 454
	cmp	DWORD PTR _res$74131[ebp], 1
	jne	$LN10@Update2St
; Line 456
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _ui$74051[ebp]
	mov	eax, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+28]
	adc	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
; Line 457
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74134[ebp], eax
	cmp	DWORD PTR ___result__$74134[ebp], 0
	je	SHORT $LN9@Update2St
	mov	ecx, DWORD PTR ___result__$74134[ebp]
	mov	DWORD PTR $T76745[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76745[ebp]
	jmp	$LN21@Update2St
$LN9@Update2St:
; Line 458
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN19@Update2St
$LN10@Update2St:
; Line 460
	mov	edx, DWORD PTR _res$74131[ebp]
	mov	DWORD PTR ___result__$74137[ebp], edx
	cmp	DWORD PTR ___result__$74137[ebp], 0
	je	SHORT $LN8@Update2St
	mov	eax, DWORD PTR ___result__$74137[ebp]
	mov	DWORD PTR $T76746[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76746[ebp]
	jmp	$LN21@Update2St
$LN8@Update2St:
; Line 461
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@Update2St
; Line 462
	mov	DWORD PTR $T76747[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76747[ebp]
	jmp	$LN21@Update2St
$LN7@Update2St:
; Line 474
	lea	edx, DWORD PTR _item$74053[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$74051[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	call	?SetFileHeader@NZip@NArchive@@YGXAAVCOutArchive@12@ABUCCompressionMethodMode@12@ABUCUpdateItem@12@AAVCItemOut@12@@Z ; NArchive::NZip::SetFileHeader
; Line 475
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _ui$74051[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	lea	ecx, DWORD PTR _item$74053[ebp+32]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?PrepareWriteCompressedData@COutArchive@NZip@NArchive@@QAEXI_K_N@Z ; NArchive::NZip::COutArchive::PrepareWriteCompressedData
; Line 477
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 478
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?CreateStreamForCompressing@COutArchive@NZip@NArchive@@QAEXPAPAUIOutStream@@@Z ; NArchive::NZip::COutArchive::CreateStreamForCompressing
; Line 484
	lea	ecx, DWORD PTR _compressingResult$74143[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	edx, DWORD PTR _ui$74051[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ; NArchive::NZip::CAddCommon::Compress
	mov	DWORD PTR ___result__$74146[ebp], eax
	cmp	DWORD PTR ___result__$74146[ebp], 0
	je	$LN6@Update2St
	mov	ecx, DWORD PTR ___result__$74146[ebp]
	mov	DWORD PTR $T76748[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76748[ebp]
	jmp	$LN21@Update2St
$LN6@Update2St:
; Line 486
	movzx	edx, BYTE PTR _compressingResult$74143[ebp+23]
	test	edx, edx
	je	SHORT $LN5@Update2St
; Line 492
	push	1
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z ; NArchive::NZip::CLocalItem::SetDescriptorMode
$LN5@Update2St:
; Line 495
	lea	eax, DWORD PTR _item$74053[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+22]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsRealAesMode@CCompressionMethodMode@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CCompressionMethodMode::IsRealAesMode
	movzx	eax, al
	push	eax
	lea	ecx, DWORD PTR _compressingResult$74143[ebp]
	push	ecx
	call	?SetItemInfoFromCompressingResult@NZip@NArchive@@YGXABUCCompressingResult@12@_NEAAVCItem@12@@Z ; NArchive::NZip::SetItemInfoFromCompressingResult
; Line 496
	lea	edx, DWORD PTR _item$74053[ebp]
	push	edx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteLocalHeader_And_SeekToNextFile@COutArchive@NZip@NArchive@@QAEXABVCLocalItem@23@@Z ; NArchive::NZip::COutArchive::WriteLocalHeader_And_SeekToNextFile
; Line 497
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74150[ebp], eax
	cmp	DWORD PTR ___result__$74150[ebp], 0
	je	$LN4@Update2St
	mov	ecx, DWORD PTR ___result__$74150[ebp]
	mov	DWORD PTR $T76749[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76749[ebp]
	jmp	$LN21@Update2St
$LN4@Update2St:
; Line 498
	mov	edx, DWORD PTR _unpackSizeTotal$[ebp]
	add	edx, DWORD PTR _item$74053[ebp+8]
	mov	eax, DWORD PTR _unpackSizeTotal$[ebp+4]
	adc	eax, DWORD PTR _item$74053[ebp+12]
	mov	DWORD PTR _unpackSizeTotal$[ebp], edx
	mov	DWORD PTR _unpackSizeTotal$[ebp+4], eax
; Line 499
	mov	ecx, DWORD PTR _packSizeTotal$[ebp]
	add	ecx, DWORD PTR _item$74053[ebp+16]
	mov	edx, DWORD PTR _packSizeTotal$[ebp+4]
	adc	edx, DWORD PTR _item$74053[ebp+20]
	mov	DWORD PTR _packSizeTotal$[ebp], ecx
	mov	DWORD PTR _packSizeTotal$[ebp+4], edx
; Line 500
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
$LN11@Update2St:
; Line 502
	jmp	$LN3@Update2St
$LN13@Update2St:
; Line 504
	mov	DWORD PTR _complexity$74154[ebp], 0
	mov	DWORD PTR _complexity$74154[ebp+4], 0
; Line 505
	mov	eax, DWORD PTR _lps$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 506
	lea	ecx, DWORD PTR _complexity$74154[ebp]
	push	ecx
	mov	edx, DWORD PTR _opCallback$[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	lea	eax, DWORD PTR _item$74053[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$74051[ebp]
	push	ecx
	lea	edx, DWORD PTR _itemEx$74052[ebp]
	push	edx
	mov	eax, DWORD PTR _inArchive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?UpdateItemOldData@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABVCItemEx@12@ABUCUpdateItem@12@AAVCItemOut@12@PAUICompressProgressInfo@@PAUIArchiveUpdateCallbackFile@@AA_K@Z ; NArchive::NZip::UpdateItemOldData
	mov	DWORD PTR ___result__$74155[ebp], eax
	cmp	DWORD PTR ___result__$74155[ebp], 0
	je	SHORT $LN2@Update2St
	mov	edx, DWORD PTR ___result__$74155[ebp]
	mov	DWORD PTR $T76750[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76750[ebp]
	jmp	$LN21@Update2St
$LN2@Update2St:
; Line 507
	mov	eax, DWORD PTR _lps$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 508
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _complexity$74154[ebp]
	mov	eax, DWORD PTR [ecx+28]
	adc	eax, DWORD PTR _complexity$74154[ebp+4]
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
$LN3@Update2St:
; Line 510
	lea	edx, DWORD PTR _item$74053[ebp]
	push	edx
	lea	ecx, DWORD PTR _items$[ebp]
	call	?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemOut>::Add
; Line 511
	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR [eax+28]
	adc	edx, 0
	mov	eax, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
; Line 512
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _item$74053[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN19@Update2St
$LN18@Update2St:
; Line 514
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _unpackSizeTotal$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _unpackSizeTotal$[ebp+4]
	mov	DWORD PTR [ecx+36], eax
; Line 515
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _packSizeTotal$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _packSizeTotal$[ebp+4]
	mov	DWORD PTR [ecx+44], eax
; Line 516
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$74158[ebp], eax
	cmp	DWORD PTR ___result__$74158[ebp], 0
	je	SHORT $LN1@Update2St
	mov	ecx, DWORD PTR ___result__$74158[ebp]
	mov	DWORD PTR $T76751[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76751[ebp]
	jmp	SHORT $LN21@Update2St
$LN1@Update2St:
; Line 517
	mov	edx, DWORD PTR _comment$[ebp]
	push	edx
	lea	eax, DWORD PTR _items$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?WriteCentralDir@COutArchive@NZip@NArchive@@QAEXABV?$CObjectVector@VCItemOut@NZip@NArchive@@@@PBV?$CBuffer@E@@@Z ; NArchive::NZip::COutArchive::WriteCentralDir
; Line 518
	mov	DWORD PTR $T76752[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _items$[ebp]
	call	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _compressor$[ebp]
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T76752[ebp]
$LN21@Update2St:
; Line 519
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@Update2St
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 608				; 00000260H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	3
$LN46@Update2St:
	DD	9
	DD	$LN45@Update2St
$LN45@Update2St:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN35@Update2St
	DD	-148					; ffffff6cH
	DD	112					; 00000070H
	DD	$LN36@Update2St
	DD	-168					; ffffff58H
	DD	12					; 0000000cH
	DD	$LN37@Update2St
	DD	-308					; fffffeccH
	DD	104					; 00000068H
	DD	$LN38@Update2St
	DD	-444					; fffffe44H
	DD	128					; 00000080H
	DD	$LN39@Update2St
	DD	-460					; fffffe34H
	DD	4
	DD	$LN40@Update2St
	DD	-504					; fffffe08H
	DD	24					; 00000018H
	DD	$LN41@Update2St
	DD	-516					; fffffdfcH
	DD	4
	DD	$LN42@Update2St
	DD	-540					; fffffde4H
	DD	8
	DD	$LN43@Update2St
$LN43@Update2St:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN42@Update2St:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN41@Update2St:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN40@Update2St:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN39@Update2St:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN38@Update2St:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	0
$LN37@Update2St:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN36@Update2St:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN35@Update2St:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$0:
	mov	eax, DWORD PTR $T76738[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$1:
	lea	ecx, DWORD PTR _progress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$2:
	lea	ecx, DWORD PTR _compressor$[ebp]
	jmp	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$3:
	lea	ecx, DWORD PTR _items$[ebp]
	jmp	??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$4:
	lea	ecx, DWORD PTR _itemEx$74052[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$5:
	lea	ecx, DWORD PTR _item$74053[ebp]
	jmp	??1CItemOut@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$6:
	lea	ecx, DWORD PTR _fileInStream$74130[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z$7:
	lea	ecx, DWORD PTR _outStream$74145[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-608]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update2St@NZip@NArchive@@YGJAAVCOutArchive@12@PAVCInArchive@12@ABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PBUCCompressionMethodMode@12@PBV?$CBuffer@E@@PAUIArchiveUpdateCallback@@PAUIArchiveUpdateCallbackFile@@@Z ENDP ; NArchive::NZip::Update2St
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_useDescriptor$ = 8					; size = 1
?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z PROC ; NArchive::NZip::CLocalItem::SetDescriptorMode, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 243
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _useDescriptor$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@CLocalItem@NZip@NArchive@@AAEXI_N@Z ; NArchive::NZip::CLocalItem::SetFlag
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDescriptorMode@CLocalItem@NZip@NArchive@@QAEX_N@Z ENDP ; NArchive::NZip::CLocalItem::SetDescriptorMode
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CItemEx@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemEx@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItem::CItem
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CItemEx@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemEx::CItemEx
_TEXT	ENDS
PUBLIC	??1CItem@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItemEx@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemEx@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemEx::~CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NZip@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItemEx@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemEx::~CItemEx
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CItem@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CItem@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItemOut@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemOut@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemOut::~CItemOut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NZip@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItemOut@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemOut::~CItemOut
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z PROC	; NArchive::NZip::CItemEx::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CItemEx@NZip@NArchive@@QAEAAV012@ABV012@@Z ENDP	; NArchive::NZip::CItemEx::operator=
_TEXT	ENDS
PUBLIC	??4?$CBuffer@E@@QAEAAV0@ABV0@@Z			; CBuffer<unsigned char>::operator=
PUBLIC	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=
PUBLIC	??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ; NArchive::NZip::CLocalItem::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z PROC	; NArchive::NZip::CItem::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+56], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+58]
	mov	WORD PTR [ecx+58], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	edx, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4?$CBuffer@E@@QAEAAV0@ABV0@@Z		; CBuffer<unsigned char>::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+92]
	mov	BYTE PTR [edx+92], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+93]
	mov	BYTE PTR [edx+93], cl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ENDP	; NArchive::NZip::CItem::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z PROC	; NArchive::NZip::CLocalItem::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CLocalItem@NZip@NArchive@@QAEAAV012@ABV012@@Z ENDP	; NArchive::NZip::CLocalItem::operator=
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::NZip::CExtraBlock::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::NZip::CExtraBlock::operator=
_TEXT	ENDS
PUBLIC	??0CItem@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItemEx::CItemEx
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ PROC	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseProps@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ENDP	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned char>::operator=
PUBLIC	??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CBaseProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z PROC ; NArchive::NZip::CCompressionMethodMode::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned char>::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR [edx+36], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [edx+64], cl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CCompressionMethodMode@NZip@NArchive@@QAEAAU012@ABU012@@Z ENDP ; NArchive::NZip::CCompressionMethodMode::operator=
_TEXT	ENDS
PUBLIC	??_7CMtProgressMixer@NZip@NArchive@@6B@		; NArchive::NZip::CMtProgressMixer::`vftable'
PUBLIC	??_R4CMtProgressMixer@NZip@NArchive@@6B@	; NArchive::NZip::CMtProgressMixer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMtProgressMixer@NZip@NArchive@@@8	; NArchive::NZip::CMtProgressMixer `RTTI Type Descriptor'
PUBLIC	??_R3CMtProgressMixer@NZip@NArchive@@8		; NArchive::NZip::CMtProgressMixer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMtProgressMixer@NZip@NArchive@@8		; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8	; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CMtProgressMixer::QueryInterface
PUBLIC	?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CMtProgressMixer::AddRef
PUBLIC	?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CMtProgressMixer::Release
;	COMDAT ??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8 DD FLAT:??_R0?AVCMtProgressMixer@NZip@NArchive@@@8 ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMtProgressMixer@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CMtProgressMixer@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CMtProgressMixer@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CMtProgressMixer@NZip@NArchive@@8 ; NArchive::NZip::CMtProgressMixer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMtProgressMixer@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CMtProgressMixer@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CMtProgressMixer::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMtProgressMixer@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMtProgressMixer@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCMtProgressMixer@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CMtProgressMixer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMtProgressMixer@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMtProgressMixer@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CMtProgressMixer@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CMtProgressMixer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMtProgressMixer@NZip@NArchive@@@8
	DD	FLAT:??_R3CMtProgressMixer@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CMtProgressMixer@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CMtProgressMixer@NZip@NArchive@@6B@ DD FLAT:??_R4CMtProgressMixer@NZip@NArchive@@6B@ ; NArchive::NZip::CMtProgressMixer::`vftable'
	DD	FLAT:?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CMtProgressMixer@NZip@NArchive@@UAGJPB_K0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CMtProgressMixer@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMtProgressMixer@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMtProgressMixer::CMtProgressMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMtProgressMixer@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMtProgressMixer@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMtProgressMixer::CMtProgressMixer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CMtProgressMixer::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 314
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@4
$LN1@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMtProgressMixer@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CMtProgressMixer::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CMtProgressMixer::AddRef, COMDAT
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMtProgressMixer@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CMtProgressMixer::AddRef
_TEXT	ENDS
PUBLIC	??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76831 = -8						; size = 4
$T76830 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CMtProgressMixer::Release, COMDAT
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76831[ebp], edx
	mov	eax, DWORD PTR $T76831[ebp]
	mov	DWORD PTR $T76830[ebp], eax
	cmp	DWORD PTR $T76830[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T76830[ebp]
	call	??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMtProgressMixer@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CMtProgressMixer::Release
_TEXT	ENDS
PUBLIC	??1CMtProgressMixer@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CMtProgressMixer::~CMtProgressMixer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CMtProgressMixer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMtProgressMixer@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMtProgressMixer@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CMtProgressMixer::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMtProgressMixer@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMtProgressMixer@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMtProgressMixer::~CMtProgressMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMtProgressMixer@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMtProgressMixer::~CMtProgressMixer
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMtCompressProgressMixer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2
__ehfuncinfo$??0CMtCompressProgressMixer@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CMtCompressProgressMixer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMtCompressProgressMixer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMtCompressProgressMixer@@QAE@XZ PROC		; CMtCompressProgressMixer::CMtCompressProgressMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMtCompressProgressMixer@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??0CMtCompressProgressMixer@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??0CMtCompressProgressMixer@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMtCompressProgressMixer@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMtCompressProgressMixer@@QAE@XZ ENDP		; CMtCompressProgressMixer::CMtCompressProgressMixer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMtCompressProgressMixer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$2
__ehfuncinfo$??1CMtCompressProgressMixer@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CMtCompressProgressMixer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMtCompressProgressMixer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMtCompressProgressMixer@@QAE@XZ PROC		; CMtCompressProgressMixer::~CMtCompressProgressMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMtCompressProgressMixer@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??1CMtCompressProgressMixer@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1CMtCompressProgressMixer@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMtCompressProgressMixer@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMtCompressProgressMixer@@QAE@XZ ENDP		; CMtCompressProgressMixer::~CMtCompressProgressMixer
PUBLIC	??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::CObjectVector<NArchive::NZip::CThreadInfo>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CThreads@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CThreads@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CThreads::CThreads, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CThreadInfo>::CObjectVector<NArchive::NZip::CThreadInfo>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CThreads@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CThreads::CThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMemBlocks2@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMemBlocks2@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMemBlocks2::~CMemBlocks2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemLockBlocks@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemBlocks2@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMemBlocks2::~CMemBlocks2
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CThreadInfo@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CThreadInfo@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CThreadInfo@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CThreadInfo@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CThreadInfo@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CThreadInfo::~CThreadInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1CAddCommon@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CAddCommon::~CAddCommon
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$??1CThreadInfo@NZip@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??1CThreadInfo@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CThreadInfo@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CThreadInfo@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CThreadInfo::~CThreadInfo
PUBLIC	??_7CMtCompressProgress@@6B@			; CMtCompressProgress::`vftable'
PUBLIC	??_R4CMtCompressProgress@@6B@			; CMtCompressProgress::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMtCompressProgress@@@8			; CMtCompressProgress `RTTI Type Descriptor'
PUBLIC	??_R3CMtCompressProgress@@8			; CMtCompressProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMtCompressProgress@@8			; CMtCompressProgress::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMtCompressProgress@@8		; CMtCompressProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z ; CMtCompressProgress::QueryInterface
PUBLIC	?AddRef@CMtCompressProgress@@UAGKXZ		; CMtCompressProgress::AddRef
PUBLIC	?Release@CMtCompressProgress@@UAGKXZ		; CMtCompressProgress::Release
EXTRN	?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z:PROC ; CMtCompressProgress::SetRatioInfo
;	COMDAT ??_R1A@?0A@EA@CMtCompressProgress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMtCompressProgress@@8 DD FLAT:??_R0?AVCMtCompressProgress@@@8 ; CMtCompressProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMtCompressProgress@@8
rdata$r	ENDS
;	COMDAT ??_R2CMtCompressProgress@@8
rdata$r	SEGMENT
??_R2CMtCompressProgress@@8 DD FLAT:??_R1A@?0A@EA@CMtCompressProgress@@8 ; CMtCompressProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMtCompressProgress@@8
rdata$r	SEGMENT
??_R3CMtCompressProgress@@8 DD 00H			; CMtCompressProgress::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMtCompressProgress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMtCompressProgress@@@8
_DATA	SEGMENT
??_R0?AVCMtCompressProgress@@@8 DD FLAT:??_7type_info@@6B@ ; CMtCompressProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMtCompressProgress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMtCompressProgress@@6B@
rdata$r	SEGMENT
??_R4CMtCompressProgress@@6B@ DD 00H			; CMtCompressProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMtCompressProgress@@@8
	DD	FLAT:??_R3CMtCompressProgress@@8
rdata$r	ENDS
;	COMDAT ??_7CMtCompressProgress@@6B@
CONST	SEGMENT
??_7CMtCompressProgress@@6B@ DD FLAT:??_R4CMtCompressProgress@@6B@ ; CMtCompressProgress::`vftable'
	DD	FLAT:?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMtCompressProgress@@UAGKXZ
	DD	FLAT:?Release@CMtCompressProgress@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CMtCompressProgress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMtCompressProgress@@QAE@XZ PROC			; CMtCompressProgress::CMtCompressProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMtCompressProgress@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMtCompressProgress@@QAE@XZ ENDP			; CMtCompressProgress::CMtCompressProgress
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z PROC ; CMtCompressProgress::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\progressmt.h
; Line 41
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@5
$LN1@QueryInter@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@5:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMtCompressProgress@@UAGJABU_GUID@@PAPAX@Z ENDP ; CMtCompressProgress::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMtCompressProgress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMtCompressProgress@@UAGKXZ PROC		; CMtCompressProgress::AddRef, COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMtCompressProgress@@UAGKXZ ENDP		; CMtCompressProgress::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CMtCompressProgress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T76892 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMtCompressProgress@@UAGKXZ PROC		; CMtCompressProgress::Release, COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76892[ebp], edx
	mov	eax, DWORD PTR $T76892[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@5:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMtCompressProgress@@UAGKXZ ENDP		; CMtCompressProgress::Release
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@ABV0@@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraBlock::CExtraBlock
PUBLIC	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z	; NArchive::NZip::CLocalItem::CLocalItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
__ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+56], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+58]
	mov	WORD PTR [ecx+58], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	edx, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+92]
	mov	BYTE PTR [edx+92], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+93]
	mov	BYTE PTR [edx+93], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItem::CItem
PUBLIC	??4CMethodProps@@QAEAAV0@ABV0@@Z		; CMethodProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::NZip::CBaseProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMethodProps@@QAEAAV0@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+21], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+22], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::NZip::CBaseProps::operator=
_TEXT	ENDS
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
__ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CLocalItem::CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CLocalItem::CLocalItem
PUBLIC	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraBlock::CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraBlock::CExtraBlock
_TEXT	ENDS
PUBLIC	??4CProps@@QAEAAU0@ABU0@@Z			; CProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CMethodProps@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CMethodProps@@QAEAAV0@ABV0@@Z PROC			; CMethodProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CProps@@QAEAAU0@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMethodProps@@QAEAAV0@ABV0@@Z ENDP			; CMethodProps::operator=
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CProps@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProps@@QAEAAU0@ABU0@@Z PROC				; CProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CProps@@QAEAAU0@ABU0@@Z ENDP				; CProps::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CCacheOutStream@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCacheOutStream@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CCacheOutStream::CCacheOutStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.cpp
; Line 905
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCacheOutStream@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCacheOutStream@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CCacheOutStream::CCacheOutStream
_TEXT	ENDS
PUBLIC	??0COutBuffer@@QAE@XZ				; COutBuffer::COutBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COutArchive@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutArchive@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??0COutArchive@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0COutArchive@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutArchive@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COutArchive@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::COutArchive::COutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COutBuffer@@QAE@XZ			; COutBuffer::COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutArchive@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??0COutArchive@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutArchive@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutArchive@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::COutArchive::COutArchive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutBuffer@@QAE@XZ PROC				; COutBuffer::COutBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutBuffer@@QAE@XZ ENDP				; COutBuffer::COutBuffer
_TEXT	ENDS
PUBLIC	??1COutBuffer@@QAE@XZ				; COutBuffer::~COutBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutArchive@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutArchive@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1COutArchive@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1COutArchive@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutArchive@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutArchive@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::COutArchive::~COutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutArchive@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??1COutArchive@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutArchive@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutArchive@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::COutArchive::~COutArchive
EXTRN	?Free@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutBuffer@@QAE@XZ PROC				; COutBuffer::~COutBuffer, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutBuffer@@QAEXXZ		; COutBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutBuffer@@QAE@XZ ENDP				; COutBuffer::~COutBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T76956 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76956[ebp], ecx
	mov	edx, DWORD PTR $T76956[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PAX@@QAEAAPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PAX@@QAEAAPAXXZ PROC		; CRecordVector<void *>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PAX@@QAEAAPAXXZ ENDP		; CRecordVector<void *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T76999 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??0?$CBuffer@E@@QAE@ABV0@@Z PROC			; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 28
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 29
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CBuffer
; Line 31
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76999[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T76999[ebp]
	mov	DWORD PTR [edx], eax
; Line 32
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@CBuffer:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@ABV0@@Z ENDP			; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T77002 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77002[ebp], ecx
	mov	edx, DWORD PTR $T77002[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T77011 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77011[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77011[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T77014 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77014[ebp], edx
	mov	eax, DWORD PTR $T77014[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
_TEXT	ENDS
PUBLIC	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z		; CBuffer<unsigned char>::CopyFrom
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??4?$CBuffer@E@@QAEAAV0@ABV0@@Z PROC			; CBuffer<unsigned char>::operator=, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN1@operator@3
; Line 92
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
$LN1@operator@3:
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
; Line 94
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CBuffer@E@@QAEAAV0@ABV0@@Z ENDP			; CBuffer<unsigned char>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ PROC		; CMyComPtr<IOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ENDP		; CMyComPtr<IOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator IOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator IOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ PROC ; CMyComPtr<IOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ENDP ; CMyComPtr<IOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z PROC ; CMyComPtr<IOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ENDP ; CMyComPtr<IOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ PROC		; CMyComPtr<IOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ENDP		; CMyComPtr<IOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIProgress@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIProgress@@@@QAE@XZ PROC		; CMyComPtr<IProgress>::CMyComPtr<IProgress>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIProgress@@@@QAE@XZ ENDP		; CMyComPtr<IProgress>::CMyComPtr<IProgress>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIProgress@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIProgress@@@@QAE@XZ PROC		; CMyComPtr<IProgress>::~CMyComPtr<IProgress>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIProgress@@@@QAE@XZ ENDP		; CMyComPtr<IProgress>::~CMyComPtr<IProgress>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ PROC	; CMyComPtr<IProgress>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ ENDP	; CMyComPtr<IProgress>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z PROC ; CMyComPtr<IProgress>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z ENDP ; CMyComPtr<IProgress>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T77059 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77059[ebp], ecx
	mov	edx, DWORD PTR $T77059[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T77066 = -32						; size = 4
$T77065 = -28						; size = 4
_i$75042 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProp>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@7
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@7
$LN4@operator@7:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$75042[ebp], 0
	jmp	SHORT $LN3@operator@7
$LN2@operator@7:
	mov	edx, DWORD PTR _i$75042[ebp]
	add	edx, 1
	mov	DWORD PTR _i$75042[ebp], edx
$LN3@operator@7:
	mov	eax, DWORD PTR _i$75042[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@7
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77066[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77066[ebp], 0
	je	SHORT $LN7@operator@7
	mov	ecx, DWORD PTR _i$75042[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77066[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@7
$LN7@operator@7:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@7:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T77065[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T77065[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@7
$LN1@operator@7:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@7:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T77066[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77083 = -28						; size = 4
$T77082 = -24						; size = 4
_i$75062 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75062[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$75062[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$75062[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75062[ebp], eax
	mov	ecx, DWORD PTR _i$75062[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77083[ebp], edx
	mov	eax, DWORD PTR $T77083[ebp]
	mov	DWORD PTR $T77082[ebp], eax
	cmp	DWORD PTR $T77082[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T77082[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T77096 = -16						; size = 4
$T77095 = -12						; size = 4
_i$75071 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75071[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$75071[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$75071[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75071[ebp], eax
	mov	ecx, DWORD PTR _i$75071[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77096[ebp], edx
	mov	eax, DWORD PTR $T77096[ebp]
	mov	DWORD PTR $T77095[ebp], eax
	cmp	DWORD PTR $T77095[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T77095[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@E@@QAE@XZ PROC			; CRecordVector<unsigned char>::CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@E@@QAE@XZ ENDP			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@E@@QAE@XZ
_TEXT	SEGMENT
$T77103 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@E@@QAE@XZ PROC			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77103[ebp], ecx
	mov	edx, DWORD PTR $T77103[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@E@@QAE@XZ ENDP			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@E@@QBEIXZ			; CRecordVector<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T77107 = -16						; size = 4
$T77106 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned char>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@8
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@8
$LN3@operator@8:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@E@@QBEIXZ		; CRecordVector<unsigned char>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@8
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77106[ebp], ecx
	mov	edx, DWORD PTR $T77106[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77107[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T77107[ebp]
	mov	DWORD PTR [ecx], edx
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@operator@8:
; Line 181
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@8
; Line 183
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@8:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@8:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@E@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned char>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@E@@QBEABEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@E@@QBEABEXZ PROC			; CRecordVector<unsigned char>::Front, COMDAT
; _this$ = ecx
; Line 229
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@E@@QBEABEXZ ENDP			; CRecordVector<unsigned char>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
_TEXT	ENDS
PUBLIC	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T77118 = -32						; size = 4
$T77117 = -28						; size = 4
_i$75119 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$75119[ebp], 0
	jmp	SHORT $LN3@CObjectVec@2
$LN2@CObjectVec@2:
	mov	ecx, DWORD PTR _i$75119[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75119[ebp], ecx
$LN3@CObjectVec@2:
	mov	edx, DWORD PTR _i$75119[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@2
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77118[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T77118[ebp], 0
	je	SHORT $LN6@CObjectVec@2
	mov	eax, DWORD PTR _i$75119[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77118[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@2
$LN6@CObjectVec@2:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@2:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T77117[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T77117[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@2
$LN4@CObjectVec@2:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T77118[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T77132 = -32						; size = 4
$T77131 = -28						; size = 4
_i$75131 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@9
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@9
$LN4@operator@9:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$75131[ebp], 0
	jmp	SHORT $LN3@operator@9
$LN2@operator@9:
	mov	edx, DWORD PTR _i$75131[ebp]
	add	edx, 1
	mov	DWORD PTR _i$75131[ebp], edx
$LN3@operator@9:
	mov	eax, DWORD PTR _i$75131[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@9
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77132[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77132[ebp], 0
	je	SHORT $LN7@operator@9
	mov	ecx, DWORD PTR _i$75131[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77132[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@9
$LN7@operator@9:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@9:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T77131[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T77131[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@9
$LN1@operator@9:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@9:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T77132[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAUCExtraSubBlock@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T77149 = -24						; size = 4
$T77148 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77149[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77149[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77149[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T77148[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T77148[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T77149[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
PUBLIC	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77162 = -28						; size = 4
$T77161 = -24						; size = 4
_i$75153 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75153[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$75153[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$75153[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75153[ebp], eax
	mov	ecx, DWORD PTR _i$75153[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77162[ebp], edx
	mov	eax, DWORD PTR $T77162[ebp]
	mov	DWORD PTR $T77161[ebp], eax
	cmp	DWORD PTR $T77161[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T77161[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T77175 = -16						; size = 4
$T77174 = -12						; size = 4
_i$75162 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75162[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$75162[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$75162[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75162[ebp], eax
	mov	ecx, DWORD PTR _i$75162[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77175[ebp], edx
	mov	eax, DWORD PTR $T77175[ebp]
	mov	DWORD PTR $T77174[ebp], eax
	cmp	DWORD PTR $T77174[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T77174[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T77181 = -12						; size = 4
$T77180 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77181[ebp], ecx
	mov	edx, DWORD PTR $T77181[ebp]
	mov	DWORD PTR $T77180[ebp], edx
	cmp	DWORD PTR $T77180[ebp], 0
	je	SHORT $LN3@Delete
	push	1
	mov	ecx, DWORD PTR $T77180[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete
$LN3@Delete:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXI@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CThreadInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CThreadInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CThreadInfo>::CObjectVector<NArchive::NZip::CThreadInfo>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CThreadInfo>::CObjectVector<NArchive::NZip::CThreadInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEAAUCThreadInfo@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CThreadInfo>::operator[]
_TEXT	ENDS
PUBLIC	??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CThreadInfo::CThreadInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T77194 = -24						; size = 4
$T77193 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CThreadInfo>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	200					; 000000c8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77194[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77194[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77194[ebp]
	call	??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T77193[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T77193[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T77194[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAEIABUCThreadInfo@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CThreadInfo>::Add
PUBLIC	??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CThreadInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77207 = -28						; size = 4
$T77206 = -24						; size = 4
_i$75189 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75189[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$75189[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$75189[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75189[ebp], eax
	mov	ecx, DWORD PTR _i$75189[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77207[ebp], edx
	mov	eax, DWORD PTR $T77207[ebp]
	mov	DWORD PTR $T77206[ebp], eax
	cmp	DWORD PTR $T77206[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T77206[ebp]
	call	??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCThreadInfo@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CThreadInfo>::~CObjectVector<NArchive::NZip::CThreadInfo>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CMemBlocks2>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CMemBlocks2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CMemBlocks2>::CObjectVector<NArchive::NZip::CMemBlocks2>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CMemBlocks2>::CObjectVector<NArchive::NZip::CMemBlocks2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEAAUCMemBlocks2@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CMemBlocks2>::operator[]
_TEXT	ENDS
PUBLIC	??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CMemBlocks2::CMemBlocks2
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T77227 = -24						; size = 4
$T77226 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CMemBlocks2>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77227[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77227[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77227[ebp]
	call	??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T77226[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T77226[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T77227[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAEIABUCMemBlocks2@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CMemBlocks2>::Add
PUBLIC	??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CMemBlocks2::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77240 = -28						; size = 4
$T77239 = -24						; size = 4
_i$75211 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75211[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$75211[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$75211[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75211[ebp], eax
	mov	ecx, DWORD PTR _i$75211[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77240[ebp], edx
	mov	eax, DWORD PTR $T77240[ebp]
	mov	DWORD PTR $T77239[ebp], eax
	cmp	DWORD PTR $T77239[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T77239[ebp]
	call	??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMemBlocks2@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CMemBlocks2>::~CObjectVector<NArchive::NZip::CMemBlocks2>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemOut>::CObjectVector<NArchive::NZip::CItemOut>
_TEXT	ENDS
PUBLIC	??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z	; NArchive::NZip::CItemOut::CItemOut
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T77256 = -24						; size = 4
$T77255 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CItemOut>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	128					; 00000080H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77256[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T77256[ebp], 0
	je	SHORT $LN3@Add@4
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77256[ebp]
	call	??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@4
$LN3@Add@4:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@4:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T77255[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T77255[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T77256[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAEIABVCItemOut@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CItemOut>::Add
PUBLIC	??_GCItemOut@NZip@NArchive@@QAEPAXI@Z		; NArchive::NZip::CItemOut::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77269 = -28						; size = 4
$T77268 = -24						; size = 4
_i$75228 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75228[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$75228[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$75228[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75228[ebp], eax
	mov	ecx, DWORD PTR _i$75228[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77269[ebp], edx
	mov	eax, DWORD PTR $T77269[ebp]
	mov	DWORD PTR $T77268[ebp], eax
	cmp	DWORD PTR $T77268[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T77268[ebp]
	call	??_GCItemOut@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCItemOut@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemOut>::~CObjectVector<NArchive::NZip::CItemOut>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CUpdateItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CUpdateItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QBEABUCUpdateItem@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CUpdateItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@H@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@H@@QBEIXZ PROC			; CRecordVector<int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@H@@QBEIXZ ENDP			; CRecordVector<int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T77299 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77299[ebp], ecx
	mov	edx, DWORD PTR $T77299[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@H@@AAEXII@Z		; CRecordVector<int>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@H@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@H@@QAEXI@Z PROC			; CRecordVector<int>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@H@@AAEXII@Z	; CRecordVector<int>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@H@@QAEXI@Z ENDP			; CRecordVector<int>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ	; CRecordVector<int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@H@@QAEIH@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@H@@QAEIH@Z PROC			; CRecordVector<int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@H@@QAEIH@Z ENDP			; CRecordVector<int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@H@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@H@@QAEAAHI@Z PROC			; CRecordVector<int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@H@@QAEAAHI@Z ENDP			; CRecordVector<int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@H@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@H@@QAEAAHXZ PROC			; CRecordVector<int>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@H@@QAEAAHXZ ENDP			; CRecordVector<int>::Front
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z	; NArchive::NZip::CAddCommon::CAddCommon
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CThreadInfo::CThreadInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	DWORD PTR [ecx+152], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 160				; 000000a0H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 160				; 000000a0H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+184]
	mov	BYTE PTR [edx+184], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR [edx+188], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR [edx+192], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CThreadInfo@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CThreadInfo::CThreadInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CThreadInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CThreadInfo@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCThreadInfo@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CThreadInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMemLockBlocks@@QAE@ABU0@@Z			; CMemLockBlocks::CMemLockBlocks
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CMemBlocks2::CMemBlocks2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMemLockBlocks@@QAE@ABU0@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+56]
	mov	BYTE PTR [edx+56], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+57]
	mov	BYTE PTR [edx+57], cl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMemBlocks2@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CMemBlocks2::CMemBlocks2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CMemBlocks2::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemBlocks2@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMemBlocks2@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CMemBlocks2::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItemOut::CItemOut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], edx
	mov	DWORD PTR [ecx+100], eax
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	ecx, DWORD PTR [edx+108]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], eax
	mov	DWORD PTR [edx+108], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], ecx
	mov	DWORD PTR [eax+116], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+120]
	mov	BYTE PTR [ecx+120], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItemOut@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItemOut::CItemOut
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCItemOut@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItemOut@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CItemOut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItemOut@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItemOut@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CItemOut::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CAddCommon::CAddCommon, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+72], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+84]
	mov	BYTE PTR [eax+84], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR [ecx+104], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAddCommon@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CAddCommon::CAddCommon
_TEXT	ENDS
PUBLIC	??0CMemBlocks@@QAE@ABV0@@Z			; CMemBlocks::CMemBlocks
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemLockBlocks@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMemLockBlocks@@QAE@ABU0@@Z PROC			; CMemLockBlocks::CMemLockBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMemBlocks@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx+24], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMemLockBlocks@@QAE@ABU0@@Z ENDP			; CMemLockBlocks::CMemLockBlocks
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@E@@QAE@ABV0@@Z		; CRecordVector<unsigned char>::CRecordVector<unsigned char>
PUBLIC	??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CBaseProps::CBaseProps
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1
__ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z PROC ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@E@@QAE@ABV0@@Z	; CRecordVector<unsigned char>::CRecordVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR [edx+36], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [edx+64], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ENDP ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??0?$CRecordVector@PAX@@QAE@ABV0@@Z		; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemBlocks@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMemBlocks@@QAE@ABV0@@Z PROC				; CMemBlocks::CMemBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@ABV0@@Z	; CRecordVector<void *>::CRecordVector<void *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMemBlocks@@QAE@ABV0@@Z ENDP				; CMemBlocks::CMemBlocks
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z PROC		; NArchive::NZip::CBaseProps::CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+21], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+22], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::NZip::CBaseProps::CBaseProps
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T77386 = -20						; size = 4
$T77385 = -16						; size = 4
_p$75338 = -12						; size = 4
_newCapacity$75337 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75337[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75337[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77385[ebp], eax
	mov	eax, DWORD PTR $T77385[ebp]
	mov	DWORD PTR _p$75338[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75338[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77386[ebp], edx
	mov	eax, DWORD PTR $T77386[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75338[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75337[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T77389 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@PAX@@QAE@ABV0@@Z PROC		; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77389[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77389[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@PAX@@QAE@ABV0@@Z ENDP		; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T77392 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77392[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77392[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T77396 = -16						; size = 4
$T77395 = -12						; size = 4
_p$75363 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77395[ebp], eax
	mov	eax, DWORD PTR $T77395[ebp]
	mov	DWORD PTR _p$75363[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75363[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77396[ebp], edx
	mov	eax, DWORD PTR $T77396[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75363[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z PROC	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ENDP	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z PROC			; CBuffer<unsigned char>::CopyFrom, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 69
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CopyFrom
; Line 70
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyFrom:
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ENDP			; CBuffer<unsigned char>::CopyFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@ABV0@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T77420 = -32						; size = 4
$T77419 = -28						; size = 4
_i$75403 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$75403[ebp], 0
	jmp	SHORT $LN3@CObjectVec@7
$LN2@CObjectVec@7:
	mov	ecx, DWORD PTR _i$75403[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75403[ebp], ecx
$LN3@CObjectVec@7:
	mov	edx, DWORD PTR _i$75403[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@7
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77420[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T77420[ebp], 0
	je	SHORT $LN6@CObjectVec@7
	mov	eax, DWORD PTR _i$75403[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77420[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@7
$LN6@CObjectVec@7:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@7:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T77419[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T77419[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@7
$LN4@CObjectVec@7:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T77420[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T77433 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@E@@QAE@ABV0@@Z PROC			; CRecordVector<unsigned char>::CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@E@@QBEIXZ		; CRecordVector<unsigned char>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec@2
; Line 41
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77433[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T77433[ebp]
	mov	DWORD PTR [ecx], edx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 44
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec@2:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@E@@QAE@ABV0@@Z ENDP			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@E@@QBEIXZ PROC			; CRecordVector<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@E@@QBEIXZ ENDP			; CRecordVector<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@H@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@H@@AAEXII@Z PROC		; CRecordVector<int>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@H@@AAEXII@Z ENDP		; CRecordVector<int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
_TEXT	SEGMENT
$T77441 = -20						; size = 4
$T77440 = -16						; size = 4
_p$75429 = -12						; size = 4
_newCapacity$75428 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ PROC	; CRecordVector<int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75428[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75428[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77440[ebp], eax
	mov	eax, DWORD PTR $T77440[ebp]
	mov	DWORD PTR _p$75429[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75429[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77441[ebp], edx
	mov	eax, DWORD PTR $T77441[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75429[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75428[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ENDP	; CRecordVector<int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z PROC ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMin@I@@YGIII@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyMin@I@@YGIII@Z PROC				; MyMin<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 7
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyMin
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MyMin
$LN3@MyMin:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MyMin:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyMin@I@@YGIII@Z ENDP				; MyMin<unsigned int>
_TEXT	ENDS
END
