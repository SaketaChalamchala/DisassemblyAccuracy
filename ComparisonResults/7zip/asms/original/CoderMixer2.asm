; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Common\CoderMixer2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z ; CSequentialInStreamCalcSize::Read
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv72 = -20						; size = 4
_result$ = -16						; size = 4
_realProcessed$ = -8					; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z PROC	; CSequentialInStreamCalcSize::Read
; Line 10
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 11
	mov	DWORD PTR _realProcessed$[ebp], 0
; Line 12
	mov	DWORD PTR _result$[ebp], 0
; Line 13
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	test	eax, eax
	je	SHORT $LN3@Read
; Line 14
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN3@Read:
; Line 15
	mov	ecx, DWORD PTR _realProcessed$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 16
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@Read
	cmp	DWORD PTR _realProcessed$[ebp], 0
	jne	SHORT $LN2@Read
; Line 17
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+24], 1
$LN2@Read:
; Line 18
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 19
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _realProcessed$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@Read:
; Line 20
	mov	eax, DWORD PTR _result$[ebp]
; Line 21
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Read
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN8@Read:
	DD	1
	DD	$LN7@Read
$LN7@Read:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Read
$LN6@Read:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z ENDP	; CSequentialInStreamCalcSize::Read
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z	; COutStreamCalcSize::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_result$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z PROC		; COutStreamCalcSize::Write
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 26
	mov	DWORD PTR _result$[ebp], 0
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN2@Write
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN2@Write:
; Line 29
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 30
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write
; Line 31
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Write:
; Line 32
	mov	eax, DWORD PTR _result$[ebp]
; Line 33
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z ENDP		; COutStreamCalcSize::Write
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ	; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>
PUBLIC	??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->
PUBLIC	??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *
PUBLIC	??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>
PUBLIC	??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&
PUBLIC	??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ	; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>
PUBLIC	?OutStreamFinish@COutStreamCalcSize@@UAGJXZ	; COutStreamCalcSize::OutStreamFinish
EXTRN	_IID_IOutStreamFinish:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -20						; size = 4
_outStreamFinish$70215 = -12				; size = 4
_result$ = -4						; size = 4
_this$ = 8						; size = 4
?OutStreamFinish@COutStreamCalcSize@@UAGJXZ PROC	; COutStreamCalcSize::OutStreamFinish
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 37
	mov	DWORD PTR _result$[ebp], 0
; Line 38
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN2@OutStreamF
; Line 40
	lea	ecx, DWORD PTR _outStreamFinish$70215[ebp]
	call	??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>
; Line 41
	lea	ecx, DWORD PTR _outStreamFinish$70215[ebp]
	call	??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&
	push	eax
	push	OFFSET _IID_IOutStreamFinish
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>
; Line 42
	lea	ecx, DWORD PTR _outStreamFinish$70215[ebp]
	call	??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *
	test	eax, eax
	je	SHORT $LN1@OutStreamF
; Line 43
	lea	ecx, DWORD PTR _outStreamFinish$70215[ebp]
	call	??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->
	mov	DWORD PTR tv85[ebp], eax
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv85[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN1@OutStreamF:
; Line 44
	lea	ecx, DWORD PTR _outStreamFinish$70215[ebp]
	call	??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>
$LN2@OutStreamF:
; Line 45
	mov	eax, DWORD PTR _result$[ebp]
; Line 46
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@OutStreamF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@OutStreamF:
	DD	1
	DD	$LN6@OutStreamF
$LN6@OutStreamF:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@OutStreamF
$LN5@OutStreamF:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
?OutStreamFinish@COutStreamCalcSize@@UAGJXZ ENDP	; COutStreamCalcSize::OutStreamFinish
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
PUBLIC	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
PUBLIC	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	??A?$CRecordVector@_N@@QAEAA_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
PUBLIC	?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z	; NCoderMixer2::CBondsChecks::CheckCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bond$70261 = -24					; size = 4
_ind$70259 = -20					; size = 4
_i$70255 = -16						; size = 4
_start$ = -12						; size = 4
_coder$ = -8						; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z PROC	; NCoderMixer2::CBondsChecks::CheckCoder
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	DWORD PTR _coder$[ebp], eax
; Line 79
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _coderIndex$[ebp], eax
	jae	SHORT $LN7@CheckCoder
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN8@CheckCoder
$LN7@CheckCoder:
; Line 80
	xor	al, al
	jmp	$LN9@CheckCoder
$LN8@CheckCoder:
; Line 81
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 83
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx
; Line 85
	mov	DWORD PTR _i$70255[ebp], 0
	jmp	SHORT $LN6@CheckCoder
$LN5@CheckCoder:
	mov	edx, DWORD PTR _i$70255[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70255[ebp], edx
$LN6@CheckCoder:
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR _i$70255[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@CheckCoder
; Line 87
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, DWORD PTR _i$70255[ebp]
	mov	DWORD PTR _ind$70259[ebp], edx
; Line 89
	mov	eax, DWORD PTR _ind$70259[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@CheckCoder
; Line 90
	jmp	SHORT $LN5@CheckCoder
$LN3@CheckCoder:
; Line 92
	mov	eax, DWORD PTR _ind$70259[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$70261[ebp], eax
; Line 93
	cmp	DWORD PTR _bond$70261[ebp], 0
	jge	SHORT $LN2@CheckCoder
; Line 94
	xor	al, al
	jmp	SHORT $LN9@CheckCoder
$LN2@CheckCoder:
; Line 95
	mov	edx, DWORD PTR _bond$70261[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CBondsChecks::CheckCoder
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CheckCoder
; Line 96
	xor	al, al
	jmp	SHORT $LN9@CheckCoder
$LN1@CheckCoder:
; Line 97
	jmp	SHORT $LN5@CheckCoder
$LN4@CheckCoder:
; Line 99
	mov	al, 1
$LN9@CheckCoder:
; Line 100
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z ENDP	; NCoderMixer2::CBondsChecks::CheckCoder
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$68843 = -8						; size = 4
_this$ = -4						; size = 4
_packStream$ = 8					; size = 4
?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindBond_for_PackStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	DWORD PTR _i$68843[ebp], 0
	jmp	SHORT $LN4@FindBond_f
$LN3@FindBond_f:
	mov	eax, DWORD PTR _i$68843[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68843[ebp], eax
$LN4@FindBond_f:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$68843[ebp], eax
	jae	SHORT $LN2@FindBond_f
; Line 109
	mov	ecx, DWORD PTR _i$68843[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _packStream$[ebp]
	jne	SHORT $LN1@FindBond_f
; Line 110
	mov	eax, DWORD PTR _i$68843[ebp]
	jmp	SHORT $LN5@FindBond_f
$LN1@FindBond_f:
; Line 111
	jmp	SHORT $LN3@FindBond_f
$LN2@FindBond_f:
	or	eax, -1
$LN5@FindBond_f:
; Line 112
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
_TEXT	ENDS
PUBLIC	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamIndex$ = 8					; size = 4
?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z PROC ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR _streamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
	xor	ecx, ecx
	test	eax, eax
	setge	cl
	mov	al, cl
; Line 141
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ENDP ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$68868 = -8						; size = 4
_this$ = -4						; size = 4
_streamIndex$ = 8					; size = 4
?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	DWORD PTR _i$68868[ebp], 0
	jmp	SHORT $LN4@FindStream
$LN3@FindStream:
	mov	eax, DWORD PTR _i$68868[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68868[ebp], eax
$LN4@FindStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$68868[ebp], eax
	jae	SHORT $LN2@FindStream
; Line 146
	mov	ecx, DWORD PTR _i$68868[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _streamIndex$[ebp]
	jne	SHORT $LN1@FindStream
; Line 147
	mov	eax, DWORD PTR _i$68868[ebp]
	jmp	SHORT $LN5@FindStream
$LN1@FindStream:
; Line 148
	jmp	SHORT $LN3@FindStream
$LN2@FindStream:
	or	eax, -1
$LN5@FindStream:
; Line 149
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
PUBLIC	?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ	; NCoderMixer2::CBondsChecks::Check
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70268 = -8						; size = 4
_this$ = -4						; size = 4
?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ PROC		; NCoderMixer2::CBondsChecks::Check
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z ; NCoderMixer2::BoolVector_Fill_False
; Line 106
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CBondsChecks::CheckCoder
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@Check
; Line 107
	xor	al, al
	jmp	SHORT $LN6@Check
$LN5@Check:
; Line 109
	mov	DWORD PTR _i$70268[ebp], 0
	jmp	SHORT $LN4@Check
$LN3@Check:
	mov	eax, DWORD PTR _i$70268[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70268[ebp], eax
$LN4@Check:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$70268[ebp], eax
	jae	SHORT $LN2@Check
; Line 110
	mov	ecx, DWORD PTR _i$70268[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Check
; Line 111
	xor	al, al
	jmp	SHORT $LN6@Check
$LN1@Check:
; Line 113
	jmp	SHORT $LN3@Check
$LN2@Check:
	mov	al, 1
$LN6@Check:
; Line 114
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ ENDP		; NCoderMixer2::CBondsChecks::Check
_TEXT	ENDS
PUBLIC	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70226 = -8						; size = 4
_p$ = -4						; size = 4
_v$ = 8							; size = 4
_size$ = 12						; size = 4
?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z PROC ; NCoderMixer2::BoolVector_Fill_False
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 57
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 58
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 59
	mov	DWORD PTR _i$70226[ebp], 0
	jmp	SHORT $LN3@BoolVector
$LN2@BoolVector:
	mov	ecx, DWORD PTR _i$70226[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70226[ebp], ecx
$LN3@BoolVector:
	mov	edx, DWORD PTR _i$70226[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@BoolVector
; Line 60
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$70226[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN2@BoolVector
$LN4@BoolVector:
; Line 61
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z ENDP ; NCoderMixer2::BoolVector_Fill_False
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
PUBLIC	?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ	; NCoderMixer2::CBindInfo::ClearMaps
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ PROC		; NCoderMixer2::CBindInfo::ClearMaps
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 119
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 120
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ ENDP		; NCoderMixer2::CBindInfo::ClearMaps
_TEXT	ENDS
PUBLIC	??1CBondsChecks@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBondsChecks::~CBondsChecks
PUBLIC	??0CBondsChecks@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBondsChecks::CBondsChecks
PUBLIC	?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0
__ehfuncinfo$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T72342 = -57						; size = 1
_bc$ = -52						; size = 16
_j$70287 = -32						; size = 4
_c$70286 = -28						; size = 4
_i$70282 = -24						; size = 4
_numStreams$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ PROC	; NCoderMixer2::CBindInfo::CalcMapsAndCheck
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CBindInfo::ClearMaps
; Line 126
	mov	DWORD PTR _numStreams$[ebp], 0
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	test	eax, eax
	jne	SHORT $LN9@CalcMapsAn
; Line 129
	xor	al, al
	jmp	$LN10@CalcMapsAn
$LN9@CalcMapsAn:
; Line 130
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	esi, eax
	sub	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	esi, eax
	je	SHORT $LN8@CalcMapsAn
; Line 131
	xor	al, al
	jmp	$LN10@CalcMapsAn
$LN8@CalcMapsAn:
; Line 133
	mov	DWORD PTR _i$70282[ebp], 0
	jmp	SHORT $LN7@CalcMapsAn
$LN6@CalcMapsAn:
	mov	eax, DWORD PTR _i$70282[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70282[ebp], eax
$LN7@CalcMapsAn:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	DWORD PTR _i$70282[ebp], eax
	jae	SHORT $LN5@CalcMapsAn
; Line 135
	mov	ecx, DWORD PTR _numStreams$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 137
	mov	edx, DWORD PTR _i$70282[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	DWORD PTR _c$70286[ebp], eax
; Line 139
	mov	DWORD PTR _j$70287[ebp], 0
	jmp	SHORT $LN4@CalcMapsAn
$LN3@CalcMapsAn:
	mov	eax, DWORD PTR _j$70287[ebp]
	add	eax, 1
	mov	DWORD PTR _j$70287[ebp], eax
$LN4@CalcMapsAn:
	mov	ecx, DWORD PTR _c$70286[ebp]
	mov	edx, DWORD PTR _j$70287[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@CalcMapsAn
; Line 140
	mov	eax, DWORD PTR _i$70282[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
	jmp	SHORT $LN3@CalcMapsAn
$LN2@CalcMapsAn:
; Line 142
	mov	ecx, DWORD PTR _c$70286[ebp]
	mov	edx, DWORD PTR _numStreams$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _numStreams$[ebp], edx
; Line 143
	jmp	SHORT $LN6@CalcMapsAn
$LN5@CalcMapsAn:
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
	cmp	DWORD PTR _numStreams$[ebp], eax
	je	SHORT $LN1@CalcMapsAn
; Line 146
	xor	al, al
	jmp	SHORT $LN10@CalcMapsAn
$LN1@CalcMapsAn:
; Line 148
	lea	ecx, DWORD PTR _bc$[ebp]
	call	??0CBondsChecks@NCoderMixer2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _bc$[ebp+12], eax
; Line 150
	lea	ecx, DWORD PTR _bc$[ebp]
	call	?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBondsChecks::Check
	mov	BYTE PTR $T72342[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bc$[ebp]
	call	??1CBondsChecks@NCoderMixer2@@QAE@XZ
	mov	al, BYTE PTR $T72342[ebp]
$LN10@CalcMapsAn:
; Line 151
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@CalcMapsAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@CalcMapsAn:
	DD	1
	DD	$LN15@CalcMapsAn
$LN15@CalcMapsAn:
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN13@CalcMapsAn
$LN13@CalcMapsAn:
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0:
	lea	ecx, DWORD PTR _bc$[ebp]
	jmp	??1CBondsChecks@NCoderMixer2@@QAE@XZ
__ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ENDP	; NCoderMixer2::CBindInfo::CalcMapsAndCheck
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ PROC ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	add	eax, esi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ENDP ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBondsChecks@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBondsChecks@NCoderMixer2@@QAE@XZ PROC		; NCoderMixer2::CBondsChecks::CBondsChecks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBondsChecks@NCoderMixer2@@QAE@XZ ENDP		; NCoderMixer2::CBondsChecks::CBondsChecks
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBondsChecks@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBondsChecks@NCoderMixer2@@QAE@XZ PROC		; NCoderMixer2::CBondsChecks::~CBondsChecks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBondsChecks@NCoderMixer2@@QAE@XZ ENDP		; NCoderMixer2::CBondsChecks::~CBondsChecks
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z		; CRecordVector<unsigned __int64 const *>::operator[]
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z	; CRecordVector<unsigned __int64 const *>::ClearAndSetSize
PUBLIC	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndSetSize
PUBLIC	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70307 = -8						; size = 4
_this$ = -4						; size = 4
_unpackSize$ = 8					; size = 4
_packSizes$ = 12					; size = 4
?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z PROC ; NCoderMixer2::CCoder::SetCoderInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 156
	cmp	DWORD PTR _unpackSize$[ebp], 0
	je	SHORT $LN7@SetCoderIn
; Line 158
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], ecx
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 161
	jmp	SHORT $LN6@SetCoderIn
$LN7@SetCoderIn:
; Line 163
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 164
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN6@SetCoderIn:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize
; Line 168
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z ; CRecordVector<unsigned __int64 const *>::ClearAndSetSize
; Line 170
	mov	DWORD PTR _i$70307[ebp], 0
	jmp	SHORT $LN5@SetCoderIn
$LN4@SetCoderIn:
	mov	ecx, DWORD PTR _i$70307[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70307[ebp], ecx
$LN5@SetCoderIn:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$70307[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	$LN8@SetCoderIn
; Line 172
	cmp	DWORD PTR _packSizes$[ebp], 0
	je	SHORT $LN2@SetCoderIn
	mov	ecx, DWORD PTR _i$70307[ebp]
	mov	edx, DWORD PTR _packSizes$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN2@SetCoderIn
; Line 174
	mov	eax, DWORD PTR _i$70307[ebp]
	mov	ecx, DWORD PTR _packSizes$[ebp]
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _i$70307[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
; Line 175
	mov	eax, DWORD PTR _i$70307[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$70307[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z	; CRecordVector<unsigned __int64 const *>::operator[]
	mov	DWORD PTR [eax], esi
; Line 177
	jmp	SHORT $LN1@SetCoderIn
$LN2@SetCoderIn:
; Line 179
	mov	edx, DWORD PTR _i$70307[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 180
	mov	eax, DWORD PTR _i$70307[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z	; CRecordVector<unsigned __int64 const *>::operator[]
	mov	DWORD PTR [eax], 0
$LN1@SetCoderIn:
; Line 182
	jmp	$LN4@SetCoderIn
$LN8@SetCoderIn:
; Line 183
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ENDP ; NCoderMixer2::CCoder::SetCoderInfo
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
PUBLIC	__TI1H
PUBLIC	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
PUBLIC	?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T72366 = -16						; size = 4
_nextCoder$ = -12					; size = 4
_bond$ = -8						; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z PROC ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 187
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jne	SHORT $LN3@Is_UnpackS
; Line 188
	mov	al, 1
	jmp	SHORT $LN5@Is_UnpackS
$LN3@Is_UnpackS:
; Line 190
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
	mov	DWORD PTR _bond$[ebp], eax
; Line 191
	cmp	DWORD PTR _bond$[ebp], 0
	jge	SHORT $LN2@Is_UnpackS
; Line 192
	mov	DWORD PTR $T72366[ebp], 20150213	; 013377c5H
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T72366[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Is_UnpackS:
; Line 198
	mov	ecx, DWORD PTR _bond$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _nextCoder$[ebp], eax
; Line 200
	mov	ecx, DWORD PTR _nextCoder$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Is_UnpackS
; Line 201
	xor	al, al
	jmp	SHORT $LN5@Is_UnpackS
$LN1@Is_UnpackS:
; Line 203
	mov	eax, DWORD PTR _nextCoder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder
$LN5@Is_UnpackS:
; Line 204
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ENDP ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
_TEXT	SEGMENT
_i$68850 = -8						; size = 4
_this$ = -4						; size = 4
_unpackStream$ = 8					; size = 4
?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z PROC ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	DWORD PTR _i$68850[ebp], 0
	jmp	SHORT $LN4@FindBond_f@2
$LN3@FindBond_f@2:
	mov	eax, DWORD PTR _i$68850[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68850[ebp], eax
$LN4@FindBond_f@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$68850[ebp], eax
	jae	SHORT $LN2@FindBond_f@2
; Line 117
	mov	ecx, DWORD PTR _i$68850[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR _unpackStream$[ebp]
	jne	SHORT $LN1@FindBond_f@2
; Line 118
	mov	eax, DWORD PTR _i$68850[ebp]
	jmp	SHORT $LN5@FindBond_f@2
$LN1@FindBond_f@2:
; Line 119
	jmp	SHORT $LN3@FindBond_f@2
$LN2@FindBond_f@2:
	or	eax, -1
$LN5@FindBond_f@2:
; Line 120
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ENDP ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
_TEXT	ENDS
PUBLIC	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
PUBLIC	?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T72371 = -16						; size = 4
_nextCoder$ = -12					; size = 4
_bond$ = -8						; size = 4
_this$ = -4						; size = 4
_streamIndex$ = 8					; size = 4
?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z PROC ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 208
	mov	eax, DWORD PTR _streamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Is_PackSiz
; Line 209
	mov	al, 1
	jmp	SHORT $LN5@Is_PackSiz
$LN3@Is_PackSiz:
; Line 211
	mov	edx, DWORD PTR _streamIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$[ebp], eax
; Line 212
	cmp	DWORD PTR _bond$[ebp], 0
	jge	SHORT $LN2@Is_PackSiz
; Line 213
	mov	DWORD PTR $T72371[ebp], 20150213	; 013377c5H
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T72371[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Is_PackSiz:
; Line 215
	mov	ecx, DWORD PTR _bond$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nextCoder$[ebp], edx
; Line 217
	mov	eax, DWORD PTR _nextCoder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@Is_PackSiz
; Line 218
	xor	al, al
	jmp	SHORT $LN5@Is_PackSiz
$LN1@Is_PackSiz:
; Line 220
	mov	edx, DWORD PTR _nextCoder$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
$LN5@Is_PackSiz:
; Line 221
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z ENDP ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream
; Function compile flags: /Odtp /RTCsu
_i$70345 = -16						; size = 4
_numStreams$ = -12					; size = 4
_startIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z PROC ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
; _this$ = ecx
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _startIndex$[ebp], ecx
; Line 226
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _numStreams$[ebp], eax
; Line 227
	mov	DWORD PTR _i$70345[ebp], 0
	jmp	SHORT $LN4@Is_PackSiz@2
$LN3@Is_PackSiz@2:
	mov	ecx, DWORD PTR _i$70345[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70345[ebp], ecx
$LN4@Is_PackSiz@2:
	mov	edx, DWORD PTR _i$70345[ebp]
	cmp	edx, DWORD PTR _numStreams$[ebp]
	jae	SHORT $LN2@Is_PackSiz@2
; Line 228
	mov	eax, DWORD PTR _startIndex$[ebp]
	add	eax, DWORD PTR _i$70345[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Is_PackSiz@2
; Line 229
	xor	al, al
	jmp	SHORT $LN5@Is_PackSiz@2
$LN1@Is_PackSiz@2:
; Line 230
	jmp	SHORT $LN3@Is_PackSiz@2
$LN2@Is_PackSiz@2:
	mov	al, 1
$LN5@Is_PackSiz@2:
; Line 231
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ENDP ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
_TEXT	ENDS
PUBLIC	?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T72374 = -28						; size = 4
_bond$70363 = -24					; size = 4
_si$70361 = -20						; size = 4
_i$70357 = -16						; size = 4
_numStreams$ = -12					; size = 4
_startIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z PROC ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@IsThere_Ex
; Line 236
	mov	al, 1
	jmp	$LN9@IsThere_Ex
$LN7@IsThere_Ex:
; Line 237
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _startIndex$[ebp], eax
; Line 238
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _numStreams$[ebp], edx
; Line 239
	mov	DWORD PTR _i$70357[ebp], 0
	jmp	SHORT $LN6@IsThere_Ex
$LN5@IsThere_Ex:
	mov	eax, DWORD PTR _i$70357[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70357[ebp], eax
$LN6@IsThere_Ex:
	mov	ecx, DWORD PTR _i$70357[ebp]
	cmp	ecx, DWORD PTR _numStreams$[ebp]
	jae	SHORT $LN4@IsThere_Ex
; Line 241
	mov	edx, DWORD PTR _startIndex$[ebp]
	add	edx, DWORD PTR _i$70357[ebp]
	mov	DWORD PTR _si$70361[ebp], edx
; Line 242
	mov	eax, DWORD PTR _si$70361[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsThere_Ex
; Line 243
	jmp	SHORT $LN5@IsThere_Ex
$LN3@IsThere_Ex:
; Line 245
	mov	edx, DWORD PTR _si$70361[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$70363[ebp], eax
; Line 246
	cmp	DWORD PTR _bond$70363[ebp], 0
	jge	SHORT $LN2@IsThere_Ex
; Line 247
	mov	DWORD PTR $T72374[ebp], 20150213	; 013377c5H
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T72374[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@IsThere_Ex:
; Line 249
	mov	ecx, DWORD PTR _bond$70363[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@IsThere_Ex
; Line 250
	mov	al, 1
	jmp	SHORT $LN9@IsThere_Ex
$LN1@IsThere_Ex:
; Line 251
	jmp	$LN5@IsThere_Ex
$LN4@IsThere_Ex:
; Line 252
	xor	al, al
$LN9@IsThere_Ex:
; Line 253
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ENDP ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>
PUBLIC	??1CMixer@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>
PUBLIC	??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>
PUBLIC	??_7CMixerST@NCoderMixer2@@6BCMixer@1@@		; NCoderMixer2::CMixerST::`vftable'
PUBLIC	??_7CMixerST@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerST::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0CMixer@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixer::CMixer
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??0CMixerST@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixerST::CMixerST
PUBLIC	??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerST::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMixerST@NCoderMixer2@@@8		; NCoderMixer2::CMixerST `RTTI Type Descriptor'
PUBLIC	??_R3CMixerST@NCoderMixer2@@8			; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixerST@NCoderMixer2@@8			; NCoderMixer2::CMixerST::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8		; NCoderMixer2::CMixerST::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMixer@NCoderMixer2@@@8			; NCoderMixer2::CMixer `RTTI Type Descriptor'
PUBLIC	??_R3CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1GI@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ; NCoderMixer2::CMixerST::QueryInterface
PUBLIC	?AddRef@CMixerST@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerST::AddRef
PUBLIC	?Release@CMixerST@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerST::Release
PUBLIC	??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@	; NCoderMixer2::CMixerST::`RTTI Complete Object Locator'
PUBLIC	?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixer::SetBindInfo
PUBLIC	?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ; NCoderMixer2::CMixerST::AddCoder
PUBLIC	?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z ; NCoderMixer2::CMixerST::GetCoder
PUBLIC	?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z ; NCoderMixer2::CMixerST::SelectMainCoder
PUBLIC	?ReInit@CMixerST@NCoderMixer2@@UAEXXZ		; NCoderMixer2::CMixerST::ReInit
PUBLIC	?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerST::SetCoderInfo
PUBLIC	?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCoderMixer2::CMixerST::Code
PUBLIC	?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z ; NCoderMixer2::CMixerST::GetBondStreamSize
;	COMDAT ??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@
rdata$r	SEGMENT
??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@ DD 00H		; NCoderMixer2::CMixerST::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCMixerST@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerST@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1GI@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
	DD	00H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixer@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixer@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixer@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixer@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixer@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixerST@NCoderMixer2@@@8 ; NCoderMixer2::CMixerST::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixerST@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixerST@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixerST@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8 ; NCoderMixer2::CMixerST::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMixer@NCoderMixer2@@8
	DD	FLAT:??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMixerST@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixerST@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMixerST@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixerST@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixerST@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixerST `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixerST@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@
rdata$r	SEGMENT
??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@ DD 00H	; NCoderMixer2::CMixerST::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixerST@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerST@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@
CONST	SEGMENT
??_7CMixerST@NCoderMixer2@@6BCMixer@1@@ DD FLAT:??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@ ; NCoderMixer2::CMixerST::`vftable'
	DD	FLAT:?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	DD	FLAT:?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z
	DD	FLAT:?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z
	DD	FLAT:?ReInit@CMixerST@NCoderMixer2@@UAEXXZ
	DD	FLAT:?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
	DD	FLAT:?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	DD	FLAT:?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z
CONST	ENDS
;	COMDAT ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@
CONST	SEGMENT
??_7CMixerST@NCoderMixer2@@6BIUnknown@@@ DD FLAT:??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@ ; NCoderMixer2::CMixerST::`vftable'
	DD	FLAT:?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMixerST@NCoderMixer2@@UAGKXZ
	DD	FLAT:?Release@CMixerST@NCoderMixer2@@UAGKXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CMixerST@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixerST@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixerST@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixerST@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixerST::CMixerST
; _this$ = ecx
; Line 262
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	movzx	eax, BYTE PTR _encodeMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMixer@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixer::CMixer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>
__ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixerST@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixerST@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixerST::CMixerST
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??0CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::CBindInfo
PUBLIC	??_7CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`vftable'
PUBLIC	??_R4CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4CMixer@NCoderMixer2@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R4CMixer@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixer@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixer@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CMixer@NCoderMixer2@@6B@ DD FLAT:??_R4CMixer@NCoderMixer2@@6B@ ; NCoderMixer2::CMixer::`vftable'
	DD	FLAT:?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMixer@NCoderMixer2@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixer@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixer::CMixer, COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMixer@NCoderMixer2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _encodeMode$[ebp]
	mov	BYTE PTR [ecx+92], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixer@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixer::CMixer
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
PUBLIC	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z	; NCoderMixer2::CBindInfo::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bindInfo$ = 8						; size = 4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z PROC ; NCoderMixer2::CMixer::SetBindInfo, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	mov	eax, DWORD PTR _bindInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
; Line 267
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 269
	xor	eax, eax
; Line 270
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ENDP ; NCoderMixer2::CMixer::SetBindInfo
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
PUBLIC	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::CBindInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned int>::operator=
PUBLIC	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
PUBLIC	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z PROC	; NCoderMixer2::CBindInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ENDP	; NCoderMixer2::CBindInfo::operator=
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z PROC ; NCoderMixer2::CMixerST::QueryInterface, COMDAT
; Line 332
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCoderMixer2::CMixerST::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMixerST@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMixerST@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerST::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMixerST@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerST::AddRef
_TEXT	ENDS
PUBLIC	??_GCMixerST@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CMixerST::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMixerST@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72436 = -8						; size = 4
$T72435 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMixerST@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerST::Release, COMDAT
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72436[ebp], edx
	mov	eax, DWORD PTR $T72436[ebp]
	mov	DWORD PTR $T72435[ebp], eax
	cmp	DWORD PTR $T72435[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T72435[ebp]
	call	??_GCMixerST@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMixerST@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerST::Release
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
_unpackSize$ = 12					; size = 4
_packSizes$ = 16					; size = 4
?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z PROC ; NCoderMixer2::CMixerST::SetCoderInfo, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _packSizes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	ecx, eax
	call	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ENDP ; NCoderMixer2::CMixerST::SetCoderInfo
_TEXT	ENDS
PUBLIC	??1CMixerST@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CMixerST::~CMixerST
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMixerST@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMixerST@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CMixerST::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMixerST@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CMixerST::~CMixerST
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMixerST@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CMixerST::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMixer@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixer@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixer::~CMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixer@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>
xdata$x	SEGMENT
__unwindtable$??1CMixerST@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixerST@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixerST@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixerST@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixerST::~CMixerST
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 264
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CMixer@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>
__ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixerST@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixerST@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixerST::~CMixerST
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
PUBLIC	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ; CMyComPtr<ICompressCoder2>::operator=
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderST>::AddNew
PUBLIC	?Add@?$CRecordVector@_N@@QAEI_N@Z		; CRecordVector<bool>::Add
EXTRN	_IID_ISequentialOutStream:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
xdata$x	SEGMENT
__unwindtable$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$1
__ehfuncinfo$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv155 = -52						; size = 4
_s$70386 = -44						; size = 4
_s$70383 = -32						; size = 4
_unk$70379 = -24					; size = 4
_c2$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_cod$ = 8						; size = 4
?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z PROC ; NCoderMixer2::CMixerST::AddCoder
; _this$ = ecx
; Line 267
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	eax, DWORD PTR _cod$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 269
	mov	edx, DWORD PTR _cod$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 271
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderST>::AddNew
	mov	DWORD PTR _c2$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _c2$[ebp]
	mov	edx, DWORD PTR _cod$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+8], eax
; Line 273
	mov	ecx, DWORD PTR _cod$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c2$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 274
	mov	edx, DWORD PTR _cod$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _c2$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ; CMyComPtr<ICompressCoder2>::operator=
; Line 285
	mov	ecx, DWORD PTR _cod$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN3@AddCoder
	mov	ecx, DWORD PTR _cod$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN4@AddCoder
$LN3@AddCoder:
	mov	ecx, DWORD PTR _cod$[ebp]
	add	ecx, 4
	call	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
	mov	DWORD PTR tv155[ebp], eax
$LN4@AddCoder:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR _unk$70379[ebp], eax
; Line 287
	lea	ecx, DWORD PTR _s$70383[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 288
	lea	ecx, DWORD PTR _s$70383[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _unk$70379[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _unk$70379[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 289
	lea	ecx, DWORD PTR _s$70383[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	edx, DWORD PTR _c2$[ebp]
	mov	BYTE PTR [edx+56], al
; Line 290
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$70383[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Line 292
	lea	ecx, DWORD PTR _s$70386[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 293
	lea	ecx, DWORD PTR _s$70386[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ISequentialOutStream
	mov	eax, DWORD PTR _unk$70379[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _unk$70379[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 294
	lea	ecx, DWORD PTR _s$70386[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _c2$[ebp]
	mov	BYTE PTR [ecx+57], al
; Line 295
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$70386[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Line 297
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@AddCoder
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@AddCoder:
	DD	2
	DD	$LN10@AddCoder
$LN10@AddCoder:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@AddCoder
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN8@AddCoder
$LN8@AddCoder:
	DB	115					; 00000073H
	DB	0
$LN7@AddCoder:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$0:
	lea	ecx, DWORD PTR _s$70383[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$1:
	lea	ecx, DWORD PTR _s$70386[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ENDP ; NCoderMixer2::CMixerST::AddCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z PROC ; NCoderMixer2::CMixerST::GetCoder
; _this$ = ecx
; Line 300
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 301
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
; Line 302
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z ENDP ; NCoderMixer2::CMixerST::GetCoder
; Function compile flags: /Odtp /RTCsu
_this$ = -4						; size = 4
?ReInit@CMixerST@NCoderMixer2@@UAEXXZ PROC		; NCoderMixer2::CMixerST::ReInit
; _this$ = ecx
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReInit@CMixerST@NCoderMixer2@@UAEXXZ ENDP		; NCoderMixer2::CMixerST::ReInit
_TEXT	ENDS
PUBLIC	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
PUBLIC	??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ	; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
PUBLIC	??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ ; CMyComPtr<ICompressSetInStream2>::operator!
PUBLIC	??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ	; CMyComPtr<ICompressSetInStream2>::CMyComPtr<ICompressSetInStream2>
PUBLIC	??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ	; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
PUBLIC	?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream
PUBLIC	??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator ICompressSetInStream *
PUBLIC	??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ	; CMyComPtr<ICompressSetInStream>::CMyComPtr<ICompressSetInStream>
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
PUBLIC	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
PUBLIC	?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream2
EXTRN	_IID_ICompressSetInStream2:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv225 = -180						; size = 4
tv185 = -176						; size = 4
tv158 = -172						; size = 4
tv141 = -168						; size = 4
$T72491 = -164						; size = 4
$T72490 = -160						; size = 4
$T72489 = -156						; size = 4
$T72488 = -152						; size = 4
$T72487 = -148						; size = 4
$T72486 = -144						; size = 4
$T72481 = -140						; size = 4
___result_$70520 = -136					; size = 4
___result_$70516 = -132					; size = 4
_seqInStream2$70515 = -124				; size = 4
_i$70510 = -116						; size = 4
_setStream2$70505 = -108				; size = 4
___result_$70463 = -100					; size = 4
___result_$70459 = -96					; size = 4
_seqInStream2$70458 = -88				; size = 4
_setStream$70454 = -76					; size = 4
_isSet$ = -65						; size = 1
_startIndex$ = -64					; size = 4
_numInStreams$ = -60					; size = 4
_seqInStream$ = -52					; size = 4
_coder$ = -44						; size = 4
_coderStreamIndex$ = -36				; size = 4
_coderIndex$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStreams$ = 8						; size = 4
_outStreamIndex$ = 12					; size = 4
_inStreamRes$ = 16					; size = 4
?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z PROC ; NCoderMixer2::CMixerST::GetInStream2
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _outStreamIndex$[ebp]
	mov	DWORD PTR _coderIndex$[ebp], eax
	mov	DWORD PTR _coderStreamIndex$[ebp], 0
; Line 312
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	test	edx, edx
	je	SHORT $LN14@GetInStrea
; Line 314
	lea	eax, DWORD PTR _coderStreamIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStreamIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
; Line 315
	cmp	DWORD PTR _coderStreamIndex$[ebp], 0
	je	SHORT $LN14@GetInStrea
; Line 316
	mov	eax, -2147467263			; 80004001H
	jmp	$LN15@GetInStrea
$LN14@GetInStrea:
; Line 319
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$[ebp], eax
; Line 321
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 322
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _coder$[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 323
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@GetInStrea
; Line 324
	mov	DWORD PTR $T72481[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72481[ebp]
	jmp	$LN15@GetInStrea
$LN12@GetInStrea:
; Line 326
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN17@GetInStrea
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN18@GetInStrea
$LN17@GetInStrea:
	mov	ecx, DWORD PTR _coder$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv141[ebp], edx
$LN18@GetInStrea:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR _numInStreams$[ebp], eax
; Line 327
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	test	edx, edx
	je	SHORT $LN19@GetInStrea
	mov	eax, DWORD PTR _coderIndex$[ebp]
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN20@GetInStrea
$LN19@GetInStrea:
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv158[ebp], edx
$LN20@GetInStrea:
	mov	eax, DWORD PTR tv158[ebp]
	mov	DWORD PTR _startIndex$[ebp], eax
; Line 329
	mov	BYTE PTR _isSet$[ebp], 0
; Line 331
	cmp	DWORD PTR _numInStreams$[ebp], 1
	jne	$LN11@GetInStrea
; Line 333
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::CMyComPtr<ICompressSetInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 334
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _coder$[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 335
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator ICompressSetInStream *
	test	eax, eax
	je	$LN10@GetInStrea
; Line 337
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 338
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream
	mov	DWORD PTR ___result_$70459[ebp], eax
	cmp	DWORD PTR ___result_$70459[ebp], 0
	je	SHORT $LN9@GetInStrea
	mov	eax, DWORD PTR ___result_$70459[ebp]
	mov	DWORD PTR $T72486[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72486[ebp]
	jmp	$LN15@GetInStrea
$LN9@GetInStrea:
; Line 339
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator->
	mov	DWORD PTR tv185[ebp], eax
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR tv185[ebp]
	push	ecx
	mov	edx, DWORD PTR tv185[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70463[ebp], eax
	cmp	DWORD PTR ___result_$70463[ebp], 0
	je	SHORT $LN8@GetInStrea
	mov	edx, DWORD PTR ___result_$70463[ebp]
	mov	DWORD PTR $T72487[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72487[ebp]
	jmp	$LN15@GetInStrea
$LN8@GetInStrea:
; Line 340
	mov	BYTE PTR _isSet$[ebp], 1
; Line 341
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
$LN10@GetInStrea:
; Line 342
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
$LN11@GetInStrea:
; Line 344
	movzx	eax, BYTE PTR _isSet$[ebp]
	test	eax, eax
	jne	$LN7@GetInStrea
	cmp	DWORD PTR _numInStreams$[ebp], 0
	je	$LN7@GetInStrea
; Line 346
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::CMyComPtr<ICompressSetInStream2>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 347
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetInStream2
	mov	ecx, DWORD PTR _coder$[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 348
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ ; CMyComPtr<ICompressSetInStream2>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GetInStrea
; Line 349
	mov	DWORD PTR $T72488[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72488[ebp]
	jmp	$LN15@GetInStrea
$LN6@GetInStrea:
; Line 351
	mov	DWORD PTR _i$70510[ebp], 0
	jmp	SHORT $LN5@GetInStrea
$LN4@GetInStrea:
	mov	edx, DWORD PTR _i$70510[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70510[ebp], edx
$LN5@GetInStrea:
	mov	eax, DWORD PTR _i$70510[ebp]
	cmp	eax, DWORD PTR _numInStreams$[ebp]
	jae	$LN3@GetInStrea
; Line 353
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 354
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp]
	add	ecx, DWORD PTR _i$70510[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream
	mov	DWORD PTR ___result_$70516[ebp], eax
	cmp	DWORD PTR ___result_$70516[ebp], 0
	je	SHORT $LN2@GetInStrea
	mov	eax, DWORD PTR ___result_$70516[ebp]
	mov	DWORD PTR $T72489[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72489[ebp]
	jmp	$LN15@GetInStrea
$LN2@GetInStrea:
; Line 355
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator->
	mov	DWORD PTR tv225[ebp], eax
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _i$70510[ebp]
	push	ecx
	mov	edx, DWORD PTR tv225[ebp]
	push	edx
	mov	eax, DWORD PTR tv225[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70520[ebp], eax
	cmp	DWORD PTR ___result_$70520[ebp], 0
	je	SHORT $LN1@GetInStrea
	mov	eax, DWORD PTR ___result_$70520[ebp]
	mov	DWORD PTR $T72490[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72490[ebp]
	jmp	SHORT $LN15@GetInStrea
$LN1@GetInStrea:
; Line 356
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN4@GetInStrea
$LN3@GetInStrea:
; Line 357
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	call	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
$LN7@GetInStrea:
; Line 359
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _inStreamRes$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 360
	mov	DWORD PTR $T72491[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72491[ebp]
$LN15@GetInStrea:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@GetInStrea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN35@GetInStrea:
	DD	7
	DD	$LN34@GetInStrea
$LN34@GetInStrea:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN26@GetInStrea
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@GetInStrea
	DD	-52					; ffffffccH
	DD	4
	DD	$LN28@GetInStrea
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN29@GetInStrea
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN30@GetInStrea
	DD	-108					; ffffff94H
	DD	4
	DD	$LN31@GetInStrea
	DD	-124					; ffffff84H
	DD	4
	DD	$LN32@GetInStrea
$LN32@GetInStrea:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN31@GetInStrea:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN30@GetInStrea:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN29@GetInStrea:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN28@GetInStrea:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN27@GetInStrea:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN26@GetInStrea:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0:
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1:
	lea	ecx, DWORD PTR _setStream$70454[ebp]
	jmp	??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$2:
	lea	ecx, DWORD PTR _seqInStream2$70458[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$3:
	lea	ecx, DWORD PTR _setStream2$70505[ebp]
	jmp	??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
__unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$4:
	lea	ecx, DWORD PTR _seqInStream2$70515[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ENDP ; NCoderMixer2::CMixerST::GetInStream2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamIndex$ = 8					; size = 4
_coderIndex$ = 12					; size = 4
_coderStreamIndex$ = 16					; size = 4
?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z PROC ; NCoderMixer2::CBindInfo::GetCoder_for_Stream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 182
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 183
	mov	eax, DWORD PTR _streamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 184
	mov	eax, DWORD PTR _coderIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR _streamIndex$[ebp]
	sub	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _coderStreamIndex$[ebp]
	mov	DWORD PTR [eax], edx
; Line 185
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ENDP ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
_TEXT	ENDS
PUBLIC	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z PROC ; NCoderMixer2::CCoder::QueryInterface, COMDAT
; _this$ = ecx
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 215
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
	mov	DWORD PTR tv67[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	mov	eax, DWORD PTR tv67[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 216
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ENDP ; NCoderMixer2::CCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ PROC ; NCoderMixer2::CCoder::GetUnknown, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN3@GetUnknown
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@GetUnknown
$LN3@GetUnknown:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
	mov	DWORD PTR tv80[ebp], eax
$LN4@GetUnknown:
	mov	eax, DWORD PTR tv80[ebp]
; Line 211
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ENDP ; NCoderMixer2::CCoder::GetUnknown
_TEXT	ENDS
PUBLIC	?Init@CSequentialInStreamCalcSize@@QAEXXZ	; CSequentialInStreamCalcSize::Init
PUBLIC	?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamCalcSize::SetStream
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
PUBLIC	??0CSequentialInStreamCalcSize@@QAE@XZ		; CSequentialInStreamCalcSize::CSequentialInStreamCalcSize
PUBLIC	??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ	; CMyComPtr<IUnknown>::operator IUnknown *
PUBLIC	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
PUBLIC	?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew
PUBLIC	?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size
PUBLIC	?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z	; NCoderMixer2::CBond::Get_OutIndex
PUBLIC	?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1
__ehfuncinfo$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv184 = -80						; size = 4
$T72527 = -76						; size = 4
$T72524 = -72						; size = 4
$T72523 = -68						; size = 4
$T72522 = -64						; size = 4
$T72521 = -60						; size = 4
$T72520 = -56						; size = 4
$T72519 = -52						; size = 4
_spec$ = -48						; size = 4
_bs$ = -44						; size = 4
___result_$70546 = -40					; size = 4
_bond$ = -36						; size = 4
_index$70534 = -32					; size = 4
_seqInStream$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStreams$ = 8						; size = 4
_inStreamIndex$ = 12					; size = 4
_inStreamRes$ = 16					; size = 4
?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z PROC ; NCoderMixer2::CMixerST::GetInStream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 367
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 368
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 371
	mov	DWORD PTR _index$70534[ebp], -1
; Line 372
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN10@GetInStrea@2
; Line 374
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	eax, DWORD PTR _inStreamIndex$[ebp]
	jne	SHORT $LN9@GetInStrea@2
; Line 375
	mov	DWORD PTR _index$70534[ebp], 0
$LN9@GetInStrea@2:
; Line 377
	jmp	SHORT $LN8@GetInStrea@2
$LN10@GetInStrea@2:
; Line 378
	mov	ecx, DWORD PTR _inStreamIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
	mov	DWORD PTR _index$70534[ebp], eax
$LN8@GetInStrea@2:
; Line 380
	cmp	DWORD PTR _index$70534[ebp], 0
	jl	SHORT $LN7@GetInStrea@2
; Line 382
	mov	edx, DWORD PTR _index$70534[ebp]
	mov	eax, DWORD PTR _inStreams$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 383
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	edx, DWORD PTR _inStreamRes$[ebp]
	mov	DWORD PTR [edx], eax
; Line 384
	mov	DWORD PTR $T72519[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72519[ebp]
	jmp	$LN11@GetInStrea@2
$LN7@GetInStrea@2:
; Line 390
	mov	eax, DWORD PTR _inStreamIndex$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream
	mov	DWORD PTR _bond$[ebp], eax
; Line 391
	cmp	DWORD PTR _bond$[ebp], 0
	jge	SHORT $LN6@GetInStrea@2
; Line 392
	mov	DWORD PTR $T72520[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72520[ebp]
	jmp	$LN11@GetInStrea@2
$LN6@GetInStrea@2:
; Line 395
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	push	edx
	mov	eax, DWORD PTR _bond$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	ecx, eax
	call	?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_OutIndex
	push	eax
	mov	ecx, DWORD PTR _inStreams$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream2
	mov	DWORD PTR ___result_$70546[ebp], eax
	cmp	DWORD PTR ___result_$70546[ebp], 0
	je	SHORT $LN4@GetInStrea@2
	mov	edx, DWORD PTR ___result_$70546[ebp]
	mov	DWORD PTR $T72521[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72521[ebp]
	jmp	$LN11@GetInStrea@2
$LN4@GetInStrea@2:
; Line 397
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size
	cmp	eax, DWORD PTR _bond$[ebp]
	ja	SHORT $LN3@GetInStrea@2
; Line 398
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew
	jmp	SHORT $LN4@GetInStrea@2
$LN3@GetInStrea@2:
; Line 399
	mov	eax, DWORD PTR _bond$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
	mov	DWORD PTR _bs$[ebp], eax
; Line 401
	mov	ecx, DWORD PTR _bs$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *
	test	eax, eax
	jne	SHORT $LN1@GetInStrea@2
	mov	ecx, DWORD PTR _bs$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@GetInStrea@2
$LN1@GetInStrea@2:
; Line 402
	mov	DWORD PTR $T72522[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72522[ebp]
	jmp	$LN11@GetInStrea@2
$LN2@GetInStrea@2:
; Line 404
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72524[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72524[ebp], 0
	je	SHORT $LN13@GetInStrea@2
	mov	ecx, DWORD PTR $T72524[ebp]
	call	??0CSequentialInStreamCalcSize@@QAE@XZ
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN14@GetInStrea@2
$LN13@GetInStrea@2:
	mov	DWORD PTR tv184[ebp], 0
$LN14@GetInStrea@2:
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR $T72523[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T72523[ebp]
	mov	DWORD PTR _spec$[ebp], eax
; Line 405
	mov	ecx, DWORD PTR _spec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bs$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 406
	mov	edx, DWORD PTR _bs$[ebp]
	mov	eax, DWORD PTR _spec$[ebp]
	mov	DWORD PTR [edx], eax
; Line 408
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _spec$[ebp]
	call	?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamCalcSize::SetStream
; Line 409
	mov	ecx, DWORD PTR _spec$[ebp]
	call	?Init@CSequentialInStreamCalcSize@@QAEXXZ ; CSequentialInStreamCalcSize::Init
; Line 411
	mov	ecx, DWORD PTR _bs$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 413
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _inStreamRes$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 414
	mov	DWORD PTR $T72527[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72527[ebp]
$LN11@GetInStrea@2:
; Line 415
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetInStrea@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN20@GetInStrea@2:
	DD	1
	DD	$LN19@GetInStrea@2
$LN19@GetInStrea@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@GetInStrea@2
$LN17@GetInStrea@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0:
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1:
	mov	eax, DWORD PTR $T72524[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ENDP ; NCoderMixer2::CMixerST::GetInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z PROC ; CSequentialInStreamCalcSize::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z ENDP ; CSequentialInStreamCalcSize::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CSequentialInStreamCalcSize@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CSequentialInStreamCalcSize@@QAEXXZ PROC		; CSequentialInStreamCalcSize::Init, COMDAT
; _this$ = ecx
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+24], 0
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CSequentialInStreamCalcSize@@QAEXXZ ENDP		; CSequentialInStreamCalcSize::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_encodeMode$ = 8					; size = 1
?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z PROC		; NCoderMixer2::CBond::Get_OutIndex, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _encodeMode$[ebp]
	test	eax, eax
	je	SHORT $LN3@Get_OutInd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN4@Get_OutInd
$LN3@Get_OutInd:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv67[ebp], ecx
$LN4@Get_OutInd:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z ENDP		; NCoderMixer2::CBond::Get_OutIndex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_forInputStream$ = 8					; size = 1
_streamIndex$ = 12					; size = 4
?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z PROC ; NCoderMixer2::CMixer::FindBond_for_Stream, COMDAT
; _this$ = ecx
; Line 229
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 230
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	movzx	edx, BYTE PTR _forInputStream$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@FindBond_f@3
; Line 231
	mov	eax, DWORD PTR _streamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream
	jmp	SHORT $LN3@FindBond_f@3
; Line 232
	jmp	SHORT $LN3@FindBond_f@3
$LN2@FindBond_f@3:
; Line 233
	mov	ecx, DWORD PTR _streamIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
$LN3@FindBond_f@3:
; Line 234
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ENDP ; NCoderMixer2::CMixer::FindBond_for_Stream
_TEXT	ENDS
PUBLIC	??_7CSequentialInStreamCalcSize@@6B@		; CSequentialInStreamCalcSize::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CSequentialInStreamCalcSize@@6B@		; CSequentialInStreamCalcSize::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSequentialInStreamCalcSize@@@8		; CSequentialInStreamCalcSize `RTTI Type Descriptor'
PUBLIC	??_R3CSequentialInStreamCalcSize@@8		; CSequentialInStreamCalcSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSequentialInStreamCalcSize@@8		; CSequentialInStreamCalcSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8	; CSequentialInStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ; CSequentialInStreamCalcSize::QueryInterface
PUBLIC	?AddRef@CSequentialInStreamCalcSize@@UAGKXZ	; CSequentialInStreamCalcSize::AddRef
PUBLIC	?Release@CSequentialInStreamCalcSize@@UAGKXZ	; CSequentialInStreamCalcSize::Release
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8 DD FLAT:??_R0?AVCSequentialInStreamCalcSize@@@8 ; CSequentialInStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSequentialInStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_R2CSequentialInStreamCalcSize@@8
rdata$r	SEGMENT
??_R2CSequentialInStreamCalcSize@@8 DD FLAT:??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8 ; CSequentialInStreamCalcSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CSequentialInStreamCalcSize@@8
rdata$r	SEGMENT
??_R3CSequentialInStreamCalcSize@@8 DD 00H		; CSequentialInStreamCalcSize::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CSequentialInStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSequentialInStreamCalcSize@@@8
_DATA	SEGMENT
??_R0?AVCSequentialInStreamCalcSize@@@8 DD FLAT:??_7type_info@@6B@ ; CSequentialInStreamCalcSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSequentialInStreamCalcSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSequentialInStreamCalcSize@@6B@
rdata$r	SEGMENT
??_R4CSequentialInStreamCalcSize@@6B@ DD 00H		; CSequentialInStreamCalcSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSequentialInStreamCalcSize@@@8
	DD	FLAT:??_R3CSequentialInStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_7CSequentialInStreamCalcSize@@6B@
CONST	SEGMENT
??_7CSequentialInStreamCalcSize@@6B@ DD FLAT:??_R4CSequentialInStreamCalcSize@@6B@ ; CSequentialInStreamCalcSize::`vftable'
	DD	FLAT:?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CSequentialInStreamCalcSize@@UAGKXZ
	DD	FLAT:?Release@CSequentialInStreamCalcSize@@UAGKXZ
	DD	FLAT:?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CSequentialInStreamCalcSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSequentialInStreamCalcSize@@QAE@XZ PROC		; CSequentialInStreamCalcSize::CSequentialInStreamCalcSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSequentialInStreamCalcSize@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSequentialInStreamCalcSize@@QAE@XZ ENDP		; CSequentialInStreamCalcSize::CSequentialInStreamCalcSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z PROC ; CSequentialInStreamCalcSize::QueryInterface, COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ENDP ; CSequentialInStreamCalcSize::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CSequentialInStreamCalcSize@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CSequentialInStreamCalcSize@@UAGKXZ PROC	; CSequentialInStreamCalcSize::AddRef, COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CSequentialInStreamCalcSize@@UAGKXZ ENDP	; CSequentialInStreamCalcSize::AddRef
_TEXT	ENDS
PUBLIC	??_GCSequentialInStreamCalcSize@@QAEPAXI@Z	; CSequentialInStreamCalcSize::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CSequentialInStreamCalcSize@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72556 = -8						; size = 4
$T72555 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CSequentialInStreamCalcSize@@UAGKXZ PROC	; CSequentialInStreamCalcSize::Release, COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72556[ebp], edx
	mov	eax, DWORD PTR $T72556[ebp]
	mov	DWORD PTR $T72555[ebp], eax
	cmp	DWORD PTR $T72555[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T72555[ebp]
	call	??_GCSequentialInStreamCalcSize@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CSequentialInStreamCalcSize@@UAGKXZ ENDP	; CSequentialInStreamCalcSize::Release
_TEXT	ENDS
PUBLIC	??1CSequentialInStreamCalcSize@@QAE@XZ		; CSequentialInStreamCalcSize::~CSequentialInStreamCalcSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSequentialInStreamCalcSize@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSequentialInStreamCalcSize@@QAEPAXI@Z PROC		; CSequentialInStreamCalcSize::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSequentialInStreamCalcSize@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSequentialInStreamCalcSize@@QAEPAXI@Z ENDP		; CSequentialInStreamCalcSize::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CSequentialInStreamCalcSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSequentialInStreamCalcSize@@QAE@XZ PROC		; CSequentialInStreamCalcSize::~CSequentialInStreamCalcSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSequentialInStreamCalcSize@@QAE@XZ ENDP		; CSequentialInStreamCalcSize::~CSequentialInStreamCalcSize
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	?Init@COutStreamCalcSize@@QAEXXZ		; COutStreamCalcSize::Init
PUBLIC	?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z ; COutStreamCalcSize::SetStream
PUBLIC	??0COutStreamCalcSize@@QAE@XZ			; COutStreamCalcSize::COutStreamCalcSize
PUBLIC	??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ	; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
PUBLIC	??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator ICompressSetOutStream *
PUBLIC	??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetOutStream>
PUBLIC	??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ	; CMyComPtr<ICompressSetOutStream>::CMyComPtr<ICompressSetOutStream>
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z	; NCoderMixer2::CBond::Get_InIndex
PUBLIC	?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetOutStream
EXTRN	_IID_ICompressSetOutStream:BYTE
xdata$x	SEGMENT
__unwindtable$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3
__ehfuncinfo$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv273 = -176						; size = 4
tv239 = -172						; size = 4
tv212 = -168						; size = 4
tv195 = -164						; size = 4
$T72583 = -160						; size = 4
$T72580 = -156						; size = 4
$T72579 = -152						; size = 4
$T72578 = -148						; size = 4
$T72577 = -144						; size = 4
$T72576 = -140						; size = 4
$T72575 = -136						; size = 4
$T72570 = -132						; size = 4
$T72569 = -128						; size = 4
$T72568 = -124						; size = 4
_spec$ = -120						; size = 4
_bs$ = -116						; size = 4
___result_$70652 = -112					; size = 4
___result_$70648 = -108					; size = 4
_seqOutStream2$70647 = -100				; size = 4
_setOutStream$70640 = -88				; size = 4
_isSet$ = -77						; size = 1
_startIndex$ = -76					; size = 4
_numOutStreams$ = -72					; size = 4
_coder$ = -68						; size = 4
_coderStreamIndex$ = -60				; size = 4
_coderIndex$ = -48					; size = 4
_inStreamIndex$ = -40					; size = 4
_bond$ = -36						; size = 4
_index$70578 = -32					; size = 4
_seqOutStream$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_outStreams$ = 8					; size = 4
_outStreamIndex$ = 12					; size = 4
_outStreamRes$ = 16					; size = 4
?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z PROC ; NCoderMixer2::CMixerST::GetOutStream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 421
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 422
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 425
	mov	DWORD PTR _index$70578[ebp], -1
; Line 426
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	jne	SHORT $LN16@GetOutStre
; Line 428
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	eax, DWORD PTR _outStreamIndex$[ebp]
	jne	SHORT $LN15@GetOutStre
; Line 429
	mov	DWORD PTR _index$70578[ebp], 0
$LN15@GetOutStre:
; Line 431
	jmp	SHORT $LN14@GetOutStre
$LN16@GetOutStre:
; Line 432
	mov	ecx, DWORD PTR _outStreamIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
	mov	DWORD PTR _index$70578[ebp], eax
$LN14@GetOutStre:
; Line 434
	cmp	DWORD PTR _index$70578[ebp], 0
	jl	SHORT $LN13@GetOutStre
; Line 436
	mov	edx, DWORD PTR _index$70578[ebp]
	mov	eax, DWORD PTR _outStreams$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 437
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach
	mov	edx, DWORD PTR _outStreamRes$[ebp]
	mov	DWORD PTR [edx], eax
; Line 438
	mov	DWORD PTR $T72568[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72568[ebp]
	jmp	$LN17@GetOutStre
$LN13@GetOutStre:
; Line 444
	mov	eax, DWORD PTR _outStreamIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream
	mov	DWORD PTR _bond$[ebp], eax
; Line 445
	cmp	DWORD PTR _bond$[ebp], 0
	jge	SHORT $LN12@GetOutStre
; Line 446
	mov	DWORD PTR $T72569[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72569[ebp]
	jmp	$LN17@GetOutStre
$LN12@GetOutStre:
; Line 448
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	push	edx
	mov	eax, DWORD PTR _bond$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	ecx, eax
	call	?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_InIndex
	mov	DWORD PTR _inStreamIndex$[ebp], eax
; Line 450
	mov	ecx, DWORD PTR _inStreamIndex$[ebp]
	mov	DWORD PTR _coderIndex$[ebp], ecx
; Line 451
	mov	DWORD PTR _coderStreamIndex$[ebp], 0
; Line 453
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	jne	SHORT $LN11@GetOutStre
; Line 454
	lea	ecx, DWORD PTR _coderStreamIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _inStreamIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
$LN11@GetOutStre:
; Line 456
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$[ebp], eax
; Line 463
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _coder$[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 464
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@GetOutStre
; Line 465
	mov	DWORD PTR $T72570[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72570[ebp]
	jmp	$LN17@GetOutStre
$LN10@GetOutStre:
; Line 467
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN19@GetOutStre
	mov	edx, DWORD PTR _coder$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN20@GetOutStre
$LN19@GetOutStre:
	mov	DWORD PTR tv195[ebp], 1
$LN20@GetOutStre:
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR _numOutStreams$[ebp], ecx
; Line 468
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN21@GetOutStre
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv212[ebp], edx
	jmp	SHORT $LN22@GetOutStre
$LN21@GetOutStre:
	mov	eax, DWORD PTR _coderIndex$[ebp]
	mov	DWORD PTR tv212[ebp], eax
$LN22@GetOutStre:
	mov	ecx, DWORD PTR tv212[ebp]
	mov	DWORD PTR _startIndex$[ebp], ecx
; Line 470
	mov	BYTE PTR _isSet$[ebp], 0
; Line 472
	cmp	DWORD PTR _numOutStreams$[ebp], 1
	jne	$LN9@GetOutStre
; Line 474
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::CMyComPtr<ICompressSetOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 475
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetOutStream
	mov	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetOutStream>
; Line 476
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator ICompressSetOutStream *
	test	eax, eax
	je	$LN8@GetOutStre
; Line 478
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 479
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	mov	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStreams$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetOutStream
	mov	DWORD PTR ___result_$70648[ebp], eax
	cmp	DWORD PTR ___result_$70648[ebp], 0
	je	SHORT $LN7@GetOutStre
	mov	ecx, DWORD PTR ___result_$70648[ebp]
	mov	DWORD PTR $T72575[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72575[ebp]
	jmp	$LN17@GetOutStre
$LN7@GetOutStre:
; Line 480
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator->
	mov	DWORD PTR tv239[ebp], eax
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR tv239[ebp]
	push	edx
	mov	eax, DWORD PTR tv239[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70652[ebp], eax
	cmp	DWORD PTR ___result_$70652[ebp], 0
	je	SHORT $LN6@GetOutStre
	mov	eax, DWORD PTR ___result_$70652[ebp]
	mov	DWORD PTR $T72576[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72576[ebp]
	jmp	$LN17@GetOutStre
$LN6@GetOutStre:
; Line 481
	mov	BYTE PTR _isSet$[ebp], 1
; Line 482
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
$LN8@GetOutStre:
; Line 483
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
$LN9@GetOutStre:
; Line 485
	movzx	ecx, BYTE PTR _isSet$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@GetOutStre
	cmp	DWORD PTR _numOutStreams$[ebp], 0
	je	SHORT $LN4@GetOutStre
; Line 487
	mov	DWORD PTR $T72577[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72577[ebp]
	jmp	$LN17@GetOutStre
$LN4@GetOutStre:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size
	cmp	eax, DWORD PTR _bond$[ebp]
	ja	SHORT $LN3@GetOutStre
; Line 503
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew
	jmp	SHORT $LN4@GetOutStre
$LN3@GetOutStre:
; Line 504
	mov	edx, DWORD PTR _bond$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
	mov	DWORD PTR _bs$[ebp], eax
; Line 506
	mov	ecx, DWORD PTR _bs$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *
	test	eax, eax
	jne	SHORT $LN1@GetOutStre
	mov	eax, DWORD PTR _bs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@GetOutStre
$LN1@GetOutStre:
; Line 507
	mov	DWORD PTR $T72578[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72578[ebp]
	jmp	$LN17@GetOutStre
$LN2@GetOutStre:
; Line 509
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72580[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T72580[ebp], 0
	je	SHORT $LN23@GetOutStre
	mov	ecx, DWORD PTR $T72580[ebp]
	call	??0COutStreamCalcSize@@QAE@XZ
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN24@GetOutStre
$LN23@GetOutStre:
	mov	DWORD PTR tv273[ebp], 0
$LN24@GetOutStre:
	mov	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR $T72579[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T72579[ebp]
	mov	DWORD PTR _spec$[ebp], edx
; Line 510
	mov	eax, DWORD PTR _spec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bs$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 511
	mov	ecx, DWORD PTR _bs$[ebp]
	mov	edx, DWORD PTR _spec$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 513
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	ecx, DWORD PTR _spec$[ebp]
	call	?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z ; COutStreamCalcSize::SetStream
; Line 514
	mov	ecx, DWORD PTR _spec$[ebp]
	call	?Init@COutStreamCalcSize@@QAEXXZ	; COutStreamCalcSize::Init
; Line 516
	mov	eax, DWORD PTR _bs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 518
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach
	mov	edx, DWORD PTR _outStreamRes$[ebp]
	mov	DWORD PTR [edx], eax
; Line 519
	mov	DWORD PTR $T72583[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72583[ebp]
$LN17@GetOutStre:
; Line 520
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@GetOutStre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN36@GetOutStre:
	DD	5
	DD	$LN35@GetOutStre
$LN35@GetOutStre:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN29@GetOutStre
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN30@GetOutStre
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN31@GetOutStre
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN32@GetOutStre
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN33@GetOutStre
$LN33@GetOutStre:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN32@GetOutStre:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN31@GetOutStre:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN30@GetOutStre:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN29@GetOutStre:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$0:
	lea	ecx, DWORD PTR _seqOutStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$1:
	lea	ecx, DWORD PTR _setOutStream$70640[ebp]
	jmp	??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$2:
	lea	ecx, DWORD PTR _seqOutStream2$70647[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3:
	mov	eax, DWORD PTR $T72580[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ENDP ; NCoderMixer2::CMixerST::GetOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z PROC ; COutStreamCalcSize::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutStreamCalcSize::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@COutStreamCalcSize@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@COutStreamCalcSize@@QAEXXZ PROC			; COutStreamCalcSize::Init, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@COutStreamCalcSize@@QAEXXZ ENDP			; COutStreamCalcSize::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_encodeMode$ = 8					; size = 1
?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z PROC		; NCoderMixer2::CBond::Get_InIndex, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _encodeMode$[ebp]
	test	eax, eax
	je	SHORT $LN3@Get_InInde
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN4@Get_InInde
$LN3@Get_InInde:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv67[ebp], ecx
$LN4@Get_InInde:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z ENDP		; NCoderMixer2::CBond::Get_InIndex
_TEXT	ENDS
PUBLIC	??_7COutStreamCalcSize@@6BIOutStreamFinish@@@	; COutStreamCalcSize::`vftable'
PUBLIC	??_7COutStreamCalcSize@@6BISequentialOutStream@@@ ; COutStreamCalcSize::`vftable'
PUBLIC	??0IOutStreamFinish@@QAE@XZ			; IOutStreamFinish::IOutStreamFinish
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4COutStreamCalcSize@@6BISequentialOutStream@@@ ; COutStreamCalcSize::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutStreamCalcSize@@@8			; COutStreamCalcSize `RTTI Type Descriptor'
PUBLIC	??_R3COutStreamCalcSize@@8			; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutStreamCalcSize@@8			; COutStreamCalcSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutStreamCalcSize@@8		; COutStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IOutStreamFinish@@8		; IOutStreamFinish::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIOutStreamFinish@@@8			; IOutStreamFinish `RTTI Type Descriptor'
PUBLIC	??_R3IOutStreamFinish@@8			; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutStreamFinish@@8			; IOutStreamFinish::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IOutStreamFinish@@8		; IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ; COutStreamCalcSize::QueryInterface
PUBLIC	?AddRef@COutStreamCalcSize@@UAGKXZ		; COutStreamCalcSize::AddRef
PUBLIC	?Release@COutStreamCalcSize@@UAGKXZ		; COutStreamCalcSize::Release
PUBLIC	??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@	; COutStreamCalcSize::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:COutStreamCalcSize::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@COutStreamCalcSize@@W3AGKXZ		; [thunk]:COutStreamCalcSize::AddRef`adjustor{4}'
PUBLIC	?Release@COutStreamCalcSize@@W3AGKXZ		; [thunk]:COutStreamCalcSize::Release`adjustor{4}'
;	COMDAT ??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@
rdata$r	SEGMENT
??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@ DD 00H	; COutStreamCalcSize::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCOutStreamCalcSize@@@8
	DD	FLAT:??_R3COutStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutStreamFinish@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutStreamFinish@@8 DD FLAT:??_R0?AUIOutStreamFinish@@@8 ; IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutStreamFinish@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutStreamFinish@@8
rdata$r	SEGMENT
??_R2IOutStreamFinish@@8 DD FLAT:??_R1A@?0A@EA@IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutStreamFinish@@8
rdata$r	SEGMENT
??_R3IOutStreamFinish@@8 DD 00H				; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IOutStreamFinish@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutStreamFinish@@@8
_DATA	SEGMENT
??_R0?AUIOutStreamFinish@@@8 DD FLAT:??_7type_info@@6B@	; IOutStreamFinish `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutStreamFinish@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IOutStreamFinish@@8
rdata$r	SEGMENT
??_R13?0A@EA@IOutStreamFinish@@8 DD FLAT:??_R0?AUIOutStreamFinish@@@8 ; IOutStreamFinish::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutStreamFinish@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COutStreamCalcSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutStreamCalcSize@@8 DD FLAT:??_R0?AVCOutStreamCalcSize@@@8 ; COutStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_R2COutStreamCalcSize@@8
rdata$r	SEGMENT
??_R2COutStreamCalcSize@@8 DD FLAT:??_R1A@?0A@EA@COutStreamCalcSize@@8 ; COutStreamCalcSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IOutStreamFinish@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutStreamCalcSize@@8
rdata$r	SEGMENT
??_R3COutStreamCalcSize@@8 DD 00H			; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	06H
	DD	FLAT:??_R2COutStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutStreamCalcSize@@@8
_DATA	SEGMENT
??_R0?AVCOutStreamCalcSize@@@8 DD FLAT:??_7type_info@@6B@ ; COutStreamCalcSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutStreamCalcSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutStreamCalcSize@@6BISequentialOutStream@@@
rdata$r	SEGMENT
??_R4COutStreamCalcSize@@6BISequentialOutStream@@@ DD 00H ; COutStreamCalcSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutStreamCalcSize@@@8
	DD	FLAT:??_R3COutStreamCalcSize@@8
rdata$r	ENDS
;	COMDAT ??_7COutStreamCalcSize@@6BIOutStreamFinish@@@
CONST	SEGMENT
??_7COutStreamCalcSize@@6BIOutStreamFinish@@@ DD FLAT:??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@ ; COutStreamCalcSize::`vftable'
	DD	FLAT:?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutStreamCalcSize@@W3AGKXZ
	DD	FLAT:?Release@COutStreamCalcSize@@W3AGKXZ
	DD	FLAT:?OutStreamFinish@COutStreamCalcSize@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7COutStreamCalcSize@@6BISequentialOutStream@@@
CONST	SEGMENT
??_7COutStreamCalcSize@@6BISequentialOutStream@@@ DD FLAT:??_R4COutStreamCalcSize@@6BISequentialOutStream@@@ ; COutStreamCalcSize::`vftable'
	DD	FLAT:?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutStreamCalcSize@@UAGKXZ
	DD	FLAT:?Release@COutStreamCalcSize@@UAGKXZ
	DD	FLAT:?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0COutStreamCalcSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutStreamCalcSize@@QAE@XZ PROC			; COutStreamCalcSize::COutStreamCalcSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IOutStreamFinish@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutStreamCalcSize@@6BISequentialOutStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7COutStreamCalcSize@@6BIOutStreamFinish@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutStreamCalcSize@@QAE@XZ ENDP			; COutStreamCalcSize::COutStreamCalcSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z PROC ; COutStreamCalcSize::QueryInterface, COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN6@QueryInter@3:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IOutStreamFinish
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@3
$LN9@QueryInter@3:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@3:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@3
$LN5@QueryInter@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@3:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutStreamCalcSize::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutStreamCalcSize@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutStreamCalcSize@@UAGKXZ PROC			; COutStreamCalcSize::AddRef, COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutStreamCalcSize@@UAGKXZ ENDP			; COutStreamCalcSize::AddRef
_TEXT	ENDS
PUBLIC	??_GCOutStreamCalcSize@@QAEPAXI@Z		; COutStreamCalcSize::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COutStreamCalcSize@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72618 = -8						; size = 4
$T72617 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutStreamCalcSize@@UAGKXZ PROC		; COutStreamCalcSize::Release, COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72618[ebp], edx
	mov	eax, DWORD PTR $T72618[ebp]
	mov	DWORD PTR $T72617[ebp], eax
	cmp	DWORD PTR $T72617[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T72617[ebp]
	call	??_GCOutStreamCalcSize@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutStreamCalcSize@@UAGKXZ ENDP		; COutStreamCalcSize::Release
_TEXT	ENDS
PUBLIC	??1COutStreamCalcSize@@QAE@XZ			; COutStreamCalcSize::~COutStreamCalcSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutStreamCalcSize@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutStreamCalcSize@@QAEPAXI@Z PROC			; COutStreamCalcSize::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutStreamCalcSize@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutStreamCalcSize@@QAEPAXI@Z ENDP			; COutStreamCalcSize::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1COutStreamCalcSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutStreamCalcSize@@QAE@XZ PROC			; COutStreamCalcSize::~COutStreamCalcSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutStreamCalcSize@@QAE@XZ ENDP			; COutStreamCalcSize::~COutStreamCalcSize
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	??_7IOutStreamFinish@@6B@			; IOutStreamFinish::`vftable'
PUBLIC	??_R4IOutStreamFinish@@6B@			; IOutStreamFinish::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutStreamFinish@@6B@
rdata$r	SEGMENT
??_R4IOutStreamFinish@@6B@ DD 00H			; IOutStreamFinish::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutStreamFinish@@@8
	DD	FLAT:??_R3IOutStreamFinish@@8
rdata$r	ENDS
;	COMDAT ??_7IOutStreamFinish@@6B@
CONST	SEGMENT
??_7IOutStreamFinish@@6B@ DD FLAT:??_R4IOutStreamFinish@@6B@ ; IOutStreamFinish::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutStreamFinish@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutStreamFinish@@QAE@XZ PROC			; IOutStreamFinish::IOutStreamFinish, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutStreamFinish@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutStreamFinish@@QAE@XZ ENDP			; IOutStreamFinish::IOutStreamFinish
_TEXT	ENDS
PUBLIC	?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z	; NCoderMixer2::CMixerST::FinishCoder
PUBLIC	?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z	; NCoderMixer2::CMixerST::FinishStream
xdata$x	SEGMENT
__unwindtable$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z$0
__ehfuncinfo$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv183 = -80						; size = 4
$T72632 = -76						; size = 4
_res$ = -72						; size = 4
_finish$ = -64						; size = 4
_coder$ = -56						; size = 4
_coderStreamIndex$ = -48				; size = 4
_coderIndex$ = -36					; size = 4
_inStreamIndex$ = -28					; size = 4
_bond$ = -24						; size = 4
_index$70696 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_streamIndex$ = 8					; size = 4
?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z PROC	; NCoderMixer2::CMixerST::FinishStream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 539
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 541
	mov	DWORD PTR _index$70696[ebp], -1
; Line 542
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	jne	SHORT $LN7@FinishStre
; Line 544
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	eax, DWORD PTR _streamIndex$[ebp]
	jne	SHORT $LN6@FinishStre
; Line 545
	mov	DWORD PTR _index$70696[ebp], 0
$LN6@FinishStre:
; Line 547
	jmp	SHORT $LN5@FinishStre
$LN7@FinishStre:
; Line 548
	mov	ecx, DWORD PTR _streamIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams
	mov	DWORD PTR _index$70696[ebp], eax
$LN5@FinishStre:
; Line 550
	cmp	DWORD PTR _index$70696[ebp], 0
	jl	SHORT $LN4@FinishStre
; Line 551
	xor	eax, eax
	jmp	$LN8@FinishStre
$LN4@FinishStre:
; Line 556
	mov	edx, DWORD PTR _streamIndex$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream
	mov	DWORD PTR _bond$[ebp], eax
; Line 557
	cmp	DWORD PTR _bond$[ebp], 0
	jge	SHORT $LN3@FinishStre
; Line 558
	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@FinishStre
$LN3@FinishStre:
; Line 560
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _bond$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	ecx, eax
	call	?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_InIndex
	mov	DWORD PTR _inStreamIndex$[ebp], eax
; Line 562
	mov	eax, DWORD PTR _inStreamIndex$[ebp]
	mov	DWORD PTR _coderIndex$[ebp], eax
; Line 563
	mov	DWORD PTR _coderStreamIndex$[ebp], 0
; Line 564
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	test	edx, edx
	jne	SHORT $LN2@FinishStre
; Line 565
	lea	eax, DWORD PTR _coderStreamIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _coderIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStreamIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
$LN2@FinishStre:
; Line 567
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$[ebp], eax
; Line 568
	lea	ecx, DWORD PTR _finish$[ebp]
	call	??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 569
	lea	ecx, DWORD PTR _finish$[ebp]
	call	??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&
	push	eax
	push	OFFSET _IID_IOutStreamFinish
	mov	ecx, DWORD PTR _coder$[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 570
	mov	DWORD PTR _res$[ebp], 0
; Line 571
	lea	ecx, DWORD PTR _finish$[ebp]
	call	??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *
	test	eax, eax
	je	SHORT $LN1@FinishStre
; Line 573
	lea	ecx, DWORD PTR _finish$[ebp]
	call	??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR tv183[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
$LN1@FinishStre:
; Line 575
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishCoder
	push	eax
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	?GetError@NCoderMixer2@@YGJJJ@Z		; NCoderMixer2::GetError
	mov	DWORD PTR $T72632[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _finish$[ebp]
	call	??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>
	mov	eax, DWORD PTR $T72632[ebp]
$LN8@FinishStre:
; Line 576
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@FinishStre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN16@FinishStre:
	DD	3
	DD	$LN15@FinishStre
$LN15@FinishStre:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN11@FinishStre
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@FinishStre
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN13@FinishStre
$LN13@FinishStre:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN12@FinishStre:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN11@FinishStre:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z$0:
	lea	ecx, DWORD PTR _finish$[ebp]
	jmp	??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>
__ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z ENDP	; NCoderMixer2::CMixerST::FinishStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = 8						; size = 4
_res2$ = 12						; size = 4
?GetError@NCoderMixer2@@YGJJJ@Z PROC			; NCoderMixer2::GetError
; Line 524
	push	ebp
	mov	ebp, esp
; Line 525
	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _res2$[ebp]
	jne	SHORT $LN4@GetError
; Line 526
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN5@GetError
$LN4@GetError:
; Line 527
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN3@GetError
; Line 528
	mov	eax, DWORD PTR _res2$[ebp]
	jmp	SHORT $LN5@GetError
$LN3@GetError:
; Line 529
	cmp	DWORD PTR _res$[ebp], 536870928		; 20000010H
	jne	SHORT $LN2@GetError
; Line 531
	cmp	DWORD PTR _res2$[ebp], 0
	je	SHORT $LN2@GetError
; Line 532
	mov	eax, DWORD PTR _res2$[ebp]
	jmp	SHORT $LN5@GetError
$LN2@GetError:
; Line 534
	mov	eax, DWORD PTR _res$[ebp]
$LN5@GetError:
; Line 535
	pop	ebp
	ret	8
?GetError@NCoderMixer2@@YGJJJ@Z ENDP			; NCoderMixer2::GetError
; Function compile flags: /Odtp /RTCsu
tv129 = -32						; size = 4
tv80 = -28						; size = 4
_i$70726 = -24						; size = 4
_res$ = -20						; size = 4
_startIndex$ = -16					; size = 4
_numOutStreams$ = -12					; size = 4
_coder$ = -8						; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z PROC	; NCoderMixer2::CMixerST::FinishCoder
; _this$ = ecx
; Line 580
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 581
	mov	eax, DWORD PTR _coderIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$[ebp], eax
; Line 583
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	test	edx, edx
	je	SHORT $LN6@FinishCode
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN7@FinishCode
$LN6@FinishCode:
	mov	DWORD PTR tv80[ebp], 1
$LN7@FinishCode:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _numOutStreams$[ebp], edx
; Line 584
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN8@FinishCode
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN9@FinishCode
$LN8@FinishCode:
	mov	ecx, DWORD PTR _coderIndex$[ebp]
	mov	DWORD PTR tv129[ebp], ecx
$LN9@FinishCode:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _startIndex$[ebp], edx
; Line 586
	mov	DWORD PTR _res$[ebp], 0
; Line 587
	mov	DWORD PTR _i$70726[ebp], 0
	jmp	SHORT $LN3@FinishCode
$LN2@FinishCode:
	mov	eax, DWORD PTR _i$70726[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70726[ebp], eax
$LN3@FinishCode:
	mov	ecx, DWORD PTR _i$70726[ebp]
	cmp	ecx, DWORD PTR _numOutStreams$[ebp]
	jae	SHORT $LN1@FinishCode
; Line 588
	mov	edx, DWORD PTR _startIndex$[ebp]
	add	edx, DWORD PTR _i$70726[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishStream
	push	eax
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	?GetError@NCoderMixer2@@YGJJJ@Z		; NCoderMixer2::GetError
	mov	DWORD PTR _res$[ebp], eax
	jmp	SHORT $LN2@FinishCode
$LN1@FinishCode:
; Line 589
	mov	eax, DWORD PTR _res$[ebp]
; Line 590
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z ENDP	; NCoderMixer2::CMixerST::FinishCoder
; Function compile flags: /Odtp /RTCsu
tv189 = -40						; size = 4
tv132 = -36						; size = 4
$T72652 = -32						; size = 4
_bond$70746 = -28					; size = 4
_st$70744 = -24						; size = 4
_coder$70740 = -20					; size = 4
_firstAllowed$ = -16					; size = 4
_firstNonFilter$ = -12					; size = 4
_ci$ = -8						; size = 4
_this$ = -4						; size = 4
_useFirst$ = 8						; size = 1
?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z PROC	; NCoderMixer2::CMixerST::SelectMainCoder
; _this$ = ecx
; Line 594
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 595
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 597
	mov	DWORD PTR _firstNonFilter$[ebp], -1
; Line 598
	mov	edx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR _firstAllowed$[ebp], edx
$LN12@SelectMain:
; Line 602
	mov	eax, DWORD PTR _ci$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$70740[ebp], eax
; Line 605
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ci$[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	je	SHORT $LN10@SelectMain
; Line 606
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN15@SelectMain
	mov	edx, DWORD PTR _coder$70740[ebp]
	movzx	eax, BYTE PTR [edx+57]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN16@SelectMain
$LN15@SelectMain:
	mov	ecx, DWORD PTR _coder$70740[ebp]
	movzx	edx, BYTE PTR [ecx+56]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	DWORD PTR tv132[ebp], edx
$LN16@SelectMain:
	cmp	DWORD PTR tv132[ebp], 0
	je	SHORT $LN10@SelectMain
; Line 608
	mov	eax, DWORD PTR _ci$[ebp]
	mov	DWORD PTR _firstAllowed$[ebp], eax
; Line 609
	mov	DWORD PTR _firstNonFilter$[ebp], -2	; fffffffeH
$LN10@SelectMain:
; Line 612
	mov	ecx, DWORD PTR _coder$70740[ebp]
	cmp	DWORD PTR [ecx+8], 1
	je	SHORT $LN8@SelectMain
; Line 613
	jmp	$LN11@SelectMain
$LN8@SelectMain:
; Line 615
	mov	edx, DWORD PTR _ci$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _st$70744[ebp], eax
; Line 616
	mov	ecx, DWORD PTR _st$70744[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SelectMain
; Line 617
	jmp	$LN11@SelectMain
$LN7@SelectMain:
; Line 618
	mov	eax, DWORD PTR _st$70744[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$70746[ebp], eax
; Line 619
	cmp	DWORD PTR _bond$70746[ebp], 0
	jge	SHORT $LN6@SelectMain
; Line 620
	mov	DWORD PTR $T72652[ebp], 20150213	; 013377c5H
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T72652[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN6@SelectMain:
; Line 622
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+92]
	test	eax, eax
	je	SHORT $LN17@SelectMain
	mov	ecx, DWORD PTR _coder$70740[ebp]
	movzx	edx, BYTE PTR [ecx+56]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	DWORD PTR tv189[ebp], edx
	jmp	SHORT $LN18@SelectMain
$LN17@SelectMain:
	mov	eax, DWORD PTR _coder$70740[ebp]
	movzx	ecx, BYTE PTR [eax+57]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	DWORD PTR tv189[ebp], ecx
$LN18@SelectMain:
	cmp	DWORD PTR tv189[ebp], 0
	je	SHORT $LN5@SelectMain
; Line 623
	jmp	SHORT $LN11@SelectMain
$LN5@SelectMain:
; Line 625
	cmp	DWORD PTR _firstNonFilter$[ebp], -1
	jne	SHORT $LN4@SelectMain
	mov	edx, DWORD PTR _ci$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN4@SelectMain
; Line 626
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR _firstNonFilter$[ebp], ecx
$LN4@SelectMain:
; Line 628
	mov	edx, DWORD PTR _bond$70746[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _ci$[ebp], eax
; Line 629
	jmp	$LN12@SelectMain
$LN11@SelectMain:
; Line 631
	movzx	ecx, BYTE PTR _useFirst$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@SelectMain
; Line 632
	mov	edx, DWORD PTR _firstAllowed$[ebp]
	mov	DWORD PTR _ci$[ebp], edx
	jmp	SHORT $LN2@SelectMain
$LN3@SelectMain:
; Line 633
	cmp	DWORD PTR _firstNonFilter$[ebp], 0
	jl	SHORT $LN2@SelectMain
; Line 634
	mov	eax, DWORD PTR _firstNonFilter$[ebp]
	mov	DWORD PTR _ci$[ebp], eax
$LN2@SelectMain:
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR [ecx+96], edx
$LN14@SelectMain:
; Line 637
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z ENDP	; NCoderMixer2::CMixerST::SelectMainCoder
_TEXT	ENDS
PUBLIC	?ReleaseStream@COutStreamCalcSize@@QAEXXZ	; COutStreamCalcSize::ReleaseStream
PUBLIC	?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ ; CSequentialInStreamCalcSize::ReleaseStream
PUBLIC	?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ; CRecordVector<ISequentialInStream *>::Front
PUBLIC	?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front
PUBLIC	??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator->
PUBLIC	??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ; CRecordVector<ISequentialInStream *>::operator[]
PUBLIC	??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ; CRecordVector<ISequentialOutStream *>::operator[]
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ	; CRecordVector<unsigned __int64 const *>::Front
PUBLIC	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
PUBLIC	??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *
PUBLIC	??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>
PUBLIC	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
PUBLIC	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
PUBLIC	??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ	; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>
PUBLIC	??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator->
PUBLIC	??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator ICompressInitEncoder *
PUBLIC	??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator&
PUBLIC	??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ	; CMyComPtr<ICompressInitEncoder>::CMyComPtr<ICompressInitEncoder>
PUBLIC	?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderST>::Size
PUBLIC	?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add
PUBLIC	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
PUBLIC	?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::Add
PUBLIC	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
PUBLIC	??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
PUBLIC	??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>
PUBLIC	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
PUBLIC	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::Add
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
PUBLIC	?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear
EXTRN	_IID_ICompressSetOutStreamSize:BYTE
EXTRN	_IID_ICompressInitEncoder:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv370 = -272						; size = 4
tv351 = -268						; size = 4
tv344 = -264						; size = 4
tv331 = -260						; size = 4
tv299 = -256						; size = 4
tv316 = -252						; size = 4
tv280 = -248						; size = 4
tv183 = -244						; size = 4
tv164 = -240						; size = 4
tv145 = -236						; size = 4
tv135 = -232						; size = 4
$T72674 = -228						; size = 4
$T72669 = -224						; size = 4
$T72666 = -220						; size = 4
$T72665 = -216						; size = 4
$T72664 = -212						; size = 4
_bs$70910 = -208					; size = 4
_res$ = -204						; size = 4
_outSizes2$ = -200					; size = 4
_isSizes2$ = -196					; size = 4
___result_$70892 = -192					; size = 4
_setOutStreamSize$70889 = -184				; size = 4
___result_$70847 = -176					; size = 4
_initEncoder$70844 = -168				; size = 4
_coder$70805 = -160					; size = 4
_seqOutStreamsSpec$ = -152				; size = 12
_seqInStreamsSpec$ = -132				; size = 12
___result_$70787 = -116					; size = 4
_seqOutStream$70786 = -108				; size = 4
___result_$70778 = -100					; size = 4
_seqInStream$70777 = -92				; size = 4
_i$ = -84						; size = 4
_startOutIndex$ = -80					; size = 4
_startInIndex$ = -76					; size = 4
_numOutStreams$ = -72					; size = 4
_numInStreams$ = -68					; size = 4
_seqOutStreams$ = -60					; size = 12
_seqInStreams$ = -40					; size = 12
_mainCoder$ = -24					; size = 4
_ci$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStreams$ = 8						; size = 4
_outStreams$ = 12					; size = 4
_progress$ = 16						; size = 4
?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z PROC ; NCoderMixer2::CMixerST::Code
; _this$ = ecx
; Line 644
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear
; Line 646
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 648
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _mainCoder$[ebp], eax
; Line 650
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 651
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 653
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+92]
	test	edx, edx
	je	SHORT $LN38@Code
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN39@Code
$LN38@Code:
	mov	eax, DWORD PTR _mainCoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv135[ebp], ecx
$LN39@Code:
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _numInStreams$[ebp], edx
; Line 654
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	jne	SHORT $LN40@Code
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN41@Code
$LN40@Code:
	mov	edx, DWORD PTR _mainCoder$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv145[ebp], eax
$LN41@Code:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _numOutStreams$[ebp], ecx
; Line 656
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+92]
	test	eax, eax
	je	SHORT $LN42@Code
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR tv164[ebp], ecx
	jmp	SHORT $LN43@Code
$LN42@Code:
	mov	edx, DWORD PTR _ci$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv164[ebp], eax
$LN43@Code:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _startInIndex$[ebp], ecx
; Line 657
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+92]
	test	eax, eax
	jne	SHORT $LN44@Code
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR tv183[ebp], ecx
	jmp	SHORT $LN45@Code
$LN44@Code:
	mov	edx, DWORD PTR _ci$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv183[ebp], eax
$LN45@Code:
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR _startOutIndex$[ebp], ecx
; Line 661
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@Code
$LN34@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN35@Code:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numInStreams$[ebp]
	jae	$LN33@Code
; Line 663
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 664
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _startInIndex$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream
	mov	DWORD PTR ___result_$70778[ebp], eax
	cmp	DWORD PTR ___result_$70778[ebp], 0
	je	SHORT $LN32@Code
	mov	eax, DWORD PTR ___result_$70778[ebp]
	mov	DWORD PTR $T72664[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	eax, DWORD PTR $T72664[ebp]
	jmp	$LN36@Code
$LN32@Code:
; Line 665
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::Add
; Line 666
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN34@Code
$LN33@Code:
; Line 668
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@Code
$LN30@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN31@Code:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numOutStreams$[ebp]
	jae	$LN29@Code
; Line 670
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 671
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _startOutIndex$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetOutStream
	mov	DWORD PTR ___result_$70787[ebp], eax
	cmp	DWORD PTR ___result_$70787[ebp], 0
	je	SHORT $LN28@Code
	mov	eax, DWORD PTR ___result_$70787[ebp]
	mov	DWORD PTR $T72665[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	eax, DWORD PTR $T72665[ebp]
	jmp	$LN36@Code
$LN28@Code:
; Line 672
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
; Line 673
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN30@Code
$LN29@Code:
; Line 675
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 676
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 678
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@Code
$LN26@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN27@Code:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numInStreams$[ebp]
	jae	SHORT $LN25@Code
; Line 679
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::Add
	jmp	SHORT $LN26@Code
$LN25@Code:
; Line 680
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@Code
$LN23@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN24@Code:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numOutStreams$[ebp]
	jae	SHORT $LN22@Code
; Line 681
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add
	jmp	SHORT $LN23@Code
$LN22@Code:
; Line 683
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@Code
$LN20@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN21@Code:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderST>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN19@Code
; Line 685
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ci$[ebp]
	jne	SHORT $LN18@Code
; Line 686
	jmp	SHORT $LN20@Code
$LN18@Code:
; Line 688
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$70805[ebp], eax
; Line 690
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+92]
	test	eax, eax
	je	$LN17@Code
; Line 692
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::CMyComPtr<ICompressInitEncoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 693
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator&
	push	eax
	push	OFFSET _IID_ICompressInitEncoder
	mov	ecx, DWORD PTR _coder$70805[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 694
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator ICompressInitEncoder *
	test	eax, eax
	je	$LN16@Code
; Line 695
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator->
	mov	DWORD PTR tv280[ebp], eax
	mov	ecx, DWORD PTR tv280[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR tv280[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70847[ebp], eax
	cmp	DWORD PTR ___result_$70847[ebp], 0
	je	SHORT $LN16@Code
	mov	edx, DWORD PTR ___result_$70847[ebp]
	mov	DWORD PTR $T72666[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	eax, DWORD PTR $T72666[ebp]
	jmp	$LN36@Code
$LN16@Code:
; Line 696
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	call	??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>
; Line 697
	jmp	$LN14@Code
$LN17@Code:
; Line 699
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 700
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetOutStreamSize
	mov	ecx, DWORD PTR _coder$70805[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 701
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *
	test	eax, eax
	je	$LN13@Code
; Line 703
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN46@Code
	push	0
	mov	ecx, DWORD PTR _coder$70805[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z	; CRecordVector<unsigned __int64 const *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv316[ebp], edx
	jmp	SHORT $LN47@Code
$LN46@Code:
	mov	eax, DWORD PTR _coder$70805[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv316[ebp], ecx
$LN47@Code:
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator->
	mov	DWORD PTR tv299[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv316[ebp]
	push	edx
	mov	eax, DWORD PTR tv299[ebp]
	push	eax
	mov	ecx, DWORD PTR tv299[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70892[ebp], eax
	cmp	DWORD PTR ___result_$70892[ebp], 0
	je	SHORT $LN13@Code
	mov	ecx, DWORD PTR ___result_$70892[ebp]
	mov	DWORD PTR $T72669[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	eax, DWORD PTR $T72669[ebp]
	jmp	$LN36@Code
$LN13@Code:
; Line 704
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
$LN14@Code:
; Line 705
	jmp	$LN20@Code
$LN19@Code:
; Line 707
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+92]
	test	eax, eax
	je	SHORT $LN48@Code
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR tv331[ebp], ecx
	jmp	SHORT $LN49@Code
$LN48@Code:
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	add	ecx, 40					; 00000028H
	call	?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ ; CRecordVector<unsigned __int64 const *>::Front
	mov	DWORD PTR tv331[ebp], eax
$LN49@Code:
	mov	edx, DWORD PTR tv331[ebp]
	mov	DWORD PTR _isSizes2$[ebp], edx
; Line 708
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN50@Code
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	add	ecx, 40					; 00000028H
	call	?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ ; CRecordVector<unsigned __int64 const *>::Front
	mov	DWORD PTR tv344[ebp], eax
	jmp	SHORT $LN51@Code
$LN50@Code:
	mov	edx, DWORD PTR _mainCoder$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR tv344[ebp], edx
$LN51@Code:
	mov	eax, DWORD PTR tv344[ebp]
	mov	DWORD PTR _outSizes2$[ebp], eax
; Line 711
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN11@Code
; Line 716
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv351[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outSizes2$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _isSizes2$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ; CRecordVector<ISequentialOutStream *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	push	0
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ; CRecordVector<ISequentialInStream *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR tv351[ebp]
	push	edx
	mov	eax, DWORD PTR tv351[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 718
	jmp	SHORT $LN10@Code
$LN11@Code:
; Line 723
	mov	ecx, DWORD PTR _mainCoder$[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator->
	mov	DWORD PTR tv370[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numOutStreams$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outSizes2$[ebp]
	push	edx
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front
	push	eax
	mov	eax, DWORD PTR _numInStreams$[ebp]
	push	eax
	mov	ecx, DWORD PTR _isSizes2$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ; CRecordVector<ISequentialInStream *>::Front
	push	eax
	mov	edx, DWORD PTR tv370[ebp]
	push	edx
	mov	eax, DWORD PTR tv370[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
$LN10@Code:
; Line 726
	cmp	DWORD PTR _res$[ebp], 536870928		; 20000010H
	jne	SHORT $LN9@Code
; Line 727
	mov	DWORD PTR _res$[ebp], 0
$LN9@Code:
; Line 729
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN7@Code
	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN8@Code
$LN7@Code:
; Line 731
	mov	eax, DWORD PTR _ci$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishCoder
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	?GetError@NCoderMixer2@@YGJJJ@Z		; NCoderMixer2::GetError
	mov	DWORD PTR _res$[ebp], eax
$LN8@Code:
; Line 734
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Code
$LN5@Code:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@Code:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@Code
; Line 736
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
	mov	DWORD PTR _bs$70910[ebp], eax
; Line 737
	mov	ecx, DWORD PTR _bs$70910[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Code
; Line 738
	mov	edx, DWORD PTR _bs$70910[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ ; CSequentialInStreamCalcSize::ReleaseStream
; Line 739
	jmp	SHORT $LN2@Code
$LN3@Code:
; Line 740
	mov	eax, DWORD PTR _bs$70910[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?ReleaseStream@COutStreamCalcSize@@QAEXXZ ; COutStreamCalcSize::ReleaseStream
$LN2@Code:
; Line 741
	jmp	SHORT $LN5@Code
$LN4@Code:
; Line 743
	cmp	DWORD PTR _res$[ebp], 536870928		; 20000010H
	jne	SHORT $LN1@Code
; Line 744
	mov	DWORD PTR _res$[ebp], 0
$LN1@Code:
; Line 745
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T72674[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	call	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	eax, DWORD PTR $T72674[ebp]
$LN36@Code:
; Line 746
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@Code
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN70@Code:
	DD	8
	DD	$LN69@Code
$LN69@Code:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN60@Code
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN61@Code
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN62@Code
	DD	-108					; ffffff94H
	DD	4
	DD	$LN63@Code
	DD	-132					; ffffff7cH
	DD	12					; 0000000cH
	DD	$LN64@Code
	DD	-152					; ffffff68H
	DD	12					; 0000000cH
	DD	$LN65@Code
	DD	-168					; ffffff58H
	DD	4
	DD	$LN66@Code
	DD	-184					; ffffff48H
	DD	4
	DD	$LN67@Code
$LN67@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN66@Code:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN65@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN64@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN63@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN62@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN61@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN60@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _seqInStreams$[ebp]
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1:
	lea	ecx, DWORD PTR _seqOutStreams$[ebp]
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2:
	lea	ecx, DWORD PTR _seqInStream$70777[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3:
	lea	ecx, DWORD PTR _seqOutStream$70786[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4:
	lea	ecx, DWORD PTR _seqInStreamsSpec$[ebp]
	jmp	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5:
	lea	ecx, DWORD PTR _seqOutStreamsSpec$[ebp]
	jmp	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$6:
	lea	ecx, DWORD PTR _initEncoder$70844[ebp]
	jmp	??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>
__unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$7:
	lea	ecx, DWORD PTR _setOutStreamSize$70889[ebp]
	jmp	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
__ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ENDP ; NCoderMixer2::CMixerST::Code
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ PROC	; CSequentialInStreamCalcSize::ReleaseStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ ENDP	; CSequentialInStreamCalcSize::ReleaseStream
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseStream@COutStreamCalcSize@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseStream@COutStreamCalcSize@@QAEXXZ PROC		; COutStreamCalcSize::ReleaseStream, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseStream@COutStreamCalcSize@@QAEXXZ ENDP		; COutStreamCalcSize::ReleaseStream
_TEXT	ENDS
PUBLIC	?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z ; NCoderMixer2::CMixerST::GetMainUnpackStream
xdata$x	SEGMENT
__unwindtable$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$1
__ehfuncinfo$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -72						; size = 4
$T72704 = -68						; size = 4
$T72703 = -64						; size = 4
$T72702 = -60						; size = 4
___result_$70936 = -56					; size = 4
_setOutStreamSize$70933 = -48				; size = 4
_coder$70931 = -40					; size = 4
_i$70927 = -36						; size = 4
___result_$70923 = -32					; size = 4
_seqInStream$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStreams$ = 8						; size = 4
_inStreamRes$ = 12					; size = 4
?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z PROC ; NCoderMixer2::CMixerST::GetMainUnpackStream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 752
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 753
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 756
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _inStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream2
	mov	DWORD PTR ___result_$70923[ebp], eax
	cmp	DWORD PTR ___result_$70923[ebp], 0
	je	SHORT $LN6@GetMainUnp
	mov	eax, DWORD PTR ___result_$70923[ebp]
	mov	DWORD PTR $T72702[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72702[ebp]
	jmp	$LN7@GetMainUnp
$LN6@GetMainUnp:
; Line 758
	mov	DWORD PTR _i$70927[ebp], 0
	jmp	SHORT $LN5@GetMainUnp
$LN4@GetMainUnp:
	mov	ecx, DWORD PTR _i$70927[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70927[ebp], ecx
$LN5@GetMainUnp:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderST>::Size
	cmp	DWORD PTR _i$70927[ebp], eax
	jae	$LN3@GetMainUnp
; Line 760
	mov	edx, DWORD PTR _i$70927[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
	mov	DWORD PTR _coder$70931[ebp], eax
; Line 761
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 762
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetOutStreamSize
	mov	ecx, DWORD PTR _coder$70931[ebp]
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 763
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *
	test	eax, eax
	je	SHORT $LN2@GetMainUnp
; Line 765
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator->
	mov	DWORD PTR tv140[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _coder$70931[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR tv140[ebp]
	push	edx
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70936[ebp], eax
	cmp	DWORD PTR ___result_$70936[ebp], 0
	je	SHORT $LN2@GetMainUnp
	mov	eax, DWORD PTR ___result_$70936[ebp]
	mov	DWORD PTR $T72703[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72703[ebp]
	jmp	SHORT $LN7@GetMainUnp
$LN2@GetMainUnp:
; Line 767
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	call	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
	jmp	$LN4@GetMainUnp
$LN3@GetMainUnp:
; Line 769
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _inStreamRes$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 770
	mov	DWORD PTR $T72704[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72704[ebp]
$LN7@GetMainUnp:
; Line 771
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetMainUnp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN15@GetMainUnp:
	DD	2
	DD	$LN14@GetMainUnp
$LN14@GetMainUnp:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN11@GetMainUnp
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@GetMainUnp
$LN12@GetMainUnp:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN11@GetMainUnp:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$0:
	lea	ecx, DWORD PTR _seqInStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$1:
	lea	ecx, DWORD PTR _setOutStreamSize$70933[ebp]
	jmp	??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
__ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z ENDP ; NCoderMixer2::CMixerST::GetMainUnpackStream
PUBLIC	?GetSize@COutStreamCalcSize@@QBE_KXZ		; COutStreamCalcSize::GetSize
PUBLIC	?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ	; CSequentialInStreamCalcSize::GetSize
PUBLIC	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bs$ = -8						; size = 4
_this$ = -4						; size = 4
_bondIndex$ = 8						; size = 4
?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z PROC	; NCoderMixer2::CMixerST::GetBondStreamSize
; _this$ = ecx
; Line 775
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 776
	mov	eax, DWORD PTR _bondIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
	mov	DWORD PTR _bs$[ebp], eax
; Line 777
	mov	ecx, DWORD PTR _bs$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@GetBondStr
; Line 778
	mov	edx, DWORD PTR _bs$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ ; CSequentialInStreamCalcSize::GetSize
	jmp	SHORT $LN2@GetBondStr
$LN1@GetBondStr:
; Line 779
	mov	eax, DWORD PTR _bs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?GetSize@COutStreamCalcSize@@QBE_KXZ	; COutStreamCalcSize::GetSize
$LN2@GetBondStr:
; Line 780
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z ENDP	; NCoderMixer2::CMixerST::GetBondStreamSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ PROC	; CSequentialInStreamCalcSize::GetSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ ENDP	; CSequentialInStreamCalcSize::GetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@COutStreamCalcSize@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@COutStreamCalcSize@@QBE_KXZ PROC		; COutStreamCalcSize::GetSize, COMDAT
; _this$ = ecx
; Line 72
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@COutStreamCalcSize@@QBE_KXZ ENDP		; COutStreamCalcSize::GetSize
_TEXT	ENDS
PUBLIC	?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ; NCoderMixer2::CCoderMT::Code
PUBLIC	?Execute@CCoderMT@NCoderMixer2@@EAEXXZ		; NCoderMixer2::CCoderMT::Execute
xdata$x	SEGMENT
__catchsym$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0
__unwindtable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$2
__ehfuncinfo$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?Execute@CCoderMT@NCoderMixer2@@EAEXXZ PROC		; NCoderMixer2::CCoderMT::Execute
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 793
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 795
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 796
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ; NCoderMixer2::CCoderMT::Code
; Line 797
	jmp	SHORT $LN4@Execute
__catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0:
; Line 800
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], -2147467259	; 80004005H
; Line 801
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN2@Execute
	ret	0
$LN4@Execute:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN2@Execute:
; Line 802
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Execute@CCoderMT@NCoderMixer2@@EAEXXZ ENDP		; NCoderMixer2::CCoderMT::Execute
PUBLIC	??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CCoderMT::CReleaser::~CReleaser
PUBLIC	?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ	; CRecordVector<unsigned __int64 const *>::Front
PUBLIC	??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z ; NCoderMixer2::CCoderMT::CReleaser::CReleaser
PUBLIC	?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::AddInReserved
PUBLIC	?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::AddInReserved
PUBLIC	?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z ; CRecordVector<ISequentialOutStream *>::ClearAndReserve
PUBLIC	?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z ; CRecordVector<ISequentialInStream *>::ClearAndReserve
xdata$x	SEGMENT
__unwindtable$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0
__ehfuncinfo$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv223 = -72						; size = 4
tv266 = -68						; size = 4
tv244 = -64						; size = 4
tv163 = -60						; size = 4
tv202 = -56						; size = 4
tv184 = -52						; size = 4
tv81 = -48						; size = 4
tv72 = -44						; size = 4
_releaser$ = -36					; size = 4
_i$ = -28						; size = 4
_numOutStreams$ = -24					; size = 4
_numInStreams$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_progress$ = 8						; size = 4
?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z PROC ; NCoderMixer2::CCoderMT::Code
; _this$ = ecx
; Line 805
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 806
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN11@Code@2
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN12@Code@2
$LN11@Code@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv72[ebp], eax
$LN12@Code@2:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _numInStreams$[ebp], ecx
; Line 807
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+104]
	test	eax, eax
	je	SHORT $LN13@Code@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN14@Code@2
$LN13@Code@2:
	mov	DWORD PTR tv81[ebp], 1
$LN14@Code@2:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _numOutStreams$[ebp], eax
; Line 809
	mov	ecx, DWORD PTR _numInStreams$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z ; CRecordVector<ISequentialInStream *>::ClearAndReserve
; Line 810
	mov	edx, DWORD PTR _numOutStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z ; CRecordVector<ISequentialOutStream *>::ClearAndReserve
; Line 814
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Code@2
$LN7@Code@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Code@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numInStreams$[ebp]
	jae	SHORT $LN6@Code@2
; Line 815
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::AddInReserved
	jmp	SHORT $LN7@Code@2
$LN6@Code@2:
; Line 817
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Code@2
$LN4@Code@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Code@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numOutStreams$[ebp]
	jae	SHORT $LN3@Code@2
; Line 818
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::AddInReserved
	jmp	SHORT $LN4@Code@2
$LN3@Code@2:
; Line 829
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _releaser$[ebp]
	call	??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z ; NCoderMixer2::CCoderMT::CReleaser::CReleaser
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 831
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	$LN2@Code@2
; Line 835
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	SHORT $LN15@Code@2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z	; CRecordVector<unsigned __int64 const *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN16@Code@2
$LN15@Code@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv184[ebp], edx
$LN16@Code@2:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN17@Code@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR tv202[ebp], eax
	jmp	SHORT $LN18@Code@2
$LN17@Code@2:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z	; CRecordVector<unsigned __int64 const *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv202[ebp], ecx
$LN18@Code@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv163[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR tv184[ebp]
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ; CRecordVector<ISequentialOutStream *>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ; CRecordVector<ISequentialInStream *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR tv163[ebp]
	push	ecx
	mov	edx, DWORD PTR tv163[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+108], eax
; Line 836
	jmp	$LN1@Code@2
$LN2@Code@2:
; Line 840
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN19@Code@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ ; CRecordVector<unsigned __int64 const *>::Front
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN20@Code@2
$LN19@Code@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR tv244[ebp], edx
$LN20@Code@2:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN21@Code@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR tv266[ebp], edx
	jmp	SHORT $LN22@Code@2
$LN21@Code@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ ; CRecordVector<unsigned __int64 const *>::Front
	mov	DWORD PTR tv266[ebp], eax
$LN22@Code@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator->
	mov	DWORD PTR tv223[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numOutStreams$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front
	push	eax
	mov	eax, DWORD PTR _numInStreams$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv266[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ; CRecordVector<ISequentialInStream *>::Front
	push	eax
	mov	edx, DWORD PTR tv223[ebp]
	push	edx
	mov	eax, DWORD PTR tv223[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+108], eax
$LN1@Code@2:
; Line 841
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _releaser$[ebp]
	call	??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::CReleaser::~CReleaser
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@Code@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN27@Code@2:
	DD	1
	DD	$LN26@Code@2
$LN26@Code@2:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@Code@2
$LN24@Code@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _releaser$[ebp]
	jmp	??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::CReleaser::~CReleaser
__ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ENDP ; NCoderMixer2::CCoderMT::Code
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z PROC	; NCoderMixer2::CCoderMT::CReleaser::CReleaser, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 391
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z ENDP	; NCoderMixer2::CCoderMT::CReleaser::CReleaser
_TEXT	ENDS
PUBLIC	?Release@CCoderMT@NCoderMixer2@@QAEXXZ		; NCoderMixer2::CCoderMT::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ PROC		; NCoderMixer2::CCoderMT::CReleaser::~CReleaser, COMDAT
; _this$ = ecx
; Line 392
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Release@CCoderMT@NCoderMixer2@@QAEXXZ	; NCoderMixer2::CCoderMT::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ ENDP		; NCoderMixer2::CCoderMT::CReleaser::~CReleaser
_TEXT	ENDS
PUBLIC	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Size
PUBLIC	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
PUBLIC	?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ; CRecordVector<ISequentialOutStream *>::Clear
PUBLIC	?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ; CRecordVector<ISequentialInStream *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCoderMT@NCoderMixer2@@QAEXXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Release@CCoderMT@NCoderMixer2@@QAEXXZ PROC		; NCoderMixer2::CCoderMT::Release, COMDAT
; _this$ = ecx
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 377
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ; CRecordVector<ISequentialInStream *>::Clear
; Line 378
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ; CRecordVector<ISequentialOutStream *>::Clear
; Line 380
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Release@4
$LN5@Release@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Release@4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@Release@4
; Line 381
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
; Line 382
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Release@4
$LN2@Release@4:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Release@4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@Release@4
; Line 383
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
	jmp	SHORT $LN2@Release@4
$LN7@Release@4:
; Line 384
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CCoderMT@NCoderMixer2@@QAEXXZ ENDP		; NCoderMixer2::CCoderMT::Release
_TEXT	ENDS
PUBLIC	?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ ; CObjectVector<CStreamBinder>::AddNew
PUBLIC	?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ	; CObjectVector<CStreamBinder>::Clear
PUBLIC	?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixerMT::SetBindInfo
EXTRN	?CreateEvents@CStreamBinder@@QAEIXZ:PROC	; CStreamBinder::CreateEvents
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result_$70979 = -12					; size = 4
_i$70975 = -8						; size = 4
_this$ = -4						; size = 4
_bindInfo$ = 8						; size = 4
?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z PROC ; NCoderMixer2::CMixerMT::SetBindInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 844
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 845
	mov	eax, DWORD PTR _bindInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixer::SetBindInfo
; Line 847
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ ; CObjectVector<CStreamBinder>::Clear
; Line 848
	mov	DWORD PTR _i$70975[ebp], 0
	jmp	SHORT $LN4@SetBindInf
$LN3@SetBindInf:
	mov	ecx, DWORD PTR _i$70975[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70975[ebp], ecx
$LN4@SetBindInf:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$70975[ebp], eax
	jae	SHORT $LN2@SetBindInf
; Line 850
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ ; CObjectVector<CStreamBinder>::AddNew
	mov	ecx, eax
	call	?CreateEvents@CStreamBinder@@QAEIXZ	; CStreamBinder::CreateEvents
	mov	DWORD PTR ___result_$70979[ebp], eax
	cmp	DWORD PTR ___result_$70979[ebp], 0
	je	SHORT $LN1@SetBindInf
	mov	eax, DWORD PTR ___result_$70979[ebp]
	jmp	SHORT $LN5@SetBindInf
$LN1@SetBindInf:
; Line 851
	jmp	SHORT $LN3@SetBindInf
$LN2@SetBindInf:
; Line 852
	xor	eax, eax
$LN5@SetBindInf:
; Line 853
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ENDP ; NCoderMixer2::CMixerMT::SetBindInfo
_TEXT	ENDS
PUBLIC	?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::AddNew
PUBLIC	?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ; NCoderMixer2::CMixerMT::AddCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$ = -8						; size = 4
_this$ = -4						; size = 4
_cod$ = 8						; size = 4
?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z PROC ; NCoderMixer2::CMixerMT::AddCoder
; _this$ = ecx
; Line 856
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 857
	mov	eax, DWORD PTR _cod$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 858
	mov	edx, DWORD PTR _cod$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 860
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::AddNew
	mov	DWORD PTR _c2$[ebp], eax
; Line 861
	mov	ecx, DWORD PTR _c2$[ebp]
	mov	edx, DWORD PTR _cod$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+32], eax
; Line 862
	mov	ecx, DWORD PTR _cod$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c2$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 863
	mov	edx, DWORD PTR _cod$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _c2$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ; CMyComPtr<ICompressCoder2>::operator=
; Line 864
	mov	eax, DWORD PTR _c2$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+92]
	mov	BYTE PTR [eax+104], dl
; Line 865
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ENDP ; NCoderMixer2::CMixerMT::AddCoder
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
PUBLIC	?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z ; NCoderMixer2::CMixerMT::GetCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -12						; size = 4
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z PROC ; NCoderMixer2::CMixerMT::GetCoder
; _this$ = ecx
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 869
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN3@GetCoder
	mov	ecx, DWORD PTR tv74[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@GetCoder
$LN3@GetCoder:
	mov	DWORD PTR tv73[ebp], 0
$LN4@GetCoder:
	mov	eax, DWORD PTR tv73[ebp]
; Line 870
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z ENDP ; NCoderMixer2::CMixerMT::GetCoder
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[]
PUBLIC	?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ	; CObjectVector<CStreamBinder>::Size
PUBLIC	?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ		; NCoderMixer2::CMixerMT::ReInit
EXTRN	?ReInit@CStreamBinder@@QAEXXZ:PROC		; CStreamBinder::ReInit
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70995 = -8						; size = 4
_this$ = -4						; size = 4
?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ PROC		; NCoderMixer2::CMixerMT::ReInit
; _this$ = ecx
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 874
	mov	DWORD PTR _i$70995[ebp], 0
	jmp	SHORT $LN3@ReInit
$LN2@ReInit:
	mov	eax, DWORD PTR _i$70995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70995[ebp], eax
$LN3@ReInit:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ ; CObjectVector<CStreamBinder>::Size
	cmp	DWORD PTR _i$70995[ebp], eax
	jae	SHORT $LN4@ReInit
; Line 875
	mov	ecx, DWORD PTR _i$70995[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[]
	mov	ecx, eax
	call	?ReInit@CStreamBinder@@QAEXXZ		; CStreamBinder::ReInit
	jmp	SHORT $LN2@ReInit
$LN4@ReInit:
; Line 876
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ ENDP		; NCoderMixer2::CMixerMT::ReInit
_TEXT	ENDS
PUBLIC	?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z ; NCoderMixer2::CMixerMT::SelectMainCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T72766 = -20						; size = 4
_bond$71012 = -16					; size = 4
_st$71010 = -12						; size = 4
_ci$ = -8						; size = 4
_this$ = -4						; size = 4
_useFirst$ = 8						; size = 1
?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z PROC	; NCoderMixer2::CMixerMT::SelectMainCoder
; _this$ = ecx
; Line 879
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 880
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 882
	movzx	edx, BYTE PTR _useFirst$[ebp]
	test	edx, edx
	jne	$LN7@SelectMain@2
$LN6@SelectMain@2:
; Line 885
	mov	eax, DWORD PTR _ci$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	cmp	DWORD PTR [eax+32], 1
	je	SHORT $LN4@SelectMain@2
; Line 886
	jmp	$LN7@SelectMain@2
$LN4@SelectMain@2:
; Line 887
	mov	ecx, DWORD PTR _ci$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN3@SelectMain@2
; Line 888
	jmp	SHORT $LN7@SelectMain@2
$LN3@SelectMain@2:
; Line 890
	mov	eax, DWORD PTR _ci$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _st$71010[ebp], ecx
; Line 891
	mov	edx, DWORD PTR _st$71010[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@SelectMain@2
; Line 892
	jmp	SHORT $LN7@SelectMain@2
$LN2@SelectMain@2:
; Line 893
	mov	ecx, DWORD PTR _st$71010[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream
	mov	DWORD PTR _bond$71012[ebp], eax
; Line 894
	cmp	DWORD PTR _bond$71012[ebp], 0
	jge	SHORT $LN1@SelectMain@2
; Line 895
	mov	DWORD PTR $T72766[ebp], 20150213	; 013377c5H
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T72766[ebp]
	push	edx
	call	__CxxThrowException@8
$LN1@SelectMain@2:
; Line 896
	mov	eax, DWORD PTR _bond$71012[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 897
	jmp	$LN6@SelectMain@2
$LN7@SelectMain@2:
; Line 899
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ci$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN9@SelectMain@2:
; Line 900
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z ENDP	; NCoderMixer2::CMixerMT::SelectMainCoder
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ	; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
PUBLIC	??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *
PUBLIC	??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ	; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>
PUBLIC	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::AddNew
PUBLIC	?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Clear
PUBLIC	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
PUBLIC	?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Clear
PUBLIC	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
PUBLIC	?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z ; NCoderMixer2::CMixerMT::Init
EXTRN	_IID_ICompressSetBufSize:BYTE
EXTRN	?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z:PROC ; CStreamBinder::CreateStreams
xdata$x	SEGMENT
__unwindtable$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$1
__ehfuncinfo$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv280 = -176						; size = 4
tv272 = -172						; size = 4
tv203 = -168						; size = 4
tv195 = -164						; size = 4
tv187 = -160						; size = 4
tv178 = -156						; size = 4
tv129 = -152						; size = 4
tv89 = -148						; size = 4
_cod$71096 = -144					; size = 4
_coderStreamIndex$71095 = -136				; size = 4
_coderIndex$71094 = -124				; size = 4
_cod$71088 = -116					; size = 4
_kBufSize$71087 = -112					; size = 4
_outSetSize$71083 = -104				; size = 4
_inSetSize$71082 = -92					; size = 4
_coderStreamIndex$71044 = -80				; size = 4
_coderIndex$71043 = -68					; size = 4
_outCoderStreamIndex$71042 = -60			; size = 4
_outCoderIndex$71041 = -56				; size = 4
_inCoderStreamIndex$71040 = -52				; size = 4
_inCoderIndex$71039 = -48				; size = 4
_bond$71038 = -44					; size = 4
_numOutStreams$71028 = -40				; size = 4
_numInStreams$71027 = -36				; size = 4
_j$71026 = -32						; size = 4
_csi$71025 = -28					; size = 4
_coderInfo$71024 = -24					; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStreams$ = 8						; size = 4
_outStreams$ = 12					; size = 4
?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z PROC ; NCoderMixer2::CMixerMT::Init
; _this$ = ecx
; Line 903
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 906
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@Init
$LN19@Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN18@Init
; Line 908
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	DWORD PTR _coderInfo$71024[ebp], eax
; Line 909
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	DWORD PTR _csi$71025[ebp], eax
; Line 913
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN23@Init
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN24@Init
$LN23@Init:
	mov	edx, DWORD PTR _csi$71025[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN24@Init:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _numInStreams$71027[ebp], ecx
; Line 914
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN25@Init
	mov	ecx, DWORD PTR _csi$71025[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN26@Init
$LN25@Init:
	mov	DWORD PTR tv129[ebp], 1
$LN26@Init:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _numOutStreams$71028[ebp], eax
; Line 916
	mov	ecx, DWORD PTR _coderInfo$71024[ebp]
	add	ecx, 112				; 00000070H
	call	?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Clear
; Line 917
	mov	DWORD PTR _j$71026[ebp], 0
	jmp	SHORT $LN17@Init
$LN16@Init:
	mov	ecx, DWORD PTR _j$71026[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$71026[ebp], ecx
$LN17@Init:
	mov	edx, DWORD PTR _j$71026[ebp]
	cmp	edx, DWORD PTR _numInStreams$71027[ebp]
	jae	SHORT $LN15@Init
; Line 918
	mov	ecx, DWORD PTR _coderInfo$71024[ebp]
	add	ecx, 112				; 00000070H
	call	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
	jmp	SHORT $LN16@Init
$LN15@Init:
; Line 920
	mov	ecx, DWORD PTR _coderInfo$71024[ebp]
	add	ecx, 124				; 0000007cH
	call	?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Clear
; Line 921
	mov	DWORD PTR _j$71026[ebp], 0
	jmp	SHORT $LN14@Init
$LN13@Init:
	mov	eax, DWORD PTR _j$71026[ebp]
	add	eax, 1
	mov	DWORD PTR _j$71026[ebp], eax
$LN14@Init:
	mov	ecx, DWORD PTR _j$71026[ebp]
	cmp	ecx, DWORD PTR _numOutStreams$71028[ebp]
	jae	SHORT $LN12@Init
; Line 922
	mov	ecx, DWORD PTR _coderInfo$71024[ebp]
	add	ecx, 124				; 0000007cH
	call	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::AddNew
	jmp	SHORT $LN13@Init
$LN12@Init:
; Line 923
	jmp	$LN19@Init
$LN18@Init:
; Line 925
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@Init
$LN10@Init:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN11@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN9@Init
; Line 927
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	DWORD PTR _bond$71038[ebp], eax
; Line 934
	lea	ecx, DWORD PTR _coderStreamIndex$71044[ebp]
	push	ecx
	lea	edx, DWORD PTR _coderIndex$71043[ebp]
	push	edx
	mov	eax, DWORD PTR _bond$71038[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
; Line 936
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN27@Init
	mov	ecx, DWORD PTR _bond$71038[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv178[ebp], edx
	jmp	SHORT $LN28@Init
$LN27@Init:
	mov	eax, DWORD PTR _coderIndex$71043[ebp]
	mov	DWORD PTR tv178[ebp], eax
$LN28@Init:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _inCoderIndex$71039[ebp], ecx
; Line 937
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN29@Init
	mov	ecx, DWORD PTR _coderIndex$71043[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	jmp	SHORT $LN30@Init
$LN29@Init:
	mov	edx, DWORD PTR _bond$71038[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv187[ebp], eax
$LN30@Init:
	mov	ecx, DWORD PTR tv187[ebp]
	mov	DWORD PTR _outCoderIndex$71041[ebp], ecx
; Line 939
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN31@Init
	mov	DWORD PTR tv195[ebp], 0
	jmp	SHORT $LN32@Init
$LN31@Init:
	mov	ecx, DWORD PTR _coderStreamIndex$71044[ebp]
	mov	DWORD PTR tv195[ebp], ecx
$LN32@Init:
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR _inCoderStreamIndex$71040[ebp], edx
; Line 940
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN33@Init
	mov	edx, DWORD PTR _coderStreamIndex$71044[ebp]
	mov	DWORD PTR tv203[ebp], edx
	jmp	SHORT $LN34@Init
$LN33@Init:
	mov	DWORD PTR tv203[ebp], 0
$LN34@Init:
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR _outCoderStreamIndex$71042[ebp], eax
; Line 945
	mov	ecx, DWORD PTR _outCoderStreamIndex$71042[ebp]
	push	ecx
	mov	edx, DWORD PTR _outCoderIndex$71041[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 124				; 0000007cH
	mov	ecx, eax
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	mov	eax, DWORD PTR _inCoderStreamIndex$71040[ebp]
	push	eax
	mov	ecx, DWORD PTR _inCoderIndex$71039[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 112				; 00000070H
	mov	ecx, eax
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[]
	mov	ecx, eax
	call	?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z ; CStreamBinder::CreateStreams
; Line 947
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	call	??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	call	??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 948
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	call	??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetBufSize
	mov	eax, DWORD PTR _inCoderIndex$71039[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 24					; 00000018H
	mov	ecx, eax
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 949
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	call	??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetBufSize
	mov	ecx, DWORD PTR _outCoderIndex$71041[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 24					; 00000018H
	mov	ecx, eax
	call	?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface
; Line 950
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	call	??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *
	test	eax, eax
	je	SHORT $LN8@Init
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	call	??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *
	test	eax, eax
	je	SHORT $LN8@Init
; Line 952
	mov	DWORD PTR _kBufSize$71087[ebp], 524288	; 00080000H
; Line 953
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	call	??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator->
	mov	DWORD PTR tv272[ebp], eax
	mov	esi, esp
	push	524288					; 00080000H
	mov	edx, DWORD PTR _inCoderStreamIndex$71040[ebp]
	push	edx
	mov	eax, DWORD PTR tv272[ebp]
	push	eax
	mov	ecx, DWORD PTR tv272[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 954
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	call	??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator->
	mov	DWORD PTR tv280[ebp], eax
	mov	esi, esp
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _outCoderStreamIndex$71042[ebp]
	push	ecx
	mov	edx, DWORD PTR tv280[ebp]
	push	edx
	mov	eax, DWORD PTR tv280[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@Init:
; Line 956
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	call	??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	call	??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
	jmp	$LN10@Init
$LN9@Init:
; Line 959
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	DWORD PTR _cod$71088[ebp], eax
; Line 960
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN7@Init
; Line 961
	mov	ecx, DWORD PTR _inStreams$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	mov	ecx, DWORD PTR _cod$71088[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 962
	jmp	SHORT $LN6@Init
$LN7@Init:
; Line 963
	mov	eax, DWORD PTR _outStreams$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _cod$71088[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
$LN6@Init:
; Line 966
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Init
$LN4@Init:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN3@Init
; Line 969
	lea	eax, DWORD PTR _coderStreamIndex$71095[ebp]
	push	eax
	lea	ecx, DWORD PTR _coderIndex$71094[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream
; Line 970
	mov	ecx, DWORD PTR _coderIndex$71094[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	DWORD PTR _cod$71096[ebp], eax
; Line 971
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN2@Init
; Line 972
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _outStreams$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _coderStreamIndex$71095[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cod$71096[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
	mov	ecx, eax
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 973
	jmp	SHORT $LN1@Init
$LN2@Init:
; Line 974
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _inStreams$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _coderStreamIndex$71095[ebp]
	push	edx
	mov	ecx, DWORD PTR _cod$71096[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
$LN1@Init:
; Line 975
	jmp	$LN4@Init
$LN3@Init:
; Line 977
	xor	eax, eax
; Line 978
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@Init
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN45@Init:
	DD	6
	DD	$LN44@Init
$LN44@Init:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN37@Init
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN38@Init
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN39@Init
	DD	-104					; ffffff98H
	DD	4
	DD	$LN40@Init
	DD	-124					; ffffff84H
	DD	4
	DD	$LN41@Init
	DD	-136					; ffffff78H
	DD	4
	DD	$LN42@Init
$LN42@Init:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN41@Init:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN40@Init:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN39@Init:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN38@Init:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN37@Init:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$0:
	lea	ecx, DWORD PTR _inSetSize$71082[ebp]
	jmp	??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
__unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$1:
	lea	ecx, DWORD PTR _outSetSize$71083[ebp]
	jmp	??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
__ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z ENDP ; NCoderMixer2::CMixerMT::Init
PUBLIC	?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z	; NCoderMixer2::CMixerMT::ReturnIfError
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$71104 = -8						; size = 4
_this$ = -4						; size = 4
_code$ = 8						; size = 4
?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z PROC	; NCoderMixer2::CMixerMT::ReturnIfError
; _this$ = ecx
; Line 981
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 982
	mov	DWORD PTR _i$71104[ebp], 0
	jmp	SHORT $LN4@ReturnIfEr
$LN3@ReturnIfEr:
	mov	eax, DWORD PTR _i$71104[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71104[ebp], eax
$LN4@ReturnIfEr:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$71104[ebp], eax
	jae	SHORT $LN2@ReturnIfEr
; Line 983
	mov	ecx, DWORD PTR _i$71104[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	edx, DWORD PTR [eax+108]
	cmp	edx, DWORD PTR _code$[ebp]
	jne	SHORT $LN1@ReturnIfEr
; Line 984
	mov	eax, DWORD PTR _code$[ebp]
	jmp	SHORT $LN5@ReturnIfEr
$LN1@ReturnIfEr:
; Line 985
	jmp	SHORT $LN3@ReturnIfEr
$LN2@ReturnIfEr:
	xor	eax, eax
$LN5@ReturnIfEr:
; Line 986
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ENDP	; NCoderMixer2::CMixerMT::ReturnIfError
_TEXT	ENDS
PUBLIC	?WaitExecuteFinish@CVirtThread@@QAEXXZ		; CVirtThread::WaitExecuteFinish
PUBLIC	?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCoderMixer2::CMixerMT::Code
EXTRN	?Start@CVirtThread@@QAEXXZ:PROC			; CVirtThread::Start
EXTRN	?Create@CVirtThread@@QAEIXZ:PROC		; CVirtThread::Create
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$71155 = -32					; size = 4
___result_$71148 = -28					; size = 4
_result$71143 = -24					; size = 4
___result_$71136 = -20					; size = 4
___result_$71132 = -16					; size = 4
___result_$71121 = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_inStreams$ = 8						; size = 4
_outStreams$ = 12					; size = 4
_progress$ = 16						; size = 4
?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z PROC ; NCoderMixer2::CMixerMT::Code
; _this$ = ecx
; Line 992
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 993
	mov	eax, DWORD PTR _outStreams$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStreams$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z ; NCoderMixer2::CMixerMT::Init
; Line 996
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@Code@3
$LN23@Code@3:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN24@Code@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN22@Code@3
; Line 997
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	je	SHORT $LN21@Code@3
; Line 999
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, eax
	call	?Create@CVirtThread@@QAEIXZ		; CVirtThread::Create
	mov	DWORD PTR ___result_$71121[ebp], eax
	cmp	DWORD PTR ___result_$71121[ebp], 0
	je	SHORT $LN21@Code@3
	mov	eax, DWORD PTR ___result_$71121[ebp]
	jmp	$LN25@Code@3
$LN21@Code@3:
; Line 1000
	jmp	SHORT $LN23@Code@3
$LN22@Code@3:
; Line 1002
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@Code@3
$LN18@Code@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@Code@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN17@Code@3
; Line 1003
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN16@Code@3
; Line 1004
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, eax
	call	?Start@CVirtThread@@QAEXXZ		; CVirtThread::Start
$LN16@Code@3:
; Line 1006
	jmp	SHORT $LN18@Code@3
$LN17@Code@3:
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, eax
	call	?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ; NCoderMixer2::CCoderMT::Code
; Line 1008
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@Code@3
$LN14@Code@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@Code@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN13@Code@3
; Line 1009
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+96]
	je	SHORT $LN12@Code@3
; Line 1010
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, eax
	call	?WaitExecuteFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitExecuteFinish
$LN12@Code@3:
; Line 1012
	jmp	SHORT $LN14@Code@3
$LN13@Code@3:
	push	-2147467260				; 80004004H
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError
	mov	DWORD PTR ___result_$71132[ebp], eax
	cmp	DWORD PTR ___result_$71132[ebp], 0
	je	SHORT $LN11@Code@3
	mov	eax, DWORD PTR ___result_$71132[ebp]
	jmp	$LN25@Code@3
$LN11@Code@3:
; Line 1013
	push	-2147024882				; 8007000eH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError
	mov	DWORD PTR ___result_$71136[ebp], eax
	cmp	DWORD PTR ___result_$71136[ebp], 0
	je	SHORT $LN10@Code@3
	mov	eax, DWORD PTR ___result_$71136[ebp]
	jmp	$LN25@Code@3
$LN10@Code@3:
; Line 1015
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@Code@3
$LN8@Code@3:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@Code@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@Code@3
; Line 1017
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _result$71143[ebp], ecx
; Line 1021
	cmp	DWORD PTR _result$71143[ebp], 0
	je	SHORT $LN6@Code@3
	cmp	DWORD PTR _result$71143[ebp], 536870928	; 20000010H
	je	SHORT $LN6@Code@3
	cmp	DWORD PTR _result$71143[ebp], 1
	je	SHORT $LN6@Code@3
	cmp	DWORD PTR _result$71143[ebp], -2147467259 ; 80004005H
	je	SHORT $LN6@Code@3
; Line 1022
	mov	eax, DWORD PTR _result$71143[ebp]
	jmp	SHORT $LN25@Code@3
$LN6@Code@3:
; Line 1023
	jmp	SHORT $LN8@Code@3
$LN7@Code@3:
; Line 1025
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 4
	call	?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError
	mov	DWORD PTR ___result_$71148[ebp], eax
	cmp	DWORD PTR ___result_$71148[ebp], 0
	je	SHORT $LN5@Code@3
	mov	eax, DWORD PTR ___result_$71148[ebp]
	jmp	SHORT $LN25@Code@3
$LN5@Code@3:
; Line 1027
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Code@3
$LN3@Code@3:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@Code@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@Code@3
; Line 1029
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _result$71155[ebp], ecx
; Line 1030
	cmp	DWORD PTR _result$71155[ebp], 0
	je	SHORT $LN1@Code@3
	cmp	DWORD PTR _result$71155[ebp], 536870928	; 20000010H
	je	SHORT $LN1@Code@3
; Line 1031
	mov	eax, DWORD PTR _result$71155[ebp]
	jmp	SHORT $LN25@Code@3
$LN1@Code@3:
; Line 1032
	jmp	SHORT $LN3@Code@3
$LN2@Code@3:
; Line 1034
	xor	eax, eax
$LN25@Code@3:
; Line 1035
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ENDP ; NCoderMixer2::CMixerMT::Code
_TEXT	ENDS
PUBLIC	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitExecuteFinish@CVirtThread@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WaitExecuteFinish@CVirtThread@@QAEXXZ PROC		; CVirtThread::WaitExecuteFinish, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitExecuteFinish@CVirtThread@@QAEXXZ ENDP		; CVirtThread::WaitExecuteFinish
_TEXT	ENDS
EXTRN	_Handle_WaitObject@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC	; NWindows::NSynchronization::CBaseEvent::Lock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Handle_WaitObject@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP	; NWindows::NSynchronization::CBaseEvent::Lock
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[]
PUBLIC	?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z ; NCoderMixer2::CMixerMT::GetBondStreamSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bondIndex$ = 8						; size = 4
?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z PROC	; NCoderMixer2::CMixerMT::GetBondStreamSize
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.cpp
; Line 1038
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1039
	mov	eax, DWORD PTR _bondIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[]
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+28]
; Line 1040
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z ENDP	; NCoderMixer2::CMixerMT::GetBondStreamSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ PROC ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ENDP ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ PROC ; CMyComPtr<ICompressCoder2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ENDP ; CMyComPtr<ICompressCoder2>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z PROC ; CMyComPtr<ICompressCoder2>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ENDP ; CMyComPtr<ICompressCoder2>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T72854 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72854[ebp], ecx
	mov	edx, DWORD PTR $T72854[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T72858 = -16						; size = 4
$T72857 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@3
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@3
$LN3@operator@3:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@3
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72857[ebp], ecx
	mov	edx, DWORD PTR $T72857[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72858[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72858[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@3:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@3
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@3:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@3:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CBond>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CBond>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T72869 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72869[ebp], ecx
	mov	edx, DWORD PTR $T72869[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T72873 = -16						; size = 4
$T72872 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@4
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@4
$LN3@operator@4:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@4
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72872[ebp], ecx
	mov	edx, DWORD PTR $T72872[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72873[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72873[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@4:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@4
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@4:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@4:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T72884 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72884[ebp], ecx
	mov	edx, DWORD PTR $T72884[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T72890 = -16						; size = 4
$T72889 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned int>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@5
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@5
$LN3@operator@5:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@5
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72889[ebp], ecx
	mov	edx, DWORD PTR $T72889[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72890[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72890[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@5:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@5
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@5:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@5:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned int>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z	; CRecordVector<unsigned __int64 const *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64 const *>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z ; CRecordVector<unsigned __int64 const *>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64 const *>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z PROC		; CRecordVector<unsigned __int64 const *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ENDP		; CRecordVector<unsigned __int64 const *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ PROC		; CRecordVector<unsigned __int64 const *>::Front, COMDAT
; _this$ = ecx
; Line 229
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ ENDP		; CRecordVector<unsigned __int64 const *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ PROC		; CRecordVector<unsigned __int64 const *>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ ENDP		; CRecordVector<unsigned __int64 const *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T72917 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72917[ebp], ecx
	mov	edx, DWORD PTR $T72917[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_N@@QAEI_N@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 1
?Add@?$CRecordVector@_N@@QAEI_N@Z PROC			; CRecordVector<bool>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _item$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv71[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@_N@@QAEI_N@Z ENDP			; CRecordVector<bool>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QAEAA_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QAEAA_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QAEAA_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ PROC	; CMyComPtr<IUnknown>::operator IUnknown *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ENDP	; CMyComPtr<IUnknown>::operator IUnknown *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ PROC ; CObjectVector<NCoderMixer2::CCoderST>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ENDP ; CObjectVector<NCoderMixer2::CCoderST>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CCoderST>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CCoderST>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CCoderST@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoderST::CCoderST
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T72938 = -28						; size = 4
$T72937 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ PROC ; CObjectVector<NCoderMixer2::CCoderST>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72938[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72938[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T72938[ebp]
	call	??0CCoderST@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CCoderST::CCoderST
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T72937[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T72937[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ$0:
	mov	eax, DWORD PTR $T72938[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderST>::AddNew
PUBLIC	??0CCoder@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CCoder::CCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCoderST@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCoderST@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoderST::CCoderST, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 298
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCoder@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoder::CCoder
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+56], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+57], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCoderST@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoderST::CCoderST
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??0?$CRecordVector@PB_K@@QAE@XZ			; CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCoder@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2
__ehfuncinfo$??0CCoder@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CCoder@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCoder@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCoder@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoder::CCoder, COMDAT
; _this$ = ecx
; Line 204
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CRecordVector@PB_K@@QAE@XZ		; CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
__unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCoder@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCoder@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoder::CCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T72975 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72975[ebp], ecx
	mov	edx, DWORD PTR $T72975[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PB_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PB_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PB_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCCoderST@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CCoderST::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72981 = -28						; size = 4
$T72980 = -24						; size = 4
_i$71374 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71374[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$71374[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$71374[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71374[ebp], eax
	mov	ecx, DWORD PTR _i$71374[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72981[ebp], edx
	mov	eax, DWORD PTR $T72981[ebp]
	mov	DWORD PTR $T72980[ebp], eax
	cmp	DWORD PTR $T72980[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T72980[ebp]
	call	??_GCCoderST@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[]
_TEXT	ENDS
PUBLIC	??0CStBinderStream@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CStBinderStream::CStBinderStream
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T73003 = -28						; size = 4
$T73002 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73003[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73003[ebp], 0
	je	SHORT $LN3@AddNew@2
	mov	ecx, DWORD PTR $T73003[ebp]
	call	??0CStBinderStream@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CStBinderStream::CStBinderStream
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@2
$LN3@AddNew@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@2:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T73002[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T73002[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ$0:
	mov	eax, DWORD PTR $T73003[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CStBinderStream@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStBinderStream@NCoderMixer2@@QAE@XZ PROC		; NCoderMixer2::CStBinderStream::CStBinderStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 308
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStBinderStream@NCoderMixer2@@QAE@XZ ENDP		; NCoderMixer2::CStBinderStream::CStBinderStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
_TEXT	ENDS
PUBLIC	??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z	; NCoderMixer2::CStBinderStream::`scalar deleting destructor'
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T73021 = -28						; size = 4
$T73020 = -24						; size = 4
_i$71400 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71400[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71400[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71400[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71400[ebp], eax
	mov	ecx, DWORD PTR _i$71400[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73021[ebp], edx
	mov	eax, DWORD PTR $T73021[ebp]
	mov	DWORD PTR $T73020[ebp], eax
	cmp	DWORD PTR $T73020[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T73020[ebp]
	call	??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73034 = -16						; size = 4
$T73033 = -12						; size = 4
_i$71409 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ PROC ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71409[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$71409[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$71409[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71409[ebp], eax
	mov	ecx, DWORD PTR _i$71409[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73034[ebp], edx
	mov	eax, DWORD PTR $T73034[ebp]
	mov	DWORD PTR $T73033[ebp], eax
	cmp	DWORD PTR $T73033[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T73033[ebp]
	call	??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ ENDP ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z
_TEXT	SEGMENT
$T73042 = -12						; size = 4
$T73041 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z PROC ; CRecordVector<ISequentialInStream *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ; CRecordVector<ISequentialInStream *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T73041[ebp], eax
	mov	ecx, DWORD PTR $T73041[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73042[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73042[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z ENDP ; CRecordVector<ISequentialInStream *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
$T73045 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73045[ebp], ecx
	mov	edx, DWORD PTR $T73045[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ PROC ; CRecordVector<ISequentialInStream *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ENDP ; CRecordVector<ISequentialInStream *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ ; CRecordVector<ISequentialInStream *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z PROC ; CRecordVector<ISequentialInStream *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ ; CRecordVector<ISequentialInStream *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z ENDP ; CRecordVector<ISequentialInStream *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z PROC ; CRecordVector<ISequentialInStream *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z ENDP ; CRecordVector<ISequentialInStream *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z PROC ; CRecordVector<ISequentialInStream *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ENDP ; CRecordVector<ISequentialInStream *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ PROC ; CRecordVector<ISequentialInStream *>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ENDP ; CRecordVector<ISequentialInStream *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z
_TEXT	SEGMENT
$T73061 = -12						; size = 4
$T73060 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z PROC ; CRecordVector<ISequentialOutStream *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ; CRecordVector<ISequentialOutStream *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@2
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T73060[ebp], eax
	mov	ecx, DWORD PTR $T73060[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73061[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73061[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@2:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z ENDP ; CRecordVector<ISequentialOutStream *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
$T73064 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73064[ebp], ecx
	mov	edx, DWORD PTR $T73064[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ PROC ; CRecordVector<ISequentialOutStream *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ENDP ; CRecordVector<ISequentialOutStream *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z PROC ; CRecordVector<ISequentialOutStream *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ENDP ; CRecordVector<ISequentialOutStream *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z PROC ; CRecordVector<ISequentialOutStream *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z ENDP ; CRecordVector<ISequentialOutStream *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z PROC ; CRecordVector<ISequentialOutStream *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ENDP ; CRecordVector<ISequentialOutStream *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ PROC ; CRecordVector<ISequentialOutStream *>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ENDP ; CRecordVector<ISequentialOutStream *>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T73084 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73084[ebp], eax
	cmp	DWORD PTR $T73084[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T73084[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::Add
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T73090 = -28						; size = 4
$T73089 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73090[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73090[ebp], 0
	je	SHORT $LN3@AddNew@3
	mov	ecx, DWORD PTR $T73090[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@3
$LN3@AddNew@3:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@3:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T73089[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T73089[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0:
	mov	eax, DWORD PTR $T73090[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
PUBLIC	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T73103 = -28						; size = 4
$T73102 = -24						; size = 4
_i$71478 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71478[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$71478[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$71478[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71478[ebp], eax
	mov	ecx, DWORD PTR _i$71478[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73103[ebp], edx
	mov	eax, DWORD PTR $T73103[ebp]
	mov	DWORD PTR $T73102[ebp], eax
	cmp	DWORD PTR $T73102[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T73102[ebp]
	call	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73116 = -16						; size = 4
$T73115 = -12						; size = 4
_i$71487 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71487[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$71487[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$71487[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71487[ebp], eax
	mov	ecx, DWORD PTR _i$71487[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73116[ebp], edx
	mov	eax, DWORD PTR $T73116[ebp]
	mov	DWORD PTR $T73115[ebp], eax
	cmp	DWORD PTR $T73115[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T73115[ebp]
	call	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T73128 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73128[ebp], eax
	cmp	DWORD PTR $T73128[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T73128[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Add
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T73134 = -28						; size = 4
$T73133 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73134[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73134[ebp], 0
	je	SHORT $LN3@AddNew@4
	mov	ecx, DWORD PTR $T73134[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@4
$LN3@AddNew@4:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@4:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T73133[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T73133[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ$0:
	mov	eax, DWORD PTR $T73134[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::AddNew
PUBLIC	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T73147 = -28						; size = 4
$T73146 = -24						; size = 4
_i$71514 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71514[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$71514[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$71514[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71514[ebp], eax
	mov	ecx, DWORD PTR _i$71514[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73147[ebp], edx
	mov	eax, DWORD PTR $T73147[ebp]
	mov	DWORD PTR $T73146[ebp], eax
	cmp	DWORD PTR $T73146[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T73146[ebp]
	call	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73160 = -16						; size = 4
$T73159 = -12						; size = 4
_i$71523 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71523[ebp], eax
$LN2@Clear@3:
	cmp	DWORD PTR _i$71523[ebp], 0
	je	SHORT $LN1@Clear@3
; Line 501
	mov	eax, DWORD PTR _i$71523[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71523[ebp], eax
	mov	ecx, DWORD PTR _i$71523[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73160[ebp], edx
	mov	eax, DWORD PTR $T73160[ebp]
	mov	DWORD PTR $T73159[ebp], eax
	cmp	DWORD PTR $T73159[ebp], 0
	je	SHORT $LN5@Clear@3
	push	1
	mov	ecx, DWORD PTR $T73159[ebp]
	call	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@3
$LN5@Clear@3:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@3:
	jmp	SHORT $LN2@Clear@3
$LN1@Clear@3:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ PROC	; CObjectVector<CStreamBinder>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ ENDP	; CObjectVector<CStreamBinder>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z PROC ; CObjectVector<CStreamBinder>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z ENDP ; CObjectVector<CStreamBinder>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z PROC ; CObjectVector<CStreamBinder>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ENDP ; CObjectVector<CStreamBinder>::operator[]
_TEXT	ENDS
PUBLIC	??0CStreamBinder@@QAE@XZ			; CStreamBinder::CStreamBinder
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T73172 = -28						; size = 4
$T73171 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ PROC ; CObjectVector<CStreamBinder>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73172[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73172[ebp], 0
	je	SHORT $LN3@AddNew@5
	mov	ecx, DWORD PTR $T73172[ebp]
	call	??0CStreamBinder@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@5
$LN3@AddNew@5:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@5:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T73171[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T73171[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ$0:
	mov	eax, DWORD PTR $T73172[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ ENDP ; CObjectVector<CStreamBinder>::AddNew
PUBLIC	??_GCStreamBinder@@QAEPAXI@Z			; CStreamBinder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73185 = -16						; size = 4
$T73184 = -12						; size = 4
_i$71558 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ PROC	; CObjectVector<CStreamBinder>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71558[ebp], eax
$LN2@Clear@4:
	cmp	DWORD PTR _i$71558[ebp], 0
	je	SHORT $LN1@Clear@4
; Line 501
	mov	eax, DWORD PTR _i$71558[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71558[ebp], eax
	mov	ecx, DWORD PTR _i$71558[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73185[ebp], edx
	mov	eax, DWORD PTR $T73185[ebp]
	mov	DWORD PTR $T73184[ebp], eax
	cmp	DWORD PTR $T73184[ebp], 0
	je	SHORT $LN5@Clear@4
	push	1
	mov	ecx, DWORD PTR $T73184[ebp]
	call	??_GCStreamBinder@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@4
$LN5@Clear@4:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@4:
	jmp	SHORT $LN2@Clear@4
$LN1@Clear@4:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ ENDP	; CObjectVector<CStreamBinder>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CCoderMT>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
_TEXT	ENDS
PUBLIC	??0CCoderMT@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoderMT::CCoderMT
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T73195 = -28						; size = 4
$T73194 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	136					; 00000088H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73195[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73195[ebp], 0
	je	SHORT $LN3@AddNew@6
	mov	ecx, DWORD PTR $T73195[ebp]
	call	??0CCoderMT@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CCoderMT::CCoderMT
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@6
$LN3@AddNew@6:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@6:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T73194[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T73194[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ$0:
	mov	eax, DWORD PTR $T73195[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::AddNew
PUBLIC	??1CVirtThread@@QAE@XZ				; CVirtThread::~CVirtThread
PUBLIC	??1CCoder@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CCoder::~CCoder
PUBLIC	??_7CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`vftable'
PUBLIC	??0CVirtThread@@QAE@XZ				; CVirtThread::CVirtThread
PUBLIC	??_R4CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCoderMT@NCoderMixer2@@@8		; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
PUBLIC	??_R3CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8		; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R0?AVCCoder@NCoderMixer2@@@8			; NCoderMixer2::CCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CVirtThread@@8			; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCVirtThread@@@8				; CVirtThread `RTTI Type Descriptor'
PUBLIC	??_R3CVirtThread@@8				; CVirtThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CVirtThread@@8				; CVirtThread::`RTTI Base Class Array'
;	COMDAT ??_R2CVirtThread@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R2CVirtThread@@8 DD FLAT:??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CVirtThread@@8
rdata$r	SEGMENT
??_R3CVirtThread@@8 DD 00H				; CVirtThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCVirtThread@@@8
_DATA	SEGMENT
??_R0?AUCVirtThread@@@8 DD FLAT:??_7type_info@@6B@	; CVirtThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCVirtThread@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CVirtThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CVirtThread@@8 DD FLAT:??_R0?AUCVirtThread@@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoder@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoder@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoder@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoder@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoder@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoderMT@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
	DD	FLAT:??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
	DD	FLAT:??_R1A@?0A@EA@CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoderMT@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoderMT@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoderMT@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoderMT@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCoderMT@NCoderMixer2@@6B@
rdata$r	SEGMENT
??_R4CCoderMT@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CCoderMT@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CCoderMT@NCoderMixer2@@6B@ DD FLAT:??_R4CCoderMT@NCoderMixer2@@6B@ ; NCoderMixer2::CCoderMT::`vftable'
	DD	FLAT:?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CCoderMT@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CCoderMT@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CCoderMT@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCoderMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCoderMT@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoderMT::CCoderMT, COMDAT
; _this$ = ecx
; Line 395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CCoder@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoder::CCoder
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CVirtThread@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCoderMT@NCoderMixer2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+104], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CCoder@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
__unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
__ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCoderMT@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCoderMT@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoderMT::CCoderMT
PUBLIC	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??_7CVirtThread@@6B@				; CVirtThread::`vftable'
PUBLIC	??_R4CVirtThread@@6B@				; CVirtThread::`RTTI Complete Object Locator'
EXTRN	?WaitThreadFinish@CVirtThread@@QAEXXZ:PROC	; CVirtThread::WaitThreadFinish
;	COMDAT ??_R4CVirtThread@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
rdata$r	SEGMENT
??_R4CVirtThread@@6B@ DD 00H				; CVirtThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCVirtThread@@@8
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_7CVirtThread@@6B@
CONST	SEGMENT
??_7CVirtThread@@6B@ DD FLAT:??_R4CVirtThread@@6B@	; CVirtThread::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$2
__ehfuncinfo$??1CVirtThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CVirtThread@@QAE@XZ PROC				; CVirtThread::~CVirtThread, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??1CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CVirtThread@@QAE@XZ ENDP				; CVirtThread::~CVirtThread
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PB_K@@QAE@XZ			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
__ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCoder@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCoder@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoder::~CCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@PB_K@@QAE@XZ		; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCoder@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoder::~CCoder
PUBLIC	??0CThread@NWindows@@QAE@XZ			; NWindows::CThread::CThread
PUBLIC	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVirtThread@@QAE@XZ$1
__ehfuncinfo$??0CVirtThread@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CVirtThread@@QAE@XZ PROC				; CVirtThread::CVirtThread, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CThread@NWindows@@QAE@XZ		; NWindows::CThread::CThread
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??0CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CVirtThread@@QAE@XZ ENDP				; CVirtThread::CVirtThread
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::CThread
_TEXT	ENDS
PUBLIC	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PB_K@@QAE@XZ
_TEXT	SEGMENT
$T73273 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PB_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73273[ebp], ecx
	mov	edx, DWORD PTR $T73273[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PB_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ PROC		; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ENDP		; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ PROC		; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ENDP		; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ PROC ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ENDP ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ PROC ; CMyComPtr<IOutStreamFinish>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ENDP ; CMyComPtr<IOutStreamFinish>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ PROC ; CMyComPtr<IOutStreamFinish>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ENDP ; CMyComPtr<IOutStreamFinish>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetInStream>::CMyComPtr<ICompressSetInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetInStream>::CMyComPtr<ICompressSetInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ PROC ; CMyComPtr<ICompressSetInStream>::operator ICompressSetInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ENDP ; CMyComPtr<ICompressSetInStream>::operator ICompressSetInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ PROC ; CMyComPtr<ICompressSetInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ ENDP ; CMyComPtr<ICompressSetInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ PROC ; CMyComPtr<ICompressSetInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ENDP ; CMyComPtr<ICompressSetInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetInStream2>::CMyComPtr<ICompressSetInStream2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetInStream2>::CMyComPtr<ICompressSetInStream2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ PROC ; CMyComPtr<ICompressSetInStream2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ ENDP ; CMyComPtr<ICompressSetInStream2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ PROC ; CMyComPtr<ICompressSetInStream2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ ENDP ; CMyComPtr<ICompressSetInStream2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ PROC	; CMyComPtr<ICompressSetInStream2>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ ENDP	; CMyComPtr<ICompressSetInStream2>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetOutStream>::CMyComPtr<ICompressSetOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetOutStream>::CMyComPtr<ICompressSetOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ PROC ; CMyComPtr<ICompressSetOutStream>::operator ICompressSetOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ENDP ; CMyComPtr<ICompressSetOutStream>::operator ICompressSetOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ PROC ; CMyComPtr<ICompressSetOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ ENDP ; CMyComPtr<ICompressSetOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ PROC ; CMyComPtr<ICompressSetOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ENDP ; CMyComPtr<ICompressSetOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ PROC	; CMyComPtr<ICompressInitEncoder>::CMyComPtr<ICompressInitEncoder>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ENDP	; CMyComPtr<ICompressInitEncoder>::CMyComPtr<ICompressInitEncoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ PROC	; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ENDP	; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ PROC ; CMyComPtr<ICompressInitEncoder>::operator ICompressInitEncoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ENDP ; CMyComPtr<ICompressInitEncoder>::operator ICompressInitEncoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ PROC ; CMyComPtr<ICompressInitEncoder>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ ENDP ; CMyComPtr<ICompressInitEncoder>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ PROC ; CMyComPtr<ICompressInitEncoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ENDP ; CMyComPtr<ICompressInitEncoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ PROC ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ENDP ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ PROC ; CMyComPtr<ICompressSetOutStreamSize>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ENDP ; CMyComPtr<ICompressSetOutStreamSize>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ PROC ; CMyComPtr<ICompressSetOutStreamSize>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ENDP ; CMyComPtr<ICompressSetOutStreamSize>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ PROC ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ENDP ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ PROC ; CMyComPtr<ICompressSetBufSize>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ENDP ; CMyComPtr<ICompressSetBufSize>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ PROC ; CMyComPtr<ICompressSetBufSize>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ENDP ; CMyComPtr<ICompressSetBufSize>::operator->
_TEXT	ENDS
PUBLIC	??1CCoderST@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoderST::~CCoderST
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCoderST@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCoderST@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CCoderST::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderST@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCoderST@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CCoderST::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CStBinderStream@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CStBinderStream::~CStBinderStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z PROC	; NCoderMixer2::CStBinderStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStBinderStream@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z ENDP	; NCoderMixer2::CStBinderStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
PUBLIC	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??0CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CStreamBinder@@QAE@XZ PROC				; CStreamBinder::CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??0CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::CStreamBinder
PUBLIC	??1CStreamBinder@@QAE@XZ			; CStreamBinder::~CStreamBinder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStreamBinder@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStreamBinder@@QAEPAXI@Z PROC			; CStreamBinder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStreamBinder@@QAEPAXI@Z ENDP			; CStreamBinder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCoderST@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderST@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoderST::~CCoderST, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoder@NCoderMixer2@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderST@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoderST::~CCoderST
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CStBinderStream@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStBinderStream@NCoderMixer2@@QAE@XZ PROC		; NCoderMixer2::CStBinderStream::~CStBinderStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStBinderStream@NCoderMixer2@@QAE@XZ ENDP		; NCoderMixer2::CStBinderStream::~CStBinderStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??1CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStreamBinder@@QAE@XZ PROC				; CStreamBinder::~CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??1CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::~CStreamBinder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T73396 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73396[ebp], ecx
	mov	edx, DWORD PTR $T73396[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@7
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@7:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@7
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@7:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder2>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@8
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@8:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@8
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@8:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder2>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T73416 = -20						; size = 4
$T73415 = -16						; size = 4
_p$71740 = -12						; size = 4
_newCapacity$71739 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71739[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71739[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73415[ebp], eax
	mov	eax, DWORD PTR $T73415[ebp]
	mov	DWORD PTR _p$71740[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71740[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73416[ebp], edx
	mov	eax, DWORD PTR $T73416[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71740[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71739[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T73420 = -12						; size = 4
$T73419 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@3
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T73419[ebp], eax
	mov	ecx, DWORD PTR $T73419[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73420[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73420[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@3:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndReserve
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@PB_K@@QAEXXZ		; CRecordVector<unsigned __int64 const *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z
_TEXT	SEGMENT
$T73424 = -12						; size = 4
$T73423 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64 const *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PB_K@@QAEXXZ	; CRecordVector<unsigned __int64 const *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@4
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T73423[ebp], eax
	mov	ecx, DWORD PTR $T73423[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73424[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73424[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@4:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64 const *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
_TEXT	SEGMENT
$T73428 = -20						; size = 4
$T73427 = -16						; size = 4
_p$71763 = -12						; size = 4
_newCapacity$71762 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ PROC	; CRecordVector<bool>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71762[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$71762[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73427[ebp], eax
	mov	eax, DWORD PTR $T73427[ebp]
	mov	DWORD PTR _p$71763[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71763[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73428[ebp], edx
	mov	eax, DWORD PTR $T73428[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71763[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71762[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ENDP	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
$T73432 = -12						; size = 4
$T73431 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@5
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T73431[ebp], eax
	mov	ecx, DWORD PTR $T73431[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73432[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T73432[ebp]
	mov	DWORD PTR [edx], eax
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN2@ClearAndRe@5:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ
_TEXT	SEGMENT
$T73436 = -20						; size = 4
$T73435 = -16						; size = 4
_p$71780 = -12						; size = 4
_newCapacity$71779 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ PROC ; CRecordVector<ISequentialInStream *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71779[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71779[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73435[ebp], eax
	mov	eax, DWORD PTR $T73435[ebp]
	mov	DWORD PTR _p$71780[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71780[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73436[ebp], edx
	mov	eax, DWORD PTR $T73436[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71780[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71779[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ ENDP ; CRecordVector<ISequentialInStream *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ
_TEXT	SEGMENT
$T73440 = -20						; size = 4
$T73439 = -16						; size = 4
_p$71791 = -12						; size = 4
_newCapacity$71790 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ PROC ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@4
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71790[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71790[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73439[ebp], eax
	mov	eax, DWORD PTR $T73439[ebp]
	mov	DWORD PTR _p$71791[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@4
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71791[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@4:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73440[ebp], edx
	mov	eax, DWORD PTR $T73440[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71791[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71790[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@4:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ENDP ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T73444 = -20						; size = 4
$T73443 = -16						; size = 4
_p$71802 = -12						; size = 4
_newCapacity$71801 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@5
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71801[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71801[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73443[ebp], eax
	mov	eax, DWORD PTR $T73443[ebp]
	mov	DWORD PTR _p$71802[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@5
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71802[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@5:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73444[ebp], edx
	mov	eax, DWORD PTR $T73444[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71802[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71801[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@5:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PB_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PB_K@@QAEXXZ PROC		; CRecordVector<unsigned __int64 const *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PB_K@@QAEXXZ ENDP		; CRecordVector<unsigned __int64 const *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z PROC ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z PROC ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetOutStream>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z ENDP ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COutStreamCalcSize@@W3AGKXZ
_TEXT	SEGMENT
?Release@COutStreamCalcSize@@W3AGKXZ PROC		; [thunk]:COutStreamCalcSize::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@COutStreamCalcSize@@UAGKXZ	; COutStreamCalcSize::Release
?Release@COutStreamCalcSize@@W3AGKXZ ENDP		; [thunk]:COutStreamCalcSize::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutStreamCalcSize@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@COutStreamCalcSize@@W3AGKXZ PROC		; [thunk]:COutStreamCalcSize::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@COutStreamCalcSize@@UAGKXZ	; COutStreamCalcSize::AddRef
?AddRef@COutStreamCalcSize@@W3AGKXZ ENDP		; [thunk]:COutStreamCalcSize::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:COutStreamCalcSize::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ; COutStreamCalcSize::QueryInterface
?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:COutStreamCalcSize::QueryInterface`adjustor{4}'
_TEXT	ENDS
END
