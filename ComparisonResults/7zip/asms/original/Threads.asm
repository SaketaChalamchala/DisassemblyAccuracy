; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Threads.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_HandleToWRes@4
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\threads.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv66 = -4						; size = 4
_h$ = 8							; size = 4
_HandleToWRes@4 PROC
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN3@HandleToWR
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@HandleToWR
$LN3@HandleToWR:
	call	_GetError@0
	mov	DWORD PTR tv66[ebp], eax
$LN4@HandleToWR:
	mov	eax, DWORD PTR tv66[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_HandleToWRes@4 ENDP
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -8						; size = 4
_res$ = -4						; size = 4
_GetError@0 PROC
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 14
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 15
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN3@GetError
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@GetError
$LN3@GetError:
	mov	DWORD PTR tv66[ebp], 1
$LN4@GetError:
	mov	eax, DWORD PTR tv66[ebp]
; Line 16
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetError@0 ENDP
_TEXT	ENDS
PUBLIC	_BOOLToWRes@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_v$ = 8							; size = 4
_BOOLToWRes@4 PROC
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _v$[ebp], 0
	je	SHORT $LN3@BOOLToWRes
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@BOOLToWRes
$LN3@BOOLToWRes:
	call	_GetError@0
	mov	DWORD PTR tv66[ebp], eax
$LN4@BOOLToWRes:
	mov	eax, DWORD PTR tv66[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_BOOLToWRes@4 ENDP
_TEXT	ENDS
PUBLIC	_HandlePtr_Close@4
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_HandlePtr_Close@4 PROC
; Line 22
	push	ebp
	mov	ebp, esp
	push	esi
; Line 23
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@HandlePtr_
; Line 24
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@HandlePtr_
; Line 25
	call	_GetError@0
	jmp	SHORT $LN3@HandlePtr_
$LN2@HandlePtr_:
; Line 26
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 27
	xor	eax, eax
$LN3@HandlePtr_:
; Line 28
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_HandlePtr_Close@4 ENDP
_TEXT	ENDS
PUBLIC	_Handle_WaitObject@4
EXTRN	__imp__WaitForSingleObject@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_Handle_WaitObject@4 PROC
; Line 30
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Handle_WaitObject@4 ENDP
_TEXT	ENDS
PUBLIC	_Thread_Create@12
EXTRN	__imp___beginthreadex:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_threadId$ = -8						; size = 4
_p$ = 8							; size = 4
_func$ = 12						; size = 4
_param$ = 16						; size = 4
_Thread_Create@12 PROC
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 44
	mov	esi, esp
	lea	eax, DWORD PTR _threadId$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _func$[ebp]
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp___beginthreadex
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 49
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_HandleToWRes@4
; Line 50
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Thread_Cre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@Thread_Cre:
	DD	1
	DD	$LN4@Thread_Cre
$LN4@Thread_Cre:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Thread_Cre
$LN3@Thread_Cre:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
_Thread_Create@12 ENDP
_TEXT	ENDS
PUBLIC	_Event_Create@12
EXTRN	__imp__CreateEventA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_manualReset$ = 12					; size = 4
_signaled$ = 16						; size = 4
_Event_Create@12 PROC
; Line 53
	push	ebp
	mov	ebp, esp
	push	esi
; Line 54
	mov	esi, esp
	push	0
	xor	eax, eax
	cmp	DWORD PTR _signaled$[ebp], 0
	setne	al
	push	eax
	mov	ecx, DWORD PTR _manualReset$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 55
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_HandleToWRes@4
; Line 56
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_Event_Create@12 ENDP
_TEXT	ENDS
PUBLIC	_Event_Set@4
EXTRN	__imp__SetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Event_Set@4 PROC
; Line 58
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_BOOLToWRes@4
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Event_Set@4 ENDP
_TEXT	ENDS
PUBLIC	_Event_Reset@4
EXTRN	__imp__ResetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Event_Reset@4 PROC
; Line 59
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_BOOLToWRes@4
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Event_Reset@4 ENDP
_TEXT	ENDS
PUBLIC	_ManualResetEvent_Create@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_signaled$ = 12						; size = 4
_ManualResetEvent_Create@8 PROC
; Line 61
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _signaled$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Event_Create@12
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_ManualResetEvent_Create@8 ENDP
_TEXT	ENDS
PUBLIC	_AutoResetEvent_Create@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_signaled$ = 12						; size = 4
_AutoResetEvent_Create@8 PROC
; Line 62
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _signaled$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Event_Create@12
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_AutoResetEvent_Create@8 ENDP
_TEXT	ENDS
PUBLIC	_ManualResetEvent_CreateNotSignaled@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ManualResetEvent_CreateNotSignaled@4 PROC
; Line 63
	push	ebp
	mov	ebp, esp
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ManualResetEvent_Create@8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_ManualResetEvent_CreateNotSignaled@4 ENDP
_TEXT	ENDS
PUBLIC	_AutoResetEvent_CreateNotSignaled@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_AutoResetEvent_CreateNotSignaled@4 PROC
; Line 64
	push	ebp
	mov	ebp, esp
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AutoResetEvent_Create@8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_AutoResetEvent_CreateNotSignaled@4 ENDP
_TEXT	ENDS
PUBLIC	_Semaphore_Create@12
EXTRN	__imp__CreateSemaphoreA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_initCount$ = 12					; size = 4
_maxCount$ = 16						; size = 4
_Semaphore_Create@12 PROC
; Line 68
	push	ebp
	mov	ebp, esp
	push	esi
; Line 69
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _maxCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initCount$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__CreateSemaphoreA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 70
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_HandleToWRes@4
; Line 71
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_Semaphore_Create@12 ENDP
_TEXT	ENDS
PUBLIC	_Semaphore_ReleaseN@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Semaphore_ReleaseN@8 PROC
; Line 76
	push	ebp
	mov	ebp, esp
	push	0
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Semaphore_Release@12
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Semaphore_ReleaseN@8 ENDP
_TEXT	ENDS
EXTRN	__imp__ReleaseSemaphore@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_releaseCount$ = 12					; size = 4
_previousCount$ = 16					; size = 4
_Semaphore_Release@12 PROC
; Line 74
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _previousCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _releaseCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__ReleaseSemaphore@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_BOOLToWRes@4
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_Semaphore_Release@12 ENDP
_TEXT	ENDS
PUBLIC	_Semaphore_Release1@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Semaphore_Release1@4 PROC
; Line 77
	push	ebp
	mov	ebp, esp
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Semaphore_ReleaseN@8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Semaphore_Release1@4 ENDP
_TEXT	ENDS
PUBLIC	_CriticalSection_Init@4
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
xdata$x	SEGMENT
__sehtable$_CriticalSection_Init@4 DD 0fffffffeH
	DD	00H
	DD	0ffffffd4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@CriticalSe
	DD	FLAT:$LN6@CriticalSe
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv67 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_p$ = 8							; size = 4
_CriticalSection_Init@4 PROC
; Line 80
	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_CriticalSection_Init@4
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -12				; fffffff4H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$SEHRec$[ebp], esp
; Line 83
	mov	DWORD PTR __$SEHRec$[ebp+20], 0
; Line 86
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 88
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	jmp	SHORT $LN8@CriticalSe
$LN5@CriticalSe:
$LN10@CriticalSe:
; Line 90
	mov	eax, 1
$LN7@CriticalSe:
$LN9@CriticalSe:
	ret	0
$LN6@CriticalSe:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
	mov	DWORD PTR tv67[ebp], 1
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	mov	eax, DWORD PTR tv67[ebp]
	jmp	SHORT $LN4@CriticalSe
	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
$LN8@CriticalSe:
; Line 92
	xor	eax, eax
$LN4@CriticalSe:
; Line 93
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_CriticalSection_Init@4 ENDP
_TEXT	ENDS
END
