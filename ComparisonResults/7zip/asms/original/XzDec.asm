; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\XzDec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Xz_ReadVarInt@12
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__allshl:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xzdec.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv81 = -20						; size = 4
tv65 = -16						; size = 4
_b$4113 = -9						; size = 1
_limit$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_maxSize$ = 12						; size = 4
_value$ = 16						; size = 4
_Xz_ReadVarInt@12 PROC
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 36
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 37
	cmp	DWORD PTR _maxSize$[ebp], 9
	jbe	SHORT $LN6@Xz_ReadVar
	mov	DWORD PTR tv65[ebp], 9
	jmp	SHORT $LN7@Xz_ReadVar
$LN6@Xz_ReadVar:
	mov	ecx, DWORD PTR _maxSize$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN7@Xz_ReadVar:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _limit$[ebp], edx
; Line 39
	mov	DWORD PTR _i$[ebp], 0
$LN3@Xz_ReadVar:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@Xz_ReadVar
; Line 41
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _b$4113[ebp], dl
; Line 42
	movzx	eax, BYTE PTR _b$4113[ebp]
	and	eax, 127				; 0000007fH
	cdq
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7
	call	__allshl
	mov	ecx, DWORD PTR _value$[ebp]
	or	eax, DWORD PTR [ecx]
	or	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 43
	movzx	eax, BYTE PTR _b$4113[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN1@Xz_ReadVar
; Line 44
	movzx	ecx, BYTE PTR _b$4113[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@Xz_ReadVar
	cmp	DWORD PTR _i$[ebp], 1
	je	SHORT $LN8@Xz_ReadVar
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN9@Xz_ReadVar
$LN8@Xz_ReadVar:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv81[ebp], edx
$LN9@Xz_ReadVar:
	mov	eax, DWORD PTR tv81[ebp]
	jmp	SHORT $LN4@Xz_ReadVar
$LN1@Xz_ReadVar:
; Line 45
	jmp	SHORT $LN3@Xz_ReadVar
$LN2@Xz_ReadVar:
; Line 46
	xor	eax, eax
$LN4@Xz_ReadVar:
; Line 47
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Xz_ReadVarInt@12 ENDP
_TEXT	ENDS
PUBLIC	_BraState_SetFromMethod@20
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = -4						; size = 4
_p$ = 8							; size = 4
_id$ = 12						; size = 8
_encodeMode$ = 20					; size = 4
_alloc$ = 24						; size = 4
_BraState_SetFromMethod@20 PROC
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 209
	cmp	DWORD PTR _id$[ebp], 3
	jne	SHORT $LN5@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN5@BraState_S:
	cmp	DWORD PTR _id$[ebp], 4
	jne	SHORT $LN6@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN6@BraState_S:
	cmp	DWORD PTR _id$[ebp], 5
	jne	SHORT $LN7@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN7@BraState_S:
	cmp	DWORD PTR _id$[ebp], 6
	jne	SHORT $LN8@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN8@BraState_S:
	cmp	DWORD PTR _id$[ebp], 7
	jne	SHORT $LN9@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN9@BraState_S:
	cmp	DWORD PTR _id$[ebp], 8
	jne	SHORT $LN10@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN10@BraState_S:
	cmp	DWORD PTR _id$[ebp], 9
	jne	SHORT $LN11@BraState_S
	cmp	DWORD PTR _id$[ebp+4], 0
	je	SHORT $LN2@BraState_S
$LN11@BraState_S:
; Line 210
	mov	eax, 4
	jmp	SHORT $LN3@BraState_S
$LN2@BraState_S:
; Line 211
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 212
	mov	esi, esp
	push	16672					; 00004120H
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _decoder$[ebp], eax
; Line 213
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN1@BraState_S
; Line 214
	mov	eax, 2
	jmp	SHORT $LN3@BraState_S
$LN1@BraState_S:
; Line 215
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 216
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _encodeMode$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 217
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx], eax
; Line 218
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _BraState_Free@8
; Line 219
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _BraState_SetProps@16
; Line 220
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _BraState_Init@4
; Line 221
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET _BraState_Code@32
; Line 222
	xor	eax, eax
$LN3@BraState_S:
; Line 223
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_BraState_SetFromMethod@20 ENDP
; Function compile flags: /Odtp /RTCsu
_pp$ = 8						; size = 4
_alloc$ = 12						; size = 4
_BraState_Free@8 PROC
; Line 70
	push	ebp
	mov	ebp, esp
	push	esi
; Line 71
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 72
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_BraState_Free@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv73 = -12						; size = 4
_v$4151 = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_props$ = 12						; size = 4
_propSize$ = 16						; size = 4
_alloc$ = 20						; size = 4
_BraState_SetProps@16 PROC
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 76
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 77
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	DWORD PTR _alloc$[ebp], ecx
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 79
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 3
	jne	SHORT $LN14@BraState_S@2
; Line 81
	cmp	DWORD PTR _propSize$[ebp], 1
	je	SHORT $LN13@BraState_S@2
; Line 82
	mov	eax, 4
	jmp	$LN15@BraState_S@2
$LN13@BraState_S@2:
; Line 83
	mov	ecx, DWORD PTR _props$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 85
	jmp	SHORT $LN12@BraState_S@2
$LN14@BraState_S@2:
; Line 87
	cmp	DWORD PTR _propSize$[ebp], 4
	jne	SHORT $LN11@BraState_S@2
; Line 89
	mov	ecx, DWORD PTR _props$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _v$4151[ebp], edx
; Line 90
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	sub	edx, 5
	mov	DWORD PTR tv73[ebp], edx
	cmp	DWORD PTR tv73[ebp], 4
	ja	SHORT $LN9@BraState_S@2
	mov	eax, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN17@BraState_S@2[eax*4]
$LN8@BraState_S@2:
; Line 95
	mov	ecx, DWORD PTR _v$4151[ebp]
	and	ecx, 3
	je	SHORT $LN7@BraState_S@2
; Line 96
	mov	eax, 4
	jmp	SHORT $LN15@BraState_S@2
$LN7@BraState_S@2:
; Line 97
	jmp	SHORT $LN9@BraState_S@2
$LN6@BraState_S@2:
; Line 99
	mov	edx, DWORD PTR _v$4151[ebp]
	and	edx, 1
	je	SHORT $LN5@BraState_S@2
; Line 100
	mov	eax, 4
	jmp	SHORT $LN15@BraState_S@2
$LN5@BraState_S@2:
; Line 101
	jmp	SHORT $LN9@BraState_S@2
$LN4@BraState_S@2:
; Line 103
	mov	eax, DWORD PTR _v$4151[ebp]
	and	eax, 15					; 0000000fH
	je	SHORT $LN9@BraState_S@2
; Line 104
	mov	eax, 4
	jmp	SHORT $LN15@BraState_S@2
$LN9@BraState_S@2:
; Line 107
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _v$4151[ebp]
	mov	DWORD PTR [ecx+24], edx
	jmp	SHORT $LN12@BraState_S@2
$LN11@BraState_S@2:
; Line 109
	cmp	DWORD PTR _propSize$[ebp], 0
	je	SHORT $LN12@BraState_S@2
; Line 110
	mov	eax, 4
	jmp	SHORT $LN15@BraState_S@2
$LN12@BraState_S@2:
; Line 112
	xor	eax, eax
$LN15@BraState_S@2:
; Line 113
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN17@BraState_S@2:
	DD	$LN8@BraState_S@2
	DD	$LN4@BraState_S@2
	DD	$LN8@BraState_S@2
	DD	$LN6@BraState_S@2
	DD	$LN8@BraState_S@2
_BraState_SetProps@16 ENDP
_TEXT	ENDS
EXTRN	_Delta_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_BraState_Init@4 PROC
; Line 116
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 117
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 118
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 119
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 120
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 3
	jne	SHORT $LN2@BraState_I
; Line 121
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_Delta_Init@4
$LN2@BraState_I:
; Line 122
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_BraState_Init@4 ENDP
_TEXT	ENDS
EXTRN	_SPARC_Convert@16:PROC
EXTRN	_ARMT_Convert@16:PROC
EXTRN	_ARM_Convert@16:PROC
EXTRN	_IA64_Convert@16:PROC
EXTRN	_PPC_Convert@16:PROC
EXTRN	_x86_Convert@20:PROC
EXTRN	_Delta_Decode@16:PROC
EXTRN	_Delta_Encode@16:PROC
EXTRN	__imp__memmove:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv140 = -24						; size = 4
_curSize$4201 = -20					; size = 4
_curSize$4199 = -16					; size = 4
_srcLenOrig$ = -12					; size = 4
_destLenOrig$ = -8					; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_dest$ = 12						; size = 4
_destLen$ = 16						; size = 4
_src$ = 20						; size = 4
_srcLen$ = 24						; size = 4
_srcWasFinished$ = 28					; size = 4
_finishMode$ = 32					; size = 4
_wasFinished$ = 36					; size = 4
_BraState_Code@32 PROC
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 129
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 130
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _destLenOrig$[ebp], edx
; Line 131
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _srcLenOrig$[ebp], ecx
; Line 132
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [edx], 0
; Line 133
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], 0
; Line 134
	mov	ecx, DWORD PTR _finishMode$[ebp]
	mov	DWORD PTR _finishMode$[ebp], ecx
; Line 135
	mov	edx, DWORD PTR _wasFinished$[ebp]
	mov	DWORD PTR [edx], 0
$LN21@BraState_C:
; Line 136
	cmp	DWORD PTR _destLenOrig$[ebp], 0
	jbe	$LN20@BraState_C
; Line 138
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN19@BraState_C
; Line 140
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _curSize$4199[ebp], edx
; Line 141
	mov	eax, DWORD PTR _curSize$4199[ebp]
	cmp	eax, DWORD PTR _destLenOrig$[ebp]
	jbe	SHORT $LN18@BraState_C
; Line 142
	mov	ecx, DWORD PTR _destLenOrig$[ebp]
	mov	DWORD PTR _curSize$4199[ebp], ecx
$LN18@BraState_C:
; Line 143
	mov	edx, DWORD PTR _curSize$4199[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+288]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 144
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _curSize$4199[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 145
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _curSize$4199[ebp]
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 146
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _curSize$4199[ebp]
	mov	DWORD PTR _dest$[ebp], edx
; Line 147
	mov	eax, DWORD PTR _destLenOrig$[ebp]
	sub	eax, DWORD PTR _curSize$4199[ebp]
	mov	DWORD PTR _destLenOrig$[ebp], eax
; Line 148
	jmp	$LN21@BraState_C
$LN19@BraState_C:
; Line 150
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 151
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+288]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 152
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 153
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 155
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 16384				; 00004000H
	sub	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _curSize$4201[ebp], eax
; Line 156
	mov	ecx, DWORD PTR _curSize$4201[ebp]
	cmp	ecx, DWORD PTR _srcLenOrig$[ebp]
	jbe	SHORT $LN17@BraState_C
; Line 157
	mov	edx, DWORD PTR _srcLenOrig$[ebp]
	mov	DWORD PTR _curSize$4201[ebp], edx
$LN17@BraState_C:
; Line 158
	mov	eax, DWORD PTR _curSize$4201[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+288]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 159
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _curSize$4201[ebp]
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 160
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _curSize$4201[ebp]
	mov	DWORD PTR _src$[ebp], eax
; Line 161
	mov	ecx, DWORD PTR _srcLenOrig$[ebp]
	sub	ecx, DWORD PTR _curSize$4201[ebp]
	mov	DWORD PTR _srcLenOrig$[ebp], ecx
; Line 162
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _curSize$4201[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 164
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN16@BraState_C
; Line 165
	jmp	$LN20@BraState_C
$LN16@BraState_C:
; Line 166
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR tv140[ebp]
	sub	edx, 3
	mov	DWORD PTR tv140[ebp], edx
	cmp	DWORD PTR tv140[ebp], 6
	ja	$LN4@BraState_C
	mov	eax, DWORD PTR tv140[ebp]
	jmp	DWORD PTR $LN25@BraState_C[eax*4]
$LN13@BraState_C:
; Line 169
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN12@BraState_C
; Line 170
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_Delta_Encode@16
; Line 171
	jmp	SHORT $LN11@BraState_C
$LN12@BraState_C:
; Line 172
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_Delta_Decode@16
$LN11@BraState_C:
; Line 173
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
; Line 174
	jmp	$LN14@BraState_C
$LN10@BraState_C:
; Line 176
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	call	_x86_Convert@20
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 177
	jmp	$LN14@BraState_C
$LN9@BraState_C:
; Line 178
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_PPC_Convert@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN14@BraState_C
$LN8@BraState_C:
; Line 179
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_IA64_Convert@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN14@BraState_C
$LN7@BraState_C:
; Line 180
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_ARM_Convert@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN14@BraState_C
$LN6@BraState_C:
; Line 181
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_ARMT_Convert@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN14@BraState_C
$LN5@BraState_C:
; Line 182
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_SPARC_Convert@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN14@BraState_C
$LN4@BraState_C:
; Line 184
	mov	eax, 4
	jmp	SHORT $LN22@BraState_C
$LN14@BraState_C:
; Line 186
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 188
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@BraState_C
; Line 190
	cmp	DWORD PTR _srcWasFinished$[ebp], 0
	jne	SHORT $LN2@BraState_C
; Line 191
	jmp	SHORT $LN20@BraState_C
$LN2@BraState_C:
; Line 192
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+4], eax
$LN3@BraState_C:
; Line 194
	jmp	$LN21@BraState_C
$LN20@BraState_C:
; Line 195
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@BraState_C
	cmp	DWORD PTR _srcLenOrig$[ebp], 0
	jne	SHORT $LN1@BraState_C
	cmp	DWORD PTR _srcWasFinished$[ebp], 0
	je	SHORT $LN1@BraState_C
; Line 196
	mov	ecx, DWORD PTR _wasFinished$[ebp]
	mov	DWORD PTR [ecx], 1
$LN1@BraState_C:
; Line 197
	xor	eax, eax
$LN22@BraState_C:
; Line 198
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	2
$LN25@BraState_C:
	DD	$LN13@BraState_C
	DD	$LN10@BraState_C
	DD	$LN9@BraState_C
	DD	$LN8@BraState_C
	DD	$LN7@BraState_C
	DD	$LN6@BraState_C
	DD	$LN5@BraState_C
_BraState_Code@32 ENDP
_TEXT	ENDS
PUBLIC	_MixCoder_Construct@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_MixCoder_Construct@8 PROC
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 334
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 335
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 336
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 337
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MixCoder_C
$LN2@MixCoder_C:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@MixCoder_C:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN4@MixCoder_C
; Line 338
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx+80], 0
	jmp	SHORT $LN2@MixCoder_C
$LN4@MixCoder_C:
; Line 339
	mov	esp, ebp
	pop	ebp
	ret	8
_MixCoder_Construct@8 ENDP
_TEXT	ENDS
PUBLIC	_MixCoder_Free@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sc$4312 = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_MixCoder_Free@4 PROC
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 344
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@MixCoder_F
$LN4@MixCoder_F:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@MixCoder_F:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@MixCoder_F
; Line 346
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+80]
	mov	DWORD PTR _sc$4312[ebp], edx
; Line 347
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@MixCoder_F
	mov	ecx, DWORD PTR _sc$4312[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@MixCoder_F
; Line 348
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _sc$4312[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _sc$4312[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@MixCoder_F:
; Line 349
	jmp	SHORT $LN4@MixCoder_F
$LN3@MixCoder_F:
; Line 350
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 351
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@MixCoder_F
; Line 353
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 354
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN6@MixCoder_F:
; Line 356
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MixCoder_Free@4 ENDP
_TEXT	ENDS
PUBLIC	_MixCoder_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_coder$4326 = -8					; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_MixCoder_Init@4 PROC
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 361
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MixCoder_I
$LN5@MixCoder_I:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@MixCoder_I:
	cmp	DWORD PTR _i$[ebp], 3
	jae	SHORT $LN4@MixCoder_I
; Line 363
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+36], 0
; Line 364
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+24], 0
; Line 365
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4+12], 0
; Line 366
	jmp	SHORT $LN5@MixCoder_I
$LN4@MixCoder_I:
; Line 367
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MixCoder_I
$LN2@MixCoder_I:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@MixCoder_I:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN7@MixCoder_I
; Line 369
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR _coder$4326[ebp], eax
; Line 370
	mov	esi, esp
	mov	ecx, DWORD PTR _coder$4326[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _coder$4326[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 371
	jmp	SHORT $LN2@MixCoder_I
$LN7@MixCoder_I:
; Line 372
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MixCoder_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_MixCoder_SetFromMethod@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -12						; size = 8
_sc$ = -4						; size = 4
_p$ = 8							; size = 4
_coderIndex$ = 12					; size = 4
_methodId$ = 16						; size = 8
_MixCoder_SetFromMethod@16 PROC
; Line 375
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 376
	mov	eax, DWORD PTR _coderIndex$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+80]
	mov	DWORD PTR _sc$[ebp], edx
; Line 377
	mov	eax, DWORD PTR _coderIndex$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _methodId$[ebp]
	mov	DWORD PTR [ecx+eax*8+48], edx
	mov	edx, DWORD PTR _methodId$[ebp+4]
	mov	DWORD PTR [ecx+eax*8+52], edx
; Line 378
	mov	eax, DWORD PTR _methodId$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _methodId$[ebp+4]
	mov	DWORD PTR tv70[ebp+4], ecx
	cmp	DWORD PTR tv70[ebp], 33			; 00000021H
	jne	SHORT $LN7@MixCoder_S
	cmp	DWORD PTR tv70[ebp+4], 0
	je	SHORT $LN2@MixCoder_S
$LN7@MixCoder_S:
	jmp	SHORT $LN3@MixCoder_S
$LN2@MixCoder_S:
; Line 380
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _sc$[ebp]
	push	ecx
	call	_Lzma2State_SetFromMethod@8
	jmp	SHORT $LN5@MixCoder_S
$LN3@MixCoder_S:
; Line 385
	cmp	DWORD PTR _coderIndex$[ebp], 0
	jne	SHORT $LN1@MixCoder_S
; Line 386
	mov	eax, 4
	jmp	SHORT $LN5@MixCoder_S
$LN1@MixCoder_S:
; Line 387
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	mov	ecx, DWORD PTR _methodId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _methodId$[ebp]
	push	edx
	mov	eax, DWORD PTR _sc$[ebp]
	push	eax
	call	_BraState_SetFromMethod@20
$LN5@MixCoder_S:
; Line 388
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_MixCoder_SetFromMethod@16 ENDP
; Function compile flags: /Odtp /RTCsu
_decoder$ = -4						; size = 4
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Lzma2State_SetFromMethod@8 PROC
; Line 317
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 318
	mov	esi, esp
	push	140					; 0000008cH
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _decoder$[ebp], eax
; Line 319
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 320
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN1@Lzma2State
; Line 321
	mov	eax, 2
	jmp	SHORT $LN2@Lzma2State
$LN1@Lzma2State:
; Line 322
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], OFFSET _Lzma2State_Free@8
; Line 323
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _Lzma2State_SetProps@16
; Line 324
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], OFFSET _Lzma2State_Init@4
; Line 325
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], OFFSET _Lzma2State_Code@32
; Line 326
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 327
	xor	eax, eax
$LN2@Lzma2State:
; Line 328
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Lzma2State_SetFromMethod@8 ENDP
_TEXT	ENDS
EXTRN	_LzmaDec_Free@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_alloc$ = 12						; size = 4
_Lzma2State_Free@8 PROC
; Line 288
	push	ebp
	mov	ebp, esp
	push	esi
; Line 289
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	_LzmaDec_Free@8
; Line 290
	mov	esi, esp
	mov	edx, DWORD PTR _pp$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 291
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Lzma2State_Free@8 ENDP
_TEXT	ENDS
EXTRN	_Lzma2Dec_Allocate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_props$ = 12						; size = 4
_propSize$ = 16						; size = 4
_alloc$ = 20						; size = 4
_Lzma2State_SetProps@16 PROC
; Line 294
	push	ebp
	mov	ebp, esp
; Line 295
	cmp	DWORD PTR _propSize$[ebp], 1
	je	SHORT $LN1@Lzma2State@2
; Line 296
	mov	eax, 4
	jmp	SHORT $LN2@Lzma2State@2
$LN1@Lzma2State@2:
; Line 297
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _props$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	call	_Lzma2Dec_Allocate@12
$LN2@Lzma2State@2:
; Line 298
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
_Lzma2State_SetProps@16 ENDP
_TEXT	ENDS
EXTRN	_Lzma2Dec_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_Lzma2State_Init@4 PROC
; Line 301
	push	ebp
	mov	ebp, esp
; Line 302
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	call	_Lzma2Dec_Init@4
; Line 303
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Lzma2State_Init@4 ENDP
_TEXT	ENDS
EXTRN	_Lzma2Dec_DecodeToBuf@28:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -16						; size = 4
_status$ = -8						; size = 4
_pp$ = 8						; size = 4
_dest$ = 12						; size = 4
_destLen$ = 16						; size = 4
_src$ = 20						; size = 4
_srcLen$ = 24						; size = 4
_srcWasFinished$ = 28					; size = 4
_finishMode$ = 32					; size = 4
_wasFinished$ = 36					; size = 4
_Lzma2State_Code@32 PROC
; Line 307
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 310
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _finishMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	call	_Lzma2Dec_DecodeToBuf@28
	mov	DWORD PTR _res$[ebp], eax
; Line 311
	mov	ecx, DWORD PTR _srcWasFinished$[ebp]
	mov	DWORD PTR _srcWasFinished$[ebp], ecx
; Line 312
	xor	edx, edx
	cmp	DWORD PTR _status$[ebp], 1
	sete	dl
	mov	eax, DWORD PTR _wasFinished$[ebp]
	mov	DWORD PTR [eax], edx
; Line 313
	mov	eax, DWORD PTR _res$[ebp]
; Line 314
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Lzma2State@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	1
$LN5@Lzma2State@3:
	DD	1
	DD	$LN4@Lzma2State@3
$LN4@Lzma2State@3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Lzma2State@3
$LN3@Lzma2State@3:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_Lzma2State_Code@32 ENDP
_TEXT	ENDS
PUBLIC	_MixCoder_Code@32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_encodingWasFinished$4380 = -72				; size = 4
_srcFinishedCur$4379 = -64				; size = 4
_srcCur$4378 = -60					; size = 4
_srcLenCur$4377 = -52					; size = 4
_destLenCur$4376 = -40					; size = 4
_destCur$4375 = -32					; size = 4
_coder$4374 = -28					; size = 4
_res$4373 = -24						; size = 4
_i$4369 = -20						; size = 4
_processed$4368 = -16					; size = 4
_allFinished$ = -12					; size = 4
_srcLenOrig$ = -8					; size = 4
_destLenOrig$ = -4					; size = 4
_p$ = 8							; size = 4
_dest$ = 12						; size = 4
_destLen$ = 16						; size = 4
_src$ = 20						; size = 4
_srcLen$ = 24						; size = 4
_srcWasFinished$ = 28					; size = 4
_finishMode$ = 32					; size = 4
_status$ = 36						; size = 4
_MixCoder_Code@32 PROC
; Line 393
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 394
	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _destLenOrig$[ebp], ecx
; Line 395
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _srcLenOrig$[ebp], eax
; Line 396
	mov	DWORD PTR _allFinished$[ebp], 1
; Line 397
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 398
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], 0
; Line 399
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 2
; Line 401
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN23@MixCoder_C@2
; Line 403
	mov	esi, esp
	push	393216					; 00060000H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 404
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN23@MixCoder_C@2
; Line 405
	mov	eax, 2
	jmp	$LN24@MixCoder_C@2
$LN23@MixCoder_C@2:
; Line 408
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 1
	je	SHORT $LN20@MixCoder_C@2
; Line 409
	mov	DWORD PTR _finishMode$[ebp], 0
$LN20@MixCoder_C@2:
; Line 413
	mov	DWORD PTR _processed$4368[ebp], 0
; Line 420
	mov	DWORD PTR _i$4369[ebp], 0
	jmp	SHORT $LN18@MixCoder_C@2
$LN17@MixCoder_C@2:
	mov	ecx, DWORD PTR _i$4369[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4369[ebp], ecx
$LN18@MixCoder_C@2:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$4369[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	$LN16@MixCoder_C@2
; Line 423
	mov	ecx, DWORD PTR _i$4369[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR _coder$4374[ebp], eax
; Line 430
	cmp	DWORD PTR _i$4369[ebp], 0
	jne	SHORT $LN15@MixCoder_C@2
; Line 432
	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _srcCur$4378[ebp], ecx
; Line 433
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR _srcLenOrig$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _srcLenCur$4377[ebp], eax
; Line 434
	mov	ecx, DWORD PTR _srcWasFinished$[ebp]
	mov	DWORD PTR _srcFinishedCur$4379[ebp], ecx
; Line 436
	jmp	SHORT $LN14@MixCoder_C@2
$LN15@MixCoder_C@2:
; Line 438
	mov	edx, DWORD PTR _i$4369[ebp]
	sub	edx, 1
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	mov	edx, DWORD PTR _i$4369[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+20]
	mov	DWORD PTR _srcCur$4378[ebp], ecx
; Line 439
	mov	ecx, DWORD PTR _i$4369[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$4369[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+32]
	sub	ecx, DWORD PTR [esi+eax*4+20]
	mov	DWORD PTR _srcLenCur$4377[ebp], ecx
; Line 440
	mov	edx, DWORD PTR _i$4369[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	mov	DWORD PTR _srcFinishedCur$4379[ebp], ecx
$LN14@MixCoder_C@2:
; Line 443
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	cmp	DWORD PTR _i$4369[ebp], eax
	jne	SHORT $LN13@MixCoder_C@2
; Line 445
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _destCur$4375[ebp], ecx
; Line 446
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR _destLenOrig$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _destLenCur$4376[ebp], eax
; Line 448
	jmp	SHORT $LN12@MixCoder_C@2
$LN13@MixCoder_C@2:
; Line 450
	mov	ecx, DWORD PTR _i$4369[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$4369[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+24]
	cmp	ecx, DWORD PTR [esi+eax*4+36]
	je	SHORT $LN11@MixCoder_C@2
; Line 451
	jmp	$LN17@MixCoder_C@2
$LN11@MixCoder_C@2:
; Line 452
	mov	edx, DWORD PTR _i$4369[ebp]
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _destCur$4375[ebp], edx
; Line 453
	mov	DWORD PTR _destLenCur$4376[ebp], 131072	; 00020000H
$LN12@MixCoder_C@2:
; Line 456
	mov	esi, esp
	lea	ecx, DWORD PTR _encodingWasFinished$4380[ebp]
	push	ecx
	mov	edx, DWORD PTR _finishMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcFinishedCur$4379[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcLenCur$4377[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcCur$4378[ebp]
	push	edx
	lea	eax, DWORD PTR _destLenCur$4376[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCur$4375[ebp]
	push	ecx
	mov	edx, DWORD PTR _coder$4374[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _coder$4374[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$4373[ebp], eax
; Line 458
	cmp	DWORD PTR _encodingWasFinished$4380[ebp], 0
	jne	SHORT $LN10@MixCoder_C@2
; Line 459
	mov	DWORD PTR _allFinished$[ebp], 0
$LN10@MixCoder_C@2:
; Line 461
	cmp	DWORD PTR _i$4369[ebp], 0
	jne	SHORT $LN9@MixCoder_C@2
; Line 463
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _srcLenCur$4377[ebp]
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 464
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _srcLenCur$4377[ebp]
	mov	DWORD PTR _src$[ebp], eax
; Line 466
	jmp	SHORT $LN8@MixCoder_C@2
$LN9@MixCoder_C@2:
; Line 468
	mov	ecx, DWORD PTR _i$4369[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
	add	eax, DWORD PTR _srcLenCur$4377[ebp]
	mov	ecx, DWORD PTR _i$4369[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+20], eax
$LN8@MixCoder_C@2:
; Line 471
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	cmp	DWORD PTR _i$4369[ebp], ecx
	jne	SHORT $LN7@MixCoder_C@2
; Line 473
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _destLenCur$4376[ebp]
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 474
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _destLenCur$4376[ebp]
	mov	DWORD PTR _dest$[ebp], edx
; Line 476
	jmp	SHORT $LN6@MixCoder_C@2
$LN7@MixCoder_C@2:
; Line 478
	mov	eax, DWORD PTR _i$4369[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _destLenCur$4376[ebp]
	mov	DWORD PTR [ecx+eax*4+36], edx
; Line 479
	mov	eax, DWORD PTR _i$4369[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+24], 0
; Line 480
	mov	edx, DWORD PTR _i$4369[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _encodingWasFinished$4380[ebp]
	mov	DWORD PTR [eax+edx*4+12], ecx
$LN6@MixCoder_C@2:
; Line 483
	cmp	DWORD PTR _res$4373[ebp], 0
	je	SHORT $LN5@MixCoder_C@2
; Line 484
	mov	eax, DWORD PTR _res$4373[ebp]
	jmp	SHORT $LN24@MixCoder_C@2
$LN5@MixCoder_C@2:
; Line 486
	cmp	DWORD PTR _destLenCur$4376[ebp], 0
	jne	SHORT $LN3@MixCoder_C@2
	cmp	DWORD PTR _srcLenCur$4377[ebp], 0
	je	SHORT $LN4@MixCoder_C@2
$LN3@MixCoder_C@2:
; Line 487
	mov	DWORD PTR _processed$4368[ebp], 1
$LN4@MixCoder_C@2:
; Line 488
	jmp	$LN17@MixCoder_C@2
$LN16@MixCoder_C@2:
; Line 489
	cmp	DWORD PTR _processed$4368[ebp], 0
	jne	SHORT $LN2@MixCoder_C@2
; Line 490
	jmp	SHORT $LN19@MixCoder_C@2
$LN2@MixCoder_C@2:
; Line 491
	jmp	$LN20@MixCoder_C@2
$LN19@MixCoder_C@2:
; Line 492
	cmp	DWORD PTR _allFinished$[ebp], 0
	je	SHORT $LN1@MixCoder_C@2
; Line 493
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], 1
$LN1@MixCoder_C@2:
; Line 494
	xor	eax, eax
$LN24@MixCoder_C@2:
; Line 495
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@MixCoder_C@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	3
$LN30@MixCoder_C@2:
	DD	3
	DD	$LN29@MixCoder_C@2
$LN29@MixCoder_C@2:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN26@MixCoder_C@2
	DD	-52					; ffffffccH
	DD	4
	DD	$LN27@MixCoder_C@2
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN28@MixCoder_C@2
$LN28@MixCoder_C@2:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN27@MixCoder_C@2:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN26@MixCoder_C@2:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_MixCoder_Code@32 ENDP
_TEXT	ENDS
PUBLIC	_Xz_ParseHeader@8
EXTRN	@CrcCalc@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_buf$ = 12						; size = 4
_Xz_ParseHeader@8 PROC
; Line 498
	push	ebp
	mov	ebp, esp
; Line 499
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	or	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx
; Line 501
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 6
	mov	edx, 2
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _buf$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	je	SHORT $LN1@Xz_ParseHe
; Line 502
	mov	eax, 17					; 00000011H
	jmp	SHORT $LN2@Xz_ParseHe
$LN1@Xz_ParseHe:
; Line 503
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	xor	ecx, ecx
	cmp	eax, 15					; 0000000fH
	setle	cl
	sub	ecx, 1
	and	ecx, 4
	mov	eax, ecx
$LN2@Xz_ParseHe:
; Line 504
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Xz_ParseHeader@8 ENDP
_TEXT	ENDS
PUBLIC	_XzBlock_Parse@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv180 = -76						; size = 4
tv246 = -72						; size = 8
tv213 = -64						; size = 8
tv200 = -56						; size = 4
_s$4456 = -52						; size = 4
_s$4454 = -48						; size = 4
_size$4453 = -40					; size = 8
_filter$4452 = -28					; size = 4
_s$4447 = -24						; size = 4
_s$4441 = -20						; size = 4
_headerSize$ = -16					; size = 4
_i$ = -12						; size = 4
_numFilters$ = -8					; size = 4
_pos$ = -4						; size = 4
_p$ = 8							; size = 4
_header$ = 12						; size = 4
_XzBlock_Parse@8 PROC
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 524
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 2
	mov	DWORD PTR _headerSize$[ebp], ecx
; Line 526
	mov	edx, DWORD PTR _headerSize$[ebp]
	mov	ecx, DWORD PTR _header$[ebp]
	call	@CrcCalc@8
	mov	edx, DWORD PTR _header$[ebp]
	add	edx, DWORD PTR _headerSize$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN18@XzBlock_Pa
; Line 527
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN18@XzBlock_Pa:
; Line 529
	mov	DWORD PTR _pos$[ebp], 1
; Line 530
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _headerSize$[ebp]
	jne	SHORT $LN17@XzBlock_Pa
; Line 531
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN17@XzBlock_Pa:
; Line 532
	mov	ecx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx+16], al
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 534
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	and	eax, 64					; 00000040H
	je	SHORT $LN16@XzBlock_Pa
; Line 536
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _headerSize$[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$4441[ebp], eax
	cmp	DWORD PTR _s$4441[ebp], 0
	jne	SHORT $LN15@XzBlock_Pa
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN15@XzBlock_Pa:
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR _s$4441[ebp]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 537
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv200[ebp], edx
	mov	eax, DWORD PTR tv200[ebp]
	mov	ecx, DWORD PTR tv200[ebp]
	mov	edx, DWORD PTR [eax]
	or	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@XzBlock_Pa
	mov	eax, DWORD PTR _headerSize$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx]
	adc	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv213[ebp], eax
	mov	DWORD PTR tv213[ebp+4], ecx
	cmp	DWORD PTR tv213[ebp+4], -2147483648	; 80000000H
	jb	SHORT $LN16@XzBlock_Pa
	ja	SHORT $LN13@XzBlock_Pa
	cmp	DWORD PTR tv213[ebp], 0
	jb	SHORT $LN16@XzBlock_Pa
$LN13@XzBlock_Pa:
; Line 538
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN16@XzBlock_Pa:
; Line 541
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	and	ecx, 128				; 00000080H
	je	SHORT $LN12@XzBlock_Pa
; Line 542
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _headerSize$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$4447[ebp], eax
	cmp	DWORD PTR _s$4447[ebp], 0
	jne	SHORT $LN11@XzBlock_Pa
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN11@XzBlock_Pa:
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _s$4447[ebp]
	mov	DWORD PTR _pos$[ebp], edx
$LN12@XzBlock_Pa:
; Line 544
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	and	ecx, 3
	add	ecx, 1
	mov	DWORD PTR _numFilters$[ebp], ecx
; Line 545
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@XzBlock_Pa
$LN9@XzBlock_Pa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@XzBlock_Pa:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFilters$[ebp]
	jae	$LN3@XzBlock_Pa
; Line 547
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	mov	DWORD PTR _filter$4452[ebp], eax
; Line 549
	mov	ecx, DWORD PTR _filter$4452[ebp]
	push	ecx
	mov	edx, DWORD PTR _headerSize$[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$4454[ebp], eax
	cmp	DWORD PTR _s$4454[ebp], 0
	jne	SHORT $LN7@XzBlock_Pa
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN7@XzBlock_Pa:
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR _s$4454[ebp]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 550
	lea	edx, DWORD PTR _size$4453[ebp]
	push	edx
	mov	eax, DWORD PTR _headerSize$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$4456[ebp], eax
	cmp	DWORD PTR _s$4456[ebp], 0
	jne	SHORT $LN6@XzBlock_Pa
	mov	eax, 16					; 00000010H
	jmp	$LN19@XzBlock_Pa
$LN6@XzBlock_Pa:
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _s$4456[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 551
	mov	eax, DWORD PTR _headerSize$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv246[ebp], eax
	mov	DWORD PTR tv246[ebp+4], ecx
	mov	edx, DWORD PTR _size$4453[ebp+4]
	cmp	edx, DWORD PTR tv246[ebp+4]
	ja	SHORT $LN4@XzBlock_Pa
	jb	SHORT $LN24@XzBlock_Pa
	mov	eax, DWORD PTR _size$4453[ebp]
	cmp	eax, DWORD PTR tv246[ebp]
	ja	SHORT $LN4@XzBlock_Pa
$LN24@XzBlock_Pa:
	cmp	DWORD PTR _size$4453[ebp+4], 0
	ja	SHORT $LN4@XzBlock_Pa
	cmp	DWORD PTR _size$4453[ebp], 20		; 00000014H
	jbe	SHORT $LN5@XzBlock_Pa
$LN4@XzBlock_Pa:
; Line 552
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN19@XzBlock_Pa
$LN5@XzBlock_Pa:
; Line 553
	mov	ecx, DWORD PTR _size$4453[ebp]
	mov	edx, DWORD PTR _filter$4452[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 554
	mov	eax, DWORD PTR _size$4453[ebp]
	push	eax
	mov	ecx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filter$4452[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 555
	mov	eax, DWORD PTR _size$4453[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 565
	jmp	$LN9@XzBlock_Pa
$LN3@XzBlock_Pa:
; Line 567
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _headerSize$[ebp]
	jae	SHORT $LN2@XzBlock_Pa
; Line 568
	mov	edx, DWORD PTR _header$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	test	eax, eax
	je	SHORT $LN21@XzBlock_Pa
	mov	DWORD PTR tv180[ebp], 1
	jmp	SHORT $LN22@XzBlock_Pa
$LN21@XzBlock_Pa:
	mov	DWORD PTR tv180[ebp], 0
$LN22@XzBlock_Pa:
	cmp	DWORD PTR tv180[ebp], 0
	je	SHORT $LN1@XzBlock_Pa
; Line 569
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN19@XzBlock_Pa
$LN1@XzBlock_Pa:
; Line 570
	jmp	SHORT $LN3@XzBlock_Pa
$LN2@XzBlock_Pa:
	xor	eax, eax
$LN19@XzBlock_Pa:
; Line 571
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@XzBlock_Pa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN28@XzBlock_Pa:
	DD	1
	DD	$LN27@XzBlock_Pa
$LN27@XzBlock_Pa:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN26@XzBlock_Pa
$LN26@XzBlock_Pa:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_XzBlock_Parse@8 ENDP
_TEXT	ENDS
PUBLIC	_XzDec_Init@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv162 = -48						; size = 4
tv161 = -44						; size = 4
tv160 = -40						; size = 4
tv159 = -36						; size = 4
___result__$4493 = -32					; size = 4
_sc$4492 = -28						; size = 4
_f$4491 = -24						; size = 4
___result__$4486 = -20					; size = 4
_f$4485 = -16						; size = 4
_numFilters$ = -12					; size = 4
_needReInit$ = -8					; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_block$ = 12						; size = 4
_XzDec_Init@8 PROC
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 576
	mov	DWORD PTR _needReInit$[ebp], 1
; Line 577
	mov	eax, DWORD PTR _block$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	and	ecx, 3
	add	ecx, 1
	mov	DWORD PTR _numFilters$[ebp], ecx
; Line 579
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numFilters$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN14@XzDec_Init
; Line 581
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@XzDec_Init
$LN12@XzDec_Init:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@XzDec_Init:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numFilters$[ebp]
	jae	SHORT $LN11@XzDec_Init
; Line 582
	mov	eax, DWORD PTR _numFilters$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	DWORD PTR tv159[ebp], edx
	mov	DWORD PTR tv160[ebp], ecx
	mov	DWORD PTR tv161[ebp], esi
	mov	DWORD PTR tv162[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	edx, DWORD PTR tv162[ebp]
	mov	esi, DWORD PTR tv161[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+48]
	cmp	eax, DWORD PTR [esi+edx+24]
	jne	SHORT $LN17@XzDec_Init
	mov	ecx, DWORD PTR tv160[ebp]
	mov	edx, DWORD PTR tv159[ebp]
	mov	eax, DWORD PTR tv162[ebp]
	mov	esi, DWORD PTR tv161[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+52]
	cmp	ecx, DWORD PTR [esi+eax+28]
	je	SHORT $LN10@XzDec_Init
$LN17@XzDec_Init:
; Line 583
	jmp	SHORT $LN11@XzDec_Init
$LN10@XzDec_Init:
; Line 584
	jmp	SHORT $LN12@XzDec_Init
$LN11@XzDec_Init:
	mov	edx, DWORD PTR _i$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _numFilters$[ebp]
	setne	al
	mov	DWORD PTR _needReInit$[ebp], eax
$LN14@XzDec_Init:
; Line 587
	cmp	DWORD PTR _needReInit$[ebp], 0
	je	SHORT $LN9@XzDec_Init
; Line 589
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MixCoder_Free@4
; Line 590
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numFilters$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 591
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@XzDec_Init
$LN7@XzDec_Init:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@XzDec_Init:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numFilters$[ebp]
	jae	SHORT $LN9@XzDec_Init
; Line 593
	mov	eax, DWORD PTR _numFilters$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _f$4485[ebp], edx
; Line 594
	mov	eax, DWORD PTR _f$4485[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MixCoder_SetFromMethod@16
	mov	DWORD PTR ___result__$4486[ebp], eax
	cmp	DWORD PTR ___result__$4486[ebp], 0
	je	SHORT $LN5@XzDec_Init
	mov	eax, DWORD PTR ___result__$4486[ebp]
	jmp	$LN15@XzDec_Init
$LN5@XzDec_Init:
; Line 595
	jmp	SHORT $LN7@XzDec_Init
$LN9@XzDec_Init:
; Line 598
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@XzDec_Init
$LN3@XzDec_Init:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@XzDec_Init:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFilters$[ebp]
	jae	SHORT $LN2@XzDec_Init
; Line 600
	mov	ecx, DWORD PTR _numFilters$[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _block$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	mov	DWORD PTR _f$4491[ebp], eax
; Line 601
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR _sc$4492[ebp], eax
; Line 602
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _f$4491[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _f$4491[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _sc$4492[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sc$4492[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$4493[ebp], eax
	cmp	DWORD PTR ___result__$4493[ebp], 0
	je	SHORT $LN1@XzDec_Init
	mov	eax, DWORD PTR ___result__$4493[ebp]
	jmp	SHORT $LN15@XzDec_Init
$LN1@XzDec_Init:
; Line 603
	jmp	SHORT $LN3@XzDec_Init
$LN2@XzDec_Init:
; Line 605
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MixCoder_Init@4
; Line 606
	xor	eax, eax
$LN15@XzDec_Init:
; Line 607
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_XzDec_Init@8 ENDP
_TEXT	ENDS
PUBLIC	_XzUnpacker_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_XzUnpacker_Init@4 PROC
; Line 610
	push	ebp
	mov	ebp, esp
; Line 611
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 612
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 613
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], 0
	mov	DWORD PTR [edx+76], 0
; Line 614
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	DWORD PTR [eax+84], 0
; Line 615
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+88], 0
	mov	DWORD PTR [ecx+92], 0
; Line 616
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	DWORD PTR [edx+68], 0
; Line 617
	pop	ebp
	ret	4
_XzUnpacker_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_XzUnpacker_Construct@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_XzUnpacker_Construct@8 PROC
; Line 620
	push	ebp
	mov	ebp, esp
; Line 621
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 104				; 00000068H
	push	ecx
	call	_MixCoder_Construct@8
; Line 622
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_XzUnpacker_Init@4
; Line 623
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_XzUnpacker_Construct@8 ENDP
_TEXT	ENDS
PUBLIC	_XzUnpacker_Free@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_XzUnpacker_Free@4 PROC
; Line 626
	push	ebp
	mov	ebp, esp
; Line 627
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_MixCoder_Free@4
; Line 628
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_XzUnpacker_Free@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_XzUnpacker_Code@28
EXTRN	_g_CrcTable:BYTE
EXTRN	_memcmp:PROC
EXTRN	_XzCheck_Final@8:PROC
EXTRN	_XzCheck_Init@8:PROC
EXTRN	@CrcUpdate@12:PROC
EXTRN	_Sha256_Final@8:PROC
EXTRN	_Sha256_Init@4:PROC
EXTRN	_XZ_SIG:FWORD
EXTRN	_Sha256_Update@12:PROC
EXTRN	_Xz_WriteVarInt@12:PROC
EXTRN	_XzFlags_GetCheckSize@4:PROC
EXTRN	_XzCheck_Update@12:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv852 = -288						; size = 8
tv820 = -280						; size = 8
tv800 = -272						; size = 4
tv799 = -268						; size = 4
tv349 = -264						; size = 4
tv303 = -260						; size = 4
tv745 = -256						; size = 8
tv165 = -248						; size = 4
_cur$4598 = -244					; size = 4
_digest$4589 = -236					; size = 32
_b$4586 = -197						; size = 1
_cur$4581 = -196					; size = 8
_digest$4574 = -184					; size = 64
_cur$4569 = -116					; size = 4
_checkSize$4568 = -112					; size = 4
___result__$4562 = -108					; size = 4
___result__$4560 = -104					; size = 4
_cur$4556 = -100					; size = 4
___result__$4548 = -96					; size = 4
_num$4536 = -92						; size = 4
_temp$4535 = -84					; size = 32
___result__$4532 = -48					; size = 4
_res$4530 = -44						; size = 4
_srcLen2$4529 = -36					; size = 4
_destLen2$4528 = -24					; size = 4
_srcRem$4526 = -16					; size = 4
_srcLenOrig$ = -12					; size = 4
_destLenOrig$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_dest$ = 12						; size = 4
_destLen$ = 16						; size = 4
_src$ = 20						; size = 4
_srcLen$ = 24						; size = 4
_finishMode$ = 28					; size = 4
_status$ = 32						; size = 4
_XzUnpacker_Code@28 PROC
; Line 632
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 633
	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _destLenOrig$[ebp], ecx
; Line 634
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _srcLenOrig$[ebp], eax
; Line 635
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 636
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], 0
; Line 637
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN57@XzUnpacker:
; Line 640
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR _srcLenOrig$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _srcRem$4526[ebp], edx
; Line 642
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 6
	jne	$LN55@XzUnpacker
; Line 644
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	edx, DWORD PTR _destLenOrig$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _destLen2$4528[ebp], edx
; Line 645
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR _srcLenOrig$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _srcLen2$4529[ebp], ecx
; Line 647
	jne	SHORT $LN54@XzUnpacker
	cmp	DWORD PTR _destLen2$4528[ebp], 0
	jne	SHORT $LN54@XzUnpacker
; Line 649
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], 2
; Line 650
	xor	eax, eax
	jmp	$LN58@XzUnpacker
$LN54@XzUnpacker:
; Line 653
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _finishMode$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _srcLen2$4529[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destLen2$4528[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_MixCoder_Code@32
	mov	DWORD PTR _res$4530[ebp], eax
; Line 654
	mov	ecx, DWORD PTR _destLen2$4528[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	call	_XzCheck_Update@12
; Line 656
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _srcLen2$4529[ebp]
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], edx
; Line 657
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR _srcLen2$4529[ebp]
	mov	DWORD PTR _src$[ebp], ecx
; Line 658
	mov	edx, DWORD PTR _srcLen2$4529[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
; Line 660
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _destLen2$4528[ebp]
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 661
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _destLen2$4528[ebp]
	mov	DWORD PTR _dest$[ebp], edx
; Line 662
	mov	eax, DWORD PTR _destLen2$4528[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+32]
	adc	ecx, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], ecx
; Line 664
	mov	eax, DWORD PTR _res$4530[ebp]
	mov	DWORD PTR ___result__$4532[ebp], eax
	cmp	DWORD PTR ___result__$4532[ebp], 0
	je	SHORT $LN53@XzUnpacker
	mov	eax, DWORD PTR ___result__$4532[ebp]
	jmp	$LN58@XzUnpacker
$LN53@XzUnpacker:
; Line 666
	mov	ecx, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	$LN52@XzUnpacker
; Line 669
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR [edx+20]
	xor	edi, edi
	mov	eax, DWORD PTR _p$[ebp]
	add	esi, DWORD PTR [eax+24]
	adc	edi, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	push	edx
	call	_XzFlags_GetCheckSize@4
	xor	ecx, ecx
	add	esi, eax
	adc	edi, ecx
	push	edi
	push	esi
	lea	edx, DWORD PTR _temp$4535[ebp]
	push	edx
	call	_Xz_WriteVarInt@12
	mov	DWORD PTR _num$4536[ebp], eax
; Line 670
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _num$4536[ebp]
	lea	ecx, DWORD PTR _temp$4535[ebp+eax]
	push	ecx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _num$4536[ebp]
	mov	DWORD PTR _num$4536[ebp], eax
; Line 671
	mov	edx, DWORD PTR _num$4536[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$4535[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 536				; 00000218H
	push	ecx
	call	_Sha256_Update@12
; Line 672
	mov	edx, DWORD PTR _num$4536[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 673
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+44]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	DWORD PTR [edx+44], ecx
; Line 675
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 7
; Line 676
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 677
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 0
	jmp	SHORT $LN51@XzUnpacker
$LN52@XzUnpacker:
; Line 679
	cmp	DWORD PTR _srcLen2$4529[ebp], 0
	jne	SHORT $LN51@XzUnpacker
	cmp	DWORD PTR _destLen2$4528[ebp], 0
	jne	SHORT $LN51@XzUnpacker
; Line 680
	xor	eax, eax
	jmp	$LN58@XzUnpacker
$LN51@XzUnpacker:
; Line 682
	jmp	$LN57@XzUnpacker
$LN55@XzUnpacker:
; Line 685
	cmp	DWORD PTR _srcRem$4526[ebp], 0
	jne	SHORT $LN49@XzUnpacker
; Line 687
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 3
; Line 688
	xor	eax, eax
	jmp	$LN58@XzUnpacker
$LN49@XzUnpacker:
; Line 691
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv165[ebp], edx
	cmp	DWORD PTR tv165[ebp], 7
	ja	$LN47@XzUnpacker
	mov	eax, DWORD PTR tv165[ebp]
	jmp	DWORD PTR $LN74@XzUnpacker[eax*4]
$LN46@XzUnpacker:
; Line 695
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 12			; 0000000cH
	jae	SHORT $LN45@XzUnpacker
; Line 697
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], 6
	jae	SHORT $LN44@XzUnpacker
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	edx, BYTE PTR _XZ_SIG[eax]
	cmp	ecx, edx
	je	SHORT $LN44@XzUnpacker
; Line 698
	mov	eax, 17					; 00000011H
	jmp	$LN58@XzUnpacker
$LN44@XzUnpacker:
; Line 699
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+672], al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 700
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 702
	jmp	$LN43@XzUnpacker
$LN45@XzUnpacker:
; Line 704
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 672				; 000002a0H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_Xz_ParseHeader@8
	mov	DWORD PTR ___result__$4548[ebp], eax
	cmp	DWORD PTR ___result__$4548[ebp], 0
	je	SHORT $LN42@XzUnpacker
	mov	eax, DWORD PTR ___result__$4548[ebp]
	jmp	$LN58@XzUnpacker
$LN42@XzUnpacker:
; Line 705
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+76]
	adc	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	DWORD PTR [ecx+76], eax
; Line 706
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 5
; Line 707
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	call	_Sha256_Init@4
; Line 708
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
; Line 709
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
; Line 710
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN43@XzUnpacker:
; Line 712
	jmp	$LN47@XzUnpacker
$LN41@XzUnpacker:
; Line 717
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN40@XzUnpacker
; Line 719
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax+672], dl
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 720
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], edx
; Line 721
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+672]
	test	edx, edx
	jne	$LN39@XzUnpacker
; Line 723
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 673				; 000002a1H
	push	eax
	call	_Xz_WriteVarInt@12
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 724
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	DWORD PTR [edx+60], ecx
; Line 725
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 726
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 640				; 00000280H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 536				; 00000218H
	push	edx
	call	_Sha256_Final@8
; Line 727
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	call	_Sha256_Init@4
; Line 728
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 672				; 000002a0H
	or	ecx, -1
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 729
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 1
$LN39@XzUnpacker:
; Line 731
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+672]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	jmp	$LN38@XzUnpacker
$LN40@XzUnpacker:
; Line 733
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+20]
	je	SHORT $LN37@XzUnpacker
; Line 735
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$4556[ebp], eax
; Line 736
	mov	ecx, DWORD PTR _cur$4556[ebp]
	cmp	ecx, DWORD PTR _srcRem$4526[ebp]
	jbe	SHORT $LN36@XzUnpacker
; Line 737
	mov	edx, DWORD PTR _srcRem$4526[ebp]
	mov	DWORD PTR _cur$4556[ebp], edx
$LN36@XzUnpacker:
; Line 738
	mov	eax, DWORD PTR _cur$4556[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+672]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 739
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _cur$4556[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 740
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _cur$4556[ebp]
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 741
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _cur$4556[ebp]
	mov	DWORD PTR _src$[ebp], eax
; Line 743
	jmp	$LN38@XzUnpacker
$LN37@XzUnpacker:
; Line 745
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 672				; 000002a0H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	call	_XzBlock_Parse@8
	mov	DWORD PTR ___result__$4560[ebp], eax
	cmp	DWORD PTR ___result__$4560[ebp], 0
	je	SHORT $LN34@XzUnpacker
	mov	eax, DWORD PTR ___result__$4560[ebp]
	jmp	$LN58@XzUnpacker
$LN34@XzUnpacker:
; Line 746
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+92]
	adc	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
; Line 747
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 6
; Line 748
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
; Line 749
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 750
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	and	edx, 15					; 0000000fH
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	call	_XzCheck_Init@8
; Line 751
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	call	_XzDec_Init@8
	mov	DWORD PTR ___result__$4562[ebp], eax
	cmp	DWORD PTR ___result__$4562[ebp], 0
	je	SHORT $LN38@XzUnpacker
	mov	eax, DWORD PTR ___result__$4562[ebp]
	jmp	$LN58@XzUnpacker
$LN38@XzUnpacker:
; Line 753
	jmp	$LN47@XzUnpacker
$LN32@XzUnpacker:
; Line 758
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+24]
	adc	edx, DWORD PTR [eax+28]
	and	ecx, 3
	and	edx, 0
	mov	DWORD PTR tv745[ebp], ecx
	mov	DWORD PTR tv745[ebp+4], edx
	mov	ecx, DWORD PTR tv745[ebp]
	or	ecx, DWORD PTR tv745[ebp+4]
	je	SHORT $LN31@XzUnpacker
; Line 760
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 761
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 762
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	test	eax, eax
	je	SHORT $LN60@XzUnpacker
	mov	DWORD PTR tv303[ebp], 1
	jmp	SHORT $LN61@XzUnpacker
$LN60@XzUnpacker:
	mov	DWORD PTR tv303[ebp], 0
$LN61@XzUnpacker:
	cmp	DWORD PTR tv303[ebp], 0
	je	SHORT $LN30@XzUnpacker
; Line 763
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN30@XzUnpacker:
; Line 765
	jmp	$LN29@XzUnpacker
$LN31@XzUnpacker:
; Line 767
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+16]
	push	eax
	call	_XzFlags_GetCheckSize@4
	mov	DWORD PTR _checkSize$4568[ebp], eax
; Line 768
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _checkSize$4568[ebp]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$4569[ebp], edx
; Line 769
	je	SHORT $LN28@XzUnpacker
; Line 771
	mov	eax, DWORD PTR _cur$4569[ebp]
	cmp	eax, DWORD PTR _srcRem$4526[ebp]
	jbe	SHORT $LN27@XzUnpacker
; Line 772
	mov	ecx, DWORD PTR _srcRem$4526[ebp]
	mov	DWORD PTR _cur$4569[ebp], ecx
$LN27@XzUnpacker:
; Line 773
	mov	edx, DWORD PTR _cur$4569[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+672]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 774
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _cur$4569[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 775
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur$4569[ebp]
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 776
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _cur$4569[ebp]
	mov	DWORD PTR _src$[ebp], edx
; Line 778
	jmp	SHORT $LN29@XzUnpacker
$LN28@XzUnpacker:
; Line 781
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 5
; Line 782
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 783
	lea	edx, DWORD PTR _digest$4574[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	call	_XzCheck_Final@8
	test	eax, eax
	je	SHORT $LN29@XzUnpacker
	mov	ecx, DWORD PTR _checkSize$4568[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 672				; 000002a0H
	push	edx
	lea	eax, DWORD PTR _digest$4574[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN29@XzUnpacker
; Line 784
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN29@XzUnpacker:
; Line 787
	jmp	$LN47@XzUnpacker
$LN24@XzUnpacker:
; Line 792
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN23@XzUnpacker
; Line 794
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], edx
; Line 795
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+672]
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+4]
	add	edx, 1
	mov	esi, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+4], edx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
	cmp	eax, ecx
	je	SHORT $LN62@XzUnpacker
	mov	DWORD PTR tv349[ebp], 1
	jmp	SHORT $LN63@XzUnpacker
$LN62@XzUnpacker:
	mov	DWORD PTR tv349[ebp], 0
$LN63@XzUnpacker:
	cmp	DWORD PTR tv349[ebp], 0
	je	SHORT $LN22@XzUnpacker
; Line 796
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN22@XzUnpacker:
; Line 798
	jmp	$LN21@XzUnpacker
$LN23@XzUnpacker:
; Line 800
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv799[ebp], eax
	mov	DWORD PTR tv800[ebp], ecx
	mov	edx, DWORD PTR tv799[ebp]
	mov	eax, DWORD PTR tv800[ebp]
	mov	ecx, DWORD PTR [edx+60]
	cmp	ecx, DWORD PTR [eax+52]
	ja	$LN20@XzUnpacker
	jb	SHORT $LN65@XzUnpacker
	mov	edx, DWORD PTR tv799[ebp]
	mov	eax, DWORD PTR tv800[ebp]
	mov	ecx, DWORD PTR [edx+56]
	cmp	ecx, DWORD PTR [eax+48]
	jae	$LN20@XzUnpacker
$LN65@XzUnpacker:
; Line 802
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	sub	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx+52]
	sbb	edx, DWORD PTR [eax+60]
	mov	DWORD PTR _cur$4581[ebp], ecx
	mov	DWORD PTR _cur$4581[ebp+4], edx
; Line 803
	mov	eax, DWORD PTR _srcRem$4526[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv820[ebp], eax
	mov	DWORD PTR tv820[ebp+4], ecx
	mov	edx, DWORD PTR tv820[ebp+4]
	cmp	edx, DWORD PTR _cur$4581[ebp+4]
	jb	SHORT $LN19@XzUnpacker
	ja	SHORT $LN66@XzUnpacker
	mov	eax, DWORD PTR tv820[ebp]
	cmp	eax, DWORD PTR _cur$4581[ebp]
	jbe	SHORT $LN19@XzUnpacker
$LN66@XzUnpacker:
; Line 804
	mov	ecx, DWORD PTR _cur$4581[ebp]
	mov	DWORD PTR _srcRem$4526[ebp], ecx
$LN19@XzUnpacker:
; Line 805
	mov	edx, DWORD PTR _srcRem$4526[ebp]
	push	edx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 806
	mov	edx, DWORD PTR _srcRem$4526[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 536				; 00000218H
	push	ecx
	call	_Sha256_Update@12
; Line 807
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _srcRem$4526[ebp]
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 808
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _srcRem$4526[ebp]
	mov	DWORD PTR _src$[ebp], edx
; Line 809
	mov	eax, DWORD PTR _srcRem$4526[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+56]
	adc	ecx, DWORD PTR [edx+60]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	DWORD PTR [edx+60], ecx
	jmp	$LN21@XzUnpacker
$LN20@XzUnpacker:
; Line 811
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	and	ecx, 3
	mov	edx, DWORD PTR [eax+60]
	and	edx, 0
	mov	DWORD PTR tv852[ebp], ecx
	mov	DWORD PTR tv852[ebp+4], edx
	mov	eax, DWORD PTR tv852[ebp]
	or	eax, DWORD PTR tv852[ebp+4]
	je	$LN17@XzUnpacker
; Line 813
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _b$4586[ebp], dl
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 814
	movzx	ecx, BYTE PTR _b$4586[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	xor	ecx, DWORD PTR [edx+96]
	and	ecx, 255				; 000000ffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+96]
	shr	edx, 8
	xor	edx, DWORD PTR _g_CrcTable[ecx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+96], edx
; Line 815
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], edx
; Line 816
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+60]
	adc	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax
; Line 817
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+52]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	DWORD PTR [edx+52], ecx
; Line 818
	movzx	eax, BYTE PTR _b$4586[ebp]
	test	eax, eax
	je	SHORT $LN16@XzUnpacker
; Line 819
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN16@XzUnpacker:
; Line 821
	jmp	SHORT $LN21@XzUnpacker
$LN17@XzUnpacker:
; Line 824
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 2
; Line 825
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+52]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	DWORD PTR [edx+52], ecx
; Line 826
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 827
	lea	ecx, DWORD PTR _digest$4589[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 536				; 00000218H
	push	edx
	call	_Sha256_Final@8
; Line 828
	push	32					; 00000020H
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 640				; 00000280H
	push	eax
	lea	ecx, DWORD PTR _digest$4589[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN21@XzUnpacker
; Line 829
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN21@XzUnpacker:
; Line 832
	jmp	$LN47@XzUnpacker
$LN13@XzUnpacker:
; Line 837
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], 4
	jae	SHORT $LN12@XzUnpacker
; Line 839
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 840
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+672], al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 842
	jmp	SHORT $LN11@XzUnpacker
$LN12@XzUnpacker:
; Line 844
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 3
; Line 845
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 846
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	xor	edx, -1
	mov	eax, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR [eax+672]
	je	SHORT $LN11@XzUnpacker
; Line 847
	mov	eax, 3
	jmp	$LN58@XzUnpacker
$LN11@XzUnpacker:
; Line 849
	jmp	$LN47@XzUnpacker
$LN9@XzUnpacker:
; Line 854
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 12					; 0000000cH
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$4598[ebp], edx
; Line 855
	mov	eax, DWORD PTR _cur$4598[ebp]
	cmp	eax, DWORD PTR _srcRem$4526[ebp]
	jbe	SHORT $LN8@XzUnpacker
; Line 856
	mov	ecx, DWORD PTR _srcRem$4526[ebp]
	mov	DWORD PTR _cur$4598[ebp], ecx
$LN8@XzUnpacker:
; Line 857
	mov	edx, DWORD PTR _cur$4598[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+672]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 858
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _cur$4598[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 859
	mov	edx, DWORD PTR _srcLen$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur$4598[ebp]
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 860
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _cur$4598[ebp]
	mov	DWORD PTR _src$[ebp], edx
; Line 861
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 12			; 0000000cH
	jne	SHORT $LN7@XzUnpacker
; Line 863
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 4
; Line 864
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+80]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+84]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+80], eax
	mov	DWORD PTR [edx+84], ecx
; Line 865
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0
; Line 866
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 672				; 000002a0H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+16]
	push	eax
	call	_Xz_CheckFooter@16
	test	eax, eax
	jne	SHORT $LN7@XzUnpacker
; Line 867
	mov	eax, 3
	jmp	SHORT $LN58@XzUnpacker
$LN7@XzUnpacker:
; Line 869
	jmp	SHORT $LN47@XzUnpacker
$LN5@XzUnpacker:
; Line 874
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@XzUnpacker
; Line 876
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	and	ecx, 3
	je	SHORT $LN3@XzUnpacker
; Line 877
	mov	eax, 17					; 00000011H
	jmp	SHORT $LN58@XzUnpacker
$LN3@XzUnpacker:
; Line 878
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 879
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 881
	jmp	SHORT $LN47@XzUnpacker
$LN4@XzUnpacker:
; Line 883
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax], edx
; Line 884
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 885
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+64]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+68]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	DWORD PTR [edx+68], ecx
$LN47@XzUnpacker:
; Line 892
	jmp	$LN57@XzUnpacker
$LN58@XzUnpacker:
; Line 898
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN73@XzUnpacker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN73@XzUnpacker:
	DD	5
	DD	$LN72@XzUnpacker
$LN72@XzUnpacker:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN67@XzUnpacker
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN68@XzUnpacker
	DD	-84					; ffffffacH
	DD	32					; 00000020H
	DD	$LN69@XzUnpacker
	DD	-184					; ffffff48H
	DD	64					; 00000040H
	DD	$LN70@XzUnpacker
	DD	-236					; ffffff14H
	DD	32					; 00000020H
	DD	$LN71@XzUnpacker
$LN71@XzUnpacker:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN70@XzUnpacker:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN69@XzUnpacker:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN68@XzUnpacker:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	50					; 00000032H
	DB	0
$LN67@XzUnpacker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	50					; 00000032H
	DB	0
$LN74@XzUnpacker:
	DD	$LN46@XzUnpacker
	DD	$LN24@XzUnpacker
	DD	$LN13@XzUnpacker
	DD	$LN9@XzUnpacker
	DD	$LN5@XzUnpacker
	DD	$LN41@XzUnpacker
	DD	$LN47@XzUnpacker
	DD	$LN32@XzUnpacker
_XzUnpacker_Code@28 ENDP
_TEXT	ENDS
EXTRN	_XZ_FOOTER_SIG:WORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv92 = -12						; size = 4
tv140 = -8						; size = 8
_flags$ = 8						; size = 2
_indexSize$ = 12					; size = 8
_buf$ = 20						; size = 4
_Xz_CheckFooter@16 PROC
; Line 507
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 512
	mov	eax, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [eax+4]
	xor	edx, edx
	add	eax, 1
	adc	edx, 0
	mov	cl, 2
	call	__allshl
	mov	DWORD PTR tv140[ebp], eax
	mov	DWORD PTR tv140[ebp+4], edx
	mov	ecx, DWORD PTR _indexSize$[ebp]
	cmp	ecx, DWORD PTR tv140[ebp]
	jne	SHORT $LN3@Xz_CheckFo
	mov	edx, DWORD PTR _indexSize$[ebp+4]
	cmp	edx, DWORD PTR tv140[ebp+4]
	jne	SHORT $LN3@Xz_CheckFo
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 4
	mov	edx, 6
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN3@Xz_CheckFo
	movzx	edx, WORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	shl	ecx, 8
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	or	ecx, eax
	movzx	ecx, cx
	cmp	edx, ecx
	jne	SHORT $LN3@Xz_CheckFo
	push	2
	push	OFFSET _XZ_FOOTER_SIG
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@Xz_CheckFo
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN4@Xz_CheckFo
$LN3@Xz_CheckFo:
	mov	DWORD PTR tv92[ebp], 0
$LN4@Xz_CheckFo:
	mov	eax, DWORD PTR tv92[ebp]
; Line 513
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_Xz_CheckFooter@16 ENDP
_TEXT	ENDS
PUBLIC	_XzUnpacker_IsStreamWasFinished@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_p$ = 8							; size = 4
_XzUnpacker_IsStreamWasFinished@4 PROC
; Line 901
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 902
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN3@XzUnpacker@2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	and	edx, 3
	jne	SHORT $LN3@XzUnpacker@2
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@XzUnpacker@2
$LN3@XzUnpacker@2:
	mov	DWORD PTR tv69[ebp], 0
$LN4@XzUnpacker@2:
	mov	eax, DWORD PTR tv69[ebp]
; Line 903
	mov	esp, ebp
	pop	ebp
	ret	4
_XzUnpacker_IsStreamWasFinished@4 ENDP
_TEXT	ENDS
PUBLIC	_XzUnpacker_GetExtraSize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -8						; size = 8
_p$ = 8							; size = 4
_XzUnpacker_GetExtraSize@4 PROC
; Line 906
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 907
	mov	DWORD PTR _num$[ebp], 0
	mov	DWORD PTR _num$[ebp+4], 0
; Line 908
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN3@XzUnpacker@3
; Line 909
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _num$[ebp]
	add	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _num$[ebp+4]
	adc	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR _num$[ebp], edx
	mov	DWORD PTR _num$[ebp+4], eax
	jmp	SHORT $LN2@XzUnpacker@3
$LN3@XzUnpacker@3:
; Line 910
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@XzUnpacker@3
; Line 911
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+64]
	adc	ecx, DWORD PTR [edx+68]
	add	eax, DWORD PTR _num$[ebp]
	adc	ecx, DWORD PTR _num$[ebp+4]
	mov	DWORD PTR _num$[ebp], eax
	mov	DWORD PTR _num$[ebp+4], ecx
$LN2@XzUnpacker@3:
; Line 912
	mov	eax, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _num$[ebp+4]
; Line 913
	mov	esp, ebp
	pop	ebp
	ret	4
_XzUnpacker_GetExtraSize@4 ENDP
_TEXT	ENDS
END
