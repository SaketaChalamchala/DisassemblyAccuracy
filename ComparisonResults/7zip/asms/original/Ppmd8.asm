; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Ppmd8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PPMD8_kExpEscape
CONST	SEGMENT
_PPMD8_kExpEscape DB 019H
	DB	0eH
	DB	09H
	DB	07H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
_kInitBinEsc DW	03cddH
	DW	01f3fH
	DW	059bfH
	DW	048f3H
	DW	064a1H
	DW	05abcH
	DW	06632H
	DW	06051H
CONST	ENDS
PUBLIC	_Ppmd8_Construct@4
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\ppmd8.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv70 = -20						; size = 4
_step$2873 = -16					; size = 4
_m$ = -12						; size = 4
_k$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_Construct@4 PROC
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 65
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 67
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN13@Ppmd8_Cons
$LN12@Ppmd8_Cons:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@Ppmd8_Cons:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	SHORT $LN11@Ppmd8_Cons
; Line 69
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jb	SHORT $LN16@Ppmd8_Cons
	mov	DWORD PTR tv70[ebp], 4
	jmp	SHORT $LN17@Ppmd8_Cons
$LN16@Ppmd8_Cons:
	mov	edx, DWORD PTR _i$[ebp]
	shr	edx, 2
	add	edx, 1
	mov	DWORD PTR tv70[ebp], edx
$LN17@Ppmd8_Cons:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _step$2873[ebp], eax
$LN10@Ppmd8_Cons:
; Line 70
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _k$[ebp]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+126], dl
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _step$2873[ebp]
	sub	ecx, 1
	mov	DWORD PTR _step$2873[ebp], ecx
	jne	SHORT $LN10@Ppmd8_Cons
; Line 71
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _k$[ebp]
	mov	BYTE PTR [edx+88], al
; Line 72
	jmp	SHORT $LN12@Ppmd8_Cons
$LN11@Ppmd8_Cons:
; Line 74
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+560], 0
; Line 75
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+561], 2
; Line 76
	push	9
	push	4
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 562				; 00000232H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 77
	push	245					; 000000f5H
	push	6
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 571				; 0000023bH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 79
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Ppmd8_Cons
$LN6@Ppmd8_Cons:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@Ppmd8_Cons:
	cmp	DWORD PTR _i$[ebp], 5
	jae	SHORT $LN5@Ppmd8_Cons
; Line 80
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+816], cl
	jmp	SHORT $LN6@Ppmd8_Cons
$LN5@Ppmd8_Cons:
; Line 81
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _m$[ebp], edx
	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN4@Ppmd8_Cons
$LN3@Ppmd8_Cons:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Ppmd8_Cons:
	cmp	DWORD PTR _i$[ebp], 260			; 00000104H
	jae	SHORT $LN14@Ppmd8_Cons
; Line 83
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _m$[ebp]
	mov	BYTE PTR [ecx+816], dl
; Line 84
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jne	SHORT $LN1@Ppmd8_Cons
; Line 85
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$[ebp], ecx
	mov	edx, DWORD PTR _m$[ebp]
	sub	edx, 4
	mov	DWORD PTR _k$[ebp], edx
$LN1@Ppmd8_Cons:
; Line 86
	jmp	SHORT $LN3@Ppmd8_Cons
$LN14@Ppmd8_Cons:
; Line 87
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_Construct@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Free@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Ppmd8_Free@8 PROC
; Line 90
	push	ebp
	mov	ebp, esp
	push	esi
; Line 91
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 92
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 93
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 94
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Ppmd8_Free@8 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Alloc@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -4						; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_alloc$ = 16						; size = 4
_Ppmd8_Alloc@12 PROC
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 98
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN2@Ppmd8_Allo
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	edx, DWORD PTR _size$[ebp]
	je	SHORT $LN3@Ppmd8_Allo
$LN2@Ppmd8_Allo:
; Line 100
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd8_Free@8
; Line 103
	mov	edx, 4
	sub	edx, DWORD PTR _size$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 107
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, DWORD PTR _size$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR [eax+44], ecx
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN1@Ppmd8_Allo
; Line 108
	xor	eax, eax
	jmp	SHORT $LN4@Ppmd8_Allo
$LN1@Ppmd8_Allo:
; Line 109
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN3@Ppmd8_Allo:
; Line 111
	mov	eax, 1
$LN4@Ppmd8_Allo:
; Line 112
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Ppmd8_Alloc@12 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Init@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_maxOrder$ = 12						; size = 4
_restoreMethod$ = 16					; size = 4
_Ppmd8_Init@12 PROC
; Line 401
	push	ebp
	mov	ebp, esp
; Line 402
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _maxOrder$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 403
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _restoreMethod$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 404
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RestartModel@4
; Line 405
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1078], 7
; Line 406
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+1076], ax
; Line 407
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1079], 64			; 00000040H
; Line 408
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_Ppmd8_Init@12 ENDP
; Function compile flags: /Odtp /RTCsu
tv136 = -48						; size = 4
tv131 = -44						; size = 4
tv129 = -40						; size = 4
tv88 = -36						; size = 4
_s$3149 = -32						; size = 4
_dest$3136 = -28					; size = 4
_val$3134 = -24						; size = 2
_s$3123 = -20						; size = 4
_r$ = -16						; size = 4
_m$ = -12						; size = 4
_k$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_RestartModel@4 PROC
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 347
	push	152					; 00000098H
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 256				; 00000100H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 348
	push	152					; 00000098H
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 349
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 350
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 351
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	shr	eax, 3
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	imul	eax, 7
	imul	eax, 12					; 0000000cH
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	sub	ecx, eax
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR [edx+60], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [ecx+48], edx
; Line 352
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 354
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+12], eax
; Line 355
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+24], 12			; 0000000cH
	jae	SHORT $LN25@RestartMod
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN26@RestartMod
$LN25@RestartMod:
	mov	DWORD PTR tv129[ebp], 12		; 0000000cH
$LN26@RestartMod:
	mov	ecx, DWORD PTR tv129[ebp]
	neg	ecx
	sub	ecx, 1
	mov	DWORD PTR tv131[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 356
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 358
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR tv136[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [ecx], edx
; Line 359
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
; Line 360
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax], 255			; 000000ffH
; Line 361
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+1], 0
; Line 362
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 257				; 00000101H
	mov	WORD PTR [ecx+2], dx
; Line 363
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+8], edx
; Line 364
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1536				; 00000600H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 365
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+4], eax
; Line 366
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@RestartMod
$LN21@RestartMod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN22@RestartMod:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN20@RestartMod
; Line 368
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$3123[ebp], edx
; Line 369
	mov	ecx, DWORD PTR _s$3123[ebp]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 370
	mov	eax, DWORD PTR _s$3123[ebp]
	mov	BYTE PTR [eax+1], 1
; Line 371
	push	0
	mov	ecx, DWORD PTR _s$3123[ebp]
	push	ecx
	call	_SetSuccessor@8
; Line 372
	jmp	SHORT $LN21@RestartMod
$LN20@RestartMod:
; Line 374
	mov	DWORD PTR _m$[ebp], 0
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN19@RestartMod
$LN18@RestartMod:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN19@RestartMod:
	cmp	DWORD PTR _m$[ebp], 25			; 00000019H
	jae	$LN17@RestartMod
$LN16@RestartMod:
; Line 376
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+816]
	cmp	edx, DWORD PTR _m$[ebp]
	jne	SHORT $LN15@RestartMod
; Line 377
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN16@RestartMod
$LN15@RestartMod:
; Line 378
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN14@RestartMod
$LN13@RestartMod:
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN14@RestartMod:
	cmp	DWORD PTR _k$[ebp], 8
	jae	SHORT $LN12@RestartMod
; Line 380
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, WORD PTR _kInitBinEsc[edx*2]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	xor	edx, edx
	div	ecx
	mov	edx, 16384				; 00004000H
	sub	edx, eax
	mov	WORD PTR _val$3134[ebp], dx
; Line 381
	mov	eax, DWORD PTR _m$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4152]
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _dest$3136[ebp], ecx
; Line 382
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN11@RestartMod
$LN10@RestartMod:
	mov	edx, DWORD PTR _r$[ebp]
	add	edx, 8
	mov	DWORD PTR _r$[ebp], edx
$LN11@RestartMod:
	cmp	DWORD PTR _r$[ebp], 64			; 00000040H
	jae	SHORT $LN9@RestartMod
; Line 383
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _dest$3136[ebp]
	mov	dx, WORD PTR _val$3134[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	jmp	SHORT $LN10@RestartMod
$LN9@RestartMod:
; Line 384
	jmp	SHORT $LN13@RestartMod
$LN12@RestartMod:
; Line 385
	jmp	$LN18@RestartMod
$LN17@RestartMod:
; Line 387
	mov	DWORD PTR _m$[ebp], 0
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN8@RestartMod
$LN7@RestartMod:
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$[ebp], ecx
$LN8@RestartMod:
	cmp	DWORD PTR _m$[ebp], 24			; 00000018H
	jae	SHORT $LN23@RestartMod
$LN5@RestartMod:
; Line 389
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+819]
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 3
	cmp	eax, ecx
	jne	SHORT $LN4@RestartMod
; Line 390
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN5@RestartMod
$LN4@RestartMod:
; Line 391
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@RestartMod
$LN2@RestartMod:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN3@RestartMod:
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jae	SHORT $LN1@RestartMod
; Line 393
	mov	ecx, DWORD PTR _m$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1080]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _s$3149[ebp], edx
; Line 394
	mov	eax, DWORD PTR _s$3149[ebp]
	mov	BYTE PTR [eax+2], 3
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	lea	edx, DWORD PTR [ecx*8+40]
	mov	eax, DWORD PTR _s$3149[ebp]
	mov	WORD PTR [eax], dx
; Line 395
	mov	ecx, DWORD PTR _s$3149[ebp]
	mov	BYTE PTR [ecx+3], 7
; Line 396
	jmp	SHORT $LN2@RestartMod
$LN1@RestartMod:
; Line 397
	jmp	$LN7@RestartMod
$LN23@RestartMod:
; Line 398
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_RestartModel@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_v$ = 12						; size = 4
_SetSuccessor@8 PROC
; Line 336
	push	ebp
	mov	ebp, esp
; Line 337
	mov	eax, DWORD PTR _v$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 338
	mov	edx, DWORD PTR _v$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 339
	pop	ebp
	ret	8
_SetSuccessor@8 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_MakeEscFreq@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$3559 = -8						; size = 4
_see$ = -4						; size = 4
_p$ = 8							; size = 4
_numMasked1$ = 12					; size = 4
_escFreq$ = 16						; size = 4
_Ppmd8_MakeEscFreq@12 PROC
; Line 1037
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1039
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 255				; 000000ffH
	je	$LN2@Ppmd8_Make
; Line 1045
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+818]
	sub	ecx, 3
	shl	ecx, 7
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1080]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR [edx+2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	movzx	edx, BYTE PTR [edx]
	add	edx, 1
	imul	edx, 11					; 0000000bH
	cmp	edx, ecx
	sbb	ecx, ecx
	neg	ecx
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [ecx]
	add	ecx, DWORD PTR _numMasked1$[ebp]
	cmp	eax, ecx
	sbb	eax, eax
	neg	eax
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+1]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _see$[ebp], eax
; Line 1047
	mov	ecx, DWORD PTR _see$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _see$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sar	edx, cl
	mov	DWORD PTR _r$3559[ebp], edx
; Line 1048
	mov	ecx, DWORD PTR _see$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	edx, DWORD PTR _r$3559[ebp]
	mov	eax, DWORD PTR _see$[ebp]
	mov	WORD PTR [eax], dx
; Line 1049
	xor	ecx, ecx
	cmp	DWORD PTR _r$3559[ebp], 0
	sete	cl
	add	ecx, DWORD PTR _r$3559[ebp]
	mov	edx, DWORD PTR _escFreq$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1052
	jmp	SHORT $LN1@Ppmd8_Make
$LN2@Ppmd8_Make:
; Line 1054
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1076				; 00000434H
	mov	DWORD PTR _see$[ebp], eax
; Line 1055
	mov	ecx, DWORD PTR _escFreq$[ebp]
	mov	DWORD PTR [ecx], 1
$LN1@Ppmd8_Make:
; Line 1057
	mov	eax, DWORD PTR _see$[ebp]
; Line 1058
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Ppmd8_MakeEscFreq@12 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Update1@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_Update1@4 PROC
; Line 1073
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1074
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1075
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 1076
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	WORD PTR [eax+2], cx
; Line 1077
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax-5]
	cmp	edx, ecx
	jle	SHORT $LN2@Ppmd8_Upda
; Line 1079
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SwapStates@8
; Line 1080
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 6
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1081
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 124				; 0000007cH
	jle	SHORT $LN2@Ppmd8_Upda
; Line 1082
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Rescale@4
$LN2@Ppmd8_Upda:
; Line 1084
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_NextContext@4
; Line 1085
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_Update1@4 ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tmp$ = -12						; size = 6
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
_SwapStates@8 PROC
; Line 434
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 435
	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _tmp$[ebp+4], dx
; Line 436
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _t1$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
; Line 437
	mov	ecx, DWORD PTR _t2$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _tmp$[ebp+4]
	mov	WORD PTR [ecx+4], ax
; Line 438
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SwapStates
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@SwapStates:
	DD	1
	DD	$LN4@SwapStates
$LN4@SwapStates:
	DD	-12					; fffffff4H
	DD	6
	DD	$LN3@SwapStates
$LN3@SwapStates:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_SwapStates@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv205 = -92						; size = 4
_tmp$3535 = -84						; size = 6
_n1$3529 = -72						; size = 4
_n0$3528 = -68						; size = 4
_numStats$3527 = -64					; size = 4
_tmp$3521 = -56						; size = 6
_s1$3520 = -44						; size = 4
_tmp$3510 = -36						; size = 6
_s$ = -24						; size = 4
_stats$ = -20						; size = 4
_escFreq$ = -16						; size = 4
_sumFreq$ = -12						; size = 4
_adder$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Rescale@4 PROC
; Line 966
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 968
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _stats$[ebp], edx
; Line 969
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 971
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tmp$3510[ebp], eax
	mov	cx, WORD PTR [edx+4]
	mov	WORD PTR _tmp$3510[ebp+4], cx
; Line 972
	jmp	SHORT $LN21@Rescale
$LN20@Rescale:
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$[ebp], edx
$LN21@Rescale:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _stats$[ebp]
	je	SHORT $LN19@Rescale
; Line 973
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 6
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	jmp	SHORT $LN20@Rescale
$LN19@Rescale:
; Line 974
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _tmp$3510[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _tmp$3510[ebp+4]
	mov	WORD PTR [edx+4], cx
; Line 976
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	sub	ecx, eax
	mov	DWORD PTR _escFreq$[ebp], ecx
; Line 977
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 982
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+12], 0
	setne	dl
	mov	DWORD PTR _adder$[ebp], edx
; Line 983
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _adder$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 984
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _sumFreq$[ebp], ecx
; Line 986
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
$LN18@Rescale:
; Line 989
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 6
	mov	DWORD PTR _s$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _escFreq$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _escFreq$[ebp], edx
; Line 990
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _adder$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 991
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _sumFreq$[ebp]
	mov	DWORD PTR _sumFreq$[ebp], ecx
; Line 992
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx-5]
	cmp	eax, edx
	jle	SHORT $LN17@Rescale
; Line 994
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s1$3520[ebp], eax
; Line 995
	mov	ecx, DWORD PTR _s1$3520[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tmp$3521[ebp], edx
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR _tmp$3521[ebp+4], ax
$LN14@Rescale:
; Line 997
	mov	ecx, DWORD PTR _s1$3520[ebp]
	sub	ecx, 6
	mov	edx, DWORD PTR _s1$3520[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
; Line 998
	mov	edx, DWORD PTR _s1$3520[ebp]
	sub	edx, 6
	mov	DWORD PTR _s1$3520[ebp], edx
	mov	eax, DWORD PTR _s1$3520[ebp]
	cmp	eax, DWORD PTR _stats$[ebp]
	je	SHORT $LN12@Rescale
	movzx	ecx, BYTE PTR _tmp$3521[ebp+1]
	mov	edx, DWORD PTR _s1$3520[ebp]
	movzx	eax, BYTE PTR [edx-5]
	cmp	ecx, eax
	jg	SHORT $LN14@Rescale
$LN12@Rescale:
; Line 999
	mov	ecx, DWORD PTR _s1$3520[ebp]
	mov	edx, DWORD PTR _tmp$3521[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _tmp$3521[ebp+4]
	mov	WORD PTR [ecx+4], ax
$LN17@Rescale:
; Line 1002
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jne	$LN18@Rescale
; Line 1004
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	jne	$LN10@Rescale
; Line 1006
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _numStats$3527[ebp], eax
$LN9@Rescale:
; Line 1008
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN9@Rescale
; Line 1009
	mov	edx, DWORD PTR _escFreq$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _escFreq$[ebp], edx
; Line 1010
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], dl
; Line 1011
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN6@Rescale
; Line 1013
	mov	edx, DWORD PTR _stats$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tmp$3535[ebp], eax
	mov	cx, WORD PTR [edx+4]
	mov	WORD PTR _tmp$3535[ebp+4], cx
; Line 1014
	movzx	edx, BYTE PTR _tmp$3535[ebp+1]
	mov	eax, DWORD PTR _escFreq$[ebp]
	lea	eax, DWORD PTR [eax+edx*2-1]
	xor	edx, edx
	div	DWORD PTR _escFreq$[ebp]
	mov	BYTE PTR _tmp$3535[ebp+1], al
; Line 1015
	movzx	ecx, BYTE PTR _tmp$3535[ebp+1]
	cmp	ecx, 41					; 00000029H
	jle	SHORT $LN5@Rescale
; Line 1016
	mov	BYTE PTR _tmp$3535[ebp+1], 41		; 00000029H
$LN5@Rescale:
; Line 1017
	mov	edx, DWORD PTR _numStats$3527[ebp]
	add	edx, 2
	shr	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+125]
	push	ecx
	mov	edx, DWORD PTR _stats$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 1018
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+1]
	and	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _tmp$3535[ebp]
	xor	edx, edx
	cmp	ecx, 64					; 00000040H
	setge	dl
	lea	eax, DWORD PTR [eax+edx*8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+1], al
; Line 1019
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	DWORD PTR tv205[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv205[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR _tmp$3535[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _tmp$3535[ebp+4]
	mov	WORD PTR [ecx+4], ax
; Line 1020
	jmp	$LN22@Rescale
$LN6@Rescale:
; Line 1022
	mov	ecx, DWORD PTR _numStats$3527[ebp]
	add	ecx, 2
	shr	ecx, 1
	mov	DWORD PTR _n0$3528[ebp], ecx
; Line 1023
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, 2
	sar	ecx, 1
	mov	DWORD PTR _n1$3529[ebp], ecx
; Line 1024
	mov	edx, DWORD PTR _n0$3528[ebp]
	cmp	edx, DWORD PTR _n1$3529[ebp]
	je	SHORT $LN4@Rescale
; Line 1025
	mov	eax, DWORD PTR _n1$3529[ebp]
	push	eax
	mov	ecx, DWORD PTR _n0$3528[ebp]
	push	ecx
	mov	edx, DWORD PTR _stats$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ShrinkUnits@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
$LN4@Rescale:
; Line 1026
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+1]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+1], dl
; Line 1027
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	ecx, ecx
	cmp	edx, 64					; 00000040H
	setge	cl
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	movzx	edx, BYTE PTR [edx+1]
	or	edx, ecx
	mov	BYTE PTR [eax+1], dl
; Line 1028
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _i$[ebp], edx
$LN3@Rescale:
; Line 1029
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 6
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	eax, eax
	cmp	ecx, 64					; 00000040H
	setge	al
	shl	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR [ecx+1]
	or	ecx, eax
	mov	BYTE PTR [edx+1], cl
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jne	SHORT $LN3@Rescale
$LN10@Rescale:
; Line 1031
	mov	eax, DWORD PTR _sumFreq$[ebp]
	add	eax, DWORD PTR _escFreq$[ebp]
	mov	ecx, DWORD PTR _escFreq$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	WORD PTR [ecx+2], ax
; Line 1032
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+1]
	or	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+1], cl
; Line 1033
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx
$LN22@Rescale:
; Line 1034
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@Rescale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN28@Rescale:
	DD	3
	DD	$LN27@Rescale
$LN27@Rescale:
	DD	-36					; ffffffdcH
	DD	6
	DD	$LN24@Rescale
	DD	-56					; ffffffc8H
	DD	6
	DD	$LN25@Rescale
	DD	-84					; ffffffacH
	DD	6
	DD	$LN26@Rescale
$LN26@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN25@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN24@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_Rescale@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_node$ = 12						; size = 4
_indx$ = 16						; size = 4
_InsertNode@12 PROC
; Line 115
	push	ebp
	mov	ebp, esp
; Line 116
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], -1
; Line 117
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _indx$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+256]
	mov	DWORD PTR [ecx+4], edx
; Line 118
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _indx$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 119
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+eax*4+256], edx
; Line 120
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+408]
	add	edx, 1
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+408], edx
; Line 121
	pop	ebp
	ret	12					; 0000000cH
_InsertNode@12 ENDP
; Function compile flags: /Odtp /RTCsu
_n$3025 = -24						; size = 4
_s$3023 = -20						; size = 4
_d$3021 = -16						; size = 4
_ptr$3020 = -12						; size = 4
_i1$ = -8						; size = 4
_i0$ = -4						; size = 4
_p$ = 8							; size = 4
_oldPtr$ = 12						; size = 4
_oldNU$ = 16						; size = 4
_newNU$ = 20						; size = 4
_ShrinkUnits@16 PROC
; Line 247
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 248
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _oldNU$[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	mov	DWORD PTR _i0$[ebp], ecx
; Line 249
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _newNU$[ebp]
	movzx	eax, BYTE PTR [edx+125]
	mov	DWORD PTR _i1$[ebp], eax
; Line 250
	mov	ecx, DWORD PTR _i0$[ebp]
	cmp	ecx, DWORD PTR _i1$[ebp]
	jne	SHORT $LN5@ShrinkUnit
; Line 251
	mov	eax, DWORD PTR _oldPtr$[ebp]
	jmp	$LN6@ShrinkUnit
$LN5@ShrinkUnit:
; Line 252
	mov	edx, DWORD PTR _i1$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx*4+256], 0
	je	SHORT $LN4@ShrinkUnit
; Line 254
	mov	ecx, DWORD PTR _i1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	mov	DWORD PTR _ptr$3020[ebp], eax
; Line 255
	mov	eax, DWORD PTR _ptr$3020[ebp]
	mov	DWORD PTR _d$3021[ebp], eax
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	mov	DWORD PTR _s$3023[ebp], ecx
	mov	edx, DWORD PTR _newNU$[ebp]
	mov	DWORD PTR _n$3025[ebp], edx
$LN3@ShrinkUnit:
	mov	eax, DWORD PTR _d$3021[ebp]
	mov	ecx, DWORD PTR _s$3023[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _d$3021[ebp]
	mov	ecx, DWORD PTR _s$3023[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _d$3021[ebp]
	mov	ecx, DWORD PTR _s$3023[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _s$3023[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$3023[ebp], eax
	mov	ecx, DWORD PTR _d$3021[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _d$3021[ebp], ecx
	mov	edx, DWORD PTR _n$3025[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$3025[ebp], edx
	jne	SHORT $LN3@ShrinkUnit
; Line 256
	mov	eax, DWORD PTR _i0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
; Line 257
	mov	eax, DWORD PTR _ptr$3020[ebp]
	jmp	SHORT $LN6@ShrinkUnit
$LN4@ShrinkUnit:
; Line 259
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_SplitBlock@16
; Line 260
	mov	eax, DWORD PTR _oldPtr$[ebp]
$LN6@ShrinkUnit:
; Line 261
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ShrinkUnits@16 ENDP
; Function compile flags: /Odtp /RTCsu
_node$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_RemoveNode@8 PROC
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+256]
	mov	DWORD PTR _node$[ebp], edx
; Line 126
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4+256], edx
; Line 127
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+408]
	sub	edx, 1
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+408], edx
; Line 128
	mov	eax, DWORD PTR _node$[ebp]
; Line 129
	mov	esp, ebp
	pop	ebp
	ret	8
_RemoveNode@8 ENDP
; Function compile flags: /Odtp /RTCsu
_k$2939 = -12						; size = 4
_nu$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_ptr$ = 12						; size = 4
_oldIndx$ = 16						; size = 4
_newIndx$ = 20						; size = 4
_SplitBlock@16 PROC
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 133
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _oldIndx$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _newIndx$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	sub	ecx, eax
	mov	DWORD PTR _nu$[ebp], ecx
; Line 134
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _newIndx$[ebp]
	movzx	edx, BYTE PTR [ecx+88]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _ptr$[ebp], edx
; Line 135
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nu$[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	cmp	eax, DWORD PTR _nu$[ebp]
	je	SHORT $LN1@SplitBlock
; Line 137
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	mov	DWORD PTR _k$2939[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _nu$[ebp]
	sub	ecx, DWORD PTR _k$2939[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _k$2939[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
$LN1@SplitBlock:
; Line 140
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 141
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_SplitBlock@16 ENDP
; Function compile flags: /Odtp /RTCsu
_c$ = -4						; size = 4
_p$ = 8							; size = 4
_NextContext@4 PROC
; Line 1061
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1062
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [ecx+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
; Line 1063
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN2@NextContex
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [edx+60]
	jb	SHORT $LN2@NextContex
; Line 1064
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1065
	jmp	SHORT $LN3@NextContex
$LN2@NextContex:
; Line 1067
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_UpdateModel@4
; Line 1068
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN3@NextContex:
; Line 1070
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_NextContext@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv213 = -96						; size = 4
_s$3496 = -92						; size = 4
_s$3485 = -88						; size = 4
_n$3478 = -84						; size = 4
_s$3476 = -80						; size = 4
_d$3474 = -76						; size = 4
_oldPtr$3472 = -72					; size = 4
_ptr$3471 = -68						; size = 4
_i$3469 = -64						; size = 4
_oldNU$3468 = -60					; size = 4
_sf$3465 = -56						; size = 4
_cf$3464 = -52						; size = 4
_ns1$3463 = -48						; size = 4
_cs$3454 = -44						; size = 4
_cs$3448 = -40						; size = 4
_cs$3443 = -36						; size = 4
_s$ = -32						; size = 4
_fSymbol$ = -26						; size = 1
_flag$ = -25						; size = 1
_fFreq$ = -24						; size = 4
_ns$ = -20						; size = 4
_s0$ = -16						; size = 4
_c$ = -12						; size = 4
_fSuccessor$ = -8					; size = 4
_successor$ = -4					; size = 4
_p$ = 8							; size = 4
_UpdateModel@4 PROC
; Line 797
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 798
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [ecx+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _fSuccessor$[ebp], edx
; Line 800
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+1]
	mov	DWORD PTR _fFreq$[ebp], eax
; Line 801
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _fSymbol$[ebp], al
; Line 802
	mov	DWORD PTR _s$[ebp], 0
; Line 804
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 31					; 0000001fH
	jge	$LN36@UpdateMode
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	je	$LN36@UpdateMode
; Line 806
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 808
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN35@UpdateMode
; Line 810
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 811
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN34@UpdateMode
; Line 812
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx+1]
	add	al, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+1], al
$LN34@UpdateMode:
; Line 814
	jmp	$LN36@UpdateMode
$LN35@UpdateMode:
; Line 816
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$[ebp], eax
; Line 817
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx]
	cmp	edx, eax
	je	SHORT $LN32@UpdateMode
$LN31@UpdateMode:
; Line 819
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN31@UpdateMode
; Line 820
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx-5]
	cmp	eax, edx
	jl	SHORT $LN32@UpdateMode
; Line 822
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SwapStates@8
; Line 823
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$[ebp], edx
$LN32@UpdateMode:
; Line 826
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 115				; 00000073H
	jge	SHORT $LN36@UpdateMode
; Line 828
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, 2
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 829
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN36@UpdateMode:
; Line 834
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _c$[ebp], eax
; Line 835
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN26@UpdateMode
	cmp	DWORD PTR _fSuccessor$[ebp], 0
	je	SHORT $LN26@UpdateMode
; Line 837
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CreateSuccessors@16
	mov	DWORD PTR _cs$3443[ebp], eax
; Line 838
	cmp	DWORD PTR _cs$3443[ebp], 0
	jne	SHORT $LN25@UpdateMode
; Line 840
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_SetSuccessor@8
; Line 841
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestoreModel@8
; Line 843
	jmp	SHORT $LN24@UpdateMode
$LN25@UpdateMode:
; Line 845
	mov	ecx, DWORD PTR _cs$3443[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_SetSuccessor@8
; Line 846
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _cs$3443[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN24@UpdateMode:
; Line 848
	jmp	$LN37@UpdateMode
$LN26@UpdateMode:
; Line 851
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 852
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _successor$[ebp], eax
; Line 853
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, DWORD PTR [edx+60]
	jb	SHORT $LN23@UpdateMode
; Line 855
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RestoreModel@8
; Line 856
	jmp	$LN37@UpdateMode
$LN23@UpdateMode:
; Line 859
	cmp	DWORD PTR _fSuccessor$[ebp], 0
	jne	SHORT $LN22@UpdateMode
; Line 861
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ReduceOrder@12
	mov	DWORD PTR _cs$3448[ebp], eax
; Line 862
	cmp	DWORD PTR _cs$3448[ebp], 0
	jne	SHORT $LN21@UpdateMode
; Line 864
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RestoreModel@8
; Line 865
	jmp	$LN37@UpdateMode
$LN21@UpdateMode:
; Line 867
	mov	eax, DWORD PTR _cs$3448[ebp]
	mov	DWORD PTR _fSuccessor$[ebp], eax
	jmp	SHORT $LN20@UpdateMode
$LN22@UpdateMode:
; Line 869
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _fSuccessor$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	SHORT $LN20@UpdateMode
; Line 871
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CreateSuccessors@16
	mov	DWORD PTR _cs$3454[ebp], eax
; Line 872
	cmp	DWORD PTR _cs$3454[ebp], 0
	jne	SHORT $LN18@UpdateMode
; Line 874
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RestoreModel@8
; Line 875
	jmp	$LN37@UpdateMode
$LN18@UpdateMode:
; Line 877
	mov	eax, DWORD PTR _cs$3454[ebp]
	mov	DWORD PTR _fSuccessor$[ebp], eax
$LN20@UpdateMode:
; Line 880
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, 1
	mov	DWORD PTR tv213[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv213[ebp]
	mov	DWORD PTR [eax+12], ecx
	cmp	DWORD PTR tv213[ebp], 0
	jne	SHORT $LN17@UpdateMode
; Line 882
	mov	edx, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR _successor$[ebp], edx
; Line 883
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setne	al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN17@UpdateMode:
; Line 894
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _ns$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+2]
	sub	eax, DWORD PTR _ns$[ebp]
	sub	eax, DWORD PTR _fFreq$[ebp]
	mov	DWORD PTR _s0$[ebp], eax
; Line 895
	movzx	ecx, BYTE PTR _fSymbol$[ebp]
	xor	edx, edx
	cmp	ecx, 64					; 00000040H
	setge	dl
	shl	edx, 3
	mov	BYTE PTR _flag$[ebp], dl
; Line 897
	jmp	SHORT $LN16@UpdateMode
$LN15@UpdateMode:
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp], ecx
$LN16@UpdateMode:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	$LN14@UpdateMode
; Line 901
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _ns1$3463[ebp], edx
	cmp	DWORD PTR _ns1$3463[ebp], 0
	je	$LN13@UpdateMode
; Line 903
	mov	eax, DWORD PTR _ns1$3463[ebp]
	and	eax, 1
	je	$LN12@UpdateMode
; Line 906
	mov	ecx, DWORD PTR _ns1$3463[ebp]
	add	ecx, 1
	shr	ecx, 1
	mov	DWORD PTR _oldNU$3468[ebp], ecx
; Line 907
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _oldNU$3468[ebp]
	movzx	eax, BYTE PTR [edx+125]
	mov	DWORD PTR _i$3469[ebp], eax
; Line 908
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _oldNU$3468[ebp]
	movzx	edx, BYTE PTR [ecx+126]
	cmp	DWORD PTR _i$3469[ebp], edx
	je	$LN12@UpdateMode
; Line 910
	mov	eax, DWORD PTR _i$3469[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_AllocUnits@8
	mov	DWORD PTR _ptr$3471[ebp], eax
; Line 912
	cmp	DWORD PTR _ptr$3471[ebp], 0
	jne	SHORT $LN10@UpdateMode
; Line 914
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestoreModel@8
; Line 915
	jmp	$LN37@UpdateMode
$LN10@UpdateMode:
; Line 917
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _oldPtr$3472[ebp], edx
; Line 918
	mov	eax, DWORD PTR _ptr$3471[ebp]
	mov	DWORD PTR _d$3474[ebp], eax
	mov	ecx, DWORD PTR _oldPtr$3472[ebp]
	mov	DWORD PTR _s$3476[ebp], ecx
	mov	edx, DWORD PTR _oldNU$3468[ebp]
	mov	DWORD PTR _n$3478[ebp], edx
$LN9@UpdateMode:
	mov	eax, DWORD PTR _d$3474[ebp]
	mov	ecx, DWORD PTR _s$3476[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _d$3474[ebp]
	mov	ecx, DWORD PTR _s$3476[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _d$3474[ebp]
	mov	ecx, DWORD PTR _s$3476[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _s$3476[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$3476[ebp], eax
	mov	ecx, DWORD PTR _d$3474[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _d$3474[ebp], ecx
	mov	edx, DWORD PTR _n$3478[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$3478[ebp], edx
	jne	SHORT $LN9@UpdateMode
; Line 919
	mov	eax, DWORD PTR _i$3469[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldPtr$3472[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
; Line 920
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _ptr$3471[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN12@UpdateMode:
; Line 923
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _ns1$3463[ebp]
	imul	ecx, 3
	add	ecx, 1
	cmp	ecx, DWORD PTR _ns$[ebp]
	sbb	edx, edx
	neg	edx
	add	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 925
	jmp	$LN6@UpdateMode
$LN13@UpdateMode:
; Line 927
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_AllocUnits@8
	mov	DWORD PTR _s$3485[ebp], eax
; Line 928
	cmp	DWORD PTR _s$3485[ebp], 0
	jne	SHORT $LN5@UpdateMode
; Line 930
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RestoreModel@8
; Line 931
	jmp	$LN37@UpdateMode
$LN5@UpdateMode:
; Line 933
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 2
	mov	eax, DWORD PTR _s$3485[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
; Line 934
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _s$3485[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 935
	mov	edx, DWORD PTR _s$3485[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 30					; 0000001eH
	jge	SHORT $LN4@UpdateMode
; Line 936
	mov	ecx, DWORD PTR _s$3485[ebp]
	mov	dl, BYTE PTR [ecx+1]
	shl	dl, 1
	mov	eax, DWORD PTR _s$3485[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 937
	jmp	SHORT $LN3@UpdateMode
$LN4@UpdateMode:
; Line 938
	mov	ecx, DWORD PTR _s$3485[ebp]
	mov	BYTE PTR [ecx+1], 120			; 00000078H
$LN3@UpdateMode:
; Line 939
	mov	edx, DWORD PTR _s$3485[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	edx, 2
	cmp	edx, DWORD PTR _ns$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	WORD PTR [edx+2], ax
$LN6@UpdateMode:
; Line 941
	mov	eax, DWORD PTR _fFreq$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 6
	imul	eax, edx
	mov	DWORD PTR _cf$3464[ebp], eax
; Line 942
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR _sf$3465[ebp], ecx
; Line 943
	mov	edx, DWORD PTR _sf$3465[ebp]
	imul	edx, 6
	cmp	DWORD PTR _cf$3464[ebp], edx
	jae	SHORT $LN2@UpdateMode
; Line 945
	mov	eax, DWORD PTR _cf$3464[ebp]
	cmp	DWORD PTR _sf$3465[ebp], eax
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _sf$3465[ebp]
	shl	edx, 2
	cmp	DWORD PTR _cf$3464[ebp], edx
	sbb	eax, eax
	add	eax, 1
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _cf$3464[ebp], ecx
; Line 946
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 948
	jmp	SHORT $LN1@UpdateMode
$LN2@UpdateMode:
; Line 950
	mov	edx, DWORD PTR _sf$3465[ebp]
	imul	edx, 9
	cmp	edx, DWORD PTR _cf$3464[ebp]
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _sf$3465[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	ecx, DWORD PTR _cf$3464[ebp]
	sbb	edx, edx
	neg	edx
	lea	eax, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR _sf$3465[ebp]
	imul	ecx, 15					; 0000000fH
	cmp	ecx, DWORD PTR _cf$3464[ebp]
	sbb	edx, edx
	neg	edx
	add	eax, edx
	mov	DWORD PTR _cf$3464[ebp], eax
; Line 951
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _cf$3464[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	WORD PTR [edx+2], cx
$LN1@UpdateMode:
; Line 954
	mov	eax, DWORD PTR _ns1$3463[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax+6]
	mov	DWORD PTR _s$3496[ebp], eax
; Line 955
	mov	ecx, DWORD PTR _successor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$3496[ebp]
	push	edx
	call	_SetSuccessor@8
; Line 956
	mov	eax, DWORD PTR _s$3496[ebp]
	mov	cl, BYTE PTR _fSymbol$[ebp]
	mov	BYTE PTR [eax], cl
; Line 957
	mov	edx, DWORD PTR _s$3496[ebp]
	mov	al, BYTE PTR _cf$3464[ebp]
	mov	BYTE PTR [edx+1], al
; Line 958
	movzx	ecx, BYTE PTR _flag$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	eax, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 959
	mov	edx, DWORD PTR _ns1$3463[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], dl
; Line 961
	jmp	$LN15@UpdateMode
$LN14@UpdateMode:
; Line 962
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN37@UpdateMode:
; Line 963
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_UpdateModel@4 ENDP
; Function compile flags: /Odtp /RTCsu
_retVal$3005 = -8					; size = 4
_numBytes$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_AllocUnits@8 PROC
; Line 228
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 230
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+eax*4+256], 0
	je	SHORT $LN2@AllocUnits
; Line 231
	mov	edx, DWORD PTR _indx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RemoveNode@8
	jmp	SHORT $LN3@AllocUnits
$LN2@AllocUnits:
; Line 232
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _indx$[ebp]
	movzx	edx, BYTE PTR [ecx+88]
	imul	edx, 12					; 0000000cH
	mov	DWORD PTR _numBytes$[ebp], edx
; Line 233
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+48]
	cmp	DWORD PTR _numBytes$[ebp], edx
	ja	SHORT $LN1@AllocUnits
; Line 235
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _retVal$3005[ebp], ecx
; Line 236
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, DWORD PTR _numBytes$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 237
	mov	eax, DWORD PTR _retVal$3005[ebp]
	jmp	SHORT $LN3@AllocUnits
$LN1@AllocUnits:
; Line 239
	mov	edx, DWORD PTR _indx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AllocUnitsRare@8
$LN3@AllocUnits:
; Line 240
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AllocUnits@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv91 = -20						; size = 4
tv90 = -16						; size = 4
_numBytes$2990 = -12					; size = 4
_retVal$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_AllocUnitsRare@8 PROC
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 205
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN6@AllocUnits@2
; Line 207
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_GlueFreeBlocks@4
; Line 208
	mov	edx, DWORD PTR _indx$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx*4+256], 0
	je	SHORT $LN6@AllocUnits@2
; Line 209
	mov	ecx, DWORD PTR _indx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	jmp	$LN7@AllocUnits@2
$LN6@AllocUnits@2:
; Line 211
	mov	eax, DWORD PTR _indx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@AllocUnits@2:
; Line 214
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jne	SHORT $LN3@AllocUnits@2
; Line 216
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _indx$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	imul	eax, 12					; 0000000cH
	mov	DWORD PTR _numBytes$2990[ebp], eax
; Line 217
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 218
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR [edx+56]
	cmp	eax, DWORD PTR _numBytes$2990[ebp]
	jbe	SHORT $LN9@AllocUnits@2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sub	edx, DWORD PTR _numBytes$2990[ebp]
	mov	DWORD PTR tv90[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN10@AllocUnits@2
$LN9@AllocUnits@2:
	mov	DWORD PTR tv91[ebp], 0
$LN10@AllocUnits@2:
	mov	eax, DWORD PTR tv91[ebp]
	jmp	SHORT $LN7@AllocUnits@2
$LN3@AllocUnits@2:
; Line 221
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+eax*4+256], 0
	je	SHORT $LN4@AllocUnits@2
; Line 222
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RemoveNode@8
	mov	DWORD PTR _retVal$[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _indx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _retVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_SplitBlock@16
; Line 224
	mov	eax, DWORD PTR _retVal$[ebp]
$LN7@AllocUnits@2:
; Line 225
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AllocUnitsRare@8 ENDP
; Function compile flags: /Odtp /RTCsu
_k$2975 = -44						; size = 4
_nu$2969 = -40						; size = 4
_node$2968 = -36					; size = 4
_node2$2961 = -32					; size = 4
_node$2959 = -28					; size = 4
_next$2954 = -24					; size = 4
_i$ = -20						; size = 4
_prev$ = -16						; size = 4
_head$ = -8						; size = 4
_p$ = 8							; size = 4
_GlueFreeBlocks@4 PROC
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 145
	mov	DWORD PTR _head$[ebp], 0
; Line 146
	lea	eax, DWORD PTR _head$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 149
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], 8192		; 00002000H
; Line 150
	push	152					; 00000098H
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 154
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+52]
	je	SHORT $LN16@GlueFreeBl
; Line 155
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx], 0
$LN16@GlueFreeBl:
; Line 158
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@GlueFreeBl
$LN14@GlueFreeBl:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@GlueFreeBl:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	$LN13@GlueFreeBl
; Line 160
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+256]
	mov	DWORD PTR _next$2954[ebp], edx
; Line 161
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+256], 0
$LN12@GlueFreeBl:
; Line 162
	cmp	DWORD PTR _next$2954[ebp], 0
	je	SHORT $LN11@GlueFreeBl
; Line 164
	mov	edx, DWORD PTR _next$2954[ebp]
	mov	DWORD PTR _node$2959[ebp], edx
; Line 165
	mov	eax, DWORD PTR _node$2959[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN10@GlueFreeBl
; Line 168
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR _next$2954[ebp]
	mov	DWORD PTR [ecx], edx
; Line 169
	mov	eax, DWORD PTR _node$2959[ebp]
	add	eax, 4
	mov	DWORD PTR _prev$[ebp], eax
$LN9@GlueFreeBl:
; Line 170
	mov	ecx, DWORD PTR _node$2959[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _node$2959[ebp]
	mov	DWORD PTR _node2$2961[ebp], edx
	mov	eax, DWORD PTR _node2$2961[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN10@GlueFreeBl
; Line 172
	mov	ecx, DWORD PTR _node$2959[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _node2$2961[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _node$2959[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 173
	mov	edx, DWORD PTR _node2$2961[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 174
	jmp	SHORT $LN9@GlueFreeBl
$LN10@GlueFreeBl:
; Line 176
	mov	eax, DWORD PTR _node$2959[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$2954[ebp], ecx
; Line 177
	jmp	SHORT $LN12@GlueFreeBl
$LN11@GlueFreeBl:
; Line 178
	jmp	$LN14@GlueFreeBl
$LN13@GlueFreeBl:
; Line 179
	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [edx], 0
$LN7@GlueFreeBl:
; Line 182
	cmp	DWORD PTR _head$[ebp], 0
	je	$LN17@GlueFreeBl
; Line 184
	mov	eax, DWORD PTR _head$[ebp]
	mov	DWORD PTR _node$2968[ebp], eax
; Line 186
	mov	ecx, DWORD PTR _node$2968[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _head$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _node$2968[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nu$2969[ebp], ecx
; Line 188
	cmp	DWORD PTR _nu$2969[ebp], 0
	jne	SHORT $LN5@GlueFreeBl
; Line 189
	jmp	SHORT $LN7@GlueFreeBl
$LN5@GlueFreeBl:
; Line 190
	jmp	SHORT $LN4@GlueFreeBl
$LN3@GlueFreeBl:
	mov	edx, DWORD PTR _nu$2969[ebp]
	sub	edx, 128				; 00000080H
	mov	DWORD PTR _nu$2969[ebp], edx
	mov	eax, DWORD PTR _node$2968[ebp]
	add	eax, 1536				; 00000600H
	mov	DWORD PTR _node$2968[ebp], eax
$LN4@GlueFreeBl:
	cmp	DWORD PTR _nu$2969[ebp], 128		; 00000080H
	jbe	SHORT $LN2@GlueFreeBl
; Line 191
	push	37					; 00000025H
	mov	ecx, DWORD PTR _node$2968[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
	jmp	SHORT $LN3@GlueFreeBl
$LN2@GlueFreeBl:
; Line 192
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nu$2969[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	cmp	eax, DWORD PTR _nu$2969[ebp]
	je	SHORT $LN1@GlueFreeBl
; Line 194
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	mov	DWORD PTR _k$2975[ebp], eax
; Line 195
	mov	ecx, DWORD PTR _nu$2969[ebp]
	sub	ecx, DWORD PTR _k$2975[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _k$2975[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _node$2968[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
$LN1@GlueFreeBl:
; Line 197
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$2968[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 198
	jmp	$LN7@GlueFreeBl
$LN17@GlueFreeBl:
; Line 199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@GlueFreeBl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN22@GlueFreeBl:
	DD	1
	DD	$LN21@GlueFreeBl
$LN21@GlueFreeBl:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@GlueFreeBl
$LN20@GlueFreeBl:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
_GlueFreeBlocks@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv154 = -12						; size = 4
_s$ = -8						; size = 4
_c$ = -4						; size = 4
_p$ = 8							; size = 4
_c1$ = 12						; size = 4
_RestoreModel@8 PROC
; Line 552
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 555
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 556
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _c$[ebp], edx
	jmp	SHORT $LN19@RestoreMod
$LN18@RestoreMod:
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp], ecx
$LN19@RestoreMod:
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _c1$[ebp]
	je	$LN17@RestoreMod
; Line 557
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR [eax]
	sub	cl, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN16@RestoreMod
; Line 559
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$[ebp], eax
; Line 560
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	and	edx, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	eax, eax
	cmp	ecx, 64					; 00000040H
	setge	al
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 561
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 2
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
; Line 562
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_SpecialFreeUnit@8
; Line 563
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	add	ecx, 11					; 0000000bH
	shr	ecx, 3
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx+3], cl
; Line 565
	jmp	SHORT $LN15@RestoreMod
$LN16@RestoreMod:
; Line 566
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, 3
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Refresh@16
$LN15@RestoreMod:
	jmp	$LN18@RestoreMod
$LN17@RestoreMod:
; Line 568
	jmp	SHORT $LN14@RestoreMod
$LN13@RestoreMod:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
$LN14@RestoreMod:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN12@RestoreMod
; Line 569
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN11@RestoreMod
; Line 570
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	sar	ecx, 1
	sub	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax+3], dl
	jmp	SHORT $LN10@RestoreMod
$LN11@RestoreMod:
; Line 571
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 4
	mov	DWORD PTR tv154[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	cx, WORD PTR tv154[ebp]
	mov	WORD PTR [eax+2], cx
	movzx	edx, WORD PTR tv154[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	lea	eax, DWORD PTR [ecx*4+128]
	cmp	edx, eax
	jle	SHORT $LN10@RestoreMod
; Line 572
	push	1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, 2
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Refresh@16
$LN10@RestoreMod:
; Line 591
	jmp	$LN13@RestoreMod
$LN12@RestoreMod:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN7@RestoreMod
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_GetUsedMemory@4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	shr	edx, 1
	cmp	eax, edx
	jae	SHORT $LN5@RestoreMod
$LN7@RestoreMod:
; Line 592
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestartModel@4
; Line 593
	jmp	SHORT $LN20@RestoreMod
$LN5@RestoreMod:
; Line 595
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@RestoreMod
; Line 596
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+4], eax
	jmp	SHORT $LN5@RestoreMod
$LN3@RestoreMod:
; Line 599
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CutOff@12
; Line 600
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_ExpandTextArea@4
; Line 602
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetUsedMemory@4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	shr	edx, 2
	imul	edx, 3
	cmp	eax, edx
	ja	SHORT $LN3@RestoreMod
; Line 603
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 604
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+12], eax
$LN20@RestoreMod:
; Line 606
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_RestoreModel@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_ptr$ = 12						; size = 4
_SpecialFreeUnit@8 PROC
; Line 269
	push	ebp
	mov	ebp, esp
; Line 270
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	je	SHORT $LN2@SpecialFre
; Line 271
	push	0
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 272
	jmp	SHORT $LN3@SpecialFre
$LN2@SpecialFre:
; Line 277
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN3@SpecialFre:
; Line 279
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SpecialFreeUnit@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -184						; size = 4
_node$3093 = -180					; size = 4
_next$3088 = -176					; size = 4
_node$3079 = -172					; size = 4
_i$ = -168						; size = 4
_count$ = -160						; size = 152
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_ExpandTextArea@4 PROC
; Line 297
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 300
	push	152					; 00000098H
	push	0
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 301
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, DWORD PTR [edx+52]
	je	SHORT $LN12@ExpandText
; Line 302
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx], 0
$LN12@ExpandText:
; Line 305
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _node$3079[ebp], ecx
; Line 306
	jmp	SHORT $LN11@ExpandText
$LN10@ExpandText:
	mov	edx, DWORD PTR _node$3079[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _node$3079[ebp]
	mov	DWORD PTR _node$3079[ebp], eax
$LN11@ExpandText:
	mov	ecx, DWORD PTR _node$3079[ebp]
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $LN9@ExpandText
; Line 308
	mov	edx, DWORD PTR _node$3079[ebp]
	mov	DWORD PTR [edx], 0
; Line 309
	mov	eax, DWORD PTR _node$3079[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+125]
	mov	ecx, DWORD PTR _count$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _node$3079[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax+125]
	mov	DWORD PTR _count$[ebp+eax*4], ecx
; Line 310
	jmp	SHORT $LN10@ExpandText
$LN9@ExpandText:
; Line 311
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _node$3079[ebp]
	mov	DWORD PTR [ecx+60], edx
; Line 314
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@ExpandText
$LN7@ExpandText:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@ExpandText:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	$LN13@ExpandText
; Line 316
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+256]
	mov	DWORD PTR _next$3088[ebp], eax
$LN5@ExpandText:
; Line 317
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _count$[ebp+ecx*4], 0
	je	$LN4@ExpandText
; Line 319
	mov	edx, DWORD PTR _next$3088[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _node$3093[ebp], eax
$LN3@ExpandText:
; Line 320
	mov	ecx, DWORD PTR _node$3093[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@ExpandText
; Line 322
	mov	edx, DWORD PTR _next$3088[ebp]
	mov	eax, DWORD PTR _node$3093[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 323
	mov	edx, DWORD PTR _next$3088[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _node$3093[ebp], eax
; Line 324
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+408]
	sub	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+408], eax
; Line 325
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _count$[ebp+eax*4]
	sub	ecx, 1
	mov	DWORD PTR tv156[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR _count$[ebp+edx*4], eax
	cmp	DWORD PTR tv156[ebp], 0
	jne	SHORT $LN1@ExpandText
; Line 326
	jmp	SHORT $LN2@ExpandText
$LN1@ExpandText:
; Line 327
	jmp	$LN3@ExpandText
$LN2@ExpandText:
; Line 328
	mov	ecx, DWORD PTR _node$3093[ebp]
	add	ecx, 4
	mov	DWORD PTR _next$3088[ebp], ecx
; Line 329
	jmp	$LN5@ExpandText
$LN4@ExpandText:
; Line 330
	jmp	$LN7@ExpandText
$LN13@ExpandText:
; Line 331
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ExpandText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN17@ExpandText:
	DD	1
	DD	$LN16@ExpandText
$LN16@ExpandText:
	DD	-160					; ffffff60H
	DD	152					; 00000098H
	DD	$LN15@ExpandText
$LN15@ExpandText:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_ExpandTextArea@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv136 = -28						; size = 4
tv93 = -24						; size = 4
_s$ = -20						; size = 4
_flags$ = -16						; size = 4
_sumFreq$ = -12						; size = 4
_escFreq$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_ctx$ = 12						; size = 4
_oldNU$ = 16						; size = 4
_scale$ = 20						; size = 4
_Refresh@16 PROC
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 412
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 413
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 2
	shr	edx, 1
	push	edx
	mov	eax, DWORD PTR _oldNU$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ShrinkUnits@16
	mov	DWORD PTR _s$[ebp], eax
; Line 414
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 419
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _scale$[ebp]
	lea	eax, DWORD PTR [edx*4+16]
	and	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	edx, edx
	cmp	eax, 64					; 00000040H
	setge	dl
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _flags$[ebp], eax
; Line 420
	mov	ecx, DWORD PTR _ctx$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	edx, ecx
	mov	DWORD PTR _escFreq$[ebp], edx
; Line 421
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	shr	eax, cl
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR tv93[ebp]
	mov	BYTE PTR [ecx+1], dl
	movzx	eax, BYTE PTR tv93[ebp]
	mov	DWORD PTR _sumFreq$[ebp], eax
$LN3@Refresh:
; Line 424
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _escFreq$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _escFreq$[ebp], ecx
; Line 425
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	shr	eax, cl
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR tv136[ebp]
	mov	BYTE PTR [ecx+1], dl
	movzx	eax, BYTE PTR tv136[ebp]
	add	eax, DWORD PTR _sumFreq$[ebp]
	mov	DWORD PTR _sumFreq$[ebp], eax
; Line 426
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	eax, eax
	cmp	edx, 64					; 00000040H
	setge	al
	shl	eax, 3
	or	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], eax
; Line 428
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jne	SHORT $LN3@Refresh
; Line 429
	mov	edx, DWORD PTR _escFreq$[ebp]
	add	edx, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	shr	edx, cl
	add	edx, DWORD PTR _sumFreq$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 430
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	dl, BYTE PTR _flags$[ebp]
	mov	BYTE PTR [ecx+1], dl
; Line 431
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_Refresh@16 ENDP
; Function compile flags: /Odtp /RTCsu
_s2$3223 = -16						; size = 4
_s$ = -12						; size = 4
_tmp$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_ctx$ = 12						; size = 4
_order$ = 16						; size = 4
_CutOff@12 PROC
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 446
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN17@CutOff
; Line 448
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 449
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR [edx+60]
	jb	SHORT $LN16@CutOff
; Line 451
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _order$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN15@CutOff
; Line 452
	mov	edx, DWORD PTR _order$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_CutOff@12
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SetSuccessor@8
; Line 453
	jmp	SHORT $LN14@CutOff
$LN15@CutOff:
; Line 454
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SetSuccessor@8
$LN14@CutOff:
; Line 455
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	jne	SHORT $LN12@CutOff
	cmp	DWORD PTR _order$[ebp], 9
	ja	SHORT $LN16@CutOff
$LN12@CutOff:
; Line 456
	mov	eax, DWORD PTR _ctx$[ebp]
	jmp	$LN18@CutOff
$LN16@CutOff:
; Line 458
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_SpecialFreeUnit@8
; Line 459
	xor	eax, eax
	jmp	$LN18@CutOff
$LN17@CutOff:
; Line 462
	mov	ecx, DWORD PTR _ctx$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, 2
	shr	edx, 1
	mov	DWORD PTR _tmp$[ebp], edx
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MoveUnitsUp@12
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 464
	mov	edx, DWORD PTR _ctx$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _s$[ebp], ecx
	jmp	SHORT $LN11@CutOff
$LN10@CutOff:
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 6
	mov	DWORD PTR _s$[ebp], eax
$LN11@CutOff:
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jb	$LN9@CutOff
; Line 465
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR [edx+60]
	jae	SHORT $LN8@CutOff
; Line 467
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _s2$3223[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 468
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SetSuccessor@8
; Line 469
	mov	ecx, DWORD PTR _s2$3223[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SwapStates@8
	jmp	SHORT $LN7@CutOff
$LN8@CutOff:
; Line 471
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _order$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN6@CutOff
; Line 472
	mov	edx, DWORD PTR _order$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_CutOff@12
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SetSuccessor@8
; Line 473
	jmp	SHORT $LN7@CutOff
$LN6@CutOff:
; Line 474
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SetSuccessor@8
$LN7@CutOff:
	jmp	$LN10@CutOff
$LN9@CutOff:
; Line 476
	mov	ecx, DWORD PTR _ctx$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _i$[ebp], edx
	je	$LN4@CutOff
	cmp	DWORD PTR _order$[ebp], 0
	je	$LN4@CutOff
; Line 478
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax], cl
; Line 479
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$[ebp], eax
; Line 480
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN3@CutOff
; Line 482
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FreeUnits@12
; Line 483
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_SpecialFreeUnit@8
; Line 484
	xor	eax, eax
	jmp	$LN18@CutOff
$LN3@CutOff:
; Line 486
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@CutOff
; Line 488
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	and	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	edx, edx
	cmp	eax, 64					; 00000040H
	setge	dl
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 489
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
; Line 490
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_FreeUnits@12
; Line 492
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	add	ecx, 11					; 0000000bH
	shr	ecx, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [edx+3], cl
; Line 494
	jmp	SHORT $LN4@CutOff
$LN2@CutOff:
; Line 495
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	xor	eax, eax
	cmp	ecx, edx
	setg	al
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Refresh@16
$LN4@CutOff:
; Line 497
	mov	eax, DWORD PTR _ctx$[ebp]
$LN18@CutOff:
; Line 498
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_CutOff@12 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_ptr$ = 12						; size = 4
_nu$ = 16						; size = 4
_FreeUnits@12 PROC
; Line 264
	push	ebp
	mov	ebp, esp
; Line 265
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nu$[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 266
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_FreeUnits@12 ENDP
; Function compile flags: /Odtp /RTCsu
_n$3063 = -20						; size = 4
_s$3061 = -16						; size = 4
_d$3059 = -12						; size = 4
_ptr$ = -8						; size = 4
_indx$ = -4						; size = 4
_p$ = 8							; size = 4
_oldPtr$ = 12						; size = 4
_nu$ = 16						; size = 4
_MoveUnitsUp@12 PROC
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 283
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nu$[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	mov	DWORD PTR _indx$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+60]
	add	eax, 16384				; 00004000H
	cmp	DWORD PTR _oldPtr$[ebp], eax
	ja	SHORT $LN6@MoveUnitsU
	mov	ecx, DWORD PTR _indx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _oldPtr$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4+256]
	jbe	SHORT $LN7@MoveUnitsU
$LN6@MoveUnitsU:
; Line 286
	mov	eax, DWORD PTR _oldPtr$[ebp]
	jmp	$LN8@MoveUnitsU
$LN7@MoveUnitsU:
; Line 287
	mov	ecx, DWORD PTR _indx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	mov	DWORD PTR _ptr$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _d$3059[ebp], eax
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	mov	DWORD PTR _s$3061[ebp], ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	DWORD PTR _n$3063[ebp], edx
$LN5@MoveUnitsU:
	mov	eax, DWORD PTR _d$3059[ebp]
	mov	ecx, DWORD PTR _s$3061[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _d$3059[ebp]
	mov	ecx, DWORD PTR _s$3061[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _d$3059[ebp]
	mov	ecx, DWORD PTR _s$3061[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _s$3061[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$3061[ebp], eax
	mov	ecx, DWORD PTR _d$3059[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _d$3059[ebp], ecx
	mov	edx, DWORD PTR _n$3063[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$3063[ebp], edx
	jne	SHORT $LN5@MoveUnitsU
; Line 289
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	je	SHORT $LN2@MoveUnitsU
; Line 290
	mov	edx, DWORD PTR _indx$[ebp]
	push	edx
	mov	eax, DWORD PTR _oldPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_InsertNode@12
; Line 291
	jmp	SHORT $LN1@MoveUnitsU
$LN2@MoveUnitsU:
; Line 292
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _indx$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+60], eax
$LN1@MoveUnitsU:
; Line 293
	mov	eax, DWORD PTR _ptr$[ebp]
$LN8@MoveUnitsU:
; Line 294
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MoveUnitsUp@12 ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -8						; size = 4
_v$ = -4						; size = 4
_p$ = 8							; size = 4
_GetUsedMemory@4 PROC
; Line 533
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 534
	mov	DWORD PTR _v$[ebp], 0
; Line 536
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GetUsedMem
$LN2@GetUsedMem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@GetUsedMem:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	SHORT $LN1@GetUsedMem
; Line 537
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	imul	edx, DWORD PTR [ecx+eax*4+408]
	add	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], edx
	jmp	SHORT $LN2@GetUsedMem
$LN1@GetUsedMem:
; Line 538
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	sub	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	sub	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	sub	ecx, DWORD PTR [edx+56]
	sub	eax, ecx
	mov	edx, DWORD PTR _v$[ebp]
	imul	edx, 12					; 0000000cH
	sub	eax, edx
; Line 539
	mov	esp, ebp
	pop	ebp
	ret	4
_GetUsedMemory@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv209 = -136						; size = 4
tv201 = -132						; size = 4
_c1$3351 = -128						; size = 4
_s$3343 = -124						; size = 4
_s0$3342 = -120						; size = 4
_cf$3341 = -116						; size = 4
_s$3317 = -112						; size = 4
_successor$3316 = -108					; size = 4
_numPs$ = -104						; size = 4
_ps$ = -96						; size = 68
_upBranch$ = -24					; size = 4
_flags$ = -17						; size = 1
_upState$ = -12						; size = 6
_p$ = 8							; size = 4
_skip$ = 12						; size = 4
_s1$ = 16						; size = 4
_c$ = 20						; size = 4
_CreateSuccessors@16 PROC
; Line 609
	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	edi
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 612
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [ecx+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _upBranch$[ebp], edx
; Line 615
	mov	DWORD PTR _numPs$[ebp], 0
; Line 617
	cmp	DWORD PTR _skip$[ebp], 0
	jne	SHORT $LN25@CreateSucc
; Line 618
	mov	ecx, DWORD PTR _numPs$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ps$[ebp+ecx*4], eax
	mov	ecx, DWORD PTR _numPs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numPs$[ebp], ecx
$LN25@CreateSucc:
; Line 620
	mov	edx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	$LN24@CreateSucc
; Line 624
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp], ecx
; Line 625
	cmp	DWORD PTR _s1$[ebp], 0
	je	SHORT $LN23@CreateSucc
; Line 627
	mov	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s$3317[ebp], edx
; Line 628
	mov	DWORD PTR _s1$[ebp], 0
	jmp	$LN22@CreateSucc
$LN23@CreateSucc:
; Line 630
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN21@CreateSucc
; Line 632
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$3317[ebp], eax
	jmp	SHORT $LN20@CreateSucc
$LN19@CreateSucc:
	mov	ecx, DWORD PTR _s$3317[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$3317[ebp], ecx
$LN20@CreateSucc:
	mov	edx, DWORD PTR _s$3317[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	je	SHORT $LN18@CreateSucc
	jmp	SHORT $LN19@CreateSucc
$LN18@CreateSucc:
; Line 633
	mov	edx, DWORD PTR _s$3317[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 115				; 00000073H
	jge	SHORT $LN17@CreateSucc
; Line 635
	mov	ecx, DWORD PTR _s$3317[ebp]
	mov	dl, BYTE PTR [ecx+1]
	add	dl, 1
	mov	eax, DWORD PTR _s$3317[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 636
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dx, WORD PTR [ecx+2]
	add	dx, 1
	mov	eax, DWORD PTR _c$[ebp]
	mov	WORD PTR [eax+2], dx
$LN17@CreateSucc:
; Line 639
	jmp	SHORT $LN22@CreateSucc
$LN21@CreateSucc:
; Line 641
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 2
	mov	DWORD PTR _s$3317[ebp], ecx
; Line 642
	mov	edx, DWORD PTR _s$3317[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	edx, DWORD PTR _s$3317[ebp]
	movzx	edx, BYTE PTR [edx+1]
	xor	ebx, ebx
	cmp	edx, 24					; 00000018H
	setl	bl
	and	ecx, ebx
	add	eax, ecx
	mov	ecx, DWORD PTR _s$3317[ebp]
	mov	BYTE PTR [ecx+1], al
$LN22@CreateSucc:
; Line 644
	mov	edx, DWORD PTR _s$3317[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _s$3317[ebp]
	movzx	edx, WORD PTR [ecx+4]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	DWORD PTR _successor$3316[ebp], eax
; Line 645
	mov	eax, DWORD PTR _successor$3316[ebp]
	cmp	eax, DWORD PTR _upBranch$[ebp]
	je	SHORT $LN15@CreateSucc
; Line 647
	mov	ecx, DWORD PTR _successor$3316[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 648
	cmp	DWORD PTR _numPs$[ebp], 0
	jne	SHORT $LN14@CreateSucc
; Line 649
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN27@CreateSucc
$LN14@CreateSucc:
; Line 650
	jmp	SHORT $LN24@CreateSucc
$LN15@CreateSucc:
; Line 652
	mov	edx, DWORD PTR _numPs$[ebp]
	mov	eax, DWORD PTR _s$3317[ebp]
	mov	DWORD PTR _ps$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _numPs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numPs$[ebp], ecx
; Line 653
	jmp	$LN25@CreateSucc
$LN24@CreateSucc:
; Line 655
	mov	edx, DWORD PTR _upBranch$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _upState$[ebp], al
; Line 656
	mov	ecx, DWORD PTR _upBranch$[ebp]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _upState$[ebp]
	push	edx
	call	_SetSuccessor@8
; Line 657
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx]
	xor	eax, eax
	cmp	edx, 64					; 00000040H
	setge	al
	shl	eax, 4
	movzx	ecx, BYTE PTR _upState$[ebp]
	xor	edx, edx
	cmp	ecx, 64					; 00000040H
	setge	dl
	lea	eax, DWORD PTR [eax+edx*8]
	mov	BYTE PTR _flags$[ebp], al
; Line 659
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN13@CreateSucc
; Line 660
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR _upState$[ebp+1], cl
; Line 661
	jmp	$LN8@CreateSucc
$LN13@CreateSucc:
; Line 665
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$3343[ebp], eax
	jmp	SHORT $LN11@CreateSucc
$LN10@CreateSucc:
	mov	ecx, DWORD PTR _s$3343[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$3343[ebp], ecx
$LN11@CreateSucc:
	mov	edx, DWORD PTR _s$3343[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _upState$[ebp]
	cmp	eax, ecx
	je	SHORT $LN9@CreateSucc
	jmp	SHORT $LN10@CreateSucc
$LN9@CreateSucc:
; Line 666
	mov	edx, DWORD PTR _s$3343[ebp]
	movzx	eax, BYTE PTR [edx+1]
	sub	eax, 1
	mov	DWORD PTR _cf$3341[ebp], eax
; Line 667
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	sub	edx, DWORD PTR _cf$3341[ebp]
	mov	DWORD PTR _s0$3342[ebp], edx
; Line 668
	mov	edx, DWORD PTR _cf$3341[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _s0$3342[ebp]
	ja	SHORT $LN29@CreateSucc
	mov	eax, DWORD PTR _cf$3341[ebp]
	imul	eax, 5
	cmp	DWORD PTR _s0$3342[ebp], eax
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR tv201[ebp], ecx
	jmp	SHORT $LN30@CreateSucc
$LN29@CreateSucc:
	mov	edx, DWORD PTR _s0$3342[ebp]
	mov	eax, DWORD PTR _cf$3341[ebp]
	lea	eax, DWORD PTR [eax+edx*2-3]
	xor	edx, edx
	div	DWORD PTR _s0$3342[ebp]
	mov	DWORD PTR tv201[ebp], eax
$LN30@CreateSucc:
	mov	ecx, DWORD PTR tv201[ebp]
	add	ecx, 1
	mov	BYTE PTR _upState$[ebp+1], cl
$LN8@CreateSucc:
; Line 675
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	cmp	ecx, DWORD PTR [eax+48]
	je	SHORT $LN5@CreateSucc
; Line 676
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR tv209[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR _c1$3351[ebp], eax
	jmp	SHORT $LN4@CreateSucc
$LN5@CreateSucc:
; Line 677
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+256], 0
	je	SHORT $LN3@CreateSucc
; Line 678
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	mov	DWORD PTR _c1$3351[ebp], eax
; Line 679
	jmp	SHORT $LN4@CreateSucc
$LN3@CreateSucc:
; Line 681
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AllocUnitsRare@8
	mov	DWORD PTR _c1$3351[ebp], eax
; Line 682
	cmp	DWORD PTR _c1$3351[ebp], 0
	jne	SHORT $LN4@CreateSucc
; Line 683
	xor	eax, eax
	jmp	SHORT $LN27@CreateSucc
$LN4@CreateSucc:
; Line 685
	mov	ecx, DWORD PTR _c1$3351[ebp]
	mov	BYTE PTR [ecx], 0
; Line 686
	mov	edx, DWORD PTR _c1$3351[ebp]
	mov	al, BYTE PTR _flags$[ebp]
	mov	BYTE PTR [edx+1], al
; Line 687
	mov	ecx, DWORD PTR _c1$3351[ebp]
	add	ecx, 2
	mov	edx, DWORD PTR _upState$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _upState$[ebp+4]
	mov	WORD PTR [ecx+4], ax
; Line 688
	mov	ecx, DWORD PTR _c1$3351[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 689
	mov	eax, DWORD PTR _numPs$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numPs$[ebp], eax
	mov	ecx, DWORD PTR _c1$3351[ebp]
	push	ecx
	mov	edx, DWORD PTR _numPs$[ebp]
	mov	eax, DWORD PTR _ps$[ebp+edx*4]
	push	eax
	call	_SetSuccessor@8
; Line 690
	mov	ecx, DWORD PTR _c1$3351[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 692
	cmp	DWORD PTR _numPs$[ebp], 0
	jne	$LN8@CreateSucc
; Line 694
	mov	eax, DWORD PTR _c$[ebp]
$LN27@CreateSucc:
; Line 695
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@CreateSucc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	ebx
	add	esp, 136				; 00000088H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN34@CreateSucc:
	DD	2
	DD	$LN33@CreateSucc
$LN33@CreateSucc:
	DD	-12					; fffffff4H
	DD	6
	DD	$LN31@CreateSucc
	DD	-96					; ffffffa0H
	DD	68					; 00000044H
	DD	$LN32@CreateSucc
$LN32@CreateSucc:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN31@CreateSucc:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_CreateSuccessors@16 ENDP
; Function compile flags: /Odtp /RTCsu
_s1$3399 = -20						; size = 4
_successor$3398 = -16					; size = 4
_upBranch$ = -12					; size = 4
_c1$ = -8						; size = 4
_s$ = -4						; size = 4
_p$ = 8							; size = 4
_s1$ = 12						; size = 4
_c$ = 16						; size = 4
_ReduceOrder@12 PROC
; Line 698
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 699
	mov	DWORD PTR _s$[ebp], 0
; Line 700
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c1$[ebp], eax
; Line 701
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _upBranch$[ebp], edx
; Line 710
	mov	eax, DWORD PTR _upBranch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_SetSuccessor@8
; Line 711
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN18@ReduceOrde:
; Line 715
	cmp	DWORD PTR _s1$[ebp], 0
	je	SHORT $LN16@ReduceOrde
; Line 717
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp], ecx
; Line 718
	mov	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s$[ebp], edx
; Line 719
	mov	DWORD PTR _s1$[ebp], 0
; Line 721
	jmp	$LN15@ReduceOrde
$LN16@ReduceOrde:
; Line 723
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN14@ReduceOrde
; Line 733
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN19@ReduceOrde
$LN14@ReduceOrde:
; Line 735
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 736
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN13@ReduceOrde
; Line 738
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx]
	cmp	edx, eax
	je	SHORT $LN12@ReduceOrde
$LN11@ReduceOrde:
; Line 739
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN11@ReduceOrde
$LN12@ReduceOrde:
; Line 740
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 115				; 00000073H
	jge	SHORT $LN8@ReduceOrde
; Line 742
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 743
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 2
	mov	eax, DWORD PTR _c$[ebp]
	mov	WORD PTR [eax+2], dx
$LN8@ReduceOrde:
; Line 746
	jmp	SHORT $LN15@ReduceOrde
$LN13@ReduceOrde:
; Line 748
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 2
	mov	DWORD PTR _s$[ebp], ecx
; Line 749
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	xor	ecx, ecx
	cmp	edx, 32					; 00000020H
	setl	cl
	add	eax, ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
$LN15@ReduceOrde:
; Line 752
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	je	SHORT $LN6@ReduceOrde
; Line 753
	jmp	SHORT $LN17@ReduceOrde
$LN6@ReduceOrde:
; Line 757
	mov	ecx, DWORD PTR _upBranch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SetSuccessor@8
; Line 758
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 759
	jmp	$LN18@ReduceOrde
$LN17@ReduceOrde:
; Line 772
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	cmp	ecx, DWORD PTR _upBranch$[ebp]
	ja	SHORT $LN5@ReduceOrde
; Line 775
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _s1$3399[ebp], edx
; Line 776
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 778
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CreateSuccessors@16
	mov	DWORD PTR _successor$3398[ebp], eax
; Line 779
	cmp	DWORD PTR _successor$3398[ebp], 0
	jne	SHORT $LN4@ReduceOrde
; Line 780
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SetSuccessor@8
; Line 781
	jmp	SHORT $LN3@ReduceOrde
$LN4@ReduceOrde:
; Line 782
	mov	edx, DWORD PTR _successor$3398[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SetSuccessor@8
$LN3@ReduceOrde:
; Line 783
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _s1$3399[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN5@ReduceOrde:
; Line 786
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN2@ReduceOrde
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _c1$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN2@ReduceOrde
; Line 788
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_SetSuccessor@8
; Line 789
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+56], ecx
$LN2@ReduceOrde:
; Line 791
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	jne	SHORT $LN1@ReduceOrde
; Line 792
	xor	eax, eax
	jmp	SHORT $LN19@ReduceOrde
$LN1@ReduceOrde:
; Line 793
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
$LN19@ReduceOrde:
; Line 794
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_ReduceOrder@12 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Update1_0@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_Update1_0@4 PROC
; Line 1088
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1089
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, WORD PTR [ecx+2]
	xor	ecx, ecx
	cmp	edx, eax
	setge	cl
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 1090
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1091
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	WORD PTR [edx+2], ax
; Line 1092
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 4
	mov	DWORD PTR tv87[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR tv87[ebp]
	mov	BYTE PTR [ecx+1], dl
	movzx	eax, BYTE PTR tv87[ebp]
	cmp	eax, 124				; 0000007cH
	jle	SHORT $LN1@Ppmd8_Upda@2
; Line 1093
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Rescale@4
$LN1@Ppmd8_Upda@2:
; Line 1094
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_NextContext@4
; Line 1095
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_Update1_0@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_UpdateBin@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Ppmd8_UpdateBin@4 PROC
; Line 1098
	push	ebp
	mov	ebp, esp
; Line 1099
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx+1]
	xor	ecx, ecx
	cmp	eax, 196				; 000000c4H
	setl	cl
	add	edx, ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+1], dl
; Line 1100
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 1
; Line 1101
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1102
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_NextContext@4
; Line 1103
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Ppmd8_UpdateBin@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd8_Update2@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_Update2@4 PROC
; Line 1106
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1107
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx+2], dx
; Line 1108
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, 4
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR [eax+1], cl
	movzx	edx, BYTE PTR tv74[ebp]
	cmp	edx, 124				; 0000007cH
	jle	SHORT $LN1@Ppmd8_Upda@3
; Line 1109
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Rescale@4
$LN1@Ppmd8_Upda@3:
; Line 1110
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+28], eax
; Line 1111
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_UpdateModel@4
; Line 1112
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 1113
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_Update2@4 ENDP
_TEXT	ENDS
END
