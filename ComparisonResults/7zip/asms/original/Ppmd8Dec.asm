; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Ppmd8Dec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Ppmd8_RangeDec_Init@4
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\ppmd8dec.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd8_RangeDec_Init@4 PROC
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 17
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 18
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+72], -1
; Line 19
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+76], 0
; Line 20
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Ppmd8_Rang
$LN2@Ppmd8_Rang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Ppmd8_Rang:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN1@Ppmd8_Rang
; Line 21
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR [ecx+76]
	shl	esi, 8
	mov	edi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	or	esi, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+76], esi
	jmp	SHORT $LN2@Ppmd8_Rang
$LN1@Ppmd8_Rang:
; Line 22
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+76], -1
	sbb	eax, eax
	neg	eax
; Line 23
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd8_RangeDec_Init@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Ppmd8_DecodeSymbol@4
EXTRN	_Ppmd8_Update2@4:PROC
EXTRN	_Ppmd8_MakeEscFreq@12:PROC
EXTRN	_PPMD8_kExpEscape:BYTE
EXTRN	_Ppmd8_UpdateBin@4:PROC
EXTRN	_Ppmd8_Update1@4:PROC
EXTRN	_Ppmd8_Update1_0@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv331 = -1397						; size = 1
tv226 = -1396						; size = 4
tv210 = -1392						; size = 4
_pps$2869 = -1388					; size = 4
_symbol$2868 = -1381					; size = 1
_k$2864 = -1380						; size = 4
_numMasked$2856 = -1376					; size = 4
_num$2855 = -1372					; size = 4
_i$2854 = -1368						; size = 4
_see$2853 = -1364					; size = 4
_hiCnt$2852 = -1360					; size = 4
_count$2851 = -1356					; size = 4
_freqSum$2850 = -1348					; size = 4
_s$2849 = -1340						; size = 4
_ps$2848 = -1332					; size = 1024
_i$2838 = -304						; size = 4
_symbol$2834 = -297					; size = 1
_prob$2831 = -296					; size = 4
_i$2820 = -292						; size = 4
_symbol$2818 = -286					; size = 1
_symbol$2813 = -285					; size = 1
_hiCnt$2811 = -284					; size = 4
_count$2810 = -280					; size = 4
_i$2809 = -276						; size = 4
_s$2808 = -272						; size = 4
_charMask$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_Ppmd8_DecodeSymbol@4 PROC
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 1400				; 00000578H
	push	edi
	lea	edi, DWORD PTR [ebp-1400]
	mov	ecx, 350				; 0000015eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 51
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN36@Ppmd8_Deco
; Line 53
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$2808[ebp], edx
; Line 56
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_GetThreshold@8
	mov	DWORD PTR _count$2810[ebp], eax
	mov	ecx, DWORD PTR _s$2808[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _hiCnt$2811[ebp], edx
	mov	eax, DWORD PTR _count$2810[ebp]
	cmp	eax, DWORD PTR _hiCnt$2811[ebp]
	jae	SHORT $LN35@Ppmd8_Deco
; Line 59
	mov	ecx, DWORD PTR _s$2808[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_Decode@12
; Line 60
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _s$2808[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 61
	mov	eax, DWORD PTR _s$2808[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _symbol$2813[ebp], cl
; Line 62
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Ppmd8_Update1_0@4
; Line 63
	movzx	eax, BYTE PTR _symbol$2813[ebp]
	jmp	$LN37@Ppmd8_Deco
$LN35@Ppmd8_Deco:
; Line 65
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 66
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _i$2809[ebp], eax
$LN34@Ppmd8_Deco:
; Line 69
	mov	ecx, DWORD PTR _s$2808[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$2808[ebp], ecx
	mov	edx, DWORD PTR _s$2808[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR _hiCnt$2811[ebp]
	mov	DWORD PTR _hiCnt$2811[ebp], eax
	mov	ecx, DWORD PTR _hiCnt$2811[ebp]
	cmp	ecx, DWORD PTR _count$2810[ebp]
	jbe	SHORT $LN33@Ppmd8_Deco
; Line 72
	mov	edx, DWORD PTR _s$2808[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	mov	ecx, DWORD PTR _s$2808[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _hiCnt$2811[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeDec_Decode@12
; Line 73
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$2808[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 74
	mov	ecx, DWORD PTR _s$2808[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _symbol$2818[ebp], dl
; Line 75
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd8_Update1@4
; Line 76
	movzx	eax, BYTE PTR _symbol$2818[ebp]
	jmp	$LN37@Ppmd8_Deco
$LN33@Ppmd8_Deco:
; Line 79
	mov	ecx, DWORD PTR _i$2809[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$2809[ebp], ecx
	jne	$LN34@Ppmd8_Deco
; Line 80
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _count$2810[ebp], ecx
	jb	SHORT $LN30@Ppmd8_Deco
; Line 81
	mov	eax, -2					; fffffffeH
	jmp	$LN37@Ppmd8_Deco
$LN30@Ppmd8_Deco:
; Line 82
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	sub	ecx, DWORD PTR _hiCnt$2811[ebp]
	push	ecx
	mov	edx, DWORD PTR _hiCnt$2811[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_Decode@12
; Line 83
	mov	DWORD PTR _i$2820[ebp], 0
	jmp	SHORT $LN29@Ppmd8_Deco
$LN28@Ppmd8_Deco:
	mov	ecx, DWORD PTR _i$2820[ebp]
	add	ecx, 8
	mov	DWORD PTR _i$2820[ebp], ecx
$LN29@Ppmd8_Deco:
	cmp	DWORD PTR _i$2820[ebp], 64		; 00000040H
	jae	$LN27@Ppmd8_Deco
	mov	edx, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4], -1
	mov	eax, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+4], -1
	mov	ecx, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+8], -1
	mov	edx, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+12], -1
	mov	eax, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+16], -1
	mov	ecx, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+20], -1
	mov	edx, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+24], -1
	mov	eax, DWORD PTR _i$2820[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+28], -1
	jmp	$LN28@Ppmd8_Deco
$LN27@Ppmd8_Deco:
; Line 84
	mov	ecx, DWORD PTR _s$2808[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	BYTE PTR _charMask$[ebp+edx], 0
; Line 85
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _i$2809[ebp], edx
$LN26@Ppmd8_Deco:
; Line 86
	mov	eax, DWORD PTR _s$2808[ebp]
	sub	eax, 6
	mov	DWORD PTR _s$2808[ebp], eax
	mov	ecx, DWORD PTR _s$2808[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	BYTE PTR _charMask$[ebp+edx], 0
	mov	eax, DWORD PTR _i$2809[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$2809[ebp], eax
	jne	SHORT $LN26@Ppmd8_Deco
; Line 88
	jmp	$LN18@Ppmd8_Deco
$LN36@Ppmd8_Deco:
; Line 90
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+3]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+815]
	shl	edx, 7
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4152]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax+560]
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	movzx	edx, BYTE PTR [edx+1]
	add	eax, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+28]
	sar	edx, 26					; 0000001aH
	and	edx, 32					; 00000020H
	add	eax, edx
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _prob$2831[ebp], eax
; Line 91
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	shr	edx, 14					; 0000000eH
	mov	DWORD PTR tv210[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv210[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	edx, DWORD PTR _prob$2831[ebp]
	movzx	ecx, WORD PTR [edx]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+76]
	xor	edx, edx
	div	DWORD PTR tv210[ebp]
	cmp	eax, ecx
	jae	SHORT $LN22@Ppmd8_Deco
; Line 94
	mov	eax, DWORD PTR _prob$2831[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RangeDec_Decode@12
; Line 95
	mov	eax, DWORD PTR _prob$2831[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _prob$2831[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 32					; 00000020H
	sar	eax, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _prob$2831[ebp]
	mov	WORD PTR [edx], cx
; Line 96
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	DWORD PTR tv226[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR tv226[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _symbol$2834[ebp], dl
; Line 97
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd8_UpdateBin@4
; Line 98
	movzx	eax, BYTE PTR _symbol$2834[ebp]
	jmp	$LN37@Ppmd8_Deco
$LN22@Ppmd8_Deco:
; Line 100
	mov	ecx, DWORD PTR _prob$2831[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, 16384				; 00004000H
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _prob$2831[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_Decode@12
; Line 101
	mov	ecx, DWORD PTR _prob$2831[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _prob$2831[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 32					; 00000020H
	sar	ecx, 7
	sub	edx, ecx
	mov	eax, DWORD PTR _prob$2831[ebp]
	mov	WORD PTR [eax], dx
; Line 102
	mov	ecx, DWORD PTR _prob$2831[ebp]
	movzx	edx, WORD PTR [ecx]
	sar	edx, 10					; 0000000aH
	movzx	eax, BYTE PTR _PPMD8_kExpEscape[edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 103
	mov	DWORD PTR _i$2838[ebp], 0
	jmp	SHORT $LN21@Ppmd8_Deco
$LN20@Ppmd8_Deco:
	mov	edx, DWORD PTR _i$2838[ebp]
	add	edx, 8
	mov	DWORD PTR _i$2838[ebp], edx
$LN21@Ppmd8_Deco:
	cmp	DWORD PTR _i$2838[ebp], 64		; 00000040H
	jae	$LN19@Ppmd8_Deco
	mov	eax, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4], -1
	mov	ecx, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+4], -1
	mov	edx, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+8], -1
	mov	eax, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+12], -1
	mov	ecx, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+16], -1
	mov	edx, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+20], -1
	mov	eax, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+24], -1
	mov	ecx, DWORD PTR _i$2838[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+28], -1
	jmp	$LN20@Ppmd8_Deco
$LN19@Ppmd8_Deco:
; Line 104
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+2]
	mov	BYTE PTR _charMask$[ebp+ecx], 0
; Line 105
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 0
$LN18@Ppmd8_Deco:
; Line 112
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _numMasked$2856[ebp], edx
$LN16@Ppmd8_Deco:
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 116
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN13@Ppmd8_Deco
; Line 117
	or	eax, -1
	jmp	$LN37@Ppmd8_Deco
$LN13@Ppmd8_Deco:
; Line 118
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], edx
; Line 120
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _numMasked$2856[ebp]
	je	SHORT $LN16@Ppmd8_Deco
; Line 121
	mov	DWORD PTR _hiCnt$2852[ebp], 0
; Line 122
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$2849[ebp], edx
; Line 123
	mov	DWORD PTR _i$2854[ebp], 0
; Line 124
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, DWORD PTR _numMasked$2856[ebp]
	mov	DWORD PTR _num$2855[ebp], edx
$LN12@Ppmd8_Deco:
; Line 127
	mov	eax, DWORD PTR _s$2849[ebp]
	movzx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _charMask$[ebp+ecx]
	mov	DWORD PTR _k$2864[ebp], edx
; Line 128
	mov	eax, DWORD PTR _s$2849[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	and	ecx, DWORD PTR _k$2864[ebp]
	add	ecx, DWORD PTR _hiCnt$2852[ebp]
	mov	DWORD PTR _hiCnt$2852[ebp], ecx
; Line 129
	mov	edx, DWORD PTR _i$2854[ebp]
	mov	eax, DWORD PTR _s$2849[ebp]
	mov	DWORD PTR _ps$2848[ebp+edx*4], eax
	mov	ecx, DWORD PTR _s$2849[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$2849[ebp], ecx
; Line 130
	mov	edx, DWORD PTR _i$2854[ebp]
	sub	edx, DWORD PTR _k$2864[ebp]
	mov	DWORD PTR _i$2854[ebp], edx
; Line 132
	mov	eax, DWORD PTR _i$2854[ebp]
	cmp	eax, DWORD PTR _num$2855[ebp]
	jne	SHORT $LN12@Ppmd8_Deco
; Line 134
	lea	ecx, DWORD PTR _freqSum$2850[ebp]
	push	ecx
	mov	edx, DWORD PTR _numMasked$2856[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd8_MakeEscFreq@12
	mov	DWORD PTR _see$2853[ebp], eax
; Line 135
	mov	ecx, DWORD PTR _freqSum$2850[ebp]
	add	ecx, DWORD PTR _hiCnt$2852[ebp]
	mov	DWORD PTR _freqSum$2850[ebp], ecx
; Line 136
	mov	edx, DWORD PTR _freqSum$2850[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_GetThreshold@8
	mov	DWORD PTR _count$2851[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _count$2851[ebp]
	cmp	ecx, DWORD PTR _hiCnt$2852[ebp]
	jae	$LN9@Ppmd8_Deco
; Line 141
	lea	edx, DWORD PTR _ps$2848[ebp]
	mov	DWORD PTR _pps$2869[ebp], edx
; Line 142
	mov	DWORD PTR _hiCnt$2852[ebp], 0
	jmp	SHORT $LN8@Ppmd8_Deco
$LN7@Ppmd8_Deco:
	mov	eax, DWORD PTR _pps$2869[ebp]
	add	eax, 4
	mov	DWORD PTR _pps$2869[ebp], eax
$LN8@Ppmd8_Deco:
	mov	ecx, DWORD PTR _pps$2869[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR _hiCnt$2852[ebp]
	mov	DWORD PTR _hiCnt$2852[ebp], eax
	mov	ecx, DWORD PTR _hiCnt$2852[ebp]
	cmp	ecx, DWORD PTR _count$2851[ebp]
	ja	SHORT $LN6@Ppmd8_Deco
	jmp	SHORT $LN7@Ppmd8_Deco
$LN6@Ppmd8_Deco:
; Line 143
	mov	edx, DWORD PTR _pps$2869[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _s$2849[ebp], eax
; Line 144
	mov	ecx, DWORD PTR _s$2849[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _s$2849[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _hiCnt$2852[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeDec_Decode@12
; Line 145
	mov	ecx, DWORD PTR _see$2853[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 7
	jge	SHORT $LN5@Ppmd8_Deco
	mov	eax, DWORD PTR _see$2853[ebp]
	mov	cl, BYTE PTR [eax+3]
	sub	cl, 1
	mov	BYTE PTR tv331[ebp], cl
	mov	edx, DWORD PTR _see$2853[ebp]
	mov	al, BYTE PTR tv331[ebp]
	mov	BYTE PTR [edx+3], al
	movzx	ecx, BYTE PTR tv331[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@Ppmd8_Deco
	mov	edx, DWORD PTR _see$2853[ebp]
	mov	ax, WORD PTR [edx]
	shl	ax, 1
	mov	ecx, DWORD PTR _see$2853[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _see$2853[ebp]
	movzx	ecx, BYTE PTR [edx+2]
	mov	eax, 3
	shl	eax, cl
	mov	ecx, DWORD PTR _see$2853[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _see$2853[ebp]
	mov	al, BYTE PTR [edx+2]
	add	al, 1
	mov	ecx, DWORD PTR _see$2853[ebp]
	mov	BYTE PTR [ecx+2], al
$LN5@Ppmd8_Deco:
; Line 146
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$2849[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 147
	mov	ecx, DWORD PTR _s$2849[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _symbol$2868[ebp], dl
; Line 148
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd8_Update2@4
; Line 149
	movzx	eax, BYTE PTR _symbol$2868[ebp]
	jmp	SHORT $LN37@Ppmd8_Deco
$LN9@Ppmd8_Deco:
; Line 151
	mov	ecx, DWORD PTR _count$2851[ebp]
	cmp	ecx, DWORD PTR _freqSum$2850[ebp]
	jb	SHORT $LN4@Ppmd8_Deco
; Line 152
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN37@Ppmd8_Deco
$LN4@Ppmd8_Deco:
; Line 153
	mov	edx, DWORD PTR _freqSum$2850[ebp]
	sub	edx, DWORD PTR _hiCnt$2852[ebp]
	push	edx
	mov	eax, DWORD PTR _hiCnt$2852[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeDec_Decode@12
; Line 154
	mov	edx, DWORD PTR _see$2853[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, DWORD PTR _freqSum$2850[ebp]
	mov	ecx, DWORD PTR _see$2853[ebp]
	mov	WORD PTR [ecx], ax
$LN3@Ppmd8_Deco:
; Line 155
	mov	edx, DWORD PTR _i$2854[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2854[ebp], edx
	mov	eax, DWORD PTR _i$2854[ebp]
	mov	ecx, DWORD PTR _ps$2848[ebp+eax*4]
	movzx	edx, BYTE PTR [ecx]
	mov	BYTE PTR _charMask$[ebp+edx], 0
	cmp	DWORD PTR _i$2854[ebp], 0
	jne	SHORT $LN3@Ppmd8_Deco
; Line 156
	jmp	$LN18@Ppmd8_Deco
$LN37@Ppmd8_Deco:
; Line 157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@Ppmd8_Deco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1400				; 00000578H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN43@Ppmd8_Deco:
	DD	3
	DD	$LN42@Ppmd8_Deco
$LN42@Ppmd8_Deco:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN39@Ppmd8_Deco
	DD	-1332					; fffffaccH
	DD	1024					; 00000400H
	DD	$LN40@Ppmd8_Deco
	DD	-1348					; fffffabcH
	DD	4
	DD	$LN41@Ppmd8_Deco
$LN41@Ppmd8_Deco:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN40@Ppmd8_Deco:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN39@Ppmd8_Deco:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_Ppmd8_DecodeSymbol@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv67 = -4						; size = 4
_p$ = 8							; size = 4
_total$ = 12						; size = 4
_RangeDec_GetThreshold@8 PROC
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 27
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+72]
	xor	edx, edx
	div	DWORD PTR _total$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+76]
	xor	edx, edx
	div	DWORD PTR tv67[ebp]
; Line 28
	mov	esp, ebp
	pop	ebp
	ret	8
_RangeDec_GetThreshold@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_start$ = 12						; size = 4
_size$ = 16						; size = 4
_RangeDec_Decode@12 PROC
; Line 31
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 32
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	imul	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _start$[ebp], ecx
; Line 33
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+80]
	add	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+80], eax
; Line 34
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+76]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 35
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+72]
	imul	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+72], eax
$LN3@RangeDec_D:
; Line 38
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+80]
	cmp	eax, 16777216				; 01000000H
	jb	SHORT $LN1@RangeDec_D
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+72], 32768		; 00008000H
	jae	SHORT $LN4@RangeDec_D
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	sub	edx, DWORD PTR [ecx+80]
	and	edx, 32767				; 00007fffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@RangeDec_D
$LN1@RangeDec_D:
; Line 40
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR [edx+76]
	shl	esi, 8
	mov	edi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	or	esi, edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+76], esi
; Line 41
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+72], edx
; Line 42
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+80], edx
; Line 43
	jmp	$LN3@RangeDec_D
$LN4@RangeDec_D:
; Line 44
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_RangeDec_Decode@12 ENDP
_TEXT	ENDS
END
