; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\Extract.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG73813 DB	'pe', 00H
	ORG $+1
$SG73816 DB	'*', 00H, 00H, 00H
$SG73863 DB	'.', 00H, '\', 00H, 00H, 00H
	ORG $+2
$SG73870 DB	'Can not create output directory: ', 00H
	ORG $+2
$SG73937 DB	'there is no such archive', 00H
	ORG $+3
$SG73940 DB	'can''t decompress folder', 00H
$SG74025 DB	'there is no such archive', 00H
CONST	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z ; Find_FileName_InSortedVector
EXTRN	?CompareFileNames@@YGHPB_W0@Z:PROC		; CompareFileNames
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extract.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_compare$73899 = -20					; size = 4
_midValue$73898 = -16					; size = 4
_mid$73897 = -12					; size = 4
_right$ = -8						; size = 4
_left$ = -4						; size = 4
_fileName$ = 8						; size = 4
_name$ = 12						; size = 4
?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z PROC ; Find_FileName_InSortedVector
; Line 219
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 220
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _fileName$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN5@Find_FileN:
; Line 221
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN4@Find_FileN
; Line 223
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$73897[ebp], ecx
; Line 224
	mov	edx, DWORD PTR _mid$73897[ebp]
	push	edx
	mov	ecx, DWORD PTR _fileName$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _midValue$73898[ebp], eax
; Line 225
	mov	ecx, DWORD PTR _midValue$73898[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR _compare$73899[ebp], eax
; Line 226
	cmp	DWORD PTR _compare$73899[ebp], 0
	jne	SHORT $LN3@Find_FileN
; Line 227
	mov	eax, DWORD PTR _mid$73897[ebp]
	jmp	SHORT $LN6@Find_FileN
$LN3@Find_FileN:
; Line 228
	cmp	DWORD PTR _compare$73899[ebp], 0
	jge	SHORT $LN2@Find_FileN
; Line 229
	mov	eax, DWORD PTR _mid$73897[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 230
	jmp	SHORT $LN1@Find_FileN
$LN2@Find_FileN:
; Line 231
	mov	ecx, DWORD PTR _mid$73897[ebp]
	add	ecx, 1
	mov	DWORD PTR _left$[ebp], ecx
$LN1@Find_FileN:
; Line 232
	jmp	SHORT $LN5@Find_FileN
$LN4@Find_FileN:
; Line 233
	or	eax, -1
$LN6@Find_FileN:
; Line 234
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z ENDP ; Find_FileName_InSortedVector
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ	; CObjectVector<CArc>::Back
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	??1CArchiveLink@@QAE@XZ				; CArchiveLink::~CArchiveLink
PUBLIC	??1?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::~CObjectVector<COpenType>
PUBLIC	??1COpenOptions@@QAE@XZ				; COpenOptions::~COpenOptions
PUBLIC	??0COpenOptions@@QAE@XZ				; COpenOptions::COpenOptions
PUBLIC	??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z	; CObjectVector<COpenType>::CObjectVector<COpenType>
PUBLIC	??0CArchiveLink@@QAE@XZ				; CArchiveLink::CArchiveLink
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CObjArray@_N@@QAE@XZ			; CObjArray<bool>::~CObjArray<bool>
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
PUBLIC	?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z ; CArchiveExtractCallback::SetHashMethods
PUBLIC	?InitForMulti@CArchiveExtractCallback@@QAEX_NW4EEnum@NPathMode@NExtract@@W42NOverwriteMode@4@@Z ; CArchiveExtractCallback::InitForMulti
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
PUBLIC	??B?$CObjArray@_N@@QAEPA_NXZ			; CObjArray<bool>::operator bool *
PUBLIC	??0?$CObjArray@_N@@QAE@I@Z			; CObjArray<bool>::CObjArray<bool>
PUBLIC	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::~CFileInfo
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
PUBLIC	__TI2PAD
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::CFileInfo
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	?Clear@CDecompressStat@@QAEXXZ			; CDecompressStat::Clear
PUBLIC	?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z ; Extract
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z:PROC ; CArchiveLink::Open3
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	??0CArchiveExtractCallback@@QAE@XZ:PROC		; CArchiveExtractCallback::CArchiveExtractCallback
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NFind::CFileInfo::Find
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extract.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv437 = -672						; size = 4
tv170 = -668						; size = 4
tv73 = -664						; size = 4
$T75125 = -660						; size = 4
$T75124 = -656						; size = 4
$T75123 = -652						; size = 4
$T75122 = -648						; size = 4
$T75121 = -644						; size = 4
$T75118 = -640						; size = 4
$T75117 = -636						; size = 4
$T75116 = -632						; size = 4
$T75115 = -628						; size = 4
$T75114 = -624						; size = 4
$T75113 = -620						; size = 4
$T75110 = -616						; size = 4
$T75109 = -612						; size = 4
$T75108 = -608						; size = 4
$T75106 = -604						; size = 4
___result__$74148 = -600				; size = 4
___result__$74145 = -596				; size = 4
___result__$74136 = -592				; size = 4
_calcCrc$74135 = -585					; size = 1
_packProcessed$74134 = -580				; size = 8
_arc$74133 = -568					; size = 4
___result__$74130 = -564				; size = 4
_newPackSize$74127 = -560				; size = 8
_index$74120 = -552					; size = 4
_v$74116 = -548						; size = 4
_correctionSize$74115 = -544				; size = 8
_fi$74110 = -532					; size = 56
___result__$74104 = -472				; size = 4
_result$74097 = -468					; size = 4
_op$74096 = -460					; size = 88
_types2$74095 = -364					; size = 12
_arcLink$74029 = -344					; size = 96
___result__$74026 = -244				; size = 4
_fi$74019 = -236					; size = 56
_arcPath$74018 = -176					; size = 4
_thereAreNotOpenArcs$ = -169				; size = 1
_totalPackProcessed$ = -164				; size = 8
___result__$74009 = -152				; size = 4
_multi$ = -145						; size = 1
_ec$ = -140						; size = 4
_ecs$ = -132						; size = 4
_skipArcs$ = -124					; size = 4
_arcPath$73928 = -116					; size = 4
_fi$73926 = -108					; size = 56
_i$ = -48						; size = 4
_numArcs$ = -44						; size = 4
_arcSizes$ = -36					; size = 12
_totalPackSize$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_types$ = 12						; size = 4
_excludedFormats$ = 16					; size = 4
_arcPaths$ = 20						; size = 4
_arcPathsFull$ = 24					; size = 4
_wildcardCensor$ = 28					; size = 4
_options$ = 32						; size = 4
_openCallback$ = 36					; size = 4
_extractCallback$ = 40					; size = 4
_hash$ = 44						; size = 4
_errorMessage$ = 48					; size = 4
_st$ = 52						; size = 4
?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z PROC ; Extract
; Line 250
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 660				; 00000294H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-672]
	mov	ecx, 165				; 000000a5H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 251
	mov	ecx, DWORD PTR _st$[ebp]
	call	?Clear@CDecompressStat@@QAEXXZ		; CDecompressStat::Clear
; Line 252
	mov	DWORD PTR _totalPackSize$[ebp], 0
	mov	DWORD PTR _totalPackSize$[ebp+4], 0
; Line 253
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 255
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN47@Extract
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN48@Extract
$LN47@Extract:
	mov	ecx, DWORD PTR _arcPaths$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv73[ebp], eax
$LN48@Extract:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _numArcs$[ebp], edx
; Line 259
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@Extract
$LN43@Extract:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN44@Extract:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numArcs$[ebp]
	jae	$LN42@Extract
; Line 261
	lea	ecx, DWORD PTR _fi$73926[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 262
	mov	DWORD PTR _fi$73926[ebp], 0
	mov	DWORD PTR _fi$73926[ebp+4], 0
; Line 263
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN41@Extract
; Line 265
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arcPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _arcPath$73928[ebp], eax
; Line 266
	mov	ecx, DWORD PTR _arcPath$73928[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$73926[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN40@Extract
; Line 267
	mov	DWORD PTR $T75106[ebp], OFFSET $SG73937
	push	OFFSET __TI2PAD
	lea	eax, DWORD PTR $T75106[ebp]
	push	eax
	call	__CxxThrowException@8
$LN40@Extract:
; Line 268
	lea	ecx, DWORD PTR _fi$73926[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@Extract
; Line 269
	mov	DWORD PTR $T75108[ebp], OFFSET $SG73940
	push	OFFSET __TI2PAD
	lea	edx, DWORD PTR $T75108[ebp]
	push	edx
	call	__CxxThrowException@8
$LN41@Extract:
; Line 271
	mov	eax, DWORD PTR _fi$73926[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _fi$73926[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 272
	mov	edx, DWORD PTR _totalPackSize$[ebp]
	add	edx, DWORD PTR _fi$73926[ebp]
	mov	eax, DWORD PTR _totalPackSize$[ebp+4]
	adc	eax, DWORD PTR _fi$73926[ebp+4]
	mov	DWORD PTR _totalPackSize$[ebp], edx
	mov	DWORD PTR _totalPackSize$[ebp+4], eax
; Line 273
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _fi$73926[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	jmp	$LN43@Extract
$LN42@Extract:
; Line 275
	mov	ecx, DWORD PTR _numArcs$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??0?$CObjArray@_N@@QAE@I@Z		; CObjArray<bool>::CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 276
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@Extract
$LN37@Extract:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN38@Extract:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numArcs$[ebp]
	jae	SHORT $LN36@Extract
; Line 277
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN37@Extract
$LN36@Extract:
; Line 279
	push	440					; 000001b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75110[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T75110[ebp], 0
	je	SHORT $LN49@Extract
	mov	ecx, DWORD PTR $T75110[ebp]
	call	??0CArchiveExtractCallback@@QAE@XZ	; CArchiveExtractCallback::CArchiveExtractCallback
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN50@Extract
$LN49@Extract:
	mov	DWORD PTR tv170[ebp], 0
$LN50@Extract:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR $T75109[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T75109[ebp]
	mov	DWORD PTR _ecs$[ebp], eax
; Line 280
	mov	ecx, DWORD PTR _ecs$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 281
	mov	edx, 1
	cmp	edx, DWORD PTR _numArcs$[ebp]
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _multi$[ebp], al
; Line 282
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movzx	edx, BYTE PTR _multi$[ebp]
	push	edx
	mov	ecx, DWORD PTR _ecs$[ebp]
	call	?InitForMulti@CArchiveExtractCallback@@QAEX_NW4EEnum@NPathMode@NExtract@@W42NOverwriteMode@4@@Z ; CArchiveExtractCallback::InitForMulti
; Line 284
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecs$[ebp]
	call	?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z ; CArchiveExtractCallback::SetHashMethods
; Line 287
	movzx	ecx, BYTE PTR _multi$[ebp]
	test	ecx, ecx
	je	SHORT $LN35@Extract
; Line 289
	mov	esi, esp
	mov	edx, DWORD PTR _totalPackSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalPackSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74009[ebp], eax
	cmp	DWORD PTR ___result__$74009[ebp], 0
	je	SHORT $LN35@Extract
	mov	edx, DWORD PTR ___result__$74009[ebp]
	mov	DWORD PTR $T75113[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75113[ebp]
	jmp	$LN46@Extract
$LN35@Extract:
; Line 292
	mov	DWORD PTR _totalPackProcessed$[ebp], 0
	mov	DWORD PTR _totalPackProcessed$[ebp+4], 0
; Line 293
	mov	BYTE PTR _thereAreNotOpenArcs$[ebp], 0
; Line 295
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@Extract
$LN32@Extract:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@Extract:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numArcs$[ebp]
	jae	$LN31@Extract
; Line 297
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	test	eax, eax
	je	SHORT $LN30@Extract
; Line 298
	jmp	SHORT $LN32@Extract
$LN30@Extract:
; Line 300
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arcPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _arcPath$74018[ebp], eax
; Line 301
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 302
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	SHORT $LN29@Extract
; Line 304
	mov	DWORD PTR _fi$74019[ebp], 0
	mov	DWORD PTR _fi$74019[ebp+4], 0
; Line 305
	mov	DWORD PTR _fi$74019[ebp+32], 0
; Line 307
	jmp	SHORT $LN28@Extract
$LN29@Extract:
; Line 309
	mov	ecx, DWORD PTR _arcPath$74018[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@Extract
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN28@Extract
$LN26@Extract:
; Line 310
	mov	DWORD PTR $T75114[ebp], OFFSET $SG74025
	push	OFFSET __TI2PAD
	lea	eax, DWORD PTR $T75114[ebp]
	push	eax
	call	__CxxThrowException@8
$LN28@Extract:
; Line 319
	mov	esi, esp
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+39]
	push	edx
	mov	ecx, DWORD PTR _arcPath$74018[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74026[ebp], eax
	cmp	DWORD PTR ___result__$74026[ebp], 0
	je	SHORT $LN25@Extract
	mov	ecx, DWORD PTR ___result__$74026[ebp]
	mov	DWORD PTR $T75115[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75115[ebp]
	jmp	$LN46@Extract
$LN25@Extract:
; Line 320
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??0CArchiveLink@@QAE@XZ			; CArchiveLink::CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 322
	mov	edx, DWORD PTR _types$[ebp]
	push	edx
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z ; CObjectVector<COpenType>::CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 351
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??0COpenOptions@@QAE@XZ			; COpenOptions::COpenOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 353
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _op$74096[ebp+64], eax
; Line 355
	mov	ecx, DWORD PTR _codecs$[ebp]
	mov	DWORD PTR _op$74096[ebp], ecx
; Line 356
	lea	edx, DWORD PTR _types2$74095[ebp]
	mov	DWORD PTR _op$74096[ebp+40], edx
; Line 357
	mov	eax, DWORD PTR _excludedFormats$[ebp]
	mov	DWORD PTR _op$74096[ebp+44], eax
; Line 358
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR _op$74096[ebp+68], dl
; Line 359
	mov	DWORD PTR _op$74096[ebp+48], 0
; Line 360
	mov	eax, DWORD PTR _arcPath$74018[ebp]
	push	eax
	lea	ecx, DWORD PTR _op$74096[ebp+72]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 362
	mov	ecx, DWORD PTR _openCallback$[ebp]
	push	ecx
	lea	edx, DWORD PTR _op$74096[ebp]
	push	edx
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open3
	mov	DWORD PTR _result$74097[ebp], eax
; Line 364
	cmp	DWORD PTR _result$74097[ebp], -2147467260 ; 80004004H
	jne	SHORT $LN24@Extract
; Line 365
	mov	eax, DWORD PTR _result$74097[ebp]
	mov	DWORD PTR $T75116[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75116[ebp]
	jmp	$LN46@Extract
$LN24@Extract:
; Line 367
	cmp	DWORD PTR _result$74097[ebp], 0
	jne	SHORT $LN23@Extract
	cmp	DWORD PTR _arcLink$74029[ebp+60], 0
	jl	SHORT $LN23@Extract
; Line 368
	mov	DWORD PTR _result$74097[ebp], 1
$LN23@Extract:
; Line 371
	mov	esi, esp
	mov	ecx, DWORD PTR _result$74097[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arcPath$74018[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	edx, DWORD PTR _arcLink$74029[ebp]
	push	edx
	mov	eax, DWORD PTR _codecs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74104[ebp], eax
	cmp	DWORD PTR ___result__$74104[ebp], 0
	je	SHORT $LN22@Extract
	mov	ecx, DWORD PTR ___result__$74104[ebp]
	mov	DWORD PTR $T75117[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75117[ebp]
	jmp	$LN46@Extract
$LN22@Extract:
; Line 373
	cmp	DWORD PTR _result$74097[ebp], 0
	je	$LN21@Extract
; Line 375
	mov	BYTE PTR _thereAreNotOpenArcs$[ebp], 1
; Line 376
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN20@Extract
; Line 378
	lea	ecx, DWORD PTR _fi$74110[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 379
	mov	ecx, DWORD PTR _arcPath$74018[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$74110[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@Extract
; Line 380
	lea	ecx, DWORD PTR _fi$74110[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN19@Extract
; Line 381
	mov	eax, DWORD PTR _totalPackProcessed$[ebp]
	add	eax, DWORD PTR _fi$74110[ebp]
	mov	ecx, DWORD PTR _totalPackProcessed$[ebp+4]
	adc	ecx, DWORD PTR _fi$74110[ebp+4]
	mov	DWORD PTR _totalPackProcessed$[ebp], eax
	mov	DWORD PTR _totalPackProcessed$[ebp+4], ecx
$LN19@Extract:
; Line 382
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _fi$74110[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
$LN20@Extract:
; Line 383
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	jmp	$LN32@Extract
$LN21@Extract:
; Line 386
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	$LN17@Extract
; Line 393
	lea	ecx, DWORD PTR _arcLink$74029[ebp+12]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	test	eax, eax
	je	$LN17@Extract
; Line 395
	mov	ecx, DWORD PTR _arcLink$74029[ebp+24]
	mov	DWORD PTR _correctionSize$74115[ebp], ecx
	mov	edx, DWORD PTR _arcLink$74029[ebp+28]
	mov	DWORD PTR _correctionSize$74115[ebp+4], edx
; Line 396
	mov	DWORD PTR _v$74116[ebp], 0
	jmp	SHORT $LN15@Extract
$LN14@Extract:
	mov	eax, DWORD PTR _v$74116[ebp]
	add	eax, 1
	mov	DWORD PTR _v$74116[ebp], eax
$LN15@Extract:
	lea	ecx, DWORD PTR _arcLink$74029[ebp+12]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _v$74116[ebp], eax
	jae	SHORT $LN13@Extract
; Line 398
	mov	ecx, DWORD PTR _v$74116[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arcLink$74029[ebp+12]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	edx, DWORD PTR _arcPathsFull$[ebp]
	push	edx
	call	?Find_FileName_InSortedVector@@YGHABV?$CObjectVector@VUString@@@@ABVUString@@@Z ; Find_FileName_InSortedVector
	mov	DWORD PTR _index$74120[ebp], eax
; Line 399
	cmp	DWORD PTR _index$74120[ebp], 0
	jl	SHORT $LN12@Extract
; Line 401
	mov	eax, DWORD PTR _index$74120[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jbe	SHORT $LN12@Extract
; Line 403
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _index$74120[ebp]
	mov	BYTE PTR [eax+ecx], 1
; Line 404
	mov	edx, DWORD PTR _index$74120[ebp]
	push	edx
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _correctionSize$74115[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _correctionSize$74115[ebp+4]
	sbb	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _correctionSize$74115[ebp], ecx
	mov	DWORD PTR _correctionSize$74115[ebp+4], edx
$LN12@Extract:
; Line 407
	jmp	$LN14@Extract
$LN13@Extract:
; Line 408
	mov	eax, DWORD PTR _correctionSize$74115[ebp]
	or	eax, DWORD PTR _correctionSize$74115[ebp+4]
	je	$LN17@Extract
; Line 410
	mov	ecx, DWORD PTR _totalPackSize$[ebp]
	add	ecx, DWORD PTR _correctionSize$74115[ebp]
	mov	edx, DWORD PTR _totalPackSize$[ebp+4]
	adc	edx, DWORD PTR _correctionSize$74115[ebp+4]
	mov	DWORD PTR _newPackSize$74127[ebp], ecx
	mov	DWORD PTR _newPackSize$74127[ebp+4], edx
; Line 411
	cmp	DWORD PTR _newPackSize$74127[ebp+4], 0
	jg	SHORT $LN9@Extract
	jl	SHORT $LN63@Extract
	cmp	DWORD PTR _newPackSize$74127[ebp], 0
	jae	SHORT $LN9@Extract
$LN63@Extract:
; Line 412
	mov	DWORD PTR _newPackSize$74127[ebp], 0
	mov	DWORD PTR _newPackSize$74127[ebp+4], 0
$LN9@Extract:
; Line 413
	mov	eax, DWORD PTR _newPackSize$74127[ebp]
	mov	DWORD PTR _totalPackSize$[ebp], eax
	mov	ecx, DWORD PTR _newPackSize$74127[ebp+4]
	mov	DWORD PTR _totalPackSize$[ebp+4], ecx
; Line 414
	mov	esi, esp
	mov	edx, DWORD PTR _totalPackSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalPackSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74130[ebp], eax
	cmp	DWORD PTR ___result__$74130[ebp], 0
	je	SHORT $LN17@Extract
	mov	edx, DWORD PTR ___result__$74130[ebp]
	mov	DWORD PTR $T75118[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75118[ebp]
	jmp	$LN46@Extract
$LN17@Extract:
; Line 433
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back
	mov	DWORD PTR _arc$74133[ebp], eax
; Line 434
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN51@Extract
	movzx	edx, BYTE PTR _fi$74019[ebp+37]
	test	edx, edx
	jne	SHORT $LN51@Extract
	mov	DWORD PTR tv437[ebp], 1
	jmp	SHORT $LN52@Extract
$LN51@Extract:
	mov	DWORD PTR tv437[ebp], 0
$LN52@Extract:
	mov	eax, DWORD PTR _arc$74133[ebp]
	mov	cl, BYTE PTR tv437[ebp]
	mov	BYTE PTR [eax+164], cl
; Line 435
	mov	edx, DWORD PTR _arc$74133[ebp]
	mov	eax, DWORD PTR _fi$74019[ebp+24]
	mov	DWORD PTR [edx+156], eax
	mov	ecx, DWORD PTR _fi$74019[ebp+28]
	mov	DWORD PTR [edx+160], ecx
; Line 440
	xor	edx, edx
	cmp	DWORD PTR _hash$[ebp], 0
	setne	dl
	mov	BYTE PTR _calcCrc$74135[ebp], dl
; Line 452
	lea	eax, DWORD PTR _packProcessed$74134[ebp]
	push	eax
	mov	ecx, DWORD PTR _errorMessage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _calcCrc$74135[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _wildcardCensor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$74019[ebp]
	add	ecx, DWORD PTR _arcLink$74029[ebp+24]
	mov	edx, DWORD PTR _fi$74019[ebp+4]
	adc	edx, DWORD PTR _arcLink$74029[ebp+28]
	push	edx
	push	ecx
	lea	eax, DWORD PTR _arcLink$74029[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	push	ecx
	call	?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z ; DecompressArchive
	mov	DWORD PTR ___result__$74136[ebp], eax
	cmp	DWORD PTR ___result__$74136[ebp], 0
	je	SHORT $LN7@Extract
	mov	edx, DWORD PTR ___result__$74136[ebp]
	mov	DWORD PTR $T75121[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75121[ebp]
	jmp	$LN46@Extract
$LN7@Extract:
; Line 454
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN6@Extract
; Line 455
	mov	edx, DWORD PTR _fi$74019[ebp]
	add	edx, DWORD PTR _arcLink$74029[ebp+24]
	mov	eax, DWORD PTR _fi$74019[ebp+4]
	adc	eax, DWORD PTR _arcLink$74029[ebp+28]
	mov	DWORD PTR _packProcessed$74134[ebp], edx
	mov	DWORD PTR _packProcessed$74134[ebp+4], eax
$LN6@Extract:
; Line 456
	mov	ecx, DWORD PTR _totalPackProcessed$[ebp]
	add	ecx, DWORD PTR _packProcessed$74134[ebp]
	mov	edx, DWORD PTR _totalPackProcessed$[ebp+4]
	adc	edx, DWORD PTR _packProcessed$74134[ebp+4]
	mov	DWORD PTR _totalPackProcessed$[ebp], ecx
	mov	DWORD PTR _totalPackProcessed$[ebp+4], edx
; Line 457
	mov	eax, DWORD PTR _ecs$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _packProcessed$74134[ebp]
	mov	eax, DWORD PTR [ecx+36]
	adc	eax, DWORD PTR _packProcessed$74134[ebp+4]
	mov	ecx, DWORD PTR _ecs$[ebp]
	mov	ecx, DWORD PTR [ecx+352]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
; Line 458
	mov	edx, DWORD PTR _ecs$[ebp]
	mov	eax, DWORD PTR [edx+352]
	mov	ecx, DWORD PTR _ecs$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	mov	DWORD PTR [eax+40], edx
	mov	ecx, DWORD PTR [ecx+388]
	mov	DWORD PTR [eax+44], ecx
; Line 459
	mov	ecx, DWORD PTR _errorMessage$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@Extract
; Line 460
	mov	DWORD PTR $T75122[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75122[ebp]
	jmp	$LN46@Extract
$LN5@Extract:
; Line 461
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op$74096[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _types2$74095[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fi$74019[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	jmp	$LN32@Extract
$LN31@Extract:
; Line 463
	movzx	eax, BYTE PTR _multi$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Extract
	movzx	ecx, BYTE PTR _thereAreNotOpenArcs$[ebp]
	test	ecx, ecx
	je	$LN4@Extract
$LN3@Extract:
; Line 465
	mov	esi, esp
	mov	edx, DWORD PTR _totalPackSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalPackSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74145[ebp], eax
	cmp	DWORD PTR ___result__$74145[ebp], 0
	je	SHORT $LN2@Extract
	mov	edx, DWORD PTR ___result__$74145[ebp]
	mov	DWORD PTR $T75123[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75123[ebp]
	jmp	$LN46@Extract
$LN2@Extract:
; Line 466
	mov	esi, esp
	lea	eax, DWORD PTR _totalPackProcessed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74148[ebp], eax
	cmp	DWORD PTR ___result__$74148[ebp], 0
	je	SHORT $LN4@Extract
	mov	edx, DWORD PTR ___result__$74148[ebp]
	mov	DWORD PTR $T75124[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75124[ebp]
	jmp	$LN46@Extract
$LN4@Extract:
; Line 469
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _ecs$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+364]
	mov	DWORD PTR [eax+36], ecx
; Line 470
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _ecs$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR [eax+372]
	mov	DWORD PTR [edx+44], eax
; Line 471
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _ecs$[ebp]
	mov	eax, DWORD PTR [edx+376]
	mov	DWORD PTR [ecx+48], eax
	mov	edx, DWORD PTR [edx+380]
	mov	DWORD PTR [ecx+52], edx
; Line 472
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _ecs$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+388]
	mov	DWORD PTR [eax+12], ecx
; Line 473
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _ecs$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+396]
	mov	DWORD PTR [edx+20], eax
; Line 474
	mov	ecx, DWORD PTR _arcPaths$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	xor	ecx, ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 475
	mov	eax, DWORD PTR _ecs$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+28], ecx
; Line 476
	mov	DWORD PTR $T75125[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _ec$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR $T75125[ebp]
$LN46@Extract:
; Line 477
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN77@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 672				; 000002a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
	npad	3
$LN77@Extract:
	DD	11					; 0000000bH
	DD	$LN76@Extract
$LN76@Extract:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN64@Extract
	DD	-108					; ffffff94H
	DD	56					; 00000038H
	DD	$LN65@Extract
	DD	-124					; ffffff84H
	DD	4
	DD	$LN66@Extract
	DD	-140					; ffffff74H
	DD	4
	DD	$LN67@Extract
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN68@Extract
	DD	-236					; ffffff14H
	DD	56					; 00000038H
	DD	$LN69@Extract
	DD	-344					; fffffea8H
	DD	96					; 00000060H
	DD	$LN70@Extract
	DD	-364					; fffffe94H
	DD	12					; 0000000cH
	DD	$LN71@Extract
	DD	-460					; fffffe34H
	DD	88					; 00000058H
	DD	$LN72@Extract
	DD	-532					; fffffdecH
	DD	56					; 00000038H
	DD	$LN73@Extract
	DD	-580					; fffffdbcH
	DD	8
	DD	$LN74@Extract
$LN74@Extract:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN73@Extract:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$LN72@Extract:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN71@Extract:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN70@Extract:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	0
$LN69@Extract:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$LN68@Extract:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN67@Extract:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN66@Extract:
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN65@Extract:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$LN64@Extract:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$0:
	lea	ecx, DWORD PTR _arcSizes$[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$1:
	lea	ecx, DWORD PTR _fi$73926[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$2:
	lea	ecx, DWORD PTR _skipArcs$[ebp]
	jmp	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$3:
	mov	eax, DWORD PTR $T75110[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$4:
	lea	ecx, DWORD PTR _ec$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$5:
	lea	ecx, DWORD PTR _fi$74019[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$6:
	lea	ecx, DWORD PTR _arcLink$74029[ebp]
	jmp	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$7:
	lea	ecx, DWORD PTR _types2$74095[ebp]
	jmp	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$8:
	lea	ecx, DWORD PTR _op$74096[ebp]
	jmp	??1COpenOptions@@QAE@XZ
__unwindfunclet$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z$9:
	lea	ecx, DWORD PTR _fi$74110[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__ehhandler$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-672]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z ENDP ; Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
PUBLIC	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::NFind::CFileInfoBase::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mask$ = 8						; size = 4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z PROC ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	and	eax, DWORD PTR _mask$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ENDP ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
_TEXT	ENDS
PUBLIC	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::CFileInfo
_TEXT	ENDS
EXTRN	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:PROC ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::~CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::~CFileInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T75175 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75175[ebp], ecx
	mov	edx, DWORD PTR $T75175[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??0COpenType@@QAE@XZ				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenOptions@@QAE@XZ PROC				; COpenOptions::COpenOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenOptions@@QAE@XZ ENDP				; COpenOptions::COpenOptions
_TEXT	ENDS
PUBLIC	??0COpenSpecFlags@@QAE@XZ			; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COpenType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenType@@QAE@XZ PROC				; COpenType::COpenType, COMDAT
; _this$ = ecx
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 7
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 10					; 0000000aH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+17], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+18], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+19], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+7], 1
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 1
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+15], 1
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], 1
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenType@@QAE@XZ ENDP				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenSpecFlags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenSpecFlags@@QAE@XZ PROC				; COpenSpecFlags::COpenSpecFlags, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenSpecFlags@@QAE@XZ ENDP				; COpenSpecFlags::COpenSpecFlags
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1?$CObjectVector@VCArc@@@@QAE@XZ		; CObjectVector<CArc>::~CObjectVector<CArc>
PUBLIC	??0CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::CArcErrorInfo
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??0?$CObjectVector@VCArc@@@@QAE@XZ		; CObjectVector<CArc>::CObjectVector<CArc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArchiveLink@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$2
__ehfuncinfo$??0CArchiveLink@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CArchiveLink@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchiveLink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveLink@@QAE@XZ PROC				; CArchiveLink::CArchiveLink, COMDAT
; _this$ = ecx
; Line 386
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveLink@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::CObjectVector<CArc>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0CArcErrorInfo@@QAE@XZ		; CArcErrorInfo::CArcErrorInfo
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveLink@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
__unwindfunclet$??0CArchiveLink@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArchiveLink@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArchiveLink@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveLink@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveLink@@QAE@XZ ENDP				; CArchiveLink::CArchiveLink
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??0CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::CArcErrorInfo, COMDAT
; _this$ = ecx
; Line 183
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::CArcErrorInfo
PUBLIC	??1CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::~CArcErrorInfo
EXTRN	?Release@CArchiveLink@@QAEXXZ:PROC		; CArchiveLink::Release
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArchiveLink@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$3
__ehfuncinfo$??1CArchiveLink@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CArchiveLink@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchiveLink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveLink@@QAE@XZ PROC				; CArchiveLink::~CArchiveLink, COMDAT
; _this$ = ecx
; Line 391
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveLink@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@CArchiveLink@@QAEXXZ		; CArchiveLink::Release
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveLink@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
__unwindfunclet$??1CArchiveLink@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArchiveLink@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchiveLink@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1CArcErrorInfo@@QAE@XZ
__ehhandler$??1CArchiveLink@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveLink@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveLink@@QAE@XZ ENDP				; CArchiveLink::~CArchiveLink
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??1CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::~CArcErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::~CArcErrorInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitForMulti@CArchiveExtractCallback@@QAEX_NW4EEnum@NPathMode@NExtract@@W42NOverwriteMode@4@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_multiArchives$ = 8					; size = 1
_pathMode$ = 12						; size = 4
_overwriteMode$ = 16					; size = 4
?InitForMulti@CArchiveExtractCallback@@QAEX_NW4EEnum@NPathMode@NExtract@@W42NOverwriteMode@4@@Z PROC ; CArchiveExtractCallback::InitForMulti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 272
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 273
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _multiArchives$[ebp]
	mov	BYTE PTR [eax+294], cl
; Line 274
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pathMode$[ebp]
	mov	DWORD PTR [edx+84], eax
; Line 275
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _overwriteMode$[ebp]
	mov	DWORD PTR [ecx+88], edx
; Line 276
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+392], 0
	mov	DWORD PTR [eax+396], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], 0
	mov	DWORD PTR [ecx+388], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], 0
	mov	DWORD PTR [edx+380], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+368], 0
	mov	DWORD PTR [eax+372], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], 0
	mov	DWORD PTR [ecx+364], 0
; Line 277
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitForMulti@CArchiveExtractCallback@@QAEX_NW4EEnum@NPathMode@NExtract@@W42NOverwriteMode@4@@Z ENDP ; CArchiveExtractCallback::InitForMulti
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0COutStreamWithHash@@QAE@XZ			; COutStreamWithHash::COutStreamWithHash
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z$0
__ehfuncinfo$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T75232 = -24						; size = 4
$T75231 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hash$ = 8						; size = 4
?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z PROC ; CArchiveExtractCallback::SetHashMethods, COMDAT
; _this$ = ecx
; Line 282
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 283
	cmp	DWORD PTR _hash$[ebp], 0
	jne	SHORT $LN1@SetHashMet
; Line 284
	jmp	SHORT $LN2@SetHashMet
$LN1@SetHashMet:
; Line 285
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75232[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75232[ebp], 0
	je	SHORT $LN4@SetHashMet
	mov	ecx, DWORD PTR $T75232[ebp]
	call	??0COutStreamWithHash@@QAE@XZ
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN5@SetHashMet
$LN4@SetHashMet:
	mov	DWORD PTR tv73[ebp], 0
$LN5@SetHashMet:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T75231[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75231[ebp]
	mov	DWORD PTR [ecx+260], edx
; Line 286
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 287
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN2@SetHashMet:
; Line 288
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z$0:
	mov	eax, DWORD PTR $T75232[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetHashMethods@CArchiveExtractCallback@@QAEXPAUIHashCalc@@@Z ENDP ; CArchiveExtractCallback::SetHashMethods
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??_7COutStreamWithHash@@6B@			; COutStreamWithHash::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4COutStreamWithHash@@6B@			; COutStreamWithHash::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutStreamWithHash@@@8			; COutStreamWithHash `RTTI Type Descriptor'
PUBLIC	??_R3COutStreamWithHash@@8			; COutStreamWithHash::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutStreamWithHash@@8			; COutStreamWithHash::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutStreamWithHash@@8		; COutStreamWithHash::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@COutStreamWithHash@@UAGJABU_GUID@@PAPAX@Z ; COutStreamWithHash::QueryInterface
PUBLIC	?AddRef@COutStreamWithHash@@UAGKXZ		; COutStreamWithHash::AddRef
PUBLIC	?Release@COutStreamWithHash@@UAGKXZ		; COutStreamWithHash::Release
EXTRN	?Write@COutStreamWithHash@@UAGJPBXIPAI@Z:PROC	; COutStreamWithHash::Write
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COutStreamWithHash@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutStreamWithHash@@8 DD FLAT:??_R0?AVCOutStreamWithHash@@@8 ; COutStreamWithHash::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutStreamWithHash@@8
rdata$r	ENDS
;	COMDAT ??_R2COutStreamWithHash@@8
rdata$r	SEGMENT
??_R2COutStreamWithHash@@8 DD FLAT:??_R1A@?0A@EA@COutStreamWithHash@@8 ; COutStreamWithHash::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutStreamWithHash@@8
rdata$r	SEGMENT
??_R3COutStreamWithHash@@8 DD 00H			; COutStreamWithHash::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2COutStreamWithHash@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutStreamWithHash@@@8
_DATA	SEGMENT
??_R0?AVCOutStreamWithHash@@@8 DD FLAT:??_7type_info@@6B@ ; COutStreamWithHash `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutStreamWithHash@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutStreamWithHash@@6B@
rdata$r	SEGMENT
??_R4COutStreamWithHash@@6B@ DD 00H			; COutStreamWithHash::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutStreamWithHash@@@8
	DD	FLAT:??_R3COutStreamWithHash@@8
rdata$r	ENDS
;	COMDAT ??_7COutStreamWithHash@@6B@
CONST	SEGMENT
??_7COutStreamWithHash@@6B@ DD FLAT:??_R4COutStreamWithHash@@6B@ ; COutStreamWithHash::`vftable'
	DD	FLAT:?QueryInterface@COutStreamWithHash@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutStreamWithHash@@UAGKXZ
	DD	FLAT:?Release@COutStreamWithHash@@UAGKXZ
	DD	FLAT:?Write@COutStreamWithHash@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0COutStreamWithHash@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutStreamWithHash@@QAE@XZ PROC			; COutStreamWithHash::COutStreamWithHash, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutStreamWithHash@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutStreamWithHash@@QAE@XZ ENDP			; COutStreamWithHash::COutStreamWithHash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@COutStreamWithHash@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutStreamWithHash@@UAGJABU_GUID@@PAPAX@Z PROC ; COutStreamWithHash::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 34
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutStreamWithHash@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutStreamWithHash::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutStreamWithHash@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutStreamWithHash@@UAGKXZ PROC			; COutStreamWithHash::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutStreamWithHash@@UAGKXZ ENDP			; COutStreamWithHash::AddRef
_TEXT	ENDS
PUBLIC	??_GCOutStreamWithHash@@QAEPAXI@Z		; COutStreamWithHash::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COutStreamWithHash@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75262 = -8						; size = 4
$T75261 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutStreamWithHash@@UAGKXZ PROC		; COutStreamWithHash::Release, COMDAT
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75262[ebp], edx
	mov	eax, DWORD PTR $T75262[ebp]
	mov	DWORD PTR $T75261[ebp], eax
	cmp	DWORD PTR $T75261[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T75261[ebp]
	call	??_GCOutStreamWithHash@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutStreamWithHash@@UAGKXZ ENDP		; COutStreamWithHash::Release
_TEXT	ENDS
PUBLIC	??1COutStreamWithHash@@QAE@XZ			; COutStreamWithHash::~COutStreamWithHash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutStreamWithHash@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutStreamWithHash@@QAEPAXI@Z PROC			; COutStreamWithHash::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutStreamWithHash@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutStreamWithHash@@QAEPAXI@Z ENDP			; COutStreamWithHash::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutStreamWithHash@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutStreamWithHash@@QAE@XZ PROC			; COutStreamWithHash::~COutStreamWithHash, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutStreamWithHash@@QAE@XZ ENDP			; COutStreamWithHash::~COutStreamWithHash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@CDecompressStat@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CDecompressStat@@QAEXXZ PROC			; CDecompressStat::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extract.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	DWORD PTR [eax+52], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 76
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CDecompressStat@@QAEXXZ ENDP			; CDecompressStat::Clear
_TEXT	ENDS
PUBLIC	?Front@?$CRecordVector@I@@QAEAAIXZ		; CRecordVector<unsigned int>::Front
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??1CReadArcItem@@QAE@XZ				; CReadArcItem::~CReadArcItem
PUBLIC	??0CReadArcItem@@QAE@XZ				; CReadArcItem::CReadArcItem
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	?DeleteBack@UString@@QAEXXZ			; UString::DeleteBack
PUBLIC	?IsPathSepar@@YG_N_W@Z				; IsPathSepar
PUBLIC	?Back@UString@@QBE_WXZ				; UString::Back
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
PUBLIC	??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z	; CObjectVector<CArc>::operator[]
PUBLIC	?Size@?$CObjectVector@VCArc@@@@QBEIXZ		; CObjectVector<CArc>::Size
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
PUBLIC	?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ	; CObjectVector<CArc>::Back
EXTRN	?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ:PROC ; CArchiveExtractCallback::SetDirsTimes
EXTRN	?PrepareHardLinks@CArchiveExtractCallback@@QAEJPBV?$CRecordVector@I@@@Z:PROC ; CArchiveExtractCallback::PrepareHardLinks
EXTRN	?Init@CArchiveExtractCallback@@QAEXABUCExtractNtOptions@@PBVCCensorNode@NWildcard@@PBVCArc@@PAUIFolderArchiveExtractCallback@@_N4ABVUString@@ABV?$CObjectVector@VUString@@@@4_K@Z:PROC ; CArchiveExtractCallback::Init
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	__imp__GetLastError@0:PROC
EXTRN	?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NDir::CreateComplexDir
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z:PROC ; CensorNode_CheckPath
EXTRN	?IsPath1PrefixedByPath2@@YG_NPB_W0@Z:PROC	; IsPath1PrefixedByPath2
EXTRN	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z:PROC ; Archive_IsItem_AltStream
EXTRN	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z:PROC	; CArc::GetItem
EXTRN	?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ:PROC ; NWildcard::CCensorNode::AreAllAllowed
EXTRN	?SplitPathToParts_Smart@@YGXABVUString@@AAV1@1@Z:PROC ; SplitPathToParts_Smart
EXTRN	?Replace@UString@@QAEXABV1@0@Z:PROC		; UString::Replace
EXTRN	?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z:PROC ; Get_Correct_FsFile_Name
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
xdata$x	SEGMENT
__ehfuncinfo$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$10
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv401 = -384						; size = 4
tv470 = -380						; size = 4
tv150 = -376						; size = 4
$T75284 = -372						; size = 4
$T75281 = -368						; size = 4
$T75280 = -364						; size = 4
$T75279 = -360						; size = 4
$T75278 = -356						; size = 4
$T75277 = -352						; size = 4
$T75276 = -348						; size = 4
$T75275 = -344						; size = 12
$T75274 = -332						; size = 12
_prop$73881 = -316					; size = 16
_testMode$ = -296					; size = 4
_result$ = -292						; size = 4
___result__$73873 = -288				; size = 4
_res$73866 = -284					; size = 4
_c$73851 = -280						; size = 2
_s$73848 = -276						; size = 4
___result__$73843 = -272				; size = 4
___result__$73838 = -268				; size = 4
_i$73832 = -264						; size = 4
_item$73831 = -256					; size = 64
___result__$73828 = -188				; size = 4
_numItems$73827 = -180					; size = 4
_allFilesAreAllowed$ = -169				; size = 1
_dirPrefix$73821 = -164					; size = 12
_outDirReduced$ = -144					; size = 12
_elimPrefix$ = -124					; size = 12
_elimIsPossible$ = -105					; size = 1
_arc0$73811 = -104					; size = 4
_replaceName$ = -96					; size = 12
_outDir$ = -76						; size = 12
_removePathParts$ = -56					; size = 12
_realIndices$ = -36					; size = 12
_archive$ = -20						; size = 4
_arc$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_arcLink$ = 12						; size = 4
_packSize$ = 16						; size = 8
_wildcardCensor$ = 24					; size = 4
_options$ = 28						; size = 4
_calcCrc$ = 32						; size = 1
_callback$ = 36						; size = 4
_ecs$ = 40						; size = 4
_errorMessage$ = 44					; size = 4
_stdInProcessed$ = 48					; size = 4
?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z PROC ; DecompressArchive
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extract.cpp
; Line 33
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 372				; 00000174H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 34
	mov	ecx, DWORD PTR _arcLink$[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ ; CObjectVector<CArc>::Back
	mov	DWORD PTR _arc$[ebp], eax
; Line 35
	mov	eax, DWORD PTR _stdInProcessed$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 36
	mov	ecx, DWORD PTR _arc$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	mov	DWORD PTR _archive$[ebp], eax
; Line 37
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 39
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 41
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 42
	mov	edx, DWORD PTR _arc$[ebp]
	add	edx, 136				; 00000088H
	push	edx
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 44
	mov	ecx, DWORD PTR _arcLink$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	cmp	eax, 1
	jbe	SHORT $LN39@Decompress
; Line 49
	push	0
	mov	ecx, DWORD PTR _arcLink$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	mov	DWORD PTR _arc0$73811[ebp], eax
; Line 50
	push	OFFSET $SG73813
	mov	eax, DWORD PTR _arc0$73811[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	add	eax, 12					; 0000000cH
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN39@Decompress
; Line 51
	mov	eax, DWORD PTR _arc0$73811[ebp]
	add	eax, 136				; 00000088H
	push	eax
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN39@Decompress:
; Line 54
	push	OFFSET $SG73816
	lea	ecx, DWORD PTR $T75275[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _replaceName$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T75274[ebp]
	push	edx
	call	?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z ; Get_Correct_FsFile_Name
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv470[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv470[ebp]
	push	ecx
	lea	edx, DWORD PTR $T75275[ebp]
	push	edx
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	?Replace@UString@@QAEXABV1@0@Z		; UString::Replace
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T75274[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T75275[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 56
	mov	BYTE PTR _elimIsPossible$[ebp], 0
; Line 57
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 58
	lea	eax, DWORD PTR _outDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 60
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN37@Decompress
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	$LN37@Decompress
; Line 62
	lea	ecx, DWORD PTR _dirPrefix$73821[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 63
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dirPrefix$73821[ebp]
	push	edx
	lea	eax, DWORD PTR _outDir$[ebp]
	push	eax
	call	?SplitPathToParts_Smart@@YGXABVUString@@AAV1@1@Z ; SplitPathToParts_Smart
; Line 64
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN36@Decompress
; Line 66
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	edx, ax
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@Decompress
; Line 67
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
$LN35@Decompress:
; Line 68
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN36@Decompress
; Line 70
	lea	edx, DWORD PTR _dirPrefix$73821[ebp]
	push	edx
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 71
	mov	BYTE PTR _elimIsPossible$[ebp], 1
$LN36@Decompress:
; Line 74
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _dirPrefix$73821[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN37@Decompress:
; Line 76
	mov	ecx, DWORD PTR _wildcardCensor$[ebp]
	call	?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::AreAllAllowed
	mov	BYTE PTR _allFilesAreAllowed$[ebp], al
; Line 78
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	$LN33@Decompress
; Line 81
	mov	esi, esp
	lea	edx, DWORD PTR _numItems$73827[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73828[ebp], eax
	cmp	DWORD PTR ___result__$73828[ebp], 0
	je	SHORT $LN32@Decompress
	mov	ecx, DWORD PTR ___result__$73828[ebp]
	mov	DWORD PTR $T75276[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75276[ebp]
	jmp	$LN40@Decompress
$LN32@Decompress:
; Line 83
	lea	ecx, DWORD PTR _item$73831[ebp]
	call	??0CReadArcItem@@QAE@XZ			; CReadArcItem::CReadArcItem
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 85
	mov	DWORD PTR _i$73832[ebp], 0
	jmp	SHORT $LN31@Decompress
$LN30@Decompress:
	mov	edx, DWORD PTR _i$73832[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73832[ebp], edx
$LN31@Decompress:
	mov	eax, DWORD PTR _i$73832[ebp]
	cmp	eax, DWORD PTR _numItems$73827[ebp]
	jae	$LN29@Decompress
; Line 87
	movzx	ecx, BYTE PTR _elimIsPossible$[ebp]
	test	ecx, ecx
	jne	SHORT $LN27@Decompress
	movzx	edx, BYTE PTR _allFilesAreAllowed$[ebp]
	test	edx, edx
	jne	$LN28@Decompress
$LN27@Decompress:
; Line 89
	lea	eax, DWORD PTR _item$73831[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$73832[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z	; CArc::GetItem
	mov	DWORD PTR ___result__$73838[ebp], eax
	cmp	DWORD PTR ___result__$73838[ebp], 0
	je	SHORT $LN26@Decompress
	mov	edx, DWORD PTR ___result__$73838[ebp]
	mov	DWORD PTR $T75277[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _item$73831[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75277[ebp]
	jmp	$LN40@Decompress
$LN26@Decompress:
; Line 91
	jmp	$LN25@Decompress
$LN28@Decompress:
; Line 94
	mov	BYTE PTR _item$73831[ebp+48], 0
; Line 95
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+30]
	test	ecx, ecx
	jne	$LN25@Decompress
	mov	edx, DWORD PTR _arc$[ebp]
	movzx	eax, BYTE PTR [edx+220]
	test	eax, eax
	je	$LN25@Decompress
; Line 97
	lea	ecx, DWORD PTR _item$73831[ebp+48]
	push	ecx
	mov	edx, DWORD PTR _i$73832[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream
	mov	DWORD PTR ___result__$73843[ebp], eax
	cmp	DWORD PTR ___result__$73843[ebp], 0
	je	SHORT $LN25@Decompress
	mov	eax, DWORD PTR ___result__$73843[ebp]
	mov	DWORD PTR $T75278[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _item$73831[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75278[ebp]
	jmp	$LN40@Decompress
$LN25@Decompress:
; Line 103
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+30]
	test	edx, edx
	jne	SHORT $LN22@Decompress
	movzx	eax, BYTE PTR _item$73831[ebp+48]
	test	eax, eax
	je	SHORT $LN22@Decompress
; Line 104
	jmp	$LN30@Decompress
$LN22@Decompress:
; Line 107
	movzx	ecx, BYTE PTR _elimIsPossible$[ebp]
	test	ecx, ecx
	je	$LN21@Decompress
; Line 111
	lea	edx, DWORD PTR _item$73831[ebp+24]
	mov	DWORD PTR _s$73848[ebp], edx
; Line 115
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _s$73848[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsPath1PrefixedByPath2@@YG_NPB_W0@Z	; IsPath1PrefixedByPath2
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@Decompress
; Line 116
	mov	BYTE PTR _elimIsPossible$[ebp], 0
; Line 117
	jmp	SHORT $LN21@Decompress
$LN20@Decompress:
; Line 119
	mov	ecx, DWORD PTR _s$73848[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, eax
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	cx, WORD PTR [esi+eax*2]
	mov	WORD PTR _c$73851[ebp], cx
; Line 120
	movzx	edx, WORD PTR _c$73851[ebp]
	test	edx, edx
	jne	SHORT $LN18@Decompress
; Line 122
	movzx	eax, BYTE PTR _item$73831[ebp+51]
	test	eax, eax
	jne	SHORT $LN17@Decompress
; Line 123
	mov	BYTE PTR _elimIsPossible$[ebp], 0
$LN17@Decompress:
; Line 124
	jmp	SHORT $LN21@Decompress
$LN18@Decompress:
; Line 125
	movzx	ecx, WORD PTR _c$73851[ebp]
	push	ecx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN21@Decompress
; Line 126
	mov	BYTE PTR _elimIsPossible$[ebp], 0
$LN21@Decompress:
; Line 130
	movzx	eax, BYTE PTR _allFilesAreAllowed$[ebp]
	test	eax, eax
	jne	SHORT $LN14@Decompress
; Line 132
	lea	ecx, DWORD PTR _item$73831[ebp]
	push	ecx
	mov	edx, DWORD PTR _wildcardCensor$[ebp]
	push	edx
	call	?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z ; CensorNode_CheckPath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@Decompress
; Line 133
	jmp	$LN30@Decompress
$LN14@Decompress:
; Line 136
	mov	ecx, DWORD PTR _i$73832[ebp]
	push	ecx
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 137
	jmp	$LN30@Decompress
$LN29@Decompress:
; Line 139
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	test	eax, eax
	jne	$LN12@Decompress
; Line 141
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 142
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T75279[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _item$73831[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75279[ebp]
	jmp	$LN40@Decompress
$LN12@Decompress:
; Line 144
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _item$73831[ebp]
	call	??1CReadArcItem@@QAE@XZ
$LN33@Decompress:
; Line 146
	movzx	ecx, BYTE PTR _elimIsPossible$[ebp]
	test	ecx, ecx
	je	SHORT $LN11@Decompress
; Line 148
	lea	edx, DWORD PTR _elimPrefix$[ebp]
	push	edx
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
$LN11@Decompress:
; Line 158
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@Decompress
; Line 159
	push	OFFSET $SG73863
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
	jmp	$LN9@Decompress
$LN10@Decompress:
; Line 165
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::CreateComplexDir
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN9@Decompress
; Line 167
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$73866[ebp], eax
; Line 168
	cmp	DWORD PTR _res$73866[ebp], 0
	jne	SHORT $LN7@Decompress
; Line 169
	mov	DWORD PTR _res$73866[ebp], -2147467259	; 80004005H
$LN7@Decompress:
; Line 170
	push	OFFSET $SG73870
	mov	ecx, DWORD PTR _errorMessage$[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 171
	lea	edx, DWORD PTR _outDir$[ebp]
	push	edx
	mov	ecx, DWORD PTR _errorMessage$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 172
	mov	eax, DWORD PTR _res$73866[ebp]
	mov	DWORD PTR $T75280[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75280[ebp]
	jmp	$LN40@Decompress
$LN9@Decompress:
; Line 183
	mov	ecx, DWORD PTR _packSize$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _packSize$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _removePathParts$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outDir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+39]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+37]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	neg	eax
	sbb	eax, eax
	and	eax, DWORD PTR _wildcardCensor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _ecs$[ebp]
	call	?Init@CArchiveExtractCallback@@QAEXABUCExtractNtOptions@@PBVCCensorNode@NWildcard@@PBVCArc@@PAUIFolderArchiveExtractCallback@@_N4ABVUString@@ABV?$CObjectVector@VUString@@@@4_K@Z ; CArchiveExtractCallback::Init
; Line 190
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	$LN6@Decompress
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+39]
	test	edx, edx
	jne	$LN6@Decompress
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	$LN6@Decompress
; Line 192
	lea	edx, DWORD PTR _realIndices$[ebp]
	push	edx
	mov	ecx, DWORD PTR _ecs$[ebp]
	call	?PrepareHardLinks@CArchiveExtractCallback@@QAEJPBV?$CRecordVector@I@@@Z ; CArchiveExtractCallback::PrepareHardLinks
	mov	DWORD PTR ___result__$73873[ebp], eax
	cmp	DWORD PTR ___result__$73873[ebp], 0
	je	SHORT $LN6@Decompress
	mov	eax, DWORD PTR ___result__$73873[ebp]
	mov	DWORD PTR $T75281[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75281[ebp]
	jmp	$LN40@Decompress
$LN6@Decompress:
; Line 199
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+39]
	test	edx, edx
	je	SHORT $LN42@Decompress
	movzx	eax, BYTE PTR _calcCrc$[ebp]
	test	eax, eax
	jne	SHORT $LN42@Decompress
	mov	DWORD PTR tv401[ebp], 1
	jmp	SHORT $LN43@Decompress
$LN42@Decompress:
	mov	DWORD PTR tv401[ebp], 0
$LN43@Decompress:
	mov	ecx, DWORD PTR tv401[ebp]
	mov	DWORD PTR _testMode$[ebp], ecx
; Line 200
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	$LN4@Decompress
; Line 202
	mov	esi, esp
	mov	ecx, DWORD PTR _ecs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _testMode$[ebp]
	push	edx
	push	-1
	push	0
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 203
	lea	ecx, DWORD PTR _prop$73881[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 204
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73881[ebp]
	push	ecx
	push	44					; 0000002cH
	mov	edx, DWORD PTR _archive$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@Decompress
; Line 205
	mov	eax, DWORD PTR _stdInProcessed$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$73881[ebp]
	push	ecx
	call	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
$LN3@Decompress:
; Line 206
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _prop$73881[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 207
	jmp	SHORT $LN2@Decompress
$LN4@Decompress:
; Line 208
	mov	esi, esp
	mov	edx, DWORD PTR _ecs$[ebp]
	push	edx
	mov	eax, DWORD PTR _testMode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	push	eax
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	?Front@?$CRecordVector@I@@QAEAAIXZ	; CRecordVector<unsigned int>::Front
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN2@Decompress:
; Line 209
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN1@Decompress
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	jne	SHORT $LN1@Decompress
; Line 210
	mov	ecx, DWORD PTR _ecs$[ebp]
	call	?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ ; CArchiveExtractCallback::SetDirsTimes
	mov	DWORD PTR _result$[ebp], eax
$LN1@Decompress:
; Line 211
	mov	esi, esp
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T75284[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _replaceName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _outDir$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _realIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	eax, DWORD PTR $T75284[ebp]
$LN40@Decompress:
; Line 212
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@Decompress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
$LN67@Decompress:
	DD	10					; 0000000aH
	DD	$LN66@Decompress
$LN66@Decompress:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN55@Decompress
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN56@Decompress
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN57@Decompress
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN58@Decompress
	DD	-124					; ffffff84H
	DD	12					; 0000000cH
	DD	$LN59@Decompress
	DD	-144					; ffffff70H
	DD	12					; 0000000cH
	DD	$LN60@Decompress
	DD	-164					; ffffff5cH
	DD	12					; 0000000cH
	DD	$LN61@Decompress
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN62@Decompress
	DD	-256					; ffffff00H
	DD	64					; 00000040H
	DD	$LN63@Decompress
	DD	-316					; fffffec4H
	DD	16					; 00000010H
	DD	$LN64@Decompress
$LN64@Decompress:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN63@Decompress:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN62@Decompress:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN61@Decompress:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN60@Decompress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN59@Decompress:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN58@Decompress:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN57@Decompress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN56@Decompress:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN55@Decompress:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$0:
	lea	ecx, DWORD PTR _realIndices$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$1:
	lea	ecx, DWORD PTR _removePathParts$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$2:
	lea	ecx, DWORD PTR _outDir$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$3:
	lea	ecx, DWORD PTR _replaceName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$4:
	lea	ecx, DWORD PTR $T75275[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$5:
	lea	ecx, DWORD PTR $T75274[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$6:
	lea	ecx, DWORD PTR _elimPrefix$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$7:
	lea	ecx, DWORD PTR _outDirReduced$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$8:
	lea	ecx, DWORD PTR _dirPrefix$73821[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$9:
	lea	ecx, DWORD PTR _item$73831[ebp]
	jmp	??1CReadArcItem@@QAE@XZ
__unwindfunclet$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z$10:
	lea	ecx, DWORD PTR _prop$73881[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-384]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DecompressArchive@@YGJPAVCCodecs@@ABUCArchiveLink@@_KABVCCensorNode@NWildcard@@ABUCExtractOptions@@_NPAUIExtractCallbackUI@@PAVCArchiveExtractCallback@@AAVUString@@AA_K@Z ENDP ; DecompressArchive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPathSepar@@YG_N_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_c$ = 8							; size = 2
?IsPathSepar@@YG_N_W@Z PROC				; IsPathSepar, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@IsPathSepa
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN3@IsPathSepa
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@IsPathSepa
$LN3@IsPathSepa:
	mov	DWORD PTR tv68[ebp], 1
$LN4@IsPathSepa:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPathSepar@@YG_N_W@Z ENDP				; IsPathSepar
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@UString@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@UString@@QBE_WXZ PROC				; UString::Back, COMDAT
; _this$ = ecx
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ax, WORD PTR [eax+ecx*2-2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@UString@@QBE_WXZ ENDP				; UString::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@UString@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@UString@@QAEXXZ PROC			; UString::DeleteBack, COMDAT
; _this$ = ecx
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@UString@@QAEXXZ ENDP			; UString::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.h
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T75327 = -4						; size = 4
_prop$ = 8						; size = 4
_value$ = 12						; size = 4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z PROC ; ConvertPropVariantToUInt64, COMDAT
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 19
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 21			; 00000015H
	ja	SHORT $LN1@ConvertPro
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN11@ConvertPro[edx]
	jmp	DWORD PTR $LN12@ConvertPro[eax*4]
$LN6@ConvertPro:
; Line 21
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN5@ConvertPro:
; Line 22
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN4@ConvertPro:
; Line 23
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [ecx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN3@ConvertPro:
; Line 24
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN2@ConvertPro:
; Line 25
	xor	al, al
	jmp	SHORT $LN10@ConvertPro
$LN1@ConvertPro:
; Line 26
	mov	DWORD PTR $T75327[ebp], 151199		; 00024e9fH
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T75327[ebp]
	push	edx
	call	__CxxThrowException@8
$LN10@ConvertPro:
; Line 28
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@ConvertPro:
	DD	$LN2@ConvertPro
	DD	$LN3@ConvertPro
	DD	$LN4@ConvertPro
	DD	$LN5@ConvertPro
	DD	$LN6@ConvertPro
	DD	$LN1@ConvertPro
$LN11@ConvertPro:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	5
	DB	4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ENDP ; ConvertPropVariantToUInt64
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
xdata$x	SEGMENT
__unwindtable$??0CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??0CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CReadArcItem@@QAE@XZ PROC				; CReadArcItem::CReadArcItem, COMDAT
; _this$ = ecx
; Line 248
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 0
; Line 255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+56], 0
; Line 256
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], -1
; Line 258
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::CReadArcItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??1CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CReadArcItem@@QAE@XZ PROC				; CReadArcItem::~CReadArcItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::~CReadArcItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COpenOptions@@QAE@XZ PROC				; COpenOptions::~COpenOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COpenOptions@@QAE@XZ ENDP				; COpenOptions::~COpenOptions
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T75369 = -24						; size = 4
$T75368 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75369[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75369[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T75369[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T75368[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T75368[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T75369[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75382 = -28						; size = 4
$T75381 = -24						; size = 4
_i$74180 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74180[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$74180[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$74180[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74180[ebp], eax
	mov	ecx, DWORD PTR _i$74180[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75382[ebp], edx
	mov	eax, DWORD PTR $T75382[ebp]
	mov	DWORD PTR $T75381[ebp], eax
	cmp	DWORD PTR $T75381[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T75381[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator IInArchive *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator IInArchive *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T75400 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75400[ebp], ecx
	mov	edx, DWORD PTR $T75400[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCArc@@@@QBEIXZ PROC		; CObjectVector<CArc>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCArc@@@@QBEIXZ ENDP		; CObjectVector<CArc>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCArc@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCArc@@@@QAE@XZ PROC			; CObjectVector<CArc>::CObjectVector<CArc>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCArc@@@@QAE@XZ ENDP			; CObjectVector<CArc>::CObjectVector<CArc>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z PROC	; CObjectVector<CArc>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ENDP	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ PROC	; CObjectVector<CArc>::Back, COMDAT
; _this$ = ecx
; Line 454
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ ENDP	; CObjectVector<CArc>::Back
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ PROC	; CObjectVector<CArc>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ENDP	; CObjectVector<CArc>::Back
_TEXT	ENDS
PUBLIC	??_GCArc@@QAEPAXI@Z				; CArc::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCArc@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75419 = -28						; size = 4
$T75418 = -24						; size = 4
_i$74357 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCArc@@@@QAE@XZ PROC			; CObjectVector<CArc>::~CObjectVector<CArc>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74357[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$74357[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$74357[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74357[ebp], eax
	mov	ecx, DWORD PTR _i$74357[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75419[ebp], edx
	mov	eax, DWORD PTR $T75419[ebp]
	mov	DWORD PTR $T75418[ebp], eax
	cmp	DWORD PTR $T75418[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T75418[ebp]
	call	??_GCArc@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCArc@@@@QAE@XZ ENDP			; CObjectVector<CArc>::~CObjectVector<CArc>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T75435 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75435[ebp], ecx
	mov	edx, DWORD PTR $T75435[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@I@@QAEAAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@I@@QAEAAIXZ PROC			; CRecordVector<unsigned int>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@I@@QAEAAIXZ ENDP			; CRecordVector<unsigned int>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@_N@@QAE@I@Z
_TEXT	SEGMENT
$T75448 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@_N@@QAE@I@Z PROC				; CObjArray<bool>::CObjArray<bool>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75448[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T75448[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@_N@@QAE@I@Z ENDP				; CObjArray<bool>::CObjArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@_N@@QAE@XZ
_TEXT	SEGMENT
$T75451 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@_N@@QAE@XZ PROC				; CObjArray<bool>::~CObjArray<bool>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75451[ebp], ecx
	mov	edx, DWORD PTR $T75451[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@_N@@QAE@XZ ENDP				; CObjArray<bool>::~CObjArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_N@@QAEPA_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_N@@QAEPA_NXZ PROC			; CObjArray<bool>::operator bool *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_N@@QAEPA_NXZ ENDP			; CObjArray<bool>::operator bool *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
PUBLIC	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ	; CObjectVector<COpenType>::Size
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv83 = -36						; size = 4
$T75461 = -32						; size = 4
$T75460 = -28						; size = 4
_i$74481 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z PROC	; CObjectVector<COpenType>::CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$74481[ebp], 0
	jmp	SHORT $LN3@CObjectVec@3
$LN2@CObjectVec@3:
	mov	ecx, DWORD PTR _i$74481[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74481[ebp], ecx
$LN3@CObjectVec@3:
	mov	edx, DWORD PTR _i$74481[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@3
; Line 427
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75461[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T75461[ebp], 0
	je	SHORT $LN6@CObjectVec@3
	mov	eax, DWORD PTR _i$74481[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T75461[ebp]
	rep movsd
	mov	ecx, DWORD PTR $T75461[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN7@CObjectVec@3
$LN6@CObjectVec@3:
	mov	DWORD PTR tv83[ebp], 0
$LN7@CObjectVec@3:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T75460[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T75460[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@3
$LN4@CObjectVec@3:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T75461[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCOpenType@@@@QAE@ABV0@@Z ENDP	; CObjectVector<COpenType>::CObjectVector<COpenType>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
$T75474 = -24						; size = 4
_i$74491 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::~CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74491[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$74491[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$74491[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74491[ebp], eax
	mov	ecx, DWORD PTR _i$74491[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75474[ebp], edx
	mov	eax, DWORD PTR $T75474[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::~CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CArc@@QAE@XZ					; CArc::~CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArc@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArc@@QAEPAXI@Z PROC				; CArc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArc@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArc@@QAEPAXI@Z ENDP				; CArc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
PUBLIC	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArc@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CArc@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArc@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArc@@QAE@XZ PROC					; CArc::~CArc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArc@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArc@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$??1CArc@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CArc@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
__unwindfunclet$??1CArc@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
__unwindfunclet$??1CArc@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArc@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArc@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArc@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArc@@QAE@XZ ENDP					; CArc::~CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ PROC		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ENDP		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T75517 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75517[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75517[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T75520 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75520[ebp], ecx
	mov	edx, DWORD PTR $T75520[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T75532 = -20						; size = 4
$T75531 = -16						; size = 4
_p$74582 = -12						; size = 4
_newCapacity$74581 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74581[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74581[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75531[ebp], eax
	mov	eax, DWORD PTR $T75531[ebp]
	mov	DWORD PTR _p$74582[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74582[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75532[ebp], edx
	mov	eax, DWORD PTR $T75532[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74582[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74581[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z PROC	; CObjectVector<CArc>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ENDP	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T75538 = -20						; size = 4
$T75537 = -16						; size = 4
_p$74596 = -12						; size = 4
_newCapacity$74595 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74595[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74595[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75537[ebp], eax
	mov	eax, DWORD PTR $T75537[ebp]
	mov	DWORD PTR _p$74596[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74596[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75538[ebp], edx
	mov	eax, DWORD PTR $T75538[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74596[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74595[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ PROC		; CObjectVector<COpenType>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ENDP		; CObjectVector<COpenType>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z PROC ; CObjectVector<COpenType>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ENDP ; CObjectVector<COpenType>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T75546 = -20						; size = 4
$T75545 = -16						; size = 4
_p$74612 = -12						; size = 4
_newCapacity$74611 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74611[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74611[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75545[ebp], eax
	mov	eax, DWORD PTR $T75545[ebp]
	mov	DWORD PTR _p$74612[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74612[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75546[ebp], edx
	mov	eax, DWORD PTR $T75546[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74612[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74611[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
