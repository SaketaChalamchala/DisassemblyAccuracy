; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Zip\ZipAddCommon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?GetPos@CBufPtrSeqOutStream@@QBEIXZ		; CBufPtrSeqOutStream::GetPos
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z		; CBufPtrSeqOutStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CBufPtrSeqOutStream@@QAE@XZ			; CBufPtrSeqOutStream::CBufPtrSeqOutStream
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ	; CMyComPtr<ICompressCoder>::operator!
PUBLIC	?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NArchive::NZip::CLzmaEncoder::SetCoderProperties
EXTRN	??0CEncoder@NLzma@NCompress@@QAE@XZ:PROC	; NCompress::NLzma::CEncoder::CEncoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipaddcommon.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv128 = -64						; size = 4
tv79 = -60						; size = 4
$T72423 = -56						; size = 4
$T72422 = -52						; size = 4
$T72421 = -48						; size = 4
$T72420 = -44						; size = 4
$T72417 = -40						; size = 4
$T72416 = -36						; size = 4
$T72413 = -32						; size = 4
$T72412 = -28						; size = 4
___result__$71377 = -24					; size = 4
___result__$71374 = -20					; size = 4
_outStream$ = -12					; size = 4
_outStreamSpec$ = -4					; size = 4
_this$ = 8						; size = 4
_propIDs$ = 12						; size = 4
_props$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z PROC ; NArchive::NZip::CLzmaEncoder::SetCoderProperties
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@SetCoderPr
; Line 55
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72413[ebp], eax
	cmp	DWORD PTR $T72413[ebp], 0
	je	SHORT $LN7@SetCoderPr
	mov	ecx, DWORD PTR $T72413[ebp]
	call	??0CEncoder@NLzma@NCompress@@QAE@XZ	; NCompress::NLzma::CEncoder::CEncoder
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@SetCoderPr
$LN7@SetCoderPr:
	mov	DWORD PTR tv79[ebp], 0
$LN8@SetCoderPr:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T72412[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72412[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
$LN4@SetCoderPr:
; Line 58
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72417[ebp], eax
	cmp	DWORD PTR $T72417[ebp], 0
	je	SHORT $LN9@SetCoderPr
	mov	ecx, DWORD PTR $T72417[ebp]
	call	??0CBufPtrSeqOutStream@@QAE@XZ
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN10@SetCoderPr
$LN9@SetCoderPr:
	mov	DWORD PTR tv128[ebp], 0
$LN10@SetCoderPr:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR $T72416[ebp], eax
	mov	ecx, DWORD PTR $T72416[ebp]
	mov	DWORD PTR _outStreamSpec$[ebp], ecx
; Line 59
	mov	edx, DWORD PTR _outStreamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Line 60
	push	5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z	; CBufPtrSeqOutStream::Init
; Line 61
	mov	esi, esp
	mov	ecx, DWORD PTR _numProps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _props$[ebp]
	push	edx
	mov	eax, DWORD PTR _propIDs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71374[ebp], eax
	cmp	DWORD PTR ___result__$71374[ebp], 0
	je	SHORT $LN3@SetCoderPr
	mov	ecx, DWORD PTR ___result__$71374[ebp]
	mov	DWORD PTR $T72420[ebp], ecx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72420[ebp]
	jmp	$LN5@SetCoderPr
$LN3@SetCoderPr:
; Line 62
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 8
	mov	eax, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71377[ebp], eax
	cmp	DWORD PTR ___result__$71377[ebp], 0
	je	SHORT $LN2@SetCoderPr
	mov	edx, DWORD PTR ___result__$71377[ebp]
	mov	DWORD PTR $T72421[ebp], edx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72421[ebp]
	jmp	SHORT $LN5@SetCoderPr
$LN2@SetCoderPr:
; Line 63
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?GetPos@CBufPtrSeqOutStream@@QBEIXZ	; CBufPtrSeqOutStream::GetPos
	cmp	eax, 5
	je	SHORT $LN1@SetCoderPr
; Line 64
	mov	DWORD PTR $T72422[ebp], -2147467259	; 80004005H
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72422[ebp]
	jmp	SHORT $LN5@SetCoderPr
$LN1@SetCoderPr:
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 15			; 0000000fH
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+17], 5
; Line 67
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+18], 5
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0
; Line 69
	mov	DWORD PTR $T72423[ebp], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T72423[ebp]
$LN5@SetCoderPr:
; Line 70
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SetCoderPr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN13@SetCoderPr:
	DD	1
	DD	$LN12@SetCoderPr
$LN12@SetCoderPr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@SetCoderPr
$LN11@SetCoderPr:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::NZip::CLzmaEncoder::SetCoderProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z PROC		; CBufPtrSeqOutStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 110
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z ENDP		; CBufPtrSeqOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPos@CBufPtrSeqOutStream@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPos@CBufPtrSeqOutStream@@QBEIXZ PROC		; CBufPtrSeqOutStream::GetPos, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPos@CBufPtrSeqOutStream@@QBEIXZ ENDP		; CBufPtrSeqOutStream::GetPos
_TEXT	ENDS
PUBLIC	??_7CBufPtrSeqOutStream@@6B@			; CBufPtrSeqOutStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CBufPtrSeqOutStream@@6B@			; CBufPtrSeqOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufPtrSeqOutStream@@@8			; CBufPtrSeqOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CBufPtrSeqOutStream@@8			; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufPtrSeqOutStream@@8			; CBufPtrSeqOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBufPtrSeqOutStream@@8		; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ; CBufPtrSeqOutStream::QueryInterface
PUBLIC	?AddRef@CBufPtrSeqOutStream@@UAGKXZ		; CBufPtrSeqOutStream::AddRef
PUBLIC	?Release@CBufPtrSeqOutStream@@UAGKXZ		; CBufPtrSeqOutStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z:PROC	; CBufPtrSeqOutStream::Write
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 DD FLAT:??_R0?AVCBufPtrSeqOutStream@@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R2CBufPtrSeqOutStream@@8 DD FLAT:??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R3CBufPtrSeqOutStream@@8 DD 00H			; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufPtrSeqOutStream@@@8
_DATA	SEGMENT
??_R0?AVCBufPtrSeqOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CBufPtrSeqOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufPtrSeqOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBufPtrSeqOutStream@@6B@
rdata$r	SEGMENT
??_R4CBufPtrSeqOutStream@@6B@ DD 00H			; CBufPtrSeqOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufPtrSeqOutStream@@@8
	DD	FLAT:??_R3CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBufPtrSeqOutStream@@6B@
CONST	SEGMENT
??_7CBufPtrSeqOutStream@@6B@ DD FLAT:??_R4CBufPtrSeqOutStream@@6B@ ; CBufPtrSeqOutStream::`vftable'
	DD	FLAT:?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBufPtrSeqOutStream@@UAGKXZ
	DD	FLAT:?Release@CBufPtrSeqOutStream@@UAGKXZ
	DD	FLAT:?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBufPtrSeqOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBufPtrSeqOutStream@@QAE@XZ PROC			; CBufPtrSeqOutStream::CBufPtrSeqOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBufPtrSeqOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBufPtrSeqOutStream@@QAE@XZ ENDP			; CBufPtrSeqOutStream::CBufPtrSeqOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISequentialOutStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBufPtrSeqOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 113
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBufPtrSeqOutStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBufPtrSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBufPtrSeqOutStream@@UAGKXZ PROC		; CBufPtrSeqOutStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBufPtrSeqOutStream@@UAGKXZ ENDP		; CBufPtrSeqOutStream::AddRef
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBufPtrSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T72456 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBufPtrSeqOutStream@@UAGKXZ PROC		; CBufPtrSeqOutStream::Release, COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72456[ebp], edx
	mov	eax, DWORD PTR $T72456[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBufPtrSeqOutStream@@UAGKXZ ENDP		; CBufPtrSeqOutStream::Release
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CLzmaEncoder::Code
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
___result__$71395 = -4					; size = 4
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_outStream$ = 16					; size = 4
_inSize$ = 20						; size = 4
_outSize$ = 24						; size = 4
_progress$ = 28						; size = 4
?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NArchive::NZip::CLzmaEncoder::Code
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipaddcommon.cpp
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$71395[ebp], eax
	cmp	DWORD PTR ___result__$71395[ebp], 0
	je	SHORT $LN1@Code
	mov	eax, DWORD PTR ___result__$71395[ebp]
	jmp	SHORT $LN2@Code
$LN1@Code:
; Line 76
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR tv74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Code:
; Line 77
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NArchive::NZip::CLzmaEncoder::Code
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::NZip::CAddCommon::CAddCommon
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
__ehfuncinfo$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_options$ = 8						; size = 4
??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z PROC ; NArchive::NZip::CAddCommon::CAddCommon
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ENDP ; NArchive::NZip::CAddCommon::CAddCommon
PUBLIC	??1?$CRecordVector@E@@QAE@XZ			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
PUBLIC	??1CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::~CBaseProps
PUBLIC	??0?$CRecordVector@E@@QAE@ABV0@@Z		; CRecordVector<unsigned char>::CRecordVector<unsigned char>
PUBLIC	??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CBaseProps::CBaseProps
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1
__ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z PROC ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@E@@QAE@ABV0@@Z	; CRecordVector<unsigned char>::CRecordVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR [edx+36], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [edx+64], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ENDP ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::~CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::~CBaseProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ PROC	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseProps@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ENDP	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T72505 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72505[ebp], ecx
	mov	edx, DWORD PTR $T72505[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z PROC		; NArchive::NZip::CBaseProps::CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+21], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+22], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::NZip::CBaseProps::CBaseProps
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
_TEXT	ENDS
PUBLIC	??1CAddCommon@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CAddCommon::~CAddCommon
EXTRN	_MidFree@4:PROC
xdata$x	SEGMENT
__unwindtable$??1CAddCommon@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$2
__ehfuncinfo$??1CAddCommon@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CAddCommon@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAddCommon@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CAddCommon::~CAddCommon
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipaddcommon.cpp
; Line 88
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 89
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	_MidFree@4
; Line 90
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CAddCommon@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAddCommon@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CAddCommon::~CAddCommon
PUBLIC	?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z ; NArchive::NZip::CAddCommon::CalcStreamCRC
EXTRN	@CrcUpdate@12:PROC
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$71434 = -24					; size = 4
_processed$71433 = -16					; size = 4
_crc$ = -8						; size = 4
_this$ = -4						; size = 4
_inStream$ = 8						; size = 4
_resultCRC$ = 12					; size = 4
?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z PROC ; NArchive::NZip::CAddCommon::CalcStreamCRC
; _this$ = ecx
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN6@CalcStream
; Line 98
	push	65536					; 00010000H
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 99
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	jne	SHORT $LN6@CalcStream
; Line 100
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN7@CalcStream
$LN6@CalcStream:
; Line 103
	mov	DWORD PTR _crc$[ebp], -1
$LN4@CalcStream:
; Line 107
	mov	esi, esp
	lea	eax, DWORD PTR _processed$71433[ebp]
	push	eax
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71434[ebp], eax
	cmp	DWORD PTR ___result__$71434[ebp], 0
	je	SHORT $LN2@CalcStream
	mov	eax, DWORD PTR ___result__$71434[ebp]
	jmp	SHORT $LN7@CalcStream
$LN2@CalcStream:
; Line 108
	cmp	DWORD PTR _processed$71433[ebp], 0
	jne	SHORT $LN1@CalcStream
; Line 110
	mov	ecx, DWORD PTR _crc$[ebp]
	xor	ecx, -1
	mov	edx, DWORD PTR _resultCRC$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 111
	xor	eax, eax
	jmp	SHORT $LN7@CalcStream
$LN1@CalcStream:
; Line 113
	mov	eax, DWORD PTR _processed$71433[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	ecx, DWORD PTR _crc$[ebp]
	call	@CrcUpdate@12
	mov	DWORD PTR _crc$[ebp], eax
; Line 114
	jmp	SHORT $LN4@CalcStream
$LN7@CalcStream:
; Line 115
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CalcStream
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@CalcStream:
	DD	1
	DD	$LN10@CalcStream
$LN10@CalcStream:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@CalcStream
$LN9@CalcStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z ENDP ; NArchive::NZip::CAddCommon::CalcStreamCRC
_TEXT	ENDS
PUBLIC	?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetAddPackSize
PUBLIC	?GetSize@CInStreamWithCRC@@QBE_KXZ		; CInStreamWithCRC::GetSize
PUBLIC	?GetCRC@CInStreamWithCRC@@QBEIXZ		; CInStreamWithCRC::GetCRC
PUBLIC	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
PUBLIC	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetCoderProperties>
PUBLIC	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??0CLzmaEncoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLzmaEncoder::CLzmaEncoder
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??A?$CRecordVector@E@@QAEAAEI@Z			; CRecordVector<unsigned char>::operator[]
PUBLIC	??0CEncoder@NZip@NCrypto@@QAE@XZ		; NCrypto::NZip::CEncoder::CEncoder
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z	; NCrypto::NWzAes::CBaseCoder::SetKeyMode
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	??0CEncoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CEncoder::CEncoder
PUBLIC	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ	; CMyComPtr<ICompressFilter>::operator!
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ	; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
PUBLIC	??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ	; CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser
PUBLIC	?Size@?$CRecordVector@E@@QBEIXZ			; CRecordVector<unsigned char>::Size
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	?Init@CInStreamWithCRC@@QAEXXZ			; CInStreamWithCRC::Init
PUBLIC	?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z ; CInStreamWithCRC::SetStream
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??0CInStreamWithCRC@@QAE@XZ			; CInStreamWithCRC::CInStreamWithCRC
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ; NArchive::NZip::CAddCommon::Compress
EXTRN	?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z:PROC ; NCrypto::NWzAes::CEncoder::WriteFooter
EXTRN	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:PROC ; CProps::SetCoderProps
EXTRN	_IID_ICompressSetCoderProperties:BYTE
EXTRN	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z:PROC ; CreateCoder
EXTRN	??0CEncoder@NPpmdZip@NCompress@@QAE@XZ:PROC	; NCompress::NPpmdZip::CEncoder::CEncoder
EXTRN	?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z:PROC ; NCrypto::NZip::CEncoder::WriteHeader_Check16
EXTRN	?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z:PROC ; NCrypto::NWzAes::CEncoder::WriteHeader
EXTRN	??0CFilterCoder@@QAE@_N@Z:PROC			; CFilterCoder::CFilterCoder
EXTRN	_IID_IInStream:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$9
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$10
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$11
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$12
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1115 = -420						; size = 4
tv1114 = -416						; size = 4
tv1103 = -412						; size = 8
tv1102 = -404						; size = 4
tv705 = -400						; size = 4
tv625 = -396						; size = 4
tv561 = -392						; size = 4
tv505 = -388						; size = 4
tv497 = -384						; size = 4
tv480 = -380						; size = 4
tv451 = -376						; size = 4
tv424 = -372						; size = 4
tv413 = -368						; size = 4
tv329 = -364						; size = 4
tv233 = -360						; size = 4
tv201 = -356						; size = 4
tv202 = -352						; size = 4
tv193 = -348						; size = 4
tv92 = -344						; size = 4
$T72583 = -340						; size = 4
$T72580 = -336						; size = 4
$T72579 = -332						; size = 4
$T72578 = -328						; size = 4
$T72577 = -324						; size = 4
$T72576 = -320						; size = 4
$T72573 = -316						; size = 4
$T72572 = -312						; size = 4
$T72569 = -308						; size = 4
$T72568 = -304						; size = 4
$T72565 = -300						; size = 4
$T72564 = -296						; size = 4
$T72563 = -292						; size = 4
$T72560 = -288						; size = 4
$T72559 = -284						; size = 4
$T72558 = -280						; size = 4
$T72557 = -276						; size = 4
$T72556 = -272						; size = 4
$T72555 = -268						; size = 4
$T72554 = -264						; size = 4
$T72551 = -260						; size = 4
$T72550 = -256						; size = 4
$T72549 = -252						; size = 4
$T72548 = -248						; size = 4
$T72545 = -244						; size = 4
$T72544 = -240						; size = 4
$T72539 = -236						; size = 4
$T72538 = -232						; size = 4
$T72537 = -228						; size = 4
$T72536 = -224						; size = 4
$T72535 = -220						; size = 4
$T72534 = -216						; size = 4
$T72531 = -212						; size = 4
$T72530 = -208						; size = 4
___result__$71605 = -204				; size = 4
___result__$71602 = -200				; size = 4
___result__$71598 = -196				; size = 4
___result__$71594 = -192				; size = 4
_outStreamNew$71590 = -184				; size = 4
___result__$71586 = -176				; size = 4
_setCoderProps$71580 = -168				; size = 4
___result__$71569 = -160				; size = 4
_methodId$71562 = -156					; size = 8
_encoder$71556 = -148					; size = 4
__lzmaEncoder$71549 = -144				; size = 4
___result__$71543 = -140				; size = 4
_outStreamNew$71540 = -132				; size = 4
___result__$71526 = -124				; size = 4
___result__$71523 = -120				; size = 4
___result__$71519 = -116				; size = 4
___result__$71516 = -112				; size = 4
___result__$71513 = -108				; size = 4
_check$71511 = -104					; size = 4
___result__$71500 = -100				; size = 4
___result__$71495 = -96					; size = 4
___result__$71480 = -92					; size = 4
___result__$71477 = -88					; size = 4
___result__$71474 = -84					; size = 4
_i$71469 = -80						; size = 4
_outStreamReleaser$ = -72				; size = 4
_method$ = -62						; size = 1
_crc_IsCalculated$ = -61				; size = 1
_crc$ = -56						; size = 4
_numTestMethods$ = -48					; size = 4
_inStream2$71453 = -40					; size = 4
_inCrcStream$ = -28					; size = 4
_inCrcStreamSpec$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_outStream$ = 12					; size = 4
___formal$ = 16						; size = 4
_progress$ = 20						; size = 4
_opRes$ = 24						; size = 4
?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z PROC ; NArchive::NZip::CAddCommon::Compress
; _this$ = ecx
; Line 122
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 123
	cmp	DWORD PTR _inStream$[ebp], 0
	jne	SHORT $LN63@Compress
; Line 126
	mov	eax, -2147024809			; 80070057H
	jmp	$LN64@Compress
$LN63@Compress:
; Line 130
	mov	DWORD PTR _inCrcStreamSpec$[ebp], 0
; Line 131
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 133
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 135
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IInStream
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 137
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	test	eax, eax
	je	SHORT $LN62@Compress
; Line 139
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72531[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T72531[ebp], 0
	je	SHORT $LN66@Compress
	mov	ecx, DWORD PTR $T72531[ebp]
	call	??0CInStreamWithCRC@@QAE@XZ
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN67@Compress
$LN66@Compress:
	mov	DWORD PTR tv92[ebp], 0
$LN67@Compress:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T72530[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T72530[ebp]
	mov	DWORD PTR _inCrcStreamSpec$[ebp], edx
; Line 140
	mov	eax, DWORD PTR _inCrcStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 141
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	mov	ecx, DWORD PTR _inCrcStreamSpec$[ebp]
	call	?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z ; CInStreamWithCRC::SetStream
; Line 142
	mov	ecx, DWORD PTR _inCrcStreamSpec$[ebp]
	call	?Init@CInStreamWithCRC@@QAEXXZ		; CInStreamWithCRC::Init
; Line 144
	jmp	SHORT $LN61@Compress
$LN62@Compress:
; Line 147
	mov	DWORD PTR $T72534[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72534[ebp]
	jmp	$LN64@Compress
$LN61@Compress:
; Line 155
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Line 157
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@E@@QBEIXZ		; CRecordVector<unsigned char>::Size
	mov	DWORD PTR _numTestMethods$[ebp], eax
; Line 159
	cmp	DWORD PTR _numTestMethods$[ebp], 1
	jbe	SHORT $LN60@Compress
	cmp	DWORD PTR _inCrcStreamSpec$[ebp], 0
	jne	SHORT $LN60@Compress
; Line 160
	mov	DWORD PTR _numTestMethods$[ebp], 1
$LN60@Compress:
; Line 162
	mov	DWORD PTR _crc$[ebp], 0
; Line 163
	mov	BYTE PTR _crc_IsCalculated$[ebp], 0
; Line 165
	mov	BYTE PTR _method$[ebp], 0
; Line 166
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 167
	mov	ecx, DWORD PTR _opRes$[ebp]
	mov	BYTE PTR [ecx+22], 10			; 0000000aH
; Line 168
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	BYTE PTR [edx+23], 0
; Line 170
	mov	DWORD PTR _i$71469[ebp], 0
	jmp	SHORT $LN59@Compress
$LN58@Compress:
	mov	eax, DWORD PTR _i$71469[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71469[ebp], eax
$LN59@Compress:
	mov	ecx, DWORD PTR _i$71469[ebp]
	cmp	ecx, DWORD PTR _numTestMethods$[ebp]
	jae	$LN57@Compress
; Line 172
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	BYTE PTR [edx+22], 10			; 0000000aH
; Line 173
	cmp	DWORD PTR _inCrcStreamSpec$[ebp], 0
	je	SHORT $LN56@Compress
; Line 174
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _inCrcStreamSpec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inCrcStreamSpec$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71474[ebp], eax
	cmp	DWORD PTR ___result__$71474[ebp], 0
	je	SHORT $LN56@Compress
	mov	ecx, DWORD PTR ___result__$71474[ebp]
	mov	DWORD PTR $T72535[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72535[ebp]
	jmp	$LN64@Compress
$LN56@Compress:
; Line 175
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71477[ebp], eax
	cmp	DWORD PTR ___result__$71477[ebp], 0
	je	SHORT $LN54@Compress
	mov	eax, DWORD PTR ___result__$71477[ebp]
	mov	DWORD PTR $T72536[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72536[ebp]
	jmp	$LN64@Compress
$LN54@Compress:
; Line 176
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71480[ebp], eax
	cmp	DWORD PTR ___result__$71480[ebp], 0
	je	SHORT $LN53@Compress
	mov	edx, DWORD PTR ___result__$71480[ebp]
	mov	DWORD PTR $T72537[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72537[ebp]
	jmp	$LN64@Compress
$LN53@Compress:
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	$LN52@Compress
; Line 180
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	BYTE PTR [edx+22], 20			; 00000014H
; Line 182
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	movzx	eax, al
	test	eax, eax
	je	$LN51@Compress
; Line 184
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72539[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T72539[ebp], 0
	je	SHORT $LN68@Compress
	push	1
	mov	ecx, DWORD PTR $T72539[ebp]
	call	??0CFilterCoder@@QAE@_N@Z		; CFilterCoder::CFilterCoder
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN69@Compress
$LN68@Compress:
	mov	DWORD PTR tv193[ebp], 0
$LN69@Compress:
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR $T72538[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72538[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 185
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR tv202[ebp], edx
	cmp	DWORD PTR tv202[ebp], 0
	je	SHORT $LN70@Compress
	mov	eax, DWORD PTR tv202[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN71@Compress
$LN70@Compress:
	mov	DWORD PTR tv201[ebp], 0
$LN71@Compress:
	mov	ecx, DWORD PTR tv201[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
$LN51@Compress:
; Line 188
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	$LN50@Compress
; Line 190
	mov	ecx, DWORD PTR _opRes$[ebp]
	mov	BYTE PTR [ecx+22], 51			; 00000033H
; Line 191
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+88]
	add	ecx, 148				; 00000094H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	eax, al
	test	eax, eax
	je	$LN49@Compress
; Line 193
	push	552					; 00000228H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72545[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T72545[ebp], 0
	je	SHORT $LN72@Compress
	mov	ecx, DWORD PTR $T72545[ebp]
	call	??0CEncoder@NWzAes@NCrypto@@QAE@XZ
	mov	DWORD PTR tv233[ebp], eax
	jmp	SHORT $LN73@Compress
$LN72@Compress:
	mov	DWORD PTR tv233[ebp], 0
$LN73@Compress:
	mov	ecx, DWORD PTR tv233[ebp]
	mov	DWORD PTR $T72544[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72544[ebp]
	mov	DWORD PTR [edx+100], eax
	mov	ecx, DWORD PTR $T72544[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+88]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ; NCrypto::NWzAes::CBaseCoder::SetKeyMode
; Line 195
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	add	eax, 4
	mov	ecx, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71495[ebp], eax
	cmp	DWORD PTR ___result__$71495[ebp], 0
	je	SHORT $LN49@Compress
	mov	eax, DWORD PTR ___result__$71495[ebp]
	mov	DWORD PTR $T72548[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72548[ebp]
	jmp	$LN64@Compress
$LN49@Compress:
; Line 197
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z ; NCrypto::NWzAes::CEncoder::WriteHeader
	mov	DWORD PTR ___result__$71500[ebp], eax
	cmp	DWORD PTR ___result__$71500[ebp], 0
	je	SHORT $LN47@Compress
	mov	eax, DWORD PTR ___result__$71500[ebp]
	mov	DWORD PTR $T72549[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72549[ebp]
	jmp	$LN64@Compress
$LN47@Compress:
; Line 199
	jmp	$LN46@Compress
$LN50@Compress:
; Line 201
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	add	ecx, 148				; 00000094H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	edx, al
	test	edx, edx
	je	$LN45@Compress
; Line 203
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72551[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T72551[ebp], 0
	je	SHORT $LN74@Compress
	mov	ecx, DWORD PTR $T72551[ebp]
	call	??0CEncoder@NZip@NCrypto@@QAE@XZ
	mov	DWORD PTR tv329[ebp], eax
	jmp	SHORT $LN75@Compress
$LN74@Compress:
	mov	DWORD PTR tv329[ebp], 0
$LN75@Compress:
	mov	eax, DWORD PTR tv329[ebp]
	mov	DWORD PTR $T72550[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T72550[ebp]
	mov	DWORD PTR [ecx+96], edx
	mov	eax, DWORD PTR $T72550[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	add	edx, 4
	mov	eax, DWORD PTR [eax+4]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN45@Compress:
; Line 211
	movzx	edx, BYTE PTR _crc_IsCalculated$[ebp]
	test	edx, edx
	jne	$LN44@Compress
; Line 213
	lea	eax, DWORD PTR _crc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z ; NArchive::NZip::CAddCommon::CalcStreamCRC
	mov	DWORD PTR ___result__$71513[ebp], eax
	cmp	DWORD PTR ___result__$71513[ebp], 0
	je	SHORT $LN43@Compress
	mov	edx, DWORD PTR ___result__$71513[ebp]
	mov	DWORD PTR $T72554[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72554[ebp]
	jmp	$LN64@Compress
$LN43@Compress:
; Line 214
	mov	BYTE PTR _crc_IsCalculated$[ebp], 1
; Line 215
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _inCrcStreamSpec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inCrcStreamSpec$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71516[ebp], eax
	cmp	DWORD PTR ___result__$71516[ebp], 0
	je	SHORT $LN44@Compress
	mov	ecx, DWORD PTR ___result__$71516[ebp]
	mov	DWORD PTR $T72555[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72555[ebp]
	jmp	$LN64@Compress
$LN44@Compress:
; Line 217
	mov	edx, DWORD PTR _crc$[ebp]
	shr	edx, 16					; 00000010H
	mov	DWORD PTR _check$71511[ebp], edx
; Line 227
	movzx	eax, WORD PTR _check$71511[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	call	?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z ; NCrypto::NZip::CEncoder::WriteHeader_Check16
	mov	DWORD PTR ___result__$71519[ebp], eax
	cmp	DWORD PTR ___result__$71519[ebp], 0
	je	SHORT $LN46@Compress
	mov	eax, DWORD PTR ___result__$71519[ebp]
	mov	DWORD PTR $T72556[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72556[ebp]
	jmp	$LN64@Compress
$LN46@Compress:
; Line 230
	mov	esi, esp
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+20]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71523[ebp], eax
	cmp	DWORD PTR ___result__$71523[ebp], 0
	je	SHORT $LN40@Compress
	mov	edx, DWORD PTR ___result__$71523[ebp]
	mov	DWORD PTR $T72557[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72557[ebp]
	jmp	$LN64@Compress
$LN40@Compress:
; Line 231
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	add	eax, 8
	mov	ecx, DWORD PTR [ecx+8]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71526[ebp], eax
	cmp	DWORD PTR ___result__$71526[ebp], 0
	je	SHORT $LN39@Compress
	mov	eax, DWORD PTR ___result__$71526[ebp]
	mov	DWORD PTR $T72558[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72558[ebp]
	jmp	$LN64@Compress
$LN39@Compress:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _outStreamReleaser$[ebp], edx
$LN52@Compress:
; Line 235
	mov	eax, DWORD PTR _i$71469[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@E@@QAEAAEI@Z		; CRecordVector<unsigned char>::operator[]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _method$[ebp], cl
; Line 237
	mov	dl, BYTE PTR _method$[ebp]
	mov	BYTE PTR tv413[ebp], dl
	cmp	BYTE PTR tv413[ebp], 0
	je	SHORT $LN36@Compress
	jmp	$LN31@Compress
$LN36@Compress:
; Line 241
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN35@Compress
; Line 243
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72560[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T72560[ebp], 0
	je	SHORT $LN76@Compress
	mov	ecx, DWORD PTR $T72560[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv424[ebp], eax
	jmp	SHORT $LN77@Compress
$LN76@Compress:
	mov	DWORD PTR tv424[ebp], 0
$LN77@Compress:
	mov	ecx, DWORD PTR tv424[ebp]
	mov	DWORD PTR $T72559[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72559[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
$LN35@Compress:
; Line 246
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN34@Compress
; Line 248
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 249
	jmp	SHORT $LN33@Compress
$LN34@Compress:
; Line 250
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
$LN33@Compress:
; Line 251
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv451[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	push	0
	push	0
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	edx, DWORD PTR tv451[ebp]
	push	edx
	mov	eax, DWORD PTR tv451[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71543[ebp], eax
	cmp	DWORD PTR ___result__$71543[ebp], 0
	je	SHORT $LN32@Compress
	mov	eax, DWORD PTR ___result__$71543[ebp]
	mov	DWORD PTR $T72563[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72563[ebp]
	jmp	$LN64@Compress
$LN32@Compress:
; Line 252
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN37@Compress
$LN31@Compress:
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	$LN30@Compress
; Line 259
	movzx	edx, BYTE PTR _method$[ebp]
	cmp	edx, 14					; 0000000eH
	jne	SHORT $LN29@Compress
; Line 261
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 63			; 0000003fH
; Line 262
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72565[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T72565[ebp], 0
	je	SHORT $LN78@Compress
	mov	ecx, DWORD PTR $T72565[ebp]
	call	??0CLzmaEncoder@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR tv480[ebp], eax
	jmp	SHORT $LN79@Compress
$LN78@Compress:
	mov	DWORD PTR tv480[ebp], 0
$LN79@Compress:
	mov	ecx, DWORD PTR tv480[ebp]
	mov	DWORD PTR $T72564[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T72564[ebp]
	mov	DWORD PTR __lzmaEncoder$71549[ebp], edx
; Line 263
	mov	eax, DWORD PTR __lzmaEncoder$71549[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN28@Compress
$LN29@Compress:
; Line 265
	movzx	ecx, BYTE PTR _method$[ebp]
	cmp	ecx, 98					; 00000062H
	jne	SHORT $LN27@Compress
; Line 267
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+84], 63			; 0000003fH
; Line 268
	push	7432					; 00001d08H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72569[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T72569[ebp], 0
	je	SHORT $LN80@Compress
	mov	ecx, DWORD PTR $T72569[ebp]
	call	??0CEncoder@NPpmdZip@NCompress@@QAE@XZ	; NCompress::NPpmdZip::CEncoder::CEncoder
	mov	DWORD PTR tv497[ebp], eax
	jmp	SHORT $LN81@Compress
$LN80@Compress:
	mov	DWORD PTR tv497[ebp], 0
$LN81@Compress:
	mov	eax, DWORD PTR tv497[ebp]
	mov	DWORD PTR $T72568[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T72568[ebp]
	mov	DWORD PTR _encoder$71556[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _encoder$71556[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 271
	jmp	$LN28@Compress
$LN27@Compress:
; Line 274
	mov	al, BYTE PTR _method$[ebp]
	mov	BYTE PTR tv505[ebp], al
	cmp	BYTE PTR tv505[ebp], 12			; 0000000cH
	je	SHORT $LN23@Compress
	jmp	SHORT $LN22@Compress
$LN23@Compress:
; Line 277
	mov	DWORD PTR _methodId$71562[ebp], 262658	; 00040202H
	mov	DWORD PTR _methodId$71562[ebp+4], 0
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+84], 46			; 0000002eH
; Line 279
	jmp	SHORT $LN24@Compress
$LN22@Compress:
; Line 283
	movzx	edx, BYTE PTR _method$[ebp]
	cmp	edx, 9
	sete	al
	add	al, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+84], al
; Line 284
	movzx	eax, BYTE PTR _method$[ebp]
	cdq
	add	eax, 262400				; 00040100H
	adc	edx, 0
	mov	DWORD PTR _methodId$71562[ebp], eax
	mov	DWORD PTR _methodId$71562[ebp+4], edx
$LN24@Compress:
; Line 289
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	push	1
	mov	eax, DWORD PTR _methodId$71562[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _methodId$71562[ebp]
	push	ecx
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ; CreateCoder
	mov	DWORD PTR ___result__$71569[ebp], eax
	cmp	DWORD PTR ___result__$71569[ebp], 0
	je	SHORT $LN21@Compress
	mov	edx, DWORD PTR ___result__$71569[ebp]
	mov	DWORD PTR $T72572[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72572[ebp]
	jmp	$LN64@Compress
$LN21@Compress:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN28@Compress
; Line 291
	mov	DWORD PTR $T72573[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72573[ebp]
	jmp	$LN64@Compress
$LN28@Compress:
; Line 302
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 303
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetCoderProperties>
; Line 304
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	$LN15@Compress
; Line 307
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	je	SHORT $LN82@Compress
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR tv561[ebp], eax
	jmp	SHORT $LN83@Compress
$LN82@Compress:
	mov	DWORD PTR tv561[ebp], 0
$LN83@Compress:
	mov	ecx, DWORD PTR tv561[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$71586[ebp], eax
	cmp	DWORD PTR ___result__$71586[ebp], 0
	je	SHORT $LN15@Compress
	mov	edx, DWORD PTR ___result__$71586[ebp]
	mov	DWORD PTR $T72576[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72576[ebp]
	jmp	$LN64@Compress
$LN15@Compress:
; Line 309
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
$LN30@Compress:
; Line 311
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 312
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN13@Compress
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 314
	jmp	SHORT $LN12@Compress
$LN13@Compress:
; Line 315
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
$LN12@Compress:
; Line 316
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _opRes$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	cmp	edx, ecx
	jle	SHORT $LN11@Compress
; Line 317
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+84]
	mov	BYTE PTR [edx+22], cl
$LN11@Compress:
; Line 318
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv625[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	push	0
	push	0
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR tv625[ebp]
	push	eax
	mov	ecx, DWORD PTR tv625[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71594[ebp], eax
	cmp	DWORD PTR ___result__$71594[ebp], 0
	je	SHORT $LN10@Compress
	mov	ecx, DWORD PTR ___result__$71594[ebp]
	mov	DWORD PTR $T72577[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72577[ebp]
	jmp	$LN64@Compress
$LN10@Compress:
; Line 319
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
$LN37@Compress:
; Line 323
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	$LN9@Compress
; Line 325
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR [edx+28]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71598[ebp], eax
	cmp	DWORD PTR ___result__$71598[ebp], 0
	je	SHORT $LN8@Compress
	mov	ecx, DWORD PTR ___result__$71598[ebp]
	mov	DWORD PTR $T72578[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72578[ebp]
	jmp	$LN64@Compress
$LN8@Compress:
; Line 327
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN9@Compress
; Line 329
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z ; NCrypto::NWzAes::CEncoder::WriteFooter
	mov	DWORD PTR ___result__$71602[ebp], eax
	cmp	DWORD PTR ___result__$71602[ebp], 0
	je	SHORT $LN9@Compress
	mov	eax, DWORD PTR ___result__$71602[ebp]
	mov	DWORD PTR $T72579[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72579[ebp]
	jmp	$LN64@Compress
$LN9@Compress:
; Line 333
	mov	ecx, DWORD PTR _opRes$[ebp]
	add	ecx, 8
	mov	esi, esp
	push	ecx
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71605[ebp], eax
	cmp	DWORD PTR ___result__$71605[ebp], 0
	je	SHORT $LN5@Compress
	mov	eax, DWORD PTR ___result__$71605[ebp]
	mov	DWORD PTR $T72580[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72580[ebp]
	jmp	$LN64@Compress
$LN5@Compress:
; Line 337
	mov	ecx, DWORD PTR _inCrcStreamSpec$[ebp]
	call	?GetCRC@CInStreamWithCRC@@QBEIXZ	; CInStreamWithCRC::GetCRC
	mov	ecx, DWORD PTR _opRes$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 338
	mov	ecx, DWORD PTR _inCrcStreamSpec$[ebp]
	call	?GetSize@CInStreamWithCRC@@QBE_KXZ	; CInStreamWithCRC::GetSize
	mov	ecx, DWORD PTR _opRes$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 348
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	test	eax, eax
	je	SHORT $LN4@Compress
; Line 351
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN84@Compress
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetAddPackSize
	mov	DWORD PTR tv705[ebp], eax
	jmp	SHORT $LN85@Compress
$LN84@Compress:
	mov	DWORD PTR tv705[ebp], 12		; 0000000cH
$LN85@Compress:
	mov	ecx, DWORD PTR tv705[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _opRes$[ebp]
	add	ecx, DWORD PTR [eax]
	adc	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _opRes$[ebp]
	mov	DWORD PTR tv1102[ebp], eax
	mov	DWORD PTR tv1103[ebp], ecx
	mov	DWORD PTR tv1103[ebp+4], edx
	mov	ecx, DWORD PTR tv1102[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR tv1103[ebp+4]
	ja	SHORT $LN3@Compress
	jb	SHORT $LN99@Compress
	mov	eax, DWORD PTR tv1102[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR tv1103[ebp]
	jae	SHORT $LN3@Compress
$LN99@Compress:
; Line 352
	jmp	SHORT $LN57@Compress
$LN3@Compress:
; Line 353
	jmp	SHORT $LN2@Compress
$LN4@Compress:
; Line 354
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	eax, DWORD PTR _opRes$[ebp]
	mov	DWORD PTR tv1114[ebp], edx
	mov	DWORD PTR tv1115[ebp], eax
	mov	ecx, DWORD PTR tv1114[ebp]
	mov	edx, DWORD PTR tv1115[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN2@Compress
	jb	SHORT $LN100@Compress
	mov	ecx, DWORD PTR tv1114[ebp]
	mov	edx, DWORD PTR tv1115[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN2@Compress
$LN100@Compress:
; Line 355
	jmp	SHORT $LN57@Compress
$LN2@Compress:
; Line 356
	jmp	$LN58@Compress
$LN57@Compress:
; Line 359
	movzx	cx, BYTE PTR _method$[ebp]
	mov	edx, DWORD PTR _opRes$[ebp]
	mov	WORD PTR [edx+20], cx
; Line 360
	mov	DWORD PTR $T72583[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	call	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72583[ebp]
$LN64@Compress:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN110@Compress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN110@Compress:
	DD	7
	DD	$LN109@Compress
$LN109@Compress:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN101@Compress
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN102@Compress
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN103@Compress
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN104@Compress
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN105@Compress
	DD	-168					; ffffff58H
	DD	4
	DD	$LN106@Compress
	DD	-184					; ffffff48H
	DD	4
	DD	$LN107@Compress
$LN107@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN106@Compress:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN105@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN104@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN103@Compress:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN102@Compress:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN101@Compress:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$0:
	lea	ecx, DWORD PTR _inCrcStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$1:
	lea	ecx, DWORD PTR _inStream2$71453[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2:
	mov	eax, DWORD PTR $T72531[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$3:
	lea	ecx, DWORD PTR _outStreamReleaser$[ebp]
	jmp	??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$4:
	mov	eax, DWORD PTR $T72539[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$5:
	mov	eax, DWORD PTR $T72545[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$6:
	mov	eax, DWORD PTR $T72551[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$7:
	mov	eax, DWORD PTR $T72560[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$8:
	lea	ecx, DWORD PTR _outStreamNew$71540[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$9:
	mov	eax, DWORD PTR $T72565[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$10:
	mov	eax, DWORD PTR $T72569[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$11:
	lea	ecx, DWORD PTR _setCoderProps$71580[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$12:
	lea	ecx, DWORD PTR _outStreamNew$71590[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-420]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z ENDP ; NArchive::NZip::CAddCommon::Compress
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z PROC	; CInStreamWithCRC::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\instreamwithcrc.h
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z ENDP	; CInStreamWithCRC::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CInStreamWithCRC@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CInStreamWithCRC@@QAEXXZ PROC			; CInStreamWithCRC::Init, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], -1
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CInStreamWithCRC@@QAEXXZ ENDP			; CInStreamWithCRC::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCRC@CInStreamWithCRC@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCRC@CInStreamWithCRC@@QBEIXZ PROC			; CInStreamWithCRC::GetCRC, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	xor	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCRC@CInStreamWithCRC@@QBEIXZ ENDP			; CInStreamWithCRC::GetCRC
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CInStreamWithCRC@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CInStreamWithCRC@@QBE_KXZ PROC			; CInStreamWithCRC::GetSize, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CInStreamWithCRC@@QBE_KXZ ENDP			; CInStreamWithCRC::GetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ PROC	; CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filtercoder.h
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ ENDP	; CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ PROC	; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@C_OutStrea
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [edx+20]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@C_OutStrea:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ENDP	; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser
_TEXT	ENDS
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@2
$LN10@QueryInter@2:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@2
$LN8@QueryInter@2:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter@2
$LN13@QueryInter@2:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter@2:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter@2
$LN6@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter@2
$LN15@QueryInter@2:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter@2:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter@2
$LN17@QueryInter@2:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter@2:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter@2
$LN9@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter@2:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72645 = -8						; size = 4
$T72644 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72645[ebp], edx
	mov	eax, DWORD PTR $T72645[ebp]
	mov	DWORD PTR $T72644[ebp], eax
	cmp	DWORD PTR $T72644[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T72644[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetHeaderSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ PROC	; NCrypto::NWzAes::CBaseCoder::GetAddPackSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetHeaderSize
	add	eax, 10					; 0000000aH
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ENDP	; NCrypto::NWzAes::CBaseCoder::GetAddPackSize
_TEXT	ENDS
PUBLIC	?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ	; NCrypto::NWzAes::CKeyInfo::GetSaltSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ PROC	; NCrypto::NWzAes::CBaseCoder::GetHeaderSize, COMDAT
; _this$ = ecx
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetSaltSize
	add	eax, 2
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ENDP	; NCrypto::NWzAes::CBaseCoder::GetHeaderSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ PROC	; NCrypto::NWzAes::CKeyInfo::GetSaltSize, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	eax, DWORD PTR [ecx*4+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ENDP	; NCrypto::NWzAes::CKeyInfo::GetSaltSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z PROC	; NCrypto::NWzAes::CBaseCoder::SetKeyMode, COMDAT
; _this$ = ecx
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 103
	cmp	DWORD PTR _mode$[ebp], 1
	jb	SHORT $LN1@SetKeyMode
	cmp	DWORD PTR _mode$[ebp], 3
	jbe	SHORT $LN2@SetKeyMode
$LN1@SetKeyMode:
; Line 104
	xor	al, al
	jmp	SHORT $LN3@SetKeyMode
$LN2@SetKeyMode:
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 106
	mov	al, 1
$LN3@SetKeyMode:
; Line 107
	mov	esp, ebp
	pop	ebp
	ret	4
?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ENDP	; NCrypto::NWzAes::CBaseCoder::SetKeyMode
_TEXT	ENDS
PUBLIC	??_7CInStreamWithCRC@@6B@			; CInStreamWithCRC::`vftable'
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CInStreamWithCRC@@6B@			; CInStreamWithCRC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCInStreamWithCRC@@@8			; CInStreamWithCRC `RTTI Type Descriptor'
PUBLIC	??_R3CInStreamWithCRC@@8			; CInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CInStreamWithCRC@@8			; CInStreamWithCRC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CInStreamWithCRC@@8		; CInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z ; CInStreamWithCRC::QueryInterface
PUBLIC	?AddRef@CInStreamWithCRC@@UAGKXZ		; CInStreamWithCRC::AddRef
PUBLIC	?Release@CInStreamWithCRC@@UAGKXZ		; CInStreamWithCRC::Release
EXTRN	?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z:PROC	; CInStreamWithCRC::Read
EXTRN	?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z:PROC	; CInStreamWithCRC::Seek
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CInStreamWithCRC@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CInStreamWithCRC@@8 DD FLAT:??_R0?AVCInStreamWithCRC@@@8 ; CInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CInStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_R2CInStreamWithCRC@@8
rdata$r	SEGMENT
??_R2CInStreamWithCRC@@8 DD FLAT:??_R1A@?0A@EA@CInStreamWithCRC@@8 ; CInStreamWithCRC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CInStreamWithCRC@@8
rdata$r	SEGMENT
??_R3CInStreamWithCRC@@8 DD 00H				; CInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CInStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCInStreamWithCRC@@@8
_DATA	SEGMENT
??_R0?AVCInStreamWithCRC@@@8 DD FLAT:??_7type_info@@6B@	; CInStreamWithCRC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCInStreamWithCRC@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CInStreamWithCRC@@6B@
rdata$r	SEGMENT
??_R4CInStreamWithCRC@@6B@ DD 00H			; CInStreamWithCRC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCInStreamWithCRC@@@8
	DD	FLAT:??_R3CInStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_7CInStreamWithCRC@@6B@
CONST	SEGMENT
??_7CInStreamWithCRC@@6B@ DD FLAT:??_R4CInStreamWithCRC@@6B@ ; CInStreamWithCRC::`vftable'
	DD	FLAT:?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CInStreamWithCRC@@UAGKXZ
	DD	FLAT:?Release@CInStreamWithCRC@@UAGKXZ
	DD	FLAT:?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CInStreamWithCRC@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInStreamWithCRC@@QAE@XZ PROC			; CInStreamWithCRC::CInStreamWithCRC, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CInStreamWithCRC@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CInStreamWithCRC@@QAE@XZ ENDP			; CInStreamWithCRC::CInStreamWithCRC
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z PROC ; CInStreamWithCRC::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\instreamwithcrc.h
; Line 44
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z ENDP ; CInStreamWithCRC::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CInStreamWithCRC@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CInStreamWithCRC@@UAGKXZ PROC			; CInStreamWithCRC::AddRef, COMDAT
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CInStreamWithCRC@@UAGKXZ ENDP			; CInStreamWithCRC::AddRef
_TEXT	ENDS
PUBLIC	??_GCInStreamWithCRC@@QAEPAXI@Z			; CInStreamWithCRC::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CInStreamWithCRC@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72676 = -8						; size = 4
$T72675 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CInStreamWithCRC@@UAGKXZ PROC			; CInStreamWithCRC::Release, COMDAT
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72676[ebp], edx
	mov	eax, DWORD PTR $T72676[ebp]
	mov	DWORD PTR $T72675[ebp], eax
	cmp	DWORD PTR $T72675[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T72675[ebp]
	call	??_GCInStreamWithCRC@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CInStreamWithCRC@@UAGKXZ ENDP			; CInStreamWithCRC::Release
_TEXT	ENDS
PUBLIC	??1CInStreamWithCRC@@QAE@XZ			; CInStreamWithCRC::~CInStreamWithCRC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCInStreamWithCRC@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCInStreamWithCRC@@QAEPAXI@Z PROC			; CInStreamWithCRC::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CInStreamWithCRC@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCInStreamWithCRC@@QAEPAXI@Z ENDP			; CInStreamWithCRC::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CInStreamWithCRC@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CInStreamWithCRC@@QAE@XZ PROC			; CInStreamWithCRC::~CInStreamWithCRC, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CInStreamWithCRC@@QAE@XZ ENDP			; CInStreamWithCRC::~CInStreamWithCRC
_TEXT	ENDS
PUBLIC	??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CEncoder::`vftable'
PUBLIC	??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CEncoder::`vftable'
PUBLIC	??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CBaseCoder::CBaseCoder
PUBLIC	??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEncoder@NWzAes@NCrypto@@@8		; NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
PUBLIC	??_R3CEncoder@NWzAes@NCrypto@@8			; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEncoder@NWzAes@NCrypto@@8			; NCrypto::NWzAes::CEncoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8	; NCrypto::NWzAes::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8	; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8		; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCoder@NWzAes@NCrypto@@8		; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCoder@NWzAes@NCrypto@@8		; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressFilter@@8		; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressFilter@@@8			; ICompressFilter `RTTI Type Descriptor'
PUBLIC	??_R3ICompressFilter@@8				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressFilter@@8				; ICompressFilter::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICryptoSetPassword@@8		; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICryptoSetPassword@@@8			; ICryptoSetPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoSetPassword@@8			; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoSetPassword@@8			; ICryptoSetPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoSetPassword@@8		; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface
PUBLIC	?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ	; NCrypto::NWzAes::CBaseCoder::AddRef
PUBLIC	?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ	; NCrypto::NWzAes::CBaseCoder::Release
PUBLIC	??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}'
EXTRN	?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ:PROC	; NCrypto::NWzAes::CBaseCoder::Init
EXTRN	?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z:PROC ; NCrypto::NWzAes::CEncoder::Filter
EXTRN	?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword
;	COMDAT ??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCEncoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CEncoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoSetPassword@@8 DD FLAT:??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R2ICryptoSetPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R3ICryptoSetPassword@@8 DD 00H			; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoSetPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoSetPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoSetPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoSetPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICryptoSetPassword@@8 DD FLAT:??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressFilter@@8
rdata$r	SEGMENT
??_R2ICompressFilter@@8 DD FLAT:??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressFilter@@8
rdata$r	SEGMENT
??_R3ICompressFilter@@8 DD 00H				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressFilter@@@8
_DATA	SEGMENT
??_R0?AUICompressFilter@@@8 DD FLAT:??_7type_info@@6B@	; ICompressFilter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressFilter@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressFilter@@8 DD FLAT:??_R0?AUICompressFilter@@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R2CBaseCoder@NWzAes@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R3CBaseCoder@NWzAes@NCrypto@@8 DD 00H		; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCoder@NWzAes@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 DD FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8 DD FLAT:??_R0?AVCEncoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEncoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CEncoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R2CEncoder@NWzAes@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CEncoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R3CEncoder@NWzAes@NCrypto@@8 DD 00H			; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CEncoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEncoder@NWzAes@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCEncoder@NWzAes@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEncoder@NWzAes@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEncoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CEncoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CEncoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CEncoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CEncoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEncoder@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CEncoder::CEncoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEncoder@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CEncoder::CEncoder
_TEXT	ENDS
EXTRN	_IID_ICryptoSetPassword:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::NWzAes::CBaseCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@4
$LN7@QueryInter@4:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@4:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_ICryptoSetPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@4
$LN9@QueryInter@4:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@4:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@4
$LN3@QueryInter@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	xor	eax, eax
$LN5@QueryInter@4:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::NWzAes::CBaseCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ PROC		; NCrypto::NWzAes::CBaseCoder::AddRef, COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ENDP		; NCrypto::NWzAes::CBaseCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z	; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72698 = -8						; size = 4
$T72697 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ PROC		; NCrypto::NWzAes::CBaseCoder::Release, COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72698[ebp], edx
	mov	eax, DWORD PTR $T72698[ebp]
	mov	DWORD PTR $T72697[ebp], eax
	cmp	DWORD PTR $T72697[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T72697[ebp]
	call	??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ENDP		; NCrypto::NWzAes::CBaseCoder::Release
_TEXT	ENDS
PUBLIC	??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z PROC		; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z ENDP		; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CKeyInfo::~CKeyInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ PROC		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ ENDP		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CKeyInfo::~CKeyInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CKeyInfo::~CKeyInfo
_TEXT	ENDS
PUBLIC	??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CEncoder::`vftable'
PUBLIC	??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CEncoder::`vftable'
PUBLIC	??0CCipher@NZip@NCrypto@@QAE@XZ			; NCrypto::NZip::CCipher::CCipher
PUBLIC	??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEncoder@NZip@NCrypto@@@8		; NCrypto::NZip::CEncoder `RTTI Type Descriptor'
PUBLIC	??_R3CEncoder@NZip@NCrypto@@8			; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEncoder@NZip@NCrypto@@8			; NCrypto::NZip::CEncoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8		; NCrypto::NZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8		; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCipher@NZip@NCrypto@@@8		; NCrypto::NZip::CCipher `RTTI Type Descriptor'
PUBLIC	??_R3CCipher@NZip@NCrypto@@8			; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCipher@NZip@NCrypto@@8			; NCrypto::NZip::CCipher::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface
PUBLIC	?AddRef@CCipher@NZip@NCrypto@@UAGKXZ		; NCrypto::NZip::CCipher::AddRef
PUBLIC	?Release@CCipher@NZip@NCrypto@@UAGKXZ		; NCrypto::NZip::CCipher::Release
PUBLIC	??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}'
PUBLIC	?Release@CCipher@NZip@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}'
EXTRN	?Init@CCipher@NZip@NCrypto@@UAGJXZ:PROC		; NCrypto::NZip::CCipher::Init
EXTRN	?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z:PROC	; NCrypto::NZip::CEncoder::Filter
EXTRN	?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::NZip::CCipher::CryptoSetPassword
;	COMDAT ??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCEncoder@NZip@NCrypto@@@8
	DD	FLAT:??_R3CEncoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R2CCipher@NZip@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R3CCipher@NZip@NCrypto@@8 DD 00H			; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCipher@NZip@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCCipher@NZip@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCipher@NZip@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 DD FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8 DD FLAT:??_R0?AVCEncoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEncoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CEncoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R2CEncoder@NZip@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8 ; NCrypto::NZip::CEncoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CEncoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R3CEncoder@NZip@NCrypto@@8 DD 00H			; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CEncoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEncoder@NZip@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCEncoder@NZip@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZip::CEncoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEncoder@NZip@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@ DD 00H	; NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEncoder@NZip@NCrypto@@@8
	DD	FLAT:??_R3CEncoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CEncoder::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CEncoder::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CCipher@NZip@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CEncoder@NZip@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEncoder@NZip@NCrypto@@QAE@XZ PROC			; NCrypto::NZip::CEncoder::CEncoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCipher@NZip@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEncoder@NZip@NCrypto@@QAE@XZ ENDP			; NCrypto::NZip::CEncoder::CEncoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::NZip::CCipher::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipcrypto.h
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@5
$LN7@QueryInter@5:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@5:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_ICryptoSetPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@5
$LN9@QueryInter@5:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@5:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@5
$LN3@QueryInter@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	xor	eax, eax
$LN5@QueryInter@5:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::NZip::CCipher::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCipher@NZip@NCrypto@@UAGKXZ PROC		; NCrypto::NZip::CCipher::AddRef, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ENDP		; NCrypto::NZip::CCipher::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCipher@NZip@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T72721 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCipher@NZip@NCrypto@@UAGKXZ PROC		; NCrypto::NZip::CCipher::Release, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72721[ebp], edx
	mov	eax, DWORD PTR $T72721[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@5:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCipher@NZip@NCrypto@@UAGKXZ ENDP		; NCrypto::NZip::CCipher::Release
_TEXT	ENDS
PUBLIC	??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ ; NArchive::NZip::CLzmaEncoder::`vftable'
PUBLIC	??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ ; NArchive::NZip::CLzmaEncoder::`vftable'
PUBLIC	??0ICompressSetCoderProperties@@QAE@XZ		; ICompressSetCoderProperties::ICompressSetCoderProperties
PUBLIC	??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ ; NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLzmaEncoder@NZip@NArchive@@@8		; NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
PUBLIC	??_R3CLzmaEncoder@NZip@NArchive@@8		; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLzmaEncoder@NZip@NArchive@@8		; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8	; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@ICompressSetCoderProperties@@8	; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetCoderProperties@@@8		; ICompressSetCoderProperties `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetCoderProperties@@8		; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetCoderProperties@@8		; ICompressSetCoderProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetCoderProperties@@8	; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CLzmaEncoder::QueryInterface
PUBLIC	?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CLzmaEncoder::AddRef
PUBLIC	?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CLzmaEncoder::Release
PUBLIC	??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ ; NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ	; [thunk]:NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}'
PUBLIC	?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ	; [thunk]:NArchive::NZip::CLzmaEncoder::Release`adjustor{4}'
;	COMDAT ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@
rdata$r	SEGMENT
??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ DD 00H ; NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLzmaEncoder@NZip@NArchive@@@8
	DD	FLAT:??_R3CLzmaEncoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetCoderProperties@@8 DD FLAT:??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R2ICompressSetCoderProperties@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R3ICompressSetCoderProperties@@8 DD 00H		; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetCoderProperties@@@8
_DATA	SEGMENT
??_R0?AUICompressSetCoderProperties@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetCoderProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetCoderProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetCoderProperties@@8 DD FLAT:??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8 DD FLAT:??_R0?AVCLzmaEncoder@NZip@NArchive@@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLzmaEncoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CLzmaEncoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CLzmaEncoder@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetCoderProperties@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLzmaEncoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CLzmaEncoder@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CLzmaEncoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCLzmaEncoder@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLzmaEncoder@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ DD 00H ; NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLzmaEncoder@NZip@NArchive@@@8
	DD	FLAT:??_R3CLzmaEncoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@
CONST	SEGMENT
??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ DD FLAT:??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ ; NArchive::NZip::CLzmaEncoder::`vftable'
	DD	FLAT:?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
	DD	FLAT:?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@
CONST	SEGMENT
??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ DD FLAT:??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ ; NArchive::NZip::CLzmaEncoder::`vftable'
	DD	FLAT:?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLzmaEncoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLzmaEncoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLzmaEncoder::CLzmaEncoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetCoderProperties@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLzmaEncoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLzmaEncoder::CLzmaEncoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CLzmaEncoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipaddcommon.cpp
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@6
$LN7@QueryInter@6:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@6:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ICompressSetCoderProperties
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@6
$LN9@QueryInter@6:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@6:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@6
$LN3@QueryInter@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	xor	eax, eax
$LN5@QueryInter@6:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CLzmaEncoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CLzmaEncoder::AddRef, COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CLzmaEncoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72736 = -8						; size = 4
$T72735 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CLzmaEncoder::Release, COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72736[ebp], edx
	mov	eax, DWORD PTR $T72736[ebp]
	mov	DWORD PTR $T72735[ebp], eax
	cmp	DWORD PTR $T72735[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T72735[ebp]
	call	??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CLzmaEncoder::Release
_TEXT	ENDS
PUBLIC	??1CLzmaEncoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLzmaEncoder::~CLzmaEncoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CLzmaEncoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLzmaEncoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLzmaEncoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLzmaEncoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLzmaEncoder::~CLzmaEncoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLzmaEncoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLzmaEncoder::~CLzmaEncoder
_TEXT	ENDS
PUBLIC	??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CKeyInfo::CKeyInfo
PUBLIC	??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
PUBLIC	??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
PUBLIC	??0ICryptoSetPassword@@QAE@XZ			; ICryptoSetPassword::ICryptoSetPassword
PUBLIC	??0ICompressFilter@@QAE@XZ			; ICompressFilter::ICompressFilter
PUBLIC	??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
PUBLIC	??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
EXTRN	??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ:PROC		; NCrypto::NWzAes::CAesCtr2::CAesCtr2
;	COMDAT ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0
__ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ PROC		; NCrypto::NWzAes::CBaseCoder::CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICryptoSetPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ	; NCrypto::NWzAes::CKeyInfo::CKeyInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ	; NCrypto::NWzAes::CAesCtr2::CAesCtr2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
__ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ ENDP		; NCrypto::NWzAes::CBaseCoder::CBaseCoder
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CKeyInfo::CKeyInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CKeyInfo::CKeyInfo
_TEXT	ENDS
PUBLIC	??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`vftable'
PUBLIC	??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CCipher::`vftable'
PUBLIC	??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
PUBLIC	??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
;	COMDAT ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ DD 00H	; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CCipher::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CCipher@NZip@NCrypto@@UAGJXZ
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCipher@NZip@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCipher@NZip@NCrypto@@QAE@XZ PROC			; NCrypto::NZip::CCipher::CCipher, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICryptoSetPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCipher@NZip@NCrypto@@QAE@XZ ENDP			; NCrypto::NZip::CCipher::CCipher
_TEXT	ENDS
PUBLIC	??_7ICompressSetCoderProperties@@6B@		; ICompressSetCoderProperties::`vftable'
PUBLIC	??_R4ICompressSetCoderProperties@@6B@		; ICompressSetCoderProperties::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetCoderProperties@@6B@
rdata$r	SEGMENT
??_R4ICompressSetCoderProperties@@6B@ DD 00H		; ICompressSetCoderProperties::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetCoderProperties@@@8
	DD	FLAT:??_R3ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetCoderProperties@@6B@
CONST	SEGMENT
??_7ICompressSetCoderProperties@@6B@ DD FLAT:??_R4ICompressSetCoderProperties@@6B@ ; ICompressSetCoderProperties::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetCoderProperties@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetCoderProperties@@QAE@XZ PROC		; ICompressSetCoderProperties::ICompressSetCoderProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetCoderProperties@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetCoderProperties@@QAE@XZ ENDP		; ICompressSetCoderProperties::ICompressSetCoderProperties
_TEXT	ENDS
PUBLIC	??_7ICompressFilter@@6B@			; ICompressFilter::`vftable'
PUBLIC	??_R4ICompressFilter@@6B@			; ICompressFilter::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressFilter@@6B@
rdata$r	SEGMENT
??_R4ICompressFilter@@6B@ DD 00H			; ICompressFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressFilter@@@8
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressFilter@@6B@
CONST	SEGMENT
??_7ICompressFilter@@6B@ DD FLAT:??_R4ICompressFilter@@6B@ ; ICompressFilter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressFilter@@QAE@XZ PROC				; ICompressFilter::ICompressFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressFilter@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressFilter@@QAE@XZ ENDP				; ICompressFilter::ICompressFilter
_TEXT	ENDS
PUBLIC	??_7ICryptoSetPassword@@6B@			; ICryptoSetPassword::`vftable'
PUBLIC	??_R4ICryptoSetPassword@@6B@			; ICryptoSetPassword::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICryptoSetPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoSetPassword@@6B@ DD 00H			; ICryptoSetPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoSetPassword@@@8
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoSetPassword@@6B@
CONST	SEGMENT
??_7ICryptoSetPassword@@6B@ DD FLAT:??_R4ICryptoSetPassword@@6B@ ; ICryptoSetPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoSetPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoSetPassword@@QAE@XZ PROC			; ICryptoSetPassword::ICryptoSetPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoSetPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoSetPassword@@QAE@XZ ENDP			; ICryptoSetPassword::ICryptoSetPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T72778 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72778[ebp], ecx
	mov	edx, DWORD PTR $T72778[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ PROC		; CMyComPtr<ICompressFilter>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressFilter>::operator!
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T72826 = -32						; size = 4
$T72825 = -28						; size = 4
_i$71763 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$71763[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$71763[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71763[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$71763[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72826[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72826[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$71763[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72826[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T72825[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T72825[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T72826[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72844 = -28						; size = 4
$T72843 = -24						; size = 4
_i$71783 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71783[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71783[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71783[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71783[ebp], eax
	mov	ecx, DWORD PTR _i$71783[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72844[ebp], edx
	mov	eax, DWORD PTR $T72844[ebp]
	mov	DWORD PTR $T72843[ebp], eax
	cmp	DWORD PTR $T72843[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T72843[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T72856 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@E@@QAE@ABV0@@Z PROC			; CRecordVector<unsigned char>::CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@E@@QBEIXZ		; CRecordVector<unsigned char>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72856[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T72856[ebp]
	mov	DWORD PTR [ecx], edx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 44
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@E@@QAE@ABV0@@Z ENDP			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@E@@QBEIXZ PROC			; CRecordVector<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@E@@QBEIXZ ENDP			; CRecordVector<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@E@@QAE@XZ
_TEXT	SEGMENT
$T72861 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@E@@QAE@XZ PROC			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72861[ebp], ecx
	mov	edx, DWORD PTR $T72861[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@E@@QAE@XZ ENDP			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@E@@QAEAAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@E@@QAEAAEI@Z PROC			; CRecordVector<unsigned char>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@E@@QAEAAEI@Z ENDP			; CRecordVector<unsigned char>::operator[]
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T72879 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72879[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72879[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T72882 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72882[ebp], ecx
	mov	edx, DWORD PTR $T72882[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z PROC ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ENDP ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CLzmaEncoder::QueryInterface
?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCipher@NZip@NCrypto@@UAGKXZ	; NCrypto::NZip::CCipher::AddRef
?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface
?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ PROC	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release
?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ENDP	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ PROC	; [thunk]:NArchive::NZip::CLzmaEncoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::Release
?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ ENDP	; [thunk]:NArchive::NZip::CLzmaEncoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef
?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ PROC	; [thunk]:NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::AddRef
?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ ENDP	; [thunk]:NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCipher@NZip@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCipher@NZip@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCipher@NZip@NCrypto@@UAGKXZ	; NCrypto::NZip::CCipher::Release
?Release@CCipher@NZip@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}'
_TEXT	ENDS
END
